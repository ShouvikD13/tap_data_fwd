/*  Program           : SFO_CAL_DS_SMRY                                       */
/*																																						*/
/*  Input             : FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_EBA_MTCH_ACT_NO																		*/
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                                                                            */
/*  Output            : FFO_COUNT                                             */
/*                      FFO_1 TO FFO_50                                       */
/*                                                                            */
/*  Description       : To calculate values needed to generate payoff summary */
/*                                                                            */
/*  Log               : 1.0   08-Apr-2009   Vidyayini Krish                   */
/*  Log               : 1.1   12-Aug-2009   Vidyayini Krish                   */
/*  Log               : 1.2   29-Oct-2009   Vidyayini Krish                   */
/*  Log               : 1.3   29-Mar-2011   Sandip Tambe											*/
/*  Log               : 1.4   08-Dec-2011   Sachin Birje											*/
/*  Log               : 1.5   10-Aug-2015   Anand Dhopte                      */
/*  Log								:	VQC   09-Sep-2016		Swapnil More											*/ 
/*  Log               : 1.6   26-Mar-2020   Mrinal Kishore                    */
/*  Log               : TOL   09-Aug-2023   Agam                              */
/******************************************************************************/
/*  1.0  -  New release                                                       */
/*  1.1  -  Mid series contracts will be shown from 10 days prior to  the     */
/*          expiry of nearest month contract on front end.                    */
/*  1.2  -  Fix of ver 1.1                                                    */
/*	1.3  -  CRCSN44510 Drvtv_Rstrctrng[OPTIMIZATION using Indexes]						*/
/*	1.4  -  View to FML CHanges                                               */
/*  1.5  -  Contract Master and Trade Quote Table Merger Changes              */
/*	VQC	 -	Version Quality Control 																					*/  
/*  1.6  -  Resize the array size [RNA Issue on derivative world page]        */
/*  TOL  -  Tux on Linux                                                      */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fo_fml_def.h>
/** #include <fo_view_def.h> ** Ver 1.4 **/
#include <fo_view_def.h>  /** Ver 1.4 **/
#include <fml_rout.h>       /** Added for Ver 1.4 */ 
#include <fn_log.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
/** #include <fn_session.h>		*** Commented in VQC **/ 
#include <fn_read_debug_lvl.h>
#include <time.h>
#define SIZE_OF_ARRAY 200					/* Ver 1.6 resized to 200 from 100 */


int fn_buy_call( char *c_ServiceName,
								 struct vw_cntrt_gen_inf *ptr_st_cntrt_gen_inf,
                 double* d_premi,                 
								 long* l_interval,
								 char c_exg_stts,
                 struct vw_err_msg *ptr_st_err_msg );

int fn_sell_call( char *c_ServiceName,
                  struct vw_cntrt_gen_inf *ptr_st_cntrt_gen_inf, 
									double* d_premi,
									long* l_interval,
									char c_exg_stts,
                  struct vw_err_msg *ptr_st_err_msg ) ;

int fn_sell_put( char *c_ServiceName,
								 struct vw_cntrt_gen_inf *ptr_st_cntrt_gen_inf,
								 double* d_premi,
								 long* interval,
								 char c_exg_stts,
								 struct vw_err_msg *ptr_st_err_msg ) ;

int fn_cal_premium(  char *c_ServiceName, 
										 struct vw_cntrt_gen_inf *ptr_st_cntrt_gen_inf,
									   double* d_premi,
										 long* interval,
										 char c_exg_stts,
									   struct vw_err_msg *ptr_st_err_msg ); 

int fn_get_ltqrt(	char *c_ServiceName,
                 	struct vw_cntrt_gen_inf *ptr_st_cntrt_gen_inf, 
                 	struct vw_err_msg *ptr_st_err_msg );

int fn_strk_prc( char *c_ServiceName,
							   struct vw_cntrt_gen_inf *ptr_st_cntrt_gen_inf,
								 long[SIZE_OF_ARRAY],
								 long* no_of_rows,
								 char c_nearest_flg, 
								 struct vw_err_msg *ptr_st_err_msg ); 	

int fn_buy_put( char *c_ServiceName,
                 struct vw_cntrt_gen_inf *ptr_st_cntrt_gen_inf,
                 double* d_premi,
								 long* interval,
								 char c_exg_stts,
                 struct vw_err_msg *ptr_st_err_msg );

long minimum( long li_val1,
							long li_val2 );

/* Contract has to be traded within this time difference to be enabled for IS */

long l_sps_config_tm = 0; 

void SFO_CAL_DS_SMRY( TPSVCINFO *rqst )
{
	/* Declaring and Initializing Variables */

	FBFR32 *ptr_fml_Ibuf;
	FBFR32 *ptr_fml_Obuf;

	char c_ServiceName[33];
	varchar c_err_msg[256];			/*** Changed datatype from char[] to varhcar[] ***/
/*char c_msg[256]; 						Commented in VQC */
	char c_strtgy_typ[4];
	int i_returncode;
/*int i_trnsctn;							Commented in VQC */
	int i_err[60]; 						
/*int i_ferr[60];							Commented in VQC */
  int i_cnt;
	/***	Commented in VQC **
	int i_ip_len;						
	int i_op_len;							
	int	i_record_cnt;	
	****/		
	int	i_counter = 0;
	int i_count		= 0;
	int i_date_diff = 0;

	char c_strk_prc[50][SIZE_OF_ARRAY];
	char c_premium[50][SIZE_OF_ARRAY];
	char c_break_pt[50][SIZE_OF_ARRAY];
	char c_break_ptl[50][SIZE_OF_ARRAY];
	char c_break_ptu[50][SIZE_OF_ARRAY];
	/*** Commented in VQC ***
	char c_break_pt2[50][SIZE_OF_ARRAY];
	char c_break_pt4[50][SIZE_OF_ARRAY];
	char c_break_pt6[50][SIZE_OF_ARRAY];
	****/
	char c_total_cost[50][SIZE_OF_ARRAY];
	char c_max_profit[50][SIZE_OF_ARRAY];
	/*** Commented in VQC ****
	char c_max_profit_at_exp2[50][SIZE_OF_ARRAY];
	char c_max_profit_at_exp4[50][SIZE_OF_ARRAY];
	char c_max_profit_at_exp6[50][SIZE_OF_ARRAY];
	****/	
	char c_max_loss[50][SIZE_OF_ARRAY];
	/*** Commented in VQC
	char c_premib[SIZE_OF_ARRAY];								
  char c_premis[SIZE_OF_ARRAY];
	****/									
	char c_cash_inflw[50][SIZE_OF_ARRAY];
	char c_cash_outflw[50][SIZE_OF_ARRAY];
	char c_dwn_side_protec[50][SIZE_OF_ARRAY];
	char c_up_side_protec[50][SIZE_OF_ARRAY];
	char c_flg[50];
	char c_fum_flg[50];
	char c_fcm_flg[50];
	char c_var_at[3];
	char c_strnull[2];
	char c_action1[20];
	char c_action2[20];
	char c_xchng_cd[4];
	/**** Commented in VQC ***
	char c_month[4];
	char c_cur_month[4];
	*****/
	char c_expry_dt[5][LEN_DATE];
	char c_fut_exer_typ = 'E';
	char c_fut_opt_typ = '*';
	char c_prd_fut = 'F';
	char c_prd_opt = 'O';
	char c_nearest_flg = 'N';
	char c_ctgry_indstk = ' ';
	char c_opt_typ[SIZE_OF_ARRAY];

	double d_premium[50];
	double d_break_pt[50];
	double d_break_ptl[50];
	double d_break_ptu[50];
	/*** Commented in VQC ***
	double d_break_pt2[50];	
	double d_break_pt4[50];
	double d_break_pt6[50];
	****/
	double d_total_cost[50];
	double d_max_profit[50];
	/*** Commented in VQC ***
	double d_max_profit_at_exp2[50];
	double d_max_profit_at_exp4[50];
	double d_max_profit_at_exp6[50];
	****/
	double d_max_loss[50];
	double d_premi = 0.0;
	double d_dwn_side_protec[50];
	double d_up_side_protec[50];
	double d_cash_inflw[50];
	double d_cash_outflw[50];

	long l_strk_prc[SIZE_OF_ARRAY];
	long l_strk_prc_c[SIZE_OF_ARRAY];
	long l_strk_prc_p[SIZE_OF_ARRAY];
	long l_fut_strk_prc[SIZE_OF_ARRAY];
	long l_strike_prc[50];
	long l_diff_time = 0;
	long l_lot_sz[50];
	long no_of_records = 0;
	long no_of_records_c = 0;
	long no_of_records_p = 0;
	long no_of_rows = 0;
	long l_spot_prc = 0;
	long l_lot_size = 0;
	long l_interval = 0;


	
	/***	Commented in VQC
	EXEC SQL INCLUDE "table/fcm_fo_cntrct_mstr.h";	
	EXEC SQL INCLUDE "table/ftq_fo_trd_qt.h"; 
	***/ 
	EXEC SQL INCLUDE "table/sps_strtgy_payoff_summary.h";
	/*** Commented in VQC		
	EXEC SQL INCLUDE "table/ltq_trd_qt.h";	
	EXEC SQL INCLUDE "table/fum_fo_undrlyng_mstr.h";	
	***/	
	EXEC SQL INCLUDE "table/exg_xchng_mstr.h";	
	

	EXEC SQL BEGIN DECLARE SECTION;
		struct vw_usr_prfl st_usr_prfl;
		struct vw_cntrt_gen_inf st_cntrct_gen_inf;
    varchar c_expiry_dt [ LEN_DATE ];
	EXEC SQL END DECLARE SECTION;

	struct vw_err_msg st_err_msg;

	/* Getting data from input buffer */
	ptr_fml_Ibuf = (FBFR32 *)rqst->data;
	strcpy( c_ServiceName, rqst->name );

	/* Debug level is being read */
	INITDBGLVL(c_ServiceName);



	/* Getting from FMLS into user profile structure */

  /*** COmmented in Ver 1.4 *************************
  i_returncode = Fvftos32( ptr_fml_Ibuf, 
                           (char *) &st_usr_prfl, 
                           "vw_usr_prfl" );
	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg.arr  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
 
	* Getting from FMLS into structure for contract general information *
  i_returncode = Fvftos32( ptr_fml_Ibuf, 
                           (char *) &st_cntrct_gen_inf, 
                           "vw_cntrt_gen_inf" );
	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg.arr  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
  ***************** Ver 1.4 Ends Here *************/

  /***** Ver 1.4 Starts Here ****************/
  i_returncode = fn_unpack_fmltovar_dflt ( c_ServiceName,
                                      c_err_msg.arr,
                                      ptr_fml_Ibuf,
                                      5,
                                      FFO_USR_ID,(char *)st_usr_prfl.c_user_id, "NULL",
                                      FFO_SSSN_ID,(char*)&st_usr_prfl.l_session_id, "NULL",
                                      FFO_EBA_MTCH_ACT_NO,(char*)st_usr_prfl.c_cln_mtch_accnt, "NULL",
                                      FFO_PIPE_ID, (char*)st_usr_prfl.c_pipe_id, "*",
                                      FFO_CHANNEL, (char*)st_usr_prfl.c_rout_crt, "NULL"
                                     );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }                                    

  /***** Ver 1.4 ends here *****************/
  
	/* Initialising the variables used */

	MEMSET(c_expiry_dt);
	memset(c_strtgy_typ,'\0',sizeof(c_strtgy_typ));
	memset(c_xchng_cd,'\0',sizeof(c_xchng_cd));
	/**** Commented in VQC ***
	memset(c_month,'\0',sizeof(c_month));
	memset(c_cur_month,'\0',sizeof(c_cur_month));
	*****/
	memset( c_strk_prc,'\0',sizeof(c_strk_prc) );
  memset( c_premium,'\0',sizeof(c_premium) );
  memset( c_break_pt,'\0',sizeof(c_break_pt) );
  memset( c_break_ptl,'\0',sizeof(c_break_ptl) );
  memset( c_break_ptu,'\0',sizeof(c_break_ptu) );
  /**** Commented in VQC ****
	memset( c_break_pt2,'\0',sizeof(c_break_pt2) );
  memset( c_break_pt4,'\0',sizeof(c_break_pt4) );
  memset( c_break_pt6,'\0',sizeof(c_break_pt6) );
	*****/	
  memset( c_total_cost,'\0',sizeof(c_total_cost) );
  memset( c_max_profit,'\0',sizeof(c_max_profit) );
  /**** Commented in VQC ****
	memset( c_max_profit_at_exp2,'\0',sizeof(c_max_profit_at_exp2) );
  memset( c_max_profit_at_exp4,'\0',sizeof(c_max_profit_at_exp4) );
  memset( c_max_profit_at_exp6,'\0',sizeof(c_max_profit_at_exp6) );
	*****/
  memset( c_max_loss,'\0',sizeof(c_max_loss) );
  memset( c_var_at,'\0',sizeof(c_var_at) );
  memset( c_strnull,'\0',sizeof(c_strnull) );
  memset( c_action1,'\0',sizeof(c_action1) );
  memset( c_action2,'\0',sizeof(c_action2) );
  memset( c_cash_outflw,'\0',sizeof(c_cash_outflw) );
  memset( c_expry_dt,'\0',sizeof(c_expry_dt) );
	memset( c_opt_typ,'\0',sizeof(c_opt_typ) );
  MEMSET(sql_sps_action1);
  MEMSET(sql_sps_action2);

	for( i_counter = 0; i_counter < 50; i_counter++ )  /* <= changed to < in Ver TOL */
  {
    d_premium[i_counter] = 0.0;
    d_break_pt[i_counter] = 0.0;
    d_break_ptl[i_counter] = 0.0;
    d_break_ptu[i_counter] = 0.0;
 		/*** Coommented in VQC 
		d_break_pt2[i_counter] = 0.0;						
  	d_break_pt4[i_counter] = 0.0;					
 	 	d_break_pt6[i_counter] = 0.0;											
		****/	
    d_total_cost[i_counter] = 0.0;
    d_max_profit[i_counter] = 0.0;
 		/*** Commented in VQC 
		d_max_profit_at_exp2[i_counter] = 0.0;
  	d_max_profit_at_exp4[i_counter] = 0.0;
  	d_max_profit_at_exp6[i_counter] = 0.0;
		***/
    d_max_loss[i_counter] = 0.0;
    d_dwn_side_protec[i_counter] = 0.0;
    d_up_side_protec[i_counter] = 0.0;
    d_cash_inflw[i_counter] = 0.0;
    d_cash_outflw[i_counter] = 0.0;
    l_lot_sz[i_counter] = 0;
    l_strike_prc[i_counter] = 0;
    l_strk_prc[i_counter] = 0;
		l_strk_prc_c[i_counter] = 0;
		l_strk_prc_p[i_counter] = 0;
    l_fut_strk_prc[i_counter] = 0;
  }

	strcpy(c_var_at,"at");
  strcpy(c_strnull,"");

	/* Initializing output buffer */

	ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*10 );

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31020", TPMSG, c_err_msg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /* Reading data in FMLs obtained from ASP */

	if(Fget32(ptr_fml_Ibuf,FFO_RISK_TYP,0,(char *)c_strtgy_typ,0) == -1)
  {
      fn_errlog( c_ServiceName, "S31025", FMLMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	if(Fget32(ptr_fml_Ibuf,FFO_XCHNG_CD,0,(char *)st_cntrct_gen_inf.c_xchng_cd,0) == -1)
  {
    fn_errlog( c_ServiceName, "S31030", FMLMSG, c_err_msg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  if(Fget32(ptr_fml_Ibuf,FFO_UNDRLYNG,0,(char *)st_cntrct_gen_inf.c_undrlyng,0) == -1)
  {
    fn_errlog( c_ServiceName, "S31035", FMLMSG, c_err_msg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  if(Fget32(ptr_fml_Ibuf,FFO_EXPRY_DT,0,(char *)c_expiry_dt.arr,0) == -1)
  {
		fn_errlog( c_ServiceName, "S31040", FMLMSG, c_err_msg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	/* First payoff summary will take near month expiry date only. */
	/* When we display the payoff summary; we will give a drop down to choose an expiry date. */

	/**** VQC Starts ****/
	
	EXEC SQL
       SELECT  FTQ_EXPRY_DT
       INTO   :c_expry_dt
       FROM    (
                SELECT distinct(FTQ_EXPRY_DT)
                FROM   FTQ_FO_TRD_QT
                WHERE  FTQ_XCHNG_CD = :st_cntrct_gen_inf.c_xchng_cd
                AND    FTQ_PRDCT_TYP = 'F'
                AND    FTQ_UNDRLYNG = :st_cntrct_gen_inf.c_undrlyng
                AND    FTQ_EXPRY_DT >= trunc(sysdate)
                ORDER BY FTQ_EXPRY_DT)
      WHERE ROWNUM < 3;

		no_of_records = sqlca.sqlerrd[2];

  	if(( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
  	{
     	fn_errlog( c_ServiceName, "S31045", SQLMSG, c_err_msg.arr  );
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
     	tpfree ( ( char * ) ptr_fml_Obuf );                  
     	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
  	if( SQLCODE == NO_DATA_FOUND && sqlca.sqlerrd[2] == 0 )
  	{
    	strcpy( c_err_msg.arr,"No records found for this underlying" );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	tpfree ( ( char * ) ptr_fml_Obuf );                
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
		
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName, "c_expry_dt[0]:%s", c_expry_dt[0]);
			fn_userlog(c_ServiceName, "c_expry_dt[1]:%s", c_expry_dt[1]);
		} 


	/**** VQC Ends *****/	

	if( strcmp(c_expiry_dt.arr,"") == 0 )
	{

  /*** Commented in Ver 1.5 ***
	EXEC SQL SELECT min(to_date(FCM_EXPRY_DT,'dd-Mon-YYYY'))
             INTO   :c_expiry_dt
             FROM   FCM_FO_CNTRCT_MSTR
					 	 WHERE  FCM_XCHNG_CD = :st_cntrct_gen_inf.c_xchng_cd	** Ver 1.3 **
						 AND    FCM_PRDCT_TYP = 'F'														** Ver 1.3 ** 
						 AND    FCM_UNDRLYNG = :st_cntrct_gen_inf.c_undrlyng
						 AND    FCM_EXPRY_DT >= trunc(sysdate);  * ver 1.2 *
 
  ***/
  
	/**** VQC Commented this query ********
	*** Ver 1.5 Starts ***

  EXEC SQL SELECT min(to_date(FTQ_EXPRY_DT,'dd-Mon-YYYY'))
             INTO   :c_expiry_dt
             FROM   FTQ_FO_TRD_QT     
             WHERE  FTQ_XCHNG_CD = :st_cntrct_gen_inf.c_xchng_cd 
             AND    FTQ_PRDCT_TYP = 'F'             
             AND    FTQ_UNDRLYNG = :st_cntrct_gen_inf.c_undrlyng
             AND    FTQ_EXPRY_DT >= trunc(sysdate);  

  *** Ver 1.5 Ends   ***
 
		if(( SQLCODE != 0 ) )
  	{
    	fn_errlog( c_ServiceName, "S31050", SQLMSG, c_err_msg.arr  );
			strcpy(c_err_msg.arr,"Stock not available");
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
	************* VQC ***************/

		strcpy(c_expiry_dt.arr, c_expry_dt[0]);			/** Added in VQC **/	
		
    if(DEBUG_MSG_LVL_0)
    {
     fn_userlog(c_ServiceName, " FTQ MIN Expiry Date :%s:", c_expiry_dt.arr);
    }
	}

	/* First payoff summary will take default lot size as miniumum lot size */ 
	/* When we display the payoff summary; we will give a drop down to choose an expiry date. */
	/* Lot size will have to be same for all orders of a particular strategy */

	if(Fget32(ptr_fml_Ibuf,FFO_MIN_LOT_QTY,0,(char *)&l_lot_size,0) == -1)
  {

    if(Ferror32 != FNOTPRES)
    {
      fn_errlog( c_ServiceName, "S31055", FMLMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

    }

    if(Ferror32 == FNOTPRES)
    {
			l_lot_size = 0;
    }
  }

	strcpy( st_cntrct_gen_inf.c_expry_dt,(char *)c_expiry_dt.arr );
  strcpy ( ( char * )c_expiry_dt.arr, st_cntrct_gen_inf.c_expry_dt );
  SETLEN ( c_expiry_dt );

	if(DEBUG_MSG_LVL_5)
	{
  	fn_userlog( c_ServiceName, "User id				:%s:", 
																	st_usr_prfl.c_user_id );
  	fn_userlog( c_ServiceName, "Session id		:%ld:", 
																	st_usr_prfl.l_session_id );
  	fn_userlog( c_ServiceName, "Match Account	:%s:", 
																	st_usr_prfl.c_cln_mtch_accnt );
  	fn_userlog( c_ServiceName, "Exchange code :%s:", 
																	st_cntrct_gen_inf.c_xchng_cd );
  	fn_userlog( c_ServiceName, "Underlyng     :%s:", 
																	st_cntrct_gen_inf.c_undrlyng );
  	fn_userlog( c_ServiceName, "Expiry date   :%s:", 
																	c_expiry_dt.arr );
		fn_userlog( c_ServiceName, "Investment Strategy :%s:",c_strtgy_typ );
	}

	/* Session check */
	i_returncode = fn_chk_sssn( c_ServiceName,
                                &st_usr_prfl,
                                &st_err_msg ) ;

  if ( i_returncode == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


	EXEC SQL
         SELECT SPS_ACTION1,
                SPS_ACTION2,
								SPS_STRIKE1,
								SPS_STRIKE2,
								SPS_PREMIUM1,
								SPS_PREMIUM2,
                SPS_BRK_POINT,
                SPS_BRK_POINT_UP,
                SPS_TOTAL_COST,
                SPS_MAX_LOSS,
                SPS_MAX_PROFIT,
                SPS_ROW_COUNT,
                SPS_CASH_FLOW,
                SPS_UP_DWN_PRTCT,
								SPS_CONFIG_TM
				 INTO   :sql_sps_action1,
								:sql_sps_action2,
								:sql_sps_strike1,
								:sql_sps_strike2,
								:sql_sps_premium1,
								:sql_sps_premium2,
								:sql_sps_brk_point,
								:sql_sps_brk_point_up,
								:sql_sps_total_cost,
								:sql_sps_max_loss,
								:sql_sps_max_profit,
								:sql_sps_row_count,
								:sql_sps_cash_flow,
								:sql_sps_up_dwn_prtct,
								:l_sps_config_tm
         FROM   SPS_STRTGY_PAYOFF_SUMMARY
         WHERE  SPS_CLASS_TYP = :c_strtgy_typ;			


  if(( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
  {
    fn_errlog( c_ServiceName, "S31060", SQLMSG, c_err_msg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
		tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}	

	
	SETLEN(sql_sps_action1);
	SETLEN(sql_sps_action2);

	if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"Configured time is :%d:",l_sps_config_tm);
  }

	EXEC SQL
			 SELECT EXG_CRRNT_STTS,
							EXG_EXTND_MRKT_STTS 
			 INTO   :sql_exg_crrnt_stts,
							:sql_exg_extnd_mrkt_stts
			 FROM   EXG_XCHNG_MSTR
			 WHERE  EXG_XCHNG_CD = 'NFO'
			 AND    EXG_MKT_TYP  = 'D';

	if(( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
  {
    fn_errlog( c_ServiceName, "S31065", SQLMSG, c_err_msg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	fn_userlog ( c_ServiceName,"Exchange Current status is :%c:",sql_exg_crrnt_stts );

	/* Selecting the 2 nearest expiry dates and sending it back to ASP in output buffer */
  

  /*** Commented in Ver 1.5 ***
	EXEC SQL 
			 SELECT  FCM_EXPRY_DT 
			 INTO   :c_expry_dt
			 FROM    (
							 	SELECT distinct(FCM_EXPRY_DT)
               	FROM   FCM_FO_CNTRCT_MSTR
								WHERE  FCM_XCHNG_CD = :st_cntrct_gen_inf.c_xchng_cd		** Ver 1.3 **
								AND    FCM_PRDCT_TYP = 'F'														** Ver 1.3 **
								AND    FCM_UNDRLYNG = :st_cntrct_gen_inf.c_undrlyng
								AND    FCM_EXPRY_DT >= trunc(sysdate)	 * ver 1.2 *
							 	ORDER BY FCM_EXPRY_DT)
			WHERE ROWNUM < 3;
  ***/
	/****** VQC Moved below query to begining ******
  *** Ver 1.5 Starts ***

  EXEC SQL
       SELECT  FTQ_EXPRY_DT
       INTO   :c_expry_dt
       FROM    (
                SELECT distinct(FTQ_EXPRY_DT)
                FROM   FTQ_FO_TRD_QT     
                WHERE  FTQ_XCHNG_CD = :st_cntrct_gen_inf.c_xchng_cd 
                AND    FTQ_PRDCT_TYP = 'F'           
                AND    FTQ_UNDRLYNG = :st_cntrct_gen_inf.c_undrlyng
                AND    FTQ_EXPRY_DT >= trunc(sysdate) 
                ORDER BY FTQ_EXPRY_DT)
      WHERE ROWNUM < 3;

  *** Ver 1.5 Ends   ***

	no_of_records = sqlca.sqlerrd[2];

  if(( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
  {
     fn_errlog( c_ServiceName, "S31070", SQLMSG, c_err_msg.arr  );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
		 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	if( SQLCODE == NO_DATA_FOUND && sqlca.sqlerrd[2] == 0 )
	{
		strcpy( c_err_msg.arr,"No records found for this underlying" );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	**********  VQC  **********/
	/* Deciding the number of records for expiry date  Ver 1.1 Starts*/

	EXEC SQL
			 SELECT to_date(:c_expry_dt[0],'dd-Mon-YYYY') - to_date(sysdate,'dd-Mon-YYYY') 
			 INTO   :i_date_diff
			 FROM   DUAL;


	if( SQLCODE != 0 )
	{
     fn_errlog( c_ServiceName, "S31075", SQLMSG, c_err_msg.arr  );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
     tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
	 	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"Difference in dates is :%d:",i_date_diff );
  }

	if( i_date_diff <= 10 )
	{
		no_of_records = 2;
	}
	else
	{
		no_of_records = 1;
	}

	/* Ver 1.1 Ends */


	if(DEBUG_MSG_LVL_5)
	{
		fn_userlog(c_ServiceName,"No of expiry dates is :%d:",no_of_records );
	}

	for( i_counter = 0; i_counter < no_of_records; i_counter++ )
	{
		i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_EXPRY_DT,( char *)c_expry_dt[i_counter], 0 );	
	
		if( i_err[0] == -1 )
    {
      fn_errlog( c_ServiceName, "S31080",FMLMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	}

	/* Calculation for various strategies follows */


  if(strcmp(c_strtgy_typ,"BUL") == 0)
	{
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	  /* Buy next higher call strike from spot as At the money.		*/
		/* Sell next 3 higher call strikes from ATM 								*/
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	
		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"Investment Strategy type is BUL");
			fn_userlog( c_ServiceName, "row count is :%ld:",sql_sps_row_count );
		}
		if(strcmp((char *)sql_sps_action1.arr,"BC") == 0)
		{
			strcpy(c_action1,"Buy");
		}
		else
		{
			fn_errlog( c_ServiceName, "S31085",DEFMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		if(strcmp((char *)sql_sps_action2.arr,"SC") == 0)
		{
			strcpy(c_action2,"Sell");
		}
		else
    {
      fn_errlog( c_ServiceName, "S31090",DEFMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		st_cntrct_gen_inf.c_opt_typ = 'C';
		st_cntrct_gen_inf.l_min_lot_qty = l_lot_size;

		
		i_returncode = fn_get_ltqrt( c_ServiceName,
															 	 &st_cntrct_gen_inf,
																 &st_err_msg );
	  
	  if ( i_returncode == -1 )
   	{
    	fn_errlog( c_ServiceName, "S31095", DEFMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		
		l_spot_prc = st_cntrct_gen_inf.l_strike_prc;

	 	if(DEBUG_MSG_LVL_5)
  	{
   	 	fn_userlog(c_ServiceName,"Spot price is :%ld:",st_cntrct_gen_inf.l_strike_prc);
    }

		
		i_returncode = fn_buy_call( c_ServiceName,
															  &st_cntrct_gen_inf,
															  &d_premi,
																&l_interval,
																sql_exg_crrnt_stts,
															  &st_err_msg );
		
	 	if ( i_returncode == -1 )
   	{
   	 	fn_errlog( c_ServiceName, "S31100", DEFMSG, c_err_msg.arr  );
   	 	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
   	 	tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   	}

		
		if( st_cntrct_gen_inf.l_strike_prc == 0 )
		{
			no_of_records = 0;
			i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_records, 0 );
			tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );	
		}

		d_premium[0] = d_premi;
		c_flg[0] = st_cntrct_gen_inf.c_rqst_typ;
		l_lot_sz[0] = st_cntrct_gen_inf.l_min_lot_qty;
		sprintf(c_premium[0],"%lf",d_premium[0]);
		sprintf(c_strk_prc[0],"%ld",st_cntrct_gen_inf.l_strike_prc);

		
		i_returncode = fn_strk_prc( c_ServiceName,
																&st_cntrct_gen_inf,
																l_strk_prc,
																&no_of_records,
																c_nearest_flg,
																&st_err_msg );

		if ( i_returncode == -1 )
    {
     	fn_errlog( c_ServiceName, "S31105", DEFMSG, c_err_msg.arr  );
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
     	tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

	
		if ( no_of_records > sql_sps_row_count )
		{
			no_of_records = sql_sps_row_count;
		}
		if( no_of_records == 1 )
		{
			no_of_records = 0;
			i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_records, 0 );
			tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
		}
	
	  for( i_counter = 1 ; i_counter <= no_of_records ; i_counter++ )
		{
			st_cntrct_gen_inf.l_strike_prc = l_strk_prc[i_counter];
			sprintf(c_strk_prc[i_counter],"%ld",l_strk_prc[i_counter]);
			st_cntrct_gen_inf.l_min_lot_qty = l_lot_size;

		
		i_returncode = fn_sell_call( c_ServiceName,
																	 &st_cntrct_gen_inf,
																	 &d_premi,
																	 &l_interval,
																	 sql_exg_crrnt_stts,
																	 &st_err_msg );

			if ( i_returncode == -1 )
    	{
     		fn_errlog( c_ServiceName, "S31110", DEFMSG, c_err_msg.arr  );
     		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
				tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

	
			d_premium[i_counter]  = d_premi;
			c_flg[i_counter] = st_cntrct_gen_inf.c_rqst_typ;
			l_lot_sz[i_counter] = st_cntrct_gen_inf.l_min_lot_qty;
			sprintf(c_premium[i_counter],"%lf",d_premium[i_counter]);

			if(DEBUG_MSG_LVL_5)
     	{
       	fn_userlog(c_ServiceName,"i_counter is :%d:",i_counter);
       	fn_userlog(c_ServiceName,"c_flag is :%c:",c_flg[i_counter]);
				fn_userlog(c_ServiceName,"Lot size is :%ld:",l_lot_sz[i_counter]);
				fn_userlog(c_ServiceName,"Premium is :%lf:",d_premium[i_counter]);
     	}

			if( c_flg[i_counter] != 'N' && c_flg[0] != 'N' )  
     	{
				/*----------------------------------------------------------------------------------*/
				/*                         FORMULAE FOR BUL PAYOFF SUMMARY                          */
				/*   Break-even Point = Lower Call strike - (Difference between the two premiums )  */
				/*   Total Cost       = Lot Size * (Difference between the two premiums)            */
				/*   Max Profit       = ((difference between two strikes) - (premium differences))  */
				/*												 * Lot Size                                               */
				/*   Max Loss         = Difference between two Premiums * Lot size                  */
				/*----------------------------------------------------------------------------------*/

       	d_break_pt[i_counter]   = (double)l_strk_prc[0] + (d_premium[0] - d_premium[i_counter]);
       	d_total_cost[i_counter] = (double)l_lot_sz[i_counter]*( d_premium[0] - d_premium[i_counter] );
       	d_max_profit[i_counter] = (abs((double)l_strk_prc[i_counter] - (double)l_strk_prc[0]) -
                                 	abs(d_premium[0] - d_premium[i_counter]))*((double)l_lot_sz[i_counter]);
       	d_max_loss[i_counter]   = (d_premium[0] - d_premium[i_counter])*(double)l_lot_sz[i_counter];

				if(DEBUG_MSG_LVL_5)
    		{
     			fn_userlog(c_ServiceName,"Max Profit is :%lf:",d_max_profit);
					fn_userlog(c_ServiceName,"Max Loss is :%lf:",d_max_loss);
    		}

				if( sql_sps_brk_point == 'Y' )
       	sprintf(c_break_pt[i_counter],"%lf",d_break_pt[i_counter]);
				else
				strcpy(c_break_pt[i_counter],"NA");
				if( sql_sps_total_cost == 'Y' )
       	sprintf(c_total_cost[i_counter],"%lf",d_total_cost[i_counter]);
				else
				strcpy(c_total_cost[i_counter],"NA");
				if( sql_sps_max_profit == 'Y' )
       	sprintf(c_max_profit[i_counter],"%lf",d_max_profit[i_counter]);
				else
				strcpy(c_max_profit[i_counter],"NA");
				if( sql_sps_max_loss == 'Y' )
       	sprintf(c_max_loss[i_counter],"%lf",d_max_loss[i_counter]);
				else
				strcpy(c_max_loss[i_counter],"NA");
     	}

			if( c_flg[i_counter] == 'N' )
     	{
       	strcpy(c_break_pt[i_counter],"NA");
       	strcpy(c_total_cost[i_counter],"NA");
       	strcpy(c_max_profit[i_counter],"NA");
       	strcpy(c_max_loss[i_counter],"NA");
     	}

		}
		
		if(c_flg[0]=='N')
    {
      for( i_counter = 1; i_counter <= no_of_records; i_counter++ )
      {
        strcpy(c_break_pt[i_counter],"NA");
        strcpy(c_total_cost[i_counter],"NA");
        strcpy(c_max_profit[i_counter],"NA");
        strcpy(c_max_loss[i_counter],"NA");
      }
    } 	
    no_of_rows = no_of_records*2;
		i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_rows, 0 );
		i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_INTERVAL,( char *)&l_interval, 0 );
		i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_PRVS_CLS_PRC,(char *)&l_spot_prc, 0 );

    for( i_counter = 0; i_counter < no_of_records*2; i_counter++ )
    {
      if( i_counter == 0 || (i_counter%2 == 0 && i_counter != 1) )
      {
        i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_ACTION1,(char *)c_action1, 0 );
        i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_STRIKE_PRICE,(char *)c_strk_prc[0], 0 );
        i_err[3]  = Fadd32 ( ptr_fml_Obuf, FFO_SYMBOL,(char *)c_var_at, 0 );
        i_err[4]  = Fadd32 ( ptr_fml_Obuf, FFO_PREMIUM_OPT,(char *)c_premium[0], 0 );
        i_err[5]  = Fadd32 ( ptr_fml_Obuf, FFO_BRK_EVN_PT,(char *)c_strnull, 0);
        i_err[6]  = Fadd32 ( ptr_fml_Obuf, FFO_TOTAL_COST,(char *)c_strnull, 0);
        i_err[7]  = Fadd32 ( ptr_fml_Obuf, FFO_MAX_PROFIT,(char *)c_strnull, 0);
        i_err[8]  = Fadd32 ( ptr_fml_Obuf, FFO_MAX_LOSS,(char *)c_strnull, 0);
				i_err[9]  = Fadd32 ( ptr_fml_Obuf, FFO_MIN_LOT_QTY,(char *)&l_lot_sz[0], 0);
				i_err[10]  = Fadd32 ( ptr_fml_Obuf, FFO_UNDRLYNG,( char *)st_cntrct_gen_inf.c_undrlyng, 0 );
				i_err[11] = Fadd32 ( ptr_fml_Obuf, FFO_EXER_TYP,(char *)&st_cntrct_gen_inf.c_exrc_typ, 0 );
        i_err[12] = Fadd32 ( ptr_fml_Obuf, FFO_OPT_TYP,(char *)&st_cntrct_gen_inf.c_opt_typ, 0 );
				i_err[13] = Fadd32 ( ptr_fml_Obuf, FFO_PRDCT_TYP,(char *)&c_prd_opt, 0 );
				i_err[14] = Fadd32 ( ptr_fml_Obuf, FFO_CTGRY_INDSTK,(char *)&st_cntrct_gen_inf.c_ctgry_indstk, 0 );
      }
      else
      {
        i_count = ((i_counter/2)+1);
        i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_ACTION1,(char *)c_action2, 0);
        i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_STRIKE_PRICE,(char *)c_strk_prc[i_count], 0 );
        i_err[3]  = Fadd32 ( ptr_fml_Obuf, FFO_SYMBOL,(char *)c_var_at, 0 );
        i_err[4]  = Fadd32 ( ptr_fml_Obuf, FFO_PREMIUM_OPT,(char *)c_premium[i_count], 0 );
        i_err[5]  = Fadd32 ( ptr_fml_Obuf, FFO_BRK_EVN_PT,(char *)c_break_pt[i_count], 0);
        i_err[6]  = Fadd32 ( ptr_fml_Obuf, FFO_TOTAL_COST,(char *)c_total_cost[i_count], 0);
        i_err[7]  = Fadd32 ( ptr_fml_Obuf, FFO_MAX_PROFIT,(char *)c_max_profit[i_count], 0);
        i_err[8]  = Fadd32 ( ptr_fml_Obuf, FFO_MAX_LOSS,(char *)c_max_loss[i_count], 0);
				i_err[9]  = Fadd32 ( ptr_fml_Obuf, FFO_MIN_LOT_QTY,(char *)&l_lot_sz[i_count], 0);
				i_err[10]  = Fadd32 ( ptr_fml_Obuf, FFO_UNDRLYNG,( char *)st_cntrct_gen_inf.c_undrlyng, 0 );
				i_err[11] = Fadd32 ( ptr_fml_Obuf, FFO_EXER_TYP,(char *)&st_cntrct_gen_inf.c_exrc_typ, 0 );
        i_err[12] = Fadd32 ( ptr_fml_Obuf, FFO_OPT_TYP,(char *)&st_cntrct_gen_inf.c_opt_typ, 0 );
				i_err[13] = Fadd32 ( ptr_fml_Obuf, FFO_PRDCT_TYP,(char *)&c_prd_opt, 0 );
				i_err[14] = Fadd32 ( ptr_fml_Obuf, FFO_CTGRY_INDSTK,(char *)&st_cntrct_gen_inf.c_ctgry_indstk, 0 );
      }

      for( i_cnt = 1; i_cnt < 15; i_cnt++ )
      {
        if( i_err[i_cnt] == -1 )
        {
          fn_errlog( c_ServiceName, "S31115",FMLMSG,c_err_msg.arr);
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
          tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }

    }

		tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
	}	
	if(strcmp(c_strtgy_typ,"BUM") == 0)
	{
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    /* Buy current month Futures															  */
    /* Sell next 3 higher call strikes which are 0.8% above 			*/
		/* future price.                 														*/
    /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"Investment Strategy type is BUM");
    }

		/*** Commented in VQC ****	
		EXEC SQL
				 SELECT substr(:c_expiry_dt,4,6)
				 INTO   :c_month
				 FROM   DUAL;

		if( SQLCODE != 0 ) 
    {
      fn_errlog( c_ServiceName, "S31120", SQLMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		*********/
		
    if(strcmp((char *)sql_sps_action1.arr,"BF") == 0)
    {
      strcpy(c_action1,"Buy");
    }
		else
    {
      fn_errlog( c_ServiceName, "S31125",DEFMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    if(strcmp((char *)sql_sps_action2.arr,"SC") == 0)
    {
      strcpy(c_action2,"Sell");
    }
		else
    {
      fn_errlog( c_ServiceName, "S31130",DEFMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		if(DEBUG_MSG_LVL_5)
    {
      fn_userlog( c_ServiceName,"Action 2 is :%s:",c_action2);
			fn_userlog( c_ServiceName,"sql_sps_action2 is :%s:",sql_sps_action2.arr);
    }

    if(strcmp(st_cntrct_gen_inf.c_xchng_cd,"NFO") == 0)
    {
       strcpy(c_xchng_cd,"NSE");
    }

		i_returncode = fn_get_ltqrt( c_ServiceName,
                                 &st_cntrct_gen_inf,
                                 &st_err_msg );

    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31135", DEFMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    l_spot_prc = st_cntrct_gen_inf.l_strike_prc;

		EXEC SQL
				 SELECT FTQ_LST_TRD_PRC,
								FTQ_MIN_LOT_QTY,
								nvl((ceil(abs(FTQ_LST_TRD_TM - sysdate)*24*60)),999999),
								ftq_indstk,
                nvl(FTQ_DS_QT_TRDNG_FLG,'N')   /*** Ver 1.5 ***/
				 INTO   :l_strk_prc[0],
								:l_lot_sz[0],
								:l_diff_time,
								:c_ctgry_indstk,
                :c_fcm_flg        /*** Ver 1.5 ***/
				 FROM   FTQ_FO_TRD_QT
				 WHERE  FTQ_XCHNG_CD = :st_cntrct_gen_inf.c_xchng_cd   /** Ver 1.3 **/
				 AND    FTQ_UNDRLYNG = :st_cntrct_gen_inf.c_undrlyng
				 AND    FTQ_PRDCT_TYP = 'F'
				 AND    FTQ_EXPRY_DT = to_date(:st_cntrct_gen_inf.c_expry_dt,'dd-Mon-YYYY');

		if(( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ))
    {
      fn_errlog( c_ServiceName, "S31140", SQLMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
     	tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
		  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		if( (SQLCODE == NO_DATA_FOUND) && (sqlca.sqlerrd[2] == 0) )
		{
			fn_errlog( c_ServiceName, "S31145", SQLMSG, c_err_msg.arr  );
			no_of_records = 0;
			i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_records, 0 );
      tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
		}

    if(DEBUG_MSG_LVL_0)
    {
     fn_userlog(c_ServiceName, "FTQ DS Trading Enable/Disable Flag :%c:",c_fcm_flg);
    }

 
    /*** Commented in Ver 1.5 ***	
		EXEC SQL
				 SELECT nvl(FCM_DS_QT_TRDNG_FLG,'N')
				 INTO   :c_fcm_flg
				 FROM   FCM_FO_CNTRCT_MSTR
				 WHERE  FCM_XCHNG_CD = :st_cntrct_gen_inf.c_xchng_cd	*** Ver 1.3 ***
				 AND    FCM_PRDCT_TYP = 'F'														
			   AND    FCM_UNDRLYNG = :st_cntrct_gen_inf.c_undrlyng
				 AND    FCM_EXPRY_DT = to_date(:st_cntrct_gen_inf.c_expry_dt,'dd-Mon-YYYY');

		if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31150", SQLMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    ***/
	
		EXEC SQL
				 SELECT nvl(FUM_DS_TRDNG_FLG,'N')
				 INTO   :c_fum_flg
				 FROM   FUM_FO_UNDRLYNG_MSTR
				 WHERE  FUM_PRDCT_TYP = 'F'
				 AND    FUM_UNDRLYNG  = :st_cntrct_gen_inf.c_undrlyng;

	  if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31155", SQLMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }	

		if( c_fcm_flg[0] == 'N' || c_fum_flg[0] == 'N' || ( ( l_diff_time > l_sps_config_tm ) && ( sql_exg_crrnt_stts == 'O' ) ) )
		{
			c_flg[0] = 'N';
		}

		sprintf( c_strk_prc[0],"%ld",l_strk_prc[0] );
		l_fut_strk_prc[0] = l_strk_prc[0];
		if( l_lot_size != 0 )
		{
			l_lot_sz[0] = l_lot_size;
		}

		/* Selecting a strike price which is 0.8% higher than present */

		st_cntrct_gen_inf.l_strike_prc = l_strk_prc[0] + (l_strk_prc[0] * 0.008); 
		st_cntrct_gen_inf.c_opt_typ = 'C';

		if(DEBUG_MSG_LVL_5)
    {
      /** fn_userlog( c_ServiceName,"Month is :%s:",c_month);		Commented in VQC ***/
      fn_userlog( c_ServiceName,"Strike Price of futures is :%s:",c_strk_prc[0] );
			fn_userlog( c_ServiceName,"Strike Price of option will be greater than :%ld:",st_cntrct_gen_inf.l_strike_prc );
			fn_userlog( c_ServiceName,"Enable/Disable flag is :%c:",c_flg[0] );
    }

		memset( l_strk_prc,0,sizeof(l_strk_prc) );

	
		i_returncode = fn_strk_prc( c_ServiceName,
                                &st_cntrct_gen_inf,
                                l_strk_prc,
                                &no_of_records,
																c_nearest_flg,
                                &st_err_msg );

    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31160", DEFMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    
		if ( no_of_records > sql_sps_row_count )
    {
      no_of_records = sql_sps_row_count;
    }
    if( no_of_records == 0 )
    {
      no_of_records = 0;
      i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_records, 0 );
      tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
    }

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog( c_ServiceName,"No of Records to be displayed :%ld:",sql_sps_row_count );
      fn_userlog( c_ServiceName,"No of rows :%ld:",no_of_records );
			fn_userlog(c_ServiceName,"Strike price now is :%ld:",st_cntrct_gen_inf.l_strike_prc);
      fn_userlog(c_ServiceName,"No of Strike prices greater than spot :%d:",no_of_records);
    }

		for( i_counter = 1 ; i_counter <= no_of_records ; i_counter++ )
    {

			sprintf(c_strk_prc[i_counter],"%ld",l_strk_prc[i_counter-1]);
			st_cntrct_gen_inf.l_strike_prc = l_strk_prc[i_counter-1];
			st_cntrct_gen_inf.l_min_lot_qty = l_lot_size;

    
	  i_returncode = fn_sell_call( c_ServiceName,
                                   &st_cntrct_gen_inf,
                                   &d_premi,
																	 &l_interval,
																	 sql_exg_crrnt_stts,
                                   &st_err_msg );

      if ( i_returncode == -1 )
      {
        fn_errlog( c_ServiceName, "S31165", DEFMSG, c_err_msg.arr  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

    

		  d_premium[i_counter]  = d_premi;
      c_flg[i_counter] = st_cntrct_gen_inf.c_rqst_typ;
      l_lot_sz[i_counter] = st_cntrct_gen_inf.l_min_lot_qty;
      sprintf(c_premium[i_counter],"%lf",d_premium[i_counter]);

      if(DEBUG_MSG_LVL_5)
      {
        fn_userlog(c_ServiceName,"Premium of Sell call is :%lf:",d_premium[i_counter]);
        fn_userlog(c_ServiceName,"Enable/Disable flag is :%c:",st_cntrct_gen_inf.c_rqst_typ);
        fn_userlog(c_ServiceName,"Lot size is :%ld:",l_lot_sz[i_counter]);
				fn_userlog(c_ServiceName,"Strike Price is :%ld:",st_cntrct_gen_inf.l_strike_prc);
      }
			if( c_flg[i_counter] == 'N' )
      {
        strcpy(c_break_pt[i_counter],"NA");
        strcpy(c_cash_inflw[i_counter],"NA");
        strcpy(c_max_profit[i_counter],"NA");
        strcpy(c_dwn_side_protec[i_counter],"NA");
      }
			if( c_flg[i_counter] != 'N' && c_flg[0] != 'N')
      {

        /*----------------------------------------------------------------------------------*/
        /*                         FORMULAE FOR BUM PAYOFF SUMMARY                          */
        /*   Break-even Point = Futures Price - Premium on Call sold                        */
        /*   Cash Inflow      = Lot Size * Premium received on selling the call             */
        /*   Max Profit       = { ( difference between sell call and futures ) +            */
        /*                      ( premium received on selling the call ) } * Lot Size       */
        /*   % Downside       = (Premium received on call sold / Futures price)*100         */
        /*   Protection                                                                     */
        /*----------------------------------------------------------------------------------*/

        /* Break even point = Futures Price - Premium on Call sold */
        d_break_pt[i_counter] = (double)l_fut_strk_prc[0] - d_premium[i_counter];

        /* Cash Inflow = Lot size * Premium received on Selling the call */
        d_cash_inflw[i_counter] = ((double)l_lot_sz[i_counter])*(d_premium[i_counter]);

        /* Maximum Profit = Lot size*{(difference b/w the sell call & Futures)+(Premium received on selling call)} */
        d_max_profit[i_counter] = (double)l_lot_sz[i_counter]*
                                  (((double)l_strk_prc[i_counter-1]-(double)l_fut_strk_prc[0])+d_premium[i_counter]);

        /* percentage downside protection = (premium received on call sold/Futures price)*100 */
        d_dwn_side_protec[i_counter]   = (d_premium[i_counter]/(double)l_fut_strk_prc[0])*100;


				if( sql_sps_brk_point == 'Y' )
        sprintf(c_break_pt[i_counter],"%lf",d_break_pt[i_counter]);
				else
				strcpy(c_break_pt[i_counter],"NA");
				if( sql_sps_cash_flow == 'I' )
        sprintf(c_cash_inflw[i_counter],"%lf",d_cash_inflw[i_counter]);
				else
				strcpy(c_cash_inflw[i_counter],"NA");
				if( sql_sps_max_profit == 'Y' )
        sprintf(c_max_profit[i_counter],"%lf",d_max_profit[i_counter]);
				else
				strcpy(c_max_profit[i_counter],"NA");
				if( sql_sps_up_dwn_prtct == 'D' )
        sprintf(c_dwn_side_protec[i_counter],"%lf",d_dwn_side_protec[i_counter]);
				else
				strcpy(c_dwn_side_protec[i_counter],"NA");
      }

    }

		if(c_flg[0]=='N')
    {
      for( i_counter = 1; i_counter <= no_of_records; i_counter++ )
      {
        strcpy(c_break_pt[i_counter],"NA");
        strcpy(c_cash_inflw[i_counter],"NA");
        strcpy(c_max_profit[i_counter],"NA");
        strcpy(c_dwn_side_protec[i_counter],"NA");
      }
    }

		no_of_rows = no_of_records*2;

		i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_rows, 0 );
		i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_INTERVAL,( char *)&l_interval, 0 );
		i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_PRVS_CLS_PRC,( char *)&l_spot_prc, 0 );

		for( i_counter = 0; i_counter < no_of_records*2; i_counter++ )
		{
			if( i_counter == 0 || (i_counter%2 == 0 && i_counter != 1) )
			{
    		i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_ACTION1,(char *)c_action1, 0 );
    		i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_STRIKE_PRICE,(char *)c_strk_prc[0], 0 );
    		i_err[3]  = Fadd32 ( ptr_fml_Obuf, FFO_SYMBOL,(char *)c_strnull, 0 );
    		i_err[4]  = Fadd32 ( ptr_fml_Obuf, FFO_PREMIUM_OPT,(char *)c_strnull, 0 );
    		i_err[5]  = Fadd32 ( ptr_fml_Obuf, FFO_BRK_EVN_PT,(char *)c_strnull, 0);
    		i_err[6]  = Fadd32 ( ptr_fml_Obuf, FFO_CSH_INFLW,(char *)c_strnull, 0);
    		i_err[7]  = Fadd32 ( ptr_fml_Obuf, FFO_MAX_PROFIT,(char *)c_strnull, 0);
    		i_err[8]  = Fadd32 ( ptr_fml_Obuf, FFO_DWN_SIDE_PRCNTG,(char *)c_strnull, 0);	
				i_err[9]  = Fadd32 ( ptr_fml_Obuf, FFO_MIN_LOT_QTY,(char *)&l_lot_sz[0], 0);
				i_err[10]  = Fadd32 ( ptr_fml_Obuf, FFO_UNDRLYNG,( char *)st_cntrct_gen_inf.c_undrlyng, 0 );
				i_err[11] = Fadd32 ( ptr_fml_Obuf, FFO_EXER_TYP,(char *)&c_fut_exer_typ, 0 );
        i_err[12] = Fadd32 ( ptr_fml_Obuf, FFO_OPT_TYP,(char *)&c_fut_opt_typ, 0 );
				i_err[13] = Fadd32 ( ptr_fml_Obuf, FFO_PRDCT_TYP,(char *)&c_prd_fut, 0 );
				i_err[14] = Fadd32 ( ptr_fml_Obuf, FFO_CTGRY_INDSTK,(char *)&c_ctgry_indstk, 0 );
			}
			else
			{
				i_count = ((i_counter/2) + 1);
				i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_ACTION1,(char *)c_action2, 0);
				i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_STRIKE_PRICE,(char *)c_strk_prc[i_count], 0 );
      	i_err[3]  = Fadd32 ( ptr_fml_Obuf, FFO_SYMBOL,(char *)c_var_at, 0 );
      	i_err[4]  = Fadd32 ( ptr_fml_Obuf, FFO_PREMIUM_OPT,(char *)c_premium[i_count], 0 );
      	i_err[5]  = Fadd32 ( ptr_fml_Obuf, FFO_BRK_EVN_PT,(char *)c_break_pt[i_count], 0);
      	i_err[6]  = Fadd32 ( ptr_fml_Obuf, FFO_CSH_INFLW,(char *)c_cash_inflw[i_count], 0);
      	i_err[7]  = Fadd32 ( ptr_fml_Obuf, FFO_MAX_PROFIT,(char *)c_max_profit[i_count], 0);
      	i_err[8]  = Fadd32 ( ptr_fml_Obuf, FFO_DWN_SIDE_PRCNTG,(char *)c_dwn_side_protec[i_count], 0);
				i_err[9]  = Fadd32 ( ptr_fml_Obuf, FFO_MIN_LOT_QTY,(char *)&l_lot_sz[i_count], 0);
				i_err[10]  = Fadd32 ( ptr_fml_Obuf, FFO_UNDRLYNG,( char *)st_cntrct_gen_inf.c_undrlyng, 0 );
				i_err[11] = Fadd32 ( ptr_fml_Obuf, FFO_EXER_TYP,(char *)&st_cntrct_gen_inf.c_exrc_typ, 0 );
        i_err[12] = Fadd32 ( ptr_fml_Obuf, FFO_OPT_TYP,(char *)&st_cntrct_gen_inf.c_opt_typ, 0 );
				i_err[13] = Fadd32 ( ptr_fml_Obuf, FFO_PRDCT_TYP,(char *)&c_prd_opt, 0 );
				i_err[14] = Fadd32 ( ptr_fml_Obuf, FFO_CTGRY_INDSTK,(char *)&st_cntrct_gen_inf.c_ctgry_indstk, 0 );
			}
	
			for( i_cnt = 1; i_cnt < 15; i_cnt++ )
   	 {
      	if( i_err[i_cnt] == -1 )
      	{
        	fn_errlog( c_ServiceName, "S31170",FMLMSG,c_err_msg.arr);
        	fn_userlog(c_ServiceName, "Error while generating snapshot");
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        	tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
    	}

		}

    tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );

	}
  if(strcmp(c_strtgy_typ,"BEL") == 0)
  {

		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    /* Buy next lower put strike below spot as At the money.    */
    /* Sell next 3 lower put strikes below ATM                  */
    /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"Investment Strategy type is BEL");
    }
    if(strcmp((char *)sql_sps_action1.arr,"BP") == 0)
    {
      strcpy(c_action1,"Buy");
    }
		else
    {
      fn_errlog( c_ServiceName, "S31175",DEFMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    if(strcmp((char *)sql_sps_action2.arr,"SP") == 0)
    {
      strcpy(c_action2,"Sell");
    }
		else
    {
      fn_errlog( c_ServiceName, "S31180",DEFMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		st_cntrct_gen_inf.c_opt_typ = 'P';
    i_returncode = fn_get_ltqrt( c_ServiceName,
                                 &st_cntrct_gen_inf,
                                 &st_err_msg );

    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31185", DEFMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		l_spot_prc = st_cntrct_gen_inf.l_strike_prc;

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"Spot price is :%ld:",st_cntrct_gen_inf.l_strike_prc);
    }

		st_cntrct_gen_inf.l_min_lot_qty = l_lot_size;

    i_returncode = fn_buy_put( c_ServiceName,
                                &st_cntrct_gen_inf,
                                &d_premi,
																&l_interval,
																sql_exg_crrnt_stts,
                                &st_err_msg );
    if ( i_returncode == -1 )
    {
       fn_errlog( c_ServiceName, "S31190", DEFMSG, c_err_msg.arr  );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
       tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		
		if( st_cntrct_gen_inf.l_strike_prc == 0 )
    {
			no_of_records = 0;
      i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_records, 0 );
      tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
    }

    d_premium[0] = d_premi;
    c_flg[0] = st_cntrct_gen_inf.c_rqst_typ;
    l_lot_sz[0] = st_cntrct_gen_inf.l_min_lot_qty;
    sprintf(c_premium[0],"%lf",d_premium[0]);
    sprintf(c_strk_prc[0],"%ld",st_cntrct_gen_inf.l_strike_prc);
    strcpy(c_break_pt[0],c_strnull);
    strcpy(c_total_cost[0],c_strnull);
    strcpy(c_max_profit[0],c_strnull);
    strcpy(c_max_loss[0],c_strnull);

    i_returncode = fn_strk_prc( c_ServiceName,
                                &st_cntrct_gen_inf,
                                l_strk_prc,
                                &no_of_records,
																c_nearest_flg,
                                &st_err_msg );
    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31195", DEFMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if( no_of_records == 1 )
		{
			no_of_records = 0;
			i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_records, 0 );
			tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
		}

    if ( no_of_records > sql_sps_row_count )
    {
      no_of_records = sql_sps_row_count;
    }

		for( i_counter = 1 ; i_counter <= no_of_records ; i_counter++ )
    {
      st_cntrct_gen_inf.l_strike_prc = l_strk_prc[i_counter];
      sprintf(c_strk_prc[i_counter],"%ld",l_strk_prc[i_counter]);
			st_cntrct_gen_inf.l_min_lot_qty = l_lot_size;

      i_returncode = fn_sell_put( c_ServiceName,
                                  &st_cntrct_gen_inf,
                                  &d_premi,
																	&l_interval,
																	sql_exg_crrnt_stts,
                                  &st_err_msg );

      if ( i_returncode == -1 )
      {
        fn_errlog( c_ServiceName, "S31200", DEFMSG, c_err_msg.arr  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      d_premium[i_counter]  = d_premi;
      c_flg[i_counter] = st_cntrct_gen_inf.c_rqst_typ;
      l_lot_sz[i_counter] = st_cntrct_gen_inf.l_min_lot_qty;
      sprintf(c_premium[i_counter],"%lf",d_premium[i_counter]);

      if( c_flg[i_counter] != 'N' && c_flg[0] != 'N')
      {
        /*----------------------------------------------------------------------------------*/
        /*                         FORMULAE FOR BEL PAYOFF SUMMARY                          */
        /*   Break-even Point = Higher Put Strike - (Difference between the two premiums )  */
        /*   Total Cost       = Lot Size * (Difference between the two premiums)            */
        /*   Max Profit       = ((difference between two strikes) - (premium differences)   */
        /*                         * Lot Size                                               */
        /*   Max Loss         = Limited to total cost (computed above )                     */
        /*----------------------------------------------------------------------------------*/

        d_break_pt[i_counter] = (double)l_strk_prc[0] - (d_premium[0] - d_premium[i_counter]);
        d_total_cost[i_counter] = (double)l_lot_sz[i_counter]*( d_premium[0] - d_premium[i_counter] );
        d_max_profit[i_counter] = (((double)l_strk_prc[0] - (double)l_strk_prc[i_counter]) -
                                  (d_premium[0] - d_premium[i_counter]))*((double)l_lot_sz[i_counter]);
        d_max_loss[i_counter]   = d_total_cost[i_counter];

				if( sql_sps_brk_point == 'Y' )
        sprintf(c_break_pt[i_counter],"%lf",d_break_pt[i_counter]);
				else
				strcpy(c_break_pt[i_counter],"NA");
				if( sql_sps_total_cost == 'Y' )
        sprintf(c_total_cost[i_counter],"%lf",d_total_cost[i_counter]);
				else
				strcpy(c_total_cost[i_counter],"NA");
				if( sql_sps_max_profit == 'Y' )
        sprintf(c_max_profit[i_counter],"%lf",d_max_profit[i_counter]);
				else
				strcpy(c_max_profit[i_counter],"NA");
				if( sql_sps_max_loss == 'Y' )
        sprintf(c_max_loss[i_counter],"%lf",d_max_loss[i_counter]);
				else
			  strcpy(c_max_loss[i_counter],"NA");	
      }

      if( c_flg[i_counter] == 'N' )
      {
        strcpy(c_break_pt[i_counter],"NA");
        strcpy(c_total_cost[i_counter],"NA");
        strcpy(c_max_profit[i_counter],"NA");
        strcpy(c_max_loss[i_counter],"NA");
      }

    }
		if(c_flg[0]=='N')
    {
      for( i_counter = 1; i_counter <= no_of_records; i_counter++ )
      {
        strcpy(c_break_pt[i_counter],"NA");
        strcpy(c_total_cost[i_counter],"NA");
        strcpy(c_max_profit[i_counter],"NA");
        strcpy(c_max_loss[i_counter],"NA");
      }
    }
		no_of_rows = no_of_records*2;
    i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_rows, 0 );
		i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_INTERVAL,( char *)&l_interval, 0 );
		i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_PRVS_CLS_PRC,( char *)&l_spot_prc, 0 );

    for( i_counter = 0; i_counter < no_of_records*2; i_counter++ )
    {
      if( i_counter == 0 || (i_counter%2 == 0 && i_counter != 1) )
      {
        i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_ACTION1,(char *)c_action1, 0 );
        i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_STRIKE_PRICE,(char *)c_strk_prc[0], 0 );
        i_err[3]  = Fadd32 ( ptr_fml_Obuf, FFO_SYMBOL,(char *)c_var_at, 0 );
        i_err[4]  = Fadd32 ( ptr_fml_Obuf, FFO_PREMIUM_OPT,(char *)c_premium[0], 0 );
        i_err[5]  = Fadd32 ( ptr_fml_Obuf, FFO_BRK_EVN_PT,(char *)c_strnull, 0);
        i_err[6]  = Fadd32 ( ptr_fml_Obuf, FFO_TOTAL_COST,(char *)c_strnull, 0);
        i_err[7]  = Fadd32 ( ptr_fml_Obuf, FFO_MAX_PROFIT,(char *)c_strnull, 0);
        i_err[8]  = Fadd32 ( ptr_fml_Obuf, FFO_MAX_LOSS,(char *)c_strnull, 0);
				i_err[9]  = Fadd32 ( ptr_fml_Obuf, FFO_MIN_LOT_QTY,(char *)&l_lot_sz[0], 0);
				i_err[10]  = Fadd32 ( ptr_fml_Obuf, FFO_UNDRLYNG,( char *)st_cntrct_gen_inf.c_undrlyng, 0 );
				i_err[11] = Fadd32 ( ptr_fml_Obuf, FFO_EXER_TYP,(char *)&st_cntrct_gen_inf.c_exrc_typ, 0 );
        i_err[12] = Fadd32 ( ptr_fml_Obuf, FFO_OPT_TYP,(char *)&st_cntrct_gen_inf.c_opt_typ, 0 );
				i_err[13] = Fadd32 ( ptr_fml_Obuf, FFO_PRDCT_TYP,(char *)&c_prd_opt, 0 );
				i_err[14] = Fadd32 ( ptr_fml_Obuf, FFO_CTGRY_INDSTK,(char *)&st_cntrct_gen_inf.c_ctgry_indstk, 0 );
      }
      else
      {
        i_count = ((i_counter/2)+1);
        i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_ACTION1,(char *)c_action2, 0);
        i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_STRIKE_PRICE,(char *)c_strk_prc[i_count], 0 );
        i_err[3]  = Fadd32 ( ptr_fml_Obuf, FFO_SYMBOL,(char *)c_var_at, 0 );
        i_err[4]  = Fadd32 ( ptr_fml_Obuf, FFO_PREMIUM_OPT,(char *)c_premium[i_count], 0 );
        i_err[5]  = Fadd32 ( ptr_fml_Obuf, FFO_BRK_EVN_PT,(char *)c_break_pt[i_count], 0);
        i_err[6]  = Fadd32 ( ptr_fml_Obuf, FFO_TOTAL_COST,(char *)c_total_cost[i_count], 0);
        i_err[7]  = Fadd32 ( ptr_fml_Obuf, FFO_MAX_PROFIT,(char *)c_max_profit[i_count], 0);
        i_err[8]  = Fadd32 ( ptr_fml_Obuf, FFO_MAX_LOSS,(char *)c_max_loss[i_count], 0);
				i_err[9]  = Fadd32 ( ptr_fml_Obuf, FFO_MIN_LOT_QTY,(char *)&l_lot_sz[i_count], 0);
				i_err[10]  = Fadd32 ( ptr_fml_Obuf, FFO_UNDRLYNG,( char *)st_cntrct_gen_inf.c_undrlyng, 0 );
				i_err[11] = Fadd32 ( ptr_fml_Obuf, FFO_EXER_TYP,(char *)&st_cntrct_gen_inf.c_exrc_typ, 0 );
        i_err[12] = Fadd32 ( ptr_fml_Obuf, FFO_OPT_TYP,(char *)&st_cntrct_gen_inf.c_opt_typ, 0 );
				i_err[13] = Fadd32 ( ptr_fml_Obuf, FFO_PRDCT_TYP,(char *)&c_prd_opt, 0 );
				i_err[14] = Fadd32 ( ptr_fml_Obuf, FFO_CTGRY_INDSTK,(char *)&st_cntrct_gen_inf.c_ctgry_indstk, 0 );
      }

      for( i_cnt = 1; i_cnt < 15; i_cnt++ )
      {
        if( i_err[i_cnt] == -1 )
        {
          fn_errlog( c_ServiceName, "S31205",FMLMSG,c_err_msg.arr);
          fn_userlog(c_ServiceName, "Error while generating snapshot");
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
          tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }

    }

    tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );

	}
	if(strcmp(c_strtgy_typ,"BEM") == 0)
  {

		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    /* Sell current month futures.														  */
    /* Sell next 3 lower put strikes 0.8% below futures price     */
    /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"Investment Strategy type is BEM");
    }

		/***** Commented in VQC ****
    EXEC SQL
         SELECT substr(:c_expiry_dt,4,6)
         INTO   :c_month
         FROM   DUAL;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31210", SQLMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		******/
    if(strcmp((char *)sql_sps_action1.arr,"SF") == 0)
    {
      strcpy(c_action1,"Sell");
    }
		else
    {
      fn_errlog( c_ServiceName, "S31215",DEFMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    if(strcmp((char *)sql_sps_action2.arr,"SP") == 0)
    {
      strcpy(c_action2,"Sell");
    }
		else
    {
      fn_errlog( c_ServiceName, "S31220",DEFMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if(strcmp(st_cntrct_gen_inf.c_xchng_cd,"NFO") == 0)
    {
       strcpy(c_xchng_cd,"NSE");
    }

		i_returncode = fn_get_ltqrt( c_ServiceName,
                                 &st_cntrct_gen_inf,
                                 &st_err_msg );

    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31225", DEFMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    l_spot_prc = st_cntrct_gen_inf.l_strike_prc;


    EXEC SQL
         SELECT FTQ_LST_TRD_PRC,
								FTQ_MIN_LOT_QTY,
								nvl((ceil(abs(FTQ_LST_TRD_TM - sysdate)*24*60)),999999),
								FTQ_INDSTK,
                nvl(FTQ_DS_QT_TRDNG_FLG,'N')   /*** Ver 1.5 ***/
         INTO   :l_strk_prc[0],
								:l_lot_sz[0],
								:l_diff_time,
								:c_ctgry_indstk,
                :c_fcm_flg                     /*** Ver 1.5 ***/ 
         FROM   FTQ_FO_TRD_QT
         WHERE  FTQ_XCHNG_CD = :st_cntrct_gen_inf.c_xchng_cd	/*** Ver 1.3 ***/
				 AND    FTQ_UNDRLYNG = :st_cntrct_gen_inf.c_undrlyng
				 AND    FTQ_EXPRY_DT = to_date(:st_cntrct_gen_inf.c_expry_dt,'dd-Mon-YYYY')
         AND    FTQ_PRDCT_TYP = 'F';
   
	 if(( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
      fn_errlog( c_ServiceName, "S31230", SQLMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		if( (SQLCODE == NO_DATA_FOUND) && (sqlca.sqlerrd[2] == 0) )
    {
      fn_errlog( c_ServiceName, "S31235", SQLMSG, c_err_msg.arr  );
			no_of_records = 0;
      i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_records, 0 );
      tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
    }

    if(DEBUG_MSG_LVL_0)
    {
     fn_userlog(c_ServiceName, "FTQ DS Trading Enable/Disable Flag :%c:",c_fcm_flg);
    }

    /*** Commented in Ver 1.5 ***
		EXEC SQL
         SELECT nvl(FCM_DS_QT_TRDNG_FLG,'N')
         INTO   :c_fcm_flg
         FROM   FCM_FO_CNTRCT_MSTR
         WHERE  FCM_XCHNG_CD  = :st_cntrct_gen_inf.c_xchng_cd  *** Ver 1.3 ***
				 AND    FCM_PRDCT_TYP = 'F'														 
				 AND    FCM_UNDRLYNG  = :st_cntrct_gen_inf.c_undrlyng
         AND    FCM_EXPRY_DT  = to_date(:st_cntrct_gen_inf.c_expry_dt,'dd-Mon-YYYY');
     
    
	if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31240", SQLMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
   
    ***/
		EXEC SQL
         SELECT nvl(FUM_DS_TRDNG_FLG,'N')
         INTO   :c_fum_flg
         FROM   FUM_FO_UNDRLYNG_MSTR
         WHERE  FUM_PRDCT_TYP = 'F'
         AND    FUM_UNDRLYNG  = :st_cntrct_gen_inf.c_undrlyng;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31245", SQLMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if( c_fcm_flg[0] == 'N' || c_fum_flg[0] == 'N' || ( ( l_diff_time > l_sps_config_tm ) && ( sql_exg_crrnt_stts == 'O' ) ) )
    {
      c_flg[0] = 'N';
			fn_userlog( c_ServiceName,"Enable/Disable flag for futures is :%c:",c_flg[0] );
    }

    sprintf( c_strk_prc[0],"%ld",l_strk_prc[0] );
    l_fut_strk_prc[0] = l_strk_prc[0];
		if( l_lot_size != 0 )
    {
      l_lot_sz[0] = l_lot_size;
    }

    /* Selecting a strike price which is 0.8% lesser than present */


    st_cntrct_gen_inf.l_strike_prc = l_strk_prc[0] - (l_strk_prc[0] * 0.008);
		st_cntrct_gen_inf.c_opt_typ = 'P';
		memset( l_strk_prc,0,sizeof(l_strk_prc) );

		i_returncode = fn_strk_prc( c_ServiceName,
                                &st_cntrct_gen_inf,
                                l_strk_prc,
                                &no_of_records,
																c_nearest_flg,
                                &st_err_msg );

    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31250", DEFMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if ( no_of_records > sql_sps_row_count )
    {
      no_of_records = sql_sps_row_count;
    }
    if( no_of_records == 0 )
    {
      no_of_records = 0;
      i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_records, 0 );
      tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
    }

    if(DEBUG_MSG_LVL_5)
    {
      /** fn_userlog( c_ServiceName,"Month is :%s:",c_month); ** Commented in VQC **/
      fn_userlog( c_ServiceName,"Action 1 is :%s:",c_action1);
      fn_userlog( c_ServiceName,"Strike Price of futures is :%s:",c_strk_prc[0] );
      fn_userlog( c_ServiceName,"Strike Price of option will be lesser than :%ld:",st_cntrct_gen_inf.l_strike_prc );
      fn_userlog( c_ServiceName,"Enable/Disable flag is :%c:",c_flg[0] );
    }

    for( i_counter = 1 ; i_counter <= no_of_records ; i_counter++ )
    {

      sprintf(c_strk_prc[i_counter],"%ld",l_strk_prc[i_counter-1]);
      st_cntrct_gen_inf.l_strike_prc = l_strk_prc[i_counter-1];
			st_cntrct_gen_inf.l_min_lot_qty = l_lot_size;

      i_returncode = fn_sell_put( c_ServiceName,
                                   &st_cntrct_gen_inf,
                                   &d_premi,
																	 &l_interval,
																	 sql_exg_crrnt_stts,
                                   &st_err_msg );

      if ( i_returncode == -1 )
      {
        fn_errlog( c_ServiceName, "S31255", DEFMSG, c_err_msg.arr  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      d_premium[i_counter]  = d_premi;
      c_flg[i_counter] = st_cntrct_gen_inf.c_rqst_typ;
      l_lot_sz[i_counter] = st_cntrct_gen_inf.l_min_lot_qty;
      sprintf(c_premium[i_counter],"%lf",d_premium[i_counter]);

      if(DEBUG_MSG_LVL_5)
      {
        fn_userlog(c_ServiceName,"Premium of Sell call is :%lf:",d_premium[i_counter]);
        fn_userlog(c_ServiceName,"Enable/Disable flag is :%c:",st_cntrct_gen_inf.c_rqst_typ);
        fn_userlog(c_ServiceName,"Lot size is :%ld:",l_lot_sz[i_counter]);
        fn_userlog(c_ServiceName,"Strike Price is :%ld:",st_cntrct_gen_inf.l_strike_prc);
      }
			if( c_flg[i_counter] == 'N' )
      {
        strcpy(c_break_pt[i_counter],"NA");
        strcpy(c_cash_inflw[i_counter],"NA");
        strcpy(c_max_profit[i_counter],"NA");
        strcpy(c_up_side_protec[i_counter],"NA");
      }
			if( c_flg[i_counter] != 'N' && c_flg[0] != 'N')
      {

        /*----------------------------------------------------------------------------------*/
        /*                         FORMULAE FOR BEM PAYOFF SUMMARY                          */
        /*   Break-even Point = Futures Price + Premium on Put sold                         */
        /*   Cash Inflow      = Lot Size * Premium received on selling the put              */
        /*   Max Profit       = { ( difference between futures and sold put ) +             */
        /*                      ( premium received on selling the put ) } * Lot Size        */
        /*   % Upside       = Premium received on put sold / Futures price                  */
        /*   Protection                                                                     */
        /*----------------------------------------------------------------------------------*/

        /* Break even point = Futures Price + Premium on Put sold */
        d_break_pt[i_counter] = (double)l_fut_strk_prc[0] + d_premium[i_counter];

        /* Cash Inflow = Lot size * Premium received on Selling the call */
        d_cash_inflw[i_counter] = ((double)l_lot_sz[i_counter])*(d_premium[i_counter]);

        /* Maximum Profit = Lot size*{(difference b/w Futures & sold put)+(Premium received on selling put)} */
        d_max_profit[i_counter] = (double)l_lot_sz[i_counter]*
                                  (((double)l_fut_strk_prc[0] - (double)l_strk_prc[i_counter-1])+d_premium[i_counter]);

        /* percentage upside protection = (premium received on put sold/Futures price)*100 */
        d_up_side_protec[i_counter]   = (d_premium[i_counter]/(double)l_fut_strk_prc[0])*100;

				if( sql_sps_brk_point == 'Y' )
        sprintf(c_break_pt[i_counter],"%lf",d_break_pt[i_counter]);
				else
				strcpy(c_break_pt[i_counter],"NA");
				if( sql_sps_cash_flow == 'I' )
        sprintf(c_cash_inflw[i_counter],"%lf",d_cash_inflw[i_counter]);
				else
				strcpy(c_cash_inflw[i_counter],"NA");
				if( sql_sps_max_profit == 'Y' )
        sprintf(c_max_profit[i_counter],"%lf",d_max_profit[i_counter]);
				else
				strcpy(c_max_profit[i_counter],"NA");
				if( sql_sps_up_dwn_prtct == 'U' )
        sprintf(c_up_side_protec[i_counter],"%lf",d_up_side_protec[i_counter]);
				else
				strcpy(c_up_side_protec[i_counter],"NA");
      }

    }
		if(c_flg[0]=='N')
    {
      for( i_counter = 1; i_counter <= no_of_records; i_counter++ )
      {
        strcpy(c_break_pt[i_counter],"NA");
        strcpy(c_cash_inflw[i_counter],"NA");
        strcpy(c_max_profit[i_counter],"NA");
        strcpy(c_up_side_protec[i_counter],"NA");
      }
    }

		no_of_rows = no_of_records*2;

    i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_rows, 0 );
		i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_INTERVAL,( char *)&l_interval, 0 );
		i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_PRVS_CLS_PRC,( char *)&l_spot_prc, 0 );

    for( i_counter = 0; i_counter < no_of_records*2; i_counter++ )
    {
      if( i_counter == 0 || (i_counter%2 == 0 && i_counter != 1) )
      {
        i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_ACTION1,(char *)c_action1, 0 );
        i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_STRIKE_PRICE,(char *)c_strk_prc[0], 0 );
        i_err[3]  = Fadd32 ( ptr_fml_Obuf, FFO_SYMBOL,(char *)c_strnull, 0 );
        i_err[4]  = Fadd32 ( ptr_fml_Obuf, FFO_PREMIUM_OPT,(char *)c_strnull, 0 );
        i_err[5]  = Fadd32 ( ptr_fml_Obuf, FFO_BRK_EVN_PT,(char *)c_strnull, 0);
        i_err[6]  = Fadd32 ( ptr_fml_Obuf, FFO_CASH_INFLW,(char *)c_strnull, 0);
        i_err[7]  = Fadd32 ( ptr_fml_Obuf, FFO_MAX_PROFIT,(char *)c_strnull, 0);
        i_err[8]  = Fadd32 ( ptr_fml_Obuf, FFO_UP_SIDE_PRCNTG,(char *)c_strnull, 0);
				i_err[9]  = Fadd32 ( ptr_fml_Obuf, FFO_MIN_LOT_QTY,(char *)&l_lot_sz[0], 0);
				i_err[10]  = Fadd32 ( ptr_fml_Obuf, FFO_UNDRLYNG,( char *)st_cntrct_gen_inf.c_undrlyng, 0 );
				i_err[11] = Fadd32 ( ptr_fml_Obuf, FFO_EXER_TYP,(char *)&c_fut_exer_typ, 0 );
        i_err[12] = Fadd32 ( ptr_fml_Obuf, FFO_OPT_TYP,(char *)&c_fut_opt_typ, 0 );
				i_err[13] = Fadd32 ( ptr_fml_Obuf, FFO_PRDCT_TYP,(char *)&c_prd_fut, 0 );
				i_err[14] = Fadd32 ( ptr_fml_Obuf, FFO_CTGRY_INDSTK,(char *)&c_ctgry_indstk, 0 );
      }
      else
      {
        i_count = ((i_counter/2) + 1);
        i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_ACTION1,(char *)c_action2, 0);
        i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_STRIKE_PRICE,(char *)c_strk_prc[i_count], 0 );
        i_err[3]  = Fadd32 ( ptr_fml_Obuf, FFO_SYMBOL,(char *)c_var_at, 0 );
        i_err[4]  = Fadd32 ( ptr_fml_Obuf, FFO_PREMIUM_OPT,(char *)c_premium[i_count], 0 );
        i_err[5]  = Fadd32 ( ptr_fml_Obuf, FFO_BRK_EVN_PT,(char *)c_break_pt[i_count], 0);
        i_err[6]  = Fadd32 ( ptr_fml_Obuf, FFO_CASH_INFLW,(char *)c_cash_inflw[i_count], 0);
        i_err[7]  = Fadd32 ( ptr_fml_Obuf, FFO_MAX_PROFIT,(char *)c_max_profit[i_count], 0);
        i_err[8]  = Fadd32 ( ptr_fml_Obuf, FFO_UP_SIDE_PRCNTG,(char *)c_up_side_protec[i_count], 0);
				i_err[9]  = Fadd32 ( ptr_fml_Obuf, FFO_MIN_LOT_QTY,(char *)&l_lot_sz[i_count], 0);
				i_err[10]  = Fadd32 ( ptr_fml_Obuf, FFO_UNDRLYNG,( char *)st_cntrct_gen_inf.c_undrlyng, 0 );
				i_err[11] = Fadd32 ( ptr_fml_Obuf, FFO_EXER_TYP,(char *)&st_cntrct_gen_inf.c_exrc_typ, 0 );
        i_err[12] = Fadd32 ( ptr_fml_Obuf, FFO_OPT_TYP,(char *)&st_cntrct_gen_inf.c_opt_typ, 0 );
				i_err[13] = Fadd32 ( ptr_fml_Obuf, FFO_PRDCT_TYP,(char *)&c_prd_opt, 0 );
				i_err[14] = Fadd32 ( ptr_fml_Obuf, FFO_CTGRY_INDSTK,(char *)&st_cntrct_gen_inf.c_ctgry_indstk, 0 );
      }

      for( i_cnt = 0; i_cnt < 15; i_cnt++ )
     {
        if( i_err[i_cnt] == -1 )
        {
          fn_errlog( c_ServiceName, "S31260",FMLMSG,c_err_msg.arr);
          fn_userlog(c_ServiceName, "Error while generating snapshot");
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
          tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }
    }

    
		tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );

	}
	if( strcmp(c_strtgy_typ,"VOM") == 0 )
  {
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    /* Buy nearest put strike below the spot &                  */
    /* buy nearest call strike above spot                       */
    /* Repeat for second nearest,(3rd..so on) strike to spot    */
    /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"Investment Strategy type is VOM");
    }
    if(strcmp((char *)sql_sps_action1.arr,"BC") == 0)
    {
      strcpy(c_action1,"Buy");
    }
		else
    {
      fn_errlog( c_ServiceName, "S31265",DEFMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    if(strcmp((char *)sql_sps_action2.arr,"BP") == 0)
    {
      strcpy(c_action2,"Buy");
    }
		else
    {
      fn_errlog( c_ServiceName, "S31270",DEFMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		no_of_records = sql_sps_row_count;

		i_returncode = fn_get_ltqrt( c_ServiceName,
                                 &st_cntrct_gen_inf,
                                 &st_err_msg );

    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31275", DEFMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		
		l_spot_prc = st_cntrct_gen_inf.l_strike_prc;

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog( c_ServiceName,"Spot price is :%ld:",st_cntrct_gen_inf.l_strike_prc );
			fn_userlog( c_ServiceName,"Number of rows is :%ld:",sql_sps_row_count );
    }

		l_strike_prc[0] = st_cntrct_gen_inf.l_strike_prc;
    st_cntrct_gen_inf.c_opt_typ = 'C';

		i_returncode = fn_strk_prc( c_ServiceName,
                                &st_cntrct_gen_inf,
                                l_strk_prc_c,
                                &no_of_records_c,
																c_nearest_flg,
                                &st_err_msg );

    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31280", DEFMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if( st_cntrct_gen_inf.l_strike_prc == 0 )
    {
      no_of_records = 0;
      i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_records, 0 );
      tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
    }

    if ( no_of_records_c > sql_sps_row_count )
    {
      no_of_records_c = sql_sps_row_count;
    }

		for( i_counter = 0; i_counter < no_of_records_c; i_counter++ ) /* Start of first loop */
		{	
			st_cntrct_gen_inf.l_strike_prc = l_strk_prc_c[i_counter];

			st_cntrct_gen_inf.c_opt_typ = 'C';
			st_cntrct_gen_inf.l_min_lot_qty = l_lot_size;

			i_returncode = fn_buy_call( c_ServiceName,
                                  &st_cntrct_gen_inf,
                                  &d_premi,
																  &l_interval,
																	sql_exg_crrnt_stts,
                                  &st_err_msg );

      if ( i_returncode == -1 )
     	{
       	fn_errlog( c_ServiceName, "S31285", DEFMSG, c_err_msg.arr  );
       	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
       	tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     	}
			d_premium[i_counter*2] = d_premi;
      c_flg[i_counter*2] = st_cntrct_gen_inf.c_rqst_typ;
      l_lot_sz[i_counter*2] = st_cntrct_gen_inf.l_min_lot_qty;
      c_opt_typ[i_counter*2] = st_cntrct_gen_inf.c_opt_typ;
      l_strk_prc[i_counter*2] = l_strk_prc_c[i_counter];
      sprintf(c_premium[i_counter*2],"%lf",d_premium[i_counter*2]);
      sprintf(c_strk_prc[i_counter*2],"%ld",l_strk_prc_c[i_counter]);
			if(DEBUG_MSG_LVL_5)
      {
        fn_userlog(c_ServiceName,"C_FLG of :%d: is :%c:",(i_counter*2),c_flg[i_counter*2]);
      }

		}

		st_cntrct_gen_inf.l_strike_prc = l_strike_prc[0];
		st_cntrct_gen_inf.c_opt_typ = 'P';
	  st_cntrct_gen_inf.l_min_lot_qty = l_lot_size;

	  i_returncode = fn_strk_prc( c_ServiceName,
                                &st_cntrct_gen_inf,
                                l_strk_prc_p,
                                &no_of_records_p,
																c_nearest_flg,
                                &st_err_msg );

    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31290", DEFMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if( st_cntrct_gen_inf.l_strike_prc == 0 )
    {
      no_of_records = 0;
      i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_records, 0 );
      tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
    }

    if ( no_of_records_p > sql_sps_row_count )
    {
      no_of_records_p = sql_sps_row_count;
    }

    for( i_counter = 0; i_counter < no_of_records_p; i_counter++ ) /* Start of second for loop */
    {
			st_cntrct_gen_inf.l_strike_prc = l_strk_prc_p[i_counter];
      st_cntrct_gen_inf.c_opt_typ = 'P';
      st_cntrct_gen_inf.l_min_lot_qty = l_lot_size;
	
			i_returncode = fn_buy_put( c_ServiceName,
                               	 &st_cntrct_gen_inf,
                                 &d_premi,
															   &l_interval,
																 sql_exg_crrnt_stts,
                                 &st_err_msg );
      if ( i_returncode == -1 )
      {
    	  fn_errlog( c_ServiceName, "S31295", DEFMSG, c_err_msg.arr  );
     	  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
     	  tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   	  }

		  d_premium[i_counter*2 + 1] = d_premi;
      c_flg[i_counter*2 + 1] = st_cntrct_gen_inf.c_rqst_typ;
      l_lot_sz[i_counter*2 + 1] = st_cntrct_gen_inf.l_min_lot_qty;
      c_opt_typ[i_counter*2 + 1] = st_cntrct_gen_inf.c_opt_typ;
      l_strk_prc[i_counter*2 + 1] = l_strk_prc_p[i_counter];
      sprintf(c_premium[i_counter*2 + 1],"%lf",d_premium[i_counter*2 + 1]);
      sprintf(c_strk_prc[i_counter*2 + 1],"%ld",l_strk_prc_p[i_counter]);

      if(DEBUG_MSG_LVL_5)
      {
        fn_userlog(c_ServiceName,"C_FLG of :%d: is :%c:",i_counter,c_flg[i_counter*2 + 1]);
      }
	

		}/* End of second for loop */

		no_of_records = minimum( no_of_records_c,no_of_records_p );

		for( i_counter = 0; i_counter < no_of_records; i_counter++ )
    {
      if( c_flg[i_counter*2] == 'N' || c_flg[(i_counter*2)+1] == 'N' )
      {
        strcpy(c_break_ptl[i_counter+1],"NA");
        strcpy(c_break_ptu[i_counter+1],"NA");
        strcpy(c_cash_outflw[i_counter+1],"NA");
        strcpy(c_max_loss[i_counter+1],"NA");
      }

      if( c_flg[i_counter*2] != 'N' && c_flg[(i_counter*2)+1] != 'N' )
      {

        /*----------------------------------------------------------------------------------*/
        /*                         FORMULAE FOR VOM PAYOFF SUMMARY                          */
        /*   Lower Break-even Point = Lower Strike - Total Premium paid                     */
        /*   Upper Break-even Point = Upper Strike - Total Premium paid                     */
        /*   Cash Outflow           = Lot Size * Total Premium paid                         */
        /*   Max Loss       			  = Cash Outflow calculated above                         */
        /*----------------------------------------------------------------------------------*/

        d_break_ptl[i_counter+1] = (double)l_strk_prc[(i_counter*2)+1] - ( d_premium[i_counter*2] + 
																		d_premium[(i_counter*2)+1] );

        d_break_ptu[i_counter+1] = (double)l_strk_prc[i_counter*2] + ( d_premium[i_counter*2] + d_premium[(i_counter*2)+1] );

        d_cash_outflw[i_counter+1] = ((double)l_lot_sz[i_counter*2])*( d_premium[i_counter*2] + d_premium[(i_counter*2)+1] );

        d_max_loss[i_counter+1] = (double)l_lot_sz[i_counter*2]*( d_premium[i_counter*2] + d_premium[(i_counter*2)+1] );

				if( sql_sps_brk_point == 'Y' )
        sprintf(c_break_ptl[i_counter+1],"%lf",d_break_ptl[i_counter+1]);
				else
		    strcpy( c_break_ptl[i_counter+1],"NA" );	
				if( sql_sps_brk_point_up == 'Y' )
        sprintf(c_break_ptu[i_counter+1],"%lf",d_break_ptu[i_counter+1]);
				else
				strcpy( c_break_ptu[i_counter+1],"NA" );
				if( sql_sps_cash_flow == 'O' )
        sprintf(c_cash_outflw[i_counter+1],"%lf",d_cash_outflw[i_counter+1]);
				else
				strcpy( c_cash_outflw[i_counter+1],"NA" );
				if( sql_sps_max_loss == 'Y' )
        sprintf(c_max_loss[i_counter+1],"%lf",d_max_loss[i_counter+1]);
				else
				strcpy( c_max_loss[i_counter+1],"NA" );
      }
    }
		no_of_rows = no_of_records*2;
    i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_rows, 0 );
		i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_INTERVAL,( char *)&l_interval, 0 );
		i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_PRVS_CLS_PRC,( char *)&l_spot_prc, 0 );

    for( i_counter = 0; i_counter < no_of_records*2; i_counter++ )
    {
      if( i_counter == 0 || (i_counter%2 == 0 && i_counter != 1) )
      {
				if(DEBUG_MSG_LVL_5)
    		{
      		fn_userlog(c_ServiceName,"c_break_ptl of :%d: is :%s:",i_counter,c_break_ptl[i_counter]);
					fn_userlog(c_ServiceName,"c_break_ptu of :%d: is :%s:",i_counter,c_break_ptu[i_counter]);
					fn_userlog(c_ServiceName,"c_cash_outflw of :%d: is :%s:",i_counter,c_cash_outflw[i_counter]);
					fn_userlog(c_ServiceName,"c_max_loss of :%d: is :%s:",i_counter,c_max_loss[i_counter]);
    		}
        i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_ACTION1,(char *)c_action1, 0 );
        i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_STRIKE_PRICE,(char *)c_strk_prc[i_counter], 0 );
        i_err[3]  = Fadd32 ( ptr_fml_Obuf, FFO_SYMBOL,(char *)c_var_at, 0 );
        i_err[4]  = Fadd32 ( ptr_fml_Obuf, FFO_PREMIUM_OPT,(char *)c_premium[i_counter], 0 );
        i_err[5]  = Fadd32 ( ptr_fml_Obuf, FFO_LOW_PT,(char *)c_strnull, 0);
        i_err[6]  = Fadd32 ( ptr_fml_Obuf, FFO_HIGH_PT,(char *)c_strnull, 0);
        i_err[7]  = Fadd32 ( ptr_fml_Obuf, FFO_CASH_OUTFLW,(char *)c_strnull, 0);
        i_err[8]  = Fadd32 ( ptr_fml_Obuf, FFO_MAX_LOSS,(char *)c_strnull, 0);
				i_err[9]  = Fadd32 ( ptr_fml_Obuf, FFO_MIN_LOT_QTY,(char *)&l_lot_sz[0], 0);
				i_err[10]  = Fadd32 ( ptr_fml_Obuf, FFO_UNDRLYNG,( char *)st_cntrct_gen_inf.c_undrlyng, 0 );
				i_err[11] = Fadd32 ( ptr_fml_Obuf, FFO_EXER_TYP,(char *)&st_cntrct_gen_inf.c_exrc_typ, 0 );
        i_err[12] = Fadd32 ( ptr_fml_Obuf, FFO_OPT_TYP,(char *)&c_opt_typ[0], 0 );
				i_err[13] = Fadd32 ( ptr_fml_Obuf, FFO_PRDCT_TYP,(char *)&c_prd_opt, 0 );
				i_err[14] = Fadd32 ( ptr_fml_Obuf, FFO_CTGRY_INDSTK,(char *)&st_cntrct_gen_inf.c_ctgry_indstk, 0 );
      }
      else
      {
				if(DEBUG_MSG_LVL_5)
        {
          fn_userlog(c_ServiceName,"c_break_ptl of :%d: is :%s:",i_counter,c_break_ptl[i_counter]);
          fn_userlog(c_ServiceName,"c_break_ptu of :%d: is :%s:",i_counter,c_break_ptu[i_counter]);
          fn_userlog(c_ServiceName,"c_cash_outflw of :%d: is :%s:",i_counter,c_cash_outflw[i_counter]);
          fn_userlog(c_ServiceName,"c_max_loss of :%d: is :%s:",i_counter,c_max_loss[i_counter]);
        }
				i_count = ((i_counter/2)+1);
        i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_ACTION1,(char *)c_action2, 0);
        i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_STRIKE_PRICE,(char *)c_strk_prc[i_counter], 0 );
        i_err[3]  = Fadd32 ( ptr_fml_Obuf, FFO_SYMBOL,(char *)c_var_at, 0 );
        i_err[4]  = Fadd32 ( ptr_fml_Obuf, FFO_PREMIUM_OPT,(char *)c_premium[i_counter], 0 );
        i_err[5]  = Fadd32 ( ptr_fml_Obuf, FFO_LOW_PT,(char *)c_break_ptl[i_count], 0);
        i_err[6]  = Fadd32 ( ptr_fml_Obuf, FFO_HIGH_PT,(char *)c_break_ptu[i_count], 0);
        i_err[7]  = Fadd32 ( ptr_fml_Obuf, FFO_CASH_OUTFLW,(char *)c_cash_outflw[i_count], 0);
        i_err[8]  = Fadd32 ( ptr_fml_Obuf, FFO_MAX_LOSS,(char *)c_max_loss[i_count], 0);
				i_err[9]  = Fadd32 ( ptr_fml_Obuf, FFO_MIN_LOT_QTY,(char *)&l_lot_sz[i_count], 0);
				i_err[10]  = Fadd32 ( ptr_fml_Obuf, FFO_UNDRLYNG,( char *)st_cntrct_gen_inf.c_undrlyng, 0 );
				i_err[11] = Fadd32 ( ptr_fml_Obuf, FFO_EXER_TYP,(char *)&st_cntrct_gen_inf.c_exrc_typ, 0 );
        i_err[12] = Fadd32 ( ptr_fml_Obuf, FFO_OPT_TYP,(char *)&c_opt_typ[i_counter], 0 );
				i_err[13] = Fadd32 ( ptr_fml_Obuf, FFO_PRDCT_TYP,(char *)&c_prd_opt, 0 );
				i_err[14] = Fadd32 ( ptr_fml_Obuf, FFO_CTGRY_INDSTK,(char *)&st_cntrct_gen_inf.c_ctgry_indstk, 0 );
      }

      for( i_cnt = 1; i_cnt < 15; i_cnt++ )
      {
        if( i_err[i_cnt] == -1 )
        {
          fn_errlog( c_ServiceName, "S31300",FMLMSG,c_err_msg.arr);
          fn_userlog(c_ServiceName, "Error while generating snapshot");
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
          tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }

    }

    tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
	}
	if( strcmp(c_strtgy_typ,"VOL") == 0 )
  {

		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    /* Buy nearest put strike & nearest call strike from spot.  */
		/* Defining nearest below:																	*/
		/* Let spot be S. Take 2 consecutive strikes as S1 and S2.  */
		/* ( S will be between S1 and S2 )													*/
		/* Buy strike S1 if S is less than (S1 + (S2-S1)*0.25 )			*/ 
		/* else buy S2. 																						*/ 
    /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"Investment Strategy type is VOL");
    }
    if(strcmp((char *)sql_sps_action1.arr,"BC") == 0)
    {
      strcpy(c_action1,"Buy");
    }
		else
    {
      fn_errlog( c_ServiceName, "S31305",DEFMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    if(strcmp((char *)sql_sps_action2.arr,"BP") == 0)
    {
      strcpy(c_action2,"Buy");
    }
		else
    {
      fn_errlog( c_ServiceName, "S31310",DEFMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    no_of_records = sql_sps_row_count;

    i_returncode = fn_get_ltqrt( c_ServiceName,
                                 &st_cntrct_gen_inf,
                                 &st_err_msg );

    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31315", DEFMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		l_spot_prc = st_cntrct_gen_inf.l_strike_prc;

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog( c_ServiceName,"Spot price is :%ld:",st_cntrct_gen_inf.l_strike_prc );
      fn_userlog( c_ServiceName,"Number of rows is :%ld:",sql_sps_row_count );
    }

   	st_cntrct_gen_inf.c_opt_typ = 'C';
		c_nearest_flg = 'Y';

   	i_returncode = fn_strk_prc( c_ServiceName,
                               	&st_cntrct_gen_inf,
                               	l_strk_prc_c,
                               	&no_of_records_c,
                               	c_nearest_flg,
                               	&st_err_msg );

   	if ( i_returncode == -1 )
   	{
     	fn_errlog( c_ServiceName, "S31320", DEFMSG, c_err_msg.arr  );
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
     	tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   	}

   	if( l_strk_prc_c == 0 )
   	{
     	no_of_records = 0;
     	i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_records, 0 );
     	tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
   	}

   	if ( no_of_records_c > sql_sps_row_count )
   	{
     	no_of_records_c = sql_sps_row_count;
   	}

   	st_cntrct_gen_inf.l_strike_prc = l_strk_prc_c[0];
		st_cntrct_gen_inf.l_min_lot_qty = l_lot_size;

    i_returncode = fn_buy_call( c_ServiceName,
                               	&st_cntrct_gen_inf,
                               	&d_premi,
                               	&l_interval,	
																sql_exg_crrnt_stts,
                               	&st_err_msg );

    if ( i_returncode == -1 )
    {
     	fn_errlog( c_ServiceName, "S31325", DEFMSG, c_err_msg.arr  );
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
     	tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    d_premium[0] = d_premi;
    c_flg[0] = st_cntrct_gen_inf.c_rqst_typ;
    l_lot_sz[0] = st_cntrct_gen_inf.l_min_lot_qty;
    c_opt_typ[0] = st_cntrct_gen_inf.c_opt_typ;
    l_strk_prc[0] = l_strk_prc_c[0];
    sprintf(c_premium[0],"%lf",d_premium[0]);
		sprintf(c_strk_prc[0],"%ld",l_strk_prc_c[0]);

		st_cntrct_gen_inf.c_opt_typ = 'P';
    c_nearest_flg = 'Y';
   	st_cntrct_gen_inf.l_strike_prc = l_spot_prc;
   	st_cntrct_gen_inf.l_min_lot_qty = l_lot_size;

   	i_returncode = fn_strk_prc( c_ServiceName,
                               	&st_cntrct_gen_inf,
                               	l_strk_prc_p,
                               	&no_of_records_p,
                               	c_nearest_flg,
                               	&st_err_msg );

   	if ( i_returncode == -1 )
   	{
     	fn_errlog( c_ServiceName, "S31330", DEFMSG, c_err_msg.arr  );
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
     	tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   	}

   	if( l_strk_prc_p[0] == 0 || l_strk_prc_p[0] != l_strk_prc_c[0] )
   	{
     	no_of_records = 0;
     	i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_records, 0 );
     	tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
   	}

   	if ( no_of_records_p > sql_sps_row_count )
   	{
     	no_of_records_p = sql_sps_row_count;
   	}

    st_cntrct_gen_inf.l_strike_prc = l_strk_prc_p[0];

    i_returncode = fn_buy_put( c_ServiceName,
                             	 &st_cntrct_gen_inf,
                               &d_premi,
                               &l_interval,
															 sql_exg_crrnt_stts,
                               &st_err_msg );
    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31335", DEFMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }	
	  d_premium[1] = d_premi;
    c_flg[1] = st_cntrct_gen_inf.c_rqst_typ;
    l_lot_sz[1] = st_cntrct_gen_inf.l_min_lot_qty;
    c_opt_typ[1] = st_cntrct_gen_inf.c_opt_typ;
    l_strk_prc[1] = l_strk_prc_p[0];
    sprintf(c_premium[1],"%lf",d_premium[1]);
    sprintf(c_strk_prc[1],"%ld",l_strk_prc_p[0]);

		for( i_counter = 1; i_counter <= no_of_records; i_counter++ )
    {
      if( c_flg[i_counter] == 'N' )
      {
        strcpy(c_break_ptl[i_counter],"NA");
        strcpy(c_break_ptu[i_counter],"NA");
        strcpy(c_cash_outflw[i_counter],"NA");
        strcpy(c_max_loss[i_counter],"NA");
      }

      if( c_flg[i_counter] != 'N' && c_flg[0] != 'N')
      {

        /*----------------------------------------------------------------------------------*/
        /*                         FORMULAE FOR VOL PAYOFF SUMMARY                          */
        /*   Lower Break-even Point = Lower Strike - Total Premium paid                     */
        /*   Upper Break-even Point = Upper Strike - Total Premium paid                     */
        /*   Cash Outflow           = Lot Size * Total Premium paid                         */
        /*   Max Loss             = Cash Outflow calculated above                         */
        /*----------------------------------------------------------------------------------*/

        d_break_ptl[i_counter] = (double)l_strk_prc[i_counter] - ( d_premium[i_counter-1] + d_premium[i_counter] );

        d_break_ptu[i_counter] = (double)l_strk_prc[i_counter-1] + ( d_premium[i_counter-1] + d_premium[i_counter] );

        d_cash_outflw[i_counter] = ((double)l_lot_sz[i_counter])*( d_premium[i_counter-1] + d_premium[i_counter] );

        d_max_loss[i_counter] = (double)l_lot_sz[i_counter]*( d_premium[i_counter-1] + d_premium[i_counter] );

				if( sql_sps_brk_point == 'Y' )
        sprintf(c_break_ptl[i_counter],"%lf",d_break_ptl[i_counter]);
				else
				strcpy(c_break_ptl[i_counter],"NA");
				if( sql_sps_brk_point_up == 'Y' )
        sprintf(c_break_ptu[i_counter],"%lf",d_break_ptu[i_counter]);
				else
				strcpy(c_break_ptu[i_counter],"NA");
				if( sql_sps_cash_flow == 'O' )
        sprintf(c_cash_outflw[i_counter],"%lf",d_cash_outflw[i_counter]);
				else
				strcpy(c_cash_outflw[i_counter],"NA");
				if( sql_sps_max_loss == 'Y' )
        sprintf(c_max_loss[i_counter],"%lf",d_max_loss[i_counter]);
				else
				strcpy(c_max_loss[i_counter],"NA");
      }
    }
    if(c_flg[0]=='N')
    {
      for( i_counter = 1; i_counter <= no_of_records; i_counter++ )
      {
        strcpy(c_break_ptl[i_counter],"NA");
        strcpy(c_break_ptu[i_counter],"NA");
        strcpy(c_cash_outflw[i_counter],"NA");
        strcpy(c_max_loss[i_counter],"NA");
      }
    }
    no_of_rows = no_of_records*2;
		i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_rows, 0 );
		i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_INTERVAL,( char *)&l_interval, 0 );
		i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_PRVS_CLS_PRC,( char *)&l_spot_prc, 0 );

    for( i_counter = 0; i_counter < no_of_records*2; i_counter++ )
    {
      if( i_counter == 0 || (i_counter%2 == 0 && i_counter != 1) )
      {
        i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_ACTION1,(char *)c_action1, 0 );
        i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_STRIKE_PRICE,(char *)c_strk_prc[i_counter], 0 );
        i_err[3]  = Fadd32 ( ptr_fml_Obuf, FFO_SYMBOL,(char *)c_var_at, 0 );
        i_err[4]  = Fadd32 ( ptr_fml_Obuf, FFO_PREMIUM_OPT,(char *)c_premium[i_counter], 0 );
        i_err[5]  = Fadd32 ( ptr_fml_Obuf, FFO_LOW_PT,(char *)c_strnull, 0);
        i_err[6]  = Fadd32 ( ptr_fml_Obuf, FFO_HIGH_PT,(char *)c_strnull, 0);
        i_err[7]  = Fadd32 ( ptr_fml_Obuf, FFO_CASH_OUTFLW,(char *)c_strnull, 0);
        i_err[8]  = Fadd32 ( ptr_fml_Obuf, FFO_MAX_LOSS,(char *)c_strnull, 0);
				i_err[9]  = Fadd32 ( ptr_fml_Obuf, FFO_MIN_LOT_QTY,(char *)&l_lot_sz[0], 0);
				i_err[10]  = Fadd32 ( ptr_fml_Obuf, FFO_UNDRLYNG,( char *)st_cntrct_gen_inf.c_undrlyng, 0 );
				i_err[11] = Fadd32 ( ptr_fml_Obuf, FFO_EXER_TYP,(char *)&st_cntrct_gen_inf.c_exrc_typ, 0 );
        i_err[12] = Fadd32 ( ptr_fml_Obuf, FFO_OPT_TYP,(char *)&c_opt_typ[0], 0 );
				i_err[13] = Fadd32 ( ptr_fml_Obuf, FFO_PRDCT_TYP,(char *)&c_prd_opt, 0 );
				i_err[14] = Fadd32 ( ptr_fml_Obuf, FFO_CTGRY_INDSTK,(char *)&st_cntrct_gen_inf.c_ctgry_indstk, 0 );
      }
      else
      {
        i_count = ((i_counter/2)+1);
        i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_ACTION1,(char *)c_action2, 0);
        i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_STRIKE_PRICE,(char *)c_strk_prc[i_count], 0 );
        i_err[3]  = Fadd32 ( ptr_fml_Obuf, FFO_SYMBOL,(char *)c_var_at, 0 );
        i_err[4]  = Fadd32 ( ptr_fml_Obuf, FFO_PREMIUM_OPT,(char *)c_premium[i_count], 0 );
        i_err[5]  = Fadd32 ( ptr_fml_Obuf, FFO_LOW_PT,(char *)c_break_ptl[i_count], 0);
        i_err[6]  = Fadd32 ( ptr_fml_Obuf, FFO_HIGH_PT,(char *)c_break_ptu[i_count], 0);
        i_err[7]  = Fadd32 ( ptr_fml_Obuf, FFO_CASH_OUTFLW,(char *)c_cash_outflw[i_count], 0);
        i_err[8]  = Fadd32 ( ptr_fml_Obuf, FFO_MAX_LOSS,(char *)c_max_loss[i_count], 0);
				i_err[9]  = Fadd32 ( ptr_fml_Obuf, FFO_MIN_LOT_QTY,(char *)&l_lot_sz[i_count], 0);
				i_err[10]  = Fadd32 ( ptr_fml_Obuf, FFO_UNDRLYNG,( char *)st_cntrct_gen_inf.c_undrlyng, 0 );
				i_err[11] = Fadd32 ( ptr_fml_Obuf, FFO_EXER_TYP,(char *)&st_cntrct_gen_inf.c_exrc_typ, 0 );
        i_err[12] = Fadd32 ( ptr_fml_Obuf, FFO_OPT_TYP,(char *)&c_opt_typ[i_count], 0 );
				i_err[13] = Fadd32 ( ptr_fml_Obuf, FFO_PRDCT_TYP,(char *)&c_prd_opt, 0 );
				i_err[14] = Fadd32 ( ptr_fml_Obuf, FFO_CTGRY_INDSTK,(char *)&st_cntrct_gen_inf.c_ctgry_indstk, 0 );
      }

      for( i_cnt = 1; i_cnt < 15; i_cnt++ )
      {
        if( i_err[i_cnt] == -1 )
        {
          fn_errlog( c_ServiceName, "S31340",FMLMSG,c_err_msg.arr);
          fn_userlog(c_ServiceName, "Error while generating snapshot");
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
          tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }

    }

    tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
  }
	if( strcmp(c_strtgy_typ,"RAL") == 0 )
	{
		
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    /* Sell nearest put strike below the spot &                 */
    /* sell nearest call strike above spot                      */
		/* Repeat for second nearest,(3rd..so on) strike to spot    */
    /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"Investment Strategy type is RAL");
    }
    if(strcmp((char *)sql_sps_action1.arr,"SC") == 0)
    {
      strcpy(c_action1,"Sell");
    }
		else
    {
      fn_errlog( c_ServiceName, "S31345",DEFMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    if(strcmp((char *)sql_sps_action2.arr,"SP") == 0)
    {
      strcpy(c_action2,"Sell");
    }
		else
    {
      fn_errlog( c_ServiceName, "S31350",DEFMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    no_of_records = sql_sps_row_count;

    i_returncode = fn_get_ltqrt( c_ServiceName,
                                 &st_cntrct_gen_inf,
                                 &st_err_msg );

    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31355", DEFMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		l_spot_prc = st_cntrct_gen_inf.l_strike_prc;

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog( c_ServiceName,"Spot price is :%ld:",st_cntrct_gen_inf.l_strike_prc );
      fn_userlog( c_ServiceName,"Number of rows is :%ld:",sql_sps_row_count );
    }

		l_strike_prc[0] = st_cntrct_gen_inf.l_strike_prc;
		st_cntrct_gen_inf.c_opt_typ = 'C';

		i_returncode = fn_strk_prc( c_ServiceName,
                                &st_cntrct_gen_inf,
                                l_strk_prc_c,
                                &no_of_records_c,
																c_nearest_flg,
                                &st_err_msg );

    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31360", DEFMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if( st_cntrct_gen_inf.l_strike_prc == 0 )
    {
      no_of_records = 0;
      i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_records, 0 );
      tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
    }

    if ( no_of_records_c > sql_sps_row_count )
    {
      no_of_records_c = sql_sps_row_count;
    }

		for( i_counter = 0; i_counter < no_of_records_c; i_counter++ ) /* Start of first for loop */
    {

			st_cntrct_gen_inf.l_strike_prc = l_strk_prc_c[i_counter];

			st_cntrct_gen_inf.c_opt_typ = 'C';
			st_cntrct_gen_inf.l_min_lot_qty = l_lot_size;

			i_returncode = fn_sell_call( c_ServiceName,
                                   &st_cntrct_gen_inf,
                                   &d_premi,
																	 &l_interval,
																	 sql_exg_crrnt_stts,
                                   &st_err_msg );

     	if ( i_returncode == -1 )
     	{
       	fn_errlog( c_ServiceName, "S31365", DEFMSG, c_err_msg.arr  );
       	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
       	tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     	}
			d_premium[i_counter*2] = d_premi;
      c_flg[i_counter*2] = st_cntrct_gen_inf.c_rqst_typ;
      l_lot_sz[i_counter*2] = st_cntrct_gen_inf.l_min_lot_qty;
      c_opt_typ[i_counter*2] = st_cntrct_gen_inf.c_opt_typ;
			l_strk_prc[i_counter*2] = l_strk_prc_c[i_counter];
      sprintf(c_premium[i_counter*2],"%lf",d_premium[i_counter*2]);
      sprintf(c_strk_prc[i_counter*2],"%ld",l_strk_prc_c[i_counter]);
      if(DEBUG_MSG_LVL_5)
      {
        fn_userlog(c_ServiceName,"C_FLG of :%d: is :%c:",(i_counter*2),c_flg[i_counter*2]);
      }
		}
		
		st_cntrct_gen_inf.l_strike_prc = l_strike_prc[0];
    st_cntrct_gen_inf.c_opt_typ = 'P';

    i_returncode = fn_strk_prc( c_ServiceName,
                                &st_cntrct_gen_inf,
                                l_strk_prc_p,
                                &no_of_records_p,
																c_nearest_flg,
                                &st_err_msg );

    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31370", DEFMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if( st_cntrct_gen_inf.l_strike_prc == 0 )
    {
      no_of_records = 0;
      i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_records, 0 );
      tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
    }

    if ( no_of_records_p > sql_sps_row_count )
    {
      no_of_records_p = sql_sps_row_count;
    }

		for( i_counter = 0; i_counter < no_of_records_p; i_counter++ ) /* Start of second for loop */
		{
			st_cntrct_gen_inf.l_strike_prc = l_strk_prc_p[i_counter];
			st_cntrct_gen_inf.c_opt_typ = 'P';
			st_cntrct_gen_inf.l_min_lot_qty = l_lot_size;

			i_returncode = fn_sell_put( c_ServiceName,
                                  &st_cntrct_gen_inf,
                                  &d_premi,
																  &l_interval,
																	sql_exg_crrnt_stts,
                                  &st_err_msg );

     	if ( i_returncode == -1 )
     	{
       	fn_errlog( c_ServiceName, "S31375", DEFMSG, c_err_msg.arr  );
       	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
       	tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     	}

      d_premium[i_counter*2 + 1] = d_premi;
      c_flg[i_counter*2 + 1] = st_cntrct_gen_inf.c_rqst_typ;
      l_lot_sz[i_counter*2 + 1] = st_cntrct_gen_inf.l_min_lot_qty;
			c_opt_typ[i_counter*2 + 1] = st_cntrct_gen_inf.c_opt_typ;
			l_strk_prc[i_counter*2 + 1] = l_strk_prc_p[i_counter];
      sprintf(c_premium[i_counter*2 + 1],"%lf",d_premium[i_counter*2 + 1]);
      sprintf(c_strk_prc[i_counter*2 + 1],"%ld",l_strk_prc_p[i_counter]);

      if(DEBUG_MSG_LVL_5)
      {
        fn_userlog(c_ServiceName,"C_FLG of :%d: is :%c:",i_counter,c_flg[i_counter*2 + 1]);
      }

    } /* End of second for loop */

		no_of_records = minimum( no_of_records_c,no_of_records_p );

		for( i_counter = 0; i_counter < no_of_records; i_counter++ )
    {
      if( c_flg[i_counter*2] == 'N' || c_flg[(i_counter*2)+1] == 'N' )
      {
        strcpy(c_break_ptl[i_counter+1],"NA");
        strcpy(c_break_ptu[i_counter+1],"NA");
        strcpy(c_cash_inflw[i_counter+1],"NA");
        strcpy(c_max_profit[i_counter+1],"NA");
      }

      if( c_flg[i_counter*2] != 'N' && c_flg[(i_counter*2)+1] != 'N' )
      {

        /*----------------------------------------------------------------------------------*/
        /*                         FORMULAE FOR RAL PAYOFF SUMMARY                          */
        /*   Lower Break-even Point = Lower Strike - Total Premium paid                     */
        /*   Upper Break-even Point = Upper Strike + Total Premium paid                     */
        /*   Cash Inflow            = Lot Size * Total Premium paid                         */
        /*   Max Profit             = Cash Inflow calculated above                          */
        /*----------------------------------------------------------------------------------*/

        d_break_ptl[i_counter+1] = (double)l_strk_prc[(i_counter*2)+1] - ( d_premium[i_counter*2] +
                                    d_premium[(i_counter*2)+1] );

        d_break_ptu[i_counter+1] = (double)l_strk_prc[i_counter*2] + ( d_premium[i_counter*2] + 
																		d_premium[(i_counter*2)+1]);

        d_cash_inflw[i_counter+1] = ((double)l_lot_sz[i_counter*2])*( d_premium[i_counter*2] + d_premium[(i_counter*2)+1] );

        d_max_profit[i_counter+1] = (double)l_lot_sz[i_counter*2]*( d_premium[i_counter*2] + d_premium[(i_counter*2)+1] );

				if( sql_sps_brk_point == 'Y' )
        sprintf(c_break_ptl[i_counter+1],"%lf",d_break_ptl[i_counter+1]);
				else
				strcpy(c_break_ptl[i_counter+1],"NA");
				if( sql_sps_brk_point_up == 'Y' )
        sprintf(c_break_ptu[i_counter+1],"%lf",d_break_ptu[i_counter+1]);
				else
				strcpy(c_break_ptu[i_counter+1],"NA");
				if( sql_sps_cash_flow == 'I' )
        sprintf(c_cash_inflw[i_counter+1],"%lf",d_cash_inflw[i_counter+1]);
				else
				strcpy(c_cash_inflw[i_counter+1],"NA");
				if( sql_sps_max_profit == 'Y' )
        sprintf(c_max_profit[i_counter+1],"%lf",d_max_profit[i_counter+1]);
				else
				strcpy(c_max_profit[i_counter+1],"NA");
      }
    }
    no_of_rows = no_of_records*2;
    i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_rows, 0 );
		i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_INTERVAL,( char *)&l_interval, 0 );
		i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_PRVS_CLS_PRC,( char *)&l_spot_prc, 0 );
		
		for( i_counter = 0; i_counter < no_of_records*2; i_counter++ )
    {
      if( i_counter == 0 || (i_counter%2 == 0 && i_counter != 1) )
      {
        if(DEBUG_MSG_LVL_5)
        {
          fn_userlog(c_ServiceName,"c_break_ptl of :%d: is :%s:",i_counter,c_break_ptl[i_counter]);
          fn_userlog(c_ServiceName,"c_break_ptu of :%d: is :%s:",i_counter,c_break_ptu[i_counter]);
          fn_userlog(c_ServiceName,"c_cash_inflw of :%d: is :%s:",i_counter,c_cash_inflw[i_counter]);
          fn_userlog(c_ServiceName,"c_max_profit of :%d: is :%s:",i_counter,c_max_profit[i_counter]);
        }
        i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_ACTION1,(char *)c_action1, 0 );
        i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_STRIKE_PRICE,(char *)c_strk_prc[i_counter], 0 );
        i_err[3]  = Fadd32 ( ptr_fml_Obuf, FFO_SYMBOL,(char *)c_var_at, 0 );
        i_err[4]  = Fadd32 ( ptr_fml_Obuf, FFO_PREMIUM_OPT,(char *)c_premium[i_counter], 0 );
        i_err[5]  = Fadd32 ( ptr_fml_Obuf, FFO_LOW_PT,(char *)c_strnull, 0);
        i_err[6]  = Fadd32 ( ptr_fml_Obuf, FFO_HIGH_PT,(char *)c_strnull, 0);
        i_err[7]  = Fadd32 ( ptr_fml_Obuf, FFO_CASH_INFLW,(char *)c_strnull, 0);
        i_err[8]  = Fadd32 ( ptr_fml_Obuf, FFO_MAX_PROFIT,(char *)c_strnull, 0);
				i_err[9]  = Fadd32 ( ptr_fml_Obuf, FFO_MIN_LOT_QTY,(char *)&l_lot_sz[0], 0);
				i_err[10]  = Fadd32 ( ptr_fml_Obuf, FFO_UNDRLYNG,( char *)st_cntrct_gen_inf.c_undrlyng, 0 );
				i_err[11] = Fadd32 ( ptr_fml_Obuf, FFO_EXER_TYP,(char *)&st_cntrct_gen_inf.c_exrc_typ, 0 );
        i_err[12] = Fadd32 ( ptr_fml_Obuf, FFO_OPT_TYP,(char *)&c_opt_typ[0], 0 );
				i_err[13] = Fadd32 ( ptr_fml_Obuf, FFO_PRDCT_TYP,(char *)&c_prd_opt, 0 );
				i_err[14] = Fadd32 ( ptr_fml_Obuf, FFO_CTGRY_INDSTK,(char *)&st_cntrct_gen_inf.c_ctgry_indstk, 0 );
      }
      else
      {
        if(DEBUG_MSG_LVL_5)
        {
          fn_userlog(c_ServiceName,"c_break_ptl of :%d: is :%s:",i_counter,c_break_ptl[i_counter]);
          fn_userlog(c_ServiceName,"c_break_ptu of :%d: is :%s:",i_counter,c_break_ptu[i_counter]);
          fn_userlog(c_ServiceName,"c_cash_inflw of :%d: is :%s:",i_counter,c_cash_inflw[i_counter]);
          fn_userlog(c_ServiceName,"c_max_profit of :%d: is :%s:",i_counter,c_max_profit[i_counter]);
        }
        i_count = ((i_counter/2)+1);
        i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_ACTION1,(char *)c_action2, 0);
        i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_STRIKE_PRICE,(char *)c_strk_prc[i_counter], 0 );
        i_err[3]  = Fadd32 ( ptr_fml_Obuf, FFO_SYMBOL,(char *)c_var_at, 0 );
        i_err[4]  = Fadd32 ( ptr_fml_Obuf, FFO_PREMIUM_OPT,(char *)c_premium[i_counter], 0 );
        i_err[5]  = Fadd32 ( ptr_fml_Obuf, FFO_LOW_PT,(char *)c_break_ptl[i_count], 0);
        i_err[6]  = Fadd32 ( ptr_fml_Obuf, FFO_HIGH_PT,(char *)c_break_ptu[i_count], 0);
        i_err[7]  = Fadd32 ( ptr_fml_Obuf, FFO_CASH_INFLW,(char *)c_cash_inflw[i_count], 0);
        i_err[8]  = Fadd32 ( ptr_fml_Obuf, FFO_MAX_PROFIT,(char *)c_max_profit[i_count], 0);
				i_err[9]  = Fadd32 ( ptr_fml_Obuf, FFO_MIN_LOT_QTY,(char *)&l_lot_sz[i_count], 0);
				i_err[10] = Fadd32 ( ptr_fml_Obuf, FFO_UNDRLYNG,( char *)st_cntrct_gen_inf.c_undrlyng, 0 );
				i_err[11] = Fadd32 ( ptr_fml_Obuf, FFO_EXER_TYP,(char *)&st_cntrct_gen_inf.c_exrc_typ, 0 );
        i_err[12] = Fadd32 ( ptr_fml_Obuf, FFO_OPT_TYP,(char *)&c_opt_typ[i_counter], 0 );
				i_err[13] = Fadd32 ( ptr_fml_Obuf, FFO_PRDCT_TYP,(char *)&c_prd_opt, 0 );
				i_err[14] = Fadd32 ( ptr_fml_Obuf, FFO_CTGRY_INDSTK,(char *)&st_cntrct_gen_inf.c_ctgry_indstk, 0 );
      }

      for( i_cnt = 1; i_cnt < 15; i_cnt++ )
      {
        if( i_err[i_cnt] == -1 )
        {
          fn_errlog( c_ServiceName, "S31380",FMLMSG,c_err_msg.arr);
          fn_userlog(c_ServiceName, "Error while generating snapshot");
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
          tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }
    }

    tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
	}
	if( strcmp(c_strtgy_typ,"RAM") == 0 )
  {

		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    /* Sell nearest put strike & nearest call strike from spot. */
    /* Defining nearest below:                                  */
    /* Let spot be S. Take 2 consecutive strikes as S1 and S2.  */
    /* ( S will be between S1 and S2 )                          */
    /* Sell strike S1 if S is less than (S1 + (S2-S1)*0.25 )    */
    /* else sell S2.                                            */
    /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/	

		if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"Investment Strategy type is RAM");
    }
    if(strcmp((char *)sql_sps_action1.arr,"SC") == 0)
    {
      strcpy(c_action1,"Sell");
    }
		else
    {
      fn_errlog( c_ServiceName, "S31385",DEFMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    if(strcmp((char *)sql_sps_action2.arr,"SP") == 0)
    {
      strcpy(c_action2,"Sell");
    }
		else
    {
      fn_errlog( c_ServiceName, "S31390",DEFMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		no_of_records = sql_sps_row_count;

    i_returncode = fn_get_ltqrt( c_ServiceName,
                                 &st_cntrct_gen_inf,
                                 &st_err_msg );

    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31395", DEFMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    l_spot_prc = st_cntrct_gen_inf.l_strike_prc;

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog( c_ServiceName,"Spot price is :%ld:",st_cntrct_gen_inf.l_strike_prc );
      fn_userlog( c_ServiceName,"Number of rows is :%ld:",sql_sps_row_count );
    }

    st_cntrct_gen_inf.c_opt_typ = 'C';
    c_nearest_flg = 'Y';

    i_returncode = fn_strk_prc( c_ServiceName,
                                &st_cntrct_gen_inf,
                                l_strk_prc_c,
                                &no_of_records_c,
                                c_nearest_flg,
                                &st_err_msg );

    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31400", DEFMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if( l_strk_prc_c == 0 )
    {
      no_of_records = 0;
      i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_records, 0 );
      tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
    }

    if ( no_of_records_c > sql_sps_row_count )
    {
      no_of_records_c = sql_sps_row_count;
    }

    st_cntrct_gen_inf.l_strike_prc = l_strk_prc_c[0];
    st_cntrct_gen_inf.l_min_lot_qty = l_lot_size;

		i_returncode = fn_sell_call( c_ServiceName,
                                &st_cntrct_gen_inf,
                                &d_premi,
                                &l_interval,
																sql_exg_crrnt_stts,
                                &st_err_msg );

    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31405", DEFMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    d_premium[0] = d_premi;
    c_flg[0] = st_cntrct_gen_inf.c_rqst_typ;
    l_lot_sz[0] = st_cntrct_gen_inf.l_min_lot_qty;
    c_opt_typ[0] = st_cntrct_gen_inf.c_opt_typ;
    l_strk_prc[0] = l_strk_prc_c[0];
    sprintf(c_premium[0],"%lf",d_premium[0]);
    sprintf(c_strk_prc[0],"%ld",l_strk_prc_c[0]);

    st_cntrct_gen_inf.c_opt_typ = 'P';
    c_nearest_flg = 'Y';
    st_cntrct_gen_inf.l_strike_prc = l_spot_prc;
    st_cntrct_gen_inf.l_min_lot_qty = l_lot_size;

    i_returncode = fn_strk_prc( c_ServiceName,
                                &st_cntrct_gen_inf,
                                l_strk_prc_p,
                                &no_of_records_p,
                                c_nearest_flg,
                                &st_err_msg );

    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31410", DEFMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if( l_strk_prc_p[0] == 0 || l_strk_prc_p[0] != l_strk_prc_c[0] )
    {
      no_of_records = 0;
      i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_records, 0 );
      tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
    }

    if ( no_of_records_p > sql_sps_row_count )
    {
      no_of_records_p = sql_sps_row_count;
    }

		st_cntrct_gen_inf.l_strike_prc = l_strk_prc_p[0];

    i_returncode = fn_sell_put( c_ServiceName,
                               &st_cntrct_gen_inf,
                               &d_premi,
                               &l_interval,
															 sql_exg_crrnt_stts,
                               &st_err_msg );
    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31415", DEFMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    d_premium[1] = d_premi;
    c_flg[1] = st_cntrct_gen_inf.c_rqst_typ;
    l_lot_sz[1] = st_cntrct_gen_inf.l_min_lot_qty;
    c_opt_typ[1] = st_cntrct_gen_inf.c_opt_typ;
    l_strk_prc[1] = l_strk_prc_p[0];
    sprintf(c_premium[1],"%lf",d_premium[1]);
    sprintf(c_strk_prc[1],"%ld",l_strk_prc_p[0]);

		for( i_counter = 1; i_counter <= no_of_records; i_counter++ )
    {
      if( c_flg[i_counter] == 'N' )
      {
        strcpy(c_break_ptl[i_counter],"NA");
        strcpy(c_break_ptu[i_counter],"NA");
        strcpy(c_cash_inflw[i_counter],"NA");
        strcpy(c_max_profit[i_counter],"NA");
      }

      if( c_flg[i_counter] != 'N' && c_flg[0] != 'N')
      {

        /*----------------------------------------------------------------------------------*/
        /*                         FORMULAE FOR RAM PAYOFF SUMMARY                          */
        /*   Lower Break-even Point = Lower Strike - Total Premium paid                     */
        /*   Upper Break-even Point = Upper Strike + Total Premium paid                     */
        /*   Cash Inflow            = Lot Size * Total Premium paid                         */
        /*   Max Profit             = Cash Inflow calculated above                          */
        /*----------------------------------------------------------------------------------*/

        d_break_ptl[i_counter] = (double)l_strk_prc[i_counter] - ( d_premium[i_counter-1] + d_premium[i_counter] );

        d_break_ptu[i_counter] = (double)l_strk_prc[i_counter-1] + ( d_premium[i_counter-1] + d_premium[i_counter] );

        d_cash_inflw[i_counter] = ((double)l_lot_sz[i_counter])*( d_premium[i_counter-1] + d_premium[i_counter] );

        d_max_profit[i_counter] = (double)l_lot_sz[i_counter]*( d_premium[i_counter-1] + d_premium[i_counter] );

				if( sql_sps_brk_point == 'Y' )
        sprintf(c_break_ptl[i_counter],"%lf",d_break_ptl[i_counter]);
				else
				strcpy(c_break_ptl[i_counter],"NA");
				if( sql_sps_brk_point_up == 'Y' )
        sprintf(c_break_ptu[i_counter],"%lf",d_break_ptu[i_counter]);
				else
				strcpy(c_break_ptu[i_counter],"NA");
				if( sql_sps_cash_flow == 'I' )
        sprintf(c_cash_inflw[i_counter],"%lf",d_cash_inflw[i_counter]);
				else
				strcpy(c_cash_inflw[i_counter],"NA");
				if( sql_sps_max_profit == 'Y' )
        sprintf(c_max_profit[i_counter],"%lf",d_max_profit[i_counter]);
				else
				strcpy(c_max_profit[i_counter],"NA");
      }
    }
    if(c_flg[0]=='N')
    {
      for( i_counter = 1; i_counter <= no_of_records; i_counter++ )
      {
        strcpy(c_break_ptl[i_counter],"NA");
        strcpy(c_break_ptu[i_counter],"NA");
        strcpy(c_cash_inflw[i_counter],"NA");
        strcpy(c_max_profit[i_counter],"NA");
      }
    }
    no_of_rows = no_of_records*2;
    i_err[0]  = Fadd32 ( ptr_fml_Obuf, FFO_COUNT,( char *)&no_of_rows, 0 );
		i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_INTERVAL,( char *)&l_interval, 0 );
		i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_PRVS_CLS_PRC,( char *)&l_spot_prc, 0 );

		for( i_counter = 0; i_counter < no_of_records*2; i_counter++ )
    {
      if( i_counter == 0 || (i_counter%2 == 0 && i_counter != 1) )
      {
        i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_ACTION1,(char *)c_action1, 0 );
        i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_STRIKE_PRICE,(char *)c_strk_prc[i_counter], 0 );
        i_err[3]  = Fadd32 ( ptr_fml_Obuf, FFO_SYMBOL,(char *)c_var_at, 0 );
        i_err[4]  = Fadd32 ( ptr_fml_Obuf, FFO_PREMIUM_OPT,(char *)c_premium[i_counter], 0 );
        i_err[5]  = Fadd32 ( ptr_fml_Obuf, FFO_LOW_PT,(char *)c_strnull, 0);
        i_err[6]  = Fadd32 ( ptr_fml_Obuf, FFO_HIGH_PT,(char *)c_strnull, 0);
        i_err[7]  = Fadd32 ( ptr_fml_Obuf, FFO_CASH_INFLW,(char *)c_strnull, 0);
        i_err[8]  = Fadd32 ( ptr_fml_Obuf, FFO_MAX_PROFIT,(char *)c_strnull, 0);
				i_err[9]  = Fadd32 ( ptr_fml_Obuf, FFO_MIN_LOT_QTY,(char *)&l_lot_sz[0], 0);
				i_err[10]  = Fadd32 ( ptr_fml_Obuf, FFO_UNDRLYNG,( char *)st_cntrct_gen_inf.c_undrlyng, 0 );
				i_err[11] = Fadd32 ( ptr_fml_Obuf, FFO_EXER_TYP,(char *)&st_cntrct_gen_inf.c_exrc_typ, 0 );
        i_err[12] = Fadd32 ( ptr_fml_Obuf, FFO_OPT_TYP,(char *)&c_opt_typ[0], 0 );
				i_err[13] = Fadd32 ( ptr_fml_Obuf, FFO_PRDCT_TYP,(char *)&c_prd_opt, 0 );
				i_err[14] = Fadd32 ( ptr_fml_Obuf, FFO_CTGRY_INDSTK,(char *)&st_cntrct_gen_inf.c_ctgry_indstk, 0 );
      }
      else
      {
        i_count = ((i_counter/2)+1);
        i_err[1]  = Fadd32 ( ptr_fml_Obuf, FFO_ACTION1,(char *)c_action2, 0);
        i_err[2]  = Fadd32 ( ptr_fml_Obuf, FFO_STRIKE_PRICE,(char *)c_strk_prc[i_count], 0 );
        i_err[3]  = Fadd32 ( ptr_fml_Obuf, FFO_SYMBOL,(char *)c_var_at, 0 );
        i_err[4]  = Fadd32 ( ptr_fml_Obuf, FFO_PREMIUM_OPT,(char *)c_premium[i_count], 0 );
        i_err[5]  = Fadd32 ( ptr_fml_Obuf, FFO_LOW_PT,(char *)c_break_ptl[i_count], 0);
        i_err[6]  = Fadd32 ( ptr_fml_Obuf, FFO_HIGH_PT,(char *)c_break_ptu[i_count], 0);
        i_err[7]  = Fadd32 ( ptr_fml_Obuf, FFO_CASH_INFLW,(char *)c_cash_inflw[i_count], 0);
        i_err[8]  = Fadd32 ( ptr_fml_Obuf, FFO_MAX_PROFIT,(char *)c_max_profit[i_count], 0);
				i_err[9]  = Fadd32 ( ptr_fml_Obuf, FFO_MIN_LOT_QTY,(char *)&l_lot_sz[i_count], 0);
				i_err[10]  = Fadd32 ( ptr_fml_Obuf, FFO_UNDRLYNG,( char *)st_cntrct_gen_inf.c_undrlyng, 0 );
				i_err[11] = Fadd32 ( ptr_fml_Obuf, FFO_EXER_TYP,(char *)&st_cntrct_gen_inf.c_exrc_typ, 0 );
        i_err[12] = Fadd32 ( ptr_fml_Obuf, FFO_OPT_TYP,(char *)&c_opt_typ[i_counter], 0 );
				i_err[13] = Fadd32 ( ptr_fml_Obuf, FFO_PRDCT_TYP,(char *)&c_prd_opt, 0 );
				i_err[14] = Fadd32 ( ptr_fml_Obuf, FFO_CTGRY_INDSTK,(char *)&st_cntrct_gen_inf.c_ctgry_indstk, 0 );
      }

      for( i_cnt = 1; i_cnt < 15; i_cnt++ )
      {
        if( i_err[i_cnt] == -1 )
        {
          fn_errlog( c_ServiceName, "S31420",FMLMSG,c_err_msg.arr);
          fn_userlog(c_ServiceName, "Error while generating snapshot");
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
          tpfree ( ( char * ) ptr_fml_Obuf );                             /** Added in VQC **/
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }

    }

  
  	tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
  }
  if(DEBUG_MSG_LVL_5)
  {
      fn_userlog(c_ServiceName,"Invalid Investment strategy type");
  }	
	
	tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );

}




int fn_buy_call( char *c_ServiceName,
								 struct vw_cntrt_gen_inf *ptr_st_cntrt_gen_inf,
								 double* d_premib,
								 long* l_intervalb,
								 char c_exg_stts,
								 struct vw_err_msg *ptr_st_err_msg )
{
	double d_premi = 0.0;
	long l_interval = 0;
	long l_strike_prc = 0;
	int i_returncode = 0;

	struct vw_err_msg st_err_msg;

	if(DEBUG_MSG_LVL_5)
  {
      fn_userlog(c_ServiceName,"Inside fn_buy_call");
			fn_userlog(c_ServiceName,"Strike Price here is :%ld:",ptr_st_cntrt_gen_inf->l_strike_prc);
  }

  fn_userlog(c_ServiceName,"ptr_st_cntrt_gen_inf->c_xchng_cd :%s:",ptr_st_cntrt_gen_inf->c_xchng_cd);
 fn_userlog(c_ServiceName,"ptr_st_cntrt_gen_inf->c_undrlyng : %s :",ptr_st_cntrt_gen_inf->c_undrlyng);
fn_userlog(c_ServiceName,"ptr_st_cntrt_gen_inf->l_strike_prc :%ld:",ptr_st_cntrt_gen_inf->l_strike_prc);

  EXEC SQL
			 SELECT FTQ_STRK_PRC
         INTO   :l_strike_prc
         FROM (  
				 SELECT FTQ_STRK_PRC 
				 FROM   FTQ_FO_TRD_QT
         WHERE  FTQ_XCHNG_CD = :ptr_st_cntrt_gen_inf->c_xchng_cd
         AND    FTQ_PRDCT_TYP = 'O'
         AND    FTQ_UNDRLYNG = :ptr_st_cntrt_gen_inf->c_undrlyng
         AND    FTQ_EXPRY_DT = to_date(:ptr_st_cntrt_gen_inf->c_expry_dt,'dd-Mon-YYYY')
         AND    FTQ_OPT_TYP = 'C'
         AND    FTQ_STRK_PRC >= :ptr_st_cntrt_gen_inf->l_strike_prc
				 ORDER BY FTQ_STRK_PRC )
				 WHERE  ROWNUM < 2;
  fn_userlog(c_ServiceName,"ptr_st_cntrt_gen_inf->c_xchng_cd :%s:",ptr_st_cntrt_gen_inf->c_xchng_cd);
 fn_userlog(c_ServiceName,"ptr_st_cntrt_gen_inf->c_undrlyng : %s :",ptr_st_cntrt_gen_inf->c_undrlyng);
fn_userlog(c_ServiceName,"ptr_st_cntrt_gen_inf->l_strike_prc :%ld:",ptr_st_cntrt_gen_inf->l_strike_prc);


  fn_userlog(c_ServiceName,"l_Strike_prc:%ld:",l_strike_prc);
	if( SQLCODE != 0 )
  {
     fn_errlog( c_ServiceName, "S31425", SQLMSG, ptr_st_err_msg->c_err_msg  );
		 return -1;
  }

	fn_userlog(c_ServiceName,"Strike Price is :%ld:",l_strike_prc);

	ptr_st_cntrt_gen_inf->l_strike_prc = l_strike_prc;
	ptr_st_cntrt_gen_inf->c_opt_typ = 'C';

	i_returncode = fn_cal_premium( c_ServiceName,
																 ptr_st_cntrt_gen_inf,
																 &d_premi,
																 &l_interval,
																 c_exg_stts,
																 &st_err_msg ); 
	if( i_returncode != 0)
  {
    fn_userlog( c_ServiceName,"Failed to calculate premium" );
		fn_errlog( c_ServiceName,"S31430",LIBMSG,ptr_st_err_msg->c_err_msg );
    return -1;
  }

	if(DEBUG_MSG_LVL_5)
  {
      fn_userlog(c_ServiceName,"Premium is :%lf:",d_premi);
			fn_userlog(c_ServiceName,"Lot size is :%ld:", ptr_st_cntrt_gen_inf->l_min_lot_qty);
	}

	*d_premib = d_premi;
	*l_intervalb = l_interval;

	return 0;

}

int fn_sell_call( char *c_ServiceName,
									struct vw_cntrt_gen_inf *ptr_st_cntrt_gen_inf,
									double* d_premis,
									long* l_intervals,
									char c_exg_stts,
									struct vw_err_msg *ptr_st_err_msg )
{

	double d_premi = 0.0;
	long l_interval = 0;
	long l_strike_prc = 0;
	varchar c_err_msg[256];					/*** Changed datatype from char to varchar in VQC ***/
	int i_returncode = 0;

  struct vw_err_msg st_err_msg;

	if(DEBUG_MSG_LVL_5)
  {
      fn_userlog(c_ServiceName,"Inside fn_sell_call");
			fn_userlog(c_ServiceName,"Strike Price inside fn_sell_call is :%ld:",ptr_st_cntrt_gen_inf->l_strike_prc);
  }

	EXEC SQL
       SELECT FTQ_STRK_PRC
         INTO   :l_strike_prc
         FROM (
				 SELECT FTQ_STRK_PRC
				 FROM   FTQ_FO_TRD_QT
         WHERE  FTQ_XCHNG_CD = :ptr_st_cntrt_gen_inf->c_xchng_cd
         AND    FTQ_PRDCT_TYP = 'O'
         AND    FTQ_UNDRLYNG = :ptr_st_cntrt_gen_inf->c_undrlyng
         AND    FTQ_EXPRY_DT = to_date(:ptr_st_cntrt_gen_inf->c_expry_dt,'dd-Mon-YYYY')
         AND    FTQ_OPT_TYP = 'C'
         AND    FTQ_STRK_PRC >= :ptr_st_cntrt_gen_inf->l_strike_prc
				 ORDER BY FTQ_STRK_PRC )
				 WHERE    ROWNUM < 2;

  if( SQLCODE != 0 )
  {
     fn_errlog( c_ServiceName, "S31435", SQLMSG, ptr_st_err_msg->c_err_msg  );	
		 return -1;
  }


	fn_userlog(c_ServiceName,"Strike Price is :%ld:",l_strike_prc);

  ptr_st_cntrt_gen_inf->l_strike_prc = l_strike_prc;
	ptr_st_cntrt_gen_inf->c_opt_typ = 'C';

  i_returncode = fn_cal_premium( c_ServiceName,
                                 ptr_st_cntrt_gen_inf,
                                 &d_premi,
																 &l_interval,
																 c_exg_stts,
                                 &st_err_msg );
	if( i_returncode != 0)
	{
		fn_userlog(c_ServiceName,"Failed to calculate premium");
		fn_errlog( c_ServiceName, "S31440", LIBMSG, c_err_msg.arr );
		return -1;
	}

  if(DEBUG_MSG_LVL_5)
  {
      fn_userlog(c_ServiceName,"Premium is :%lf:",d_premi);
			fn_userlog(c_ServiceName,"Lot size is :%ld:", ptr_st_cntrt_gen_inf->l_min_lot_qty);
  }
	*d_premis = d_premi;
	*l_intervals = l_interval;
	ptr_st_cntrt_gen_inf->l_strike_prc = l_strike_prc;

  return 0;

}

int fn_sell_put( char *c_ServiceName,
                  struct vw_cntrt_gen_inf *ptr_st_cntrt_gen_inf,
                  double* d_premis,
									long* l_intervals,
									char c_exg_stts,
                  struct vw_err_msg *ptr_st_err_msg )
{

  double d_premi = 0.0;
	long l_interval = 0;
  long l_strike_prc = 0;
  varchar c_err_msg[256];		/** Changed datatype from char to varchar in VQC ***/
  int i_returncode = 0;

  struct vw_err_msg st_err_msg;

  if(DEBUG_MSG_LVL_5)
  {
      fn_userlog(c_ServiceName,"Inside fn_sell_put");
      fn_userlog(c_ServiceName,"Strike Price inside fn_sell_put is :%ld:",ptr_st_cntrt_gen_inf->l_strike_prc);
  }


  EXEC SQL
       SELECT FTQ_STRK_PRC
         INTO   :l_strike_prc
         FROM (
         SELECT FTQ_STRK_PRC
         FROM   FTQ_FO_TRD_QT
         WHERE  FTQ_XCHNG_CD = :ptr_st_cntrt_gen_inf->c_xchng_cd
         AND    FTQ_PRDCT_TYP = 'O'
         AND    FTQ_UNDRLYNG = :ptr_st_cntrt_gen_inf->c_undrlyng
         AND    FTQ_EXPRY_DT = to_date(:ptr_st_cntrt_gen_inf->c_expry_dt,'dd-Mon-YYYY')
         AND    FTQ_OPT_TYP = 'P'
         AND    FTQ_STRK_PRC <= :ptr_st_cntrt_gen_inf->l_strike_prc
         ORDER BY FTQ_STRK_PRC DESC )
         WHERE    ROWNUM < 2;

  if( SQLCODE != 0 )
  {
     fn_errlog( c_ServiceName, "S31445", SQLMSG, ptr_st_err_msg->c_err_msg  );
     return -1;
  }
 
 
 fn_userlog(c_ServiceName,"Strike Price is :%ld:",l_strike_prc);

  ptr_st_cntrt_gen_inf->l_strike_prc = l_strike_prc;
  ptr_st_cntrt_gen_inf->c_opt_typ = 'P';

  i_returncode = fn_cal_premium( c_ServiceName,
                                 ptr_st_cntrt_gen_inf,
                                 &d_premi,
																 &l_interval,
																 c_exg_stts,
                                 &st_err_msg );
  if( i_returncode != 0)
  {
    fn_userlog(c_ServiceName,"Failed to calculate premium");
		fn_errlog( c_ServiceName,"S31450",LIBMSG,c_err_msg.arr );
    return -1;
  }

	if(DEBUG_MSG_LVL_5)
  {
      fn_userlog(c_ServiceName,"Premium is :%lf:",d_premi);
      fn_userlog(c_ServiceName,"Lot size is :%ld:", ptr_st_cntrt_gen_inf->l_min_lot_qty);
  }
  *d_premis = d_premi;
	*l_intervals = l_interval;
  ptr_st_cntrt_gen_inf->l_strike_prc = l_strike_prc;

  return 0;

}

int fn_cal_premium( char *c_ServiceName,
										struct vw_cntrt_gen_inf *ptr_st_cntrt_gen_inf,
										double* d_premi,
										long* l_interval,
										char  c_exg_stts,
										struct vw_err_msg *ptr_st_err_msg )
{
	long l_diff_time = 0;

	EXEC SQL INCLUDE "table/fcm_fo_cntrct_mstr.h";
  EXEC SQL INCLUDE "table/ftq_fo_trd_qt.h";
  EXEC SQL INCLUDE "table/sps_strtgy_payoff_summary.h";	
	EXEC SQL INCLUDE "table/fum_fo_undrlyng_mstr.h";

	if(DEBUG_MSG_LVL_5)
  {
      fn_userlog(c_ServiceName,"Inside fn_cal_premium");
  }

  EXEC SQL
			 SELECT nvl(FTQ_LST_TRD_PRC,0),
							nvl(FTQ_MIN_LOT_QTY,0),
							nvl((ceil(abs(FTQ_LST_TRD_TM - sysdate)*24*60)),999999),
							FTQ_EXER_TYP,
							FTQ_OPT_TYP,
							FTQ_INDSTK,
              nvl(FTQ_DS_QT_TRDNG_FLG,'N')    /*** Ver 1.5 ***/
			 INTO   :sql_ftq_lst_trd_prc,
							:sql_ftq_min_lot_qty,
							:l_diff_time,
							:sql_ftq_exer_typ,
							:sql_ftq_opt_typ,
							:sql_ftq_indstk,
              :sql_fcm_ds_qt_trdng_flg        /*** Ver 1.5 ***/  
			 FROM   FTQ_FO_TRD_QT
			 WHERE  FTQ_XCHNG_CD = :ptr_st_cntrt_gen_inf->c_xchng_cd
			 AND    FTQ_PRDCT_TYP = 'O'
			 AND    FTQ_UNDRLYNG = :ptr_st_cntrt_gen_inf->c_undrlyng
			 AND    FTQ_EXPRY_DT = to_date(:ptr_st_cntrt_gen_inf->c_expry_dt,'dd-Mon-YYYY')
			 AND    FTQ_OPT_TYP  = :ptr_st_cntrt_gen_inf->c_opt_typ
			 AND    FTQ_STRK_PRC = :ptr_st_cntrt_gen_inf->l_strike_prc;

	if( SQLCODE != 0 )
  {
     fn_errlog( c_ServiceName, "S31455", SQLMSG, ptr_st_err_msg->c_err_msg  );
		 return -1;
  }

    if(DEBUG_MSG_LVL_0)
    {
     fn_userlog(c_ServiceName, "FTQ DS Trading Enable/Disable Flag :%c:",sql_fcm_ds_qt_trdng_flg);
    }
   
 
  /*** Commented in Ver 1.5 ***
	EXEC SQL
			 SELECT nvl(FCM_DS_QT_TRDNG_FLG,'N')
			 INTO   :sql_fcm_ds_qt_trdng_flg
			 FROM   FCM_FO_CNTRCT_MSTR
			 WHERE  FCM_XCHNG_CD = :ptr_st_cntrt_gen_inf->c_xchng_cd
			 AND    FCM_PRDCT_TYP = 'O'
			 AND    FCM_INDSTK    = :sql_ftq_indstk
			 AND    FCM_UNDRLYNG  = :ptr_st_cntrt_gen_inf->c_undrlyng
			 AND    FCM_EXPRY_DT  = to_date(:ptr_st_cntrt_gen_inf->c_expry_dt,'dd-Mon-YYYY')
			 AND    FCM_EXER_TYP  = :sql_ftq_exer_typ
			 AND    FCM_OPT_TYP   = :ptr_st_cntrt_gen_inf->c_opt_typ
			 AND    FCM_STRK_PRC  = :ptr_st_cntrt_gen_inf->l_strike_prc;

	if(( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
  {
     fn_errlog( c_ServiceName, "S31460", SQLMSG, ptr_st_err_msg->c_err_msg  );
		 return -1;
  }
  *** Ver 1.5 Comment Ends ***/
	
	EXEC SQL
			 SELECT nvl(FUM_DS_TRDNG_FLG,'N')
		   INTO   :sql_fum_ds_trdng_flg
			 FROM   FUM_FO_UNDRLYNG_MSTR
			 WHERE  FUM_PRDCT_TYP  = 'O'
			 AND    FUM_UNDRLYNG   = :ptr_st_cntrt_gen_inf->c_undrlyng;
	
  if(( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
  {
     fn_errlog( c_ServiceName, "S31465", SQLMSG, ptr_st_err_msg->c_err_msg  );
     return -1;
  }	
 	
  /*** Commented in Ver 1.5 ***
	EXEC SQL
			 SELECT FCM_STRK_PRC 
			 INTO   :sql_fcm_strk_prc
			 FROM (
			 	SELECT FCM_STRK_PRC
			 	FROM   FCM_FO_CNTRCT_MSTR
			 	WHERE  FCM_XCHNG_CD = :ptr_st_cntrt_gen_inf->c_xchng_cd
			 	AND    FCM_PRDCT_TYP = 'O'
			 	AND    FCM_INDSTK    = :sql_ftq_indstk
			 	AND    FCM_UNDRLYNG  = :ptr_st_cntrt_gen_inf->c_undrlyng
			 	AND    FCM_EXPRY_DT  = to_date(:ptr_st_cntrt_gen_inf->c_expry_dt,'dd-Mon-YYYY')
			 	AND    FCM_EXER_TYP  = :sql_ftq_exer_typ
			 	AND    FCM_OPT_TYP   = :ptr_st_cntrt_gen_inf->c_opt_typ
			 	AND    FCM_STRK_PRC  > :ptr_st_cntrt_gen_inf->l_strike_prc
				ORDER BY FCM_STRK_PRC)
			 WHERE ROWNUM < 2;

	if(( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
  {
     fn_errlog( c_ServiceName, "S31470", SQLMSG, ptr_st_err_msg->c_err_msg  );
     return -1;
  }
	if( SQLCODE == NO_DATA_FOUND )
	{
		EXEC SQL
       SELECT FCM_STRK_PRC
       INTO   :sql_fcm_strk_prc
			 FROM (
			 	SELECT FCM_STRK_PRC
       	FROM   FCM_FO_CNTRCT_MSTR
       	WHERE  FCM_XCHNG_CD = :ptr_st_cntrt_gen_inf->c_xchng_cd
       	AND    FCM_PRDCT_TYP = 'O'
       	AND    FCM_INDSTK    = :sql_ftq_indstk
       	AND    FCM_UNDRLYNG  = :ptr_st_cntrt_gen_inf->c_undrlyng
       	AND    FCM_EXPRY_DT  = to_date(:ptr_st_cntrt_gen_inf->c_expry_dt,'dd-Mon-YYYY')
       	AND    FCM_EXER_TYP  = :sql_ftq_exer_typ
       	AND    FCM_OPT_TYP   = :ptr_st_cntrt_gen_inf->c_opt_typ
       	AND    FCM_STRK_PRC  < :ptr_st_cntrt_gen_inf->l_strike_prc
				ORDER BY FCM_STRK_PRC DESC)
			 WHERE ROWNUM < 2;

		if( SQLCODE != 0 )
  	{
     	fn_errlog( c_ServiceName, "S31475", SQLMSG, ptr_st_err_msg->c_err_msg  );
     	return -1;
  	}
   }
    *** Ver 1.5 Comment Ends ***/
    /*** Ver 1.5 Starts ***/

    EXEC SQL
       SELECT FTQ_STRK_PRC
       INTO   :sql_fcm_strk_prc
       FROM (
        SELECT FTQ_STRK_PRC
        FROM   FTQ_FO_TRD_QT     
        WHERE  FTQ_XCHNG_CD = :ptr_st_cntrt_gen_inf->c_xchng_cd
        AND    FTQ_PRDCT_TYP = 'O'
        AND    FTQ_INDSTK    = :sql_ftq_indstk
        AND    FTQ_UNDRLYNG  = :ptr_st_cntrt_gen_inf->c_undrlyng
        AND    FTQ_EXPRY_DT  = to_date(:ptr_st_cntrt_gen_inf->c_expry_dt,'dd-Mon-YYYY')
        AND    FTQ_EXER_TYP  = :sql_ftq_exer_typ
        AND    FTQ_OPT_TYP   = :ptr_st_cntrt_gen_inf->c_opt_typ
        AND    FTQ_STRK_PRC  > :ptr_st_cntrt_gen_inf->l_strike_prc
        ORDER BY FTQ_STRK_PRC)
       WHERE ROWNUM < 2;

  if(( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
  {
     fn_errlog( c_ServiceName, "S31480", SQLMSG, ptr_st_err_msg->c_err_msg  );
     return -1;
  }
  if( SQLCODE == NO_DATA_FOUND )
  {
    EXEC SQL
       SELECT FTQ_STRK_PRC
       INTO   :sql_fcm_strk_prc
       FROM (
        SELECT FTQ_STRK_PRC
        FROM   FTQ_FO_TRD_QT     
        WHERE  FTQ_XCHNG_CD = :ptr_st_cntrt_gen_inf->c_xchng_cd
        AND    FTQ_PRDCT_TYP = 'O'
        AND    FTQ_INDSTK    = :sql_ftq_indstk
        AND    FTQ_UNDRLYNG  = :ptr_st_cntrt_gen_inf->c_undrlyng
        AND    FTQ_EXPRY_DT  = to_date(:ptr_st_cntrt_gen_inf->c_expry_dt,'dd-Mon-YYYY')
        AND    FTQ_EXER_TYP  = :sql_ftq_exer_typ
        AND    FTQ_OPT_TYP   = :ptr_st_cntrt_gen_inf->c_opt_typ
        AND    FTQ_STRK_PRC  < :ptr_st_cntrt_gen_inf->l_strike_prc
        ORDER BY FTQ_STRK_PRC DESC)
       WHERE ROWNUM < 2;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31485", SQLMSG, ptr_st_err_msg->c_err_msg  );
      return -1;
    }
   } 
    /*** Ver 1.5 Ends   ***/
	

	if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"FTQ sql_fcm_strk_prc is :%ld:",sql_fcm_strk_prc);
		fn_userlog(c_ServiceName,"ptr_st_cntrt_gen_inf->l_strike_prc is :%ld:",ptr_st_cntrt_gen_inf->l_strike_prc);
		fn_userlog(c_ServiceName,"Contract must be traded within last :%d: minutes",l_sps_config_tm);
		fn_userlog(c_ServiceName,"Time difference is :%ld:",l_diff_time);
    fn_userlog(c_ServiceName,"Exchange current status is :%c:", c_exg_stts );
  }

	*l_interval = abs(sql_fcm_strk_prc - ptr_st_cntrt_gen_inf->l_strike_prc);

	ptr_st_cntrt_gen_inf->c_rqst_typ = 'Y';
	ptr_st_cntrt_gen_inf->c_exrc_typ = sql_ftq_exer_typ;
	ptr_st_cntrt_gen_inf->c_opt_typ  = sql_ftq_opt_typ;  
	ptr_st_cntrt_gen_inf->c_ctgry_indstk = sql_ftq_indstk;

	if(sql_fcm_ds_qt_trdng_flg == 'N' || ( ( l_diff_time > l_sps_config_tm ) && ( c_exg_stts == 'O' ) ) || sql_fum_ds_trdng_flg == 'N')
	{

		if(DEBUG_MSG_LVL_5)
  	{
      fn_userlog(c_ServiceName,"Exchange current status is :%c:", c_exg_stts );
      fn_userlog(c_ServiceName,"Contract :%s: not enabled for DS",ptr_st_cntrt_gen_inf->c_undrlyng);
      fn_userlog(c_ServiceName,"Time difference is :%ld:",l_diff_time );
  	}
		ptr_st_cntrt_gen_inf->c_rqst_typ = 'N';

	}

	*d_premi = sql_ftq_lst_trd_prc;

	if( ptr_st_cntrt_gen_inf->l_min_lot_qty == 0 )
	{
		ptr_st_cntrt_gen_inf->l_min_lot_qty = sql_ftq_min_lot_qty;
	}

	if(DEBUG_MSG_LVL_5)
	{
		fn_userlog( c_ServiceName,"Lot size inside fn_cal_premium is :%ld:",ptr_st_cntrt_gen_inf->l_min_lot_qty );
		fn_userlog( c_ServiceName,"Premium inside fn_cal_premium is :%lf:",*d_premi );
		fn_userlog( c_ServiceName,"c_flg inside fn_cal_premium is :%c:",ptr_st_cntrt_gen_inf->c_rqst_typ );
	}

	return 0;

}

int fn_get_ltqrt( char *c_ServiceName,
								  struct vw_cntrt_gen_inf *ptr_st_cntrt_gen_inf,
                  struct vw_err_msg *ptr_st_err_msg )
{

	varchar c_err_msg[256];			/*** Changed datatype from char to varchar ***/
	char c_xchng_cd[4];

	memset(c_xchng_cd,'\0',sizeof(c_xchng_cd));

	if(strcmp(ptr_st_cntrt_gen_inf->c_xchng_cd,"NFO") == 0)
	{
  	strcpy(c_xchng_cd,"NSE");
	}


	EXEC SQL
    SELECT LTQ_RT*100
    INTO   :ptr_st_cntrt_gen_inf->l_strike_prc
    FROM   LTQ_TRD_QT
    WHERE 	LTQ_XCHNG_CD = :c_xchng_cd
		AND	 	 LTQ_STCK_CD  = :ptr_st_cntrt_gen_inf->c_undrlyng;

  if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31490", SQLMSG, ptr_st_err_msg->c_err_msg  );
		return -1;
  }


	return 0;
}
int fn_strk_prc( char *c_ServiceName,
                 struct vw_cntrt_gen_inf *ptr_st_cntrt_gen_inf,
                 long l_strk_prc_arr[SIZE_OF_ARRAY],
								 long* no_of_rows,
								 char c_nearest_flag,
                 struct vw_err_msg *ptr_st_err_msg )
{

	varchar c_err_msg[256];			/** Changed datatype from char to varchar in VQC ***/
	int i_counter;

	if(DEBUG_MSG_LVL_5)
	{
		fn_userlog(c_ServiceName,"ptr_st_cntrt_gen_inf->c_xchng_cd is :%s:",ptr_st_cntrt_gen_inf->c_xchng_cd );
		fn_userlog(c_ServiceName,"ptr_st_cntrt_gen_inf->c_undrlyng is :%s:",ptr_st_cntrt_gen_inf->c_undrlyng );
		fn_userlog(c_ServiceName,"ptr_st_cntrt_gen_inf->c_expry_dt is :%s:",ptr_st_cntrt_gen_inf->c_expry_dt );
		fn_userlog(c_ServiceName,"ptr_st_cntrt_gen_inf->l_strike_prc is :%ld:",ptr_st_cntrt_gen_inf->l_strike_prc );
		fn_userlog(c_ServiceName,"ptr_st_cntrt_gen_inf->c_opt_typ is :%c:",ptr_st_cntrt_gen_inf->c_opt_typ );
		fn_userlog(c_ServiceName,"Nearest flag is :%c:",c_nearest_flag );
	}
	

	if( ptr_st_cntrt_gen_inf->c_opt_typ == 'C' && c_nearest_flag == 'N' )
	{
		EXEC SQL
       	 SELECT FTQ_STRK_PRC
         INTO   :l_strk_prc_arr
         FROM   FTQ_FO_TRD_QT
         WHERE  FTQ_XCHNG_CD = :ptr_st_cntrt_gen_inf->c_xchng_cd
         AND    FTQ_PRDCT_TYP = 'O'
         AND    FTQ_UNDRLYNG = :ptr_st_cntrt_gen_inf->c_undrlyng
         AND    FTQ_EXPRY_DT = to_date(:ptr_st_cntrt_gen_inf->c_expry_dt,'dd-Mon-YYYY')
         AND    FTQ_OPT_TYP = 'C'
         AND    FTQ_STRK_PRC >= :ptr_st_cntrt_gen_inf->l_strike_prc
         ORDER BY FTQ_STRK_PRC;

    if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  	{
    	fn_errlog( c_ServiceName, "S31495", SQLMSG, ptr_st_err_msg->c_err_msg  );
	  	return -1;
  	}
		if( SQLCODE == NO_DATA_FOUND && sqlca.sqlerrd[2] == 0 )
		{
			fn_errlog( c_ServiceName, "S31500", SQLMSG, ptr_st_err_msg->c_err_msg  );
			return -1;
		}
		*no_of_rows = sqlca.sqlerrd[2];

		return 0;
	}
	if( ptr_st_cntrt_gen_inf->c_opt_typ == 'P' && c_nearest_flag == 'N' )
	{

		EXEC SQL
       	 SELECT FTQ_STRK_PRC
         INTO   :l_strk_prc_arr
         FROM   FTQ_FO_TRD_QT
         WHERE  FTQ_XCHNG_CD = :ptr_st_cntrt_gen_inf->c_xchng_cd
         AND    FTQ_PRDCT_TYP = 'O'
         AND    FTQ_UNDRLYNG = :ptr_st_cntrt_gen_inf->c_undrlyng
         AND    FTQ_EXPRY_DT = to_date(:ptr_st_cntrt_gen_inf->c_expry_dt,'dd-Mon-YYYY')
         AND    FTQ_OPT_TYP = 'P'
         AND    FTQ_STRK_PRC <= :ptr_st_cntrt_gen_inf->l_strike_prc
         ORDER BY FTQ_STRK_PRC DESC;

    if(( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
      fn_errlog( c_ServiceName, "S31505", SQLMSG, ptr_st_err_msg->c_err_msg  );
      return -1;
    }
		if( SQLCODE == NO_DATA_FOUND && sqlca.sqlerrd[2] == 0 )
    {
      fn_errlog( c_ServiceName, "S31510", SQLMSG, ptr_st_err_msg->c_err_msg  );
      return -1;
    }
    
		*no_of_rows = sqlca.sqlerrd[2];

    return 0;
  }
	if( c_nearest_flag == 'Y' )
  {

		if( DEBUG_MSG_LVL_5 )
		{
			fn_userlog( c_ServiceName,"Here 1" );
		}

	  EXEC SQL
         SELECT FTQ_STRK_PRC
         INTO   :l_strk_prc_arr[0]
				 FROM (
				 SELECT FTQ_STRK_PRC
         FROM   FTQ_FO_TRD_QT
         WHERE  FTQ_XCHNG_CD  = :ptr_st_cntrt_gen_inf->c_xchng_cd
         AND    FTQ_PRDCT_TYP = 'O'
         AND    FTQ_UNDRLYNG  = :ptr_st_cntrt_gen_inf->c_undrlyng
         AND    FTQ_EXPRY_DT  = to_date(:ptr_st_cntrt_gen_inf->c_expry_dt,'dd-Mon-YYYY')
         AND    FTQ_OPT_TYP   = :ptr_st_cntrt_gen_inf->c_opt_typ 
         AND    FTQ_STRK_PRC >= :ptr_st_cntrt_gen_inf->l_strike_prc
         ORDER BY FTQ_STRK_PRC )
				 WHERE 	ROWNUM < 2;

    if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog( c_ServiceName, "S31515", SQLMSG, ptr_st_err_msg->c_err_msg  );
      return -1;
    }
    if( SQLCODE == NO_DATA_FOUND && sqlca.sqlerrd[2] == 0 )
    {
      fn_errlog( c_ServiceName, "S31520", SQLMSG, ptr_st_err_msg->c_err_msg  );
      return -1;
    }

  
	  *no_of_rows = sqlca.sqlerrd[2];

		if( DEBUG_MSG_LVL_5 )
    {
      fn_userlog( c_ServiceName,"Here 2" );
			fn_userlog( c_ServiceName,"l_strk_prc_arr[0] is :%ld:",l_strk_prc_arr[0] );
    }

    EXEC SQL
         SELECT FTQ_STRK_PRC
         INTO   :l_strk_prc_arr[1]
				 FROM (
				 SELECT FTQ_STRK_PRC
         FROM   FTQ_FO_TRD_QT
         WHERE  FTQ_XCHNG_CD  = :ptr_st_cntrt_gen_inf->c_xchng_cd
         AND    FTQ_PRDCT_TYP = 'O'
         AND    FTQ_UNDRLYNG  = :ptr_st_cntrt_gen_inf->c_undrlyng
         AND    FTQ_EXPRY_DT  = to_date(:ptr_st_cntrt_gen_inf->c_expry_dt,'dd-Mon-YYYY')
         AND    FTQ_OPT_TYP   = :ptr_st_cntrt_gen_inf->c_opt_typ 
         AND    FTQ_STRK_PRC  <= :ptr_st_cntrt_gen_inf->l_strike_prc
         ORDER BY FTQ_STRK_PRC DESC )
				 WHERE  ROWNUM < 2;


		 if(( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
      fn_errlog( c_ServiceName, "S31525", SQLMSG, ptr_st_err_msg->c_err_msg  );
      return -1;
    }
    if( SQLCODE == NO_DATA_FOUND && sqlca.sqlerrd[2] == 0 )
    {
      fn_errlog( c_ServiceName, "S31530", SQLMSG, ptr_st_err_msg->c_err_msg  );
      return -1;
    }

    *no_of_rows = sqlca.sqlerrd[2];

		if( DEBUG_MSG_LVL_5 )
    {
      fn_userlog( c_ServiceName,"Here 3" );
			fn_userlog( c_ServiceName,"l_strk_prc_arr[1] is :%ld:",l_strk_prc_arr[1] );
    }

		if( ptr_st_cntrt_gen_inf->l_strike_prc < (( l_strk_prc_arr[0] - l_strk_prc_arr[1] )*0.25 + l_strk_prc_arr[1] ) )
    {
      l_strk_prc_arr[0] = l_strk_prc_arr[1];
    }

		if( DEBUG_MSG_LVL_5 )
    {
      fn_userlog( c_ServiceName,"Strike price is :%ld:",l_strk_prc_arr[0] );
    }

		return 0;
  }
	fn_userlog( c_ServiceName,"Option type not obtained" );
	return -1;
}
int fn_buy_put( char *c_ServiceName,
                 struct vw_cntrt_gen_inf *ptr_st_cntrt_gen_inf,
                 double* d_premib,
								 long* l_intervalb,
								 char c_exg_stts,
                 struct vw_err_msg *ptr_st_err_msg )
{
  double d_premi = 0.0;
	long l_interval = 0;
  long l_strike_prc = 0;
  varchar c_err_msg[256];			/*** Changed datatype from char to varchar in VQC ***/
  int i_returncode = 0;

  struct vw_err_msg st_err_msg;

  if(DEBUG_MSG_LVL_5)
  {
      fn_userlog(c_ServiceName,"Inside fn_buy_put");
			fn_userlog(c_ServiceName,"Strike here is :%ld:",ptr_st_cntrt_gen_inf->l_strike_prc);
  }


  EXEC SQL
         SELECT FTQ_STRK_PRC
         		INTO   :l_strike_prc
         FROM (
        			 SELECT FTQ_STRK_PRC
        			 FROM   FTQ_FO_TRD_QT
        			 WHERE  FTQ_XCHNG_CD = :ptr_st_cntrt_gen_inf->c_xchng_cd
        			 AND    FTQ_PRDCT_TYP = 'O'
        			 AND    FTQ_UNDRLYNG = :ptr_st_cntrt_gen_inf->c_undrlyng
         		 	 AND    FTQ_EXPRY_DT = to_date(:ptr_st_cntrt_gen_inf->c_expry_dt,'dd-Mon-YYYY')
        			 AND    FTQ_OPT_TYP = 'P'
        			 AND    FTQ_STRK_PRC <= :ptr_st_cntrt_gen_inf->l_strike_prc
        			 ORDER BY FTQ_STRK_PRC DESC )
        WHERE  ROWNUM < 2;


  if( SQLCODE != 0 ) 
  {
     fn_errlog( c_ServiceName, "S31535", SQLMSG, ptr_st_err_msg->c_err_msg  );
     return -1;
  }


  fn_userlog(c_ServiceName,"Strike Price is :%ld:",l_strike_prc);

  ptr_st_cntrt_gen_inf->l_strike_prc = l_strike_prc;
  ptr_st_cntrt_gen_inf->c_opt_typ = 'P';

  i_returncode = fn_cal_premium( c_ServiceName,
                                 ptr_st_cntrt_gen_inf,
                                 &d_premi,
																 &l_interval,
																 c_exg_stts,
                                 &st_err_msg );
  if( i_returncode != 0)
  {
    fn_userlog(c_ServiceName,"Failed to calculate premium");
		fn_errlog( c_ServiceName,"S31540",LIBMSG,c_err_msg.arr );
    return -1;
  }
	if(DEBUG_MSG_LVL_5)
  {
      fn_userlog(c_ServiceName,"Premium is :%lf:",d_premi);
      fn_userlog(c_ServiceName,"Lot size is :%ld:", ptr_st_cntrt_gen_inf->l_min_lot_qty);
  }

  *d_premib = d_premi;
	*l_intervalb = l_interval;

  return 0;

}
long minimum( long li_val1, long li_val2 )
{
  if(li_val1 < li_val2)
  {
    return li_val1;
  }
  else
  {
    return li_val2;
  }
}
