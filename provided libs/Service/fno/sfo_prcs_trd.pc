/********************************************************************************************************/
/*	Program				:	SFO_PRCS_TRD																																				*/
/*																																																			*/
/*  Description   :	This service updates the order book, trade book, positions and											*/
/*									the limits on getting Trade confirmation response from the Exchange							    */
/*									for Futures & Options orders of SPAN customers.																	    */
/*																																																			*/
/*																																																			*/
/*	Log						:	1.0			14-Jun-2011																																	*/
/*  Log           : 1.2     09-Oct-2012                                                                 */
/*  Log						: 1.3			19-Nov-2012																																	*/
/*  Log						: 1.4			29-Nov-2012																																	*/
/*  Log						: 1.5     20-Dec-2012																																	*/
/*  Log           : 1.6     15-Jan-2013                                                                 */
/*  Log           : 1.7     10-Jun-2013                                                                 */
/*  Log           : 1.8     18-Jun-2013                                                                 */
/*  Log           : 1.9     02-Aug-2013                                                                 */
/*	Log						: 2.0     16-Sep-2013																																	*/
/*  Log           : 2.1     11-Dec-2013                                                                 */
/*  Log           : 2.2			06-Jun-2014																																	*/
/*  Log           : 2.3			11-Jun-2014																																	*/
/*  Log           : 2.4     08-Jul-2014                                                                 */
/*  Log           : 2.5     13-Feb-2014                                                                 */
/*  Log           : 2.6     05-Aug-2014                                                                 */
/*  Log           : 2.7     07-Aug-2015                                                                 */
/*  Log           : 2.8     12-Oct-2015                                                                 */
/*  Log           : 2.9  		18-Nov-2015 																																*/
/*  Log           : 3.0  		17-Dec-2015 																																*/
/*  Log           : 3.1  		28-Jan-2016 																																*/
/*  Log           : 3.2     02-Feb-2016                                                                 */
/*  Log           : 3.4  		01-Mar-2016 																																*/
/*  Log           : 3.5     06-Jun-2016																																	*/
/*  Log						: 3.6     09-Jun-2016														  																		*/	
/*  Log           : 3.7     16-Jun-2016                                                                 */
/*  Log           : 3.9     22-Aug-2016                                                                 */
/*  Log           : 4.0     28-Sep-2016                                                                 */
/*  Log           : 4.1     11-Nov-2016                                                                 */
/*  Log           : 4.2     09-Dec-2016                                                                 */
/*  Log           : 4.3     17-Aug-2017                                                                 */
/*  Log           : 4.4     21-Sep-2017                                                                 */
/*  Log						:	4.5			08-Nov-2017																																	*/
/*	Log						: 4.6			10-Nov-2018																																	*/
/*  Log           : 4.7     12-Apr-2018                                                                 */
/*  Log           : 4.8     25-Sep-2018																																	*/
/*  Log           : 4.9     23-Jan-2019                                                                 */
/*  Log           : 5.1     25-Jul-2019                                                                 */
/*	Log						: 5.2			02-May-2019																																	*/
/*  Log           : 5.3     29-Aug-2019                                                                 */
/*  Log           : 5.4     17-Oct-2019                                                                 */
/*  Log           : 5.5     17-Mar-2020                                                                 */
/*  Log           : 5.6     17-OCT-2020                                                                 */
/*  Log           : 5.7     28-OCT-2020                                                                 */
/*  Log           : 5.8     22-Dec-2020                                                                 */
/*  Log           : 6.1     21-Oct-2021                                                                 */
/*  Log           : 6.2     16-Dec-2021                                                                 */
/*  Log           : 6.3     22-MAR-2022                                                                 */
/*  Log           : 6.4     19-Jun-2022                                                                 */
/*  Log           : 6.5     14-Jul-2022                                                                 */
/*  Log           : 6.6     17-Aug-2022                                                                 */
/*  Log           : 6.7     07-Mar-2023                                                                 */
/*  Log           : 6.8     12-Apr-2023                                                                 */
/*  Log           : 6.9     23-Jun-2023                                                                 */
/********************************************************************************************************/
/*																																																			*/	
/*	1.0		-		New Release																																								*/	
/*	1.1		-		Bug Fix (Swati A.B )																																			*/
/*  1.2   -   Bug fix for Auto square off without running IMTM Square off process	(Navina D.)						*/
/*	1.3		-		ROLLOVER changes Mahesh	Shinde																														*/
/*	1.4		-		FNO BSE CHANGES  Sandip Tambe 																														*/
/*	1.5		-		Changes for SLTP FUTUREPLUS Vishnu Nair																										*/
/*  1.6   -   SPAN FuturePLUS (Navina D.)                                                               */
/*  1.7   -   fix (Navina D.)							                                                              */
/*  1.8   -   SPAN bug fix for reading string  Mahesh Shinde						                                */
/*  1.9   -   CR-ISEC14-40339 FP SLTP Excess qty offline upload                                         */
/*	2.0		-		OptionPlus Changes		(Bhushan Sonwane)																										*/
/*  2.1   -   Real time SMS for Executed orders of CNT & Limit                                          */
/*  2.2   -   Unsolicated cancellation resp for sltp futureplus & Optionplus                            */
/*  2.3   -   Execption EOS for Sltp futureplus & Optionplus                                            */
/*  2.4   -   Changes for HTML 5 ( Bhushan S )						                                              */
/*  2.5   -   Enabling SLTP FP for NRI clients  (Navina D. )				                                    */
/*  2.6   -   Fresh qty update on squareoff of cover excess position. (Navina D.)                       */
/*  2.7   -   CR_ISEC14_64402 Limit Order Type in FPSLTP (Navina D.)                                    */
/*  2.8   -   Changes for MKT_TO_LIMIT OPTIONPLUS(Tanamy Warkhade)                                      */
/*  2.9   -   Fix for Modify rej & self cancellation and trade received at same time (Kishor/Aakash )   */
/*  3.0   -   Changes for Changes for aquiring lock (Aakash) 			                                      */
/*  3.1   -   Migraion of RI to NRI(Tanmay Warkhade) 																									  */
/*  3.2   -   Fix for invalid pointer ( Bhupendra Malik)                                                */
/*  3.4   -   Bug Fix for functional exit  and NOWAIT in core products (Aakash) 			                  */
/*  3.5   -   Changes for part executed trade on calling Ack processing(Navina)                         */
/*  3.6   -   Log maintainace(Kishor)																																		*/
/*  3.7   -   provision for spread ack                                                                  */
/*  3.9   -   Core Fix                                                                                  */
/*  4.0   -   Fix ORS Issue             (Bhupendra Malik)                                               */
/*  4.1   -   Processing trades on functional exit & Fill Qty Fetch (Kishor Borkar/Tanmay W.)           */
/*  4.2   -   Cash Projection Changes   (Bhupendra Malik)                                               */
/*  4.3   -   Service call with TPNOTRAN & TPNOREPLY option introduced       (Mrinal Kishore)           */
/*  4.4   -   Ack Time handling  (Bhushan Harekar)                                                      */
/*  4.5   -   Hard Parse Changes	(Sandeep Patil)																											  */
/*	4.6		-		Request type handling	( Bhushan Harekar )																									*/
/*  4.7   -   ORDER REJECTION STATUS CLASH with My EOS(Mrinal Kishore)                                  */
/*  4.8   -   Calculate Obligation for new fresh placed with 'E' flag for SLTP products 								*/
/*  4.9   -   MTM flag handling (issue - structure pointer variable  used                               */
/*                                       as host variable giving unexpected  NULL value. (Bhushan H.)   */
/*  5.0   -   Rollover with spread changes (Suchita Dabir)                                              */
/*  5.1   -   Delivery Margin Changes ( Akash B )                                                       */
/*	5.2		-		Last Active Reference Changes ( Bhushan Harekar )																					*/
/*  5.3   -   Changes For Updating The Recent Last Activity Ref In Table ( Suchita Dabir )              */
/*  5.4   -   Input string size change CR-ISEC14-128972 ( Tanmay )                                      */
/*  5.5   -   FPSL Margin Changes ( Akash B )                                                           */
/*  VQC   -   Version Quality Control ( Anuj Pancholi )                                                 */
/*  5.6   -   Trigger Price changes ( Suchita D )                                                       */
/*  5.7   -   OPLUS Margin Changes ( Suchita D )                                                        */
/*  5.8   -   CR-ISEC18-134966 Notifications,SMS for Square off  due to MTM (Tanmay Patel)              */
/*  5.9   -   CR_ISEC04_132410 Changes ( Suchita D )                                                    */
/*  6.0   -   CR-ISEC14-150750_Introduction of Profit Order in FPSL  ( Kalpesh P 01-Oct-2021)           */
/*  6.1   -   CR-ISEC14-158350 Revamping of Open Positions Page in F&O Segment                          */
/*  6.2   -   CR-ISEC14-162094_NRI_TDS_UNSETTLED_PROF(Sachin Birje)                                     */
/*  6.3   -   Profit Order in FPSL live issue ( Suchita Dabir )                                         */
/*  6.4   -   CR-ISEC14-170192 Allowing customers to use Options premium for Fresh Option buy ( Suchita Dabir ) */
/*  6.5   -   SPAN_BOD_MRGN_CR-ISEC14-172812 (Sachin Birje)                                             */
/*  6.6   -    CR-ISEC14-175020 changes -( Suchita Dabir )                                              */
/*  6.7   -    Changes for Client level lock - Samip M																									*/
/*  6.8   -   Margin reporting regulatory changes: Dipin                                                */
/*  6.9   -   RQ:3117 FO GTT changes : Edwin Thomas			                                                */
/********************************************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <eba_to_ors.h>
/* COMMENTED IN VER TOL : TUX on LINUX (Ravindra) * #include <fo_view_def.h> */  
#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fn_pos.h>
#include <fn_ddr.h>
#include <fn_log.h> 
#include <fn_session.h>
#include <fml_rout.h> 
#include <fn_read_debug_lvl.h> 
#include <fn_val_ord.h>
#include <fn_span_lib.h> 
#include <math.h>
#include <fml_def.h>      /* Ver 2.1 */
#include <fo_spn_rcv_lib.h>  /******* Ver 3.7 *****/
#include <fn_ors_rms.h>   /* Ver 4.1 */
#define PHYDLVRY_MTM -7   /*** Ver 5.1 ***/

/*Sleep func added in  ver 6.0 */
int fn_fno_sleep( char     *c_ServiceName,
                      FBFR32   **ptr_fml_Ibuffer,
                      double   d_sleep_tm_msec,
                      int      i_max_call_allwd,
                      char     *c_caller_rfrnc,
                      char     *c_fwd_to_srvc,
                      char     *c_errmsg);

int fn_spnupd_pos  ( 	char  *c_ServiceName,
                  		struct  st_err_msg *ptr_st_err_msg,
                  		struct st_pstn_actn *ptr_st_pstn_actn,
                       char *c_dlv_mtm_flg /***5.1****/
                	 );

int fn_cal_spnfrscvr_qty ( char *c_ServiceName,
													 struct st_pstn_actn *ptr_st_pstn_actn,
													 struct st_err_msg *ptr_st_err_msg
												 );

int fn_call_spnactn_grp1 ( char *c_ServiceName,
	                         char  *c_pipe_id,
											     struct st_pstn_actn *ptr_st_pstn_actn,
                  		     struct st_fus_undrlyng_pstn *ptr_st_undfut_pos_crrnt,
                  				 struct st_fus_undrlyng_pstn *ptr_st_undfut_pos_to_be,
                  	 			 struct st_err_msg *ptr_st_err_msg,
                           char *c_fcp_mtm_flg  /**** 5.1 ****/
												 );

int 	fn_apply_spncnt_actn ( char *c_ServiceName,
														 struct st_pstn_actn *ptr_st_pstn_actn,
												 		 struct st_fcp_cntrct_pstn *ptr_st_cntfut_pos,
                  					 struct st_err_msg *ptr_st_err_msg
													 );
/**** Ver 5.8 Starts ***/
int fn_mrgn_shrtfll_sms_mail (char *c_ServiceName,
                              char *c_clm_mtch_accnt,
                              char *c_xchng_cd,
                              char  c_prdct_typ,
                              char  c_indstk,
                              char *c_undrlyng,
                              char *c_expry_dt,
                              char  c_exer_typ,
                              char  c_opt_typ,
                              long  l_strk_prc,
                              char  c_typ);
/**** Ver 5.8 Ends ****/
char	c_ServiceName[33] = "\0"; /*** VQC ***/

double  d_mltplr   = 0.0;
double  d_spn_mrgn = 0.0;
double  d_nov      = 0.0;
double  d_total_mrgn = 0.0;
double  d_intl_mrgn  = 0.0;
double  d_min_mrgn	 = 0.0;
double  d_expsr      = 0.0;
char		c_pipe_id[3] = "\0"; /*** VQC ***/
char		c_spn_flg = 'S';
double 	d_undrlyng_pl	= 0.0;

double 	d_blkd_prmum =	0.0;			/* Old Blocked in FCP */

double	d_rel_prmum = 0.0;				/* Release premium */     
double	d_blk_prmum = 0.0;				/* Block premium */      
double	d_blk_total_prmum = 0.0;	/* Update premium in FCP */

char		c_popup_app_flg = 'N';

/********* Commented in 4.0 ********

char	frsh_rms_prcsd_flg = '\0';	*** ver 2.8 ***
char	cvr_rms_prcsd_flg = '\0';		*** ver 2.8 ***

********* Commented in 4.0 ********/

/** struct st_fus_undrlyng_pstn st_undrlyng_pstn; ** VQC **/ 

/** Current underlying level position **/
/** struct st_fus_undrlyng_pstn st_undfut_pos_crrnt; ** VQC  declared in local scope **/
	
/** Undelying level position to be **/
struct st_fus_undrlyng_pstn st_undfut_pos_to_be; 

FBFR32 *ptr_fml_IMsgbuf;

void SFO_PRCS_TRD( TPSVCINFO *rqst )
{
	/*** ver 2.8 Starts***/
	FBFR32 *ptr_fml_Sbuf;	
	ptr_fml_Sbuf  = ( FBFR32 *)NULL; 
	/*** ver 2.8 Ends ***/
  ptr_fml_IMsgbuf = ( FBFR32 *)NULL;  /** VQC **/

	int		i_trnsctn = 0;               /** VQC **/
	int		i_returncode =0;             /** VQC **/
	char	c_imtm_remarks[256] ="\0";   /** VQC **/
  char  c_tag [ 256 ] ="\0";         /** VQC **/
  char  c_prc_flg	=	'N';      
  char 	c_user_id[15] ="\0";         /** VQC **/
  char  c_spl_flg = '\0';          /*Ver 1.3 */
	char	c_rqst_typ = '\0';					 /** Ver 4.6 **/
  char c_spn1_flg= '\0';            /*** Ver 5.1 ***/
  char c_call_typ[4] = "\0";           /** Ver 5.8 **/

	int i_err[19] =  {0}; /** VQC **/  
  int i_ferr[19] = {0}; /** VQC **/ 
	int i = 0;
	int 		i_xchngbkerr[7] = {0};			/*** ver 2.8 ** VQC  ***/
  int 			i_xchngbkerr_cvrtrd[19] = {0};			/*** ver 3.0 ** VQC ***/
  int   i_ack_tm=0;     /**** Ver 2.9 ****/

	int i_gtt_flg = 0; /* Ver 6.9 */
	char c_src_flg = '\0'; /* Ver 6.9 */

  int mdfctn_cntr = 0;		/**** Ver 2.9 ****/
	char c_run_mode[2] ="\0";  /*** VQC ***/
	char  frsh_rms_prcsd_flg = '\0';  /*** ver 4.0 ***/
	char  cvr_rms_prcsd_flg = '\0';   /*** ver 4.0 ***/
  char c_reqst_typ='\0';            /**** Ver 5.1 ***/

	/** Ver 1.5 Starts **/
	char c_sltp_ord_rfrnc[19]; 
	char c_trgt_ord_rfrnc[19]; 
  char c_fc_flg ='\0';           /** VQC **/
  char c_ord_stts ='\0';         /** VQC **/
  char c_narration_id[4] ="\0";  /** VQC **/
  char c_ord_flw = '\0';
	char c_reason_cd [ 2000 ] = "\0";			/*** Ver 2.5 ***/
	char	c_tmp_rmrks [ 133 ] = "\0";			/*** Ver 2.5 ***/
  char c_frsh_ordr_rfrnc[19] = "\0";            /*** ver 2.8 ** VQC ***/
  char c_cvr_ordr_rfrnc[19];             /*** Ver 2.8 ***/
	char c_ordr_rfrnc_lck[2][19]; 				/**** Ver 3.0 ****/
  char c_sltp_ord_rfrnc_lck[2][19]; 		/**** Ver 3.0 ****/
  char c_ordr_rfrnc_lck_fut[19] = "\0"; 		/**** Ver 3.4 ****/
	char c_ordr_rfrnc_core[19] = "\0"; 		/**** Ver 4.0 ****/
  char c_lst_act_ref[22];               /*** Ver 5.2 ***/
  int  i_recent_act_ref = 0;  /*** Ver 5.3 ***/
  long long ll_fod_last_act_no = 0; /*** Ver 5.3 ***/
  long long ll_lst_act_ref  = 0; /*** Ver 5.3 ***/
  char c_fod_last_act_no[22]; /*** Ver 5.3 ***/
  MEMSET(c_fod_last_act_no); /*** Ver 5.3 ***/ 
  char c_dlv_mtm_flag='\0';             /**** Ver 5.1 ***/	
  char c_ref_rmrks[133] = "\0"; /*** Ver 5.5 ***//** size 100 to 133 in ver 5.7 ***/

 /*** ver 5.9 starts **/
  char c_setllmnt_flg ='\0';
  double d_ltp = 0.0;
  char c_phy_opnpos_flw='\0';
  long l_total_shares_tobe_blocked = 0;
  long l_shares_alreay_blocked = 0;
  double d_existing_dlvry_mrgn_val = 0.0;
  long l_qty_to_unblock = 0;
  double d_funds_to_release = 0.0; 
  long l_opnpos_qty = 0;
  double d_funds_to_be_rqrd = 0;
  int i_return_cd = 0;
  char c_lmt_flg='\0';
 /*** ver 5.9 ends **/ 
	long l_net_open = 0; /*** Ver 2.7 ***/

  
  double d_comp1_mrgn = 0.0;  /*** Ver 5.5 ***/
  double d_comp1_pl = 0.0;    /*** Ver 5.5 ***/
  double d_xchng_amt = 0.0;   /*** Ver 5.5 ***/

  double d_amt_blkd = 0.0;
  double d_lss_amt_blkd = 0.0;
  double d_ord_lmt_rt = 0.0;
  double d_fmm_sltp_prcnt = 0.0;
  double d_cvr_lmt_rt = 0.0;
  double d_new_mrgn_amt = 0.0;
  double d_new_lss_amt = 0.0;
  double d_exe_mrgn_amt = 0.0;
  double d_exe_lss_amt = 0.0;
  double d_diff_mrgn_amt = 0.0;
  double d_diff_lss_amt = 0.0;
  double d_exe_val = 0.0;
  double d_avg_prc = 0.0;
  double d_balance_amt = 0.0;
  double d_obli_pl = 0.0;
  double d_frm_diffrnc_mrgn  = 0.0;					/*** Ver 2.0 ***/
	/** long l_temp_stp_lss_tgr = 0; ** commnted in VQC ****  Ver 2.0 **/ 
  /** long l_tot_ord_qty = 0; ** commented in VQC **/
  /** long l_ord_exe_qty = 0; ** commented in VQC **/
  long l_rmn_qty = 0;
  long l_exe_qty = 0;
	/** long l_cv_exe_qty = 0; ** commented in VQC **/
	long l_open_qty = 0; /*** Ver 2.3 ***/
  long l_ftd_ord_exe_qty = 0;	/**** Ver 2.9 ****/

  double d_prem_amt = 0.0;    /*** Ver 5.7 ***/
  double d_spn_mrgn = 0.0;    /*** Ver 5.7 ***/
  double d_expr_mrgn = 0.0;   /*** Ver 5.7 ***/

	char  c_ipord_ref[19]="\0";   /**** Ver 3.7 ****/
	long l_ors_msg_typ=0;    /*** Ver 3.7 ****/
  EXEC SQL INCLUDE "table/iai_info_account_info.h"; /* Ver 3.1 */

	int   i_exec_rng = 0; /*** Ver 2.2 ***/

	/** short int si_null =0; ** VQC **/

	char c_cvr_ordr_stts = 'Q';			/*** Ver 2.8 ***/
	char c_frsh_ordr_stts = 'Q';			/*** Ver 2.8 ***/
	char c_rms_prcs_flg = 'N';			/***	Ver 4.5	***/
	char c_cvr_flg = 'C';						/***  Ver 4.5 ***/

    /*** Ver 6.1 starts ***/
  double d_prtfl_avgprc = 0.0;
  /*** Ver 6.1 ends ***/

  /** 5.0 started **/

  long l_sroll_diff_amt = 0;
  long l_sroll_lss_amt = 0;
  long l_executed_qty = 0;
  int i_allow_trd_prcsing=0;
  long l_actual_ordr_tot_qty = 0;
  char c_other_ordr_ref[19]; 
  MEMSET( c_other_ordr_ref );
  long i_source_dest_flg = 0;
  char c_expry_date_nxt_ordr[23];
  MEMSET( c_expry_date_nxt_ordr );

  double d_rws_diff_lss_amt = 0.0;
  double d_rws_diff_mrgn_amt = 0.0;
  long  l_diff_lss_amt = 0;
  long l_diff_mrgn_amt = 0;
  i_source_dest_flg = 0;

  char c_can_ordr_ref[19] = "\0" ; /*** Ver 6.0 ***/
  char c_nkd_blkd_flg='\0'; /** ver 6.0 **/
  char c_remarks[50] = "\0"; /*** Ver 6.0 ***/
  char c_sys_msg[20] = "\0"; /*** Ver 6.0 ***/
  int i_sleep_msec = 0; /*** Ver 6.0 ***/

  /** long l_exec_qty_rws = 0; ** VQC **/

  /** 5.0 ended **/

	/** Ver 1.5 Starts **/

	struct vw_xchngbook st_cvr_xchngbk;			/*** ver 2.8 ***/

	

	EXEC SQL BEGIN DECLARE SECTION;
		struct st_pstn_actn st_pstnactn;
		struct st_orderbook st_ordrbk;
		struct st_tradebook st_trade_book;
		struct st_xchngbook st_xchngbk;
		struct st_err_msg st_errmsg;
    struct vw_err_msg *ptr_st_err_msg;        /*** ver 2.8 ***/
 /**  struct vw_tradebook *ptr_st_tradebook;  ** VQC ** ver 2.8 ***/
 /** 	struct vw_tradebook st_tradebook;  *** VQC **/

    struct st_pstn_actn *ptr_st_pstn_actn;    /*** ver 2.8 ***/
		struct vw_pstn_actn st_pstn_actn;					/*** ver 2.8 ***/

		
	EXEC SQL END DECLARE SECTION;
	FBFR32 *ptr_fml_Itrdbkbuf; 							
  /** FBFR32   *ptr_fml_Ibuf; ** VQC ** ver 2.8 ***/
  /** FBFR32   *ptr_fml_Obuf; ** VQC ** ver 2.8 ***/
  FBFR32   *ptr_fml_Rbuf = NULL;   /*** ver 6.0 ***/

	ptr_fml_Itrdbkbuf = (FBFR32 *)rqst->data;

	strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);

  MEMSET(c_ordr_rfrnc_lck);    /********* Ver 3.0 *******/
  MEMSET(c_sltp_ord_rfrnc_lck); /********* Ver 3.0 *******/

	MEMSET(st_pstnactn);      /***  Ver 1.7 ***/
	MEMSET(c_reason_cd);			/*** Ver 2.5 ***/
	MEMSET(c_tmp_rmrks);			/*** Ver 2.5 ***/
	MEMSET(c_trgt_ord_rfrnc);		/*** ver 2.8 ***/
	MEMSET(st_cvr_xchngbk);			/*** ver 2.8 ***/
  MEMSET(c_cvr_ordr_rfrnc);   /** 4.0 **/
  MEMSET(st_trade_book);    /** 4.0 **/
  MEMSET(c_lst_act_ref);    /** Ver 5.2 **/
  MEMSET(st_ordrbk);        /** VQC **/
  MEMSET(st_xchngbk);       /** VQC **/
  MEMSET(st_errmsg);        /** VQC **/
  MEMSET(st_pstn_actn);     /** VQC **/

	if(DEBUG_MSG_LVL_3)
	{
 		fn_userlog ( c_ServiceName,"***********************START SFO_PRCS_TRD*************************");
		fn_userlog(c_ServiceName,"START UNPACK Input FML : ptr_fml_Itrdbkbuf TO struct st_trade_book");
	}

	i_err		[	0	]			=	Fget32( ptr_fml_Itrdbkbuf ,FFO_ROUT_CRT,0,(char *) st_trade_book.c_rout_crt,0);
	i_ferr	[	0	]			=	Ferror32;
	i_err		[	1	]			=	Fget32( ptr_fml_Itrdbkbuf ,FFO_ORDR_RFRNC,0,(char *) st_trade_book.c_ordr_rfrnc,0);
	i_ferr	[	1	]			=	Ferror32;
	i_err		[	2	]			=	Fget32( ptr_fml_Itrdbkbuf ,FFO_TRD_RFRNC,0,(char *) st_trade_book.c_trd_rfrnc,0);
	i_ferr	[	2	]			=	Ferror32;
	i_err		[	3	]			=	Fget32( ptr_fml_Itrdbkbuf ,FFO_EBA_MTCH_ACT_NO,0,(char *) st_trade_book.c_cln_mtch_accnt,0);
	i_ferr	[	3	]			=	Ferror32;
	i_err		[	4	]			=	Fget32( ptr_fml_Itrdbkbuf ,FFO_EBA_CNTRCT_ID,0,(char *) &st_trade_book.l_eba_cntrct_id,0);
	i_ferr	[	4	]			=	Ferror32;
	i_err		[	5	]			=	Fget32( ptr_fml_Itrdbkbuf ,FFO_XCHNG_CD,0,(char *) st_trade_book.c_xchng_cd,0);
	i_ferr	[	5	]			=	Ferror32;
	i_err		[	6	]			=	Fget32( ptr_fml_Itrdbkbuf ,FFO_PRDCT_TYP,0,(char *) &st_trade_book.c_prd_typ,0);
	i_ferr	[	6	]			=	Ferror32;
	i_err		[	7	]			=	Fget32( ptr_fml_Itrdbkbuf ,FFO_UNDRLYNG,0,(char *) st_trade_book.c_undrlyng,0);
	i_ferr	[	7	]			=	Ferror32;
	i_err		[	8	]			=	Fget32( ptr_fml_Itrdbkbuf ,FFO_EXPRY_DT,0,(char *) st_trade_book.c_expry_dt,0);
	i_ferr	[	8	]			=	Ferror32;
	i_err		[	9	]			=	Fget32( ptr_fml_Itrdbkbuf ,FFO_EXER_TYP,0,(char *) &st_trade_book.c_exrc_typ,0);
	i_ferr	[	9	]			=	Ferror32;
	i_err		[	10	]		=	Fget32( ptr_fml_Itrdbkbuf ,FFO_OPT_TYP,0,(char *) &st_trade_book.c_opt_typ,0);
	i_ferr	[	10	]		=	Ferror32;
	i_err		[	11	]		=	Fget32( ptr_fml_Itrdbkbuf ,FFO_STRK_PRC,0,(char *) &st_trade_book.l_strike_prc,0);
	i_ferr	[	11	]		=	Ferror32;
	i_err		[	12	]		=	Fget32( ptr_fml_Itrdbkbuf ,FFO_CTGRY_INDSTK,0,(char *) &st_trade_book.c_ctgry_indstk,0);
	i_ferr	[	12	]		=	Ferror32;
	i_err		[	13	]		=	Fget32( ptr_fml_Itrdbkbuf ,FFO_CA_LVL,0,(char *) &st_trade_book.l_ca_lvl,0);
	i_ferr	[	13	]		=	Ferror32;
	i_err		[	14	]		=	Fget32( ptr_fml_Itrdbkbuf ,FFO_TRD_FLW,0,(char *) &st_trade_book.c_trd_flw,0);
	i_ferr	[	14	]		=	Ferror32;
	i_err		[	15	]		=	Fget32( ptr_fml_Itrdbkbuf ,FFO_EXEC_QTY,0,(char *) &st_trade_book.l_exctd_qty,0);
	i_ferr	[	15	]		=	Ferror32;
	i_err		[	16	]		=	Fget32( ptr_fml_Itrdbkbuf ,FFO_EXCTD_RT,0,(char *) &st_trade_book.l_exctd_rt,0);
	i_ferr	[	16	]		=	Ferror32;
	i_err		[	17	]		=	Fget32( ptr_fml_Itrdbkbuf ,FFO_TRD_DT,0,(char *) st_trade_book.c_trd_dt,0);
	i_ferr	[	17	]		=	Ferror32;

	for ( i=0	;	i < 18 ;	i++ )
	{
		if ( (i_err[ i ] == -1 ) && (i_ferr[ i ]	!= FNOTPRES ) )
    {
    	fn_userlog( c_ServiceName, "Error in :%d:",i );
      fn_errlog( c_ServiceName, "S31005", Fstrerror32( i_ferr[i]),st_errmsg.c_err_msg );
      Fadd32( ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Itrdbkbuf, 0, 0 );
     }
	}

  if(DEBUG_MSG_LVL_0)		/*** Ver 3.6 ***/
  {
    fn_userlog(c_ServiceName," st_trade_book.c_ordr_rfrnc  IS :%s:",  st_trade_book.c_ordr_rfrnc );
    fn_userlog(c_ServiceName," st_trade_book.c_trd_rfrnc   IS :%s:",  st_trade_book.c_trd_rfrnc );
    fn_userlog(c_ServiceName," st_trade_book.c_cln_mtch_accnt  IS :%s:",  st_trade_book.c_cln_mtch_accnt );
	}
		/*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
	if(DEBUG_MSG_LVL_2)	
	{
		fn_userlog(c_ServiceName,"INPUT TO SERVICE");
		fn_userlog(c_ServiceName,"**************************************************");
		fn_userlog(c_ServiceName," st_trade_book.c_rout_crt	 IS :%s:",	st_trade_book.c_rout_crt );
		fn_userlog(c_ServiceName," st_trade_book.c_ordr_rfrnc	 IS :%s:",	st_trade_book.c_ordr_rfrnc );
		fn_userlog(c_ServiceName," st_trade_book.c_trd_rfrnc	 IS :%s:",	st_trade_book.c_trd_rfrnc );
		fn_userlog(c_ServiceName," st_trade_book.c_cln_mtch_accnt	 IS :%s:",	st_trade_book.c_cln_mtch_accnt );
		fn_userlog(c_ServiceName," st_trade_book.l_eba_cntrct_id	 IS :%ld:",	st_trade_book.l_eba_cntrct_id );
		fn_userlog(c_ServiceName," st_trade_book.c_xchng_cd	 IS :%s:",	st_trade_book.c_xchng_cd );
		fn_userlog(c_ServiceName," st_trade_book.c_prd_typ	 IS :%c:",	st_trade_book.c_prd_typ );
		fn_userlog(c_ServiceName," st_trade_book.c_undrlyng	 IS :%s:",	st_trade_book.c_undrlyng );
		fn_userlog(c_ServiceName," st_trade_book.c_expry_dt	 IS :%s:",	st_trade_book.c_expry_dt );
		fn_userlog(c_ServiceName," st_trade_book.c_exrc_typ	 IS :%c:",	st_trade_book.c_exrc_typ );
		fn_userlog(c_ServiceName," st_trade_book.c_opt_typ	 IS :%c:",	st_trade_book.c_opt_typ );
		fn_userlog(c_ServiceName," st_trade_book.l_strike_prc	 IS :%ld:",	st_trade_book.l_strike_prc );
		fn_userlog(c_ServiceName," st_trade_book.c_ctgry_indstk	 IS :%c:",	st_trade_book.c_ctgry_indstk );
		fn_userlog(c_ServiceName," st_trade_book.l_ca_lvl	 IS :%ld:",	st_trade_book.l_ca_lvl );
		fn_userlog(c_ServiceName," st_trade_book.c_trd_flw	 IS :%c:",	st_trade_book.c_trd_flw );
		fn_userlog(c_ServiceName," st_trade_book.l_exctd_qty	 IS :%ld:",	st_trade_book.l_exctd_qty );
		fn_userlog(c_ServiceName," st_trade_book.l_exctd_rt	 IS :%ld:",	st_trade_book.l_exctd_rt );
		fn_userlog(c_ServiceName," st_trade_book.c_trd_dt	 IS :%s:",	st_trade_book.c_trd_dt );
		fn_userlog(c_ServiceName,"**************************************************");
	}


	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"END UNPACK Input FML : ptr_fml_Itrdbkbuf TO struct st_trade_book");
	}

	/*** Ver 1.6 starts ***/
	if (st_trade_book.c_prd_typ == 'P')
	{
		fn_userlog(c_ServiceName, "SPAN FuturePLUS trades shall be processed Under Normal Margining System.");
   /**  tpfree ( ( char * ) &st_trade_book );  Commented in Ver 3.9 ***/
		/* Commented in Ver 3.2    
		tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
		/* Ver 3.2 Starts****/
		Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
	  tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
		/*** ver 3.2 Ends ***/
	}
	/*** Ver 1.6 ends ***/

	ptr_fml_IMsgbuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if ( ptr_fml_IMsgbuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31010", TPMSG,  st_errmsg.c_err_msg);
    /** tpfree ( ( char * ) &st_trade_book );  Commented in Ver 3.9 **/
		/*** Commented in ver 3.2 *
	  tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); ****/
		/*** Ver 3.2 Starts ***/
		Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
		/*** Ver 3.2 Ends ***/
  }

	/*** Ver 2.8 starts ***/
	ptr_fml_Sbuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

	if ( ptr_fml_Sbuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31015", TPMSG,  st_errmsg.c_err_msg);
		tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
    /** tpfree ( ( char * ) &st_trade_book );  Commented in Ver 3.9 ***/
		/**** Commented in Ver 3.2 **
		tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); ****/
		/*** Ver 3.2 Starts ***/
		Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
		/*** Ver 3.2 Ends ***/
  }
	/*** Ver 2.8 ends ***/

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_trade_book.c_rout_crt );

   /*** Ver 2.7 start ***/
	if(st_trade_book.c_prd_typ == SLTP_FUTUREPLUS || st_trade_book.c_prd_typ == OPTIONPLUS)		/*** ver 2.8 Following validation is also applied for OPTIONPLUS***/
	{
		fn_userlog(c_ServiceName,"Trade processing started for Input Order:%s: | :%s: ",st_trade_book.c_ordr_rfrnc, st_trade_book.c_trd_rfrnc);

		EXEC SQL
			  SELECT
					 FOD_ORDR_STTS			/***	Ver 4.5	***/
			  INTO
				  :c_cvr_ordr_stts
			  FROM FOD_FO_ORDR_DTLS
			  WHERE FOD_ORDR_RFRNC = (SELECT FOD_SLTP_ORDR_RFRNC FROM FOD_FO_ORDR_DTLS WHERE FOD_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc);

		 if(SQLCODE != 0)
		{
			fn_errlog(c_ServiceName, "S31020", SQLMSG,  st_errmsg.c_err_msg);
			/**** Commented in Ver 3.2 **
			tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); ***/ 
			/*** Ver 3.2 Starts ***/
			tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
			Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
			/*** Ver 3.2 Ends ***/
		}

		EXEC SQL
				  SELECT
					 FOD_ORDR_STTS,				/***	Ver 4.5	***/
					 FOD_SLTP_ORDR_RFRNC
				  INTO
					  :c_frsh_ordr_stts,
					  :c_cvr_ordr_rfrnc
				  FROM FOD_FO_ORDR_DTLS
				  WHERE FOD_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc;
		if(SQLCODE != 0)
		{
			fn_errlog(c_ServiceName, "S31025", SQLMSG,  st_errmsg.c_err_msg);
			/**** Commented in Ver 3.2 **
			tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); ***/
			tpfree((char *)ptr_fml_Sbuf);  /*** Added in ver 3.9 ***/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
			/*** Ver 3.2 Starts ***/
			Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
			/*** Ver 3.2 Ends ***/
		}

  	if( DEBUG_MSG_LVL_1 )
  	{
			fn_userlog(c_ServiceName,"c_cvr_ordr_stts :%c c_frsh_ordr_stts : %c st_trade_book.c_ordr_rfrnc : %s c_cvr_ordr_rfrnc :%s",c_cvr_ordr_stts, c_frsh_ordr_stts, st_trade_book.c_ordr_rfrnc,c_cvr_ordr_rfrnc);
		}
		if ((c_cvr_ordr_stts == QUEUED) || (c_frsh_ordr_stts == QUEUED))	
		{
			/*** ver 2.8 Starts***/
			MEMSET(st_cvr_xchngbk);
			/****** Commented in Ver 4.0 ****
			EXEC SQL
				  SELECT
					 fxb_rms_prcsd_flg
				  INTO
					  :frsh_rms_prcsd_flg
				  FROM FXB_FO_XCHNG_BOOK
				  WHERE FXB_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc
				  AND    FXB_MDFCTN_CNTR = (select max(FXB_MDFCTN_CNTR)
										from   FXB_FO_XCHNG_BOOK
										where  FXB_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc); ** Ver 4.0 **/
			/*** Ver 4.0 Starts *******/
			EXEC SQL
			SELECT  FXB_RMS_PRCSD_FLG			/***	Ver 4.5	***/
			INTO		:frsh_rms_prcsd_flg
			FROM    FXB_FO_XCHNG_BOOK
			WHERE		FXB_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc
			AND    FXB_MDFCTN_CNTR = (SELECT MIN(FXB_MDFCTN_CNTR)
																FROM	 FXB_FO_XCHNG_BOOK
																WHERE	 FXB_ORDR_RFRNC= :st_trade_book.c_ordr_rfrnc
																AND		 FXB_JIFFY     = (SELECT MIN(FXB_JIFFY)
																												FROM	 FXB_FO_XCHNG_BOOK
																												WHERE	 FXB_ORDR_RFRNC= :st_trade_book.c_ordr_rfrnc
												 																AND		 FXB_RMS_PRCSD_FLG=:c_rms_prcs_flg)/*** Ver 4.5 Hard Code Value Replaced by Bind Variable ***/
																AND			FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg)/*** Ver 4.5 Hard Code Value Replaced by Bind Variable ***/
			AND		FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg; /*** Ver 4.5 Hard Code Value Replaced by Bind Variable ***/
			/*************** Ver 4.0 Ends ********/

			if( DEBUG_MSG_LVL_1 )
      {
        fn_userlog(c_ServiceName," SQLCODE for st_trade_book.c_ordr_rfrnc is :%ld:",SQLCODE);
			}
	
			if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND) /*** SQLCODE != NO_DATA_FOUND Added in Ver 4.0 ***/
			{
				fn_errlog(c_ServiceName, "S31030", SQLMSG,  st_errmsg.c_err_msg);
				/**** Commented in Ver 3.2 **
				tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); ***/
				/*** Ver 3.2 Starts ***/
				tpfree((char *)ptr_fml_Sbuf); /** Added in Ver 3.9 **/
				tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
				Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
				/*** Ver 3.2 Ends ***/
			}
			/******* Commented in ver 4.0 ****
			EXEC SQL
				  SELECT
					 fxb_rms_prcsd_flg
				  INTO
					  :cvr_rms_prcsd_flg 
				  FROM FXB_FO_XCHNG_BOOK
				  WHERE FXB_ORDR_RFRNC = :c_cvr_ordr_rfrnc
				  AND    FXB_MDFCTN_CNTR = (select max(FXB_MDFCTN_CNTR)
											from   FXB_FO_XCHNG_BOOK
											where  FXB_ORDR_RFRNC = :c_cvr_ordr_rfrnc); *** Ver 4.0 ***/
				/**** Ver 4.0 Starts ******/
			EXEC SQL
			SELECT  FXB_RMS_PRCSD_FLG			/*** Ver 4.5	***/
			INTO		:cvr_rms_prcsd_flg
			FROM    FXB_FO_XCHNG_BOOK
			WHERE		FXB_ORDR_RFRNC = :c_cvr_ordr_rfrnc
			AND    FXB_MDFCTN_CNTR = (SELECT MIN(FXB_MDFCTN_CNTR)
																FROM	 FXB_FO_XCHNG_BOOK
																WHERE	 FXB_ORDR_RFRNC= :c_cvr_ordr_rfrnc
																AND		 FXB_JIFFY     = (SELECT MIN(FXB_JIFFY)
																												FROM	 FXB_FO_XCHNG_BOOK
																												WHERE	 FXB_ORDR_RFRNC= :c_cvr_ordr_rfrnc
												 																AND		 FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg) 	/*** Ver 4.5 Hard Code Value Replaced by Bind Variable ***/
																AND			FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg)/*** Ver 4.5 Hard Code Value Replaced by Bind Variable ***/
			AND		FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg;/*** Ver 4.5 Hard Code Value Replaced by Bind Variable ***/
			/*********** Ver 4.0 Ends ***********/

			if( DEBUG_MSG_LVL_1 )
      {
        fn_userlog(c_ServiceName," SQLCODE for c_cvr_ordr_rfrnc is :%ld:",SQLCODE);
      }
			if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND) /**** SQLCODE != NO_DATA_FOUND Added in Ver 4.0 ***/
			{
				fn_errlog(c_ServiceName, "S31035", SQLMSG,  st_errmsg.c_err_msg);
				/**** Commented in Ver 3.2 **
			  tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
				tpfree((char *)ptr_fml_Sbuf); /** Added in Ver 3.9 **/
				tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
				/*** Ver 3.2 Starts ***/
				Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
				/*** Ver 3.2 Ends ***/
			}

			if(frsh_rms_prcsd_flg == 'N' && cvr_rms_prcsd_flg == 'N')
				strcpy( c_trgt_ord_rfrnc, st_trade_book.c_ordr_rfrnc);
			else if (frsh_rms_prcsd_flg == 'N' && cvr_rms_prcsd_flg != 'N')
				strcpy( c_trgt_ord_rfrnc, st_trade_book.c_ordr_rfrnc);
			else if (frsh_rms_prcsd_flg != 'N' && cvr_rms_prcsd_flg == 'N')
				strcpy( c_trgt_ord_rfrnc, c_cvr_ordr_rfrnc);
			/********* Commented in Ver 4.0 **
		  EXEC SQL
			  SELECT FXB_ORS_MSG_TYP,
					 FXB_MDFCTN_CNTR,
					 nvl(to_char(FXB_ACK_TM, 'dd-mon-yyyy hh24:mi:ss'),'*')
			  INTO   :st_cvr_xchngbk.l_ors_msg_typ,
					 :st_cvr_xchngbk.l_mdfctn_cntr,
					 :st_cvr_xchngbk.c_ack_tm
			  FROM   FXB_FO_XCHNG_BOOK
			  WHERE  FXB_ORDR_RFRNC = :c_trgt_ord_rfrnc
			  AND    fxb_mdfctn_cntr = (select max(FXB_MDFCTN_CNTR)
										from   FXB_FO_XCHNG_BOOK
										where  FXB_ORDR_RFRNC = :c_trgt_ord_rfrnc) 
			   AND    FXB_RMS_PRCSD_FLG = 'N'; **** Ver 4.0 ****/
			/**** Ver 4.0 Starts **********/
			if( DEBUG_MSG_LVL_1 )
			{
				fn_userlog(c_ServiceName,"frsh_rms_prcsd_flg :%c: cvr_rms_prcsd_flg :%c: c_trgt_ord_rfrnc :%s:",frsh_rms_prcsd_flg,cvr_rms_prcsd_flg,c_trgt_ord_rfrnc);
			}
			EXEC SQL
			SELECT FXB_ORS_MSG_TYP,			/***	Ver 4.5	***/
						 FXB_MDFCTN_CNTR,
						 NVL(TO_CHAR(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'),'*'),
             NVL(FXB_XCHNG_CNCLD_QTY,0)                                   /**** Ver 4.1 *****/
			INTO   :st_cvr_xchngbk.l_ors_msg_typ,
						 :st_cvr_xchngbk.l_mdfctn_cntr,
						 :st_cvr_xchngbk.c_ack_tm,
             :st_cvr_xchngbk.l_xchng_can_qty                              /***** Ver 4.1 ***/
			FROM   FXB_FO_XCHNG_BOOK
			WHERE  FXB_ORDR_RFRNC = :c_trgt_ord_rfrnc
			AND    FXB_MDFCTN_CNTR =(SELECT MIN(FXB_MDFCTN_CNTR)
																FROM	 FXB_FO_XCHNG_BOOK
																WHERE	 FXB_ORDR_RFRNC= :c_trgt_ord_rfrnc
																AND		 FXB_JIFFY     = (SELECT MIN(FXB_JIFFY)
																												FROM	 FXB_FO_XCHNG_BOOK
																												WHERE	 FXB_ORDR_RFRNC= :c_trgt_ord_rfrnc
												 																AND		 FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg)	/*** Ver 4.5 Hard Code Value Replaced by Bind Variable ***/
																AND		 FXB_RMS_PRCSD_FLG = :c_rms_prcs_flg)/*** Ver 4.5 Hard Code Value Replaced by Bind Variable ***/
			AND		FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg; /*** Ver 4.5 Hard Code Value Replaced by Bind Variable ***/
		 /************** Ver 4.0 Ends ***********/
			if(SQLCODE !=0 )
			{
				fn_errlog(c_ServiceName, "S31040", SQLMSG,  st_errmsg.c_err_msg);
				tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
				tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
				/**** Commented in Ver 3.2 **
				 tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
				/*** Ver 3.2 Starts ***/
				Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
				/*** Ver 3.2 Ends ***/
			}
			else
			{
				fn_userlog( c_ServiceName, "Unprocessed ACK exist so process it...");
			}

	
			fn_cpy_ddr ( st_cvr_xchngbk.c_rout_crt );
			strcpy(st_cvr_xchngbk.c_entry_dt_tm,st_cvr_xchngbk.c_ack_tm);

			/*** Ver 3.5 starts ***  **** Commented in Ver 4.1 ******
			l_ftd_ord_exe_qty = 0 ;  

			EXEC SQL
				SELECT  NVL(SUM(ftd_exctd_qty),0)
				INTO		:l_ftd_ord_exe_qty
				FROM		ftd_fo_trd_dtls
				WHERE		ftd_ordr_rfrnc = :c_trgt_ord_rfrnc;

			if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
			{
				fn_errlog(c_ServiceName, "S31045", SQLMSG,  st_errmsg.c_err_msg);
				tpfree((char *)ptr_fml_Sbuf); *** Added in Ver 3.9 ***
				tpfree((char *)ptr_fml_IMsgbuf);  ** Added in Ver 3.9 **
				Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
			}
      if(DEBUG_MSG_LVL_0) *** Ver 3.6***  
			{
				fn_userlog( c_ServiceName, "l_ftd_ord_exe_qty: %ld",l_ftd_ord_exe_qty);
			}
			*** Ver 3.5 ends ***

			********** Commented ver 3.5 Ends ************/
	
    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
			if(DEBUG_MSG_LVL_2)
			{
				fn_userlog( c_ServiceName, "Before Calling  SFO_PRCS_RSP for Order Ref:%s:", c_trgt_ord_rfrnc);
				fn_userlog( c_ServiceName, "st_cvr_xchngbk.c_entry_dt_tm:%s:", st_cvr_xchngbk.c_entry_dt_tm);
				fn_userlog( c_ServiceName, "st_cvr_xchngbk.c_ack_tm:%s:", st_cvr_xchngbk.c_ack_tm);
				fn_userlog( c_ServiceName, "st_cvr_xchngbk.l_mdfctn_cntrm:%ld:", st_cvr_xchngbk.l_mdfctn_cntr);
				fn_userlog( c_ServiceName, "st_cvr_xchngbk.l_ors_msg_typ:%ld:", st_cvr_xchngbk.l_ors_msg_typ);
			}

			i_xchngbkerr [0] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)st_cvr_xchngbk.c_rout_crt,0);
			i_ferr[0] = Ferror32;
			i_xchngbkerr [1] = Fadd32(ptr_fml_Sbuf,FFO_ORDR_RFRNC, (char *)c_trgt_ord_rfrnc,0);
			i_ferr[1] = Ferror32;
			i_xchngbkerr [2] = Fadd32(ptr_fml_Sbuf,FFO_ORS_MSG_TYP, (char *)&st_cvr_xchngbk.l_ors_msg_typ,0);
			i_ferr[2] = Ferror32;
			i_xchngbkerr [3] = Fadd32(ptr_fml_Sbuf,FFO_MDFCTN_CNTR, (char *)&st_cvr_xchngbk.l_mdfctn_cntr,0);
			i_ferr[3] = Ferror32;
			i_xchngbkerr [4] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM, (char *)st_cvr_xchngbk.c_ack_tm,0);
			i_ferr[4] = Ferror32;
			i_xchngbkerr [5] = Fadd32(ptr_fml_Sbuf,FFO_PREV_ACK_TM, (char *)st_cvr_xchngbk.c_entry_dt_tm,0);
			i_ferr[5] = Ferror32;
			/** i_xchngbkerr [6] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CAN_QTY, (char *)&l_ftd_ord_exe_qty,0);	*** Ver 3.5 ** COmmented in Ver 4.1 ***/
			i_xchngbkerr [6] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CAN_QTY, (char *)&st_cvr_xchngbk.l_xchng_can_qty,0);  /** Ver 4.1 ***/
			i_ferr[6] = Ferror32;																																		  /*** Ver 3.5 ***/

			for (i = 0;i < 7 ;i++)	/*** changed from 6 to 7 in Ver 3.5 ***/
			{ 
				if(i_xchngbkerr[i] == -1 )
				{
					fn_userlog( c_ServiceName, "Error in :%d:",i );
					tpfree((char *)ptr_fml_Sbuf);
					tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
					fn_errlog(c_ServiceName, "S31050", FMLMSG,  st_errmsg.c_err_msg);
					/**** Commented in Ver 3.2 **
					 tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
					/*** Ver 3.2 Starts ***/
					Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
					tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
					/*** Ver 3.2 Ends ***/
				}
			}

			i_returncode  = tpacall ( "SFO_PRCS_RSP", (char *)ptr_fml_Sbuf,0, TPNOTRAN|TPNOREPLY);

			if ( i_returncode != SUCC_BFR )
			{
				fn_errlog ( c_ServiceName, "S31055", TPMSG, c_err_msg ); /** VQC chnged LIBMSG to TPMSG **/
				/** Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 ); Commented in Ver 3.9 **/
				Fadd32( ptr_fml_Itrdbkbuf, FFO_ERR_MSG, c_err_msg, 0 ); /** Added in Ver 3.9 **/
			}
    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/			
			if(DEBUG_MSG_LVL_2)
			{
				fn_userlog( c_ServiceName, "After Calling  SFO_PRCS_RSP for Order Ref:%s:", c_trgt_ord_rfrnc);
			}
			/*** ver 2.8 Ends**/
			tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
			tpreturn(TPSUCCESS, SUCC_BFR, NULL ,0, 0 );
		}
	}
	/*** Ver 2.7 End ***/
	/*** Ver 3.4 Starts ***/
	else if(st_trade_book.c_prd_typ == FUTURES || st_trade_book.c_prd_typ == OPTIONS)	
	{

        if(DEBUG_MSG_LVL_0) /*** Ver 3.6 ***/
        {
					fn_userlog(c_ServiceName,"Trade processing started for Input Order:%s: | :%s: ",st_trade_book.c_ordr_rfrnc, st_trade_book.c_trd_rfrnc);
				}

		EXEC SQL
			  SELECT
					 FOD_ORDR_STTS,			/***	Ver 4.5	***/
					           NVL(FOD_SROLL_DIFF_AMT,0), /** ver 5.0 **/
           NVL(FOD_SROLL_LSS_AMT,0), /** ver 5.0 **/
           FOD_SPL_FLAG, /** ver 5.0 **/
           FOD_EXEC_QTY, /** ver 5.0 **/
					 NVL(FOD_SOURCE_FLG, 'O') /** Ver 6.9 **/
			  INTO
				  :c_frsh_ordr_stts,
				            :l_sroll_diff_amt, /** ver 5.0 **/
          :l_sroll_lss_amt,/** ver 5.0 **/
          :c_spl_flg,/** ver 5.0 **/
          :l_executed_qty,/** ver 5.0 **/
					:c_src_flg  /** Ver 6.9 **/
			  FROM FOD_FO_ORDR_DTLS
			  WHERE FOD_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc;

		 if(SQLCODE != 0)
		{
			fn_errlog(c_ServiceName, "S31060", SQLMSG,  st_errmsg.c_err_msg);
			tpfree((char *)ptr_fml_Sbuf); /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
			/**** Commented in Ver 3.2 **
			 tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
			/*** Ver 3.2 Starts ***/
			Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
			/*** Ver 3.2 Ends ***/
		}

        if(DEBUG_MSG_LVL_0) /*** Ver 3.6 ***/
        {
					fn_userlog(c_ServiceName,"c_frsh_ordr_stts : %c st_trade_book.c_ordr_rfrnc : %s",c_frsh_ordr_stts, st_trade_book.c_ordr_rfrnc);
				}

		if(c_frsh_ordr_stts == QUEUED)
		{
			MEMSET(st_cvr_xchngbk);

		    EXEC SQL
			  SELECT FXB_ORS_MSG_TYP,				/***	Ver 4.5	***/
					 		 FXB_MDFCTN_CNTR,
					 	 	 NVL(TO_CHAR(FXB_ACK_TM, 'dd-mon-yyyy hh24:mi:ss'),'*'),
             	 NVL(FXB_XCHNG_CNCLD_QTY,0)            										/**** Ver 4.1 *****/
			  INTO   :st_cvr_xchngbk.l_ors_msg_typ,
							 :st_cvr_xchngbk.l_mdfctn_cntr,
							 :st_cvr_xchngbk.c_ack_tm,
           		 :st_cvr_xchngbk.l_xchng_can_qty   													/** Ver 4.1 **/
			  FROM   FXB_FO_XCHNG_BOOK
			  WHERE  FXB_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc
			  /***** Commented in Ver 3.7 ****
				AND    fxb_mdfctn_cntr = (select max(FXB_MDFCTN_CNTR)
										from   FXB_FO_XCHNG_BOOK
										where  FXB_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc) 
			   AND    FXB_RMS_PRCSD_FLG = 'N';   *****/
				 /***** Ver 3.7  Starts ******/
				 AND    FXB_JIFFY = (SELECT  MIN(FXB_JIFFY)
															FROM   FXB_FO_XCHNG_BOOK
															WHERE  FXB_ORDR_RFRNC =:st_trade_book.c_ordr_rfrnc
															AND  FXB_RMS_PRCSD_FLG = :c_rms_prcs_flg)	/*** Ver 4.5 Hard Code Value Replaced by Bind Variable ***/
				 AND    FXB_RMS_PRCSD_FLG = :c_rms_prcs_flg;/*** Ver 4.5 Hard Code Value Replaced by Bind Variable ***/
				 /******* Ver 3.7 Ends ***************/
			if(SQLCODE !=0 )
			{
				fn_errlog(c_ServiceName, "S31065", SQLMSG,  st_errmsg.c_err_msg);
				tpfree((char *)ptr_fml_Sbuf); /*** Added in Ver 3.9 ***/
				tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
				/**** Commented in Ver 3.2 **
				tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
				/*** Ver 3.2 Starts ***/
				Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
				/*** Ver 3.2 Ends ***/
			}
			else
			{
				fn_userlog( c_ServiceName, "Unprocessed ACK exist so process it...");
			}

/*************************************** Ver 3.7 Starts ************************************/
			if((st_cvr_xchngbk.l_ors_msg_typ == ORS_2LN_ORD_ACPT ) || (st_cvr_xchngbk.l_ors_msg_typ == ORS_3LN_ORD_ACPT) || 
      ( (c_spl_flg == ROLLOVER_WITH_SPREAD) && (( st_cvr_xchngbk.l_ors_msg_typ == ORS_SPRD_MOD_ACPT) || (st_cvr_xchngbk.l_ors_msg_typ == ORS_CAN_ORD_ACPT ) || ( st_cvr_xchngbk.l_ors_msg_typ == ORS_SPN_ORD_ACPT) || ( st_cvr_xchngbk.l_ors_msg_typ == ORS_SPN_ORD_RJCT) || ( st_cvr_xchngbk.l_ors_msg_typ == ORS_SPRD_MOD_RJCT) || ( st_cvr_xchngbk.l_ors_msg_typ == ORS_SPRD_CAN_RJCT)))) /*** ver 5.0 rollover msg types added ****/
			{
        if(DEBUG_MSG_LVL_0)
        {
          fn_userlog(c_ServiceName, " Inside Spread order********");
        }

        l_ors_msg_typ=st_cvr_xchngbk.l_ors_msg_typ;
        strcpy(c_ipord_ref,st_trade_book.c_ordr_rfrnc);
					
				i_returncode = fn_spn_spd_acpt(c_ServiceName,c_ipord_ref,l_ors_msg_typ);
				if( i_returncode == -1)
				{
					fn_errlog(c_ServiceName, "S31070", LIBMSG,  st_errmsg.c_err_msg);
					tpfree((char *)ptr_fml_Sbuf); /*** Added in Ver 3.9 ***/
					tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
					Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
					tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
				}
				tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
				tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
    		tpreturn(TPSUCCESS, SUCC_BFR, NULL ,0, 0 );
			}
			/************************* Ver 3.7 Ends ***************************************************/
			
			fn_cpy_ddr ( st_cvr_xchngbk.c_rout_crt );
			strcpy(st_cvr_xchngbk.c_entry_dt_tm,st_cvr_xchngbk.c_ack_tm);

			/*** Ver 3.5 starts *** Commented in Ver 4.1 *******
			l_ftd_ord_exe_qty = 0 ;  

			EXEC SQL
				SELECT  NVL(SUM(ftd_exctd_qty),0)
				INTO		:l_ftd_ord_exe_qty
				FROM		ftd_fo_trd_dtls
				WHERE		ftd_ordr_rfrnc = :st_trade_book.c_ordr_rfrnc;

			if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
			{
				fn_errlog(c_ServiceName, "S31075", SQLMSG,  st_errmsg.c_err_msg);
				tpfree((char *)ptr_fml_Sbuf); ** Added in Ver 3.9 **
				tpfree((char *)ptr_fml_IMsgbuf);  ** Added in Ver 3.9 **
				Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
			}
			if(DEBUG_MSG_LVL_0) *** Ver 3.6***
			{
				fn_userlog( c_ServiceName, "l_ftd_ord_exe_qty: %ld",l_ftd_ord_exe_qty);
			}
				*** Ver 3.5 ends ***
			******** Commented ver 4.1 Ends ************/
		
    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
			if(DEBUG_MSG_LVL_2)
			{
				fn_userlog( c_ServiceName, "Before Calling  SFO_PRCS_RSP for Order Ref:%s:", st_trade_book.c_ordr_rfrnc);
				fn_userlog( c_ServiceName, "st_cvr_xchngbk.c_entry_dt_tm:%s:", st_cvr_xchngbk.c_entry_dt_tm);
				fn_userlog( c_ServiceName, "st_cvr_xchngbk.c_ack_tm:%s:", st_cvr_xchngbk.c_ack_tm);
				fn_userlog( c_ServiceName, "st_cvr_xchngbk.l_mdfctn_cntrm:%ld:", st_cvr_xchngbk.l_mdfctn_cntr);
				fn_userlog( c_ServiceName, "st_cvr_xchngbk.l_ors_msg_typ:%ld:", st_cvr_xchngbk.l_ors_msg_typ);
			}

			i_xchngbkerr [0] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)st_cvr_xchngbk.c_rout_crt,0);
			i_ferr[0] = Ferror32;
			i_xchngbkerr [1] = Fadd32(ptr_fml_Sbuf,FFO_ORDR_RFRNC, (char *)st_trade_book.c_ordr_rfrnc,0);
			i_ferr[1] = Ferror32;
			i_xchngbkerr [2] = Fadd32(ptr_fml_Sbuf,FFO_ORS_MSG_TYP, (char *)&st_cvr_xchngbk.l_ors_msg_typ,0);
			i_ferr[2] = Ferror32;
			i_xchngbkerr [3] = Fadd32(ptr_fml_Sbuf,FFO_MDFCTN_CNTR, (char *)&st_cvr_xchngbk.l_mdfctn_cntr,0);
			i_ferr[3] = Ferror32;
			i_xchngbkerr [4] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM, (char *)st_cvr_xchngbk.c_ack_tm,0);
			i_ferr[4] = Ferror32;
			i_xchngbkerr [5] = Fadd32(ptr_fml_Sbuf,FFO_PREV_ACK_TM, (char *)st_cvr_xchngbk.c_entry_dt_tm,0);
			i_ferr[5] = Ferror32;
			/** i_xchngbkerr [6] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CAN_QTY, (char *)&l_ftd_ord_exe_qty,0);	*** Ver 3.5 ** Commented in ver 4.1 ***/
			i_xchngbkerr [6] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CAN_QTY, (char *)&st_cvr_xchngbk.l_xchng_can_qty  ,0);	/*** Ver 4.1 ***/
			i_ferr[6] = Ferror32;																																		  /*** Ver 3.5 ***/

			for (i = 0;i < 7 ;i++) /*** changed from 6 to 7 in Ver 3.5 ***/
			{ 
				if(i_xchngbkerr[i] == -1 )
				{
					fn_userlog( c_ServiceName, "Error in :%d:",i );
					tpfree((char *)ptr_fml_Sbuf);
					tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
					fn_errlog(c_ServiceName, "S31080", FMLMSG,  st_errmsg.c_err_msg);
					/**** Commented in Ver 3.2 **
					tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
					/*** Ver 3.2 Starts ***/
					Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
					tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
					/*** Ver 3.2 Ends ***/
				}
			}

			i_returncode  = tpacall ( "SFO_PRCS_RSP", (char *)ptr_fml_Sbuf,0, TPNOTRAN|TPNOREPLY);

			if ( i_returncode != SUCC_BFR )
			{
				fn_errlog ( c_ServiceName, "S31085", TPMSG, c_err_msg ); /** VQC chngd LIBMSG to TPMSG **/
				/** Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 ); Commented in Ver 3.9 **/
				Fadd32( ptr_fml_Itrdbkbuf, FFO_ERR_MSG, c_err_msg, 0 ); /** Added in Ver 3.9 **/
			}

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/			
			if(DEBUG_MSG_LVL_2)
			{
				fn_userlog( c_ServiceName, "After Calling  SFO_PRCS_RSP for Order Ref:%s:", st_trade_book.c_ordr_rfrnc);
			}
			tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
			tpreturn(TPSUCCESS, SUCC_BFR, NULL ,0, 0 );
		}
	}
	/*** Ver 3.4 Ends ***/

	i_trnsctn = fn_begintran( c_ServiceName, st_errmsg.c_err_msg );
	if ( i_trnsctn == -1 )
	{
  	fn_errlog ( c_ServiceName, "S31090", LIBMSG, st_errmsg.c_err_msg );
		 /** tpfree ( ( char * ) &st_trade_book ); Commented in Ver 3.9 **/
		 tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
		 tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
		/**** Commented in Ver 3.2 **
		 tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
		/*** Ver 3.2 Starts ***/
		Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
		/*** Ver 3.2 Ends ***/
	}

   /*************** Ver 3.0 starts ***********************/
	fn_userlog( c_ServiceName, "st_trade_book.c_prd_typ : %c", st_trade_book.c_prd_typ);

	if(st_trade_book.c_prd_typ == SLTP_FUTUREPLUS || st_trade_book.c_prd_typ == OPTIONPLUS )
	{
		MEMSET(c_sltp_ord_rfrnc);

		EXEC SQL
		  SELECT
			  FOD_SLTP_ORDR_RFRNC			/***	Ver 4.5	***/
		  INTO
			  :c_sltp_ord_rfrnc
		  FROM  FOD_FO_ORDR_DTLS
		  WHERE FOD_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc;
		if(SQLCODE !=0)
		{
		  fn_errlog ( c_ServiceName, "S31095", SQLMSG, st_errmsg.c_err_msg );
		  fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
			tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
		  /**** Commented in Ver 3.2 **
		  tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
			/*** Ver 3.2 Starts ***/
			Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
			/*** Ver 3.2 Ends ***/
		}

        if(DEBUG_MSG_LVL_0) /*** Ver 3.6 ***/
        {
					fn_userlog( c_ServiceName, "st_trade_book.c_ordr_rfrnc:%s:,c_sltp_ord_rfrnc = :%s:",st_trade_book.c_ordr_rfrnc,c_sltp_ord_rfrnc);
				}

		EXEC  SQL
		SELECT  FOD_ORDR_RFRNC,
			FOD_SLTP_ORDR_RFRNC
		INTO    :c_ordr_rfrnc_lck,
				:c_sltp_ord_rfrnc_lck
		FROM    FOD_FO_ORDR_DTLS
		WHERE   FOD_ORDR_RFRNC in (:st_trade_book.c_ordr_rfrnc,:c_sltp_ord_rfrnc)
		FOR   UPDATE OF FOD_ORDR_RFRNC NOWAIT;

			if ( SQLCODE != 0)
		{
		  if (SQLCODE == -54)
		  {
			fn_userlog( c_ServiceName, "Resource busy and acquire with NOWAIT specified or timeout expired");
		  }
		  fn_errlog ( c_ServiceName, "S31100", SQLMSG, st_errmsg.c_err_msg );
		  fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
			tpfree((char *)ptr_fml_Sbuf); /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
		  /**** Commented in Ver 3.2 **
		  tpreturn ( TPFAIL, ERR_BFR, ( char * )st_errmsg, 0, 0 );**/
			/*** Ver 3.2 Starts ***/
			Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
			/*** Ver 3.2 Ends ***/
		}
		else
		{
		  fn_userlog( c_ServiceName, "Sucessfully acquired FOR UPDATE NOWAIT on :%s: and :%s:",st_trade_book.c_ordr_rfrnc,c_sltp_ord_rfrnc);
		}
        if(DEBUG_MSG_LVL_3) /*** Ver 3.6 ***/
        {
					fn_userlog( c_ServiceName, "After NOWAIT on :%s: and :%s:",st_trade_book.c_ordr_rfrnc,c_sltp_ord_rfrnc);
				}
	}
  /*************** Ver 3.0 Ends ***********************/		
	/*** Ver 3.4 Starts ***/
	else if(st_trade_book.c_prd_typ == FUTURES || st_trade_book.c_prd_typ == OPTIONS)
	{
		MEMSET(c_ordr_rfrnc_lck_fut); 

    /** 5.0 started **/

   /**** Applying lock on the both orders of rollover with spread by finding the order reference of
   the other order than that of the current for which the service has been called, along with it expiry
   .Also by comparing the expires decide whether the current order has the minimum expiry ****/

   if( c_spl_flg == ROLLOVER_WITH_SPREAD )
   {
        /** The order reference other than that of the current order reference of rollover with spread order is selected along with its expiry **/

        fn_userlog ( c_ServiceName, "ROLLOVER WITH SPREAD SPAN st_trade_book.c_ordr_rfrnc :%s: ",st_trade_book.c_ordr_rfrnc );
        EXEC SQL
        SELECT FSD_ORDR_RFRNC,FOD_EXPRY_DT
        INTO   :c_other_ordr_ref,:c_expry_date_nxt_ordr
        FROM   FSD_FO_SPRD_DTLS,FOD_FO_ORDR_DTLS
        WHERE  FSD_SPRD_RFRNC = ( SELECT FSD_SPRD_RFRNC
                                  FROM   FSD_FO_SPRD_DTLS
                                  WHERE  FSD_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc )
        AND    FSD_ORDR_RFRNC = FOD_ORDR_RFRNC
        AND    FSD_ORDR_RFRNC != :st_trade_book.c_ordr_rfrnc;

        if( SQLCODE != 0 )
        {
            fn_errlog ( c_ServiceName, "S31105", SQLMSG, st_errmsg.c_err_msg );
            fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
            tpfree((char *)ptr_fml_Sbuf);
            tpfree((char *)ptr_fml_IMsgbuf);
            Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
            tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
        }
   
        rtrim ( c_expry_date_nxt_ordr );
        rtrim ( st_trade_book.c_expry_dt );
 
        fn_userlog(c_ServiceName," 1. The another order ref is :%s: and expiry is :%s:",c_other_ordr_ref,c_expry_date_nxt_ordr);
       fn_userlog(c_ServiceName," ROLLOVER WITH SPREAD SPAN st_trade_book.c_expry_dt :%s: ",st_trade_book.c_expry_dt );

        /** The flag is set to 1 if the order for which the service is called has the minimum expirythan the order of rollover with spread order **/
        EXEC SQL
        SELECT COUNT(1)
        INTO   :i_source_dest_flg
        FROM   DUAL
        WHERE  TO_DATE(:st_trade_book.c_expry_dt,'dd-Mon-yyyy') < TO_DATE(:c_expry_date_nxt_ordr,'dd-Mon-yyyy');

        if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
        {
            fn_errlog ( c_ServiceName, "S91895", SQLMSG, st_errmsg.c_err_msg );
            fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
            tpfree((char *)ptr_fml_Sbuf);
            tpfree((char *)ptr_fml_IMsgbuf);
            Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
            tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
        }

        fn_userlog(c_ServiceName," ROLLOVER WITH SPREAD SPAN i_source_dest_flg is :%d:",i_source_dest_flg);

        /** Lock is applied on both the orders of rollover with spread **/
         EXEC SQL
              SELECT FOD_ORDR_RFRNC,
                     FOD_ORDR_RFRNC
              INTO   :c_ordr_rfrnc_lck,
                     :c_ordr_rfrnc_lck
              FROM   FOD_FO_ORDR_DTLS
              WHERE  FOD_ORDR_RFRNC IN(:st_trade_book.c_ordr_rfrnc,:c_other_ordr_ref)
              FOR UPDATE OF FOD_ORDR_RFRNC NOWAIT;

        
        if ( SQLCODE != 0)
        {
           if (SQLCODE == -54)
           {
             fn_userlog( c_ServiceName, "Resource busy and acquire with NOWAIT specified or timeout expired ");
           }
             fn_errlog ( c_ServiceName, "S31110", SQLMSG, st_errmsg.c_err_msg );
             fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
             tpfree((char *)ptr_fml_Sbuf);
             tpfree((char *)ptr_fml_IMsgbuf);
             Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
             tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
        }
        else
        {
              fn_userlog( c_ServiceName, "Sucessfully acquired FOR UPDATE NOWAIT on :%s:",st_trade_book.c_ordr_rfrnc );
        }

       /** fn_userlog( c_ServiceName, "After NOWAIT on :%s: and :%s:",st_trade_book.c_ordr_rfrnc); ** VQC **/
       fn_userlog( c_ServiceName, "After NOWAIT on :%s:",st_trade_book.c_ordr_rfrnc); /** VQC **/
 
   }
   else
   {

		EXEC  SQL
		SELECT  FOD_ORDR_RFRNC
		INTO    :c_ordr_rfrnc_lck_fut
		FROM    FOD_FO_ORDR_DTLS
		WHERE   FOD_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc
		FOR   UPDATE OF FOD_ORDR_RFRNC NOWAIT;
		if ( SQLCODE != 0)
		{
		  if (SQLCODE == -54)
		  {
			fn_userlog( c_ServiceName, "Resource busy and acquire with NOWAIT specified or timeout expired");
		  }
		  fn_errlog ( c_ServiceName, "S31115", SQLMSG, st_errmsg.c_err_msg );
		  fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
			tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
		 		/**** Commented in Ver 3.2 **
  	 tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
		/*** Ver 3.2 Starts ***/
		Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
		/*** Ver 3.2 Ends ***/
		}
		else
		{
		  fn_userlog( c_ServiceName, "Sucessfully acquired FOR UPDATE NOWAIT on :%s:",st_trade_book.c_ordr_rfrnc); /*** Ver 4.1 ***/
		}

		/** fn_userlog( c_ServiceName, "After NOWAIT on :%s: and :%s:",st_trade_book.c_ordr_rfrnc); ** VQC **/
        fn_userlog( c_ServiceName, "After NOWAIT on :%s:",st_trade_book.c_ordr_rfrnc);
	}
     }
	/*** Ver 3.4 Ends ***/

	strcpy( st_ordrbk.c_ordr_rfrnc, st_trade_book.c_ordr_rfrnc );		
	st_ordrbk.c_oprn_typ = FOR_UPDATE;
	
	i_returncode = fn_spnref_to_ord  ( &st_ordrbk,
																		&st_ordrbk,
																		c_ServiceName,
																		st_errmsg.c_err_msg
																	);

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"After call to fn_spnref_to_ord"); 
	}

	if ( i_returncode != SUCC_BFR )
	{
  	fn_errlog ( c_ServiceName, "S31120", LIBMSG, st_errmsg.c_err_msg );
  	fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
		tpfree((char *)ptr_fml_Sbuf); /** Added in Ver 3.9 **/
		tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
  	/**** Commented in Ver 3.2 **
		tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
		/*** Ver 3.2 Starts ***/
		Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
		/*** Ver 3.2 Ends ***/
	}

	strcpy(c_pipe_id, st_ordrbk.c_pipe_id);
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"c_pipe_id=:%s:",c_pipe_id);
	}

	if(st_trade_book.c_prd_typ != SLTP_FUTUREPLUS && st_trade_book.c_prd_typ != OPTIONPLUS )			 /*********Added in Ver 3.0 *******/
	{
		/** i_returncode = fn_lock_usr( c_ServiceName,  st_ordrbk.c_cln_mtch_accnt ); ** Commented and changed for Ver 6.7 **/
		i_returncode = fn_lock_fno( c_ServiceName,  st_ordrbk.c_cln_mtch_accnt ); /* Ver 6.7 */
		if ( i_returncode != 0 )
		{
			fn_errlog ( c_ServiceName, "S31125", LIBMSG, st_errmsg.c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
			tpfree((char *)ptr_fml_Sbuf); /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
		  /**** Commented in Ver 3.2 **
  	  tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
		  /*** Ver 3.2 Starts ***/
		  Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
		  tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
		  /*** Ver 3.2 Ends ***/
		}
	}

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
	if(DEBUG_MSG_LVL_2)
	{
		fn_userlog(c_ServiceName,"SPAN Order Rfrnc Is :%s:",st_trade_book.c_ordr_rfrnc);
		fn_userlog(c_ServiceName,"SPAN Trade Rfrnc Is :%s:",st_trade_book.c_trd_rfrnc);
	}

	EXEC SQL
		SELECT	FTD_RMS_PRCSD_FLG,			/*** Ver 4.5	***/
						NVL(FTD_LST_ACT_REF,'0')         /*** Ver 5.2 ***/ /*** '*' changed to '0' in ver 5.3 ***/
		INTO		:st_trade_book.c_rms_prcsd_flg,
						:c_lst_act_ref        /**** Ver 5.2 ****/
		FROM		FTD_FO_TRD_DTLS
		WHERE		FTD_ORDR_RFRNC	=	:st_trade_book.c_ordr_rfrnc
		AND 		FTD_EBA_TRD_REF	=	:st_trade_book.c_trd_rfrnc;

	if ( SQLCODE != 0 )
	{
  	fn_errlog ( c_ServiceName, "S31130", SQLMSG, st_errmsg.c_err_msg );
  	fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
		tpfree((char *)ptr_fml_Sbuf); /** Added in Ver 3.9 **/
		tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
  	/**** Commented in Ver 3.2 **
  	tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
		/*** Ver 3.2 Starts ***/
		Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
		/*** Ver 3.2 Ends ***/
	}

	rtrim(c_lst_act_ref);   /*** Ver 5.2 ***/

	/*** Ver 1.3 starts ***/

  EXEC SQL
    SELECT FOD_SPL_FLAG,
           NVL(FOD_LST_ACT_REF,'0') /*** ver 5.3 ***/
    INTO  :c_spl_flg,
          :c_fod_last_act_no /*** ver 5.3  ***/ 
    FROM FOD_FO_ORDR_DTLS
    WHERE FOD_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc;

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31135", SQLMSG, st_errmsg.c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
		tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
		tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
    /**** Commented in Ver 3.2 **
    tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
		/*** Ver 3.2 Starts ***/
		Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
	  /*** Ver 3.2 Ends ***/
  }

	st_pstnactn.c_nkd_blkd_flg = 'N';     /***  Ver 1.7 ***/

  if (c_spl_flg ==  'R')
  {
    st_pstnactn.c_nkd_blkd_flg = 'R';
  }

  /** ver 5.0 started **/

  if( c_spl_flg == ROLLOVER_WITH_SPREAD )
  {
    st_pstnactn.c_nkd_blkd_flg = ROLLOVER_WITH_SPREAD;
  }

  /** ver 5.0 ended **/


  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "Special flag is :%c:", st_pstnactn.c_nkd_blkd_flg );
  }

  /*** Ver 1.3 ends ***/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"test 1111");	
	}

	
	if (( st_ordrbk.c_ordr_stts  == QUEUED ) ||  ( st_trade_book.c_rms_prcsd_flg == 'P' ))
	{
      fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
     /**** Ver 5.0 starts here ***/
     if( c_spl_flg == ROLLOVER_WITH_SPREAD ) 
     {

        fn_userlog(c_ServiceName,"Inside QUEUED ROLLOVER_WITH_SPREAD for :%s:",st_trade_book.c_ordr_rfrnc);

        i_returncode= fn_spn_prcs_ack_spdrl(c_ServiceName,c_err_msg,st_trade_book.c_prd_typ,st_trade_book.c_ordr_rfrnc);

       if ( i_returncode != 0 )
       {
         fn_errlog ( c_ServiceName, "S31140", LIBMSG, st_errmsg.c_err_msg );
       }

       i_returncode= fn_prcs_trd_rollover(c_ServiceName,c_err_msg, st_trade_book.c_prd_typ, st_trade_book.c_ordr_rfrnc);

       if ( i_returncode != 0 )
       {
         fn_errlog ( c_ServiceName, "S31145", LIBMSG, st_errmsg.c_err_msg );
       }

     }  /*** Ver 5.0 Ends Here ***/
     else
     {

       /*** Ver 4.1 Starts Here ***/
       i_returncode= fn_spn_prcs_ack(c_ServiceName,c_err_msg,st_trade_book.c_prd_typ,st_trade_book.c_ordr_rfrnc);

       if ( i_returncode != 0 )
       {
         fn_errlog ( c_ServiceName, "S31150", LIBMSG, st_errmsg.c_err_msg );
       }

       i_returncode= fn_prcs_trd(c_ServiceName,c_err_msg, st_trade_book.c_prd_typ, st_trade_book.c_ordr_rfrnc);

       if ( i_returncode != 0 )
       {
         fn_errlog ( c_ServiceName, "S31155", LIBMSG, st_errmsg.c_err_msg );
       }
    }
    /*** Ver 4.1 Ends Here ***/

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"test 1222");	
  		}
		/*** tpreturn(TPSUCCESS, SUCC_BFR, (char*) &st_trade_book ,0, 0 ); ***/
		tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
		tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
		tpreturn(TPSUCCESS, SUCC_BFR, NULL ,0, 0 );
	}
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"test 2222");	
	}

	/*** The trade confirmation should not be updated, if any outstanding mod/cancel order is pending	***/
	EXEC SQL
		SELECT FXB_RQST_TYP,			/***	Ver 4.5	***/
					 FXB_PLCD_STTS
		INTO	:st_xchngbk.c_req_typ,
					:st_xchngbk.c_plcd_stts
		FROM 	FXB_FO_XCHNG_BOOK
		WHERE FXB_ORDR_RFRNC = :st_ordrbk.c_ordr_rfrnc
		AND 	FXB_MDFCTN_CNTR = :st_ordrbk.l_mdfctn_cntr;

	if ( SQLCODE != 0 )
	{
  	fn_errlog ( c_ServiceName, "S31160", SQLMSG, st_errmsg.c_err_msg );
  	fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
		tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
		tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
  	/**** Commented in Ver 3.2 **
  	tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
		/*** Ver 3.2 Starts ***/
		Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
		/*** Ver 3.2 Ends ***/
	}
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"test 3333");	
		fn_userlog(c_ServiceName,"st_xchngbk.c_req_typ=:%c: | st_xchngbk.c_plcd_stts=:%c: | st_ordrbk.c_ordr_rfrnc=:%s: | st_ordrbk.l_mdfctn_cntr =:%ld:",st_xchngbk.c_req_typ,st_xchngbk.c_plcd_stts,st_ordrbk.c_ordr_rfrnc,st_ordrbk.l_mdfctn_cntr);
	}

	if ( ( st_xchngbk.c_plcd_stts  == QUEUED ) || ( st_xchngbk.c_plcd_stts  == REQUESTED ) )
	{
    fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );

    /*** Ver 5.0 starts Here */
    if( c_spl_flg == ROLLOVER_WITH_SPREAD )
    {
       i_returncode= fn_spn_prcs_ack_spdrl ( c_ServiceName, c_err_msg, st_trade_book.c_prd_typ, st_trade_book.c_ordr_rfrnc);

      if ( i_returncode != 0 )
      {
        fn_errlog ( c_ServiceName, "S31165", LIBMSG, st_errmsg.c_err_msg );
      } 

    } /*** Ver 5.0 Ends here ***/
    else
    {  
    /*** Ver 4.1 Starts Here ***/
      i_returncode= fn_spn_prcs_ack ( c_ServiceName, c_err_msg, st_trade_book.c_prd_typ, st_trade_book.c_ordr_rfrnc);

      if ( i_returncode != 0 )
      {
        fn_errlog ( c_ServiceName, "S31170", LIBMSG, st_errmsg.c_err_msg );
      }
    /*** Ver 4.1 Ends Here ***/
   }

		tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
		tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
 		fn_userlog(c_ServiceName,"Status : Queued or Requested");
	 	/*** tpreturn(TPSUCCESS, SUCC_BFR, (char *)&st_trade_book, 0, 0 ); ***/
		tpreturn(TPSUCCESS, SUCC_BFR, NULL, 0, 0 );
	}

  strcpy(st_pstnactn.c_user_id,"system");
  st_pstnactn.l_session_id  = 0;
	strcpy( st_pstnactn.c_cln_mtch_accnt , st_trade_book.c_cln_mtch_accnt );
	st_pstnactn.l_eba_cntrct_id = st_trade_book.l_eba_cntrct_id;
	strcpy( st_pstnactn.c_xchng_cd , st_trade_book.c_xchng_cd );
	st_pstnactn.c_prd_typ = st_trade_book.c_prd_typ;
	strcpy( st_pstnactn.c_undrlyng , st_trade_book.c_undrlyng );
	strcpy( st_pstnactn.c_expry_dt , st_trade_book.c_expry_dt );
	st_pstnactn.c_exrc_typ  = st_trade_book.c_exrc_typ;
	st_pstnactn.c_opt_typ = st_trade_book.c_opt_typ;
	st_pstnactn.l_strike_prc = st_trade_book.l_strike_prc;
	st_pstnactn.c_ctgry_indstk = st_trade_book.c_ctgry_indstk;
	st_pstnactn.l_ca_lvl  = st_trade_book.l_ca_lvl;

	st_pstnactn.l_actn_typ = ORS_TRD_CONF;
	st_pstnactn.c_trnsctn_flw = st_trade_book.c_trd_flw;
	st_pstnactn.l_orgnl_qty = st_ordrbk.l_ord_tot_qty;
	st_pstnactn.l_orgnl_rt = st_ordrbk.l_ord_lmt_rt;
	st_pstnactn.l_new_qty = 0;
	st_pstnactn.l_new_rt = 0;
	st_pstnactn.l_exec_qty = st_trade_book.l_exctd_qty;
	st_pstnactn.l_exec_rt = st_trade_book.l_exctd_rt;
	st_pstnactn.l_fresh_qty  = 0;
	st_pstnactn.l_cover_qty  = 0;
	st_pstnactn.d_add_mrgn_amt  = 0;
  st_pstnactn.l_curr_rt = 0;
	strcpy(st_pstnactn.c_channel,st_ordrbk.c_channel);

  sprintf(st_pstnactn.c_ref_rmrks,"%s-T",st_trade_book.c_trd_rfrnc);
  rtrim(st_pstnactn.c_ref_rmrks);

  /*** Ver 5.0 Starts here ***/

  if( c_spl_flg == ROLLOVER_WITH_SPREAD )
  {
    i_returncode = fn_upd_spnpos_rollover(c_ServiceName,
                                           st_pstnactn
                                         );
    if ( i_returncode !=  0 )
    {
      fn_errlog ( c_ServiceName, "S61150", LIBMSG, st_errmsg.c_err_msg );
      fn_userlog(c_ServiceName,"Error in  fn_upd_spnpos_rollover");
      fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
      tpfree((char *)ptr_fml_Sbuf);
      tpfree((char *)ptr_fml_IMsgbuf);
      Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
    }

  }

  /*** Ver 5.0 Ends here ***/


	if( st_trade_book.c_prd_typ != SLTP_FUTUREPLUS && st_trade_book.c_prd_typ != OPTIONPLUS ) /* ver 1.5 */  /*** OPTIONPLUS Added in Ver 2.0 ***/
	{ 
	i_returncode	=	fn_spnupd_pos (
                         			   	c_ServiceName,
                              		&st_errmsg,
                              		&st_pstnactn,
                                  &c_dlv_mtm_flag /*** ver 5.1 ***/
                            		);

	if ( i_returncode !=	0 )
  {
    fn_errlog ( c_ServiceName, "S31175", LIBMSG, st_errmsg.c_err_msg );
		fn_userlog(c_ServiceName,"Error in  fn_spnupd_pos");
    fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
		tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
		tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
    /**** Commented in Ver 3.2 **
    tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
		/*** Ver 3.2 Starts ***/
	  Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
	  tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
		/*** Ver 3.2 Ends ***/
  }
	}/* Ver 1.5 */
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"1. st_pstnactn.c_mtm_flag = :%c:",st_pstnactn.c_mtm_flag);
	}
  if ( st_pstnactn.c_mtm_flag == FOR_REMARKS_ENTRY )
  {
  	sprintf(c_imtm_remarks,
            "SQUAREOFF ORDER [%s] EXECUTED ,TRADE REF - [%s], QTY - [%ld]", 
		        st_trade_book.c_ordr_rfrnc, 
		        st_trade_book.c_trd_rfrnc,
		        st_trade_book.l_exctd_qty );

    i_returncode = fn_ins_spn_rep_tbl ( c_ServiceName,
																				st_errmsg.c_err_msg,
																				&st_pstnactn,
																				c_imtm_remarks 
																			);
    if ( i_returncode != 0 )
    {
      fn_errlog ( c_ServiceName, "S31180", LIBMSG, st_errmsg.c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
			fn_userlog(c_ServiceName,"Error in  fn_ins_spn_rep_tbl");
			tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
      /**** Commented in Ver 3.2 **
     	tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
			/*** Ver 3.2 Starts ***/
			Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
			/*** Ver 3.2 Ends ***/
    }
	}

/*** ver 5.9 starts ***********/
if ( st_trade_book.c_prd_typ == 'F' ||  st_trade_book.c_prd_typ == 'O' )
{
  if(DEBUG_MSG_LVL_3)
  {
   fn_userlog(c_ServiceName,"SUCHITA :%s:%c:%s:%c:%ld:%c:%s:%c: ",st_pstnactn.c_xchng_cd,st_pstnactn.c_prd_typ,st_pstnactn.c_undrlyng,st_pstnactn.c_ctgry_indstk,st_pstnactn.l_strike_prc,st_pstnactn.c_opt_typ,st_pstnactn.c_expry_dt,st_pstnactn.c_exrc_typ);
  }
    

    EXEC SQL
       SELECT  NVL(FTQ_SETLMNT_FLG,'C'),
              NVL(FTQ_LST_TRD_PRC,0)
      INTO    :c_setllmnt_flg,
              :d_ltp
      FROM    FTQ_FO_TRD_QT
      WHERE   FTQ_XCHNG_CD        = :st_pstnactn.c_xchng_cd
      AND     FTQ_PRDCT_TYP       = :st_pstnactn.c_prd_typ
      AND     FTQ_UNDRLYNG        = :st_pstnactn.c_undrlyng
      AND     FTQ_INDSTK          = :st_pstnactn.c_ctgry_indstk
      AND     FTQ_STRK_PRC        = :st_pstnactn.l_strike_prc
      AND     FTQ_OPT_TYP         = :st_pstnactn.c_opt_typ
      AND     FTQ_EXPRY_DT        = to_date( :st_pstnactn.c_expry_dt,'dd-mon-yyyy' )
      AND     FTQ_EXER_TYP        = :st_pstnactn.c_exrc_typ;
    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31185", SQLMSG, st_errmsg.c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
      fn_userlog(c_ServiceName,"Error in  fn_ins_spn_rep_tbl");
      tpfree((char *)ptr_fml_Sbuf);
      tpfree((char *)ptr_fml_IMsgbuf);
      Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
    }

    if( c_setllmnt_flg == 'P' )
    {
        EXEC SQL
        SELECT  ABS(FCP_OPNPSTN_QTY),
                NVL(FCP_DLVRY_QTY_BLCKD,0),
                FCP_OPNPSTN_FLW,
                NVL(FCP_DLVRY_OBLGAMT_BLCKD,0.0)
        INTO   :l_opnpos_qty,
               :l_shares_alreay_blocked,   
               :c_phy_opnpos_flw,
               :d_existing_dlvry_mrgn_val
        FROM   FCP_FO_SPN_CNTRCT_PSTN
        WHERE  FCP_CLM_MTCH_ACCNT  = :st_pstnactn.c_cln_mtch_accnt
        AND    FCP_XCHNG_CD        = :st_pstnactn.c_xchng_cd
        AND    FCP_PRDCT_TYP       = :st_pstnactn.c_prd_typ
        AND    FCP_OPT_TYP         = :st_pstnactn.c_opt_typ
        AND    FCP_EXER_TYP        = :st_pstnactn.c_exrc_typ
        AND    FCP_UNDRLYNG        = :st_pstnactn.c_undrlyng
        AND    FCP_EXPRY_DT        = :st_pstnactn.c_expry_dt
        AND    FCP_STRK_PRC        = :st_pstnactn.l_strike_prc;

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31190", SQLMSG, st_errmsg.c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
      fn_userlog(c_ServiceName,"Error in  fn_ins_spn_rep_tbl");
      tpfree((char *)ptr_fml_Sbuf);  
      tpfree((char *)ptr_fml_IMsgbuf);  
      Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
    }
    fn_userlog(c_ServiceName,"SUCHITA TEST :%c:%c:",st_pstnactn.c_trnsctn_flw,c_phy_opnpos_flw);
    fn_userlog(c_ServiceName,"SUCHITA TEST l_opnpos_qty :%ld:",l_opnpos_qty);
    if( st_pstnactn.c_trnsctn_flw != c_phy_opnpos_flw )
    {
    if( d_existing_dlvry_mrgn_val > 0 )
    {
        if( st_pstnactn.c_prd_typ == 'F' )
        {
                d_funds_to_be_rqrd =  l_opnpos_qty * d_ltp;
        }
        else
        {
               d_funds_to_be_rqrd =  (double )( l_opnpos_qty * st_pstnactn.l_strike_prc ); 
        }
         
        d_funds_to_release = d_existing_dlvry_mrgn_val - d_funds_to_be_rqrd;
        if( d_funds_to_release > 0 )
        {
        c_lmt_flg = DEBIT_WITHOUT_LIMIT; 
        
        i_returncode = fn_upd_spnlimits( c_ServiceName,
                                        &st_pstnactn, 
                                        &st_errmsg, 
                                        REL_PHYSICAL_DELIVERY_MARGIN, 
                                        c_lmt_flg,
                                        d_funds_to_release, 
                                        &d_balance_amt);  
        if( i_returncode != 0 )
        {
         fn_errlog ( c_ServiceName, "S31195", SQLMSG, st_errmsg.c_err_msg );
         fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
         fn_userlog(c_ServiceName,"Error in  fn_ins_spn_rep_tbl");
         tpfree((char *)ptr_fml_Sbuf);
         tpfree((char *)ptr_fml_IMsgbuf);
         Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
         tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
        }

        EXEC SQL
        UPDATE   FCP_FO_SPN_CNTRCT_PSTN
        SET FCP_DLVRY_OBLGAMT_BLCKD = NVL(FCP_DLVRY_OBLGAMT_BLCKD,0) - :d_funds_to_release
        WHERE  FCP_CLM_MTCH_ACCNT  = :st_pstnactn.c_cln_mtch_accnt
        AND    FCP_XCHNG_CD        = :st_pstnactn.c_xchng_cd
        AND    FCP_PRDCT_TYP       = :st_pstnactn.c_prd_typ
        AND    FCP_OPT_TYP         = :st_pstnactn.c_opt_typ
        AND    FCP_EXER_TYP        = :st_pstnactn.c_exrc_typ
        AND    FCP_UNDRLYNG        = :st_pstnactn.c_undrlyng
        AND    FCP_EXPRY_DT        = :st_pstnactn.c_expry_dt
        AND    FCP_STRK_PRC        = :st_pstnactn.l_strike_prc;

       if ( SQLCODE != 0 )
       {
       fn_errlog ( c_ServiceName, "S31200", SQLMSG, st_errmsg.c_err_msg );
       fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
       fn_userlog(c_ServiceName,"Error in  fn_ins_spn_rep_tbl");
       tpfree((char *)ptr_fml_Sbuf);
       tpfree((char *)ptr_fml_IMsgbuf);
       Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
       tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
       }
       } 
   }
   else if ( l_shares_alreay_blocked > 0 )
   {
     l_qty_to_unblock = l_shares_alreay_blocked - l_opnpos_qty;
     if(  l_qty_to_unblock > 0 )
     {
     i_return_cd =  fn_call_dp_dealloc(c_ServiceName,st_pstnactn.c_cln_mtch_accnt,st_pstnactn.c_undrlyng,l_qty_to_unblock);
     if(i_return_cd != 0)
     {
      fn_errlog ( c_ServiceName, "S31205", SQLMSG, st_errmsg.c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
      fn_userlog(c_ServiceName,"Error in  fn_ins_spn_rep_tbl");
      tpfree((char *)ptr_fml_Sbuf);
      tpfree((char *)ptr_fml_IMsgbuf);
      Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
     }

       EXEC SQL
       UPDATE   FCP_FO_SPN_CNTRCT_PSTN
       SET FCP_DLVRY_QTY_BLCKD = NVL(FCP_DLVRY_QTY_BLCKD,0) - :l_qty_to_unblock
       WHERE  FCP_CLM_MTCH_ACCNT  = :st_pstnactn.c_cln_mtch_accnt
        AND    FCP_XCHNG_CD        = :st_pstnactn.c_xchng_cd
        AND    FCP_PRDCT_TYP       = :st_pstnactn.c_prd_typ
        AND    FCP_OPT_TYP         = :st_pstnactn.c_opt_typ
        AND    FCP_EXER_TYP        = :st_pstnactn.c_exrc_typ
        AND    FCP_UNDRLYNG        = :st_pstnactn.c_undrlyng
        AND    FCP_EXPRY_DT        = :st_pstnactn.c_expry_dt
        AND    FCP_STRK_PRC        = :st_pstnactn.l_strike_prc;

     if ( SQLCODE != 0 )
     {
      fn_errlog ( c_ServiceName, "S31210", SQLMSG, st_errmsg.c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
      fn_userlog(c_ServiceName,"Error in  fn_ins_spn_rep_tbl");
      tpfree((char *)ptr_fml_Sbuf);
      tpfree((char *)ptr_fml_IMsgbuf);
      Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
     }
    }
  }

  if( l_qty_to_unblock > 0  || d_funds_to_release > 0 )
  {
  EXEC SQL
       UPDATE FDD_FO_DLVRYMODE_DTLS
          SET FDD_SHARES_BLCKD = NVL(FDD_SHARES_BLCKD,0) - :l_qty_to_unblock,
              FDD_DLVERY_AMT = NVL(FDD_DLVERY_AMT,0) - :d_funds_to_release
        WHERE  FDD_CLM_MTCH_ACCNT  = :st_pstnactn.c_cln_mtch_accnt
        AND    FDD_XCHNG_CD        = :st_pstnactn.c_xchng_cd
        AND    FDD_PRDCT_TYP       = :st_pstnactn.c_prd_typ
        AND    FDD_OPT_TYP         = :st_pstnactn.c_opt_typ
        AND    FDD_EXER_TYP        = :st_pstnactn.c_exrc_typ
        AND    FDD_UNDRLYNG        = :st_pstnactn.c_undrlyng
        AND    FDD_EXPRY_DT        = to_date( :st_pstnactn.c_expry_dt,'dd-mon-yyyy' )
        AND    FDD_STRK_PRC        = :st_pstnactn.l_strike_prc;
    if (SQLCODE != 0)
    {
      fn_errlog ( c_ServiceName, "S31215", SQLMSG, st_errmsg.c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
      fn_userlog(c_ServiceName,"Error in  fn_ins_spn_rep_tbl");
      tpfree((char *)ptr_fml_Sbuf);
      tpfree((char *)ptr_fml_IMsgbuf);
      Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
   }
  }
 }
}
}
/*******ver 5.9 ends ****************/
   /** 5.0 started **/
 if ( st_trade_book.c_prd_typ == 'F' && c_spl_flg == ROLLOVER_WITH_SPREAD )
 {
         EXEC SQL
         SELECT FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY
         INTO   :l_actual_ordr_tot_qty
         FROM   FOD_FO_ORDR_DTLS
         WHERE  FOD_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc;

         if( SQLCODE != 0 )
         {
         fn_errlog ( c_ServiceName, "S31220", SQLMSG, st_errmsg.c_err_msg );
         fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
         tpfree((char *)ptr_fml_Sbuf);    /** VQC **/
         tpfree((char *)ptr_fml_IMsgbuf); /** VQC **/
         /** tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 ); ** VQC **/
         Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);    /** VQC **/
         tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );   /** VQC **/
         }

         fn_userlog( c_ServiceName," ROLLOVER WITH SPREAD SPAN l_actual_ordr_tot_qty :%ld: ",l_actual_ordr_tot_qty);
         fn_userlog( c_ServiceName," ROLLOVER WITH SPREAD SPAN l_sroll_diff_amt :%ld:",l_sroll_diff_amt );
         fn_userlog( c_ServiceName," ROLLOVER WITH SPREAD SPAN l_sroll_lss_amt :%ld:", l_sroll_lss_amt );
         fn_userlog( c_ServiceName," ROLLOVER WITH SPREAD SPAN st_trade_book.l_exctd_qty is :%ld:", st_trade_book.l_exctd_qty ); 

         if( i_source_dest_flg == 1 )
         {
              strcpy( c_narration_id , REL_ROMARG_ORDTRD_ACCPT);
              d_rws_diff_mrgn_amt = ((double)l_sroll_diff_amt * st_trade_book.l_exctd_qty) /l_actual_ordr_tot_qty;
             /** 
              d_rws_diff_mrgn_amt = (double)l_diff_mrgn_amt; **/

              l_diff_mrgn_amt = (long)d_rws_diff_mrgn_amt;
              fn_userlog( c_ServiceName," MRGN CALCULATION l_diff_mrgn_amt :%ld:",l_diff_mrgn_amt);
 
              fn_userlog( c_ServiceName," ROLLOVER WITH SPREAD SPAN d_rws_diff_mrgn_amt :%lf:",d_rws_diff_mrgn_amt);
              d_rws_diff_lss_amt = ((double)l_sroll_lss_amt * st_trade_book.l_exctd_qty) /l_actual_ordr_tot_qty;

             /** 
              d_rws_diff_lss_amt = (double)l_diff_lss_amt; ***/

              l_diff_lss_amt = (long)d_rws_diff_lss_amt;
              fn_userlog( c_ServiceName," MRGN CALCULATION l_diff_lss_amt :%ld",l_diff_lss_amt);

              fn_userlog( c_ServiceName," ROLLOVER WITH SPREAD SPAN d_rws_diff_lss_amt :%lf:",d_rws_diff_lss_amt);
              if( d_rws_diff_mrgn_amt > 0 )
              {
                   d_balance_amt = 0.0;
                   i_returncode = fn_upd_spnlimits( c_ServiceName,
                                                 &st_pstnactn,
                                                 &st_errmsg,
                                                 c_narration_id,
                                                 DEBIT_WITHOUT_LIMIT,
                                                 d_rws_diff_mrgn_amt,
                                                 &d_balance_amt );


                   if ( i_returncode != 0 )
                  {
                       fn_errlog ( c_ServiceName, "S31225", LIBMSG, st_errmsg.c_err_msg ); /** VQC **/
                       fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
                       tpfree((char *)ptr_fml_Sbuf);      /** VQC **/
                       tpfree((char *)ptr_fml_IMsgbuf);   /** VQC **/
                       /** tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 ); ** VQC **/
                       Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);  /** VQC **/
                       tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); /** VQC **/
                  }

                  if (DEBUG_MSG_LVL_3)
                  {
                      fn_userlog(c_ServiceName,"Actual d_rws_diff_mrgn_amt is  :%lf: d_balance_amt :%lf:",d_diff_mrgn_amt,d_balance_amt);
                  }
                  l_sroll_diff_amt = l_sroll_diff_amt - l_diff_mrgn_amt;
            }

            strcpy( c_narration_id , REL_ROPNL_ORDTRD_ACCPT);
            if( d_rws_diff_lss_amt > 0 )
            {
               d_balance_amt = 0.0;
               i_returncode = fn_upd_spnlimits( c_ServiceName,
                                             &st_pstnactn,
                                             &st_errmsg,
                                             c_narration_id,
                                             DEBIT_WITHOUT_LIMIT,
                                             d_rws_diff_lss_amt,
                                             &d_balance_amt );
               if ( i_returncode != 0 )
               {
                       fn_errlog ( c_ServiceName, "S31230", LIBMSG, st_errmsg.c_err_msg ); /** VQC **/
                       fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
                       tpfree((char *)ptr_fml_Sbuf);      /** VQC **/
                       tpfree((char *)ptr_fml_IMsgbuf);   /** VQC **/
                       /** tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 ); ** VQC **/
                       Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);  /** VQC **/
                       tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); /** VQC **/
               }

               if (DEBUG_MSG_LVL_3)
               { 
                  fn_userlog(c_ServiceName,"Actual d_rws_diff_lss_amt is :%lf: d_balance_amt :%lf:",d_rws_diff_lss_amt,d_balance_amt);             /** VQC  format specifier changed **/ 
               }

               l_sroll_lss_amt  = l_sroll_lss_amt  - l_diff_lss_amt;
            }
     }
     else
     {
            /*** The executed quantity of the order with near month expiry should greater than ( the executed quantity of the order with next month expiry plus already executed quantity of the order with next month expiry ) ***/

           fn_userlog( c_ServiceName," st_trade_book.l_exctd_qty :%ld: and l_executed_qty is :%ld: ",st_trade_book.l_exctd_qty,l_executed_qty );

           EXEC SQL
                SELECT COUNT(1)
                INTO   :i_allow_trd_prcsing
                FROM   FOD_FO_ORDR_DTLS
                WHERE  FOD_ORDR_RFRNC = :c_other_ordr_ref
                AND    FOD_EXEC_QTY >= :st_trade_book.l_exctd_qty+:l_executed_qty;

            if( SQLCODE != 0)
            {
             fn_errlog ( c_ServiceName, "S31235", SQLMSG, st_errmsg.c_err_msg );
             fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
             tpfree((char *)ptr_fml_Sbuf);      /** VQC **/
             tpfree((char *)ptr_fml_IMsgbuf);   /** VQC **/
             /** tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 ); ** VQC **/
             Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);  /** VQC **/
             tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); /** VQC **/
            }

            fn_userlog( c_ServiceName," 8. i_allow_trd_prcsing :%d:",i_allow_trd_prcsing);

            if( i_allow_trd_prcsing == 1 )
            {
               fn_userlog( c_ServiceName," TRADE PROCESSING ALLOWED FOR DESTINATION MONTH");
            }
            else
            {
                   fn_userlog(c_ServiceName,"Trade processing not allowed for rollover with spread order");
                   fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
                   tpfree((char *)ptr_fml_Sbuf);      /** VQC **/
                   tpfree((char *)ptr_fml_IMsgbuf);   /** VQC **/
                   /**  tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 ); ** VQC **/
                   Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);  /** VQC **/
                   tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); /** VQC **/

            }
       }

       /***
       l_sroll_diff_amt = l_sroll_diff_amt - l_diff_mrgn_amt;
       l_sroll_lss_amt  = l_sroll_lss_amt  - l_diff_lss_amt;
       ****/

       /**  commented in VQC ****************** 
       fn_userlog(c_ServiceName,"ROLLOVER WITH SPREAD SPAN l_sroll_diff_amt :%lf:",l_sroll_diff_amt);
       fn_userlog(c_ServiceName,"ROLLOVER WITH SPREAD SPAN l_sroll_lss_amt :%lf:",l_sroll_lss_amt);
       *****************************************/
       if (DEBUG_MSG_LVL_3)
       {
        fn_userlog(c_ServiceName,"ROLLOVER WITH SPREAD SPAN l_sroll_diff_amt :%ld:",l_sroll_diff_amt);
        fn_userlog(c_ServiceName,"ROLLOVER WITH SPREAD SPAN l_sroll_lss_amt :%ld:",l_sroll_lss_amt);
       } 

       EXEC SQL
            UPDATE FOD_FO_ORDR_DTLS
            SET    FOD_SROLL_DIFF_AMT = :l_sroll_diff_amt,FOD_SROLL_LSS_AMT = :l_sroll_lss_amt
            WHERE  FOD_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc;

       if( SQLCODE != 0 )
       {
             fn_errlog ( c_ServiceName, "S31240", SQLMSG, st_errmsg.c_err_msg );
             fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
             tpfree((char *)ptr_fml_Sbuf);      /** VQC **/
             tpfree((char *)ptr_fml_IMsgbuf);   /** VQC **/
             /**  tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 ); ** VQC **/
             Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);  /** VQC **/
             tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); /** VQC **/

           }
  }
  /*** ver 5.0 ended ***/
  
  

  /*********** Ver 1.5 Starts ********************/
  if(st_trade_book.c_prd_typ == SLTP_FUTUREPLUS || st_trade_book.c_prd_typ == OPTIONPLUS )    /*** OptionPlus Added in Ver 2.0 ***/
  {
		if (st_trade_book.c_prd_typ == OPTIONPLUS) /*** If condition added in Ver 2.7 ***/
		{

		/********* Commented in Ver 2.8 **********

    EXEC SQL
      SELECT
            fod_sltp_ordr_rfrnc,
            nvl(fod_amt_blckd,0),
            nvl(fod_lss_amt_blckd,0),
            nvl(fod_fc_flag,'*'),
            nvl(FOD_LMT_RT,0),
						nvl(FOD_STP_LSS_TGR,0),                 *** Ver 2.0 ***
            nvl(FOD_ORDR_TOT_QTY,0),
            nvl(FOD_EXEC_QTY,0),
            FOD_ORDR_FLW
      INTO
            :c_sltp_ord_rfrnc,
            :d_amt_blkd,
            :d_lss_amt_blkd,
            :c_fc_flg,
            :d_ord_lmt_rt,
            :l_temp_stp_lss_tgr,                     *** Ver 2.0 ***
            :l_tot_ord_qty,
            :l_ord_exe_qty,
            :c_ord_flw
      FROM  fod_fo_ordr_dtls
      WHERE fod_ordr_rfrnc = :st_trade_book.c_ordr_rfrnc;

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31245", SQLMSG, st_errmsg.c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
    }

		if (DEBUG_MSG_LVL_3)
  	{
    	fn_userlog(c_ServiceName,"Product type is  :%c:",st_trade_book.c_prd_typ);    ***  Ver 2.0 ***
		}

    *Get the current margin percentage from the database *
   EXEC SQL
     SELECT     FMM_SLTP_PRCNT
     INTO       :d_fmm_sltp_prcnt
     FROM       FMM_FO_MRGN_MSTR
     WHERE      FMM_XCHNG_CD = :st_trade_book.c_xchng_cd
     *** AND        FMM_PRDCT_TYP = 'F'  																		***  commented in Ver 2.0 ***
		 AND 				FMM_PRDCT_TYP =	decode(:st_trade_book.c_prd_typ,'I','O','F')     *** Decode added in Ver 2.0 *** 
     AND        FMM_UNDRLYNG = :st_trade_book.c_undrlyng
     AND				FMM_UNDRLYNG_BSKT_ID =( SELECT  FCB_UNDRLYNG_BSKT_ID
																				FROM    FCB_FO_CLN_BSKT_ALLTD
                                        WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
																										          FROM    CLM_CLNT_MSTR
											                                        WHERE   CLM_MTCH_ACCNT =:st_trade_book.c_cln_mtch_accnt)
																			);

  if ( SQLCODE != 0 )
  {
   fn_errlog ( c_ServiceName, "S31250", SQLMSG, st_errmsg.c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
  }

	if (DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"SLTP order Ref :%s:",c_sltp_ord_rfrnc);
    fn_userlog(c_ServiceName,"Amount blocked  :%lf:",d_amt_blkd);
    fn_userlog(c_ServiceName,"Loss amount :%lf:",d_lss_amt_blkd);
    fn_userlog(c_ServiceName," Fresh/Cover flag :%c:",c_fc_flg);
    fn_userlog(c_ServiceName,"Limit Rate :%lf:",d_ord_lmt_rt);
    fn_userlog(c_ServiceName,"SLTP price :%ld:",l_temp_stp_lss_tgr);          *** Ver 2.0 ***
    fn_userlog(c_ServiceName,"Order qty :%ld:",l_tot_ord_qty);
    fn_userlog(c_ServiceName,"Executed Qty :%ld:",l_ord_exe_qty);
    fn_userlog(c_ServiceName,"Order flow :%c:",c_ord_flw);
  }
 
  if(c_fc_flg == 'F')
  {

    *** Calculate margin n loss on total executed qty ***

    EXEC SQL
         SELECT FOD_LMT_RT,
								nvl(FOD_STP_LSS_TGR,0)         *** Ver 2.0 ***
         INTO   :d_cvr_lmt_rt,
								:l_temp_stp_lss_tgr
         FROM   FOD_FO_ORDR_DTLS
p

         WHERE  FOD_ORDR_RFRNC =  :c_sltp_ord_rfrnc;

    if ( SQLCODE != 0 )
    {
     fn_errlog ( c_ServiceName, "S31255", SQLMSG, st_errmsg.c_err_msg );
     fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
     tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
    }

    if (DEBUG_MSG_LVL_3)             *** Ver 2.0 ***
    {
      fn_userlog(c_ServiceName,"SLTP price :%ld:",l_temp_stp_lss_tgr);
      fn_userlog(c_ServiceName,"Cover order limit rate :%lf:",d_cvr_lmt_rt);
    }

		*** Commented in Ver 2.7 *** 
		if( st_trade_book.c_prd_typ == SLTP_FUTUREPLUS )           *** if condition added in Ver 2.0 ***
		{	
    	EXEC SQL
         	SELECT SUM( (FTD_EXCTD_QTY * FTD_EXCTD_RT) * (:d_fmm_sltp_prcnt/100.0) ),
                	decode( :c_ord_flw, 'B',SUM( FTD_EXCTD_QTY * (FTD_EXCTD_RT - :d_cvr_lmt_rt)),
                  	                  'S', SUM( FTD_EXCTD_QTY * (:d_cvr_lmt_rt - FTD_EXCTD_RT)) ),
							  	SUM(FTD_EXCTD_QTY)	
          	INTO  :d_exe_mrgn_amt,
            	    :d_exe_lss_amt,
									:l_exe_qty
          	FROM  FTD_FO_TRD_DTLS
         	 	WHERE FTD_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc;

    	if ( SQLCODE != 0 )
    	{
				fn_errlog ( c_ServiceName, "S31260", SQLMSG, st_errmsg.c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
    	}

    	l_rmn_qty = l_tot_ord_qty - l_exe_qty;

			if (DEBUG_MSG_LVL_3)	*** Ver 1.9 ***
			{
				fn_userlog ( c_ServiceName, "l_rmn_qty = :%ld:", l_rmn_qty);
			}

			if (l_rmn_qty >= 0)		*** if loop added in Ver 1.9 to skip margin calculation in case of excess qty  ***
			{

    		d_new_mrgn_amt = (double) d_exe_mrgn_amt + ( (l_rmn_qty * d_ord_lmt_rt) * (d_fmm_sltp_prcnt /100.0) );

    		if (c_ord_flw == 'B')
    		{
      		d_new_lss_amt = (double) d_exe_lss_amt + ( l_rmn_qty * (d_ord_lmt_rt - d_cvr_lmt_rt) );
    		}
    		else if (c_ord_flw == 'S')
    		{	
      		d_new_lss_amt = (double) d_exe_lss_amt + ( l_rmn_qty * (d_ord_lmt_rt - d_cvr_lmt_rt) * -1 );
    		}

    		d_diff_mrgn_amt = d_amt_blkd - d_new_mrgn_amt;

    		d_diff_lss_amt  = d_lss_amt_blkd - d_new_lss_amt;

				d_diff_mrgn_amt	=(long long)d_diff_mrgn_amt;
		
				d_diff_lss_amt	=(long long)d_diff_lss_amt;

				if (DEBUG_MSG_LVL_3)
    		{
      		fn_userlog(c_ServiceName," l_rmn_qty :%ld:",l_rmn_qty);
      		fn_userlog(c_ServiceName,"d_exe_mrgn_amt :%lf:",d_exe_mrgn_amt);
      		fn_userlog(c_ServiceName,"d_exe_lss_amt :%lf:",d_exe_lss_amt);
      		fn_userlog(c_ServiceName,"d_cvr_lmt_rt :%lf:",d_cvr_lmt_rt);
      		fn_userlog(c_ServiceName,"d_new_mrgn_amt :%lf:",d_new_mrgn_amt);
      		fn_userlog(c_ServiceName,"d_new_lss_amt:%lf:",d_new_lss_amt);
      		fn_userlog(c_ServiceName,"d_diff_mrgn_amt :%lf:",d_diff_mrgn_amt);
      		fn_userlog(c_ServiceName,"d_diff_lss_amt :%lf:",d_diff_lss_amt);
      		fn_userlog(c_ServiceName,"Block or Release diff margin :%lf:",d_diff_mrgn_amt);
    		}
    		strcpy( c_narration_id , ON_TRADE_EXECUTION);

    		if( d_diff_mrgn_amt != 0 )
    		{
      		d_balance_amt = 0.0;

      		i_returncode = fn_upd_spnlimits( c_ServiceName,
          		                            &st_pstnactn,
              		                        &st_errmsg,
                  		                    c_narration_id,
                      		                DEBIT_WITHOUT_LIMIT,
                          		            d_diff_mrgn_amt,
                              		        &d_balance_amt);
      		if ( i_returncode != 0 )
      		{
						fn_errlog ( c_ServiceName, "S31265", LIBMSG, st_errmsg.c_err_msg );
						fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
      		}
      		d_diff_mrgn_amt = d_diff_mrgn_amt - d_balance_amt;

					if (DEBUG_MSG_LVL_3)
					{	
						fn_userlog(c_ServiceName,"Actual d_diff_mrgn_amt is  :%lf:",d_diff_mrgn_amt);
					}
    		}


				if (DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"Block or release diff loss :%lf:",d_diff_lss_amt);
				}

				strcpy( c_narration_id , ON_TRADE_EXECUTION);

    		if( d_diff_lss_amt != 0)
    		{
      		d_balance_amt = 0.0;

      		i_returncode = fn_upd_spnlimits( c_ServiceName,
          		                            &st_pstnactn,
              		                        &st_errmsg,
                  		                    c_narration_id,
                      		                DEBIT_WITHOUT_LIMIT,
                          		            d_diff_lss_amt,
                              		        &d_balance_amt);

      		if ( i_returncode != 0 )
      		{
     				fn_errlog ( c_ServiceName, "S31270", LIBMSG, st_errmsg.c_err_msg );
    				fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
    				tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
      		}
      		d_diff_lss_amt = d_diff_lss_amt - d_balance_amt;

					if (DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"Actual d_diff_lss_amt is  :%lf:",d_diff_lss_amt);
					}
    		}

				if (DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"Update new margin & loss");
				}

    		EXEC SQL
        		UPDATE FOD_FO_ORDR_DTLS
         		SET    FOD_AMT_BLCKD = :d_amt_blkd - :d_diff_mrgn_amt,
            		    FOD_LSS_AMT_BLCKD = :d_lss_amt_blkd - :d_diff_lss_amt
         		WHERE  FOD_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc;

    		if ( SQLCODE != 0 )
    		{
     			fn_errlog ( c_ServiceName, "S31275", SQLMSG, st_errmsg.c_err_msg );
    			fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
    			tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
    		}

				if (DEBUG_MSG_LVL_3)
				{
					fn_userlog ( c_ServiceName, "After update of margin n loss amount" );
				}
	 		} *** Ver 1.9 ***
		}		*** 2.0 ***
		else if ( st_trade_book.c_prd_typ == OPTIONPLUS)                *** Ver 2.0 ***
		{
		 **** Commented in Ver 2.7 *** 
  		EXEC SQL
       	SELECT nvl(FRM_DIFFRNC_MRGN,0)
       	INTO   :d_frm_diffrnc_mrgn
       	FROM   FRM_FO_RANGE_MSTR
       	WHERE  FRM_XCHNG_CD  = TRIM(:st_trade_book.c_xchng_cd)
       	AND    TRIM(FRM_UNDRLYNG ) = TRIM(:st_trade_book.c_undrlyng)
       	AND    FRM_ORDR_FLOW = :c_ord_flw
				AND    FRM_FROM_RANGE <= :l_temp_stp_lss_tgr
        AND    :l_temp_stp_lss_tgr   < FRM_TO_RANGE;

  		if ( SQLCODE  !=  0  && SQLCODE != NO_DATA_FOUND)
  		{
    		fn_errlog ( c_ServiceName, "S31280", SQLMSG, st_errmsg.c_err_msg );
    		fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
    		tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
  		}

  		if(DEBUG_MSG_LVL_3)
  		{
    		fn_userlog(c_ServiceName,"d_frm_diffrnc_mrgn = :%lf:", d_frm_diffrnc_mrgn);
    		fn_userlog(c_ServiceName,"d_fmm_sltp_prcnt = :%lf:", d_fmm_sltp_prcnt );
  		}

    	EXEC SQL
         SELECT SUM( (FTD_EXCTD_QTY * FTD_EXCTD_RT) * (:d_fmm_sltp_prcnt/100.0) ),
                SUM(FTD_EXCTD_QTY)
          INTO  :d_exe_mrgn_amt,
                :l_exe_qty
          FROM  FTD_FO_TRD_DTLS
          WHERE FTD_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc;

    	if ( SQLCODE != 0 )
    	{
      	fn_errlog ( c_ServiceName, "S31285", SQLMSG, st_errmsg.c_err_msg );
      	fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
      	tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
    	}

      if( c_ord_flw == 'B' )
      {
        if( d_frm_diffrnc_mrgn < 100 )
        {
          fn_userlog(c_ServiceName,"Inside frm mrgn < 100 check");

          EXEC  SQL
                SELECT SUM( FTD_EXCTD_QTY * (FTD_EXCTD_RT - :d_cvr_lmt_rt))
                INTO   :d_exe_lss_amt
                FROM  FTD_FO_TRD_DTLS
                WHERE FTD_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc;

        }
        else if ( d_frm_diffrnc_mrgn == 100 )
        {
          fn_userlog(c_ServiceName,"Inside frm mrgn = 100 check");

          EXEC  SQL
                SELECT SUM( FTD_EXCTD_QTY * FTD_EXCTD_RT )
                INTO   :d_exe_lss_amt
                FROM  FTD_FO_TRD_DTLS
                WHERE FTD_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc;
        }

        if ( SQLCODE != 0 )
        {
          fn_errlog ( c_ServiceName, "S31290", SQLMSG, st_errmsg.c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
        }
      }
      else
      {
        fn_userlog(c_ServiceName,"Inside  ordr_flw sell.");

        EXEC  SQL
                SELECT SUM( FTD_EXCTD_QTY * (:d_cvr_lmt_rt - FTD_EXCTD_RT ))
                INTO   :d_exe_lss_amt
                FROM  FTD_FO_TRD_DTLS
                WHERE FTD_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc;

        if ( SQLCODE != 0 )
        {
          fn_errlog ( c_ServiceName, "S31295", SQLMSG, st_errmsg.c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
        }
      }

    	l_rmn_qty = l_tot_ord_qty - l_exe_qty;

    	if (DEBUG_MSG_LVL_3)
    	{
      	fn_userlog ( c_ServiceName, "l_rmn_qty = :%ld:", l_rmn_qty);
    	}

    	if (l_rmn_qty >= 0)   *** skip margin calculation in case of excess qty ***
    	{
      	d_new_mrgn_amt = (double) d_exe_mrgn_amt + ( (l_rmn_qty * d_ord_lmt_rt) * (d_fmm_sltp_prcnt /100.0) );

      	if (c_ord_flw == 'B')
      	{
        	if( d_frm_diffrnc_mrgn < 100 )
        	{
          	fn_userlog(c_ServiceName,"Inside frm mrgn < 100 check");

          	d_new_lss_amt = (double)  d_exe_lss_amt + ( l_rmn_qty * (d_ord_lmt_rt - d_cvr_lmt_rt) );
        	}
        	else if ( d_frm_diffrnc_mrgn == 100 )
        	{
          	fn_userlog(c_ServiceName,"Inside frm mrgn = 100 check");

          	d_new_lss_amt = (double)  d_exe_lss_amt + ( l_rmn_qty * d_ord_lmt_rt );
        	}
      	}
      	else if (c_ord_flw == 'S')
      	{
        	fn_userlog(c_ServiceName,"Inside  ordr_flw sell.");

        	d_new_lss_amt = (double) d_exe_lss_amt + ( l_rmn_qty * (d_ord_lmt_rt - d_cvr_lmt_rt) * -1 );
      	}

      	d_diff_mrgn_amt = d_amt_blkd - d_new_mrgn_amt;

      	d_diff_lss_amt  = d_lss_amt_blkd - d_new_lss_amt;

      	d_diff_mrgn_amt = (long long)d_diff_mrgn_amt;

      	d_diff_lss_amt  = (long long)d_diff_lss_amt;

      	if (DEBUG_MSG_LVL_3)
      	{
        	fn_userlog(c_ServiceName," l_rmn_qty :%ld:",l_rmn_qty);
        	fn_userlog(c_ServiceName,"d_exe_mrgn_amt :%lf:",d_exe_mrgn_amt);
        	fn_userlog(c_ServiceName,"d_exe_lss_amt :%lf:",d_exe_lss_amt);
        	fn_userlog(c_ServiceName,"d_cvr_lmt_rt :%lf:",d_cvr_lmt_rt);
        	fn_userlog(c_ServiceName,"d_new_mrgn_amt :%lf:",d_new_mrgn_amt);
        	fn_userlog(c_ServiceName,"d_new_lss_amt:%lf:",d_new_lss_amt);
        	fn_userlog(c_ServiceName,"d_diff_mrgn_amt :%lf:",d_diff_mrgn_amt);
        	fn_userlog(c_ServiceName,"d_diff_lss_amt :%lf:",d_diff_lss_amt);
      	}

      	if (DEBUG_MSG_LVL_3)
      	{
        	fn_userlog(c_ServiceName,"Block or Release diff margin :%lf:",d_diff_mrgn_amt);
      	}	

      	strcpy( c_narration_id , ON_TRADE_EXECUTION);

      	if( d_diff_mrgn_amt != 0 )
      	{
        	d_balance_amt = 0.0;

					i_returncode = fn_upd_spnlimits( c_ServiceName,
          	                                &st_pstnactn,
            	                              &st_errmsg,
              	                            c_narration_id,
                	                          DEBIT_WITHOUT_LIMIT,
                  	                        d_diff_mrgn_amt,
                    	                      &d_balance_amt);

 	       	if ( i_returncode != 0 )
        	{
          	fn_errlog ( c_ServiceName, "S31300", LIBMSG, c_err_msg );
          	fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
          	tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
        	}

        	d_diff_mrgn_amt = d_diff_mrgn_amt - d_balance_amt;

        	if (DEBUG_MSG_LVL_3)
        	{
          	fn_userlog(c_ServiceName,"Actual d_diff_mrgn_amt is  :%lf:",d_diff_mrgn_amt);
        	}
      	}

      	if (DEBUG_MSG_LVL_3)
      	{
        	fn_userlog(c_ServiceName,"Block or release diff loss :%lf:",d_diff_lss_amt);
      	}

      	strcpy( c_narration_id , ON_TRADE_EXECUTION);

      	if( d_diff_lss_amt != 0)
      	{
        	d_balance_amt = 0.0;

					i_returncode = fn_upd_spnlimits( c_ServiceName,
          	                                &st_pstnactn,
            	                              &st_errmsg,
              	                            c_narration_id,
                	                          DEBIT_WITHOUT_LIMIT,
                  	                        d_diff_lss_amt,
                    	                      &d_balance_amt);
	
					if ( i_returncode != 0 )
        	{
          	fn_errlog ( c_ServiceName, "S31305", LIBMSG, c_err_msg );
          	fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
          	tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
        	}

        	d_diff_lss_amt = d_diff_lss_amt - d_balance_amt;

        	if (DEBUG_MSG_LVL_3)
        	{
          	fn_userlog(c_ServiceName,"Actual d_diff_lss_amt is  :%lf:",d_diff_lss_amt);
        	}
      	}

      	if (DEBUG_MSG_LVL_3)
      	{
        	fn_userlog(c_ServiceName,"Update new margin & loss");
      	}

      	EXEC SQL
        	  UPDATE FOD_FO_ORDR_DTLS
          	SET    FOD_AMT_BLCKD      = :d_amt_blkd - :d_diff_mrgn_amt,
            	     FOD_LSS_AMT_BLCKD  = :d_lss_amt_blkd - :d_diff_lss_amt
          	WHERE  FOD_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc;

      	if ( SQLCODE != 0 )
      	{
        	fn_errlog ( c_ServiceName, "S31310", SQLMSG, st_errmsg.c_err_msg );
        	fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
      	}
			}
		*** }   *** Ver 2.0 *** Commented in Ver 2.8***/
		
			/*************** Added in Ver 2.8 ******************/
		
 		/********************** Added in Ver 2.8 *********************/

		EXEC SQL
			SELECT			
						FOD_SLTP_ORDR_RFRNC,	/***	Ver 4.5	***/
						NVL(FOD_FC_FLAG,'*')
			INTO
						:c_sltp_ord_rfrnc,
						:c_fc_flg
			FROM  FOD_FO_ORDR_DTLS
			WHERE FOD_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc;

		if ( SQLCODE != 0 )
		{
			fn_errlog ( c_ServiceName, "S31315", SQLMSG, st_errmsg.c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
			tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
			/**** Commented in Ver 3.2 **
			tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
			/*** Ver 3.2 Starts ***/
			Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
			/*** Ver 3.2 Ends ***/
		}
		

    EXEC SQL
    SELECT
          FOD_ORDR_RFRNC,			/***	Ver 4.5	***/
          FOD_SLTP_ORDR_RFRNC,
          NVL(FOD_AMT_BLCKD,0),
          NVL(FOD_LSS_AMT_BLCKD,0),
          NVL(FOD_LMT_RT,0),
          FOD_ORDR_FLW
    INTO
          :c_frsh_ordr_rfrnc,
          :c_cvr_ordr_rfrnc,
          :d_amt_blkd,
          :d_lss_amt_blkd,
          :d_ord_lmt_rt,
          :c_ord_flw
    FROM  FOD_FO_ORDR_DTLS
    WHERE FOD_ORDR_RFRNC = DECODE(:c_fc_flg,'F',:st_trade_book.c_ordr_rfrnc,:c_sltp_ord_rfrnc);

   if ( SQLCODE != 0 )
   {
     fn_errlog ( c_ServiceName, "S31320", SQLMSG, ptr_st_err_msg->c_err_msg );
     fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
		 tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
		 tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
     /**** Commented in Ver 3.2 **
		 tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
		 /*** Ver 3.2 Starts ***/
	   Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
	   tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
		 /*** Ver 3.2 Ends ***/
   }

	/**Added in Ver 3.0 starts **/
	/** i_returncode = fn_lock_usr( c_ServiceName,  st_ordrbk.c_cln_mtch_accnt ); ** Commented and changed for Ver 6.7 **/
	i_returncode = fn_lock_fno( c_ServiceName,  st_ordrbk.c_cln_mtch_accnt );   /* Ver 6.7 */
	if ( i_returncode != 0 )
	{
		fn_errlog ( c_ServiceName, "S31325", LIBMSG, st_errmsg.c_err_msg );
		fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
		tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
		tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
		/**** Commented in Ver 3.2 **
	  tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); **/
		/*** Ver 3.2 Starts ***/
		Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
	  tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
		/*** Ver 3.2 Ends ***/
	}
	/**Ver 3.0 ends**/

	 if(c_fc_flg == 'F' || c_fc_flg == 'C')
   {

		if (c_fc_flg == 'F')
		{
				EXEC SQL
				 SELECT
									NVL(FOD_LMT_RT,0)			/***	Ver 4.5	***/
				 INTO
									:d_cvr_lmt_rt
						FROM  FOD_FO_ORDR_DTLS
						WHERE FOD_ORDR_RFRNC = :c_cvr_ordr_rfrnc;
		}
		else if (c_fc_flg == 'C' )
		{

				EXEC SQL
					SELECT NVL(FOD_LMT_RT,0)			/***	Ver 4.5	***/
					INTO   :d_cvr_lmt_rt
					FROM   FOD_FO_ORDR_DTLS
					WHERE  FOD_ORDR_RFRNC = (
																		SELECT MIN(FOD_ORDR_RFRNC)
																		FROM	 FOD_FO_ORDR_DTLS 
																		WHERE  FOD_SLTP_ORDR_RFRNC  = :c_frsh_ordr_rfrnc
																		AND    FOD_FC_FLAG = :c_cvr_flg /*** Ver 4.5 Hard Code Value Replaced by Bind Variable ***/
																	);
			
		}
		if ( SQLCODE != 0 )
		{
			fn_errlog ( c_ServiceName, "S31330", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
			/** tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 ); ** Commented in Ver 3.9 **/
			Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG,ptr_st_err_msg->c_err_msg, 0); /** Added in Ver 3.9 **/
			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); /** Added in Ver 3.9 **/
		}

       /*** Margin calcluation ***/
      i_returncode =  fn_cal_mrgn_sltp_op(c_ServiceName,
                                       c_frsh_ordr_rfrnc,
                                       d_ord_lmt_rt,
                                       d_cvr_lmt_rt,
                                       &d_new_mrgn_amt,
                                       &d_new_lss_amt,
                                       c_ref_rmrks,  /*** Ver 5.7 ***/
                                       &d_comp1_mrgn,/*** Ver 5.7 ***/
                                       &d_comp1_pl,  /*** Ver 5.7  ***/
                                       &d_xchng_amt, /*** Ver 5.7 ***/
                                       &d_prem_amt,  /*** Ver 5.7 ***/
                                       &d_spn_mrgn,  /*** Ver 5.7 ***/
                                       &d_expr_mrgn, /*** Ver 5.7  ***/
                                       'E',
                                       c_err_msg);

				    if ( i_returncode == -1 )
    {
      fn_errlog ( c_ServiceName, "S31335", LIBMSG, ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
      /** tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 ); Commented in Ver 3.9 **/
			Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0);  /** Added in Ver 3.9 **/
			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); /** Added in Ver 3.9 **/
    }

      /************* Added in ver 2.8 ***************/

      d_diff_mrgn_amt = d_amt_blkd - d_new_mrgn_amt;

      d_diff_lss_amt  = d_lss_amt_blkd - d_new_lss_amt;

      d_diff_mrgn_amt = (long long)d_diff_mrgn_amt;

      d_diff_lss_amt  = (long long)d_diff_lss_amt;

      if (DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName," l_rmn_qty :%ld:",l_rmn_qty);
        fn_userlog(c_ServiceName,"d_exe_mrgn_amt :%lf:",d_exe_mrgn_amt);
        fn_userlog(c_ServiceName,"d_exe_lss_amt :%lf:",d_exe_lss_amt);
        fn_userlog(c_ServiceName,"d_cvr_lmt_rt :%lf:",d_cvr_lmt_rt);
        fn_userlog(c_ServiceName,"d_new_mrgn_amt :%lf:",d_new_mrgn_amt);
        fn_userlog(c_ServiceName,"d_new_lss_amt:%lf:",d_new_lss_amt);
        fn_userlog(c_ServiceName,"d_diff_mrgn_amt :%lf:",d_diff_mrgn_amt);
        fn_userlog(c_ServiceName,"d_diff_lss_amt :%lf:",d_diff_lss_amt);
      }

      if (DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Block or Release diff margin :%lf:",d_diff_mrgn_amt);
      }

      strcpy( c_narration_id , ON_TRADE_EXECUTION);

			if( d_diff_mrgn_amt != 0 )
      {
        d_balance_amt = 0.0;

        i_returncode = fn_upd_spnlimits( c_ServiceName,
                                        &st_pstnactn,
                                        &st_errmsg,
                                        c_narration_id,
                                        DEBIT_WITHOUT_LIMIT,
                                        d_diff_mrgn_amt,
                                        &d_balance_amt);
        if ( i_returncode != 0 )
        {
          fn_errlog ( c_ServiceName, "S31340", LIBMSG, c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
          /** tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 ); ** Ver 2.5 ***/
          /*** Ver 2.5 Starts Here ***/
          /**  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 ); Commented in Ver 3.9 **/
          /** free((char*) ptr_st_err_msg); ** VQC **/
					tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
					tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
          /** tpfree((char*)ptr_fml_Obuf); Commented in Ver 3.9 **/
          /** free((char *) ptr_st_tradebook); ** VQC **/
         /** tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); Commented in Ver 3.9 **/
				 Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0);  /** Added in Ver 3.9 **/
					tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); /** Added in Ver 3.9 **/
          /**** ver 2.5 Ends here ***/
        }

        d_diff_mrgn_amt = d_diff_mrgn_amt - d_balance_amt;


				        if (DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Actual d_diff_mrgn_amt is  :%lf:",d_diff_mrgn_amt);
        }
      }

      if (DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Block or release diff loss :%lf:",d_diff_lss_amt);
      }

      strcpy( c_narration_id , ON_TRADE_EXECUTION);

       /*** Ver 5.7 started ***/
      MEMSET(c_tmp_rmrks);
      strcpy ( c_tmp_rmrks, st_pstnactn.c_ref_rmrks );
      sprintf(st_pstnactn.c_ref_rmrks,"%s%s",c_ref_rmrks,c_tmp_rmrks);
      /*** Ver 5.7 ends ***/

      if( d_diff_lss_amt != 0)
      {
        d_balance_amt = 0.0;

				i_returncode = fn_upd_spnlimits( c_ServiceName,
																					&st_pstnactn,
																					&st_errmsg,
																					c_narration_id,
																					DEBIT_WITHOUT_LIMIT,
																					d_diff_lss_amt,
																					&d_balance_amt);

        if ( i_returncode != 0 )
        {
          fn_errlog ( c_ServiceName, "S31345", LIBMSG, c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
          /** tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 ); ** Ver 2.5 ***/
          /*** Ver 2.5 Starts Here ***/
          /** Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 ); Commented in Ver 3.9 **/
          tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
					tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
					/** free((char*) ptr_st_err_msg); ** VQC **/
          /** tpfree((char*)ptr_fml_Obuf); Commented in Ver 3.9 **/
          /** free((char *) ptr_st_tradebook); ** VQC **/
           /** tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); commented in Ver 3.9 **/
					 Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0);  /** Added in Ver 3.9 **/
					 tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); /** Added in Ver 3.9 **/
          /**** ver 2.5 Ends here ***/
        }

        d_diff_lss_amt = d_diff_lss_amt - d_balance_amt;

        if (DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Actual d_diff_lss_amt is  :%lf:",d_diff_lss_amt);
        }
      }
			
			if (DEBUG_MSG_LVL_3)
			{
					fn_userlog(c_ServiceName,"Update new margin & loss");
			}

			EXEC SQL
					 UPDATE FOD_FO_ORDR_DTLS
					 SET    FOD_AMT_BLCKD = :d_amt_blkd - :d_diff_mrgn_amt,
									FOD_LSS_AMT_BLCKD = :d_lss_amt_blkd - :d_diff_lss_amt,
                  FOD_SLTP_MRGN = :d_comp1_mrgn,/*** Ver 5.7 ***/
                  FOD_SLTP_PL   = :d_comp1_pl,  /*** Ver 5.7 ***/
                  FOD_SLTP_SEBI_MRGN = :d_xchng_amt, /*** Ver 5.7 ***/
                  FOD_OPLUS_PREMIUM  = :d_prem_amt,  /*** Ver 5.7 ***/
                  FOD_SPAN_MRGN = :d_spn_mrgn,       /*** Ver 5.7 ***/
                  FOD_EXPR_MRGN = :d_expr_mrgn       /*** Ver 5.7 ***/
					 WHERE  FOD_ORDR_RFRNC = :c_frsh_ordr_rfrnc; 
			
			if ( SQLCODE != 0 )
			{
				fn_errlog ( c_ServiceName, "S31350", SQLMSG, st_errmsg.c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
				tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
				tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
				/**** Commented in Ver 3.2 **
				tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
				/*** Ver 3.2 Starts ***/
				Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
				/*** Ver 3.2 Ends ***/
			}
      strcpy ( st_pstnactn.c_ref_rmrks, c_tmp_rmrks);    /**** Ver 5.7 ***/
      MEMSET(c_tmp_rmrks);                                    /**** Ver 5.7 ***/
  }
		/**************** Commented in Ver 2.8 *************
  else if(c_fc_flg == 'C')
  {
		l_tot_ord_qty = 0;
    l_rmn_qty = 0;


    EXEC SQL
      SELECT
            fod_ordr_stts,
            nvl(fod_amt_blckd,0),
            nvl(fod_lss_amt_blckd,0),
            fod_ordr_flw,
					 	nvl(FOD_ORDR_TOT_QTY - (FOD_EXEC_QTY + FOD_CNCL_QTY + FOD_EXPRD_QTY),0)	 *** Changed on 07Jun2013 ***
      INTO
            :c_ord_stts,
            :d_amt_blkd,
            :d_lss_amt_blkd,
            :c_ord_flw,
						:l_tot_ord_qty
      FROM  fod_fo_ordr_dtls
      WHERE fod_ordr_rfrnc = :c_sltp_ord_rfrnc;

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31355", SQLMSG, st_errmsg.c_err_msg );
    	fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
    	tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
    }

		*** Ver 2.2 starts ***  Commented in Ver 2.3 ***
		i_exec_rng = 0;

		if ( c_ord_stts == 'C' )
		{
			EXEC SQL
				SELECT 1
				INTO   :i_exec_rng
				FROM   FXB_FO_XCHNG_BOOK
				WHERE  FXB_ORDR_RFRNC		= :c_sltp_ord_rfrnc
				AND		 FXB_XCHNG_RMRKS  like '%The Price is out of the current execution range%'
				AND    FXB_MDFCTN_CNTR = '99';

			if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
			{
				fn_errlog ( c_ServiceName, "S31360", SQLMSG, st_errmsg.c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
			}
		}
		if (i_exec_rng != 1)
		{
		*** Ver 2.2 ends ***

		*** start in Ver 2.3 ***
		if ( c_ord_stts != 'C' && c_ord_stts != 'J' && c_ord_stts != 'X' )
		{
		*** end in Ver 2.3 ***

    if ( c_ord_stts != 'E' && c_ord_stts != 'P' && c_ord_stts != 'B' && c_ord_stts != 'D' )
    {
      fn_errlog ( c_ServiceName, "S31365","Fresh order is not executed", st_errmsg.c_err_msg );
    	fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
    	tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );;
    }

   EXEC SQL
     SELECT NVL(SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),0) ,
            NVL(SUM(FTD_EXCTD_QTY),0)
     INTO   :d_exe_val,
            :l_exe_qty
     FROM   FTD_FO_TRD_DTLS
     WHERE  FTD_ORDR_RFRNC = :c_sltp_ord_rfrnc;

   if ( SQLCODE != 0 )
  {
  	fn_errlog ( c_ServiceName, "S31370", SQLMSG, st_errmsg.c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
  }

	EXEC SQL
		SELECT nvl(FOD_LMT_RT,0),
					 nvl(FOD_STP_LSS_TGR,0)              *** Ver 2.0 ***
		INTO   :d_ord_lmt_rt,
					 :l_temp_stp_lss_tgr								 *** Ver 2.0 ***
		FROM   FOD_FO_ORDR_DTLS
		WHERE  FOD_ORDR_RFRNC = (
															SELECT min(FOD_ORDR_RFRNC)
															FROM	 FOD_FO_ORDR_DTLS 
															WHERE  FOD_SLTP_ORDR_RFRNC  = :c_sltp_ord_rfrnc
															AND    FOD_FC_FLAG = 'C'
														);
  
	 if ( SQLCODE != 0 )
  {
  	fn_errlog ( c_ServiceName, "S31375", SQLMSG, st_errmsg.c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
  }

	if (DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Limit Rate during Order placement of ", d_ord_lmt_rt);
		fn_userlog(c_ServiceName,"SLTP price during Order placement :%ld:",l_temp_stp_lss_tgr);   *** Ver 2.0 ***
	}

	*** Ver 2.0 ** Starts ***

  EXEC SQL
       SELECT nvl(FRM_DIFFRNC_MRGN,0)
       INTO   :d_frm_diffrnc_mrgn
       FROM   FRM_FO_RANGE_MSTR
       WHERE  FRM_XCHNG_CD  = TRIM(:st_trade_book.c_xchng_cd)
       AND    TRIM(FRM_UNDRLYNG ) = TRIM(:st_trade_book.c_undrlyng)
       AND    FRM_ORDR_FLOW = :c_ord_flw
			 AND    FRM_FROM_RANGE <= :l_temp_stp_lss_tgr
       AND    :l_temp_stp_lss_tgr   < FRM_TO_RANGE;

  if ( SQLCODE  !=  0  && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog ( c_ServiceName, "S31380", SQLMSG, st_errmsg.c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"d_frm_diffrnc_mrgn = :%lf:", d_frm_diffrnc_mrgn);
    fn_userlog(c_ServiceName,"d_fmm_sltp_prcnt = :%lf:", d_fmm_sltp_prcnt );
  }

	*** Ver 2.0 ** Ends ***

	EXEC SQL
    SELECT NVL(SUM(FTD_EXCTD_QTY),0)
     INTO   :l_cv_exe_qty
     FROM   FTD_FO_TRD_DTLS
     WHERE  FTD_ORDR_RFRNC in ( select FOD_ORDR_RFRNC
                                from FOD_FO_ORDR_DTLS
                                where FOD_SLTP_ORDR_RFRNC = :c_sltp_ord_rfrnc);

   if ( SQLCODE != 0 )
  {
  	fn_errlog ( c_ServiceName, "S31385", SQLMSG, st_errmsg.c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
  }

	 d_avg_prc = 0;
	
	 if (l_exe_qty != 0)
	 {
	   d_avg_prc = (double) (d_exe_val / l_exe_qty);
	 }
   
	 l_rmn_qty = (l_exe_qty + l_tot_ord_qty) - l_cv_exe_qty ;		*** Changed on 07Jun2013 ***

	 if (DEBUG_MSG_LVL_3)	*** Ver 1.9 ***
	 {
		fn_userlog ( c_ServiceName, "l_rmn_qty = :%ld:", l_rmn_qty);
	 }

	 if (l_rmn_qty >= 0)		*** Ver 1.9 .. skip margin calculation in case of excess qty***
	 {

   d_new_mrgn_amt = (double) ( (l_rmn_qty * d_avg_prc) *  (d_fmm_sltp_prcnt / 100.0) );

   if (c_ord_flw == 'B')
   {
			*** Commented in Ver 2.7 ***
			if (st_trade_book.c_prd_typ == SLTP_FUTUREPLUS)	          *** If condition added in Ver 2.0 ***
			{
     		d_new_lss_amt  = (double) l_rmn_qty *(d_avg_prc - d_ord_lmt_rt);
			}
			else if (st_trade_book.c_prd_typ == OPTIONPLUS)							*** Ver 2.0 ***
			{
			***
				if( d_frm_diffrnc_mrgn < 100 )
        {
          d_new_lss_amt  = (double)  l_rmn_qty * (d_avg_prc - d_ord_lmt_rt);
        }
        else if ( d_frm_diffrnc_mrgn == 100 )
        {
           d_new_lss_amt  = (double)  l_rmn_qty * d_avg_prc;
        }
			*** }  *** Commented in Ver 2.7 ***
   }
   else if (c_ord_flw == 'S')
   {
    d_new_lss_amt = (double) l_rmn_qty *(d_avg_prc - d_ord_lmt_rt) * -1;
   }

   d_diff_mrgn_amt = d_amt_blkd - d_new_mrgn_amt;

   d_diff_lss_amt = d_lss_amt_blkd - d_new_lss_amt;

	 d_diff_mrgn_amt = (long long)d_diff_mrgn_amt;

	 d_diff_lss_amt = (long long)d_diff_lss_amt;

    *** Calculate the  Profit / Loss on current executed quantity ***
    if (c_ord_flw == 'B')
    {
     	d_obli_pl =  (double) st_trade_book.l_exctd_qty * ( d_avg_prc - st_trade_book.l_exctd_rt );
		}
    else if (c_ord_flw == 'S')
    {
      d_obli_pl = (double) st_trade_book.l_exctd_qty * ( d_avg_prc - st_trade_book.l_exctd_rt ) * -1;
    }

		d_obli_pl = (long long)d_obli_pl;

		if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog(c_ServiceName,"d_avg_prc :%lf:",d_avg_prc);
      fn_userlog(c_ServiceName," l_rmn_qty :%ld:",l_rmn_qty);
      fn_userlog(c_ServiceName,"d_new_mrgn_amt :%lf:",d_new_mrgn_amt);
      fn_userlog(c_ServiceName,"d_new_lss_amt:%lf:",d_new_lss_amt);
      fn_userlog(c_ServiceName,"d_diff_mrgn_amt :%lf:",d_diff_mrgn_amt);
      fn_userlog(c_ServiceName,"d_diff_lss_amt :%lf:",d_diff_lss_amt);
      fn_userlog(c_ServiceName,"d_amt_blkd :%lf:",d_amt_blkd);
      fn_userlog(c_ServiceName,"d_lss_amt_blkd :%lf:",d_lss_amt_blkd);
      fn_userlog(c_ServiceName,"Obligation profit loss :%lf:",d_obli_pl);
			fn_userlog(c_ServiceName,"Fresh order Qty l_tot_ord_qty :%ld:",l_tot_ord_qty);
      fn_userlog(c_ServiceName,"Cover Order executed qty :%ld:",l_cv_exe_qty);
			fn_userlog(c_ServiceName,"Fresh Executed Qty :%ld:",l_exe_qty);
    }

    strcpy( c_narration_id , PROFIT_LOSS_ON_COVER_LEG);

    if( d_obli_pl != 0)
    {
			*** NRI - TDS Starts under Ver 2.5 ***
			if ( strncmp( st_pstnactn.c_cln_mtch_accnt, "751", 3) == 0 && st_trade_book.c_prd_typ == SLTP_FUTUREPLUS )
			{
          strcpy(c_reason_cd,"Profit Loss on Cover Leg");
					if(DEBUG_MSG_LVL_2)
					{
        		fn_userlog( c_ServiceName, "Calling fn_spntds for COVER_LEG :%s:",c_reason_cd );
					}
					strcpy ( c_tmp_rmrks, st_pstnactn.c_ref_rmrks );
					sprintf ( st_pstnactn.c_ref_rmrks,"FUT-%s-%s",
          					st_pstnactn.c_undrlyng,
          					st_pstnactn.c_expry_dt);				


					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog( c_ServiceName, "Calling fn_spntds for :%s:",c_reason_cd );
					}
					
					

     			i_returncode = fn_spntds(   c_ServiceName,
              						            &st_pstnactn,
                  	      					  &st_errmsg,
                    	            		TDS_NRI,
                      	          		c_reason_cd,
                        	        		DEBIT_WITHOUT_LIMIT,
                          	      		d_obli_pl * -1,
                            	    		&d_balance_amt );
				  if ( i_returncode != 0 )
          {
						fn_errlog ( c_ServiceName, "S31390", LIBMSG, st_errmsg.c_err_msg );
						fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
          }
					strcpy ( st_pstnactn.c_ref_rmrks , c_tmp_rmrks );
			}
			*** NRI - TDS ends under Ver 2.5 ***

      i_returncode = fn_upd_spnlimits( c_ServiceName,
                                      &st_pstnactn,
                                      &st_errmsg,
                                      c_narration_id,
                                      DEBIT_WITHOUT_LIMIT,
                                      d_obli_pl * -1,
                                      &d_balance_amt);
      if ( i_returncode != 0 )
      {
        fn_errlog ( c_ServiceName, "S31395", LIBMSG, st_errmsg.c_err_msg );
    		fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
    		tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
      }
    }

		if (DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Block or Release diff margin :%lf:",d_diff_mrgn_amt);
		}

		strcpy( c_narration_id , ON_TRADE_EXECUTION);

    if( d_diff_mrgn_amt != 0 )
    {
      d_balance_amt = 0.0;

      i_returncode = fn_upd_spnlimits( c_ServiceName,
                                      &st_pstnactn,
                                      &st_errmsg,
                                      c_narration_id,
                                      DEBIT_TILL_LIMIT,
                                      d_diff_mrgn_amt,
                                      &d_balance_amt);

      if ( i_returncode != 0 )
      {
       fn_errlog ( c_ServiceName, "S31400", LIBMSG, st_errmsg.c_err_msg );
   	 	 fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
    	 tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
      }
      d_diff_mrgn_amt = d_diff_mrgn_amt - d_balance_amt;
      fn_userlog(c_ServiceName,"Actual diff margin :%lf:",d_diff_mrgn_amt);
    }

		if (DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Block or release diff loss :%lf:",d_diff_lss_amt);
		}

		strcpy( c_narration_id , ON_TRADE_EXECUTION);
    if( d_diff_lss_amt != 0)
    {
      d_balance_amt = 0.0;

      i_returncode = fn_upd_spnlimits( c_ServiceName,
                                      &st_pstnactn,
                                      &st_errmsg,
                                      c_narration_id,
                                      DEBIT_TILL_LIMIT,
                                      d_diff_lss_amt,
                                      &d_balance_amt);

      if ( i_returncode != 0 )
      {
       fn_errlog ( c_ServiceName, "S31405", LIBMSG, st_errmsg.c_err_msg );
    	 fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
    	 tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
      }
      d_diff_lss_amt = d_diff_lss_amt - d_balance_amt;
      fn_userlog(c_ServiceName,"Actual diff profit loss :%lf:",d_diff_lss_amt);
    }

		if (DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Update new margin & loss");
		}

    EXEC SQL
         UPDATE FOD_FO_ORDR_DTLS
         SET    FOD_AMT_BLCKD     = :d_amt_blkd - :d_diff_mrgn_amt,
                FOD_LSS_AMT_BLCKD = :d_lss_amt_blkd - :d_diff_lss_amt
         WHERE  FOD_ORDR_RFRNC    = :c_sltp_ord_rfrnc;

    if ( SQLCODE != 0 )
    {
     fn_errlog ( c_ServiceName, "S31410", SQLMSG, st_errmsg.c_err_msg );
     fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
     tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
    }
	 } *** Ver 1.9 ***
   } *** End of if condition Ver 2.2 ***
  }
	*** if loop added in Ver 2.3 ***
	***************** Commented in Ver 2.8 Ends **************/
	else if(c_fc_flg == 'E')	
	{
		/* Calculate open quantity */
    EXEC SQL
      SELECT  NVL( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FTD_EXCTD_QTY,
                                                       FTD_EXCTD_QTY ) ), 0 )
      INTO    :l_open_qty
      FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
      WHERE   FTD_ORDR_RFRNC  = FOD_ORDR_RFRNC
      AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_sltp_ord_rfrnc;

    if( SQLCODE != 0 )
    {
     fn_errlog ( c_ServiceName, "S31415", SQLMSG, st_errmsg.c_err_msg );
     fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
		 tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
		 tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
     /**** Commented in Ver 3.2 **
     tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
		 /*** Ver 3.2 Starts ***/
	   Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
	   tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
		 /*** Ver 3.2 Ends ***/
    }

		if (l_open_qty == 0)
		{
			/*** Release the margin and loss amount blocked ***/
			EXEC SQL
				SELECT
							NVL(FOD_AMT_BLCKD,0),
							NVL(FOD_LSS_AMT_BLCKD,0)
				INTO  :d_amt_blkd,
							:d_lss_amt_blkd
				FROM  FOD_FO_ORDR_DTLS
				WHERE FOD_ORDR_RFRNC = :c_sltp_ord_rfrnc;

				if( SQLCODE != 0 )
				{
					 fn_errlog ( c_ServiceName, "S31420", SQLMSG, st_errmsg.c_err_msg );
					 fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
					 tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
					 tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
					 /**** Commented in Ver 3.2 **
			  	 tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
					 /*** Ver 3.2 Starts ***/
	         Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
	         tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
					 /*** Ver 3.2 Ends ***/
				}
				
				strcpy( c_narration_id , ON_TRADE_EXECUTION);
				
				if(d_amt_blkd > 0)
				{
					d_balance_amt  = 0.0;

					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"Release old margin amount blocked");
					}
					
					i_returncode = fn_upd_spnlimits( c_ServiceName,
																&st_pstnactn,
																&st_errmsg,
																c_narration_id,
																DEBIT_WITHOUT_LIMIT,
																d_amt_blkd,
																&d_balance_amt);

					if ( i_returncode != 0 )
					{
						 fn_errlog ( c_ServiceName, "S31425", LIBMSG, st_errmsg.c_err_msg ); /** VQC **/
						 fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
						 tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
						 tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
						 /**** Commented in Ver 3.2 **
					   tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
						 /*** Ver 3.2 Starts ***/
	           Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
	           tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
						 /*** Ver 3.2 Ends ***/
					}
				}
								
				if(d_lss_amt_blkd > 0)
				{
					d_balance_amt  = 0.0;

					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"Release old loss amount");
					}

					i_returncode = fn_upd_spnlimits( c_ServiceName,
																&st_pstnactn,
																&st_errmsg,
																c_narration_id,
																DEBIT_WITHOUT_LIMIT,
																d_lss_amt_blkd,
																&d_balance_amt);


					if ( i_returncode != 0 )
					{
						 fn_errlog ( c_ServiceName, "S31430", LIBMSG, st_errmsg.c_err_msg ); /** VQC **/
						 fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
						 tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
						 tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
						 /**** Commented in Ver 3.2 **
						 tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
						 /*** Ver 3.2 Starts ***/
						 Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
						 tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
						 /*** Ver 3.2 Ends ***/
					}
				}

				if( DEBUG_MSG_LVL_3 )
				{
					fn_userlog(c_ServiceName,"Update margin & loss released");
				}

				EXEC SQL
						 UPDATE FOD_FO_ORDR_DTLS
						 SET    FOD_AMT_BLCKD			= 0,
										FOD_LSS_AMT_BLCKD = 0,
                    FOD_SLTP_MRGN = 0,/*** Ver 5.7 ***/
                    FOD_SLTP_PL   = 0,  /*** Ver 5.7 ***/
                    FOD_SLTP_SEBI_MRGN = 0, /*** Ver 5.7 ***/
                    FOD_OPLUS_PREMIUM  = 0,  /*** Ver 5.7 ***/
                    FOD_SPAN_MRGN = 0,       /*** Ver 5.7 ***/
                    FOD_EXPR_MRGN = 0       /*** Ver 5.7 ***/
						 WHERE  FOD_ORDR_RFRNC		= :c_sltp_ord_rfrnc; 
				
				if ( SQLCODE != 0 )
				{
					 fn_errlog ( c_ServiceName, "S31435", SQLMSG, st_errmsg.c_err_msg );
					 fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
					 tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
					 tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
					 /**** Commented in Ver 3.2 **
					 tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
					 /*** Ver 3.2 Starts ***/
	         Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
	         tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
					 /*** Ver 3.2 Ends ***/
				}
		}
	}	
	/*** Ver 2.3 if loop ended ***/

				 /************* Added in ver 2.8 starts ***************/

 /*** Obligation to be calculated only when Incoming Fresh Trade and net open position is in Cover OR Incoming Cover Trade and net open position is in Fresh ***/

	EXEC SQL
		 SELECT  NVL( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ), 0 )
		 INTO   :l_net_open
		 FROM   FOD_FO_ORDR_DTLS
		 WHERE  DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_frsh_ordr_rfrnc;

	if ( SQLCODE != 0 )
	{
		 fn_errlog ( c_ServiceName, "S31440", SQLMSG, st_errmsg.c_err_msg );
		 fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
		 tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
		 tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
		 /**** Commented in Ver 3.2 **
  	 tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
		 /*** Ver 3.2 Starts ***/
	   Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
	   tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
		 /*** Ver 3.2 Ends ***/
	}

  if ( ((c_fc_flg == 'F' || c_fc_flg == 'E') && l_net_open < 0) || (c_fc_flg == 'C' && l_net_open > 0) ) /*** handling for E is added in ver 4.8 ***/
  {

    /*** ver 4.8 started ***/
   if( c_fc_flg == 'E' )
   {
     EXEC SQL
          SELECT FOD_ORDR_RFRNC
          INTO   :c_sltp_ord_rfrnc
          FROM   FOD_FO_ORDR_DTLS
          WHERE  FOD_SLTP_ORDR_RFRNC  = :c_frsh_ordr_rfrnc
          AND    FOD_FC_FLAG = :c_cvr_flg
          AND    FOD_ORDR_STTS IN ('E','D','B');

     if ( SQLCODE != 0 )
     {
       fn_errlog ( c_ServiceName, "S31445", SQLMSG, ptr_st_err_msg->c_err_msg );
       fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
       tpfree((char *)ptr_fml_IMsgbuf); 
       tpfree((char *)ptr_fml_Sbuf); 
       Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0); 
       tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
     }

      if( DEBUG_MSG_LVL_3 )
      {
           fn_userlog(c_ServiceName,"******** c_fc_flg is :%c: c_frsh_ordr_rfrnc is :%s: c_sltp_ord_rfrnc is :%s: ***********",c_fc_flg,c_frsh_ordr_rfrnc,c_sltp_ord_rfrnc );
      }
  }
    /*** ver 4.8 ended ***/
    EXEC SQL
       SELECT NVL(SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),0) ,
              NVL(SUM(FTD_EXCTD_QTY),0)
       INTO   :d_exe_val,
              :l_exe_qty
       FROM   FTD_FO_TRD_DTLS
       WHERE  FTD_ORDR_RFRNC = :c_sltp_ord_rfrnc;

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31450", SQLMSG, ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
      /** tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 ); Commented in Ver 3.9 **/
			Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0);  /** Added in Ver 3.9 **/
			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); /** Added in Ver 3.9 **/
    }


    if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog(c_ServiceName,"*****************OBLIGATION*****************");
      fn_userlog(c_ServiceName,"Stored OLD l_net_open = :%ld:",l_net_open);
      fn_userlog(c_ServiceName,"Opposite order Execution Val = :%lf:",d_exe_val);
      fn_userlog(c_ServiceName,"Opposite order Execution Qty = :%ld:",l_exe_qty);
    }

    d_avg_prc = 0;

    if (l_exe_qty != 0)
    {
      d_avg_prc =  (double)  d_exe_val / l_exe_qty;
    }

    if (c_ord_flw == 'B') /*** Fresh Buy ***/
    {
      if (c_fc_flg == 'F' || c_fc_flg == 'E') /*** Trade Flow ***/ /*** handling for E is added in ver 4.8 ***/
      {
        if(DEBUG_MSG_LVL_3) /*** Ver 3.6 ***/
        {
					fn_userlog(c_ServiceName,"Inside Fresh Buy");
        }
					d_obli_pl = (double) fn_minl( st_trade_book.l_exctd_qty, abs(l_net_open) ) * ( d_avg_prc - (double)  st_trade_book.l_exctd_rt );
      }
      else
      {
        if(DEBUG_MSG_LVL_3) /*** Ver 3.6 ***/
        {
					fn_userlog(c_ServiceName,"Inside Cover Buy");
        }
					d_obli_pl = (double) fn_minl( st_trade_book.l_exctd_qty, abs(l_net_open) ) * ( d_avg_prc - (double)  st_trade_book.l_exctd_rt ) * -1;
      }
    }
		else if (c_ord_flw == 'S') /*** Fresh Sell ***/
		{
			if (c_fc_flg == 'F' || c_fc_flg == 'E')  /*** Trade Flow ***/ /*** handling for E is added in ver 4.8 ***/
			{
        if(DEBUG_MSG_LVL_3) /*** Ver 3.6 ***/
        {
					fn_userlog(c_ServiceName,"Inside Fresh Sell");
				}
					d_obli_pl = (double) fn_minl( st_trade_book.l_exctd_qty, abs(l_net_open) ) * ( d_avg_prc - (double)  st_trade_book.l_exctd_rt ) * -1;
			}
			else
			{
        if(DEBUG_MSG_LVL_3) /*** Ver 3.6 ***/
        {
					fn_userlog(c_ServiceName,"Inside Cover Sell");
				}
				d_obli_pl = (double) fn_minl( st_trade_book.l_exctd_qty, abs(l_net_open) ) * ( d_avg_prc - (double)  st_trade_book.l_exctd_rt );
			}
		}

		if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog(c_ServiceName,"c_ord_flw :%c: c_fc_flg :%c:",c_ord_flw, c_fc_flg);
      fn_userlog(c_ServiceName,"d_avg_prc :%lf: Executed Rate :%ld: Executed Qty :%ld:",d_avg_prc, st_trade_book.l_exctd_rt, st_trade_book.l_exctd_qty);
      fn_userlog(c_ServiceName," fn_minl( st_trade_book.l_exctd_qty, abs(l_net_open) ) :%ld:", fn_minl( st_trade_book.l_exctd_qty, abs(l_net_open) ) );
      fn_userlog(c_ServiceName,"Obligation profit loss :%lf:",d_obli_pl);
      fn_userlog(c_ServiceName,"*****************************************");
    }
    strcpy( c_narration_id , PROFIT_LOSS_ON_COVER_LEG);

    if( d_obli_pl != 0)
    {
      /****** Ver 4.2 Starts **********/
        strcpy ( c_tmp_rmrks, st_pstnactn.c_ref_rmrks );
        sprintf ( st_pstnactn.c_ref_rmrks,"OPT-%s-%s-%ld-%c%c-",
                  st_pstnactn.c_undrlyng,
                  st_pstnactn.c_expry_dt,
                  st_pstnactn.l_strike_prc/100,
                  st_pstnactn.c_opt_typ,
                  st_pstnactn.c_exrc_typ );
        strcat(st_pstnactn.c_ref_rmrks,c_tmp_rmrks);
        /**** Ver 4.2 Ends *****/
			i_returncode = fn_upd_spnlimits( c_ServiceName,
																			&st_pstnactn,
																			&st_errmsg,
                                      c_narration_id,
                                      DEBIT_WITHOUT_LIMIT,
                                      d_obli_pl,
                                      &d_balance_amt);
      if ( i_returncode != 0 )
      {
        fn_errlog ( c_ServiceName, "S31455", LIBMSG, c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
				tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
				tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
        /*** tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 ); commented in Ver 3.9 ***/
				Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0);  /** Added in Ver 3.9 **/
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); /** Added in Ver 3.9 **/
      }
      strcpy (st_pstnactn.c_ref_rmrks,c_tmp_rmrks); /*** Ver 4.2 ***/
    }
	}
	/************* Added in ver 2.8 Ends ***************/
} /*** Ver 2.7 ***/

	/*** Ver 2.7 starts here ***/
	else if (st_trade_book.c_prd_typ == SLTP_FUTUREPLUS) 
	{
		EXEC SQL
			SELECT
						FOD_SLTP_ORDR_RFRNC,			/***	Ver 4.5	***/
						NVL(FOD_FC_FLAG,'*')
			INTO
						:c_sltp_ord_rfrnc,
						:c_fc_flg
			FROM  FOD_FO_ORDR_DTLS
			WHERE FOD_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc;

		if ( SQLCODE != 0 )
		{
			fn_errlog ( c_ServiceName, "S31460", SQLMSG, st_errmsg.c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
			tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
			/**** Commented in Ver 3.2 **
			tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
			/*** Ver 3.2 Starts ***/
	    Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
	    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
			/*** Ver 3.2 Ends ***/
		}
		
		/*** Getting Fresh order Details ***/
		EXEC SQL
			SELECT
						FOD_ORDR_RFRNC,			/***	Ver 4.5	***/
						FOD_SLTP_ORDR_RFRNC,
						NVL(FOD_AMT_BLCKD,0),
						NVL(FOD_LSS_AMT_BLCKD,0),
						NVL(FOD_LMT_RT,0),
						FOD_ORDR_FLW
			INTO
						:c_frsh_ordr_rfrnc,
						:c_cvr_ordr_rfrnc,
						:d_amt_blkd,
						:d_lss_amt_blkd,
						:d_ord_lmt_rt,
						:c_ord_flw
			FROM  FOD_FO_ORDR_DTLS
			WHERE FOD_ORDR_RFRNC = DECODE(:c_fc_flg,'F',:st_trade_book.c_ordr_rfrnc,:c_sltp_ord_rfrnc);

		if ( SQLCODE != 0 )
		{
			fn_errlog ( c_ServiceName, "S31465", SQLMSG, st_errmsg.c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
			tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
			/**** Commented in Ver 3.2 **
		  tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
			/*** Ver 3.2 Starts ***/
	    Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
	    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
			/*** Ver 3.2 Ends ***/
		}

		/**Added in Ver 3.0 starts **/
		/** i_returncode = fn_lock_usr( c_ServiceName,  st_ordrbk.c_cln_mtch_accnt ); ** Commented and changed for Ver 6.7 **/
		i_returncode = fn_lock_fno( c_ServiceName,  st_ordrbk.c_cln_mtch_accnt );   /* Ver 6.7 */
		if ( i_returncode != 0 )
		{
			fn_errlog ( c_ServiceName, "S31470", LIBMSG, st_errmsg.c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
			tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
			/**** Commented in Ver 3.2 **
		  tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
		  /*** Ver 3.2 Starts ***/
	    Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
	    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
			/*** Ver 3.2 Ends ***/
		}
		/**Ver 3.0 ends**/


		if (c_fc_flg == 'F' || c_fc_flg == 'C' || c_fc_flg == 'T')   /*** Profit Order added ver 6.0 ***/ 
		{
				/*** Getting Cover order Details ***/
				if (c_fc_flg == 'F')
				{
					EXEC SQL
						SELECT
									NVL(FOD_LMT_RT,0)			/***	Ver 4.5	***/
						INTO
									:d_cvr_lmt_rt
						FROM  FOD_FO_ORDR_DTLS
						WHERE FOD_ORDR_RFRNC = :c_cvr_ordr_rfrnc;
				}
				else if (c_fc_flg == 'C'  || c_fc_flg == 'T')  /*** Profit Order added ver 6.0 ***/ 
				{
		
					EXEC SQL
						SELECT NVL(FOD_LMT_RT,0)
						INTO   :d_cvr_lmt_rt
						FROM   FOD_FO_ORDR_DTLS
						WHERE  FOD_ORDR_RFRNC = (
																			SELECT MIN(FOD_ORDR_RFRNC)
																			FROM	 FOD_FO_ORDR_DTLS 
																			WHERE  FOD_SLTP_ORDR_RFRNC  = :c_frsh_ordr_rfrnc
																			AND    FOD_FC_FLAG = :c_cvr_flg	/*** Ver 4.5 Hard Code Value Replaced by Bind Variable ***/
																		);
				
				}
				if ( SQLCODE != 0 )
				{
					fn_errlog ( c_ServiceName, "S31475", SQLMSG, st_errmsg.c_err_msg );
					fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
					tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
					tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
					/**** Commented in Ver 3.2 **
					tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
					/*** Ver 3.2 Starts ***/
	        Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
	        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
				 /*** Ver 3.2 Ends ***/
				}

				
			/*** Margin calcluation ***/
			i_returncode =  fn_cal_mrgn_sltp(c_ServiceName,
																		c_frsh_ordr_rfrnc,
																		d_ord_lmt_rt,
																		d_cvr_lmt_rt,
																		&d_new_mrgn_amt,
																		&d_new_lss_amt,
                                    c_ref_rmrks,  /*** Ver 5.5 ***/
                                    &d_comp1_mrgn,/*** Ver 5.5 ***/
                                    &d_comp1_pl,  /*** Ver 5.5 ***/
                                    &d_xchng_amt, /*** Ver 5.5 ***/
																		c_err_msg);
			if ( i_returncode == -1 )
			{
					fn_errlog ( c_ServiceName, "S31480", LIBMSG, st_errmsg.c_err_msg );
					fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
					tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
					tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
					/**** Commented in Ver 3.2 **
					tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
					/*** Ver 3.2 Starts ***/
	        Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
	        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
					/*** Ver 3.2 Ends ***/
			}

				d_diff_mrgn_amt = d_amt_blkd - d_new_mrgn_amt;
				
				d_diff_lss_amt 	= d_lss_amt_blkd - d_new_lss_amt;
			
				d_diff_mrgn_amt = (long long)d_diff_mrgn_amt;

				d_diff_lss_amt	= (long long)d_diff_lss_amt;
			
				if (DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"Block or Release diff margin :%lf:",d_diff_mrgn_amt);
				}

				strcpy( c_narration_id , ON_TRADE_EXECUTION);

				if( d_diff_mrgn_amt != 0 )
				{
					d_balance_amt = 0.0;

					i_returncode = fn_upd_spnlimits( c_ServiceName,
																					&st_pstnactn,
																					&st_errmsg,
																					c_narration_id,
																					DEBIT_WITHOUT_LIMIT,
																					d_diff_mrgn_amt,
																					&d_balance_amt);

					if ( i_returncode != 0 )
					{
						fn_errlog ( c_ServiceName, "S31485", LIBMSG, st_errmsg.c_err_msg );
						fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
						tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
						tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
						/**** Commented in Ver 3.2 **
				  	tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
						/*** Ver 3.2 Starts ***/
	          Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
	          tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
						/*** Ver 3.2 Ends ***/
					}
					d_diff_mrgn_amt = d_diff_mrgn_amt - d_balance_amt;

					if (DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"Actual d_diff_mrgn_amt is  :%lf:",d_diff_mrgn_amt);
					}
				}

				if (DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"Block or release diff loss :%lf:",d_diff_lss_amt);
				}

				strcpy( c_narration_id , ON_TRADE_EXECUTION);
				if( d_diff_lss_amt != 0)
				{
					d_balance_amt = 0.0;

          /*** Ver 5.5 started ***/
          MEMSET(c_tmp_rmrks);
          strcpy ( c_tmp_rmrks, st_pstnactn.c_ref_rmrks );
          sprintf(st_pstnactn.c_ref_rmrks,"%s%s",c_ref_rmrks,c_tmp_rmrks);
          /*** Ver 5.5 ends ***/           

					i_returncode = fn_upd_spnlimits( c_ServiceName,
																						&st_pstnactn,
																						&st_errmsg,
																						c_narration_id,
																						DEBIT_WITHOUT_LIMIT,
																						d_diff_lss_amt,
																						&d_balance_amt);
				
					if ( i_returncode != 0 )
					{
						fn_errlog ( c_ServiceName, "S31490", LIBMSG, st_errmsg.c_err_msg );
						fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
						tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
						tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
						/**** Commented in Ver 3.2 **
						tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
						/*** Ver 3.2 Starts ***/
	          Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
	          tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
					  /*** Ver 3.2 Ends ***/
					}	
					d_diff_lss_amt = d_diff_lss_amt - d_balance_amt;

          strcpy ( st_pstn_actn.c_ref_rmrks, c_tmp_rmrks);    /**** Ver 5.5 ***/
          MEMSET(c_tmp_rmrks);                                /**** Ver 5.5 ***/

					if (DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"Actual d_diff_lss_amt is  :%lf:",d_diff_lss_amt);
					}
				}
				
				if (DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"Update new margin & loss");
				}

				EXEC SQL
						 UPDATE FOD_FO_ORDR_DTLS
						 SET    FOD_AMT_BLCKD = :d_amt_blkd - :d_diff_mrgn_amt,
										FOD_LSS_AMT_BLCKD = :d_lss_amt_blkd - :d_diff_lss_amt,
	                 	FOD_SLTP_MRGN = :d_comp1_mrgn, /*** Ver 5.5 ***/
                    FOD_SLTP_PL   = :d_comp1_pl,   /*** Ver 5.5 ***/ 
                    FOD_SLTP_SEBI_MRGN = :d_xchng_amt   /*** Ver 5.5 ***/
						 WHERE  FOD_ORDR_RFRNC = :c_frsh_ordr_rfrnc; 
				if ( SQLCODE != 0 )
				{
					fn_errlog ( c_ServiceName, "S31495", SQLMSG, st_errmsg.c_err_msg );
					fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
					tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
					tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
					/**** Commented in Ver 3.2 **
					tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
					/*** Ver 3.2 Starts ***/
	        Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
	        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
					/*** Ver 3.2 Ends ***/
				}
		}
		else if(c_fc_flg == 'E')	
		{
			/* Calculate open quantity */
			EXEC SQL
				SELECT  NVL( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FTD_EXCTD_QTY,'T', -1 * FTD_EXCTD_QTY,   /*** Handling for 'T' Added in Ver 6.0 */
																												 FTD_EXCTD_QTY ) ), 0 )
				INTO    :l_open_qty
				FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
				WHERE   FTD_ORDR_RFRNC  = FOD_ORDR_RFRNC
				AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_sltp_ord_rfrnc;

			if( SQLCODE != 0 )
			{
			 fn_errlog ( c_ServiceName, "S31500", SQLMSG, st_errmsg.c_err_msg );
			 fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
			 tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
			 tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
			 /**** Commented in Ver 3.2 **
    	 tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
			 /*** Ver 3.2 Starts ***/
	     Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
	     tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
			 /*** Ver 3.2 Ends ***/
			}

			if (l_open_qty == 0)
			{
				/*** Release the margin and loss amount blocked ***/
				EXEC SQL
					SELECT
								NVL(FOD_AMT_BLCKD,0),
								NVL(FOD_LSS_AMT_BLCKD,0)
					INTO  :d_amt_blkd,
								:d_lss_amt_blkd
					FROM  FOD_FO_ORDR_DTLS
					WHERE FOD_ORDR_RFRNC = :c_sltp_ord_rfrnc;

					if( SQLCODE != 0 )
					{
						 fn_errlog ( c_ServiceName, "S31505", SQLMSG, st_errmsg.c_err_msg );
						 fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
						 tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
						 tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
						 /**** Commented in Ver 3.2 **
						 tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
						 /*** Ver 3.2 Starts ***/
	           Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
	           tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
						 /*** Ver 3.2 Ends ***/
					}
					
					strcpy( c_narration_id , ON_TRADE_EXECUTION);
					
					if(d_amt_blkd > 0)
					{
						d_balance_amt  = 0.0;

						if(DEBUG_MSG_LVL_3)
						{
							fn_userlog(c_ServiceName,"Release old margin amount blocked");
						}
						
						i_returncode = fn_upd_spnlimits( c_ServiceName,
																	&st_pstnactn,
																	&st_errmsg,
																	c_narration_id,
																	DEBIT_WITHOUT_LIMIT,
																	d_amt_blkd,
																	&d_balance_amt);

						if ( i_returncode != 0 )
						{
							 fn_errlog ( c_ServiceName, "S31510", LIBMSG, st_errmsg.c_err_msg ); /** VQC **/
							 fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
							 tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
							 tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
							 /**** Commented in Ver 3.2 **
			  			 tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
				  		 /*** Ver 3.2 Starts ***/
	             Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
	             tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
							 /*** Ver 3.2 Ends ***/
						}
					}
									
					if(d_lss_amt_blkd > 0)
					{
						d_balance_amt  = 0.0;

						if(DEBUG_MSG_LVL_3)
						{
							fn_userlog(c_ServiceName,"Release old loss amount");
						}

						i_returncode = fn_upd_spnlimits( c_ServiceName,
																	&st_pstnactn,
																	&st_errmsg,
																	c_narration_id,
																	DEBIT_WITHOUT_LIMIT,
																	d_lss_amt_blkd,
																	&d_balance_amt);


						if ( i_returncode != 0 )
						{
							 fn_errlog ( c_ServiceName, "S31515", LIBMSG, st_errmsg.c_err_msg ); /** VQC **/
							 fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
							 tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
							 tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
							 /**** Commented in Ver 3.2 **
							 tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
							 /*** Ver 3.2 Starts ***/
	             Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
	             tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
							 /*** Ver 3.2 Ends ***/
						}
					}

					if( DEBUG_MSG_LVL_3 )
					{
						fn_userlog(c_ServiceName,"Update margin & loss released");
					}

					EXEC SQL
							 UPDATE FOD_FO_ORDR_DTLS
							 SET    FOD_AMT_BLCKD			= 0,
											FOD_LSS_AMT_BLCKD = 0,
											FOD_SLTP_MRGN			= 0,				/*** Ver 5.5 ***/	
											FOD_SLTP_PL				= 0,				/*** Ver 5.5 ***/	 
											FOD_SLTP_SEBI_MRGN= 0					/*** Ver 5.5 ***/		
							 WHERE  FOD_ORDR_RFRNC		= :c_sltp_ord_rfrnc; 
					
					if ( SQLCODE != 0 )
					{
						 fn_errlog ( c_ServiceName, "S31520", SQLMSG, st_errmsg.c_err_msg );
						 fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
						 tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
						 tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
						 /**** Commented in Ver 3.2 **
						 tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
						 /*** Ver 3.2 Starts ***/
						 Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
						 tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
						 /*** Ver 3.2 Ends ***/
					}
			}
		}	
		/*** Calculate the  Profit / Loss on current executed quantity ***/

		EXEC SQL
			 SELECT  NVL( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY,'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ), 0 )/*** Handling for 'T' added n ver 6.0 **/
			 INTO   :l_net_open
			 FROM   FOD_FO_ORDR_DTLS
			 WHERE  DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_frsh_ordr_rfrnc;

		if ( SQLCODE != 0 )
		{
			 fn_errlog ( c_ServiceName, "S31525", SQLMSG, st_errmsg.c_err_msg );
			 fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
			 tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
			 tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
			 /**** Commented in Ver 3.2 **
			 tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
			 /*** Ver 3.2 Starts ***/
	     Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
    	 tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
			/*** Ver 3.2 Ends ***/
		}

		/*** Obligation to be calculated only when Incoming Fresh Trade and net open position in Cover OR Incoming Cover Trade and net open position in Fresh ***/
		if ( (( c_fc_flg == 'F' || c_fc_flg == 'E' ) && l_net_open < 0) || ((c_fc_flg == 'C' || c_fc_flg == 'T')  && l_net_open > 0) ) /*** Handling for flag E is added in ver 4.8 ***/ /*** live issue T added ver 6.3 ***/
		{
      /*** ver 4.8 started ***/
      if( c_fc_flg == 'E' )
      {
          /*** Commented in Ver 6.0 ***
          EXEC SQL
               SELECT FOD_ORDR_RFRNC
               INTO   :c_sltp_ord_rfrnc
               FROM   FOD_FO_ORDR_DTLS
               WHERE  FOD_SLTP_ORDR_RFRNC  = :c_frsh_ordr_rfrnc
               AND    FOD_FC_FLAG = :c_cvr_flg
               AND    FOD_ORDR_STTS in ('E','D','B');
            ***/

          /*** Ver 6.0 starts ***/
          EXEC SQL
          SELECT NVL(SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),0) ,
                 NVL(SUM(FTD_EXCTD_QTY),0)
          INTO   :d_exe_val,
                 :l_exe_qty
          FROM   FTD_FO_TRD_DTLS,FOD_FO_ORDR_DTLS
          WHERE  FOD_ORDR_RFRNC = FTD_ORDR_RFRNC
          AND    FOD_FC_FLAG in ('C','T')
          AND    DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_frsh_ordr_rfrnc;
          /*** Ver 6.0 ends ***/

          if ( SQLCODE != 0 )
          {
             fn_errlog ( c_ServiceName, "S31530", SQLMSG, st_errmsg.c_err_msg );
             fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
             tpfree((char *)ptr_fml_Sbuf);
             tpfree((char *)ptr_fml_IMsgbuf); 
             Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
             tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
          }
          if( DEBUG_MSG_LVL_3 )
          {
            fn_userlog(c_ServiceName,"******** c_fc_flg is :%c: c_frsh_ordr_rfrnc is :%s: c_sltp_ord_rfrnc is :%s: ***********",c_fc_flg,c_frsh_ordr_rfrnc,c_sltp_ord_rfrnc );
          }
       }
      /*** ver 4.8 ended ***/
      else /*** else condition added in Ver 6.0 ***/
      {
      EXEC SQL
         SELECT NVL(SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),0) ,
                NVL(SUM(FTD_EXCTD_QTY),0)
         INTO   :d_exe_val,
                :l_exe_qty
         FROM   FTD_FO_TRD_DTLS
         WHERE  FTD_ORDR_RFRNC = :c_sltp_ord_rfrnc;

      if ( SQLCODE != 0 )
      {
         fn_errlog ( c_ServiceName, "S31535", SQLMSG, st_errmsg.c_err_msg );
         fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
         tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
         tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
         /**** Commented in Ver 3.2 **
         tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
         /*** Ver 3.2 Starts ***/
         Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
         tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
         /*** Ver 3.2 Ends ***/
      }
    }
 
			EXEC SQL
				 SELECT NVL(SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),0) ,
								NVL(SUM(FTD_EXCTD_QTY),0)
				 INTO   :d_exe_val,
								:l_exe_qty
				 FROM   FTD_FO_TRD_DTLS
				 WHERE  FTD_ORDR_RFRNC = :c_sltp_ord_rfrnc;

			if ( SQLCODE != 0 )
			{
				 fn_errlog ( c_ServiceName, "S31540", SQLMSG, st_errmsg.c_err_msg );
				 fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
				 tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
				 tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
				 /**** Commented in Ver 3.2 **
				 tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
				 /*** Ver 3.2 Starts ***/
       	 Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
         tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
				 /*** Ver 3.2 Ends ***/
			}


			if( DEBUG_MSG_LVL_3 )
			{
				fn_userlog(c_ServiceName,"*****************OBLIGATION*****************");
				fn_userlog(c_ServiceName,"Stored OLD l_net_open = :%ld:",l_net_open);
				fn_userlog(c_ServiceName,"Opposite order Execution Val = :%lf:",d_exe_val);
				fn_userlog(c_ServiceName,"Opposite order Execution Qty = :%ld:",l_exe_qty);
			}

			d_avg_prc = 0;
			
			if (l_exe_qty != 0)
			{
				d_avg_prc =  (double)  d_exe_val / l_exe_qty;
			}


			
			if (c_ord_flw == 'B')	/*** Fresh Buy ***/
			{
				if (c_fc_flg == 'F' || c_fc_flg == 'E' ) /*** Trade Flow ***//*** Handling for flag E is added in ver 4.8 ***/
				{
				 if(DEBUG_MSG_LVL_3) /*** Ver 3.6 ***/
         {
					 fn_userlog(c_ServiceName,"Inside Fresh Buy");
				 }
					d_obli_pl = (double) fn_minl(st_trade_book.l_exctd_qty, abs(l_net_open) ) * ( d_avg_prc - (double) st_trade_book.l_exctd_rt );
				}
				else 
				{
        if(DEBUG_MSG_LVL_3) /*** Ver 3.6 ***/
        {
					fn_userlog(c_ServiceName,"Inside Cover Buy");
				}	
					d_obli_pl = (double) fn_minl( st_trade_book.l_exctd_qty, abs(l_net_open) ) * ( d_avg_prc - (double)  st_trade_book.l_exctd_rt ) * -1;
				}
			}
			else if (c_ord_flw == 'S') /*** Fresh Sell ***/
			{
				if (c_fc_flg == 'F' || c_fc_flg == 'E' ) /*** Trade Flow ***//*** Handling for flag E is added in ver 4.8 ***/
				{
        if(DEBUG_MSG_LVL_3) /*** Ver 3.6 ***/
        {
					fn_userlog(c_ServiceName,"Inside Fresh Sell");
				}
					d_obli_pl = (double) fn_minl( st_trade_book.l_exctd_qty, abs(l_net_open) ) * ( d_avg_prc - (double)  st_trade_book.l_exctd_rt ) * -1;
				}
				else
				{
        if(DEBUG_MSG_LVL_3) /*** Ver 3.6 ***/
        {
					fn_userlog(c_ServiceName,"Inside Cover Sell");
				}
					d_obli_pl = (double) fn_minl( st_trade_book.l_exctd_qty, abs(l_net_open) ) * ( d_avg_prc - (double)  st_trade_book.l_exctd_rt );
				}
			}
			
			if( DEBUG_MSG_LVL_3 )
			{
				fn_userlog(c_ServiceName,"c_ord_flw :%c: c_fc_flg :%c:",c_ord_flw, c_fc_flg);
				fn_userlog(c_ServiceName,"d_avg_prc :%lf: Executed Rate :%ld: Executed Qty :%ld:",d_avg_prc, st_trade_book.l_exctd_rt, st_trade_book.l_exctd_qty);
				fn_userlog(c_ServiceName," fn_minl( st_trade_book.l_exctd_qty, abs(l_net_open) ) :%ld:", fn_minl( st_trade_book.l_exctd_qty, abs(l_net_open) ) );
				fn_userlog(c_ServiceName,"Obligation profit loss :%lf:",d_obli_pl);
				fn_userlog(c_ServiceName,"*****************************************");
			}	
			strcpy( c_narration_id , PROFIT_LOSS_ON_COVER_LEG);

			if( d_obli_pl != 0)
			{
			  /*** if(strncmp(st_pstnactn.c_cln_mtch_accnt, "751", 3) == 0) ***** Commented in Ver 3.1 *************/

				/********** Added in Ver 3.1 starts ********/

				MEMSET(sql_iai_type.arr);

      	EXEC SQL
      	SELECT  IAI_TYPE
      	INTO    :sql_iai_type
      	FROM    IAI_INFO_ACCOUNT_INFO
      	WHERE   IAI_MATCH_ACCOUNT_NO  = :st_pstnactn.c_cln_mtch_accnt;

        if ( SQLCODE != 0 )
        {
         fn_errlog ( c_ServiceName, "S31545", SQLMSG, st_errmsg.c_err_msg );
         fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
				 tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
				 tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
         /** tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 ); Commented in Ver 3.9 **/
				 Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG,st_errmsg.c_err_msg, 0);  /** Added in Ver 3.9 **/
				 tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); /** Added in Ver 3.9 **/
				}

			/********** Added in Ver 3.1 Ends ********/

        if(DEBUG_MSG_LVL_3) /*** Ver 3.6 ***/
        {
					fn_userlog( c_ServiceName, "CUST TYPE IS :%s:",sql_iai_type.arr);  /**********  Added in Ver 3.1 ********/
				}

			if(strcmp(sql_iai_type.arr,"NRO_NON_PINS") == 0)   /********** check Added in Ver 3.1 ********/
			{
					strcpy(c_reason_cd,"Profit Loss on Cover Leg");

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
					if(DEBUG_MSG_LVL_2)
					{
						fn_userlog( c_ServiceName, "Calling fn_tds for COVER_LEG :%s:",c_reason_cd );
					}

					strcpy ( c_tmp_rmrks, st_pstnactn.c_ref_rmrks );

          /*sprintf ( st_pstnactn.c_ref_rmrks,"FUT-%s-%s",commented Ver 4.2 */
          sprintf ( st_pstnactn.c_ref_rmrks,"FUT-%s-%s-", /* Ver 4.2 */
										st_pstnactn.c_undrlyng,
										st_pstnactn.c_expry_dt);
          strcat(st_pstnactn.c_ref_rmrks,c_tmp_rmrks);    /*** Ver 4.2 ***/

     			i_returncode = fn_spntds(   c_ServiceName,
              						            &st_pstnactn,
                  	      					  &st_errmsg,
                    	            		TDS_NRI,
                      	          		c_reason_cd,
                        	        		DEBIT_WITHOUT_LIMIT,
                          	      		d_obli_pl,
                            	    		&d_balance_amt );

					if ( i_returncode != 0 )
					{
						 fn_errlog ( c_ServiceName, "S31550", LIBMSG, st_errmsg.c_err_msg ); /** VQC **/
						 fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
						 tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
						 tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
						 /**** Commented in Ver 3.2 **
						 tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
						 /*** Ver 3.2 Starts ***/
						 Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
						 tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
						 /*** Ver 3.2 Ends ***/
					}
					strcpy ( st_pstnactn.c_ref_rmrks , c_tmp_rmrks );
				}
        /******* Ver 4.2 Starts *****/
        strcpy ( c_tmp_rmrks, st_pstnactn.c_ref_rmrks );
        sprintf ( st_pstnactn.c_ref_rmrks,"FUT-%s-%s-",
                    st_pstnactn.c_undrlyng,
                    st_pstnactn.c_expry_dt);
        strcat(st_pstnactn.c_ref_rmrks,c_tmp_rmrks);  /*** Ver 4.2 ***/
        /******** Ver 4.2 ends***********/
				i_returncode = fn_upd_spnlimits( c_ServiceName,
																				&st_pstnactn,
																				&st_errmsg,
																				c_narration_id,
																				DEBIT_WITHOUT_LIMIT,
																				d_obli_pl,
																				&d_balance_amt);
				if ( i_returncode != 0 )
				{
					 fn_errlog ( c_ServiceName, "S31555", LIBMSG, st_errmsg.c_err_msg ); /*** VQC ***/
					 fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
					 tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
					 tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
					 /**** Commented in Ver 3.2 **
					 tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
					/*** Ver 3.2 Starts ***/
	        Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
	        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
					/*** Ver 3.2 Ends ***/
				}	
        strcpy ( st_pstnactn.c_ref_rmrks , c_tmp_rmrks ); /**** Ver 4.2 *****/
			}
		}
	}
	/*** Ver 2.7 ends here ***/
 }
  /******************** Ver 1.5 Ends ********************/	

	strcpy ( st_ordrbk.c_ack_tm, st_trade_book.c_trd_dt );
	st_ordrbk.l_exctd_qty += st_trade_book.l_exctd_qty;
	st_ordrbk.l_exctd_qty_day += st_trade_book.l_exctd_qty;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Total Order Qty Is :%ld:",st_ordrbk.l_ord_tot_qty);  
		fn_userlog(c_ServiceName,"Executed Qty Is :%ld:",st_ordrbk.l_exctd_qty);       
		fn_userlog(c_ServiceName,"Order Status Is :%c:",st_ordrbk.c_ordr_stts);        
	}

	if ( st_ordrbk.c_ordr_stts == CANCELLED || st_ordrbk.c_ordr_stts == PARTIALLY_EXECUTED_AND_CANCELLED )  
	{
		st_ordrbk.c_ordr_stts = PARTIALLY_EXECUTED_AND_CANCELLED;
	}
	else
	{
		if ( st_ordrbk.l_exctd_qty < st_ordrbk.l_ord_tot_qty )
		{
			/* Ver 4.7 Starts */
			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog(c_ServiceName, "st_ordrbk.l_can_qty:%ld:", st_ordrbk.l_can_qty);
			}
      if ( (st_ordrbk.l_exctd_qty + st_ordrbk.l_can_qty) == st_ordrbk.l_ord_tot_qty )
      {
        st_ordrbk.c_ordr_stts = PARTIALLY_EXECUTED_AND_CANCELLED;
      }
      else
      /* Ver 4.7 Ends */
			st_ordrbk.c_ordr_stts = PARTIALLY_EXECUTED;
		}
		else
		{
			st_ordrbk.c_ordr_stts = EXECUTED;
		}
	}

	/*** Commented in Ver 2.4 *******

	st_ordrbk.c_oprn_typ = UPDATE_TRADE_CONFIRMATION;

	i_returncode  = fn_spnupd_ordrbook ( c_ServiceName,
																			 &st_ordrbk,
																			 &st_errmsg
																		);

	if ( i_returncode != SUCC_BFR )
	{
  	fn_errlog ( c_ServiceName, "S31560", LIBMSG, st_errmsg.c_err_msg );
  	fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
		fn_userlog(c_ServiceName,"Error in  fn_spnupd_ordrbook");
  	tpreturn(TPFAIL, ERR_BFR, (char *)&st_errmsg, 0, 0 );
	}
  ****/

    /*** ver 5.3 starts ***/
    rtrim(c_fod_last_act_no);

    sscanf(c_fod_last_act_no,"%lld",&ll_fod_last_act_no);
    sscanf(c_lst_act_ref,"%lld",&ll_lst_act_ref);

    /** Input Last Act Ref is greater than the existing in FOD table ***
        Then, input Last Act Ref is recent, set flag to 1 ************/

    i_recent_act_ref = ( ll_fod_last_act_no < ll_lst_act_ref ) ? 1 : 0;

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"Last act no flag.:%d: c_ordr_rfrnc :%s: ll_fod_last_act_no :%lld: ll_lst_act_ref :%lld:",i_recent_act_ref,st_ordrbk.c_ordr_rfrnc,ll_fod_last_act_no,ll_lst_act_ref);
    }
    /*** ver 5.3 ends ***/

	/**** Ver 2.9 starts ****/
	if (st_trade_book.c_prd_typ == 'U' || st_trade_book.c_prd_typ == 'I' )	
	{
	 EXEC SQL
        SELECT 1							/***	Ver 4.5	***/
          INTO :i_ack_tm
          FROM FOD_FO_ORDR_DTLS
         WHERE FOD_LST_RQST_ACK_TM < TO_DATE (:st_ordrbk.c_ack_tm,'dd-mon-yyyy hh24:mi:ss' )
           AND FOD_ORDR_RFRNC      = :st_ordrbk.c_ordr_rfrnc;

		if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
		{
			fn_errlog ( c_ServiceName, "S31565", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
			/**** Commented in Ver 3.2 **
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 ); ***/
			/*** Ver 3.2 Starts ***/
			Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
			/*** Ver 3.2 Ends ***/
		}

		EXEC SQL
    	    UPDATE  FOD_FO_ORDR_DTLS
      	  SET     FOD_EXEC_QTY        = :st_ordrbk.l_exctd_qty,
        	        FOD_EXEC_QTY_DAY    = :st_ordrbk.l_exctd_qty_day,
          	      FOD_ORDR_STTS       = :st_ordrbk.c_ordr_stts,
            	    FOD_TRD_VAL         = NVL(FOD_TRD_VAL,0) + ( :st_trade_book.l_exctd_qty * :st_trade_book.l_exctd_rt),
              	  FOD_LST_RQST_ACK_TM = DECODE(:i_ack_tm,1,to_date (:st_ordrbk.c_ack_tm,'dd-mon-yyyy hh24:mi:ss' ),fod_lst_rqst_ack_tm),      /**** DECOODE added  in Ver 2.9 ****/
									FOD_LST_ACT_REF     = DECODE(:i_recent_act_ref,1,:c_lst_act_ref,FOD_LST_ACT_REF) /*** Ver 5.2 ***/   /*** Ver 5.3 ***/
        	WHERE   FOD_ORDR_RFRNC      = :st_ordrbk.c_ordr_rfrnc;

	  if ( SQLCODE != 0 )
  	{
    	fn_errlog ( c_ServiceName, "S31570", SQLMSG, st_errmsg.c_err_msg );
   	  fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
			tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
    	/**** Commented in Ver 3.2 **
    	tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
			/*** Ver 3.2 Starts ***/
	    Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
	    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
			/*** Ver 3.2 Ends ***/
  	}
	}
	else
	{
	/**** Ver 2.9 Ends ****/
  /**** Ver 4.4 Starts ***/

     EXEC SQL
          SELECT 1
          INTO :i_ack_tm
          FROM fod_fo_ordr_dtls
          WHERE fod_lst_rqst_ack_tm < to_date (:st_ordrbk.c_ack_tm,'dd-mon-yyyy hh24:mi:ss' )
          AND fod_ordr_rfrnc      = :st_ordrbk.c_ordr_rfrnc;

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog ( c_ServiceName, "S31575", SQLMSG, ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpfree((char *)ptr_fml_Sbuf);
      tpfree((char *)ptr_fml_IMsgbuf);
      Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Ack Time.....................:%d:",i_ack_tm);
      fn_userlog(c_ServiceName,"st_ordrbk.c_ordr_rfrnc.......:%s:",st_ordrbk.c_ordr_rfrnc);
      fn_userlog(c_ServiceName,"st_ordrbk.c_ack_tm .........:%s:",st_ordrbk.c_ack_tm);
    }

  /**** Ver 4.4 Ends ***/
  /**** Ver 2.4 Starts ***/

  	EXEC SQL
    	    UPDATE  FOD_FO_ORDR_DTLS			/***	Ver 4.5	***/
      	  SET     FOD_EXEC_QTY        = :st_ordrbk.l_exctd_qty,
        	        FOD_EXEC_QTY_DAY    = :st_ordrbk.l_exctd_qty_day,
          	      FOD_ORDR_STTS       = :st_ordrbk.c_ordr_stts,
            	    FOD_TRD_VAL         = NVL(FOD_TRD_VAL,0) + ( :st_trade_book.l_exctd_qty * :st_trade_book.l_exctd_rt),
              	/*FOD_LST_RQST_ACK_TM = TO_DATE (:st_ordrbk.c_ack_tm,'dd-mon-yyyy hh24:mi:ss' )** Commented in Ver 4.4 ***/
                  FOD_LST_RQST_ACK_TM = DECODE(:i_ack_tm,1,to_date (:st_ordrbk.c_ack_tm,'dd-mon-yyyy hh24:mi:ss' ),fod_lst_rqst_ack_tm),          /****  Ver 4.4 ****/
									FOD_LST_ACT_REF     = DECODE(:i_recent_act_ref,1,:c_lst_act_ref,FOD_LST_ACT_REF) /*** Ver 5.2 ***/ /*** Ver 5.3 ***/
        	WHERE   FOD_ORDR_RFRNC      = :st_ordrbk.c_ordr_rfrnc;

  	if ( SQLCODE != 0 )
  	{
    	fn_errlog ( c_ServiceName, "S31580", SQLMSG, st_errmsg.c_err_msg );
    	fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
			tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
    	/**** Commented in Ver 3.2 **
    	tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
			/*** Ver 3.2 Starts ***/
	    Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
	    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
			/*** Ver 3.2 Ends ***/
  	}
	}
  /*** Ver 2.4 Ends ***/

	st_trade_book.c_rms_prcsd_flg	= PROCESSED;

	st_trade_book.l_fresh_qty			= st_pstnactn.l_fresh_qty;
	st_trade_book.l_cover_qty			= st_pstnactn.l_cover_qty;

	st_trade_book.c_oprn_typ = UPDATE_TRADE_CONF;

  if (st_trade_book.c_prd_typ == 'U' || st_trade_book.c_prd_typ == 'I' )		/*** Ver 1.5 ***/  /*** Check added for OptionPlus 'I'  in Ver 2.0 ***/  
  {
		if (c_fc_flg == 'F' || c_fc_flg == 'E' ) /*** 'E' flag added in Ver 2.6 ***/
		{
			st_trade_book.l_fresh_qty = st_trade_book.l_exctd_qty;
			st_trade_book.l_cover_qty = 0;
		}
		else 
		if (c_fc_flg == 'C' || c_fc_flg == 'T')    /*** Handling for flag 'T' Added in Ver 6.0 ***/
		{
			st_trade_book.l_fresh_qty = 0;
			st_trade_book.l_cover_qty = st_trade_book.l_exctd_qty;
		}
  }

  /*** Ver 6.1 ***/
 if (st_trade_book.c_prd_typ == 'F' )
 {
  i_returncode =fn_spnavg_prc_cal(c_ServiceName,
                                   st_pstnactn,
                                   &d_prtfl_avgprc);
    if ( i_returncode != 0 )
    {
      fn_userlog(c_ServiceName,"Error in Average Price Calculation ..");
      fn_errlog ( c_ServiceName, "S31585", LIBMSG, st_errmsg.c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
      tpfree((char *)ptr_fml_Sbuf);
      tpfree((char *)ptr_fml_IMsgbuf);
      Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
    }
    fn_userlog(c_ServiceName," Average Price  :%lf:",d_prtfl_avgprc);

      EXEC SQL
        UPDATE  FCP_FO_SPN_CNTRCT_PSTN
        SET   FCP_AVG_PRC = :d_prtfl_avgprc
        WHERE  FCP_CLM_MTCH_ACCNT  = :st_pstnactn.c_cln_mtch_accnt
        AND    FCP_XCHNG_CD        = :st_pstnactn.c_xchng_cd
        AND    FCP_PRDCT_TYP       = :st_pstnactn.c_prd_typ
        AND    FCP_EXER_TYP        = :st_pstnactn.c_exrc_typ
        AND    FCP_UNDRLYNG        = :st_pstnactn.c_undrlyng
        AND    FCP_EXPRY_DT        = :st_pstnactn.c_expry_dt;

   if ( SQLCODE != 0 )
    {
		  fn_errlog ( c_ServiceName, "S31590", SQLMSG, st_errmsg.c_err_msg );
    	fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
    	tpfree((char *)ptr_fml_Sbuf);  
    	tpfree((char *)ptr_fml_IMsgbuf); 
    	Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
    	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
    }
 }
 /*** Ver 6.1 *****/


	i_returncode	=	fn_spnupd_trdbook	(	c_ServiceName,
                    									c_user_id,
																			&st_trade_book,
                     									&st_errmsg
                    								);

	if ( i_returncode != SUCC_BFR )
	{
  	fn_errlog ( c_ServiceName, "S31595", LIBMSG, st_errmsg.c_err_msg );
  	fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
		fn_userlog(c_ServiceName,"Error in  fn_spnupd_trdbook");
		tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
		tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
  	/**** Commented in Ver 3.2 **
  	tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
		/*** Ver 3.2 Starts ***/
	  Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
	  tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
		/*** Ver 3.2 Ends ***/
	}
	
	/*** ver 5.1 starts *******/
  if (st_trade_book.c_prd_typ == 'O')
  {
        i_returncode = fn_cal_spndlvry_mrgn( c_ServiceName,
                                        &st_pstnactn,
                                        &st_errmsg
                                        );

  if ( i_returncode != 0 )
  {
    fn_errlog ( c_ServiceName, "S31600", LIBMSG, st_errmsg.c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
    fn_userlog(c_ServiceName,"Error in  fn_spnupd_trdbook");
    tpfree((char *)ptr_fml_Sbuf);
    tpfree((char *)ptr_fml_IMsgbuf);
    Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
  }
  }
  /**** ver 5.1 ends  ***/
	
  /* Ver 6.9 begins */
if ( c_src_flg == 'H')
{
  EXEC SQL
    SELECT COUNT(1)
    INTO :i_gtt_flg
    FROM FGL_FO_GTT_LEGDTLS WHERE FGL_FRESH_ORDR_REF = :st_trade_book.c_ordr_rfrnc;

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31605", SQLMSG, st_errmsg.c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
    tpfree((char *)ptr_fml_Sbuf);
    tpfree((char *)ptr_fml_IMsgbuf);
    Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
  }

  fn_userlog(c_ServiceName,"i_gtt_flg is :%d:", i_gtt_flg);

  if( i_gtt_flg > 0 )
  {
    if(st_ordrbk.c_ordr_stts == EXECUTED)
    {
    EXEC SQL
      UPDATE FGL_FO_GTT_LEGDTLS
      SET FGL_GTT_STTS = 'A'
      WHERE FGL_FRESH_ORDR_REF = :st_trade_book.c_ordr_rfrnc;

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31610", SQLMSG, st_errmsg.c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
      tpfree((char *)ptr_fml_Sbuf);
      tpfree((char *)ptr_fml_IMsgbuf);
      Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
    }
    }
    else if(st_ordrbk.c_ordr_stts == CANCELLED || st_ordrbk.c_ordr_stts == 'J' || st_ordrbk.c_ordr_stts == 'X')
    {
    EXEC SQL
      UPDATE FGL_FO_GTT_LEGDTLS
      SET FGL_GTT_STTS= 'C'
      WHERE FGL_FRESH_ORDR_REF = :st_trade_book.c_ordr_rfrnc;

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31615", SQLMSG, st_errmsg.c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
      tpfree((char *)ptr_fml_Sbuf);
      tpfree((char *)ptr_fml_IMsgbuf);
      Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
    }
  }
	}
	}
  /* Ver 6.9 ends */
	if ( fn_committran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg ) == -1 )
	{
  	fn_errlog ( c_ServiceName, "S31620", LIBMSG, st_errmsg.c_err_msg );
		fn_userlog(c_ServiceName,"Error while committing...");
    fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg ); /** VQC **/
		tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
		tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
  	/**** Commented in Ver 3.2 **
  	tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
		/*** Ver 3.2 Starts ***/
	  Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
  	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
		/*** Ver 3.2 Ends ***/
	}
   /*** Ver 6.8 Start ***/
  i_returncode = fn_upd_mrgn_reporting(st_pstnactn.c_cln_mtch_accnt,
                                       st_pstnactn.c_xchng_cd,
                                       c_ServiceName,
                                       c_err_msg
                                      );
  if( i_returncode != 0 )
  {
    fn_errlog ( c_ServiceName, "S31625", LIBMSG, st_errmsg.c_err_msg );
    fn_userlog(c_ServiceName,"Error in  fn_spnupd_trdbook");
    tpfree((char *)ptr_fml_Sbuf);
    tpfree((char *)ptr_fml_IMsgbuf);
    Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
  }
  /*** Ver 6.8 Ends here **/

	/** Ver 3.0 Starts**/ 	

	if(st_trade_book.c_prd_typ == SLTP_FUTUREPLUS || st_trade_book.c_prd_typ == OPTIONPLUS )
	{

    /*** Ver 4.1 Starts Here ***/
    i_returncode= fn_prcs_trd(c_ServiceName,c_err_msg,st_trade_book.c_prd_typ, st_trade_book.c_ordr_rfrnc);

    if ( i_returncode != 0 )
    {
      fn_errlog ( c_ServiceName, "S31630", LIBMSG, st_errmsg.c_err_msg );
    }
    /*** Ver 4.1 Ends Here ***/

    /**** Commented in Ver 4.1
		MEMSET(st_tradebook);     

        if(DEBUG_MSG_LVL_3) *** Ver 3.6 ***
        {
					fn_userlog( c_ServiceName, "Ak3.0 : Fetching starts");
				}

		EXEC SQL
		  SELECT
			  fod_sltp_ordr_rfrnc
		  INTO
			  :c_sltp_ord_rfrnc
		  FROM  FOD_FO_ORDR_DTLS
		  WHERE fod_ordr_rfrnc = :st_trade_book.c_ordr_rfrnc; 
		if(SQLCODE !=0)
		{
		  fn_errlog ( c_ServiceName, "S31635", SQLMSG, ptr_st_err_msg->c_err_msg );
		  ** fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg ); ** Commented in Ver 3.9 **
			tpfree((char *)ptr_fml_Sbuf);  ** Added in Ver 3.9 **
			tpfree((char *)ptr_fml_IMsgbuf);  ** Added in Ver 3.9 **
		  ** tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 ); ommented in Ver 3.2 ***
			Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0);  ** Added in Ver 3.9 **
			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); ** Added in Ver 3.9 **
		}

        if(DEBUG_MSG_LVL_3) *** Ver 3.6 ***
        {
					fn_userlog( c_ServiceName, "Ak3.0 : st_trade_book.c_ordr_rfrnc is :%s:",st_trade_book.c_ordr_rfrnc);
					fn_userlog( c_ServiceName, "Ak3.0 : c_sltp_ord_rfrnc is :%s:",c_sltp_ord_rfrnc);
				}

			EXEC SQL
			SELECT	ftd_clm_mtch_accnt,
							ftd_xchng_cd,
							ftd_prdct_typ,
							ftd_indstk,
							ftd_undrlyng,
							to_char(ftd_expry_dt,'DD-Mon-YYYY'),
							ftd_exer_typ,
							ftd_opt_typ,
							ftd_strk_prc,
							ftd_ordr_rfrnc,
							ftd_eba_trd_ref,
							ftd_ord_ack_nmbr,
							ftd_xchng_trd_no,
							to_char(ftd_trd_dt,'DD-Mon-YYYY hh24:mi:ss'),
							ftd_trnsctn_typ,
							ftd_trd_flw,
							ftd_exctd_qty,
							ftd_exctd_rt
					INTO	:st_tradebook.c_cln_mtch_accnt,
							:st_tradebook.c_xchng_cd,
							:st_tradebook.c_prd_typ,
							:st_tradebook.c_ctgry_indstk,
							:st_tradebook.c_undrlyng,
							:st_tradebook.c_expry_dt,
							:st_tradebook.c_exrc_typ,
							:st_tradebook.c_opt_typ,
							:st_tradebook.l_strike_prc,
							:st_tradebook.c_ordr_rfrnc,
							:st_tradebook.c_trd_rfrnc,
							:st_tradebook.c_xchng_ack,
							:st_tradebook.l_xchng_trd_no,
							:st_tradebook.c_trd_dt,
							:st_tradebook.c_trnsctn_typ:si_null,
							:st_tradebook.c_trd_flw,
							:st_tradebook.l_exctd_qty,
							:st_tradebook.l_exctd_rt
			FROM		ftd_fo_trd_dtls
			WHERE		ftd_ordr_rfrnc IN(:st_trade_book.c_ordr_rfrnc,:c_sltp_ord_rfrnc)
			AND			ftd_rms_prcsd_flg = 'N'
			AND			ROWNUM < 2
			ORDER		BY FTD_TRD_DT;

		  if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
		  {
				fn_errlog ( c_ServiceName, "S31640", SQLMSG, ptr_st_err_msg->c_err_msg );
				tpfree((char *)ptr_fml_Sbuf);  ** Added in Ver 3.9 **
				tpfree((char *)ptr_fml_IMsgbuf);  ** Added in Ver 3.9 **
				** fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg ); Commented in Ver 3.9 **
				** tpreturn(TPFAIL, ERR_BFR, (char *)&ptr_st_err_msg, 0, 0 ); Commented in Ver 3.9 **
				Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0);  ** Added in Ver 3.9 **
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); ** Added in Ver 3.9 **
			} 

		if( SQLCODE != NO_DATA_FOUND )
		{
			fn_userlog( c_ServiceName, "Calling SFO_PRCS_CVRTRD");

			fn_cpy_ddr ( st_cvr_xchngbk.c_rout_crt );

			i_xchngbkerr_cvrtrd [0] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)st_cvr_xchngbk.c_rout_crt,0);
			i_ferr[0] = Ferror32;
			i_xchngbkerr_cvrtrd [1] = Fadd32(ptr_fml_Sbuf,FFO_ORDR_RFRNC, (char *)st_tradebook.c_ordr_rfrnc,0);
			i_ferr[1] = Ferror32;
			i_xchngbkerr_cvrtrd [2] = Fadd32(ptr_fml_Sbuf,FFO_TRD_RFRNC, (char *)st_tradebook.c_trd_rfrnc,0);
			i_ferr[2] = Ferror32;
			i_xchngbkerr_cvrtrd [3] = Fadd32(ptr_fml_Sbuf,FFO_EBA_MTCH_ACT_NO, (char *)st_tradebook.c_cln_mtch_accnt,0);
			i_ferr[3] = Ferror32;
			i_xchngbkerr_cvrtrd [4] = Fadd32(ptr_fml_Sbuf,FFO_EBA_CNTRCT_ID, (char *)&st_tradebook.l_eba_cntrct_id,0);		
			i_ferr[4] = Ferror32;
			i_xchngbkerr_cvrtrd [5] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CD, (char *)st_tradebook.c_xchng_cd,0);
			i_ferr[5] = Ferror32;
			
			i_xchngbkerr_cvrtrd [6] = Fadd32(ptr_fml_Sbuf,FFO_PRDCT_TYP, (char *)&st_tradebook.c_prd_typ,0);
			i_ferr[6] = Ferror32;
			i_xchngbkerr_cvrtrd [7] = Fadd32(ptr_fml_Sbuf,FFO_UNDRLYNG, (char *)st_tradebook.c_undrlyng,0);
			i_ferr[7] = Ferror32;
			i_xchngbkerr_cvrtrd [8] = Fadd32(ptr_fml_Sbuf,FFO_EXPRY_DT, (char *)st_tradebook.c_expry_dt,0);
			i_ferr[8] = Ferror32;
			i_xchngbkerr_cvrtrd [9] = Fadd32(ptr_fml_Sbuf,FFO_EXER_TYP, (char *)&st_tradebook.c_exrc_typ,0);
			i_ferr[9] = Ferror32;
			i_xchngbkerr_cvrtrd [10] = Fadd32(ptr_fml_Sbuf,FFO_OPT_TYP, (char *)&st_tradebook.c_opt_typ,0);
			i_ferr[10] = Ferror32;
			i_xchngbkerr_cvrtrd [11] = Fadd32(ptr_fml_Sbuf,FFO_STRK_PRC, (char *)&st_tradebook.l_strike_prc,0);
			i_ferr[11] = Ferror32;

			i_xchngbkerr_cvrtrd [12] = Fadd32(ptr_fml_Sbuf,FFO_CTGRY_INDSTK, (char *)&st_tradebook.c_ctgry_indstk,0);
			i_ferr[12] = Ferror32;
			i_xchngbkerr_cvrtrd [13] = Fadd32(ptr_fml_Sbuf,FFO_CA_LVL, (char *)&st_tradebook.l_ca_lvl,0);				
			i_ferr[13] = Ferror32;
			i_xchngbkerr_cvrtrd [14] = Fadd32(ptr_fml_Sbuf,FFO_TRD_FLW, (char *)&st_tradebook.c_trd_flw,0);			
			i_ferr[14] = Ferror32;
			i_xchngbkerr_cvrtrd [15] = Fadd32(ptr_fml_Sbuf,FFO_EXEC_QTY, (char *)&st_tradebook.l_exctd_qty,0);
			i_ferr[15] = Ferror32;
			i_xchngbkerr_cvrtrd [16] = Fadd32(ptr_fml_Sbuf,FFO_EXCTD_RT, (char *)&st_tradebook.l_exctd_rt,0);
			i_ferr[16] = Ferror32;
			i_xchngbkerr_cvrtrd [17] = Fadd32(ptr_fml_Sbuf,FFO_TRD_DT, (char *)st_tradebook.c_trd_dt,0);
			i_ferr[17] = Ferror32;

			for (i = 0;i < 18 ;i++)
			{ 
				if(i_xchngbkerr_cvrtrd[i] == -1 )
				{
					fn_userlog( c_ServiceName, "Error in :%d:",i );
					tpfree((char *)ptr_fml_Sbuf);
					tpfree((char *)ptr_fml_IMsgbuf);  ** Added in Ver 3.9 **
					fn_errlog(c_ServiceName, "S31645", FMLMSG,  st_errmsg.c_err_msg);
					**** Commented in Ver 3.2 **
					tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  *
					*** Ver 3.2 Starts ***
					Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
					tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
					*** Ver 3.2 Ends ***
				}
			}

			i_returncode  = tpacall ( "SFO_PRCS_CVRTRD", (char *)ptr_fml_Sbuf,0, TPNOTRAN|TPNOREPLY);

			if ( i_returncode != SUCC_BFR )
			{
				fn_errlog ( c_ServiceName, "S31650", LIBMSG, c_err_msg );
				** Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 ); Commented in Ver 3.9 **
				Fadd32( ptr_fml_Itrdbkbuf, FFO_ERR_MSG, c_err_msg, 0 ); ** Added in Ver 3.9 **

			}
		}
		else
			fn_userlog( c_ServiceName, "NO_DATA_FOUND");
    ***** Comment Ends For Ver 4.1 ****/

	}   /*** Below else if added in ver 5.0 ****/
  else if(st_trade_book.c_prd_typ == FUTURES &&  c_spl_flg == ROLLOVER_WITH_SPREAD  )
  {
     fn_userlog( c_ServiceName, " ROLLOVER SPREAD Processing for :%s:",st_trade_book.c_ordr_rfrnc);

     i_returncode= fn_prcs_trd_rollover(c_ServiceName,c_err_msg,st_trade_book.c_prd_typ, st_trade_book.c_ordr_rfrnc);

    if ( i_returncode != 0 )
    {
      fn_errlog ( c_ServiceName, "S31655", LIBMSG, st_errmsg.c_err_msg );
    }  

  }

	/** Ver 3.0 Ends**/ 	

	/** Ver 3.4 Starts**/ 	
	else if(st_trade_book.c_prd_typ == FUTURES || st_trade_book.c_prd_typ == OPTIONS)	
	{

    /*** Ver 4.1 Starts Here ***/
    i_returncode= fn_prcs_trd(c_ServiceName,c_err_msg,st_trade_book.c_prd_typ, st_trade_book.c_ordr_rfrnc);

    if ( i_returncode != 0 )
    {
      fn_errlog ( c_ServiceName, "S31660", LIBMSG, st_errmsg.c_err_msg );
    }
    /*** Ver 4.1 Ends Here ***/

    /**** Commented in Ver 4.1
		MEMSET(st_tradebook); 
 
	    if(DEBUG_MSG_LVL_3) *** Ver 3.6 ***
      {   
				fn_userlog( c_ServiceName, "st_trade_book.c_ordr_rfrnc is :%s:",st_trade_book.c_ordr_rfrnc);
			}
			EXEC SQL
			SELECT	ftd_clm_mtch_accnt,
							ftd_xchng_cd,
							ftd_prdct_typ,
							ftd_indstk,
							ftd_undrlyng,
							to_char(ftd_expry_dt,'DD-Mon-YYYY'),
							ftd_exer_typ,
							ftd_opt_typ,
							ftd_strk_prc,
							ftd_ordr_rfrnc,
							ftd_eba_trd_ref,
							ftd_ord_ack_nmbr,
							ftd_xchng_trd_no,
							to_char(ftd_trd_dt,'DD-Mon-YYYY hh24:mi:ss'),
							ftd_trnsctn_typ,
							ftd_trd_flw,
							ftd_exctd_qty,
							ftd_exctd_rt
					INTO	:st_tradebook.c_cln_mtch_accnt,
							:st_tradebook.c_xchng_cd,
							:st_tradebook.c_prd_typ,
							:st_tradebook.c_ctgry_indstk,
							:st_tradebook.c_undrlyng,
							:st_tradebook.c_expry_dt,
							:st_tradebook.c_exrc_typ,
							:st_tradebook.c_opt_typ,
							:st_tradebook.l_strike_prc,
							:st_tradebook.c_ordr_rfrnc,
							:st_tradebook.c_trd_rfrnc,
							:st_tradebook.c_xchng_ack,
							:st_tradebook.l_xchng_trd_no,
							:st_tradebook.c_trd_dt,
							:st_tradebook.c_trnsctn_typ:si_null,
							:st_tradebook.c_trd_flw,
							:st_tradebook.l_exctd_qty,
							:st_tradebook.l_exctd_rt
			FROM		ftd_fo_trd_dtls
			WHERE		ftd_ordr_rfrnc = :st_trade_book.c_ordr_rfrnc
			AND			ftd_rms_prcsd_flg = 'N'
			AND			ROWNUM < 2
			ORDER		BY FTD_TRD_DT;

		  if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
		  {
				fn_errlog ( c_ServiceName, "S31665", SQLMSG, ptr_st_err_msg->c_err_msg );
				tpfree((char *)ptr_fml_Sbuf);  ** Added in Ver 3.9 **
				tpfree((char *)ptr_fml_IMsgbuf);  ** Added in Ver 3.9 **
				** fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );  Commented in Ver 3.9 **
				** tpreturn(TPFAIL, ERR_BFR, (char *)&ptr_st_err_msg, 0, 0 ); Commented in Ver 3.9 **
				Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0);  ** Added in Ver 3.9 **
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); ** Added in Ver 3.9 **
		  } 

		if( SQLCODE != NO_DATA_FOUND )
		{
			fn_userlog( c_ServiceName, "Calling SFO_PRCS_CVRTRD");

			fn_cpy_ddr ( st_cvr_xchngbk.c_rout_crt );

			i_xchngbkerr_cvrtrd [0] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)st_cvr_xchngbk.c_rout_crt,0);
			i_ferr[0] = Ferror32;
			i_xchngbkerr_cvrtrd [1] = Fadd32(ptr_fml_Sbuf,FFO_ORDR_RFRNC, (char *)st_tradebook.c_ordr_rfrnc,0);
			i_ferr[1] = Ferror32;
			i_xchngbkerr_cvrtrd [2] = Fadd32(ptr_fml_Sbuf,FFO_TRD_RFRNC, (char *)st_tradebook.c_trd_rfrnc,0);
			i_ferr[2] = Ferror32;
			i_xchngbkerr_cvrtrd [3] = Fadd32(ptr_fml_Sbuf,FFO_EBA_MTCH_ACT_NO, (char *)st_tradebook.c_cln_mtch_accnt,0);
			i_ferr[3] = Ferror32;
			i_xchngbkerr_cvrtrd [4] = Fadd32(ptr_fml_Sbuf,FFO_EBA_CNTRCT_ID, (char *)&st_tradebook.l_eba_cntrct_id,0);		
			i_ferr[4] = Ferror32;
			i_xchngbkerr_cvrtrd [5] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CD, (char *)st_tradebook.c_xchng_cd,0);
			i_ferr[5] = Ferror32;
			
			i_xchngbkerr_cvrtrd [6] = Fadd32(ptr_fml_Sbuf,FFO_PRDCT_TYP, (char *)&st_tradebook.c_prd_typ,0);
			i_ferr[6] = Ferror32;
			i_xchngbkerr_cvrtrd [7] = Fadd32(ptr_fml_Sbuf,FFO_UNDRLYNG, (char *)st_tradebook.c_undrlyng,0);
			i_ferr[7] = Ferror32;
			i_xchngbkerr_cvrtrd [8] = Fadd32(ptr_fml_Sbuf,FFO_EXPRY_DT, (char *)st_tradebook.c_expry_dt,0);
			i_ferr[8] = Ferror32;
			i_xchngbkerr_cvrtrd [9] = Fadd32(ptr_fml_Sbuf,FFO_EXER_TYP, (char *)&st_tradebook.c_exrc_typ,0);
			i_ferr[9] = Ferror32;
			i_xchngbkerr_cvrtrd [10] = Fadd32(ptr_fml_Sbuf,FFO_OPT_TYP, (char *)&st_tradebook.c_opt_typ,0);
			i_ferr[10] = Ferror32;
			i_xchngbkerr_cvrtrd [11] = Fadd32(ptr_fml_Sbuf,FFO_STRK_PRC, (char *)&st_tradebook.l_strike_prc,0);
			i_ferr[11] = Ferror32;

			i_xchngbkerr_cvrtrd [12] = Fadd32(ptr_fml_Sbuf,FFO_CTGRY_INDSTK, (char *)&st_tradebook.c_ctgry_indstk,0);
			i_ferr[12] = Ferror32;
			i_xchngbkerr_cvrtrd [13] = Fadd32(ptr_fml_Sbuf,FFO_CA_LVL, (char *)&st_tradebook.l_ca_lvl,0);				
			i_ferr[13] = Ferror32;
			i_xchngbkerr_cvrtrd [14] = Fadd32(ptr_fml_Sbuf,FFO_TRD_FLW, (char *)&st_tradebook.c_trd_flw,0);			
			i_ferr[14] = Ferror32;
			i_xchngbkerr_cvrtrd [15] = Fadd32(ptr_fml_Sbuf,FFO_EXEC_QTY, (char *)&st_tradebook.l_exctd_qty,0);
			i_ferr[15] = Ferror32;
			i_xchngbkerr_cvrtrd [16] = Fadd32(ptr_fml_Sbuf,FFO_EXCTD_RT, (char *)&st_tradebook.l_exctd_rt,0);
			i_ferr[16] = Ferror32;
			i_xchngbkerr_cvrtrd [17] = Fadd32(ptr_fml_Sbuf,FFO_TRD_DT, (char *)st_tradebook.c_trd_dt,0);
			i_ferr[17] = Ferror32;

			for (i = 0;i < 18 ;i++)
			{ 
				if(i_xchngbkerr_cvrtrd[i] == -1 )
				{
					fn_userlog( c_ServiceName, "Error in :%d:",i );
					tpfree((char *)ptr_fml_Sbuf);
					tpfree((char *)ptr_fml_IMsgbuf);  ** Added in Ver 3.9 **
					fn_errlog(c_ServiceName, "S31670", FMLMSG,  st_errmsg.c_err_msg);
					**** Commented in Ver 3.2 **
				  tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  *
				  *** Ver 3.2 Starts ***
          Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
          tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
				  *** Ver 3.2 Ends ***
				}
			}

			i_returncode  = tpacall ( "SFO_PRCS_CVRTRD", (char *)ptr_fml_Sbuf,0, TPNOTRAN|TPNOREPLY);

			if ( i_returncode != SUCC_BFR )
			{
				fn_errlog ( c_ServiceName, "S31675", LIBMSG, c_err_msg );
				** Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 ); Commented in Ver 3.9 **
				Fadd32( ptr_fml_Itrdbkbuf, FFO_ERR_MSG, c_err_msg, 0 ); ** Added in Ver 3.9 **
			}
		}
		else
			fn_userlog( c_ServiceName, "NO_DATA_FOUND");
    ***** Comment Ends For Ver 4.1 ****/

	}
	/** Ver 3.4 Ends**/ 	
	
	/** Ver 2.9 Starts**/ 	
	/*if(st_trade_book.c_prd_typ == SLTP_FUTUREPLUS || st_trade_book.c_prd_typ == OPTIONPLUS ) */
    if(st_trade_book.c_prd_typ == SLTP_FUTUREPLUS || st_trade_book.c_prd_typ == OPTIONPLUS ||		/** Added in Ver 3.4 **/ 	
	   st_trade_book.c_prd_typ == FUTURES || st_trade_book.c_prd_typ == OPTIONS)
	{
	   MEMSET(st_cvr_xchngbk);
		 /************* Commented in Ver 4.0 ***
	   EXEC SQL
			 SELECT	 fxb_rms_prcsd_flg,
							 fxb_mdfctn_cntr
			 INTO		 :frsh_rms_prcsd_flg,
							 :mdfctn_cntr
			 FROM			FXB_FO_XCHNG_BOOK
			 WHERE		FXB_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc
			 AND			FXB_MDFCTN_CNTR = (select max(FXB_MDFCTN_CNTR)
			 FROM			FXB_FO_XCHNG_BOOK
			 WHERE		FXB_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc);  *** Ver 4.0 *********/
			 /***** Ver 4.0 Starts *********/
		  EXEC SQL
			SELECT  FXB_RMS_PRCSD_FLG,			/***	Ver 4.5	***/
							FXB_MDFCTN_CNTR
			INTO		:frsh_rms_prcsd_flg,
							:mdfctn_cntr
			FROM    FXB_FO_XCHNG_BOOK
			WHERE		FXB_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc
			AND    FXB_MDFCTN_CNTR = (SELECT MIN(FXB_MDFCTN_CNTR)
																FROM	 FXB_FO_XCHNG_BOOK
																WHERE	 FXB_ORDR_RFRNC= :st_trade_book.c_ordr_rfrnc
																AND		 FXB_JIFFY     = (SELECT MIN(FXB_JIFFY)
																												FROM	 FXB_FO_XCHNG_BOOK
																												WHERE	 FXB_ORDR_RFRNC= :st_trade_book.c_ordr_rfrnc
												 																AND		 FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg)/*** Ver 4.5 Hard Code Value Replaced by Bind Variable ***/
																AND			FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg)/*** Ver 4.5 Hard Code Value Replaced by Bind Variable ***/
			AND		FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg;/*** Ver 4.5 Hard Code Value Replaced by Bind Variable ***/;
			/**** Ver 4.0 ENDS ****/
     if(DEBUG_MSG_LVL_3) /*** Ver 3.6 ***/
     {
		 	 fn_userlog( c_ServiceName, "st_trade_book.c_ordr_rfrnc is :%s:",st_trade_book.c_ordr_rfrnc);
		 	 fn_userlog( c_ServiceName, "frsh_rms_prcsd_flg is :%c:",frsh_rms_prcsd_flg);
		 }
	
	   if(SQLCODE != 0)
	   {
				 /*********** Ver 4.0 Starts *****************/
				if( SQLCODE == NO_DATA_FOUND && (st_trade_book.c_prd_typ == SLTP_FUTUREPLUS || st_trade_book.c_prd_typ == OPTIONPLUS ))
			  {
					EXEC SQL
					SELECT  FXB_RMS_PRCSD_FLG,			/***	Ver 4.5	***/
									FXB_MDFCTN_CNTR
					INTO		:cvr_rms_prcsd_flg,
									:mdfctn_cntr
					FROM    FXB_FO_XCHNG_BOOK
					WHERE		FXB_ORDR_RFRNC = :c_cvr_ordr_rfrnc
					AND    FXB_MDFCTN_CNTR = (SELECT MIN(FXB_MDFCTN_CNTR)
																		FROM	 FXB_FO_XCHNG_BOOK
																		WHERE	 FXB_ORDR_RFRNC= :c_cvr_ordr_rfrnc
																		AND		 FXB_JIFFY     = (SELECT MIN(FXB_JIFFY)
																														FROM	 FXB_FO_XCHNG_BOOK
																														WHERE	 FXB_ORDR_RFRNC= :c_cvr_ordr_rfrnc
												 																		AND		 FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg)/*** Ver 4.5 Hard Code Value Replaced by Bind Variable ***/
																		AND	FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg)/*** Ver 4.5 Hard Code Value Replaced by Bind Variable ***/
					AND		FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg;/*** Ver 4.5 Hard Code Value Replaced by Bind Variable ***/
					if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
					{
						fn_errlog ( c_ServiceName, "S31680", SQLMSG, st_errmsg.c_err_msg );
						tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
						tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
						Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
						tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
					}
					/******** Ver 4.0 ENDS ***/
				/******* Commented in Ver 4.0 **
				fn_errlog ( c_ServiceName, "S31685", SQLMSG, st_errmsg.c_err_msg );
				** fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg ); Commented in Ver 3.9 **
				tpfree((char *)ptr_fml_Sbuf);  ** Added in Ver 3.9 **
				tpfree((char *)ptr_fml_IMsgbuf);  ** Added in Ver 3.9 **
				**** Commented in Ver 3.2 **
				tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  *
				*** Ver 3.2 Starts ***
        Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
				*** Ver 3.2 Ends ***  Ver 4.0 Ends *****/
			 } 
		 }
		 if( frsh_rms_prcsd_flg != 'N'  && cvr_rms_prcsd_flg != 'N' ) /***** cvr_rms_prcsd_flg check added in Ver 4.0 **/
		 {
			 fn_userlog( c_ServiceName, "No unprocessed record");
		 }
		 /*else if( frsh_rms_prcsd_flg == 'N' && mdfctn_cntr == 99)*/		
		 else if( frsh_rms_prcsd_flg == 'N' || cvr_rms_prcsd_flg =='N' )			/** Changed in Ver 3.4 **/  /***  cvr_rms_prcsd_flg =='N' added in Ver 4.0 ***/	
		 {
				MEMSET(st_cvr_xchngbk);
				if(DEBUG_MSG_LVL_3)   /*** Added in Ver 4.0 ***/ 
    		{
					fn_userlog( c_ServiceName, "unprocessed record exist so process it...");
				}		
				/**** Ver 4.0 Starts  ***/
				if( frsh_rms_prcsd_flg == 'N' )
				{
					strcpy(c_ordr_rfrnc_core,st_trade_book.c_ordr_rfrnc);
				}
				else if(cvr_rms_prcsd_flg == 'N')
				{
					strcpy(c_ordr_rfrnc_core,c_cvr_ordr_rfrnc);
				}
				if(DEBUG_MSG_LVL_3)   /*** Added in Ver 4.0 ***/ 
				{
					fn_userlog(c_ServiceName,"c_ordr_rfrnc_core  :%s:",c_ordr_rfrnc_core);
				}
				/**** Ver 4.0  Ends ***/
				/****** Commented in Ver 4.0 **
				EXEC SQL
					SELECT	FXB_ORS_MSG_TYP,
									FXB_MDFCTN_CNTR,
									nvl(to_char(FXB_ACK_TM, 'dd-mon-yyyy hh24:mi:ss'),'*')
					INTO    :st_cvr_xchngbk.l_ors_msg_typ,
									:st_cvr_xchngbk.l_mdfctn_cntr,
									:st_cvr_xchngbk.c_ack_tm
					FROM		FXB_FO_XCHNG_BOOK
					WHERE		FXB_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc
					AND			fxb_mdfctn_cntr = (select max(FXB_MDFCTN_CNTR)
					FROM		FXB_FO_XCHNG_BOOK
					WHERE		FXB_ORDR_RFRNC = :st_trade_book.c_ordr_rfrnc) 
					AND			FXB_RMS_PRCSD_FLG = 'N'; ** Ver 4.0 ***/
					/**** Ver 4.0 Starts ********/
					EXEC SQL
					SELECT  FXB_ORS_MSG_TYP,			/***	Ver 4.5	***/
									FXB_MDFCTN_CNTR,
									NVL(TO_CHAR(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'),'*'),
             			NVL(FXB_XCHNG_CNCLD_QTY,0)                                  /** Ver 4.1 **/ 
				  INTO		:st_cvr_xchngbk.l_ors_msg_typ,
									:st_cvr_xchngbk.l_mdfctn_cntr,
									:st_cvr_xchngbk.c_ack_tm,
             			:st_cvr_xchngbk.l_xchng_can_qty                             /** ver 4.1 ***/ 
					FROM    FXB_FO_XCHNG_BOOK
					WHERE		FXB_ORDR_RFRNC = :c_ordr_rfrnc_core
					AND    FXB_MDFCTN_CNTR = (SELECT MIN(FXB_MDFCTN_CNTR)
																		FROM	 FXB_FO_XCHNG_BOOK
																		WHERE	 FXB_ORDR_RFRNC= :c_ordr_rfrnc_core
																		AND		 FXB_JIFFY     = (SELECT MIN(FXB_JIFFY)
																														FROM	 FXB_FO_XCHNG_BOOK
																														WHERE	 FXB_ORDR_RFRNC= :c_ordr_rfrnc_core
												 																		AND		 FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg)/*** Ver 4.5 Hard Code Value Replaced by Bind Variable ***/
																		AND		FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg )/*** Ver 4.5 Hard Code Value Replaced by Bind Variable ***/
					AND		FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg;/*** Ver 4.5 Hard Code Value Replaced by Bind Variable ***/
         /***** Ver 4.0 Ends ******/
				if(SQLCODE !=0 )
				{
					fn_userlog( c_ServiceName, "No opposite leg unprocessed record");
					fn_errlog ( c_ServiceName, "S31690", SQLMSG, st_errmsg.c_err_msg );
					tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
					tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
					/** fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg ); Commented in Ver 3.9 **/
					/**** Commented in Ver 3.2 **
				  tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
				 /*** Ver 3.2 Starts ***/
          Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
          tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
					/*** Ver 3.2 Ends ***/
				}
				else
				{
					fn_userlog( c_ServiceName, "Opposite leg unprocessed record exist so process it...");
				}

				fn_cpy_ddr ( st_cvr_xchngbk.c_rout_crt );
				strcpy(st_cvr_xchngbk.c_entry_dt_tm,st_cvr_xchngbk.c_ack_tm);

				/** l_ftd_ord_exe_qty = 0 ; *** Ver 3.5 ** Commented in ver 4.1 *****

				EXEC SQL
					SELECT  NVL(SUM(ftd_exctd_qty),0)  *** NVL added in Ver 3.5 ***
					INTO		:l_ftd_ord_exe_qty
					FROM		ftd_fo_trd_dtls
					***WHERE		ftd_ordr_rfrnc = :st_trade_book.c_ordr_rfrnc; Commented in Ver 4.0 ***
					WHERE    ftd_ordr_rfrnc=:c_ordr_rfrnc_core; *** Ver 4.0 ***

				if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
				{
					fn_errlog ( c_ServiceName, "S31695", SQLMSG, ptr_st_err_msg->c_err_msg );
					** fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg ); Commented in Ver 3.9 **
					tpfree((char *)ptr_fml_Sbuf);  ** Added in Ver 3.9 **
					tpfree((char *)ptr_fml_IMsgbuf);  ** Added in Ver 3.9 **
					** tpreturn(TPFAIL, ERR_BFR, (char *)&ptr_st_err_msg, 0, 0 ); Commented in Ver 3.9 ***
					Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0);  ** Added in Ver 3.9 **
					tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); ** Added in Ver 3.9 **
				}

        if(DEBUG_MSG_LVL_3) *** Ver 3.6 ***
        {
					fn_userlog( c_ServiceName, "l_ftd_ord_exe_qty: %ld",l_ftd_ord_exe_qty);
				}

				******** Commented in ver 4.1 ******/

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
				if(DEBUG_MSG_LVL_2)
				{
					fn_userlog( c_ServiceName, "Before Calling  SFO_PRCS_RSP for Order Ref:%s:", st_trade_book.c_ordr_rfrnc);
					fn_userlog( c_ServiceName, "st_cvr_xchngbk.c_entry_dt_tm:%s:", st_cvr_xchngbk.c_entry_dt_tm);
					fn_userlog( c_ServiceName, "st_cvr_xchngbk.c_ack_tm:%s:", st_cvr_xchngbk.c_ack_tm);
					fn_userlog( c_ServiceName, "st_cvr_xchngbk.l_mdfctn_cntrm:%ld:", st_cvr_xchngbk.l_mdfctn_cntr);
					fn_userlog( c_ServiceName, "st_cvr_xchngbk.l_ors_msg_typ:%ld:", st_cvr_xchngbk.l_ors_msg_typ);
				}

				i_xchngbkerr [0] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)st_cvr_xchngbk.c_rout_crt,0);
				i_ferr[0] = Ferror32;
				/**i_xchngbkerr [1] = Fadd32(ptr_fml_Sbuf,FFO_ORDR_RFRNC, (char *)st_trade_book.c_ordr_rfrnc,0); Commented in Ver 4.0 **/
				i_xchngbkerr [1] = Fadd32(ptr_fml_Sbuf,FFO_ORDR_RFRNC, (char *)c_ordr_rfrnc_core,0); /*** Added in Ver 4.0 ***/
				i_ferr[1] = Ferror32;
				i_xchngbkerr [2] = Fadd32(ptr_fml_Sbuf,FFO_ORS_MSG_TYP, (char *)&st_cvr_xchngbk.l_ors_msg_typ,0);
				i_ferr[2] = Ferror32;
				i_xchngbkerr [3] = Fadd32(ptr_fml_Sbuf,FFO_MDFCTN_CNTR, (char *)&st_cvr_xchngbk.l_mdfctn_cntr,0);
				i_ferr[3] = Ferror32;
				i_xchngbkerr [4] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM, (char *)st_cvr_xchngbk.c_ack_tm,0);
				i_ferr[4] = Ferror32;
				i_xchngbkerr [5] = Fadd32(ptr_fml_Sbuf,FFO_PREV_ACK_TM, (char *)st_cvr_xchngbk.c_entry_dt_tm,0);
				i_ferr[5] = Ferror32;
				/** i_xchngbkerr [6] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CAN_QTY, (char *)&l_ftd_ord_exe_qty,0); Commented in Ver 4.1 ***/
				i_xchngbkerr [6] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CAN_QTY, (char *)&st_cvr_xchngbk.l_xchng_can_qty,0); /** Ver 4.1 **/
				i_ferr[6] = Ferror32;

				for (i = 0;i < 7 ;i++)
				{
					if(i_xchngbkerr[i] == -1 )
					{
						fn_userlog( c_ServiceName, "Error in :%d:",i );
						tpfree((char *)ptr_fml_Sbuf);
						tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
						fn_errlog ( c_ServiceName, "S31700", FMLMSG, st_errmsg.c_err_msg ); /** VQC chngd from SQLMSG to FMLMSG **/
						/** fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg ); Commented in Ver 3.9 **/
						/**** Commented in Ver 3.2 **
						tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
						/*** Ver 3.2 Starts ***/
            Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
            tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
						/*** Ver 3.2 Ends ***/
					}
				}


  		if(DEBUG_MSG_LVL_3) /*** Ver 3.6 ***/
  		{
				fn_userlog(c_ServiceName,"calling SFO_PRCS_RSP for st_trade_book.c_ordr_rfrnc : %s", st_trade_book.c_ordr_rfrnc);
			}

			i_returncode  = tpacall ( "SFO_PRCS_RSP", (char *)ptr_fml_Sbuf,0, TPNOTRAN|TPNOREPLY);

			if ( i_returncode != SUCC_BFR )
			{
				fn_userlog( c_ServiceName, "Error while calling SFO_PRCS_RSP");
				fn_errlog ( c_ServiceName, "S31705", TPMSG, st_errmsg.c_err_msg );   /** VQC SQLMSG chngd to TPMSG **/
				/** fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg ); Commented in Ver 3.9 **/
				tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
				tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
				/**** Commented in Ver 3.2 **
		    tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
				/*** Ver 3.2 Starts ***/
        Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
				/*** Ver 3.2 Ends ***/
			}
		}
	}
	/** Ver 2.9 Ends**/ 	

  /*** Ver 6.0 starts ***/
  if(st_trade_book.c_prd_typ == SLTP_FUTUREPLUS && (c_fc_flg == 'C' || c_fc_flg == 'T') )
  {
    fn_userlog( c_ServiceName, "Cancel Cover/Profit for fresh ref:%s:",c_frsh_ordr_rfrnc);
    if (c_fc_flg == 'C')
    {
      EXEC SQL
        select FOD_ORDR_RFRNC
        INTO
        :c_can_ordr_ref
        from FOD_FO_ORDR_DTLS
        where
        FOD_FC_FLAG= 'T'
        and FOD_ORDR_STTS in ('R','Q','P','O')
        and DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_frsh_ordr_rfrnc;
    }
    else if (c_fc_flg == 'T')
    {
      EXEC SQL
        select FOD_ORDR_RFRNC
        INTO
        :c_can_ordr_ref
        from FOD_FO_ORDR_DTLS
        where
        FOD_FC_FLAG= 'C'
        and FOD_ORDR_STTS in ('R','Q','P','O')
        and DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_frsh_ordr_rfrnc;
    }

    if(SQLCODE !=0 && SQLCODE !=NO_DATA_FOUND)
    {
      tpfree((char *)ptr_fml_Sbuf);
      tpfree((char *)ptr_fml_IMsgbuf);
      fn_errlog ( c_ServiceName, "S31710", SQLMSG, st_errmsg.c_err_msg );
      Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
    }

    if( c_fc_flg == 'T' && st_ordrbk.c_ordr_stts == 'P' && SQLCODE == NO_DATA_FOUND)
    {
      strcpy(c_can_ordr_ref, st_trade_book.c_ordr_rfrnc);
    }
    if (SQLCODE != NO_DATA_FOUND || (c_fc_flg == 'T' && st_ordrbk.c_ordr_stts == 'P') )
    {
      if( c_fc_flg == 'T' && st_ordrbk.c_ordr_stts  == 'P' )
      {
      fn_userlog( c_ServiceName, "st_trade_book.c_ordr_rfrnc is:%s:",st_trade_book.c_ordr_rfrnc);

        EXEC SQL
        SELECT  ( PAR_FO_PRFT_ORD_COOLIN_SEC - ( ( SYSDATE - MIN(FTD_TRD_DT) ) * 86400 ) ) * 1000
        INTO    :i_sleep_msec
        FROM    FTD_FO_TRD_DTLS, PAR_SYSTM_PRMTR
        WHERE   FTD_ORDR_RFRNC  = :st_trade_book.c_ordr_rfrnc
        GROUP BY PAR_FO_PRFT_ORD_COOLIN_SEC;

        if(SQLCODE !=0 && SQLCODE !=NO_DATA_FOUND)
        {
          fn_errlog ( c_ServiceName, "S31715", SQLMSG, ptr_st_err_msg->c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
        }

        if( i_sleep_msec > 0 )
        {

          fn_userlog( c_ServiceName, "Sleep in profit partExec - Place Cancellation of :%s:",c_can_ordr_ref);
          fn_userlog( c_ServiceName,"Sleep time |%ld|",i_sleep_msec);

          ptr_fml_Rbuf = ( FBFR32 * ) tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );
          if ( ptr_fml_Rbuf == NULL )
          {
            fn_errlog ( c_ServiceName, "S31720", TPMSG, ptr_st_err_msg->c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
          }

          strcpy(c_sys_msg,"SYS_EVENT");
          strcpy(c_remarks,"System placed Cancellation");
          c_nkd_blkd_flg='Z';
          i_returncode = fn_pack_vartofml ( c_ServiceName,
                                            c_err_msg,
                                            &ptr_fml_Rbuf,
                                            11,
                                            FFO_USR_ID, (char *)st_pstnactn.c_user_id,
                                            FFO_SSSN_ID, (char *)&st_pstnactn.l_session_id,
                                            FFO_XCHNG_CD,(char *)st_pstnactn.c_xchng_cd,
                                            FFO_EBA_MTCH_ACT_NO,(char *)st_pstnactn.c_cln_mtch_accnt,
                                            FFO_ORDR_RFRNC, (char *)c_can_ordr_ref,
                                            FFO_XCHNG_RMRKS, (char *)c_remarks,
                                            FFO_CHANNEL,(char *)st_pstnactn.c_channel,
                                            FFO_ALIAS,(char *)st_pstnactn.c_alias,
                                            FFO_PIPE_ID, (char *)st_ordrbk.c_pipe_id,
                                            FFO_MKT_TYP,(char *)&c_nkd_blkd_flg,
                                            FFO_SYS_MSG, (char *)c_sys_msg);

          if(i_returncode == -1)
          {
            fn_userlog( c_ServiceName,"Error while calling fn_pack_vartofml  function..... for :%s:",c_can_ordr_ref);
            fn_errlog ( c_ServiceName, "S31725", LIBMSG, ptr_st_err_msg->c_err_msg );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
          }
          fn_userlog( c_ServiceName,"Calling fn_fno_sleep....");

          i_returncode =  fn_fno_sleep( c_ServiceName,
                                       &ptr_fml_Rbuf,
                                       (double)i_sleep_msec,
                                       1,
                                       st_trade_book.c_ordr_rfrnc,
                                       "SFO_SPN_CANCEL",
                                       c_err_msg);
          if(i_returncode == -1)
          {
            fn_userlog( c_ServiceName,"Error in calling sleep function..... for :%s:",c_can_ordr_ref);
            fn_errlog ( c_ServiceName, "S31730", LIBMSG, ptr_st_err_msg->c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
          }
          fn_userlog( c_ServiceName,"After Calling fn_fno_sleep....");
          tpfree(( char *)ptr_fml_Rbuf);
       }
       else
       {

        fn_userlog( c_ServiceName, "Place Cancellation directly without sleeping for :%s:",c_can_ordr_ref);
        strcpy(c_remarks,"System placed Cancellation");
        strcpy(c_sys_msg,"SYS_EVENT");
        c_nkd_blkd_flg='Z';
        i_returncode = fn_acall_svc_fml ( c_ServiceName,
                                       ptr_st_err_msg->c_err_msg,
                                       "SFO_SPN_CANCEL",
                                       0,
                                       11,
                                       FFO_USR_ID, (char *)st_pstnactn.c_user_id,
                                       FFO_SSSN_ID, (char *)&st_pstnactn.l_session_id,
                                       FFO_XCHNG_CD,(char *)st_pstnactn.c_xchng_cd,
                                       FFO_EBA_MTCH_ACT_NO,(char *)st_pstnactn.c_cln_mtch_accnt,
                                       FFO_ORDR_RFRNC, (char *)c_can_ordr_ref,
                                       FFO_XCHNG_RMRKS, (char *)c_remarks,
                                       FFO_CHANNEL,(char *)st_pstnactn.c_channel,
                                            FFO_MKT_TYP,(char *)&c_nkd_blkd_flg,
                                       FFO_ALIAS,(char *)st_pstnactn.c_alias,
                                       FFO_PIPE_ID, (char *)st_ordrbk.c_pipe_id,
                                       FFO_SYS_MSG, (char *)c_sys_msg);
        if ( i_returncode != SUCC_BFR )
        {
          fn_errlog ( c_ServiceName, "S31735", LIBMSG, ptr_st_err_msg->c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
        }
       }
      }
      else
      {
        fn_userlog( c_ServiceName, "Place Cancellation directly of :%s:",c_can_ordr_ref);
        strcpy(c_remarks,"System placed Cancellation");
        strcpy(c_sys_msg,"SYS_EVENT");
        c_nkd_blkd_flg='Z';

        i_returncode = fn_acall_svc_fml ( c_ServiceName,
                                       ptr_st_err_msg->c_err_msg,
                                       "SFO_SPN_CANCEL",
                                       0,
                                       11,
                                       FFO_USR_ID, (char *)st_pstnactn.c_user_id,
                                       FFO_SSSN_ID, (char *)&st_pstnactn.l_session_id,
                                       FFO_XCHNG_CD,(char *)st_pstnactn.c_xchng_cd,
                                       FFO_EBA_MTCH_ACT_NO,(char *)st_pstnactn.c_cln_mtch_accnt,
                                       FFO_ORDR_RFRNC, (char *)c_can_ordr_ref,
                                       FFO_XCHNG_RMRKS, (char *)c_remarks,
                                            FFO_MKT_TYP,(char *)&c_nkd_blkd_flg,
                                       FFO_CHANNEL,(char *)st_pstnactn.c_channel,
                                       FFO_ALIAS,(char *)st_pstnactn.c_alias,
                                       FFO_PIPE_ID, (char *)st_ordrbk.c_pipe_id,
                                       FFO_SYS_MSG, (char *)c_sys_msg);
        if ( i_returncode != SUCC_BFR )
        {
          fn_errlog ( c_ServiceName, "S31740", LIBMSG, ptr_st_err_msg->c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
        }
      }
    }
  }
  /*** Ver 6.0 ends ***/

	
	if(st_trade_book.c_prd_typ != SLTP_FUTUREPLUS && st_trade_book.c_prd_typ != OPTIONPLUS ) /** Ver 1.5 **/  /*** Check added for OptionPlus  in Ver 2.0 ***/
	{																								/** Ver 1.5 **/	
	
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"2. st_pstnactn.c_mtm_flag = :%c:",st_pstnactn.c_mtm_flag);
  }

  if(DEBUG_MSG_LVL_3)
  {
   fn_userlog(c_ServiceName,"Physical delivery mtm flag before service call :%c:",c_dlv_mtm_flag);  /**5.1***/
  }

	if ( st_pstnactn.c_mtm_flag == NO_OPEN_ORDERS )
  {
		/***********************************************************************************************************
			 This change is added by Shailesh on 10-Jan-2011, because we dont want to burden system in case there 
			 are multiple trades of system placed order...and each trade shall not call sfo_prcs_simtm...only 
			 last trade shall ideally call sfo_prcs_simtm     
		***********************************************************************************************************/

		if( st_ordrbk.c_ordr_stts != EXECUTED)
		{
			fn_userlog(c_ServiceName,"Still Some System Square off trades pending, coming out of loop...");
			/** tpfree ( ( char * ) &st_errmsg ); Commented in Ver 3.9 **/
			tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
			fn_userlog(c_ServiceName,"********** END SFO_PRCS_TRD ***********");
			tpreturn ( TPSUCCESS, SUCC_BFR, NULL, 0, 0 );
		}

  	sprintf(st_pstnactn.c_imtm_rmrks,
		"SQUAREOFF ORDER [%s] EXECUTED ,TRADE REF - [%s], QTY - [%ld]", 
		st_trade_book.c_ordr_rfrnc, 
		st_trade_book.c_trd_rfrnc,
		st_trade_book.l_exctd_qty );

		sprintf( c_tag,"bat_intra_mtm_%s",st_pstnactn.c_xchng_cd);

    i_returncode = fn_acall_svc_fml (	 c_ServiceName,
                                       st_errmsg.c_err_msg,
                                       "SFO_PRCS_SIMTM",
                                       /***0, *** Ver 4.3 ***/
                                       TPNOTRAN|TPNOREPLY, /*** Ver 4.3 ***/
                                       6,			
																			 FFO_XCHNG_CD, ( char * )st_pstnactn.c_xchng_cd,
																			 FFO_EBA_MTCH_ACT_NO, ( char *)st_pstnactn.c_cln_mtch_accnt,
																			 FFO_UNDRLYNG, ( char * )st_pstnactn.c_undrlyng,
																			 FFO_CTGRY_INDSTK, ( char * )&st_pstnactn.c_ctgry_indstk,
																			 FFO_IMTM_RMRKS, ( char * )st_pstnactn.c_imtm_rmrks,
																			 FFO_PIPE_ID, ( char * )st_ordrbk.c_pipe_id);
    if ( i_returncode != SUCC_BFR )
    {
  		fn_errlog ( c_ServiceName, "S31745", LIBMSG, st_errmsg.c_err_msg );
			fn_userlog(c_ServiceName,"Error in SFO_PRCS_SIMTM...");
			tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
     	/**** Commented in Ver 3.2 **
      tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 ); */
			/*** Ver 3.2 Starts ***/
      Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
			/*** Ver 3.2 Ends ***/
    }
  }
       /******* 5.1 starts *********/
  else if( c_dlv_mtm_flag == NO_PHYDLVRY_OPEN_ORDERS )
  {
     c_reqst_typ='I';
     c_spn1_flg='Y';
 
     if(DEBUG_MSG_LVL_3)
     { 
      fn_userlog(c_ServiceName,"Values passed to service");
      fn_userlog(c_ServiceName," st_pstnactn.c_cln_mtch_accnt :%s:",st_pstnactn.c_cln_mtch_accnt);
      fn_userlog(c_ServiceName,"st_pstnactn.c_xchng_cd :%s:",st_pstnactn.c_xchng_cd);
      fn_userlog(c_ServiceName," st_pstnactn.c_prd_typ :%c:",st_pstnactn.c_prd_typ);
      fn_userlog(c_ServiceName,"st_pstnactn.c_undrlyng :%s:",st_pstnactn.c_undrlyng);
      fn_userlog(c_ServiceName,"st_pstnactn.c_expry_dt :%s:",st_pstnactn.c_expry_dt);
      fn_userlog(c_ServiceName,"st_pstnactn.c_exrc_typ :%c:",st_pstnactn.c_exrc_typ);
      fn_userlog(c_ServiceName,"st_pstnactn.c_opt_typ :%c:",st_pstnactn.c_opt_typ);
      fn_userlog(c_ServiceName,"st_pstnactn.l_strike_prc :%ld:",st_pstnactn.l_strike_prc);
      fn_userlog(c_ServiceName,"st_pstnactn.c_ctgry_indstk :%c:",st_pstnactn.c_ctgry_indstk);
      fn_userlog(c_ServiceName," c_reqst_typ :%c:",c_reqst_typ);
      fn_userlog(c_ServiceName,"c_spn_flg :%c:",c_spn_flg);
     }
     
      strcpy(c_call_typ,"TRD"); /** Ver 5.8 **/
 
     i_returncode = fn_acall_svc_fml ( c_ServiceName,
                                      c_err_msg,
                                      "SFO_DLVMRG_PRC",
                                      TPNOTRAN|TPNOREPLY,
                                      12, /** Change to 12 from 11 in Ver 5.8 **/
                                      FFO_EBA_MTCH_ACT_NO, ( char *)st_pstnactn.c_cln_mtch_accnt,
                                      FFO_XCHNG_CD, ( char * )st_pstnactn.c_xchng_cd,
                                      FFO_PRDCT_TYP, ( char * )&st_pstnactn.c_prd_typ,
                                      FFO_UNDRLYNG, ( char * )st_pstnactn.c_undrlyng,
                                      FFO_EXPRY_DT, ( char * )st_pstnactn.c_expry_dt,
                                      FFO_EXER_TYP, ( char * )&st_pstnactn.c_exrc_typ,
                                      FFO_OPT_TYP, ( char * )&st_pstnactn.c_opt_typ,
                                      FFO_STRK_PRC, ( char * )&st_pstnactn.l_strike_prc,
                                      FFO_CTGRY_INDSTK, ( char * )&st_pstnactn.c_ctgry_indstk,
                                      FFO_RQST_TYP, (char *)&c_reqst_typ,
                                      FFO_STATUS_FLG,(char *) &c_spn1_flg,
                                      FFO_USER_CODE,(char *) c_call_typ ); /** Added in Ver 5.8 **/

   if ( i_returncode == -1 )
   {
      fn_userlog(c_ServiceName,"Error in calling delivery margin process");
      fn_errlog ( c_ServiceName, "S31750", LIBMSG, st_errmsg.c_err_msg );
      fn_userlog(c_ServiceName,"Error in SFO_DLVMRG_PRCS...");
      tpfree((char *)ptr_fml_Sbuf);
      tpfree((char *)ptr_fml_IMsgbuf);
      Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 );
   }

  }
  /******* 5.1 ends ***********/ 

    /**** Ver 5.8 Starts ****/
  
       if ( c_spl_flg == 'L' )
       {
         fn_userlog(c_ServiceName," Calling fn_mrgn_shrtfll_sms_mail ....");

         i_returncode = fn_mrgn_shrtfll_sms_mail ( c_ServiceName,
                                                   st_pstnactn.c_cln_mtch_accnt,
                                                   st_pstnactn.c_xchng_cd,
                                                   st_pstnactn.c_prd_typ, 
                                                   st_pstnactn.c_ctgry_indstk,
                                                   st_pstnactn.c_undrlyng,
                                                   st_pstnactn.c_expry_dt,
                                                   st_pstnactn.c_exrc_typ,
                                                   st_pstnactn.c_opt_typ,
                                                   st_pstnactn.l_strike_prc,
                                                  'L');
        if ( i_returncode != 0 )
        {
          fn_userlog(c_ServiceName,"Error in Margin_shrtfll SMS ..");
          fn_errlog ( c_ServiceName, "S31755", LIBMSG, st_errmsg.c_err_msg );
        } 
      }
        /**** Ver 5.8 Ends ****/



	if ( c_popup_app_flg == 'Y' )
	{
		i_returncode  = tpacall ( "SFO_CLNT_DUMP", (char *)ptr_fml_IMsgbuf,0, TPNOTRAN|TPNOREPLY);

		if ( i_returncode != 0 )
		{
			fn_errlog ( c_ServiceName, "S31760", TPMSG, st_errmsg.c_err_msg ); /** VQC LIBMSG chngd to TPMSG **/
			fn_userlog(c_ServiceName,"Error in SFO_CLNT_DUMP...");
    } 
		c_popup_app_flg ='N';

		sprintf(c_run_mode,"%d",RUN_SPAN_IMTM_IMPNL);

		c_rqst_typ = 'M';		/*** Ver 4.6 ***/

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
		if(DEBUG_MSG_LVL_2)
		{
			fn_userlog(c_ServiceName,"Call SFO_MARK_SIMTM with Operation type :%s:",c_run_mode);
		}
    sprintf(st_pstnactn.c_imtm_rmrks,"HEDGESQOFF"); /** ver 6.6 **/

		i_returncode = fn_acall_svc_fml (	 c_ServiceName,
                                       st_errmsg.c_err_msg,
                                       "SFO_MARK_SIMTM",
                                       /***0, *** Ver 4.3 ***/
                                       TPNOTRAN|TPNOREPLY, /*** Ver 4.3 ***/
                                       7,          /*** Changes from 6 to 7 in Ver 4.6 ***/			
																			 FFO_XCHNG_CD, ( char * )st_pstnactn.c_xchng_cd,
																			 FFO_EBA_MTCH_ACT_NO, ( char *)st_pstnactn.c_cln_mtch_accnt,
																			 FFO_UNDRLYNG, ( char * )st_pstnactn.c_undrlyng,
																			 FFO_CTGRY_INDSTK, ( char * )&st_pstnactn.c_ctgry_indstk,
																			 FFO_IMTM_RMRKS, ( char * )st_pstnactn.c_imtm_rmrks,
																			 FFO_OPERATION_TYP,(char *)c_run_mode,
																			 FFO_REQ_TYP, (char *)&c_rqst_typ ); /*** Ver 4.6 ***/

    if ( i_returncode != SUCC_BFR )
    {
  		fn_errlog ( c_ServiceName, "S31765", LIBMSG, st_errmsg.c_err_msg );
			fn_userlog(c_ServiceName,"Error in SFO_MARK_SIMTM...");
			tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
      /**** Commented in Ver 3.2 **
      tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
			/*** Ver 3.2 Starts ***/
      Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0);
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
			/*** Ver 3.2 Ends ***/
    }

	}
	
	}/* Ver 1.5 */

	/** tpfree ( ( char * ) &st_errmsg ); Commented in Ver 3.9 **/
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"********** END SFO_PRCS_TRD ***********");
	}

/*** Start for Ver 2.1 ***/

  if (st_ordrbk.c_ordr_stts == EXECUTED && !(strcmp(st_ordrbk.c_channel,"SYS") == 0 || strcmp(st_ordrbk.c_ctcl_id,"111111111111") == 0 || strcmp(st_ordrbk.c_ctcl_id,"1111111111111") == 0 || strcmp(st_ordrbk.c_ctcl_id,"333333333333") == 0))
  {


  if(DEBUG_MSG_LVL_3) /*** Ver 3.6 ***/
  {
    fn_userlog(c_ServiceName,"Inside SMS Condition");
  } 
		 d_ord_lmt_rt = (double) st_ordrbk.l_ord_lmt_rt;

    i_returncode = fn_acall_svc_fml ( c_ServiceName,
                                      st_errmsg.c_err_msg,
                                      "SVC_SET_SMSALRT",
                                      0,
                                      17,
                    FML_ORD_CLM_MTCH_ACCNT, (char *)st_ordrbk.c_cln_mtch_accnt,
                    FML_PRDCT_TYP, ( char * )&st_ordrbk.c_prd_typ,
                    FML_ORD_STCK_CD, ( char * )st_ordrbk.c_undrlyng,
                    FML_EXPIRY_DATE, (char *)st_ordrbk.c_expry_dt,
                    FML_ORD_PRDCT_TYP, (char *)&st_ordrbk.c_exrc_typ,
                    FML_TRN_PRDT_TYP, (char *)&st_ordrbk.c_opt_typ,
                    FML_TRADE_PRICE, (char *)&st_ordrbk.l_strike_prc,
                    FML_ORD_ORDR_RFRNC, (char *)st_ordrbk.c_ordr_rfrnc,
                    FML_TOTAL_QTY, (char *)&st_ordrbk.l_ord_tot_qty,
                    FML_ORD_TRD_DT, (char *)st_ordrbk.c_trd_dt,
                    FML_ORD_ORDR_STTS, (char *)&st_ordrbk.c_ordr_stts,
                    FML_EXEC_QTY, (char *)&st_ordrbk.l_exctd_qty,
                    FML_CANC_QTY, (char *)&st_ordrbk.l_can_qty,
                    FML_EXPR_QTY, (char *)&st_ordrbk.l_exprd_qty,
                    FML_ORD_ORDR_FLW,(char *)&st_ordrbk.c_ordr_flw,
                    FML_ORD_LMT_RT,(char *)&d_ord_lmt_rt,
                    FML_ORD_LMT_MRKT_FLG,(char *)&st_ordrbk.c_slm_flg);

    if ( i_returncode != SUCC_BFR )
    {
      fn_errlog ( c_ServiceName, "S31770", LIBMSG, st_errmsg.c_err_msg );
			tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
			tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
     	/**** Commented in Ver 3.2 **
      tpreturn ( TPFAIL, ERR_BFR, ( char * )&st_errmsg, 0, 0 );  */
			/*** Ver 3.2 Starts ***/
      Fadd32(ptr_fml_Itrdbkbuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0); 
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Itrdbkbuf, 0, 0 ); 
			/*** Ver 3.2 Ends ***/
    }

  }

  if(DEBUG_MSG_LVL_0) /*** Ver 3.6 ***/
  {
  	fn_userlog(c_ServiceName,"Successfully Completed");
	}
/*** End for Ver 2.1 ***/
	/*** tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )&st_trade_book, 0, 0 ); ***/
	tpfree((char *)ptr_fml_Sbuf);  /** Added in Ver 3.9 **/
	tpfree((char *)ptr_fml_IMsgbuf);  /** Added in Ver 3.9 **/
	tpreturn ( TPSUCCESS, SUCC_BFR, NULL, 0, 0 );
} 

int fn_spnupd_pos  (
               		   	char  *c_ServiceName,
                  		struct st_err_msg *ptr_st_err_msg,
                  		struct st_pstn_actn *ptr_st_pstn_actn,
                      char *c_dlv_mtm_flg					 /***** Ver 5.1 ****/
                		)
{
  int i_returncode =0;  /** VQC **/
	long l_frs_qty  = 0;		
	long l_cvr_qty  = 0;    
	char c_upos_flw[10] ="\0";  /** VQC **/
	char c_message[100] = "\0";
	char c_opr_typ ='\0'; /** VQC **/
  char c_mtm_flg = '\0';  /*** Ver 4.9 ***/

  char c_extra_update = '\0'; /***** ver 5.6 *****/
	double d_utrd_mrgn = 0.0;
	double d_umin_trd_mrgn = 0.0;
	double d_und_avail_mrgn = 0.0;
	double d_tot_profit_loss = 0.0;
   
  char c_fcp_mtm_flg='\0';          /***** Ver 5.1 ****/
  char c_new_dlv_mtm_flag='\0';   /*** Ver 5.1 ****/

  struct st_fus_undrlyng_pstn st_undfut_pos_crrnt;  /** VQC declare structure in local scope frm global **/

  /**********  VQC *************
  EXEC SQL BEGIN DECLARE SECTION;
    varchar c_trade_dt[12];
  EXEC SQL END DECLARE SECTION;
  *******************************/

  ptr_st_pstn_actn->c_mtm_flag = 'O'; /* default */

	rtrim(ptr_st_pstn_actn->c_cln_mtch_accnt);
	rtrim(ptr_st_pstn_actn->c_undrlyng);
	rtrim(ptr_st_pstn_actn->c_expry_dt);
	rtrim(ptr_st_pstn_actn->c_ref_rmrks);

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog ( c_ServiceName,"***********************START fn_spnupd_pos*************************");
  	fn_userlog ( c_ServiceName,"c_user_id 	     :%s:",ptr_st_pstn_actn->c_user_id );
  	fn_userlog ( c_ServiceName,"l_session_id      :%ld:",ptr_st_pstn_actn->l_session_id );
  	fn_userlog ( c_ServiceName,"c_cln_mtch_accnt :%s:",ptr_st_pstn_actn->c_cln_mtch_accnt );
  	fn_userlog ( c_ServiceName,"c_xchng_cd       :%s:",ptr_st_pstn_actn->c_xchng_cd );
  	fn_userlog ( c_ServiceName,"c_undrlyng       :%s:",ptr_st_pstn_actn->c_undrlyng );
  	fn_userlog ( c_ServiceName,"c_expry_dt       :%s:",ptr_st_pstn_actn->c_expry_dt );
  	fn_userlog ( c_ServiceName,"c_exrc_typ       :%c:",ptr_st_pstn_actn->c_exrc_typ );
  	fn_userlog ( c_ServiceName,"l_actn_typ       :%ld:",ptr_st_pstn_actn->l_actn_typ );
  	fn_userlog ( c_ServiceName,"c_trnsctn_flw    :%c:",ptr_st_pstn_actn->c_trnsctn_flw );
  	fn_userlog ( c_ServiceName,"l_orgnl_qty      :%ld:",ptr_st_pstn_actn->l_orgnl_qty );
  	fn_userlog ( c_ServiceName,"l_orgnl_rt       :%ld:",ptr_st_pstn_actn->l_orgnl_rt );
  	fn_userlog ( c_ServiceName,"l_new_qty        :%ld:",ptr_st_pstn_actn->l_new_qty );
  	fn_userlog ( c_ServiceName,"l_new_rt         :%ld:",ptr_st_pstn_actn->l_new_rt );
  	fn_userlog ( c_ServiceName,"l_exec_qty       :%ld:",ptr_st_pstn_actn->l_exec_qty );
  	fn_userlog ( c_ServiceName,"l_exec_rt        :%ld:",ptr_st_pstn_actn->l_exec_rt );
  	fn_userlog ( c_ServiceName,"l_fresh_qty      :%ld:",ptr_st_pstn_actn->l_fresh_qty );
  	fn_userlog ( c_ServiceName,"l_cover_qty      :%ld:",ptr_st_pstn_actn->l_cover_qty );
  	fn_userlog ( c_ServiceName,"l_curr_rt        :%ld:",ptr_st_pstn_actn->l_curr_rt );
  	fn_userlog ( c_ServiceName,"c_ref_rmrks      :%s:",ptr_st_pstn_actn->c_ref_rmrks );
		fn_userlog ( c_ServiceName,"c_prc_flg      :%c:",ptr_st_pstn_actn->c_nkd_blkd_flg );			
	}	

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
	if(DEBUG_MSG_LVL_2)
	{
		fn_userlog ( c_ServiceName, "Getting the current unerlying position" );
	}

	/*** Get underlying level position for the Exchange, client, underlying, into UPOS_crrnt ***/
  MEMSET(st_undfut_pos_crrnt); /** VQC **/

  EXEC SQL
    SELECT  FUS_CLM_MTCH_ACCNT,
            FUS_XCHNG_CD,
            FUS_INDSTK,
            FUS_UNDRLYNG,
            FUS_UIBUY_QTY,
            FUS_UIBUY_VAL,
            FUS_UISELL_QTY,
            FUS_UISELL_VAL,
            FUS_UEXBUY_QTY,
            FUS_UEXBUY_VAL,
            FUS_UEXSELL_QTY,
            FUS_UEXSELL_VAL,
            FUS_UBUY_EXCTD_QTY,
            FUS_USELL_EXCTD_QTY,
            FUS_UOPNPSTN_FLW,
            FUS_UOPNPSTN_QTY,
            FUS_UOPNPSTN_VAL,
            FUS_UMTM_OPN_VAL,
            FUS_INITIAL_MRGN,
            FUS_NET_OPTN_VAL,
						FUS_USPAN_WENOV_MRGN,
            NVL(FUS_MTM_FLG,'O'),
            NVL(FUS_MIN_MRGN,0),
		        FUS_BLCKD_PL,
            FUS_REQD_INITIAL_MRGN,
						FUS_EBA_EXPR_MRGN,
						FUS_SPAN_WEMULT_MRGN
    INTO    :st_undfut_pos_crrnt.c_cln_mtch_accnt,
            :st_undfut_pos_crrnt.c_xchng_cd,
            :st_undfut_pos_crrnt.c_indstk,
            :st_undfut_pos_crrnt.c_undrlyng,
            :st_undfut_pos_crrnt.l_uibuy_qty,
            :st_undfut_pos_crrnt.d_uibuy_val,
            :st_undfut_pos_crrnt.l_uisell_qty,
            :st_undfut_pos_crrnt.d_uisell_val,
            :st_undfut_pos_crrnt.l_uexbuy_qty,
            :st_undfut_pos_crrnt.d_uexbuy_val,
            :st_undfut_pos_crrnt.l_uexsell_qty,
            :st_undfut_pos_crrnt.d_uexsell_val,
            :st_undfut_pos_crrnt.l_ubuy_exctd_qty,
            :st_undfut_pos_crrnt.l_usell_exctd_qty,
            :st_undfut_pos_crrnt.c_uopnpstn_flw,
            :st_undfut_pos_crrnt.l_uopnpstn_qty,
            :st_undfut_pos_crrnt.d_uopnpstn_val,
            :st_undfut_pos_crrnt.d_umtm_opn_val,
            :st_undfut_pos_crrnt.d_initial_mrgn,
            :st_undfut_pos_crrnt.d_net_optn_val,
						:st_undfut_pos_crrnt.d_uspan_wenov_mrgn,
            /*** :ptr_st_pstn_actn->c_mtm_flag,	*** Commented in Ver 4.9 ***/
            :c_mtm_flg,                             /*** Ver 4.9 ***/
            :st_undfut_pos_crrnt.d_min_mrgn,
						:st_undfut_pos_crrnt.d_blckd_pl,
            :st_undfut_pos_crrnt.d_reqd_initial_mrgn,
						:st_undfut_pos_crrnt.d_eba_expr_mrgn,
						:st_undfut_pos_crrnt.d_span_wemult_mrgn
    FROM    FUS_FO_UNDRLYNG_SPN_PSTN
    WHERE   FUS_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
    AND     FUS_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
    AND     FUS_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng;

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31775", SQLMSG, ptr_st_err_msg->c_err_msg );
		fn_userlog ( c_ServiceName, "ERROR Getting the current unerlying position SQLCODE = :%ld:",SQLCODE );
		return -1;
  }

  ptr_st_pstn_actn->c_mtm_flag = c_mtm_flg;   /*** Ver 4.9 ***/

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
	if(DEBUG_MSG_LVL_2)
	{
		fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.c_uopnpstn_flw = %c",st_undfut_pos_crrnt.c_uopnpstn_flw );
		fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.l_uopnpstn_qty = %ld",st_undfut_pos_crrnt.l_uopnpstn_qty );
		fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.d_uopnpstn_val = %lf",st_undfut_pos_crrnt.d_uopnpstn_val );
		fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.d_umtm_opn_val = %lf",st_undfut_pos_crrnt.d_umtm_opn_val );
		fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.d_initial_mrgn = %lf",st_undfut_pos_crrnt.d_initial_mrgn );
		fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.d_net_optn_val = %lf",st_undfut_pos_crrnt.d_net_optn_val );
		fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.d_uspan_wenov_mrgn = %lf",st_undfut_pos_crrnt.d_uspan_wenov_mrgn );
		fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->c_mtm_flag = %c",ptr_st_pstn_actn->c_mtm_flag );
		fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.d_min_mrgn = %lf",st_undfut_pos_crrnt.d_min_mrgn );
		fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.d_blckd_pl = %lf",st_undfut_pos_crrnt.d_blckd_pl );
		fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.d_reqd_initial_mrgn = %lf",st_undfut_pos_crrnt.d_reqd_initial_mrgn );
	}

  /*** If a position doesnot exists, initialise the position values to default ***/
  if ( SQLCODE == NO_DATA_FOUND )
  {
    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
		if(DEBUG_MSG_LVL_2)
		{
			fn_userlog ( c_ServiceName, "INSIDE  position doesnot exists");
		}

		strcpy( st_undfut_pos_crrnt.c_cln_mtch_accnt,	ptr_st_pstn_actn->c_cln_mtch_accnt );
    strcpy( st_undfut_pos_crrnt.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
    strcpy( st_undfut_pos_crrnt.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
    st_undfut_pos_crrnt.c_indstk  = ptr_st_pstn_actn->c_ctgry_indstk;
    st_undfut_pos_crrnt.l_uibuy_qty = 0;
    st_undfut_pos_crrnt.d_uibuy_val = 0;
    st_undfut_pos_crrnt.l_uisell_qty = 0;
    st_undfut_pos_crrnt.d_uisell_val = 0;
    st_undfut_pos_crrnt.l_uexbuy_qty = 0;
    st_undfut_pos_crrnt.d_uexbuy_val = 0;
    st_undfut_pos_crrnt.l_uexsell_qty = 0;
    st_undfut_pos_crrnt.d_uexsell_val = 0;
    st_undfut_pos_crrnt.l_ubuy_exctd_qty = 0;
    st_undfut_pos_crrnt.l_usell_exctd_qty = 0;
    st_undfut_pos_crrnt.c_uopnpstn_flw = 'N';
    st_undfut_pos_crrnt.l_uopnpstn_qty = 0;
    st_undfut_pos_crrnt.d_uopnpstn_val = 0;
    st_undfut_pos_crrnt.d_umtm_opn_val = 0;
    st_undfut_pos_crrnt.d_initial_mrgn = 0;
    st_undfut_pos_crrnt.d_net_optn_val = 0;
  	st_undfut_pos_crrnt.d_uimtm_opn_val = 0;
  	st_undfut_pos_crrnt.d_min_mrgn = 0;
		st_undfut_pos_crrnt.d_blckd_pl	=	0;
		st_undfut_pos_crrnt.d_reqd_initial_mrgn	=	0;
    ptr_st_pstn_actn->c_mtm_flag = 'O';
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"3. ptr_st_pstn_actn->c_mtm_flag = :%c:",ptr_st_pstn_actn->c_mtm_flag);
	}

	if ( ( ptr_st_pstn_actn->c_mtm_flag == UNDER_MTM ) && ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 ) && ( ptr_st_pstn_actn->l_session_id != 0 ) )
	{
    fn_errlog(c_ServiceName, "B28009", DEFMSG, ptr_st_err_msg->c_err_msg );
		fn_userlog ( c_ServiceName, "ERROR..." );
		return -1;
	}

	/******** Set UPOS_to_be fields to default ********/
  strcpy( st_undfut_pos_to_be.c_cln_mtch_accnt,	ptr_st_pstn_actn->c_cln_mtch_accnt );
  strcpy( st_undfut_pos_to_be.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
  strcpy( st_undfut_pos_to_be.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
  st_undfut_pos_to_be.c_indstk  = ptr_st_pstn_actn->c_ctgry_indstk;
  st_undfut_pos_to_be.l_uibuy_qty = 0;
  st_undfut_pos_to_be.d_uibuy_val = 0;
  st_undfut_pos_to_be.l_uisell_qty = 0;
  st_undfut_pos_to_be.d_uisell_val = 0;
  st_undfut_pos_to_be.l_uexbuy_qty = 0;
  st_undfut_pos_to_be.d_uexbuy_val = 0;
  st_undfut_pos_to_be.l_uexsell_qty = 0;
  st_undfut_pos_to_be.d_uexsell_val = 0;
  st_undfut_pos_to_be.l_ubuy_exctd_qty = 0;
  st_undfut_pos_to_be.l_usell_exctd_qty = 0;
  st_undfut_pos_to_be.c_uopnpstn_flw = 'N';
  st_undfut_pos_to_be.l_uopnpstn_qty = 0;
  st_undfut_pos_to_be.d_uopnpstn_val = 0;
 	st_undfut_pos_to_be.d_umtm_opn_val			=	0 ;
	st_undfut_pos_to_be.d_uspan_wenov_mrgn 	= 0 ;
 	st_undfut_pos_to_be.d_uspan_nenov_mrgn 	=	0	;

 	st_undfut_pos_to_be.d_initial_mrgn			= st_undfut_pos_crrnt.d_initial_mrgn;
	st_undfut_pos_to_be.d_span_wemult_mrgn	= st_undfut_pos_crrnt.d_span_wemult_mrgn ;
 	st_undfut_pos_to_be.d_eba_expr_mrgn  		= st_undfut_pos_crrnt.d_eba_expr_mrgn ;
 	st_undfut_pos_to_be.d_multpr 						=	st_undfut_pos_crrnt.d_multpr ;
 	st_undfut_pos_to_be.d_net_optn_val 			=	st_undfut_pos_crrnt.d_net_optn_val ;
 	st_undfut_pos_to_be.d_min_mrgn 					=	st_undfut_pos_crrnt.d_min_mrgn ;
 	st_undfut_pos_to_be.d_blckd_pl 					=	st_undfut_pos_crrnt.d_blckd_pl ;
 	st_undfut_pos_to_be.d_reqd_initial_mrgn =	st_undfut_pos_crrnt.d_reqd_initial_mrgn ;

	l_frs_qty = 0;
  l_cvr_qty = 0;

  i_returncode  = fn_cal_spnfrscvr_qty ( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg );
  if ( i_returncode != 0 )
  {
		fn_userlog ( c_ServiceName, "ERROR...in function fn_cal_spnfrscvr_qty" );
	  return -1;
  }

	l_frs_qty = ptr_st_pstn_actn->l_fresh_qty;
	l_cvr_qty = ptr_st_pstn_actn->l_cover_qty;

  if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"The Fresh Qty is:%ld:",ptr_st_pstn_actn->l_fresh_qty);
		fn_userlog(c_ServiceName,"The Cover Qty is:%ld:",ptr_st_pstn_actn->l_cover_qty);
  }
    
	i_returncode 	= fn_call_spnactn_grp1 ( c_ServiceName, 
																				 c_pipe_id,
		                               			 ptr_st_pstn_actn, 
											         				   &st_undfut_pos_crrnt, 
											         			     &st_undfut_pos_to_be, 
                               			     ptr_st_err_msg,
                                         &c_fcp_mtm_flg  /*** Ver 5.1 ***/ 
																			 );

 	if ( i_returncode != 0 )
 	{
		/******** Ver 5.1 Added *******/
    switch( i_returncode )
    {
      case PHYDLVRY_MTM :

       fn_errlog(c_ServiceName, "B28009",DEFMSG, ptr_st_err_msg->c_err_msg);
       return -1;

       break;

      default :

      fn_userlog ( c_ServiceName, "ERROR...in function fn_call_spnactn_grp1" );
      return -1;
    }
    /******** Ver 5.1 Ended *****/
 	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"ptr_st_pstn_actn->c_mtm_flag set to  = :%c: after fn_call_spnactn_grp1()",ptr_st_pstn_actn->c_mtm_flag);
	}

	ptr_st_pstn_actn->l_fresh_qty = l_frs_qty;
	ptr_st_pstn_actn->l_cover_qty = l_cvr_qty;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Fresh Qty is:%ld:",ptr_st_pstn_actn->l_fresh_qty);
		fn_userlog(c_ServiceName,"Cover Qty is:%ld:",ptr_st_pstn_actn->l_cover_qty);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.l_uopnpstn_qty is:%ld:",st_undfut_pos_to_be.l_uopnpstn_qty);
  }
	
  if ( st_undfut_pos_to_be.l_uopnpstn_qty > 0 )
  {
		st_undfut_pos_to_be.c_uopnpstn_flw = BUY;
		strcpy(c_upos_flw,"Buy");
	}
	else if ( st_undfut_pos_to_be.l_uopnpstn_qty < 0 )
	{
		st_undfut_pos_to_be.c_uopnpstn_flw = SELL;
		strcpy(c_upos_flw,"Sell");
	}
  else
  {
		st_undfut_pos_to_be.c_uopnpstn_flw = NEUTRAL;
		strcpy(c_upos_flw,"Neutral");
  }	


	/** Update the underlying level position on to the table **/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_initial_mrgn :%lf:",st_undfut_pos_to_be.d_initial_mrgn);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_span_wemult_mrgn :%lf:",st_undfut_pos_to_be.d_span_wemult_mrgn );
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_eba_expr_mrgn :%lf:",st_undfut_pos_to_be.d_eba_expr_mrgn);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_uspan_wenov_mrgn :%lf:",st_undfut_pos_to_be.d_uspan_wenov_mrgn);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_multpr :%lf:",st_undfut_pos_to_be.d_multpr);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_uspan_nenov_mrgn :%lf:",st_undfut_pos_to_be.d_uspan_nenov_mrgn);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.c_mtm_flg :%c:",st_undfut_pos_to_be.c_mtm_flg);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.c_trd_dt :%s:",st_undfut_pos_to_be.c_trd_dt);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_min_mrgn :%lf:",st_undfut_pos_to_be.d_min_mrgn);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_reqd_initial_mrgn :%lf:",st_undfut_pos_to_be.d_reqd_initial_mrgn);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.c_uopnpstn_flw :%c:",st_undfut_pos_to_be.c_uopnpstn_flw);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_umtm_opn_val :%lf:",st_undfut_pos_to_be.d_umtm_opn_val);
		fn_userlog(c_ServiceName,"---1 . ptr_st_pstn_actn->c_mtm_flag :%c:",ptr_st_pstn_actn->c_mtm_flag);

		fn_userlog(c_ServiceName," INSIDE POSITION AVAILABLE");
	}

	c_mtm_flg = ptr_st_pstn_actn->c_mtm_flag;				/*** Ver 4.9 ***/
	
	EXEC SQL
		UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
		SET     FUS_UIBUY_QTY       	= :st_undfut_pos_to_be.l_uibuy_qty,
						FUS_UIBUY_VAL       	= :st_undfut_pos_to_be.d_uibuy_val,
						FUS_UISELL_QTY      	= :st_undfut_pos_to_be.l_uisell_qty,
						FUS_UISELL_VAL      	= :st_undfut_pos_to_be.d_uisell_val,
						FUS_UEXBUY_QTY      	= :st_undfut_pos_to_be.l_uexbuy_qty,
						FUS_UEXBUY_VAL      	= :st_undfut_pos_to_be.d_uexbuy_val,
						FUS_UEXSELL_QTY     	= :st_undfut_pos_to_be.l_uexsell_qty,
						FUS_UEXSELL_VAL     	= :st_undfut_pos_to_be.d_uexsell_val,
						FUS_UBUY_EXCTD_QTY  	= :st_undfut_pos_to_be.l_ubuy_exctd_qty,
						FUS_USELL_EXCTD_QTY 	= :st_undfut_pos_to_be.l_usell_exctd_qty,
						FUS_UOPNPSTN_FLW    	= :st_undfut_pos_to_be.c_uopnpstn_flw,
						FUS_UOPNPSTN_QTY    	= :st_undfut_pos_to_be.l_uopnpstn_qty,
						FUS_UOPNPSTN_VAL    	= :st_undfut_pos_to_be.d_uopnpstn_val,
						FUS_UMTM_OPN_VAL    	= :st_undfut_pos_to_be.d_umtm_opn_val,
						FUS_INITIAL_MRGN			=	:st_undfut_pos_to_be.d_initial_mrgn,
						FUS_SPAN_WEMULT_MRGN	=	:st_undfut_pos_to_be.d_span_wemult_mrgn,
						FUS_EBA_EXPR_MRGN			=	:st_undfut_pos_to_be.d_eba_expr_mrgn,
						FUS_USPAN_WENOV_MRGN	=	:st_undfut_pos_to_be.d_uspan_wenov_mrgn,
						FUS_MULTIPLIER				=	:st_undfut_pos_to_be.d_multpr,
						FUS_USPAN_NENOV_MRGN	=	:st_undfut_pos_to_be.d_uspan_nenov_mrgn,
						FUS_NET_OPTN_VAL			=	:st_undfut_pos_to_be.d_net_optn_val,
			 /*** FUS_MTM_FLG						=	:ptr_st_pstn_actn->c_mtm_flag, *** Commented in Ver 4.9 ***/
						FUS_MTM_FLG						=	:c_mtm_flg,											/*** Ver 4.9 ***/
						FUS_NTNL_PL						=	:st_undfut_pos_to_be.d_ntnl_pl,
						FUS_BLCKD_PL					=	:st_undfut_pos_to_be.d_blckd_pl,
						FUS_MIN_MRGN					=	:st_undfut_pos_to_be.d_min_mrgn,
						FUS_REQD_INITIAL_MRGN	=	:st_undfut_pos_to_be.d_reqd_initial_mrgn
		WHERE   FUS_CLM_MTCH_ACCNT  	= :ptr_st_pstn_actn->c_cln_mtch_accnt
		AND     FUS_XCHNG_CD        	= :ptr_st_pstn_actn->c_xchng_cd
		AND     FUS_UNDRLYNG        	= :ptr_st_pstn_actn->c_undrlyng;
		
	if ( SQLCODE != 0 )
	{
		fn_errlog(c_ServiceName, "S31780", SQLMSG, ptr_st_err_msg->c_err_msg );
		fn_userlog ( c_ServiceName, "ERROR...while updating FUS_FO_UNDRLYNG_SPN_PSTN SQLCODE = :%ld:",SQLCODE );
		return -1;
	}

 /********* ver 5.6 starts *********/
  c_extra_update = 'N';
  i_returncode  = fn_cal_trg_prc( c_ServiceName ,  ptr_st_pstn_actn,c_extra_update,
                                      ptr_st_err_msg  );

  if( i_returncode != 0 )
  {
        fn_errlog(c_ServiceName, "S31785", LIBMSG, c_err_msg );
        fn_userlog(c_ServiceName,"ERROR IN fn_cal_trg_prc");
  }
  /****** ver 5.6 ends *****/
	
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"4. ptr_st_pstn_actn->c_mtm_flag = :%c:",ptr_st_pstn_actn->c_mtm_flag);
	}

	if (c_popup_app_flg == 'Y')
	{

		d_utrd_mrgn = st_undfut_pos_to_be.d_initial_mrgn + st_undfut_pos_to_be.d_blckd_pl;

		if ( st_undfut_pos_to_be.d_ntnl_pl > 0 )
		{
			 d_und_avail_mrgn = d_utrd_mrgn;
		}
		else
		{
			d_und_avail_mrgn = d_utrd_mrgn + st_undfut_pos_to_be.d_ntnl_pl;
		}

		d_utrd_mrgn = trunc(d_utrd_mrgn);
		d_utrd_mrgn = (d_utrd_mrgn / 100.00 ) ;

		d_umin_trd_mrgn = trunc(st_undfut_pos_to_be.d_min_mrgn);
		d_umin_trd_mrgn = (d_umin_trd_mrgn / 100.00 );

		d_und_avail_mrgn = trunc(d_und_avail_mrgn);
		d_und_avail_mrgn = (d_und_avail_mrgn / 100.00 );

		d_tot_profit_loss = trunc(st_undfut_pos_to_be.d_ntnl_pl);
		d_tot_profit_loss = (d_tot_profit_loss / 100.00 );

		/*** XCHANGE_CD|MATCH_ACCOUNT|UNDERLYING|OPEN_POSITION_FLOW|OPEN_POSITION_QTY|BLOCKED_MARGIN|MINIMUM_MARGIN|AVAILABLE_MARGIN|NOTIONAL_PROFIT_LOSS| ***/
		sprintf(c_message,"%s|%s|%s|%s|%ld|%.2lf|%.2lf|%.2lf|%.2lf|",st_undfut_pos_to_be.c_xchng_cd,st_undfut_pos_to_be.c_cln_mtch_accnt,st_undfut_pos_to_be.c_undrlyng,c_upos_flw,st_undfut_pos_to_be.l_uopnpstn_qty,d_utrd_mrgn,d_umin_trd_mrgn,d_und_avail_mrgn,d_tot_profit_loss);
		
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"c_message = :%s:",c_message);
			fn_userlog(c_ServiceName,"st_undfut_pos_to_be.c_indstk =:%c:",st_undfut_pos_to_be.c_indstk);
		}

		EXEC SQL
			INSERT INTO TMP_SQOFF_DEFAULTER			/***	Ver 4.5	***/
					(	TMP_CLM_MTCH_ACCNT,
						TMP_XCHNG_CD,
						TMP_INDSTK,
						TMP_UNDRLYNG,
						TMP_PIPE_ID,
						TMP_MESSAGE,
						TMP_PROCESS_FLG
					)
			VALUES
					( :st_undfut_pos_to_be.c_cln_mtch_accnt,
						:st_undfut_pos_to_be.c_xchng_cd,
						:st_undfut_pos_to_be.c_indstk,
						:st_undfut_pos_to_be.c_undrlyng,
						:c_pipe_id,
						:c_message,
						'N'
					); 

		if ( SQLCODE != 0 )
		{
			fn_errlog(c_ServiceName, "S31790", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_userlog ( c_ServiceName, "ERROR...while inserting into TMP_SQOFF_DEFAULTER SQLCODE = :%ld:",SQLCODE );
			return -1;
		}

		/*** Commented on 01-Feb-2012
		EXEC SQL
		UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
		SET			FUS_MTM_FLG	= 'M' 
		WHERE   FUS_CLM_MTCH_ACCNT  	= :ptr_st_pstn_actn->c_cln_mtch_accnt
		AND     FUS_XCHNG_CD        	= :ptr_st_pstn_actn->c_xchng_cd
		AND     FUS_UNDRLYNG        	= :ptr_st_pstn_actn->c_undrlyng;

		if ( SQLCODE != 0 )
		{
			fn_errlog(c_ServiceName, "S31795", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_userlog ( c_ServiceName, "ERROR...while Updating FUS_MTM_FLG SQLCODE = :%ld:",SQLCODE );
			return -1;
		} ***/

		c_opr_typ = 'D';

		if ( Fadd32 (ptr_fml_IMsgbuf,FFO_USR_ID,(char *)ptr_st_pstn_actn->c_user_id,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31800",FMLMSG , ptr_st_err_msg->c_err_msg );
			return -1;
		}

		if ( Fadd32 (ptr_fml_IMsgbuf,FFO_SSSN_ID,(char *)&ptr_st_pstn_actn->l_session_id,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31805",FMLMSG , ptr_st_err_msg->c_err_msg );
			return -1;
		}

		if ( Fadd32 (ptr_fml_IMsgbuf,FFO_XCHNG_CD,(char *)ptr_st_pstn_actn->c_xchng_cd,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31810",FMLMSG , ptr_st_err_msg->c_err_msg );
			return -1;
		}

		if ( Fadd32 (ptr_fml_IMsgbuf,FFO_OPERATION_TYP,(char *)&c_opr_typ,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31815",FMLMSG , ptr_st_err_msg->c_err_msg );
			return -1;
		}

		if ( Fadd32 (ptr_fml_IMsgbuf,FFO_REMARKS,(char *)c_message,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31820",FMLMSG , ptr_st_err_msg->c_err_msg );
			return -1;
		}
	}

	if ( ( ptr_st_pstn_actn->c_mtm_flag == UNDER_MTM ) &&	( st_undfut_pos_to_be.l_uibuy_qty == 0 ) && ( st_undfut_pos_to_be.l_uexbuy_qty == 0 )  &&  
		   ( st_undfut_pos_to_be.l_uisell_qty == 0 )  && ( st_undfut_pos_to_be.l_uexsell_qty == 0 ) && 
			 ( strcmp(ptr_st_pstn_actn->c_channel,"SYS") == 0 )		/*** Ver 1.2 ***/
		 )
	{
		ptr_st_pstn_actn->c_mtm_flag = NO_OPEN_ORDERS;
	}
	else if ( ptr_st_pstn_actn->c_mtm_flag == UNDER_MTM )
	{
		ptr_st_pstn_actn->c_mtm_flag = FOR_REMARKS_ENTRY;
	}


      /***** Ver 5.1 starts *****/
    
    if(DEBUG_MSG_LVL_3)
    { 
     fn_userlog(c_ServiceName,"c_fcp_mtm_flg before Conditional statement :%c:",c_fcp_mtm_flg);
     fn_userlog(c_ServiceName," st_undfut_pos_to_be.l_uibuy_qty :%ld:",st_undfut_pos_to_be.l_uibuy_qty);
     fn_userlog(c_ServiceName,"st_undfut_pos_to_be.l_uexbuy_qty :%ld:",st_undfut_pos_to_be.l_uexbuy_qty);
     fn_userlog(c_ServiceName,"st_undfut_pos_to_be.l_uisell_qty :%ld:",st_undfut_pos_to_be.l_uisell_qty);
     fn_userlog(c_ServiceName,"st_undfut_pos_to_be.l_uexsell_qty :%ld:",st_undfut_pos_to_be.l_uexsell_qty);
     fn_userlog(c_ServiceName,"ptr_st_pstn_actn->c_channel :%s:",ptr_st_pstn_actn->c_channel);
    }

  if ( (c_fcp_mtm_flg == NO_PHYDLVRY_OPEN_ORDERS  ) && (strcmp(ptr_st_pstn_actn->c_channel,"SYS") == 0 )
     )
  {
    fn_userlog(c_ServiceName,"Inside UNDER_PHYDLVRY_MTM condition");
    c_new_dlv_mtm_flag = NO_PHYDLVRY_OPEN_ORDERS ;
    *c_dlv_mtm_flg=c_new_dlv_mtm_flag;
  }


     /**** Ver 5.1 ends *****/
  

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"5. ptr_st_pstn_actn->c_mtm_flag = :%c:",ptr_st_pstn_actn->c_mtm_flag);
		fn_userlog(c_ServiceName,"Channel is = :%s:",ptr_st_pstn_actn->c_channel);		/*** Ver 1.2 ***/

	}
	if(DEBUG_MSG_LVL_3)
	{
 		fn_userlog ( c_ServiceName,"*********************** END fn_spnupd_pos *************************");
  }
	return 0;
}


/************************************************************************************/
/** This function calculates the fresh and cover quantities												 **/
/************************************************************************************/
int fn_cal_spnfrscvr_qty(char *c_ServiceName,
                      struct st_pstn_actn *ptr_st_pstn_actn,
                      struct st_err_msg *ptr_st_err_msg)
{
	EXEC SQL BEGIN DECLARE SECTION;
    char  sql_cln_mtch_accnt[11]="\0"; /** VQC **/
    char  sql_xchng_cd[4] ="\0";       /** VQC **/
    char  sql_indstk='\0';             /** VQC **/
    char  sql_exrc_typ='\0';           /** VQC **/
    char  sql_undrlyng[7] ="\0";       /** VQC **/
    char  sql_expry_dt[LEN_DATE]="\0"; /** VQC **/
		char  sql_opt_typ='\0';            /** VQC **/
		char  sql_prd_typ ='\0';           /** VQC **/
		long  l_strike_prc =0;             /** VQC **/
    long  l_opnpstn_qty=0;             /** VQC **/
	EXEC SQL END DECLARE SECTION;

  strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
  strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
  sql_indstk = ptr_st_pstn_actn->c_ctgry_indstk;
  strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);
  sql_exrc_typ = ptr_st_pstn_actn->c_exrc_typ;
  strcpy(sql_expry_dt, ptr_st_pstn_actn->c_expry_dt);
  sql_opt_typ = ptr_st_pstn_actn->c_opt_typ;
  l_strike_prc = ptr_st_pstn_actn->l_strike_prc;
	sql_prd_typ = ptr_st_pstn_actn-> c_prd_typ;

  if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog ( c_ServiceName,"***********************START fn_cal_spnfrscvr_qty*************************");
		fn_userlog ( c_ServiceName, "Calculating the Fresh-Cover Qty in Trade Confirmation" );
    fn_userlog ( c_ServiceName, "Match account :%s:",ptr_st_pstn_actn->c_cln_mtch_accnt);
    fn_userlog ( c_ServiceName, "Xchange code :%s:",ptr_st_pstn_actn->c_xchng_cd);
    fn_userlog ( c_ServiceName, "Category Index/Stock :%c:",ptr_st_pstn_actn->c_ctgry_indstk);
    fn_userlog ( c_ServiceName, "Underlying :%s:",ptr_st_pstn_actn->c_undrlyng);
    fn_userlog ( c_ServiceName, "Exercise type :%c:",ptr_st_pstn_actn->c_exrc_typ);
		fn_userlog ( c_ServiceName, "Expiry date :%s:",ptr_st_pstn_actn->c_expry_dt);
    fn_userlog ( c_ServiceName, "Option type :%c:",ptr_st_pstn_actn->c_opt_typ);
    fn_userlog ( c_ServiceName, "Strike price :%ld:",ptr_st_pstn_actn->l_strike_prc);
		fn_userlog ( c_ServiceName, "Product type :%c:",ptr_st_pstn_actn->c_prd_typ);
  }
  EXEC SQL
			SELECT  NVL(SUM(FCP_OPNPSTN_QTY),0)
			INTO    :l_opnpstn_qty
			FROM    FCP_FO_SPN_CNTRCT_PSTN
			WHERE   FCP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
			AND     FCP_XCHNG_CD       = :sql_xchng_cd
			AND     FCP_UNDRLYNG       = :sql_undrlyng
			AND			FCP_PRDCT_TYP			 = :sql_prd_typ
			AND     FCP_INDSTK         = :sql_indstk
			AND     FCP_EXER_TYP       = :sql_exrc_typ
			AND     FCP_EXPRY_DT       = to_date(:sql_expry_dt,'DD-Mon-YYYY')
			AND			FCP_OPT_TYP				 = :sql_opt_typ
		  AND			FCP_STRK_PRC			 = :l_strike_prc;

  if ( SQLCODE != 0 )
  {
		fn_errlog ( c_ServiceName, "S31825", SQLMSG, ptr_st_err_msg->c_err_msg );
    return -1;
  }

  if(DEBUG_MSG_LVL_3)
	{
    fn_userlog ( c_ServiceName, "The net Open position qty:%ld",l_opnpstn_qty);
    fn_userlog ( c_ServiceName, " ptr_st_pstn_actn->c_trnsctn_flw:%c", ptr_st_pstn_actn->c_trnsctn_flw);
  }

  if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
  {
		if( l_opnpstn_qty > 0 )
    {
       ptr_st_pstn_actn->l_fresh_qty = ptr_st_pstn_actn->l_exec_qty;
       ptr_st_pstn_actn->l_cover_qty = 0;
    }
    else
		{
       ptr_st_pstn_actn->l_cover_qty = fn_minl(ptr_st_pstn_actn->l_exec_qty, labs(l_opnpstn_qty) );

			 ptr_st_pstn_actn->l_fresh_qty = fn_maxl(ptr_st_pstn_actn->l_exec_qty - ptr_st_pstn_actn->l_cover_qty, 0 );
    }
  }
  else if ( ptr_st_pstn_actn->c_trnsctn_flw == SELL )
  {
    if ( l_opnpstn_qty < 0 )
    {
				ptr_st_pstn_actn->l_fresh_qty = ptr_st_pstn_actn->l_exec_qty;
				ptr_st_pstn_actn->l_cover_qty = 0;
	}
	else
	{
		ptr_st_pstn_actn->l_cover_qty =	fn_minl(ptr_st_pstn_actn->l_exec_qty, l_opnpstn_qty );
		ptr_st_pstn_actn->l_fresh_qty =	fn_maxl(ptr_st_pstn_actn->l_exec_qty - ptr_st_pstn_actn->l_cover_qty,	0 );
	}
  }
  else
  {
	fn_userlog ( c_ServiceName,"Invalid c_trnsctn_flw Passed to the service !!");
	return 0;
  }

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
	if(DEBUG_MSG_LVL_2)
	{
		fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->l_fresh_qty:%ld",ptr_st_pstn_actn->l_fresh_qty);
		fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->l_cover_qty:%ld",ptr_st_pstn_actn->l_cover_qty);
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName,"***********************END fn_cal_spnfrscvr_qty*************************");
  }
	return 0;
}


int fn_call_spnactn_grp1( char *c_ServiceName,
													char *c_pipe_id,
											    struct st_pstn_actn *ptr_st_pstn_actn,
                  		    struct st_fus_undrlyng_pstn *ptr_st_undfut_pos_crrnt,
                  				struct st_fus_undrlyng_pstn *ptr_st_undfut_pos_to_be,
                  	 			struct st_err_msg *ptr_st_err_msg,
                          char *c_fcp_mtm_flg /***5.1 ****/)
{
  int i_returncode = 0;   /*** VQC ***/
	int i_cntrct_cnt = 0;		/*** Ver 1.1 ***/

	double d_pl_amt				= 0.0;
	double d_balance_amt	= 0.0;
	double d_bal_to_apply	= 0.0;
  double d_ltp					= 0.0;
  double d_spn_mrgn1		= 0.0;
  double d_spn_mrgn2	 	= 0.0;
  double d_nov1					= 0.0;
  double d_nov2					= 0.0;
  double d_total_mrgn1	= 0.0;
  double d_total_mrgn2	= 0.0;
  double d_diff_mrgn		= 0.0;
  double d_diff_pl			= 0.0;
	double d_cntrct_pl	=	0.0;
	double d_obli_pl		= 0.0;
	double d_clsng_prc  = 0.0;
	double d_strike_prc = 0.0;		/*** Ver 1.1 ***/

	long  l_max_opn_qty	= 0;
  long  l_min_opn_qty	= 0;
	/* long	l_strike_prc	= 0; */		/*** Ver 1.1 ***/
	long	l_cntr				=	0;
  long  l_length1			= 0;
  long  l_length2			= 0;
	long  l_prtfl_seq1	= 0;
  long  l_prtfl_seq2	= 0;
  long  li_len_tobuf	= 0;
	long l_new_pos			= 0;
	long	l_temp_qty		= 0;

	char *null_ptr  = 0;
  char c_mrgn_indctr[3]  ="\0"; /** VQC **/
  char c_mtch_accnt1[11] ="\0"; /** VQC **/
  char c_mtch_accnt2[11] ="\0"; /** VQC **/
  char c_spn_mrgn1[20]   ="\0"; /** VQC **/
  char c_spn_mrgn2[20]   ="\0"; /** VQC **/
  char c_nov1[20]        ="\0"; /** VQC **/
  char c_nov2[20]        ="\0"; /** VQC **/
  char c_total_mrgn1[20] ="\0"; /** VQC **/
  char c_total_mrgn2[20] ="\0"; /** VQC **/
	char c_narration_id[4] ="\0"; /** VQC **/
  char c_dr_without_lmt_flg ='\0';  /** VQC **/
	char	c_tmp_rmrks [ 133 ] ="\0";  /** VQC **/
	char c_reason_cd [ 2000 ] ="\0";	/** VQC **/
  char c_expry_dt[10]       ="\0";  /** VQC **/
  char c_inp_strng1[ 16000 ];  /*** changed from 8000 to 16000 in Ver 5.4 ***/
	char c_inp_strng11[ 16000 ];  /*** changed from 8000 to 16000 in Ver 5.4 ***/
  char c_inp_strng2[ 16000 ];  /*** changed from 8000 to 16000 in Ver 5.4 ***/
	char c_inp_strng22[ 16000 ];  /*** changed from 8000 to 16000 in Ver 5.4 ***/
  char c_inp_strng[ 16000 ];
  char c_op_strng[ 16000 ] ="\0"; /** VQC **/
  char c_op_strng1[ 16000 ] ="\0"; /** VQC **/
  char c_op_strng2[ 16000 ] ="\0"; /** VQC **/
  char c_seq_num1[12000] ="\0";    /** VQC **/
  char c_seq_num2[12000] ="\0";    /** VQC **/
	char c_strk_prc[20] = "\0";	/*** Ver 1.1 ** VQC ***/
	char c_tmp_nkd_blkd_flg = '\0';    /*** Ver 1.3 ***/
	char c_xchng_cd1[3] ="\0";							/*** Ver 1.4 ** VQC ***/
	char c_xchng_cd2[3] ="\0";							/*** Ver 1.4 ** VQC ***/
  char c_fcp_mtm_flg_new='\0';          /*** Ver 5.1 ***/

 	double d_mltplr =	0.0;
	int i_expsr_rtrn = 0;
	double d_expsr_mrgn = 0.0; 
	double d_min_expsr_mrgn = 0.0;	 
	double d_expsr =	0.0;
	double d_min_expsr =	0.0; 
	long	l_basket_id = 0;
  EXEC SQL INCLUDE "table/iai_info_account_info.h"; /* Ver 3.1 */
	double d_bal_mrgn_amt = 0.0;

  double  d_upd_amount = 0.0;							/*** 05-Dec-2011 ***/
	char c_dlvrmtm_flg = 'O';         /*** Ver 5.1 ***/

  /** Ver 6.5 Starts here **/
  int    i_ret_val=0;

  double d_spn_bmrgn1=0;
  double d_bnov1=0;
  double d_total_bmrgn1=0;

  double d_spn_bmrgn2=0;
  double d_bnov2=0;
  double d_total_bmrgn2=0;

  double d_spn_bmrgn=0;
  double d_bnov=0;
  double d_total_bmrgn=0;
  /** Ver 6.5 Ends here **/

	FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;
	
	EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;             
		char	sql_cln_mtch_accnt[11] ="\0"; /** VQC **/
		char	sql_xchng_cd[4] ="\0";     /** VQC **/
		char	sql_undrlyng[7] ="\0";     /** VQC **/
    varchar c_exp_dt[LEN_DATE];
		/** varchar c_trd_dt[12]; ** VQC **/								
		double d_mrgn_blkd = 0.0;
		varchar c_semmapval [20];

		/*** Current contract level positions of other contracts in the same  underlying ***/
    struct st_fcp_cntrct_pstn st_cntpos_crrnt;
		
		/*** Copy of contract level position on which action is to be done taken before applying the action ***/
    struct st_fcp_cntrct_pstn st_cntpos_old;

		/*** Contract level position on which action is to be done ***/
    struct st_fcp_cntrct_pstn st_cntpos_md_rc;

  EXEC SQL END DECLARE SECTION;
  MEMSET(c_semmapval); /** VQC **/
  MEMSET(st_cntpos_old); /** VQC **/
  MEMSET(st_cntpos_md_rc); /** VQC **/

	d_undrlyng_pl = 0.0;
	d_obli_pl = 0.0;

	ptr_fml_Ibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN*10);
										/*** Ver 1.1 - Size increased by multiple of 10 to accomodate the big sized portfolio ***/

  if ( ptr_fml_Ibuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31830", TPMSG, ptr_st_err_msg->c_err_msg);
    return -1;
  }

  ptr_fml_Obuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

	if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31835", TPMSG, ptr_st_err_msg->c_err_msg);
    tpfree((char *)ptr_fml_Ibuf);
    return -1;
  }

	strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
	strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
	strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);
	
	/** This bit of code down below will fetch all the contract level **/
	/** positions. Then it will find the contract on which the input  **/
	/** action is to be performed and then perform it. It then summs  **/
	/** up all the contract level postion to arrive at a consolidated **/
	/** underlying level position. It then recalculates the margin.   **/
	/** This bit of code need not be performed for actions which do   **/
	/** not involve a change in postion                               **/

	if(DEBUG_MSG_LVL_3)
	{
	 	fn_userlog ( c_ServiceName,"***********************START fn_call_spnactn_grp1*************************");
		fn_userlog ( c_ServiceName, "Building new underlying position" );
	}

  EXEC  SQL
    SELECT  SPN_PRTFL1_SEQ.nextval
    INTO    :l_prtfl_seq1
    FROM    DUAL;

  if ( SQLCODE  !=  0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31840",SQLMSG, ptr_st_err_msg->c_err_msg);
    tpfree((char *)ptr_fml_Ibuf);
    tpfree((char *)ptr_fml_Obuf);
    return  -1;
  }

  EXEC  SQL
    SELECT  SPN_PRTFL1_SEQ.nextval
    INTO    :l_prtfl_seq2
    FROM    DUAL;

  if ( SQLCODE  !=  0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31845",SQLMSG, ptr_st_err_msg->c_err_msg);
    tpfree((char *)ptr_fml_Ibuf);
    tpfree((char *)ptr_fml_Obuf);
		return  -1;
  }


	MEMSET(c_inp_strng);     /*** Ver 1.1 ***/
	MEMSET(c_inp_strng1);   /*** Ver 1.1 ***/
	MEMSET(c_inp_strng11);   /*** Ver 1.1 ***/
	MEMSET(c_inp_strng2);   /*** Ver 1.1 ***/
	MEMSET(c_inp_strng22);   /*** Ver 1.1 ***/
	
  strcpy(c_inp_strng1,"1^");
  strcpy(c_inp_strng2,"|");
	/*** Ver 1.4 starts ***/
	if(strcmp(sql_xchng_cd,"NFO") == 0)
	{
  	strcat(c_inp_strng1,"NSE^");
	}
	else if(strcmp(sql_xchng_cd,"BFO") == 0 )
	{
  	strcat(c_inp_strng1,"BSE^");
	}
	/*** Ver 1.4 Ends   ***/
  sprintf(c_seq_num1,"%ld",l_prtfl_seq1);
  sprintf(c_seq_num2,"%ld",l_prtfl_seq2);

  strcat( c_inp_strng1 , c_seq_num1 );
  strcat( c_inp_strng2 , c_seq_num2 );

  strcat(c_inp_strng1,"^");
  strcat(c_inp_strng2,"^");

	/*** 20-Oct-2011 ***/
	 EXEC SQL
   	SELECT  FCB_UNDRLYNG_BSKT_ID
   	INTO    :l_basket_id
   	FROM    FCB_FO_CLN_BSKT_ALLTD
   	WHERE   FCB_CLN_LVL = ( SELECT  CLM_CLNT_LVL
                            FROM    CLM_CLNT_MSTR
                            WHERE   CLM_MTCH_ACCNT = :sql_cln_mtch_accnt);
  if ( SQLCODE != 0 )
  {
		fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31850",SQLMSG, c_err_msg);
    tpfree((char *)ptr_fml_Ibuf);
    tpfree((char *)ptr_fml_Obuf);
    return  -1;
  }
	/*** 20-Oct-2011 ***/

	/** Prepare a list of contracts from contract position table **/
	EXEC SQL ALLOCATE :sys_cursor;

	EXEC SQL EXECUTE
		BEGIN
			 OPEN :sys_cursor FOR
				SELECT		FCP_CLM_MTCH_ACCNT,
									FCP_XCHNG_CD,
									FCP_PRDCT_TYP,
									FCP_INDSTK,
									FCP_UNDRLYNG,
									TO_CHAR (FCP_EXPRY_DT,'DD-Mon-YYYY'),
									FCP_EXER_TYP,
									FCP_STRK_PRC,
									FCP_OPT_TYP,
									FCP_IBUY_QTY,
									FCP_IBUY_ORD_VAL,
									FCP_ISELL_QTY,
									FCP_ISELL_ORD_VAL,
									FCP_EXBUY_QTY,
									FCP_EXBUY_ORD_VAL,
									FCP_EXSELL_QTY,
									FCP_EXSELL_ORD_VAL,
									FCP_BUY_EXCTD_QTY,
									FCP_SELL_EXCTD_QTY,
									FCP_OPNPSTN_FLW,
									FCP_OPNPSTN_QTY,
									FCP_OPNPSTN_VAL,
									FCP_MTM_OPN_VAl,
									FCP_OPT_PREMIUM,
									NVL(FCP_MTM_FLG,'O')            /*** Ver 5.1 ***/
				FROM			FCP_FO_SPN_CNTRCT_PSTN
				WHERE			FCP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
				AND				FCP_XCHNG_CD       = :sql_xchng_cd
				AND				FCP_UNDRLYNG       = :sql_undrlyng
				ORDER BY	FCP_EXPRY_DT ASC;			/***	Ver 4.5	***/
		END;
	END-EXEC;

 	if ( SQLCODE != 0 )
  {
    EXEC SQL CLOSE :sys_cursor;	 /** Added in Ver 3.9 **/
		EXEC SQL FREE :sys_cursor;
    tpfree((char *)ptr_fml_Ibuf);
    tpfree((char *)ptr_fml_Obuf);
		fn_errlog ( c_ServiceName, "S31855", SQLMSG, ptr_st_err_msg->c_err_msg );
   	return -1;
  }

	/** Fetch one contract at a time from the list. If the fetched  **/
	/** contract is the one we need to apply the change apply it.   **/
	/** Else simply add the contract to  underlying level position  **/

	while ( 1 )
  {
		 d_expsr_mrgn = 0.0;	/*** 20-Oct-2011 ***/
		 d_min_expsr_mrgn = 0.0;	/*** 20-Oct-2011 ***/
		 d_ltp = 0.0;
		 d_clsng_prc = 0.0;
		 d_strike_prc	= 0.0;		/*** Ver 1.1 ***/
		 c_dlvrmtm_flg = 'O';        /*** Ver 5.1 ***/
     d_blkd_prmum = 0.0;        /** VQC **/
     MEMSET(c_exp_dt);          /** VQC **/
     MEMSET(st_cntpos_crrnt);   /** VQC **/

   		EXEC SQL 	FETCH   :sys_cursor
								INTO		:st_cntpos_crrnt.c_cln_mtch_accnt,
           							:st_cntpos_crrnt.c_xchng_cd,
           							:st_cntpos_crrnt.c_prd_typ,
           							:st_cntpos_crrnt.c_ctgry_indstk,
           							:st_cntpos_crrnt.c_undrlyng,
           							:c_exp_dt,
           							:st_cntpos_crrnt.c_exer_typ,
												:st_cntpos_crrnt.l_strike_prc,
                        :st_cntpos_crrnt.c_opt_typ,
           							:st_cntpos_crrnt.l_ibuy_qty,
           							:st_cntpos_crrnt.d_ibuy_ord_val,
           							:st_cntpos_crrnt.l_isell_qty,
           							:st_cntpos_crrnt.d_isell_ord_val,
           							:st_cntpos_crrnt.l_exbuy_qty,
           							:st_cntpos_crrnt.d_exbuy_ord_val,
           							:st_cntpos_crrnt.l_exsell_qty,
           							:st_cntpos_crrnt.d_exsell_ord_val,
           							:st_cntpos_crrnt.l_buy_exctd_qty,
           							:st_cntpos_crrnt.l_sell_exctd_qty,
           							:st_cntpos_crrnt.c_opnpstn_flw,
           							:st_cntpos_crrnt.l_opnpstn_qty,
           							:st_cntpos_crrnt.d_opnpstn_val,
           							:st_cntpos_crrnt.d_mtm_opn_val,
												:d_blkd_prmum,
												:c_dlvrmtm_flg;         /**** Ver 5.1 ****/
      
		  if ( SQLCODE != 0 )
		  {
				 if ( SQLCODE == NO_DATA_FOUND )
				 {
					break;
				 }
				
				 EXEC SQL CLOSE :sys_cursor;
				 EXEC SQL FREE :sys_cursor;
				 tpfree((char *)ptr_fml_Ibuf);
				 tpfree((char *)ptr_fml_Obuf);
				 fn_errlog ( c_ServiceName, "S31860", SQLMSG, ptr_st_err_msg->c_err_msg );
				 return -1;
		  }

			i_cntrct_cnt++;							/*** Ver 1.1 ***/

			d_rel_prmum = 0.0;
			d_blk_prmum = 0.0;
			d_blk_total_prmum = d_blkd_prmum;

			d_cntrct_pl = 0.0;

			SETNULL( c_exp_dt );
			strcpy ( st_cntpos_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
			rtrim(st_cntpos_crrnt.c_xchng_cd);
			rtrim(st_cntpos_crrnt.c_undrlyng);
			rtrim(st_cntpos_crrnt.c_expry_dt);

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog ( c_ServiceName, "**************************FETCHED CONTRACT****************");

				fn_userlog ( c_ServiceName, "st_cntpos_crrnt.c_cln_mtch_accnt :%s:", st_cntpos_crrnt.c_cln_mtch_accnt );
				fn_userlog ( c_ServiceName, "st_cntpos_crrnt.c_xchng_cd :%s:", st_cntpos_crrnt.c_xchng_cd );
				fn_userlog ( c_ServiceName, "st_cntpos_crrnt.c_prd_typ :%c:", st_cntpos_crrnt.c_prd_typ );
				fn_userlog ( c_ServiceName, "st_cntpos_crrnt.c_ctgry_indstk :%c:", st_cntpos_crrnt.c_ctgry_indstk );
				fn_userlog ( c_ServiceName, "st_cntpos_crrnt.c_undrlyng :%s:", st_cntpos_crrnt.c_undrlyng );
				fn_userlog ( c_ServiceName, "st_cntpos_crrnt.c_exer_typ :%c:", st_cntpos_crrnt.c_exer_typ );
				fn_userlog ( c_ServiceName, "st_cntpos_crrnt.l_strike_prc :%ld:", st_cntpos_crrnt.l_strike_prc );
				fn_userlog ( c_ServiceName, "st_cntpos_crrnt.c_opt_typ :%c:", st_cntpos_crrnt.c_opt_typ );
				fn_userlog ( c_ServiceName, "st_cntpos_crrnt.c_expry_dt :%s:", st_cntpos_crrnt.c_expry_dt );

				fn_userlog ( c_ServiceName, "Expiry date       :%s:", c_exp_dt.arr );
				fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntpos_crrnt.l_ibuy_qty );
				fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntpos_crrnt.d_ibuy_ord_val );
				fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntpos_crrnt.l_isell_qty );
				fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntpos_crrnt.d_isell_ord_val );
				fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntpos_crrnt.l_exbuy_qty );
				fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntpos_crrnt.d_exbuy_ord_val );
				fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntpos_crrnt.l_exsell_qty );
				fn_userlog ( c_ServiceName, "EXCH sell val      :%lf:", st_cntpos_crrnt.d_exsell_ord_val );
				fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntpos_crrnt.l_buy_exctd_qty );
				fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_cntpos_crrnt.l_sell_exctd_qty );
				fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntpos_crrnt.l_opnpstn_qty );
				fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntpos_crrnt.d_opnpstn_val );
				fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntpos_crrnt.d_mtm_opn_val );

				fn_userlog ( c_ServiceName, "************************************************************");

				fn_userlog ( c_ServiceName, "**************************** TRADE ************************");
				fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->c_cln_mtch_accnt :%s:", ptr_st_pstn_actn->c_cln_mtch_accnt );
				fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->c_xchng_cd :%s:", ptr_st_pstn_actn->c_xchng_cd );
				fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->c_prd_typ :%c:", ptr_st_pstn_actn->c_prd_typ );
				fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->c_undrlyng :%s:", ptr_st_pstn_actn->c_undrlyng );
				fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->c_exrc_typ :%c:", ptr_st_pstn_actn->c_exrc_typ );
				fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->l_strike_prc :%ld:", ptr_st_pstn_actn->l_strike_prc );
				fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->c_opt_typ :%c:", ptr_st_pstn_actn->c_opt_typ );
				fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->c_expry_dt :%s:", ptr_st_pstn_actn->c_expry_dt );
				fn_userlog ( c_ServiceName, "************************************************************");
			} 

			if( (strcmp(st_cntpos_crrnt.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd) == 0 ) &&
					(st_cntpos_crrnt.c_prd_typ == ptr_st_pstn_actn->c_prd_typ) && 
			    (strcmp(st_cntpos_crrnt.c_undrlyng,	ptr_st_pstn_actn->c_undrlyng) == 0 ) &&
					(strcasecmp(st_cntpos_crrnt.c_expry_dt,	ptr_st_pstn_actn->c_expry_dt) == 0 ) &&
					(st_cntpos_crrnt.c_exer_typ == ptr_st_pstn_actn->c_exrc_typ) && 
					(st_cntpos_crrnt.c_opt_typ == ptr_st_pstn_actn->c_opt_typ) && 
					(st_cntpos_crrnt.l_strike_prc == ptr_st_pstn_actn->l_strike_prc) )
			{
    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
				if(DEBUG_MSG_LVL_2)
				{
					fn_userlog ( c_ServiceName, "**************INSIDE MATCH FOUND************");
				}
  			memcpy ( &st_cntpos_old, &st_cntpos_crrnt, sizeof( st_cntpos_old ) );

				i_returncode =	fn_apply_spncnt_actn (	c_ServiceName,
																								ptr_st_pstn_actn, 
                            										&st_cntpos_crrnt,
                        												ptr_st_err_msg );
  			if ( i_returncode == -1 )
  			{
					 EXEC SQL CLOSE :sys_cursor;
					 EXEC SQL FREE :sys_cursor;
			     tpfree((char *)ptr_fml_Ibuf);
	 		     tpfree((char *)ptr_fml_Obuf);
					 fn_errlog ( c_ServiceName, "S31865", LIBMSG, ptr_st_err_msg->c_err_msg ); /** VQC **/
	  			 return -1;
  			}
				memcpy ( &st_cntpos_md_rc, &st_cntpos_crrnt, sizeof( st_cntpos_md_rc ) );


				/*** Calculate premium ***/
    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
				if(DEBUG_MSG_LVL_2)
				{
					fn_userlog ( c_ServiceName, "********************CALCULATE PREMIUM ********************");
					fn_userlog ( c_ServiceName, "ptr_st_pstn_actn -> c_prd_typ = %c",ptr_st_pstn_actn -> c_prd_typ);
					fn_userlog ( c_ServiceName, "ptr_st_pstn_actn -> l_exec_qty = %ld",ptr_st_pstn_actn -> l_exec_qty);
					fn_userlog ( c_ServiceName, "ptr_st_pstn_actn -> l_exec_rt = %ld",ptr_st_pstn_actn -> l_exec_rt);
					fn_userlog ( c_ServiceName, "st_cntpos_old.l_ibuy_qty = %ld",st_cntpos_old.l_ibuy_qty);
					fn_userlog ( c_ServiceName, "st_cntpos_old.d_ibuy_ord_val = %lf",st_cntpos_old.d_ibuy_ord_val);
					fn_userlog ( c_ServiceName, "st_cntpos_old.d_opnpstn_val = %lf",st_cntpos_old.d_opnpstn_val);
					fn_userlog ( c_ServiceName, "st_cntpos_old.l_opnpstn_qty = %ld",st_cntpos_old.l_opnpstn_qty);
					fn_userlog ( c_ServiceName, "ptr_st_pstn_actn -> l_cover_qty = %ld",ptr_st_pstn_actn -> l_cover_qty);
					fn_userlog ( c_ServiceName, "ptr_st_pstn_actn -> l_fresh_qty = %ld",ptr_st_pstn_actn -> l_fresh_qty);
				}

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
				if(DEBUG_MSG_LVL_2)
				{
					fn_userlog ( c_ServiceName, "d_blkd_prmum = %lf",d_blkd_prmum);
				}
				if ( ptr_st_pstn_actn -> c_prd_typ  ==  'O' ) /*** Option ***/
      	{
        	if( ptr_st_pstn_actn -> c_trnsctn_flw == BUY ) /*** Buy trade ***/
        	{
    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
						if(DEBUG_MSG_LVL_2)
						{
          		fn_userlog(c_ServiceName,"SPAN Inside Option Buy Position.");
						}
						d_rel_prmum = d_blkd_prmum - st_cntpos_crrnt.d_ibuy_ord_val;
						d_blk_prmum = (double) ptr_st_pstn_actn -> l_exec_rt * (double) ptr_st_pstn_actn ->l_exec_qty * -1;
						d_blk_total_prmum = st_cntpos_crrnt.d_ibuy_ord_val;

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
						if(DEBUG_MSG_LVL_2)
						{
							fn_userlog ( c_ServiceName, "d_rel_prmum = %lf",d_rel_prmum);
							fn_userlog ( c_ServiceName, "d_blk_prmum = %lf",d_blk_prmum);
							fn_userlog ( c_ServiceName, "d_blk_total_prmum = %lf",d_blk_total_prmum);
						}
					
						/* Release the premium*/
						strcpy( c_narration_id , ON_TRADE_EXECUTION);
						c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
						
						if ( d_rel_prmum > 0)
						{
								d_balance_amt  = 0.0;    /*** Ver 1.1 ***/
								i_returncode = fn_upd_spnlimits( c_ServiceName,
																ptr_st_pstn_actn,
																ptr_st_err_msg,
																c_narration_id,
																c_dr_without_lmt_flg,
																d_rel_prmum,
																&d_balance_amt);
								if ( i_returncode != 0 )
								{
									fn_errlog( c_ServiceName, "S31870",DEFMSG , c_err_msg );
									EXEC SQL CLOSE :sys_cursor;
									EXEC SQL FREE :sys_cursor;  /*** Added in Ver 3.9 **/
									tpfree((char *)ptr_fml_Obuf);
									tpfree((char *)ptr_fml_Ibuf);
									return -1  ;
								}
    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
								if(DEBUG_MSG_LVL_2)
								{
									fn_userlog ( c_ServiceName, "INSIDE Release premium <d_balance_amt>= %lf",d_balance_amt);
								}
						}

						/* Block the premium*/
						strcpy( c_narration_id , PREMIUM_ADJUSTMENTS);
						/*c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;*/
						c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;			/**Added by Shailesh **/
						
						if ( d_blk_prmum < 0)
						{
								d_balance_amt  = 0.0;      /*** Ver 1.1 ***/


                /***** Ver 6.2 Starts here *****/
                MEMSET(sql_iai_type.arr);

                EXEC SQL
                SELECT  IAI_TYPE
                INTO    :sql_iai_type
                FROM    IAI_INFO_ACCOUNT_INFO
                WHERE   IAI_MATCH_ACCOUNT_NO  = :ptr_st_pstn_actn->c_cln_mtch_accnt ;

                if ( SQLCODE != 0 )
                {  fn_errlog( c_ServiceName, "S31875",SQLMSG , c_err_msg );
                   EXEC SQL CLOSE :sys_cursor;
                   EXEC SQL FREE :sys_cursor;
                   tpfree((char *)ptr_fml_Obuf);
                   tpfree((char *)ptr_fml_Ibuf);
                   return -1;
                }
                /***** Ver 6.2 Ends Here *******/

               if(strcmp(sql_iai_type.arr,"NRO_NON_PINS") != 0)  /** Ver 6.2 ***/
               {
                /***** ver- 4.2(MRK) starts *****/
                strcpy ( c_tmp_rmrks, ptr_st_pstn_actn->c_ref_rmrks );
                sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"OPT-%s-%s-%0.2lf-%c%c-",
                          ptr_st_pstn_actn->c_undrlyng,
                          ptr_st_pstn_actn->c_expry_dt,
                          (double) ptr_st_pstn_actn->l_strike_prc/100.00,
                          ptr_st_pstn_actn->c_opt_typ,
                          ptr_st_pstn_actn->c_exrc_typ );

                strcat(ptr_st_pstn_actn->c_ref_rmrks,c_tmp_rmrks);
                /***** ver- 4.2(MRK)ends *****/
								i_returncode = fn_upd_spnlimits( c_ServiceName,
																ptr_st_pstn_actn,
																ptr_st_err_msg,
																c_narration_id,
																c_dr_without_lmt_flg,
																d_blk_prmum,
																&d_balance_amt);
								if ( i_returncode != 0 )
								{
									fn_errlog( c_ServiceName, "S31880",LIBMSG , c_err_msg );
									EXEC SQL CLOSE :sys_cursor;
									EXEC SQL FREE :sys_cursor;   /*** Added in Ver 3.9 **/
									tpfree((char *)ptr_fml_Obuf);
									tpfree((char *)ptr_fml_Ibuf);
									return -1;
							 }
               strcpy ( ptr_st_pstn_actn->c_ref_rmrks, c_tmp_rmrks );   /*** Ver 4.2 <Bhushan> ***/
            }  /*** Ver 6.2 if condition ends ***/

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
							 if(DEBUG_MSG_LVL_2)
							 {
	  						fn_userlog ( c_ServiceName, "INSIDE Block premium <d_balance_amt>= %lf",d_balance_amt);
 	  						fn_userlog ( c_ServiceName, "d_blk_total_prmum = %lf",d_blk_total_prmum);
							 }
							 /*** NRI - TDS Starts ***/

							 /*** if (  strncmp( ptr_st_pstn_actn->c_cln_mtch_accnt, "751", 3) == 0 ) COmmented in Ver 3.1 ****/

							 /****** Added in Ver 3.1 *******/
               /************ Commented in Ver 6.2 *******************
        			 MEMSET(sql_iai_type.arr);

      				 EXEC SQL
      				 SELECT  IAI_TYPE
      				 INTO    :sql_iai_type
      				 FROM    IAI_INFO_ACCOUNT_INFO
      				 WHERE   IAI_MATCH_ACCOUNT_NO  = :ptr_st_pstn_actn->c_cln_mtch_accnt ;

      				 if ( SQLCODE != 0 )
      				 {  fn_errlog( c_ServiceName, "S31885",SQLMSG , c_err_msg ); ** VQC chngd from LIBMSG to SQLMSG **
                  EXEC SQL CLOSE :sys_cursor;
									EXEC SQL FREE :sys_cursor;   *** Added in Ver 3.9 **
                  tpfree((char *)ptr_fml_Obuf);
                  tpfree((char *)ptr_fml_Ibuf);
                  return -1;
							 }
							 ****** Added  Ver 3.1 Ends *******
                ********* Commented in 6.2 *********/     				 
          		 if(DEBUG_MSG_LVL_0) /*** Ver 3.6 ***/
          		 {
			         	 fn_userlog( c_ServiceName, "CUST TYPE 2 IS :%s:",sql_iai_type.arr);
							 }

							 if(strcmp(sql_iai_type.arr,"NRO_NON_PINS") == 0)   /****** check Added in Ver 3.1 *******/
							 {

								strcpy ( c_tmp_rmrks, ptr_st_pstn_actn->c_ref_rmrks );
                
								/*** sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"OPT-%s-%s-%ld-%c%c",
                ptr_st_pstn_actn->c_undrlyng,
                ptr_st_pstn_actn->c_expry_dt,
                ptr_st_pstn_actn->l_strike_prc/100,
                ptr_st_pstn_actn->c_opt_typ,
                ptr_st_pstn_actn->c_exrc_typ );  *** Commented in Ver 1.1 ***/

								/*sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"OPT-%s-%s-%0.2lf-%c%c",commented Ver 4.2 */
                sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"OPT-%s-%s-%0.2lf-%c%c-", /*** Ver 4.2 <MRK> ***/
                ptr_st_pstn_actn->c_undrlyng,
                ptr_st_pstn_actn->c_expry_dt,
                (double) ptr_st_pstn_actn->l_strike_prc/100.00,
                ptr_st_pstn_actn->c_opt_typ,
                ptr_st_pstn_actn->c_exrc_typ );   /*** Ver 1.1 ***/
	
                strcat(ptr_st_pstn_actn->c_ref_rmrks,c_tmp_rmrks);  /*** Ver 4.2 <Bhushan> ***/

        				strcpy( c_reason_cd, "Premium Adjustments" );
								if(DEBUG_MSG_LVL_3)
								{
        					fn_userlog( c_ServiceName, "Calling fn_tds for BUY order:%s:",c_reason_cd );

									fn_userlog( c_ServiceName, "Calling fn_spntds for :%s:",c_reason_cd );
								}

     						i_returncode = fn_spntds(   c_ServiceName,
              						                  ptr_st_pstn_actn,
                  	      					        ptr_st_err_msg,
                    	            					TDS_NRI,
                      	          					c_reason_cd,
                        	        					DEBIT_WITHOUT_LIMIT,
                          	      					d_blk_prmum,
                            	    					&d_balance_amt );
								if ( i_returncode != 0 )
              	{
                	fn_errlog( c_ServiceName, "S31890",LIBMSG , c_err_msg );
                	EXEC SQL CLOSE :sys_cursor;
									EXEC SQL FREE :sys_cursor;   /*** Added in Ver 3.9 **/
                	tpfree((char *)ptr_fml_Obuf);
                	tpfree((char *)ptr_fml_Ibuf);
                	return -1;
              	}
								strcpy ( ptr_st_pstn_actn->c_ref_rmrks , c_tmp_rmrks );
		                /***** Ver 6.2 Starts Here *******/
                strcpy ( c_tmp_rmrks, ptr_st_pstn_actn->c_ref_rmrks );
                sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"OPT-%s-%s-%0.2lf-%c%c-",
                          ptr_st_pstn_actn->c_undrlyng,
                          ptr_st_pstn_actn->c_expry_dt,
                          (double) ptr_st_pstn_actn->l_strike_prc/100.00,
                          ptr_st_pstn_actn->c_opt_typ,
                          ptr_st_pstn_actn->c_exrc_typ );

                strcat(ptr_st_pstn_actn->c_ref_rmrks,c_tmp_rmrks);
                i_returncode = fn_upd_spnlimits( c_ServiceName,
                                ptr_st_pstn_actn,
                                ptr_st_err_msg,
                                c_narration_id,
                                c_dr_without_lmt_flg,
                                d_blk_prmum,
                                &d_balance_amt);
                if ( i_returncode != 0 )
                {
                  fn_errlog( c_ServiceName, "S31895",LIBMSG , c_err_msg );
                  EXEC SQL CLOSE :sys_cursor;
                  EXEC SQL FREE :sys_cursor;
                  tpfree((char *)ptr_fml_Obuf);
                  tpfree((char *)ptr_fml_Ibuf);
                  return -1;
               }
               strcpy ( ptr_st_pstn_actn->c_ref_rmrks, c_tmp_rmrks );
                /***** Ver 6.2 Ends Here ******/	
							}
							/*** NRI - TDS Ends  ***/
              strcpy ( ptr_st_pstn_actn->c_ref_rmrks , c_tmp_rmrks );   /**** Ver 4.2(MRK) *****/
						}
	       	}
					else if( ptr_st_pstn_actn -> c_trnsctn_flw  ==  SELL )  /*** Sell trade ***/
					{
    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
						if(DEBUG_MSG_LVL_2)
						{
	         		fn_userlog(c_ServiceName,"SPAN Inside Option Sell Position.");
						}

						d_rel_prmum =  (double) ptr_st_pstn_actn ->l_exec_qty * (double) ptr_st_pstn_actn -> l_exec_rt ;
						d_blk_total_prmum = st_cntpos_crrnt.d_ibuy_ord_val;

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
						if(DEBUG_MSG_LVL_2)
						{
							fn_userlog ( c_ServiceName, "d_rel_prmum = %lf",d_rel_prmum);
							fn_userlog ( c_ServiceName, "d_blk_total_prmum = %lf",d_blk_total_prmum);
						}

						/* Release the premium*/
						strcpy( c_narration_id , PREMIUM_ADJUSTMENTS);
						/*c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;*/
						c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;			 /**Added by Shailesh **/
						
						if ( d_rel_prmum > 0)
						{
							d_balance_amt  = 0.0;           /*** Ver 1.1 ***/


              /**** Ver 6.2 Starts here ****/
              MEMSET(sql_iai_type.arr);

              EXEC SQL
              SELECT  IAI_TYPE
              INTO    :sql_iai_type
              FROM    IAI_INFO_ACCOUNT_INFO
              WHERE   IAI_MATCH_ACCOUNT_NO  = :ptr_st_pstn_actn->c_cln_mtch_accnt ;

              if ( SQLCODE != 0 )
              {
                fn_errlog( c_ServiceName, "S31900",SQLMSG , c_err_msg );
                EXEC SQL CLOSE :sys_cursor;
                EXEC SQL FREE :sys_cursor;
                tpfree((char *)ptr_fml_Obuf);
                tpfree((char *)ptr_fml_Ibuf);
                return -1;
              }
              /**** Ver 6.2 Ends Here ******/

              /*** Ver 4.2 Starts <Bhushan> ***/
             if(strcmp(sql_iai_type.arr,"NRO_NON_PINS") != 0)  /*** ver 6.2 ***/
             {
              strcpy ( c_tmp_rmrks, ptr_st_pstn_actn->c_ref_rmrks );
              sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"OPT-%s-%s-%0.2lf-%c%c-",
                        ptr_st_pstn_actn->c_undrlyng,
                        ptr_st_pstn_actn->c_expry_dt,
                       (double) ptr_st_pstn_actn->l_strike_prc/100.00,
                        ptr_st_pstn_actn->c_opt_typ,
                        ptr_st_pstn_actn->c_exrc_typ );
              strcat(ptr_st_pstn_actn->c_ref_rmrks,c_tmp_rmrks);
              /*** Ver 4.2 Ends ***/
							i_returncode = fn_upd_spnlimits( c_ServiceName,
															ptr_st_pstn_actn,
															ptr_st_err_msg,
															c_narration_id,
															c_dr_without_lmt_flg,
															d_rel_prmum,
															&d_balance_amt);
							if ( i_returncode != 0 )
							{
								fn_errlog( c_ServiceName, "S31905",LIBMSG , c_err_msg );
								EXEC SQL CLOSE :sys_cursor;
								EXEC SQL FREE :sys_cursor;   /*** Added in Ver 3.9 **/
								tpfree((char *)ptr_fml_Obuf);
								tpfree((char *)ptr_fml_Ibuf);
								return -1;
							}
              strcpy ( ptr_st_pstn_actn->c_ref_rmrks , c_tmp_rmrks );  /*** Ver 4.2 <Bhushan>***/
            }/** ver 6.2 ****/
    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
							if(DEBUG_MSG_LVL_2)
							{
  							fn_userlog ( c_ServiceName, "INSIDE Release premium <d_balance_amt>= %lf",d_balance_amt);
							}

							/**** if (  strncmp( ptr_st_pstn_actn->c_cln_mtch_accnt, "751", 3) == 0 ) *** Commented in Ver 3.1 *****/
							
							/****** Added in Ver 3.1 *******/
             /******** Commented in ver 6.2 ******************
							MEMSET(sql_iai_type.arr);

      				EXEC SQL
      				SELECT  IAI_TYPE
      				INTO    :sql_iai_type
      				FROM    IAI_INFO_ACCOUNT_INFO
      				WHERE   IAI_MATCH_ACCOUNT_NO  = :ptr_st_pstn_actn->c_cln_mtch_accnt ;

 				      if ( SQLCODE != 0 )
      				{
								fn_errlog( c_ServiceName, "S31910",SQLMSG , c_err_msg ); ** VQC LIBMSG chngd to SQLMSG **
                EXEC SQL CLOSE :sys_cursor;
								EXEC SQL FREE :sys_cursor;  *** Added in Ver 3.9 **
                tpfree((char *)ptr_fml_Obuf);
                tpfree((char *)ptr_fml_Ibuf);
                return -1;
							}
              ***************** Ver 6.2 *******************/
							/****** Added  Ver 3.1 Ends *****/
	
          		if(DEBUG_MSG_LVL_3)	/*** Ver 3.6 ***/
          		{	
        				fn_userlog( c_ServiceName, "CUST TYPE 3 IS :%s:",sql_iai_type.arr);
							}

							if(strcmp(sql_iai_type.arr,"NRO_NON_PINS") == 0)   /****** Check Added in Ver 3.1 *******/
      				{
        				strcpy( c_reason_cd, "Premium Adjustments" );

								if(DEBUG_MSG_LVL_3)
								{
        					fn_userlog( c_ServiceName, "Calling fn_tds for :%s:",c_reason_cd );
								}
								strcpy ( c_tmp_rmrks, ptr_st_pstn_actn->c_ref_rmrks );
                
								/*** sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"OPT-%s-%s-%ld-%c%c",
                ptr_st_pstn_actn->c_undrlyng,
                ptr_st_pstn_actn->c_expry_dt,
                ptr_st_pstn_actn->l_strike_prc/100,
                ptr_st_pstn_actn->c_opt_typ,
                ptr_st_pstn_actn->c_exrc_typ ); *** Commented in Ver 1.1 ***/

								/*sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"OPT-%s-%s-%0.2lf-%c%c", commented in Ver 4.2 */
                sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"OPT-%s-%s-%0.2lf-%c%c-", /* Ver 4.2*/
                ptr_st_pstn_actn->c_undrlyng,
                ptr_st_pstn_actn->c_expry_dt,
                (double) ptr_st_pstn_actn->l_strike_prc/100.00,
                ptr_st_pstn_actn->c_opt_typ,
                ptr_st_pstn_actn->c_exrc_typ );			/*** Ver 1.1 ***/
                strcat(ptr_st_pstn_actn->c_ref_rmrks,c_tmp_rmrks); /* Ver 4.2 */
    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
								if(DEBUG_MSG_LVL_2)
								{
									fn_userlog( c_ServiceName, "Calling fn_spntds for SELL order :%s:",c_reason_cd );
								}

     						i_returncode = fn_spntds(   c_ServiceName,
              						                  ptr_st_pstn_actn,
                  	      					        ptr_st_err_msg,
                    	            					TDS_NRI,
                      	          					c_reason_cd,
                        	        					DEBIT_WITHOUT_LIMIT,
                          	      					d_rel_prmum,
                            	    					&d_balance_amt );
								if ( i_returncode != 0 )
              	{
                	fn_errlog( c_ServiceName, "S31915",LIBMSG , c_err_msg );
                	EXEC SQL CLOSE :sys_cursor;
									EXEC SQL FREE :sys_cursor;   /*** Added in Ver 3.9 **/
                	tpfree((char *)ptr_fml_Obuf);
                	tpfree((char *)ptr_fml_Ibuf);
                	return -1;
              	}

								strcpy ( ptr_st_pstn_actn->c_ref_rmrks , c_tmp_rmrks );
              /***** Ver 6.2 starts Here *****/
              strcpy ( c_tmp_rmrks, ptr_st_pstn_actn->c_ref_rmrks );
              sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"OPT-%s-%s-%0.2lf-%c%c-",
                        ptr_st_pstn_actn->c_undrlyng,
                        ptr_st_pstn_actn->c_expry_dt,
                       (double) ptr_st_pstn_actn->l_strike_prc/100.00,
                        ptr_st_pstn_actn->c_opt_typ,
                        ptr_st_pstn_actn->c_exrc_typ );
              strcat(ptr_st_pstn_actn->c_ref_rmrks,c_tmp_rmrks);
              /*** Ver 4.2 Ends ***/
              i_returncode = fn_upd_spnlimits( c_ServiceName,
                              ptr_st_pstn_actn,
                              ptr_st_err_msg,
                              c_narration_id,
                              c_dr_without_lmt_flg,
                              d_rel_prmum,
                              &d_balance_amt);
              if ( i_returncode != 0 )
              {
                fn_errlog( c_ServiceName, "S31920",LIBMSG , c_err_msg );
                EXEC SQL CLOSE :sys_cursor;
                EXEC SQL FREE :sys_cursor;   /*** Added in Ver 3.9 **/
                tpfree((char *)ptr_fml_Obuf);
                tpfree((char *)ptr_fml_Ibuf);
                return -1;
              }
              strcpy ( ptr_st_pstn_actn->c_ref_rmrks , c_tmp_rmrks );
             /*** Ver 6.2 Ends Here ***/
							
							}  /*** NRI - TDS Ends  ***/

						}
					}
					st_cntpos_md_rc.d_opt_premium = d_blk_total_prmum;
			  }

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
				if(DEBUG_MSG_LVL_2)
				{
					fn_userlog ( c_ServiceName, "d_blk_total_prmum = %lf",d_blk_total_prmum);

					fn_userlog ( c_ServiceName, "*********************************************************");
					fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->l_cover_qty :%ld:", ptr_st_pstn_actn->l_cover_qty );
					fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->c_trnsctn_flw :%c:", ptr_st_pstn_actn->c_trnsctn_flw );
					fn_userlog ( c_ServiceName, "st_cntpos_old.d_opnpstn_val :%lf:", st_cntpos_old.d_opnpstn_val );
					fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->l_exec_rt :%ld:", ptr_st_pstn_actn->l_exec_rt );
					fn_userlog ( c_ServiceName, "d_obli_pl :%lf:", d_obli_pl );
				}

				/***	Obligation Profit / Loss Calculation only for traded contract	***/
				if ( ptr_st_pstn_actn->l_cover_qty >  0 )			
				{
    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
					if(DEBUG_MSG_LVL_2)
					{
						fn_userlog ( c_ServiceName, "*********CALCULATE OBLIGATION LOSS FOR TRADED CONTRACT*********");
					}
					if (ptr_st_pstn_actn->c_prd_typ == 'F')
					{
						if(	ptr_st_pstn_actn->c_trnsctn_flw == BUY	)
						{
							d_obli_pl	=	( (st_cntpos_old.d_opnpstn_val / (double) st_cntpos_old.l_opnpstn_qty) *  (double) ptr_st_pstn_actn->l_cover_qty )	-	 ( (double) ptr_st_pstn_actn->l_exec_rt * (double) ptr_st_pstn_actn->l_cover_qty );
						}
						else if ( ptr_st_pstn_actn->c_trnsctn_flw == SELL )
						{
							d_obli_pl	=	( (double) ptr_st_pstn_actn->l_exec_rt * (double) ptr_st_pstn_actn->l_cover_qty ) -	( (st_cntpos_old.d_opnpstn_val / (double) st_cntpos_old.l_opnpstn_qty) * (double) ptr_st_pstn_actn->l_cover_qty);
						}
					}
					/*** else if (ptr_st_pstn_actn->c_prd_typ == 'O')
					{
						if(	ptr_st_pstn_actn->c_trnsctn_flw == BUY	)
						{
							d_obli_pl	=	( (st_cntpos_old.d_opnpstn_val / (double) st_cntpos_old.l_opnpstn_qty) *  (double) ptr_st_pstn_actn->l_cover_qty )	-	 ( (double) ptr_st_pstn_actn->l_exec_rt * (double) ptr_st_pstn_actn->l_cover_qty );
						}
					} Commented on 10-Dec-2011 ***/
				}

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
				if(DEBUG_MSG_LVL_2)
				{
					fn_userlog ( c_ServiceName, "********************d_obli_pl :%lf:*************************", d_obli_pl );
				}
			} 
				
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog ( c_ServiceName, "************BEFORE fn_sum_spnpos************");
				fn_userlog ( c_ServiceName, "ptr_st_undfut_pos_to_be->l_uopnpstn_qty IS :%ld:",ptr_st_undfut_pos_to_be->l_uopnpstn_qty);
				fn_userlog ( c_ServiceName, "st_cntpos_crrnt.l_opnpstn_qty IS :%ld:",st_cntpos_crrnt.l_opnpstn_qty);
				fn_userlog ( c_ServiceName, "********************************************");
			}

			fn_sum_spnpos ( st_cntpos_crrnt, ptr_st_undfut_pos_to_be );

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog ( c_ServiceName, "*****AFTER fn_sum_spnpos********");
				fn_userlog ( c_ServiceName, "ptr_st_undfut_pos_to_be->l_uopnpstn_qty IS :%ld:",ptr_st_undfut_pos_to_be->l_uopnpstn_qty);
				fn_userlog ( c_ServiceName, "st_cntpos_crrnt.l_opnpstn_qty IS :%ld:",st_cntpos_crrnt.l_opnpstn_qty);
				fn_userlog ( c_ServiceName, "********************************************");

				fn_userlog ( c_ServiceName, "AFTER fn_sum_spnpos  st_cntpos_crrnt.d_mtm_opn_val    :%lf:", st_cntpos_crrnt.d_mtm_opn_val );
				fn_userlog ( c_ServiceName, "AFTER fn_sum_spnpos st_cntpos_md_rc.d_mtm_opn_val    :%lf:", st_cntpos_md_rc.d_mtm_opn_val );
				fn_userlog ( c_ServiceName, "AFTER fn_sum_spnpos st_cntpos_crrnt.d_opnpstn_val    :%lf:", st_cntpos_crrnt.d_opnpstn_val );
				fn_userlog ( c_ServiceName, "AFTER fn_sum_spnpos ptr_st_undfut_pos_to_be->d_uopnpstn_val :%lf:", ptr_st_undfut_pos_to_be->d_uopnpstn_val );
				fn_userlog ( c_ServiceName, "AFTER fn_sum_spnpos ptr_st_undfut_pos_to_be->d_umtm_opn_val :%lf:", ptr_st_undfut_pos_to_be->d_umtm_opn_val );

				fn_userlog(c_ServiceName,"SPAN	-	st_cntpos_crrnt.l_opnpstn_qty Is :%ld:",st_cntpos_crrnt.l_opnpstn_qty);
				fn_userlog(c_ServiceName,"SPAN  - Before d_blkd_prmum	Is :%lf:",d_blkd_prmum);
			}

			/******** Commented by Mahesh 
      l_max_opn_qty = st_cntpos_crrnt.l_opnpstn_qty + st_cntpos_crrnt.l_ibuy_qty ;
      l_min_opn_qty = st_cntpos_crrnt.l_opnpstn_qty + st_cntpos_crrnt.l_isell_qty ;
			***************************/

			l_max_opn_qty = st_cntpos_crrnt.l_opnpstn_qty  +  fn_maxl(st_cntpos_crrnt.l_ibuy_qty,st_cntpos_crrnt.l_exbuy_qty) ;
			l_min_opn_qty = st_cntpos_crrnt.l_opnpstn_qty  +  fn_maxl(abs(st_cntpos_crrnt.l_isell_qty),abs(st_cntpos_crrnt.l_exsell_qty)) * -1  ;


		  if ( st_cntpos_crrnt.c_prd_typ ==  'O' )
			{
				l_temp_qty  = fn_minl ( l_max_opn_qty , l_min_opn_qty );
				l_max_opn_qty = l_temp_qty  ;
				l_min_opn_qty = l_temp_qty  ;
			}

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
			if(DEBUG_MSG_LVL_2)
			{
				fn_userlog(c_ServiceName,"l_max_opn_qty	Is :%ld:",l_max_opn_qty);
				fn_userlog(c_ServiceName,"l_min_opn_qty	Is :%ld:",l_min_opn_qty);
			}

			i_expsr_rtrn	=	fn_cal_expsr	(	c_ServiceName,
																			st_cntpos_crrnt,
																			l_basket_id,
																			&d_expsr_mrgn,
																			&d_min_expsr_mrgn,
																			&d_mltplr,
																			c_err_msg
																		);

			if ( i_expsr_rtrn != 0 )
			{
				 fn_errlog(c_ServiceName, "S31925", LIBMSG, c_err_msg );
         EXEC SQL CLOSE :sys_cursor;
				 EXEC SQL FREE :sys_cursor;   /*** Added in Ver 3.9 **/
         tpfree((char *)ptr_fml_Obuf);
         tpfree((char *)ptr_fml_Ibuf);
         return -1;
			}

			EXEC SQL
        SELECT  NVL(FTQ_LST_TRD_PRC,0),   /*** Ver 1.1 ***/
								NVL(FTQ_CLS_PRC ,0 )      /*** Ver 1.1 ***/
        INTO    :d_ltp,
								:d_clsng_prc
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD	= :st_cntpos_crrnt.c_xchng_cd
				AND			FTQ_PRDCT_TYP = :st_cntpos_crrnt.c_prd_typ
        AND     FTQ_UNDRLYNG  = :st_cntpos_crrnt.c_undrlyng
        AND     FTQ_EXPRY_DT  = :c_exp_dt
        AND     FTQ_EXER_TYP  = :st_cntpos_crrnt.c_exer_typ
        AND     FTQ_OPT_TYP   = :st_cntpos_crrnt.c_opt_typ
        AND     FTQ_STRK_PRC  = :st_cntpos_crrnt.l_strike_prc;

      if( (SQLCODE  !=  0) && (SQLCODE  !=  NO_DATA_FOUND) )		/*** No data found condn handled for corp action ***/
      {
				 EXEC SQL CLOSE :sys_cursor;
				 EXEC SQL FREE :sys_cursor;
		     tpfree((char *)ptr_fml_Ibuf);
		     tpfree((char *)ptr_fml_Obuf);
	       fn_errlog ( c_ServiceName, "S31930", SQLMSG, ptr_st_err_msg->c_err_msg );
		     return -1;
      }
			if ( SQLCODE  ==  NO_DATA_FOUND )
			{
				d_ltp = 0.0;
				d_clsng_prc = 0.0;
			}

			/***	notional Profit / Loss Calculation	Contractwise	***/
		
    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/	
			if(DEBUG_MSG_LVL_2)
			{
				fn_userlog(c_ServiceName,"************NOTIONAL PROFIT LOSS CONTRACTWISE***********");
				fn_userlog(c_ServiceName,"st_cntpos_crrnt.l_opnpstn_qty  Is :%ld:",st_cntpos_crrnt.l_opnpstn_qty);
				fn_userlog(c_ServiceName,"st_cntpos_crrnt.d_opnpstn_val  Is :%lf:",st_cntpos_crrnt.d_opnpstn_val);
				fn_userlog(c_ServiceName,"d_ltp  Is :%lf:",d_ltp);
				fn_userlog(c_ServiceName,"d_clsng_prc  Is :%lf:",d_clsng_prc);
			}
		
			if ( st_cntpos_crrnt.l_opnpstn_qty != 0 )			
			{
				if ( st_cntpos_crrnt.c_prd_typ == 'O' && st_cntpos_crrnt.l_opnpstn_qty > 0 ) /** Option Buy position **/
				{
					d_cntrct_pl	=	0;
				}
				else if ( st_cntpos_crrnt.c_prd_typ == 'O' && st_cntpos_crrnt.l_opnpstn_qty < 0 ) /** Option Sell position **/
				{
					d_cntrct_pl	=	(double) abs(st_cntpos_crrnt.l_opnpstn_qty)	*	(	d_clsng_prc	-	d_ltp	);
				}
				else	if (	st_cntpos_crrnt.c_prd_typ	==	'F'	)
				{
					if(	st_cntpos_crrnt.l_opnpstn_qty	>	0	)
					{
						d_cntrct_pl	=	( d_ltp * (double) st_cntpos_crrnt.l_opnpstn_qty ) -	st_cntpos_crrnt.d_opnpstn_val;
					}
					else if ( st_cntpos_crrnt.l_opnpstn_qty < 0 )
					{
						d_cntrct_pl	=	fabs(st_cntpos_crrnt.d_opnpstn_val)	-	 ( d_ltp * (double) abs(st_cntpos_crrnt.l_opnpstn_qty) )	;
					}
				}
			}

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
			if(DEBUG_MSG_LVL_2)
			{
				fn_userlog(c_ServiceName,"PROFIT LOSS CONTRACT : d_cntrct_pl  Is :%lf:",d_cntrct_pl);
				fn_userlog(c_ServiceName,"*******************************************************");
			}

			d_ltp	=	d_ltp	/	100;

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"d_ltp  Is :%lf:",d_ltp);
			}

				EXEC SQL
					SELECT	SEM_MAP_VL
					INTO		:c_semmapval
					FROM		SEM_STCK_MAP
					WHERE		SEM_STCK_CD	=	:st_cntpos_crrnt.c_undrlyng
				/*	AND			SEM_ENTTY		=	3;					**** Ver 1.4 Comment ***/
					AND			SEM_ENTTY		=DECODE(:sql_xchng_cd,'NFO',3,'BFO',14);	/*** Ver 1.4 **/			/***	Ver 4.5	***/

				if ( SQLCODE  !=  0 )
      	{
        	fn_errlog ( c_ServiceName, "S31935", SQLMSG, ptr_st_err_msg->c_err_msg );
        	EXEC SQL CLOSE :sys_cursor;
 			  	EXEC SQL FREE :sys_cursor;
        	tpfree((char *)ptr_fml_Ibuf);
        	tpfree((char *)ptr_fml_Obuf);
        	return -1;
      	}
			SETNULL(c_semmapval);
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"c_semmapval  Is :%s:",c_semmapval);
			}

		  EXEC SQL
      	SELECT TO_CHAR(TO_DATE(:st_cntpos_crrnt.c_expry_dt,'DD-Mon-YYYY'),'dd-Mon-YY')			/***	Ver 4.5	***/
      	INTO  :c_expry_dt
      	FROM  DUAL;

    	if ( SQLCODE  !=  0 )
    	{
				 EXEC SQL CLOSE :sys_cursor;
				 EXEC SQL FREE :sys_cursor;
				 tpfree((char *)ptr_fml_Ibuf);
				 tpfree((char *)ptr_fml_Obuf);
				 fn_errlog ( c_ServiceName, "S31940", SQLMSG, ptr_st_err_msg->c_err_msg );
      	 return -1;
    	}

			/*** l_strike_prc	=	st_cntpos_crrnt.l_strike_prc / 100	; *** Commented in Ver 1.1 ***/

			/*** Ver 1.1 starts here ***/
			d_strike_prc  = (double) st_cntpos_crrnt.l_strike_prc / 100.00  ;	
			sprintf(c_strk_prc,"%lf",d_strike_prc);

			fn_spn_rtrim(c_strk_prc,'0');
			fn_spn_rtrim(c_strk_prc,'.');
			/*** Ver 1.1 ends here ***/

			if	(	l_cntr	==	0	)
			{
      	if(st_cntpos_crrnt.c_prd_typ  ==  'F')
      	{
        	sprintf(c_inp_strng11,"%s^%s~%c:%s^%ld^%lf",st_cntpos_crrnt.c_cln_mtch_accnt,c_semmapval.arr,st_cntpos_crrnt.c_prd_typ,c_expry_dt,l_max_opn_qty,d_ltp);
					/*fn_userlog(c_ServiceName,"c_inp_strng11<%s>",c_inp_strng11);*/

     	 		strcat(c_inp_strng1,c_inp_strng11);

      		sprintf(c_inp_strng22,"%s^%s~%c:%s^%ld^%lf",st_cntpos_crrnt.c_cln_mtch_accnt,c_semmapval.arr,st_cntpos_crrnt.c_prd_typ,c_expry_dt,l_min_opn_qty,d_ltp);
					/*fn_userlog(c_ServiceName,"c_inp_strng22<%s>",c_inp_strng22);*/

      		strcat(c_inp_strng2,c_inp_strng22);

      	}
      	else
      	{
        	sprintf(c_inp_strng11,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntpos_crrnt.c_cln_mtch_accnt,c_semmapval.arr,st_cntpos_crrnt.c_prd_typ,c_expry_dt,st_cntpos_crrnt.c_opt_typ,st_cntpos_crrnt.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/
					/*fn_userlog(c_ServiceName,"c_inp_strng11<%s>",c_inp_strng11);*/

        	strcat(c_inp_strng1,c_inp_strng11);

        	sprintf(c_inp_strng22,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntpos_crrnt.c_cln_mtch_accnt,c_semmapval.arr,st_cntpos_crrnt.c_prd_typ,c_expry_dt,st_cntpos_crrnt.c_opt_typ,st_cntpos_crrnt.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/
					/*fn_userlog(c_ServiceName,"c_inp_strng22<%s>",c_inp_strng22);*/

        	strcat(c_inp_strng2,c_inp_strng22);
      	}
			}
			else
			{
				if(st_cntpos_crrnt.c_prd_typ  ==  'F')
        {
          sprintf(c_inp_strng11,"%s~%c:%s^%ld^%lf",c_semmapval.arr,st_cntpos_crrnt.c_prd_typ,c_expry_dt,l_max_opn_qty,d_ltp);
					/*fn_userlog(c_ServiceName,"c_inp_strng11<%s>",c_inp_strng11);*/

          strcat(c_inp_strng1,c_inp_strng11);

          sprintf(c_inp_strng22,"%s~%c:%s^%ld^%lf",c_semmapval.arr,st_cntpos_crrnt.c_prd_typ,c_expry_dt,l_min_opn_qty,d_ltp);
					/*fn_userlog(c_ServiceName,"c_inp_strng22<%s>",c_inp_strng22);*/

          strcat(c_inp_strng2,c_inp_strng22);

        }
        else
        {
          sprintf(c_inp_strng11,"%s~%c:%s:%c%c:%s^%ld^%lf",c_semmapval.arr,st_cntpos_crrnt.c_prd_typ,c_expry_dt,st_cntpos_crrnt.c_opt_typ,st_cntpos_crrnt.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/
					/*fn_userlog(c_ServiceName,"c_inp_strng11<%s>",c_inp_strng11);*/

          strcat(c_inp_strng1,c_inp_strng11);

          sprintf(c_inp_strng22,"%s~%c:%s:%c%c:%s^%ld^%lf",c_semmapval.arr,st_cntpos_crrnt.c_prd_typ,c_expry_dt,st_cntpos_crrnt.c_opt_typ,st_cntpos_crrnt.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/
					/*fn_userlog(c_ServiceName,"c_inp_strng22<%s>",c_inp_strng22);*/

          strcat(c_inp_strng2,c_inp_strng22);
        }
			}

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog ( c_ServiceName, "Expiry date       :%s:", c_exp_dt.arr );
        fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntpos_crrnt.l_ibuy_qty );
        fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntpos_crrnt.d_ibuy_ord_val );
        fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntpos_crrnt.l_isell_qty );
        fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntpos_crrnt.d_isell_ord_val );
        fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntpos_crrnt.l_exbuy_qty );
        fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntpos_crrnt.d_exbuy_ord_val );
        fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntpos_crrnt.l_exsell_qty );
        fn_userlog ( c_ServiceName, "EXCH sell val      :%lf:", st_cntpos_crrnt.d_exsell_ord_val );
        fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntpos_crrnt.l_buy_exctd_qty );
        fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_cntpos_crrnt.l_sell_exctd_qty );
        fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntpos_crrnt.l_opnpstn_qty );
        fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntpos_crrnt.d_opnpstn_val );
        fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntpos_crrnt.d_mtm_opn_val );
				fn_userlog ( c_ServiceName, "st_cntpos_md_rc.d_mtm_opn_val    :%lf:", st_cntpos_md_rc.d_mtm_opn_val );
				fn_userlog ( c_ServiceName, "ptr_st_undfut_pos_to_be->d_umtm_opn_val    :%lf:", ptr_st_undfut_pos_to_be->d_umtm_opn_val );
     }

    strcat(c_inp_strng1,",");
		strcat(c_inp_strng2,",");

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog ( c_ServiceName, " IN LOOP BEFORE d_undrlyng_pl :%lf:",d_undrlyng_pl );
			fn_userlog ( c_ServiceName, " IN LOOP d_cntrct_pl :%lf:",d_cntrct_pl );
		}

		l_cntr	++;
		d_blkd_prmum	=	0.0	;
		d_undrlyng_pl	=	d_undrlyng_pl	+	d_cntrct_pl	;
    
		d_expsr			=	d_expsr_mrgn	+	d_expsr	;	/*** 20-Oct-2011 ***/
		d_min_expsr	=	d_min_expsr_mrgn	+	d_min_expsr	; /*** 20-Oct-2011 ***/

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog ( c_ServiceName, " IN LOOP AFTER d_undrlyng_pl :%lf:",d_undrlyng_pl );
			fn_userlog ( c_ServiceName, "IN LOOP d_blk_total_prmum = %lf",d_blk_total_prmum);
		}
	}

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
	if(DEBUG_MSG_LVL_2)
	{
		fn_userlog ( c_ServiceName, "OUTSIDE d_blk_total_prmum = %lf",d_blk_total_prmum);
	}

  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

  l_length1 = strlen(c_inp_strng1);

  if( c_inp_strng1[l_length1  - 1 ] == ',')
  {
    c_inp_strng1[l_length1 -1]  ='\0';
  }

	l_length2 = strlen(c_inp_strng2);

  if( c_inp_strng2[l_length2  - 1 ] == ',')
  {
    c_inp_strng2[l_length2 -1]  ='\0';

  }

	if ( st_cntpos_md_rc.l_opnpstn_qty > 0 )
	{
		st_cntpos_md_rc.c_opnpstn_flw = BUY;
	}
	else if ( st_cntpos_md_rc.l_opnpstn_qty < 0 )
	{
		st_cntpos_md_rc.c_opnpstn_flw = SELL;
	}	
  else 
  {
		st_cntpos_md_rc.c_opnpstn_flw = NEUTRAL;
  }

	/** Update the contract level position on which the action has been applied **/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"UPDATE FCP");
		fn_userlog ( c_ServiceName, "d_blk_total_prmum = %lf",d_blk_total_prmum);
	}

	EXEC SQL
		UPDATE  FCP_FO_SPN_CNTRCT_PSTN
		SET     FCP_IBUY_QTY       = :st_cntpos_md_rc.l_ibuy_qty,
						FCP_IBUY_ORD_VAL   = :st_cntpos_md_rc.d_ibuy_ord_val,
						FCP_ISELL_QTY      = :st_cntpos_md_rc.l_isell_qty,
						FCP_ISELL_ORD_VAL  = :st_cntpos_md_rc.d_isell_ord_val,
						FCP_EXBUY_QTY      = :st_cntpos_md_rc.l_exbuy_qty,
						FCP_EXBUY_ORD_VAL  = :st_cntpos_md_rc.d_exbuy_ord_val,
						FCP_EXSELL_QTY     = :st_cntpos_md_rc.l_exsell_qty,
						FCP_EXSELL_ORD_VAL = :st_cntpos_md_rc.d_exsell_ord_val,
						FCP_BUY_EXCTD_QTY  = :st_cntpos_md_rc.l_buy_exctd_qty,
						FCP_SELL_EXCTD_QTY = :st_cntpos_md_rc.l_sell_exctd_qty,
						FCP_OPNPSTN_FLW    = :st_cntpos_md_rc.c_opnpstn_flw,
						FCP_OPNPSTN_QTY    = :st_cntpos_md_rc.l_opnpstn_qty,
						FCP_OPNPSTN_VAL    = :st_cntpos_md_rc.d_opnpstn_val,
						FCP_MTM_OPN_VAL    = :st_cntpos_md_rc.d_mtm_opn_val,
						FCP_OPT_PREMIUM		 = :st_cntpos_md_rc.d_opt_premium
		WHERE   FCP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
		AND     FCP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
		AND     FCP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
		AND     FCP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
		AND     FCP_EXPRY_DT       = to_date(:ptr_st_pstn_actn->c_expry_dt,'DD-Mon-YYYY')
		AND     FCP_EXER_TYP       = :ptr_st_pstn_actn->c_exrc_typ
		AND			FCP_OPT_TYP				 = :ptr_st_pstn_actn->c_opt_typ
		AND			FCP_STRK_PRC			 = :ptr_st_pstn_actn->l_strike_prc
    RETURNING NVL(FCP_MTM_FLG,'O')        /**** Ver 5.1 ****/
    INTO :c_fcp_mtm_flg_new;

	if ( SQLCODE != 0 )
	{
		fn_errlog(c_ServiceName, "S31945", SQLMSG, ptr_st_err_msg->c_err_msg );
		tpfree((char *)ptr_fml_Ibuf);
		tpfree((char *)ptr_fml_Obuf);
		return -1;
	}
 
	
 /**** Ver 5.1 Started *******/
  fn_userlog(c_ServiceName," c_fcp_mtm_flg_new after updating FCP :%c:",c_fcp_mtm_flg_new);
   if ( ( c_fcp_mtm_flg_new == UNDER_PHYDLVRY_MTM ) &&
             ( st_cntpos_md_rc.l_ibuy_qty == 0 ) &&
             ( st_cntpos_md_rc.l_exbuy_qty == 0 ) &&
             ( st_cntpos_md_rc.l_isell_qty == 0 ) &&
             ( st_cntpos_md_rc.l_exsell_qty == 0 ) 
      ) 
  {
    c_fcp_mtm_flg_new=NO_PHYDLVRY_OPEN_ORDERS;
    *c_fcp_mtm_flg=c_fcp_mtm_flg_new;
  }

  if(DEBUG_MSG_LVL_3)
  {
   fn_userlog(c_ServiceName," c_fcp_mtm_flg_new after updating FCP :%c:",c_fcp_mtm_flg_new);
   fn_userlog ( c_ServiceName, "Kiran fetching MTM flag is :%c:",c_dlvrmtm_flg);
   fn_userlog (c_ServiceName, "user id is :%s:",ptr_st_pstn_actn->c_user_id);
   fn_userlog (c_ServiceName, "session id is :%ld:",ptr_st_pstn_actn->l_session_id);
  }

      if ( ( c_dlvrmtm_flg == UNDER_PHYDLVRY_MTM ) && ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0) && ( ptr_st_pstn_actn->l_session_id != 0 ) )
      {
         fn_errlog(c_ServiceName, "B28009",DEFMSG, ptr_st_err_msg->c_err_msg);
				 tpfree((char *)ptr_fml_Ibuf);
   			 tpfree((char *)ptr_fml_Obuf);
         return -7;

      }

      /**** Ver 5.1 Ended *******/	

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Calcualted underlying level position" );
		fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", ptr_st_undfut_pos_to_be->l_uibuy_qty );
		fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", ptr_st_undfut_pos_to_be->d_uibuy_val );
		fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", ptr_st_undfut_pos_to_be->l_uisell_qty );
		fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", ptr_st_undfut_pos_to_be->d_uisell_val );
		fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", ptr_st_undfut_pos_to_be->l_uexbuy_qty );
		fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", ptr_st_undfut_pos_to_be->d_uexbuy_val );
		fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", ptr_st_undfut_pos_to_be->l_uexsell_qty );
		fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", ptr_st_undfut_pos_to_be->d_uexsell_val );
		fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", ptr_st_undfut_pos_to_be->l_ubuy_exctd_qty );
		fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", ptr_st_undfut_pos_to_be->l_usell_exctd_qty );
		fn_userlog ( c_ServiceName, "Open qty          :%ld:", ptr_st_undfut_pos_to_be->l_uopnpstn_qty );
		fn_userlog ( c_ServiceName, "Original open val :%lf:", ptr_st_undfut_pos_to_be->d_uopnpstn_val );
		fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", ptr_st_undfut_pos_to_be->d_umtm_opn_val );
	}

	/*** Ver 1.1 starts here ***/
    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
	if(DEBUG_MSG_LVL_2)
	{
		fn_userlog( c_ServiceName, "i_cntrct_cnt = :%d:",i_cntrct_cnt);
	}

	if (i_cntrct_cnt > 10)
	{
		if ( Fadd32 (ptr_fml_Ibuf,FFO_PIPE_ID,(char *)c_pipe_id,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31950",FMLMSG , ptr_st_err_msg->c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}
		fn_cpy_ddr ( ptr_st_pstn_actn->c_rout_crt );

		MEMSET(c_inp_strng);
		strcpy(c_inp_strng,c_inp_strng1);
		strcat(c_inp_strng,"\n");
			
		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"c_inp_strng 1 = :%s:",c_inp_strng);
		}

		if ( Fadd32 (ptr_fml_Ibuf,FFO_REMARKS,(char *)c_inp_strng,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31955",FMLMSG , ptr_st_err_msg->c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
		}

		i_returncode  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

		if(i_returncode == -1)
		{
			fn_errlog( c_ServiceName, "S31960",TPMSG , ptr_st_err_msg->c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

		if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng1,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31965",FMLMSG , ptr_st_err_msg->c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
		if(DEBUG_MSG_LVL_2)
		{
			fn_userlog(c_ServiceName,"Output String 1 Is :%s:",c_op_strng1);
		}


    /*** Ver 6.5  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                   ptr_st_err_msg->c_err_msg 
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31970",LIBMSG , ptr_st_err_msg->c_err_msg);
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
    /*** Ver 6.5 Ends here ***/
		MEMSET(c_inp_strng);

		/**** Ver 1.4 BUG bix Starts Here *****/

    if( strcmp(sql_xchng_cd,"NFO") == 0 )
    {
      strcpy( c_inp_strng ,"1^NSE^");
    }
    else
    {
        strcpy( c_inp_strng ,"1^BSE^");
    }
    /**** Ver 1.4 Ends Here ******/

		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"Initial c_inp_strng2 = :%s:",c_inp_strng2);
		}

		fn_spn_ltrim(c_inp_strng2,'|');
		/*** sprintf(c_inp_strng,"1^%s",c_inp_strng2); ** Ver 1.4 ***/ 
		/*** sprintf(c_inp_strng,"%s",c_inp_strng2);   ** Ver 1.4 ***/ 
		strcat(c_inp_strng,c_inp_strng2);             /** Ver 1.4 ***/	
		strcat(c_inp_strng,"\n");	

		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"c_inp_strng 2 = :%s:",c_inp_strng);
		}

		if ( Fchg32 (ptr_fml_Ibuf,FFO_REMARKS,0,(char *)c_inp_strng,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31975",FMLMSG , ptr_st_err_msg->c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
		}

		i_returncode  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

		if(i_returncode == -1)
		{
			fn_errlog( c_ServiceName, "S31980",TPMSG , ptr_st_err_msg->c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

		if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng2,0)  ==  -1 )
		{	
			fn_errlog( c_ServiceName, "S31985",FMLMSG , ptr_st_err_msg->c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}
		
		fn_spn_ltrim(c_op_strng2,'1');
		fn_spn_ltrim(c_op_strng2,'^');

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
		if(DEBUG_MSG_LVL_2)
		{
			fn_userlog(c_ServiceName,"Output String 2 Is :%s:",c_op_strng2);
		}

    /*** Ver 6.5 Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn2,
                                    &d_bnov2,
                                    &d_total_bmrgn2,
                                    c_ServiceName,
                                    ptr_st_err_msg->c_err_msg 
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31990",LIBMSG , ptr_st_err_msg->c_err_msg);
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn2 :%lf: d_bnov2:%lf: d_total_bmrgn2:%lf:",d_spn_bmrgn2,d_bnov2,d_total_bmrgn2);
    }
    /*** Ver 6.5 Ends here ***/
	}
	else
	{
	/*** Ver 1.1 Ends here ***/
		strcpy(c_inp_strng,c_inp_strng1);
		strcat(c_inp_strng,c_inp_strng2);
		strcat(c_inp_strng,"\n");

		if ( Fadd32 (ptr_fml_Ibuf,FFO_PIPE_ID,(char *)c_pipe_id,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31995",FMLMSG , ptr_st_err_msg->c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

		if ( Fadd32 (ptr_fml_Ibuf,FFO_REMARKS,(char *)c_inp_strng,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S32000",FMLMSG , ptr_st_err_msg->c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

		/*fn_userlog(c_ServiceName,"Input String to SFO_SPAN_MRGN =<%s>",c_inp_strng);*/

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
		}

		fn_cpy_ddr ( ptr_st_pstn_actn->c_rout_crt );

		i_returncode  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

		if(i_returncode == -1)
		{
			fn_errlog( c_ServiceName, "S32005",TPMSG , ptr_st_err_msg->c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

		if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S32010",FMLMSG , ptr_st_err_msg->c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
		if(DEBUG_MSG_LVL_2)
		{
			fn_userlog(c_ServiceName,"Output String Is :%s:",c_op_strng);
		}

		strcpy(c_op_strng1,strtok(c_op_strng,"|"));
		strcpy(c_op_strng2,strtok(null_ptr,"|"));

    /*** Ver 6.5 Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    ptr_st_err_msg->c_err_msg 
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S32015",LIBMSG , ptr_st_err_msg->c_err_msg);
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    } 
    /*** Ver 6.5 Ends here ***/

	}			/*** Ver 1.1 ***/

  strcpy(c_mrgn_indctr,strtok(c_op_strng1,"^"));
  strcpy(c_xchng_cd1,strtok(null_ptr,"^"));				/*** ver 1.4 ***/
  strcpy(c_seq_num1,strtok(null_ptr,"^"));
  strcpy(c_mtch_accnt1,strtok(null_ptr,"^"));
  strcpy(c_spn_mrgn1,strtok(null_ptr,"^"));
  strcpy(c_nov1,strtok(null_ptr,"^"));
  strcpy(c_total_mrgn1,strtok(null_ptr,"^"));

	if (i_cntrct_cnt > 10) /*** Condition Added in ver 1.8 ***/
  {
  strcpy(c_xchng_cd2,strtok(c_op_strng2,"^"));    /** Ver 1.4 ***/
  /* strcpy(c_seq_num2,strtok(c_op_strng2,"^"));   ** Ver 1.4 ***/
  strcpy(c_seq_num2,strtok(null_ptr,"^"));        /** Ver 1.4 ***/
	}
	else
	{
		strcpy(c_seq_num2,strtok(c_op_strng2,"^"));  /*** Ver 1.8 ***/
	}
  strcpy(c_mtch_accnt2,strtok(null_ptr,"^"));
  strcpy(c_spn_mrgn2,strtok(null_ptr,"^"));
  strcpy(c_nov2,strtok(null_ptr,"^"));
	strcpy(c_total_mrgn2,strtok(null_ptr,"^"));

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"SPAN c_mtch_accnt1 Is :%s:",c_mtch_accnt1);
		fn_userlog(c_ServiceName,"SPAN c_xchng_cd1 Is :%s:",c_xchng_cd1);
		fn_userlog(c_ServiceName,"SPAN c_xchng_cd2 Is :%s:",c_xchng_cd2); /** Ver 1.4 ***/
    fn_userlog(c_ServiceName,"SPAN c_seq_num2 Is :%s:",c_seq_num2);  /** Ver 1.4 ***/
    fn_userlog(c_ServiceName,"SPAN c_spn_mrgn2 Is :%s:",c_spn_mrgn2); /** Ver 1.4 ***/
    fn_userlog(c_ServiceName,"SPAN c_nov2 Is :%s:",c_nov2);            /** Ver 1.4 ***/
    fn_userlog(c_ServiceName,"SPAN c_total_mrgn2 Is :%s:",c_total_mrgn2); /** Ver 1.4 ***/
	}

  d_spn_mrgn1   = atof(c_spn_mrgn1);
  d_spn_mrgn2   = atof(c_spn_mrgn2);
  d_nov1        = atof(c_nov1);
  d_nov2        = atof(c_nov2);
  d_total_mrgn1 = atof(c_total_mrgn1);
  d_total_mrgn2 = atof(c_total_mrgn2);

  /*** Ver 6.5 Starts here ***/
  d_spn_bmrgn = fn_maxd(d_spn_bmrgn1,d_spn_bmrgn2) * 100;
  d_bnov      = fn_maxd(d_bnov1,d_bnov2) * 100;
  d_total_bmrgn = fn_maxd(d_total_bmrgn1,d_total_bmrgn2) * 100;

  if(DEBUG_MSG_LVL_4)
  {
    fn_userlog(c_ServiceName,"d_spn_bmrgn :%lf: d_bnov :%lf: d_total_bmrgn:%lf:",d_spn_bmrgn,d_bnov,d_total_bmrgn);
  }
  /*** Ver 6.5 Ends here ***/

  st_undfut_pos_to_be.d_uspan_nenov_mrgn    = fn_maxd(d_spn_mrgn1,d_spn_mrgn2)* 100;
  st_undfut_pos_to_be.d_net_optn_val				= fn_maxd(d_nov1,d_nov2)* 100;
  st_undfut_pos_to_be.d_uspan_wenov_mrgn	  = fn_maxd(d_total_mrgn1,d_total_mrgn2)* 100;

  /*** Ver 6.5 Starts Here ***/
  st_undfut_pos_to_be.d_uspan_nenov_mrgn  = fn_maxd(st_undfut_pos_to_be.d_uspan_nenov_mrgn,d_spn_bmrgn);
  st_undfut_pos_to_be.d_net_optn_val = fn_maxd(st_undfut_pos_to_be.d_net_optn_val,d_bnov);
  st_undfut_pos_to_be.d_uspan_wenov_mrgn = fn_maxd(st_undfut_pos_to_be.d_uspan_wenov_mrgn,d_total_bmrgn);
  /*** Ver 6.5 Ends Here ***/

	d_spn_mrgn		=	st_undfut_pos_to_be.d_uspan_nenov_mrgn;
	d_nov					=	st_undfut_pos_to_be.d_net_optn_val;
	d_total_mrgn	=	st_undfut_pos_to_be.d_uspan_wenov_mrgn;

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/	
	if(DEBUG_MSG_LVL_2)
	{
		fn_userlog ( c_ServiceName, "Calculating margin" );
	}
	/** Calculate the margin on the new underlying position **/
	
	i_returncode	=	fn_cal_mrgn ( c_ServiceName,
     		           								d_total_mrgn,
       		          							d_mltplr,
         		       								d_expsr,
																	d_min_expsr,
           		      							&d_min_mrgn,
             		    							&d_intl_mrgn,
               		  							c_err_msg
               									);
  if ( i_returncode !=  0 )
  {
    fn_errlog( c_ServiceName, "S32020",LIBMSG , ptr_st_err_msg->c_err_msg );
    fn_userlog(c_ServiceName,"Service Return Error.");
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
    return -1 ;
  }

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"SPAN  - SPAN MARGIN IS :%lf:",d_spn_mrgn);
		fn_userlog(c_ServiceName,"SPAN  - NOV IS :%lf:",d_nov);
		fn_userlog(c_ServiceName,"SPAN  - Total Margin  IS :%lf:",d_total_mrgn);
		fn_userlog(c_ServiceName,"SPAN  - Exposure  IS :%lf:",d_expsr);
		fn_userlog(c_ServiceName,"SPAN  - Min. Margin IS :%lf:",d_min_mrgn);
		fn_userlog(c_ServiceName,"SPAN  - Initial Margin IS :%lf:",d_intl_mrgn);
	}

	/* Type Casted by Mahesh for 1 paisa issue */

	st_undfut_pos_to_be.d_multpr						=	d_mltplr			;
	st_undfut_pos_to_be.d_eba_expr_mrgn			=	( long long )d_expsr;
	st_undfut_pos_to_be.d_span_wemult_mrgn	= ( long long )d_total_mrgn * d_mltplr ;	
	st_undfut_pos_to_be.d_min_mrgn					=	d_min_mrgn	;
	st_undfut_pos_to_be.d_reqd_initial_mrgn	=	( long long )d_intl_mrgn		;
	st_undfut_pos_to_be.d_ntnl_pl =	d_undrlyng_pl;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_ntnl_pl IS :%lf:",st_undfut_pos_to_be.d_ntnl_pl);
	}


	/** The code from this point onwards does the following activity   **/
	/** Based on the type of action compare the current margin with    **/
	/** required margin and update them. Do the profit loss correction **/

	/** This bit of code down below checks the difference betweend the  **/
	/** current order level margin with the required order level margin **/
	/** then take a corrective measure. This code need not be called for**/
	/** action which do not involve any order level margin change       **/

	/*** Commented on 05-Dec-2011 start ***
	strcpy( c_narration_id , MARGIN_ADJ_ON_TRD_EXEC);
	c_dr_without_lmt_flg = DEBIT_TILL_LIMIT; 

	d_diff_mrgn = ptr_st_undfut_pos_crrnt->d_initial_mrgn - st_undfut_pos_to_be.d_reqd_initial_mrgn ; 

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "ptr_st_undfut_pos_crrnt->d_initial_mrgn:%lf:", ptr_st_undfut_pos_crrnt->d_initial_mrgn);
		fn_userlog ( c_ServiceName, "ptr_st_undfut_pos_crrnt->d_reqd_initial_mrgn :%lf:", ptr_st_undfut_pos_crrnt->d_reqd_initial_mrgn );
		fn_userlog ( c_ServiceName, "st_undfut_pos_to_be.d_reqd_initial_mrgn :%lf:", st_undfut_pos_to_be.d_reqd_initial_mrgn );
		fn_userlog ( c_ServiceName, "Deficit Margin Required <DM> :%lf:", d_diff_mrgn );
	}

	if ( d_diff_mrgn != 0 )
	{
			i_returncode = fn_upd_spnlimits( c_ServiceName,
										 								ptr_st_pstn_actn,
                  	 								ptr_st_err_msg,
										 								c_narration_id,
										 								c_dr_without_lmt_flg,
										 								d_diff_mrgn,
																		&d_balance_amt);
      if ( i_returncode != 0 )
      {
				fn_errlog( c_ServiceName, "S32025",LIBMSG , c_err_msg );
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf);
				return -1;
	    }

			fn_userlog(c_ServiceName,"SPAN	-	d_balance_amt Is :%lf:",d_balance_amt);

			*** Added to take care of balance amount in case of ***
			*** DEBIT_TILL_LIMIT. d_balance_amt is added        ***
      *** since it is always negative or Zero             ***
			ptr_st_undfut_pos_to_be->d_initial_mrgn =	ptr_st_undfut_pos_to_be->d_reqd_initial_mrgn + d_balance_amt ;

			if ( d_balance_amt !=	0	)
			{
				if( (-1)* d_balance_amt >= ptr_st_undfut_pos_crrnt->d_eba_expr_mrgn )
				{
					st_undfut_pos_to_be.d_uspan_wenov_mrgn	=  ptr_st_undfut_pos_crrnt->d_uspan_wenov_mrgn	- ((-1)*d_balance_amt -  ptr_st_undfut_pos_crrnt->d_eba_expr_mrgn );
					st_undfut_pos_to_be.d_eba_expr_mrgn = 0;
				}
				else
				{
					st_undfut_pos_to_be.d_eba_expr_mrgn =  ptr_st_undfut_pos_crrnt->d_eba_expr_mrgn + d_balance_amt;
				}
			}
			
			d_bal_mrgn_amt = d_balance_amt;
			
			fn_userlog(c_ServiceName,"SPAN	- d_balance_amt = :%lf:",d_balance_amt);
			fn_userlog(c_ServiceName,"SPAN	-	ptr_st_undfut_pos_to_be->d_initial_mrgn Is :%lf:",ptr_st_undfut_pos_to_be->d_initial_mrgn);
			fn_userlog(c_ServiceName,"SPAN	-	st_undrlyng_pstn.d_uspan_wenov_mrgn Is :%lf:",st_undrlyng_pstn.d_uspan_wenov_mrgn);
			fn_userlog(c_ServiceName,"SPAN	-	st_undrlyng_pstn.d_eba_expr_mrgn Is :%lf:",st_undrlyng_pstn.d_eba_expr_mrgn);
	}
	*** Commented on 05-Dec-2011 Ends ***/

	/*** Added on 05-Dec-2011 start ***/

	/*** Releasing Blocked Initial Margin ***/
    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
	if(DEBUG_MSG_LVL_2)
	{
		fn_userlog( c_ServiceName, "Releasing  Blocked Margin :FUS_INITIAL_MRGN");
		fn_userlog( c_ServiceName, "Blocked Intial Margin Is :%lf: ",ptr_st_undfut_pos_crrnt->d_initial_mrgn);
	}

	strcpy( c_narration_id , REL_TRDMRGN_TRADE_CONFIRMATION);
	c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;

	if ( ptr_st_undfut_pos_crrnt->d_initial_mrgn != 0 )
	{
			d_balance_amt  = 0.0;           /*** Ver 1.1 ***/
			i_returncode = fn_upd_spnlimits( c_ServiceName,
																	ptr_st_pstn_actn,
																	ptr_st_err_msg,
																	c_narration_id,
																	c_dr_without_lmt_flg,
																	ptr_st_undfut_pos_crrnt->d_initial_mrgn,
																	&d_balance_amt);

			if ( i_returncode != 0 )
			{
				fn_errlog( c_ServiceName, "S32030",LIBMSG , c_err_msg );
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf);
				return -1;
			}
	}

	/*** Releasing Blocked Loss ***/
    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
	if(DEBUG_MSG_LVL_2)
	{
		fn_userlog( c_ServiceName, "Releasing  Blocked Loss :FUS_BLCKD_PL");
		fn_userlog( c_ServiceName, "Releasing Blocked LOSS :%lf: ",ptr_st_undfut_pos_crrnt->d_blckd_pl);
	}

	strcpy( c_narration_id , REL_BLKDLOSS_TRADE_CONFIRMATION);
	c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;

	if ( ptr_st_undfut_pos_crrnt->d_blckd_pl != 0 )
	{
			d_balance_amt  = 0.0;      /*** Ver 1.1 ***/
			i_returncode = fn_upd_spnlimits( c_ServiceName,
																	ptr_st_pstn_actn,
																	ptr_st_err_msg,
																	c_narration_id,
																	c_dr_without_lmt_flg,
																	ptr_st_undfut_pos_crrnt->d_blckd_pl,
																	&d_balance_amt);

			if ( i_returncode != 0 )
			{
				fn_errlog( c_ServiceName, "S32035",LIBMSG , c_err_msg );
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf);
				return -1;
			}
	}
	
    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/	
	if(DEBUG_MSG_LVL_2)
	{
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_span_wemult_mrgn :%lf:",st_undfut_pos_to_be.d_span_wemult_mrgn);
	}

	d_upd_amount = (-1) * st_undfut_pos_to_be.d_span_wemult_mrgn; 

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
	if(DEBUG_MSG_LVL_2)
	{
		fn_userlog(c_ServiceName,"d_upd_amount IS  :%lf:",d_upd_amount);
	}

	strcpy( c_narration_id , BLK_SPAN_MRGN_TRADE_CONFIRMATION);

	if (c_tmp_nkd_blkd_flg == 'R')     /*** Added in ver 1.3 ***/
	{
		c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;
	}
	else
	{
		c_dr_without_lmt_flg = DEBIT_TILL_LIMIT; 
	}

	if ( d_upd_amount < 0 )
	{
		d_balance_amt  = 0.0;          /*** Ver 1.1 ***/
		i_returncode = fn_upd_spnlimits( c_ServiceName,
																	ptr_st_pstn_actn,
																	ptr_st_err_msg,
																	c_narration_id,
																	c_dr_without_lmt_flg,
																	d_upd_amount,
																	&d_balance_amt);
		if ( i_returncode != 0 )
		{
			fn_errlog( c_ServiceName, "S32040",LIBMSG , c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
		if(DEBUG_MSG_LVL_2)
		{
			fn_userlog(c_ServiceName,"SPAN	-	d_balance_amt Is :%lf:",d_balance_amt);
		}

		/*** Added to take care of balance amount in case of ***/
		/*** DEBIT_TILL_LIMIT. d_balance_amt is added        ***/
		/*** since it is always negative or Zero             ***/
		ptr_st_undfut_pos_to_be->d_span_wemult_mrgn =	ptr_st_undfut_pos_to_be->d_span_wemult_mrgn + d_balance_amt ;
		
		d_bal_mrgn_amt = d_bal_mrgn_amt + d_balance_amt; 
	}

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
	if(DEBUG_MSG_LVL_2)
	{
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_eba_expr_mrgn :%lf:",st_undfut_pos_to_be.d_eba_expr_mrgn);
	}

	d_upd_amount = (-1) * st_undfut_pos_to_be.d_eba_expr_mrgn; 

	strcpy( c_narration_id , BLK_EXPR_MRGN_TRADE_CONFIRMATION);

	if (c_tmp_nkd_blkd_flg == 'R')     /*** Added in ver 1.3 ***/
  {
    c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;
  }
  else
	{
		c_dr_without_lmt_flg = DEBIT_TILL_LIMIT; 
	}

	if ( d_upd_amount < 0 )
	{
			d_balance_amt  = 0.0;    /*** Ver 1.1 ***/
			i_returncode = fn_upd_spnlimits( c_ServiceName,
																		ptr_st_pstn_actn,
																		ptr_st_err_msg,
																		c_narration_id,
																		c_dr_without_lmt_flg,
																		d_upd_amount,
																		&d_balance_amt);
			if ( i_returncode != 0 )
			{
				fn_errlog( c_ServiceName, "S32045",LIBMSG , c_err_msg );
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf);
				return -1;
			}

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
			if(DEBUG_MSG_LVL_2)
			{
				fn_userlog(c_ServiceName,"SPAN	-	d_balance_amt Is :%lf:",d_balance_amt);
			}

			/*** Added to take care of balance amount in case of ***/
			/*** DEBIT_TILL_LIMIT. d_balance_amt is added        ***/
			/*** since it is always negative or Zero             ***/
			ptr_st_undfut_pos_to_be->d_eba_expr_mrgn =	ptr_st_undfut_pos_to_be->d_eba_expr_mrgn + d_balance_amt ;

			d_bal_mrgn_amt = d_bal_mrgn_amt + d_balance_amt;
	}

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
	if(DEBUG_MSG_LVL_2)
	{
		fn_userlog(c_ServiceName," Calculating Final INITIAL MARGIN ")	;

		fn_userlog(c_ServiceName,"ptr_st_undfut_pos_to_be->d_span_wemult_mrgn Is :%lf:",ptr_st_undfut_pos_to_be->d_span_wemult_mrgn);
		fn_userlog(c_ServiceName,"ptr_st_undfut_pos_to_be->d_eba_expr_mrgn Is  :%lf:",ptr_st_undfut_pos_to_be->d_eba_expr_mrgn);
	}

	ptr_st_undfut_pos_to_be->d_initial_mrgn = ptr_st_undfut_pos_to_be->d_span_wemult_mrgn + ptr_st_undfut_pos_to_be->d_eba_expr_mrgn ;

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
	if(DEBUG_MSG_LVL_2)
	{
		fn_userlog(c_ServiceName,"Here FINAL INTIAL MARGIN TO BE BLOCKED Is :%lf:",	ptr_st_undfut_pos_to_be->d_initial_mrgn);
	}
	/*** Added on 05-Dec-2011 Ends ***/

	/*** For Cover order...Calculate Obligation Loss and apply DEBIT_WITHOUT_LIMIT or release the profit ***/
	if ( ptr_st_pstn_actn->l_cover_qty > 0 )
	{
    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
			if(DEBUG_MSG_LVL_2)
			{
				fn_userlog ( c_ServiceName,"Calculate Obligation Loss and apply DEBIT_WITHOUT_LIMIT or release the profit" );
			}
		 	strcpy( c_narration_id , PROFIT_LOSS_ON_COVER_LEG);
			c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT; 
		
    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/	
			if(DEBUG_MSG_LVL_2)
			{
				fn_userlog ( c_ServiceName, "Obligation loss :%lf:", d_obli_pl );
			}
			
			if(d_obli_pl != 0 )
			{

				/*** NRI - TDS Starts ***/

				/*** if (  strncmp( ptr_st_pstn_actn->c_cln_mtch_accnt, "751", 3) == 0 ) ** Commented in Ver 3.1 ******/

				/****** Added in Ver 3.1 *******/

				MEMSET(sql_iai_type.arr);

      	EXEC SQL
      	SELECT  IAI_TYPE
      	INTO    :sql_iai_type
      	FROM    IAI_INFO_ACCOUNT_INFO
      	WHERE   IAI_MATCH_ACCOUNT_NO  = :ptr_st_pstn_actn->c_cln_mtch_accnt ;

      	if ( SQLCODE != 0 )
      	{
			     fn_errlog( c_ServiceName, "S32050",SQLMSG , c_err_msg );   /** VQC chngd from LIBMSG to SQLMSG **/
        	 tpfree((char *)ptr_fml_Obuf);
        	 tpfree((char *)ptr_fml_Ibuf);
        	 return -1;	
				}

				/****** Added  Ver 3.1 Ends ******/

        if(DEBUG_MSG_LVL_3)	/*** Ver 3.6 ***/
        {
       		fn_userlog( c_ServiceName, "CUST TYPE IS 4 :%s:",sql_iai_type.arr);
				}

				if(strcmp(sql_iai_type.arr,"NRO_NON_PINS") == 0)   /****** check Added in Ver 3.1 *******/
				{
					strcpy(c_narration_id,TDS_NRI);
          strcpy(c_reason_cd,"Profit Loss on Cover Leg");

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
					if(DEBUG_MSG_LVL_2)
					{
        		fn_userlog( c_ServiceName, "Calling fn_tds for COVER_LEG :%s:",c_reason_cd );
					}
					strcpy ( c_tmp_rmrks, ptr_st_pstn_actn->c_ref_rmrks );
					/*sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s", commented in Ver 4.2 */
          sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s-",   /* Ver 4.2*/
          					ptr_st_pstn_actn->c_undrlyng,
          					ptr_st_pstn_actn->c_expry_dt);				
          strcat(ptr_st_pstn_actn->c_ref_rmrks,c_tmp_rmrks); /* Ver 4.2 */

					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog( c_ServiceName, "Calling fn_spntds for :%s:",c_reason_cd );
					}

     			i_returncode = fn_spntds(   c_ServiceName,
              						            ptr_st_pstn_actn,
                  	      					  ptr_st_err_msg,
                    	            		TDS_NRI,
                      	          		c_reason_cd,
                        	        		DEBIT_WITHOUT_LIMIT,
                          	      		d_obli_pl,
                            	    		&d_balance_amt );
				  if ( i_returncode != 0 )
          {
          	fn_errlog( c_ServiceName, "S32055",LIBMSG , c_err_msg );
          	/** EXEC SQL CLOSE :sys_cursor; ** VQC **/
          	tpfree((char *)ptr_fml_Obuf);
          	tpfree((char *)ptr_fml_Ibuf);
          	return -1;
          }
					strcpy ( ptr_st_pstn_actn->c_ref_rmrks , c_tmp_rmrks );
				
				}

			  /*** NRI - TDS Ends  ***/	

				strcpy( c_narration_id , PROFIT_LOSS_ON_COVER_LEG);
     		c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;

        /**************** Ver 4.2(MRK) starts ****************/
        strcpy ( c_tmp_rmrks, ptr_st_pstn_actn->c_ref_rmrks );
        sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s-",
                    ptr_st_pstn_actn->c_undrlyng,
                    ptr_st_pstn_actn->c_expry_dt);
        strcat(ptr_st_pstn_actn->c_ref_rmrks,c_tmp_rmrks);
        /**************** Ver 4.2(MRK) ends ******************/

				/** If d_obli_pl < 0 then block the loss else in profit so release the profit **/
				d_balance_amt  = 0.0;    /*** Ver 1.1 ***/
				i_returncode = fn_upd_spnlimits(	c_ServiceName,
																					ptr_st_pstn_actn,
																					ptr_st_err_msg,
																					c_narration_id,
																					c_dr_without_lmt_flg,
																					d_obli_pl,
																					&d_balance_amt);
				if ( i_returncode != 0 )
				{
					fn_errlog( c_ServiceName, "S32060",LIBMSG , c_err_msg );
					tpfree((char *)ptr_fml_Obuf);
					tpfree((char *)ptr_fml_Ibuf);
					return -1;
				}
        strcpy ( ptr_st_pstn_actn->c_ref_rmrks , c_tmp_rmrks ); /**** Ver 4.2(MRK) *****/
			}

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"SPAN	-	d_obli_pl :%lf:",d_obli_pl);
				fn_userlog(c_ServiceName,"afterSPAN	-	st_undfut_pos_to_be.d_blckd_pl :%lf:",st_undfut_pos_to_be.d_blckd_pl);
			}
	} 

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
	if(DEBUG_MSG_LVL_2)
	{
		fn_userlog(c_ServiceName,"*************** Check for calling POPUP APP ***************");
		fn_userlog(c_ServiceName,"SPAN	- d_bal_mrgn_amt = :%lf:",d_bal_mrgn_amt); 
		fn_userlog(c_ServiceName,"SPAN	- ptr_st_pstn_actn->l_cover_qty = :%ld:",ptr_st_pstn_actn->l_cover_qty); 
		fn_userlog(c_ServiceName,"SPAN	- ptr_st_pstn_actn->c_channel = :%s:",ptr_st_pstn_actn->c_channel); 
	}

	if ( (fabs(d_bal_mrgn_amt) > 0) && (ptr_st_pstn_actn->l_cover_qty > 0) && (strcmp(ptr_st_pstn_actn->c_channel,"SYS") != 0) )
	{
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"*** call POPUP APP ***");
		}

		/*ptr_st_pstn_actn->c_mtm_flag = NO_OPEN_ORDERS;
		fn_userlog(c_ServiceName,"MTM Flag Set to = :%c:",ptr_st_pstn_actn->c_mtm_flag); */
		c_popup_app_flg ='Y';
		return 0;
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"MTM Flag = :%c:",ptr_st_pstn_actn->c_mtm_flag); 
	}

	/*** For Fresh Position...Block Notional LOSS & apply DEBIT_TILL_LIMIT ***/

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
	if(DEBUG_MSG_LVL_2)
	{
		fn_userlog ( c_ServiceName,"st_cntpos_crrnt.l_opnpstn_qty=:%ld:",st_cntpos_crrnt.l_opnpstn_qty );
		fn_userlog ( c_ServiceName,"d_undrlyng_pl=:%lf:",d_undrlyng_pl );
		fn_userlog ( c_ServiceName,"st_undfut_pos_to_be.d_blckd_pl=:%lf:",st_undfut_pos_to_be.d_blckd_pl );
		fn_userlog ( c_ServiceName,"st_cntpos_crrnt.l_opnpstn_qty=:%ld:",st_cntpos_crrnt.l_opnpstn_qty );
	}

    /*** if(DEBUG_MSG_LVL_0) debug level changed to 2 in Ver 3.6***/
	if(DEBUG_MSG_LVL_2)
	{
		fn_userlog ( c_ServiceName,"For Fresh Position...Block Notional LOSS & apply DEBIT_TILL_LIMIT" );
	}

	strcpy( c_narration_id , BLK_NOTIONAL_LOSS_TRADE_CONFIRMATION);
	
	if (c_tmp_nkd_blkd_flg == 'R')     /*** Added in ver 1.3 ***/
  {
    c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;
  }
  else
	{
		c_dr_without_lmt_flg = DEBIT_TILL_LIMIT; 
	}

  if ( d_undrlyng_pl < 0 )/*** Net Notional Loss ***/
	{	
		d_balance_amt  = 0.0;    /*** Ver 1.1 ***/
		i_returncode = fn_upd_spnlimits(	c_ServiceName,
																	ptr_st_pstn_actn,
																	ptr_st_err_msg,
																	c_narration_id,
																	c_dr_without_lmt_flg,
																	d_undrlyng_pl,
																	&d_balance_amt);
		if ( i_returncode != 0 )
		{
			fn_errlog( c_ServiceName, "S32065",LIBMSG , c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN	-	d_undrlyng_pl :%lf:",d_undrlyng_pl);
			fn_userlog(c_ServiceName,"SPAN	-	d_balance_amt Is :%lf:",d_balance_amt);
		}

		st_undfut_pos_to_be.d_blckd_pl	= ((-1) * d_undrlyng_pl) + d_balance_amt;		
	}
	else
	{
		st_undfut_pos_to_be.d_blckd_pl = 0;
	}


  /*** Ver 6.4 Starts Here ***/  
  i_returncode=fn_cal_premutilzed( c_ServiceName, ptr_st_pstn_actn);
  if( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S32070",LIBMSG , c_err_msg );
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
    return -1; 
  }
  /**** Ver 6.4 Ends Here ***/
 	 
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"SPAN	- st_undfut_pos_to_be.d_blckd_pl Is :%lf:",st_undfut_pos_to_be.d_blckd_pl);
		fn_userlog ( c_ServiceName,"****************************************************************************" );

		fn_userlog ( c_ServiceName,"***********************END fn_call_spnactn_grp1*************************");
 	}
	

	tpfree((char *)ptr_fml_Obuf);
  tpfree((char *)ptr_fml_Ibuf);
	return 0;
}


/** Applies an action on an existing position **/
int 	fn_apply_spncnt_actn ( 	char *c_ServiceName,
															struct st_pstn_actn *ptr_st_pstn_actn,
												 			struct st_fcp_cntrct_pstn *ptr_st_cntfut_pos,
                  						struct st_err_msg *ptr_st_err_msg)
{
	long int li_temp_qty = 0;
  /** int i_returncode; ** VQC **/

	/** Decrease the IWTL, EXCH position by the executed qty **/
	/** order rate. Increase the OPEN position by the        **/
	/** executed qty and executed rate. Calculate the fresh  **/
	/** and cover quantity in the transaction. Increase the  **/
	/** MTMed position too by the executed quantity and      **/
	/** executed rate. Update the buy executed and sell      **/
	/** executed quantity                                    **/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName,"***********************START fn_apply_spncnt_actn*************************");
	}

	if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
	{

		fn_del_pos( ptr_st_pstn_actn->l_exec_qty,
								ptr_st_pstn_actn->l_orgnl_rt,
								&(ptr_st_cntfut_pos->l_ibuy_qty),
								&(ptr_st_cntfut_pos->d_ibuy_ord_val ) );

		fn_del_pos( ptr_st_pstn_actn->l_exec_qty,
								ptr_st_pstn_actn->l_orgnl_rt,
								&(ptr_st_cntfut_pos->l_exbuy_qty),
								&(ptr_st_cntfut_pos->d_exbuy_ord_val ) );

		if( ptr_st_cntfut_pos->l_opnpstn_qty > 0 )
		{
			ptr_st_pstn_actn->l_fresh_qty = ptr_st_pstn_actn->l_exec_qty;
			ptr_st_pstn_actn->l_cover_qty = 0;
		}
		else
		{
			ptr_st_pstn_actn->l_cover_qty = fn_minl(ptr_st_pstn_actn->l_exec_qty,	labs(ptr_st_cntfut_pos->l_opnpstn_qty) );

			ptr_st_pstn_actn->l_fresh_qty = fn_maxl(ptr_st_pstn_actn->l_exec_qty - ptr_st_pstn_actn->l_cover_qty, 0 );
		}

		if ( ptr_st_pstn_actn->l_cover_qty > 0 )
		{
			li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

			fn_add_pos_in_val( 	ptr_st_pstn_actn->l_cover_qty,
													ptr_st_cntfut_pos->d_opnpstn_val,
													li_temp_qty,
													&(ptr_st_cntfut_pos->l_opnpstn_qty),
													&(ptr_st_cntfut_pos->d_opnpstn_val ) );

			fn_add_pos_in_val( 	ptr_st_pstn_actn->l_cover_qty,
													ptr_st_cntfut_pos->d_mtm_opn_val,
													li_temp_qty,
													&li_temp_qty,
													&(ptr_st_cntfut_pos->d_mtm_opn_val ) );
		}

		if ( ptr_st_pstn_actn->l_fresh_qty > 0 )
		{
			li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

			fn_add_pos( ptr_st_pstn_actn->l_fresh_qty,
									ptr_st_pstn_actn->l_exec_rt,
									&(ptr_st_cntfut_pos->l_opnpstn_qty),
									&(ptr_st_cntfut_pos->d_opnpstn_val ) );

			fn_add_pos( ptr_st_pstn_actn->l_fresh_qty,
									ptr_st_pstn_actn->l_exec_rt,
									&li_temp_qty,
									&(ptr_st_cntfut_pos->d_mtm_opn_val ) );
		}

		ptr_st_cntfut_pos->l_buy_exctd_qty = ptr_st_cntfut_pos->l_buy_exctd_qty + ptr_st_pstn_actn->l_exec_qty;
	}
	else
	{

		fn_del_pos( ptr_st_pstn_actn->l_exec_qty * (-1),
								ptr_st_pstn_actn->l_orgnl_rt,
								&(ptr_st_cntfut_pos->l_isell_qty),
								&(ptr_st_cntfut_pos->d_isell_ord_val ) );

		fn_del_pos( ptr_st_pstn_actn->l_exec_qty * (-1),
								ptr_st_pstn_actn->l_orgnl_rt,
								&(ptr_st_cntfut_pos->l_exsell_qty),
								&(ptr_st_cntfut_pos->d_exsell_ord_val ) );

		if ( ptr_st_cntfut_pos->l_opnpstn_qty < 0 )
		{
			ptr_st_pstn_actn->l_fresh_qty = ptr_st_pstn_actn->l_exec_qty;
			ptr_st_pstn_actn->l_cover_qty = 0;
		}
		else
		{
			ptr_st_pstn_actn->l_cover_qty = fn_minl(ptr_st_pstn_actn->l_exec_qty,	ptr_st_cntfut_pos->l_opnpstn_qty );

			ptr_st_pstn_actn->l_fresh_qty = fn_maxl(ptr_st_pstn_actn->l_exec_qty - ptr_st_pstn_actn->l_cover_qty,	0 );
		}

		if ( ptr_st_pstn_actn->l_cover_qty > 0 )
		{
			li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

			fn_add_pos_in_val( 	ptr_st_pstn_actn->l_cover_qty * ( -1 ),
													ptr_st_cntfut_pos->d_opnpstn_val,
													li_temp_qty,
													&(ptr_st_cntfut_pos->l_opnpstn_qty),
													&(ptr_st_cntfut_pos->d_opnpstn_val ) );

			fn_add_pos_in_val( 	ptr_st_pstn_actn->l_cover_qty * ( -1 ),
													ptr_st_cntfut_pos->d_mtm_opn_val,
													li_temp_qty,
													&li_temp_qty,
													&(ptr_st_cntfut_pos->d_mtm_opn_val ) );
		}

		if ( ptr_st_pstn_actn->l_fresh_qty > 0 )
		{
			li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

			fn_add_pos( ptr_st_pstn_actn->l_fresh_qty * (-1),
									ptr_st_pstn_actn->l_exec_rt,
									&(ptr_st_cntfut_pos->l_opnpstn_qty),
									&(ptr_st_cntfut_pos->d_opnpstn_val ) );

			fn_add_pos( ptr_st_pstn_actn->l_fresh_qty * (-1),
									ptr_st_pstn_actn->l_exec_rt,
									&li_temp_qty,
									&(ptr_st_cntfut_pos->d_mtm_opn_val ) );
		}

		ptr_st_cntfut_pos->l_sell_exctd_qty = ptr_st_cntfut_pos->l_sell_exctd_qty + (ptr_st_pstn_actn->l_exec_qty *(-1));
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Contract after updation (Action applied) : " );
		fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:",ptr_st_cntfut_pos->l_ibuy_qty );
		fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", ptr_st_cntfut_pos->d_ibuy_ord_val );
		fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", ptr_st_cntfut_pos->l_isell_qty );
		fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", ptr_st_cntfut_pos->d_isell_ord_val );
		fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", ptr_st_cntfut_pos->l_exbuy_qty );
		fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", ptr_st_cntfut_pos->d_exbuy_ord_val );
		fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", ptr_st_cntfut_pos->l_exsell_qty );
		fn_userlog ( c_ServiceName, "EXCH sell val      :%lf:", ptr_st_cntfut_pos->d_exsell_ord_val );
		fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", ptr_st_cntfut_pos->l_buy_exctd_qty );
		fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", ptr_st_cntfut_pos->l_sell_exctd_qty );
		fn_userlog ( c_ServiceName, "Open qty          :%ld:", ptr_st_cntfut_pos->l_opnpstn_qty );
		fn_userlog ( c_ServiceName, "Original open val :%lf:", ptr_st_cntfut_pos->d_opnpstn_val );
		fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", ptr_st_cntfut_pos->d_mtm_opn_val );

		fn_userlog ( c_ServiceName,"***********************END fn_apply_spncnt_actn*************************");
	}

	return 0;
}
