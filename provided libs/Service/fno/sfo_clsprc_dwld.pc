/******************************************************************************/
/*	Program	    			:	SFO_CLSPRC_DWLD                                       */
/*  Input             :                                                       */
/*  Output            :                                                       */
/*  Description       :                                                       */
/*  Log               :                                                       */
/******************************************************************************/
/*     29-Nov-2001       Ver 1.0        Infotech|sangeet   Release 1.0        */
/*		 03-Mar-2008			 Ver 1.1        Infotech|Sandeep   IBM MIGRATION      */
/*     22-Mar-2012       Ver 1.2        Infotech|Sachin    FNO BSE Changes    */ 
/*		 23-Mar-2015       Ver 1.3				Infotech|Ritesh D  Contract Master    */
/*																			and Trade Quote Merger                */ 
/*     31-Mar-2017       Ver 1.4        Infotech|Mrinal    Core Fix           */
/*     26-Jul-2018       Ver 1.5        Infotech|Anand Dhopte Core Fix        */ 
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fo_fml_def.h>
#include <fo.h>
#include <fn_log.h>
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_read_debug_lvl.h>			/*** Ver 1.1 ***/

/*** Ver 1.2 starts here ***/
int fn_get_stkdtls_bse( char* c_ServiceName,
                        char* c_err_msg,
                        struct vw_mtch_cntrct *ptr_st_mtch_cntrct,
                        struct vw_contract    *ptr_st_contract,
                        long l_token_no
               );
/*** Ver 1.2 Ends here **/

void SFO_CLSPRC_DWLD( TPSVCINFO *rqst )
{

	FBFR32 *ptr_fml_Ibuf;

	char c_ServiceName [33];	
  varchar c_err_msg [256];		    /*** Ver 1.4 Variable type changed to varchar***/
  varchar c_errmsg [256];					/*** Ver 1.4 Variable type changed to varchar***/
	int i_returncode = 0;						/*** Ver 1.4 Initailized ***/
	int i_ip_len = 0;           		/*** Ver 1.4 Initailized ***/
	int i_op_len = 0;           		/*** Ver 1.4 Initailized ***/
	int i_trnsctn = 0;           		/*** Ver 1.4 Initailized ***/
  int i_err[1];  /*** Ver 1.2 ***/
  int i_ferr[1]; /*** Ver 1.2 ***/
  int i_cnt=0;   /*** Ver 1.2 ***/
	varchar c_tag [ 256 ];					/*** Ver 1.4 Variable type changed to varchar***/
	varchar c_msg [ 256 ];					/*** Ver 1.4 Variable type changed to varchar***/
	char c_trade_dt [ 12 ];
/*long int li_rec_no;						***Commented in ver 1.4****/
  long   l_token_no=0;   /*** Ver 1.2 ***/
	MEMSET(c_err_msg);     /** Added in Ver 1.4 as DataType changed from char to varchar **/
	MEMSET(c_errmsg);      /** Added in Ver 1.4 as DataType changed from char to varchar **/	
  MEMSET(c_tag);         /** Added in Ver 1.4 as DataType changed from char to varchar **/
  MEMSET(c_msg);    		 /** Added in Ver 1.4 as DataType changed from char to varchar **/
	
	struct vw_mtch_cntrct st_mtch_cntrct;
	struct vw_cntrct_qt st_cntrct_qt;
	struct vw_contract st_contract;
	struct vw_err_msg *ptr_st_err_msg;
	ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
  if ( ptr_st_err_msg ==  NULL )
  {
    fn_errlog ( c_ServiceName, "S31005", TPMSG, c_errmsg.arr );		/*ver 1.4 changed from c_errmsg to c_errmsg.arr */	
		tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
  }
  memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );
	
	ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
	strcpy( c_ServiceName, rqst->name );		

	INITDBGLVL(c_ServiceName);			 /*** Ver 1.1 ***/

	i_returncode = Fvftos32( ptr_fml_Ibuf,
													 ( char * )&st_mtch_cntrct,
                           "vw_mtch_cntrct" );
	if( i_returncode == -1 )
	{
    fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg.arr );		/*ver 1.4 changed from c_err_msg to c_err_msg.arr */
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );					/*ver 1.4 changed from c_err_msg to c_err_msg.arr */
		tpfree ( ( char * ) ptr_st_err_msg );         /*** Ver 1.4 Core Fix ***/
		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );		
	}

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_mtch_cntrct.c_rout_crt );
	
  i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                      c_err_msg.arr,			/*ver 1.4 changed from c_err_msg to c_err_msg.arr */
																		  ptr_fml_Ibuf,
																		  3,
					 FFO_CLS_PRC, ( char * )&st_cntrct_qt.l_close_prc, NULL,
					 FFO_TRD_DT, ( char * )c_trade_dt, NULL,
					 FFO_BAT_TAG , ( char * )c_tag.arr, NULL);	/*ver 1.4 changed from c_tag to c_tag.arr */	
	if( i_returncode != 0 )
	{
		fn_errlog( c_ServiceName, "S31015", LIBMSG , c_err_msg.arr );			/*ver 1.4 changed from c_err_msg to c_err_msg.arr */
		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );			/*ver 1.4 changed from c_err_msg to c_err_msg.arr */
		tpfree ( ( char * ) ptr_st_err_msg );         /*** Ver 1.4 Core Fix ***/
		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}
	rtrim(c_trade_dt);
	i_ip_len = sizeof( struct vw_mtch_cntrct );
	i_op_len = sizeof( struct vw_contract );

	fn_cpy_ddr(st_mtch_cntrct.c_rout_crt);
  
	st_mtch_cntrct.c_rqst_typ = MATCH_ID_TO_CONTRACT;

	if (DEBUG_MSG_LVL_3)			/*** Ver 1.1 ***/ 
	{
		fn_userlog( c_ServiceName, "c_xchng_cd [%s]",st_mtch_cntrct.c_xchng_cd );
		fn_userlog( c_ServiceName, "c_instrmnt_typ [%s]",st_mtch_cntrct.c_instrmnt_typ );
		fn_userlog( c_ServiceName, "d_strike_prc:%lf", st_mtch_cntrct.d_strike_prc );
		fn_userlog( c_ServiceName, "c_symbol [%s]",st_mtch_cntrct.c_symbol );
		fn_userlog( c_ServiceName, "c_expry_dt [%s]",st_mtch_cntrct.c_expry_dt );
		fn_userlog( c_ServiceName, "c_opt_typ [%s]",st_mtch_cntrct.c_opt_typ );
		fn_userlog( c_ServiceName, "l_ca_lvl [%ld]",st_mtch_cntrct.l_ca_lvl );		
		fn_userlog( c_ServiceName, "c_rqst_typ [%c]",st_mtch_cntrct.c_rqst_typ );
		fn_userlog( c_ServiceName, "l_close_prc [%ld]",st_cntrct_qt.l_close_prc ); 
		fn_userlog( c_ServiceName, "c_trade_dt  [%s]",c_trade_dt );
	}

  if( strcmp(st_mtch_cntrct.c_xchng_cd , "NFO") == 0)  /** Ver 1.2, if condition added ***/
  {
	 i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg.arr,			/*ver 1.4 changed from c_err_msg to c_err_msg.arr */
                              &st_mtch_cntrct,
                              &st_contract,
                              "vw_mtch_cntrct",
                              "vw_contract",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_CNT_FOR_ENT" );
 	 if( i_returncode != SUCC_BFR )
	 {
		fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg.arr );		/*ver 1.4 changed from c_err_msg to c_err_msg.arr */
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );		/*ver 1.4 changed from c_err_msg to c_err_msg.arr */
    sprintf ( c_msg.arr, "Failed in calling SFO_CNT_FOR_ENT for:%s:",st_mtch_cntrct.c_symbol );		/*ver 1.4 changed from c_msg to c_msg.arr */
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg.arr, c_tag.arr );		/*ver 1.4 changed from c_tag to c_tag.arr */
		tpfree ( ( char * ) ptr_st_err_msg );         /*** Ver 1.4 Core Fix ***/
		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	 }
  }
  else if(  strcmp(st_mtch_cntrct.c_xchng_cd , "BFO") == 0) /*** Ver 1.2, starts here ***/
  {
    i_err[0] = Fget32(ptr_fml_Ibuf,FFO_TOKEN_ID,0,(char *)&l_token_no,0);
    i_ferr[0] = Ferror32; 
    for (i_cnt=0; i_cnt < 2; i_cnt++)
    {
     if (i_err[i_cnt] == -1)
     {
      fn_userlog(c_ServiceName, "Error in field %d", i_cnt);
      fn_errlog(c_ServiceName,"L31005",Fstrerror32(i_ferr[i_cnt]),c_err_msg.arr);		/*ver 1.4 changed from c_err_msg to c_err_msg.arr */
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );		/*ver 1.4 changed from c_err_msg to c_err_msg.arr */
      tpfree ( ( char * ) ptr_st_err_msg );         /*** Ver 1.4 Core Fix ***/
			tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
     }
    }
		
		if (DEBUG_MSG_LVL_0)      /*** Added Debug level in Ver 1.3 ***/
		{
    	fn_userlog(c_ServiceName, " l_token_no before call to  :%ld:",l_token_no); 
		} 
    i_returncode = fn_get_stkdtls_bse(c_ServiceName,
                                      c_err_msg.arr,	/*ver 1.4 changed from c_err_msg to c_err_msg.arr */	
                                      &st_mtch_cntrct,
                                      &st_contract,
                                      l_token_no
                                     );
    if( i_returncode != SUCC_BFR )
    {
     fn_errlog( c_ServiceName, "S31025", LIBMSG, c_err_msg.arr );			/*ver 1.4 changed from c_err_msg to c_err_msg.arr */
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );			/*ver 1.4 changed from c_err_msg to c_err_msg.arr */
     sprintf ( c_msg.arr, "Failed in calling SFO_CNT_FOR_ENT for:%s:",st_mtch_cntrct.c_symbol );		/*ver 1.4 changed from c_msg to c_msg.arr */
     fn_bat_pst_msg_fno ( c_ServiceName, c_msg.arr, c_tag.arr );		/*ver 1.4 changed from c_tag to c_tag.arr */
     tpfree ( ( char * ) ptr_st_err_msg );         /*** Ver 1.4 Core Fix ***/
		 tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
    }
     
  }  /*** Ver 1.2, ends here ***/

	if (DEBUG_MSG_LVL_3)			/*** Ver 1.1 ***/ 
	{
		fn_userlog( c_ServiceName, "c_exrc_typ [%c]",st_contract.c_exrc_typ );
		fn_userlog( c_ServiceName, "c_ctgry_indstk [%c]",st_contract.c_ctgry_indstk );
	}

/****************************************************************/
/**commented because of change of logic , now we will directly **/
/**update table without calling any other service for updation **/
/****************************************************************/
/****************************************************************/
/*	strcpy(st_cntrct_qt.c_xchng_cd, st_contract.c_xchng_cd );
	st_cntrct_qt.c_prd_typ = st_contract.c_prd_typ;
	strcpy(st_cntrct_qt.c_undrlyng, st_contract.c_undrlyng );
	strcpy(st_cntrct_qt.c_expry_dt, st_contract.c_expry_dt );
	st_cntrct_qt.c_exrc_typ = st_contract.c_exrc_typ ;
	st_cntrct_qt.c_opt_typ = st_contract.c_opt_typ;
	st_cntrct_qt.l_strike_prc = st_contract.l_strike_prc;
	st_cntrct_qt.c_ctgry_indstk = st_contract.c_ctgry_indstk;
	st_cntrct_qt.l_close_prc = st_cntrct_qt.l_close_prc;
	st_cntrct_qt.c_rqst_typ = UPDATE_CLOSE_PRC;
	st_cntrct_qt.l_ca_lvl = st_contract.l_ca_lvl;
	fn_cpy_ddr(st_cntrct_qt.c_rout_crt);

	i_ip_len = sizeof( struct vw_cntrct_qt );

	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
   														&st_cntrct_qt,
   														&st_cntrct_qt,
															"vw_cntrct_qt",
															"vw_cntrct_qt",
 															i_ip_len,
 															i_ip_len,
															0,
															"SFO_UPD_QT" );

	if( i_returncode != SUCC_BFR )
	{
		fn_errlog( c_ServiceName, "S31030", LIBMSG , c_err_msg );
		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    sprintf ( c_msg, "Failed in calling SFO_UPD_QT for c_symbol :%s:",c_symbol );		
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );		
		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}

	*/
/****************************************************************/
/**********End of the commented statement************************/
/****************************************************************/
	
			i_trnsctn = fn_begintran( c_ServiceName, c_err_msg.arr );			/*ver 1.4 changed from c_err_msg to c_err_msg.arr */
      if ( i_trnsctn == -1 )
      {
        strcpy ( ptr_st_err_msg->c_err_msg, c_err_msg.arr );		/*ver 1.4 changed from c_err_msg to c_err_msg.arr */
    		sprintf ( c_msg.arr,"Failed in Begining transaction for :%s:",st_contract.c_undrlyng );		/*ver 1.4 changed from c_msg to c_msg.arr */
    		fn_bat_pst_msg_fno ( c_ServiceName, c_msg.arr, c_tag.arr );		/*ver 1.4 changed from c_tag to c_tag.arr */
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
      }

	if (DEBUG_MSG_LVL_3)			/*** Ver 1.1 ***/ 
	{
		fn_userlog( c_ServiceName, "BEFORE UPDATING FCM_FO_CNTRCT_MSTR" );
		fn_userlog( c_ServiceName, "FCM_XCHNG_CD [%s]",st_contract.c_xchng_cd );
		fn_userlog( c_ServiceName, "FCM_PRDCT_TYP [%c]",st_contract.c_prd_typ);
		fn_userlog( c_ServiceName, "FCM_STRK_PRC:[%ld]", st_contract.l_strike_prc);  
		fn_userlog( c_ServiceName, "FCM_UNDRLYNG [%s]",st_contract.c_undrlyng);
		fn_userlog( c_ServiceName, "FCM_EXPRY_DT [%s]",st_contract.c_expry_dt );
		fn_userlog( c_ServiceName, "FCM_EXER_TYP [%c]",st_contract.c_exrc_typ );
		fn_userlog( c_ServiceName, "FCM_OPT_TYP [%c]",st_contract.c_opt_typ);
	}
	if(st_contract.c_prd_typ == 'F')
	{
 
    /*** Ver 1.3 Starts ***
	
			EXEC SQL
			UPDATE 	fcm_fo_cntrct_mstr
			SET	FCM_CLS_PRC = :st_cntrct_qt.l_close_prc,
			FCM_CLS_PRC_DT = TO_DATE(:c_trade_dt,'dd-Mon-yyyy')
			WHERE	FCM_XCHNG_CD = :st_contract.c_xchng_cd
			and		FCM_PRDCT_TYP = :st_contract.c_prd_typ
			and		FCM_UNDRLYNG = :st_contract.c_undrlyng
			and		FCM_EXPRY_DT = TO_DATE(:st_contract.c_expry_dt,'dd-Mon-yyyy')
			and		FCM_EXER_TYP = :st_contract.c_exrc_typ
			and		FCM_OPT_TYP = :st_contract.c_opt_typ
			and		FCM_STRK_PRC = :st_contract.l_strike_prc ;
	
			if ( SQLCODE != 0 )
			{
				fn_errlog ( c_ServiceName, "S31035", SQLMSG, c_err_msg);		
				fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg);   
    		sprintf ( c_msg, "Failed in updating for :%s:",st_contract.c_undrlyng );	
    		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag);	
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
			}

    *** ver 1.3 Ends ***/

		/*The transaction was commited separetely on user demand 14-feb-2002
			i_trnsctn = fn_begintran( c_ServiceName, c_err_msg);		
      if ( i_trnsctn == -1 )
      {
        strcpy ( ptr_st_err_msg->c_err_msg, c_err_msg);	
    		sprintf ( c_msg,"Failed in Begining transaction for :%s:",st_contract.c_undrlyng );
    		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag);		
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
      }
      if ( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 )  
    	{ 
        strcpy ( ptr_st_err_msg->c_err_msg.arr, c_errmsg);		
    		sprintf ( c_msg,"Failed in Commiting transaction for :%s:",st_contract.c_undrlyng );
    		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag);	
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
      }
		*/

			EXEC SQL
			UPDATE FTQ_FO_TRD_QT
			SET	FTQ_BASE_PRC = :st_cntrct_qt.l_close_prc,
			FTQ_CLS_PRC 				= :st_cntrct_qt.l_close_prc,        /*** Added in 1.3  ***/
			FTQ_BASE_PRC_UPD_DT = TO_DATE(:c_trade_dt,'dd-Mon-yyyy hh24:mi:ss'),
			FTQ_CLS_PRC_DT = TO_DATE(:c_trade_dt,'dd-Mon-yyyy') 		/*** Added in 1.3  ***/
			WHERE	FTQ_XCHNG_CD 	= :st_contract.c_xchng_cd
			and		FTQ_PRDCT_TYP = :st_contract.c_prd_typ
			and 	FTQ_UNDRLYNG	= :st_contract.c_undrlyng
      and   FTQ_EXPRY_DT 	= TO_DATE(:st_contract.c_expry_dt,'dd-Mon-yyyy')
      and   FTQ_EXER_TYP 	= :st_contract.c_exrc_typ
      and   FTQ_OPT_TYP 	= :st_contract.c_opt_typ
      and   FTQ_STRK_PRC 	= :st_contract.l_strike_prc ;			

			if ( SQLCODE != 0 )
			{
				fn_errlog ( c_ServiceName, "S31040", SQLMSG, c_err_msg.arr);		/*ver 1.4 changed from c_err_msg to c_err_msg.arr */
				fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg.arr );   /*ver 1.4 changed from c_errmsg to c_errmsg.arr */
    		sprintf ( c_msg.arr, "Failed in updating for :%s:",st_contract.c_undrlyng );		/*ver 1.4 changed from c_msg to c_msg.arr */
    		fn_bat_pst_msg_fno ( c_ServiceName, c_msg.arr, c_tag.arr );		/*ver 1.4 changed from c_tag to c_tag.arr */
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
			}
	}
	else if(st_contract.c_prd_typ == 'O')
	{
			EXEC SQL
			UPDATE 	FUM_FO_UNDRLYNG_MSTR
			SET	FUM_CLS_PRC = :st_cntrct_qt.l_close_prc,
			FUM_CLS_PRC_DT = TO_DATE(:c_trade_dt,'dd-Mon-yyyy')
			WHERE	FUM_XCHNG_CD = :st_contract.c_xchng_cd
			and		FUM_PRDCT_TYP = :st_contract.c_prd_typ
			and		FUM_UNDRLYNG = :st_contract.c_undrlyng
			and 	FUM_CTGRY_INDSTK = :st_contract.c_ctgry_indstk;
			
			if ( SQLCODE != 0 )
			{
				fn_errlog ( c_ServiceName, "S31045", SQLMSG, c_err_msg.arr);		/*ver 1.4 changed from c_err_msg to c_err_msg.arr */
				fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg.arr );   /*ver 1.4 changed from c_errmsg to c_errmsg.arr */
    		sprintf ( c_msg.arr, "Failed in updating for :%s:",st_contract.c_undrlyng );		/*ver 1.4 changed from c_msg to c_msg.arr */
    		fn_bat_pst_msg_fno ( c_ServiceName, c_msg.arr, c_tag.arr );		/*ver 1.4 changed from c_tag to c_tag.arr */
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
			}



			EXEC SQL
			UPDATE FTQ_FO_TRD_QT
			SET	FTQ_BASE_PRC = :st_cntrct_qt.l_close_prc,
			FTQ_BASE_PRC_UPD_DT = TO_DATE(:c_trade_dt,'dd-Mon-yyyy hh24:mi:ss')
			WHERE	FTQ_XCHNG_CD 	= :st_contract.c_xchng_cd
			and		FTQ_PRDCT_TYP = :st_contract.c_prd_typ
			and 	FTQ_UNDRLYNG	= :st_contract.c_undrlyng
      and   FTQ_EXPRY_DT 	= TO_DATE(:st_contract.c_expry_dt,'dd-Mon-yyyy')
      and   FTQ_EXER_TYP 	= :st_contract.c_exrc_typ
      and   FTQ_OPT_TYP 	= :st_contract.c_opt_typ
      and   FTQ_STRK_PRC 	= :st_contract.l_strike_prc ;			

			if ( SQLCODE != 0 )
			{
				fn_errlog ( c_ServiceName, "S31050", SQLMSG, c_err_msg.arr);		/*ver 1.4 changed from c_err_msg to c_err_msg.arr */
				fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg.arr );   /*ver 1.4 changed from c_errmsg to c_errmsg.arr */
    		sprintf ( c_msg.arr, "Failed in updating FTQ_FO_TRD_QT for :%s:,product_typ:%c:, expry_dt:%s:,exer_typ:%c:,opt_typ:%c:,strk_prc:%ld:",st_contract.c_undrlyng,st_contract.c_prd_typ, st_contract.c_expry_dt,st_contract.c_exrc_typ,st_contract.c_opt_typ,st_contract.l_strike_prc );			/*ver 1.4 changed from c_msg to c_msg.arr */
    		fn_bat_pst_msg_fno ( c_ServiceName, c_msg.arr, c_tag.arr );		/*ver 1.4 changed from c_tag to c_tag.arr */
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
			}
	}
	else
	{
		fn_errlog ( c_ServiceName, "S31055", "INVALID PRODUCT", c_err_msg.arr);		/*ver 1.4 changed from c_err_msg to c_err_msg.arr */
		fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg.arr );   /*ver 1.4 changed from c_errmsg to c_errmsg.arr */
    sprintf ( c_msg.arr, "Failed in updating for :%s:",st_contract.c_undrlyng );		/*ver 1.4 changed from c_msg to c_msg.arr */
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg.arr, c_tag.arr );		/*ver 1.4 changed from c_tag to c_tag.arr */
		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
	}

      if ( fn_committran( c_ServiceName, i_trnsctn, c_errmsg.arr ) == -1 )   /*ver 1.4 changed from c_errmsg to c_errmsg.arr */
      {
        strcpy ( ptr_st_err_msg->c_err_msg, c_errmsg.arr );		/*ver 1.4 changed from c_errmsg to c_errmsg.arr */
    		sprintf ( c_msg.arr,"Failed in Commiting transaction for :%s:",st_contract.c_undrlyng );		/*ver 1.4 changed from c_msg to c_msg.arr */
    		fn_bat_pst_msg_fno ( c_ServiceName, c_msg.arr, c_tag.arr);			/*ver 1.4 changed from c_tag to c_tag.arr */		
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
      }
  tpfree ( ( char * ) ptr_st_err_msg );         /*** Ver 1.4 Core Fix ***/
	tpreturn(TPSUCCESS, SUCC_BFR, NULL, 0, 0 );

 }
 /**** Ver 1.2 **** Starts Here ****/
int fn_get_stkdtls_bse( char* c_ServiceName,
                        char* c_err_msg,									
                        struct vw_mtch_cntrct *ptr_st_mtch_cntrct,
                        struct vw_contract    *ptr_st_contract,
                        long l_token_no
                      ) 
{
  char c_strike_price[20];   /*** array size changed to 20 from 12 in Ver 1.5 ***/
  char c_underlying[8+1];

	if (DEBUG_MSG_LVL_0)
	{
  	fn_userlog(c_ServiceName,"**** Inside fn_get_stkdtls_bse ");
 	}

  if (DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "c_xchng_cd [%s]",ptr_st_mtch_cntrct->c_xchng_cd );
    fn_userlog( c_ServiceName, "c_instrmnt_typ [%s]",ptr_st_mtch_cntrct->c_instrmnt_typ );
    fn_userlog( c_ServiceName, "d_strike_prc:%lf", ptr_st_mtch_cntrct->d_strike_prc );
    fn_userlog( c_ServiceName, "c_symbol [%s]",ptr_st_mtch_cntrct->c_symbol );
    fn_userlog( c_ServiceName, "c_expry_dt [%s]",ptr_st_mtch_cntrct->c_expry_dt );
    fn_userlog( c_ServiceName, "c_opt_typ [%s]",ptr_st_mtch_cntrct->c_opt_typ );
    fn_userlog( c_ServiceName, "l_ca_lvl [%ld]",ptr_st_mtch_cntrct->l_ca_lvl );
  } 

  /*** Commented in Ver 1.3 ***
  EXEC SQL
       SELECT FCM_UNDRLYNG
         INTO :c_underlying
         FROM FCM_FO_CNTRCT_MSTR
        WHERE FCM_TOKEN_NO = :l_token_no
          AND FCM_XCHNG_CD = :ptr_st_mtch_cntrct->c_xchng_cd;
  ***/
  /*** Ver 1.3 Starts ***/

     EXEC SQL
       SELECT FTQ_UNDRLYNG
         INTO :c_underlying
         FROM FTQ_FO_TRD_QT     
        WHERE FTQ_TOKEN_NO = :l_token_no
          AND FTQ_XCHNG_CD = :ptr_st_mtch_cntrct->c_xchng_cd;

  /*** Ver 1.3 Ends   ***/
  if (SQLCODE != 0)
  {
    fn_errlog ( c_ServiceName, "S31060", SQLMSG, c_err_msg);		
    return -1;
  }   
  rtrim(c_underlying);

  memset ( c_strike_price, '\0', sizeof (c_strike_price) );  /*** Ver 1.5 ***/

  strcpy(ptr_st_contract->c_undrlyng,c_underlying); 

  strcpy(ptr_st_contract->c_xchng_cd ,ptr_st_mtch_cntrct->c_xchng_cd);

  ptr_st_contract->l_strike_prc = ptr_st_mtch_cntrct->d_strike_prc * 100;
 
  ptr_st_contract->l_ca_lvl = ptr_st_mtch_cntrct->l_ca_lvl;
  sprintf(c_strike_price,"%lf",ptr_st_mtch_cntrct->d_strike_prc * 100);
 
  ptr_st_contract->l_strike_prc = atoi(c_strike_price);
	
	if (DEBUG_MSG_LVL_0)				/*** Added Debug level in Ver 1.3 ***/
	{ 
  	fn_userlog(c_ServiceName,"After data type change l_strike_price is %ld",ptr_st_contract->l_strike_prc);
 	}

  strcpy(ptr_st_contract->c_expry_dt,ptr_st_mtch_cntrct->c_expry_dt);
 
  EXEC SQL
         SELECT to_char(to_date(:ptr_st_mtch_cntrct->c_expry_dt,'dd-mm-yyyy'),
                        'dd-Mon-yyyy')
         INTO   :ptr_st_contract->c_expry_dt
         FROM   dual;   
  if (SQLCODE != 0)
  {
    fn_errlog ( c_ServiceName, "S31065", SQLMSG,c_err_msg);		/*ver 1.4 changed from c_err_msg to c_err_msg.arr */
    return -1;
  }

  rtrim(ptr_st_contract->c_expry_dt);
  
  if ( strncmp( ptr_st_mtch_cntrct->c_instrmnt_typ, "FUT", (int)strlen("FUT")) == 0 )
  {
   ptr_st_contract->c_prd_typ = 'F';
  } 
  else if( strncmp( ptr_st_mtch_cntrct->c_instrmnt_typ, "OPT", (int)strlen("OPT")) == 0 )
  {
   ptr_st_contract->c_prd_typ = 'O';
  }
  else
  {
   fn_userlog(c_ServiceName, "Invalid Product Type ");
   return -1;
  }
  
  if ( strncmp( ptr_st_mtch_cntrct->c_instrmnt_typ + 3, "IDX", (int)strlen("IDX")) == 0 )
  {
   ptr_st_contract->c_ctgry_indstk = 'I';
  }
  else if( strncmp( ptr_st_mtch_cntrct->c_instrmnt_typ + 3, "STK", (int)strlen("STK")) == 0 )
  {
   ptr_st_contract->c_ctgry_indstk = 'S';
  }
  else  
  {
    fn_userlog(c_ServiceName, "Invalid Instrument Type ");
    return -1;
  }
  
  if ( ptr_st_mtch_cntrct->c_opt_typ[0] == 'C' )
  {
    ptr_st_contract->c_opt_typ = 'C';
  }
  else if( ptr_st_mtch_cntrct->c_opt_typ[0] == 'P' )
  {
    ptr_st_contract->c_opt_typ = 'P';
  }
  else if( (ptr_st_mtch_cntrct->c_opt_typ[0] == 'F' ) ||
           (ptr_st_mtch_cntrct->c_opt_typ[0] == '\0' ) 
         )
  {
     ptr_st_contract->c_opt_typ = '*';
     ptr_st_contract->c_exrc_typ = 'E';  
  }
  else
  {
   fn_userlog(c_ServiceName, "Invalid Option Type ");
   return -1;
  }
  
  if( ptr_st_contract->c_prd_typ == 'O' )
  {
    if( ptr_st_mtch_cntrct->c_opt_typ[1] == 'A' )
    {
     ptr_st_contract->c_exrc_typ = 'A';
    }
    else if( ptr_st_mtch_cntrct->c_opt_typ[1] == 'E' )
    {
     ptr_st_contract->c_exrc_typ = 'E';
    } 
    else
    {
     fn_userlog(c_ServiceName, "Invalid Exercise Type ");
     return -1; 
    }
  } 
  if (DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName, " ##### After successful call to fn_get_stkdtls_bse ###### ");
    fn_userlog(c_ServiceName, " ptr_st_contract->c_undrlyng :%s:",ptr_st_contract->c_undrlyng);
    fn_userlog(c_ServiceName, " ptr_st_contract->c_xchng_cd :%s:",ptr_st_contract->c_xchng_cd);
    fn_userlog(c_ServiceName, " ptr_st_contract->l_strike_prc :%ld:",ptr_st_contract->l_strike_prc);
    fn_userlog(c_ServiceName, " ptr_st_contract->l_ca_lvl     :%ld:",ptr_st_contract->l_ca_lvl);
    fn_userlog(c_ServiceName, " ptr_st_contract->c_expry_dt   :%s:",ptr_st_contract->c_expry_dt);
    fn_userlog(c_ServiceName, " ptr_st_contract->c_prd_typ    :%c:",ptr_st_contract->c_prd_typ);
    fn_userlog(c_ServiceName, " ptr_st_contract->c_ctgry_indstk :%c:",ptr_st_contract->c_ctgry_indstk);
    fn_userlog(c_ServiceName, " ptr_st_contract->c_opt_typ    :%c:",ptr_st_contract->c_opt_typ);
    fn_userlog(c_ServiceName, " ptr_st_contract->c_exrc_typ   :%c:",ptr_st_contract->c_exrc_typ); 
  } 

return 0;
} 

/****** Ver 1.2 Ends Here *****/
