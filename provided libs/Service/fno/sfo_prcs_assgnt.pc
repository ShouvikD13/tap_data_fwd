/******************************************************************************/
/*  Program           : SFO_PRCS_ASSGNT                                       */
/*                                                                            */
/*  Input             : st_pstn_actn                                          */
/*                                                                            */
/*  Output            : vw_err_msg                                            */
/*                                                                            */
/*  Description       : This service processes the positions of SPAN customers*/ 
/*                      on Assignment Download.                               */
/*                                                                            */
/*  Log               : 1.0   19-Jul-2011   																	*/
/*  Log               : 1.1   02-Apr-2012   																	*/
/*  Log               : 1.2   31-Aug-2012                                     */
/*  Log               : 1.3   29-Nov-2012 | Sachin Birje                      */
/*  Log               : 1.4   08-May-2013 | Navina D.                         */
/*  Log               : 1.5   18-Jun-2013 | Mahesh Shinde                     */
/*  Log               : 1.6   28-Jan-2016 | Tanmay Warkhade                   */
/*  Log               : 1.7   14-Aug-2019 | Suchita Dabir                     */
/*  Log               : 1.8   04-Sep-2019 | Suchita Dabir                     */
/*  Log               : 1.9   17-Oct-2019 | Navina D.                         */
/*  Log               : 2.0   16-Dec-2021 | Sachin Birje                      */
/*  Log               : 2.1   15-Jul-2022 | Sachin Birje                      */
/******************************************************************************/
/*                                                                            */
/*  1.0   -   New Release                                                     */
/*  1.1   -   Bug Fix (Swati A.B )																					  */
/*  1.2   -   Bug Fix to update FCP position flow                             */ 
/*  1.3   -   FNO BSE SPAN CHANGES                                            */
/*  1.4   -   Balance amount bug fix (Navina D.)															*/
/*  1.5   -   SPAN bug changes for reading string															*/
/*  1.6   -   Migration of RI to NRI 																				  */
/*  1.7   -   Delivery Margin Changes                                         */
/*  1.8   -   Datatype changes                                                */
/*  1.9   -   Input string size change CR-ISEC14-128972                       */
/*  2.0   -   CR-ISEC14-162094_NRI_TDS_UNSETTLED_PROF                         */
/*  2.1   -   SPAN_BOD_MRGN_CR-ISEC14-172812                                  */
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fo_fml_def.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_session.h>
#include <fn_read_debug_lvl.h> 
#include <fn_span_lib.h> 
#include <fn_pos.h> 
#include <fml_rout.h> 
#include <math.h> 


int fn_apply_assgnmt(   char *c_ServiceName,
                        struct st_pstn_actn       *ptr_st_pstn_actn,
                        struct st_fcp_cntrct_pstn *ptr_st_cntfut_pos,
                        struct st_err_msg         *ptr_st_err_msg
                    );


int fn_apply_actn_spn(  char *c_ServiceName ,
									      struct st_pstn_actn  *ptr_st_pstn_actn,
                        struct st_fus_undrlyng_pstn *ptr_st_undfus_pos_crrnt,
                        struct st_fus_undrlyng_pstn *ptr_st_undfus_pos_to_be,
                        struct st_err_msg *ptr_st_err_msg
                     );

void SFO_PRCS_ASSGNT( TPSVCINFO *rqst )
{

	FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

	/*** Declaration Of Variables ***/
	char    c_ServiceName[33];
	char    c_err_msg[256];
  char  	c_mtm_flag;
  char    c_narration_id[4];
	char    c_reason_cd [ 25 ];

	int     i_returncode;	
	int     i_trnsctn;

	varchar c_exp_dt[LEN_DATE];	
	varchar c_xchng_cd[20];	

	/*** Declaration of Structures ***/
	struct st_pstn_actn         st_ip_pstn ; 
	struct st_fus_undrlyng_pstn st_undfus_pos_crrnt; 
	struct st_fus_undrlyng_pstn st_undfus_pos_to_be; 
  struct st_fcp_cntrct_pstn   st_cntfcp_pos_crrnt ;
  struct st_fcp_cntrct_pstn   st_cntpos_md_rc  ;
  struct st_err_msg           st_error_mg;

  EXEC SQL BEGIN DECLARE SECTION;
  sql_cursor     sys_cursor;      /* a cursor variable */
  char  sql_cln_mtch_accnt[11];
  char  sql_xchng_cd[4];
  char  sql_prd_typ;
  char  sql_undrlyng[7];

  EXEC SQL END DECLARE SECTION;
	
	ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );
  INITDBGLVL(c_ServiceName);

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog( c_ServiceName, "--------------- Starting Service SFO_PRCS_ASSGNT --------------------");
	}

  i_returncode = fn_unpack_fmltovar ( c_ServiceName, c_err_msg, ptr_fml_Ibuf, 12,
                                      FFO_EBA_MTCH_ACT_NO , ( char * )st_ip_pstn.c_cln_mtch_accnt, NULL,
          													  FFO_ASSIGN_QTY , ( char * )&st_ip_pstn.l_exec_qty, NULL,
        													    FFO_XCHNG_CD , ( char * )st_ip_pstn.c_xchng_cd, NULL,
	  																  FFO_PRDCT_TYP , ( char * )&st_ip_pstn.c_prd_typ, NULL,
	   																  FFO_UNDRLYNG , ( char * )st_ip_pstn.c_undrlyng, NULL,
	  																  FFO_EXPRY_DT , ( char * )st_ip_pstn.c_expry_dt, NULL,
	   																	FFO_EXER_TYP , ( char * )&st_ip_pstn.c_exrc_typ, NULL,
	   																	FFO_OPT_TYP , ( char * )&st_ip_pstn.c_opt_typ, NULL,
	   																	FFO_STRK_PRC , ( char * )&st_ip_pstn.l_strike_prc, NULL,
	   																	FFO_CTGRY_INDSTK , ( char * )&st_ip_pstn.c_ctgry_indstk, NULL,
	   																	FFO_REF_NO, ( char * )st_ip_pstn.c_ref_rmrks, NULL,
           														FFO_CA_LVL , ( char * )&st_ip_pstn.l_ca_lvl, NULL);
  
  if( i_returncode != 0)
  {
  	fn_errlog( c_ServiceName, "S31005", LIBMSG , c_err_msg );
  	Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpfree((char *)ptr_fml_Obuf);
  	tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }


	if(DEBUG_MSG_LVL_0)
  {
    fn_userlog( c_ServiceName, "--------------- Following Are the Input --------------------------");
    fn_userlog( c_ServiceName, "st_ip_pstn.c_cln_mtch_accnt [%s]",st_ip_pstn.c_cln_mtch_accnt );
    fn_userlog( c_ServiceName, "st_ip_pstn.c_xchng_cd [%s]",st_ip_pstn.c_xchng_cd );
    fn_userlog( c_ServiceName, "st_ip_pstn.c_prd_typ [%c]",st_ip_pstn.c_prd_typ );
    fn_userlog( c_ServiceName, "st_ip_pstn.c_undrlyng [%s]",st_ip_pstn.c_undrlyng );
    fn_userlog( c_ServiceName, "st_ip_pstn.c_expry_dt [%s]",st_ip_pstn.c_expry_dt );
    fn_userlog( c_ServiceName, "st_ip_pstn.c_exrc_typ [%c]",st_ip_pstn.c_exrc_typ );
    fn_userlog( c_ServiceName, "st_ip_pstn.c_opt_typ [%c]",st_ip_pstn.c_opt_typ );
    fn_userlog( c_ServiceName, "st_ip_pstn.l_strike_prc [%ld]",st_ip_pstn.l_strike_prc );
    fn_userlog( c_ServiceName, "st_ip_pstn.c_ctgry_indstk [%c]",st_ip_pstn.c_ctgry_indstk );
    fn_userlog( c_ServiceName, "st_ip_pstn.l_ca_lvl [%c]",st_ip_pstn.l_ca_lvl );
    fn_userlog( c_ServiceName, "st_ip_pstn.l_exec_qty [%ld]",st_ip_pstn.l_exec_qty );
    fn_userlog( c_ServiceName, "st_ip_pstn.c_ref_rmrks [%s]",st_ip_pstn.c_ref_rmrks );
  }


	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog( c_ServiceName, "--------------- Begin Transcation ----------------------------------");
	}

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog ( c_ServiceName, "S31010", LIBMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpfree((char *)ptr_fml_Obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog( c_ServiceName, "--------------- Getting Current Underlying Level Position -----------------");
	}

	strcpy( sql_cln_mtch_accnt,st_ip_pstn.c_cln_mtch_accnt);
  strcpy( sql_xchng_cd,st_ip_pstn.c_xchng_cd);
  strcpy( sql_undrlyng,st_ip_pstn.c_undrlyng);

  EXEC SQL
    SELECT  FUS_CLM_MTCH_ACCNT,
            FUS_XCHNG_CD,
            FUS_INDSTK,
            FUS_UNDRLYNG,
            FUS_UIBUY_QTY,
            FUS_UIBUY_VAL,
            FUS_UISELL_QTY,
            FUS_UISELL_VAL,
            FUS_UEXBUY_QTY,
            FUS_UEXBUY_VAL,
            FUS_UEXSELL_QTY,
            FUS_UEXSELL_VAL,
            FUS_UBUY_EXCTD_QTY,
            FUS_USELL_EXCTD_QTY,
            FUS_UOPNPSTN_FLW,
            FUS_UOPNPSTN_QTY,
            FUS_UOPNPSTN_VAL,
            FUS_UMTM_OPN_VAL,
            FUS_INITIAL_MRGN,
            FUS_SPAN_WEMULT_MRGN,
            FUS_EBA_EXPR_MRGN,
            FUS_USPAN_WENOV_MRGN,
            FUS_MULTIPLIER,
            FUS_USPAN_NENOV_MRGN,
            FUS_NET_OPTN_VAL,
            NVL(FUS_MIN_MRGN,0),
            NVL(FUS_MTM_FLG,'O'),
            FUS_BLCKD_PL,
            FUS_REQD_INITIAL_MRGN	
	INTO    :st_undfus_pos_crrnt.c_cln_mtch_accnt,
            :st_undfus_pos_crrnt.c_xchng_cd,
            :st_undfus_pos_crrnt.c_indstk,
            :st_undfus_pos_crrnt.c_undrlyng,
            :st_undfus_pos_crrnt.l_uibuy_qty,
            :st_undfus_pos_crrnt.d_uibuy_val,
            :st_undfus_pos_crrnt.l_uisell_qty,
            :st_undfus_pos_crrnt.d_uisell_val,
            :st_undfus_pos_crrnt.l_uexbuy_qty,
            :st_undfus_pos_crrnt.d_uexbuy_val,
            :st_undfus_pos_crrnt.l_uexsell_qty,
            :st_undfus_pos_crrnt.d_uexsell_val,
            :st_undfus_pos_crrnt.l_ubuy_exctd_qty,
            :st_undfus_pos_crrnt.l_usell_exctd_qty,
            :st_undfus_pos_crrnt.c_uopnpstn_flw,
            :st_undfus_pos_crrnt.l_uopnpstn_qty,
            :st_undfus_pos_crrnt.d_uopnpstn_val,
            :st_undfus_pos_crrnt.d_umtm_opn_val,
            :st_undfus_pos_crrnt.d_initial_mrgn,
            :st_undfus_pos_crrnt.d_span_wemult_mrgn,
            :st_undfus_pos_crrnt.d_eba_expr_mrgn,
            :st_undfus_pos_crrnt.d_uspan_wenov_mrgn,
            :st_undfus_pos_crrnt.d_multpr,
            :st_undfus_pos_crrnt.d_uspan_nenov_mrgn,
            :st_undfus_pos_crrnt.d_net_optn_val,
            :st_undfus_pos_crrnt.d_min_mrgn,
            :st_undfus_pos_crrnt.c_mtm_flg,
            :st_undfus_pos_crrnt.d_blckd_pl,
            :st_undfus_pos_crrnt.d_reqd_initial_mrgn
	FROM    FUS_FO_UNDRLYNG_SPN_PSTN
  WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
  AND     FUS_XCHNG_CD        = :sql_xchng_cd
  AND     FUS_UNDRLYNG        = :sql_undrlyng;

	if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31015", SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		tpfree((char *)ptr_fml_Obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog( c_ServiceName, "-------------- Setting Underlying To Be to Default Values -----------------");
	}

  strcpy( st_undfus_pos_to_be.c_cln_mtch_accnt, sql_cln_mtch_accnt);
  strcpy( st_undfus_pos_to_be.c_xchng_cd, sql_xchng_cd);
  strcpy( st_undfus_pos_to_be.c_undrlyng, sql_undrlyng );
  st_undfus_pos_to_be.c_indstk            = st_ip_pstn.c_ctgry_indstk;
  st_undfus_pos_to_be.l_uibuy_qty         = 0;
  st_undfus_pos_to_be.d_uibuy_val         = 0;
  st_undfus_pos_to_be.l_uisell_qty        = 0;
  st_undfus_pos_to_be.d_uisell_val        = 0;
  st_undfus_pos_to_be.l_uexbuy_qty        = 0;
  st_undfus_pos_to_be.d_uexbuy_val        = 0;
  st_undfus_pos_to_be.l_uexsell_qty       = 0;
  st_undfus_pos_to_be.d_uexsell_val       = 0;
  st_undfus_pos_to_be.l_ubuy_exctd_qty    = 0;
  st_undfus_pos_to_be.l_usell_exctd_qty   = 0;
  st_undfus_pos_to_be.c_uopnpstn_flw      = 'N';
  st_undfus_pos_to_be.l_uopnpstn_qty      = 0;
  st_undfus_pos_to_be.d_uopnpstn_val      = 0;
  st_undfus_pos_to_be.d_umtm_opn_val      = 0;
  st_undfus_pos_to_be.d_initial_mrgn      = st_undfus_pos_crrnt.d_initial_mrgn ;
  st_undfus_pos_to_be.d_span_wemult_mrgn  = st_undfus_pos_crrnt.d_span_wemult_mrgn ;
  st_undfus_pos_to_be.d_eba_expr_mrgn     = st_undfus_pos_crrnt.d_eba_expr_mrgn ;
  st_undfus_pos_to_be.d_uspan_wenov_mrgn  = st_undfus_pos_crrnt.d_uspan_wenov_mrgn ;
  st_undfus_pos_to_be.d_multpr            = st_undfus_pos_crrnt.d_multpr ;
  st_undfus_pos_to_be.d_uspan_nenov_mrgn  = st_undfus_pos_crrnt.d_uspan_nenov_mrgn ;
  st_undfus_pos_to_be.d_net_optn_val      = st_undfus_pos_crrnt.d_net_optn_val ;
  st_undfus_pos_to_be.d_min_mrgn          = st_undfus_pos_crrnt.d_min_mrgn ;
  st_undfus_pos_to_be.d_blckd_pl          = st_undfus_pos_crrnt.d_blckd_pl ;
  st_undfus_pos_to_be.d_reqd_initial_mrgn = st_undfus_pos_crrnt.d_reqd_initial_mrgn ;
  st_undfus_pos_to_be.d_umtm_opn_val      = 0;
  st_undfus_pos_to_be.c_mtm_flg           = st_undfus_pos_crrnt.c_mtm_flg;

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog( c_ServiceName, "-------------- Applying Span Action -----------------");
	}

  i_returncode =  fn_apply_actn_spn(	c_ServiceName,&st_ip_pstn,
                                     	&st_undfus_pos_crrnt,
	 																		&st_undfus_pos_to_be,&st_error_mg);

  if ( i_returncode == -1 )
  {
  	fn_errlog ( c_ServiceName, "S31020", LIBMSG, c_err_msg );
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		tpfree((char *)ptr_fml_Obuf);
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

  }

	if(DEBUG_MSG_LVL_3)
	{	
  	fn_userlog ( c_ServiceName, "------------- Updating Underlying Table-FUS ------------------------------");
	}

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "Calcualted underlying level position" );
    fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_undfus_pos_to_be.l_uibuy_qty);
    fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_undfus_pos_to_be.d_uibuy_val);
    fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_undfus_pos_to_be.l_uisell_qty);
    fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_undfus_pos_to_be.d_uisell_val);
    fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_undfus_pos_to_be.l_uexbuy_qty);
    fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_undfus_pos_to_be.d_uexbuy_val);
    fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_undfus_pos_to_be.l_uexsell_qty);
    fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", st_undfus_pos_to_be.d_uexsell_val);
    fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_undfus_pos_to_be.l_ubuy_exctd_qty);
    fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_undfus_pos_to_be.l_usell_exctd_qty);
    fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_undfus_pos_to_be.l_uopnpstn_qty);
    fn_userlog ( c_ServiceName, "Original open val :%lf:", st_undfus_pos_to_be.d_uopnpstn_val);
    fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_undfus_pos_to_be.d_umtm_opn_val);
  }
	
	 
	 if ( st_undfus_pos_to_be.l_uopnpstn_qty > 0 )
   {
   	st_undfus_pos_to_be.c_uopnpstn_flw = BUY;
   }
   else if ( st_undfus_pos_to_be.l_uopnpstn_qty < 0 )
   {
    st_undfus_pos_to_be.c_uopnpstn_flw = SELL;
   }
   else
   {
    st_undfus_pos_to_be.c_uopnpstn_flw = NEUTRAL;
   }

	 if(DEBUG_MSG_LVL_3)
	 {
	  fn_userlog ( c_ServiceName, "Open Position Flow set to :%c: ",st_undfus_pos_to_be.c_uopnpstn_flw );
	 }

	 EXEC SQL
     UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
     SET      FUS_UIBUY_QTY           = :st_undfus_pos_to_be.l_uibuy_qty,
              FUS_UIBUY_VAL           = :st_undfus_pos_to_be.d_uibuy_val,
              FUS_UISELL_QTY          = :st_undfus_pos_to_be.l_uisell_qty,
              FUS_UISELL_VAL          = :st_undfus_pos_to_be.d_uisell_val,
              FUS_UEXBUY_QTY          = :st_undfus_pos_to_be.l_uexbuy_qty,
              FUS_UEXBUY_VAL          = :st_undfus_pos_to_be.d_uexbuy_val,
              FUS_UEXSELL_QTY         = :st_undfus_pos_to_be.l_uexsell_qty,
              FUS_UEXSELL_VAL         = :st_undfus_pos_to_be.d_uexsell_val,
              FUS_UBUY_EXCTD_QTY      = :st_undfus_pos_to_be.l_ubuy_exctd_qty,
              FUS_USELL_EXCTD_QTY     = :st_undfus_pos_to_be.l_usell_exctd_qty,
              FUS_UOPNPSTN_FLW        = :st_undfus_pos_to_be.c_uopnpstn_flw,
              FUS_UOPNPSTN_QTY        = :st_undfus_pos_to_be.l_uopnpstn_qty,
              FUS_UOPNPSTN_VAL        = :st_undfus_pos_to_be.d_uopnpstn_val,
              FUS_UMTM_OPN_VAL        = :st_undfus_pos_to_be.d_uopnpstn_val,
              FUS_INITIAL_MRGN        = :st_undfus_pos_to_be.d_reqd_initial_mrgn,
              FUS_SPAN_WEMULT_MRGN    = :st_undfus_pos_to_be.d_span_wemult_mrgn,
              FUS_MIN_MRGN            = :st_undfus_pos_to_be.d_min_mrgn,
              FUS_EBA_EXPR_MRGN       = :st_undfus_pos_to_be.d_eba_expr_mrgn,
              FUS_MULTIPLIER          = :st_undfus_pos_to_be.d_multpr,
              FUS_REQD_INITIAL_MRGN   = :st_undfus_pos_to_be.d_reqd_initial_mrgn,
              FUS_USPAN_WENOV_MRGN    = :st_undfus_pos_to_be.d_uspan_wenov_mrgn,
              FUS_USPAN_NENOV_MRGN    = :st_undfus_pos_to_be.d_uspan_nenov_mrgn,
							FUS_NET_OPTN_VAL        = :st_undfus_pos_to_be.d_net_optn_val,
							FUS_NTNL_PL             = :st_undfus_pos_to_be.d_ntnl_pl,
             /***  FUS_BLCKD_PL            = :st_undfus_pos_to_be.d_blckd_pl * (-1) commented On 10-Dec-11 **/
              FUS_BLCKD_PL            = :st_undfus_pos_to_be.d_blckd_pl 
      WHERE   FUS_CLM_MTCH_ACCNT      = :st_ip_pstn.c_cln_mtch_accnt
      AND     FUS_XCHNG_CD            = :st_ip_pstn.c_xchng_cd
      AND     FUS_UNDRLYNG            = :st_ip_pstn.c_undrlyng ;

   if ( SQLCODE != 0 )
   {
   	fn_errlog(c_ServiceName, "S31025", SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		tpfree((char *)ptr_fml_Obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

	 if(DEBUG_MSG_LVL_3)
	 {	
   		fn_userlog ( c_ServiceName, "------------- Commiting Transcation -------------------");
	 }

	 if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
   {
    fn_errlog ( c_ServiceName, "S31030", LIBMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpfree((char *)ptr_fml_Obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

	 if(DEBUG_MSG_LVL_3)
	 {
     fn_userlog ( c_ServiceName, "-------------Service SFO_PRCS_ASSGNT Succesfully Ended -------------------");
	 }

	 tpfree((char *)ptr_fml_Obuf);
   tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );

} /*** End of Service ***/	



int fn_apply_actn_spn(  char *c_ServiceName ,
                        struct st_pstn_actn  *ptr_st_ip_pstn,
                        struct st_fus_undrlyng_pstn *ptr_st_undfus_pos_crrnt,
                        struct st_fus_undrlyng_pstn *ptr_st_undfus_pos_to_be,
                        struct st_err_msg *ptr_st_err_msg
                     )
{

	FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;


	/*** Declaration Of Variables ***/
	char    c_err_msg[256];
  char  	c_mtm_flag;
  char    c_narration_id[4];
	char    c_reason_cd [ 25 ];

	int     i_returncode;	
	int     i_trnsctn;
	int     i_cntrct_cnt = 0;		/*** Ver 1.1 ***/

	long    l_und_cls_prc   = 0;	
	double  d_blkd_prmum    = 0.0;
	double  d_opt_prmum     = 0.0;
	double  d_total_prmum   = 0.0;
	double  d_loss          = 0.0;
	double  d_balance_amt  = 0.0;
	double  d_ltp          = 0.0;
	double  d_clsng_prc    = 0.0;
	double  d_cntrct_pl    = 0.0;
	double  d_diff_pl      = 0.0;
	double  d_oblckd_amnt  = 0.0;

	varchar c_exp_dt[LEN_DATE];	

	/*** Declaration of Structures ***/
  struct st_fcp_cntrct_pstn   st_cntfcp_pos_crrnt ;
  struct st_fcp_cntrct_pstn   st_cntfcp_pos_to_be ;
  struct st_fcp_cntrct_pstn   st_cntpos_md_rc  ;
  struct st_err_msg           st_error_mg;

	/*** Declaration of Variables For Margin Calculation ***/
	char    c_expry_dt[10];
  /* long    l_strike_prc; */  /*** Ver 1.1 ***/
	long    l_max_opn_qty;
	long    l_min_opn_qty;
	long    l_temp_qty;
	long    l_cntr  = 0;
	long    l_prtfl_seq1 = 0;
	long    l_prtfl_seq2 = 0;
  long    l_length1;
  long    l_length2;
  long    li_len_tobuf;
	long    l_basket_id;  /*** 21-Oct-2011 ***/
	int     i_rtrn_cd1 ;
	char    c_inp_strng11[ 16000 ];		/*** changed from 8000 to 16000 in Ver 1.9 ***/
	char    c_inp_strng22[ 16000 ];		/*** changed from 8000 to 16000 in Ver 1.9 ***/
  char    c_inp_strng1[ 16000 ];		/*** changed from 8000 to 16000 in Ver 1.9 ***/
  char    c_inp_strng2[ 16000 ];		/*** changed from 8000 to 16000 in Ver 1.9 ***/
  char    c_seq_num1[12000];
  char    c_seq_num2[12000];
	char    c_op_strng[ 16000 ];
  char    c_op_strng1[ 16000 ];
  char    c_op_strng2[ 16000 ];
	char    c_inp_strng[ 16000 ];
	char    c_mrgn_indctr[3];
  char    c_mtch_accnt1[11];
	char    c_spn_mrgn1[20];
  char    c_total_mrgn1[20];
	char    c_mtch_accnt2[11];
  char    c_nov1[20];
	char    c_pipe_id[3];
	char    c_spn_mrgn2[20];
	char    c_nov2[20];
	char    c_total_mrgn2[20];
	char    c_tmp_rmrks [ 133 ] ;	
	char    *null_ptr  = 0;
	char		c_strk_prc[20];					/*** Ver 1.1 ***/
  char    c_xchng_cd1[4];          /*** Ver 1.3 ***/
  char    c_xchng_cd2[4];          /*** Ver 1.3 ***/
	
	double  d_undrlyng_pl   = 0.0; 
  double  d_spn_mrgn1     = 0.0;
  double  d_spn_mrgn2     = 0.0; 
  double  d_nov1          = 0.0;
  double  d_nov2          = 0.0; 
  double  d_total_mrgn1   = 0.0;
  double  d_total_mrgn2   = 0.0;
  double  d_spn_mrgn      = 0.0;
  double  d_nov           = 0.0;
  double  d_total_mrgn    = 0.0;
  double  d_mltplr        = 0.0;
  double  d_expsr         = 0.0;
  double  d_min_mrgn      = 0.0;
  double  d_intl_mrgn     = 0.0;
	double  d_expsr_mrgn = 0.0;      
  double  d_min_expsr_mrgn  = 0.0; 
  double  d_min_expsr = 0.0;       
  double  d_upd_amount = 0.0;      
	double  d_strike_prc = 0.0;			/*** Ver 1.1 ***/
  int     i_expsr_rtrn = 0;        
  double  d_existing_delvry_mrgn = 0.0; /**** ver 1.7 ******/
  char  c_settlement_flag = '\0'; /**** ver 1.7 ******/ /** double changed to char in ver 1.8 ***/
 
  /*** Ver 2.0  Starts Here ***/
  int    i_ret_val=0;

  double d_spn_bmrgn1=0;
  double d_bnov1=0;
  double d_total_bmrgn1=0;

  double d_spn_bmrgn2=0;
  double d_bnov2=0;
  double d_total_bmrgn2=0;

  double d_spn_bmrgn=0;
  double d_bnov=0;
  double d_total_bmrgn=0;
  /*** Ver 2.0 Ends here ***/
 
	varchar c_xchng_cd[20];

  EXEC SQL BEGIN DECLARE SECTION;
  sql_cursor     sys_cursor;      /* a cursor variable */
  char  sql_cln_mtch_accnt[11];
  char  sql_xchng_cd[4];
  char  sql_prd_typ;
  char  sql_undrlyng[7];

  EXEC SQL END DECLARE SECTION;
  EXEC SQL INCLUDE "table/iai_info_account_info.h"; /* Ver 1.6 */	

	if(DEBUG_MSG_LVL_3)
	{	
  	fn_userlog ( c_ServiceName, "------------- Inside Function FN_APPLY_ACTN_SPN       -------------------");
  	fn_userlog( c_ServiceName, "--------------- Generating Seq for Margin Calculation ---------------------");
	}

  ptr_fml_Obuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if ( ptr_fml_Obuf == NULL )
  {
   fn_errlog(c_ServiceName, "S31035", TPMSG, c_err_msg);
   Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
   tpfree((char *)ptr_fml_Obuf);
   tpfree((char *)ptr_fml_Ibuf);
	 return -1;
  }

  ptr_fml_Ibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN*10);
																/*** Ver 1.1 - Size increased by multiple of 10 to accomodate the big sized portfolio ***/

  if ( ptr_fml_Ibuf == NULL )
  {
   fn_errlog(c_ServiceName, "S31040", TPMSG, c_err_msg);
   Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
   tpfree((char *)ptr_fml_Obuf);
   tpfree((char *)ptr_fml_Ibuf);
	 return -1;
  }
	
  EXEC  SQL
  SELECT  SPN_PRTFL1_SEQ.nextval
  INTO    :l_prtfl_seq1
  FROM    DUAL;

  if ( SQLCODE  !=  0 )
  {
   fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
   fn_errlog(c_ServiceName,"S31045",SQLMSG, c_err_msg);
   Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
   tpfree((char *)ptr_fml_Obuf);
   tpfree((char *)ptr_fml_Ibuf);
	 return -1;
  }

  EXEC  SQL
  SELECT  SPN_PRTFL1_SEQ.nextval
  INTO    :l_prtfl_seq2
  FROM    DUAL;
  if ( SQLCODE  !=  0 )
  {
   fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
   fn_errlog(c_ServiceName,"S31050",SQLMSG, c_err_msg);
   Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
   tpfree((char *)ptr_fml_Obuf);
   tpfree((char *)ptr_fml_Ibuf);
	 return -1;
  }

	MEMSET(c_inp_strng);     /*** Ver 1.1 ***/ 
	MEMSET(c_inp_strng1);   /*** Ver 1.1 ***/ 
	MEMSET(c_inp_strng11);   /*** Ver 1.1 ***/ 
	MEMSET(c_inp_strng2);   /*** Ver 1.1 ***/ 
	MEMSET(c_inp_strng22);   /*** Ver 1.1 ***/ 

	strcpy(c_inp_strng1,"1^");
  strcpy(c_inp_strng2,"|");
  
  /**** Ver 1.3 Starts Here *****/

  if( strcmp(ptr_st_ip_pstn->c_xchng_cd,"NFO") == 0 )
  {
   strcat( c_inp_strng1 ,"NSE^");
  }
  else
  {
   strcat( c_inp_strng1 ,"BSE^");
  }
  /**** Ver 1.3 Ends Here ******/
 
  sprintf(c_seq_num1,"%ld",l_prtfl_seq1);
  sprintf(c_seq_num2,"%ld",l_prtfl_seq2);

  strcat( c_inp_strng1 , c_seq_num1 );
  strcat( c_inp_strng2 , c_seq_num2 );

  strcat(c_inp_strng1,"^");
  strcat(c_inp_strng2,"^");	

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "--------------- Open FCP cursor  ----------------------------------");
	}

  strcpy( sql_cln_mtch_accnt,ptr_st_ip_pstn->c_cln_mtch_accnt);
  strcpy( sql_xchng_cd,ptr_st_ip_pstn->c_xchng_cd);
  strcpy( sql_undrlyng,ptr_st_ip_pstn->c_undrlyng);

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "---- sql_cln_mtch_accnt Is :%s: -----",sql_cln_mtch_accnt);
		fn_userlog( c_ServiceName, "---- sql_xchng_cd Is :%s:  -----",sql_xchng_cd);
		fn_userlog( c_ServiceName, "---- sql_undrlyng Is :%s:  -----",sql_undrlyng);
	}

  EXEC SQL ALLOCATE :sys_cursor;

  EXEC SQL EXECUTE
  BEGIN
     OPEN :sys_cursor FOR
     SELECT  FCP_CLM_MTCH_ACCNT,
     FCP_XCHNG_CD,
     FCP_PRDCT_TYP,
     FCP_INDSTK,
     FCP_UNDRLYNG,
     TO_CHAR (FCP_EXPRY_DT,'DD-Mon-YYYY'),
     FCP_EXER_TYP,
     FCP_IBUY_QTY,
     FCP_IBUY_ORD_VAL,
     FCP_ISELL_QTY,
     FCP_ISELL_ORD_VAL,
     FCP_EXBUY_QTY,
     FCP_EXBUY_ORD_VAL,
     FCP_EXSELL_QTY,
     FCP_EXSELL_ORD_VAL,
     FCP_OPT_TYP,
     FCP_STRK_PRC,
     FCP_BUY_EXCTD_QTY,
     FCP_SELL_EXCTD_QTY,
     FCP_OPNPSTN_FLW,
     FCP_OPNPSTN_QTY,
     FCP_OPNPSTN_VAL,
     FCP_MTM_OPN_VAL,
     FCP_ASGND_QTY,
     FCP_OPT_PREMIUM
  FROM   FCP_FO_SPN_CNTRCT_PSTN
  WHERE  FCP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
  AND  	 FCP_XCHNG_CD         = :sql_xchng_cd
  AND    FCP_UNDRLYNG         = :sql_undrlyng
	AND   ( FCP_IBUY_QTY <> 0 OR FCP_ISELL_QTY <> 0 OR FCP_EXBUY_QTY <> 0 OR FCP_EXSELL_QTY <> 0 OR FCP_OPNPSTN_QTY <> 0 OR FCP_OPT_PREMIUM <> 0 ) /*** Ver 1.1 ***/
  ORDER BY FCP_EXPRY_DT asc;
  END;
  END-EXEC;


  if ( SQLCODE != 0 )
  {
    EXEC SQL FREE :sys_cursor;
    fn_errlog ( c_ServiceName, "S31055", SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
		return -1;
  }


  EXEC SQL
    SELECT  FCB_UNDRLYNG_BSKT_ID
    INTO    :l_basket_id
    FROM    FCB_FO_CLN_BSKT_ALLTD
    WHERE   FCB_CLN_LVL = ( SELECT  CLM_CLNT_LVL
                            FROM    CLM_CLNT_MSTR
                            WHERE   CLM_MTCH_ACCNT = :sql_cln_mtch_accnt);
  if ( SQLCODE != 0 )
  {
      fn_errlog ( c_ServiceName, "S31060", SQLMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog( c_ServiceName, "--------------- Fetch  FCP cursor  ----------------------------------");
	}

	d_undrlyng_pl = 0.0;
	
  while ( 1 )
  {
   d_opt_prmum = 0.0;
   d_total_prmum = 0.0;
	 d_cntrct_pl = 0.0;
	 st_cntfcp_pos_crrnt.l_asgnd_qty = 0;
	 d_strike_prc = 0.0;		/*** Ver 1.1 ***/

   EXEC SQL FETCH :sys_cursor
   INTO
       :st_cntfcp_pos_crrnt.c_cln_mtch_accnt,
       :st_cntfcp_pos_crrnt.c_xchng_cd,
       :st_cntfcp_pos_crrnt.c_prd_typ,
       :st_cntfcp_pos_crrnt.c_ctgry_indstk,
       :st_cntfcp_pos_crrnt.c_undrlyng,
       :c_exp_dt,
       :st_cntfcp_pos_crrnt.c_exer_typ,
       :st_cntfcp_pos_crrnt.l_ibuy_qty,
       :st_cntfcp_pos_crrnt.d_ibuy_ord_val,
       :st_cntfcp_pos_crrnt.l_isell_qty,
       :st_cntfcp_pos_crrnt.d_isell_ord_val,
       :st_cntfcp_pos_crrnt.l_exbuy_qty,
       :st_cntfcp_pos_crrnt.d_exbuy_ord_val,
       :st_cntfcp_pos_crrnt.l_exsell_qty,
       :st_cntfcp_pos_crrnt.d_exsell_ord_val,
       :st_cntfcp_pos_crrnt.c_opt_typ,
       :st_cntfcp_pos_crrnt.l_strike_prc,
       :st_cntfcp_pos_crrnt.l_buy_exctd_qty,
       :st_cntfcp_pos_crrnt.l_sell_exctd_qty,
       :st_cntfcp_pos_crrnt.c_opnpstn_flw,
       :st_cntfcp_pos_crrnt.l_opnpstn_qty,
       :st_cntfcp_pos_crrnt.d_opnpstn_val,
       :st_cntfcp_pos_crrnt.d_mtm_opn_val,
       :st_cntfcp_pos_crrnt.l_asgnd_qty,
       :d_blkd_prmum;

   if ( SQLCODE != 0 )
   {
    if ( SQLCODE == NO_DATA_FOUND )
    {
     break;
   	}

    EXEC SQL CLOSE :sys_cursor;
    EXEC SQL FREE  :sys_cursor;
    fn_errlog ( c_ServiceName, "S31065", SQLMSG,c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
	  return -1;

   }

	 i_cntrct_cnt++;							/*** Ver 1.1 ***/

   if(DEBUG_MSG_LVL_3)
   {
    fn_userlog ( c_ServiceName, "Current contract level Position");
    fn_userlog ( c_ServiceName, "Expiry date       :%s:", c_exp_dt.arr );
    fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntfcp_pos_crrnt.l_ibuy_qty );
    fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntfcp_pos_crrnt.d_ibuy_ord_val);
    fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntfcp_pos_crrnt.l_isell_qty );
    fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntfcp_pos_crrnt.d_isell_ord_val);
    fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntfcp_pos_crrnt.l_exbuy_qty );
    fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntfcp_pos_crrnt.d_exbuy_ord_val);
    fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntfcp_pos_crrnt.l_exsell_qty );
    fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", st_cntfcp_pos_crrnt.d_exsell_ord_val );
    fn_userlog ( c_ServiceName, "Option Type is    :%c: ", st_cntfcp_pos_crrnt.c_opt_typ);
    fn_userlog ( c_ServiceName, "Strike Price is   :%ld:", st_cntfcp_pos_crrnt.l_strike_prc);
    fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntfcp_pos_crrnt.l_buy_exctd_qty );
    fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_cntfcp_pos_crrnt.l_sell_exctd_qty );
    fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntfcp_pos_crrnt.l_opnpstn_qty );
    fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntfcp_pos_crrnt.d_opnpstn_val);
    fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntfcp_pos_crrnt.d_mtm_opn_val );
    fn_userlog ( c_ServiceName, "Assigned Quantity :%ld:", st_cntfcp_pos_crrnt.l_asgnd_qty);
   }


   SETNULL( c_exp_dt );
   strcpy ( st_cntfcp_pos_crrnt.c_expry_dt, (char *) c_exp_dt.arr );

   rtrim(st_cntfcp_pos_crrnt.c_xchng_cd);

   rtrim(st_cntfcp_pos_crrnt.c_undrlyng);

   rtrim(st_cntfcp_pos_crrnt.c_expry_dt);

   rtrim(ptr_st_ip_pstn->c_undrlyng);

	 if(DEBUG_MSG_LVL_0)
	 {
   		fn_userlog( c_ServiceName, "--------------- Check If Matches with the I/p ----------------------------");
	 }
	
	 if( (strcmp(st_cntfcp_pos_crrnt.c_xchng_cd,ptr_st_ip_pstn->c_xchng_cd) == 0 ) &&
       (st_cntfcp_pos_crrnt.c_prd_typ == ptr_st_ip_pstn->c_prd_typ) &&
       (strcmp(st_cntfcp_pos_crrnt.c_undrlyng,ptr_st_ip_pstn->c_undrlyng) == 0 ) &&
       (strcasecmp(st_cntfcp_pos_crrnt.c_expry_dt,ptr_st_ip_pstn->c_expry_dt) == 0 ) &&
       (st_cntfcp_pos_crrnt.c_opt_typ == ptr_st_ip_pstn->c_opt_typ) &&
       (st_cntfcp_pos_crrnt.l_strike_prc == ptr_st_ip_pstn->l_strike_prc) &&
       (st_cntfcp_pos_crrnt.c_exer_typ == ptr_st_ip_pstn->c_exrc_typ) )
   {
		if(DEBUG_MSG_LVL_0)
		{
    	fn_userlog ( c_ServiceName, "------------- Inside Match FOund ::------------------------------------ ");
    	fn_userlog ( c_ServiceName, "------------ Check Assgnt Qty Not < Open Pos Qty -------------------- ");
		}

	  if ( (st_cntfcp_pos_crrnt.l_opnpstn_qty * (-1)) < ptr_st_ip_pstn->l_exec_qty)
    {
			EXEC SQL CLOSE :sys_cursor;
    	EXEC SQL FREE  :sys_cursor;
    	fn_userlog( c_ServiceName, "Open Pos Qty Is :%ld:", st_cntfcp_pos_crrnt.l_opnpstn_qty );
    	fn_userlog( c_ServiceName, "Assigned Quantity Is :%ld:", ptr_st_ip_pstn->l_exec_qty );
    	fn_errlog( c_ServiceName, "B28560", DEFMSG, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }	


		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog ( c_ServiceName, "------------ Applying Action For Assgnment  ------------------------ ");
		}

    i_returncode =  fn_apply_assgnmt( c_ServiceName,ptr_st_ip_pstn, &st_cntfcp_pos_crrnt,&st_error_mg);

    if ( i_returncode == -1 )
    {
			EXEC SQL CLOSE :sys_cursor;
     	EXEC SQL FREE  :sys_cursor;
     	fn_errlog ( c_ServiceName, "S31070", LIBMSG, c_err_msg );
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog ( c_ServiceName, " After fn_apply_assgnmt "); 
    	fn_userlog ( c_ServiceName, " st_cntfcp_pos_crrnt.l_opnpstn_qty Is :%ld:",
																    st_cntfcp_pos_crrnt.l_opnpstn_qty); 
    	fn_userlog ( c_ServiceName, " st_cntfcp_pos_crrnt.l_sell_exctd_qty Is  :%ld:", 
																		st_cntfcp_pos_crrnt.l_sell_exctd_qty); 
    	fn_userlog ( c_ServiceName, " st_cntfcp_pos_crrnt.l_asgnd_qty Is  :%ld:",
																	  st_cntfcp_pos_crrnt.l_asgnd_qty); 
    	fn_userlog ( c_ServiceName, " st_cntfcp_pos_crrnt.d_opnpstn_val Is  :%ld:",
																  	st_cntfcp_pos_crrnt.d_opnpstn_val);
    	fn_userlog ( c_ServiceName, "------------ Get the Closing Price   -------------------------------");
    	fn_userlog ( c_ServiceName, "ptr_st_ip_pstn->c_xchng_cd  Is  :%s:",ptr_st_ip_pstn->c_xchng_cd);
    	fn_userlog ( c_ServiceName, " ptr_st_ip_pstn->c_prd_typ Is  :%c:",ptr_st_ip_pstn->c_prd_typ);
    	fn_userlog ( c_ServiceName, "ptr_st_ip_pstn->c_ctgry_indstk  Is  :%c:",ptr_st_ip_pstn->c_ctgry_indstk);
    	fn_userlog ( c_ServiceName, "ptr_st_ip_pstn->c_undrlyng Is  :%s:",ptr_st_ip_pstn->c_undrlyng);
		}
	  
		EXEC SQL
    SELECT  fum_cls_prc
    INTO    :l_und_cls_prc
    FROM    fum_fo_undrlyng_mstr
    WHERE   fum_xchng_cd     = :ptr_st_ip_pstn->c_xchng_cd
    AND     fum_prdct_typ    = :ptr_st_ip_pstn->c_prd_typ
    AND     fum_ctgry_indstk = :ptr_st_ip_pstn->c_ctgry_indstk
    AND     fum_undrlyng     = :ptr_st_ip_pstn->c_undrlyng;

    if ( SQLCODE != 0 )
    {
		 EXEC SQL CLOSE :sys_cursor;
     EXEC SQL FREE  :sys_cursor;
		 fn_errlog ( c_ServiceName, "S31075", LIBMSG, c_err_msg );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     tpfree((char *)ptr_fml_Obuf);
     tpfree((char *)ptr_fml_Ibuf);
		 return -1;	
    }	
	
		if(DEBUG_MSG_LVL_3)
		{	
    	fn_userlog ( c_ServiceName, "------------ The Closing Price  l_und_cls_prc Is :%ld:",l_und_cls_prc); 
    	fn_userlog ( c_ServiceName, "------------ Calculating Loss On Assignment --------------------------");
		}

    if ( ptr_st_ip_pstn->c_opt_typ  == 'P' )
    {
     d_loss = (double) ptr_st_ip_pstn->l_exec_qty * (double) ( l_und_cls_prc - ptr_st_ip_pstn->l_strike_prc );
    }
    else
    {
     d_loss = (double) ptr_st_ip_pstn->l_exec_qty * (double) (ptr_st_ip_pstn->l_strike_prc - l_und_cls_prc );
    }	

		if(DEBUG_MSG_LVL_0)
		{	
    	fn_userlog ( c_ServiceName, "Calculated d_loss Is :%lf:",d_loss);
		}

    memcpy ( &st_cntpos_md_rc, &st_cntfcp_pos_crrnt,  sizeof( st_cntpos_md_rc ) );
	 }  /*** End of Match ***/
	
	 if(DEBUG_MSG_LVL_3)
	 { 
   		fn_userlog ( c_ServiceName, "------------- Outside Match FOund ::------------------------------------ ");
   		fn_userlog ( c_ServiceName, "------------- Calculating Notional P&L  ---------------------------------");
	 }
	
   EXEC SQL
        SELECT  NVL(FTQ_LST_TRD_PRC,0),   /*** Ver 1.1 ***/
                NVL(FTQ_CLS_PRC,0)        /*** Ver 1.1 ***/
        INTO    :d_ltp,
                :d_clsng_prc
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :st_cntfcp_pos_crrnt.c_xchng_cd 
				AND     FTQ_PRDCT_TYP = :st_cntfcp_pos_crrnt.c_prd_typ
        AND     FTQ_UNDRLYNG  = :st_cntfcp_pos_crrnt.c_undrlyng
        AND     FTQ_EXPRY_DT  = :c_exp_dt
        AND     FTQ_EXER_TYP  = :st_cntfcp_pos_crrnt.c_exer_typ
        AND     FTQ_OPT_TYP   = :st_cntfcp_pos_crrnt.c_opt_typ
        AND     FTQ_STRK_PRC  = :st_cntfcp_pos_crrnt.l_strike_prc ;

   if(SQLCODE  !=  0 )
   {
    EXEC SQL CLOSE :sys_cursor;
    EXEC SQL FREE :sys_cursor;
    fn_errlog ( c_ServiceName, "S31080", SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
		return -1;
   } 
		
	 if ( st_cntfcp_pos_crrnt.l_opnpstn_qty != 0 )
   {
    if(st_cntfcp_pos_crrnt.c_prd_typ == 'O' && st_cntfcp_pos_crrnt.l_opnpstn_qty < 0)
    {
     d_cntrct_pl = (double) st_cntfcp_pos_crrnt.l_opnpstn_qty * ( d_clsng_prc - d_ltp );

    }
    else
    {
     if (  st_cntfcp_pos_crrnt.c_prd_typ  ==  'F' )
     {
      if( st_cntfcp_pos_crrnt.l_opnpstn_qty  > 0 )
      {
       d_cntrct_pl = ( d_ltp * (double) st_cntfcp_pos_crrnt.l_opnpstn_qty ) -
                       st_cntfcp_pos_crrnt.d_opnpstn_val; 
      }
      else if ( st_cntfcp_pos_crrnt.l_opnpstn_qty < 0 )
      {
			/* Commented by Mahesh 29-Dec-2011  
       d_cntrct_pl = abs(st_cntfcp_pos_crrnt.d_opnpstn_val  - 
									 ( d_ltp * (double) abs(st_cntfcp_pos_crrnt.l_opnpstn_qty) )) ;    */

		   d_cntrct_pl = fabs(st_cntfcp_pos_crrnt.d_opnpstn_val) -  ( d_ltp * (double) abs(st_cntfcp_pos_crrnt.l_opnpstn_qty) );

      }
     }
    }
   }

	 if(DEBUG_MSG_LVL_3)
	 {
   		fn_userlog ( c_ServiceName, " d_cntrct_pl Is :%lf: ",d_cntrct_pl); 		
   		fn_userlog ( c_ServiceName, "--------- Preparing String To Calculate SPAN Margin On New Pos --------- ");
	 }
		
   d_ltp = d_ltp / 100;

 	 EXEC SQL
   SELECT  SEM_MAP_VL
   INTO    :c_xchng_cd
   FROM    SEM_STCK_MAP
   WHERE   SEM_STCK_CD = :st_cntfcp_pos_crrnt.c_undrlyng
   /*** AND     SEM_ENTTY   = 3; *** Ver 1.3 ***/
   AND   SEM_ENTTY = DECODE(:st_cntfcp_pos_crrnt.c_xchng_cd,'NFO',3,14);  /*** Ver 1.3 ***/

   if ( SQLCODE  !=  0 )
   {
    fn_errlog ( c_ServiceName, "S31085", SQLMSG, c_err_msg );
    EXEC SQL CLOSE :sys_cursor;
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
	  return -1;
   } 	

   EXEC SQL
   	SELECT to_char(to_date(:st_cntfcp_pos_crrnt.c_expry_dt,'DD-Mon-YYYY'),'dd-Mon-YY')
   	INTO  :c_expry_dt
   	FROM  DUAL;
 
   if ( SQLCODE  !=  0 )
   {
    fn_errlog ( c_ServiceName, "S31090", SQLMSG, c_err_msg );
	 	EXEC SQL CLOSE :sys_cursor;
    EXEC SQL FREE  :sys_cursor; 
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
    return -1;
   }


   /*** l_strike_prc  = st_cntfcp_pos_crrnt.l_strike_prc/100  ; *** Commented in Ver 1.1 ***/
	 
	 /*** Ver 1.1 starts here ***/
		d_strike_prc  = (double) st_cntfcp_pos_crrnt.l_strike_prc / 100.00  ;	
		sprintf(c_strk_prc,"%lf",d_strike_prc);

		fn_spn_rtrim(c_strk_prc,'0');
		fn_spn_rtrim(c_strk_prc,'.');
		/*** Ver 1.1 ends here ***/

	 /**** Commented By Mahesh 	
	 l_max_opn_qty = st_cntfcp_pos_crrnt.l_opnpstn_qty   +  st_cntfcp_pos_crrnt.l_ibuy_qty ;
   l_min_opn_qty = st_cntfcp_pos_crrnt.l_opnpstn_qty   +  st_cntfcp_pos_crrnt.l_isell_qty   ;
	 ********************/

	
		l_max_opn_qty = st_cntfcp_pos_crrnt.l_opnpstn_qty  +  fn_maxl(st_cntfcp_pos_crrnt.l_ibuy_qty,st_cntfcp_pos_crrnt.l_exbuy_qty) ;
		l_min_opn_qty = st_cntfcp_pos_crrnt.l_opnpstn_qty  +  fn_maxl(abs(st_cntfcp_pos_crrnt.l_isell_qty),abs(st_cntfcp_pos_crrnt.l_exsell_qty)) * -1  ;	
		
   if ( st_cntfcp_pos_crrnt.c_prd_typ ==  'O' )
   {			
    l_temp_qty    = fn_minl ( l_max_opn_qty , l_min_opn_qty );
    l_max_opn_qty = l_temp_qty  ;
    l_min_opn_qty = l_temp_qty  ;
   }
 
	 if(DEBUG_MSG_LVL_3)
	 {
		fn_userlog ( c_ServiceName, " d_ltp Is :: %lf",d_ltp);		 
		fn_userlog ( c_ServiceName, " c_expry_dt Is :: %s",c_expry_dt);		
		fn_userlog ( c_ServiceName, " c_strk_prc Is :: %s",c_strk_prc);		 /*** Ver 1.1 ***/
		fn_userlog ( c_ServiceName, " Product Type Is:: %c",st_cntfcp_pos_crrnt.c_prd_typ);		
		fn_userlog ( c_ServiceName, " st_cntfcp_pos_crrnt.l_opnpstn_qty Is :: %ld", 
																	st_cntfcp_pos_crrnt.l_opnpstn_qty);		
		fn_userlog ( c_ServiceName, " st_cntfcp_pos_crrnt.l_ibuy_qty Is :: %ld",st_cntfcp_pos_crrnt.l_ibuy_qty);
	  fn_userlog ( c_ServiceName, " st_cntfcp_pos_crrnt.l_isell_qty Is :: %ld",st_cntfcp_pos_crrnt.l_isell_qty);	
    fn_userlog( c_ServiceName,  " l_max_opn_qty Is :: %ld",l_max_opn_qty);		
   	fn_userlog ( c_ServiceName, " l_min_opn_qty Is :: %ld",l_min_opn_qty);		
	  fn_userlog(c_ServiceName,"SPAN  - d_total_prmum Is :%lf:",d_total_prmum);
   }

	 if(	l_cntr	==	0	)
	 {
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"l_cntr Is :%ld:",l_cntr);
		}

		if(st_cntfcp_pos_crrnt.c_prd_typ	==	'F')
		{
		  		sprintf(c_inp_strng11,"%s^%s~%c:%s^%ld^%lf",st_cntfcp_pos_crrnt.c_cln_mtch_accnt,c_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,l_max_opn_qty,d_ltp);

      	strcat(c_inp_strng1,c_inp_strng11);

      	sprintf(c_inp_strng22,"%s^%s~%c:%s^%ld^%lf",st_cntfcp_pos_crrnt.c_cln_mtch_accnt,c_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,l_min_opn_qty,d_ltp);

      	strcat(c_inp_strng2,c_inp_strng22);

		}
		else
		{
      		sprintf(c_inp_strng11,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntfcp_pos_crrnt.c_cln_mtch_accnt,c_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,st_cntfcp_pos_crrnt.c_opt_typ,st_cntfcp_pos_crrnt.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

      		strcat(c_inp_strng1,c_inp_strng11);

      		sprintf(c_inp_strng22,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntfcp_pos_crrnt.c_cln_mtch_accnt,c_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,st_cntfcp_pos_crrnt.c_opt_typ,st_cntfcp_pos_crrnt.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

      		strcat(c_inp_strng2,c_inp_strng22);

		}
	 }	
   else
	 {
		if(st_cntfcp_pos_crrnt.c_prd_typ  ==  'F')
    {
        	sprintf(c_inp_strng11,"%s~%c:%s^%ld^%lf",c_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,l_max_opn_qty,d_ltp);

        	strcat(c_inp_strng1,c_inp_strng11);

        	sprintf(c_inp_strng22,"%s~%c:%s^%ld^%lf",c_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,l_min_opn_qty,d_ltp);

        	strcat(c_inp_strng2,c_inp_strng22);

    }
    else
    {
          sprintf(c_inp_strng11,"%s~%c:%s:%c%c:%s^%ld^%lf",c_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,st_cntfcp_pos_crrnt.c_opt_typ,st_cntfcp_pos_crrnt.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

          strcat(c_inp_strng1,c_inp_strng11);

          sprintf(c_inp_strng22,"%s~%c:%s:%c%c:%s^%ld^%lf",c_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,st_cntfcp_pos_crrnt.c_opt_typ,st_cntfcp_pos_crrnt.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

          strcat(c_inp_strng2,c_inp_strng22);

     }
		}

		if(DEBUG_MSG_LVL_3)
		{	
    	fn_userlog ( c_ServiceName, "---------------- End Of String Preparation  ------------------------ ");
		}

    fn_sum_spnpos( st_cntfcp_pos_crrnt,ptr_st_undfus_pos_to_be);
	  strcat(c_inp_strng1,",");
    strcat(c_inp_strng2,",");

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog ( c_ServiceName, "---------------- Calculating Exposure Margin ------------------------ ");
		}

    i_expsr_rtrn  = fn_cal_expsr  ( c_ServiceName,
                                    st_cntfcp_pos_crrnt,
                                    l_basket_id,
                                    &d_expsr_mrgn,
                                    &d_min_expsr_mrgn,
                                    &d_mltplr,
                                    c_err_msg
                                  );

    if ( i_expsr_rtrn != 0 )
    {
      fn_errlog ( c_ServiceName, "S31095", SQLMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

     d_expsr     = d_expsr_mrgn  + d_expsr ;
     d_min_expsr = d_min_expsr_mrgn  + d_min_expsr ;

	
    l_cntr  ++;
    d_undrlyng_pl = d_undrlyng_pl + d_cntrct_pl ;
	  
	 } /*** End of While ***/
	
	 EXEC SQL CLOSE :sys_cursor;
   EXEC SQL FREE :sys_cursor;

	 /* Type Casted by Mahesh for 1 paisa issue */
	 d_undrlyng_pl = ( long long )d_undrlyng_pl;

	 if(DEBUG_MSG_LVL_3)
   {	
   		fn_userlog ( c_ServiceName, "------------------- End Of while Loop --------------------------------- ");
   		fn_userlog ( c_ServiceName, "------------------- Before Calling Service SFO_SPAN_MRGN -------------- ");
	 }

	 l_length1 = strlen(c_inp_strng1);

   if( c_inp_strng1[l_length1  - 1 ] == ',')
   {
    c_inp_strng1[l_length1 -1]  ='\0';
   }

   l_length2 = strlen(c_inp_strng2);

   if( c_inp_strng2[l_length2  - 1 ] == ',')
   {
    c_inp_strng2[l_length2 -1]  ='\0';
   }


   /*** Following Commented In Ver 1.1 and  taken in Else Case 	
	 strcpy(c_inp_strng,c_inp_strng1);
   strcat(c_inp_strng,c_inp_strng2);
   strcat(c_inp_strng,"\n");
	 ***/

   EXEC SQL 
	 SELECT pcm_crnt_pipe_id
   INTO   :c_pipe_id
   FROM   PCM_PIPE_CLM_MAP
   WHERE  pcm_clm_mtch_accnt  = :sql_cln_mtch_accnt
   AND    PCM_XCHNG_CD        = :sql_xchng_cd; 

  if (SQLCODE !=0 )
  {
	 if ( SQLCODE == NO_DATA_FOUND )
	 {
	 fn_userlog(c_ServiceName," Inside No DATA Found ");
   fn_errlog( c_ServiceName, "S31100", SQLMSG, c_err_msg  );
	 } 
   fn_errlog( c_ServiceName, "S31105", SQLMSG, c_err_msg  );
   Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	 tpfree((char *)ptr_fml_Obuf);
   tpfree((char *)ptr_fml_Ibuf);
   return -1;
  }

   /*** strcpy( c_pipe_id, .c_pipe_id); ***/

	/*** Ver 1.1 starts here ***/
	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog( c_ServiceName, "i_cntrct_cnt = :%d:",i_cntrct_cnt);
	}

	if (i_cntrct_cnt > 10)
	{
		if ( Fadd32 (ptr_fml_Ibuf,FFO_PIPE_ID,(char *)c_pipe_id,0)	==	-1 )
		{
			 fn_errlog( c_ServiceName, "S31110",FMLMSG , c_err_msg );
			 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			 tpfree((char *)ptr_fml_Obuf);
			 tpfree((char *)ptr_fml_Ibuf);
			 return -1;
		}

		MEMSET(c_inp_strng);
		strcpy(c_inp_strng,c_inp_strng1);
		strcat(c_inp_strng,"\n");
			
		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"c_inp_strng 1 = :%s:",c_inp_strng);
		}

		if ( Fadd32 (ptr_fml_Ibuf,FFO_REMARKS,(char *)c_inp_strng,0)	==	-1 )
		{
			 fn_errlog( c_ServiceName, "S31115",FMLMSG , c_err_msg );
			 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			 tpfree((char *)ptr_fml_Obuf);
			 tpfree((char *)ptr_fml_Ibuf);
			 return -1;
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
		}

		i_rtrn_cd1	=	tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

		if(	i_rtrn_cd1 != 0	)
		{
			 fn_errlog( c_ServiceName, "S31120",FMLMSG , c_err_msg );
			 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			 tpfree((char *)ptr_fml_Obuf);
			 tpfree((char *)ptr_fml_Ibuf);
			 return -1;
		}

		if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng1,0)  ==  -1 )
		{
			 fn_errlog( c_ServiceName, "S31125",FMLMSG , c_err_msg );
			 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			 tpfree((char *)ptr_fml_Obuf);
			 tpfree((char *)ptr_fml_Ibuf);
			 return -1;
		}

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"Output String 1 Is :%s:",c_op_strng1);
		}

    /*** Ver 2.1  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31130",FMLMSG , c_err_msg );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       tpfree((char *)ptr_fml_Obuf);
       tpfree((char *)ptr_fml_Ibuf);
       return -1; 
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
    /*** Ver 2.1  Ends here ***/

		MEMSET(c_inp_strng);

		/**** Ver 1.3 BUG bix Starts Here *****/

    if( strcmp(sql_xchng_cd,"NFO") == 0 )
    {
      strcpy( c_inp_strng ,"1^NSE^");
    }
    else
    {
        strcpy( c_inp_strng ,"1^BSE^");
    }
    /**** Ver 1.3 Ends Here ******/

		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"Initial c_inp_strng2 = :%s:",c_inp_strng2);
		}

		fn_spn_ltrim(c_inp_strng2,'|');
		/** sprintf(c_inp_strng,"1^%s",c_inp_strng2); *** Ver 1.3 ***/
		/** sprintf(c_inp_strng,"%s",c_inp_strng2);   *** Ver 1.3 ***/
		strcat(c_inp_strng,c_inp_strng2);            /*** Ver 1.3 ***/	
		strcat(c_inp_strng,"\n");	

		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"c_inp_strng 2 = :%s:",c_inp_strng);
		}

		if ( Fchg32 (ptr_fml_Ibuf,FFO_REMARKS,0,(char *)c_inp_strng,0)	==	-1 )
		{
			 fn_errlog( c_ServiceName, "S31135",FMLMSG , c_err_msg );
			 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			 tpfree((char *)ptr_fml_Obuf);
			 tpfree((char *)ptr_fml_Ibuf);
			 return -1;
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
		}

		i_rtrn_cd1	=	tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

		if(	i_rtrn_cd1 != 0	)
		{
			 fn_errlog( c_ServiceName, "S31140",FMLMSG , c_err_msg );
			 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			 tpfree((char *)ptr_fml_Obuf);
			 tpfree((char *)ptr_fml_Ibuf);
			 return -1;
		}

		if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng2,0)  ==  -1 )
		{
			 fn_errlog( c_ServiceName, "S31145",FMLMSG , c_err_msg );
			 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			 tpfree((char *)ptr_fml_Obuf);
			 tpfree((char *)ptr_fml_Ibuf);
			 return -1;
		}
		
		fn_spn_ltrim(c_op_strng2,'1');
		fn_spn_ltrim(c_op_strng2,'^');

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"Output String 2 Is :%s:",c_op_strng2);
		}

    /*** Ver 2.1  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn2,
                                    &d_bnov2,
                                    &d_total_bmrgn2,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31150",LIBMSG , c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       tpfree((char *)ptr_fml_Obuf);
       tpfree((char *)ptr_fml_Ibuf);
       return -1; 
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn2 :%lf: d_bnov2:%lf: d_total_bmrgn2:%lf:",d_spn_bmrgn2,d_bnov2,d_total_bmrgn2);
    }
    /*** Ver 2.1  Ends here ***/

	}
	else
	{

	 	strcpy(c_inp_strng,c_inp_strng1);
   	strcat(c_inp_strng,c_inp_strng2);
   	strcat(c_inp_strng,"\n");
	
	 	/*** Ver 1.1 Ends here ***/

	 	if ( Fadd32 (ptr_fml_Ibuf,FFO_PIPE_ID,(char *)c_pipe_id,0)  ==  -1 )
   	{
    	fn_errlog( c_ServiceName, "S31155",FMLMSG , c_err_msg );
    	EXEC SQL CLOSE :sys_cursor;
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	tpfree((char *)ptr_fml_Obuf);
    	tpfree((char *)ptr_fml_Ibuf);
			return -1;
   	}

   	if ( Fadd32 (ptr_fml_Ibuf,FFO_REMARKS,(char *)c_inp_strng,0)  ==  -1 )
   	{
    	fn_errlog( c_ServiceName, "S31160",FMLMSG , c_err_msg );
    	EXEC SQL CLOSE :sys_cursor;
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	tpfree((char *)ptr_fml_Obuf);
    	tpfree((char *)ptr_fml_Ibuf);
			return -1;
   	}

	 	if(DEBUG_MSG_LVL_3)
	 	{	
	 		fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
	 	}

   	i_rtrn_cd1  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

   	if( i_rtrn_cd1 != 0 )
   	{
    	fn_errlog( c_ServiceName, "S31165",TPMSG , c_err_msg );
    	EXEC SQL CLOSE :sys_cursor;
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	tpfree((char *)ptr_fml_Obuf);
    	tpfree((char *)ptr_fml_Ibuf);
			return -1;
   	} 

	 	if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng,0)  ==  -1 )
   	{
    	fn_errlog( c_ServiceName, "S31170",FMLMSG , c_err_msg );
    	EXEC SQL CLOSE :sys_cursor;
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	tpfree((char *)ptr_fml_Obuf);
    	tpfree((char *)ptr_fml_Ibuf);
			return -1;
   	}

	 	if(DEBUG_MSG_LVL_0)
	 	{
			 fn_userlog(c_ServiceName,"Output String Is :%s:",c_op_strng);
	 	}

   	strcpy(c_op_strng1,strtok(c_op_strng,"|"));
   	strcpy(c_op_strng2,strtok(null_ptr,"|"));

    /*** Ver 2.1  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31175",LIBMSG , c_err_msg );
      EXEC SQL CLOSE :sys_cursor;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1; 
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
    /*** Ver 2.1  Ends here ***/

	 }	/*** Ver 1.1 ***/

   strcpy(c_mrgn_indctr,strtok(c_op_strng1,"^"));
   strcpy(c_xchng_cd1,strtok(null_ptr,"^"));    /** Ver 1.3 ***/ 
   strcpy(c_seq_num1,strtok(null_ptr,"^"));
   strcpy(c_mtch_accnt1,strtok(null_ptr,"^"));
   strcpy(c_spn_mrgn1,strtok(null_ptr,"^"));
   strcpy(c_nov1,strtok(null_ptr,"^"));
   strcpy(c_total_mrgn1,strtok(null_ptr,"^"));

	 if (i_cntrct_cnt > 10)     /** Condition  Added in Ver 1.5 ***/
   {	
   strcpy(c_xchng_cd2,strtok(c_op_strng2,"^"));    /** Ver 1.3 ***/
   /* strcpy(c_seq_num2,strtok(c_op_strng2,"^"));	  ** Ver 1.3 ***/
   strcpy(c_seq_num2,strtok(null_ptr,"^"));	       /** Ver 1.3 ***/
	 }
	 else
	 {
			strcpy(c_seq_num2,strtok(c_op_strng2,"^"));   /** Added in Ver 1.5 ***/
	 }			
   strcpy(c_mtch_accnt2,strtok(null_ptr,"^"));
   strcpy(c_spn_mrgn2,strtok(null_ptr,"^"));
   strcpy(c_nov2,strtok(null_ptr,"^"));
   strcpy(c_total_mrgn2,strtok(null_ptr,"^"));

	 if(DEBUG_MSG_LVL_3)
	 {
	 		fn_userlog(c_ServiceName,"SPAN c_mtch_accnt1 Is :%s:",c_mtch_accnt1);
			fn_userlog(c_ServiceName,"SPAN c_xchng_cd2 Is :%s:",c_xchng_cd2); /** Ver 1.3 ***/
      fn_userlog(c_ServiceName,"SPAN c_seq_num2 Is :%s:",c_seq_num2);  /** Ver 1.3 ***/
      fn_userlog(c_ServiceName,"SPAN c_spn_mrgn2 Is :%s:",c_spn_mrgn2); /** Ver 1.3 ***/
      fn_userlog(c_ServiceName,"SPAN c_nov2 Is :%s:",c_nov2);            /** Ver 1.3 ***/
      fn_userlog(c_ServiceName,"SPAN c_total_mrgn2 Is :%s:",c_total_mrgn2); /** Ver 1.3 ***/
	 }
   if ( c_mtch_accnt1[0] == '1' || c_mtch_accnt1[0] == '2' || c_mtch_accnt1[0] == '3' )  /*** Ver 1.1 ***/
   {
    fn_errlog( c_ServiceName, "S31180",LIBMSG , c_err_msg );
    fn_userlog(c_ServiceName,"Service Return Error.");
    EXEC SQL CLOSE :sys_cursor;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
    return -1;
   }	


    /*** Ver 2.1  Starts here ***/
     d_spn_bmrgn = fn_maxd(d_spn_bmrgn1,d_spn_bmrgn2) * 100;
     d_bnov      = fn_maxd(d_bnov1,d_bnov2) * 100;
     d_total_bmrgn = fn_maxd(d_total_bmrgn1,d_total_bmrgn2) * 100;

     if(DEBUG_MSG_LVL_4)
     {
       fn_userlog(c_ServiceName,"d_spn_bmrgn :%lf: d_bnov :%lf: d_total_bmrgn:%lf:",d_spn_bmrgn,d_bnov,d_total_bmrgn);
     }
    /*** Ver 2.1  Ends here ***/

    d_spn_mrgn1   = atof(c_spn_mrgn1);
    d_spn_mrgn2   = atof(c_spn_mrgn2);
    d_nov1        = atof(c_nov1);
    d_nov2        = atof(c_nov2);
    d_total_mrgn1 = atof(c_total_mrgn1);
    d_total_mrgn2 = atof(c_total_mrgn2);

    ptr_st_undfus_pos_to_be->d_uspan_nenov_mrgn  = fn_maxd(d_spn_mrgn1,d_spn_mrgn2) * 100;
    ptr_st_undfus_pos_to_be->d_net_optn_val      = fn_maxd(d_nov1,d_nov2) * 100;
    ptr_st_undfus_pos_to_be->d_uspan_wenov_mrgn  = fn_maxd(d_total_mrgn1,d_total_mrgn2) * 100 ;

    /*** Ver 2.1  Starts Here ***/
    ptr_st_undfus_pos_to_be->d_uspan_nenov_mrgn  = fn_maxd(ptr_st_undfus_pos_to_be->d_uspan_nenov_mrgn,d_spn_bmrgn);
    ptr_st_undfus_pos_to_be->d_net_optn_val = fn_maxd(ptr_st_undfus_pos_to_be->d_net_optn_val,d_bnov);
    ptr_st_undfus_pos_to_be->d_uspan_wenov_mrgn = fn_maxd(ptr_st_undfus_pos_to_be->d_uspan_wenov_mrgn,d_total_bmrgn);
    /*** Ver 2.1  Ends Here ***/

    d_spn_mrgn    = ptr_st_undfus_pos_to_be->d_uspan_nenov_mrgn    ;     /***  SPAN  MRGN  ***/
    d_nov         = ptr_st_undfus_pos_to_be->d_net_optn_val        ;     /***  NOV ***/
    d_total_mrgn  = ptr_st_undfus_pos_to_be->d_uspan_wenov_mrgn    ;     /***  SPAN +/- NOV  ***/

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"SPAN - SPAN MARGIN Is :%lf:",d_spn_mrgn);
		}

		i_returncode  = fn_cal_mrgn ( c_ServiceName,
                                  d_total_mrgn,
                                  d_mltplr,
                                  d_expsr,
                                  d_min_expsr,
                                  &d_min_mrgn,
                                  &d_intl_mrgn,
                                  c_err_msg
                                );

    if ( i_returncode !=  0 )
    {
      fn_errlog( c_ServiceName, "S31185",LIBMSG , c_err_msg );
      fn_userlog(c_ServiceName,"Service Return Error.");
      EXEC SQL CLOSE :sys_cursor;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }	

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"SPAN  - SPAN MARGIN IS :%lf:",d_spn_mrgn);
    	fn_userlog(c_ServiceName,"SPAN  - NOV IS :%lf:",d_nov);
    	fn_userlog(c_ServiceName,"SPAN  - Total Margin  IS :%lf:",d_total_mrgn);
    	fn_userlog(c_ServiceName,"SPAN  - Exposure  IS :%lf:",d_expsr);
    	fn_userlog(c_ServiceName,"SPAN  - Min. Margin IS :%lf:",d_min_mrgn);
    	fn_userlog(c_ServiceName,"SPAN  - Initial Margin IS :%lf:",d_intl_mrgn);
		}

		/* Type Casted by Mahesh for 1 paisa issue */
    ptr_st_undfus_pos_to_be->d_multpr            = d_mltplr      ;
    ptr_st_undfus_pos_to_be->d_eba_expr_mrgn     = ( long long )d_expsr ;
    ptr_st_undfus_pos_to_be->d_span_wemult_mrgn  = ( long long )d_total_mrgn * d_mltplr  ;
    ptr_st_undfus_pos_to_be->d_min_mrgn          = d_min_mrgn ;
    ptr_st_undfus_pos_to_be->d_reqd_initial_mrgn = ( long long )d_intl_mrgn;
    ptr_st_undfus_pos_to_be->d_ntnl_pl           = d_undrlyng_pl ;


	 /*** Ver 1.2 Starts here ***/
	 if ( st_cntpos_md_rc.l_opnpstn_qty > 0 )
   {
			st_cntpos_md_rc.c_opnpstn_flw = BUY;
   }
	 else if ( st_cntpos_md_rc.l_opnpstn_qty < 0 )
   {
			st_cntpos_md_rc.c_opnpstn_flw = SELL;
   }
	 else
   {
      st_cntpos_md_rc.c_opnpstn_flw = NEUTRAL;
   }
	 /*** Ver 1.2 Ends here ***/

	 if(DEBUG_MSG_LVL_3)
	 {
   	fn_userlog ( c_ServiceName, "------------- Updating FCP -Contract Level ------------------------------");
    fn_userlog ( c_ServiceName, "------- Resultant Contract ------------------------------------------");
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_ibuy_qty : %ld :",st_cntpos_md_rc.l_ibuy_qty);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.d_ibuy_ord_val: %lf :",st_cntpos_md_rc.d_ibuy_ord_val);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_isell_qty: %ld :",st_cntpos_md_rc.l_isell_qty);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.d_isell_ord_val: %lf :",st_cntpos_md_rc.d_isell_ord_val);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_exbuy_qty: %ld :",st_cntpos_md_rc.l_exbuy_qty);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.d_exbuy_ord_val: %lf :",st_cntpos_md_rc.d_exbuy_ord_val);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_exsell_qty: %ld :",st_cntpos_md_rc.l_exsell_qty);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.d_exsell_ord_val: %lf :",st_cntpos_md_rc.d_exsell_ord_val);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_buy_exctd_qty: %ld :",st_cntpos_md_rc.l_buy_exctd_qty);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_sell_exctd_qty: %ld :",st_cntpos_md_rc.l_sell_exctd_qty);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.c_opnpstn_flw: %c :",st_cntpos_md_rc.c_opnpstn_flw);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_opnpstn_qty: %ld :",st_cntpos_md_rc.l_opnpstn_qty);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.d_opnpstn_val: %lf :",st_cntpos_md_rc.d_opnpstn_val);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.d_mtm_opn_val: %lf :",st_cntpos_md_rc.d_mtm_opn_val);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_asgnd_qty  : %ld :",st_cntpos_md_rc.l_asgnd_qty);
   }

   if(DEBUG_MSG_LVL_3)
   {
    fn_userlog ( c_ServiceName, "--------- Details Of the Cntract On which Actn Applied -------------");
    fn_userlog ( c_ServiceName, "ptr_st_ip_pstn->c_xchng_cd: %s :",ptr_st_ip_pstn->c_xchng_cd);
    fn_userlog ( c_ServiceName, "ptr_st_ip_pstn->c_prd_typ: %c :",ptr_st_ip_pstn->c_prd_typ);
    fn_userlog ( c_ServiceName, "ptr_st_ip_pstn->c_undrlyng: %s :",ptr_st_ip_pstn->c_undrlyng);
    fn_userlog ( c_ServiceName, "ptr_st_ip_pstn->c_opt_typ: %c :",ptr_st_ip_pstn->c_opt_typ);
    fn_userlog ( c_ServiceName, "ptr_st_ip_pstn->l_strike_prc: %ld :",ptr_st_ip_pstn->l_strike_prc);
    fn_userlog ( c_ServiceName, "ptr_st_ip_pstn->c_expry_dt: %s :",ptr_st_ip_pstn->c_expry_dt);
    fn_userlog ( c_ServiceName, "ptr_st_ip_pstn->c_exrc_typ: %c :",ptr_st_ip_pstn->c_exrc_typ);
   } 

	 EXEC SQL
   UPDATE  FCP_FO_SPN_CNTRCT_PSTN
   SET     FCP_IBUY_QTY       = :st_cntpos_md_rc.l_ibuy_qty,
           FCP_IBUY_ORD_VAL   = :st_cntpos_md_rc.d_ibuy_ord_val,
           FCP_ISELL_QTY      = :st_cntpos_md_rc.l_isell_qty,
           FCP_ISELL_ORD_VAL  = :st_cntpos_md_rc.d_isell_ord_val,
           FCP_EXBUY_QTY      = :st_cntpos_md_rc.l_exbuy_qty,
           FCP_EXBUY_ORD_VAL  = :st_cntpos_md_rc.d_exbuy_ord_val,
           FCP_EXSELL_QTY     = :st_cntpos_md_rc.l_exsell_qty,
           FCP_EXSELL_ORD_VAL = :st_cntpos_md_rc.d_exsell_ord_val,
           FCP_BUY_EXCTD_QTY  = :st_cntpos_md_rc.l_buy_exctd_qty,
           FCP_SELL_EXCTD_QTY = :st_cntpos_md_rc.l_sell_exctd_qty,
           FCP_OPNPSTN_FLW    = :st_cntpos_md_rc.c_opnpstn_flw,
           FCP_OPNPSTN_QTY    = :st_cntpos_md_rc.l_opnpstn_qty,
           FCP_OPNPSTN_VAL    = :st_cntpos_md_rc.d_opnpstn_val,
           FCP_MTM_OPN_VAL    = :st_cntpos_md_rc.d_opnpstn_val,
           FCP_ASGND_QTY      = :st_cntpos_md_rc.l_asgnd_qty,
					 FCP_OPT_PREMIUM    = :d_total_prmum * (-1)  +  FCP_OPT_PREMIUM
   WHERE   FCP_CLM_MTCH_ACCNT = :ptr_st_ip_pstn->c_cln_mtch_accnt
   AND     FCP_XCHNG_CD       = :ptr_st_ip_pstn->c_xchng_cd
   AND     FCP_PRDCT_TYP      = :ptr_st_ip_pstn->c_prd_typ
   AND     FCP_UNDRLYNG       = :ptr_st_ip_pstn->c_undrlyng
   AND     FCP_OPT_TYP        = :ptr_st_ip_pstn->c_opt_typ
   AND     FCP_STRK_PRC       = :ptr_st_ip_pstn->l_strike_prc
   AND     FCP_EXPRY_DT       = to_date(:ptr_st_ip_pstn->c_expry_dt, 'DD-Mon-YYYY')
   AND     FCP_EXER_TYP       = :ptr_st_ip_pstn->c_exrc_typ
    RETURNING NVL(FCP_UDLVRY_MRGN,0) INTO    :d_existing_delvry_mrgn;  /*** Ver 1.7 ***/

   if ( SQLCODE != 0 )
   {
    fn_errlog(c_ServiceName, "S31190", SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
    return -1;
   }

		
	 
   EXEC SQL
   SELECT   FUS_BLCKD_PL,
            FUS_INITIAL_MRGN,
            FUS_EBA_EXPR_MRGN, 
            FUS_USPAN_WENOV_MRGN
   INTO     :d_oblckd_amnt,
            :ptr_st_undfus_pos_crrnt->d_initial_mrgn,
            :ptr_st_undfus_pos_crrnt->d_eba_expr_mrgn,
						:ptr_st_undfus_pos_crrnt->d_uspan_wenov_mrgn
   FROM     FUS_FO_UNDRLYNG_SPN_PSTN
   WHERE    FUS_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
   AND      FUS_UNDRLYNG       = :sql_undrlyng
   AND      FUS_XCHNG_CD       = :sql_xchng_cd;

   if ( SQLCODE != 0 )
   {
    fn_errlog( c_ServiceName, "S31195",SQLMSG,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
    return -1;
   }	

	 if(DEBUG_MSG_LVL_0)
	 {
   	fn_userlog ( c_ServiceName, "------------- Releasing Blocked Margin ------------------------------");
	 	fn_userlog( c_ServiceName, "Blocked Margin Is :%lf: ",ptr_st_undfus_pos_crrnt->d_initial_mrgn);
	 }
	 strcpy( c_narration_id ,REL_TRDMRGN_ON_ASSIGNMENT  );
	 if ( ptr_st_undfus_pos_crrnt->d_initial_mrgn != 0 )
   {

		d_balance_amt  = 0.0;   /*** Ver 1.1 ***/

    i_returncode = fn_upd_spnlimits( c_ServiceName,
                                    ptr_st_ip_pstn,
                                    &st_error_mg,
                                    c_narration_id,
                                    DEBIT_WITHOUT_LIMIT,
                                    ptr_st_undfus_pos_crrnt->d_initial_mrgn,
                                    &d_balance_amt);

     if ( i_returncode != 0 )
     {

      fn_userlog( c_ServiceName, "Inside ERROR Condtion");
      fn_errlog( c_ServiceName, "S31200",LIBMSG , c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
     }

   }
	
	 /*** Following Added On 08-Dec-2011 ***/
	
		
	 if(DEBUG_MSG_LVL_0)
	 {	 
  	 fn_userlog ( c_ServiceName, "------------- Releasing Blocked Loss ------------------------------");
	 	 fn_userlog( c_ServiceName, "Blocked Loss Is :%lf: ",d_oblckd_amnt);
	 }
	 strcpy( c_narration_id , REL_BLKDLOSS_ON_ASSIGNMENT );
   sprintf ( ptr_st_ip_pstn->c_ref_rmrks,"SPAN-%s", ptr_st_ip_pstn->c_undrlyng );

   if ( d_oblckd_amnt!= 0 )
   {
		d_balance_amt  = 0.0;   /*** Ver 1.1 ***/
			
    i_returncode = fn_upd_spnlimits( c_ServiceName,
                                    ptr_st_ip_pstn,
                                    &st_error_mg,
                                    c_narration_id,
                                    DEBIT_WITHOUT_LIMIT,
                                    d_oblckd_amnt,
                                    &d_balance_amt);

     if ( i_returncode != 0 )
     {

      fn_userlog( c_ServiceName, "Inside ERROR Condtion");
      fn_errlog( c_ServiceName, "S31205",LIBMSG , c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
     }

   }

		if(DEBUG_MSG_LVL_0)
		{
	 		fn_userlog ( c_ServiceName, "------------- Blocking Loss On Assignment -------------------------");
   		fn_userlog ( c_ServiceName, " Calculated Loss On Assignment Is :%lf: ",d_loss);
		}

   strcpy ( c_tmp_rmrks, ptr_st_ip_pstn->c_ref_rmrks );

   /* sprintf ( ptr_st_ip_pstn->c_ref_rmrks,"OPT-%s-%s-%ld-%c%c",
             ptr_st_ip_pstn->c_undrlyng,
             ptr_st_ip_pstn->c_expry_dt,
             ptr_st_ip_pstn->l_strike_prc/100,
             ptr_st_ip_pstn->c_opt_typ,
             ptr_st_ip_pstn->c_exrc_typ ); *** Commented in Ver 1.1 ***/

	 sprintf ( ptr_st_ip_pstn->c_ref_rmrks,"OPT-%s-%s-%0.2lf-%c%c",
             ptr_st_ip_pstn->c_undrlyng,
             ptr_st_ip_pstn->c_expry_dt,
             (double) ptr_st_ip_pstn->l_strike_prc/100.00,
             ptr_st_ip_pstn->c_opt_typ,
             ptr_st_ip_pstn->c_exrc_typ );		/*** Ver 1.1 ***/


   if ( d_loss != 0 )
   {
    if ( ptr_st_ip_pstn->c_ctgry_indstk == 'S' )
    {
     strcpy( c_narration_id, MATCH_STOCK_OPTION_ASSIGNMENT );
    }
    else if (  ptr_st_ip_pstn->c_ctgry_indstk == 'I' )
    {
     strcpy( c_narration_id, MATCH_INDEX_OPTION_ASSIGNMENT );
    }
    else
    {
     strcpy( c_err_msg, "Invalid Category" );
     fn_errlog ( c_ServiceName, "S31210", DEFMSG, c_err_msg );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     tpfree((char *)ptr_fml_Obuf);
     tpfree((char *)ptr_fml_Ibuf);
     return -1;
    }
	
   	
		d_balance_amt  = 0.0;   /*** Ver 1.1 ***/

    /***** Ver 2.0 Starts Here ******/
    MEMSET (sql_iai_type);
      EXEC SQL
      SELECT  IAI_TYPE
      INTO    :sql_iai_type
      FROM    IAI_INFO_ACCOUNT_INFO
      WHERE   IAI_MATCH_ACCOUNT_NO  = :ptr_st_ip_pstn->c_cln_mtch_accnt ;

    if ( SQLCODE != 0 )
    {
       fn_errlog( c_ServiceName, "S31215",SQLMSG,c_err_msg);
       EXEC SQL CLOSE :sys_cursor;
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       tpfree((char *)ptr_fml_Obuf);
       tpfree((char *)ptr_fml_Ibuf);
       return -1;
    }

    SETNULL(sql_iai_type);
    /***** Ver 2.0 Ends Here ********/
    if(strcmp(sql_iai_type.arr,"NRO_NON_PINS") != 0)  /** Ver 2.0 ***/
    {
     i_returncode = fn_upd_spnlimits ( c_ServiceName,
                                      ptr_st_ip_pstn,
                                      &st_error_mg,
                                      c_narration_id,
                                      DEBIT_WITHOUT_LIMIT,
                                      d_loss,
                                      &d_balance_amt);
     if ( i_returncode != 0 )
     {
     fn_errlog( c_ServiceName, "S31220",LIBMSG , c_err_msg );
     EXEC SQL CLOSE :sys_cursor;
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     tpfree((char *)ptr_fml_Obuf);
     tpfree((char *)ptr_fml_Ibuf);
     return -1;
     }
    }  /** Ver 2.0 if ends ***/  

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog ( c_ServiceName, "------------ Calling fn_tds for NRI Customers --------------------------");
		}
		
		/**** if ( strncmp( ptr_st_ip_pstn->c_cln_mtch_accnt, "751", 3) == 0 ) Commented in Ver 1.6 ****/
		
		/****** Added in Ver 1.6 *******/
    /*********** Commented in ver 2.0 ******************
  		MEMSET (sql_iai_type);
      EXEC SQL
      SELECT  IAI_TYPE
      INTO    :sql_iai_type
      FROM    IAI_INFO_ACCOUNT_INFO
      WHERE   IAI_MATCH_ACCOUNT_NO  = :ptr_st_ip_pstn->c_cln_mtch_accnt ;

		if ( SQLCODE != 0 )
   	{
   	 	 fn_errlog( c_ServiceName, "S31225",SQLMSG,c_err_msg);
			 EXEC SQL CLOSE :sys_cursor;
   		 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   	 	 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	 tpfree((char *)ptr_fml_Obuf);
   	   tpfree((char *)ptr_fml_Ibuf);
   		 return -1;
   	}

		SETNULL(sql_iai_type);
    *************** Commented in Ver 2.0 **************/

		/****** Added Ver 1.6 Ends *******/

    if(strcmp(sql_iai_type.arr,"NRO_NON_PINS") == 0)   /****** check Added in Ver 1.6 *******/
    {
     strcpy( c_reason_cd, "Loss on Assignment" );
		 if(DEBUG_MSG_LVL_3)
		 {
     		fn_userlog( c_ServiceName, "Calling fn_tds for :%s:",c_reason_cd );
		 }
     /**** Following Needs to be Coneverted Into Structure call ****/
     i_returncode = fn_spntds(  c_ServiceName,
                                ptr_st_ip_pstn,
                                &st_error_mg,
                                TDS_NRI,
                                c_reason_cd,
                                DEBIT_WITHOUT_LIMIT,
                                d_loss,
                                &d_balance_amt );

     if ( i_returncode != 0 )
     {
      fn_errlog( c_ServiceName, "S31230",LIBMSG , c_err_msg );
      EXEC SQL CLOSE :sys_cursor;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
     }

     /*** Ver 2.0 Starts Here ****/
     i_returncode = fn_upd_spnlimits ( c_ServiceName,
                                      ptr_st_ip_pstn,
                                      &st_error_mg,
                                      c_narration_id,
                                      DEBIT_WITHOUT_LIMIT,
                                      d_loss,
                                      &d_balance_amt);
     if ( i_returncode != 0 )
     {
     fn_errlog( c_ServiceName, "S31235",LIBMSG , c_err_msg );
     EXEC SQL CLOSE :sys_cursor;
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     tpfree((char *)ptr_fml_Obuf);
     tpfree((char *)ptr_fml_Ibuf);
     return -1;
     } 
     /**** Ver 2.0 Ends Here ****/
    }

   }

	 	if(DEBUG_MSG_LVL_3)
		{
   		fn_userlog ( c_ServiceName, "------------- Blocking New  Margin ------------------------------");
		}
	  sprintf ( ptr_st_ip_pstn->c_ref_rmrks,"SPAN-SPAN-%s", ptr_st_undfus_pos_to_be->c_undrlyng);
    d_upd_amount = (-1) * ptr_st_undfus_pos_to_be->d_span_wemult_mrgn;

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName," NEW SPAN MARGIN WITH MULTIPLIER Is :%lf:",
      	                         ptr_st_undfus_pos_to_be->d_span_wemult_mrgn);
    	fn_userlog(c_ServiceName," d_upd_amount In SPAN MARGIN WITH MULTIPLIER Is :%lf:",d_upd_amount);
		}

     strcpy( c_narration_id,BLK_SPAN_MRGN_ON_ASSIGNMENT );
    if ( d_upd_amount != 0 )
    {
			d_balance_amt  = 0.0;   /*** Ver 1.1 ***/

      i_returncode = fn_upd_spnlimits( c_ServiceName,
                                    ptr_st_ip_pstn,
                                    &st_error_mg,
                                    c_narration_id,
                                    DEBIT_TILL_LIMIT,
                                    d_upd_amount,
                                    &d_balance_amt);
      if ( i_returncode != 0 )
      {
				fn_errlog( c_ServiceName, "S31240",LIBMSG , c_err_msg );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    		tpfree((char *)ptr_fml_Obuf);
    		tpfree((char *)ptr_fml_Ibuf);
   		  return -1;
      }
			ptr_st_undfus_pos_to_be->d_span_wemult_mrgn = ptr_st_undfus_pos_to_be->d_span_wemult_mrgn + d_balance_amt ;		/*** Ver 1.4 ***/
    }

		/*** ptr_st_undfus_pos_to_be->d_span_wemult_mrgn = ptr_st_undfus_pos_to_be->d_span_wemult_mrgn + d_balance_amt ;		Commented in ver 1.4 ***/
		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"d_balance_amt in d_span_wemult_mrgn:%lf:",d_balance_amt);
    	fn_userlog(c_ServiceName,"Here ptr_st_undfus_pos_to_be->d_span_wemult_mrgn:%lf:",
                              ptr_st_undfus_pos_to_be->d_span_wemult_mrgn);
		}


		d_upd_amount = (-1) * ptr_st_undfus_pos_to_be->d_eba_expr_mrgn ; 

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName," d_upd_amount In EXPOSURE Is :%lf:",d_upd_amount);
		}
    sprintf ( ptr_st_ip_pstn->c_ref_rmrks,"SPAN-EXPOSURE-%s", ptr_st_undfus_pos_to_be->c_undrlyng );

    strcpy( c_narration_id,BLK_EXPR_MRGN_ON_ASSIGNMENT);

    if ( d_upd_amount != 0 )
    {
			d_balance_amt  = 0.0;   /*** Ver 1.1 ***/

      i_returncode = fn_upd_spnlimits( c_ServiceName,
                                       ptr_st_ip_pstn,
                                       &st_error_mg,
                                       c_narration_id,
                                       DEBIT_TILL_LIMIT,
                                       d_upd_amount,
                                       &d_balance_amt);
      if ( i_returncode != 0 )
      {
				fn_errlog( c_ServiceName, "S31245",LIBMSG , c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpfree((char *)ptr_fml_Obuf);
        tpfree((char *)ptr_fml_Ibuf);
        return -1;
      }
			ptr_st_undfus_pos_to_be->d_eba_expr_mrgn = ptr_st_undfus_pos_to_be->d_eba_expr_mrgn + d_balance_amt;		/*** Ver 1.4 ***/
    }

		if(DEBUG_MSG_LVL_3)
		{
    		fn_userlog(c_ServiceName,"d_balance_amt in d_expsr :%lf:",d_balance_amt);
		}

    /*** ptr_st_undfus_pos_to_be->d_eba_expr_mrgn = ptr_st_undfus_pos_to_be->d_eba_expr_mrgn + d_balance_amt;		Commented in Ver 1.4 ***/

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName," Calculating Final INITIAL MARGIN ")  ;

    	fn_userlog(c_ServiceName,"Here ptr_st_undfus_pos_to_be->d_span_wemult_mrgn Is :%lf:",
      	                        ptr_st_undfus_pos_to_be->d_span_wemult_mrgn);
    	fn_userlog(c_ServiceName,"Here ptr_st_undfus_pos_to_be->d_eba_expr_mrgn  Is  :%lf:",
      	                        ptr_st_undfus_pos_to_be->d_eba_expr_mrgn);
		}

    ptr_st_undfus_pos_to_be->d_initial_mrgn = ptr_st_undfus_pos_to_be->d_span_wemult_mrgn +
                                         ptr_st_undfus_pos_to_be->d_eba_expr_mrgn ;
		if(DEBUG_MSG_LVL_0)
		{
    	fn_userlog(c_ServiceName,"Here FINAL INTIAL MARGIN TO BE BLOCKED Is :%lf:",
      	                        ptr_st_undfus_pos_to_be->d_initial_mrgn);
    	fn_userlog ( c_ServiceName, "------------- Blocking Notional Loss------------------------------");
    	fn_userlog ( c_ServiceName, "d_undrlyng_pl Is :%lf:",d_undrlyng_pl);
		}
	
    strcpy( c_narration_id,BLK_NOTIONAL_LOSS_ON_ASSIGNMENT);

	  if ( d_undrlyng_pl < 0 )
    {
				d_balance_amt  = 0.0;   /*** Ver 1.1 ***/

				i_returncode = fn_upd_spnlimits(  c_ServiceName,
                                    ptr_st_ip_pstn,
                                    ptr_st_err_msg,
                                    c_narration_id,
                                    DEBIT_TILL_LIMIT,
                                    d_undrlyng_pl,
                                    &d_balance_amt);
        if ( i_returncode != 0 )
        {
					fn_errlog( c_ServiceName, "S31250",LIBMSG , c_err_msg );
          EXEC SQL CLOSE :sys_cursor;
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpfree((char *)ptr_fml_Obuf);
          tpfree((char *)ptr_fml_Ibuf);
          return -1;
        }

       ptr_st_undfus_pos_to_be->d_blckd_pl = ( d_undrlyng_pl * (-1)) + d_balance_amt  ;
			 if(DEBUG_MSG_LVL_3)
			 {
       		fn_userlog(c_ServiceName,"SPAN  - d_balance_amt Is :%lf:",d_balance_amt);
       		fn_userlog(c_ServiceName,"SPAN  - ptr_st_undfus_pos_to_be->d_blckd_pl Is :%lf:",
          		                               ptr_st_undfus_pos_to_be->d_blckd_pl );
			 }
    }
    else
    {
			 if(DEBUG_MSG_LVL_3)
			 {
       	 fn_userlog(c_ServiceName,"SPAN - In PROFIT COndition" );
			 }
       ptr_st_undfus_pos_to_be->d_blckd_pl = 0 ;

			 if(DEBUG_MSG_LVL_3)
			 {
       		fn_userlog(c_ServiceName,"SPAN  - ptr_st_undfus_pos_to_be->d_blckd_pl Is :%lf:",
                                         ptr_st_undfus_pos_to_be->d_blckd_pl );
			 }
		}
	 /*** Added On 08-Dec-2011 Ends ***/


	
	 /**** Following Commented On 08-Dec-2011
	
	 d_intl_mrgn = d_intl_mrgn * -1;	
   fn_userlog ( c_ServiceName, "------------- Blocking New  Margin ------------------------------");
	 fn_userlog( c_ServiceName, "New Margin To be Blocked  Is :%lf: ",d_intl_mrgn);

	 if ( d_intl_mrgn != 0 )
	 {
   i_returncode = fn_upd_spnlimits( c_ServiceName,
                                    ptr_st_ip_pstn,
                                    &st_error_mg,
                                    MARGIN_ADJ_ON_ASGMNT,
                                    DEBIT_TILL_LIMIT,
                                    d_intl_mrgn,
                                    &d_balance_amt);
   if ( i_returncode != 0 )
   {
    fn_errlog( c_ServiceName, "S31255",LIBMSG , c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
    return -1;
   }

	 fn_userlog(c_ServiceName,"SPAN	-	d_balance_amt Is :%lf:",d_balance_amt);

   *** Added to take care of balance amount in case of ***
   *** DEBIT_TILL_LIMIT. d_balance_amt is added        ***
   *** since it is always negative or Zero             ***

   ptr_st_undfus_pos_to_be->d_initial_mrgn = ptr_st_undfus_pos_to_be->d_reqd_initial_mrgn  + d_balance_amt ;

	 if( (-1)* d_balance_amt >= ptr_st_undfus_pos_crrnt->d_eba_expr_mrgn )
   {
    ptr_st_undfus_pos_to_be->d_uspan_wenov_mrgn	= ptr_st_undfus_pos_crrnt->d_uspan_wenov_mrgn	- ((-1)*d_balance_amt - ptr_st_undfus_pos_crrnt->d_eba_expr_mrgn );
    ptr_st_undfus_pos_crrnt->d_eba_expr_mrgn = 0;
   }
   else
   {
    ptr_st_undfus_pos_to_be->d_eba_expr_mrgn = ptr_st_undfus_pos_crrnt->d_eba_expr_mrgn + d_balance_amt;
   }

   }	

	 Commented On 08-Dec-2011 Ends  ***/	
	
	 /*** Following COmmented and Taken Above 
	
   fn_userlog ( c_ServiceName, "------------- Blocking Loss On Assignment -------------------------");
   fn_userlog ( c_ServiceName, " Calculated Loss On Assignment Is :%lf: ",d_loss); 

	 strcpy ( c_tmp_rmrks, ptr_st_ip_pstn->c_ref_rmrks );

   sprintf ( ptr_st_ip_pstn->c_ref_rmrks,"OPT-%s-%s-%ld-%c%c",
             ptr_st_ip_pstn->c_undrlyng,
             ptr_st_ip_pstn->c_expry_dt,
             ptr_st_ip_pstn->l_strike_prc/100,
             ptr_st_ip_pstn->c_opt_typ,
             ptr_st_ip_pstn->c_exrc_typ );

 
	 if ( d_loss != 0 )
   {
    if ( ptr_st_ip_pstn->c_ctgry_indstk == 'S' )
    {
     strcpy( c_narration_id, MATCH_STOCK_OPTION_ASSIGNMENT );
    }
    else if (  ptr_st_ip_pstn->c_ctgry_indstk == 'I' )
    {
     strcpy( c_narration_id, MATCH_INDEX_OPTION_ASSIGNMENT );
    }
    else
    {
     strcpy( c_err_msg, "Invalid Category" );
     fn_errlog ( c_ServiceName, "S31260", DEFMSG, c_err_msg );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     tpfree((char *)ptr_fml_Obuf);
     tpfree((char *)ptr_fml_Ibuf);
     return -1;
    }



    i_returncode = fn_upd_spnlimits ( c_ServiceName,
                                      ptr_st_ip_pstn,
                                      &st_error_mg,
                                      c_narration_id,
                                      DEBIT_WITHOUT_LIMIT,
                                      d_loss,
                                      &d_balance_amt);
    if ( i_returncode != 0 )
    {
    fn_errlog( c_ServiceName, "S31265",LIBMSG , c_err_msg );
    EXEC SQL CLOSE :sys_cursor;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
    return -1;
    }

		
    fn_userlog ( c_ServiceName, "------------ Calling fn_tds for NRI Customers --------------------------");

    if ( strncmp( ptr_st_ip_pstn->c_cln_mtch_accnt, "751", 3) == 0 )
    {
     strcpy( c_reason_cd, "Loss on Assignment" );
     fn_userlog( c_ServiceName, "Calling fn_tds for :%s:",c_reason_cd );

     **** Following Needs to be Coneverted Into Structure call ****
     i_returncode = fn_spntds(  c_ServiceName,
                                ptr_st_ip_pstn,
                                &st_error_mg,
                                TDS_NRI,
                                c_reason_cd,
                                DEBIT_WITHOUT_LIMIT,
                                d_loss,
                                &d_balance_amt );

     if ( i_returncode != 0 )
     {
      fn_errlog( c_ServiceName, "S31270",LIBMSG , c_err_msg );
      EXEC SQL CLOSE :sys_cursor;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
     }
    }

   } 

   fn_userlog ( c_ServiceName, "------------- Blocking Notional Loss------------------------------");
		
		
	 if ( d_undrlyng_pl >= 0 )
   {
    d_diff_pl = d_oblckd_amnt ;
   }
   else
   {
    d_diff_pl = d_oblckd_amnt + d_undrlyng_pl ;
   }
	 
	 
   if(DEBUG_MSG_LVL_3)
   {
    fn_userlog ( c_ServiceName, "Difference in P&L :%lf:", d_diff_pl );
   }
	
   if ( d_diff_pl != 0 )	
	 {

	

   i_returncode = fn_upd_spnlimits(  c_ServiceName,
                                    ptr_st_ip_pstn,
                                    ptr_st_err_msg,
                                    c_narration_id,
                                    DEBIT_TILL_LIMIT,
                                    d_diff_pl,
                                    &d_balance_amt);
   if ( i_returncode != 0 )
   {
    switch ( i_returncode )
    {
            case  INSUFFICIENT_LIMITS :

              fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg );
              EXEC SQL CLOSE :sys_cursor;
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    					tpfree((char *)ptr_fml_Obuf);
    					tpfree((char *)ptr_fml_Ibuf);
              return -1;

          default:

              fn_errlog( c_ServiceName, "S31275",LIBMSG , c_err_msg );
              EXEC SQL CLOSE :sys_cursor;
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
 						  tpfree((char *)ptr_fml_Obuf);
    					tpfree((char *)ptr_fml_Ibuf);
              return -1;
     }
   }
	 fn_userlog(c_ServiceName,"SPAN  - d_diff_pl :%lf:",d_diff_pl);
   fn_userlog(c_ServiceName,"SPAN  - d_balance_amt Is :%lf:",d_balance_amt);
		
   if ( d_diff_pl > 0 )
   {
     ptr_st_undfus_pos_to_be->d_blckd_pl  = d_oblckd_amnt - d_diff_pl ;
   }
   else
   {
     ptr_st_undfus_pos_to_be->d_blckd_pl = d_undrlyng_pl - d_balance_amt ; 
	  ***  New blocked loss is added into Old blocked loss at undrlying level ***
   }


   }  
	 *** Taken Above On 08-Dec-2011 Ends ***/
  /********* Ver 1.7 starts ***********/
   EXEC SQL
        SELECT NVL(FTQ_SETLMNT_FLG,'C')
         INTO :c_settlement_flag
         FROM  FTQ_FO_TRD_QT
         WHERE FTQ_XCHNG_CD       = :ptr_st_ip_pstn->c_xchng_cd
          AND FTQ_PRDCT_TYP       = :ptr_st_ip_pstn->c_prd_typ
          AND FTQ_UNDRLYNG        = :ptr_st_ip_pstn->c_undrlyng
          AND FTQ_EXPRY_DT        = to_date( :ptr_st_ip_pstn->c_expry_dt,'dd-mon-yyyy' )
          AND FTQ_EXER_TYP        = :ptr_st_ip_pstn->c_exrc_typ
          AND FTQ_STRK_PRC        = :ptr_st_ip_pstn->l_strike_prc
          AND FTQ_OPT_TYP         = :ptr_st_ip_pstn->c_opt_typ
          AND FTQ_INDSTK          = :ptr_st_ip_pstn->c_ctgry_indstk;
   if ( SQLCODE != 0 )
   {
    fn_errlog(c_ServiceName, "S31280", SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
    return -1;
   }

   fn_userlog(c_ServiceName,"span:assgn c_settlement_flag is :%c:",c_settlement_flag);
   if( c_settlement_flag == 'P' )
   {

      fn_userlog(c_ServiceName,"span:assgn d_existing_delvry_mrgn :%lf:",d_existing_delvry_mrgn);
      if( d_existing_delvry_mrgn > 0 )
      {
       i_returncode = fn_upd_spnlimits ( c_ServiceName,
                                      ptr_st_ip_pstn,
                                      &st_error_mg,
                                      RELEASE_ON_PHYDLVRY_OPT_EOS,
                                      DEBIT_WITHOUT_LIMIT,
                                      d_existing_delvry_mrgn,
                                      &d_balance_amt);
         if ( i_returncode != 0 )
         {
            fn_errlog( c_ServiceName, "S31285",LIBMSG , c_err_msg );
            EXEC SQL CLOSE :sys_cursor;
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpfree((char *)ptr_fml_Obuf);
            tpfree((char *)ptr_fml_Ibuf);
            return -1;
         }

         i_returncode = fn_upd_spnlimits(  c_ServiceName,
                                    ptr_st_ip_pstn,
                                    ptr_st_err_msg,
                                    BLK_DLVRY_OBLIGATION,
                                    DEBIT_TILL_LIMIT,
                                    (-1)*d_existing_delvry_mrgn,
                                    &d_balance_amt);
         if ( i_returncode != 0 )
          {
            fn_errlog( c_ServiceName, "S31290",LIBMSG , c_err_msg );
            EXEC SQL CLOSE :sys_cursor;
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpfree((char *)ptr_fml_Obuf);
            tpfree((char *)ptr_fml_Ibuf);
            return -1;
         }

         EXEC SQL
         UPDATE  FCP_FO_SPN_CNTRCT_PSTN
         SET     FCP_UDLVRY_MRGN = 0
         WHERE   FCP_CLM_MTCH_ACCNT = :ptr_st_ip_pstn->c_cln_mtch_accnt
         AND     FCP_XCHNG_CD       = :ptr_st_ip_pstn->c_xchng_cd
         AND     FCP_PRDCT_TYP      = :ptr_st_ip_pstn->c_prd_typ
         AND     FCP_UNDRLYNG       = :ptr_st_ip_pstn->c_undrlyng
         AND     FCP_OPT_TYP        = :ptr_st_ip_pstn->c_opt_typ
         AND     FCP_STRK_PRC       = :ptr_st_ip_pstn->l_strike_prc
         AND     FCP_EXPRY_DT       = to_date(:ptr_st_ip_pstn->c_expry_dt, 'DD-Mon-YYYY')
         AND     FCP_EXER_TYP       = :ptr_st_ip_pstn->c_exrc_typ;

         if ( SQLCODE != 0 )
         {
           fn_errlog(c_ServiceName, "S31295", SQLMSG, c_err_msg );
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
           tpfree((char *)ptr_fml_Obuf);
           tpfree((char *)ptr_fml_Ibuf);
           return -1;
         }

       }
    }
  /******** ver 1.7 ends *******/ 
	 if(DEBUG_MSG_LVL_3)
	 {	
  	 fn_userlog ( c_ServiceName, "------------ Function FN_APPLY_ACTN_SPN Ended -------------------");
	 }
	 return 0;
		
} /*** End of Function ***/



int fn_apply_assgnmt(   char *c_ServiceName,
                         struct st_pstn_actn       *ptr_st_pstn_actn,
                         struct st_fcp_cntrct_pstn *ptr_st_cntopt_pos,
                         struct st_err_msg         *ptr_st_err_msg
                     )
{
	if(DEBUG_MSG_LVL_3)
	{
 		fn_userlog ( c_ServiceName, "------------ Inside FN_APPLY_ASSGNMT -------------------");
	}
 fn_del_pos_in_val ( ptr_st_pstn_actn->l_exec_qty * -1,
                     ptr_st_cntopt_pos->d_opnpstn_val,
                     ptr_st_cntopt_pos->l_opnpstn_qty,
                     &(ptr_st_cntopt_pos->l_opnpstn_qty),
                     &(ptr_st_cntopt_pos->d_opnpstn_val) );

 /*** ptr_st_cntopt_pos->l_sell_asgn_qty += ptr_st_pstn_actn->l_exec_qty;  ***/
 ptr_st_cntopt_pos->l_sell_exctd_qty -= (ptr_st_pstn_actn->l_exec_qty * (-1));
 ptr_st_cntopt_pos->l_asgnd_qty += ptr_st_pstn_actn->l_exec_qty;
 return 0;

}





