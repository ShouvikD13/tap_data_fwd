/******************************************************************************/
/*	Program	    			:	SFO_WTCH_LST                                          */
/*                                                                            */
/*  Input             : FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_XCHNG_CD                                          */
/*                                                                            */
/*  Output            : FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_OPT_TYP                                           */
/*                      FFO_STRK_PRC                                          */
/*                      FFO_LST_TRD_PRC                                       */
/*                      FFO_CHNG_PRVS_CLS                                     */
/*                      FFO_PRC_INDCTR                                        */
/*                      FFO_BST_BID_PRC                                       */
/*                      FFO_BST_OFFR_PRC                                      */
/*                      FFO_TOT_QTY_TRDD                                      */
/*                                                                            */
/*  Description       : Each user has a list of favourite contracts for which */
/*											he/she may want to view certain details in the form of*/
/*										  a watch list.  The watch list is to display for each  */
/*										  contract the values like  Last traded price, % change */
/*										  over previous day, best bid price, best offer price,  */
/*										  volume.  The watch list would be exchange specific    */
/*                                                                            */
/*  Log               : 1.0   28-Sep-2001   Vinod Banjan                      */
/*										:	1.1		03-Mar-2008		Sandeep Patil											*/
/******************************************************************************/
/*  1.0   - New release                                                       */
/*  1.1   - IBM MIGRATION CHANGES																							*/
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fo.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>			/*** Ver 1.1 ***/
#include <fn_read_debug_lvl.h>			/*** Ver 1.1 ***/

void SFO_WTCH_LST( TPSVCINFO *rqst )
{
  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;
  FBFR32 *ptr_fml_Rbuf;

  int i_err[10];
  int i_ferr[10];
	long int		li_recvbuf = 0;
	int 	i_tot_recs ;
	int 	i_ip_len ;
	int 	i_op_len ;
	int		i ;
	int		i_cnt ;
	int		i_returncode ;
  int   i_counter = 1;

  char c_ServiceName[33];
  char *c_tmp_ptr;
	char	c_err_msg[256] ;
	char	c_rqst_type ;
	varchar c_expiry_date[23] ;

  struct vw_usr_prfl st_usr_prfl;
  struct vw_err_msg st_err_msg;
  struct vw_cntrct_qt st_cntrct_qt;
  struct vw_contract st_cntrct;

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );

	INITDBGLVL(c_ServiceName);			/*** Ver 1.1 ***/

  i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_usr_prfl,
                           "vw_usr_prfl" );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Added for Order Routing ***/
  fn_init_ddr_val (st_usr_prfl.c_rout_crt );

  if (DEBUG_MSG_LVL_3)			/*** Ver 1.1 ***/ 
	{
    fn_userlog( c_ServiceName,"User id :%s:",
                                    st_usr_prfl.c_user_id );
    fn_userlog( c_ServiceName, "Session id :%ld:",
                                    st_usr_prfl.l_session_id );  
  }

  i_returncode = fn_chk_sssn( c_ServiceName, &st_usr_prfl,
                                             &st_err_msg ) ;

  if ( i_returncode == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	c_rqst_type = FAVOURITE_CONTRACTS ;

  if (DEBUG_MSG_LVL_3)			/*** Ver 1.1 ***/ 
	{
    fn_userlog( c_ServiceName,"c_rqst_type :%c:", c_rqst_type );
  }

  if ( Fadd32 ( ptr_fml_Ibuf, FFO_RQST_TYP, (char *)&c_rqst_type, 0 ) == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

 	ptr_fml_Rbuf = ( FBFR32 * ) tpalloc ( "FML32",
                                       	0,
                                       	MIN_FML_BUF_LEN  );
 	if ( ptr_fml_Rbuf == NULL )
 	{
   	fn_errlog( c_ServiceName, "S31015", TPMSG, c_err_msg  );
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	}

  i_returncode = tpcall ( "SFO_GET_CNTRCT",
                          ( char * ) ptr_fml_Ibuf,
                          0,
                          ( char ** ) &ptr_fml_Rbuf,
                          &li_recvbuf,
                          0 );
  if ( i_returncode == -1 )
  {
    if ( TPCODE != TPESVCFAIL )
    {
      fn_errlog( c_ServiceName, "S31020", TPMSG,c_err_msg ) ;
    }
    else
    {
      Fget32(ptr_fml_Rbuf, FFO_ERR_MSG, 0, c_err_msg,0);
    }
    tpfree ( ( char * ) ptr_fml_Rbuf );
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  i_tot_recs = Foccur32( (FBFR32 *)ptr_fml_Rbuf, FFO_XCHNG_CD );

  	ptr_fml_Obuf = ( FBFR32 * ) tpalloc ( "FML32",
                                        	0,
                                        	MIN_FML_BUF_LEN  );
  	if ( ptr_fml_Obuf == NULL )
  	{
    	fn_errlog( c_ServiceName, "S31025", TPMSG, c_err_msg  );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpfree ( ( char * ) ptr_fml_Rbuf );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}


	for ( i_cnt = 0; i_cnt < i_tot_recs ; i_cnt++)
	{
  	memset ( &st_cntrct, 0, sizeof ( struct vw_contract ) );

    i_err[0] = Fget32( ptr_fml_Rbuf, FFO_XCHNG_CD, i_cnt,
                     (char *)st_cntrct.c_xchng_cd, 0 );
    i_ferr [0] = Ferror32;

    i_err[1] = Fget32( ptr_fml_Rbuf, FFO_PRDCT_TYP, i_cnt,
                       (char *)&st_cntrct.c_prd_typ, 0 );
    i_ferr [1] = Ferror32;

    i_err[2] = Fget32( ptr_fml_Rbuf, FFO_UNDRLYNG, i_cnt,
                       (char *)st_cntrct.c_undrlyng, 0 );
    i_ferr [2] = Ferror32;

    i_err[3] = Fget32( ptr_fml_Rbuf, FFO_EXPRY_DT, i_cnt,
                       (char *)c_expiry_date.arr, 0 );
    i_ferr [3] = Ferror32;

    i_err[4] = Fget32( ptr_fml_Rbuf, FFO_EXER_TYP, i_cnt,
                       (char *)&st_cntrct.c_exrc_typ, 0 );
    i_ferr [4] = Ferror32;

    i_err[5] = Fget32( ptr_fml_Rbuf, FFO_OPT_TYP, i_cnt,
                       (char *)&st_cntrct.c_opt_typ, 0 );
    i_ferr [5] = Ferror32;

    i_err[6] = Fget32( ptr_fml_Rbuf, FFO_STRK_PRC, i_cnt,
                       (char *)&st_cntrct.l_strike_prc, 0 );
    i_ferr [6] = Ferror32;

    for ( i=0; i < 7; i++ )
    {
      if ( i_err[ i ] == -1 )
      {
    		fn_userlog( c_ServiceName, "Error in :%d:",i );
    		fn_errlog( c_ServiceName, "S31030", Fstrerror32( i_ferr [i] ), 
																												c_err_msg  );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		tpfree ( ( char * ) ptr_fml_Rbuf );
    		tpfree ( ( char * ) ptr_fml_Obuf );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

		SETLEN(c_expiry_date) ;
		strcpy(st_cntrct.c_expry_dt, (char *)c_expiry_date.arr) ;
		fn_cpy_ddr(st_cntrct.c_rout_crt);

    i_ip_len = sizeof ( struct vw_contract );
    i_op_len = sizeof ( struct vw_cntrct_qt );

  	i_returncode = fn_call_svc( c_ServiceName,
                              	c_err_msg,
                              	&st_cntrct,
                              	&st_cntrct_qt,
                              	"vw_contract",
                              	"vw_cntrct_qt",
                              	i_ip_len,
                              	i_op_len,
                              	0,
                              	"SFO_GET_QT" );

		if ( i_returncode == -1 )
		{
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpfree ( ( char * ) ptr_fml_Rbuf );
    	tpfree ( ( char * ) ptr_fml_Obuf );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

  	i_returncode = Fvstof32( ptr_fml_Obuf, (char *)&st_cntrct_qt, 
																						FCONCAT, "vw_cntrct_qt" );
  	if ( i_returncode == -1 )
  	{

			if( Ferror32 == FNOSPACE )
      {
        i_counter++;
        ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
                            i_counter * MIN_FML_BUF_LEN );
        if ( ptr_fml_Obuf == NULL )
        {
    			fn_errlog( c_ServiceName, "S31035", FMLMSG, c_err_msg  );
    			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			tpfree ( ( char * ) ptr_fml_Rbuf );
    			tpfree ( ( char * ) ptr_fml_Obuf );
    			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

    		i_returncode = Fvstof32( ptr_fml_Obuf, (char *)&st_cntrct_qt,
                                            FCONCAT, "vw_cntrct_qt" );
    		if ( i_returncode == -1 )
    		{
    			fn_errlog( c_ServiceName, "S31040", FMLMSG, c_err_msg  );
    			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			tpfree ( ( char * ) ptr_fml_Rbuf );
    			tpfree ( ( char * ) ptr_fml_Obuf );
    			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			}
			else
			{
    		fn_errlog( c_ServiceName, "S31045", FMLMSG, c_err_msg  );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		tpfree ( ( char * ) ptr_fml_Rbuf );
    		tpfree ( ( char * ) ptr_fml_Obuf );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
  	}

	}
  tpfree ( ( char * ) ptr_fml_Rbuf );
  tpreturn(TPSUCCESS, SUCC_BFR, (char *)ptr_fml_Obuf, 0, 0 );
}
