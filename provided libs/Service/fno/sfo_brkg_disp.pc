/************************************************************************************************************/
/*  Program           : SFO_BRKG_DISP                                                                       */
/*                                                                                                          */
/*  Input             : FFO_USR_ID																																					*/
/*                      FFO_SSSN_ID																																					*/
/*                      FFO_EBA_MTCH_ACT_NO																																	*/
/*                      FFO_ROUT_CRT																																			  */
/*                      FFO_XCHNG_CD																																				*/
/*                      FFO_UNDRLYNG																																				*/
/*                      FFO_PRDCT_TYP																																				*/
/*                      FFO_EXPRY_DT																																				*/
/*                      FFO_CTGRY_INDSTK																																		*/
/*                      FFO_EXER_TYP																																				*/
/*                      FFO_OPT_TYP																																					*/
/*                      FFO_STRK_PRC																																				*/
/*                      FFO_MKT_TYP																																					*/
/*                      FFO_CURR_RT																																					*/
/*                      FFO_ORDR_FLW																																				*/
/*                      FFO_ORD_TOT_QTY																																			*/
/*                      FFO_LMT_RT																																					*/
/*                      FFO_STP_LSS_TGR																																			*/
/*                      FFO_SPL_FLG																																					*/
/*																																																					*/
/*                                                                                                          */
/*  Output            :                                                                                     */
/*						FFO_FRS_BRKG																																									*/
/*						FFO_OTH_CHRG																																									*/
/*						FFO_STAMP_DUTY																																								*/
/*						FFO_STT																																												*/
/*						FFO_SEBI_TT																																										*/
/*						FFO_SRC_TX																																										*/
/*						FFO_TRAN_CHRG																																									*/
/*						FFO_CVR_BRKG																																									*/
/*						FFO_BRKRG_VL																																									*/
/*						FFO_ERR_MSG																																										*/
/*																																																					*/
/*  Description       : Service calculate brokerage as per scheme assign to customer for display purpose    */
/************************************************************************************************************/
/*  1.0   - New release			06-Dec-2022																																			*/	
/*  1.1   : 18-May-2023     CR-ISEC14-178632 - GTT in F&O  | Prajakta Sutar                                 */
/************************************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <fml_rout.h>
#include <sqlca.h>
#include <fo_fml_def.h>
#include <fo.h>
#include <fo_view_def.h>
#include <fn_ddr.h>
#include <fn_tuxlib.h>
#include <fn_log.h>          
#include <fn_session.h>        
#include <fn_read_debug_lvl.h> 

void SFO_BRKG_DISP( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;
	FBFR32 *ptr_fml_Obuf;

	struct vw_contract st_cntrct;
  struct vw_usr_prfl st_usrprfl;
	struct vw_err_msg  st_err_msg;
    
	char c_ServiceName[33];
	char c_SchemeCode[33];
	varchar c_err_msg[256];
	
	char c_frsh_typ;
	char c_spl_flg;
	char c_ordr_flow;
	char c_neo_flag;
	char c_option20_flag;

	long l_tot_qty = 0;
	long l_cvr_rate = 0; 
	long l_sltp_trg = 0; 
	long l_frsh_rate = 0;
	long l_lst_trdd_prc = 0;
	long l_lot_sz = 0;
	long l_turnovr_chrg	=0;
	long l_stamp_duty =0;
	double d_stamp_duty =0;
	long l_stt		=0;
	double d_stt		=0;
	long l_sebi_tx	=0;
	long l_gst_tx		=0;
	long l_tran_chrg	=0;
	long l_othr_chrg	=0;
	long l_brkrg_vl	=0;
	long l_opt_pos_brk	=0;
	long l_total_brkg	=0;
	long l_fut_total_brk	=0;
	double d_fut_total_brk	=0;
	long l_opt_total_brk	=0;
	double d_fut_brk	=0;
	long l_trd_val_F	=0;
	long l_trd_val_O	=0;
	double d_stamp_duty_F	=0;
	double d_stt_F	=0;
	long l_opt_brk	=0;
	double d_stamp_duty_O	=0;
	double d_stt_O =0;
	long l_total_trd_val_O =0;
	long l_total_trd_val_F =0;
	long l_total_trd_val =0;
	
	double d_fut_pos_brk  =0;
	double d_xchng_trnov_chrg_F =0;
  double d_xchng_trnov_chrg_O =0;
  double d_sebi_chrg  =0;
  double d_gst_chrg =0;
  double d_stamp_dty_chrg_F =0;
  double d_stt_chrg_F =0;
  double d_stamp_dty_chrg_O =0;
  double d_stt_chrg_O =0;
	double d_frs_brkg =0;
	
	int i = 0 ;
	int i_reccount	= 0 ;
	int i_tot_recs	= 0 ;
	int i_returncode	= 0 ;
	int i_num_lot	= 0 ;
	int	i_cntrct[15];
	int	i_cntrcterr[15];
	int	i_usrprfl[4];
	int	i_usrprflerr[4];
	
	ptr_fml_Ibuf = (FBFR32 *)rqst->data;

	strcpy( c_ServiceName, rqst->name );

	INITDBGLVL(c_ServiceName);
	
	i_usrprfl[0]	=	Fget32( ptr_fml_Ibuf ,FFO_USR_ID,0,(char *) st_usrprfl.c_user_id,0);
	i_usrprflerr[0]	=	Ferror32;
	i_usrprfl[1]	=	Fget32( ptr_fml_Ibuf ,FFO_SSSN_ID,0,(char *) &st_usrprfl.l_session_id,0);
	i_usrprflerr[1] = 	Ferror32;
	i_usrprfl[2]	=	Fget32( ptr_fml_Ibuf ,FFO_EBA_MTCH_ACT_NO,0,(char *) st_usrprfl.c_cln_mtch_accnt,0);
	i_usrprflerr[2] = 	Ferror32;
	i_usrprfl[3]	=	Fget32( ptr_fml_Ibuf ,FFO_ROUT_CRT,0,(char *) st_usrprfl.c_rout_crt,0);
	i_usrprflerr[3] = 	Ferror32;

	for ( i=0 ; i < 4  ; i++ )
	{
		if ( i_usrprfl[i] == -1 && i_usrprflerr[i] !=  FNOTPRES )
		{
		  fn_userlog( c_ServiceName, "Error in :%d:",i );
		  fn_errlog( c_ServiceName, "S31005", Fstrerror32( i_usrprflerr [i]),c_err_msg.arr );
		  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
		  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}

	if( DEBUG_MSG_LVL_3 ) 
	{        
		fn_userlog( c_ServiceName, "st_usrprfl.c_user_id		:%s:", st_usrprfl.c_user_id );
		fn_userlog( c_ServiceName, "st_usrprfl.l_session_id 	:%ld:", st_usrprfl.l_session_id );  
		fn_userlog( c_ServiceName, "st_usrprfl.c_cln_mtch_accnt	:%s:", st_usrprfl.c_cln_mtch_accnt );
		fn_userlog( c_ServiceName, "st_usrprfl.c_rout_crt		:%s:", st_usrprfl.c_rout_crt );
	}

	fn_init_ddr_val ( st_usrprfl.c_rout_crt );

	i_returncode = fn_chk_sssn( c_ServiceName,
							&st_usrprfl,
							&st_err_msg ) ;

	if ( i_returncode == -1 )
	{
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	EXEC SQL
        SELECT  'Y'
        INTO    :c_neo_flag
        FROM    USR_USER_MASTER,
                UAC_USR_ACCNTS
        WHERE   USR_USR_ID = UAC_USR_ID
        AND     UAC_CLM_MTCH_ACCNT = :st_usrprfl.c_cln_mtch_accnt
        AND     USR_BRKG_MDL_FLG = 'L';                  /* 'L' = "Neo Pricing Plan" */

	if(SQLCODE != 0)
  {
    if(SQLCODE == NO_DATA_FOUND)
    {
      fn_userlog(c_ServiceName," not mapped to NEO  match id :%s:", st_usrprfl.c_cln_mtch_accnt);
			c_neo_flag='N';
    }
    else
    {
      fn_userlog(c_ServiceName," Issue selecting NEO for match id :%s:", st_usrprfl.c_cln_mtch_accnt);
      fn_errlog( c_ServiceName, "S31010", SQLMSG, c_err_msg.arr);
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
      tpreturn(TPFAIL, 0, (char *)ptr_fml_Ibuf, 0, 0);
    }
  }

	if (c_neo_flag == 'N')
	{
		/* Checking for Option20 mapped **/
		/* 'Y' = "Option20 Plan" */

		EXEC SQL
        SELECT  NVL(CLM_OP20_FLG,'N')		
        INTO    :c_option20_flag
        FROM    CLM_CLNT_MSTR
        WHERE   clm_mtch_accnt = :st_usrprfl.c_cln_mtch_accnt;

  	if(SQLCODE != 0)
  	{
      fn_userlog(c_ServiceName," Issue selecting CLM_OP20_FLG for match id :%s:", st_usrprfl.c_cln_mtch_accnt);
      fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg.arr);
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg.arr , 0);
      tpreturn(TPFAIL, 0, (char *)ptr_fml_Ibuf, 0, 0);
  	}

		/* checking for scheme mapped to match account */
  	/* default schemes: AE-INVEST */

  	EXEC SQL
    	SELECT  RTRIM(NVL(BSM_SCHM_CD, '501'))
    	INTO    :c_SchemeCode
    	FROM    BSM_BRKG_SCHM_MSTR, INSD_INFO_NTST_SCHEME_DTLS
    	WHERE   BSM_SCHM_CD = INSD_FNO_SCHEMECODE
    	AND   INSD_MATCH_ACCOUNT_NO = :st_usrprfl.c_cln_mtch_accnt;

  	if(SQLCODE != 0)
  	{
    	if(SQLCODE == NO_DATA_FOUND)
    	{
      	fn_userlog(c_ServiceName," no scheme found for match id, Adding default scheme :%s:", st_usrprfl.c_cln_mtch_accnt);
      	strcpy(c_SchemeCode, "501");
    	}
			else
    	{
				fn_userlog(c_ServiceName," Issue selecting scheme for match id :%s:", st_usrprfl.c_cln_mtch_accnt);
      	fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg.arr);
      	Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
      	tpreturn(TPFAIL, 0, (char *)ptr_fml_Ibuf, 0, 0);
    	}
  	}

  	rtrim(c_SchemeCode);

  	if(DEBUG_MSG_LVL_3)
  	{
   	 	fn_userlog(c_ServiceName,"c_SchemeCode :%s: for match account  :%s:",c_SchemeCode,st_usrprfl.c_cln_mtch_accnt);
  	}

		EXEC SQL
			SELECT BSM_FUT_POS_BRK,
						 BSM_OPT_POS_BRK
				INTO :d_fut_pos_brk,
						 :l_opt_pos_brk
				FROM BSM_BRKG_SCHM_MSTR
			WHERE  BSM_SCHM_CD=:c_SchemeCode
				AND  BSM_ISDELETED = 'N';

		if(SQLCODE != 0)
  	{
			fn_userlog(c_ServiceName," Issue selecting brokerage for match id :%s:", st_usrprfl.c_cln_mtch_accnt);
    	fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg.arr);
    	Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
    	tpreturn(TPFAIL, 0, (char *)ptr_fml_Ibuf, 0, 0);
		}
	}

	EXEC SQL
      SELECT NVL(BOC_XCHNG_TRNOV_CHRG,0),
             NVL(BOC_STMP_DUTY_NDLVRY_CHRG,0),
             NVL(BOC_STT_NDLVRY_CHRG,0),
             NVL(BOC_SEBI_TRNOV_CHRG,0),
             NVL(BOC_GST_CHRG, 0)
        INTO :d_xchng_trnov_chrg_F,
             :d_stamp_dty_chrg_F,
             :d_stt_chrg_F,
             :d_sebi_chrg,
             :d_gst_chrg
        FROM BOC_BRKG_OTHR_CHRGS
        WHERE BOC_XCHNG_CD='NFO'
        AND  BOC_PRDCT_TYPE='F';

    if(SQLCODE != 0)
    {
      fn_userlog(c_ServiceName," Issue selecting other charges for Exchange :%s:", st_cntrct.c_xchng_cd);
      fn_errlog( c_ServiceName, "S31030", SQLMSG, c_err_msg.arr);
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
      tpreturn(TPFAIL, 0, (char *)ptr_fml_Ibuf, 0, 0);
    }

	EXEC SQL
      SELECT NVL(BOC_XCHNG_TRNOV_CHRG,0),
             NVL(BOC_STMP_DUTY_NDLVRY_CHRG,0),
             NVL(BOC_STT_NDLVRY_CHRG,0)
        INTO :d_xchng_trnov_chrg_O,
             :d_stamp_dty_chrg_O,
             :d_stt_chrg_O
        FROM BOC_BRKG_OTHR_CHRGS
        WHERE BOC_XCHNG_CD='NFO'
        AND  BOC_PRDCT_TYPE='O';

    if(SQLCODE != 0)
    {
      fn_userlog(c_ServiceName," Issue selecting other charges for Exchange :%s:", st_cntrct.c_xchng_cd);
      fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg.arr);
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
      tpreturn(TPFAIL, 0, (char *)ptr_fml_Ibuf, 0, 0);
    }

	i_tot_recs = Foccur32( (FBFR32 *)ptr_fml_Ibuf, FFO_XCHNG_CD );

	if(i_tot_recs == 0)	
	{
    fn_errlog( c_ServiceName, "S31040", "Record count is zero", c_err_msg.arr);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
		tpreturn(TPFAIL, 0, (char *)ptr_fml_Ibuf, 0, 0);
	}

	if( DEBUG_MSG_LVL_3 ) 
	{        
		fn_userlog( c_ServiceName, "Total Records :%d:", i_tot_recs );
	}

	for ( i_reccount = 0; i_reccount < i_tot_recs; i_reccount++ )
	{

		l_cvr_rate = 0;
		l_sltp_trg = 0;
		d_fut_brk  = 0;
		l_opt_brk  = 0;
		d_stt_O    = 0;
		d_stt_F    = 0;
		d_stamp_duty_F = 0;
		d_stamp_duty_O = 0;
		l_trd_val_F   = 0;
		l_trd_val_O   = 0;

		i_cntrct[0]		=	Fget32( ptr_fml_Ibuf ,FFO_XCHNG_CD,i_reccount,(char *) st_cntrct.c_xchng_cd,0);
		i_cntrcterr[0] 	= 	Ferror32;
		i_cntrct[1]		=	Fget32( ptr_fml_Ibuf ,FFO_PRDCT_TYP,i_reccount,(char *) &st_cntrct.c_prd_typ,0);
		i_cntrcterr[1] 	= 	Ferror32;
		i_cntrct[2]		=	Fget32( ptr_fml_Ibuf ,FFO_UNDRLYNG,i_reccount,(char *) st_cntrct.c_undrlyng,0);
		i_cntrcterr[2] 	= 	Ferror32;
		i_cntrct[3]		=	Fget32( ptr_fml_Ibuf ,FFO_EXPRY_DT,i_reccount,(char *) st_cntrct.c_expry_dt,0);
		i_cntrcterr[3] 	= 	Ferror32;
		i_cntrct[4]		=	Fget32( ptr_fml_Ibuf ,FFO_EXER_TYP,i_reccount,(char *) &st_cntrct.c_exrc_typ,0);
		i_cntrcterr[4] 	= 	Ferror32;
		i_cntrct[5]		=	Fget32( ptr_fml_Ibuf ,FFO_OPT_TYP,i_reccount,(char *) &st_cntrct.c_opt_typ,0);
		i_cntrcterr[5] 	= 	Ferror32;
		i_cntrct[6]		=	Fget32( ptr_fml_Ibuf ,FFO_STRK_PRC,i_reccount,(char *) &st_cntrct.l_strike_prc,0);
		i_cntrcterr[6] 	= 	Ferror32;
		i_cntrct[7]		=	Fget32( ptr_fml_Ibuf ,FFO_CTGRY_INDSTK,i_reccount,(char *) &st_cntrct.c_ctgry_indstk,0);
		i_cntrcterr[7] 	= 	Ferror32;
		i_cntrct[8]		=	Fget32( ptr_fml_Ibuf ,FFO_MKT_TYP,i_reccount,(char *) &c_frsh_typ,0);
		i_cntrcterr[8] 	= 	Ferror32;
		i_cntrct[9]		=	Fget32( ptr_fml_Ibuf ,FFO_CURR_RT,i_reccount,(char *) &l_frsh_rate,0);
		i_cntrcterr[9] 	= 	Ferror32;
		i_cntrct[10]	=	Fget32( ptr_fml_Ibuf ,FFO_ORDR_FLW,i_reccount,(char *)&c_ordr_flow,0);
		i_cntrcterr[10] = 	Ferror32;
		i_cntrct[11]	=	Fget32( ptr_fml_Ibuf ,FFO_ORD_TOT_QTY,i_reccount,(char *) &l_tot_qty,0);
		i_cntrcterr[11] = 	Ferror32;
		i_cntrct[12]	=	Fget32( ptr_fml_Ibuf ,FFO_SPL_FLG,i_reccount,(char *) &c_spl_flg,0);
		i_cntrcterr[12] = 	Ferror32;
		
		for( i=0;	i < 13 ;	i++ )
		{
			if ( i_cntrct[ i ] == -1 )
			{
				fn_userlog( c_ServiceName, "Error in :%d:",i );
				fn_errlog( c_ServiceName, "S31045", Fstrerror32( i_cntrcterr[i]),c_err_msg.arr );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}
		
		if ( c_spl_flg == 'S' || c_spl_flg == 'G')  /** Special flag 'G' for GTT Order added in Ver 1.1 **/
		{	
			i_cntrct[13]	=	Fget32( ptr_fml_Ibuf ,FFO_LMT_RT,i_reccount,(char *) &l_cvr_rate,0);
			i_cntrcterr[13] = 	Ferror32;
			i_cntrct[14]	=	Fget32( ptr_fml_Ibuf ,FFO_STP_LSS_TGR,i_reccount,(char *) &l_sltp_trg,0);
			i_cntrcterr[14] = 	Ferror32;
			
			for( i = 13;	i < 15 ;	i++ )
			{	
				if ( i_cntrct[ i ] == -1 )
				{
					fn_userlog( c_ServiceName, "Error in :%d:",i );
					fn_errlog( c_ServiceName, "S31050", Fstrerror32( i_cntrcterr[i]),c_err_msg.arr );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			}	
		}
	
		if( DEBUG_MSG_LVL_3 ) 
		{        
			fn_userlog( c_ServiceName, "st_cntrct.c_xchng_cd		:%s:", st_cntrct.c_xchng_cd );
			fn_userlog( c_ServiceName, "st_cntrct.c_prd_typ 		:%c:", st_cntrct.c_prd_typ ); 
			fn_userlog( c_ServiceName, "st_cntrct.c_undrlyng		:%s:", st_cntrct.c_undrlyng);
			fn_userlog( c_ServiceName, "st_cntrct.c_expry_dt		:%s:", st_cntrct.c_expry_dt );
			fn_userlog( c_ServiceName, "st_cntrct.c_exrc_typ		:%c:", st_cntrct.c_exrc_typ );
			fn_userlog( c_ServiceName, "st_cntrct.c_opt_typ		  :%c:", st_cntrct.c_opt_typ );
			fn_userlog( c_ServiceName, "st_cntrct.l_strike_prc	:%ld:", st_cntrct.l_strike_prc );
			fn_userlog( c_ServiceName, "st_cntrct.c_ctgry_indstk:%c:", st_cntrct.c_ctgry_indstk );
			fn_userlog( c_ServiceName, "c_frsh_typ							:%c:", c_frsh_typ );
			fn_userlog( c_ServiceName, "c_ordr_flow							:%c:", c_ordr_flow );
			fn_userlog( c_ServiceName, "c_spl_flg								:%c:", c_spl_flg );
			fn_userlog( c_ServiceName, "l_frsh_rate							:%ld:", l_frsh_rate );
			fn_userlog( c_ServiceName, "l_tot_qty								:%ld:", l_tot_qty );
			fn_userlog( c_ServiceName, "l_cvr_rate							:%ld:", l_cvr_rate );
			fn_userlog( c_ServiceName, "l_sltp_trg							:%ld:", l_sltp_trg );
		}

		EXEC SQL
        SELECT NVL(FTQ_MIN_LOT_QTY,0),
               FTQ_LST_TRD_PRC
        INTO :l_lot_sz,
             :l_lst_trdd_prc
        FROM FTQ_FO_TRD_QT
        WHERE  FTQ_XCHNG_CD = :st_cntrct.c_xchng_cd
        AND FTQ_UNDRLYNG = :st_cntrct.c_undrlyng
        AND FTQ_PRDCT_TYP = DECODE(:st_cntrct.c_prd_typ,'P','F','U','F','I','O',:st_cntrct.c_prd_typ)
        AND FTQ_OPT_TYP = :st_cntrct.c_opt_typ
        AND FTQ_STRK_PRC = :st_cntrct.l_strike_prc
        AND FTQ_EXPRY_DT = :st_cntrct.c_expry_dt;

    if(SQLCODE != 0)
    {
       fn_errlog( c_ServiceName, "S31055", SQLMSG, c_err_msg.arr);
       Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg.arr,0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog( c_ServiceName, "l_lot_sz    :%ld:", l_lot_sz );
      fn_userlog( c_ServiceName, "l_lst_trdd_prc    :%ld:", l_lst_trdd_prc );
		}

    if (( c_frsh_typ == 'L') && ( l_frsh_rate <= 0))	
    {
      fn_errlog( c_ServiceName, "B28519",DEFMSG,c_err_msg.arr);
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if((c_spl_flg == 'S' || c_spl_flg == 'G') && (l_sltp_trg <= 0)) /** Special flag 'G' added in Ver 1.1 **/
    {
      fn_errlog( c_ServiceName,"S31060" ,"Stop Loss trigger price cannot be Zero for Stop Loss Order.",c_err_msg.arr  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if (( c_frsh_typ == 'M') && ( l_frsh_rate != 0))
    {
      fn_errlog( c_ServiceName, "B28521",DEFMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	
	  if (c_spl_flg == 'S' && l_sltp_trg != 0 ) /** Special flag condition added in ver 1.1 **/
    {
    	if ( c_ordr_flow == BUY )
    	{
      	/** Stop loss trigger price cannot be less than limit rate **/
      	/** for cover sell order                                   **/

      	if ( l_sltp_trg <  l_cvr_rate )
      	{
        	fn_errlog( c_ServiceName, "B28525",DEFMSG,c_err_msg.arr);
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}

      	/** Stop loss trigger price cannot be grater than last traded   **/
      	/** price for cover sell order                                  **/

      	if ( l_sltp_trg >  l_lst_trdd_prc )
      	{
        	fn_errlog( c_ServiceName, "B22010",DEFMSG,c_err_msg.arr);
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
    	}

    	if ( c_ordr_flow == SELL )
    	{
      	/** Stop loss trigger price cannot be greater  than limit rate   **/
      	/** for cover buy order                                          **/

      	if ( l_sltp_trg >  l_cvr_rate )
      	{
        	fn_errlog( c_ServiceName, "B28524",DEFMSG,c_err_msg.arr);
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}

      	/** Stop loss trigger price cannot be less than last traded **/
      	/** price for cover buy order                               **/

      	if ( l_sltp_trg <  l_lst_trdd_prc )
      	{
        	fn_errlog( c_ServiceName, "B22009",DEFMSG,c_err_msg.arr);
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
    	}
  	}

		if (st_cntrct.c_prd_typ == 'F' || st_cntrct.c_prd_typ == 'P' || st_cntrct.c_prd_typ == 'U')
		{
			if (c_neo_flag == 'Y')
			{
				d_fut_brk = 0;

				if (c_spl_flg == 'S' || c_spl_flg == 'G') /** Special flag 'G' added in Ver 1.1 **/
        {
           if(c_frsh_typ == 'L')
           {
              l_trd_val_F = (l_tot_qty * l_frsh_rate) + (l_tot_qty * l_cvr_rate);

              if (c_ordr_flow == BUY)
              {
                d_stamp_duty_F = (l_tot_qty * l_frsh_rate) * d_stamp_dty_chrg_F /100;
                d_stt_F = (l_tot_qty * l_cvr_rate) * d_stt_chrg_F /100;
              }
              else if (c_ordr_flow == SELL)
              {
                d_stt_F = (l_tot_qty * l_frsh_rate) * d_stt_chrg_F /100;
                d_stamp_duty_F = (l_tot_qty * l_cvr_rate) * d_stamp_dty_chrg_F /100;
              }
           }
					 else if(c_frsh_typ == 'M')
           {
              l_trd_val_F = (l_tot_qty * l_lst_trdd_prc) + (l_tot_qty * l_cvr_rate);

              if (c_ordr_flow == BUY)
              {
                d_stamp_duty_F = (l_tot_qty * l_lst_trdd_prc) * d_stamp_dty_chrg_F /100;
                d_stt_F = (l_tot_qty * l_cvr_rate) * d_stt_chrg_F /100;
              }
              else if (c_ordr_flow == SELL)
              {
                d_stt_F = (l_tot_qty * l_lst_trdd_prc) * d_stt_chrg_F /100;
                d_stamp_duty_F = (l_tot_qty * l_cvr_rate) * d_stamp_dty_chrg_F /100;
              }
           }
           else
           {
              fn_errlog( c_ServiceName, "Invalid order Type",DEFMSG,c_err_msg.arr);
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
           }
        }
				else
				{
					if(c_frsh_typ == 'L')
        	{
          	l_trd_val_F = l_tot_qty * l_frsh_rate;
        	}
        	else if(c_frsh_typ == 'M')
        	{
          	l_trd_val_F = l_tot_qty * l_lst_trdd_prc;
        	}
        	else
        	{
          	fn_errlog( c_ServiceName, "Invalid order Type",DEFMSG,c_err_msg.arr);
          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}

        	if (c_ordr_flow == BUY)
        	{
          	d_stamp_duty_F = l_trd_val_F * d_stamp_dty_chrg_F /100;
        	}
        	else if (c_ordr_flow == SELL)
        	{
         	 	d_stt_F = l_trd_val_F * d_stt_chrg_F /100;
        	}
				}
			}
			else
			{
				if (c_spl_flg == 'S' || c_spl_flg == 'G') /** Special flag 'G' added in Ver 1.1 **/
        {
					 if(c_frsh_typ == 'L')
           {
           		l_trd_val_F = (l_tot_qty * l_frsh_rate) + (l_tot_qty * l_cvr_rate);
	
						  if (c_ordr_flow == BUY)
           		{
              	d_stamp_duty_F = (l_tot_qty * l_frsh_rate) * d_stamp_dty_chrg_F /100;
              	d_stt_F = (l_tot_qty * l_cvr_rate) * d_stt_chrg_F /100;
            	}
            	else if (c_ordr_flow == SELL)
            	{
              	d_stt_F = (l_tot_qty * l_frsh_rate) * d_stt_chrg_F /100;
              	d_stamp_duty_F = (l_tot_qty * l_cvr_rate) * d_stamp_dty_chrg_F /100;
            	}
					 }	
					 else if(c_frsh_typ == 'M')
           {
					 		l_trd_val_F = (l_tot_qty * l_lst_trdd_prc) + (l_tot_qty * l_cvr_rate);

							if (c_ordr_flow == BUY)
           		{
              	d_stamp_duty_F = (l_tot_qty * l_lst_trdd_prc) * d_stamp_dty_chrg_F /100;
								d_stt_F = (l_tot_qty * l_cvr_rate) * d_stt_chrg_F /100;
            	}
            	else if (c_ordr_flow == SELL)
           	 	{
              	d_stt_F = (l_tot_qty * l_lst_trdd_prc) * d_stt_chrg_F /100;
              	d_stamp_duty_F = (l_tot_qty * l_cvr_rate) * d_stamp_dty_chrg_F /100;
            	}
					 }
					 else
           {
            	fn_errlog( c_ServiceName, "Invalid order Type",DEFMSG,c_err_msg.arr);
            	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
            	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
           }

					 d_fut_brk = (l_trd_val_F ) * (d_fut_pos_brk / 100);
        }
        else
        {
					if(c_frsh_typ == 'L')
					{
						l_trd_val_F = l_tot_qty * l_frsh_rate;
					}
					else if(c_frsh_typ == 'M')
					{
						l_trd_val_F = l_tot_qty * l_lst_trdd_prc;
					}
					else
    			{
      			fn_errlog( c_ServiceName, "Invalid order Type",DEFMSG,c_err_msg.arr);
      			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    			}

					d_fut_brk = (l_trd_val_F ) * (d_fut_pos_brk / 100);

					if (c_ordr_flow == BUY)
					{
						d_stamp_duty_F = l_trd_val_F * d_stamp_dty_chrg_F /100;
					}
					else if (c_ordr_flow == SELL)
					{
						d_stt_F = l_trd_val_F * d_stt_chrg_F /100;
					}
				}
			}

			if( DEBUG_MSG_LVL_3 )
   		{
     		fn_userlog( c_ServiceName, "d_fut_brk    					:%lf:", d_fut_brk );
     		fn_userlog( c_ServiceName, "l_trd_val_F    					:%ld:", l_trd_val_F );
     		fn_userlog( c_ServiceName, "d_fut_pos_brk					:%lf:", d_fut_pos_brk );
     		fn_userlog( c_ServiceName, "d_stamp_dty_chrg_F		:%lf:", d_stamp_dty_chrg_F );
     		fn_userlog( c_ServiceName, "d_stamp_duty_F				:%lf:", d_stamp_duty_F );
     		fn_userlog( c_ServiceName, "d_stt_F								:%lf:", d_stt_F );
     		fn_userlog( c_ServiceName, "d_stt_chrg_F					:%lf:", d_stt_chrg_F );
   		}
		}
		else if (st_cntrct.c_prd_typ == 'O' || st_cntrct.c_prd_typ == 'I')
		{
			if (c_neo_flag == 'Y')
    	{
				if (c_spl_flg == 'S' || c_spl_flg == 'G') /** Special flag 'G' added in ver 1.1 **/
        {
      		l_opt_brk = 2000 * 2;
				}
				else
				{
      		l_opt_brk = 2000;
				}
    	}
    	else if (c_option20_flag == 'Y')
    	{
				i_num_lot = l_tot_qty / l_lot_sz;

				if (c_spl_flg == 'S' || c_spl_flg == 'G') /** Special flag 'G' added in Ver 1.1 **/
        {
      		l_opt_brk = (2000 + (500 * i_num_lot)) * 2;
				}
				else
				{
      		l_opt_brk = 2000 + (500 * i_num_lot);
				}
			}
			else
			{
				i_num_lot = l_tot_qty / l_lot_sz;

				if (c_spl_flg == 'S' || c_spl_flg == 'G')  /** Special flag 'G' added in Ver 1.1 **/
        {
					l_opt_brk = ((l_opt_pos_brk * 100) * i_num_lot) * 2;
				}
				else
				{
					l_opt_brk = (l_opt_pos_brk * 100) * i_num_lot;
				}	
			}
	
			if (c_spl_flg == 'S' || c_spl_flg == 'G') /** Special flag 'G' added in ver 1.1 **/
      {
				if(c_frsh_typ == 'L')
        {
					l_trd_val_O = (l_tot_qty * l_frsh_rate) + ( l_tot_qty * l_cvr_rate );

					if (c_ordr_flow == BUY)
        	{
          	d_stamp_duty_O = (l_tot_qty * l_frsh_rate) * d_stamp_dty_chrg_O /100;
						d_stt_O = (l_tot_qty * l_cvr_rate) * d_stt_chrg_O /100;
        	}
        	else if (c_ordr_flow == SELL)
        	{
          	d_stt_O = (l_tot_qty * l_frsh_rate) * d_stt_chrg_O /100;
          	d_stamp_duty_O = (l_tot_qty * l_cvr_rate) * d_stamp_dty_chrg_O /100;
        	}
        }
        else if(c_frsh_typ == 'M')
        {
          l_trd_val_O = (l_tot_qty * l_lst_trdd_prc) + ( l_tot_qty * l_cvr_rate );

					if (c_ordr_flow == BUY)
          {
            d_stamp_duty_O = (l_tot_qty * l_lst_trdd_prc) * d_stamp_dty_chrg_O /100;
            d_stt_O = (l_tot_qty * l_cvr_rate) * d_stt_chrg_O /100;
          }
          else if (c_ordr_flow == SELL)
          {
            d_stt_O = (l_tot_qty * l_lst_trdd_prc) * d_stt_chrg_O /100;
            d_stamp_duty_O = (l_tot_qty * l_cvr_rate) * d_stamp_dty_chrg_O /100;
          }
        }
        else
        {
          fn_errlog( c_ServiceName, "Invalid order Type",DEFMSG,c_err_msg.arr);
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
			}
			else
			{
				if(c_frsh_typ == 'L')
      	{
         	l_trd_val_O = l_tot_qty * l_frsh_rate;
      	}
      	else if(c_frsh_typ == 'M')
      	{
        	l_trd_val_O = l_tot_qty * l_lst_trdd_prc;
      	}
      	else
      	{
        	fn_errlog( c_ServiceName, "Invalid order Type",DEFMSG,c_err_msg.arr);
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}

				if (c_ordr_flow == BUY)
    		{
      		d_stamp_duty_O = l_trd_val_O * d_stamp_dty_chrg_O /100;
    		}
    		else if (c_ordr_flow == SELL)
    		{
      		d_stt_O = l_trd_val_O * d_stt_chrg_O /100;
    		}
			}

			if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog( c_ServiceName, "l_opt_brk             :%ld:", l_opt_brk );
        fn_userlog( c_ServiceName, "i_num_lot             :%d:", i_num_lot );
        fn_userlog( c_ServiceName, "l_opt_pos_brk         :%ld:", l_opt_pos_brk );
        fn_userlog( c_ServiceName, "d_stamp_dty_chrg_O    :%lf:", d_stamp_dty_chrg_O );
        fn_userlog( c_ServiceName, "d_stamp_duty_O        :%lf:", d_stamp_duty_O );
        fn_userlog( c_ServiceName, "d_stt_O               :%lf:", d_stt_O );
        fn_userlog( c_ServiceName, "d_stt_chrg_O          :%lf:", d_stt_chrg_O );
      }
		}
		else
		{
			fn_errlog( c_ServiceName, "Invalid Product Type",DEFMSG,c_err_msg.arr);
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		d_fut_total_brk +=d_fut_brk;
		l_opt_total_brk +=l_opt_brk;
		d_stt += d_stt_O + d_stt_F;
		d_stamp_duty += d_stamp_duty_F + d_stamp_duty_O;
		l_total_trd_val_O+=l_trd_val_O;
		l_total_trd_val_F+=l_trd_val_F;
	} /*** For Loop End ***/

	if( DEBUG_MSG_LVL_3 )
  {
     fn_userlog( c_ServiceName, "d_fut_total_brk             	:%lf:", d_fut_total_brk );
     fn_userlog( c_ServiceName, "l_opt_total_brk             	:%ld:", l_opt_total_brk );
     fn_userlog( c_ServiceName, "l_total_trd_val_F             	:%ld:", l_total_trd_val_F );
     fn_userlog( c_ServiceName, "l_total_trd_val_O             	:%ld:", l_total_trd_val_O );
     fn_userlog( c_ServiceName, "d_xchng_trnov_chrg_F    			:%lf:",d_xchng_trnov_chrg_F  );
     fn_userlog( c_ServiceName, "d_xchng_trnov_chrg_O    			:%lf:",d_xchng_trnov_chrg_O  );
     fn_userlog( c_ServiceName, "d_sebi_chrg    							:%lf:",d_sebi_chrg  );
     fn_userlog( c_ServiceName, "d_stamp_duty    							:%lf:",d_stamp_duty  );
     fn_userlog( c_ServiceName, "d_stt    							:%lf:",d_stt  );
   }

	l_stamp_duty = round(d_stamp_duty);
	l_stt = round(d_stt);
	l_fut_total_brk = round(d_fut_total_brk);
	l_total_trd_val = l_total_trd_val_F + l_total_trd_val_O;
	l_total_brkg = l_fut_total_brk + l_opt_total_brk;
	l_turnovr_chrg = round((l_total_trd_val_F * d_xchng_trnov_chrg_F / 100) + (l_total_trd_val_O * d_xchng_trnov_chrg_O /100 ));
	l_sebi_tx  = round(l_total_trd_val * d_sebi_chrg /100);
	l_gst_tx   = round((l_total_brkg + l_turnovr_chrg + l_sebi_tx ) * d_gst_chrg /100); 
	l_tran_chrg = l_turnovr_chrg + l_sebi_tx;
	l_othr_chrg = l_stt + l_turnovr_chrg + l_sebi_tx + l_stamp_duty + l_gst_tx; 
  l_brkrg_vl = l_turnovr_chrg + l_sebi_tx + l_stt + l_stamp_duty + l_gst_tx + l_total_brkg;

	if( DEBUG_MSG_LVL_3 )
  {
     fn_userlog( c_ServiceName, "l_total_brkg              :%ld:", l_total_brkg );
     fn_userlog( c_ServiceName, "l_turnovr_chrg            :%ld:", l_turnovr_chrg );
     fn_userlog( c_ServiceName, "l_sebi_tx                 :%ld:",l_sebi_tx  );
     fn_userlog( c_ServiceName, "l_gst_tx                  :%ld:",l_gst_tx  );
     fn_userlog( c_ServiceName, "l_tran_chrg               :%ld:",l_tran_chrg  );
     fn_userlog( c_ServiceName, "l_othr_chrg               :%ld:",l_othr_chrg  );
     fn_userlog( c_ServiceName, "l_brkrg_vl                :%ld:",l_brkrg_vl  );
     fn_userlog( c_ServiceName, "l_stt         						 :%ld:", l_stt );
     fn_userlog( c_ServiceName, "l_stamp_duty    					 :%ld:",l_stamp_duty  );
  }

	ptr_fml_Obuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
	
	i_returncode = fn_pack_vartofml ( c_ServiceName,
												c_err_msg.arr,
												&ptr_fml_Obuf,
												9,
												FFO_FRS_BRKG, 	(char *)&l_total_brkg,
												FFO_OTH_CHRG, 	(char *)&l_turnovr_chrg,
												FFO_STAMP_DUTY, (char *)&l_stamp_duty,
												FFO_STT, 		(char *)&l_stt,
												FFO_SEBI_TT, 	(char *)&l_sebi_tx,
												FFO_SRC_TX, 	(char *)&l_gst_tx,
												FFO_TRAN_CHRG, 	(char *)&l_tran_chrg,
												FFO_CVR_BRKG, 	(char *)&l_othr_chrg,
												FFO_BRKRG_VL, 	(char *)&l_brkrg_vl										
												);

	if ( i_returncode != 0 )
	{
		fn_errlog( c_ServiceName, "S31065", LIBMSG, c_err_msg.arr );
		tpfree ( ( char * ) ptr_fml_Obuf );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
		tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}

	if( DEBUG_MSG_LVL_3 )
  {
     fn_userlog( c_ServiceName, "Service completed successfully.");
	}

	tpreturn( TPSUCCESS, SUCC_BFR, (char *)ptr_fml_Obuf, 0L, 0 );
}
