/***********************************************************************************/
/*  Program       : SFO_DT_TRD_BK                                                 */
/*                                                                                */
/*  Description   : This service retrieves the values from the trade book.        */
/*                                                                                */
/*                                                                                */
/*  Input Buffer  : FFO_USR_ID            String  User Id                         */
/*                  FFO_SSSN_ID           Long    Session Id                      */
/*                  FFO_EBA_MTCH_ACT_NO   String  Match Account                   */
/*                  FFO_XCHNG_CD          String  Exchange Code                   */
/*                  FFO_FROM_DT           String  From Date                       */
/*                  FFO_TO_DT             String  To Date                         */
/*                                                                                */
/*  Output Buffer : FFO_EBA_MTCH_ACT_NO   String  Match Account                   */
/*                  FFO_PRDCT_TYP         Char    Product Type                    */
/*                  FFO_UNDRLYNG          String  Underlying                      */
/*                  FFO_EXPRY_DT          String  Expiry date                     */
/*                  FFO_EXER_TYP          Char    Exercise Type                   */
/*                  FFO_OPT_TYP           Char		Option Type                     */
/*                  FFO_STRK_PRC          Long    Strike Price                    */
/*                  FFO_EXEC_QTY          Long    Executed Quantity               */
/*                  FFO_EXCTD_RT          Long    Executed Rate                   */
/*                  FFO_AMOUNT            Double  Amount                          */
/*                  FFO_TRD_DT            String  Trade Date                      */
/*                  FFO_TRD_RFRNC         String  Trade Reference                 */
/*                  FFO_XCHNG_CD          String  Exchange Code                   */
/*                  FFO_XCHNG_TRD_NO      Long    Exchange Trade No               */
/*                  FFO_ORDR_RFRNC        String  EBA Order Reference             */
/*                  FFO_TRD_FLW           Char		Buy / Sell Flag                 */
/*                  FFO_CTGRY_INDSTK			Char		Category(Index/Stock)						*/
/*                  FFO_BRKRG_VL					Long		Brokerage Value									*/
/*                  FFO_ERR_MSG           String  Error Message in case of error  */
/*                                                                                */
/*                                                                                */
/*  Log           : Ver 1.0   02-Feb-2007   (Sushil Sharma)  New Release          */
/*								: Ver 1.1   17-Jan-2007		Ranjit		IBM Migration								*/
/*                : Ver 1.2   18-Jun-2012   FNO BSE Changes                       */
/*                : Ver 1.3   29-Jan-2013		SLTP F+ changes(Vishnu)	  						*/
/*                : Ver 1.4   01-Oct-2013		OptionPLUS changes(Navina)						*/
/*                : Ver 1.5   25-Oct-2013		SLTP FuturePLUS in DL .net changes    */
/* 																					(Swati A.B)	                					*/
/*								:	Ver 1.6		20-Feb-2014		OptionPlus in DL .net (Bhushan)				*/
/*								:	Ver 1.7		01-Sep-2014		View to FML Changes (Samip)						*/
/*								:	Ver VQC	  06-Apr-2016		VERSION QUALITY CONTROL (Ritesh D.)		*/
/*								: Ver 1.9   12-Dec-2017   DL.Net Order and Trade History        */
/*																			 	  changes (Afzal K.) 		  							*/
/*								: Ver 2.0		07-Dec-2021		CR-ISEC18-154676:Trade Racer 					*/
/*																					Enhancement (Susmita M)   						*/
/**********************************************************************************/

/**** C header ****/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* Include the SQL Communications Area */
#include <sqlca.h>

/**** Tuxedo header ****/
#include <atmi.h>
#include <fml32.h>

/**** Application header ****/
#include <fo.h>
#include <fn_log.h>			/* ver 1.1 */


/**** Process specific header ****/
#include <fo_fml_def.h>
/**	#include <fo_view_def.h> **/	/** Commented for Ver 1.7 **/
#include <fo_view_def.h>				/** Added for Ver 1.7 **/
#include <fn_session.h>
#include <fn_read_debug_lvl.h>	/* ver 1.1 */

int Z;
#define INIT(x,y)  for(Z=0; Z< y; Z++) x[Z] =0
#define TOTAL_FML   19
#define MEMSET(A)  memset(&A,'\0',sizeof(A))

void SFO_DT_TRD_BK( TPSVCINFO *rqst )
{
  FBFR32  *ptr_fml_Ibuf;
  FBFR32	*ptr_fml_Obuf;
  /***	FBFR32	*ptr_fml_Tempbuf;			*** Commented in VQC ***/
  char    c_servicename[33];
  varchar    c_errmsg[256];				/*** Data type changed from char to varchar in VQC ***/
  char    c_user_id[9];
	/***	char		c_rout_crt[4];	*** Commented in VQC ***/
  /***	long    l_sssn_id = 0;	*** Commented in VQC ***/
  long    l_buff_len = 0;				/*** Variable initialised in VQC ***/
  int     i_err[TOTAL_FML];
  int     i_ferr[TOTAL_FML];
  int     i_chk_val = 0;						/*** Variable initialised in VQC ***/
  int     i_loop = 0;								/*** Variable initialised in VQC ***/
  int     i_counter = 1;  /*  INITIALIZE THE COUNTER BY 1 */
  char    c_frm_dt[12];
  char    c_to_dt[12];
  double  d_exctd_amt = 0.0;					/*** Variable initialised in VQC ***/
  long		d_avg_exctd_rt=0.0;							/* Ver 2.0 */
  struct vw_usr_prfl st_usr_prfl;
  struct vw_err_msg st_err_msg;

	/* Ver 2.0 starts */
	long l_stt;  
  long l_srv_tax;
  long l_sebi_tt;
  long l_tran_chrg;
  long l_stmp_duty; 
  long l_incl_all =0;
	/* Ver 2.0 ends */

  EXEC SQL INCLUDE "table/exg_xchng_mstr.h";
  EXEC SQL INCLUDE "table/ftd_fo_trd_dtls.h";

	EXEC SQL BEGIN DECLARE SECTION;
  	sql_cursor sys_cursor;						/* a cursor variable 	*/
	EXEC SQL END DECLARE SECTION;

/***  sql_exg_dl_dwnld_allwd = 'N';   commented in ver 1.9***/

      sql_exg_dl_dwnld_allwd = 'Y';    /****Added in Ver 1.9 ***/

  ptr_fml_Ibuf    = (FBFR32 *)rqst->data;
  ptr_fml_Obuf    = (FBFR32 *)NULL;
  /***	ptr_fml_Tempbuf = (FBFR32 *)NULL;	*** Commented in VQC ***/


  strcpy( c_servicename, rqst->name );
	INITDBGLVL(c_servicename);		/* ver 1.1 */

  INIT( i_err, TOTAL_FML );
  INIT( i_ferr, TOTAL_FML );

  MEMSET(c_user_id);
	/***	MEMSET(c_rout_crt);		*** Commented in VQC ***/

	if(DEBUG_MSG_LVL_3)
	{
    fn_userlog(c_servicename,"Service %s STARTING",c_servicename);
  }

  /* GET USER ID, SESSION ID, MATCH ACCT FOR ACTIVE SESSION CHECK */
 	i_err[0]  = Fget32( ptr_fml_Ibuf, FFO_USR_ID, 0, (char *)c_user_id, 0 );
  i_ferr[0] = Ferror32;
  /*i_err[1]  = Fget32( ptr_fml_Ibuf, FFO_SSSN_ID, 0, (char *)&l_sssn_id, 0 );	*** Commented in VQC **/
  i_err[1]  = Fget32( ptr_fml_Ibuf, FFO_SSSN_ID, 0, (char *)&st_usr_prfl.l_session_id, 0 );	/* Added in VQC */
  i_ferr[1] = Ferror32;

  for( i_loop=0; i_loop<2; i_loop++ )
  {
    if( i_err[i_loop] == -1 )
    {
      fn_userlog( c_servicename, "i_loop :%ld:", i_loop );
      fn_errlog( c_servicename, "S31005", Fstrerror32( i_ferr[i_loop] ), c_errmsg.arr );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }

  if(Fget32( ptr_fml_Ibuf, FFO_EBA_MTCH_ACT_NO, 0, (char *)sql_exg_mtch_bnk_accnt.arr,0 ) == -1)
  {
    if(Ferror32 == FNOTPRES)
    {
      strcpy((char *) sql_exg_mtch_bnk_accnt.arr,"*");
    }
    else
    {
      fn_userlog( c_servicename, "Error while fetching match accnt");
      fn_errlog( c_servicename, "S31010", FMLMSG, c_errmsg.arr );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }

  SETLEN(sql_exg_mtch_bnk_accnt);

  if(DEBUG_MSG_LVL_3)
	{
   	fn_userlog( c_servicename, "User Id :%s:"         , c_user_id );
/** fn_userlog( c_servicename, "Session Id :%ld:"     , l_sssn_id );		** Commented in VQC ***/
    fn_userlog( c_servicename, "Match Account No :%s:", sql_exg_mtch_bnk_accnt.arr );
  }

  /* ACTIVE SESSION CHECK HANDLING START */
  strcpy( st_usr_prfl.c_user_id,c_user_id );
  /***	st_usr_prfl.l_session_id = l_sssn_id;						*** Commented in VQC ***/
  strcpy( st_usr_prfl.c_cln_mtch_accnt,(char *)sql_exg_mtch_bnk_accnt.arr);

  i_chk_val = fn_chk_sssn( c_servicename, &st_usr_prfl, &st_err_msg ) ;
  if( i_chk_val ==  -1 )
  {
    fn_errlog( c_servicename, "S31015", LIBMSG, st_err_msg.c_err_msg );
    Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    tpreturn(TPFAIL,ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }
  /* ACTIVE SESSION CHECK HANDLING OVER */

  /* GET THE REST OF REQUIRED INFORMATION  */
  i_err[0]  = Fget32( ptr_fml_Ibuf, FFO_XCHNG_CD, 0, (char *)sql_exg_xchng_cd, 0 );
  i_ferr[0] = Ferror32;
  i_err[1]  = Fget32( ptr_fml_Ibuf, FFO_FROM_DT, 0, (char *)c_frm_dt, 0 );
  i_ferr[1] = Ferror32;
  i_err[2]  = Fget32( ptr_fml_Ibuf, FFO_TO_DT, 0, (char *)c_to_dt, 0 );
  i_ferr[2] = Ferror32;

  for( i_loop=1; i_loop<3; i_loop++ )
  {
    if( i_err[i_loop] == -1 )
    {
      fn_userlog( c_servicename," i_loop :%ld:", i_loop );
      fn_errlog( c_servicename, "S31020", Fstrerror32(i_ferr[i_loop]), c_errmsg.arr );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }

	if(DEBUG_MSG_LVL_3)
	{
     fn_userlog( c_servicename, "Exchange Code  :%s:"   , sql_exg_xchng_cd  );
     fn_userlog( c_servicename, "From Date  :%s:"       , c_frm_dt    );
     fn_userlog( c_servicename, "To Date  :%s:"         , c_to_dt   );
	}

  if (strcmp(sql_exg_xchng_cd,"A") == 0)
  {
    strcpy(sql_exg_xchng_cd,"%");
  }

/*****Commented in Ver 1.9***
  EXEC SQL
  SELECT EXG_DL_DWNLD_ALLWD into :sql_exg_dl_dwnld_allwd
  FROM   EXG_XCHNG_MSTR
  WHERE  EXG_MKT_TYP = 'D'
  AND    EXG_XCHNG_CD LIKE :sql_exg_xchng_cd
  AND    EXG_XCHNG_CD !='BFO';  *** Ver 1.2 ***


	if(DEBUG_MSG_LVL_3)
  {
		fn_userlog( c_servicename, "Exchange Code  :%s:"   , sql_exg_xchng_cd  );
		fn_userlog( c_servicename, "Download allowed is :%c:", sql_exg_dl_dwnld_allwd );
	}

  if ( SQLCODE != 0 && SQLCODE != TOO_MANY_ROWS_FETCHED)
  {
    fn_errlog( c_servicename, "S31025", SQLMSG, c_errmsg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  else if (SQLCODE == TOO_MANY_ROWS_FETCHED || sql_exg_dl_dwnld_allwd == 'N')
  {
    fn_errlog( c_servicename, "B56037", DEFMSG, c_errmsg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


  if (strcmp((char*)sql_exg_mtch_bnk_accnt.arr,"*") != 0 || (strcmp((char*)sql_exg_mtch_bnk_accnt.arr,"*") == 0 && strcmp( c_frm_dt,c_to_dt) == 0))
  {

 ****Comment ends for Ver 1.9*******/ 

		if(DEBUG_MSG_LVL_3)
  	{
      fn_userlog(c_servicename,"sql_exg_dl_dwnld_allwd SET AS Y");
		}

    EXEC SQL ALLOCATE :sys_cursor;

    if( (c_user_id[0] == '#') && (sql_exg_mtch_bnk_accnt.arr[0] == '*')) /* If the User is a DBC */
    {
			if(DEBUG_MSG_LVL_3)
  		{
        fn_userlog(c_servicename, "DBC user");
			}

      EXEC SQL EXECUTE
      BEGIN
      OPEN  :sys_cursor FOR
      SELECT    ftd_clm_mtch_accnt,
                ftd_prdct_typ,
                ftd_undrlyng,
                ftd_expry_dt,
                ftd_exer_typ,
                ftd_opt_typ,
                ftd_strk_prc,
                sum(ftd_exctd_qty),  							/* sum added in Ver 2.0 */
								/* ftd_exctd_rt,		commented in Ver 2.0 */
                sum(ftd_exctd_qty*ftd_exctd_rt),	/* sum added in Ver 2.0 */
								trunc(ftd_trd_dt),								/* changed to_char to trunc in ver 2.0 */
           		 	/* ftd_eba_trd_ref,	commented in ver 2.0 */
                ftd_xchng_cd,
          			/* ftd_xchng_trd_no,commented in ver 2.0 */
              	ftd_ordr_rfrnc,	
								ftd_trd_flw,
								ftd_indstk,
								sum(nvl(ftd_brkg,0)),   /* sum added in Ver 2.0 */
								/* Ver 2.0 strarts */
								sum(nvl(ftd_stt,0)),        
                sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),
                sum(nvl(ftd_sebi_tt,0)),   
                sum(nvl(ftd_tran_chrg,0)),
                sum(nvl(ftd_stamp_duty,0))
								/* Ver 2.0 ends */
      FROM      ftd_fo_trd_dtls,
                clm_clnt_mstr
      WHERE     clm_bp_id            = :c_user_id 
      AND       ftd_clm_mtch_accnt   = clm_mtch_accnt
      AND       ftd_xchng_cd    LIKE   :sql_exg_xchng_cd
      AND       trunc(ftd_trd_dt)   >= :c_frm_dt
      AND       trunc(ftd_trd_dt)   <= :c_to_dt
			/*** AND				ftd_prdct_typ != 'U' 							** Ver 1.3 ** Commented in Ver 1.4 ***/
			/*** AND				ftd_prdct_typ not in ('U','I')		** Ver 1.4 ** Commented in Ver 1.5 ***/
			AND				ftd_prdct_typ in ('F','O','P','U','I')					/** Ver 1.5 **/  /*** Ver 1.6 ** 'I' Added ***/
			/* Ver 2.0 starts */
			GROUP BY 	ftd_clm_mtch_accnt,
                ftd_prdct_typ,
                ftd_undrlyng,
                ftd_expry_dt,
                ftd_exer_typ,
                ftd_opt_typ,
                ftd_strk_prc,
                trunc(ftd_trd_dt),
                ftd_xchng_cd,
                ftd_ordr_rfrnc,
                ftd_trd_flw,
                ftd_indstk
      /* Ver 2.0 ends */	

      UNION ALL             /* Changed UNION to UNION ALL in Ver 2.0 */

      SELECT    ftd_clm_mtch_accnt,
                ftd_prdct_typ,
                ftd_undrlyng,
                ftd_expry_dt,
                ftd_exer_typ,
                ftd_opt_typ,
                ftd_strk_prc,
                sum(ftd_exctd_qty),     				 /* sum added in Ver 2.0 */ 
								/* ftd_exctd_rt,    commented in Ver 2.0 */
                sum(ftd_exctd_qty*ftd_exctd_rt), /* sum added in Ver 2.0 */
								trunc(ftd_trd_dt),							 /* changed to_char to trunc in ver 2.0 */
                /* ftd_eba_trd_ref,	commented in ver 2.0 */
                ftd_xchng_cd,
         				/* ftd_xchng_trd_no,commented in ver 2.0 */
                ftd_ordr_rfrnc,
                ftd_trd_flw,
                ftd_indstk,
                sum(nvl(ftd_brkg,0)),				/* sum added in Ver 2.0 */
								/* Ver 2.0 starts */
								sum(nvl(ftd_stt,0)),      
                sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),
                sum(nvl(ftd_sebi_tt,0)), 
                sum(nvl(ftd_tran_chrg,0)),
                sum(nvl(ftd_stamp_duty,0))
                /* Ver 2.0 ends */
      FROM      ftd_fo_trd_dtls_hstry,
                clm_clnt_mstr
      WHERE     clm_bp_id            = :c_user_id
      AND       ftd_clm_mtch_accnt   = clm_mtch_accnt
      AND       ftd_xchng_cd    LIKE   :sql_exg_xchng_cd
			AND       trunc(ftd_trd_dt)   >= :c_frm_dt
      AND       trunc(ftd_trd_dt)   <= :c_to_dt
			/*** AND       ftd_prdct_typ != 'U'              ** Ver 1.3 **  Commented in ver 1.4 ***/
			/*** AND				ftd_prdct_typ not in ('U','I')	 ** Ver 1.4 **  Commented in Ver 1.5 ***/
			AND				ftd_prdct_typ in ('F','O','P','U','I')					/** Ver 1.5 **/   /*** Ver 1.6 ** 'I' Added ***/
			/* Ver 2.0 strarts */
			GROUP BY	ftd_clm_mtch_accnt,
                ftd_prdct_typ,
                ftd_undrlyng,
                ftd_expry_dt,
                ftd_exer_typ,
                ftd_opt_typ,
                ftd_strk_prc,
                trunc(ftd_trd_dt),
                ftd_xchng_cd,
                ftd_ordr_rfrnc,
                ftd_trd_flw,
                ftd_indstk
			ORDER BY ftd_ordr_rfrnc DESC;
                /* Ver 2.0 ends */
      /* ORDER BY  1,12;  commented in Ver 2.0 */
    END;
    END-EXEC;

    }
    else if (sql_exg_mtch_bnk_accnt.arr[0] == '*')          /* if the user is NRI */
    {
			if(DEBUG_MSG_LVL_3)
  		{
      /* ORDER BY  1,12;  commented */
        fn_userlog(c_servicename, "NRI user");
			}

      EXEC SQL EXECUTE
      BEGIN
      OPEN  :sys_cursor FOR
      SELECT    ftd_clm_mtch_accnt,
                ftd_prdct_typ,
                ftd_undrlyng,
                ftd_expry_dt,
                ftd_exer_typ,
                ftd_opt_typ,
                ftd_strk_prc,
                sum(ftd_exctd_qty),							 /* sum added in Ver 2.0 */
								/* ftd_exctd_rt,      commented in Ver 2.0 */
                sum(ftd_exctd_qty*ftd_exctd_rt), /* sum added in Ver 2.0 */
                trunc(ftd_trd_dt),		/* changed to_char to trunc in ver 2.0 */
                /* ftd_eba_trd_ref,		commented in ver 2.0 */	
                ftd_xchng_cd,
          			/* ftd_xchng_trd_no,  commented in ver 2.0 */
                ftd_ordr_rfrnc,
                ftd_trd_flw,
                ftd_indstk,
                sum(ftd_brkg),				/* sum added in Ver 2.0 */
								/* Ver 2.0 starts */
								sum(nvl(ftd_stt,0)),          
                sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),
                sum(nvl(ftd_sebi_tt,0)), 
                sum(nvl(ftd_tran_chrg,0)),
                sum(nvl(ftd_stamp_duty,0))
								/* Ver 2.0 ends */
      FROM      ftd_fo_trd_dtls,
                uac_usr_accnts
      WHERE     uac_usr_id          = :c_user_id
      AND       ftd_clm_mtch_accnt  = uac_clm_mtch_accnt
      AND       ftd_xchng_cd   LIKE   :sql_exg_xchng_cd
      AND       trunc(ftd_trd_dt)  >= :c_frm_dt
      AND       trunc(ftd_trd_dt)  <= :c_to_dt
			/*** AND       ftd_prdct_typ != 'U'              ** Ver 1.3 ** Commented in ver 1.4 ***/
			/*** AND        ftd_prdct_typ not in ('U','I')   ** Ver 1.4 **  Commented in Ver 1.5 ***/
      AND       ftd_prdct_typ in ('F','O','P','U','I')          /** Ver 1.5 **/  /*** Ver 1.6 ** 'I' Added ***/
			/* Ver 2.0 starts */
			GROUP BY	ftd_clm_mtch_accnt,
                ftd_prdct_typ,
                ftd_undrlyng,
                ftd_expry_dt,
                ftd_exer_typ,
                ftd_opt_typ,
                ftd_strk_prc,
                trunc(ftd_trd_dt),
                ftd_xchng_cd,
                ftd_ordr_rfrnc,
                ftd_trd_flw,
                ftd_indstk
			/* Ver 2.0 ends */

      UNION ALL							/* Changed UNION to UNION ALL in Ver 2.0 */ 	

      SELECT    ftd_clm_mtch_accnt,
                ftd_prdct_typ,
                ftd_undrlyng,
                ftd_expry_dt,
                ftd_exer_typ,
                ftd_opt_typ,
                ftd_strk_prc,
                sum(ftd_exctd_qty),								/* sum added in Ver 2.0 */
								/* ftd_exctd_rt,       commented in Ver 2.0 */
                sum(ftd_exctd_qty*ftd_exctd_rt),	/* sum added in Ver 2.0 */
              	trunc(ftd_trd_dt),			/* changed to_char to trunc in ver 2.0 */
                /* ftd_eba_trd_ref,			commented in ver 2.0 */
                ftd_xchng_cd,
         				/* ftd_xchng_trd_no,		commented in ver 2.0 */
                ftd_ordr_rfrnc,
                ftd_trd_flw,
                ftd_indstk,
                sum(ftd_brkg),					/* sum added in Ver 2.0 */
								/* Ver 2.0 starts */
								sum(nvl(ftd_stt,0)),  
                sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),
                sum(nvl(ftd_sebi_tt,0)),   
                sum(nvl(ftd_tran_chrg,0)),
                sum(nvl(ftd_stamp_duty,0))
								/* Ver 2.0 ends */
      FROM      ftd_fo_trd_dtls_hstry,
                uac_usr_accnts
   		WHERE     uac_usr_id           = :c_user_id
      AND       ftd_clm_mtch_accnt   = uac_clm_mtch_accnt
      AND       ftd_xchng_cd    LIKE   :sql_exg_xchng_cd
      AND       trunc(ftd_trd_dt)  >= :c_frm_dt
      AND       trunc(ftd_trd_dt)  <= :c_to_dt
			/*** AND       ftd_prdct_typ != 'U'              ** Ver 1.3 ** Commented in Ver 1.4 ***/
			/*** AND        ftd_prdct_typ not in ('U','I')   ** Ver 1.4 **  Commented in Ver 1.5 ***/
      AND       ftd_prdct_typ in ('F','O','P','U','I')          /** Ver 1.5 **/   /*** Ver 1.6 ** 'I' Added ***/
			/* Ver 2.0 starts */
			GROUP BY 	ftd_clm_mtch_accnt,
                ftd_prdct_typ,
                ftd_undrlyng,
                ftd_expry_dt,
                ftd_exer_typ,
                ftd_opt_typ,
                ftd_strk_prc,
                trunc(ftd_trd_dt),
                ftd_xchng_cd,
                ftd_ordr_rfrnc,
                ftd_trd_flw,
                ftd_indstk
			ORDER BY ftd_ordr_rfrnc DESC;
      /* Ver 2.0 ends */
      /* ORDER BY  1,12;    commented in Ver 2.0 */
      END;
      END-EXEC;
    }
    else                            /* For Normal Users */
    {
			if(DEBUG_MSG_LVL_3)
  		{
        fn_userlog(c_servicename, "NORMAL user");
			}

      EXEC SQL EXECUTE
      BEGIN
      OPEN  :sys_cursor FOR
      SELECT    ftd_clm_mtch_accnt,
                ftd_prdct_typ,
                ftd_undrlyng,
                ftd_expry_dt,
                ftd_exer_typ,
                ftd_opt_typ,
                ftd_strk_prc,
                sum(ftd_exctd_qty),									/* sum added in Ver 2.0 */
								/* ftd_exctd_rt,                     commented in Ver 2.0 */
                sum(ftd_exctd_qty*ftd_exctd_rt),		/* sum added in Ver 2.0 */
								trunc(ftd_trd_dt),									/* changed to_char to trunc in ver 2.0 */
              	/* ftd_eba_trd_ref,  commented in ver 2.0 */
                ftd_xchng_cd,
          			/* ftd_xchng_trd_no , commented in ver 2.0 */
                ftd_ordr_rfrnc,
                ftd_trd_flw,
                ftd_indstk,
                sum(ftd_brkg),					/* sum added in Ver 2.0 */
								/* Ver 2.0 starts */
								sum(nvl(ftd_stt,0)),      
                sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),
                sum(nvl(ftd_sebi_tt,0)),   
                sum(nvl(ftd_tran_chrg,0)), 
                sum(nvl(ftd_stamp_duty,0))
								/* Ver 2.0 ends */	
      FROM      ftd_fo_trd_dtls
      WHERE     ftd_clm_mtch_accnt   = :sql_exg_mtch_bnk_accnt
      AND       ftd_xchng_cd    LIKE   :sql_exg_xchng_cd
      AND       trunc(ftd_trd_dt)   >= :c_frm_dt
      AND       trunc(ftd_trd_dt)   <= :c_to_dt
			/*** AND       ftd_prdct_typ != 'U'              ** Ver 1.3 ** Commented in Ver 1.4 ***/
			/*** AND				ftd_prdct_typ not in ('U','I')	 ** Ver 1.4 ** Commented in Ver 1.5 ***/
			AND				ftd_prdct_typ  in ('F','O','P','U','I')					/** Ver 1.5 **/   /*** Ver 1.6 ** 'I' Added ***/
			/* Ver 2.0 starts */
			GROUP BY 	ftd_clm_mtch_accnt,
                ftd_prdct_typ,
                ftd_undrlyng,
                ftd_expry_dt,
                ftd_exer_typ,
                ftd_opt_typ,
                ftd_strk_prc,
								trunc(ftd_trd_dt),
                ftd_xchng_cd,
                ftd_ordr_rfrnc,
                ftd_trd_flw,
                ftd_indstk
      /* Ver 2.0 ends */

      UNION ALL             /* Changed to UNION ALL from UNION in Ver 2.0 */

      SELECT    ftd_clm_mtch_accnt,
                ftd_prdct_typ,
                ftd_undrlyng,
                ftd_expry_dt,
                ftd_exer_typ,
                ftd_opt_typ,
                ftd_strk_prc,
                sum(ftd_exctd_qty),								/* sum added in Ver 2.0 */
								/* ftd_exctd_rt,   	commented in Ver 2.0 */
								sum(ftd_exctd_qty*ftd_exctd_rt),	/* sum added in Ver 2.0 */
								trunc(ftd_trd_dt),
                /* ftd_eba_trd_ref,  commented in ver 2.0 */
                ftd_xchng_cd,
         				/* ftd_xchng_trd_no, commented in ver 2.0 */
                ftd_ordr_rfrnc,
                ftd_trd_flw,
                ftd_indstk,
                sum(ftd_brkg),
								/* Ver 2.0 starts */
								sum(nvl(ftd_stt,0)),        
                sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),
                sum(nvl(ftd_sebi_tt,0)),   
                sum(nvl(ftd_tran_chrg,0)),
                sum(nvl(ftd_stamp_duty,0))
								/* Ver 2.0 ends */
      FROM      ftd_fo_trd_dtls_hstry
      WHERE     ftd_clm_mtch_accnt   = :sql_exg_mtch_bnk_accnt
      AND       ftd_xchng_cd    LIKE   :sql_exg_xchng_cd
      AND       trunc(ftd_trd_dt)   >= :c_frm_dt
      AND       trunc(ftd_trd_dt)   <= :c_to_dt
			/*** AND       ftd_prdct_typ != 'U'              ** Ver 1.3 ** Commented in Ver 1.4 ***/
			/*** AND			 ftd_prdct_typ not in ('U','I')		 ** Ver 1.4 ** Commented in Ver 1.5 ***/
			AND				ftd_prdct_typ in ('F','O','P','U','I')     /** Ver 1.5 **/    /*** Ver 1.6 ** 'I' Added ***/
			/* Ver 2.0 starts */
			GROUP BY 	ftd_clm_mtch_accnt,
                ftd_prdct_typ,
                ftd_undrlyng,
                ftd_expry_dt,
                ftd_exer_typ,
                ftd_opt_typ,
                ftd_strk_prc,
								trunc(ftd_trd_dt),
                ftd_xchng_cd,
                ftd_trd_flw,
								ftd_ordr_rfrnc,
                ftd_indstk
			ORDER BY ftd_ordr_rfrnc DESC;
			/* Ver 2.0 ends */
	    /* ORDER BY  1,12;    commented in Ver 2.0 */
      END;
      END-EXEC;
    }

    if( SQLCODE != 0 )
    {
      if( SQLCODE == NO_DATA_FOUND )
      {
				if(DEBUG_MSG_LVL_3)
  			{
        	fn_userlog( c_servicename, "Inside NO DATA FOUND  I" );
				}
      }
      else
      {
        fn_errlog( c_servicename, "S31030", SQLMSG, c_errmsg.arr );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

    /*  CALCULATE REQUIRED LENGTH FOR OUTPUT BUFFER   */
    l_buff_len =  sizeof(sql_ftd_clm_mtch_accnt)  +
                  sizeof(sql_ftd_prdct_typ)       +
                  sizeof(sql_ftd_undrlyng)        +
                  LEN_FTD_EXPRY_DT                +
                  sizeof(sql_ftd_exer_typ)        +
                  sizeof(sql_ftd_opt_typ)         +
                  sizeof(sql_ftd_strk_prc)        +
                  sizeof(sql_ftd_exctd_qty)       +
                  sizeof(sql_ftd_exctd_rt)        +
                  sizeof(d_exctd_amt)             +
                  LEN_FTD_TRD_DT                  +
                  sizeof(sql_ftd_eba_trd_ref)     +
                  sizeof(sql_ftd_xchng_cd)        +
                  sizeof(sql_ftd_xchng_trd_no)    +
                  sizeof(sql_ftd_ordr_rfrnc)      +
									sizeof(sql_ftd_trd_flw)					+
									sizeof(sql_ftd_indstk)					+
									sizeof(sql_ftd_brkg)						+
									sizeof(l_incl_all)							+ 					/* added in ver 2.0 */
                  150;

		if(DEBUG_MSG_LVL_3)
  	{
    	fn_userlog( c_servicename, "BUFFER LENGTH IS :%ld:",l_buff_len );
		}

    /*  ALLOCATE MEMORY FOR OUTPUT BUFFER           */
    ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );
    if ( ptr_fml_Obuf == NULL )
    {
      fn_errlog( c_servicename, "S31035", TPMSG, c_errmsg.arr );
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    while( 1 )    /*  ENTER THE LOOP    */
    {
      MEMSET(sql_ftd_expry_dt);
      MEMSET(sql_ftd_trd_dt);
			MEMSET(sql_ftd_exctd_qty);

      /* FETCH THE RECORD FROM THE CURSOR ONE BY ONE */
      EXEC SQL FETCH :sys_cursor
         INTO   :sql_ftd_clm_mtch_accnt,
                :sql_ftd_prdct_typ,
                :sql_ftd_undrlyng,
                :sql_ftd_expry_dt,
                :sql_ftd_exer_typ,
                :sql_ftd_opt_typ,
                :sql_ftd_strk_prc,
                :sql_ftd_exctd_qty,
						/*	:sql_ftd_exctd_rt,     commented in ver 2.0 */
                :d_exctd_amt,
                :sql_ftd_trd_dt,
           /*   :sql_ftd_eba_trd_ref,  commented in ver 2.0 */
                :sql_ftd_xchng_cd,
           /*   :sql_ftd_xchng_trd_no, commented in ver 2.0 */
                :sql_ftd_ordr_rfrnc,
								:sql_ftd_trd_flw,
								:sql_ftd_indstk,
								:sql_ftd_brkg,
								/* Ver 2.0 strats */	
								:l_stt,     
                :l_srv_tax,
                :l_sebi_tt,
                :l_tran_chrg,
                :l_stmp_duty;
								/* Ver 2.0 ends */

      if( SQLCODE != 0 )
      {
        if( SQLCODE == NO_DATA_FOUND && sqlca.sqlerrd[2] == 0 )
        {
					if(DEBUG_MSG_LVL_3)
  				{
          	fn_userlog( c_servicename, "Inside NO DATA FOUND II" );
					}

          break;
        }
        else if( SQLCODE == NO_DATA_FOUND && sqlca.sqlerrd[2] != 0 )
        {
          break;
        }
        else
        {
          fn_errlog( c_servicename, "S31040", SQLMSG, c_errmsg.arr );
          EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE :sys_cursor;
          tpfree( (char *)ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
          tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }

      SETNULL(sql_ftd_expry_dt);
      SETNULL(sql_ftd_trd_dt);
		
			l_incl_all =  l_stt + l_srv_tax  +l_sebi_tt + l_tran_chrg + l_stmp_duty;  /* added in ver 2.0 */

			d_avg_exctd_rt = (long)d_exctd_amt / sql_ftd_exctd_qty;				/* added in ver 2.0 */

			if(DEBUG_MSG_LVL_3)
  		{
        fn_userlog(c_servicename,"value of MATCH ACCNT NO. is    	[%s]",sql_ftd_clm_mtch_accnt);
        fn_userlog(c_servicename,"value of PRODUCT TYPE is     		[%c]",sql_ftd_prdct_typ);
        fn_userlog(c_servicename,"value of UNDERLYING is     			[%s]",sql_ftd_undrlyng);
        fn_userlog(c_servicename,"value of EXPIRY DATE is    			[%s]",sql_ftd_expry_dt.arr);
        fn_userlog(c_servicename,"value of EXERCISE TYPE is    		[%c]",sql_ftd_exer_typ);
        fn_userlog(c_servicename,"value of OPERATION TYPE is     	[%c]",sql_ftd_opt_typ);
        fn_userlog(c_servicename,"value of STRIKE PRICE is     		[%lf]",sql_ftd_strk_prc);
        fn_userlog(c_servicename,"value of EXECUTED QUANTITY is   [%lf]",sql_ftd_exctd_qty);
       /** fn_userlog(c_servicename,"value of EXECUTED RATE is    		[%lf]",sql_ftd_exctd_rt); * Ver 2.0 **/
				fn_userlog(c_servicename,"value of EXECUTED RATE is        [%ld]",d_avg_exctd_rt);  /* added in ver 2.0 */
        fn_userlog(c_servicename,"value of EXECUTED AMOUNT is   	[%lf]",d_exctd_amt);
        fn_userlog(c_servicename,"value of TRADE DATE is     			[%s]",sql_ftd_trd_dt.arr);
        fn_userlog(c_servicename,"value of EBA TRADE REFERENCE is [%s]",sql_ftd_eba_trd_ref);
        fn_userlog(c_servicename,"value of EXCHANGE CODE is    		[%s]",sql_ftd_xchng_cd);
        fn_userlog(c_servicename,"value of EXCHANGE TRADE NO. is  [%lf]",sql_ftd_xchng_trd_no);
        fn_userlog(c_servicename,"value of ORDER REFERENCE is    	[%s]",sql_ftd_ordr_rfrnc);
				fn_userlog(c_servicename,"value of TRADE FLOW is     			[%c]",sql_ftd_trd_flw);
				fn_userlog(c_servicename,"value of CATEGORY is     				[%c]",sql_ftd_indstk);
				fn_userlog(c_servicename,"value of BROKERAGE is     			[%lf]",sql_ftd_brkg);
				fn_userlog(c_servicename,"value of TAXES is 						  [%ld]",l_incl_all);  /* ver 2.0 */
      }

      /*  ADD VALUES TO OUTPUT FML BUFFER */
      i_err[0]  = Fadd32(ptr_fml_Obuf,FFO_EBA_MTCH_ACT_NO   ,(char *)sql_ftd_clm_mtch_accnt,0) ;
			i_ferr[0]	= Ferror32;
      i_err[1]  = Fadd32(ptr_fml_Obuf,FFO_PRDCT_TYP         ,(char *)&sql_ftd_prdct_typ ,0) ;
			i_ferr[1] = Ferror32;
      i_err[2]  = Fadd32(ptr_fml_Obuf,FFO_UNDRLYNG          ,(char *)sql_ftd_undrlyng ,0) ;
      i_ferr[2] = Ferror32;
      i_err[3]  = Fadd32(ptr_fml_Obuf,FFO_EXPRY_DT          ,(char *)sql_ftd_expry_dt.arr,0) ;
      i_ferr[3] = Ferror32;
      i_err[4]  = Fadd32(ptr_fml_Obuf,FFO_EXER_TYP          ,(char *)&sql_ftd_exer_typ  ,0) ;
      i_ferr[4] = Ferror32;
      i_err[5]  = Fadd32(ptr_fml_Obuf,FFO_OPT_TYP           ,(char *)&sql_ftd_opt_typ ,0) ;
      i_ferr[5] = Ferror32;
      i_err[6]  = Fadd32(ptr_fml_Obuf,FFO_STRK_PRC          ,(char *)&sql_ftd_strk_prc  ,0) ;
      i_ferr[6] = Ferror32;
      i_err[7]  = Fadd32(ptr_fml_Obuf,FFO_EXEC_QTY          ,(char *)&sql_ftd_exctd_qty ,0) ;
      i_ferr[7] = Ferror32;
      /** i_err[8]  = Fadd32(ptr_fml_Obuf,FFO_EXCTD_RT          ,(char *)&sql_ftd_exctd_rt  ,0) ;  Ver 2.0 **/
			i_err[8]  = Fadd32(ptr_fml_Obuf,FFO_EXCTD_RT          ,(char *)&d_avg_exctd_rt  ,0) ;  /* Added in Ver 2.0 */
      i_ferr[8] = Ferror32;
      i_err[9]  = Fadd32(ptr_fml_Obuf,FFO_AMOUNT            ,(char *)&d_exctd_amt ,0) ;
      i_ferr[9] = Ferror32;
      i_err[10] = Fadd32(ptr_fml_Obuf,FFO_TRD_DT            ,(char *)sql_ftd_trd_dt.arr ,0) ;
      i_ferr[10] = Ferror32;
      i_err[11] = Fadd32(ptr_fml_Obuf,FFO_TRD_RFRNC         ,(char *)sql_ftd_eba_trd_ref,0) ;
      i_ferr[11] = Ferror32;
      i_err[12] = Fadd32(ptr_fml_Obuf,FFO_XCHNG_CD          ,(char *)sql_ftd_xchng_cd ,0) ;
      i_ferr[12] = Ferror32;
      i_err[13] = Fadd32(ptr_fml_Obuf,FFO_XCHNG_TRD_NO      ,(char *)&sql_ftd_xchng_trd_no,0) ;
      i_ferr[13] = Ferror32;
      i_err[14] = Fadd32(ptr_fml_Obuf,FFO_ORDR_RFRNC        ,(char *)sql_ftd_ordr_rfrnc ,0) ;
      i_ferr[14] = Ferror32;
			i_err[15] = Fadd32(ptr_fml_Obuf,FFO_TRD_FLW						,(char *)&sql_ftd_trd_flw,0) ;
      i_ferr[15] = Ferror32;
			i_err[16] = Fadd32(ptr_fml_Obuf,FFO_CTGRY_INDSTK			,(char *)&sql_ftd_indstk,0) ;
      i_ferr[16] = Ferror32;
			i_err[17] = Fadd32(ptr_fml_Obuf,FFO_BRKRG_VL					,(char *)&sql_ftd_brkg,0) ;
      i_ferr[17] = Ferror32;
			i_err[18] = Fadd32(ptr_fml_Obuf,FFO_FRS_BRKG					,(char *)&l_incl_all,0) ;  		/* Added in Ver 2.0 */
			i_ferr[18] = Ferror32;

      for(i_loop=0;i_loop<19;i_loop++)
      {
        if(i_err[i_loop] == -1)
        {
          fn_userlog(c_servicename,"ERROR WHILE ADDING DATA :%d:", i_loop );
          fn_errlog( c_servicename, "S31045", FMLMSG, c_errmsg.arr  );
					EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE  :sys_cursor;
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }
    
/*      strcpy( c_servicename, rqst->name );	*/

			if(DEBUG_MSG_LVL_3)
  		{
      	fn_userlog(c_servicename," FML's ADDED TO OUTPUT BUFFER."); 
				fn_userlog(c_servicename," SPACE NEEDED :%ld:", Fneeded32( 1, l_buff_len) );
				fn_userlog(c_servicename," UNUSED SPACE	:%ld:", Funused32( ptr_fml_Obuf ) );
			}

      /*  REALLOCATE MEMORY FOR OUTPUT BUFFER */
      if ( Fneeded32( 1, l_buff_len) > Funused32( ptr_fml_Obuf ) )
      {
        i_counter++;  /*  INCREMENT THE COUNTER   */

		    fn_userlog(c_servicename,"Inside Fneeded32 i_counter :%d:",c_servicename,i_counter); /*** testing ritesh ***/

				/*** Commented in VQC ***

        ptr_fml_Tempbuf = (FBFR32 *)tprealloc((char *)ptr_fml_Obuf, i_counter * MIN_FML_BUF_LEN );
        
        if(ptr_fml_Tempbuf == NULL)
        {
          EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE  :sys_cursor;
          fn_errlog ( c_servicename, "S31050", TPMSG, c_errmsg.arr );
          tpfree((char *)ptr_fml_Obuf);
          Fadd32(ptr_fml_Ibuf,FFO_ERR_MSG,c_errmsg.arr,0);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
        ptr_fml_Obuf = ptr_fml_Tempbuf;
        ptr_fml_Tempbuf = (FBFR32 *)NULL;

				*** VQC Comment Ends ***/

				/*** VQC Starts ***/
	
				ptr_fml_Obuf = (FBFR32*)tprealloc((char *)ptr_fml_Obuf, 
													(Fsizeof32(ptr_fml_Obuf) + (Fneeded32(1, i_counter * l_buff_len) )));
	
				if(ptr_fml_Obuf == NULL)
        {
          EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE  :sys_cursor;
          fn_errlog ( c_servicename, "S31055", TPMSG, c_errmsg.arr );
          tpfree((char *)ptr_fml_Obuf);
          Fadd32(ptr_fml_Ibuf,FFO_ERR_MSG,c_errmsg.arr,0);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

				/*** VQC Ends***/
	
				if(DEBUG_MSG_LVL_3)
  			{
					fn_userlog( c_servicename, "COUNT IS :%ld: & BUFFER LENGTH IS :%ld:",
                                    	i_counter, i_counter * MIN_FML_BUF_LEN );
        	fn_userlog(c_servicename," SPACE NEEDED :%ld:", Fneeded32( 1, l_buff_len) );
        	fn_userlog(c_servicename," UNUSED SPACE :%ld:", Funused32( ptr_fml_Obuf ) );
				}
      }
    } /*  END OF WHILE LOOP */
    EXEC SQL CLOSE :sys_cursor;
    EXEC SQL FREE  :sys_cursor;

		if(DEBUG_MSG_LVL_3)
  	{
			fn_userlog(c_servicename,"SFO_DT_TRD_BK SERVICE SUCCESSFULLY ENDED");
		}

    tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0, 0 );

/**  } Ver 1.9 Comment Starts
  else
  {
		if(DEBUG_MSG_LVL_3)
  	{
    	fn_userlog( c_servicename, "B56042", DEFMSG, c_errmsg.arr);
		}

    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

  }

	Ver 1.9 Comment Ends	***/
}
