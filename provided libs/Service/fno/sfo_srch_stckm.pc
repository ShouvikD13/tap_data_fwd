/**********************************************************************************************/
/* Service name : SFO_SRCH_STCKM                                                              */
/*                                                                                            */
/* Description  : This service for geting contract search details for                         */
/*                FNO products                                                                */
/*                                                                                            */
/* Input        : FML_STCK_STR      String          Search String                             */
/*                                                                                            */
/* Output       :                                                                             */
/*                FML_XCHNG_CD      String          Exchange-code                             */
/*                FML_DOCTYPE       String          Token                                     */
/*                FML_UWL_STCK_LST  String          Stock code/Contract                       */
/*                FML_STCK_CD       String          Stock Code                                */
/*                FML_ERR_MSG       String          Error MSG                                 */
/*                                                                                            */
/* Log    1.0   : 08-Oct-2020  Initial Release (Shlok)                                        */
/* Ver    1.1   : 10-Apr-2023  Minor changes - IN-1551 F&O long dated options in My Watchlist (Roshni Pawar) */
/**********************************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
/****commented in Ver VQC**
#include <fn_session.h>
****/
#include <fn_tuxlib.h>    /*** Uncommented in Ver 4.0 ***/

#include <fn_ddr.h>
#include <fn_log.h>
#include <fn_read_debug_lvl.h>

int Z;
#define MEMSET(A) memset(&A,'\0',sizeof(A))
# define INIT(x,y)        for(Z=0; Z< y; Z++)     x[Z] =0
# define TOTAL_FTQ_RECS	1
# define TOTAL_FML  11 
# define LEN_EXPRY_DT 23
# define ALL_CNTRCTS 'A'

void SFO_SRCH_STCKM(TPSVCINFO *rqst)
{


	struct st_ftq_records
 {
  char  c_prd_typ;
  char  c_undrlyng[7];
  char  c_expiry_dt[21];
  char  c_exrc_typ;
  char  c_opt_typ;
  long  l_strike_prc;
  char  c_ctgry_indstk;
  char  c_trail_flag;
  char  c_qt_trdng_flg;
  char  c_fp_qt_trdng_flg;
  char  c_sltp_qt_trdng_flg;
  char  c_nse_undrlyng[24];
 };

  FBFR32  *ptr_fml_Ibuffer  = (FBFR32 *)NULL;
  FBFR32  *ptr_fml_Obuffer = (FBFR32 *)NULL;

  int   i_err[TOTAL_FML];
  int   i_ferr[TOTAL_FML];
  int   i_counter=0;

  long l_bufferlength=0;
	int i_rec_count=0;

  char  c_ServiceName[33];
	char c_err_msg[256];
  struct st_ftq_records st_ftq_records[TOTAL_FTQ_RECS]; 
	MEMSET(st_ftq_records);
	
	EXEC SQL BEGIN DECLARE SECTION;
  sql_cursor     sys_cursor;

	long	l_trail_amt = 0;
  char  c_trail_flag_und='N';
	char	c_xchng_cd[4]="\0";
  char c_req_typ = '\0';
	 EXEC SQL END DECLARE SECTION;	

	ptr_fml_Ibuffer = (FBFR32 *)rqst->data;
  strcpy(c_ServiceName, rqst->name);
  INITDBGLVL(c_ServiceName);

	int i_returncode=0;

	i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                    c_err_msg,
                                    ptr_fml_Ibuffer,
																		1,
																		FFO_XCHNG_CD,( char * )c_xchng_cd,NULL);

	if( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31005", LIBMSG , c_err_msg );
    tpreturn ( TPFAIL, ERR_BFR, ( char * )NULL, 0, 0 );
  }
	
  if(Fget32( ptr_fml_Ibuffer,FFO_REQ_TYP,0,(char *)&c_req_typ,0 ) == -1)
  {
      if( Ferror32 == FNOTPRES )
      {
				c_req_typ='A';
			}
			else
			{
		    fn_errlog( c_ServiceName, "S31010", FMLMSG , c_err_msg );
    		tpreturn ( TPFAIL, ERR_BFR, ( char * )NULL, 0, 0 );
      }
  }

	fn_userlog(c_ServiceName,"......Service started.....");	
	
/*******************************************************************************/
  EXEC SQL ALLOCATE :sys_cursor;

	if(c_req_typ == ALL_CNTRCTS )
	{
	EXEC SQL EXECUTE 
	BEGIN
	OPEN :sys_cursor FOR
					 SELECT 
                   FTQ_PRDCT_TYP,
                   FTQ_UNDRLYNG,
                   TO_CHAR(FTQ_EXPRY_DT,'DD-Mon-YYYY'),
                   FTQ_EXER_TYP,
                   FTQ_OPT_TYP,
                   FTQ_STRK_PRC,
                   FTQ_INDSTK,
									 NVL(FTQ_QT_TRDNG_FLG,'N'),
									 NVL(FTQ_FP_QT_TRDNG_FLG,'N'),
									 NVL(FTQ_SLTP_FP_QT_TRDNG_FLG,'N'),
									 NVL(FTQ_TRAIL_FLG,'N'),
									 SEM_MAP_VL
									 FROM   FTQ_FO_TRD_QT, SEM_STCK_MAP  
            WHERE  FTQ_XCHNG_CD  = :c_xchng_cd 
            AND    SEM_ENTTY     = '1'
            /*** AND    FTQ_ACT_STTS  = 'A' ***/
            AND    SEM_STCK_CD   = FTQ_UNDRLYNG
            AND    FTQ_QT_TRDNG_FLG = 'T' 
            AND    FTQ_EXPRY_DT  >= trunc(sysdate)
            AND    FTQ_EXPRY_DT  <= sysdate + 365    /** Added in Ver 1.1 **/
            /*** commented in Ver 1.1
            AND    FTQ_EXPRY_DT <= ( select max(FTQ_EXPRY_DT)
                                    from FTQ_FO_TRD_QT
                                    where FTQ_XCHNG_CD = :c_xchng_cd
                                    and FTQ_PRDCT_TYP LIKE 'F'
                                    and FTQ_UNDRLYNG  = 'NIFTY')  ***/
           ORDER BY FTQ_PRDCT_TYP,FTQ_UNDRLYNG,FTQ_EXPRY_DT,FTQ_STRK_PRC ASC;
             END;
        END-EXEC;
	}
	else if(c_req_typ == 'C')
  {
  	EXEC SQL EXECUTE
  	BEGIN
  	OPEN :sys_cursor FOR
           SELECT
                   FTQ_PRDCT_TYP,
                   FTQ_UNDRLYNG,
                   TO_CHAR(FTQ_EXPRY_DT,'DD-Mon-YYYY'),
                   FTQ_EXER_TYP,
                   FTQ_OPT_TYP,
                   FTQ_STRK_PRC,
                   FTQ_INDSTK,
                   NVL(FTQ_QT_TRDNG_FLG,'N'),
                   NVL(FTQ_FP_QT_TRDNG_FLG,'N'),
                   NVL(FTQ_SLTP_FP_QT_TRDNG_FLG,'N'),
                   NVL(FTQ_TRAIL_FLG,'N'),
                   SEM_MAP_VL
                   FROM   FTQ_FO_TRD_QT, SEM_STCK_MAP
            WHERE  FTQ_XCHNG_CD  = :c_xchng_cd
            AND    SEM_ENTTY     = '1'
            /*** AND    FTQ_ACT_STTS  = 'A' ***/
            AND    SEM_STCK_CD   = FTQ_UNDRLYNG
            AND    FTQ_QT_TRDNG_FLG = 'T'
            AND    FTQ_EXPRY_DT  >= trunc(sysdate)
            AND    FTQ_EXPRY_DT  <= sysdate + 365    /** Added in Ver 1.1 **/
            /*** commented in Ver 1.1
            AND    FTQ_EXPRY_DT <= ( select max(FTQ_EXPRY_DT)
                                    from FTQ_FO_TRD_QT
                                    where FTQ_XCHNG_CD = :c_xchng_cd
                                    and FTQ_PRDCT_TYP LIKE 'F'
                                    and FTQ_UNDRLYNG  = 'NIFTY')  ***/
					  AND SUBSTR(FTQ_UNDRLYNG,1,1) in ( 'A','B','C')
           ORDER BY FTQ_PRDCT_TYP,FTQ_UNDRLYNG,FTQ_EXPRY_DT,FTQ_STRK_PRC ASC;
             END;
        END-EXEC;
  }
  else if(c_req_typ == 'I')
  {
    EXEC SQL EXECUTE
    BEGIN
    OPEN :sys_cursor FOR
           SELECT
                   FTQ_PRDCT_TYP,
                   FTQ_UNDRLYNG,
                   TO_CHAR(FTQ_EXPRY_DT,'DD-Mon-YYYY'),
                   FTQ_EXER_TYP,
                   FTQ_OPT_TYP,
                   FTQ_STRK_PRC,
                   FTQ_INDSTK,
                   NVL(FTQ_QT_TRDNG_FLG,'N'),
                   NVL(FTQ_FP_QT_TRDNG_FLG,'N'),
                   NVL(FTQ_SLTP_FP_QT_TRDNG_FLG,'N'),
                   NVL(FTQ_TRAIL_FLG,'N'),
                   SEM_MAP_VL
                   FROM   FTQ_FO_TRD_QT, SEM_STCK_MAP
            WHERE  FTQ_XCHNG_CD  = :c_xchng_cd
            AND    SEM_ENTTY     = '1'
            /*** AND    FTQ_ACT_STTS  = 'A' ***/
            AND    SEM_STCK_CD   = FTQ_UNDRLYNG
            AND    FTQ_QT_TRDNG_FLG = 'T'
            AND    FTQ_EXPRY_DT  >= trunc(sysdate)
            AND    FTQ_EXPRY_DT  <= sysdate + 365    /** Added in Ver 1.1 **/
            /*** commented in Ver 1.1
            AND    FTQ_EXPRY_DT <= ( select max(FTQ_EXPRY_DT)
                                    from FTQ_FO_TRD_QT
                                    where FTQ_XCHNG_CD = :c_xchng_cd
                                    and FTQ_PRDCT_TYP LIKE 'F'
                                    and FTQ_UNDRLYNG  = 'NIFTY')  ***/
            AND SUBSTR(FTQ_UNDRLYNG,1,1) in ( 'D','E','F','G','H','I')
           ORDER BY FTQ_PRDCT_TYP,FTQ_UNDRLYNG,FTQ_EXPRY_DT,FTQ_STRK_PRC ASC;
             END;
        END-EXEC;
  }
 	else if(c_req_typ == 'O')
  {
    EXEC SQL EXECUTE
    BEGIN
    OPEN :sys_cursor FOR
           SELECT
                   FTQ_PRDCT_TYP,
                   FTQ_UNDRLYNG,
                   TO_CHAR(FTQ_EXPRY_DT,'DD-Mon-YYYY'),
                   FTQ_EXER_TYP,
                   FTQ_OPT_TYP,
                   FTQ_STRK_PRC,
                   FTQ_INDSTK,
                   NVL(FTQ_QT_TRDNG_FLG,'N'),
                   NVL(FTQ_FP_QT_TRDNG_FLG,'N'),
                   NVL(FTQ_SLTP_FP_QT_TRDNG_FLG,'N'),
                   NVL(FTQ_TRAIL_FLG,'N'),
                   SEM_MAP_VL
                   FROM   FTQ_FO_TRD_QT, SEM_STCK_MAP
            WHERE  FTQ_XCHNG_CD  = :c_xchng_cd
            AND    SEM_ENTTY     = '1'
            /*** AND    FTQ_ACT_STTS  = 'A' ***/
            AND    SEM_STCK_CD   = FTQ_UNDRLYNG
            AND    FTQ_QT_TRDNG_FLG = 'T'
            AND    FTQ_EXPRY_DT  >= trunc(sysdate)
            AND    FTQ_EXPRY_DT  <= sysdate + 365    /** Added in Ver 1.1 **/
            /*** commented in Ver 1.1
            AND    FTQ_EXPRY_DT <= ( select max(FTQ_EXPRY_DT)
                                    from FTQ_FO_TRD_QT
                                    where FTQ_XCHNG_CD = :c_xchng_cd
                                    and FTQ_PRDCT_TYP LIKE 'F'
                                    and FTQ_UNDRLYNG  = 'NIFTY')  ***/
            AND SUBSTR(FTQ_UNDRLYNG,1,1) in ('J','K','L','M','N','O') 
           ORDER BY FTQ_PRDCT_TYP,FTQ_UNDRLYNG,FTQ_EXPRY_DT,FTQ_STRK_PRC ASC;
             END;
        END-EXEC;
  }
	else if(c_req_typ == 'Z')
  {
    EXEC SQL EXECUTE
    BEGIN
    OPEN :sys_cursor FOR
           SELECT
                   FTQ_PRDCT_TYP,
                   FTQ_UNDRLYNG,
                   TO_CHAR(FTQ_EXPRY_DT,'DD-Mon-YYYY'),
                   FTQ_EXER_TYP,
                   FTQ_OPT_TYP,
                   FTQ_STRK_PRC,
                   FTQ_INDSTK,
                   NVL(FTQ_QT_TRDNG_FLG,'N'),
                   NVL(FTQ_FP_QT_TRDNG_FLG,'N'),
                   NVL(FTQ_SLTP_FP_QT_TRDNG_FLG,'N'),
                   NVL(FTQ_TRAIL_FLG,'N'),
                   SEM_MAP_VL
                   FROM   FTQ_FO_TRD_QT, SEM_STCK_MAP
            WHERE  FTQ_XCHNG_CD  = :c_xchng_cd
            AND    SEM_ENTTY     = '1'
            /*** AND    FTQ_ACT_STTS  = 'A' ***/
            AND    SEM_STCK_CD   = FTQ_UNDRLYNG
            AND    FTQ_QT_TRDNG_FLG = 'T'
            AND    FTQ_EXPRY_DT  >= trunc(sysdate)
            AND    FTQ_EXPRY_DT  <= sysdate + 365    /** Added in Ver 1.1 **/
            /*** commented in Ver 1.1
            AND    FTQ_EXPRY_DT <= ( select max(FTQ_EXPRY_DT)
                                    from FTQ_FO_TRD_QT
                                    where FTQ_XCHNG_CD = :c_xchng_cd
                                    and FTQ_PRDCT_TYP LIKE 'F'
                                    and FTQ_UNDRLYNG  = 'NIFTY')  ***/
            AND SUBSTR(FTQ_UNDRLYNG,1,1) in (  'P','Q','R','S','T','U','V','W','X','Y','Z')
           ORDER BY FTQ_PRDCT_TYP,FTQ_UNDRLYNG,FTQ_EXPRY_DT,FTQ_STRK_PRC ASC;
             END;
        END-EXEC;
  }
	
	fn_userlog(c_ServiceName,"After query execution");

  ptr_fml_Obuffer = (FBFR32 *)tpalloc("FML32", NULL, MIN_FML_BUF_LEN * 1000);
  if(ptr_fml_Obuffer == NULL)
  {
    fn_errlog(c_ServiceName, "S31015", FMLMSG, c_err_msg);
    Fadd32(ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0);
    tpreturn(TPFAIL, 0, (char *)ptr_fml_Ibuffer, 0, 0);
  }

	l_bufferlength = sizeof(st_ftq_records) + 100;

	fn_userlog(c_ServiceName,"l_bufferlength:%ld:",l_bufferlength);

  while(1)	
	{
		MEMSET(st_ftq_records);

		EXEC SQL FETCH :sys_cursor
             INTO
								:st_ftq_records->c_prd_typ,
								:st_ftq_records->c_undrlyng,
								:st_ftq_records->c_expiry_dt,
								:st_ftq_records->c_exrc_typ,
								:st_ftq_records->c_opt_typ,
								:st_ftq_records->l_strike_prc,
								:st_ftq_records->c_ctgry_indstk,
					      :st_ftq_records->c_qt_trdng_flg,
                :st_ftq_records->c_fp_qt_trdng_flg,   
								:st_ftq_records->c_sltp_qt_trdng_flg,
								:st_ftq_records->c_trail_flag,
							  :st_ftq_records->c_nse_undrlyng;
 
	 if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        if( sqlca.sqlerrd[2] == 0 )
        {
          fn_errlog ( c_ServiceName, "B21000", DEFMSG, c_err_msg);
          EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE :sys_cursor;
					tpreturn(TPSUCCESS, 0, (char *)ptr_fml_Obuffer, 0L, 0);
        }
				else
				{
					EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE :sys_cursor;
        	break;
				}
      }
			else
			{
      	fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg);
      	EXEC SQL CLOSE :sys_cursor;
      	EXEC SQL FREE :sys_cursor;
      	tpfree ( ( char * ) ptr_fml_Obuffer );
      	Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
			}
    }

    if(DEBUG_MSG_LVL_5)  /** Added in ver 1.1 **/
    {
      fn_userlog(c_ServiceName,"In long dated expiry");
      fn_userlog(c_ServiceName,"ExchangeCode :%s:",c_xchng_cd);
      fn_userlog(c_ServiceName,"Underlying :%s:",st_ftq_records->c_undrlyng);
      fn_userlog(c_ServiceName,"ProductType  :%c:",st_ftq_records->c_prd_typ);
      fn_userlog(c_ServiceName,"ExpiryDate :%s:",st_ftq_records->c_expiry_dt);
      fn_userlog(c_ServiceName,"strike prc :%ld:",st_ftq_records->l_strike_prc);
      fn_userlog(c_ServiceName,"option typ :%c:",st_ftq_records->c_opt_typ);
    }

    if ( st_ftq_records->c_prd_typ == 'F' )
    {
			if(DEBUG_MSG_LVL_5)
			{
			fn_userlog(c_ServiceName,"Price Imp:%s:%s:%c:%s",c_xchng_cd,st_ftq_records->c_undrlyng,st_ftq_records->c_prd_typ,st_ftq_records->c_expiry_dt);
			}

      EXEC SQL
        SELECT NVL(FUM_TRAIL_AMT,0)*100,
               NVL(FUM_SLTP_TRAIL_FLG,'N')
        INTO   :l_trail_amt,
               :c_trail_flag_und
        FROM   FUM_FO_UNDRLYNG_MSTR
        WHERE  FUM_XCHNG_CD=:c_xchng_cd
        AND    FUM_UNDRLYNG =:st_ftq_records->c_undrlyng
        AND    FUM_PRDCT_TYP=:st_ftq_records->c_prd_typ;

      if ( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S22222", SQLMSG, c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
				tpfree ( ( char * ) ptr_fml_Obuffer );
        Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
      }

      if( c_trail_flag_und != 'Y' )
      {
        st_ftq_records->c_trail_flag=c_trail_flag_und;
      }

			if(DEBUG_MSG_LVL_5)
			{
			fn_userlog(c_ServiceName,"Trail flag:%c:%s:%c:%s",st_ftq_records->c_trail_flag,st_ftq_records->c_undrlyng,st_ftq_records->c_prd_typ,st_ftq_records->c_expiry_dt);
			}
		 }

	   i_rec_count = i_rec_count +1;

    if(DEBUG_MSG_LVL_5){
      fn_userlog(c_ServiceName,"Fneeded l_bufferlength :%ld: Funused32 ptr_fml_Obuffer:%ld:",Fneeded32( 1, l_bufferlength ),Funused32( ptr_fml_Obuffer));
    }

	  if(Fneeded32(1,l_bufferlength) > Funused32(ptr_fml_Obuffer))
    {
			fn_userlog(c_ServiceName,"Inside tprealloc");

			ptr_fml_Obuffer = (FBFR32 *)tprealloc((char *)ptr_fml_Obuffer,
                                  (Fsizeof32(ptr_fml_Obuffer) + MIN_FML_BUF_LEN));
      if ( ptr_fml_Obuffer == NULL )
      {
        fn_errlog ( c_ServiceName, "S22333",TPMSG,c_err_msg); 
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor; 
        tpfree ( ( char * ) ptr_fml_Obuffer );
        Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
      }
    } 
    
		INIT(i_err,TOTAL_FML);
    INIT(i_ferr,TOTAL_FML);

    i_err[0]  = Fadd32(ptr_fml_Obuffer,FFO_PRDCT_TYP, (char *)&st_ftq_records->c_prd_typ,0);
    i_ferr[0] = Ferror32;
    i_err[1]  = Fadd32(ptr_fml_Obuffer,FFO_UNDRLYNG, (char *)st_ftq_records->c_undrlyng,0);
    i_ferr[1] = Ferror32;
    i_err[2]  = Fadd32(ptr_fml_Obuffer,FFO_EXPRY_DT, (char *)st_ftq_records->c_expiry_dt,0);
    i_ferr[2] = Ferror32;
    i_err[3]  = Fadd32(ptr_fml_Obuffer,FFO_EXER_TYP, (char *)&st_ftq_records->c_exrc_typ,0);
    i_ferr[3] = Ferror32;
    i_err[4]  = Fadd32(ptr_fml_Obuffer,FFO_OPT_TYP, (char *)&st_ftq_records->c_opt_typ,0);
    i_ferr[4] = Ferror32;
    i_err[5]  = Fadd32(ptr_fml_Obuffer,FFO_STRK_PRC, (char *)&st_ftq_records->l_strike_prc,0);
    i_ferr[5] = Ferror32;
    i_err[6]  = Fadd32(ptr_fml_Obuffer,FFO_CTGRY_INDSTK, (char *)&st_ftq_records->c_ctgry_indstk,0);
    i_ferr[6] = Ferror32;
    i_err[7]  = Fadd32(ptr_fml_Obuffer,FFO_QT_TRDNG_FLG, (char *)&st_ftq_records->c_qt_trdng_flg,0);
    i_ferr[7] = Ferror32;
    /*** i_err[8]  = Fadd32(ptr_fml_Obuffer,FFO_EXRC_RQST_TYP, (char *)&st_ftq_records->c_fp_qt_trdng_flg,0);
    i_ferr[8] = Ferror32;***/
    i_err[8]  = Fadd32(ptr_fml_Obuffer,FFO_DAM_TRNSCTN, (char *)&st_ftq_records->c_sltp_qt_trdng_flg,0);
    i_ferr[8] = Ferror32;
    i_err[9]  = Fadd32(ptr_fml_Obuffer,FFO_ACTION1, (char *)st_ftq_records->c_nse_undrlyng,0);
    i_ferr[9] = Ferror32;
    i_err[10]  = Fadd32(ptr_fml_Obuffer,FFO_NEW_CNTRCT_TAG, (char *)&st_ftq_records->c_trail_flag,0);
    i_ferr[10] = Ferror32;

	  for (i_counter = 0;i_counter < 11; i_counter++)                                
    {
      if(i_err[i_counter] == -1)
      {
        fn_userlog(c_ServiceName,"i_counter :%d:",i_counter);
        fn_errlog(c_ServiceName,"S31025",Fstrerror32(i_ferr[i_counter]), c_err_msg);
        Fadd32( ptr_fml_Ibuffer,FFO_ERR_MSG, c_err_msg, 0 );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor; 
        tpfree((char *)ptr_fml_Obuffer);
        tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
      }
    }

   /*** i_returncode = fn_pack_vartofml ( c_ServiceName,
                                  c_err_msg,
                                  &ptr_fml_Obuffer,
                                  12,			
    FFO_PRDCT_TYP,    (char *)&st_ftq_records->c_prd_typ,
    FFO_UNDRLYNG,     (char *)st_ftq_records->c_undrlyng,
    FFO_EXPRY_DT,     (char *)st_ftq_records->c_expiry_dt,
    FFO_EXER_TYP,     (char *)&st_ftq_records->c_exrc_typ,
    FFO_OPT_TYP,      (char *)&st_ftq_records->c_opt_typ,
    FFO_STRK_PRC,     (char *)&st_ftq_records->l_strike_prc,
    FFO_CTGRY_INDSTK, (char *)&st_ftq_records->c_ctgry_indstk,
		FFO_QT_TRDNG_FLG, (char *)&st_ftq_records->c_qt_trdng_flg,
		FFO_EXRC_RQST_TYP,(char *)&st_ftq_records->c_fp_qt_trdng_flg,
	  FFO_DAM_TRNSCTN,  (char *)&st_ftq_records->c_sltp_qt_trdng_flg,
		FFO_ACTION1,(char *)&st_ftq_records->c_nse_undrlyng,	
		FFO_NEW_CNTRCT_TAG,(char *)&st_ftq_records->c_trail_flag
		);
	
     if ( i_returncode == -1 )
      {
        fn_errlog ( c_ServiceName, "S22222", LIBMSG, c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor; 
        tpfree ( ( char * ) ptr_fml_Obuffer );
        Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
      }***/
	}

	fn_userlog(c_ServiceName,"****Adding FML's******:%d:",i_rec_count);
	fn_userlog(c_ServiceName,"**************** Service End *********************");	
	tpreturn(TPSUCCESS, 0L, (char *)ptr_fml_Obuffer, 0L, 0);
}

