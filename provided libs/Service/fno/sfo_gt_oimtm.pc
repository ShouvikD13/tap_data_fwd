/******************************************************************************/
/*	Program	    			:	SFO_GT_OIMTM                                          */
/*                                                                            */
/*  Input             : FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_RQST_TYP                                          */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                                                                            */
/*  Optional          : FFO_UNDRLYNG                                          */
/*                                                                            */
/*  Output            : FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_CTGRY_INDSTK                                      */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_STRK_PRC                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_OPT_TYP                                           */
/*                                                                            */
/*  Description       : To get the records for running the Intra day MTM      */
/*                      and pass it on to the Calling batch program           */
/*                                                                            */
/*  Log               : Ver 1.1 	IBM Migration                               */
/*										:	Ver	1.2		CRCON42364 Prioritized IMTM Run.						*/
/*                    : Ver 1.3   mtm %age change                             */
/*                    : Ver 1.4   CR-ISEC03-37658 ( System changes in FNO for */
/*																ERS clients ,i.e,ATS Migration  ) 				  */
/******************************************************************************/
/*  07-Feb-2002     Ver 1.0        Vinod Banjan      Release 1.0              */
/*	19-Dec-2007			Ver 1.1				 Sushil Sharma		 AIX Migration						*/
/*	01-Apr-2010			Ver 1.2				 Sandeep Patil		 CRCON42364								*/
/*	16-Jan-2012			Ver 1.3				 Shamili Dalvi		 MTM %change							*/
/*	15-May-2013			Ver 1.4				 Swati A.B         CR-ISEC03-37658          */
/*  19-Jul-2013     Ver 1.5        Sachin Birje      Negativeity Process Chng */
/*  01-Aug-2013     Ver 1.6        Sachin Birje      NVL Handling of MTM Flag */
/*	10-Jan-2019			Ver 1.7				 Bhushan Harekar	 Core Fixed.							*/
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fo.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fn_battmpt.h>
#include <fn_tuxlib.h>
#include <fn_log.h>							/*	Ver 1.1 : Added		*/
#include <fn_read_debug_lvl.h>  /*  Ver 1.1 : Added   */

void print_qry(char * str, int i_cnt,char * c_ServiceName);

int fn_prcs_stmt ( char *c_ServiceName,     /***  Ver 1.2 ***/
                   char *select_stmt,
                   char *c_err_msg);


FBFR32 *ptr_fml_Ibuf;			/***	Ver	1.2	***/
FBFR32 *ptr_fml_Obuf;			/***	Ver	1.2	***/

void SFO_GT_OIMTM( TPSVCINFO *rqst )
{

	/***	Commented In Ver 1.2
  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

	***********************/

  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];

  int i_returncode;
  int *ind_undrlyng;
	int	i_ret_val;			/***	Ver	1.2	***/

	char	c_und_present='Y';

  EXEC SQL BEGIN DECLARE SECTION;
  	varchar select_stmt[500];
    char c_xchng_cd [ 4 ];
    char c_prd_typ;
  	char c_run_mode;     						/***  Ver 1.2 ***/
    char c_rqst_typ;
    /*char c_undrlyng_str [ 200 ]; */  /*** Ver 1.3 ***/
    char c_undrlyng_str [ 2000 ];			 /*** Ver 1.3 ***/
    char c_match_str [ 200 ];
    char c_fpm_mtch_accnt[11];      /***  Ver 1.2 ***/
    char sql_mtch_accnt [ 11 ];
    char sql_xchng_cd [ 4 ];
    char sql_prd_typ;
    char sql_indstk;
    char sql_undrlyng [ 7 ];
    char sql_exer_typ;
    char sql_opt_typ;
    char sql_expry_dt [ LEN_DATE ];

		long sql_strk_prc;

		char	c_exg_stts;

  EXEC SQL END DECLARE SECTION;

  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.1 : Added   */

  ptr_fml_Obuf = NULL;			/***	Ver 1.2	***/

	MEMSET(c_fpm_mtch_accnt);

  i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                    c_err_msg,
                                    ptr_fml_Ibuf,
                                    6,						/***	Ver 1.2	***/
                                    FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL,
                                    FFO_PRDCT_TYP, ( char * )&c_prd_typ, NULL,
                                    FFO_RQST_TYP, ( char * )&c_rqst_typ, NULL,
                                    FFO_EBA_MTCH_ACT_NO, ( char * )c_match_str,NULL,
                                    FFO_UNDRLYNG, ( char * )c_undrlyng_str,&ind_undrlyng,
                                    FFO_OPERATION_TYP, (char *)&c_run_mode,NULL);        /***  Ver 1.2 ***//*** 'NULL' added in Ver 1.7 ***/

  if( i_returncode != 0 )
  {
		if ( *ind_undrlyng == -1 )
		{
			c_und_present = 'N';
		}
		else
		{
    	fn_errlog( c_ServiceName, "S31005", LIBMSG , c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}
  }

 	if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.1 : Debug level Change  */
		if ( c_und_present == 'Y' )
		{
    	/*fn_userlog( c_ServiceName, "c_undrlyng_str :%s:", c_undrlyng_str ); */  /** 1.3 **/
		}
    fn_userlog( c_ServiceName, "c_xchng_cd :%s:", c_xchng_cd );
    fn_userlog( c_ServiceName, "c_prd_typ  :%c:", c_prd_typ );
    fn_userlog( c_ServiceName, "c_rqst_typ :%c:", c_rqst_typ );
    fn_userlog( c_ServiceName, "c_match_str :%s:", c_match_str );
  }

  if ( ( c_und_present == 'N' ) &&
       ( ( c_rqst_typ == MTM_FOR_UNDRLYNG       ) ||
         ( c_rqst_typ == MTM_FOR_MATCH_UNDRLYNG )   )  )
	{
    fn_userlog( c_ServiceName, "Error occurred :%s:", c_err_msg );
		strcpy(c_err_msg,"Invalid request type"); 
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	/***	Ver 1.2 Starts	***/
	if( DEBUG_MSG_LVL_0 )
	{
  	fn_userlog( c_ServiceName, "c_run_mode :%c:", c_run_mode );
	}

	if ( c_run_mode == 'P' )			/***	Prioritized Mode	***/
	{
		if( DEBUG_MSG_LVL_0 )
		{
			fn_userlog(c_ServiceName,"Inside Prioritized Mode");
		}

    EXEC SQL
      DECLARE 	cur_fpm_mtch CURSOR FOR
      SELECT  	FPM_CLM_MTCH_ACCNT
      FROM    	FPM_FO_PRTRZD_ACCNTS
			WHERE 		FPM_CLM_MTCH_ACCNT NOT IN ( SELECT 	MEM_MTCH_ACCNT          /*** Ver 1.4 ***/
																						FROM 		MEM_MTM_EXPTN_MSTR  
																						WHERE  	MEM_SEGMENT = 'FNOIM' 
																						AND 		SYSDATE BETWEEN MEM_FROM_DT AND MEM_TO_DT ) 
			ORDER BY 	FPM_PRIORITY_NUM;

    EXEC SQL OPEN cur_fpm_mtch;

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31010", SQLMSG, c_err_msg );
      EXEC SQL CLOSE cur_fpm_mtch;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    while ( 1)
    {
      EXEC SQL
        FETCH cur_fpm_mtch
        INTO  :c_fpm_mtch_accnt;

      if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          break;
        }
        fn_errlog ( c_ServiceName, "S31015", SQLMSG, c_err_msg );
        EXEC SQL CLOSE cur_fpm_mtch;
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
      }


			if( c_rqst_typ == MTM_ALL_PSTN )
    	{
      	strcpy( (char *)select_stmt.arr,"SELECT FOP_CLM_MTCH_ACCNT,FOP_XCHNG_CD,FOP_PRDCT_TYP,FOP_INDSTK,FOP_UNDRLYNG,TO_CHAR(FOP_EXPRY_DT,'DD-Mon-YYYY'),FOP_STRK_PRC,FOP_EXER_TYP,FOP_OPT_TYP FROM FOP_FO_OPTIONS_PSTN WHERE FOP_XCHNG_CD = '");
      	strcat((char *)select_stmt.arr, c_xchng_cd);
      	strcat((char *)select_stmt.arr,"' AND FOP_CLM_MTCH_ACCNT = '");			/***	Ver	1.2	***/
				strcat((char *)select_stmt.arr,c_fpm_mtch_accnt);										/***  Ver 1.2 ***/
        strcat((char *)select_stmt.arr,"' AND nvl(FOP_MTM_FLG,'O') != 'L' ");      /*** Ver 1.5** Ver 1.6 ***/ 
				strcat((char *)select_stmt.arr," AND FOP_PRDCT_TYP = 'O' AND FOP_OPNPSTN_QTY < 0 ORDER BY FOP_UNDRLYNG");
    	}
    	else if( c_rqst_typ == MTM_FOR_UNDRLYNG )
    	{
      	strcpy( (char *)select_stmt.arr,"SELECT FOP_CLM_MTCH_ACCNT,FOP_XCHNG_CD,FOP_PRDCT_TYP,FOP_INDSTK,FOP_UNDRLYNG,TO_CHAR(FOP_EXPRY_DT,'DD-Mon-YYYY'),FOP_STRK_PRC,FOP_EXER_TYP,FOP_OPT_TYP FROM FOP_FO_OPTIONS_PSTN WHERE FOP_XCHNG_CD = '");
      	strcat((char *)select_stmt.arr,c_xchng_cd);
      	strcat((char *)select_stmt.arr,"'AND FOP_CLM_MTCH_ACCNT = '");			/***	Ver	1.2	***/
				strcat((char *)select_stmt.arr,c_fpm_mtch_accnt);	  							 	/***	Ver 1.2 ***/
        strcat((char *)select_stmt.arr,"' AND nvl(FOP_MTM_FLG,'O') != 'L' ");      /*** Ver 1.5 ** Ver 1.6***/
      	strcat((char *)select_stmt.arr," AND FOP_PRDCT_TYP = 'O' AND FOP_OPNPSTN_QTY < 0 AND FOP_UNDRLYNG in (");
      	strcat((char *)select_stmt.arr, c_undrlyng_str);
      	strcat((char *)select_stmt.arr, ")");
      	strcat((char *)select_stmt.arr, "  ORDER BY FOP_UNDRLYNG");
    	}
    	else if( c_rqst_typ == MTM_FOR_MATCH_ALL_UNDRLYNG )
    	{
      	strcpy( (char *)select_stmt.arr,"SELECT FOP_CLM_MTCH_ACCNT,FOP_XCHNG_CD,FOP_PRDCT_TYP,FOP_INDSTK,FOP_UNDRLYNG,TO_CHAR(FOP_EXPRY_DT,'DD-Mon-YYYY'),FOP_STRK_PRC,FOP_EXER_TYP,FOP_OPT_TYP FROM FOP_FO_OPTIONS_PSTN WHERE FOP_XCHNG_CD = '");
      	strcat((char *)select_stmt.arr,c_xchng_cd);
      	strcat((char *)select_stmt.arr,"'AND FOP_CLM_MTCH_ACCNT = '");			/***	Ver	1.2	***/
				strcat((char *)select_stmt.arr,c_fpm_mtch_accnt);  									/***  Ver 1.2 ***/
        strcat((char *)select_stmt.arr,"' AND nvl(FOP_MTM_FLG,'O') != 'L' ");      /*** Ver 1.5 ** Ver 1.6 ***/
      	strcat((char *)select_stmt.arr," AND FOP_PRDCT_TYP = 'O' AND FOP_OPNPSTN_QTY < 0 AND FOP_CLM_MTCH_ACCNT NOT in (");
      	strcat((char *)select_stmt.arr, c_match_str);
      	strcat((char *)select_stmt.arr, ")");
      	strcat((char *)select_stmt.arr, "  ORDER BY FOP_UNDRLYNG");
    	}
			else if( c_rqst_typ == MTM_FOR_MATCH_UNDRLYNG )
    	{
      	strcpy( (char *)select_stmt.arr,"SELECT FOP_CLM_MTCH_ACCNT,FOP_XCHNG_CD,FOP_PRDCT_TYP,FOP_INDSTK,FOP_UNDRLYNG,TO_CHAR(FOP_EXPRY_DT,'DD-Mon-YYYY'),FOP_STRK_PRC,FOP_EXER_TYP,FOP_OPT_TYP FROM FOP_FO_OPTIONS_PSTN WHERE FOP_XCHNG_CD = '");
      	strcat((char *)select_stmt.arr,c_xchng_cd);
      	strcat((char *)select_stmt.arr,"'AND FOP_CLM_MTCH_ACCNT = '");			/***	Ver	1.2	***/
				strcat((char *)select_stmt.arr,c_fpm_mtch_accnt);	  								/***  Ver 1.2 ***/
        strcat((char *)select_stmt.arr,"' AND nvl(FOP_MTM_FLG,'O') != 'L' ");      /*** Ver 1.5 ** Ver 1.6 ***/
      	strcat((char *)select_stmt.arr," AND FOP_PRDCT_TYP = 'O' AND FOP_OPNPSTN_QTY < 0 AND FOP_UNDRLYNG in (");
      	strcat((char *)select_stmt.arr, c_undrlyng_str);
      	strcat((char *)select_stmt.arr, ") AND FOP_CLM_MTCH_ACCNT NOT in (");
      	strcat((char *)select_stmt.arr, c_match_str);
      	strcat((char *)select_stmt.arr, ")");
      	strcat((char *)select_stmt.arr, "  ORDER BY FOP_UNDRLYNG");
    	}

			i_ret_val =  fn_prcs_stmt ( c_ServiceName,      /***  Ver 1.2 ***/
                                  select_stmt.arr,
                                  c_err_msg);

      if ( i_ret_val != 0)
      {
        fn_errlog(c_ServiceName,"L31030", LIBMSG, c_err_msg);
        tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuf, 0L, 0);
      }

		}

	}
	else if (	c_run_mode	==	'N'	)			/***	Normal Mode	***/
	{
	
		if( c_rqst_typ == MTM_ALL_PSTN )
		{
			strcpy( (char *)select_stmt.arr,"SELECT FOP_CLM_MTCH_ACCNT,FOP_XCHNG_CD,FOP_PRDCT_TYP,FOP_INDSTK,FOP_UNDRLYNG,TO_CHAR(FOP_EXPRY_DT,'DD-Mon-YYYY'),FOP_STRK_PRC,FOP_EXER_TYP,FOP_OPT_TYP FROM FOP_FO_OPTIONS_PSTN WHERE FOP_XCHNG_CD = '");
			strcat((char *)select_stmt.arr, c_xchng_cd);
			/** strcat((char *)select_stmt.arr,"' AND FOP_PRDCT_TYP = 'O' AND FOP_OPNPSTN_QTY < 0 ORDER BY FOP_UNDRLYNG"); commented in Ver 1.4 ***/
		 strcat((char *)select_stmt.arr,"' AND FOP_PRDCT_TYP = 'O' AND FOP_OPNPSTN_QTY < 0 "); /* Ver 1.4 **/
     strcat((char *)select_stmt.arr," AND nvl(FOP_MTM_FLG,'O') != 'L' ");      /*** Ver 1.5 ** Ver 1.6 ***/
		 strcat((char *)select_stmt.arr," AND FOP_CLM_MTCH_ACCNT NOT IN (SELECT MEM_MTCH_ACCNT FROM MEM_MTM_EXPTN_MSTR WHERE  MEM_SEGMENT = 'FNOIM' and SYSDATE BETWEEN MEM_FROM_DT AND MEM_TO_DT ) "); /*** Ver 1.4 ***/
		 strcat((char *)select_stmt.arr,"ORDER BY FOP_UNDRLYNG "); /*** Ver 1.4 --order by clause separated ***/
		}
		else if( c_rqst_typ == MTM_FOR_UNDRLYNG )
		{
			strcpy( (char *)select_stmt.arr,"SELECT FOP_CLM_MTCH_ACCNT,FOP_XCHNG_CD,FOP_PRDCT_TYP,FOP_INDSTK,FOP_UNDRLYNG,TO_CHAR(FOP_EXPRY_DT,'DD-Mon-YYYY'),FOP_STRK_PRC,FOP_EXER_TYP,FOP_OPT_TYP FROM FOP_FO_OPTIONS_PSTN WHERE FOP_XCHNG_CD = '");
			strcat((char *)select_stmt.arr,c_xchng_cd);
			strcat((char *)select_stmt.arr,"' AND FOP_PRDCT_TYP = 'O' AND FOP_OPNPSTN_QTY < 0 AND FOP_UNDRLYNG in (");
			strcat((char *)select_stmt.arr,	c_undrlyng_str);
			strcat((char *)select_stmt.arr,	")");
      strcat((char *)select_stmt.arr," AND nvl(FOP_MTM_FLG,'O') != 'L' ");      /*** Ver 1.5 **Ver 1.6 **/
			 strcat((char *)select_stmt.arr,"AND FOP_CLM_MTCH_ACCNT NOT IN (SELECT MEM_MTCH_ACCNT FROM MEM_MTM_EXPTN_MSTR WHERE  MEM_SEGMENT = 'FNOIM' and SYSDATE BETWEEN MEM_FROM_DT AND MEM_TO_DT ) "); /*** Ver 1.4 ***/
			strcat((char *)select_stmt.arr,	"  ORDER BY FOP_UNDRLYNG");
		}
  	else if( c_rqst_typ == MTM_FOR_MATCH_ALL_UNDRLYNG )
  	{
			strcpy( (char *)select_stmt.arr,"SELECT FOP_CLM_MTCH_ACCNT,FOP_XCHNG_CD,FOP_PRDCT_TYP,FOP_INDSTK,FOP_UNDRLYNG,TO_CHAR(FOP_EXPRY_DT,'DD-Mon-YYYY'),FOP_STRK_PRC,FOP_EXER_TYP,FOP_OPT_TYP FROM FOP_FO_OPTIONS_PSTN WHERE FOP_XCHNG_CD = '");
			strcat((char *)select_stmt.arr,c_xchng_cd);
			strcat((char *)select_stmt.arr,"' AND FOP_PRDCT_TYP = 'O' AND FOP_OPNPSTN_QTY < 0 AND FOP_CLM_MTCH_ACCNT NOT in (");
			strcat((char *)select_stmt.arr,	c_match_str);
			strcat((char *)select_stmt.arr,	")");
      strcat((char *)select_stmt.arr," AND nvl(FOP_MTM_FLG,'O') != 'L' ");      /*** Ver 1.5 ** Ver 1.6 ***/
			 strcat((char *)select_stmt.arr,"AND FOP_CLM_MTCH_ACCNT NOT IN (SELECT MEM_MTCH_ACCNT FROM MEM_MTM_EXPTN_MSTR WHERE  MEM_SEGMENT = 'FNOIM' and SYSDATE BETWEEN MEM_FROM_DT AND MEM_TO_DT ) "); /*** Ver 1.4 ***/
			strcat((char *)select_stmt.arr,	"  ORDER BY FOP_UNDRLYNG");
		}
  	else if( c_rqst_typ == MTM_FOR_MATCH_UNDRLYNG )
  	{
			strcpy( (char *)select_stmt.arr,"SELECT FOP_CLM_MTCH_ACCNT,FOP_XCHNG_CD,FOP_PRDCT_TYP,FOP_INDSTK,FOP_UNDRLYNG,TO_CHAR(FOP_EXPRY_DT,'DD-Mon-YYYY'),FOP_STRK_PRC,FOP_EXER_TYP,FOP_OPT_TYP FROM FOP_FO_OPTIONS_PSTN WHERE FOP_XCHNG_CD = '");
			strcat((char *)select_stmt.arr,c_xchng_cd);
			strcat((char *)select_stmt.arr,"' AND FOP_PRDCT_TYP = 'O' AND FOP_OPNPSTN_QTY < 0 AND FOP_UNDRLYNG in (");
			strcat((char *)select_stmt.arr,	c_undrlyng_str);
			strcat((char *)select_stmt.arr,	") AND FOP_CLM_MTCH_ACCNT NOT in (");
			strcat((char *)select_stmt.arr,	c_match_str);
			strcat((char *)select_stmt.arr,	")");
      strcat((char *)select_stmt.arr," AND nvl(FOP_MTM_FLG,'O') != 'L' ");      /*** Ver 1.5 **Ver 1.6 ***/
			 strcat((char *)select_stmt.arr,"AND FOP_CLM_MTCH_ACCNT NOT IN (SELECT MEM_MTCH_ACCNT FROM MEM_MTM_EXPTN_MSTR WHERE  MEM_SEGMENT = 'FNOIM' and SYSDATE BETWEEN MEM_FROM_DT AND MEM_TO_DT ) "); /*** Ver 1.4 ***/
			strcat((char *)select_stmt.arr,	"  ORDER BY FOP_UNDRLYNG");
		}

		
    i_ret_val =  fn_prcs_stmt ( c_ServiceName,      /***  Ver 1.2 ***/
                                select_stmt.arr,
                                c_err_msg);

    if ( i_ret_val != 0)
 		{
    	fn_errlog(c_ServiceName,"L31030", LIBMSG, c_err_msg);
      tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuf, 0L, 0);
    }
	}	


	/***	Commented In Ver 1.2

	select_stmt.len = strlen((char *)select_stmt.arr);	

  print_qry((char*)select_stmt.arr,select_stmt.len,c_ServiceName);

***Commented by sangeet to make oracle 9i compatible***
* EXEC SQL DECLARE sql_stmt STATEMENT;
	if(SQLCODE != 0)
	{
		fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
*


	EXEC SQL PREPARE sql_stmt FROM :select_stmt;
	if(SQLCODE != 0)
	{
		fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  ptr_fml_Obuf = NULL;

	EXEC SQL DECLARE cur_dyn CURSOR FOR sql_stmt;

	EXEC SQL OPEN cur_dyn ;
	if(SQLCODE != 0)
	{
		fn_errlog( c_ServiceName, "S31030", SQLMSG, c_err_msg );
		tpfree ( ( char * ) ptr_fml_Obuf );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  for (;;)
  {
		EXEC SQL FETCH cur_dyn 
             INTO :sql_mtch_accnt,
                  :sql_xchng_cd,
                  :sql_prd_typ,
                  :sql_indstk,
                  :sql_undrlyng,
                  :sql_expry_dt,
									:sql_strk_prc,
									:sql_exer_typ,
									:sql_opt_typ;

		if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        break;
      }
			fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg );
			tpfree ( ( char * ) ptr_fml_Obuf );
    	EXEC SQL CLOSE cur_dyn;
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		rtrim ( sql_mtch_accnt );
		rtrim ( sql_undrlyng );
		rtrim ( sql_expry_dt );

    i_returncode = fn_pack_vartofml( c_ServiceName,
                                     c_err_msg,
                                     &ptr_fml_Obuf,
                                     9,
                                 FFO_EBA_MTCH_ACT_NO, ( char * )sql_mtch_accnt,
                                 FFO_XCHNG_CD, ( char * )sql_xchng_cd,
                                 FFO_PRDCT_TYP, ( char * )&sql_prd_typ,
                                 FFO_CTGRY_INDSTK, ( char * )&sql_indstk,
                                 FFO_UNDRLYNG, ( char * )sql_undrlyng,
                                 FFO_EXPRY_DT, ( char * )sql_expry_dt,
																 FFO_STRK_PRC, (char *)	&sql_strk_prc,
																 FFO_EXER_TYP, (char *) &sql_exer_typ,
																 FFO_OPT_TYP,	 (char *) &sql_opt_typ);

		if( i_returncode == -1 )
		{
			fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg );
    	EXEC SQL CLOSE cur_dyn;
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
    EXEC SQL CLOSE cur_dyn;


************************************************/


  tpreturn(TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
}
void print_qry(char * str, int i_cnt,char * c_ServiceName)
{
  int idx;
  char c_tmp_str1[100];

  MEMSET(c_tmp_str1);

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Printing query");
  }

  for (idx = 0;idx < i_cnt; idx += 60)
  {
    strncpy(c_tmp_str1,str + idx,60);

		if( DEBUG_MSG_LVL_3 )
		{
    	fn_userlog(c_ServiceName,"%s",c_tmp_str1);
		}
  }

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Finished printing query");
  }
}

int fn_prcs_stmt ( char *c_ServiceName,
                   char *select_stmt,
                   char *c_err_msg)
{

  char sql_mtch_accnt [ 11 ];
  char sql_xchng_cd [ 4 ];
  char sql_prd_typ;
  char sql_indstk;
  char sql_undrlyng [ 7 ];
  char sql_exer_typ;
  char sql_opt_typ;
  char sql_expry_dt [ LEN_DATE ];

  int  i_returncode;

  long li_len;
  long sql_strk_prc;

	if( DEBUG_MSG_LVL_0 )
	{
  	fn_userlog(c_ServiceName,"Inside Function fn_prcs_stmt");
	}

  li_len  = strlen (select_stmt);

  print_qry((char*)select_stmt,li_len,c_ServiceName);

	EXEC SQL PREPARE sql_stmt FROM :select_stmt;
  if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31045", SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


  EXEC SQL DECLARE cur_dyn CURSOR FOR sql_stmt;

  EXEC SQL OPEN cur_dyn ;

  if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31050", SQLMSG, c_err_msg );
    tpfree ( ( char * ) ptr_fml_Obuf );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


	for (;;)
  {
		 EXEC SQL FETCH cur_dyn
             INTO :sql_mtch_accnt,
                  :sql_xchng_cd,
                  :sql_prd_typ,
                  :sql_indstk,
                  :sql_undrlyng,
                  :sql_expry_dt,
                  :sql_strk_prc,
                  :sql_exer_typ,
                  :sql_opt_typ;

    if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        break;
      }
      fn_errlog( c_ServiceName, "S31055", SQLMSG, c_err_msg );
      tpfree ( ( char * ) ptr_fml_Obuf );
      EXEC SQL CLOSE cur_dyn;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    rtrim ( sql_mtch_accnt );
    rtrim ( sql_undrlyng );
    rtrim ( sql_expry_dt );

		i_returncode = fn_pack_vartofml(c_ServiceName,
                                    c_err_msg,
                                    &ptr_fml_Obuf,
                                    9,
                                 		FFO_EBA_MTCH_ACT_NO, ( char * )sql_mtch_accnt,
                                 		FFO_XCHNG_CD, ( char * )sql_xchng_cd,
                                 		FFO_PRDCT_TYP, ( char * )&sql_prd_typ,
                                 		FFO_CTGRY_INDSTK, ( char * )&sql_indstk,
                                 		FFO_UNDRLYNG, ( char * )sql_undrlyng,
                                 		FFO_EXPRY_DT, ( char * )sql_expry_dt,
                                 		FFO_STRK_PRC, (char *) &sql_strk_prc,
                                 		FFO_EXER_TYP, (char *) &sql_exer_typ,
                                 		FFO_OPT_TYP,  (char *) &sql_opt_typ);

    if( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31060", SQLMSG, c_err_msg );
      EXEC SQL CLOSE cur_dyn;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }

  EXEC SQL CLOSE cur_dyn;

	return 0 ;

}
