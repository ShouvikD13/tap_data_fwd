/******************************************************************************/
/*	Program	    			:	SFO_QRY_SPDBK                                         */
/*                                                                            */
/*  Input             : vw_spdordbk                                           */
/*                                                                            */
/*  Output            : vw_spdordbk                                           */
/*											vw_err_msg                                            */
/*                                                                            */
/*  Description       : This service queries the spread order book and        */
/*                      returns the result based on the request type.         */
/*                      The following request types are supported :-          */
/*                                                                            */
/*                      ACK_TO_ORD  - 'A'                                     */
/*                      Given the ack. no. and pipe id, retrieves the spread  */
/*                      order details                                         */
/*                                                                            */
/*                      ORDREF_TO_SPDREF - 'B'                                */
/*                      Given the order reference, retrieves the spread       */
/*                      order details                                         */
/*                                                                            */
/*  Log               : 1.0    15-Feb-2002    S. Swaminathan                  */
/*  Log               : 1.1    04-Dec-2007    Vikash Kumar                    */
/*                    : 1.2    03-Jan-2008    Sushil Sharma                   */
/*	Log								:	1.3		 30-Jun-2009		Sandeep Patil										*/
/*                                                                            */
/******************************************************************************/
/* 1.0	-	New Release                                                         */
/* 1.1  - Changes for NNF808 increase in size of trade no. and order no.      */
/* 1.2  - AIX Migration                                                       */
/* 1.3  - ORS2 Changes																												*/	
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <eba_to_ors.h> 				/** Added in ver 1.1 **/
#include <fn_log.h>       			/*  Ver 1.2 : Added */
#include <fn_read_debug_lvl.h>  /*  Ver 1.2 : Added */
void SFO_QRY_SPDBK( TPSVCINFO *rqst )
{
	char  c_ServiceName[33];
  char  c_errmsg[256];
	int i_cnt;

  EXEC SQL BEGIN DECLARE SECTION;
		sql_cursor     sys_cursor;             /* a cursor variable */
    struct vw_spdordbk *ptr_st_spd_ordbk;
		short i_ind;
/**   char c_xchng_ack[15+1]; commented in ver 1.1 **/
    char c_xchng_ack[ LEN_XCHNG_ACK ]; /** Added in ver 1.1 **/
		char c_pipe_id[2+1];
		char c_ordr_rfrnc[18+1];
   	varchar c_last_mod_tm[ LEN_DATE ];
   	varchar c_ack_tm[ LEN_DATE ];
		char c_sprd_ord_rfrnc[18+1];
		char c_ordr_rfrnc_tmp[18+1];
		char c_sprd_ord_ind;
/**   char c_xchng_ack_tmp[15+1];   commented in ver 1.1 **/
    char c_xchng_ack_tmp[ LEN_XCHNG_ACK ]; /** Added in ver 1.1 **/
		char c_pipe_id_tmp[2+1];
		long int l_mdfctn_cntr;
		long int l_ors_msg_typ;
		long int l_ord_tot_qty;
		long int l_exctd_qty;
		long int l_can_qty;
  EXEC SQL END DECLARE SECTION;

  struct vw_err_msg *ptr_st_err_msg;

  ptr_st_spd_ordbk = ( struct vw_spdordbk * )rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.2 : Added   */

  ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
  if ( ptr_st_err_msg ==  NULL )
  {
    fn_errlog ( c_ServiceName, "S31005", TPMSG, c_errmsg );
    tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
  }

  memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );


  /*** Added for Order Routing ***/
  fn_init_ddr_val ( ptr_st_spd_ordbk->c_rout_crt );

	EXEC SQL ALLOCATE :sys_cursor;

	switch( ptr_st_spd_ordbk->c_rqst_typ[0] )
	{
		case ACK_TO_ORD :
			strcpy( c_xchng_ack, (char *)ptr_st_spd_ordbk->c_xchng_ack[0] );
			strcpy( c_pipe_id, (char *)ptr_st_spd_ordbk->c_pipe_id[0] );
			EXEC SQL EXECUTE 
				BEGIN
						OPEN :sys_cursor FOR
							SELECT	fsd_sprd_rfrnc,
											fsd_ordr_rfrnc,
											fsd_sprd_ord_ind,
											NVL(to_char ( fsd_lst_mod_tm, 'dd-mon-yyyy hh24:mi:ss' ),'*'),
											NVL(fsd_ack_nmbr,' '),
											fsd_pipe_id,
											fsd_mdfctn_cntr,
											NVL(fsd_ors_msg_typ,0),
											NVL ( fsd_ord_qty, 0 ),
											NVL ( fsd_exec_qty, 0 ),
											NVL ( fsd_cncl_qty, 0 ),
											NVL ( to_char ( fsd_ack_tm, 'dd-mon-yyyy hh24:mi:ss' ), '*' )
							FROM 		fsd_fo_sprd_dtls
							WHERE		fsd_ack_nmbr = :c_xchng_ack
							AND 		fsd_pipe_id = :c_pipe_id;
					END;
				END-EXEC;
				break;

		case ORDREF_TO_SPDREF :
				strcpy( c_ordr_rfrnc, (char *)ptr_st_spd_ordbk->c_ordr_rfrnc[0] );
				EXEC SQL EXECUTE
					BEGIN
						OPEN :sys_cursor FOR
							SELECT	fsd_sprd_rfrnc,
											fsd_ordr_rfrnc,
											fsd_sprd_ord_ind,
											NVL(to_char(fsd_lst_mod_tm,'dd-mon-yyyy hh24:mi:ss'),'*'),
											NVL(fsd_ack_nmbr,' '),
											fsd_pipe_id,
											fsd_mdfctn_cntr,
											NVL(fsd_ors_msg_typ,0),
											NVL ( fsd_ord_qty, 0 ),
											NVL ( fsd_exec_qty, 0 ),
											NVL ( fsd_cncl_qty, 0 ),
											NVL ( to_char(fsd_ack_tm,'dd-mon-yyyy hh24:mi:ss'),'*')
							FROM 		fsd_fo_sprd_dtls
							WHERE		fsd_ordr_rfrnc = :c_ordr_rfrnc;
					END;
				END-EXEC;
				break;

		case SPDREF_TO_ORDREF :
			strcpy( c_ordr_rfrnc, (char *)ptr_st_spd_ordbk->c_sprd_ord_rfrnc[0] );
			EXEC SQL EXECUTE 
				BEGIN
						OPEN :sys_cursor FOR
							SELECT	fsd_sprd_rfrnc,
											fsd_ordr_rfrnc,
											fsd_sprd_ord_ind,
											NVL(to_char ( fsd_lst_mod_tm, 'dd-mon-yyyy hh24:mi:ss' ),'*'),
											NVL(fsd_ack_nmbr,' '),
											fsd_pipe_id,
											fsd_mdfctn_cntr,
											NVL(fsd_ors_msg_typ,0),
											NVL ( fsd_ord_qty, 0 ),
											NVL ( fsd_exec_qty, 0 ),
											NVL ( fsd_cncl_qty, 0 ),
											NVL ( to_char ( fsd_ack_tm, 'dd-mon-yyyy hh24:mi:ss' ), '*' )
							FROM 		fsd_fo_sprd_dtls
							WHERE		fsd_sprd_rfrnc = :c_ordr_rfrnc
							ORDER BY fsd_ordr_rfrnc;		/* Ver 1.3 */
					END;
				END-EXEC;
				break;

		default:
				strcpy( ptr_st_err_msg->c_err_msg, "Invalid Operation Type" );
				fn_errlog ( c_ServiceName, "S31010", DEFMSG, 
                                             ptr_st_err_msg->c_err_msg );
				EXEC SQL FREE :sys_cursor;
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
				break;
	}
	if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31015", SQLMSG, ptr_st_err_msg->c_err_msg );
    EXEC SQL FREE :sys_cursor;
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }

	for ( i_cnt = 0; i_cnt <= 2; i_cnt++ )
	{
		EXEC SQL	FETCH :sys_cursor
							INTO 	:c_sprd_ord_rfrnc,
										:c_ordr_rfrnc_tmp,
										:c_sprd_ord_ind,
										:c_last_mod_tm,
										:c_xchng_ack_tmp,
										:c_pipe_id_tmp,
										:l_mdfctn_cntr,
										:l_ors_msg_typ,
										:l_ord_tot_qty,
										:l_exctd_qty,
										:l_can_qty,
                    :c_ack_tm;

		if ( SQLCODE != 0 )
		{
			if ( SQLCODE == NO_DATA_FOUND )
			{
				break;
			}
    	fn_errlog ( c_ServiceName, "S31020",
                                     SQLMSG, ptr_st_err_msg->c_err_msg );
			EXEC SQL CLOSE :sys_cursor;
    	EXEC SQL FREE :sys_cursor;
    	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
		}

		strcpy( ptr_st_spd_ordbk->c_sprd_ord_rfrnc[i_cnt],c_sprd_ord_rfrnc);
		strcpy( ptr_st_spd_ordbk->c_ordr_rfrnc[i_cnt],c_ordr_rfrnc_tmp);
		ptr_st_spd_ordbk->c_sprd_ord_ind[i_cnt] = c_sprd_ord_ind;
		strcpy( ptr_st_spd_ordbk->c_xchng_ack[i_cnt], c_xchng_ack_tmp);
		strcpy( ptr_st_spd_ordbk->c_pipe_id[i_cnt], c_pipe_id_tmp);
		ptr_st_spd_ordbk->l_mdfctn_cntr[i_cnt] = l_mdfctn_cntr;
		ptr_st_spd_ordbk->l_ors_msg_typ[i_cnt] = l_ors_msg_typ;
		ptr_st_spd_ordbk->l_ord_tot_qty[i_cnt] = l_ord_tot_qty;
		ptr_st_spd_ordbk->l_exctd_qty[i_cnt] = l_exctd_qty;
		ptr_st_spd_ordbk->l_can_qty[i_cnt] = l_can_qty;

    SETNULL ( c_last_mod_tm );
    SETNULL ( c_ack_tm );
    if(strcmp((char *)c_last_mod_tm.arr,"*")== 0)
    {
      strcpy ( ptr_st_spd_ordbk->c_lst_md_tm[i_cnt] ," ");
    }
    else
    {
      strcpy ( ptr_st_spd_ordbk->c_lst_md_tm[i_cnt] , 
																					( char * ) c_last_mod_tm.arr );
    }
    if(strcmp((char *)c_ack_tm.arr,"*")== 0)
    {
      strcpy ( ptr_st_spd_ordbk->c_ack_tm[i_cnt] ," ");
    }
    else
    {
      strcpy ( ptr_st_spd_ordbk->c_ack_tm[i_cnt] , 
																					( char * ) c_ack_tm.arr );
    }

	}

	if ( i_cnt == 0 )
	{
		switch( ptr_st_spd_ordbk->c_rqst_typ[0] )
		{
			case ACK_TO_ORD :
					EXEC SQL EXECUTE
						BEGIN
							OPEN :sys_cursor FOR
								SELECT	fsd_sprd_rfrnc,
												fsd_ordr_rfrnc,
												fsd_sprd_ord_ind,
												NVL(to_char ( fsd_lst_mod_tm, 'dd-mon-yyyy hh24:mi:ss' ),'*'),
												NVL(fsd_ack_nmbr,' '),
												fsd_pipe_id,
												fsd_mdfctn_cntr,
												NVL(fsd_ors_msg_typ,0),
												NVL ( fsd_ord_qty, 0 ),
												NVL ( fsd_exec_qty, 0 ),
												NVL ( fsd_cncl_qty, 0 ),
												NVL (to_char ( fsd_ack_tm, 'dd-mon-yyyy hh24:mi:ss' ), '*' )
								FROM 		fsd_fo_sprd_dtls_hstry
								WHERE		fsd_ack_nmbr = :c_xchng_ack
								AND 		fsd_pipe_id = :c_pipe_id;
						END;
					END-EXEC;
					break;
	
			case ORDREF_TO_SPDREF :
					EXEC SQL EXECUTE
						BEGIN
							OPEN :sys_cursor FOR
								SELECT	fsd_sprd_rfrnc,
												fsd_ordr_rfrnc,
												fsd_sprd_ord_ind,
												NVL(to_char ( fsd_lst_mod_tm, 'dd-mon-yyyy hh24:mi:ss' ),'*'),
												NVL(fsd_ack_nmbr,' '),
												fsd_pipe_id,
												fsd_mdfctn_cntr,
												NVL(fsd_ors_msg_typ,0),
												NVL ( fsd_ord_qty, 0 ),
												NVL ( fsd_exec_qty, 0 ),
												NVL ( fsd_cncl_qty, 0 ),
												NVL ( to_char ( fsd_ack_tm, 'dd-mon-yyyy hh24:mi:ss' ), '*' )
								FROM 		fsd_fo_sprd_dtls_hstry
								WHERE		fsd_ordr_rfrnc = :c_ordr_rfrnc;
						END;
					END-EXEC;
					break;
	
		case SPDREF_TO_ORDREF :
			EXEC SQL EXECUTE 
				BEGIN
						OPEN :sys_cursor FOR
							SELECT	fsd_sprd_rfrnc,
											fsd_ordr_rfrnc,
											fsd_sprd_ord_ind,
											NVL(to_char ( fsd_lst_mod_tm, 'dd-mon-yyyy hh24:mi:ss' ),'*'),
											NVL(fsd_ack_nmbr,' '),
											fsd_pipe_id,
											fsd_mdfctn_cntr,
											NVL(fsd_ors_msg_typ,0),
											NVL ( fsd_ord_qty, 0 ),
											NVL ( fsd_exec_qty, 0 ),
											NVL ( fsd_cncl_qty, 0 ),
											NVL ( to_char ( fsd_ack_tm, 'dd-mon-yyyy hh24:mi:ss' ), '*' )
							FROM 		fsd_fo_sprd_dtls_hstry
							WHERE		fsd_sprd_rfrnc = :c_ordr_rfrnc;
					END;
				END-EXEC;
				break;

			default:
				strcpy( ptr_st_err_msg->c_err_msg, "Invalid Operation Type" );
				fn_errlog ( c_ServiceName, "S31025", DEFMSG, 
                                             ptr_st_err_msg->c_err_msg );
				EXEC SQL FREE :sys_cursor;
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
				break;
		}
		if ( SQLCODE != 0 )
	  {
	    fn_errlog ( c_ServiceName, "S31030", SQLMSG, ptr_st_err_msg->c_err_msg );
	    EXEC SQL FREE :sys_cursor;
	    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
	  }
	
		for ( i_cnt = 0; i_cnt <= 2; i_cnt++ )
		{
			EXEC SQL	FETCH :sys_cursor
								INTO 	:ptr_st_spd_ordbk->c_sprd_ord_rfrnc[i_cnt],
											:ptr_st_spd_ordbk->c_ordr_rfrnc[i_cnt],
											:ptr_st_spd_ordbk->c_sprd_ord_ind[i_cnt],
											:c_last_mod_tm,
											:ptr_st_spd_ordbk->c_xchng_ack[i_cnt]:i_ind,
											:ptr_st_spd_ordbk->c_pipe_id[i_cnt],
											:ptr_st_spd_ordbk->l_mdfctn_cntr[i_cnt],
											:ptr_st_spd_ordbk->l_ors_msg_typ[i_cnt]:i_ind,
											:ptr_st_spd_ordbk->l_ord_tot_qty[i_cnt],
											:ptr_st_spd_ordbk->l_exctd_qty[i_cnt],
											:ptr_st_spd_ordbk->l_can_qty[i_cnt],
                      :c_ack_tm;
	
			if ( SQLCODE != 0 )
			{
				if ( SQLCODE == NO_DATA_FOUND )
				{
					break;
				}
	    	fn_errlog ( c_ServiceName, "S31035",
	                                     SQLMSG, ptr_st_err_msg->c_err_msg );
				EXEC SQL CLOSE :sys_cursor;
	    	EXEC SQL FREE :sys_cursor;
	    	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
			}

    	SETNULL ( c_last_mod_tm );
    	SETNULL ( c_ack_tm );
    	if(strcmp((char *)c_last_mod_tm.arr,"*")== 0)
    	{
      	strcpy ( ptr_st_spd_ordbk->c_lst_md_tm[i_cnt] ," ");
    	}
    	else
    	{
      	strcpy ( ptr_st_spd_ordbk->c_lst_md_tm[i_cnt] , 
																					( char * ) c_last_mod_tm.arr );
    	}
    	if(strcmp((char *)c_ack_tm.arr,"*")== 0)
    	{
      	strcpy ( ptr_st_spd_ordbk->c_ack_tm[i_cnt] ," ");
    	}
    	else
    	{
      	strcpy ( ptr_st_spd_ordbk->c_ack_tm[i_cnt] , 
																					( char * ) c_ack_tm.arr );
    	}
		}
		if ( i_cnt == 0 )
		{
	    fn_errlog ( c_ServiceName, "S31040", DEFMSG, ptr_st_err_msg->c_err_msg );
	    EXEC SQL FREE :sys_cursor;
	    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
		}
	}

	EXEC SQL CLOSE :sys_cursor;
	EXEC SQL FREE :sys_cursor;

  tpfree ( ( char * ) ptr_st_err_msg );
  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_st_spd_ordbk, 0, 0 );
}

