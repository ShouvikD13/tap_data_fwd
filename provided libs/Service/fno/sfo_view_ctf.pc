/*******************************************************************************/
/*    Program             : SFO_VIEW_CTF                                     	 */
/*                                                                             */
/*    Input               : FFO_USR_ID	                                       */
/*                          FFO_SSSN_ID                                        */
/*                          FFO_EBA_MTCH_ACT_NO                                */
/*												  FFO_XCHNG_CD																		   */
/*												  FFO_FROM_DT			  																 */
/*													FFO_TO_DT																					 */	
/*                                                                             */
/*    Output              : FFO_EBA_MTCH_ACT_NO                                */
/*                          FFO_XCHNG_CD                                       */
/*                          FFO_PRDCT_TYP                                      */
/*                          FFO_CTGRY_INDSTK                                   */
/*                          FFO_UNDRLYNG                                       */
/*                          FFO_EXPRY_DT                                       */
/*                          FFO_EXER_TYP                                       */
/*                          FFO_OPT_TYP                                        */
/*                          FFO_STRK_PRC                                       */
/*                          FFO_ORDR_FLW                                       */
/*                          FFO_EXEC_QTY                                       */
/*                          FFO_CLS_PRC                                        */
/*                          FFO_RQST_TM                                        */
/*                          FFO_CNTRCT_TAG                   									 */
/*																																						 */
/*    Description         : This service gets the record which are converted	 */
/*													from Futureplus to future													 */
/*                                                                             */
/*    Log                 : 1.0   09-Apr-2008   Kunal Jadav                    */
/*												:	1.1		16-Apr-2008		Kunal	Jadav										 */
/*												:	1.2		15-Mar-2011		Sandeep Patil									 */
/*                                                                             */
/*												:	1.3		20-Jan-2012		Mahesh Shinde									 */
/*												:	1.4		21-Feb-2012		Sandip Tambe									 */			
/*												: 1.5	  29-Nov-2012		Vishnu Nair										 */
/*												: 1.6		13-Feb-2014		Bhushan Sonwane								 */
/*												: 1.8		14-Dec-2015		Navina D.     								 */
/*                        : 1.9   24-Oct-2016   Kishor Borkar                  */
/*******************************************************************************/
/*    1.0   -   New Release                                                    */
/*		1.1		- 	IBM Migration Changes																					 */
/*		1.2		-		SilverLight Changes																						 */
/*    1.3   -   Convert to Future Plus (CR-ISEC10-18963)											 */
/*		1.4		-		FNO BSE Changes																								 */	
/*		1.5		-   Restricting NRI customers				 															 */
/*    1.6		-   Enabling FP and SLTP FP for NRI clients												 */	
/*    1.8		-   Channel to be displayed on frontend   												 */	
/*    1.9   -   Check Session IP - PHASE_III                                   */
/*******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_fml_def.h>
/*** #include <fo_view_def.h> Commented in Ver 1.9 ***/
#include <fo_view_def.h> /* Added in Ver 1.9 */
#include <fml_rout.h>     /* Added in Ver 1.9 */
#include <fn_ddr.h>
#include <fn_session.h>						/*	Ver	1.1	*/
#include <fn_log.h>								/*	Ver	1.1	*/
#include <fn_tuxlib.h>						/*	Ver	1.1	*/
#include <fn_read_debug_lvl.h>		/*	Ver	1.1	*/

void SFO_VIEW_CTF( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;
	FBFR32 *ptr_fml_Obuf;

	char c_ServiceName[33];
	char c_err_msg[256];
	char c_prd_typ;
	char c_indstk;
	char c_undrlyng[7];
	char c_expry_dt[23];
	char c_exer_typ;
	char c_opt_typ;
	char c_ordr_flw;
	char c_cls_tm[23];
	char c_cntrct_tag;
	char c_channel[4]="\0";		/*** Ver 1.8 ***/

	int i_err[7];          /*** Ver 1.3 Changed from 6 to 7 ***/
	int i;
	int i_returncode;

	long l_strk_prc;
	long l_cls_qty;
	long l_cls_rt;

	EXEC SQL BEGIN DECLARE SECTION;
		varchar c_from_dt [ LEN_DATE ];
		varchar c_to_dt	[ LEN_DATE ];	 
		char c_mtch_acc [ 11 ];
		char c_xchng_cd [ 4 ];
		char c_usr_id [ 9 ];
		long	l_session_id;
	EXEC SQL END DECLARE SECTION;

  /*** Ver 1.9 Starts Here ***/
  struct vw_usr_prfl st_usr_prfl;
  struct vw_err_msg st_err_msg;

  MEMSET(st_usr_prfl);
  MEMSET(st_err_msg);
  /*** Ver 1.9 Ends Here ***/

	sql_cursor cur_ctf;			/***	Ver	1.2	***/

	ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
	ptr_fml_Obuf = NULL;  
	strcpy( c_ServiceName, rqst->name );
	memset(c_xchng_cd,'\0',sizeof(c_xchng_cd));			/** Ver 1.4 ***/
	INITDBGLVL(c_ServiceName);                /* Ver 1.1 */

	i_err[0] = Fget32( ptr_fml_Ibuf, FFO_SSSN_ID, 0, (char *)&l_session_id, 0);
	i_err[1] = Fget32( ptr_fml_Ibuf, FFO_EBA_MTCH_ACT_NO, 0, (char *)c_mtch_acc, 0); 
	i_err[2] = Fget32( ptr_fml_Ibuf, FFO_XCHNG_CD, 0, (char *)c_xchng_cd, 0);
	i_err[3] = Fget32( ptr_fml_Ibuf, FFO_FROM_DT, 0, (char *)c_from_dt.arr, 0);
	i_err[4] = Fget32( ptr_fml_Ibuf, FFO_TO_DT, 0, (char *)c_to_dt.arr, 0);
	i_err[5] = Fget32( ptr_fml_Ibuf, FFO_USR_ID, 0, (char *)c_usr_id, 0);
/**  i_err[6] = Fget32( ptr_fml_Ibuf, FFO_PRDCT_TYP, 0,(char *)&c_prd_typ, 0);*** Ver 1.3 Product Type Taken From Front END***/  /** Ver 1.4 Comment **/

	/***** Ver 1.4 Starts ***/
	 
	if(Fget32( ptr_fml_Ibuf, FFO_PRDCT_TYP, 0,(char *)&c_prd_typ, 0) == -1)
	{
		if( Ferror32 == FNOTPRES )
    {
      c_prd_typ= 'P';
			fn_userlog(c_ServiceName,"Product code Not passed from front End");
			fn_userlog(c_ServiceName,"Copied Product Type:%c:",c_prd_typ);	
    }
		else
    {
      fn_errlog( c_ServiceName, "S31005", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	}
	if(strcmp(c_xchng_cd, "ALL") == 0)
	{
 		strcpy(c_xchng_cd,"%");
 		rtrim(c_xchng_cd);
	}
	/**** Ver 1.4 Ends ******/

  /*** Ver 1.9 Starts Here ***/
  i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_usr_prfl,
                           "vw_usr_prfl" );

  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuf, 0L, 0);
  }

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );

  i_returncode = fn_chk_sssn( c_ServiceName, &st_usr_prfl,
                                             &st_err_msg ) ;

  if ( i_returncode == -1 )
  {
    fn_errlog(c_ServiceName,"S31015", LIBMSG, st_err_msg.c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuf, 0L, 0);
  }
  /*** Ver 1.9 Ends Here ***/

  /*** Commented in Ver 1.9 ***
  i_returncode = chk_sssn(c_ServiceName,c_usr_id,l_session_id,c_err_msg);

  if(i_returncode ==  -1)
  {
     fn_errlog(c_ServiceName,"S31020", FMLMSG, c_err_msg);
     strcpy(c_err_msg,"Session Timed Out");
     Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
     tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuf, 0L, 0);
  }
  Comment Ends for Ver 1.9 ****/
	SETLEN(c_from_dt);
	SETLEN(c_to_dt);

	if( DEBUG_MSG_LVL_3 ) 
	{
		fn_userlog( c_ServiceName, " Session id: |%ld|", l_session_id);
		fn_userlog( c_ServiceName, " Xchng cd : |%s|", c_xchng_cd);
		fn_userlog( c_ServiceName, " Match Acc: |%s|", c_mtch_acc);
		fn_userlog( c_ServiceName, " From Date: |%s|", (char *)c_from_dt.arr);
		fn_userlog( c_ServiceName, " To Date : |%s|", (char *)c_to_dt.arr);
		fn_userlog( c_ServiceName, " User id: |%s|", c_usr_id);
		fn_userlog( c_ServiceName, " Product Type is |%c|",c_prd_typ);  /*** Ver 1.3 ***/
	}

	

	/************* ver 1.5 Starts ***********/

	/*** Commented in Ver 1.6 ***

	if	( (strncmp(c_mtch_acc, "750", 3)  == 0 ) ||
      	(strncmp(c_mtch_acc, "751", 3)  == 0 ) ||
      	(strncmp(c_mtch_acc, "650", 3)  == 0 ) ||
      	(strncmp(c_mtch_acc, "651", 3)  == 0 )
			)
        
      {
      	fn_errlog( c_ServiceName, "S31025", "This facility is not enabled for NRI customers.", c_err_msg  );
        strcpy(c_err_msg,"This facility is not enabled for NRI customers");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

	***/

	if  ( strcmp(c_xchng_cd,"BFO") == 0 )
			{
				fn_errlog( c_ServiceName, "S31030", "This facility is currently not enabled for BSE.", c_err_msg  );
        strcpy(c_err_msg,"This facility is currently not enabled for BSE");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

	/*********** ver 1.5 ends **************/	

	for(i = 0; i < 7; i++)    /*** Ver 1.3 Check for 7 FMLs ***/
  {
    if(i_err[i] == -1)
    {
			tpfree((char *) ptr_fml_Ibuf);
			fn_userlog( c_ServiceName, "Error in Fadd for i [%d]", i);
			fn_errlog( c_ServiceName, "S31035", FMLMSG, c_err_msg);
      Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);
    }
  }	

	/* EXEC SQL DECLARE cur_ctf CURSOR for
		SELECT	FFF_CLM_MTCH_ACCNT,
						FFF_XCHNG_CD,
						FFF_PRDCT_TYP,
						FFF_INDSTK,
						FFF_UNDRLYNG,
						FFF_EXPRY_DT,
						FFF_EXER_TYP,
						FFF_OPT_TYP,
						FFF_STRK_PRC,
						FFF_ORDR_FLW,
						FFF_CLS_QTY,
						FFF_CLS_RT,
						to_char( FFF_CLS_TM, 'dd-Mon-yyyy hh24:mi:ss'),
						FFF_CNTRCT_TAG
		FROM		FFF_FO_FUT_FPLSCNV
		WHERE		FFF_CLM_MTCH_ACCNT = :c_mtch_acc
		AND			FFF_XCHNG_CD = :c_xchng_cd
		AND			to_char(FFF_CLS_TM, 'dd-Mon-yyyy') >= to_date(:c_from_dt, 'dd-Mon-yyyy')
 		AND			to_char(FFF_CLS_TM, 'dd-Mon-yyyy') <= to_date(:c_to_dt, 'dd-Mon-yyyy');  */


	/********	Commented In Ver 1.2

	EXEC SQL DECLARE cur_ctf CURSOR for
		SELECT	nvl(FFF_CLM_MTCH_ACCNT, 'N/A'),
						nvl(FFF_XCHNG_CD, 'N/A'),
						nvl(FFF_PRDCT_TYP, '?'),
						nvl(FFF_INDSTK,'?'),
						nvl(FFF_UNDRLYNG,'N/A'),
						nvl(FFF_EXPRY_DT,'01-Jan-2000'),
						nvl(FFF_EXER_TYP,'?'),
						nvl(FFF_OPT_TYP,'?'),
						nvl(FFF_STRK_PRC, 999),
						nvl(FFF_ORDR_FLW, '?'),
						nvl(FFF_CLS_QTY, 999),
						nvl(FFF_CLS_RT, 999),
						nvl(to_char( FFF_CLS_TM, 'dd-Mon-yyyy hh24:mi:ss'), '01-Jan-2000'),
						nvl(FFF_CNTRCT_TAG, '?')
		FROM		FFF_FO_FUT_FPLSCNV
		WHERE		FFF_CLM_MTCH_ACCNT = :c_mtch_acc
		AND			FFF_XCHNG_CD = :c_xchng_cd
		AND			to_char(FFF_CLS_TM, 'dd-Mon-yyyy') >= to_date(:c_from_dt, 'dd-Mon-yyyy')
 		AND			to_char(FFF_CLS_TM, 'dd-Mon-yyyy') <= to_date(:c_to_dt, 'dd-Mon-yyyy'); 

	EXEC SQL OPEN cur_ctf;


	*************************************************************************************************/

	/***	Ver	1.2	Starts	***/

	EXEC SQL ALLOCATE :cur_ctf;

	if ( strcmp(c_mtch_acc,"*") ==  0 )
	{
		if ( c_usr_id[0]  ==  BPID  )
		{
			EXEC SQL EXECUTE
				BEGIN
					OPEN :cur_ctf FOR
    				SELECT  NVL(FFF_CLM_MTCH_ACCNT, 'N/A'),
        				    NVL(FFF_XCHNG_CD, 'N/A'),
            				NVL(FFF_PRDCT_TYP, '?'),
		            		NVL(FFF_INDSTK,'?'),
    		        		NVL(FFF_UNDRLYNG,'N/A'),
        		    		NVL(FFF_EXPRY_DT,'01-Jan-2000'),
            				NVL(FFF_EXER_TYP,'?'),
            				NVL(FFF_OPT_TYP,'?'),
       			     		NVL(FFF_STRK_PRC, 999),
          		  		NVL(FFF_ORDR_FLW, '?'),
            				NVL(FFF_CLS_QTY, 999),
            				NVL(FFF_CLS_RT, 999),
   			         		NVL(to_char( FFF_CLS_TM, 'dd-Mon-yyyy hh24:mi:ss'), '01-Jan-2000'),
        		    		NVL(FFF_CNTRCT_TAG, '?'),
										NVL(FFF_CHANNEL,'N/A')		/*** Ver 1.8 ***/
    				FROM    FFF_FO_FUT_FPLSCNV,CLM_CLNT_MSTR
    				WHERE   FFF_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
    			/*	AND     FFF_XCHNG_CD = :c_xchng_cd							*** Ver 1.4 Comment ***/
    				AND     FFF_XCHNG_CD LIKE :c_xchng_cd							/*** Ver 1.4 ****/
    				AND     TO_CHAR(FFF_CLS_TM, 'dd-Mon-yyyy') >= to_date(:c_from_dt, 'dd-Mon-yyyy')
    				AND     TO_CHAR(FFF_CLS_TM, 'dd-Mon-yyyy') <= to_date(:c_to_dt, 'dd-Mon-yyyy')
						AND			CLM_BP_ID	=	:c_usr_id
						AND 		FFF_PRDCT_TYP = :c_prd_typ;				/*** Ver 1.3  ***/

				END;
			END-EXEC;

		}
		else
		{
			EXEC SQL EXECUTE
				BEGIN
					OPEN  :cur_ctf FOR
    				SELECT  NVL(FFF_CLM_MTCH_ACCNT, 'N/A'),
        				    NVL(FFF_XCHNG_CD, 'N/A'),
            				NVL(FFF_PRDCT_TYP, '?'),
      		      		NVL(FFF_INDSTK,'?'),
          		  		NVL(FFF_UNDRLYNG,'N/A'),
            				NVL(FFF_EXPRY_DT,'01-Jan-2000'),
            				NVL(FFF_EXER_TYP,'?'),
            				NVL(FFF_OPT_TYP,'?'),
            				NVL(FFF_STRK_PRC, 999),
            				NVL(FFF_ORDR_FLW, '?'),
            				NVL(FFF_CLS_QTY, 999),
            				NVL(FFF_CLS_RT, 999),
            				NVL(to_char( FFF_CLS_TM, 'dd-Mon-yyyy hh24:mi:ss'), '01-Jan-2000'),
            				NVL(FFF_CNTRCT_TAG, '?'),
										NVL(FFF_CHANNEL,'N/A')		/*** Ver 1.8 ***/
    				FROM    FFF_FO_FUT_FPLSCNV,UAC_USR_ACCNTS
    				WHERE   FFF_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
    			/*	AND     FFF_XCHNG_CD = :c_xchng_cd						*****Ver 1.4 Comment **/
    				AND     FFF_XCHNG_CD = :c_xchng_cd							/*** Ver 1.4 ***/
    				AND     TO_CHAR(FFF_CLS_TM, 'dd-Mon-yyyy') >= to_date(:c_from_dt, 'dd-Mon-yyyy')
    				AND     TO_CHAR(FFF_CLS_TM, 'dd-Mon-yyyy') <= to_date(:c_to_dt, 'dd-Mon-yyyy')
						AND			UAC_USR_ID	=	:c_usr_id
						AND     FFF_PRDCT_TYP = :c_prd_typ;        /*** Ver 1.3  ***/

				END;
			END-EXEC;
		}
	}
	else
	{
		EXEC SQL EXECUTE
			BEGIN
			OPEN	 :cur_ctf FOR
    		SELECT  NVL(FFF_CLM_MTCH_ACCNT, 'N/A'),
      	      	NVL(FFF_XCHNG_CD, 'N/A'),
        	    	NVL(FFF_PRDCT_TYP, '?'),
          	  	NVL(FFF_INDSTK,'?'),
            		NVL(FFF_UNDRLYNG,'N/A'),
            		NVL(FFF_EXPRY_DT,'01-Jan-2000'),
    	        	NVL(FFF_EXER_TYP,'?'),
      	      	NVL(FFF_OPT_TYP,'?'),
        	    	NVL(FFF_STRK_PRC, 999),
          	  	NVL(FFF_ORDR_FLW, '?'),
            		NVL(FFF_CLS_QTY, 999),
            		NVL(FFF_CLS_RT, 999),
            		NVL(to_char( FFF_CLS_TM, 'dd-Mon-yyyy hh24:mi:ss'), '01-Jan-2000'),
            		NVL(FFF_CNTRCT_TAG, '?'),
								NVL(FFF_CHANNEL,'N/A')		/*** Ver 1.8 ***/
    		FROM    FFF_FO_FUT_FPLSCNV
    		WHERE   FFF_CLM_MTCH_ACCNT = :c_mtch_acc
    		/*AND     FFF_XCHNG_CD = :c_xchng_cd				***** Ver 1.4 Comment ***/
    		AND     FFF_XCHNG_CD LIKE :c_xchng_cd					/*** ver 1.4 ***/
    		AND     to_char(FFF_CLS_TM, 'dd-Mon-yyyy') >= to_date(:c_from_dt, 'dd-Mon-yyyy')
    		AND     to_char(FFF_CLS_TM, 'dd-Mon-yyyy') <= to_date(:c_to_dt, 'dd-Mon-yyyy')
				AND     FFF_PRDCT_TYP = :c_prd_typ;        /*** Ver 1.3  ***/
	
			END;
		END-EXEC;
	}

	/***	Ver	1.2	Ends	***/

	if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }	

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog( c_ServiceName, "Getting Records");
	}

	for(;;)
	{
		EXEC SQL
			FETCH	:cur_ctf			/***	Ver	1.2	***/
			INTO	:c_mtch_acc,
					  :c_xchng_cd,
						:c_prd_typ,
						:c_indstk,
						:c_undrlyng,
						:c_expry_dt,
						:c_exer_typ,
						:c_opt_typ,
						:l_strk_prc,
						:c_ordr_flw,
						:l_cls_qty,
						:l_cls_rt,
						:c_cls_tm,
						:c_cntrct_tag,
						:c_channel;			/*** Ver 1.8 ***/
					
		if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
				fn_userlog( c_ServiceName, "ALL Done");
        break;
      }
      fn_errlog( c_ServiceName, "S31045", SQLMSG, c_err_msg );
      EXEC SQL CLOSE :cur_ctf;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }	

		rtrim((char *) c_undrlyng);
		rtrim((char *) c_expry_dt);
		rtrim((char *) c_cls_tm);
		
		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog( c_ServiceName, "Packing Data");
			fn_userlog( c_ServiceName, "c_mtch_acc : |%s|", c_mtch_acc);
			fn_userlog( c_ServiceName, "c_xchng_cd : |%s|", c_xchng_cd);
			fn_userlog( c_ServiceName, "c_prd_typ : |%c|", c_prd_typ);
			fn_userlog( c_ServiceName, "c_indstk  : |%c|", c_indstk);
			fn_userlog( c_ServiceName, "c_undrlyng : |%s|", c_undrlyng);
			fn_userlog( c_ServiceName, "c_expry_dt : |%s|", c_expry_dt);
			fn_userlog( c_ServiceName, "c_exer_typ : |%c|", c_exer_typ);
			fn_userlog( c_ServiceName, "c_opt_typ : |%c|", c_opt_typ);
			fn_userlog( c_ServiceName, "l_strk_prc : |%ld|", l_strk_prc);
			fn_userlog( c_ServiceName, "c_ordr_flw : |%c|", c_ordr_flw);
			fn_userlog( c_ServiceName, "l_cls_qty  : |%ld|", l_cls_qty);
			fn_userlog( c_ServiceName, "l_cls_rt : |%ld|", l_cls_rt);
			fn_userlog( c_ServiceName, "c_cls_tm : |%s|", c_cls_tm);
			fn_userlog( c_ServiceName, "c_cntrct_tag : |%c|", c_cntrct_tag);
			fn_userlog( c_ServiceName, "c_channel : |%s|", c_channel);		/*** Ver 1.8 ***/
		}

		i_returncode = fn_pack_vartofml( c_ServiceName,
                                     c_err_msg,
                                     &ptr_fml_Obuf,
                                     15,												/*** Ver 1.8 changed from 14 to 15 ***/
                                     FFO_EBA_MTCH_ACT_NO, ( char *)c_mtch_acc,
                                     FFO_XCHNG_CD, ( char *)c_xchng_cd,
                                     FFO_PRDCT_TYP, ( char *)&c_prd_typ,
                                     FFO_CTGRY_INDSTK, ( char *)&c_indstk,
                                     FFO_UNDRLYNG, ( char * )c_undrlyng,
																		 FFO_EXPRY_DT, ( char *)c_expry_dt,
																		 FFO_EXER_TYP, ( char *)&c_exer_typ,
																		 FFO_OPT_TYP, ( char *)&c_opt_typ,
																		 FFO_STRK_PRC, ( char *)&l_strk_prc,
																		 FFO_ORDR_FLW, ( char *)&c_ordr_flw,
																		 FFO_EXEC_QTY, ( char *)&l_cls_qty,
																		 FFO_CLS_PRC, ( char *)&l_cls_rt,
																		 FFO_RQST_TM, ( char *)c_cls_tm,
                                     FFO_CNTRCT_TAG, ( char *)&c_cntrct_tag,
																		 FFO_CHANNEL, ( char *)c_channel);	/*** Ver 1.8 ***/

    if( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31050", LIBMSG, c_err_msg );
      EXEC SQL CLOSE :cur_ctf;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog( c_ServiceName, "Data Packed");
		}
	}

	tpreturn(TPSUCCESS, SUCC_BFR, (char *)ptr_fml_Obuf, 0L, 0 ); 
}
