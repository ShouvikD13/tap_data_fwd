/******************************************************************************/
/*	Program	    			:	SFO_CNTOPT_PSTN                                       */
/*                                                                            */
/*  Input             : FFO_OPERATION_TYP                                     */
/*                      FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_ROUT_CRT                                          */
/*                                                                            */
/*  Output            : FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_OPT_TYP                                           */
/*                      FFO_STRK_PRC                                          */
/*                      FFO_CTGRY_INDSTK                                      */
/*                      FFO_C_OPNPSTN_FLW                                     */
/*                      FFO_C_OPNPSTN_QTY                                     */
/*                      FFO_C_ORG_OPN_VAL                                     */
/*                      FFO_CVR_QTY                                           */
/*                      FFO_CI_BUY_QTY                                        */
/*                      FFO_CI_SELL_QTY                                       */
/*                      FFO_EXRC_QTY                                          */
/*                      FFO_I_EXRC_QTY                                        */
/*                      FFO_C_ORDR_MRGN                                       */
/*                      FFO_C_TRD_MRGN                                        */
/*                      FFO_MTM_TRG_PRC                                       */
/*                      FFO_LST_TRD_PRC                                       */
/*                      FFO_MIN_LOT_QTY                                       */
/*                      FFO_SPL_FLG                                           */
/*											FFO_PRCNTG_CHNG    ver 1.1 														*/			
/*											FFO_INDX_INDCTR    ver 3.5 														*/			
/*                                                                            */
/*  Description       : This service retrieves the values of the entire       */
/*                      contract Options position book given different input  */
/*                      parameters based on two different operation types:    */
/*                      U - Underlying as Input	                              */
/*                      W - Without Underlying                                */
/*                      J - For Joint Square Off                              */
/*                                                                            */
/*  Log               : 1.0   31-Jan-2002   S. Swaminathan										*/
/*  Log               : 1.1   20-Jun-2003   Mohit Mehrotra                    */
/*  Log               : 1.2   02-Jan-2007   Shailesh                          */
/*	Log								:	1.3		20-Dec-2007		Sushil Sharma											*/
/*	Log								:	1.4		19-Aug-2008		Shailesh Hinge										*/
/*	Log								:	1.5		22-Mar-2011		Shamili Dalvi											*/
/*	Log								:	1.6		27-Jun-2013		Bhushan	Sonwane										*/
/*	Log								:	1.7		22-Oct-2013   Sandip Tambe   										*/
/*  Log               : 1.8   25-Oct-2013   Samip M                           */
/*  Log               : 2.0   09-Feb-2015   Sachin Birje                      */
/*  Log               : 2.2   29-Jun-2015   Anand Dhopte                      */
/*  Log               : 2.3   26-Oct-2015   Anand Dhopte                      */
/*  Log               : 2.4   04-Jul-2016   Sachin Birje                      */
/*  Log               : 2.5   21-Mar-2017   Anand Dhopte                      */
/*	Log								:	2.6		11-May-2017		Bhushan Harekar										*/
/*  Log								: 2.7		04-Oct-2017   Afzal K.													*/
/*  Log               : 2.8   23-Jan-2018   Afzal K.                          */
/*  Log               : 2.9   16-Aug-2018   Parag Kanojia                     */
/*  Log               : 3.0   21-Dec-2018   Akash Balasubramanian							*/
/*  Log               : 3.1   05-Mar-2019   Afzal K.                          */
/*  Log               : 3.2   24-Jul-2019   Akash Balasubramanian             */
/*  Log               : 3.3   27-Sep-2019   Akash Balasubramanian             */
/*  Log               : 3.4   21-Aug-2020   Mrinal Kishore                    */
/*  Log               : 3.5   11-May-2021   Abhinav Kumbhar                   */
/*  Log               : 3.6   21-Jun-2021   Abhinav Kumbhar                   */
/*  Log               : 3.7   26-Oct-2021   Mahesh Regulwar                   */  
/******************************************************************************/
/*  1.0     -  New Release                                                    */
/*  1.1     -  Market Wide Position changes                                   */
/*  1.2     -  DT Wrapper changes                                             */
/*	1.3			-	 AIX Migration																									*/
/*  1.4	    - Cancellation/Squareoff link display CR                          */
/*  1.5	    - Advisor's Arena																									*/
/*  1.6     - Add Margin Flag Introduction  									                */
/*  1.7     - Trigger price highlight as per spot price movement         			*/
/*  1.8     - Bug fix for Advisor Arena module                                */
/*  2.0     -  Auto MTM Changes                                               */
/*  2.2     - FCM-FTQ Merger Changes                                          */
/*  2.3     - Session ID taken from structure varible                         */
/*  2.4     - debug Level cahnges                                             */
/*	2.6			- Log Maintainance 																								*/
/*  2.5     - Square Off at Market changes for other front end                */
/*  2.7     - Introduced Cancel All for DL.Net 																*/
/*  2.8     - Introduced "Sqaure Off All Positions At Market" flag for DL.NET */
/*  2.9     - Physical Settlement of Stock Derivative Phase 2 Changes         */
/*  3.0     - Logs introduced before and after calling function Check Session */
/*  3.1     - Advisor Trading Screen Changes                                  */
/*  3.2     - Delivery Margin changes                                         */
/*  3.3     - Revised Delivery Margin changes                                 */
/*  3.4     - BO_LODM Master change                                 					*/
/*  3.5     - Delivery and non-Delivery option CR_ISEC04_132410      					*/
/*  3.6     - CR-ISEC14-149749_Open_Position_Sorting                          */
/*  3.7     - CR-ISEC14-158350 Revamping of Open Positions Page in F&O Segment */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>             /*  Ver 1.3 : Added */
#include <fn_session.h>         /*  Ver 1.3 : Added */
#include <fn_read_debug_lvl.h>  /*  Ver 1.3 : Added */


void SFO_CNTOPT_PSTN( TPSVCINFO *rqst )
{

	FBFR32 *ptr_fml_Ibuf;
	FBFR32 *ptr_fml_Obuf;

	char c_ServiceName[33];
  char c_errmsg[256];
	char c_err_msg[256];             /**Ver 1.2 **/
	char c_spl_flg;
	char c_addmrgn_flg = 'N';         /***  Ver 1.6 ***/
	char c_trg_prc_stts = 'N';        /***  Ver 1.7 ***/
  char c_mtm_alrt_flg='\0';         /***  Ver 2.0 ***/
  char c_sqoff_at_market_flag = 'N';  /***  Ver 2.5 ***/
  char c_cancel_all_flag = 'N' ;      /*** Ver 2.7 ***/
	char c_sqr_off_all_at_mkt = 'N' ;   /*** Ver 2.8 ****/
	char c_setlmnt_flg = '\0';          /*** Ver 2.9 ***/
  char c_spn_flg = '\0';              /*** Ver 3.1***/
  char c_undrly[7];                   /**** Ver 3.2 ***/
  char c_phy_flg='\0';                /**** Ver 3.2 ***/
  char c_prd_temp_typ='\0';           /**** Ver 3.2 ***/
  char c_ltq_dt[12];                  /**** Ver 3.2 ***/
  char c_fsp_dt[12];                  /**** Ver 3.2 ***/
  char c_trade_dt[12] = "\0";         /*** Ver 3.4 ***/
	char c_indx_indctr = '\0';     			/*** Ver 3.5 ***/
	char c_all_flg = 'N';         			/*** Ver 3.5 ***/
	char c_flm_expr_dt[12];             /*** Ver 3.5 ***/
  char c_dlvry_enbl_flg = '\0';  			/*** Ver 3.5 ***/
  char c_dlvry_mode_flg = '\0';  			/*** Ver 3.5 ***/
  char c_dlvry_sttlmnt_typ = '\0';    /*** Ver 3.5 ***/
  double d_dlvry_oblgamt_blckd = 0.0;     /*** Ver 3.5 ***/
  long l_dlvry_qty_blckd = 0;         /*** Ver 3.5 ***/
	
  int i_sqroffmkt_flg_cnt = 0;  /*** ver 2.8 ***/
  int  i_returncode;
  int  i_err[5];                    /**Size changed from 4 to 5**/ 
  int  i_ferr[5];                   /**Size changed from 4 to 5**/
  int  i_cnt;
  int  i_count;											/**Ver 1.2 **/
	int  rec_cnt=0;                    /*Ver 1.2 **/
	int  i_size=0;										/**Ver 1.2 **/
  int i_mnth_flg=0;                 /** Ver 3.2 **/
  int i_cls_prc_chk=0;              /** Ver 3.2 **/

  long l_prcnt; /* 1.1 */
	long ret_val=0;                   /** Ver 1.2 **/
	long l_size_ocpd;								  /** Ver 1.2 **/			
	long li_sssn_id=0;								/** Ver 1.5 **/
  long l_new_trg_price=0;           /** Ver 2.0 **/
  long l_cls_prc=0;                 /** Ver 3.2 **/                  
  long l_stk_prc=0;                 /** Ver 3.2 **/

  double d_am_mm_diff_prcnt=0;      /** Ver 2.0 **/
  double d_dlvry_mrgn=0.0;                  /** Ver 3.2 **/
  double d_ISec_buff_mrgn_prcnt=0.0;        /** Ver 3.2 **/
  double d_dlvry_min_mrgn_prcnt=0.0;        /** Ver 3.2 **/
  double d_new_delvry_mrgn_val=0.0;         /** Ver 3.2 **/
  double d_var_mrgn=0.0;                    /** Ver 3.2 **/
  double d_extrm_lss_mrgn=0.0;              /** Ver 3.2 **/
  double d_current_delvry_mrgn_prcnt=0.0;   /** Ver 3.2 **/
  double d_reqd_dlvry_mrgn=0.0;              /** Ver 3.2 **/
  double d_cntrct_value=0.0;                 /*** Ver 3.2 **/
  double d_mrggn_value=0.0;                 /*** Ver 3.2 ***/
  double d_avg_prcs = 0.0;                  /*** Ver 3.7 ***/

  EXEC SQL BEGIN DECLARE SECTION;
    struct vw_usr_prfl st_usr_prfl;
		struct vw_cntopt_pos st_cntopt_pos;
		sql_cursor	sys_cursor;
		char c_opr_typ;
		char c_rqst_typ = 'N';			/** Ver 1.5 **/
		char c_mtch_accnt_no[11];
		char c_xchng_cd[4];
		char c_undrlyng[7];
		char c_prd_typ;
		char c_ctgry_indstk;
		char c_expry_dt[12];        
		char c_exrc_typ;
		char c_opnpstn_flw;
		long l_opnpstn_qty;
		double d_opnpstn_val;
		long l_cvr_qty;
		long l_lst_trdd_prc;
		long l_spot_prc =0 ;						/*** Ver 1.7 ***/
		long l_lot_size;
    long l_strike_prc;
    long l_ibuy_qty;
    long l_isell_qty;
    long l_exrc_qty;
    long l_iexrc_qty;
    long l_dont_exrc_qty;
    double d_ordr_mrgn;
    double d_trd_mrgn;
		long l_mtm_trg_prc;
    char c_opt_typ;
  EXEC SQL END DECLARE SECTION;

	struct vw_err_msg st_err_msg;
 
  MEMSET(c_ltq_dt);    /**** Ver 3.2 ***/
  MEMSET(c_fsp_dt);    /**** Ver 3.2 ***/

	ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.3 : Added   */

	i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_usr_prfl,
                           "vw_usr_prfl" );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	strcpy ( ( char * )c_mtch_accnt_no, st_usr_prfl.c_cln_mtch_accnt );

if( DEBUG_MSG_LVL_5 ) {          /*  Ver 1.3 : Debug level Change  */
	fn_userlog( c_ServiceName,"c_mtch_accnt_no        :%s:", c_mtch_accnt_no );
}
	/* ************	Ver 2.6 Starts************* */
	
	if( DEBUG_MSG_LVL_0 ) {        
	fn_userlog( c_ServiceName,"USRPSTN MTCH:%s:user_id:%s:", c_mtch_accnt_no,st_usr_prfl.c_user_id );
	}
	/* ************	Ver 2.6 Ends************* */
  
	/*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );

	i_err[0] = Fget32( ptr_fml_Ibuf, FFO_OPERATION_TYP, 0,
                                   (char *)&c_opr_typ, 0 );
  i_ferr [0] = Ferror32;

	if ( i_err[0] == -1 )
	{
		fn_errlog( c_ServiceName, "S31010", FMLMSG, c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

if( DEBUG_MSG_LVL_5 ) {          /*  Ver 1.3 : Debug level Change  */
	fn_userlog( c_ServiceName,"c_opr_typ   :%c:", c_opr_typ );
}

	i_err[1] = Fget32( ptr_fml_Ibuf, FFO_XCHNG_CD, 0,
                                   (char *)c_xchng_cd, 0 );
  i_ferr [1] = Ferror32;

	i_err[2] = Fget32( ptr_fml_Ibuf, FFO_UNDRLYNG, 0,
                                   (char *)c_undrlyng, 0 );
  i_ferr [2] = Ferror32;


	/*************** Ver 1.5 Starts ************/

	i_err[3] = Fget32( ptr_fml_Ibuf,FML_RQST_TYP,0,
																	(char *)&c_rqst_typ, 0 );			
	i_ferr [3] = Ferror32;
	if ( i_err[3] == -1 )	
	{

			if( DEBUG_MSG_LVL_3 ) {
			fn_userlog( c_ServiceName,"Normal User");
			fn_userlog(c_ServiceName,"Advisor's id not present");
			}
			c_rqst_typ = 'N';

	}

	/*************** Ver 1.5 Ends ************/

    /******Ver 3.1 starts*****/

    i_err[4] = Fget32( ptr_fml_Ibuf, FFO_CLSR_TYP, 0,(char *)&c_spn_flg, 0 );
    i_ferr [4] = Ferror32;


    if ( i_err[4]  == FNOTPRES && c_rqst_typ == 'Y' )
    {
     fn_errlog( c_ServiceName, "S31015", FMLMSG, c_errmsg  );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    /*********** Ver 3.1 ends*********/

	for ( i_cnt = 1;  i_cnt <= 2; i_cnt++ )     
	{
		if ( (i_err[i_cnt] == -1) && (i_ferr[i_cnt] != FNOTPRES ))
		{
			if( DEBUG_MSG_LVL_5 )
			{
    		fn_userlog(c_ServiceName,"i_cnt[%ld]",i_cnt);
			}

			fn_errlog( c_ServiceName, "S31020", Fstrerror32( i_ferr[i_cnt] ), 
								 c_errmsg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		else if ( (i_err[i_cnt] == -1) && (i_ferr[i_cnt] == FNOTPRES))
		{
			if( DEBUG_MSG_LVL_5 ) 
			{
       	fn_userlog(c_ServiceName,"i_cnt[%ld]",i_cnt);
			}
				if ((( c_opr_typ == WITH_UNDERLYING ) && ( i_cnt == 2)) ||
				   (( c_opr_typ == WITH_UNDERLYING_TAG ) && ( i_cnt == 4)))
				{
						fn_errlog( c_ServiceName, "S31025", Fstrerror32( i_ferr[i_cnt] ), 
											 c_errmsg  );
      			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
		}
	}

  li_sssn_id  = st_usr_prfl.l_session_id;  /*** Ver 2.3 ***/

	/* Added for Ver 1.5 - starts */
  if(c_rqst_typ == 'Y')
  {
		if( DEBUG_MSG_LVL_3 )
		{
    	fn_userlog(c_ServiceName,"User is ATS customer");
		}

    li_sssn_id = 0;
  }
  else if(c_rqst_typ == 'N')
  {
		if( DEBUG_MSG_LVL_3 )
		{
    	fn_userlog(c_ServiceName,"User is not ATS customer");
		}
  }
  else
  {
		if( DEBUG_MSG_LVL_3 )
		{
    	fn_userlog(c_ServiceName,"Advisor's Flag is invalid :%c:", c_rqst_typ);
		}
    strcpy(c_errmsg, "Advisor's Flag is invalid");
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	/**** Ver 1.5 Ends *****/


	 if( li_sssn_id !=0 )					/** 1.5 validation added **/
	 {
	          
   	      fn_userlog( c_ServiceName,"Before Calling fn_chk_sssn ");    /*** Ver 3.0 ***/

					 i_returncode = fn_chk_sssn( c_ServiceName,
																				&st_usr_prfl,
																				&st_err_msg ) ;
         fn_userlog( c_ServiceName,"After Calling fn_chk_sssn ");     /*** Ver 3.0 ***/
        
					 if ( i_returncode == -1 )
					 {
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					 }

	}

	/**************V 1.2 Starts  *************/
  
  /*** Ver 2.0 Starts Here ***/
   EXEC SQL
    SELECT nvl(FSP_AM_MM_DIFF_PRCT,0)
      INTO :d_am_mm_diff_prcnt
      FROM FSP_FO_SYSTM_PRMTR;
  if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31030", SQLMSG, c_errmsg );
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }
  /*** Ver 2.0 Ends Here ***/

  /******* tpbegin ************/
  if(tpbegin( TRAN_TIMEOUT, 0 ) == -1)
  {
    fn_errlog( c_ServiceName, "S31035", SQLMSG, c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


	EXEC SQL ALLOCATE :sys_cursor;

	if( DEBUG_MSG_LVL_1 )   /** Debug level changed form 3 to 1 ***/
	{
		fn_userlog(c_ServiceName," c_rqst_typ :%c",c_rqst_typ);
		fn_userlog(c_ServiceName," c_mtch_accnt_no:%s",c_mtch_accnt_no);
	}


  if( strcmp( c_mtch_accnt_no, "*" ) == 0 )
  {
    if( st_usr_prfl.c_user_id[0] == BPID )
    {
      /** insert into fdm all acounts for this bpid **/
      EXEC SQL
      INSERT INTO
      FDM_DT_MTCH
      SELECT CLM_MTCH_ACCNT FROM CLM_CLNT_MSTR
      WHERE CLM_BP_ID = :st_usr_prfl.c_user_id;
      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31040", SQLMSG, c_errmsg );
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpcommit(0);
        tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
      }
    }
		else if(c_rqst_typ == 'Y' )          /** 1.5 **/ 
		{

			if( DEBUG_MSG_LVL_3 ) {
		  fn_userlog(c_ServiceName," Advisor user");
			}

		/******* Comment starts ver 3.1 ******
      *** Query modified for Ver 1.8 ***
			EXEC SQL
			INSERT INTO
			FDM_DT_MTCH
			SELECT DISTINCT ACM_MTCH_ACCNT FROM ACM_ADV_CLNT_MAP
			WHERE ACM_ADVISOR_ID = :st_usr_prfl.c_user_id
      AND   NVL(ACM_ACTV_FLG,'A') = 'A';
	 *********Comment ends ver 3.1 ***/
	 
	 /*****Ver 3.1 Starts****/
      EXEC SQL
      INSERT INTO
      FDM_DT_MTCH
      SELECT DISTINCT ACM_MTCH_ACCNT FROM ACM_ADV_CLNT_MAP,CLM_CLNT_MSTR
      WHERE ACM_MTCH_ACCNT = CLM_MTCH_ACCNT
      AND ACM_ADVISOR_ID = :st_usr_prfl.c_user_id
      AND ACM_ACTV_FLG = 'A'
      AND DECODE(:c_xchng_cd,'NFO',NVL(CLM_SPAN_ALLWD,'N'),'BFO',NVL(CLM_BSESPAN_ALLWD,'N')) = DECODE(:c_spn_flg,'Y','Y','N');
   /*****Ver 3.1 Ends*****/
  
			if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31045", SQLMSG, c_errmsg );
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpcommit(0);
        tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
      }	

		}
    else
    {
      EXEC SQL
      INSERT  INTO  FDM_DT_MTCH
      SELECT  UAC_CLM_MTCH_ACCNT FROM uac_usr_accnts
      WHERE   UAC_USR_ID = :st_usr_prfl.c_user_id ;
      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31050", SQLMSG, c_errmsg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpcommit(0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

    EXEC SQL
    SELECT  count(*)
    INTO :i_count
    FROM    FDM_DT_MTCH ;
    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31055", SQLMSG, c_errmsg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpcommit(0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    
    if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.3 : Debug level Change  */
    fn_userlog(c_ServiceName,"Inside All mtch accnnt's");	
    }
		
		if ( c_opr_typ == WITHOUT_UNDERLYING ) /****Ver 3.1 ****/
    {


		 EXEC SQL  EXECUTE
        BEGIN
          OPEN  :sys_cursor FOR
              SELECT  fop_clm_mtch_accnt,															/****Ver 1.2 ****/
											fop_xchng_cd,
                      fop_prdct_typ,
                      fop_undrlyng,
                      to_char( fop_expry_dt, 'DD-Mon-YYYY' ),
                      fop_exer_typ,
                      fop_opt_typ,
                      fop_strk_prc,
                      fop_indstk,
                      fop_opnpstn_flw,
                      abs(fop_opnpstn_qty),
                      fop_opnpstn_val,
											decode(fop_opnpstn_flw,'S',greatest(abs(fop_ibuy_qty),abs(fop_exbuy_qty)) ,
                                    'B',greatest(abs(fop_isell_qty),abs(fop_exsell_qty) ),0),   /**Ver 1.4 **/
                      /**Commented for Ver 1.4 decode(fop_opnpstn_flw,'S',fop_ibuy_qty ,
                                    'B',abs(fop_isell_qty ),0),**/
                      NVL(FOP_IBUY_QTY,0),
                      NVL(FOP_ISELL_QTY,0),
                      NVL(FOP_EXRC_QTY,0),
                      NVL(FOP_IEXRC_QTY,0),
                      NVL(FOP_UORDR_MRGN,0),
                      NVL(FOP_UEXCTD_MRGN,0),
                      NVL( FOP_TRGGR_PRC, 0 ),
                      NVL(FOP_IDONTEXRC_QTY, 0),
                      NVL(FOP_UDLVRY_MRGN,0),  /***Ver 3.2***/
											NVL(FOP_DLVRY_MODE_FLAG,'N'),  /*** Ver 3.5 ***/
              		    NVL(FOP_DLVRY_OBLGAMT_BLCKD,0),/*** Ver 3.5 ***/
           		       	NVL(FOP_DLVRY_QTY_BLCKD,0)     /*** Ver 3.5 ***/
             FROM     fop_fo_options_pstn,FDM_DT_MTCH									/***Ver 1.2 ****/
          /**   WHERE    fop_clm_mtch_accnt = :c_mtch_accnt_no **/
             WHERE    fop_clm_mtch_accnt = FDM_CLM_MTCH_ACCNT 
             AND      fop_xchng_cd = :c_xchng_cd
             AND      (     fop_opnpstn_qty != 0
                        OR  fop_ibuy_qty != 0
                        OR  fop_isell_qty != 0 )
             ORDER BY fop_clm_mtch_accnt,fop_undrlyng, fop_expry_dt,		/**Ver 1.2 **/
											FOP_OPT_TYP,FOP_STRK_PRC;                         /*** Ver 3.6 ***/
        END;
      END-EXEC;
	  }

  /****** Ver 3.1 starts *******/
  else if ( c_opr_typ == WITH_UNDERLYING)
    {

    EXEC SQL  EXECUTE
        BEGIN
          OPEN  :sys_cursor FOR
              SELECT  fop_clm_mtch_accnt,
                      fop_xchng_cd,
                      fop_prdct_typ,
                      fop_undrlyng,
                      to_char( fop_expry_dt, 'DD-Mon-YYYY' ),
                      fop_exer_typ,
                      fop_opt_typ,
                      fop_strk_prc,
                      fop_indstk,
                      fop_opnpstn_flw,
                      abs(fop_opnpstn_qty),
                      fop_opnpstn_val,
                      decode(fop_opnpstn_flw,'S',greatest(abs(fop_ibuy_qty),abs(fop_exbuy_qty)) ,
																		         'B',greatest(abs(fop_isell_qty),abs(fop_exsell_qty) ),0),
                      NVL(FOP_IBUY_QTY,0),
                      NVL(FOP_ISELL_QTY,0),
                      NVL(FOP_EXRC_QTY,0),
                      NVL(FOP_IEXRC_QTY,0),
                      NVL(FOP_UORDR_MRGN,0),
                      NVL(FOP_UEXCTD_MRGN,0),
                      NVL( FOP_TRGGR_PRC, 0 ),
                      NVL(FOP_IDONTEXRC_QTY, 0),
                      NVL(FOP_UDLVRY_MRGN,0),  /***Ver 3.2****/
                      NVL(FOP_DLVRY_MODE_FLAG,'N'),  /*** Ver 3.5 ***/
                      NVL(FOP_DLVRY_OBLGAMT_BLCKD,0),/*** Ver 3.5 ***/
                      NVL(FOP_DLVRY_QTY_BLCKD,0)     /*** Ver 3.5 ***/
             FROM     fop_fo_options_pstn,FDM_DT_MTCH
             WHERE    fop_clm_mtch_accnt = FDM_CLM_MTCH_ACCNT
             AND      fop_xchng_cd = :c_xchng_cd
             AND      (     fop_opnpstn_qty != 0
                        OR  fop_ibuy_qty != 0
                        OR  fop_isell_qty != 0 )
            AND     fop_undrlyng    =  :c_undrlyng
             ORDER BY fop_clm_mtch_accnt,fop_undrlyng, fop_expry_dt,
											FOP_OPT_TYP,FOP_STRK_PRC;                         /*** Ver 3.6 ***/
        END;
      END-EXEC;

    }

  /****Ver 3.1 ends****/
  }/*************Ver 1.1 condition for multiple match acocunt ends here *********************/	
	else
	{

	/*if ( c_opr_typ == WITH_UNDERLYING )*/							/** 1.5 **/
	if ( c_opr_typ == WITH_UNDERLYING &&	c_rqst_typ == 'N' ) /**1.5 **/
	{
		if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.3 : Debug level Change  */
		fn_userlog( c_ServiceName,"c_undrlyng    :%s:", c_undrlyng );
		fn_userlog( c_ServiceName,"c_opr_typ == WITH_UNDERLYING &&  c_rqst_typ == 'N'");
		}
	
		EXEC SQL	EXECUTE
				BEGIN
					OPEN	:sys_cursor	FOR
              SELECT  fop_clm_mtch_accnt,															/****Ver 1.2 ****/
											fop_xchng_cd,
											fop_prdct_typ,
											fop_undrlyng,
											to_char( fop_expry_dt, 'DD-Mon-YYYY' ),
											fop_exer_typ,
                      fop_opt_typ,
                      fop_strk_prc,
											fop_indstk,
											fop_opnpstn_flw,
											abs(fop_opnpstn_qty),
											fop_opnpstn_val,
											decode(fop_opnpstn_flw,'S',greatest(abs(fop_ibuy_qty),abs(fop_exbuy_qty)) ,
                                    'B',greatest(abs(fop_isell_qty),abs(fop_exsell_qty) ),0),   /**Ver 1.4 **/
                      /**Commented for Ver 1.4 decode(fop_opnpstn_flw,'S',fop_ibuy_qty ,
                                    'B',abs(fop_isell_qty ),0),**/
                      NVL(FOP_IBUY_QTY,0),
                      NVL(FOP_ISELL_QTY,0),
                      NVL(FOP_EXRC_QTY,0),
                      NVL(FOP_IEXRC_QTY,0),
                      NVL(FOP_UORDR_MRGN,0),
                      NVL(FOP_UEXCTD_MRGN,0),
                      NVL( FOP_TRGGR_PRC, 0 ),
											NVL(FOP_IDONTEXRC_QTY, 0),
                      NVL(FOP_UDLVRY_MRGN,0),   /**Ver 3.2****/
                      NVL(FOP_DLVRY_MODE_FLAG,'N'),  /*** Ver 3.5 ***/
                      NVL(FOP_DLVRY_OBLGAMT_BLCKD,0),/*** Ver 3.5 ***/
                      NVL(FOP_DLVRY_QTY_BLCKD,0)     /*** Ver 3.5 ***/
             FROM     fop_fo_options_pstn
			   		 WHERE	  fop_clm_mtch_accnt = :c_mtch_accnt_no
             AND      fop_xchng_cd = :c_xchng_cd
             AND      fop_undrlyng    =  :c_undrlyng
             AND      ( 		fop_opnpstn_qty != 0
                        OR	fop_ibuy_qty != 0
												OR	fop_isell_qty != 0 )
             ORDER BY fop_clm_mtch_accnt,fop_expry_dt,						/**Ver 1.2 **/
											FOP_OPT_TYP,FOP_STRK_PRC;                         /*** Ver 3.6 ***/

				END;
			END-EXEC;
	
	
	}
	else if (c_opr_typ == WITH_UNDERLYING &&  c_rqst_typ == 'Y')  /** 1.5 **/
	{

			if( DEBUG_MSG_LVL_3 ) {
			fn_userlog(c_ServiceName," WITH_UNDERLYING && c_rqst_typ == 'Y' ");
			}

			EXEC SQL  EXECUTE
        BEGIN
          OPEN  :sys_cursor FOR
              SELECT  distinct fop_clm_mtch_accnt,            /*** distinct added for Ver 1.8 ***/
                      fop_xchng_cd,
                      fop_prdct_typ,
                      fop_undrlyng,
                      to_char( fop_expry_dt, 'DD-Mon-YYYY' ) fop_expry_dt, /*** Alias added Ver 1.8 ***/
                      fop_exer_typ,
                      fop_opt_typ,
                      fop_strk_prc,
                      fop_indstk,
                      fop_opnpstn_flw,
                      abs(fop_opnpstn_qty),
                      fop_opnpstn_val,
                      decode(fop_opnpstn_flw,'S',greatest(abs(fop_ibuy_qty),abs(fop_exbuy_qty)) ,
                                    'B',greatest(abs(fop_isell_qty),abs(fop_exsell_qty) ),0),  
                      NVL(FOP_IBUY_QTY,0),
                      NVL(FOP_ISELL_QTY,0),
                      NVL(FOP_EXRC_QTY,0),
                      NVL(FOP_IEXRC_QTY,0),
                      NVL(FOP_UORDR_MRGN,0),
                      NVL(FOP_UEXCTD_MRGN,0),
                      NVL( FOP_TRGGR_PRC, 0 ),
                      NVL(FOP_IDONTEXRC_QTY, 0),
                      NVL(FOP_UDLVRY_MRGN,0),   /**Ver 3.2****/
                      NVL(FOP_DLVRY_MODE_FLAG,'N'),  /*** Ver 3.5 ***/
                      NVL(FOP_DLVRY_OBLGAMT_BLCKD,0),/*** Ver 3.5 ***/
                      NVL(FOP_DLVRY_QTY_BLCKD,0)     /*** Ver 3.5 ***/
											FROM     fop_fo_options_pstn,
															 acm_adv_clnt_map	
             WHERE   fop_clm_mtch_accnt = acm_mtch_accnt 
             AND     NVL(ACM_ACTV_FLG,'A') = 'A'                  /*** Clause added for Ver 1.8 ***/
						 AND		 fop_clm_mtch_accnt = :c_mtch_accnt_no
             AND     fop_xchng_cd = :c_xchng_cd
             AND     fop_undrlyng    =  :c_undrlyng
             AND     (     fop_opnpstn_qty != 0
                        OR  fop_ibuy_qty != 0
                        OR  fop_isell_qty != 0 )
             ORDER BY fop_clm_mtch_accnt,fop_expry_dt,
											FOP_OPT_TYP,FOP_STRK_PRC;                         /*** Ver 3.6 ***/            
        END;
      END-EXEC;


	}
	else if ( c_opr_typ == WITHOUT_UNDERLYING  && c_rqst_typ == 'N')
	{

			if( DEBUG_MSG_LVL_3 ) {
			fn_userlog( c_ServiceName,"c_opr_typ == WITHOUT_UNDERLYING  && c_rqst_typ == 'N'");
			}

			EXEC SQL	EXECUTE
				BEGIN
					OPEN	:sys_cursor	FOR
              SELECT  fop_clm_mtch_accnt,															/****Ver 1.2 ****/
											fop_xchng_cd,
                      fop_prdct_typ,
											fop_undrlyng,
											to_char( fop_expry_dt, 'DD-Mon-YYYY' ),
											fop_exer_typ,
                      fop_opt_typ,
                      fop_strk_prc,
											fop_indstk,
											fop_opnpstn_flw,
											abs(fop_opnpstn_qty),
											fop_opnpstn_val,
											decode(fop_opnpstn_flw,'S',greatest(abs(fop_ibuy_qty),abs(fop_exbuy_qty)) ,
                                    'B',greatest(abs(fop_isell_qty),abs(fop_exsell_qty) ),0),   /**Ver 1.4 **/
                      /**Commented for Ver 1.4 decode(fop_opnpstn_flw,'S',fop_ibuy_qty ,
                                    'B',abs(fop_isell_qty ),0),**/
                      NVL(FOP_IBUY_QTY,0),
                      NVL(FOP_ISELL_QTY,0),
                      NVL(FOP_EXRC_QTY,0),
                      NVL(FOP_IEXRC_QTY,0),
                      NVL(FOP_UORDR_MRGN,0),
                      NVL(FOP_UEXCTD_MRGN,0),
                      NVL( FOP_TRGGR_PRC, 0 ),
											NVL(FOP_IDONTEXRC_QTY, 0),
                      NVL(FOP_UDLVRY_MRGN,0),   /**Ver 3.2****/
                      NVL(FOP_DLVRY_MODE_FLAG,'N'),  /*** Ver 3.5 ***/
                      NVL(FOP_DLVRY_OBLGAMT_BLCKD,0),/*** Ver 3.5 ***/
                      NVL(FOP_DLVRY_QTY_BLCKD,0)     /*** Ver 3.5 ***/
             FROM     fop_fo_options_pstn
			   		 WHERE	  fop_clm_mtch_accnt = :c_mtch_accnt_no
             AND      fop_xchng_cd = :c_xchng_cd
             AND      ( 		fop_opnpstn_qty != 0
                        OR	fop_ibuy_qty != 0
												OR	fop_isell_qty != 0 )
             ORDER BY fop_clm_mtch_accnt,fop_undrlyng, fop_expry_dt,			/**Ver 1.2**/
											FOP_OPT_TYP,FOP_STRK_PRC;                         /*** Ver 3.6 ***/	
				END;
			END-EXEC;
	}
	else if (c_opr_typ == WITHOUT_UNDERLYING &&  c_rqst_typ == 'Y')  /** 1.5 **/
  {

		if( DEBUG_MSG_LVL_3 ) {
		fn_userlog(c_ServiceName,"WITHOUT_UNDERLYING &&  c_rqst_typ == 'Y'");
		}

						EXEC SQL  EXECUTE
        BEGIN
          OPEN  :sys_cursor FOR
              SELECT  distinct fop_clm_mtch_accnt,               /*** distinct added for Ver 1.8 ***/
                      fop_xchng_cd,
                      fop_prdct_typ,
                      fop_undrlyng,
                      to_char( fop_expry_dt, 'DD-Mon-YYYY' ) fop_expry_dt, /*** Alias added Ver 1.8 ***/
                      fop_exer_typ,
                      fop_opt_typ,
                      fop_strk_prc,
                      fop_indstk,
                      fop_opnpstn_flw,
                      abs(fop_opnpstn_qty),
                      fop_opnpstn_val,
                      decode(fop_opnpstn_flw,'S',greatest(abs(fop_ibuy_qty),abs(fop_exbuy_qty)) ,
                                    'B',greatest(abs(fop_isell_qty),abs(fop_exsell_qty) ),0), 
                      NVL(FOP_IBUY_QTY,0),
                      NVL(FOP_ISELL_QTY,0),
                      NVL(FOP_EXRC_QTY,0),
                      NVL(FOP_IEXRC_QTY,0),
                      NVL(FOP_UORDR_MRGN,0),
                      NVL(FOP_UEXCTD_MRGN,0),
                      NVL( FOP_TRGGR_PRC, 0 ),
                      NVL(FOP_IDONTEXRC_QTY, 0),
                      NVL(FOP_UDLVRY_MRGN,0),   /**Ver 3.2****/
                      NVL(FOP_DLVRY_MODE_FLAG,'N'),  /*** Ver 3.5 ***/
                      NVL(FOP_DLVRY_OBLGAMT_BLCKD,0),/*** Ver 3.5 ***/
                      NVL(FOP_DLVRY_QTY_BLCKD,0)     /*** Ver 3.5 ***/
             FROM     fop_fo_options_pstn,
											acm_adv_clnt_map
						 WHERE    fop_clm_mtch_accnt = acm_mtch_accnt
             AND      NVL(ACM_ACTV_FLG,'A') = 'A'                 /*** Clause added for Ver 1.8 ***/
						 AND			fop_clm_mtch_accnt = :c_mtch_accnt_no
             AND      fop_xchng_cd = :c_xchng_cd
             AND      (     fop_opnpstn_qty != 0
                        OR  fop_ibuy_qty != 0
                        OR  fop_isell_qty != 0 )
             ORDER BY fop_clm_mtch_accnt,fop_undrlyng, fop_expry_dt,
                      FOP_OPT_TYP,FOP_STRK_PRC;                         /*** Ver 3.6 ***/      
        END;
      END-EXEC;

	}
	else
	{
    tpcommit(0);
		fn_errlog( c_ServiceName, "S31060", "Invalid Option Type", c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	}
	if ( SQLCODE != 0 )
	{
    tpcommit(0);
		fn_errlog( c_ServiceName, "S31065", SQLMSG, c_errmsg  );
    EXEC SQL FREE :sys_cursor;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  ptr_fml_Obuf=NULL;


	for ( ; ; )
	{
		d_trd_mrgn = 0.0;   /*** Ver 1.6 ***/
		c_setlmnt_flg = '\0';   /*** Added in Ver 2.9 ***/
    d_dlvry_mrgn=0.0;       /**** Ver 3.2 ****/
    d_reqd_dlvry_mrgn=0.0;  /**** Ver 3.2 ***/

		EXEC SQL FETCH :sys_cursor
							INTO :c_mtch_accnt_no,               /***Ver 1.2 ***/
									 :c_xchng_cd,
                   :c_prd_typ,
                   :c_undrlyng,
                   :c_expry_dt,
                   :c_exrc_typ,
                   :c_opt_typ,
                   :l_strike_prc,
                   :c_ctgry_indstk,
                   :c_opnpstn_flw,
                   :l_opnpstn_qty,
                   :d_opnpstn_val,
									 :l_cvr_qty,
                   :l_ibuy_qty,
                   :l_isell_qty,
                   :l_exrc_qty,
                   :l_iexrc_qty,
                   :d_ordr_mrgn,
                   :d_trd_mrgn,
                   :l_mtm_trg_prc,
                   :l_dont_exrc_qty,
                   :d_dlvry_mrgn,
									 :c_dlvry_mode_flg,        /*** Ver 3.5 ***/
                   :d_dlvry_oblgamt_blckd,   /*** Ver 3.5 ***/
                   :l_dlvry_qty_blckd;       /*** Ver 3.5 ***/
										
    if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.3 : Debug level Change  */
		fn_userlog(c_ServiceName,"Match accnt|underlyng selected:%s:%s",c_mtch_accnt_no,c_undrlyng);
    }

		if ( SQLCODE != 0 )
		{
			if ( SQLCODE == NO_DATA_FOUND )
			{
				break;  
			}
			else
			{
    		tpcommit(0);
				fn_errlog( c_ServiceName, "S31070", SQLMSG, c_errmsg  );
      	EXEC SQL CLOSE :sys_cursor;
      	EXEC SQL FREE :sys_cursor;
      	tpfree ( ( char * ) ptr_fml_Obuf );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}
 
    rtrim(c_undrlyng);

    EXEC SQL
         SELECT nvl(FTQ_LST_TRD_PRC,0),
                FTQ_MIN_LOT_QTY,           /*** Ver 2.2 ***/
								NVL(FTQ_SETLMNT_FLG,'C')    /*** Added in Ver 2.9 ***/
         INTO :l_lst_trdd_prc,
              :l_lot_size,               /*** Ver 2.2 ***/
							:c_setlmnt_flg            /*** Added in Ver 2.9 ***/
				 FROM ftq_fo_trd_qt
				 WHERE ftq_xchng_cd = :c_xchng_cd
				 AND  ftq_prdct_typ = :c_prd_typ
				 AND  ftq_indstk = :c_ctgry_indstk
         AND  ftq_undrlyng = :c_undrlyng
				 AND	ftq_exer_typ = :c_exrc_typ
				 AND	ftq_opt_typ = :c_opt_typ
				 AND	ftq_strk_prc = :l_strike_prc
         AND  ftq_expry_dt = :c_expry_dt;
    
		if(( SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ))
    { 
    	tpcommit(0);
			fn_errlog( c_ServiceName, "S31075", SQLMSG, c_errmsg  );
     	EXEC SQL CLOSE :sys_cursor;
     	EXEC SQL FREE :sys_cursor;
     	tpfree ( ( char * ) ptr_fml_Obuf );
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
     	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    else if ( SQLCODE == NO_DATA_FOUND )
    {
     l_lst_trdd_prc = 0;
    }
		/*** Ver 1.7 starts ***/
		EXEC SQL 
			SELECT NVL(ltq_rt,0) * 100,
             NVL(to_char(LTQ_DT,'DD-Mon-YYYY'),'NA'), /**** 3.2 ****/
             NVL(LTQ_CLS_PRC,0) * 100              /***** 3.2 ****/ 
			into :l_spot_prc,
           :c_ltq_dt,
           :l_cls_prc 
			FROM ltq_trd_qt
			WHERE LTQ_STCK_CD = :c_undrlyng
			AND LTQ_XCHNG_CD = DECODE(:c_xchng_cd,'NFO','NSE','BFO','BSE');

    fn_userlog(c_ServiceName,"LTQ Date :%s:",c_ltq_dt);
     fn_userlog(c_ServiceName,"Closing Price :%ld:",l_cls_prc);

		if(( SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ))
    { 
    	tpcommit(0);
			fn_errlog( c_ServiceName, "S31080", SQLMSG, c_errmsg  );
     	EXEC SQL CLOSE :sys_cursor;
     	EXEC SQL FREE :sys_cursor;
     	tpfree ( ( char * ) ptr_fml_Obuf );
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
     	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    else if ( SQLCODE == NO_DATA_FOUND )
    {
     l_spot_prc = 0;
     l_cls_prc=0;        /*** 3.2 ***/
     MEMSET(c_ltq_dt);   /*** 3.2 ***/
    }
		if( c_opnpstn_flw == 'S'  )
		{

      if( DEBUG_MSG_LVL_3 )  /** ver 2.4 **/
      {
			  fn_userlog(c_ServiceName,"c_undrlyng:%s:",c_undrlyng);
			  fn_userlog(c_ServiceName,"c_opt_typ:%c:",c_opt_typ);
      }
      /*** commented in ver 2.0 *************
			if( ( c_opt_typ == 'C' && ( l_spot_prc > l_mtm_trg_prc) ) ||
					( c_opt_typ == 'P' && ( l_spot_prc < l_mtm_trg_prc) )	
				)
			{
				c_trg_prc_stts='R';			
			} 
			else 
			{
				c_trg_prc_stts='N';
			}
      ********** Ver 2.0 Ends Here ***/

      /****** ver 2.0 Starts Here ****/
      c_mtm_alrt_flg='N';
      if( c_opnpstn_flw == 'S' )
      {
        l_new_trg_price=0;
        if( c_opt_typ == 'C' )
        {
          l_new_trg_price = l_mtm_trg_prc - ( l_mtm_trg_prc * ( d_am_mm_diff_prcnt / 100 ) );

          if( l_spot_prc >= l_new_trg_price )
          {
            c_trg_prc_stts = 'R' ;
          }
          else
          {
            c_trg_prc_stts='N';
          }
        }
        else if( c_opt_typ == 'P' )
        {
          l_new_trg_price = l_mtm_trg_prc + ( l_mtm_trg_prc * ( d_am_mm_diff_prcnt / 100 ) );
          if( l_spot_prc <= l_new_trg_price )
          {
            c_trg_prc_stts= 'R' ;
          }
          else
          {
            c_trg_prc_stts='N';
          }
        }
      }

      /****** Ver 2.0 Ends Here ****/
		}
		/*** Ver 1.7 Ends ****/

    /*** Ver 3.7 starts ***/
    if (c_prd_typ == 'O')
    {
      EXEC SQL
        SELECT decode(:l_opnpstn_qty, 0, 0, ( abs(:d_opnpstn_val)/ :l_opnpstn_qty) )
        INTO :d_avg_prcs
        FROM  dual;
    
    fn_userlog(c_ServiceName,"REVAMP AVG_PRC Final c_mtch_accnt_no=:%s: d_avg_prcs=:%lf: ",c_mtch_accnt_no,d_avg_prcs);
    }
    /*** Ver 3.7  ends ***/

    if( DEBUG_MSG_LVL_5 ) {          /*  Ver 1.3 : Debug level Change  */
		fn_userlog(c_ServiceName,"c_xchng_cd:%s:",c_xchng_cd);
		fn_userlog(c_ServiceName,"c_prd_typ:%c:",c_prd_typ);
		fn_userlog(c_ServiceName,"c_undrlyng:%s:",c_undrlyng);
		fn_userlog(c_ServiceName,"c_exrc_typ:%c:",c_exrc_typ);
		fn_userlog(c_ServiceName,"c_opt_typ:%c:",c_opt_typ);
		fn_userlog(c_ServiceName,"l_strike_prc:%ld:",l_strike_prc);
		fn_userlog(c_ServiceName,"c_expry_dt:%s:",c_expry_dt);
		fn_userlog(c_ServiceName,"Spot Price is  :%ld:",l_spot_prc);  					/** ver 1.7 **/
		fn_userlog(c_ServiceName,"Lst trd prc is :%ld:",l_lst_trdd_prc);  			/** ver 1.7 **/
		fn_userlog(c_ServiceName,"c_trg_prc_stts flag is :%c:",c_trg_prc_stts); /** ver 1.7 **/
    }

    /*** Commented in Ver 2.2 and lot size selected in above select of FTQ ***

    EXEC SQL
			SELECT	FCM_LOT_SZ
			INTO		:l_lot_size
			FROM		FCM_FO_CNTRCT_MSTR
			WHERE		FCM_XCHNG_CD	= :c_xchng_cd
			AND			FCM_PRDCT_TYP	= :c_prd_typ
			AND			FCM_UNDRLYNG	= :c_undrlyng
			AND			FCM_EXER_TYP	= :c_exrc_typ
			AND			FCM_OPT_TYP 	= :c_opt_typ
			AND			FCM_STRK_PRC = :l_strike_prc
			AND			FCM_EXPRY_DT	= :c_expry_dt;

		if( SQLCODE != 0)
    { 
    	tpcommit(0);
			fn_errlog( c_ServiceName, "S31085", SQLMSG, c_errmsg  );
     	EXEC SQL CLOSE :sys_cursor;
     	EXEC SQL FREE :sys_cursor;
     	tpfree ( ( char * ) ptr_fml_Obuf );
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
     	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    *** Ver 2.2 Comment Ends ***/
	
if( DEBUG_MSG_LVL_5 ) {          /*  Ver 1.3 : Debug level Change  */
	fn_userlog( c_ServiceName,"l_dont_exrc_qty        :%ld:", l_dont_exrc_qty );
}

    /* 1.1 starts from here. */
    EXEC SQL
      SELECT
            nvl(round((((MSTR.fum_oi * 100) / MWP.fum_mwp) * 100)),0) /**** fum_oi is 
																																		  multiplied by 100
																																			because it was
																																			stored in database
																																			after dividing 
																																			by 100 *********/
      INTO
            :l_prcnt
      FROM  fum_fo_undrlyng_mwp MWP,
            fum_fo_undrlyng_mstr MSTR
      WHERE MWP.fum_xchng_cd                     = :c_xchng_cd
      AND   MWP.fum_undrlyng                     = :c_undrlyng
      AND   MSTR.fum_prdct_typ                   = :c_prd_typ
      AND   MWP.fum_undrlyng                     = MSTR.fum_undrlyng
      AND   MWP.fum_xchng_cd                     = MSTR.fum_xchng_cd
      AND   to_char(MWP.fum_month_year,'YYYYMM') = to_char(sysdate,'YYYYMM');

    if( SQLCODE != 0 )
    {
      if (SQLCODE == NO_DATA_FOUND)
      {
				l_prcnt = 0;
        if( DEBUG_MSG_LVL_3 )  /** ver 2.4 **/
        { 
          fn_userlog( c_ServiceName,"No Data found for percentage attained in a MWP|%s|%s|%c|",
                                  c_xchng_cd,c_undrlyng,c_prd_typ);
        }
      }
      else
      {
    		tpcommit(0);
        fn_errlog( c_ServiceName, "S31090", SQLMSG, c_errmsg  );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
    if( DEBUG_MSG_LVL_5 ) {          /*  Ver 1.3 : Debug level Change  */
    fn_userlog(c_ServiceName, "Exercise Quantity before Packing to FMl is :%ld:",l_iexrc_qty);
    }

		/*** Ver 1.6 Starts ***/
    if( DEBUG_MSG_LVL_3 )  /** ver 2.4 **/
    {
		  fn_userlog(c_ServiceName,"Trade Margin Is :%lf:", d_trd_mrgn);	
    }

		if( d_trd_mrgn != 0 && c_opnpstn_flw != 'B' )
		{
			c_addmrgn_flg = 'Y';
		}
		else
		{
			c_addmrgn_flg = 'N';
		}

    if( DEBUG_MSG_LVL_3 )  /** ver 2.4 **/
    {
		  fn_userlog(c_ServiceName," Add Margin Flag Is :%c:",c_addmrgn_flg);	
    }

		/*** Ver 1.6 Ends ***/ 

		/*** Ver 3.5 Starts ***/
		c_all_flg           = 'N';
    c_indx_indctr       = 'N';
    c_dlvry_sttlmnt_typ = '\0';
    c_dlvry_enbl_flg    = '\0';
		if ( c_setlmnt_flg == 'P' ) /*** Physical Settled contract only ***/
    {
			if ( c_prd_typ == 'F' || c_prd_typ == 'O' )
      {
			if( l_opnpstn_qty == 0 )
			{
				c_indx_indctr = 'N';  /** Show Choose Delivery **/
			}
			else
			{
    		EXEC SQL
      		SELECT   NVL(FLM_DLVRYENBL_FLG,'N')
      		INTO     :c_dlvry_enbl_flg
      		FROM     FLM_FO_LODM_MSTR
      		WHERE    FLM_UNDRLYNG = :c_undrlyng
  	    	AND      FLM_EOS_DT >= (
    	  	SELECT   EXG_NXT_TRD_DT
      		FROM     EXG_XCHNG_MSTR
    	  	WHERE    EXG_XCHNG_CD = 'NFO');
		      /*** AND      FLM_EOS_DT >= trunc(SYSDATE); ***/

    	if( (SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ) )
    	{
      	fn_errlog( c_ServiceName, "S31095", SQLMSG, c_errmsg );
      	Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
   	 	}
    	else if ( SQLCODE == NO_DATA_FOUND )
    	{
				c_all_flg = 'Y';
      	EXEC SQL
        	SELECT    NVL(FLM_DLVRYENBL_FLG,'N'),FLM_EXP_DT 
        	INTO      :c_dlvry_enbl_flg,
        	          :c_flm_expr_dt
        	FROM      FLM_FO_LODM_MSTR
        	WHERE     FLM_UNDRLYNG = 'ALL'
          AND      FLM_EOS_DT >= (
          SELECT   EXG_NXT_TRD_DT
          FROM     EXG_XCHNG_MSTR
          WHERE    EXG_XCHNG_CD = 'NFO');
          /*** AND       FLM_EOS_DT >= trunc(SYSDATE); ***/

      	if((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
      	{
        	fn_errlog( c_ServiceName, "S31100", SQLMSG, c_errmsg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
      	if(DEBUG_MSG_LVL_3)
      	{
        	fn_userlog(c_ServiceName,"Inside Underlying ALL CASE c_all_flg :%c:",c_all_flg);
      	}
    	}
	
		if ( ( c_dlvry_enbl_flg == 'Y' && ( strcmp(c_flm_expr_dt,c_expry_dt) == 0 ) && c_all_flg == 'Y' ) || ( c_dlvry_enbl_flg == 'Y' && c_all_flg == 'N' ) )	
		{
		   /*** Background color display ***/
       if( d_dlvry_oblgamt_blckd == 0 && l_dlvry_qty_blckd == 0 )
       {
         c_dlvry_sttlmnt_typ = 'P';  /** Show Delivery in 'Green' **/
		   }
       else
       {
         c_dlvry_sttlmnt_typ = 'G';  /** Show Delivery in  'Pink' **/
       }
   	   if ( c_dlvry_mode_flg == 'N' )
       {
         c_indx_indctr = 'D';  /** Show Choose Delivery **/
       }
       if ( c_dlvry_mode_flg == 'Y' )
       {
       c_indx_indctr = 'C';  /** Show Choose Non Delivery **/
       }
				if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Settlement Flag :%c:",c_dlvry_sttlmnt_typ);
          fn_userlog(c_ServiceName,"Index Indicator Choose Delivery/Non-Delivery :%c:",c_indx_indctr);
        }	
      }
      else
      {
        c_indx_indctr = 'N';  /** Dont show any link(Choose delivery or non delivery) **/
      }
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Index Indicator Choose Delivery/Non-Delivery :%c:",c_indx_indctr);
      }
		 }
		}	
    }
    /*** Ver 3.5 Ends ***/

    /*** Ver 2.5 Starts ***/

    if ( l_opnpstn_qty != 0 && ( l_ibuy_qty == 0 && l_isell_qty == 0 ) )
    {
     c_sqoff_at_market_flag = 'Y';
    }
    else
    {
     c_sqoff_at_market_flag = 'N';
			i_sqroffmkt_flg_cnt++;    /****Ver 2.8 *****/
    }

    /*** Ver 2.5 Ends   ***/
		
   /*** Ver 2.7 starts ***/

    if( DEBUG_MSG_LVL_0 )
     {
      fn_userlog(c_ServiceName, "Buy Quantity :%ld:", l_ibuy_qty );
      fn_userlog(c_ServiceName, "Sell Quantity :%ld:", l_isell_qty );
     }

     if( l_ibuy_qty > 0 || l_isell_qty  < 0)
     {
       c_cancel_all_flag = 'Y';
     }
     else
     {
       c_cancel_all_flag = 'N';
     }

     if( DEBUG_MSG_LVL_0 )
     {
      fn_userlog(c_ServiceName, "Cancel Flag:%c:", c_cancel_all_flag );
      fn_userlog(c_ServiceName, "Underlying :%s:", c_undrlyng );
      fn_userlog(c_ServiceName, "Expiry Date :%s:", c_expry_dt );

     }
        
			/**** Ver 2.8 Start ****/
      if(i_sqroffmkt_flg_cnt == 0)
      {
          c_sqr_off_all_at_mkt = 'Y';
      }
      else
      {
          c_sqr_off_all_at_mkt = 'N';
      }
      /**** Ver 2.8  Ends  ****/ 

  /*** Ver 2.7 ends ***/		
		
	
    /* 1.1 ends here. */
    c_spl_flg = CONTRACT_IP;
		ret_val=0;						/*ver 1.2*/
		rec_cnt=1;						/*Ver 1.2*/

     /**** Ver 3.2 Starts *****/
    /****** Checking for Delivery Margin *******/

   if((c_setlmnt_flg=='P') && (c_opnpstn_flw=='B'))
   {
     c_prd_temp_typ='F';
     i_mnth_flg=0;
     MEMSET(c_undrly);
     MEMSET(c_fsp_dt);
     strcpy(c_undrly,"NIFTY");
     d_ISec_buff_mrgn_prcnt=0.0;
     d_dlvry_min_mrgn_prcnt=0.0;
     d_var_mrgn=0.0;
     d_extrm_lss_mrgn=0.0;
     d_current_delvry_mrgn_prcnt=0.0;
     d_reqd_dlvry_mrgn=0.0;   
       
 
     EXEC SQL
     SELECT 1
     INTO :i_mnth_flg
     FROM DUAL
     WHERE to_date(:c_expry_dt,'DD-Mon-YYYY') =(
     SELECT MIN(FTQ_EXPRY_DT)
     FROM  FTQ_FO_TRD_QT where FTQ_XCHNG_CD =:c_xchng_cd
     and FTQ_PRDCT_TYP=:c_prd_temp_typ
 /**  and FTQ_UNDRLYNG=:c_undrly and FTQ_EXPRY_DT >=trunc(sysdate));  **** commented in ver 3.3 ***/ 
     and FTQ_UNDRLYNG=:c_undrly  );  /*** ver 3.3 **/

     if(( SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
     {
      fn_errlog( c_ServiceName, "S31105", SQLMSG, c_err_msg );
      tpcommit(0);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_Obuf );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

     }

     if ( SQLCODE == NO_DATA_FOUND )
     {
       i_mnth_flg=0;
     }

     if( DEBUG_MSG_LVL_5 )
     {
      fn_userlog(c_ServiceName,"Value of month flag :%d:",i_mnth_flg);
      fn_userlog(c_ServiceName,"Physical Settlement Flag :%c:",c_setlmnt_flg);
     }
  
    /* if((c_prd_typ=='O') && (i_mnth_flg ==1) )  *** Ver 3.4 ***/
    if(c_prd_typ=='O')        /*** Ver 3.4 ***/
    {
      if( DEBUG_MSG_LVL_5 )
      { 
       fn_userlog(c_ServiceName,"Inside delivery margin case");
      }

      EXEC SQL
       SELECT NVL( FMM_ISEC_DLVRY_MRGN_BFFR_PRCNT/100, 0.0 ),
              NVL( FMM_DLVRY_MIN_MRGN_PRCNT/100 , 0.0 )
       INTO :d_ISec_buff_mrgn_prcnt,
            :d_dlvry_min_mrgn_prcnt
       FROM FMM_FO_MRGN_MSTR
       WHERE  FMM_PRDCT_TYP=:c_prd_typ
       AND    FMM_UNDRLYNG =:c_undrlyng
       AND    FMM_XCHNG_CD =:c_xchng_cd
       AND    FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
                                    FROM    FCB_FO_CLN_BSKT_ALLTD
                                    WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
                                                          FROM   CLM_CLNT_MSTR
                                                          WHERE CLM_MTCH_ACCNT =:c_mtch_accnt_no));

     if(( SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) ) 
     {
       fn_errlog( c_ServiceName, "S31110", SQLMSG, c_err_msg );
       tpcommit(0);
       EXEC SQL CLOSE :sys_cursor;
       EXEC SQL FREE :sys_cursor;
       tpfree ( ( char * ) ptr_fml_Obuf );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
   
      if( DEBUG_MSG_LVL_5 )
      {
       fn_userlog(c_ServiceName,"Isec buffer margin % :%lf:",d_ISec_buff_mrgn_prcnt);
       fn_userlog(c_ServiceName,"Delivery Min margin % :%lf:",d_dlvry_min_mrgn_prcnt);
      }

         EXEC SQL
         SELECT NVL(VEM_VAR_MARGIN/100,0),
                NVL(VEM_EXTRM_LOSS_RT/100,0)
                /* NVL(FSP_DLVRY_MRGPRCNT/100,0),
                NVL(to_char(FSP_DLVRY_MRGPRCNT_UPDDT,'DD-Mon-YYYY'),'NA')		* Ver 3.4 */
         INTO  :d_var_mrgn,
               :d_extrm_lss_mrgn
               /* :d_current_delvry_mrgn_prcnt,
               :c_fsp_dt
         FROM VEM_VAR_ELM_MSTR,FSP_FO_SYSTM_PRMTR				* Ver 3.4 */
         FROM VEM_VAR_ELM_MSTR
         WHERE VEM_STCK_CD = ( SELECT SEM_MAP_VL
                            FROM SEM_STCK_MAP
                            WHERE sem_stck_cd=:c_undrlyng
                            AND SEM_ENTTY = '3');

        if(( SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
        {
         fn_errlog( c_ServiceName, "S31115", SQLMSG, c_err_msg );
         tpcommit(0);
         EXEC SQL CLOSE :sys_cursor;
         EXEC SQL FREE :sys_cursor;
         tpfree ( ( char * ) ptr_fml_Obuf );
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      
        /*** Ver 3.4 Starts ***/
        EXEC SQL
          SELECT  LODM_PRC,
                  MRGPRCNT_UPDDT
            INTO  :d_current_delvry_mrgn_prcnt,
                  :c_fsp_dt
            FROM  (SELECT NVL(FLM_TODAYS_LODM_PERCNT/100,0.0) LODM_PRC,
                          NVL(to_char(FLM_DLVRY_MRGPRCNT_UPDDT,'DD-Mon-YYYY'),'NA') MRGPRCNT_UPDDT
                  FROM  FLM_FO_LODM_MSTR
                  WHERE FLM_UNDRLYNG = :c_undrlyng
                  AND FLM_PRDCT_TYP = :c_prd_typ
                  AND FLM_EOS_DT >= TRUNC(SYSDATE)
									AND NVL(FLM_TODAYS_LODM_PERCNT,0.0) != 0);
        if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
        {
           fn_errlog( c_ServiceName, "S31120", SQLMSG, c_errmsg  );
           EXEC SQL CLOSE :sys_cursor;
           EXEC SQL FREE :sys_cursor;
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
        else if ((SQLCODE == NO_DATA_FOUND || d_current_delvry_mrgn_prcnt == 0) && (i_mnth_flg ==1))
        {
          EXEC SQL
            SELECT NVL(FLM_TODAYS_LODM_PERCNT/100,0.0) LODM_PRC,
                   NVL(to_char(FLM_DLVRY_MRGPRCNT_UPDDT,'DD-Mon-YYYY'),'NA') MRGPRCNT_UPDDT
            INTO  :d_current_delvry_mrgn_prcnt,
                  :c_fsp_dt
            FROM  FLM_FO_LODM_MSTR
            WHERE FLM_UNDRLYNG = 'ALL'
            AND   FLM_PRDCT_TYP = :c_prd_typ
            AND   NVL(FLM_TODAYS_LODM_PERCNT/100,0.0) != 0
            AND   FLM_EXP_DT = :c_expry_dt;
          if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
          {
            fn_errlog( c_ServiceName, "S31125", SQLMSG, c_errmsg  );
            EXEC SQL CLOSE :sys_cursor;
            EXEC SQL FREE :sys_cursor;
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
        }
        /*** Ver 3.4 Ends ***/

        if( DEBUG_MSG_LVL_5 )
        {
         fn_userlog(c_ServiceName,"Var % :%lf:",d_var_mrgn);
         fn_userlog(c_ServiceName,"ELM % :%lf:",d_extrm_lss_mrgn);
         fn_userlog(c_ServiceName,"Current Delivery Margin % :%lf:",d_current_delvry_mrgn_prcnt);
         fn_userlog(c_ServiceName,"FSP Date :%s:",c_fsp_dt);
         fn_userlog(c_ServiceName,"c_ltq_dt :%s:",c_ltq_dt);
        }
      
        if(strcmp(c_ltq_dt,c_fsp_dt)==0)
        {
          if( DEBUG_MSG_LVL_5 )
          {
           fn_userlog(c_ServiceName,"Considering Closing  Price for delivery margin");
          }

          l_stk_prc=l_cls_prc;
        }
        else
        {
          if( DEBUG_MSG_LVL_5 )
          {
           fn_userlog(c_ServiceName,"Considering Spot Price for delivery margin");
          }
      
          l_stk_prc=l_spot_prc;
        }

        if( DEBUG_MSG_LVL_5 )
        {
         fn_userlog(c_ServiceName,"l_stk_prc :%ld:",l_stk_prc);
        }

        if( ((c_opt_typ =='C') && ( l_stk_prc >= l_strike_prc )) || ((c_opt_typ =='P') && ( l_stk_prc <= l_strike_prc )))
        {
         
          if( DEBUG_MSG_LVL_5 )
          {
           fn_userlog(c_ServiceName,"Inside Strike price comparision");      
          }

         d_cntrct_value = ((double)l_strike_prc * (double)l_opnpstn_qty);
         d_mrggn_value= fn_maxd((d_var_mrgn+d_extrm_lss_mrgn+d_ISec_buff_mrgn_prcnt),d_dlvry_min_mrgn_prcnt);
         d_new_delvry_mrgn_val = (d_cntrct_value * d_mrggn_value * d_current_delvry_mrgn_prcnt);

          if( DEBUG_MSG_LVL_5 )
          {
           fn_userlog(c_ServiceName,"Computed Delivery Margin :%lf:",d_new_delvry_mrgn_val);
           fn_userlog(c_ServiceName,"Computed Delivery Margin :%lf:",d_new_delvry_mrgn_val);
          }

         EXEC SQL
         SELECT ROUND(:d_new_delvry_mrgn_val,2)
         INTO :d_new_delvry_mrgn_val 
         FROM DUAL ;

        if(( SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
        {
         fn_errlog( c_ServiceName, "S31130", SQLMSG, c_err_msg );
         tpcommit(0);
         EXEC SQL CLOSE :sys_cursor;
         EXEC SQL FREE :sys_cursor;
         tpfree ( ( char * ) ptr_fml_Obuf );
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
 

 
        d_reqd_dlvry_mrgn = d_dlvry_mrgn - d_new_delvry_mrgn_val;
   
        if( DEBUG_MSG_LVL_5 )
        {
         fn_userlog(c_ServiceName,"New Required delivery margin :%lf:",d_reqd_dlvry_mrgn);
        }

        if( d_reqd_dlvry_mrgn >= 0)
        {
          d_reqd_dlvry_mrgn=0.0; 
        }
        else
        {
         d_reqd_dlvry_mrgn= d_reqd_dlvry_mrgn * -1;
        }
     
        if( DEBUG_MSG_LVL_5 )
        {
         fn_userlog(c_ServiceName,"Required Delivery Margin :%lf:",d_reqd_dlvry_mrgn);
        }
      
       }
      }
     }

    if( DEBUG_MSG_LVL_5 )
    {
     fn_userlog(c_ServiceName,"Delivery Margin :%lf:",d_dlvry_mrgn);
     fn_userlog(c_ServiceName,"Required Delivery Margin :%lf:",d_reqd_dlvry_mrgn);
    }
    /****** Ver 3.2 ends ******/
 
		if( DEBUG_MSG_LVL_5 ) 
		{
			fn_userlog(c_ServiceName , " adding variables to FML ");
		}

	  i_returncode = fn_pack_vartofml ( c_ServiceName,
																			c_errmsg,
																			&ptr_fml_Obuf,
                                      40,						/* Ver 1.2 , It was 24 in Ver 1.1 */
																										/***  Ver 1.6 Changed From 27 To 28 ***/ 
																										/***  Ver 1.7 Changed From 28 To 30 ***/
                                                    /*** changed to 31 in Ver 2.5 ***/
																									/***  Ver 2.7  Changed From 31 To 32 ***/
																									/*** Ver 2.9  Changed from 32 to 33 ***/
																									/***  Ver 2.8  Changes From 33 to 34 ***/
                                                  /*** Ver 3.2 Changed from 34 to 36 ****/
                                                  /*** Ver 3.5 Changed from 36 to 39 ****/
                                                  /*** Ver 3.7 Changed from 39 to 40 ****/
                                    FFO_XCHNG_CD, (char *)c_xchng_cd,
                                    FFO_PRDCT_TYP,(char *)&c_prd_typ, 
                     							  FFO_UNDRLYNG,(char *)c_undrlyng,
																		FFO_EXPRY_DT,(char *)c_expry_dt,
																		FFO_EXER_TYP,(char *)&c_exrc_typ,
                                    FFO_OPT_TYP, (char *)&c_opt_typ,
                                    FFO_STRK_PRC, (char *)&l_strike_prc,
																		FFO_CTGRY_INDSTK,(char *)&c_ctgry_indstk,
																		FFO_C_OPNPSTN_FLW,(char *)&c_opnpstn_flw,
																		FFO_C_OPNPSTN_QTY,(char *)&l_opnpstn_qty,
																		FFO_C_ORG_OPN_VAL,(char *)&d_opnpstn_val,
															  	  FFO_CVR_QTY,(char *)&l_cvr_qty,	
															  	  FFO_CI_BUY_QTY,(char *)&l_ibuy_qty,	
															  	  FFO_CI_SELL_QTY,(char *)&l_isell_qty,	
															  	  FFO_EXRC_QTY,(char *)&l_exrc_qty,	
															  	  FFO_I_EXRC_QTY,(char *)&l_iexrc_qty,	
															  	  FFO_C_ORDR_MRGN,(char *)&d_ordr_mrgn,	
															  	  FFO_C_TRD_MRGN,(char *)&d_trd_mrgn,	
															  	  FFO_MTM_TRG_PRC,(char *)&l_mtm_trg_prc,	
																		FFO_LST_TRD_PRC,(char *)&l_lst_trdd_prc,
																		FFO_MIN_LOT_QTY,(char *)&l_lot_size,
                                    FFO_SPL_FLG,(char *)&c_spl_flg,
                                    FFO_I_DONTEXRC_QTY,(char *)&l_dont_exrc_qty,
																		FFO_PRCNTG_CHNG,(char *)&l_prcnt,          /* 1.1*/
																		FFO_EBA_MTCH_ACT_NO,(char*)&c_mtch_accnt_no,	/*ver 1.2 */
																		FFO_ACTN_ID,(char*)&ret_val,                  /*ver 1.2 */
																		FFO_SUB_BUF_CNT, (char *)&rec_cnt,							/*ver 1.2 */	
																		FFO_DWL_FLG, (char *)&c_addmrgn_flg,     		/*** Ver 1.6 ***/	
																		FFO_MTM_FLG, (char *)&c_trg_prc_stts,      	/*** Ver 1.7 ***/	
																		FFO_CLS_PRC, (char *)&l_spot_prc,      			/*** Ver 1.7 ***/
                                    FFO_RQST_TYP, (char *)&c_sqoff_at_market_flag,       /*** Ver 2.5 ***/
														      FFO_NKD_BLKD_FLG, (char *)&c_cancel_all_flag,       /*** Ver 2.7 ***/
																		FFO_DR_CR_FLG, (char *)&c_sqr_off_all_at_mkt, /*** Ver 2.8 ****/
																		FFO_BK_UBK_FLG, (char *)&c_setlmnt_flg,    /*** Ver 2.9 ***/
                                    FFO_SO_AMT_BLKD, (char *)&d_dlvry_mrgn,    /**** Ver 3.2 ***/
                                    FFO_OPNPSTN_VAL, (char *)&d_reqd_dlvry_mrgn, /*** Ver 3.2 ***/
																		FFO_INDX_INDCTR, (char *)&c_indx_indctr,      /*** Ver 3.5 ***/                                   
																		FFO_STLMNT_TYP, (char *)&c_dlvry_sttlmnt_typ, /*** Ver 3.5 ***/  	 	
																		FFO_BO_AMT_BLKD, (char *)&d_dlvry_oblgamt_blckd, /*** Ver 3.5 ***/  	 	
                                    FFO_EFF_EXCTD_RT, (char *)&d_avg_prcs);               /*** Ver 3.7 ***/

     if ( i_returncode == -1 )
     {
    			tpcommit(0);
          fn_errlog( c_ServiceName, "S31135", FMLMSG, c_errmsg  );
          EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE :sys_cursor;
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
									/***Ver 1.2 Starts ***/
    if( DEBUG_MSG_LVL_5 ) {          /*  Ver 1.3 : Debug level Change  */
		fn_userlog(c_ServiceName,"size of ptr_fml_Obuf:%ld:",Fsizeof32(ptr_fml_Obuf));
    }

		if (i_size == 0 )
		{
			l_size_ocpd=Fsizeof32(ptr_fml_Obuf)-Funused32(ptr_fml_Obuf);
			if( DEBUG_MSG_LVL_3 )  /** ver 2.4 **/ 
      {
        fn_userlog(c_ServiceName,"Size Occpd:%ld:",l_size_ocpd);
      }

			i_size = 1 ;
		}
									/***Ver 1.2 Ends ***/

   } /* For loop */

	EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

	tpcommit(0);					/**Ver 1.2 **/
  
  if( DEBUG_MSG_LVL_5 ) {          /*  Ver 1.3 : Debug level Change  */
	fn_userlog(c_ServiceName,"size of ptr_fml_Obuf:%ld:",Fsizeof32(ptr_fml_Obuf));
  }

  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
}
