/*                                                                                            *
*		File : sfo_payment_api.pc																																	*
*																																															*
*  Description:   This service is used for Sensibull Plan subscription                        *
*																																															*
*  Input Parameters:                                                                          *	
*  Output Parameters:																																					*
*																																															*
*  Called by:  ASP																																						*
***********************************************************************************************
*     23-Nov-2019  Ver 1.0  New Release   Tanmay Patel                                        *
*     28-Aug-2020  Ver 1.1  Removal of linked bank account check  (Navina D.)                 *
**********************************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fn_pos.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fml_def.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <string.h>
#include <userlog.h>
#include <fml_rout.h>
#include <stdlib.h>
#include <fn_val_ord.h>
#include <fn_session.h>
#include <fn_read_debug_lvl.h>
#include <fml_mf.h>

EXEC SQL INCLUDE "table/mdc_misc_dr_cr.h";

#define ALLOCATION   'A'
#define PYMNT_GTWAY  'P'
#define MI_DUMMY_BNK_ACCNT "000000000000"


void SFO_PAYMENT_API ( TPSVCINFO *rqst )
{

  int   fn_get_mi_stts    (char*  ,char*  ,long   ,char*,char*, char* ,char*);

  FBFR32 *ptr_fml_Ibuf=NULL;
  FBFR32 *ptr_fml_Obuf=NULL;
	FBFR32 *ptr_fml_Sbuffer=NULL;
	FBFR32 *ptr_fml_Rbuffer=NULL;

  int  i = 0;
  int  i_cnt = 0;
  int  i_trnsctn    = 0;
  int  i_returncode = 0; 
  int  i_diff_exist = 0;
  int  i_duration = 0;
  int  i_mdc_cnt  = 0;
  int  i_err[16]; 
  int  i_ferr[16];
  int  i_diff_amt = 0;
  int  i_curr_plan_remnig_day = 0;
  int  i_plan_exist = 0;
  int  i_date_valid = 0;
  int  i_upcoming_exist = 0;
  int  i_date_valid_with_sen = 0; 
  int  i_curr_plan_total_day = 0;

  char c_plan_rqst_typ ='A';
  char c_plan_stts = '\0';
  char c_source_flg = '\0';
  char c_usr_id[9] = "\0";                         
  char c_match_id [11] = "\0";   
  varchar c_subscrp_typ[100];    
  varchar c_subscrp_pln_nm[100];     
  varchar c_curr_plan_nm[100];
  varchar c_sen_strt_dt [12];          
  varchar c_sen_end_dt  [12];                  
  varchar c_strt_dt [12];
  varchar c_end_dt  [12];
  char c_trd_date  [12] = "\0";
  varchar c_sesib_paymt_id[50];    
  char c_auto_ren_flg = '\0';         
  char c_alloct_seg[4] = "\0"; 
  char c_pymnt_src = '\0';
  char c_lmt_flg = '\0'; 
  char c_narration_id[4] = "\0"; 
  char c_ServiceName [35] = "\0"; 
  char c_err_msg [256] = "\0";
	char c_errmsg[256] = "\0";
  char c_nonlnkd_accnt_flg = ' ';
  char c_bnk_accnt_nmbr[21] ="\0";
  char c_xchng_cd[4] ="\0";
  char c_state_cd[3] = "\0";
  char c_isec_state_cd[3]  = "\0";
  char c_upgrade_flg ='N';
	varchar c_prdct_cd[6+1];
	varchar c_sub_prdct_cd[6+1];

  double d_balance_amt = 0.0;
  double d_subscp_amt = 0.0; 
  double d_avail_lmts =0.0;
  double d_discnt_prcnt  = 0.0;
  double d_actul_pln_amt = 0.0;
  double d_discnted_amt  = 0.0;
  double d_gst_amt = 0.0;
  double d_gst_prcnt = 0.0;
  double d_limits = 0.0;
  double d_per_day_amnt = 0.0;
  double d_remnig_amnt = 0.0 ;
  double d_curr_plan_discnt_amnt = 0.0 ;

	double  d_cgst_per = 0.0;
  double  d_sgst_per = 0.0; 
	double  d_ugst_per = 0.0;
	double  d_igst_per = 0.0;
  long   l_sssn_id = 0;
  long   l_gid     = 0;
  long   l_tran_id = 0;
	long   l_recvbuff=0;

  MEMSET(c_usr_id);
  MEMSET(c_match_id);
  MEMSET(c_subscrp_typ);
  MEMSET(c_subscrp_pln_nm);
  MEMSET(c_strt_dt);
  MEMSET(c_end_dt);
  MEMSET(c_sen_strt_dt);
  MEMSET(c_sen_end_dt);
  MEMSET(c_sesib_paymt_id);
  MEMSET(c_alloct_seg);
  MEMSET(c_sub_prdct_cd);
	MEMSET(c_prdct_cd);
  MEMSET(c_curr_plan_nm); /*** Ver 1.1 ***/
  EXEC SQL INCLUDE  "table/icd_info_client_dtls.h";

  struct vw_pstn_actn ptr_st_pstn_actn;
  struct vw_err_msg *ptr_st_err_msg; 
  struct vw_usr_prfl st_usr_prfl;

  MEMSET(ptr_st_pstn_actn);
  MEMSET(st_usr_prfl);

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  ptr_fml_Obuf = (FBFR32 *)NULL;
  strcpy( c_ServiceName, rqst->name );


  ptr_fml_Obuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if(ptr_fml_Obuf == NULL)
  {
    fn_errlog ( c_ServiceName, "S31005", TPMSG, c_err_msg );
    tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
  }

  ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32","vw_err_msg",sizeof ( struct vw_err_msg ) );

  if ( ptr_st_err_msg ==  NULL )
  {
    fn_errlog ( c_ServiceName, "S31010", TPMSG, c_err_msg );
		tpfree( (char *) ptr_fml_Obuf);
    tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
  }

  memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );

  i_err [0] = Fget32(ptr_fml_Ibuf,FFO_USR_ID,0,( char * )c_usr_id,0);
  i_ferr[0] = Ferror32;
  i_err [1] = Fget32(ptr_fml_Ibuf,FFO_SSSN_ID,0,( char * )&l_sssn_id,0);   
  i_ferr[1] = Ferror32;
  i_err [2] = Fget32(ptr_fml_Ibuf,FFO_EBA_MTCH_ACT_NO,0,( char * )c_match_id,0);
  i_ferr[2] = Ferror32;
  i_err [3] = Fget32(ptr_fml_Ibuf,FFO_INSTRMNT_TYP,0,( char * )c_subscrp_typ.arr,0);
  i_ferr[3] = Ferror32;
  i_err [4] = Fget32(ptr_fml_Ibuf,FFO_TRG_NM,0,( char * )c_subscrp_pln_nm.arr,0);
  i_ferr[4] = Ferror32;
  i_err [5] = Fget32(ptr_fml_Ibuf,FFO_IS_FLG,0,( char * )&c_auto_ren_flg,0);
  i_ferr[5] = Ferror32;
  i_err [6] = Fget32(ptr_fml_Ibuf,FFO_XCHNG_CD,0,( char * )c_alloct_seg,0);
  i_ferr[6] = Ferror32;
  i_err [7] = Fget32(ptr_fml_Ibuf,FFO_TRNSCTN_TYP,0,( char * )&c_pymnt_src,0);
  i_ferr[7] = Ferror32;
  i_err [8] = Fget32(ptr_fml_Ibuf,FFO_SOURCE_FLG,0,( char * )&c_source_flg,0); 
  i_ferr[8] = Ferror32;
  i_err [9] = Fget32(ptr_fml_Ibuf,FFO_SOMC_PRCNT,0,( char * )&d_discnt_prcnt,0); 
  i_ferr[9] = Ferror32;

  for(i =0; i<10; i++)
  {
     if(i_err[i] == -1 )
     {
        fn_userlog(c_ServiceName,"Error at field :%d:",i);
        fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg );
        tpfree( (char *) ptr_fml_Obuf);
				tpfree( (char *) ptr_st_err_msg);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
  }
  
  i_err [0]  = Fget32(ptr_fml_Ibuf,FFO_ND_STRT_DT,0,( char * )c_sen_strt_dt.arr,0);
  i_ferr[0]  = Ferror32;
  i_err [1]  = Fget32(ptr_fml_Ibuf,FFO_ND_END_DT,0,( char * )c_sen_end_dt.arr,0);
  i_ferr[1]  = Ferror32;
  i_err [2]  = Fget32(ptr_fml_Ibuf,FFO_CLNT_DPID,0,( char * )c_sesib_paymt_id.arr,0);
  i_ferr[2]  = Ferror32;
  i_err [3]  = Fget32(ptr_fml_Ibuf,FFO_DWL_FLG,0,( char * )&c_upgrade_flg,0);
  i_ferr[3]  = Ferror32;


  for(i =0; i<3; i++)
  {
    if(i_err[i] == -1 && i_ferr[i] != FNOTPRES)
    {
       fn_userlog(c_ServiceName,"Error at field :%d:",i);
       fn_errlog( c_ServiceName, "S31020", FMLMSG, c_err_msg );
       tpfree( (char *) ptr_fml_Obuf);
			 tpfree( (char *) ptr_st_err_msg);
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
    }
    else if(i_err[i] == -1 && i_ferr[i] == FNOTPRES && c_source_flg != 'I')
    {
       fn_userlog(c_ServiceName,"Error at field :%d:",i);
       fn_errlog( c_ServiceName, "S31025", FMLMSG, c_err_msg );
       tpfree( (char *) ptr_fml_Obuf);
			 tpfree( (char *) ptr_st_err_msg);
 			 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }

  SETLEN(c_sen_strt_dt);
  SETLEN(c_sen_end_dt);
  SETLEN(c_subscrp_typ);
  SETLEN(c_subscrp_pln_nm);  
 
	/*** Ver 1.1 starts ***/
	if(DEBUG_MSG_LVL_0)
	{
    fn_userlog(c_ServiceName,"Input<%s><%s><%c><%c><%lf><%c><%s><%s>", c_match_id,c_subscrp_pln_nm.arr,c_pymnt_src,c_source_flg,d_discnt_prcnt,c_upgrade_flg,c_sen_strt_dt.arr,c_sen_end_dt.arr );	
	}
	/*** Ver 1.1 ends ***/
 
  if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"c_usr_id         :%s:", c_usr_id);        
		fn_userlog(c_ServiceName,"l_sssn_id   	   :%ld:",l_sssn_id);      
		fn_userlog(c_ServiceName,"c_match_id	     :%s:", c_match_id );     
		fn_userlog(c_ServiceName,"c_subscrp_typ	   :%s:", c_subscrp_typ.arr);   
		fn_userlog(c_ServiceName,"c_subscrp_pln_nm :%s:", c_subscrp_pln_nm.arr);
		fn_userlog(c_ServiceName,"c_strt_dt	       :%s:", c_sen_strt_dt.arr);       
		fn_userlog(c_ServiceName,"c_end_dt	       :%s:", c_sen_end_dt.arr);        
		fn_userlog(c_ServiceName,"c_sesib_paymt_id :%s:", c_sesib_paymt_id.arr);
		fn_userlog(c_ServiceName,"c_auto_ren_flg   :%c:", c_auto_ren_flg );
		fn_userlog(c_ServiceName,"c_alloct_seg	   :%s:", c_alloct_seg );   
		fn_userlog(c_ServiceName,"c_pymnt_src	     :%c:", c_pymnt_src );   
		fn_userlog(c_ServiceName,"c_source_flg     :%c:", c_source_flg );
		fn_userlog(c_ServiceName,"d_discnt_prcnt   :%lf:",d_discnt_prcnt );
		fn_userlog(c_ServiceName,"c_upgrade_flg    :%c:" ,c_upgrade_flg );
	}

	if( l_sssn_id != 0)
  {
    strcpy(st_usr_prfl.c_user_id,c_usr_id);
    strcpy(st_usr_prfl.c_cln_mtch_accnt,c_match_id);
    st_usr_prfl.l_session_id = l_sssn_id;

    if( fn_chk_sssn( c_ServiceName, &st_usr_prfl,ptr_st_err_msg ) == -1)
    {
       fn_errlog( c_ServiceName, "S31030", LIBMSG, ptr_st_err_msg->c_err_msg ); 
       Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0);
       tpfree( (char *) ptr_fml_Obuf);
			 tpfree( (char *) ptr_st_err_msg);
			 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }

	/*** TNC check commented as we will allow payment  even if Idirect Sensibull TNC is not accepted  assuming FNO TNC is accepted while allocating funds***
	if (c_source_flg == 'S')
	{
  	i_returncode = fn_chk_sensibull_tnc ( c_ServiceName,
                                          c_usr_id,
                                          ptr_st_err_msg
                                        );
		if (i_returncode == -1)
		{
			fn_errlog( c_ServiceName, "S31035","Error in function fn_chk_sensibull_tnc",c_err_msg);
    	Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0);
    	tpfree( (char *) ptr_fml_Obuf);
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
  ***/

	i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    fn_errlog( c_ServiceName, "S31040", LIBMSG, c_err_msg  );
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    tpfree( (char *) ptr_fml_Obuf);
 	  tpfree( (char *) ptr_st_err_msg);
    tpreturn(TPFAIL, 0, (char *)ptr_fml_Ibuf, 0, 0);
  }

  if( c_pymnt_src == PYMNT_GTWAY && strlen(c_match_id) != 0)
  {

     if ( c_source_flg == 'S' )
     {
 			  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_userlog(c_ServiceName,"Payment Gateway facility is not available  ...");
        strcpy(c_err_msg,"Payment Gateway facility is not available ...");
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
        tpfree( (char *) ptr_fml_Obuf);
			  tpfree( (char *) ptr_st_err_msg);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
  
     if ( strlen(c_match_id) != 0 )
     {

       fn_userlog(c_ServiceName," inside payment gateway ....");
       MEMSET(sql_icd_cust_type);

       EXEC SQL
       SELECT ICD_CUST_TYPE
       INTO  :sql_icd_cust_type
       FROM  ICD_INFO_CLIENT_DTLS
       WHERE ICD_USER_ID = :c_usr_id;

       if( SQLCODE != 0)
       {
          fn_errlog( c_ServiceName, "S31045", SQLMSG, c_err_msg );
          tpfree( (char *) ptr_fml_Obuf);
 			    tpfree( (char *) ptr_st_err_msg);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }

       SETNULL(sql_icd_cust_type);
  
       if(strcmp(sql_icd_cust_type.arr,"NRI") == 0)
       {
          fn_userlog(c_ServiceName,"Payment Gateway facility is not available for NRI...");
          strcpy(c_err_msg,"Payment Gateway facility is not available for NRI");
          Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
          tpfree( (char *) ptr_fml_Obuf);
	 			  tpfree( (char *) ptr_st_err_msg);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }
     }
  }



  /*** Check usr match combination ***/

  if ( strlen(c_match_id) != 0 )
  {  
     if ( c_usr_id[0] != BPID )
     {
        EXEC SQL
        SELECT 1
        INTO   :i_cnt
        FROM   UAC_USR_ACCNTS
        WHERE  UAC_USR_ID=:c_usr_id
        AND    UAC_CLM_MTCH_ACCNT=:c_match_id;

        if(SQLCODE != 0)
        {
          if(SQLCODE == NO_DATA_FOUND)
          {
            fn_userlog(c_ServiceName,"USR [%lf] - MTCH [%s] IS INVALID",c_usr_id,c_match_id);
            strcpy(c_err_msg,"Match id - Usr is is invalid");         
            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            tpfree( (char *) ptr_fml_Obuf);
					  tpfree( (char *) ptr_st_err_msg);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
          else
          {
            fn_errlog( c_ServiceName, "S31050", SQLMSG, c_err_msg );
            tpfree( (char *) ptr_fml_Obuf);
					  tpfree( (char *) ptr_st_err_msg);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
        }
     }
     else
     {
        EXEC SQL
        SELECT 1
        INTO   :i_cnt
        FROM   CLM_CLNT_MSTR
        WHERE  CLM_BP_ID=:c_usr_id
        AND    CLM_MTCH_ACCNT=:c_match_id;

        if(SQLCODE != 0)
        {
          if(SQLCODE == NO_DATA_FOUND)
          {
            userlog("Match account [%s] not linked to BPID [%lf]", c_match_id,c_usr_id);
            strcpy(c_err_msg,"Match id not linked to BPID");
            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            tpfree( (char *) ptr_fml_Obuf);
					  tpfree( (char *) ptr_st_err_msg);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
          else
          {
            fn_errlog( c_ServiceName, "S31055", SQLMSG, c_err_msg );
            tpfree( (char *) ptr_fml_Obuf);
						tpfree( (char *) ptr_st_err_msg);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
        }
     }
  }


  EXEC SQL
  SELECT COUNT(1)
  INTO   :i_upcoming_exist
  FROM   ACP_API_CURR_PLAN
  WHERE  ACP_CLM_MTCH_ACCNT = :c_match_id 
  AND    ACP_USER_ID = :c_usr_id
  AND    ACP_ACTV_FLG ='P';

  if( SQLCODE != 0)
  {
     fn_errlog( c_ServiceName, "S31060", SQLMSG, c_err_msg );
     tpfree( (char *) ptr_fml_Obuf);
		 tpfree( (char *) ptr_st_err_msg);
		 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if(i_upcoming_exist > 0)
  {
    fn_userlog(c_ServiceName,"You have already an Upcoming paln...You Can not Upgarde this plan...!");
    strcpy(c_err_msg,"You have already an Upcoming paln...You Can not Upgarde this plan...!");
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    tpfree( (char *) ptr_fml_Obuf);
	  tpfree( (char *) ptr_st_err_msg);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if (strcmp(c_subscrp_pln_nm.arr,"TRIAL") != 0 )
  {
  EXEC SQL
   SELECT APA_PLAN_AMNT,
          APA_DISCNTED_AMNT,
          APA_SUBSCRP_AMNT,
          APM_DURATION,
          APM_GST_PRCNT,    
          APA_SUBSCRP_AMNT - APA_DISCNTED_AMNT
   INTO   :d_actul_pln_amt,
          :d_discnted_amt,
          :d_subscp_amt,
          :i_duration,
          :d_gst_prcnt, 
          :d_gst_amt
   FROM   APA_API_PLAN_AMNT,APM_API_PLAN_MSTR 
   WHERE  APA_PLAN_NM       = :c_subscrp_pln_nm  
   AND    APA_DISCNT_PRCNTG = :d_discnt_prcnt
   AND    APA_PLAN_NM = APM_PLAN_NM; 
   
   if( SQLCODE != 0)
   {
      fn_errlog( c_ServiceName, "S31065", SQLMSG, c_err_msg );
      tpfree( (char *) ptr_fml_Obuf);
 		  tpfree( (char *) ptr_st_err_msg);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
  }
  else
  {
  EXEC SQL
     SELECT APM_DURATION,
            APM_GST_PRCNT
     INTO   :i_duration,
            :d_gst_prcnt
     FROM   APM_API_PLAN_MSTR
     WHERE  APM_PLAN_NM =:c_subscrp_pln_nm;

   if( SQLCODE != 0)
   {
      fn_errlog( c_ServiceName, "S31070", SQLMSG, c_err_msg );
      tpfree( (char *) ptr_fml_Obuf);
			tpfree( (char *) ptr_st_err_msg);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

  }

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"d_actul_pln_amt  :%lf:",d_actul_pln_amt);
		fn_userlog(c_ServiceName,"d_discnted_amt   :%lf:",d_discnted_amt);
		fn_userlog(c_ServiceName,"d_subscp_amt     :%lf:",d_subscp_amt);
		fn_userlog(c_ServiceName,"i_duration       :%d:" ,i_duration);
	}

  EXEC SQL
  SELECT ACP_PLAN_NM,
         ACP_DISCNTED_AMNT,
         to_date(ACP_END_DT) - trunc(sysdate)+1,
         to_date(ACP_END_DT) - to_date(ACP_START_DT) +1
  INTO   :c_curr_plan_nm,
         :d_curr_plan_discnt_amnt,
         :i_curr_plan_remnig_day,
         :i_curr_plan_total_day
  FROM   ACP_API_CURR_PLAN
  WHERE  ACP_CLM_MTCH_ACCNT = :c_match_id
  AND    ACP_USER_ID   = :c_usr_id
  AND    ACP_PLAN_TYPE = :c_subscrp_typ
  AND    ACP_PLAN_NM   <> 'TRIAL'
  AND    ACP_ACTV_FLG  = 'A';

  if( SQLCODE != 0 )
  {
    if ( SQLCODE != NO_DATA_FOUND)
    {   
      fn_errlog( c_ServiceName, "S31075", SQLMSG, c_err_msg );
      tpfree( (char *) ptr_fml_Obuf);
			tpfree( (char *) ptr_st_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    else if ( c_upgrade_flg == 'Y' ) 
    {
      fn_errlog( c_ServiceName, "S31080", SQLMSG, c_err_msg );
      tpfree( (char *) ptr_fml_Obuf);
			tpfree( (char *) ptr_st_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }        
  }

   SETLEN(c_curr_plan_nm);
   SETNULL(c_curr_plan_nm); /*** Ver 1.1 ***/

	 fn_userlog(c_ServiceName,"c_curr_plan_nm  :%s:",c_curr_plan_nm.arr);


  if ( c_upgrade_flg == 'Y' )
  {

    if ( c_pymnt_src != ALLOCATION || c_source_flg == 'I' )   
    {
       fn_userlog(c_ServiceName, "You Can not Upgarde the plan ...!");
       strcpy(c_err_msg, "You Can not Upgarde the plan ...!" );
       Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
       tpfree( (char *) ptr_fml_Obuf);
			 tpfree( (char *) ptr_st_err_msg);
			 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    
    c_plan_rqst_typ = 'U';  /** U - Upgarde **/
    c_plan_stts     = 'A';  /** A - Active  **/

    EXEC SQL
    SELECT COUNT(1)
    INTO   :i_date_valid 
    FROM   DUAL
    WHERE  trunc(SYSDATE) != to_date(:c_sen_strt_dt);  

    if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog( c_ServiceName, "S31085", SQLMSG, c_err_msg );
      tpfree( (char *) ptr_fml_Obuf);
			tpfree( (char *) ptr_st_err_msg);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if ( i_date_valid != 0 )
    {
       fn_userlog(c_ServiceName, "You Can not Upgarde the plan ...!");
       fn_userlog(c_ServiceName, "Invalid Start Date...!");
       strcpy(c_err_msg, "You Can not Upgarde the plan ...!" );
       Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
       tpfree( (char *) ptr_fml_Obuf);
			 tpfree( (char *) ptr_st_err_msg);
			 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );      
    }
    
    SETLEN(c_curr_plan_nm);

    if ( strcmp(c_curr_plan_nm.arr,c_subscrp_pln_nm.arr) == 0 ) 
    {
       fn_userlog(c_ServiceName, "You Can not Upgarde the plan ...!");
       strcpy(c_err_msg, "You Can not Upgarde the plan ...!" );
       Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
       tpfree( (char *) ptr_fml_Obuf);
			 tpfree( (char *) ptr_st_err_msg);
			 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
 
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"d_curr_plan_discnt_amnt :%lf:",d_curr_plan_discnt_amnt);
			fn_userlog(c_ServiceName,"i_curr_plan_remnig_day  :%d:",i_curr_plan_remnig_day );
			fn_userlog(c_ServiceName,"i_curr_plan_total_day   :%d:",i_curr_plan_total_day );  
		}

    d_per_day_amnt = d_curr_plan_discnt_amnt/i_curr_plan_total_day;
    d_remnig_amnt  = d_per_day_amnt*i_curr_plan_remnig_day;
    d_discnted_amt = d_discnted_amt - d_remnig_amnt;
    d_gst_amt      = (d_discnted_amt*d_gst_prcnt) /100;
    d_subscp_amt   = d_discnted_amt + d_gst_amt;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"d_discnted_amtd  :%lf:",d_discnted_amt);
			fn_userlog(c_ServiceName,"d_gst_amt        :%lf:",d_gst_amt);
			fn_userlog(c_ServiceName,"d_subscp_amt     :%lf:",d_subscp_amt);
		}
		
    EXEC SQL
     SELECT
     ROUND(:d_discnted_amt),
     ROUND(:d_gst_amt),
     ROUND(:d_subscp_amt)
     INTO
     :d_discnted_amt,
     :d_gst_amt,
     :d_subscp_amt
     FROM DUAL;

     if( SQLCODE != 0)
     {
       fn_errlog( c_ServiceName, "S31090", SQLMSG, c_err_msg );
       tpfree( (char *) ptr_fml_Obuf);
			 tpfree( (char *) ptr_st_err_msg);
			 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     } 

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"d_per_day_amnt   :%lf:",d_per_day_amnt);
			fn_userlog(c_ServiceName,"d_remnig_amnt    :%lf:",d_remnig_amnt);
			fn_userlog(c_ServiceName,"d_discnted_amtd  :%lf:",d_discnted_amt);
			fn_userlog(c_ServiceName,"d_gst_amt        :%lf:",d_gst_amt);
			fn_userlog(c_ServiceName,"d_subscp_amt     :%lf:",d_subscp_amt);
		}
  }
  else if (strcmp(c_curr_plan_nm.arr,"LITE_1MONTH") == 0 && strcmp(c_subscrp_pln_nm.arr,"PRO_1MONTH") == 0 ||
           strcmp(c_curr_plan_nm.arr,"LITE_1MONTH") == 0 && strcmp(c_subscrp_pln_nm.arr,"PRO_6MONTH") == 0 ||
           strcmp(c_curr_plan_nm.arr,"LITE_6MONTH") == 0 && strcmp(c_subscrp_pln_nm.arr,"PRO_1MONTH") == 0 || 
           strcmp(c_curr_plan_nm.arr,"LITE_6MONTH") == 0 && strcmp(c_subscrp_pln_nm.arr,"PRO_6MONTH") == 0   
          )   
  {
       fn_userlog(c_ServiceName, "You Can not subscribe this plan ...!");
       strcpy(c_err_msg, "You Can not subscribe this plan ...!" );
       Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
       tpfree( (char *) ptr_fml_Obuf);
			 tpfree( (char *) ptr_st_err_msg);
       fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if( d_subscp_amt < 0 )
  {
      fn_userlog(c_ServiceName, "You can not subscribe the plan. Amount is not valid ...!");
      strcpy(c_err_msg, "You can not subscribe the plan. Amount is not valid ...!" );
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
      tpfree( (char *) ptr_fml_Obuf);
			tpfree( (char *) ptr_st_err_msg);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if( c_pymnt_src == ALLOCATION && d_subscp_amt != 0)
  {
     strcpy(c_narration_id,ON_SUBSCRIPTION);

     i_returncode =   fn_get_mi_stts(c_ServiceName,
                                     c_usr_id,
                                     l_sssn_id,
                                     c_match_id,
                                     &c_nonlnkd_accnt_flg,
                                     (char *)c_bnk_accnt_nmbr,
                                     c_err_msg);

     if(i_returncode != 0)
     {
        fn_errlog( c_ServiceName, "S31095", LIBMSG, c_err_msg );
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
        tpfree( (char *) ptr_fml_Obuf);
				tpfree( (char *) ptr_st_err_msg);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }

     fn_userlog(c_ServiceName,"Non - Linked Account Flag is |%c|", c_nonlnkd_accnt_flg);
     fn_userlog(c_ServiceName,"Bank Accnt Number is         |%s|", c_bnk_accnt_nmbr);

     if(c_nonlnkd_accnt_flg == 'N') /*Customer is linked*/
     {
       fn_userlog(c_ServiceName,"Customer is having linked bank account");
       /********** 
       c_dbcr_stts = 'N';
       c_pgw_trn_flg = 'N';    *Indicates order is from Normal allocation for Payin*
        ************/
     }
     else if(c_nonlnkd_accnt_flg == 'Y') /*Customer is non-linked*/
     {
       fn_userlog(c_ServiceName,"Customer is having non-linked bank account");
       /** Dummy bnk accnt in case of non-linked customer **/ 
       strcpy(c_bnk_accnt_nmbr, MI_DUMMY_BNK_ACCNT);
       /************
       c_dbcr_stts = 'A';
       c_pgw_trn_flg = 'A';  Indicates order is from PG allocation **
        **************/
       /**** strcpy(c_err_msg,"Customer is having non-linked bank account");
       Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
       tpfree( (char *) ptr_fml_Obuf);
			 tpfree( (char *) ptr_st_err_msg);
			 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );  *** Ver 1.1 continue in case of nonlinked bank account ***/
     }

		 fn_userlog(c_ServiceName,"c_narration_id:%s:",c_narration_id);

		l_gid = 0;

     EXEC SQL
     SELECT fnm_grp_id
     INTO  :l_gid
     FROM fnm_fo_narration_mstr
     WHERE fnm_narration_id = :c_narration_id;
    
		fn_userlog(c_ServiceName,"l_gid:%ld:",l_gid);	 
     if( SQLCODE != 0)
     {
       fn_errlog( c_ServiceName, "S31100", SQLMSG, c_err_msg );
       tpfree( (char *) ptr_fml_Obuf);
			 tpfree( (char *) ptr_st_err_msg);
			 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     } 

     EXEC SQL
     SELECT  GREATEST(exg_nxt_trd_dt,EXG_TMP_TRD_DT)
     INTO    :c_trd_date 
     FROM    exg_xchng_mstr
     WHERE   exg_xchng_cd = 'NFO';

     if( SQLCODE != 0)
     {
       fn_errlog( c_ServiceName, "S31105", SQLMSG, c_err_msg );
       tpfree( (char *) ptr_fml_Obuf);
       tpfree( (char *) ptr_st_err_msg);
			 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }

     strcpy(c_xchng_cd,"NFO");

     i_returncode = fo_get_trd_limit(c_ServiceName,
                                     c_match_id,
                                     c_trd_date,
                                     LIMIT_X,
                                     c_xchng_cd,
                                     l_gid,
                                     &d_limits,
                                     c_err_msg
                                     );
     if(i_returncode != 0)
     {
        fn_errlog( c_ServiceName, "S31110", LIBMSG, c_err_msg );
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
        tpfree( (char *) ptr_fml_Obuf);
				tpfree( (char *) ptr_st_err_msg);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }

     fn_userlog(c_ServiceName,"limit is  :%lf:",d_limits);

     EXEC SQL     
     SELECT LEAST((NVL(FAB_ALCTD_AMT,0)+NVL(FAB_BFT_AMT,0)+NVL(FAB_PLG_AMT,0)+NVL(FAB_ISEC_MRGN_AMT,0)),:d_limits)
     INTO   :d_avail_lmts
     FROM   FAB_FO_ALC_BFT_SMRY
     WHERE  FAB_CLM_MTCH_ACCNT = :c_match_id;

     if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
     {
        fn_errlog( c_ServiceName, "S31115", SQLMSG, c_err_msg );
        tpfree( (char *) ptr_fml_Obuf);
				tpfree( (char *) ptr_st_err_msg);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }

     fn_userlog(c_ServiceName,"d_avail_lmts :%lf:",d_avail_lmts);

     EXEC SQL
     SELECT count(1)
     INTO   :i_diff_exist
     FROM   DUAL
     WHERE  ROUND(:d_avail_lmts,2) < ROUND(:d_subscp_amt,2);

     if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
     {
        fn_errlog( c_ServiceName, "S31120", SQLMSG, c_err_msg );
        tpfree( (char *) ptr_fml_Obuf);
				tpfree( (char *) ptr_st_err_msg);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }

     if(i_diff_exist == 1)
     {
       fn_userlog(c_ServiceName,"available limits less than transaction amnt - cannot unblock");
       fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg );
       Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
       tpfree( (char *) ptr_fml_Obuf);
			 tpfree( (char *) ptr_st_err_msg);
			 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
      
     fn_userlog(c_ServiceName,"Inside Alloction mode");

    strcpy(ptr_st_pstn_actn.c_xchng_cd,"NFO");
    strcpy(ptr_st_pstn_actn.c_cln_mtch_accnt,c_match_id);
    strcpy(c_narration_id,ON_SUBSCRIPTION);

    i_returncode = fn_upd_limits( c_ServiceName,
                                   &ptr_st_pstn_actn,
                                   ptr_st_err_msg,
                                   c_narration_id,
                                   DEBIT_WHEN_LIMIT,
                                   -1* d_subscp_amt,
                                   &d_balance_amt);
    if(i_returncode != 0)
    {
      switch ( i_returncode )
      {
         case INSUFFICIENT_LIMITS :
              fn_userlog ( c_ServiceName,"INSIDE INSUFFICIENT_LIMITS WITH LIMIT FLAG :%c:",c_lmt_flg );
	            strcpy(c_err_msg,"INSIDE INSUFFICIENT_LIMITS.");
	            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0);
              fn_aborttran( c_ServiceName, i_trnsctn,ptr_st_err_msg->c_err_msg );
							tpfree( (char *) ptr_st_err_msg);
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

         default :
              fn_errlog ( c_ServiceName, "S31125", LIBMSG, ptr_st_err_msg->c_err_msg );
              fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
							tpfree( (char *) ptr_st_err_msg);
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }      
    }
   
  }

  EXEC SQL
    SELECT COUNT(1)
    INTO   :i_plan_exist
    FROM   ACP_API_CURR_PLAN
    WHERE  ACP_CLM_MTCH_ACCNT = :c_match_id
    AND    ACP_USER_ID   = :c_usr_id
    AND    ACP_PLAN_TYPE = :c_subscrp_typ 
    AND    ACP_ACTV_FLG  = 'A';

    if( SQLCODE != 0)
    {
       fn_errlog( c_ServiceName, "S31130", SQLMSG, c_err_msg );
       tpfree( (char *) ptr_fml_Obuf);
			 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			 tpfree( (char *) ptr_st_err_msg);
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    fn_userlog(c_ServiceName,"i_plan_exist ....:%d:",i_plan_exist);
      
    if ( i_plan_exist == 1 && c_upgrade_flg != 'Y')
    {
      fn_userlog(c_ServiceName,"Plan Exist ....");

      c_plan_rqst_typ ='P';  /** P - Pending   **/
      c_plan_stts     ='P';

      EXEC SQL
      SELECT to_char(ACP_END_DT +1) ,
             to_date(LEAST(to_number(to_char(to_date(ACP_END_DT)+1,'DD')),
              (to_number(to_char(trunc(add_months(to_date(ACP_END_DT)+1,:i_duration+1),'MONTH')-1,'DD')))) 
               || to_char(trunc(add_months(to_date(ACP_END_DT)+1,:i_duration+1),'MONTH')-1,'-Mon-YYYY')) -1
      INTO   :c_strt_dt,
             :c_end_dt
      FROM   ACP_API_CURR_PLAN
      WHERE  ACP_CLM_MTCH_ACCNT = :c_match_id
      AND    ACP_USER_ID   = :c_usr_id
      AND    ACP_PLAN_TYPE = :c_subscrp_typ
      AND    ACP_ACTV_FLG  = 'A';

      if( SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S31135", SQLMSG, c_err_msg );
        tpfree( (char *) ptr_fml_Obuf);
				tpfree( (char *) ptr_st_err_msg);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
    else if ( i_plan_exist == 0 || c_upgrade_flg == 'Y' )
    {

      fn_userlog(c_ServiceName,"Plan Not Exist ....");

      c_plan_rqst_typ ='C';  /** C - Current **/
      c_plan_stts     ='A';  /** A - Active  **/

      if( strcmp(c_subscrp_pln_nm.arr,"TRIAL") == 0 )
      {
       EXEC SQL
       SELECT trunc(SYSDATE),
              sysdate+:i_duration-1
       into   :c_strt_dt,
              :c_end_dt
       FROM DUAl;
      }
      else
      {
       EXEC SQL
       SELECT trunc(SYSDATE),
              to_date(LEAST(to_number(to_char(sysdate,'DD')),
                            (to_number(to_char(trunc(add_months(sysdate,:i_duration+1),'MONTH')-1,'DD'))))
                || to_char(trunc(add_months(sysdate,:i_duration+1),'MONTH')-1,'-Mon-YYYY'))  -1 
      into   :c_strt_dt,
             :c_end_dt
      FROM DUAl;
      }

      if( SQLCODE != 0)
      {
         fn_errlog( c_ServiceName, "S31140", SQLMSG, c_err_msg );
         tpfree( (char *) ptr_fml_Obuf);
				 tpfree( (char *) ptr_st_err_msg);
				 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

      SETLEN(c_strt_dt);
      SETLEN(c_end_dt);

      fn_userlog(c_ServiceName," Start date :%s:",c_strt_dt.arr);
      fn_userlog(c_ServiceName," End   Date :%s:",c_end_dt.arr);

    if (c_source_flg == 'S')
    {

      EXEC SQL
      SELECT COUNT(1) 
      INTO   :i_date_valid_with_sen
      FROM   DUAL
      WHERE  to_date(:c_strt_dt)   = to_date(:c_sen_strt_dt)
      AND    to_date(:c_end_dt) +1 = to_date(:c_sen_end_dt); 

      if( SQLCODE != 0)
      {
         fn_errlog( c_ServiceName, "S31145", SQLMSG, c_err_msg );
         tpfree( (char *) ptr_fml_Obuf);
				 tpfree( (char *) ptr_st_err_msg);
				 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      if (i_date_valid_with_sen != 1 )
      {
        fn_userlog(c_ServiceName,"Date Mismatch...!");
        strcpy(c_err_msg,"Date Mismatch...!");
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
        tpfree( (char *) ptr_fml_Obuf);
				tpfree( (char *) ptr_st_err_msg);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      } 
/****************
      if ( strcasecmp(c_strt_dt,c_sen_strt_dt) != 0 || strcasecmp(c_end_dt,c_sen_end_dt) != 0)
      {
        fn_userlog(c_ServiceName,"Date Mismatch...!");
        strcpy(c_err_msg,"Date Mismatch...!");
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
        tpfree( (char *) ptr_fml_Obuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
***************/
    }

  if( c_pymnt_src == ALLOCATION )
  {

    if ( c_upgrade_flg == 'Y' )
    {

      EXEC SQL
      UPDATE ACP_API_CURR_PLAN
      SET    ACP_ACTV_FLG = 'N'
      WHERE  ACP_ACTV_FLG = 'A'
      AND    ACP_USER_ID  = :c_usr_id
      AND    ACP_CLM_MTCH_ACCNT = :c_match_id
      AND    ACP_PLAN_TYPE      = :c_subscrp_typ ; 

      if( SQLCODE != 0)
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31150", SQLMSG, c_err_msg );
        tpfree( (char *) ptr_fml_Obuf);
				tpfree( (char *) ptr_st_err_msg);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
		 }
      fn_userlog(c_ServiceName,"Update ACP_API_CURR_PLAN Table...");
      EXEC SQL
  	  UPDATE ACP_API_CURR_PLAN
      SET    ACP_ACTV_FLG = :c_plan_stts,
             ACP_START_DT = :c_strt_dt, 
             ACP_END_DT   = :c_end_dt,
             ACP_ACTUAL_AMNT   = :d_actul_pln_amt, 
             ACP_DISCNTED_AMNT = :d_discnted_amt,
             ACP_SUBSCRP_AMNT  = :d_subscp_amt
      WHERE  ACP_CLM_MTCH_ACCNT = :c_match_id
      AND    ACP_USER_ID        = :c_usr_id
      AND    ACP_PLAN_NM        = :c_subscrp_pln_nm
      AND    ACP_PLAN_TYPE      = :c_subscrp_typ
      AND    ACP_ACTV_FLG NOT IN ('A','P')
			AND    ROWNUM = 1;

      if(SQLCODE != 0)
      {
        if(SQLCODE == NO_DATA_FOUND)
        {

          userlog(" Insert into ACP_API_CURR_PLAN.....");

          EXEC SQL
          INSERT
          INTO ACP_API_CURR_PLAN
          (
           ACP_USER_ID,
           ACP_CLM_MTCH_ACCNT,
           ACP_PLAN_NM,
           ACP_PLAN_TYPE,
           ACP_START_DT,
           ACP_END_DT,
           ACP_ACTV_FLG,
           ACP_ACTUAL_AMNT,
           ACP_DISCNTED_AMNT,
           ACP_SUBSCRP_AMNT
          )
          values
          (
           :c_usr_id,
           :c_match_id,
           :c_subscrp_pln_nm,
           :c_subscrp_typ,
           :c_strt_dt,
           :c_end_dt,
           :c_plan_stts,
           :d_actul_pln_amt,
           :d_discnted_amt,
           :d_subscp_amt      
          );

          if( SQLCODE != 0)
          {
	 	        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	          fn_errlog( c_ServiceName, "S31155", SQLMSG, c_err_msg );
            tpfree( (char *) ptr_fml_Obuf);
						tpfree( (char *) ptr_st_err_msg);
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }         
        }
        else
        {
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            fn_errlog( c_ServiceName, "S31160", SQLMSG, c_err_msg );
            tpfree( (char *) ptr_fml_Obuf);
						tpfree( (char *) ptr_st_err_msg);
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }   
      }
  }

  fn_userlog(c_ServiceName,"Select from GSTM...");
	EXEC SQL

  select GSTM_CGST_PRCNT,GSTM_SGST_PRCNT ,GSTM_STATE_CD,GSTM_ISEC_STATE_CD
	into :d_cgst_per,
			 :d_sgst_per,
			 :c_state_cd,
			 :c_isec_state_cd
	from GSTM_GST_STATE_MSTR 
	where GSTM_STATE_NAME='MAHARASHTRA' and GSTM_STATE_CD='27';

  if( SQLCODE != 0)
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_errlog( c_ServiceName, "S31165", SQLMSG, c_err_msg );
    tpfree( (char *) ptr_fml_Obuf);
		tpfree( (char *) ptr_st_err_msg);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


  EXEC SQL
  	SELECT to_char(sysdate, 'ddmm')|| SEN_TRAN_SEQ.NEXTVAL
  	INTO   :l_tran_id
  	FROM   DUAL;

  if( SQLCODE != 0)
 	{
    fn_errlog( c_ServiceName, "S31170", SQLMSG, c_err_msg );
    tpfree( (char *) ptr_fml_Obuf);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpfree( (char *) ptr_st_err_msg);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  
  
	fn_userlog(c_ServiceName,"Transaction Id is :%ld:",l_tran_id);

  fn_userlog(c_ServiceName,"Inser into ATD_API_TRN_DTLS Table...");	
	
  EXEC SQL
  INSERT 
  INTO  ATD_API_TRN_DTLS
  (
   ATD_USER_ID,        
   ATD_CLM_MTCH_ACCNT,   
   ATD_BNK_ACCNT_NMBR,    
   ATD_TRN_ID,              
   ATD_TRN_STTS,
   ATD_TRN_AMT,
   ATD_TRN_DT,
   ATD_DBCR_STTS,
   ATD_DB_RUN_NO,
   ATD_CR_RUN_NO,
   ATD_DB_DT,
   ATD_CR_DT,
   ATD_PGW_TRN_FLG,
   ATD_CHANNEL_ID,
   ATD_BNK_ERR_CD,
   ATD_MODIFY_DT,
   ATD_VEN_TRN_ID,
   ATD_TOT_RFND_INIT,
   ATD_IP_ID,
   ATD_PLAN_NM,
   ATD_PLAN_TYPE,
   ATD_PLAN_AMT,
   ATD_DISCNTED_AMT,
   ATD_DISCNTED_PRCNTG,
   ATD_STRT_DT,
   ATD_END_DT,
   ATD_CUST_GST_STATE_CD,
   ATD_ISEC_STATE_CD,
   ATD_GST_INVOICE_NO,
   ATD_GST_AMT,   
   ATD_GST_PRCNTG,
   ATD_RQST_TYP,
	 ATD_MDC_NMBR,
   ATD_PMNT_SRC
  )
  Values
  (
   :c_usr_id,          
   :c_match_id,
   :c_bnk_accnt_nmbr,
   :l_tran_id,              
   DECODE(:c_pymnt_src,'P','P','E'),  /*** Mark Pending In case of Payment Gateway ***/              
   :d_subscp_amt,      
   sysdate,            
   'D',                  
   Null,                 
   Null,                 
   Null,                  
   Null,             
   Null,        
   Null,                   
   Null,                   
   Null,                   
   :c_sesib_paymt_id,                   
   Null,                   
   Null,                   
   :c_subscrp_pln_nm, 
   :c_subscrp_typ,    
   :d_actul_pln_amt,
   :d_discnted_amt,
   :d_discnt_prcnt,
   :c_strt_dt,        
   :c_end_dt,         
   :c_state_cd,
   :c_isec_state_cd, 
   Null,                   
   :d_gst_amt,
   :d_gst_prcnt,
   :c_plan_rqst_typ,
	 Null,
   :c_pymnt_src
  );

   if( SQLCODE != 0)
   {
		  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	    fn_errlog( c_ServiceName, "S31175", SQLMSG, c_err_msg );
      tpfree( (char *) ptr_fml_Obuf);
			tpfree( (char *) ptr_st_err_msg);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
   fn_userlog(c_ServiceName,"Insert successfully..");


	if( c_pymnt_src == ALLOCATION  && strcmp(c_subscrp_pln_nm.arr,"TRIAL") != 0 )
	{

      sql_mdc_sttlmnt_nmbr=0;
			MEMSET(sql_mdc_sttlmnt_trd_dt);
			MEMSET(sql_mdc_invoice_nmbr);
			MEMSET(sql_mdc_invoice_date);
			sql_mdc_amt1= 0;
			sql_mdc_cgst_amt=0;
			sql_mdc_sgst_amt=0;

	/***		i_returncode =fn_upd_segment_lmt(c_ServiceName,
                                  c_match_id,
                                  ROUND(d_subscp_amt/100,2),
                                  'SEN',
                                  'D',
                                  sql_mdc_sttlmnt_trd_dt.arr,
                                  &sql_mdc_sttlmnt_nmbr,
                                  c_err_msg);

      if(i_returncode != 0)
      {
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_errlog( c_ServiceName, "S31180", LIBMSG, c_err_msg );
				tpfree( (char *) ptr_fml_Obuf);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      SETLEN(sql_mdc_sttlmnt_trd_dt);

			EXEC SQL
				SELECT fn_gst_seq_OTHR_DBIT(:c_isec_state_cd,to_char(trunc(sysdate))),
							 TO_CHAR(SYSDATE, 'DD-Mon-YYYY'),
							 ROUND(d_discnted_amt/100,2),
						   ROUND ((:d_discnted_amt/100) * :d_cgst_per/100, 2),
							 ROUND ((:d_discnted_amt/100) * :d_sgst_per/100, 2)
				INTO   :sql_mdc_invoice_nmbr,
							 :sql_mdc_invoice_date,
							 :sql_mdc_amt1,
							 :sql_mdc_cgst_amt,
							 :sql_mdc_sgst_amt
				FROM DUAL;

			if( SQLCODE != 0)
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31185", SQLMSG, c_err_msg );
        tpfree( (char *) ptr_fml_Obuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

***/

		
			EXEC SQL
				SELECT 'OTHRDB',
							 'SEN',
							 TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY'),
							 fn_gst_seq_OTHR_DBIT(:c_isec_state_cd,to_char(trunc(sysdate))),
							 TO_CHAR(SYSDATE, 'DD-Mon-YYYY'),
							 ROUND(:d_discnted_amt/100,2),
						   ROUND ((:d_discnted_amt/100) * :d_cgst_per/100, 2),
							 ROUND ((:d_discnted_amt/100) * :d_sgst_per/100, 2)
				INTO   :c_prdct_cd,
							 :c_sub_prdct_cd,
							 :sql_mdc_sttlmnt_trd_dt,
							 :sql_mdc_invoice_nmbr,
							 :sql_mdc_invoice_date,
							 :sql_mdc_amt1,
							 :sql_mdc_cgst_amt,
							 :sql_mdc_sgst_amt
				FROM EXG_XCHNG_MSTR
				WHERE EXG_XCHNG_CD = 'NFO';

			if( SQLCODE != 0)
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31190", SQLMSG, c_err_msg );
        tpfree( (char *) ptr_fml_Obuf);
				tpfree( (char *) ptr_st_err_msg);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

			SETLEN(sql_mdc_sttlmnt_trd_dt);
			SETLEN(sql_mdc_invoice_nmbr);
			SETLEN(sql_mdc_invoice_date);
			SETLEN(c_sub_prdct_cd);
			SETLEN(c_prdct_cd);

 			EXEC SQL
    		SELECT 'SEN'||to_char(sysdate, 'yyddmm')||SEQ_SEN_SUB_REF.NEXTVAL 
    		INTO   :sql_mdc_crdt_nmbr
    		FROM   DUAL;

 		  if( SQLCODE != 0)
  		{
    		fn_errlog( c_ServiceName, "S31195", SQLMSG, c_err_msg );
    		tpfree( (char *) ptr_fml_Obuf);
    		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    		tpfree( (char *) ptr_st_err_msg);
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}

			fn_userlog(c_ServiceName,"MDC Insert start..");

	    EXEC SQL
      INSERT INTO mdc_misc_dr_cr
      (
       MDC_CLM_MTCH_ACCNT,											                             							    
       MDC_PRDCT_TYP,													                             					    
       MDC_CRDT_NMBR,													                             					    
       MDC_AMT1,																                             					    
       MDC_AMT2,																        			    
       MDC_TOT_AMT,														                             					    
       MDC_FROM_DT,														                             					    
       MDC_TO_DT,															                             					    
       MDC_DR_CR_FLG,													                             					    
       MDC_PRCNTG,															                             					    
       MDC_TURNOVER,														                             					    
       MDC_MTCH_STTS,													                             					    
       MDC_BNK_STTS,														                             					    
       MDC_BNK_DT,															                             					    
       MDC_BNK_TRC_NMBR,												                             					    
       MDC_MTCH_UPD_AMT,												                             					    
       MDC_BNK_UPD_AMT,
			 MDC_CGST_AMT,
		   MDC_SGST_AMT,
		   MDC_GST_STATE_CD,
		   MDC_GST_ISEC_STATE_CD,
       MDC_STCK_CD,
			 MDC_LMT_UPD_STTS, /*** Deposit model ***/
			 MDC_STTLMNT_TRD_DT,  /*** Deposit model ***/
			 MDC_STTLMNT_NMBR,  /*** Deposit model ***/
			 MDC_INVOICE_NMBR,
			 MDC_INVOICE_GEN_FLG				
      )	VALUES																				                                 
      (  
			 :c_match_id,
  		 'SEN',
		   :sql_mdc_crdt_nmbr,
			 ROUND(:d_discnted_amt/100,2),
		   0.00,
		   ROUND(:d_subscp_amt/100,2),
		   trunc(sysdate),
		   trunc(sysdate),                       
		   'D',                             
		   0,                      
		   ROUND(:d_subscp_amt /100,2),       
		   'N',                             
		   'N',                             
		   NULL,                            
		   NULL,                            
		   0.00,                            
		   0.00,
		   ROUND ((:d_discnted_amt/100) * :d_cgst_per/100, 2),
		   ROUND ((:d_discnted_amt/100) * :d_sgst_per/100, 2),
       :c_state_cd,
 		   :c_isec_state_cd,		
       DECODE(:c_upgrade_flg,'Y','U','N'),
			 'Y', /*** Deposit model ***/
			 :sql_mdc_sttlmnt_trd_dt, /*** Deposit model ***/
       :sql_mdc_sttlmnt_nmbr, /*** Deposit model ***/
			 :sql_mdc_invoice_nmbr,
			 'Y'
		  );

      if( SQLCODE != 0)
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31200", SQLMSG, c_err_msg );
        tpfree( (char *) ptr_fml_Obuf);
				tpfree( (char *) ptr_st_err_msg);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

			fn_userlog(c_ServiceName,"MDC Insert successfull..");


			EXEC SQL
				UPDATE ATD_API_TRN_DTLS
				SET    ATD_MDC_NMBR = :sql_mdc_crdt_nmbr
				WHERE  ATD_CLM_MTCH_ACCNT = :c_match_id
				AND    ATD_TRN_ID = :l_tran_id
				AND    trunc(ATD_TRN_DT) = trunc(sysdate);

	    if( SQLCODE != 0)
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31205", SQLMSG, c_err_msg );
        tpfree( (char *) ptr_fml_Obuf);
        tpfree( (char *) ptr_st_err_msg);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

		  ptr_fml_Sbuffer= (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
			if(ptr_fml_Sbuffer == NULL)
			{
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31210", TPMSG, c_err_msg );
        tpfree( (char *) ptr_fml_Obuf);
				tpfree( (char *) ptr_st_err_msg);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			ptr_fml_Rbuffer= (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
			if(ptr_fml_Rbuffer == NULL)
			{
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31215", TPMSG, c_err_msg );
        tpfree( (char *) ptr_fml_Obuf);
				tpfree( (char *) ptr_fml_Sbuffer);
				tpfree( (char *) ptr_st_err_msg);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			  
			fn_userlog(c_ServiceName,"INVOICE Insert started....");

			i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_MATCH_ACCNT,(char *)c_match_id, 0);
			i_ferr[0]=Ferror32;
			i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_OPTION_DESC,(char *)c_prdct_cd.arr, 0);
			i_ferr[1]=Ferror32;
			i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_TRANS_STATUS_DESC,(char *)sql_mdc_invoice_nmbr.arr, 0);
			i_ferr[2]=Ferror32;
			i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_TRD_DT,(char *)sql_mdc_invoice_date.arr, 0);
			i_ferr[3]=Ferror32;
			i_err[4]=Fadd32(ptr_fml_Sbuffer,FML_MF_AIP_ORIG_AMT,(char *)&sql_mdc_amt1, 0);
			i_ferr[4]=Ferror32;
			i_err[5]=Fadd32(ptr_fml_Sbuffer,FML_MF_LD_PERCENTAGE,(char *)&sql_mdc_cgst_amt, 0);
			i_ferr[5]=Ferror32;
			i_err[6]=Fadd32(ptr_fml_Sbuffer,FML_MF_LD_MIN_LOAD,(char *)&sql_mdc_sgst_amt, 0);
			i_ferr[6]=Ferror32;
			i_err[7]=Fadd32(ptr_fml_Sbuffer,FML_MF_LD_MAX_LOAD,(char *)&sql_mdc_ugst_amt, 0);
			i_ferr[7]=Ferror32;
			i_err[8]=Fadd32(ptr_fml_Sbuffer,FML_MF_VAL_AT_COST,(char *)&sql_mdc_igst_amt, 0);
			i_ferr[8]=Ferror32;
			i_err[9]=Fadd32(ptr_fml_Sbuffer,FML_FUTURE_ID,(char *)c_sub_prdct_cd.arr,0);
			i_ferr[9]=Ferror32;
			i_err[10]=Fadd32(ptr_fml_Sbuffer,FML_PARAM_DESC,(char *)c_isec_state_cd, 0);
			i_ferr[10]=Ferror32;
			i_err[11]=Fadd32(ptr_fml_Sbuffer,FML_MF_LD_START_RANGE,(char *)&d_cgst_per, 0);
			i_ferr[11]=Ferror32;
			i_err[12]=Fadd32(ptr_fml_Sbuffer,FML_MF_LD_END_RANGE,(char *)&d_sgst_per, 0);
			i_ferr[12]=Ferror32;
			i_err[13]=Fadd32(ptr_fml_Sbuffer,FML_INT_RATE,(char *)&d_ugst_per, 0);
			i_ferr[13]=Ferror32;
			i_err[14]=Fadd32(ptr_fml_Sbuffer,FML_MF_TRANS_QTY,(char *)&d_igst_per, 0);
			i_ferr[14]=Ferror32;
			i_err[15]=Fadd32(ptr_fml_Sbuffer,FML_MDC_MAINCODE,(char *)c_state_cd, 0);
			i_ferr[15]=Ferror32;

			for(i=0; i< 16; i++)
			{
				if(i_err[i] == -1)
				{
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					fn_errlog( c_ServiceName, "S31220", TPMSG, c_err_msg );
					tpfree( (char *) ptr_fml_Obuf);
					tpfree( (char *) ptr_fml_Sbuffer);
					tpfree( (char *) ptr_fml_Rbuffer);
					tpfree( (char *) ptr_st_err_msg);
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			}

			if(tpcall("SVC_GST_INVINS",(char *)ptr_fml_Sbuffer,0,(char **)&ptr_fml_Rbuffer,&l_recvbuff,0L) == -1)
			{
				fn_errlog(c_ServiceName,"S31225",TPMSG,c_err_msg);

				if(TPCODE == TPESVCFAIL)
				{
					Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,(char *)c_errmsg,0);
					fn_userlog(c_ServiceName,"c_errmsg :%s:",c_errmsg);
				}
				fn_errlog( c_ServiceName, "S31230", TPMSG, c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpfree( (char *) ptr_fml_Obuf);
				tpfree( (char *) ptr_fml_Sbuffer);
				tpfree( (char *) ptr_fml_Rbuffer);
				tpfree( (char *) ptr_st_err_msg);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			tpfree((char *)ptr_fml_Sbuffer);
			tpfree((char *)ptr_fml_Rbuffer);


			/*** st_ptr_get_gst_invins.c_mtch_acc=c_match_id;
			st_ptr_get_gst_invins.c_prdct_cd="OTHRDB";
			st_ptr_get_gst_invins.c_invoice_no=sql_mdc_invoice_nmbr.arr;
			st_ptr_get_gst_invins.c_invoice_dt=sql_mdc_invoice_date.arr;
			st_ptr_get_gst_invins.d_charge_amt= sql_mdc_amt1 ;
			st_ptr_get_gst_invins.d_cgst_amt=sql_mdc_cgst_amt;
			st_ptr_get_gst_invins.d_sgst_amt=sql_mdc_sgst_amt;
			st_ptr_get_gst_invins.d_ugst_amt=0;
			st_ptr_get_gst_invins.d_igst_amt=0;
			st_ptr_get_gst_invins.c_sub_prdct_cd="SEN";
			st_ptr_get_gst_invins.c_isec_state_cd=c_isec_state_cd;
			st_ptr_get_gst_invins.c_state_cd=c_state_cd;
			st_ptr_get_gst_invins.c_ref_invoice_no=NULL;
			st_ptr_get_gst_invins.c_ref_invoice_dt=NULL;
			st_ptr_get_gst_invins.d_cgst_per=d_cgst_per;
			st_ptr_get_gst_invins.d_sgst_per=d_sgst_per;
			st_ptr_get_gst_invins.d_ugst_per=0;
			st_ptr_get_gst_invins.d_igst_per=0;

			i_returncode = fn_call_gst_invins(c_ServiceName,DEF_USR,DEF_SSSN,&st_ptr_get_gst_invins,c_err_msg);

			if(i_returncode != 0)
			{
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_errlog(c_ServiceName, "S31235", LIBMSG, c_err_msg);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpfree( (char *) ptr_fml_Obuf);
				tpreturn(TPFAIL, 0, (char *)ptr_fml_Ibuf, 0, 0);
			} ***/

	}
  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_errlog(c_ServiceName, "S31240", LIBMSG, c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree( (char *) ptr_fml_Obuf);
		tpfree( (char *) ptr_st_err_msg);
    tpreturn(TPFAIL, 0, (char *)ptr_fml_Ibuf, 0, 0);
  }

  i_err[0]  = Fadd32(ptr_fml_Obuf, FFO_USR_ID , (char *)c_usr_id , 0);
  i_err[1]  = Fadd32(ptr_fml_Obuf, FFO_INSTRMNT_TYP, (char *)c_subscrp_typ.arr , 0);   
  i_err[2]  = Fadd32(ptr_fml_Obuf, FFO_TRG_NM , (char *)c_subscrp_pln_nm.arr , 0);     
  i_err[3]  = Fadd32(ptr_fml_Obuf, FFO_ND_STRT_DT, (char *)c_strt_dt.arr , 0);         
  i_err[4]  = Fadd32(ptr_fml_Obuf, FFO_ND_END_DT , (char *)c_end_dt.arr , 0);          
  i_err[5]  = Fadd32(ptr_fml_Obuf, FFO_PI_PO_AMT , (char *)&d_subscp_amt , 0);     
  i_err[6]  = Fadd32(ptr_fml_Obuf, FFO_CLNT_DPID , (char *)c_sesib_paymt_id.arr , 0);  
  i_err[7]  = Fadd32(ptr_fml_Obuf, FFO_SOURCE_FLG, (char *)&c_source_flg , 0); 
  i_err[8]  = Fadd32(ptr_fml_Obuf, FFO_CSE_ID, (char *)&l_tran_id , 0);
  i_err[9]  = Fadd32(ptr_fml_Obuf, FFO_PLG_AMT, (char *)&d_actul_pln_amt,0);
  i_err[10] = Fadd32(ptr_fml_Obuf, FFO_BAL_AMT, (char *)&d_discnted_amt,0);
  i_err[11] = Fadd32(ptr_fml_Obuf, FFO_ADDL_AMT_BLKD, (char *)&d_gst_amt,0);

 
  for(i =0; i<9; i++)
  {
     if(i_err[i] == -1)
     {
        fn_userlog(c_ServiceName,"Error at field :%d:",i+1);
        fn_errlog( c_ServiceName, "S31245", FMLMSG, c_err_msg );
        tpfree( (char *) ptr_fml_Obuf);
				tpfree( (char *) ptr_st_err_msg);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
  }

	tpfree( (char *) ptr_st_err_msg);
  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0L, 0 );
}
