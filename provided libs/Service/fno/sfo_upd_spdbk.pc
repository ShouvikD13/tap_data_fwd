/******************************************************************************/
/*	Program	    			:	SFO_UPD_SPDBK                                         */
/*                                                                            */
/*  Input             : vw_spdordbk                                           */
/*                                                                            */
/*  Output            : vw_spdordbk                                           */
/*                      vw_err_msg                                            */
/*                                                                            */
/*  Description       : This service updates the spread order book based      */
/*                      on the request type                                   */
/*                      N - INSERT_ON_ORDER_PLACEMENT                         */
/*                      X - UPDATE_XCHNG_RESPONSE                             */
/*                      A - UPDATE_XCHNG_RESPONSE_RC                          */
/*                                                                            */
/*  Log               : 1.0   15-Feb-2002   S. Swaminathan                    */
/*                    : 1.1   18-Dec-2007   Vidyayini Krish                   */
/*										:	1.2		08-Aug-2011		Sandeep Patil											*/
/*										: 1.4		12-Mar-2018		Parag Kanojia											*/
/******************************************************************************/
/*    1.0  -  New release                                                     */
/*    1.1  -  IBM Changes                                                     */
/*		1.2	 -	SPAN	Changes						                                        */
/*		1.4	 - 	Rollover With Spread																						*/ 
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fo.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <eba_to_ors.h>
#include <fn_ddr.h>
#include <fn_log.h> /* Ver 1.1 */
#include <fn_read_debug_lvl.h> /* Ver 1.1 */

void SFO_UPD_SPDBK( TPSVCINFO *rqst )
{

  char c_ServiceName[ 33];
  char c_errmsg[256];
	char c_spn_flg;			/***	Ver	1.2	***/
  int   i_trnsctn = 0;
	int i_cnt;

  EXEC SQL BEGIN DECLARE SECTION;
    struct vw_spdordbk *ptr_st_spd_ordbk;
		int i_rec_cnt;
		char	c_sprd_ord_rfrnc_tmp [ 19 ];
		char	c_ordr_rfrnc_tmp [ 19 ];
		char	c_sprd_ord_ind_tmp;
		char	c_pipe_id_tmp [ 3 ];
		long	l_mdfctn_cntr_tmp;
		long	l_ord_tot_qty_tmp;
  EXEC SQL END DECLARE SECTION;

  struct vw_err_msg *ptr_st_err_msg;

  ptr_st_spd_ordbk = ( struct vw_spdordbk *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);

  ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
  if ( ptr_st_err_msg ==  NULL )
  {
    fn_errlog ( c_ServiceName, "S31005", TPMSG, c_errmsg );
    tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
  }

  memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );

if(DEBUG_MSG_LVL_3){
  fn_userlog ( c_ServiceName,"Request Type:%c:",
                                ptr_st_spd_ordbk->c_rqst_typ[0] );
}

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( ptr_st_spd_ordbk->c_rout_crt );

  i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );

  if ( i_trnsctn == -1 )
  {
     strcpy ( ptr_st_err_msg->c_err_msg, c_errmsg );
     tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }

  switch( ptr_st_spd_ordbk->c_rqst_typ[0] )
  {
    case  INSERT_ON_ORDER_PLACEMENT:
			if ( ptr_st_spd_ordbk->c_sprd_ord_ind[0] == L3_ORDER )	
			{
				i_rec_cnt = 3;
			}
			else
			{
				i_rec_cnt = 2;
			}

			for ( i_cnt = 0; i_cnt < i_rec_cnt; i_cnt++ )
			{
				strcpy ( c_sprd_ord_rfrnc_tmp, 
												ptr_st_spd_ordbk->c_sprd_ord_rfrnc[i_cnt] );
				strcpy ( c_ordr_rfrnc_tmp, ptr_st_spd_ordbk->c_ordr_rfrnc[i_cnt] );
				c_sprd_ord_ind_tmp = ptr_st_spd_ordbk->c_sprd_ord_ind[i_cnt];
				strcpy ( c_pipe_id_tmp, ptr_st_spd_ordbk->c_pipe_id[i_cnt] );
				l_mdfctn_cntr_tmp = ptr_st_spd_ordbk->l_mdfctn_cntr[i_cnt];
				l_ord_tot_qty_tmp = ptr_st_spd_ordbk->l_ord_tot_qty[i_cnt];

				EXEC SQL
					SELECT	NVL(FOD_SPN_FLG,'N')
					INTO		:c_spn_flg
					FROM		FOD_FO_ORDR_DTLS
					WHERE		FOD_ORDR_RFRNC	=	:c_ordr_rfrnc_tmp;

				if ( SQLCODE != 0 )
        {
        	fn_errlog ( c_ServiceName, "S31010", SQLMSG, ptr_st_err_msg->c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
          tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
        }
     		EXEC SQL
					INSERT	INTO	FSD_FO_SPRD_DTLS
					(
						FSD_SPRD_RFRNC,
						FSD_ORDR_RFRNC,
						FSD_SPRD_ORD_IND,
						FSD_PIPE_ID,
						FSD_MDFCTN_CNTR,
						FSD_ORD_QTY,
						FSD_SPN_FLG			/***	Ver	1.2	***/
					)
        	VALUES
        	(
						:c_sprd_ord_rfrnc_tmp,
						:c_ordr_rfrnc_tmp,
						:c_sprd_ord_ind_tmp,
						:c_pipe_id_tmp,
						:l_mdfctn_cntr_tmp,
						:l_ord_tot_qty_tmp,
						:c_spn_flg			/***  Ver 1.2 ***/
					);

					if ( SQLCODE != 0 )
					{
    				fn_errlog ( c_ServiceName, "S31015", SQLMSG, 
                                               ptr_st_err_msg->c_err_msg );
    				fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
					}
				}
			break ;

    case  UPDATE_XCHNG_RESPONSE:
      EXEC SQL
				UPDATE 	FSD_FO_SPRD_DTLS
				SET 		FSD_ACK_NMBR = :ptr_st_spd_ordbk->c_xchng_ack[0]
				WHERE 	FSD_SPRD_RFRNC = :ptr_st_spd_ordbk->c_sprd_ord_rfrnc[0];
  		if ( SQLCODE != 0 )
  		{
    		fn_errlog ( c_ServiceName, "S31020", SQLMSG, 
                                               ptr_st_err_msg->c_err_msg );
    		fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  		}
			break ;

    case  UPDATE_XCHNG_RESPONSE_RC:
			if ( ptr_st_spd_ordbk->l_ors_msg_typ[0] == ORS_3L_ORD_CNCL )	
			{
				i_rec_cnt = 3;
			}
			else
			{
				i_rec_cnt = 2;
			}

			for ( i_cnt = 0; i_cnt < i_rec_cnt; i_cnt++ )
      
			{
     		EXEC SQL
					UPDATE 	FSD_FO_SPRD_DTLS
					SET 		FSD_EXEC_QTY = :ptr_st_spd_ordbk->l_exctd_qty[i_cnt],
                  FSD_CNCL_QTY = :ptr_st_spd_ordbk->l_can_qty[i_cnt]
					WHERE 	FSD_ORDR_RFRNC = :ptr_st_spd_ordbk->c_ordr_rfrnc[i_cnt];

				if ( SQLCODE != 0 )
				{
    			fn_errlog ( c_ServiceName, "S31025", SQLMSG, 
                                               ptr_st_err_msg->c_err_msg );
    			fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
				}
			}
			break ;

/*** Ver 1.4 Starts ***/
		case UPDATE_ORDER_MODIFICATION:
			i_rec_cnt =2;
			
			for ( i_cnt = 0; i_cnt < i_rec_cnt; i_cnt++ )
			{		

				
				EXEC SQL
					UPDATE FSD_FO_SPRD_DTLS
					SET FSD_LST_MOD_TM =  TO_DATE ( SYSDATE,'DD-Mon-YYYY hh24:mi:ss'),
							FSD_MDFCTN_CNTR = :ptr_st_spd_ordbk->l_mdfctn_cntr[i_cnt],
							FSD_ORD_QTY = :ptr_st_spd_ordbk->l_ord_tot_qty[i_cnt]
					WHERE FSD_ORDR_RFRNC = :ptr_st_spd_ordbk->c_ordr_rfrnc[i_cnt]
					AND		FSD_SPRD_RFRNC = :ptr_st_spd_ordbk->c_sprd_ord_rfrnc[i_cnt];

					if ( SQLCODE != 0 )
        {
          fn_errlog ( c_ServiceName, "S31030", SQLMSG,
                                               ptr_st_err_msg->c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
          tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
        }
			}
			break;

		case UPDATE_ORDER_CANCELATION:
      i_rec_cnt =2;

      for ( i_cnt = 0; i_cnt < i_rec_cnt; i_cnt++ )
      {

        EXEC SQL
          UPDATE FSD_FO_SPRD_DTLS
          SET FSD_LST_MOD_TM =  TO_DATE ( SYSDATE,'DD-Mon-YYYY hh24:mi:ss'),
              FSD_MDFCTN_CNTR = :ptr_st_spd_ordbk->l_mdfctn_cntr[i_cnt],
              FSD_CNCL_QTY = :ptr_st_spd_ordbk->l_can_qty[i_cnt]
          WHERE FSD_ORDR_RFRNC = :ptr_st_spd_ordbk->c_ordr_rfrnc[i_cnt]
          AND   FSD_SPRD_RFRNC = :ptr_st_spd_ordbk->c_sprd_ord_rfrnc[i_cnt];

          if ( SQLCODE != 0 )
        {
          fn_errlog ( c_ServiceName, "S31035", SQLMSG,
                                               ptr_st_err_msg->c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
          tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
        }
      }

			break;		

/*** Ver 1.4 Ends ***/

    default:
      strcpy( ptr_st_err_msg->c_err_msg, "Invalid Operation Type" );
      fn_errlog ( c_ServiceName, "S31040", DEFMSG, ptr_st_err_msg->c_err_msg );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
      break;
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 )
  {
     strcpy ( ptr_st_err_msg->c_err_msg, c_errmsg );
     tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }

  tpfree ( ( char * ) ptr_st_err_msg );
  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_st_spd_ordbk,
                                  sizeof( struct vw_spdordbk ), 0 );
}
