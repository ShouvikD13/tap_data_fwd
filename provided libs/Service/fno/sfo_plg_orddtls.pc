/******************************************************************************/
/*  Program           : SFO_PLG_ORDDTLS                             					*/
/*                                                                            */
/*  Input             : FFO_USR_ID																						*/
/*											FFO_SSSN_ID																						*/
/*											FFO_PLG_ORDR_RFRNC																		*/
/*										  FFO_EBA_MTCH_ACT_NO																		*/
/*                                                                            */
/*  Output            : FFO_ERR_MSG																						*/
/*											FFO_ACTN_ID																						*/	
/*											FFO_PLG_ORDR_RFRNC 																		*/	
/*											FFO_ORD_TOT_QTY																				*/
/*											FFO_ORD_DT 																						*/
/*											FFO_HAIRCUT 																					*/
/*											FFO_PLG_ORD_VAL																				*/
/*											FFO_MOD_CAN_FLG																				*/
/*											FFO_MDFCTN_CNTR																				*/
/*											FFO_ORD_TYP 																					*/	
/*											FFO_XCHNG_RMRKS																				*/	
/*																																						*/
/*                                                                            */
/*  Description       :  This serviece will be called by Front-end (ASP)			*/
/*											 to view the order book details  of client.						*/
/*											 this service will do select quarry on  							*/
/*										 	 PML_PLG_MOD_LOG Table																*/
/*																																						*/
/*																																						*/
/*  Log               : 1.0		15-Sep-2004		Infotech|Himanshu Ahire						*/
/*	Reviewed By				: 1.0   24-Sep-2003	  Infotech|Smitha Nuti	            */
/*                                                                            */
/*                    : 1.1   26-Sep-2007   Infotech|Vidyayini Krish          */
/*											1.2		11-May-2008   Infotech | ROhit									*/
/*											1.3		15-Apr-2009   Infotech|Venture									*/
/******************************************************************************/
/*   1.0  -  New release	                                                    */
/*   1.1  -  IBM Changes                                                      */
/*	 1.2  -  Change for Reallocation																					*/
/*	 1.3  -  Changes for Optimization																					*/
/******************************************************************************/

/* In Ver 1.1 Converted l_bufferlength to i_bufferlength as Fneeded32 should take similar datatypes. The first arg to it is FLDOCC whose datatype is int in 64 bit application */

#include <stdio.h>
#include <stdlib.h>     
#include <sqlca.h>
#include <atmi.h>
#include <userlog.h>
#include <fml32.h>
#include <Usysflds.h>   
#include <fo_fml_def.h> 
#include <fo_view_def.h>
#include <fo.h>
#include <fn_tuxlib.h>
#include <fn_log.h> /* Ver 1.1 */ 
#include <fn_ddr.h> /* Ver 1.1 */
#include <fn_session.h> /* Ver 1.1 */
#include <string.h> /* Ver 1.1 */
#include <fn_read_debug_lvl.h> /* Ver 1.1 */
#define	 BUF_MULTIPLY 1

void SFO_PLG_ORDDTLS( TPSVCINFO *rqst )
{
	int i_returncode;
  int i_trnsctn = 0;
	int i_err[12];
  int i_ferr[12];
	int i_cnt;
	int i_counter =1;

	long li_sssn_id;
	long l_acnt_id;

	char  c_mtch_accnt_no[11];
	char c_ServiceName [ 33 ];
  char c_err_msg[256 + 1];
  char c_msg      [256];
	char c_usr_id   [8+1];
  FBFR32  *ptr_fml_ibuf = (FBFR32 *)NULL;					/* Pointer to FML Input buffer    			*/
  FBFR32  *ptr_fml_obuf = (FBFR32 *)NULL;					/* Pointer to FML Output buffer   	 		*/
	FBFR32  *ptr_fml_temp = (FBFR32 *)NULL; 
	TPINIT *ptr_tpinfo;
	struct vw_usr_prfl st_usr_prfl;
	struct vw_err_msg st_err_msg;

	EXEC SQL BEGIN DECLARE SECTION;

	char	c_plg_ordr_rfrnc[19];

	long		l_ord_tot_qty;
	long	 	l_haircut;
	char		c_ord_dt[22];
	double 	d_plg_ord_val;
	char		c_mod_can_flg;
	int			i_mdfctn_cntr;
	char		c_ord_typ;
	char		c_xchng_rmrks[256];

	EXEC SQL END DECLARE SECTION;

	/************************* calculate buffer size for realloc ********************/

	/* Ver 1.1 
	const long l_bufferlength = (  sizeof(long) *2           )
                        		+ (  sizeof(double)*2          )
                         		+ (  sizeof(int)               )
                         		+ (  sizeof(char)*2            )
                         		+ (  sizeof(c_err_msg)         )
                         		+ (  sizeof(c_plg_ordr_rfrnc)  )
                         		+ (  sizeof(c_ord_dt)          )
                         		+ (  sizeof(c_xchng_rmrks)     ); */

	/* Ver 1.1 */
	const int i_bufferlength = 	(	sizeof(long) *2 					 ) 
														+ ( sizeof(double)*2					 )
														+ (  sizeof(int)               )
                            + (  sizeof(char)*2            )
                            + (  sizeof(c_err_msg)         )
                            + (  sizeof(c_plg_ordr_rfrnc)  )
                            + (  sizeof(c_ord_dt)          )
                            + (  sizeof(c_xchng_rmrks)     );

	
  ptr_fml_ibuf = (FBFR32 *)rqst->data;
  strcpy(c_ServiceName, rqst->name);
	INITDBGLVL(c_ServiceName);

  fn_userlog( c_ServiceName, "Service Started ");
	
	/************************* Take Input From FML Buffer ***************************/

	
	i_err[0] = Fget32( ptr_fml_ibuf,	FFO_USR_ID					,0,(char *)	c_usr_id					,0);
	i_ferr [0] = Ferror32;
  i_err[1] = Fget32( ptr_fml_ibuf,	FFO_SSSN_ID					,0,(char *)&li_sssn_id				,0);
	i_ferr [1] = Ferror32;
  i_err[2] = Fget32( ptr_fml_ibuf,	FFO_PLG_ORDR_RFRNC	,0,(char *)	c_plg_ordr_rfrnc	,0);
	i_ferr [2] = Ferror32;
  i_err[3] = Fget32( ptr_fml_ibuf,	FFO_EBA_MTCH_ACT_NO	,0,(char *)	c_mtch_accnt_no	,0);
	i_ferr [3] = Ferror32;

  for ( i_cnt=0; i_cnt < 4; i_cnt++ )
  {
    if ( i_err[ i_cnt ] == -1 )
    {
      fn_errlog( c_ServiceName, "S31005", Fstrerror32(i_ferr[i_cnt]), c_err_msg  );
      fn_userlog( c_ServiceName, "in Field Number %d" ,i_cnt);
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	l_acnt_id = -1;
    	Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
    }
  }


	fn_userlog(c_ServiceName,"User Id :%s:",c_usr_id);
	fn_userlog(c_ServiceName,"Session ID :%ld:",li_sssn_id);
	fn_userlog(c_ServiceName,"Pledge Order Ref :%s:",c_plg_ordr_rfrnc);
	fn_userlog(c_ServiceName,"Match Account :%s:",c_mtch_accnt_no);

	/**************************** Check Session of User ****************************/

    strcpy( st_usr_prfl.c_user_id, c_usr_id );
    st_usr_prfl.l_session_id = li_sssn_id;
    strcpy( st_usr_prfl.c_cln_mtch_accnt,c_mtch_accnt_no);
		
    fn_cpy_ddr ( st_usr_prfl.c_rout_crt );			 /*** Added for Order Routing ***/

    i_returncode = fn_chk_sssn( c_ServiceName, &st_usr_prfl, &st_err_msg );

    if ( i_returncode == -1 )
    {
			fn_errlog( c_ServiceName,"S31010",LIBMSG , st_err_msg.c_err_msg  );
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg,0);
    	l_acnt_id = -1;
    	Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
    }

    ptr_fml_obuf = (FBFR32 *)tpalloc( "FML32", NULL, i_bufferlength * BUF_MULTIPLY ); /* Ver 1.1 */
    
		if ( ptr_fml_obuf == NULL )
    {
        fn_errlog( c_ServiceName, "S31015", TPMSG, c_err_msg  );
        Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
    }


	
	/************* Take Data from pledge modification log table *********************/
	
	/* 1.3  Hint added to the below query for using the index instead of full scan */
	 fn_userlog(c_ServiceName,"Calling query with hints");

   EXEC SQL
   DECLARE sys_cursor CURSOR FOR
  	SELECT	/*+ index(PML_PLG_MOD_LOG PML_IDX_TRUNC PML_IDX_RFRNC) */
						PML_ORDR_NO,
     			  PML_ORDR_QTY,
        		to_char(PML_ORDR_TM,'DD-Mon-YYY hh24:mi:ss'),
        		PML_HAIRCUT,
        		PML_ORDR_VL,
        		NVL(PML_PLG_REV_TYP,' '),
        		NVL(PML_MOD_TYPE,' '),
        		PML_MOD_CNTR,
        		NVL(trim(PML_RMRKS),' ')
		FROM    PML_PLG_MOD_LOG
		WHERE		trunc(PML_ORDR_NO) = trunc(:c_plg_ordr_rfrnc)
		AND	PML_MOD_TYPE <> 'L'
		ORDER BY PML_MOD_CNTR;

	 EXEC SQL OPEN sys_cursor;	

		if ( SQLCODE != 0 )
    {
       fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg );
       EXEC SQL CLOSE sys_cursor;

       Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       l_acnt_id = -1;

       if(SQLCODE == NO_DATA_FOUND)
         l_acnt_id = 1;

       Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
			 tpfree ( ( char * )ptr_fml_obuf);
       tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
    }	
		


		/**************** For Each Position of Match Account Loop **********************/

		i_counter = 1;

    while(1)
    {

        EXEC SQL FETCH sys_cursor
				INTO		:c_plg_ordr_rfrnc,
            		:l_ord_tot_qty,
            		:c_ord_dt,
            		:l_haircut,
            		:d_plg_ord_val,
            		:c_ord_typ,
            		:c_mod_can_flg,
            		:i_mdfctn_cntr,
            		:c_xchng_rmrks;

        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
              EXEC SQL CLOSE sys_cursor;
              break;
          }
					else
          {
            fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg  );
            Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            EXEC SQL CLOSE  sys_cursor;
            tpfree ( ( char * )ptr_fml_obuf);
            tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
          }
				}

        /*************** Allocate Memory and add to buffer ****************/
			

        if ( Fneeded32( 1, i_bufferlength ) > Funused32( ptr_fml_obuf ) ) /* Ver 1.1 */
        {
            i_counter++;

						/* Ver 1.2 Starts */
            /*ptr_fml_temp = ( FBFR32 *)tprealloc( (char *)ptr_fml_obuf,
                           (i_counter * i_bufferlength * BUF_MULTIPLY));*/ /* Ver 1.1 */

							ptr_fml_temp = ( FBFR32 *)tprealloc( (char *)ptr_fml_obuf,
														 (Fsizeof32(ptr_fml_obuf) + (i_counter * i_bufferlength)));	
							/* Ver 1.2 Ends */

            if ( ptr_fml_temp == NULL )
            {
                fn_errlog( c_ServiceName, "S31030", TPMSG, c_err_msg  );
                EXEC SQL CLOSE  sys_cursor;
                Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
            }
						else
						{
							ptr_fml_obuf = ptr_fml_temp;
							(FBFR32 *)NULL;
						}
        }		
				
				/******************** Fill Output Buffer with Output  *********************/

	
        i_err[0] =  Fadd32( ptr_fml_obuf  ,FFO_PLG_ORDR_RFRNC   ,(char *)c_plg_ordr_rfrnc	,0);
				i_ferr [0] = Ferror32;
        i_err[1] =  Fadd32( ptr_fml_obuf  ,FFO_ORD_TOT_QTY      ,(char*)&l_ord_tot_qty  	,0);
				i_ferr [1] = Ferror32;
        i_err[2] =  Fadd32( ptr_fml_obuf  ,FFO_ORD_DT           ,(char *)c_ord_dt      		,0);
				i_ferr [2] = Ferror32;
        i_err[3] =  Fadd32( ptr_fml_obuf  ,FFO_HAIRCUT          ,(char *)&l_haircut     	,0);
				i_ferr [3] = Ferror32;
        i_err[4] =  Fadd32( ptr_fml_obuf  ,FFO_PLG_ORD_VAL      ,(char *)&d_plg_ord_val  	,0);
				i_ferr [4] = Ferror32;
        i_err[5] =  Fadd32( ptr_fml_obuf  ,FFO_ORD_TYP          ,(char *)&c_ord_typ      	,0);
				i_ferr [5] = Ferror32;
        i_err[6] =  Fadd32( ptr_fml_obuf  ,FFO_MOD_CAN_FLG      ,(char *)&c_mod_can_flg 	,0);
				i_ferr [6] = Ferror32;
        i_err[7] =  Fadd32( ptr_fml_obuf  ,FFO_MDFCTN_CNTR      ,(char *)&i_mdfctn_cntr 	,0);
				i_ferr [7] = Ferror32;
        i_err[8] =  Fadd32( ptr_fml_obuf  ,FFO_XCHNG_RMRKS      ,(char *)c_xchng_rmrks 		,0);
				i_ferr [8] = Ferror32;


        for ( i_cnt=0; i_cnt < 9; i_cnt++ )
        {
          if ( i_err[ i_cnt ] == -1 )
          {
            fn_errlog( c_ServiceName, "S31035", Fstrerror32(i_ferr[i_cnt]), c_err_msg  );
            Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            EXEC SQL CLOSE  sys_cursor;
            tpfree ( ( char * )ptr_fml_obuf);
            tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
          }
        }

		}	 /* End of While Loop  */
   
		fn_userlog( c_ServiceName, "ALL DONE ");
		tpreturn( TPSUCCESS, 0, (char *)ptr_fml_obuf, 0 , 0 );
}

