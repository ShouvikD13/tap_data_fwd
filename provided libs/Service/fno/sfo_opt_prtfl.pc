/******************************************************************************/
/*  Program           : SFO_OPT_PRTFL                                         */
/*                                                                            */
/*  Input             : Required                                              */
/*                      FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_FROM_DT                                           */
/*                      FFO_TO_DT                                             */
/*                      FFO_ROUT_CRT                                          */
/*                                                                            */
/*                      Optional                                              */
/*                                                                            */
/*                                                                            */
/*  Output            : FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_OPT_TYP                                           */
/*                      FFO_STRK_PRC                                          */
/*                      FFO_CTGRY_INDSTK                                      */
/*                      FFP_OPNPSTN_QTY                                       */
/*                      FFP_OPNPSTN_VAL                                       */
/*                      FFO_CUR_MKT_PRC                                       */
/*                      FFO_RLZD_PL                                           */
/*                      FFO_UNRLZD_PL                                         */
/*                      FFO_TOTAL_PL                                          */
/*                                                                            */
/*  Description       : This service retrieves the open position qty and rate */
/*                      for each contract. In addition it calculates the      */
/*                      Realized and Unrealized Profit & Loss for each of     */
/*                      these contracts.                                      */
/*                                                                            */
/*  Log               : 1.0   15-Feb-2002   S. Swaminathan                    */
/*                    : 1.1   28-Dec-2006   Abhishek Agrawal                  */
/*                    : 1.2   13-Dec-2007   Sushilkumar Sharma                */
/*                    : 1.3   27-Jan-2009   Prakash Sawant                    */
/*                    : 1.4   17-May-2010   Venture M                         */
/*                    : 1.5   02-Feb-2011   Sangeet S													*/
/* 										: 1.6   28-Feb-2011		Shamili Dalvi.										*/
/* 										: 1.7   18-Apr-2011		Shamili Dalvi.										*/
/*										: 1.8		05-Mar-2012		Mahesh Shinde											*/
/*										: 1.9   01-Nov-2012		Vishnu Nair												*/
/*                    : 2.0   14-Aug-2013   Mahesh Shinde                     */
/*                    : 2.1   27-Sep-2013   Bhushan Sonwane                   */
/*                    : 2.3   27-Jun-2014   Mahesh Shinde                     */
/*                    : 2.5   27-Jul-2016   Navina D.                         */
/*										:	2.6		20-Feb-2017		Swapnil M.												*/
/*                    : 2.7   29-Mar-2016   Swapnil M.                        */
/*										:	VQC		25-Apr-2017		Swapnil M.												*/
/*										:	2.9   27-Jun-2017   Sandip T. 												*/
/*                    : 3.0   06-Dec-2019   Tanmay Patel                      */
/*                    : 3.1   21-Dec-2021   Tanmay Patel                      */
/*                    : 3.2   23-Mar-2021   Anuj Pancholi                     */
/*										: 3.3   04-Aug-2021		Shlok Ghan 												*/
/*                    : 3.4   11-Jan-2022   Ravindra Panda                    */
/******************************************************************************/
/* 1.0    -   New Release                                                     */
/* 1.1    -   DL Optimization                                                 */
/* 1.2    -   AIX Migration                                                   */
/* 1.3    -   CRCSN25616 ( addition of flow & charges in display )            */
/* 1.4    -   CRSCM43225 ( Average price added to display )            				*/
/* 1.5    -   FDM_DT_MTCH  replaced with FDM_DT_MTCH_PRTFL for gtt lock issue */
/* 1.6		-		Removal of FDM_DT_MTCH_PRTFL for Optimisation.									*/
/* 1.8		-		SPAN - Portfolio Changes and userlogs in debug									*/
/* 1.9		-   Changes for Silverlight and Windows App													*/
/* 2.0    -   Optimization Selection crieteria taken from allready calculated */
/*            Realized Unrealized PNL                                         */
/* 2.1    -   Changes for OptionPlus                                          */
/* 2.3    -   CR_ISEC10_42750_open_position_display.                          */
/* 2.5    -   Debug level changes                                       			*/
/* 2.6    -   DB hits reduction																								*/
/* 2.7    -   Introduction of logs to find out reason behind service response */
/*            spike on Tux                                                    */
/*VQC		 	-		Version Quality Control 																				*/
/*2.9 	 	-		GST Changes             																				*/
/*3.0     -   Sensibull  Integration                                          */
/*3.1     -   CR-ISEC14-142332_Sensibull_Enhancements (Tanmay Patel)          */
/*3.2     -   Vendor Validation Changes                                       */
/*3.3			-		Removal of Sensibull Link																				*/
/* 3.4    -   Handling added fro NO RECORDS case                              */
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_session.h>
#include <fn_ddr.h>
#include <fn_read_debug_lvl.h>  /*  Ver 1.2 : Added   */
#include <fn_val_ord.h>  /** Ver 3.0 **/


/*** Ver 2.1 **  Starts ***/
int fn_optplusbuy_opnpstn(char *c_ServiceName,
                       char *c_cln_mtch_accnt,
                       char *c_xchng_cd,
                       char *c_undrlyng,
                       char *c_expry_dt,
                       char c_exrc_typ,
                       long l_strike_prc,
                       char c_opt_typ,
                       double *d_op_opn_val
                      );

int fn_optplussell_opnpstn(char *c_ServiceName,
                        char *c_cln_mtch_accnt,
                        char *c_xchng_cd,
                        char *c_undrlyng,
                        char *c_expry_dt,
                        char c_exrc_typ,
                        long l_strike_prc,
                        char c_opt_typ,
                        double *d_op_opn_val
                       );
/*** Ver 2.1 ** Ends ***/


void SFO_OPT_PRTFL( TPSVCINFO *rqst )
{
  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;
  EXEC SQL INCLUDE "table/icd_info_client_dtls.h"; /*** Ver 3.0 ***/

  char c_ServiceName[33];
  varchar c_errmsg[256]; /*** Changed data type from char[] to varchar & changed c_errmsg to c_errmsg.arr in VQC  ***/
  int  i_ch_val;

	/** Ver 1.8 **/
	char c_tmp_xchng_cd[4];
	char c_tmp_undrlyng[7];
	char c_tmp_mtch_accnt[11];     /*** Added in Ver 2.0 ***/
 	char c_tmp_expry_dt[LEN_DATE];
/*char c_tmp_prd_typ    = '\0';		*** Commented in VQC ***/
 	char c_tmp_opt_typ    = '\0';
 	char c_tmp_exrc_typ   = '\0';
	char c_opnpstn_flw    = '\0';    /*** Added in Ver 2.0 ***/
	char  c_req_flg = '\0';    /** Ver 3.4 **/

 	long l_tmp_strike_prc = 0;
	int  i_fop_exists	    = 0;
	int  i_fcp_exists			= 0;
	/** Ver 1.8 **/ 
/* int i_ip_len;			
   int i_op_len;			*** Commented in VQC ****/
  size_t i_str_len;     /* Ver 1.2 : Data Type changed from int to size_t */
  size_t i_trim;        /* Ver 1.2 : Data Type changed from int to size_t  */
  int rec_cnt = 1;        /*********** Ver 1.1 *********** initilized in ver 1.9 ***/
  int ret_val = 0;        /*********** Ver 1.1 *********** initilized in ver 1.9 ***/
/* long int li_clnts = 1;    ** Commented in VQC ***/    /*********** Ver 1.1 **************/ 
                              /* Ver 1.2 : i_clnts changed to li_clnts & its data type changed from int to long int */

  /*** Ver 2.1 ** Starts ***/

  char c_spn_allwd_flg = '\0';
  char c_bsespn_allwd_flg = '\0';
/**  long l_sltp_opnpstn_qty = 0;		*** Commented in VQC ****/
  double d_op_opn_val   =  0.0;
  int i_fod_exists = 0;
  long l_optplus_qty =0;

  /*** Ver 2.1 ** Ends ***/


  EXEC SQL BEGIN DECLARE SECTION;
    struct vw_contract st_cntrct;
    struct vw_usr_prfl st_usr_prfl;
    varchar c_frm_dt[ LEN_DATE + 1];  /* ver 1.1 Vikash Earlier the length for from date and to date was LEN_DATE */
    varchar c_to_dt[ LEN_DATE + 1];   /* ver 1.1 Vikash Change was done becuase the Input buffer was returning 22 chars Date */

    sql_cursor cont_cursor;
    /* sql_cursor trd_cursor;               commented in Ver 1.3 */
    sql_cursor chrgs_cur;                   /* Ver 1.3 */
    struct vw_cntopt_pos st_cntopt_pos;
    struct vw_contract st_cntrct_q;
    struct vw_cntrct_qt st_cntrct_qt;

    int i_returncode = 0;
    char c_cln_mtch_accnt [ 11 ];
    char c_xchng_cd [ 4 ];
		char c_user_id[ 15 ];       /** 1.6 **/
    char c_api_source_flag ='\0';       /*** Ver 3.0 ***/
    varchar c_ven_id[50];               /*** Ver 3.0 ***/
    char c_ven_nm[15] = "\0";           /*** Ver 3.0 ***/
    char c_prd_typ;
    char c_opt_typ;
/** char c_ctgry_indstk;			*** Commented in VQC ***/
    char c_undrlyng [ 7 ];
    char c_expry_dt [ LEN_DATE ];
    char c_exrc_typ;
		char c_exp_date[LEN_DATE];   					/*** Ver 2.6 ***/
		char c_min_ftq_exp_dt[LEN_DATE];			/*** Ver 2.6 ***/


    long int l_rec_hstry_exists;
    long int l_rec_main_exists;
/*  long int li_rec_cnt;				**** Commented in VQC ****/

    double d_sell_val_m	= 0.0;	/**  Initialized in VQC ***/
    double d_sell_val_h = 0.0;	/**  Initialized in VQC ***/
    double d_sell_val   = 0.0;	/**  Initialized in VQC ***/
/*  double d_opn_sell_val;			**** Commented in VQC ****/
	
		double d_ltp    = 0.0;  			/*** Added in ver 2.0 ***/
    int i_exists      = 0;        /*** Added in ver 2.0 ***/
    int i_exists_main = 0;        /*** Added in ver 2.0 ***/
    long int l_opnpstn_qty = 0;   /*** Added in ver 2.0 ***/
    double d_org_opn_val   = 0.0; /*** Added in ver 2.0 ***/
    long l_avg_pr        = 0.0; /*** Added in ver 2.0 ***/

/*  long int l_tot_buy_qty_m;		*** Commented in VQC ****/
    double d_buy_val_m;
/*  long int l_tot_buy_qty_h;		*** Commented in VQC ****/
    double d_buy_val_h;
    double d_buy_val;
/*  double d_opn_buy_val;			**** Commented in VQC ***/

/*  long int li_bal_qty;				
    long int li_crst_qty;			
    long int li_uncrst_qty;			**** Commented in VQC ***/
    double d_crst_prft   = 0;				/*** initialized in ver 2.0 ***/
    double d_uncrst_prft = 0;				/*** initialized in ver 2.0 ***/
    double d_total_prft  = 0;				/*** initialized in ver 2.0 ***/
  
/*  long int li_exctd_qty;		
    long int li_exctd_rt;	
    double d_frsh_brk;	
    double d_cvr_brk;	
    varchar c_trd_dt [ LEN_DATE ];			**** Commented in VQC ***/

    long int l_strike_prc;
    long int li_cmp;

    double d_ex_val_h = 0.0;		/**  Initialized in VQC ***/
    double d_as_val_h	= 0.0;		/**  Initialized in VQC ***/
    double d_ex_val_m = 0.0;		/**  Initialized in VQC ***/
    double d_as_val_m = 0.0;		/**  Initialized in VQC ***/
    double d_ex_val   = 0.0;		/**  Initialized in VQC ***/
    double d_as_val   = 0.0;		/**  Initialized in VQC ***/
    double d_base_prc=0;			 /* Ver 1.7 */

    long int l_charges = 0;    /* Ver 1.3 		initialized in ver 2.0 */
    long int l_chrgs_tmp;      /* Ver 1.3 */
    long int l_avg_trd_prc=0;  /* Ver 1.4 */

  EXEC SQL END DECLARE SECTION;

  struct vw_err_msg st_err_msg;

	MEMSET(st_cntrct);  /*** Ver 2.3 ***/

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
  INITDBGLVL(c_ServiceName);            /*  Ver 1.2 : Added   */

  i_ch_val = Fvftos32( ptr_fml_Ibuf,
                       (char *)&st_usr_prfl,
                       "vw_usr_prfl" );
  if ( i_ch_val == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_errmsg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );	 			
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );

  i_ch_val = fn_chk_sssn( c_ServiceName,
                          &st_usr_prfl,
                          &st_err_msg ) ;
  if ( i_ch_val == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  i_ch_val = Fvftos32( ptr_fml_Ibuf,
                       (char *)&st_cntrct,
                       "vw_contract" );
  if ( i_ch_val == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", FMLMSG, c_errmsg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

/*** Ver 3.0 Starts ***/

  MEMSET(c_user_id);
  MEMSET(c_ven_id);
	
	/** Ver 3.4 strats here **/

  if(Fget32(ptr_fml_Ibuf,FFO_RQST_TYP,0,(char *)&c_req_flg, 0 )== -1 )
  {
    if( Ferror32 != FNOTPRES )
    {
      fn_errlog( c_ServiceName, "S31015", FMLMSG, c_errmsg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
  fn_userlog(c_ServiceName,"Service called with c_req_flg value :%c:",c_req_flg);

  /** Ver 3.4 ends here **/

  if (Fget32(ptr_fml_Ibuf,FFO_SOURCE_FLG,0,(char *)&c_api_source_flag, 0 ) == -1 )
  {
    if( Ferror32 != FNOTPRES )
    {
       fn_errlog( c_ServiceName, "S31020", FMLMSG, c_errmsg.arr  );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }

  if ( c_api_source_flag == 'A' )
  {

    strcpy ( c_user_id, st_usr_prfl.c_user_id );

    if (Fget32(ptr_fml_Ibuf,FFO_USER_CODE,0,(char *)c_ven_id.arr,0) == -1 )
    {
      /** ver 3.2 starts ***/
      if( Ferror32 == FNOTPRES )
      {
        fn_userlog(c_ServiceName,"Normal call");
        strcpy(c_ven_id.arr,"%");
      } 
      /** ver 3.2 ends **/
      else   /** ver 3.2 **/
      {
       fn_errlog( c_ServiceName, "S31025", FMLMSG, c_errmsg.arr  );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

 		SETLEN(c_ven_id);
   
   if ( strcmp(c_ven_id.arr,"%") != 0)   /** ver 3.2 ***/
   { 

     i_returncode = fn_chk_vendor ( c_ServiceName,
                       c_user_id,
                       c_ven_id.arr,
                       c_ven_nm, 
                       &st_err_msg);
  
     if ( i_returncode == -1 )
     {
         fn_errlog( c_ServiceName, "S31030","Error in function fn_chk_vendor",c_errmsg.arr);
	 	  	 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }

    }
		if( DEBUG_MSG_LVL_3 ) 
		{
	    fn_userlog(c_ServiceName,"Vendor Name  :%s:", c_ven_nm);
		}
    if(strcmp(c_ven_nm,"SENSIBULL") == 0 )
    {
     /*** ver 3.3 Removal of sensibull link  
       i_returncode = fn_chk_vendor_validity ( c_ServiceName,
                                               c_user_id,
                                               &st_err_msg
                                             );
 
       if ( i_returncode == -1 )
       {
          fn_errlog( c_ServiceName, "S31035", "Error in function fn_chk_vendor_validity", c_errmsg.arr);
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }
			ver 3.3 end ***/
	 
       /*** TNC check commented as we will show positions even if Idirect Sensibull TNC is not accepted ***
				i_returncode = fn_chk_sensibull_tnc ( c_ServiceName,
                                             c_user_id,
                                             &st_err_msg
                                            );

       if ( i_returncode == -1 )
       {
          fn_errlog( c_ServiceName, "S31040", "Error in function fn_chk_sensibull_tnc", c_errmsg.arr);
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }
       ***/

			if( DEBUG_MSG_LVL_3 ) 
			{
	  	   fn_userlog(c_ServiceName,"Vendor Id = ESP_ID is :%s:",c_ven_id.arr);
			}
       if( c_user_id[0] == BPID )
       {
          fn_userlog(c_ServiceName,"Since you are Attached to a Direct Business Catalyst,Sensibull is desabled");
          fn_errlog( c_ServiceName, "B35018", "", c_errmsg.arr );
					strcpy(c_errmsg.arr,"Since you are Attached to a Direct Business Catalyst,Sensibull is desabled");
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr , 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }

       EXEC SQL
       SELECT  ICD_CUST_TYPE
       INTO    :sql_icd_cust_type
       FROM    ICD_INFO_CLIENT_DTLS,
       IAI_INFO_ACCOUNT_INFO
       WHERE   ICD_SERIAL_NO = IAI_SERIAL_NO
       AND     IAI_MATCH_ACCOUNT_NO  = :st_usr_prfl.c_cln_mtch_accnt;

       if ( SQLCODE != 0 )
       {
         fn_errlog( c_ServiceName, "S31045",SQLMSG,c_errmsg.arr);
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }
			 SETNULL(sql_icd_cust_type);

       if(strcmp(sql_icd_cust_type.arr,"NRI") == 0)
       {
         fn_userlog( c_ServiceName, "NRI Customer Trying To Place Order from SENSIBULL");
         fn_errlog( c_ServiceName, "S31050", "NRI Customer Trying To Place Order from SENSIBULL",c_errmsg.arr);
         strcpy(c_errmsg.arr," NRI Customer Trying To Place Order from SENSIBULL.");
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr , 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }
     }
		 else
		 {
       /****************** commented in ver 3.2 *************************
       fn_userlog( c_ServiceName, "Invalid Vendor" );
       fn_errlog( c_ServiceName, "S31055","InValid Vendor.",c_errmsg.arr );
       strcpy( c_errmsg.arr,"InValid Vendor.");
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
       ******************************************************************/
       fn_userlog(c_ServiceName,"Call from Vendor with ESP_ID :%s: Vendor Name:%s:",c_ven_id.arr,c_ven_nm);  /** ver 3.2 **/
		 }
   }

	 if(DEBUG_MSG_LVL_0) 
 	 {
   	fn_userlog(c_ServiceName, "Inputs:<%s><%c><%s><%s>" , st_usr_prfl.c_cln_mtch_accnt,c_api_source_flag,c_ven_nm,c_ven_id.arr);
   }
	
/*** Ver 3.0 ENDS ***/



	if ( st_cntrct.c_rqst_typ != 'O')    /*** Added in ver 2.3 ***/
  {
  i_ch_val = fn_unpack_fmltovar ( c_ServiceName,
                                  c_errmsg.arr,
                                  ptr_fml_Ibuf,
                                  2,
                             FFO_FROM_DT, ( char * )c_frm_dt.arr, NULL,
                             FFO_TO_DT,   ( char * )c_to_dt.arr,  NULL);
  if( i_ch_val != 0 )
  {
    fn_errlog( c_ServiceName, "S31060", LIBMSG , c_errmsg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }
	if( DEBUG_MSG_LVL_3 )
	{
  	fn_userlog(c_ServiceName,"Length from_date is :%d:",strlen((char *)c_frm_dt.arr));
  	fn_userlog(c_ServiceName,"Length to_date is :%d:",strlen((char *)c_to_dt.arr));
	}

  SETLEN( c_frm_dt );
  SETLEN( c_to_dt );

  i_str_len = 0;
  if ( strcmp ( st_cntrct.c_undrlyng , "A" ) ==  0 )
  {
    strcpy ( c_undrlyng, "%" );
  }
  else
  {
    strcpy ( c_undrlyng, st_cntrct.c_undrlyng );
    rtrim(c_undrlyng);
    if ( strlen(c_undrlyng) < 6 )
    {
      i_str_len = strlen(c_undrlyng);
      for(i_trim=i_str_len;i_trim<6;i_trim++)
      {
        strcat(c_undrlyng," ");
      }
    } 
  } 

  if ( st_cntrct.c_prd_typ == 'A' )
  {
    st_cntrct.c_prd_typ = '%';
  }

	if( DEBUG_MSG_LVL_3 )
	{
  	fn_userlog( c_ServiceName, "from date :%s:",c_frm_dt.arr);
  	fn_userlog( c_ServiceName, "to date :%s:",c_to_dt.arr);
	}

  /*******  Commented in ver 1.1 Vikash *************************
  ********************Date formatiing for Ver 1.1 ***************
  ** converting the date into dd-mon-yyyy **
  EXEC SQL
    SELECT to_char(to_date(:c_frm_dt),'dd-mon-yyyy'),
           to_char(to_date(:c_to_dt),'dd-mon-yyyy')
    into   :c_frm_dt,
           :c_to_dt
    FROM   dual;

  if (SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31065", SQLMSG, c_errmsg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    ret_val = -1;
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID ,(char*)&ret_val, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  *********formatting for Ver 1.1 Ends here **********************
  ********* end of comment ver 1.1 Vikash ***********************/

  l_rec_main_exists = 0;
  l_rec_hstry_exists = 0;

	if(DEBUG_MSG_LVL_2)   /** Log introduced Ver 2.7 **/
  {
    fn_userlog(c_ServiceName, "Inputs:[%s][%c][%s][%s][%s]" , st_usr_prfl.c_cln_mtch_accnt, st_cntrct.c_prd_typ,
                                                               c_undrlyng, c_frm_dt.arr, c_to_dt.arr);
  }

  /***************** Ver 1.6 Starts ********************************/	

  /********************Ver 1.1 *****************
  if(tpbegin( TRAN_TIMEOUT, 0 ) == -1)
  {
    fn_errlog( c_ServiceName, "S31070", SQLMSG, c_errmsg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if( strcmp( st_usr_prfl.c_cln_mtch_accnt , "*" ) == 0 )
  {
    if( st_usr_prfl.c_user_id[0] == BPID )
    {
      ** insert into fdm all acounts for this bpid **
      EXEC SQL
      INSERT INTO
      FDM_DT_MTCH_PRTFL
      SELECT CLM_MTCH_ACCNT FROM CLM_CLNT_MSTR
      WHERE CLM_BP_ID = :st_usr_prfl.c_user_id;
      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31075", SQLMSG, c_errmsg.arr );
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpcommit(0);
        tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
      }
      li_clnts = sqlca.sqlerrd[2];    * Ver 1.2 : i_clnts changed to li_clnts  *
    }
    else
    {
      EXEC SQL
      INSERT  INTO  FDM_DT_MTCH_PRTFL
      SELECT  UAC_CLM_MTCH_ACCNT FROM uac_usr_accnts
      WHERE   UAC_USR_ID = :st_usr_prfl.c_user_id ;
      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31080", SQLMSG, c_errmsg.arr  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpcommit(0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      li_clnts = sqlca.sqlerrd[2];    * Ver 1.2 : i_clnts changed to li_clnts  *
    }
  }
  else
  {
      EXEC SQL
      INSERT  INTO  FDM_DT_MTCH_PRTFL VALUES ( :st_usr_prfl.c_cln_mtch_accnt );
      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31085", SQLMSG, c_errmsg.arr  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpcommit(0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      li_clnts = 1;                   * Ver 1.2 : i_clnts changed to li_clnts  *
  }
  **********Ver 1.1 Ends here ****************************

  EXEC SQL
    SELECT  1
    INTO    :l_rec_hstry_exists
    FROM    DUAL
    WHERE   EXISTS (
                SELECT  1
                FROM    fop_fo_options_pstn_hstry,FDM_DT_MTCH_PRTFL
                WHERE   fop_clm_mtch_accnt = FDM_CLM_MTCH_ACCNT
                AND     fop_xchng_cd       = :st_cntrct.c_xchng_cd
                AND     fop_prdct_typ      LIKE :st_cntrct.c_prd_typ
                AND     fop_undrlyng      LIKE :c_undrlyng
                AND     fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                AND     fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                AND
                (
                       fop_opnpstn_qty != 0
                  OR   fop_exrc_qty    != 0
                  OR   fop_asgnd_qty   != 0
                  OR   fop_buy_exctd_qty   != 0
                  OR   fop_sell_exctd_qty   != 0
                )
                    ) ;
  if ( ( SQLCODE !=0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    tpcommit(0);
    fn_errlog( c_ServiceName, "S31090", SQLMSG, c_errmsg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  EXEC SQL
    SELECT  1
    INTO    :l_rec_main_exists
    FROM    DUAL
    WHERE   EXISTS (
                SELECT  1
                FROM    fop_fo_options_pstn,FDM_DT_MTCH_PRTFL
                WHERE   fop_clm_mtch_accnt = FDM_CLM_MTCH_ACCNT
                AND     fop_xchng_cd       = :st_cntrct.c_xchng_cd
                AND     fop_prdct_typ      LIKE :st_cntrct.c_prd_typ
                AND     fop_undrlyng      LIKE :c_undrlyng
                AND     fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                AND     fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                AND
                (
                       fop_opnpstn_qty != 0
                  OR   fop_exrc_qty    != 0
                  OR   fop_asgnd_qty   != 0
                  OR   fop_buy_exctd_qty   != 0
                  OR   fop_sell_exctd_qty   != 0
                )
            ) ;

  if ( ( SQLCODE !=0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    tpcommit(0);
    fn_errlog( c_ServiceName, "S31095", SQLMSG, c_errmsg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }  

if( DEBUG_MSG_LVL_3 ) {          *  Ver 1.2 : Debug level Change  *
  fn_userlog(c_ServiceName, "mtch_accnt :%s",st_usr_prfl.c_cln_mtch_accnt);
  fn_userlog(c_ServiceName, "c_xchng_cd :%s",st_cntrct.c_xchng_cd);
  fn_userlog(c_ServiceName, "c_prd_typ :%c",st_cntrct.c_prd_typ);
  fn_userlog(c_ServiceName, "c_undrlyng :%s",c_undrlyng);
  fn_userlog(c_ServiceName, "c_frm_dt :%s",c_frm_dt.arr);
  fn_userlog(c_ServiceName, "c_to_dt :%s",c_to_dt.arr);
  fn_userlog(c_ServiceName, "Main :%ld",l_rec_main_exists);
  fn_userlog(c_ServiceName, "hstry :%ld",l_rec_hstry_exists);
  fn_userlog( c_ServiceName, "The no. of clients is %ld", li_clnts);    * Ver 1.2 : i_clnts changed to li_clnts  *
}


  
  EXEC SQL ALLOCATE :cont_cursor;

  strcpy ( c_cln_mtch_accnt, st_usr_prfl.c_cln_mtch_accnt );
  strcpy ( c_xchng_cd, st_cntrct.c_xchng_cd );
  c_prd_typ = st_cntrct.c_prd_typ;
  c_opt_typ = st_cntrct.c_opt_typ;
  l_strike_prc = st_cntrct.l_strike_prc;
  ptr_fml_Obuf = NULL;

  if ( (l_rec_main_exists == 1 ) && (l_rec_hstry_exists == 0 ) )
  {
    EXEC SQL  EXECUTE
        BEGIN
          OPEN  :cont_cursor FOR
              SELECT  fop_xchng_cd,
                      fop_prdct_typ,
                      fop_indstk,
                      fop_undrlyng,
                      to_char(fop_expry_dt,'DD-Mon-YYYY'),
                      fop_exer_typ,
                      fop_opt_typ,
                      fop_strk_prc,
                      fop_opnpstn_qty,
                      fop_opnpstn_val,
                      fop_clm_mtch_accnt
              FROM    fop_fo_options_pstn,FDM_DT_MTCH_PRTFL
              * WHERE  fop_clm_mtch_accnt  = :c_cln_mtch_accnt *
              WHERE   fop_clm_mtch_accnt  = FDM_CLM_MTCH_ACCNT
              AND     fop_xchng_cd        = :c_xchng_cd
              AND     fop_prdct_typ       LIKE :c_prd_typ
              AND     fop_undrlyng      LIKE :c_undrlyng
              AND     fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
              AND     fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
              AND
              (
                      fop_opnpstn_qty != 0
                 OR   fop_exrc_qty    != 0
                 OR   fop_asgnd_qty   != 0
                 OR   fop_buy_exctd_qty   != 0
                 OR   fop_sell_exctd_qty   != 0
              )
              ORDER BY  fop_clm_mtch_accnt,
                        fop_xchng_cd, 
                        fop_prdct_typ, 
                        fop_undrlyng, 
                        fop_expry_dt ;
        END;
      END-EXEC;
  }
  else if ( (l_rec_main_exists == 0 ) && (l_rec_hstry_exists == 1 ) )
  {
    EXEC SQL  EXECUTE
        BEGIN
          OPEN  :cont_cursor FOR
              SELECT  fop_xchng_cd,
                      fop_prdct_typ,
                      fop_indstk,
                      fop_undrlyng,
                      to_char(fop_expry_dt,'DD-Mon-YYYY'),
                      fop_exer_typ,
                      fop_opt_typ,
                      fop_strk_prc,
                      fop_opnpstn_qty,
                      fop_opnpstn_val,
                      fop_clm_mtch_accnt
              FROM    fop_fo_options_pstn_hstry,FDM_DT_MTCH_PRTFL
               *WHERE  fop_clm_mtch_accnt  = :c_cln_mtch_accnt *
              WHERE   fop_clm_mtch_accnt  = FDM_CLM_MTCH_ACCNT
              AND     fop_xchng_cd        = :c_xchng_cd
              AND     fop_prdct_typ       LIKE :c_prd_typ
              AND     fop_undrlyng      LIKE :c_undrlyng
              AND     fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
              AND     fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
              AND
              (
                      fop_opnpstn_qty != 0
                 OR   fop_exrc_qty    != 0
                 OR   fop_asgnd_qty   != 0
                 OR   fop_buy_exctd_qty   != 0
                 OR   fop_sell_exctd_qty   != 0
              )
              ORDER BY  fop_clm_mtch_accnt,
                        fop_xchng_cd, 
                        fop_prdct_typ, 
                        fop_undrlyng, 
                        fop_expry_dt ;
        END;
      END-EXEC;
  }
  else if ( (l_rec_main_exists == 1 ) && (l_rec_hstry_exists == 1 ) )
  {
    EXEC SQL  EXECUTE
        BEGIN
          OPEN  :cont_cursor FOR
              SELECT  fop_xchng_cd,
                      fop_prdct_typ,
                      fop_indstk,
                      fop_undrlyng,
                      to_char(fop_expry_dt,'DD-Mon-YYYY'),
                      fop_exer_typ,
                      fop_opt_typ,
                      fop_strk_prc,
                      fop_opnpstn_qty,
                      fop_opnpstn_val,
                      fop_clm_mtch_accnt
              FROM    fop_fo_options_pstn,FDM_DT_MTCH_PRTFL
              WHERE   fop_clm_mtch_accnt  = FDM_CLM_MTCH_ACCNT
              AND     fop_xchng_cd        = :c_xchng_cd
              AND     fop_prdct_typ       LIKE :c_prd_typ
              AND     fop_undrlyng      LIKE :c_undrlyng
              AND     fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
              AND     fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
              AND
              (
                      fop_opnpstn_qty != 0
                 OR   fop_exrc_qty    != 0
                 OR   fop_asgnd_qty   != 0
                 OR   fop_buy_exctd_qty   != 0
                 OR   fop_sell_exctd_qty   != 0
              )
              UNION ALL
              SELECT  fop_xchng_cd,
                      fop_prdct_typ,
                      fop_indstk,
                      fop_undrlyng,
                      to_char(fop_expry_dt,'DD-Mon-YYYY'),
                      fop_exer_typ,
                      fop_opt_typ,
                      fop_strk_prc,
                      fop_opnpstn_qty,
                      fop_opnpstn_val,
                      fop_clm_mtch_accnt
              FROM    fop_fo_options_pstn_hstry,FDM_DT_MTCH_PRTFL
              WHERE   fop_clm_mtch_accnt  = FDM_CLM_MTCH_ACCNT
              AND     fop_xchng_cd        = :c_xchng_cd
              AND     fop_prdct_typ       LIKE :c_prd_typ
              AND     fop_undrlyng      LIKE :c_undrlyng
              AND     fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
              AND     fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
              AND
              (
                      fop_opnpstn_qty != 0
                 OR   fop_exrc_qty    != 0
                 OR   fop_asgnd_qty   != 0
                 OR   fop_buy_exctd_qty   != 0
                 OR   fop_sell_exctd_qty   != 0
              )
              ORDER BY  1, 2, 4, 5, 7, 8,11;
        END;
      END-EXEC;
  }
  else
  {
    tpcommit(0);
    fn_errlog( c_ServiceName, "B28548", DEFMSG, c_errmsg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if ( SQLCODE != 0 )
  {
    tpcommit(0);
    fn_errlog( c_ServiceName, "S31100", SQLMSG, c_errmsg.arr  );
    EXEC SQL FREE :cont_cursor;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  } */


	/***************** Ver 1.6 Ends ********************************/

  /***************** Ver 1.6 Starts********************************/


	if( strcmp( st_usr_prfl.c_cln_mtch_accnt , "*" ) == 0 )
  {
			if( DEBUG_MSG_LVL_3 )
			{
				fn_userlog(c_ServiceName,"Inside Matchid *");
			}

    	if( st_usr_prfl.c_user_id[0] == BPID )
    	{

 			      if(DEBUG_MSG_LVL_3){
      			fn_userlog(c_ServiceName,"BPID");}
				
						strcpy(c_user_id,st_usr_prfl.c_user_id);	/** Ver 1.9 **/

						EXEC SQL
						SELECT  1
						INTO    :l_rec_hstry_exists
						FROM    DUAL
						WHERE   EXISTS (
												SELECT  1
												FROM    fop_fo_options_pstn_hstry,clm_clnt_mstr
												WHERE   fop_clm_mtch_accnt = clm_mtch_accnt 
												AND     fop_xchng_cd  = :st_cntrct.c_xchng_cd
												AND     fop_prdct_typ LIKE :st_cntrct.c_prd_typ
												AND     fop_undrlyng  LIKE :c_undrlyng
												AND     clm_bp_id  = :c_user_id
												AND     fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
												AND     fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
												AND
												(
															 fop_opnpstn_qty != 0
													OR   fop_exrc_qty    != 0
													OR   fop_asgnd_qty   != 0
													OR   fop_buy_exctd_qty   != 0
													OR   fop_sell_exctd_qty   != 0
												)
										UNION ALL																												/* Ver 1.8 SPAN Portfolio */
												(
													 SELECT  1
                                  FROM    FCP_FO_SPN_CNTRCT_PSTN_HSTRY,clm_clnt_mstr
                                  WHERE   fcp_clm_mtch_accnt = clm_mtch_accnt
                                  AND     fcp_undrlyng      LIKE :c_undrlyng
                                  AND     fcp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                                  AND     fcp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                                  AND     clm_bp_id = :st_usr_prfl.c_user_id
                                  AND     fcp_xchng_cd       = :st_cntrct.c_xchng_cd
                                  AND     FCP_PRDCT_TYP = 'O' 
                                  AND
                                   ( 		
																				fcp_opnpstn_qty   	!= 0
																		OR  fcp_exrc_qty      	!= 0
																		OR  fcp_asgnd_qty				!= 0
																		OR  fcp_buy_exctd_qty 	!= 0
                                    OR  fcp_sell_exctd_qty  != 0
                                   )
												)
                    UNION ALL                                                /* Ver 2.1 OptionPlus Portfolio */
                        (

                           SELECT  1
                                  FROM    fod_fo_ordr_dtls_hstry,clm_clnt_mstr
                                  WHERE   fod_clm_mtch_accnt = clm_mtch_accnt
                                  AND     fod_undrlyng      LIKE :c_undrlyng
                                  AND     fod_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                                  AND     fod_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                                  AND     clm_bp_id = :st_usr_prfl.c_user_id
                                  AND     fod_xchng_cd       = :st_cntrct.c_xchng_cd
                                  AND     fod_prdct_typ = 'I'
                                  AND     fod_exec_qty != 0
                        )
                    ) ;


						EXEC SQL
						SELECT  1
						INTO    :l_rec_main_exists
						FROM    DUAL
						WHERE   EXISTS (
												SELECT  1
												FROM    fop_fo_options_pstn,clm_clnt_mstr
												WHERE   fop_clm_mtch_accnt = clm_mtch_accnt 
												AND     fop_undrlyng LIKE :c_undrlyng
												AND     clm_bp_id = :c_user_id
												AND     fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
												AND     fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
												AND     fop_xchng_cd = :st_cntrct.c_xchng_cd
                        AND     fop_prdct_typ LIKE :st_cntrct.c_prd_typ
												AND
												(
															 fop_opnpstn_qty != 0
													OR   fop_exrc_qty    != 0
													OR   fop_asgnd_qty   != 0
													OR   fop_buy_exctd_qty   != 0
													OR   fop_sell_exctd_qty   != 0
												)
										UNION ALL																													/* Ver 1.8 SPAN Portfolio */
												(
													SELECT  1
                                  FROM    FCP_FO_SPN_CNTRCT_PSTN,clm_clnt_mstr
                                  WHERE   fcp_clm_mtch_accnt = clm_mtch_accnt
                                  AND     fcp_undrlyng      LIKE :c_undrlyng
                                  AND     fcp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                                  AND     fcp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                                  AND     fcp_xchng_cd       = :st_cntrct.c_xchng_cd
                                  AND     clm_bp_id = :st_usr_prfl.c_user_id
                                  AND     FCP_PRDCT_TYP = 'O' 
                                  AND
                                   ( 		fcp_opnpstn_qty   	!= 0
                                    OR  fcp_exrc_qty      	!= 0
                                    OR  fcp_asgnd_qty     	!= 0
                                    OR  fcp_buy_exctd_qty 	!= 0
                                    OR  fcp_sell_exctd_qty  != 0
                                   )
												)
                    UNION ALL                                                /* Ver 2.1 OptionPlus Portfolio */
                        (

                           SELECT  1
                                  FROM    fod_fo_ordr_dtls,clm_clnt_mstr
                                  WHERE   fod_clm_mtch_accnt = clm_mtch_accnt
                                  AND     fod_undrlyng      LIKE :c_undrlyng
                                  AND     fod_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                                  AND     fod_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                                  AND     clm_bp_id = :st_usr_prfl.c_user_id
                                  AND     fod_xchng_cd       = :st_cntrct.c_xchng_cd
                                  AND     fod_prdct_typ = 'I'
                                  AND     fod_exec_qty != 0
                        )
										) ; 




			}
			else
			{


						EXEC SQL
            SELECT  1
            INTO    :l_rec_hstry_exists
            FROM    DUAL
            WHERE   EXISTS (
                        SELECT  1
                        FROM    fop_fo_options_pstn_hstry,uac_usr_accnts
                        WHERE   fop_clm_mtch_accnt = uac_clm_mtch_accnt 
                        AND     fop_xchng_cd = :st_cntrct.c_xchng_cd
                        AND     fop_prdct_typ LIKE :st_cntrct.c_prd_typ
                        AND     fop_undrlyng LIKE :c_undrlyng
												AND     uac_usr_id = :c_user_id
                        AND     fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                        AND     fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                        AND
                        (
                               fop_opnpstn_qty != 0
                          OR   fop_exrc_qty    != 0
                          OR   fop_asgnd_qty   != 0
                          OR   fop_buy_exctd_qty   != 0
                          OR   fop_sell_exctd_qty   != 0
                        )
										UNION ALL																															/* Ver 1.8 SPAN Portfolio */
												(
													SELECT  1
                                  FROM    FCP_FO_SPN_CNTRCT_PSTN_HSTRY,uac_usr_accnts
                                  WHERE   fcp_clm_mtch_accnt = UAC_CLM_MTCH_ACCNT
                                  AND     fcp_undrlyng      LIKE :c_undrlyng
                                  AND     fcp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                                  AND     fcp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                                  AND     fcp_xchng_cd       = :st_cntrct.c_xchng_cd
                                  AND     uac_usr_id = :st_usr_prfl.c_user_id
                                  AND     FCP_PRDCT_TYP = 'O' 
                                  AND
                                   ( 		fcp_opnpstn_qty   	!= 0
                                    OR  fcp_exrc_qty      	!= 0
                                    OR  fcp_asgnd_qty     	!= 0
                                    OR  fcp_buy_exctd_qty 	!= 0
                                    OR  fcp_sell_exctd_qty  != 0
                                   )
												)
                    UNION ALL                                                /* Ver 2.1 OptionPlus Portfolio */
                        (
                          SELECT  1
                                  FROM    fod_fo_ordr_dtls_hstry,uac_usr_accnts
                                  WHERE   fod_clm_mtch_accnt = UAC_CLM_MTCH_ACCNT
                                  AND     fod_undrlyng      LIKE :c_undrlyng
                                  AND     fod_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                                  AND     fod_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                                  AND     fod_xchng_cd       = :st_cntrct.c_xchng_cd
                                  AND     uac_usr_id = :st_usr_prfl.c_user_id
                                  AND     fod_prdct_typ = 'I'
                                  AND     fod_exec_qty != 0
                        )
                    ) ;



						EXEC SQL
            SELECT  1
            INTO    :l_rec_main_exists
            FROM    DUAL
            WHERE   EXISTS (
                        SELECT  1
                        FROM    fop_fo_options_pstn,uac_usr_accnts
                        WHERE   fop_clm_mtch_accnt = uac_clm_mtch_accnt 
                        AND     fop_xchng_cd  = :st_cntrct.c_xchng_cd
                        AND     fop_prdct_typ LIKE :st_cntrct.c_prd_typ
                        AND     fop_undrlyng  LIKE :c_undrlyng
												AND     uac_usr_id = :c_user_id
                        AND     fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                        AND     fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                        AND
                        (
                               fop_opnpstn_qty != 0
                          OR   fop_exrc_qty    != 0
                          OR   fop_asgnd_qty   != 0
                          OR   fop_buy_exctd_qty   != 0
                          OR   fop_sell_exctd_qty   != 0
                        )
										UNION ALL																													/* Ver 1.8 SPAN Portfolio */				
												(
														SELECT  1
                                  FROM    FCP_FO_SPN_CNTRCT_PSTN,uac_usr_accnts
                                  WHERE   fcp_clm_mtch_accnt = UAC_CLM_MTCH_ACCNT
                                  AND     fcp_undrlyng      LIKE :c_undrlyng
                                  AND     fcp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                                  AND     fcp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                                  AND     fcp_xchng_cd       = :st_cntrct.c_xchng_cd
                                  AND     uac_usr_id = :st_usr_prfl.c_user_id
                                  AND     FCP_PRDCT_TYP = 'O' 
                                  AND
                                   ( 		fcp_opnpstn_qty   	!= 0
                                    OR  fcp_exrc_qty      	!= 0
                                    OR  fcp_asgnd_qty     	!= 0
                                    OR  fcp_buy_exctd_qty 	!= 0
                                    OR  fcp_sell_exctd_qty  != 0
                                   )	
												)
                    UNION ALL                                                /* Ver 2.1 OptionPlus Portfolio */
                        (
                          SELECT  1
                                  FROM    fod_fo_ordr_dtls,uac_usr_accnts
                                  WHERE   fod_clm_mtch_accnt = UAC_CLM_MTCH_ACCNT
                                  AND     fod_undrlyng      LIKE :c_undrlyng
                                  AND     fod_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                                  AND     fod_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                                  AND     fod_xchng_cd       = :st_cntrct.c_xchng_cd
                                  AND     uac_usr_id = :st_usr_prfl.c_user_id
                                  AND     fod_prdct_typ = 'I'
                                  AND     fod_exec_qty != 0
                        )
                    ) ;





			
			}


	}/*end of if */
	else
	{


						EXEC SQL
            SELECT  1
            INTO    :l_rec_hstry_exists
            FROM    DUAL
            WHERE   EXISTS (
                        SELECT  1
                        FROM    fop_fo_options_pstn_hstry
                        WHERE   fop_clm_mtch_accnt = :st_usr_prfl.c_cln_mtch_accnt 
                        AND     fop_xchng_cd  = :st_cntrct.c_xchng_cd
                        AND     fop_prdct_typ LIKE :st_cntrct.c_prd_typ
                        AND     fop_undrlyng  LIKE :c_undrlyng
                        AND     fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                        AND     fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                        AND
                        (
                               fop_opnpstn_qty != 0
                          OR   fop_exrc_qty    != 0
                          OR   fop_asgnd_qty   != 0
                          OR   fop_buy_exctd_qty   != 0
                          OR   fop_sell_exctd_qty   != 0
                        )
										UNION ALL																						/* Ver 1.8 SPAN Portfolio */
												(
													SELECT  1
                                  FROM    FCP_FO_SPN_CNTRCT_PSTN_HSTRY
                                  WHERE   fcp_clm_mtch_accnt = :st_usr_prfl.c_cln_mtch_accnt
                                  AND     fcp_undrlyng      LIKE :c_undrlyng
                                  AND     fcp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                                  AND     fcp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                                  AND     fcp_xchng_cd       = :st_cntrct.c_xchng_cd
                                  AND     FCP_PRDCT_TYP = 'O' 
                                  AND
                                   ( 		fcp_opnpstn_qty   	!= 0
                                    OR  fcp_exrc_qty      	!= 0
                                    OR  fcp_asgnd_qty     	!= 0
                                    OR  fcp_buy_exctd_qty 	!= 0
                                    OR  fcp_sell_exctd_qty  != 0
                                   )		
												)		
                    UNION ALL                                                /* Ver 2.1 OptionPlus Portfolio */
                        (
                          SELECT  1
                                  FROM    fod_fo_ordr_dtls_hstry
                                  WHERE   fod_clm_mtch_accnt = :st_usr_prfl.c_cln_mtch_accnt
                                  AND     fod_undrlyng      LIKE :c_undrlyng
                                  AND     fod_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                                  AND     fod_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                                  AND     fod_xchng_cd       = :st_cntrct.c_xchng_cd
                                  AND     fod_prdct_typ = 'I'
                                  AND     fod_exec_qty != 0
                        )	
                    ) ;


					  EXEC SQL
            SELECT  1
            INTO    :l_rec_main_exists
            FROM    DUAL
            WHERE   EXISTS (
                        SELECT  1
                        FROM    fop_fo_options_pstn
                        WHERE   fop_clm_mtch_accnt = :st_usr_prfl.c_cln_mtch_accnt 
                        AND     fop_xchng_cd  = :st_cntrct.c_xchng_cd
                        AND     fop_prdct_typ LIKE :st_cntrct.c_prd_typ
                        AND     fop_undrlyng  LIKE :c_undrlyng
                        AND     fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                        AND     fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                        AND
                        (
                               fop_opnpstn_qty != 0
                          OR   fop_exrc_qty    != 0
                          OR   fop_asgnd_qty   != 0
                          OR   fop_buy_exctd_qty   != 0
                          OR   fop_sell_exctd_qty   != 0
                        )
										UNION ALL																								/* Ver 1.8 SPAN Portfolio */
												(
													 SELECT  1
                                  FROM    FCP_FO_SPN_CNTRCT_PSTN
                                  WHERE   fcp_clm_mtch_accnt = :st_usr_prfl.c_cln_mtch_accnt
                                  AND     fcp_xchng_cd       = :st_cntrct.c_xchng_cd
                                  AND     fcp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                                  AND     fcp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                                  AND     fcp_undrlyng      LIKE :c_undrlyng
                                  AND     FCP_PRDCT_TYP = 'O' 
                                  AND
                                   ( 		fcp_opnpstn_qty   	!= 0
                                    OR  fcp_exrc_qty      	!= 0
                                    OR  fcp_asgnd_qty     	!= 0
                                    OR  fcp_buy_exctd_qty 	!= 0
                                    OR  fcp_sell_exctd_qty  != 0
                                   )
												)
                    UNION ALL                                                /* Ver 2.1 OptionPlus Portfolio */
                        (
                          SELECT  1
                                  FROM    fod_fo_ordr_dtls
                                  WHERE   fod_clm_mtch_accnt = :st_usr_prfl.c_cln_mtch_accnt
                                  AND     fod_undrlyng      LIKE :c_undrlyng
                                  AND     fod_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                                  AND     fod_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                                  AND     fod_xchng_cd       = :st_cntrct.c_xchng_cd
                                  AND     fod_prdct_typ = 'I'
                                  AND     fod_exec_qty != 0
                        )
                    ) ;

					

	}

	if ( ( SQLCODE !=0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog( c_ServiceName, "S31105", SQLMSG, c_errmsg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }	

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Main Records Exists 	 |%ld|",l_rec_main_exists);	
		fn_userlog(c_ServiceName,"History Records Exists |%ld|",l_rec_hstry_exists);	
	}

	EXEC SQL ALLOCATE :cont_cursor;

  strcpy ( c_xchng_cd, st_cntrct.c_xchng_cd );
  c_prd_typ = st_cntrct.c_prd_typ;
  c_opt_typ = st_cntrct.c_opt_typ;
  l_strike_prc = st_cntrct.l_strike_prc;
  ptr_fml_Obuf = NULL;

  if ( (l_rec_main_exists == 1 ) && (l_rec_hstry_exists == 0 ) )
	{

			if( strcmp( st_usr_prfl.c_cln_mtch_accnt , "*" ) == 0 )
      {

            strcpy ( c_user_id, st_usr_prfl.c_user_id);

            if( st_usr_prfl.c_user_id[0] == BPID )
            {

                 if(DEBUG_MSG_LVL_3){
                 fn_userlog(c_ServiceName,"BPID");  }	


									EXEC SQL  EXECUTE
									BEGIN
									OPEN  :cont_cursor FOR
											SELECT  fop_xchng_cd,
															fop_prdct_typ,
															fop_indstk,
															fop_undrlyng,
															to_char(fop_expry_dt,'DD-Mon-YYYY'),
															fop_exer_typ,
															fop_opt_typ,
															fop_strk_prc,
															/*** Commented in Ver 2.1 **
															fop_opnpstn_qty,
															fop_opnpstn_val,
															***/
															fop_clm_mtch_accnt,
															to_char(fop_expry_dt,'YYYYMMDD')			/** Ver 2.6 **/
											FROM    fop_fo_options_pstn,
														  clm_clnt_mstr	
											WHERE   fop_clm_mtch_accnt  = clm_mtch_accnt 
											AND     fop_xchng_cd        = :c_xchng_cd
											AND   	clm_bp_id           = :c_user_id
											AND     fop_prdct_typ       LIKE :c_prd_typ
											AND     fop_undrlyng      LIKE :c_undrlyng
											AND     fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
											AND     fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
											AND
											(
															fop_opnpstn_qty != 0
												 OR   fop_exrc_qty    != 0
												 OR   fop_asgnd_qty   != 0
												 OR   fop_buy_exctd_qty   != 0
												 OR   fop_sell_exctd_qty   != 0
											)
									/*		ORDER BY  fop_clm_mtch_accnt,
																fop_xchng_cd,
																fop_prdct_typ,
																fop_undrlyng,
																fop_expry_dt;			Commented in Ver 1.8   */
										UNION ALL																						/* Ver 1.8 SPAN Portfolio */			 
											SELECT  fcp_xchng_cd,
															fcp_prdct_typ,
                            	fcp_indstk,
                            	fcp_undrlyng,
                            	to_char(fcp_expry_dt,'DD-Mon-YYYY'),
                            	fcp_exer_typ,
															NVL( FCP_OPT_TYP , '*'),
															NVL( FCP_STRK_PRC , 0 ),
															/*** Commented in Ver 2.1 **
                            	fcp_opnpstn_qty,
                            	fcp_opnpstn_val,
															***/
                            	fcp_clm_mtch_accnt,
															to_char(fcp_expry_dt,'YYYYMMDD')		/** Ver 2.6 **/
                      	FROM  FCP_FO_SPN_CNTRCT_PSTN,
                        	    clm_clnt_mstr
                      	WHERE fcp_clm_mtch_accnt = clm_mtch_accnt
												AND   fcp_xchng_cd        = :c_xchng_cd
												AND   clm_bp_id           = :c_user_id
												AND   fcp_prdct_typ       = 'O' 
                      	AND   fcp_undrlyng      LIKE :c_undrlyng
                      	AND   fcp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                      	AND   fcp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                      	AND
                      	( 		fcp_opnpstn_qty     != 0
                          OR  fcp_exrc_qty        != 0
                          OR  fcp_asgnd_qty       != 0
												  OR  fcp_buy_exctd_qty 	!= 0
                       	  OR  fcp_sell_exctd_qty  != 0
                      	)
                   /***			ORDER BY  11,
                        	        1,
																	2,
                            	    4,
                              	  5,
																	7,
																	8;													** Ver 1.8 ***** Commented in Ver 2.1 **/
                      UNION ALL                          /* Ver 2.1 OptionPlus Portfolio */
                        SELECT  distinct FOD_XCHNG_CD,
                                'O',
                                FOD_INDSTK,
                                FOD_UNDRLYNG,
                                to_char(FOD_EXPRY_DT,'DD-Mon-YYYY'),
                                FOD_EXER_TYP,
                                NVL( FOD_OPT_TYP,'*'),
                                NVL( FOD_STRK_PRC, 0 ),
                                FOD_CLM_MTCH_ACCNT,
															  to_char(FOD_EXPRY_DT,'YYYYMMDD')     /*** Ver 2.6 ***/
                        FROM    FOD_FO_ORDR_DTLS,
                                clm_clnt_mstr
                        WHERE   FOD_CLM_MTCH_ACCNT = clm_mtch_accnt
                        AND     FOD_UNDRLYNG LIKE :c_undrlyng
                        AND     FOD_EXPRY_DT >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                        AND     FOD_EXPRY_DT <= to_date ( :c_to_dt,'dd-mon-yyyy')
                        AND     FOD_XCHNG_CD =  :c_xchng_cd
                        AND     clm_bp_id = :c_user_id
                        AND     fod_prdct_typ = 'I'
                        AND     fod_exec_qty != 0
                        ORDER BY  9, 1, 2, 3, 4, 5, 7, 8;     /*** Added in Ver 2.1 ***/	
												END;	
											END-EXEC;

						}
						else
						{


											EXEC SQL  EXECUTE
                  		BEGIN
                  		OPEN  :cont_cursor FOR
                      SELECT  fop_xchng_cd,
                              fop_prdct_typ,
                              fop_indstk,
                              fop_undrlyng,
                              to_char(fop_expry_dt,'DD-Mon-YYYY'),
                              fop_exer_typ,
                              fop_opt_typ,
                              fop_strk_prc,
															/*** Commented in Ver 2.1 **
                              fop_opnpstn_qty,
                              fop_opnpstn_val,
															***/
                              fop_clm_mtch_accnt,
															to_char(fop_expry_dt,'YYYYMMDD')			/** Ver 2.6 **/
                      FROM    fop_fo_options_pstn,
                              uac_usr_accnts 
                      WHERE   fop_clm_mtch_accnt  = uac_clm_mtch_accnt 
                      AND     fop_xchng_cd        = :c_xchng_cd
                      AND     fop_prdct_typ       LIKE :c_prd_typ
                      AND     fop_undrlyng        LIKE :c_undrlyng
											AND     uac_usr_id = :c_user_id
                      AND     fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                      AND     fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                      AND
                      (
                              fop_opnpstn_qty != 0
                         OR   fop_exrc_qty    != 0
                         OR   fop_asgnd_qty   != 0
                         OR   fop_buy_exctd_qty   != 0
                         OR   fop_sell_exctd_qty   != 0
                      )
                   /*   ORDER BY  fop_clm_mtch_accnt,
                                fop_xchng_cd,
                                fop_prdct_typ,
																fop_undrlyng,
                                fop_expry_dt 		Commented in Ver 1.8 */
									UNION ALL                                                       /* Ver 1.8 SPAN Portfolio */
                      SELECT  fcp_xchng_cd,
                              fcp_prdct_typ,
                              fcp_indstk,
                              fcp_undrlyng,
                              to_char(fcp_expry_dt,'DD-Mon-YYYY'),
                              fcp_exer_typ,
                              NVL( FCP_OPT_TYP , '*'),
                              NVL( FCP_STRK_PRC , 0 ),
															/*** Commented in Ver 2.1 **
                              fcp_opnpstn_qty,
                              fcp_opnpstn_val,
															***/
                              fcp_clm_mtch_accnt,
															to_char(fcp_expry_dt,'YYYYMMDD')			 /** Ver 2.6 **/
                      	FROM  FCP_FO_SPN_CNTRCT_PSTN,
                        	    uac_usr_accnts
                      	WHERE fcp_clm_mtch_accnt = uac_clm_mtch_accnt
                      	AND   fcp_xchng_cd        = :c_xchng_cd
                      	AND   fcp_prdct_typ       = 'O' 
                      	AND   fcp_undrlyng      LIKE :c_undrlyng
												AND   uac_usr_id = :c_user_id
                      	AND   fcp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                      	AND   fcp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                      	AND
                      	(     fcp_opnpstn_qty     != 0
                          OR  fcp_exrc_qty        != 0
                          OR  fcp_asgnd_qty       != 0
                          OR  fcp_buy_exctd_qty 	!= 0
                        	OR  fcp_sell_exctd_qty  != 0
                      	)
                   /***   	ORDER BY  11,
                        	        1,
                          	      2, 
                            	    4,
                              	  5,
																	7,
																	8;																						** Ver1.8 *** Commented in Ver 2.1 ***/

                  UNION ALL                          /* Ver 2.1 OptionPlus Portfolio */
                        SELECT  distinct FOD_XCHNG_CD,
                                'O',
                                FOD_INDSTK,
                                FOD_UNDRLYNG,
                                to_char(FOD_EXPRY_DT,'DD-Mon-YYYY'),
                                FOD_EXER_TYP,
                                NVL( FOD_OPT_TYP,'*'),
                                NVL( FOD_STRK_PRC, 0 ),
                                FOD_CLM_MTCH_ACCNT,
																to_char(FOD_EXPRY_DT,'YYYYMMDD')			/** Ver 2.6 **/
                        FROM    FOD_FO_ORDR_DTLS,
                                uac_usr_accnts
                        WHERE   FOD_CLM_MTCH_ACCNT = uac_clm_mtch_accnt
                        AND     FOD_UNDRLYNG LIKE :c_undrlyng
                        AND     FOD_EXPRY_DT >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                        AND     FOD_EXPRY_DT <= to_date ( :c_to_dt,'dd-mon-yyyy')
                        AND     FOD_XCHNG_CD =  :c_xchng_cd
                        AND     uac_usr_id = :c_user_id
                        AND     fod_prdct_typ = 'I'
                        AND     fod_exec_qty != 0
                        ORDER BY  9, 1, 2, 3, 4, 5, 7, 8;     /*** Added in Ver 2.1 ***/
                        END;
                      END-EXEC;


						}


		 }	
		 else
		 {

							strcpy ( c_cln_mtch_accnt, st_usr_prfl.c_cln_mtch_accnt);

							EXEC SQL  EXECUTE
								BEGIN
									OPEN  :cont_cursor FOR
											SELECT  fop_xchng_cd,
															fop_prdct_typ,
															fop_indstk,
															fop_undrlyng,
															to_char(fop_expry_dt,'DD-Mon-YYYY'),
															fop_exer_typ,
															fop_opt_typ,
															fop_strk_prc,
															/*** Commented in Ver 2.1 **
															fop_opnpstn_qty,
															fop_opnpstn_val,
															***/
															fop_clm_mtch_accnt,
															to_char(fop_expry_dt,'YYYYMMDD')			/** ver 2.6 **/
											FROM    fop_fo_options_pstn
											WHERE  fop_clm_mtch_accnt  = :c_cln_mtch_accnt 
											AND     fop_xchng_cd        = :c_xchng_cd
											AND     fop_prdct_typ       LIKE :c_prd_typ
											AND     fop_undrlyng      LIKE :c_undrlyng
											AND     fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
											AND     fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
											AND
											(
															fop_opnpstn_qty != 0
												 OR   fop_exrc_qty    != 0
												 OR   fop_asgnd_qty   != 0
												 OR   fop_buy_exctd_qty   != 0
												 OR   fop_sell_exctd_qty   != 0
											)
							/*				ORDER BY  fop_clm_mtch_accnt,
																fop_xchng_cd,
																fop_prdct_typ,
																fop_undrlyng,	
																fop_expry_dt ;						Commented In Ver 1.8 */
								UNION ALL																						/** Ver 1.8 **/
										SELECT 	fcp_xchng_cd,
                            FCP_PRDCT_TYP,
														fcp_indstk,
                            fcp_undrlyng,
                            to_char(fcp_expry_dt,'DD-Mon-YYYY'),
                            fcp_exer_typ,
														NVL( FCP_OPT_TYP , '*'),
														NVL( FCP_STRK_PRC , 0 ),
														/*** Commented in Ver 2.1 **
                            fcp_opnpstn_qty,
                            fcp_opnpstn_val,
														***/
                            fcp_clm_mtch_accnt,
														to_char(fcp_expry_dt,'YYYYMMDD')      /** ver 2.6 **/
                      FROM  FCP_FO_SPN_CNTRCT_PSTN
                      WHERE   fcp_clm_mtch_accnt = :c_cln_mtch_accnt
                      AND     fcp_undrlyng      LIKE :c_undrlyng
                      AND     fcp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                      AND     fcp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                      AND     fcp_xchng_cd        = :c_xchng_cd
                      AND   FCP_PRDCT_TYP         = 'O' 
                      AND
                      (    		fcp_opnpstn_qty     != 0
                         OR   fcp_exrc_qty        != 0
                         OR   fcp_asgnd_qty       != 0
                         OR   fcp_buy_exctd_qty 	!= 0
                         OR   fcp_sell_exctd_qty  != 0
                      )
                      /** Commented Ver 1.8 GROUP BY  fcp_xchng_cd,
                                fcp_indstk,
                                fcp_undrlyng,
                                fcp_expry_dt,
                                fcp_exer_typ,
                                fcp_clm_mtch_accnt,
                                FCP_PRDCT_TYP,
                                FCP_STRK_PRC,
                                FCP_OPT_TYP **/
                      /*** ORDER BY  11,
                                1,
                                2,
                                4,
                                5,
																7,
																8;														** Ver 1.8 *** Commented in Ver 2.1 ***/
                  UNION ALL                          /* Ver 2.1 OptionPlus Portfolio */
                        SELECT  distinct FOD_XCHNG_CD,
                                'O',
                                FOD_INDSTK,
                                FOD_UNDRLYNG,
                                to_char(FOD_EXPRY_DT,'DD-Mon-YYYY'),
                                FOD_EXER_TYP,
                                NVL( FOD_OPT_TYP,'*'),
                                NVL( FOD_STRK_PRC, 0 ),
                                FOD_CLM_MTCH_ACCNT,
																to_char(FOD_EXPRY_DT,'YYYYMMDD')			/** Ver 2.6 **/
                        FROM    FOD_FO_ORDR_DTLS
                        WHERE   FOD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
                        AND     FOD_UNDRLYNG LIKE :c_undrlyng
                        AND     FOD_EXPRY_DT >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                        AND     FOD_EXPRY_DT <= to_date ( :c_to_dt,'dd-mon-yyyy')
                        AND     FOD_XCHNG_CD =  :c_xchng_cd
                        AND     fod_prdct_typ = 'I'
                        AND     fod_exec_qty != 0
                        ORDER BY  9, 1, 2, 3, 4, 5, 7, 8;     /*** Added in Ver 2.1 ***/	
								END;
							  END-EXEC;


		}

	}
	else if ( (l_rec_main_exists == 0 ) && (l_rec_hstry_exists == 1 ) )
  {

        if( strcmp( st_usr_prfl.c_cln_mtch_accnt , "*" ) == 0 )
        {

            strcpy ( c_user_id, st_usr_prfl.c_user_id);

            if( st_usr_prfl.c_user_id[0] == BPID )
            {


                    if(DEBUG_MSG_LVL_3){
                    fn_userlog(c_ServiceName,"BPID");  }	

										EXEC SQL  EXECUTE
										BEGIN
										OPEN  :cont_cursor FOR
										SELECT  fop_xchng_cd,
															fop_prdct_typ,
															fop_indstk,
															fop_undrlyng,
															to_char(fop_expry_dt,'DD-Mon-YYYY'),
															fop_exer_typ,
															fop_opt_typ,
															fop_strk_prc,
															/*** Commented in Ver 2.1 **
															fop_opnpstn_qty,
															fop_opnpstn_val,
															***/
															fop_clm_mtch_accnt,
															to_char(fop_expry_dt,'YYYYMMDD')			/** Ver 2.6 **/
											FROM    fop_fo_options_pstn_hstry,
														  clm_clnt_mstr	
											WHERE   fop_clm_mtch_accnt  = clm_mtch_accnt 
											AND     fop_xchng_cd        = :c_xchng_cd
											AND     fop_prdct_typ       LIKE :c_prd_typ
											AND     fop_undrlyng        LIKE :c_undrlyng
											AND     clm_bp_id = :c_user_id
											AND     fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
											AND     fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
											AND
											(
															fop_opnpstn_qty != 0
												 OR   fop_exrc_qty    != 0
												 OR   fop_asgnd_qty   != 0
												 OR   fop_buy_exctd_qty   != 0
												 OR   fop_sell_exctd_qty   != 0
											)
									/**		ORDER BY  fop_clm_mtch_accnt,
																fop_xchng_cd,
																fop_prdct_typ,
																fop_undrlyng,
																fop_expry_dt ;		** Commented In Ver 1.8 ***/
									UNION ALL																										/*** Ver 1.8 SPAN Portfolio ***/
                      SELECT  fcp_xchng_cd,
                              fcp_prdct_typ,
                              fcp_indstk,
                              fcp_undrlyng,
                              to_char(fcp_expry_dt,'DD-Mon-YYYY'),
                              fcp_exer_typ,
                              NVL( FCP_OPT_TYP , '*'),
                              NVL( FCP_STRK_PRC , 0 ),
															/*** Commented in Ver 2.1 **
                              fcp_opnpstn_qty,
                              fcp_opnpstn_val,
															***/
                              fcp_clm_mtch_accnt,
															to_char(fcp_expry_dt,'YYYYMMDD')				/*** Ver 2.6 ***/
                      FROM  FCP_FO_SPN_CNTRCT_PSTN_hstry,
                            clm_clnt_mstr
                      WHERE fcp_clm_mtch_accnt = clm_mtch_accnt
                      AND   fcp_xchng_cd        = :c_xchng_cd
                      AND   clm_bp_id           = :c_user_id
                      AND   fcp_prdct_typ       = 'O' 
                      AND   fcp_undrlyng      LIKE :c_undrlyng
                      AND   fcp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                      AND   fcp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                      AND
                      (     	fcp_opnpstn_qty     != 0
                          OR  fcp_exrc_qty        != 0
                          OR  fcp_asgnd_qty       != 0
                          OR  fcp_buy_exctd_qty 	!= 0
                        	OR  fcp_sell_exctd_qty  != 0
                      )
                      /*** ORDER BY  11,
                                1,
                                2,
                                4,
                                5,
																7,
																8;													** Ver 1.8 *** Commented in Ver 2.1 ***/
                 UNION ALL                          /* Ver 2.1 OptionPlus Portfolio */
                        SELECT  distinct FOD_XCHNG_CD,
                                'O',
                                FOD_INDSTK,
                                FOD_UNDRLYNG,
                                to_char(FOD_EXPRY_DT,'DD-Mon-YYYY'),
                                FOD_EXER_TYP,
                                NVL( FOD_OPT_TYP,'*'),
                                NVL( FOD_STRK_PRC, 0 ),
                                FOD_CLM_MTCH_ACCNT,
																to_char(FOD_EXPRY_DT,'YYYYMMDD')				/** Ve 2.6 **/
                        FROM    FOD_FO_ORDR_DTLS_HSTRY,
                                clm_clnt_mstr
                        WHERE   FOD_CLM_MTCH_ACCNT = clm_mtch_accnt
                        AND     FOD_UNDRLYNG LIKE :c_undrlyng
                        AND     FOD_EXPRY_DT >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                        AND     FOD_EXPRY_DT <= to_date ( :c_to_dt,'dd-mon-yyyy')
                        AND     FOD_XCHNG_CD =  :c_xchng_cd
                        AND     clm_bp_id = :c_user_id
                        AND     fod_prdct_typ = 'I'
                        AND     fod_exec_qty != 0
                        ORDER BY  9, 1, 2, 3, 4, 5, 7, 8;     /*** Added in Ver 2.1 ***/	
								END;
							END-EXEC;



						}
						else
						{


								 if(DEBUG_MSG_LVL_3){
                    /*** fn_userlog(c_ServiceName,"BPID"); ** Commented in Ver 2.1 ***/
										fn_userlog(c_ServiceName,"NONBPID");  /*** Ver 2.1 ***/  }

                    EXEC SQL  EXECUTE
        					  BEGIN
									  OPEN  :cont_cursor FOR
										SELECT  fop_xchng_cd,
														fop_prdct_typ,
														fop_indstk,
														fop_undrlyng,
														to_char(fop_expry_dt,'DD-Mon-YYYY'),
														fop_exer_typ,
														fop_opt_typ,
														fop_strk_prc,
														/*** Commented in Ver 2.1 **
														fop_opnpstn_qty,
														fop_opnpstn_val,
														***/
														fop_clm_mtch_accnt,
														to_char(fop_expry_dt,'YYYYMMDD')			/*** Ver 2.6 ***/
											FROM  fop_fo_options_pstn_hstry,
														uac_usr_accnts	
											WHERE fop_clm_mtch_accnt  = uac_clm_mtch_accnt 
											AND   fop_xchng_cd        = :c_xchng_cd
											AND   fop_prdct_typ       LIKE :c_prd_typ
											AND   fop_undrlyng        LIKE :c_undrlyng
											AND   uac_usr_id = :c_user_id
											AND   fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
											AND   fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
              AND
              (
                      fop_opnpstn_qty != 0
                 OR   fop_exrc_qty    != 0
                 OR   fop_asgnd_qty   != 0
                 OR   fop_buy_exctd_qty   != 0
                 OR   fop_sell_exctd_qty   != 0
              )
          /**    ORDER BY  fop_clm_mtch_accnt,
                        fop_xchng_cd,
                        fop_prdct_typ,
                        fop_undrlyng,
                        fop_expry_dt ;						** Commented in Ver 1.8 **/
							UNION ALL                                                       /* Ver 1.8 SPAN Portfolio */
                      SELECT  fcp_xchng_cd,
                              fcp_prdct_typ,
                              fcp_indstk,
                              fcp_undrlyng,
                              to_char(fcp_expry_dt,'DD-Mon-YYYY'),
                              fcp_exer_typ,
                              NVL( FCP_OPT_TYP , '*'),
                              NVL( FCP_STRK_PRC , 0 ),
															/*** Commented in Ver 2.1 **
                              fcp_opnpstn_qty,
                              fcp_opnpstn_val,
															***/
                              fcp_clm_mtch_accnt,
															to_char(fcp_expry_dt,'YYYYMMDD')				/*** Ver 2.6 ***/
                      FROM  FCP_FO_SPN_CNTRCT_PSTN_hstry,
                            uac_usr_accnts
                      WHERE fcp_clm_mtch_accnt = uac_clm_mtch_accnt
                      AND   fcp_xchng_cd        = :c_xchng_cd
                      AND   fcp_prdct_typ       = 'O' 
                      AND   fcp_undrlyng      LIKE :c_undrlyng
                      AND   uac_usr_id = :c_user_id
                      AND   fcp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                      AND   fcp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                      AND
                      (     	fcp_opnpstn_qty     != 0
                          OR  fcp_exrc_qty        != 0
                          OR  fcp_asgnd_qty       != 0
                          OR  fcp_buy_exctd_qty 	!= 0
                        	OR  fcp_sell_exctd_qty  != 0
                      )
                      /*** ORDER BY  11,
                                1,
                                2,
                                4,
                                5,
																7,
																8;											** Ver 1.8 *** Commented in Ver 2.1 ***/	
                    UNION ALL                          /* Ver 2.1 OptionPlus Portfolio */
                        SELECT  distinct FOD_XCHNG_CD,
                                'O',
                                FOD_INDSTK,
                                FOD_UNDRLYNG,
                                to_char(FOD_EXPRY_DT,'DD-Mon-YYYY'),
                                FOD_EXER_TYP,
                                NVL( FOD_OPT_TYP,'*'),
                                NVL( FOD_STRK_PRC, 0 ),
                                FOD_CLM_MTCH_ACCNT,
																to_char(FOD_EXPRY_DT,'YYYYMMDD')			/** Ver 2.6 **/
                        FROM    FOD_FO_ORDR_DTLS_HSTRY,
                                uac_usr_accnts
                        WHERE   FOD_CLM_MTCH_ACCNT = uac_clm_mtch_accnt
                        AND     FOD_UNDRLYNG LIKE :c_undrlyng
                        AND     FOD_EXPRY_DT >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                        AND     FOD_EXPRY_DT <= to_date ( :c_to_dt,'dd-mon-yyyy')
                        AND     FOD_XCHNG_CD =  :c_xchng_cd
                        AND     uac_usr_id = :c_user_id
                        AND     fod_prdct_typ = 'I'
                        AND     fod_exec_qty != 0
                        ORDER BY  9, 1, 2, 3, 4, 5, 7, 8;     /*** Added in Ver 2.1 ***/	
								END;
							END-EXEC;


							

						}

				}
				else
				{

										strcpy ( c_cln_mtch_accnt, st_usr_prfl.c_cln_mtch_accnt);

                		EXEC SQL  EXECUTE
										BEGIN
										OPEN  :cont_cursor FOR
										SELECT  fop_xchng_cd,
														fop_prdct_typ,
														fop_indstk,
														fop_undrlyng,
														to_char(fop_expry_dt,'DD-Mon-YYYY'),
														fop_exer_typ,
														fop_opt_typ,
														fop_strk_prc,
														/*** Commented in Ver 2.1 **
														fop_opnpstn_qty,
														fop_opnpstn_val,
														***/
														fop_clm_mtch_accnt,
														to_char(fop_expry_dt,'YYYYMMDD')			/*** Ver 2.6 ***/
											FROM  fop_fo_options_pstn_hstry
											WHERE  fop_clm_mtch_accnt  = :c_cln_mtch_accnt 
											AND    fop_xchng_cd  = :c_xchng_cd
											AND    fop_prdct_typ LIKE :c_prd_typ
											AND    fop_undrlyng  LIKE :c_undrlyng
											AND    fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
											AND    fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
											AND
											(
															fop_opnpstn_qty != 0
												 OR   fop_exrc_qty    != 0
												 OR   fop_asgnd_qty   != 0
												 OR   fop_buy_exctd_qty   != 0
												 OR   fop_sell_exctd_qty   != 0
											)
								/**			ORDER BY  fop_clm_mtch_accnt,
																fop_xchng_cd,
																fop_prdct_typ,
																fop_undrlyng,
																fop_expry_dt ;			** Commented In Ver 1.8 **/
								 UNION ALL                                           /** Ver 1.8 **/
                    SELECT  fcp_xchng_cd,
                            FCP_PRDCT_TYP,
                            fcp_indstk,
                            fcp_undrlyng,
                            to_char(fcp_expry_dt,'DD-Mon-YYYY'),
                            fcp_exer_typ,
                            NVL( FCP_OPT_TYP , '*'),
                            NVL( FCP_STRK_PRC , 0 ),
														/*** Commented in Ver 2.1 **
                            fcp_opnpstn_qty,
                            fcp_opnpstn_val,
														***/
                            fcp_clm_mtch_accnt,
														to_char(fcp_expry_dt,'YYYYMMDD')      /*** Ver 2.6 ***/
                      FROM  FCP_FO_SPN_CNTRCT_PSTN_hstry
                      WHERE   fcp_clm_mtch_accnt = :c_cln_mtch_accnt
                      AND     fcp_undrlyng      LIKE :c_undrlyng
                      AND     fcp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                      AND     fcp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                      AND     fcp_xchng_cd        = :c_xchng_cd
                      AND   FCP_PRDCT_TYP       = 'O' 
                      AND
                      (     	fcp_opnpstn_qty     != 0
                          OR  fcp_exrc_qty        != 0
                          OR  fcp_asgnd_qty       != 0
                          OR  fcp_buy_exctd_qty 	!= 0
                        	OR  fcp_sell_exctd_qty  != 0
                      )
                      /*** Commented Ver 1.8 GROUP BY  fcp_xchng_cd,
                                fcp_indstk,
                                fcp_undrlyng,
                                fcp_expry_dt,
                                fcp_exer_typ,
                                fcp_clm_mtch_accnt,
                                FCP_PRDCT_TYP,
                                FCP_STRK_PRC,
                                FCP_OPT_TYP **/
                      /*** ORDER BY  11,
                                1,
                                2,
                                4,
                                5,
																7,
																8;																** Ver 1.8 *** Commented in Ver 2.1 ***/
                  UNION ALL                          /* Ver 2.1 OptionPlus Portfolio */
                        SELECT  distinct FOD_XCHNG_CD,
                                'O',
                                FOD_INDSTK,
                                FOD_UNDRLYNG,
                                to_char(FOD_EXPRY_DT,'DD-Mon-YYYY'),
                                FOD_EXER_TYP,
                                NVL( FOD_OPT_TYP,'*'),
                                NVL( FOD_STRK_PRC, 0 ),
                                FOD_CLM_MTCH_ACCNT,
																to_char(FOD_EXPRY_DT,'YYYYMMDD')				/*** Ver 2.6 ***/
                        FROM    FOD_FO_ORDR_DTLS_HSTRY
                        WHERE   FOD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
                        AND     FOD_UNDRLYNG LIKE :c_undrlyng
                        AND     FOD_EXPRY_DT >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                        AND     FOD_EXPRY_DT <= to_date ( :c_to_dt,'dd-mon-yyyy')
                        AND     FOD_XCHNG_CD =  :c_xchng_cd
                        AND     fod_prdct_typ = 'I'
                        AND     fod_exec_qty != 0
                        ORDER BY  9, 1, 2, 3, 4, 5, 7, 8;     /*** Added in Ver 2.1 ***/	
                END;
              END-EXEC;

				}




	}
	else if ( (l_rec_main_exists == 1 ) && (l_rec_hstry_exists == 1 ) )
  {


        if( strcmp( st_usr_prfl.c_cln_mtch_accnt , "*" ) == 0 )
        {


            strcpy ( c_user_id, st_usr_prfl.c_user_id);

            if( st_usr_prfl.c_user_id[0] == BPID )
            {	

						
								EXEC SQL  EXECUTE
								BEGIN
								OPEN  :cont_cursor FOR
								SELECT  fop_xchng_cd,
												fop_prdct_typ,
												fop_indstk,
												fop_undrlyng,
												to_char(fop_expry_dt,'DD-Mon-YYYY'),
												fop_exer_typ,
												fop_opt_typ,
												fop_strk_prc,	
												/*** Commented in Ver 2.1 **
												fop_opnpstn_qty,
												fop_opnpstn_val,
												***/
												fop_clm_mtch_accnt,
												to_char(fop_expry_dt,'YYYYMMDD')			/** Ver 2.6 **/
								FROM    fop_fo_options_pstn,
												clm_clnt_mstr
								WHERE   fop_clm_mtch_accnt  = clm_mtch_accnt 
								AND     fop_xchng_cd        = :c_xchng_cd
								AND     fop_prdct_typ       LIKE :c_prd_typ
								AND     fop_undrlyng      LIKE :c_undrlyng
								AND     clm_bp_id = :c_user_id
								AND     fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
							  AND     fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
								AND
								(
															fop_opnpstn_qty != 0
												 OR   fop_exrc_qty    != 0
												 OR   fop_asgnd_qty   != 0
												 OR   fop_buy_exctd_qty   != 0
												 OR   fop_sell_exctd_qty   != 0
								)
								UNION ALL	
								SELECT  fop_xchng_cd,
												fop_prdct_typ,
												fop_indstk,
												fop_undrlyng,
												to_char(fop_expry_dt,'DD-Mon-YYYY'),
												fop_exer_typ,
												fop_opt_typ,
												fop_strk_prc,
												/*** Commented in Ver 2.1 **
												fop_opnpstn_qty,
												fop_opnpstn_val,
												***/
												fop_clm_mtch_accnt,
												to_char(fop_expry_dt,'YYYYMMDD')      /** Ver 2.6 **/		
								FROM    fop_fo_options_pstn_hstry,
												clm_clnt_mstr
								WHERE   fop_clm_mtch_accnt  = clm_mtch_accnt 
								AND     fop_xchng_cd        = :c_xchng_cd
								AND     fop_prdct_typ       LIKE :c_prd_typ
								AND     fop_undrlyng      LIKE :c_undrlyng
								AND     clm_bp_id = :c_user_id
								AND     fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
								AND     fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
								AND
								(
															fop_opnpstn_qty != 0
												 OR   fop_exrc_qty    != 0
												 OR   fop_asgnd_qty   != 0
												 OR   fop_buy_exctd_qty   != 0
												 OR   fop_sell_exctd_qty   != 0
								)
								UNION ALL																			/*** Ver 1.8  SPAN Portfolio ***/
                      SELECT  fcp_xchng_cd,
                              fcp_prdct_typ,
                              fcp_indstk,
                              fcp_undrlyng,
                              to_char(fcp_expry_dt,'DD-Mon-YYYY'),
                              fcp_exer_typ,
                              NVL( FCP_OPT_TYP , '*'),
                              NVL( FCP_STRK_PRC , 0 ),
															/*** Commented in Ver 2.1 **
                              fcp_opnpstn_qty,
                              fcp_opnpstn_val,
															***/
                              fcp_clm_mtch_accnt,
															to_char(fcp_expry_dt,'YYYYMMDD')		/** ver 2.6 **/
                      FROM  FCP_FO_SPN_CNTRCT_PSTN,
                            clm_clnt_mstr
                      WHERE fcp_clm_mtch_accnt = clm_mtch_accnt
                      AND   fcp_xchng_cd        = :c_xchng_cd
                      AND   clm_bp_id           = :c_user_id
                      AND   fcp_prdct_typ       = 'O'  
                      AND   fcp_undrlyng      LIKE :c_undrlyng
                      AND   fcp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                      AND   fcp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                      AND
                      (     	fcp_opnpstn_qty     != 0
                          OR  fcp_exrc_qty        != 0
                          OR  fcp_asgnd_qty       != 0
                          OR  fcp_buy_exctd_qty 	!= 0
                        	OR  fcp_sell_exctd_qty  != 0
                      )
								UNION ALL																			 /*** Ver 1.8  SPAN Portfolio ***/	
											SELECT  fcp_xchng_cd,
                              fcp_prdct_typ,
                              fcp_indstk,
                              fcp_undrlyng,
                              to_char(fcp_expry_dt,'DD-Mon-YYYY'),
                              fcp_exer_typ,
                              NVL( FCP_OPT_TYP , '*'),
                              NVL( FCP_STRK_PRC , 0 ),
															/*** Commented in Ver 2.1 **
                              fcp_opnpstn_qty,
                              fcp_opnpstn_val,
														  ***/
                              fcp_clm_mtch_accnt,
														  to_char(fcp_expry_dt,'YYYYMMDD')    /** ver 2.6 **/
                      FROM  FCP_FO_SPN_CNTRCT_PSTN_hstry,
                            clm_clnt_mstr
                      WHERE fcp_clm_mtch_accnt = clm_mtch_accnt
                      AND   fcp_xchng_cd        = :c_xchng_cd
                      AND   clm_bp_id           = :c_user_id
                      AND   fcp_prdct_typ       = 'O' 
                      AND   fcp_undrlyng      LIKE :c_undrlyng
                      AND   fcp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                      AND   fcp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                      AND
                      (     
                      	      fcp_opnpstn_qty     != 0
                          OR  fcp_exrc_qty        != 0
                          OR  fcp_asgnd_qty       != 0
                          OR  fcp_buy_exctd_qty 	!= 0
                        	OR  fcp_sell_exctd_qty  != 0
  		                )
											/*** ORDER BY  1, 2, 4, 5, 7, 8,11;			*** Commented in Ver 2.1 ***/
                  UNION ALL                          /* Ver 2.1 OptionPlus Portfolio */
                        SELECT  distinct FOD_XCHNG_CD,
                                'O',
                                FOD_INDSTK,
                                FOD_UNDRLYNG,
                                to_char(FOD_EXPRY_DT,'DD-Mon-YYYY'),
                                FOD_EXER_TYP,
                                NVL( FOD_OPT_TYP,'*'),
                                NVL( FOD_STRK_PRC, 0 ),
                                FOD_CLM_MTCH_ACCNT,
															  to_char(FOD_EXPRY_DT,'YYYYMMDD')			/** Ver 2.6 **/
                        FROM    FOD_FO_ORDR_DTLS,
                                clm_clnt_mstr
                        WHERE   FOD_CLM_MTCH_ACCNT = clm_mtch_accnt
                        AND     FOD_UNDRLYNG LIKE :c_undrlyng
                        AND     FOD_EXPRY_DT >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                        AND     FOD_EXPRY_DT <= to_date ( :c_to_dt,'dd-mon-yyyy')
                        AND     FOD_XCHNG_CD =  :c_xchng_cd
                        AND     clm_bp_id = :c_user_id
                        AND     fod_prdct_typ = 'I'
                        AND     fod_exec_qty != 0
                        UNION ALL
                        SELECT  distinct FOD_XCHNG_CD,
                                'O',
                                FOD_INDSTK,
                                FOD_UNDRLYNG,
                                to_char(FOD_EXPRY_DT,'DD-Mon-YYYY'),
                                FOD_EXER_TYP,
                                NVL( FOD_OPT_TYP,'*'),
                                NVL( FOD_STRK_PRC, 0 ),
                                FOD_CLM_MTCH_ACCNT,
																to_char(FOD_EXPRY_DT,'YYYYMMDD')      /** Ver 2.6 **/
                        FROM    FOD_FO_ORDR_DTLS_HSTRY,
                                clm_clnt_mstr
                        WHERE   FOD_CLM_MTCH_ACCNT = clm_mtch_accnt
                        AND     FOD_UNDRLYNG LIKE :c_undrlyng
                        AND     FOD_EXPRY_DT >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                        AND     FOD_EXPRY_DT <= to_date ( :c_to_dt,'dd-mon-yyyy')
                        AND     FOD_XCHNG_CD =  :c_xchng_cd
                        AND     clm_bp_id = :c_user_id
                        AND     fod_prdct_typ = 'I'
                        AND     fod_exec_qty != 0
                        ORDER BY  9, 1, 2, 3, 4, 5, 7, 8;     /*** Added in Ver 2.1 ***/
	
								END;
								END-EXEC;

						}
						else
						{
							
							
                  EXEC SQL  EXECUTE
								  BEGIN
									OPEN  :cont_cursor FOR
											SELECT  fop_xchng_cd,
															fop_prdct_typ,
															fop_indstk,
															fop_undrlyng,
															to_char(fop_expry_dt,'DD-Mon-YYYY'),
															fop_exer_typ,
															fop_opt_typ,
															fop_strk_prc,
															/*** Commented in Ver 2.1 **
															fop_opnpstn_qty,
															fop_opnpstn_val,
															***/
															fop_clm_mtch_accnt
											FROM    fop_fo_options_pstn,
															uac_usr_accnts	
											WHERE   fop_clm_mtch_accnt  = uac_clm_mtch_accnt 
											AND     fop_xchng_cd        = :c_xchng_cd
											AND     fop_prdct_typ       LIKE :c_prd_typ
											AND     fop_undrlyng      LIKE :c_undrlyng
											AND     uac_usr_id = :c_user_id
											AND     fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
											AND     fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
											AND
											(
															fop_opnpstn_qty != 0
												 OR   fop_exrc_qty    != 0
												 OR   fop_asgnd_qty   != 0
												 OR   fop_buy_exctd_qty   != 0
												 OR   fop_sell_exctd_qty   != 0
											)
									UNION ALL
											SELECT  fop_xchng_cd,
															fop_prdct_typ,
															fop_indstk,
															fop_undrlyng,
															to_char(fop_expry_dt,'DD-Mon-YYYY'),
															fop_exer_typ,
															fop_opt_typ,
															fop_strk_prc,
															/*** Commented in Ver 2.1 **
															fop_opnpstn_qty,
															fop_opnpstn_val,
															***/
															fop_clm_mtch_accnt
											FROM    fop_fo_options_pstn_hstry,
															uac_usr_accnts
											WHERE   fop_clm_mtch_accnt  = uac_clm_mtch_accnt 
											AND     fop_xchng_cd        = :c_xchng_cd
											AND     fop_prdct_typ       LIKE :c_prd_typ
											AND     fop_undrlyng      LIKE :c_undrlyng
											AND     uac_usr_id = :c_user_id
											AND     fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
											AND     fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
											AND
											(
															fop_opnpstn_qty != 0
												 OR   fop_exrc_qty    != 0
												 OR   fop_asgnd_qty   != 0
												 OR   fop_buy_exctd_qty   != 0
												 OR   fop_sell_exctd_qty   != 0
											)
								 UNION ALL                                                       /* Ver 1.8 SPAN Portfolio */
                      SELECT  fcp_xchng_cd,
                              fcp_prdct_typ,
                              fcp_indstk,
                              fcp_undrlyng,
                              to_char(fcp_expry_dt,'DD-Mon-YYYY'),
                              fcp_exer_typ,
                              NVL( FCP_OPT_TYP , '*'),
                              NVL( FCP_STRK_PRC , 0 ),
															/*** Commented in Ver 2.1 **
                              fcp_opnpstn_qty,
                              fcp_opnpstn_val,
															***/
                              fcp_clm_mtch_accnt
                      FROM  FCP_FO_SPN_CNTRCT_PSTN_hstry,
                            uac_usr_accnts
                      WHERE fcp_clm_mtch_accnt = uac_clm_mtch_accnt
                      AND   fcp_xchng_cd        = :c_xchng_cd
                      AND   fcp_prdct_typ       = 'O' 
                      AND   fcp_undrlyng      LIKE :c_undrlyng
                      AND   uac_usr_id = :c_user_id
                      AND   fcp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                      AND   fcp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                      AND
                      (     	fcp_opnpstn_qty     != 0
                          OR  fcp_exrc_qty        != 0
                          OR  fcp_asgnd_qty       != 0
                          OR  fcp_buy_exctd_qty 	!= 0
                        	OR  fcp_sell_exctd_qty  != 0
                      )
								 UNION ALL
											 SELECT  fcp_xchng_cd,
                              fcp_prdct_typ,
                              fcp_indstk,
                              fcp_undrlyng,
                              to_char(fcp_expry_dt,'DD-Mon-YYYY'),
                              fcp_exer_typ,
                              NVL( FCP_OPT_TYP , '*'),
                              NVL( FCP_STRK_PRC , 0 ),
															/*** Commented in Ver 2.1 **
                              fcp_opnpstn_qty,
                              fcp_opnpstn_val,
															***/
                              fcp_clm_mtch_accnt
                      FROM  FCP_FO_SPN_CNTRCT_PSTN,
                            uac_usr_accnts
                      WHERE fcp_clm_mtch_accnt = uac_clm_mtch_accnt
                      AND   fcp_xchng_cd        = :c_xchng_cd
                      AND   fcp_prdct_typ       = 'O' 
                      AND   fcp_undrlyng      LIKE :c_undrlyng
                      AND   uac_usr_id = :c_user_id
                      AND   fcp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                      AND   fcp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                      AND
                      (     	fcp_opnpstn_qty     != 0
                          OR  fcp_exrc_qty        != 0
                          OR  fcp_asgnd_qty       != 0
                          OR  fcp_buy_exctd_qty 	!= 0
                        	OR  fcp_sell_exctd_qty  != 0
                      )	
											/*** ORDER BY  1, 2, 4, 5, 7, 8,11;   *** Commented in Ver 2.1 ***/
                  UNION ALL                          /* Ver 2.1 OptionPlus Portfolio */
                        SELECT  distinct FOD_XCHNG_CD,
                                'O',
                                FOD_INDSTK,
                                FOD_UNDRLYNG,
                                to_char(FOD_EXPRY_DT,'DD-Mon-YYYY'),
                                FOD_EXER_TYP,
                                NVL( FOD_OPT_TYP,'*'),
                                NVL( FOD_STRK_PRC, 0 ),
                                FOD_CLM_MTCH_ACCNT
                        FROM    FOD_FO_ORDR_DTLS,
                                uac_usr_accnts
                        WHERE   FOD_CLM_MTCH_ACCNT = uac_clm_mtch_accnt
                        AND     FOD_UNDRLYNG LIKE :c_undrlyng
                        AND     FOD_EXPRY_DT >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                        AND     FOD_EXPRY_DT <= to_date ( :c_to_dt,'dd-mon-yyyy')
                        AND     FOD_XCHNG_CD =  :c_xchng_cd
                        AND     uac_usr_id = :c_user_id
                        AND     fod_prdct_typ = 'I'
                        AND     fod_exec_qty != 0
                        UNION ALL
                        SELECT  distinct FOD_XCHNG_CD,
                                'O',
                                FOD_INDSTK,
                                FOD_UNDRLYNG,
                                to_char(FOD_EXPRY_DT,'DD-Mon-YYYY'),
                                FOD_EXER_TYP,
                                NVL( FOD_OPT_TYP,'*'),
                                NVL( FOD_STRK_PRC, 0 ),
                                FOD_CLM_MTCH_ACCNT
                        FROM    FOD_FO_ORDR_DTLS_HSTRY,
                                uac_usr_accnts
                        WHERE   FOD_CLM_MTCH_ACCNT = uac_clm_mtch_accnt
                        AND     FOD_UNDRLYNG LIKE :c_undrlyng
                        AND     FOD_EXPRY_DT >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                        AND     FOD_EXPRY_DT <= to_date ( :c_to_dt,'dd-mon-yyyy')
                        AND     FOD_XCHNG_CD =  :c_xchng_cd
                        AND     uac_usr_id = :c_user_id
                        AND     fod_prdct_typ = 'I'
                        AND     fod_exec_qty != 0
                        ORDER BY  9, 1, 2, 3, 4, 5, 7, 8;     /*** Added in Ver 2.1 ***/

											END;
											END-EXEC;


						}


		}
		else
		{


				strcpy ( c_cln_mtch_accnt, st_usr_prfl.c_cln_mtch_accnt);


									EXEC SQL  EXECUTE
									BEGIN
									OPEN  :cont_cursor FOR
											SELECT  fop_xchng_cd,
															fop_prdct_typ,
															fop_indstk,
															fop_undrlyng,
															to_char(fop_expry_dt,'DD-Mon-YYYY'),
															fop_exer_typ,
															fop_opt_typ,
															fop_strk_prc,
															/*** Commented in Ver 2.1 **
															fop_opnpstn_qty,
															fop_opnpstn_val,
															***/
															fop_clm_mtch_accnt,
															to_char(fop_expry_dt,'YYYYMMDD') 		/*** Ver 2.6 ***/
											FROM    fop_fo_options_pstn
											WHERE   fop_clm_mtch_accnt  = :c_cln_mtch_accnt 
											AND     fop_xchng_cd        = :c_xchng_cd
											AND     fop_prdct_typ       LIKE :c_prd_typ
											AND     fop_undrlyng      LIKE :c_undrlyng
											AND     fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
											AND     fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
											AND
											(
															fop_opnpstn_qty != 0
												 OR   fop_exrc_qty    != 0
												 OR   fop_asgnd_qty   != 0
												 OR   fop_buy_exctd_qty   != 0
												 OR   fop_sell_exctd_qty   != 0
											)
									UNION ALL
											SELECT  fop_xchng_cd,
															fop_prdct_typ,
															fop_indstk,
															fop_undrlyng,
															to_char(fop_expry_dt,'DD-Mon-YYYY'),
															fop_exer_typ,
															fop_opt_typ,
															fop_strk_prc,
															/*** Commented in Ver 2.1 **
															fop_opnpstn_qty,
															fop_opnpstn_val,
															***/
															fop_clm_mtch_accnt,
															to_char(fop_expry_dt,'YYYYMMDD')		/*** Ver 2.6 ***/
											FROM    fop_fo_options_pstn_hstry
											WHERE   fop_clm_mtch_accnt  = :c_cln_mtch_accnt 
											AND     fop_xchng_cd        = :c_xchng_cd
											AND     fop_prdct_typ       LIKE :c_prd_typ
											AND     fop_undrlyng      LIKE :c_undrlyng
											AND     fop_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
											AND     fop_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
											AND
											(
															fop_opnpstn_qty != 0
												 OR   fop_exrc_qty    != 0
												 OR   fop_asgnd_qty   != 0
												 OR   fop_buy_exctd_qty   != 0
												 OR   fop_sell_exctd_qty   != 0
											)
									UNION ALL                                           /** Ver 1.8 **/
                  	  SELECT  fcp_xchng_cd,
                    	        FCP_PRDCT_TYP,
                      	      fcp_indstk,
                        	    fcp_undrlyng,
                          	  to_char(fcp_expry_dt,'DD-Mon-YYYY'),
                            	fcp_exer_typ,
                           	  NVL( FCP_OPT_TYP , '*'),
                            	NVL( FCP_STRK_PRC , 0 ),
															/*** Commented in Ver 2.1 **
                            	fcp_opnpstn_qty,
                            	fcp_opnpstn_val,
															***/
                            	fcp_clm_mtch_accnt,
															to_char(fcp_expry_dt,'YYYYMMDD')    /*** Ver 2.6 ***/
                      	FROM  FCP_FO_SPN_CNTRCT_PSTN
                      	WHERE fcp_clm_mtch_accnt = :c_cln_mtch_accnt
                      	AND   fcp_undrlyng      LIKE :c_undrlyng
                      	AND   fcp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                      	AND   fcp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                      	AND   fcp_xchng_cd        = :c_xchng_cd
                      	AND   FCP_PRDCT_TYP       = 'O' 
                      	AND
                      	(     fcp_opnpstn_qty     != 0
                          OR  fcp_exrc_qty        != 0
                          OR  fcp_asgnd_qty       != 0
                          OR  fcp_buy_exctd_qty 	!= 0
                        	OR  fcp_sell_exctd_qty  != 0
                      	)
									 UNION ALL                                           /** Ver 1.8 **/
                    	SELECT  fcp_xchng_cd,
                            	FCP_PRDCT_TYP,
                            	fcp_indstk,
                            	fcp_undrlyng,
                            	to_char(fcp_expry_dt,'DD-Mon-YYYY'),
                            	fcp_exer_typ,
                            	NVL( FCP_OPT_TYP , '*'),
                            	NVL( FCP_STRK_PRC , 0 ),
															/*** Commented in Ver 2.1 **
                            	fcp_opnpstn_qty,
                            	fcp_opnpstn_val,
															***/
                            	fcp_clm_mtch_accnt,
															to_char(fcp_expry_dt,'YYYYMMDD')    /*** Ver 2.6 ***/
                     	 FROM  	FCP_FO_SPN_CNTRCT_PSTN_hstry
                      WHERE   fcp_clm_mtch_accnt = :c_cln_mtch_accnt
                      AND     fcp_undrlyng      LIKE :c_undrlyng
                      AND     fcp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                      AND     fcp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
                      AND     fcp_xchng_cd        = :c_xchng_cd
                      AND     FCP_PRDCT_TYP       = 'O' 
                      AND
                      (       fcp_opnpstn_qty     != 0
                          OR  fcp_exrc_qty        != 0
                          OR  fcp_asgnd_qty       != 0
                          OR	fcp_buy_exctd_qty 	!= 0
                        	OR  fcp_sell_exctd_qty  != 0
                      )
											/***		ORDER BY  1, 2, 4, 5, 7, 8,11;	*** Commented in Ver 2.1 ***/
                  UNION ALL                           /* Ver 2.1 OptionPlus Portfolio */
                        SELECT  distinct FOD_XCHNG_CD,
                                'O',
                                FOD_INDSTK,
                                FOD_UNDRLYNG,
                                to_char(FOD_EXPRY_DT,'DD-Mon-YYYY'),
                                FOD_EXER_TYP,
                                NVL( FOD_OPT_TYP,'*'),
                                NVL( FOD_STRK_PRC, 0 ),
                                FOD_CLM_MTCH_ACCNT,
																to_char(FOD_EXPRY_DT,'YYYYMMDD')    /*** Ver 2.6 ***/
                        FROM    FOD_FO_ORDR_DTLS
                        WHERE   FOD_CLM_MTCH_ACCNT =  :c_cln_mtch_accnt
                        AND     FOD_UNDRLYNG LIKE :c_undrlyng
                        AND     FOD_EXPRY_DT >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                        AND     FOD_EXPRY_DT <= to_date ( :c_to_dt,'dd-mon-yyyy')
                        AND     FOD_XCHNG_CD =  :c_xchng_cd
                        AND     fod_prdct_typ = 'I'
                        AND     fod_exec_qty != 0
                UNION ALL
                        SELECT  distinct FOD_XCHNG_CD,
                                'O',
                                FOD_INDSTK,
                                FOD_UNDRLYNG,
                                to_char(FOD_EXPRY_DT,'DD-Mon-YYYY'),
                                FOD_EXER_TYP,
                                NVL( FOD_OPT_TYP,'*'),
                                NVL( FOD_STRK_PRC, 0 ),
                                FOD_CLM_MTCH_ACCNT,
																to_char(FOD_EXPRY_DT,'YYYYMMDD')    /*** Ver 2.6 ***/
                        FROM    FOD_FO_ORDR_DTLS_HSTRY
                        WHERE   FOD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
                        AND     FOD_UNDRLYNG LIKE :c_undrlyng
                        AND     FOD_EXPRY_DT >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                        AND     FOD_EXPRY_DT <= to_date ( :c_to_dt,'dd-mon-yyyy')
                        AND     FOD_XCHNG_CD =  :c_xchng_cd
                        AND     fod_prdct_typ = 'I'
                        AND     fod_exec_qty != 0
                        ORDER BY  9, 1, 2, 3, 4, 5, 7, 8;     /*** Added in Ver 2.1 ***/

							END;
							END-EXEC;


		}

	}
	else
  {
		/*** fn_errlog( c_ServiceName, "B28548", DEFMSG, c_errmsg.arr  );	 *** Commented in Ver 2.5 ***/
		EXEC SQL CLOSE :cont_cursor;		/*** Added in VQC ***/
		EXEC SQL FREE :cont_cursor; 		/*** Added in VQC ***/
		strcpy(c_errmsg.arr,"No record to be shown in this view"); /*** Ver 2.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
		fn_errlog( c_ServiceName, "S31110", DEFMSG, c_errmsg.arr  );
		fn_userlog( c_ServiceName, "***** NO RECORD IN HISTORY OR MAIN TABLE  *****");
		/** Added in Ver 3.4 **/
    if ( c_req_flg == 'S' )
      tpreturn(TPSUCCESS,SUCC_BFR , (char *)ptr_fml_Ibuf, 0, 0);
    else
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    /** Ver 3.4 ends here **/
  }

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31115", SQLMSG, c_errmsg.arr  );
		EXEC SQL CLOSE :cont_cursor;    /*** Added in VQC ***/
    EXEC SQL FREE :cont_cursor;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	  /***************** Ver 1.6 Ends ********************************/


  /****ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*i_clnts*8 );
  if ( ptr_fml_Obuf == NULL )
  {
    tpcommit(0);
    fn_errlog( c_ServiceName, "S31120", TPMSG, c_errmsg.arr  );
    EXEC SQL CLOSE :cont_cursor;
    EXEC SQL FREE :cont_cursor;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  #ifdef DEBUG
    fn_userlog( c_ServiceName, "After opening cursor");
    fn_userlog( c_ServiceName, "sizeof fml %d",sizeof(ptr_fml_Obuf) );
  #endif  
************/

	/*** Ver 1.8 ***/
	MEMSET(c_tmp_mtch_accnt);   /*** Added in Ver 2.0 ***/
	MEMSET(c_tmp_xchng_cd);
  MEMSET(c_tmp_undrlyng);
  MEMSET(c_tmp_expry_dt);


	/*** Ver 2.6 Starts****/
	
	MEMSET(c_min_ftq_exp_dt);

	EXEC SQL
			SELECT 	to_char(min(FTQ_EXPRY_DT), 'YYYYMMDD')
			INTO 		:c_min_ftq_exp_dt
			FROM 		FTQ_FO_TRD_QT
			WHERE 	FTQ_XCHNG_CD = 'NFO';	
   
	if(SQLCODE != 0)
	{
		fn_errlog( c_ServiceName, "S31125", SQLMSG, c_errmsg.arr  );
		EXEC SQL CLOSE :cont_cursor;			/*** Added in VQC ***/
    EXEC SQL FREE :cont_cursor;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );		
	}

	/*** Ver 2.6 Ends ****/

  for ( ; ; )
  {
    /*** Ver 2.1 Initialized variables for junk open position quantity issue of closed position ***/

    st_cntopt_pos.l_opnpstn_qty = 0;
    st_cntopt_pos.d_org_opn_val = 0;

    /****/

		MEMSET(c_exp_date);			/*** Added in Ver 2.6 ***/

    EXEC SQL FETCH :cont_cursor
              INTO :st_cntopt_pos.c_xchng_cd,
                   :st_cntopt_pos.c_prd_typ,
                   :st_cntopt_pos.c_ctgry_indstk,
                   :st_cntopt_pos.c_undrlyng,
                   :st_cntopt_pos.c_expry_dt,
                   :st_cntopt_pos.c_exrc_typ,
                   :st_cntopt_pos.c_opt_typ,
                   :st_cntopt_pos.l_strike_prc,
									 /*** Commented in Ver 2.1    **
                   :st_cntopt_pos.l_opnpstn_qty,
                   :st_cntopt_pos.d_org_opn_val,
									 ***/
                   :c_cln_mtch_accnt,
									 :c_exp_date;												/*** Added in Ver 2.6 ***/
    if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        break;
      }
      else
      {
        /*tpcommit(0);*/	/*1.6*/
        fn_errlog( c_ServiceName, "S31130", SQLMSG, c_errmsg.arr  );
        EXEC SQL CLOSE :cont_cursor;
        EXEC SQL FREE :cont_cursor;
        /** tpfree ( ( char * ) ptr_fml_Obuf ); Commented in VQC as memory deallocating without allocating *****/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
    rtrim(st_cntopt_pos.c_xchng_cd);
    rtrim(st_cntopt_pos.c_undrlyng);
    rtrim(st_cntopt_pos.c_expry_dt);
    rtrim(c_cln_mtch_accnt);
		
		/*  Ver 1.8 Changes for SPAN Portfolio */
		if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before if condition");
			fn_userlog(c_ServiceName,"st_cntopt_pos.c_xchng_cd    |%s|",st_cntopt_pos.c_xchng_cd);
			fn_userlog(c_ServiceName,"st_cntopt_pos.c_prd_typ     |%c|",st_cntopt_pos.c_prd_typ);
			fn_userlog(c_ServiceName,"st_cntopt_pos.c_ctgry_indstk|%c|",st_cntopt_pos.c_ctgry_indstk);
			fn_userlog(c_ServiceName,"st_cntopt_pos.c_undrlyng    |%s|",st_cntopt_pos.c_undrlyng);
			fn_userlog(c_ServiceName,"st_cntopt_pos.c_expry_dt		|%s|",st_cntopt_pos.c_expry_dt);
			fn_userlog(c_ServiceName,"st_cntopt_pos.c_exrc_typ		|%c|",st_cntopt_pos.c_exrc_typ);
			fn_userlog(c_ServiceName,"st_cntopt_pos.c_opt_typ			|%c|",st_cntopt_pos.c_opt_typ);
			fn_userlog(c_ServiceName,"st_cntopt_pos.l_strike_prc	|%ld|",st_cntopt_pos.l_strike_prc);
      fn_userlog(c_ServiceName,"Match Account is            |%s|",c_cln_mtch_accnt); /*** Ver 2.0 ***/
			
		}

		/*** Match Account Added in Ver 2.0 ***/

		/*** if( (strcmp(c_tmp_mtch_accnt,c_cln_mtch_accnt) == 0) && (strcmp(c_tmp_xchng_cd,st_cntopt_pos.c_xchng_cd) == 0) && (strcmp(c_tmp_undrlyng,st_cntopt_pos.c_undrlyng) == 0) && (strcmp(c_tmp_expry_dt,st_cntopt_pos.c_expry_dt)==0) && c_tmp_prd_typ == st_cntopt_pos.c_prd_typ && c_tmp_opt_typ == st_cntopt_pos.c_opt_typ && c_tmp_exrc_typ == st_cntopt_pos.c_exrc_typ && l_tmp_strike_prc == st_cntopt_pos.l_strike_prc )	*** Commented in Ver 2.1 ***/ 

if( (strcmp(c_tmp_mtch_accnt,c_cln_mtch_accnt) == 0) && (strcmp(c_tmp_xchng_cd,st_cntopt_pos.c_xchng_cd) == 0) && (strcmp(c_tmp_undrlyng,st_cntopt_pos.c_undrlyng) == 0) && (strcmp(c_tmp_expry_dt,st_cntopt_pos.c_expry_dt)==0) && c_tmp_opt_typ == st_cntopt_pos.c_opt_typ && c_tmp_exrc_typ == st_cntopt_pos.c_exrc_typ && l_tmp_strike_prc == st_cntopt_pos.l_strike_prc )  /*** Ver 2.1 ** product type check removed ***/ 
    {	
			if( DEBUG_MSG_LVL_3 )
			{
      	fn_userlog( c_ServiceName, " Last Contract is Same so Continuing with next record ");
      }	
			continue;
    }
	
		MEMSET(c_tmp_mtch_accnt);   /*** Added in Ver 2.0 ***/
		MEMSET(c_tmp_xchng_cd);
    MEMSET(c_tmp_undrlyng);
    MEMSET(c_tmp_expry_dt);
 		/**   MEMSET(c_tmp_prd_typ);		*** Commented in VQC ***/
    MEMSET(c_tmp_exrc_typ);
    MEMSET(c_tmp_opt_typ);
    l_tmp_strike_prc = 0;

    strcpy(c_tmp_mtch_accnt,c_cln_mtch_accnt);            /*** Added in Ver 2.0 ***/
    strcpy(c_tmp_xchng_cd,st_cntopt_pos.c_xchng_cd);
    strcpy(c_tmp_undrlyng,st_cntopt_pos.c_undrlyng);
    strcpy(c_tmp_expry_dt,st_cntopt_pos.c_expry_dt);
 		/*** c_tmp_prd_typ = st_cntopt_pos.c_prd_typ;	** Commented in ver 2.1 ***/
		c_tmp_opt_typ = st_cntopt_pos.c_opt_typ;
		c_tmp_exrc_typ=st_cntopt_pos.c_exrc_typ;
		l_tmp_strike_prc = st_cntopt_pos.l_strike_prc;  

    rtrim(c_tmp_mtch_accnt);    /*** Added in Ver 2.0 ***/
    rtrim(c_tmp_xchng_cd);
    rtrim(c_tmp_undrlyng);
    rtrim(c_tmp_expry_dt);

		if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"After if condition");
			fn_userlog(c_ServiceName,"st_cntopt_pos.c_xchng_cd    |%s|",st_cntopt_pos.c_xchng_cd);
			fn_userlog(c_ServiceName,"st_cntopt_pos.c_prd_typ     |%c|",st_cntopt_pos.c_prd_typ);
			fn_userlog(c_ServiceName,"st_cntopt_pos.c_ctgry_indstk|%c|",st_cntopt_pos.c_ctgry_indstk);
			fn_userlog(c_ServiceName,"st_cntopt_pos.c_undrlyng    |%s|",st_cntopt_pos.c_undrlyng);
			fn_userlog(c_ServiceName,"st_cntopt_pos.c_expry_dt		|%s|",st_cntopt_pos.c_expry_dt);
			fn_userlog(c_ServiceName,"st_cntopt_pos.c_exrc_typ		|%c|",st_cntopt_pos.c_exrc_typ);
			fn_userlog(c_ServiceName,"st_cntopt_pos.c_opt_typ			|%c|",st_cntopt_pos.c_opt_typ);
			fn_userlog(c_ServiceName,"st_cntopt_pos.l_strike_prc	|%ld|",st_cntopt_pos.l_strike_prc);
		}

    if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.2 : Debug level Change  */
      fn_userlog( c_ServiceName, "Fetching values from cursor for match account %s", c_cln_mtch_accnt );
    } 

    strcpy ( st_cntrct_q.c_xchng_cd, st_cntopt_pos.c_xchng_cd );
    /*** st_cntrct_q.c_prd_typ = st_cntopt_pos.c_prd_typ;	** Commented in Ver 2.1 ***/
    st_cntrct_q.c_prd_typ = 'O';                            /*** Ver 2.1 ***/
    st_cntrct_q.c_ctgry_indstk = st_cntopt_pos.c_ctgry_indstk;
    strcpy ( st_cntrct_q.c_undrlyng, st_cntopt_pos.c_undrlyng );
    strcpy ( st_cntrct_q.c_expry_dt, st_cntopt_pos.c_expry_dt );
    st_cntrct_q.c_exrc_typ = st_cntopt_pos.c_exrc_typ;
    st_cntrct_q.c_opt_typ = st_cntopt_pos.c_opt_typ;
    st_cntrct_q.l_strike_prc = st_cntopt_pos.l_strike_prc;

		/**** Commented in ver 2.0 ****

    li_rec_cnt = 0;

    EXEC SQL
        SELECT    1
          INTO    :li_rec_cnt
        FROM      dual
        WHERE     EXISTS
        (
        SELECT    1
          FROM    fcm_fo_cntrct_mstr
         WHERE    fcm_xchng_cd       = :st_cntrct_q.c_xchng_cd
           AND    fcm_prdct_typ      = :st_cntrct_q.c_prd_typ
           AND    fcm_undrlyng       = :st_cntrct_q.c_undrlyng
           AND    fcm_expry_dt       = to_date( :st_cntrct_q.c_expry_dt,
                                                            'dd-mon-yyyy')
           AND    fcm_exer_typ       = :st_cntrct_q.c_exrc_typ
           AND    fcm_opt_typ        = :st_cntrct_q.c_opt_typ
           AND    fcm_strk_prc       = :st_cntrct_q.l_strike_prc
        );

    if((SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND))
    {
      *tpcommit(0);*		*1.6*
      fn_errlog( c_ServiceName, "S31135", LIBMSG, c_errmsg.arr  );
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      tpfree ( ( char * ) ptr_fml_Obuf ); 
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if ( li_rec_cnt == 1 )
    {
      i_ip_len = sizeof ( struct vw_contract );
      i_op_len = sizeof ( struct vw_cntrct_qt );

      *** Added for Order Routing ***
      fn_cpy_ddr ( st_cntrct_q.c_rout_crt );


      i_ch_val = fn_call_svc ( c_ServiceName,
                               c_errmsg.arr,
                               &st_cntrct_q,
                               &st_cntrct_qt,
                               "vw_contract",
                               "vw_cntrct_qt",
                               i_ip_len,
                               i_op_len,
                               0,
                               "SFO_GET_QT" );

      if ( i_ch_val != SUCC_BFR )
      {
        *tpcommit(0);*	*1.6*
        fn_errlog( c_ServiceName, "S31140", LIBMSG, c_errmsg.arr  );
        EXEC SQL CLOSE :cont_cursor;
        EXEC SQL FREE :cont_cursor;
       tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

			
    }
    else
    {
      st_cntrct_qt.l_lst_trdd_prc = 0;
    }
    
    li_cmp = 0;
    li_cmp = st_cntrct_qt.l_lst_trdd_prc;

	  ************************* ver 2.0 comment end ****/

		/**** Added in Ver 2.0 ***/

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName, "Expiry Date:[%s]", c_exp_date);
		}

    if(strcmp(c_exp_date, c_min_ftq_exp_dt) >= 0)				/** Added if condition in Ver 2.6 **/
		{
				EXEC SQL
          	SELECT  NVL(FTQ_LST_TRD_PRC,0)
          	INTO    :d_ltp
          	FROM    FTQ_FO_TRD_QT
          	WHERE   FTQ_XCHNG_CD  = :st_cntopt_pos.c_xchng_cd
          	/*** AND     FTQ_PRDCT_TYP = :st_cntopt_pos.c_prd_typ	** Commented in Ver 2.1 ***/
						AND     FTQ_PRDCT_TYP =	'O'								/*** Ver 2.1 ***/
          	AND     FTQ_UNDRLYNG  = :st_cntopt_pos.c_undrlyng
          	AND     FTQ_EXPRY_DT  = :st_cntopt_pos.c_expry_dt
          	AND     FTQ_EXER_TYP  = :st_cntopt_pos.c_exrc_typ
          	AND     FTQ_OPT_TYP   = :st_cntopt_pos.c_opt_typ
          	AND     FTQ_STRK_PRC  = :st_cntopt_pos.l_strike_prc;

      	if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
      	{
        	fn_errlog( c_ServiceName, "S31145", SQLMSG, c_errmsg.arr  );
        	EXEC SQL CLOSE :cont_cursor;
        	EXEC SQL FREE :cont_cursor;
        	/** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating *****/
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     	 	}

    		if( SQLCODE == NO_DATA_FOUND )
    		{
      		d_ltp = 0.0;
    		}

    	st_cntrct_qt.l_lst_trdd_prc = d_ltp;
    	li_cmp = d_ltp;

    	EXEC SQL
        SELECT 1
        INTO  :i_exists
        FROM dual
        WHERE EXISTS
        (
          SELECT 1
          FROM FTD_FO_TRD_DTLS
          WHERE   FTD_CLM_MTCH_ACCNT =:c_cln_mtch_accnt
          AND     FTD_XCHNG_CD       =:st_cntopt_pos.c_xchng_cd
          AND     FTD_UNDRLYNG       =:st_cntopt_pos.c_undrlyng
          /*** AND     FTD_PRDCT_TYP      =:st_cntopt_pos.c_prd_typ		** Commented in Ver 2.1 ***/
					AND     FTD_PRDCT_TYP      in ('I','O')						/*** Ver 2.1 ***/ 
          AND     FTD_EXPRY_DT       =:st_cntopt_pos.c_expry_dt
          AND     FTD_OPT_TYP        =:st_cntopt_pos.c_opt_typ
          AND     FTD_STRK_PRC       =:st_cntopt_pos.l_strike_prc
          AND     FTD_EXER_TYP       =:st_cntopt_pos.c_exrc_typ
        );


			if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
    	{
       	fn_errlog( c_ServiceName, "S31150", SQLMSG, c_errmsg.arr  );
       	EXEC SQL CLOSE :cont_cursor;
       	EXEC SQL FREE :cont_cursor;
       	/** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating *****/
       	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
       	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

    	if( SQLCODE == NO_DATA_FOUND )
    	{
      	i_exists = 0;
    	}
	
	  } /** Ver 2.6 if condition ended **/
		else/** Added else block in Ver 2.6 **/
		{
			 d_ltp = 0.0;
			 i_exists = 0;
			 st_cntrct_qt.l_lst_trdd_prc = d_ltp;
       li_cmp = d_ltp;	
	  }

		if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Position Exists |%d|",i_exists);
		}

    /**** Ver 2.0 ends ***/

		if ( i_exists == 1 )  /*** Condition added in ver 2.0 ***/
    {
    strcpy ( c_xchng_cd, st_cntopt_pos.c_xchng_cd );
    c_prd_typ = st_cntopt_pos.c_prd_typ;
    /** c_ctgry_indstk = st_cntopt_pos.c_ctgry_indstk;		*** Commented in VQC ***/
    strcpy ( c_undrlyng, st_cntopt_pos.c_undrlyng );
    strcpy ( c_expry_dt, st_cntopt_pos.c_expry_dt );
    c_exrc_typ = st_cntopt_pos.c_exrc_typ;
    c_opt_typ = st_cntopt_pos.c_opt_typ;
    l_strike_prc = st_cntopt_pos.l_strike_prc;

    d_sell_val_m = 0;
    d_sell_val_h = 0;
    d_sell_val = 0;
/*  d_opn_sell_val = 0;			*** Commented in VQC ***/

/*  l_tot_buy_qty_m = 0;		*** Commented in VQC ***/
    d_buy_val_m = 0;
/*  l_tot_buy_qty_h = 0;		*** Commented in VQC ***/
    d_buy_val_h = 0;
    d_buy_val = 0;
/*  d_opn_buy_val = 0;			*** Commented in VQC ***/

/*  li_bal_qty = 0;				
  	li_crst_qty = 0;		
	  li_uncrst_qty = 0;			*** Commented in VQC ***/
    d_crst_prft = 0;
    d_uncrst_prft = 0;
    d_total_prft = 0;

    d_ex_val_h = 0.0;
    d_as_val_h = 0.0;
    d_ex_val_m = 0.0;
    d_as_val_m = 0.0;

    /* Ver 1.3 Stats */
    l_charges = 0;
    l_chrgs_tmp = 0;

		l_avg_trd_prc=0 ;/** 1.7 **/
		
		/*** Commented in ver 1.8
    if( st_cntopt_pos.l_opnpstn_qty > 0 )
    {
       st_cntopt_pos.c_opnpstn_flw = 'B';
    }
    else if( st_cntopt_pos.l_opnpstn_qty < 0)
    {
       st_cntopt_pos.c_opnpstn_flw = 'S';
    }
    else
    {
       st_cntopt_pos.c_opnpstn_flw = 'N';
    }
		***/

    EXEC SQL ALLOCATE :chrgs_cur;

    EXEC SQL EXECUTE
      BEGIN
        OPEN :chrgs_cur FOR
          SELECT  NVL( SUM( NVL( ftd_brkg, 0 ) + NVL( ftd_tran_chrg, 0 ) + NVL( ftd_stamp_duty, 0 ) +
                            NVL( ftd_sebi_tt, 0 ) + NVL( ftd_stt, 0 ) + NVL( ftd_src_tx, 0 )+nvl(ftd_brkrg_igst,0 )+ nvl(ftd_brkrg_cgst,0 )+nvl(ftd_brkrg_sgst,0 ) +nvl( ftd_brkrg_ugst,0)), 0)		/** Ver 2.9 **/
          FROM    ftd_fo_trd_dtls
          WHERE   ftd_clm_mtch_accnt  = :c_cln_mtch_accnt
          AND     ftd_xchng_cd        = :c_xchng_cd
          /*** AND     ftd_prdct_typ       = :c_prd_typ		** Commented in Ver 2.1 ***/
          AND     ftd_prdct_typ       in ('O','I')    /*** Added OPTIONPLUS Check in Ver 2.1 ***/
          AND     ftd_undrlyng        = :c_undrlyng
          AND     ftd_expry_dt        = :c_expry_dt
          AND     ftd_exer_typ        = :c_exrc_typ
          AND     ftd_opt_typ         = :c_opt_typ
          AND     ftd_strk_prc        = :l_strike_prc
          UNION ALL
          SELECT  NVL( SUM( NVL( ftd_brkg, 0 ) + NVL( ftd_tran_chrg, 0 ) + NVL( ftd_stamp_duty, 0 ) +
                            NVL( ftd_sebi_tt, 0 ) + NVL( ftd_stt, 0 ) + NVL( ftd_src_tx, 0 )+nvl(ftd_brkrg_igst,0 )+ nvl(ftd_brkrg_cgst,0 )+nvl(ftd_brkrg_sgst,0 ) +nvl( ftd_brkrg_ugst,0)), 0)			/** Ver 2.9 **/
          FROM    ftd_fo_trd_dtls_hstry
          WHERE   ftd_clm_mtch_accnt  = :c_cln_mtch_accnt
          AND     ftd_xchng_cd        = :c_xchng_cd
          /*** AND     ftd_prdct_typ       = :c_prd_typ			** Commented in Ver 2.1 ***/
          AND     ftd_prdct_typ        in ('O','I')    /*** Added OPTIONPLUS Check in Ver 2.1 ***/
          AND     ftd_undrlyng        = :c_undrlyng
          AND     ftd_expry_dt        = :c_expry_dt
          AND     ftd_exer_typ        = :c_exrc_typ
          AND     ftd_opt_typ         = :c_opt_typ
          AND     ftd_strk_prc        = :l_strike_prc
          UNION ALL
          SELECT  NVL( SUM( NVL( fec_brkg_val, 0 ) + NVL( fec_tran_chrg, 0 ) + NVL( fec_stamp_duty, 0 ) +
                            NVL( fec_sebi_tt, 0 ) + NVL( fec_stt, 0 ) + NVL( fec_src_tx, 0 )), 0)
          FROM    fec_fo_exrc_conf
          WHERE   fec_clm_mtch_accnt  = :c_cln_mtch_accnt
          AND     fec_xchng_cd        = :c_xchng_cd
          AND     fec_prdct_typ       = :c_prd_typ
          AND     fec_undrlyng        = :c_undrlyng
          AND     fec_expry_dt        = :c_expry_dt
          AND     fec_exer_typ        = :c_exrc_typ
          AND     fec_opt_typ         = :c_opt_typ
          AND     fec_strk_prc        = :l_strike_prc
          UNION ALL
          SELECT  NVL( SUM( NVL( fec_brkg_val, 0 ) + NVL( fec_tran_chrg, 0 ) + NVL( fec_stamp_duty, 0 ) +
                            NVL( fec_sebi_tt, 0 ) + NVL( fec_stt, 0 ) + NVL( fec_src_tx, 0 )), 0)
          FROM    fec_fo_exrc_conf_hstry
          WHERE   fec_clm_mtch_accnt  = :c_cln_mtch_accnt
          AND     fec_xchng_cd        = :c_xchng_cd
          AND     fec_prdct_typ       = :c_prd_typ
          AND     fec_undrlyng        = :c_undrlyng
          AND     fec_expry_dt        = :c_expry_dt
          AND     fec_exer_typ        = :c_exrc_typ
          AND     fec_opt_typ         = :c_opt_typ
          AND     fec_strk_prc        = :l_strike_prc
          UNION ALL
          SELECT  NVL( SUM( NVL( fab_brkrg_val, 0 ) + NVL( fab_tran_chrg, 0 ) + NVL( fab_stamp_duty, 0 ) +
                            NVL( fab_sebi_tt, 0 ) + NVL( fab_stt, 0 ) + NVL( fab_src_tx, 0 )), 0)
          FROM    fab_fo_asgnmnt_book
          WHERE   fab_clm_mtch_accnt  = :c_cln_mtch_accnt
					AND     fab_undrlyng        = :c_undrlyng			/*1.6*/
          AND     fab_expry_dt        = :c_expry_dt			/*1.6*/
          AND     fab_xchng_cd        = :c_xchng_cd
          AND     fab_prdct_typ       = :c_prd_typ
          /*AND     fab_undrlyng        = :c_undrlyng
          AND     fab_expry_dt        = :c_expry_dt*/
          AND     fab_exer_typ        = :c_exrc_typ
          AND     fab_opt_typ         = :c_opt_typ
          AND     fab_strk_prc        = :l_strike_prc
          UNION ALL
          SELECT  NVL( SUM( NVL( fab_brkrg_val, 0 ) + NVL( fab_tran_chrg, 0 ) + NVL( fab_stamp_duty, 0 ) +
                            NVL( fab_sebi_tt, 0 ) + NVL( fab_stt, 0 ) + NVL( fab_src_tx, 0 )), 0)
          FROM    fab_fo_asgnmnt_book_hstry
          WHERE   fab_clm_mtch_accnt  = :c_cln_mtch_accnt
					AND     fab_undrlyng        = :c_undrlyng			/*1.6*/
					AND     fab_expry_dt        = :c_expry_dt			/*1.6*/
          AND     fab_xchng_cd        = :c_xchng_cd
          AND     fab_prdct_typ       = :c_prd_typ
          AND     fab_exer_typ        = :c_exrc_typ
          AND     fab_opt_typ         = :c_opt_typ
          AND     fab_strk_prc        = :l_strike_prc;
       END;
    END-EXEC;

    if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        fn_userlog( c_ServiceName,"Inside NO_DATA_FOUND" );
      }
      else
      {
        /*tpcommit(0);*/		/*1.6*/
        fn_errlog( c_ServiceName, "S31155", SQLMSG, c_errmsg.arr  );
        EXEC SQL CLOSE :chrgs_cur;
        EXEC SQL FREE :chrgs_cur;
        EXEC SQL CLOSE :cont_cursor;
        EXEC SQL FREE :cont_cursor;
        /** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating *****/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

   
    while( 1 )
    {
      EXEC SQL FETCH :chrgs_cur
               INTO  :l_chrgs_tmp;

      if( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          break;
        }
        else
        {
          /*tpcommit(0);*/		/*1.6*/
          fn_errlog( c_ServiceName, "S31160", SQLMSG, c_errmsg.arr  );
          EXEC SQL CLOSE :chrgs_cur;
          EXEC SQL FREE :chrgs_cur;
          EXEC SQL CLOSE :cont_cursor;
          EXEC SQL FREE :cont_cursor;
          /** tpfree ( ( char * ) ptr_fml_Obuf );   Commented in VQC as memory deallocating without allocating *****/
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }

      l_charges += l_chrgs_tmp;
    }
 
    EXEC SQL CLOSE :chrgs_cur;
    EXEC SQL FREE :chrgs_cur;
    /* Ver 1.3 Ends */

		/*** Ver 1.8 Changes for SPAN Portfolio 	***/

		EXEC SQL
        SELECT 1
        INTO   :i_fop_exists
        FROM   dual
        WHERE  exists
        (
					SELECT 1 
					FROM   fop_fo_options_pstn	
					WHERE  fop_clm_mtch_accnt  = :c_cln_mtch_accnt
          AND    fop_xchng_cd        = :c_xchng_cd
          AND    fop_prdct_typ       = 'O'	 
          AND    fop_undrlyng        = :c_undrlyng
          AND    fop_expry_dt 			 = :c_expry_dt
					AND		 fop_opt_typ				 = :c_opt_typ	
					AND		 fop_strk_prc				 = :l_strike_prc
					AND		 fop_exer_typ				 = :c_exrc_typ
				  AND    fop_opnpstn_qty     <> 0	
				);
	
		if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  	{
			fn_errlog( c_ServiceName, "S31165", SQLMSG, c_errmsg.arr  );
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      /*** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating *****/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
		}

		EXEC SQL
        SELECT 1
        INTO   :i_fcp_exists
        FROM   dual
        WHERE  exists
        (
					SELECT 1
					FROM  FCP_FO_SPN_CNTRCT_PSTN
					WHERE FCP_CLM_MTCH_ACCNT		= :c_cln_mtch_accnt
					AND 	FCP_XCHNG_CD					= :c_xchng_cd
					AND 	FCP_PRDCT_TYP					= 'O'
					AND 	FCP_UNDRLYNG					= :c_undrlyng
					AND 	FCP_EXPRY_DT					= :c_expry_dt
					AND 	FCP_EXER_TYP					= :c_exrc_typ
					AND 	FCP_STRK_PRC					= :l_strike_prc
					AND		FCP_OPT_TYP			 			= :c_opt_typ
					AND		FCP_OPNPSTN_QTY				<> 0
				);

		if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  	{
			fn_errlog( c_ServiceName, "S31170", SQLMSG, c_errmsg.arr  );
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      /** tpfree ( ( char * ) ptr_fml_Obuf);  Commented in VQC as memory deallocating without allocating *****/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

    /***  Ver 2.1 ** Starts ***/

    EXEC SQL
         SELECT 1
         INTO   :i_fod_exists
         FROM   dual
         WHERE exists
         (
           SELECT 1
           FROM FOD_FO_ORDR_DTLS
           WHERE FOD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
           AND   FOD_XCHNG_CD  = :c_xchng_cd
           AND   FOD_PRDCT_TYP = 'I'
           AND   FOD_UNDRLYNG = :c_undrlyng
           AND   FOD_EXPRY_DT = :c_expry_dt
           AND   FOD_EXER_TYP = :c_exrc_typ
           AND   FOD_STRK_PRC  = :l_strike_prc
           AND   FOD_OPT_TYP = :c_opt_typ
           AND   FOD_EXEC_QTY != 0
        );

    if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog( c_ServiceName, "S31175", SQLMSG, c_errmsg.arr  );
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      /** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating *****/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    /***  Ver 2.1 ** Ends ***/
	
		if( i_fop_exists )
		{
			EXEC SQL
				SELECT  FOP_OPNPSTN_QTY,
								FOP_OPNPSTN_VAL
				INTO  	:st_cntopt_pos.l_opnpstn_qty,
            		:st_cntopt_pos.d_org_opn_val
				FROM		fop_fo_options_pstn
				WHERE		FOP_CLM_MTCH_ACCNT	= :c_cln_mtch_accnt
				AND			FOP_XCHNG_CD				= :c_xchng_cd
				AND			FOP_PRDCT_TYP				= 'O'
				AND			FOP_UNDRLYNG				= :c_undrlyng	
				AND			FOP_EXPRY_DT				= :c_expry_dt
				AND			FOP_STRK_PRC				= :l_strike_prc
				AND			FOP_EXER_TYP				= :c_exrc_typ
				AND			FOP_OPT_TYP					= :c_opt_typ;
			
			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
      {
         fn_errlog( c_ServiceName, "S31180", SQLMSG, c_errmsg.arr  );
         EXEC SQL CLOSE :cont_cursor;
         EXEC SQL FREE :cont_cursor;
         /*** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating *****/
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
		}

		if ( i_fcp_exists )
		{
		 EXEC SQL
      SELECT FCP_OPNPSTN_QTY,
            FCP_OPNPSTN_VAL
      INTO  :st_cntopt_pos.l_opnpstn_qty,
            :st_cntopt_pos.d_org_opn_val
      FROM  FCP_FO_SPN_CNTRCT_PSTN
      WHERE FCP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
      AND   FCP_XCHNG_CD       = :c_xchng_cd
      AND   FCP_EXPRY_DT       = :c_expry_dt
      AND   FCP_PRDCT_TYP      = 'O'
      AND   FCP_UNDRLYNG       = :c_undrlyng
      AND   FCP_EXER_TYP       = :c_exrc_typ
			AND		FCP_OPT_TYP				 = :c_opt_typ	
			AND		FCP_STRK_PRC			 = :l_strike_prc;

      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
      {
         fn_errlog( c_ServiceName, "S31185", SQLMSG, c_errmsg.arr  );
         EXEC SQL CLOSE :cont_cursor;
         EXEC SQL FREE :cont_cursor;
         /** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating *****/
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
		 }

    /***  Ver 2.1 ** Starts ***/

    l_optplus_qty = 0;

    if(i_fod_exists)
    {
      EXEC SQL
         SELECT nvl(sum(decode(FOD_ORDR_FLW,'B',FOD_EXEC_QTY,FOD_EXEC_QTY * -1)),0)
         INTO   :l_optplus_qty
         FROM   FOD_FO_ORDR_DTLS
         WHERE FOD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
         AND   FOD_XCHNG_CD  = :c_xchng_cd
         AND   FOD_PRDCT_TYP = 'I'
         AND   FOD_UNDRLYNG = :c_undrlyng
         AND   FOD_EXPRY_DT = :c_expry_dt
         AND   FOD_EXER_TYP = :c_exrc_typ
         AND   FOD_STRK_PRC  = :l_strike_prc
         AND   FOD_OPT_TYP = :c_opt_typ
         AND   FOD_EXEC_QTY != 0;

      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
      {
         fn_errlog( c_ServiceName, "S31190", SQLMSG, c_errmsg.arr  );
         EXEC SQL CLOSE :cont_cursor;
         EXEC SQL FREE :cont_cursor;
         /** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating *****/
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if(SQLCODE == NO_DATA_FOUND)
      {
        l_optplus_qty = 0;

      }

    }

  	d_op_opn_val = 0.0;

    if(l_optplus_qty > 0)
    {
      i_ch_val   = fn_optplusbuy_opnpstn(c_ServiceName,
                                      c_cln_mtch_accnt,
                                      c_xchng_cd,
                                      c_undrlyng,
                                      c_expry_dt,
                                      c_exrc_typ,
                                      l_strike_prc,
                                      c_opt_typ,
                                      &d_op_opn_val);

      if ( i_ch_val == -1 )
      {
        fn_errlog( c_ServiceName, "S31195", LIBMSG, c_errmsg.arr  );
        EXEC SQL CLOSE :cont_cursor;
        EXEC SQL FREE :cont_cursor;
        /*** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
    else if(l_optplus_qty < 0)
    {
      i_ch_val  = fn_optplussell_opnpstn(c_ServiceName,
                                      c_cln_mtch_accnt,
                                      c_xchng_cd,
                                      c_undrlyng,
                                      c_expry_dt,
                                      c_exrc_typ,
                                      l_strike_prc,
                                      c_opt_typ,
                                      &d_op_opn_val);



      if ( i_ch_val  == -1 )
      {
        fn_errlog( c_ServiceName, "S31200", LIBMSG, c_errmsg.arr  );
        EXEC SQL CLOSE :cont_cursor;
        EXEC SQL FREE :cont_cursor;
        /** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating *****/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
    else
    {
      d_op_opn_val = 0.0;
    }

    st_cntopt_pos.l_opnpstn_qty = st_cntopt_pos.l_opnpstn_qty + l_optplus_qty;
    st_cntopt_pos.d_org_opn_val = st_cntopt_pos.d_org_opn_val + d_op_opn_val;

    /***  Ver 2.1 ** Ends ***/

		/* Note: Ver 2.1 *** select open qty from fod into temp variable .IF(temp > 0 ) call buy fun else sell you will get open val. add  temp qty to existing qty st_cntopt_pos.l_opnpstn_qty = st_cntopt_pos.l_opnpstn_qty +  temp; 
st_cntopt_pos.d_org_opn_val = temp val + st_cntopt_pos.d_org_opn_val; */
		
		if( st_cntopt_pos.l_opnpstn_qty > 0 )
    {
       st_cntopt_pos.c_opnpstn_flw = 'B';
    }
    else if( st_cntopt_pos.l_opnpstn_qty < 0)
    {
       st_cntopt_pos.c_opnpstn_flw = 'S';
    }
    else
    {
       st_cntopt_pos.c_opnpstn_flw = 'N';
    }

		/** END of Ver 1.8 **/

    EXEC SQL
      SELECT  NVL ( SUM ( ( ftd_exctd_qty * ftd_exctd_rt ) - 
                          NVL ( ftd_frs_brkg,0 )           - 
                           NVL ( ftd_cvr_brkg,0 )             ), 0 )
      INTO    :d_buy_val_m
        FROM    ftd_fo_trd_dtls
        WHERE   ftd_clm_mtch_accnt  = :c_cln_mtch_accnt
        AND     ftd_xchng_cd        = :c_xchng_cd
        /*** AND     ftd_prdct_typ       = :c_prd_typ 	** commented in Ver 2.1 ***/
				AND     ftd_prdct_typ     IN  ('I','O')    /*** Ver 2.1 ***/
        AND     ftd_undrlyng        = :c_undrlyng
        AND     ftd_expry_dt        = :c_expry_dt
        AND     ftd_exer_typ        = :c_exrc_typ
        AND     ftd_opt_typ         = :c_opt_typ
        AND     ftd_strk_prc        = :l_strike_prc
        AND     ftd_trd_flw         = 'B';
    if ( SQLCODE != 0 )
    {
      /*tpcommit(0);*/				/*1.6*/
      fn_errlog( c_ServiceName, "S31205", SQLMSG, c_errmsg.arr  );
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      /** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating *****/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    EXEC SQL
      SELECT  NVL ( SUM ( ( ftd_exctd_qty * ftd_exctd_rt ) - 
                          NVL ( ftd_frs_brkg,0 )           - 
                           NVL ( ftd_cvr_brkg,0 )             ), 0 )
      INTO    :d_buy_val_h
      FROM    ftd_fo_trd_dtls_hstry
      WHERE   ftd_clm_mtch_accnt  = :c_cln_mtch_accnt
      AND     ftd_xchng_cd        = :c_xchng_cd
      /*** AND     ftd_prdct_typ       = :c_prd_typ		** commented in Ver 2.1 ***/
      AND     ftd_prdct_typ       IN  ('I','O')    /*** Ver 2.1 ***/
      AND     ftd_undrlyng        = :c_undrlyng
      AND     ftd_expry_dt        = :c_expry_dt
      AND     ftd_exer_typ        = :c_exrc_typ
      AND     ftd_opt_typ         = :c_opt_typ
      AND     ftd_strk_prc        = :l_strike_prc
      AND     ftd_trd_flw         = 'B';
    if ( SQLCODE != 0 )
    {
      /*tpcommit(0);*/			/*1.6*/
      fn_errlog( c_ServiceName, "S31210", SQLMSG, c_errmsg.arr  );
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      /** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating *****/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    d_buy_val = d_buy_val_m + d_buy_val_h;

    EXEC SQL
      SELECT  NVL ( SUM ( ( ftd_exctd_qty * ftd_exctd_rt ) - 
                          NVL ( ftd_frs_brkg,0 )           - 
                          NVL ( ftd_cvr_brkg,0 )             ), 0 )
      INTO    :d_sell_val_m
      FROM    ftd_fo_trd_dtls
      WHERE   ftd_clm_mtch_accnt  = :c_cln_mtch_accnt
      AND     ftd_xchng_cd        = :c_xchng_cd
      /*** AND     ftd_prdct_typ       = :c_prd_typ		** commented in Ver 2.1 ***/
			AND     ftd_prdct_typ   IN  ('I','O')    /*** Ver 2.1 ***/
      AND     ftd_undrlyng        = :c_undrlyng
      AND     ftd_expry_dt        = :c_expry_dt
      AND     ftd_exer_typ        = :c_exrc_typ
      AND     ftd_opt_typ         = :c_opt_typ
      AND     ftd_strk_prc        = :l_strike_prc
      AND     ftd_trd_flw         = 'S';
    if ( SQLCODE != 0 )
    {
      /*tpcommit(0);*/			/*1.6*/
      fn_errlog( c_ServiceName, "S31215", SQLMSG, c_errmsg.arr  );
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      /** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating *****/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    EXEC SQL
      SELECT  NVL ( SUM ( ( ftd_exctd_qty * ftd_exctd_rt ) - 
                          NVL ( ftd_frs_brkg,0 )           - 
                          NVL ( ftd_cvr_brkg,0 )             ), 0 )
      INTO    :d_sell_val_h
      FROM    ftd_fo_trd_dtls_hstry
      WHERE   ftd_clm_mtch_accnt  = :c_cln_mtch_accnt
      AND     ftd_xchng_cd        = :c_xchng_cd
      /*** AND     ftd_prdct_typ       = :c_prd_typ		** commented in Ver 2.1 ***/
      AND     ftd_prdct_typ      IN  ('I','O')    /*** Ver 2.1 ***/
      AND     ftd_undrlyng        = :c_undrlyng
      AND     ftd_expry_dt        = :c_expry_dt
      AND     ftd_exer_typ        = :c_exrc_typ
      AND     ftd_opt_typ         = :c_opt_typ
      AND     ftd_strk_prc        = :l_strike_prc
      AND     ftd_trd_flw         = 'S';
    if ( SQLCODE != 0 )
    {
      /*tpcommit(0);*/			/*1.6*/
      fn_errlog( c_ServiceName, "S31220", SQLMSG, c_errmsg.arr  );
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      /** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating *****/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    d_sell_val = d_sell_val_m + d_sell_val_h;

		if( DEBUG_MSG_LVL_3 ) /*** added debug in Ver 3.0 ***/
		{ 
			fn_userlog(c_ServiceName,"Sandeep Product Type Is :%c:",c_prd_typ);
		}

   	if ( c_opt_typ == 'P' )
   	{
     	EXEC SQL
       	SELECT NVL ( SUM (fec_exrc_qty * (fec_strk_prc - 
                                                 fec_curr_mkt_prc ) ), 0 )
       	INTO :d_ex_val_m
       	FROM fec_fo_exrc_conf
       	WHERE fec_clm_mtch_accnt  = :c_cln_mtch_accnt
       	AND   fec_xchng_cd        = :c_xchng_cd
       	AND   fec_prdct_typ       = :c_prd_typ
       	AND   fec_undrlyng        = :c_undrlyng
     	 	AND   fec_expry_dt        = :c_expry_dt
      	AND   fec_exer_typ        = :c_exrc_typ
       	AND   fec_opt_typ         = :c_opt_typ
     	 	AND   fec_strk_prc        = :l_strike_prc;
   	}
   	else  
   	{
     	EXEC SQL
       	SELECT NVL ( SUM (fec_exrc_qty * (fec_curr_mkt_prc - 
        	                                         fec_strk_prc ) ), 0 )
       	INTO :d_ex_val_m
       	FROM fec_fo_exrc_conf
       	WHERE fec_clm_mtch_accnt  = :c_cln_mtch_accnt
       	AND   fec_xchng_cd        = :c_xchng_cd
       	AND   fec_prdct_typ       = :c_prd_typ
       	AND   fec_undrlyng        = :c_undrlyng
       	AND   fec_expry_dt        = :c_expry_dt
       	AND   fec_exer_typ        = :c_exrc_typ
       	AND   fec_opt_typ         = :c_opt_typ
       AND   fec_strk_prc        = :l_strike_prc;
   	}

    if ( SQLCODE != 0 )
    {
      /*tpcommit(0);*/			/*1.6*/
      fn_errlog( c_ServiceName, "S31225", SQLMSG, c_errmsg.arr  );
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      /** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating *****/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }


   	if ( c_opt_typ == 'P' )
   	{
     	EXEC SQL
       	SELECT NVL ( SUM (fec_exrc_qty * (fec_strk_prc - 
                                                  fec_curr_mkt_prc ) ), 0 )
       	INTO :d_ex_val_h
       	FROM fec_fo_exrc_conf_hstry
       	WHERE fec_clm_mtch_accnt  = :c_cln_mtch_accnt
       	AND   fec_xchng_cd        = :c_xchng_cd
       	AND   fec_prdct_typ       = :c_prd_typ
       	AND   fec_undrlyng        = :c_undrlyng
     	 	AND   fec_expry_dt        = :c_expry_dt
       	AND   fec_exer_typ        = :c_exrc_typ
       	AND   fec_opt_typ         = :c_opt_typ
       	AND   fec_strk_prc        = :l_strike_prc;
   	}
   	else
   	{
     	EXEC SQL
       	SELECT NVL ( SUM (fec_exrc_qty * (fec_curr_mkt_prc - 
                                                 fec_strk_prc ) ), 0 )
       	INTO :d_ex_val_h
       	FROM fec_fo_exrc_conf_hstry
       	WHERE fec_clm_mtch_accnt  = :c_cln_mtch_accnt
       	AND   fec_xchng_cd        = :c_xchng_cd
       	AND   fec_prdct_typ       = :c_prd_typ
       	AND   fec_undrlyng        = :c_undrlyng
       	AND   fec_expry_dt        = :c_expry_dt
     	  AND   fec_exer_typ        = :c_exrc_typ
       	AND   fec_opt_typ         = :c_opt_typ
       	AND   fec_strk_prc        = :l_strike_prc;
   	}

   	if ( SQLCODE != 0 )
    {
     	/*tpcommit(0);*/		/*1.6*/
     	fn_errlog( c_ServiceName, "S31230", SQLMSG, c_errmsg.arr  );
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      /** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating *****/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    d_ex_val = d_ex_val_m + d_ex_val_h;

		if ( c_opt_typ == 'P' )
   	{
     	EXEC SQL
       	SELECT NVL ( SUM (fab_asgnd_qty * (fab_strk_prc - 
                                                fab_sttlmnt_prc ) ), 0 )
      		INTO :d_as_val_m
     		FROM fab_fo_asgnmnt_book
     		WHERE fab_clm_mtch_accnt  = :c_cln_mtch_accnt
				AND   fab_undrlyng        = :c_undrlyng		/*1.6 */
     		AND   fab_expry_dt        = :c_expry_dt		/*1.6 */
     		AND   fab_xchng_cd        = :c_xchng_cd
     		AND   fab_prdct_typ       = :c_prd_typ
     		/*AND   fab_undrlyng        = :c_undrlyng
     		AND   fab_expry_dt        = :c_expry_dt*/
     		AND   fab_exer_typ        = :c_exrc_typ
     		AND   fab_opt_typ         = :c_opt_typ
     		AND   fab_strk_prc        = :l_strike_prc;
   	}
   	else
   	{
     	EXEC SQL
       	SELECT NVL ( SUM (fab_asgnd_qty * (fab_sttlmnt_prc - 
                                               fab_strk_prc ) ), 0 )
     		INTO :d_as_val_m
     		FROM fab_fo_asgnmnt_book
     		WHERE fab_clm_mtch_accnt  = :c_cln_mtch_accnt
				AND   fab_undrlyng        = :c_undrlyng				/*1.6*/
     		AND   fab_expry_dt        = :c_expry_dt				/*1.6*/
     		AND   fab_xchng_cd        = :c_xchng_cd
     		AND   fab_prdct_typ       = :c_prd_typ
     		/*AND   fab_undrlyng        = :c_undrlyng
     		AND   fab_expry_dt        = :c_expry_dt */
     		AND   fab_exer_typ        = :c_exrc_typ
     		AND   fab_opt_typ         = :c_opt_typ
     		AND   fab_strk_prc        = :l_strike_prc;
   	}

    if ( SQLCODE != 0 )
    {
      /*tpcommit(0);*/			/*1.6*/
      fn_errlog( c_ServiceName, "S31235", SQLMSG, c_errmsg.arr  );
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      /** tpfree ( ( char * ) ptr_fml_Obuf );   Commented in VQC as memory deallocating without allocating *****/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

   	if ( c_opt_typ == 'P' )
   	{
     	EXEC SQL
       	SELECT NVL ( SUM (fab_asgnd_qty * (fab_strk_prc - 
                                               fab_sttlmnt_prc ) ), 0 )
     		INTO :d_as_val_h
     		FROM fab_fo_asgnmnt_book_hstry
     		WHERE fab_clm_mtch_accnt  = :c_cln_mtch_accnt
     		AND   fab_xchng_cd        = :c_xchng_cd
     		AND   fab_prdct_typ       = :c_prd_typ
     		AND   fab_undrlyng        = :c_undrlyng
     		AND   fab_expry_dt        = :c_expry_dt
     		AND   fab_exer_typ        = :c_exrc_typ
     		AND   fab_opt_typ         = :c_opt_typ
     		AND   fab_strk_prc        = :l_strike_prc;
   	}
   	else
   	{
     	EXEC SQL
       	SELECT NVL ( SUM (fab_asgnd_qty * (fab_sttlmnt_prc - 
                                                fab_strk_prc ) ), 0 )
     		INTO :d_as_val_h
     		FROM fab_fo_asgnmnt_book_hstry
     		WHERE fab_clm_mtch_accnt  = :c_cln_mtch_accnt
     		AND   fab_xchng_cd        = :c_xchng_cd
     		AND   fab_prdct_typ       = :c_prd_typ
     		AND   fab_undrlyng        = :c_undrlyng
     		AND   fab_expry_dt        = :c_expry_dt
     		AND   fab_exer_typ        = :c_exrc_typ
     		AND   fab_opt_typ         = :c_opt_typ
     		AND   fab_strk_prc        = :l_strike_prc;
   	}

    if ( SQLCODE != 0 )
    {
      /*tpcommit(0);*/			/*1.6*/
      fn_errlog( c_ServiceName, "S31240", SQLMSG, c_errmsg.arr  );
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      /** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating *****/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    d_as_val = d_as_val_m + d_as_val_h;

    d_crst_prft = d_sell_val - d_buy_val + d_ex_val - d_as_val;

    /***** Changed on 30-May-2002 ******/
/*****************************************************************
    d_uncrst_prft = st_cntopt_pos.l_opnpstn_qty * li_cmp * -1.0 ;
*****************************************************************/
    d_uncrst_prft = st_cntopt_pos.l_opnpstn_qty * li_cmp ;

    d_total_prft = d_crst_prft + d_uncrst_prft;

if( DEBUG_MSG_LVL_3 ) { /** Ver 1.8 in Debug**/
		fn_userlog(c_ServiceName,"sss======= d_as_val :%lf:",d_as_val);		
		fn_userlog(c_ServiceName,"sss======= d_ex_val :%lf:",d_ex_val);		
		fn_userlog(c_ServiceName,"sss======= d_buy_val :%lf:",d_buy_val);		
		fn_userlog(c_ServiceName,"sss======= d_sell_val:%lf:",d_sell_val);		
		fn_userlog(c_ServiceName,"sss====== d_uncrst_prft :%lf:",d_uncrst_prft);		
	}


/******************************************************************************/

		/** Ver 1.7 Avg price is only for open position **/ 


		EXEC SQL
     SELECT decode(:st_cntopt_pos.l_opnpstn_qty, 0, 0,round(((:st_cntopt_pos.d_org_opn_val/:st_cntopt_pos.l_opnpstn_qty)),2) )
      INTO : d_base_prc
      FROM  dual;


      l_avg_trd_prc = (long)d_base_prc;

if( DEBUG_MSG_LVL_3 ) { /** Ver 1.8 in Debug**/
      fn_userlog(c_ServiceName,"l_avg_trd_prc Is :%ld:", l_avg_trd_prc);
      fn_userlog(c_ServiceName,"d_base_prc Is :%lf:", d_base_prc);
		}	

		/****************** Ver 1.7 Ends *******************/ 

		
		/**** Following query commented in ver 1.7 ****/
    /* 1.4 Changes by Venture M for adding average price to Portfolio display*/

		/*********************************************


		if( st_cntopt_pos.c_opnpstn_flw != 'N' )
		{

    EXEC SQL
      SELECT SUM(SUM_TOTAL_VAL)/ SUM(SUM_TOTAL_QTY)
      INTO :l_avg_trd_prc
      FROM
      (
      SELECT 
        FTD_CLM_MTCH_ACCNT ,
        SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT ) SUM_TOTAL_VAL , 
        SUM (FTD_EXCTD_QTY ) SUM_TOTAL_QTY
      FROM  ftd_fo_trd_dtls
      where 
        FTD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
				AND FTD_XCHNG_CD = :st_cntopt_pos.c_xchng_cd				*1.6*
        AND FTD_PRDCT_TYP = :st_cntopt_pos.c_prd_typ
        AND FTD_UNDRLYNG = :st_cntopt_pos.c_undrlyng
        AND FTD_EXPRY_DT = :st_cntopt_pos.c_expry_dt
        AND FTD_EXER_TYP = :st_cntopt_pos.c_exrc_typ
        AND FTD_OPT_TYP  = :st_cntopt_pos.c_opt_typ
        AND FTD_STRK_PRC = :st_cntopt_pos.l_strike_prc
        *AND FTD_XCHNG_CD = :st_cntopt_pos.c_xchng_cd*
        GROUP BY FTD_CLM_MTCH_ACCNT
      UNION 
      SELECT 
        FTD_CLM_MTCH_ACCNT ,
        SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT ) SUM_TOTAL_VAL , 
        SUM (FTD_EXCTD_QTY ) SUM_TOTAL_QTY
      FROM  FTD_FO_TRD_DTLS_HSTRY
      WHERE 
        FTD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
        AND FTD_XCHNG_CD = :st_cntopt_pos.c_xchng_cd				*1.6*
        AND FTD_PRDCT_TYP = :st_cntopt_pos.c_prd_typ
        AND FTD_UNDRLYNG = :st_cntopt_pos.c_undrlyng
        AND FTD_EXPRY_DT = :st_cntopt_pos.c_expry_dt
        AND FTD_EXER_TYP = :st_cntopt_pos.c_exrc_typ
        AND FTD_OPT_TYP  = :st_cntopt_pos.c_opt_typ
        AND FTD_STRK_PRC = :st_cntopt_pos.l_strike_prc
        *AND FTD_XCHNG_CD = :st_cntopt_pos.c_xchng_cd*
        GROUP BY FTD_CLM_MTCH_ACCNT
      ) TEMP
      GROUP BY FTD_CLM_MTCH_ACCNT;

		}

    if ( SQLCODE != 0 )
    {
      *tpcommit(0);*		*1.6*
      fn_errlog( c_ServiceName, "S31245", SQLMSG, c_errmsg.arr  );
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      tpfree ( ( char * ) ptr_fml_Obuf ); 
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		*******************************/
		
    
/******************************************************************************/

if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.2 : Debug level Change  */
fn_userlog(c_ServiceName,"d_sell_val :%lf",d_sell_val);
fn_userlog(c_ServiceName,"d_buy_val :%lf",d_buy_val);
fn_userlog(c_ServiceName,"d_ex_val :%lf",d_ex_val);
fn_userlog(c_ServiceName,"d_as_val :%lf",d_as_val);
fn_userlog(c_ServiceName,"d_crst_prft :%lf",d_crst_prft);
fn_userlog(c_ServiceName,"l_opnpstn_qty :%ld",st_cntopt_pos.l_opnpstn_qty);
fn_userlog(c_ServiceName,"li_cmp :%ld",li_cmp);
fn_userlog(c_ServiceName,"d_uncrst_prft :%lf",d_uncrst_prft);
fn_userlog(c_ServiceName,"st_cntopt_pos.c_opnpstn_flw :%c",st_cntopt_pos.c_opnpstn_flw);    /* Ver 1.3 */
fn_userlog(c_ServiceName,"l_charges :%ld",l_charges);              /* Ver 1.3 */
fn_userlog(c_ServiceName,"l_avg_trd_prc :%ld",l_avg_trd_prc);      /* Ver 1.4 */
}

    rec_cnt = 1;
    ret_val =0;
		/*** Commented in VQC *******
    if( DEBUG_MSG_LVL_3 ) {          *  Ver 1.2 : Debug level Change  *     * Ver 1.2 : i_clnts changed to li_clnts to solve portability issue *
		li_clnts = sizeof(st_cntrct_q.c_xchng_cd)+sizeof(st_cntrct_q.c_prd_typ)+sizeof(st_cntrct_q.c_undrlyng);
    li_clnts = li_clnts + sizeof(st_cntrct_q.c_expry_dt)+sizeof(st_cntrct_q.c_exrc_typ)+sizeof(st_cntrct_q.c_opt_typ);
    li_clnts = li_clnts + sizeof(st_cntrct_q.l_strike_prc)+sizeof(st_cntrct_q.c_ctgry_indstk);
    li_clnts = li_clnts + sizeof(st_cntopt_pos.l_opnpstn_qty)+sizeof(st_cntopt_pos.d_org_opn_val);
    li_clnts = li_clnts + sizeof(st_cntrct_qt.l_lst_trdd_prc)+sizeof(d_crst_prft)+sizeof(d_uncrst_prft);
    li_clnts = li_clnts + sizeof(d_total_prft)+sizeof(c_cln_mtch_accnt)+sizeof(rec_cnt)+sizeof(ret_val);
    li_clnts = li_clnts + sizeof(st_cntopt_pos.c_opnpstn_flw);      * Ver 1.3 *
    li_clnts = li_clnts + sizeof(l_charges);                        * Ver 1.3 *

    fn_userlog( c_ServiceName, "The size of structure is %ld", li_clnts);			
    }	 **** Commented in VQC ****/


if( DEBUG_MSG_LVL_3 ) { /** Ver 1.8 in Debug**/
		fn_userlog(c_ServiceName,"--------------------------------------------------------------");
    fn_userlog(c_ServiceName,"2 st_cntopt_pos.d_org_opn_val Is :%lf:",st_cntopt_pos.d_org_opn_val);
    fn_userlog(c_ServiceName,"2 st_cntopt_pos.l_opnpstn_qty Is :%ld:",st_cntopt_pos.l_opnpstn_qty);
		}
    /** Commented in  Ver 3.1 **
    *** ver 3.0 Add Starts ***
    if(strcmp(c_ven_nm,"SENSIBULL") == 0 )
		{
			if (st_cntopt_pos.l_opnpstn_qty != 0)
			{
				i_ch_val =  fn_pack_vartofml ( c_ServiceName, c_errmsg.arr,
                                   &ptr_fml_Obuf,
                                   20,      
                       FFO_XCHNG_CD,      st_cntrct_q.c_xchng_cd,
                       FFO_PRDCT_TYP,     (char *)&st_cntrct_q.c_prd_typ,
                       FFO_UNDRLYNG,      st_cntrct_q.c_undrlyng,
                       FFO_EXPRY_DT,      st_cntrct_q.c_expry_dt,
                       FFO_EXER_TYP,      (char *)&st_cntrct_q.c_exrc_typ,
                       FFO_OPT_TYP,      (char *)&st_cntrct_q.c_opt_typ,
                       FFO_STRK_PRC,      (char *)&st_cntrct_q.l_strike_prc,
                       FFO_CTGRY_INDSTK,  (char *)&st_cntrct_q.c_ctgry_indstk,
                       FFO_OPNPSTN_QTY,   (char *)&st_cntopt_pos.l_opnpstn_qty,
                       FFO_OPNPSTN_VAL,   (char *)&st_cntopt_pos.d_org_opn_val,
                       FFO_CUR_MKT_PRC,   (char *)&st_cntrct_qt.l_lst_trdd_prc,
                       FFO_RLZD_PL,       (char *)&d_crst_prft,
                       FFO_UNRLZD_PL,     (char *)&d_uncrst_prft,
                       FFO_TOTAL_PL,      (char *)&d_total_prft,
                       FFO_EBA_MTCH_ACT_NO, (char *)c_cln_mtch_accnt,
                       FFO_TRD_FLW,       (char *)&st_cntopt_pos.c_opnpstn_flw,      
                       FFO_BRKRG_VL,      (char *)&l_charges,                        
                       FFO_AVRG_TRD_PRC,  (char *)&l_avg_trd_prc,                    
                       FFO_SUB_BUF_CNT,   (char *)&rec_cnt,
                       FFO_ACTN_ID,       (char *)&ret_val);
			}
		}
		else
		{
		*** ver 3.0 Add Ends ***
    *** Comment End Ver 3.1 **/
    i_ch_val =  fn_pack_vartofml ( c_ServiceName, c_errmsg.arr,
                                   &ptr_fml_Obuf,
                                   20,			/** 1.6 parametres changed from 18 to 20 **/
                       FFO_XCHNG_CD,      st_cntrct_q.c_xchng_cd,
                       FFO_PRDCT_TYP,     (char *)&st_cntrct_q.c_prd_typ,
                       FFO_UNDRLYNG,      st_cntrct_q.c_undrlyng,
                       FFO_EXPRY_DT,      st_cntrct_q.c_expry_dt,
                       FFO_EXER_TYP,      (char *)&st_cntrct_q.c_exrc_typ,
                       FFO_OPT_TYP,      (char *)&st_cntrct_q.c_opt_typ,
                       FFO_STRK_PRC,      (char *)&st_cntrct_q.l_strike_prc,
                       FFO_CTGRY_INDSTK,  (char *)&st_cntrct_q.c_ctgry_indstk,
                       FFO_OPNPSTN_QTY,   (char *)&st_cntopt_pos.l_opnpstn_qty,
                       FFO_OPNPSTN_VAL,   (char *)&st_cntopt_pos.d_org_opn_val,
                       FFO_CUR_MKT_PRC,   (char *)&st_cntrct_qt.l_lst_trdd_prc,
                       FFO_RLZD_PL,       (char *)&d_crst_prft,
                       FFO_UNRLZD_PL,     (char *)&d_uncrst_prft,
                       FFO_TOTAL_PL,      (char *)&d_total_prft, 
                       FFO_EBA_MTCH_ACT_NO, (char *)c_cln_mtch_accnt,
                       FFO_TRD_FLW,       (char *)&st_cntopt_pos.c_opnpstn_flw,      /* Ver 1.3 */
                       FFO_BRKRG_VL,      (char *)&l_charges,                        /* Ver 1.3 */
                       FFO_AVRG_TRD_PRC,  (char *)&l_avg_trd_prc,                    /* Ver 1.4 */                       
                       FFO_SUB_BUF_CNT,   (char *)&rec_cnt,
                       FFO_ACTN_ID,       (char *)&ret_val);
    /*		}			*** Ver 3.0 *** Commented in ver 3.1 **/
    if ( i_ch_val == -1 )
    {
      /*tpcommit(0);*/		/*1.6*/
      fn_errlog( c_ServiceName, "S31250", LIBMSG, c_errmsg.arr  );
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      /** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating *****/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  } /*** END of if loop ***/
  else  /*** Added in ver 2.0 ***/
  {

		if(DEBUG_MSG_LVL_3)
    {
        fn_userlog( c_ServiceName," Inside already calculated portfolio");
		}

		 st_cntopt_pos.c_prd_typ = 'O';      /*** Ver 2.1 ***/
		l_opnpstn_qty = 0;
    d_org_opn_val = 0.0;
    c_opnpstn_flw = '\0';
    d_crst_prft   = 0.0;
    l_charges     = 0;
    l_avg_pr 			= 0;
    d_total_prft  = 0.0;
    i_exists_main = 0;

		EXEC SQL
      SELECT 1
        INTO  :i_exists_main
        FROM dual
        WHERE EXISTS
      (
			SELECT 1
      FROM  PCP_PRTFL_CNTRCT_PRDCT
      WHERE PCP_CLM_MTCH_ACCNT =:c_cln_mtch_accnt
      AND   PCP_XCHNG_CD       =:st_cntopt_pos.c_xchng_cd
      AND   PCP_PRDCT_TYP      in ('O','I')
      AND   PCP_UNDRLYNG       =:st_cntopt_pos.c_undrlyng
      AND   PCP_EXPRY_DT       =:st_cntopt_pos.c_expry_dt
      AND   PCP_EXER_TYP       =:st_cntopt_pos.c_exrc_typ
      AND   PCP_STRK_PRC       =:st_cntopt_pos.l_strike_prc
      AND   PCP_OPT_TYP        =:st_cntopt_pos.c_opt_typ
			);

    if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog( c_ServiceName, "S31255", SQLMSG, c_errmsg.arr  );
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      /** tpfree ( ( char * ) ptr_fml_Obuf ); Commented in VQC as memory deallocating without allocating *****/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if (i_exists_main == 1)
    {
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName, "Inside PCP_PRTFL_CNTRCT_PRDCT main table");
			}
      EXEC SQL
          SELECT nvl(sum(PCP_OPNPSTN_QTY),0),
                 nvl(sum(PCP_OPNPSTN_VAL),0),
                 nvl(sum(PCP_RLLZD_PNL),0),
                 nvl(sum(PCP_BRKG_VAL),0),
                 nvl(sum(PCP_AVG_TRD_PRC),0),
                 nvl(sum(PCP_TOTAL_PNL),0)
          INTO  :l_opnpstn_qty,
                :d_org_opn_val,
                :d_crst_prft,
                :l_charges,
                :l_avg_pr,
                :d_total_prft
          FROM  PCP_PRTFL_CNTRCT_PRDCT
        WHERE PCP_CLM_MTCH_ACCNT =:c_cln_mtch_accnt
        AND   PCP_XCHNG_CD       =:st_cntopt_pos.c_xchng_cd
        AND   PCP_PRDCT_TYP      in ('O','I')
        AND   PCP_UNDRLYNG       =:st_cntopt_pos.c_undrlyng
        AND   PCP_EXPRY_DT       =:st_cntopt_pos.c_expry_dt
        AND   PCP_EXER_TYP       =:st_cntopt_pos.c_exrc_typ
        AND   PCP_STRK_PRC       =:st_cntopt_pos.l_strike_prc
        AND   PCP_OPT_TYP        =:st_cntopt_pos.c_opt_typ;

        if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
        {
          fn_errlog( c_ServiceName, "S31260", SQLMSG, c_errmsg.arr  );
          EXEC SQL CLOSE :cont_cursor;
          EXEC SQL FREE :cont_cursor;
          /** tpfree ( ( char * ) ptr_fml_Obuf ); Commented in VQC as memory deallocating without allocating *****/
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog( c_ServiceName,"Inside main");
      }
    }
    else
    {
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName, "Inside PCP_PRTFL_CNTRCT_PRDCT histrory table");
			}

      EXEC SQL
          SELECT nvl(sum(PCP_OPNPSTN_QTY),0),
                 nvl(sum(PCP_OPNPSTN_VAL),0),
                 nvl(sum(PCP_RLLZD_PNL),0),
                 nvl(sum(PCP_BRKG_VAL),0),
                 nvl(sum(PCP_AVG_TRD_PRC),0),
                 nvl(sum(PCP_TOTAL_PNL),0)
          INTO  :l_opnpstn_qty,
                :d_org_opn_val,
                :d_crst_prft,
                :l_charges,
                :l_avg_pr,
                :d_total_prft
          FROM  PCP_PRTFL_CNTRCT_PRDCT_HSTRY
        WHERE PCP_CLM_MTCH_ACCNT =:c_cln_mtch_accnt
        AND   PCP_XCHNG_CD       =:st_cntopt_pos.c_xchng_cd
        AND   PCP_PRDCT_TYP      in ('O','I')
        AND   PCP_UNDRLYNG       =:st_cntopt_pos.c_undrlyng
        AND   PCP_EXPRY_DT       =:st_cntopt_pos.c_expry_dt
        AND   PCP_EXER_TYP       =:st_cntopt_pos.c_exrc_typ
        AND   PCP_STRK_PRC       =:st_cntopt_pos.l_strike_prc
        AND   PCP_OPT_TYP        =:st_cntopt_pos.c_opt_typ;

        if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
        {
          fn_errlog( c_ServiceName, "S31265", SQLMSG, c_errmsg.arr  );
          EXEC SQL CLOSE :cont_cursor;
          EXEC SQL FREE :cont_cursor;
          /** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating ****/
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
			}

			d_uncrst_prft = l_opnpstn_qty * d_ltp;

			if ( l_opnpstn_qty > 0)
      {
        c_opnpstn_flw = 'B';
      }
      else if ( l_opnpstn_qty < 0)
      {
        c_opnpstn_flw = 'S';
      }
      else
      {
        c_opnpstn_flw = 'N';
      }

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog( c_ServiceName,"Realized PNL is   |%lf|",d_crst_prft);
        fn_userlog( c_ServiceName,"Unrealized PNL is |%lf|",d_uncrst_prft);
        fn_userlog( c_ServiceName,"Total PNL is      |%lf|",d_total_prft);
        fn_userlog( c_ServiceName,"Average prize is  |%lf|",l_avg_pr);
        fn_userlog( c_ServiceName,"charges       is  |%ld|",l_charges);
        fn_userlog( c_ServiceName,"l_opnpstn_qty is  |%ld|",l_opnpstn_qty);
        fn_userlog( c_ServiceName,"d_org_opn_val is  |%lf|",d_org_opn_val);
        fn_userlog( c_ServiceName,"d_ltp is  				 |%lf|",d_ltp); /*** Ver 2.0 ***/
        fn_userlog( c_ServiceName,"c_opnpstn_flw is  |%c|",c_opnpstn_flw);
      }
      /** Comment starts Ver 3.1 ** 
       *** ver 3.0 Add Starts ***
      if(strcmp(c_ven_nm,"SENSIBULL") == 0 )
      {
        if(l_opnpstn_qty != 0)
        {
					i_ch_val =  fn_pack_vartofml ( c_ServiceName, c_errmsg.arr,
                                   &ptr_fml_Obuf,
                                   20,
                       FFO_XCHNG_CD,      st_cntopt_pos.c_xchng_cd,
                       FFO_PRDCT_TYP,     (char *)&st_cntopt_pos.c_prd_typ,
                       FFO_UNDRLYNG,      st_cntopt_pos.c_undrlyng,
                       FFO_EXPRY_DT,      st_cntopt_pos.c_expry_dt,
                       FFO_EXER_TYP,      (char *)&st_cntopt_pos.c_exrc_typ,
                       FFO_OPT_TYP,      (char *)&st_cntopt_pos.c_opt_typ,
                       FFO_STRK_PRC,      (char *)&st_cntopt_pos.l_strike_prc,
                       FFO_CTGRY_INDSTK,  (char *)&st_cntopt_pos.c_ctgry_indstk,
                       FFO_OPNPSTN_QTY,   (char *)&l_opnpstn_qty,
                       FFO_OPNPSTN_VAL,   (char *)&d_org_opn_val,
                       FFO_CUR_MKT_PRC,   (char *)&st_cntrct_qt.l_lst_trdd_prc,
                       FFO_RLZD_PL,       (char *)&d_crst_prft,
                       FFO_UNRLZD_PL,     (char *)&d_uncrst_prft,
                       FFO_TOTAL_PL,      (char *)&d_total_prft,
                       FFO_EBA_MTCH_ACT_NO, (char *)c_cln_mtch_accnt,
                       FFO_TRD_FLW,       (char *)&c_opnpstn_flw,
                       FFO_BRKRG_VL,      (char *)&l_charges,
                       FFO_AVRG_TRD_PRC,  (char *)&l_avg_pr,
                       FFO_SUB_BUF_CNT,   (char *)&rec_cnt,
                       FFO_ACTN_ID,       (char *)&ret_val);
				}
			}
			else
			{
			 *** ver 3.0 Add Ends ***
       *** Comment end Ver 3.1 **/
      i_ch_val =  fn_pack_vartofml ( c_ServiceName, c_errmsg.arr,
                                   &ptr_fml_Obuf,
                                   20,
                       FFO_XCHNG_CD,      st_cntopt_pos.c_xchng_cd,
                       FFO_PRDCT_TYP,     (char *)&st_cntopt_pos.c_prd_typ,
                       FFO_UNDRLYNG,      st_cntopt_pos.c_undrlyng,
                       FFO_EXPRY_DT,      st_cntopt_pos.c_expry_dt,
                       FFO_EXER_TYP,      (char *)&st_cntopt_pos.c_exrc_typ,
                       FFO_OPT_TYP,      (char *)&st_cntopt_pos.c_opt_typ,
                       FFO_STRK_PRC,      (char *)&st_cntopt_pos.l_strike_prc,
                       FFO_CTGRY_INDSTK,  (char *)&st_cntopt_pos.c_ctgry_indstk,
                       FFO_OPNPSTN_QTY,   (char *)&l_opnpstn_qty,
                       FFO_OPNPSTN_VAL,   (char *)&d_org_opn_val,
                       FFO_CUR_MKT_PRC,   (char *)&st_cntrct_qt.l_lst_trdd_prc,
                       FFO_RLZD_PL,       (char *)&d_crst_prft,
                       FFO_UNRLZD_PL,     (char *)&d_uncrst_prft,
                       FFO_TOTAL_PL,      (char *)&d_total_prft,
                       FFO_EBA_MTCH_ACT_NO, (char *)c_cln_mtch_accnt,
                       FFO_TRD_FLW,       (char *)&c_opnpstn_flw,
                       FFO_BRKRG_VL,      (char *)&l_charges,
                       FFO_AVRG_TRD_PRC,  (char *)&l_avg_pr,
                       FFO_SUB_BUF_CNT,   (char *)&rec_cnt,
                       FFO_ACTN_ID,       (char *)&ret_val);
			/* }				*** Ver 3.0 *** Commented Ver 3.1 **/
      if ( i_ch_val == -1 )
      {
        fn_errlog( c_ServiceName, "S31270", LIBMSG, c_errmsg.arr  );
        EXEC SQL CLOSE :cont_cursor;
        EXEC SQL FREE :cont_cursor;
        /** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating *****/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }/********* Ver 2.0 Ended ********/
	}/*** END of for loop ***/

  if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.2 : Debug level Change  */
    fn_userlog( c_ServiceName, "After end of for" );
    fn_userlog( c_ServiceName, "sizeof fml %d",sizeof(ptr_fml_Obuf) );
  }
  /*tpcommit(0);*/				/** 1.6 **/
  EXEC SQL CLOSE :cont_cursor;
  EXEC SQL FREE :cont_cursor;

	}       /**** Ver 2.3 starts*****/
  else
  {

      EXEC SQL
        SELECT  NVL(CLM_SPAN_ALLWD,'N'),
                NVL(CLM_BSESPAN_ALLWD,'N')
        INTO    :c_spn_allwd_flg,
                :c_bsespn_allwd_flg
        FROM    CLM_CLNT_MSTR
        WHERE   CLM_MTCH_ACCNT  = :st_usr_prfl.c_cln_mtch_accnt;

        if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31275", SQLMSG, c_errmsg.arr  );
        /** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating ****/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog(c_ServiceName," SPAN flag is     |%c|",c_spn_allwd_flg);
        fn_userlog(c_ServiceName," BSE SPAN flag is |%c|",c_bsespn_allwd_flg);
      }

      if( (c_spn_allwd_flg == 'N' && strcmp(st_cntrct.c_xchng_cd,"NFO")==0 ) ||
        (c_bsespn_allwd_flg == 'N' && strcmp(st_cntrct.c_xchng_cd,"BFO")== 0))
      {
        EXEC SQL
            SELECT FOP_OPNPSTN_QTY,
                  FOP_OPNPSTN_FLW,
                  FOP_OPNPSTN_VAL
              INTO :l_opnpstn_qty,
                  :c_opnpstn_flw,
                  :d_org_opn_val
              FROM fop_fo_options_pstn
            WHERE  FOP_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
              AND  FOP_XCHNG_CD       = :st_cntrct.c_xchng_cd
              AND  FOP_PRDCT_TYP      = :st_cntrct.c_prd_typ
              AND  FOP_INDSTK         = :st_cntrct.c_ctgry_indstk
              AND  FOP_UNDRLYNG       = :st_cntrct.c_undrlyng
              AND  FOP_EXPRY_DT       = :st_cntrct.c_expry_dt
              AND  FOP_STRK_PRC       = :st_cntrct.l_strike_prc
              AND  FOP_OPT_TYP        = :st_cntrct.c_opt_typ
              AND  FOP_EXER_TYP       = :st_cntrct.c_exrc_typ;

        if ( SQLCODE != 0 )
        {
          fn_errlog( c_ServiceName, "S31280", SQLMSG, c_errmsg.arr  );
          /** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating *****/
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
			
			}
      else
      {
        EXEC SQL
            SELECT FCP_OPNPSTN_QTY,
                  FCP_OPNPSTN_FLW,
                  FCP_OPNPSTN_VAL
              INTO :l_opnpstn_qty,
                  :c_opnpstn_flw,
                  :d_org_opn_val
              FROM FCP_FO_SPN_CNTRCT_PSTN
            WHERE  FCP_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
              AND  FCP_XCHNG_CD       = :st_cntrct.c_xchng_cd
              AND  FCP_PRDCT_TYP      = :st_cntrct.c_prd_typ
              AND  FCP_INDSTK         = :st_cntrct.c_ctgry_indstk
              AND  FCP_UNDRLYNG       = :st_cntrct.c_undrlyng
              AND  FCP_EXPRY_DT       = :st_cntrct.c_expry_dt
              AND  FCP_STRK_PRC       = :st_cntrct.l_strike_prc
              AND  FCP_OPT_TYP        = :st_cntrct.c_opt_typ
              AND  FCP_EXER_TYP       = :st_cntrct.c_exrc_typ;

        if ( SQLCODE != 0 )
        {
          fn_errlog( c_ServiceName, "S31285", SQLMSG, c_errmsg.arr  );
          /** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating *****/
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }

      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog(c_ServiceName," open position qty is     |%ld|",l_opnpstn_qty);
        fn_userlog(c_ServiceName," open position flw is     |%c|",c_opnpstn_flw);
        fn_userlog(c_ServiceName," open position val is     |%lf|",d_org_opn_val);
      }

      EXEC SQL
        SELECT decode(:l_opnpstn_qty, 0, 0,round(((:d_org_opn_val/:l_opnpstn_qty)),2))
        INTO : d_base_prc
        FROM  dual;

      l_avg_trd_prc = (long)d_base_prc;

			EXEC SQL
          SELECT  NVL(FTQ_LST_TRD_PRC,0)
          INTO    :d_ltp
          FROM    FTQ_FO_TRD_QT
          WHERE   FTQ_XCHNG_CD  = :st_cntrct.c_xchng_cd
          AND     FTQ_PRDCT_TYP = :st_cntrct.c_prd_typ
          AND     FTQ_UNDRLYNG  = :st_cntrct.c_undrlyng
          AND     FTQ_EXPRY_DT  = :st_cntrct.c_expry_dt
          AND     FTQ_EXER_TYP  = :st_cntrct.c_exrc_typ
          AND     FTQ_OPT_TYP   = :st_cntrct.c_opt_typ
          AND     FTQ_STRK_PRC  = :st_cntrct.l_strike_prc;

      if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog( c_ServiceName, "S31290", SQLMSG, c_errmsg.arr  );
        /** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as memory deallocating without allocating *****/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

    if( SQLCODE == NO_DATA_FOUND )
    {
      d_ltp = 0.0;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName,"last trade price is   |%lf|",d_ltp);
    }

		if( c_opnpstn_flw == 'B' )
    {
      d_uncrst_prft = ( d_ltp - (double)l_avg_trd_prc) * (double) l_opnpstn_qty;
    }
    else if (c_opnpstn_flw == 'S' )
    {
      d_uncrst_prft = ( (double)l_avg_trd_prc - d_ltp ) * (double)( l_opnpstn_qty * -1);
			l_opnpstn_qty = l_opnpstn_qty * -1;
    }
    else
    {
      d_uncrst_prft=0.0;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName,"Unrealized PNL is |%lf|",d_uncrst_prft);
      fn_userlog( c_ServiceName,"Average prize is  |%ld|",l_avg_trd_prc);
      fn_userlog( c_ServiceName,"l_opnpstn_qty is  |%ld|",l_opnpstn_qty);
      fn_userlog( c_ServiceName,"d_org_opn_val is  |%lf|",d_org_opn_val);
      fn_userlog( c_ServiceName,"c_opnpstn_flw is  |%c|",c_opnpstn_flw);
    }

    ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

    if ( ptr_fml_Obuf == NULL )
    {
      fn_errlog( c_ServiceName, "S31295", LIBMSG, c_errmsg.arr  );
      tpfree ( ( char * ) ptr_fml_Obuf );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		i_ch_val =  fn_pack_vartofml ( c_ServiceName,
                                   c_errmsg.arr,
                                   &ptr_fml_Obuf,
                                   4,
                       FFO_OPNPSTN_QTY,   (char *)&l_opnpstn_qty,
                       FFO_TRD_FLW,       (char *)&c_opnpstn_flw,
                       FFO_UNRLZD_PL,     (char *)&d_uncrst_prft,
                       FFO_AVRG_TRD_PRC,  (char *)&l_avg_trd_prc);

     if ( i_ch_val == -1 )
     {
       fn_errlog( c_ServiceName, "S31300", LIBMSG, c_errmsg.arr  );
       tpfree ( ( char * ) ptr_fml_Obuf );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }

  }   /**** Ver 2.3 Ends ***/

	if(DEBUG_MSG_LVL_2)   /** Log introduced Ver 2.7 **/
  {
    fn_userlog(c_ServiceName, "SFO_OPT_PRTFL Service Completed Successfully.");
  }
	
  tpreturn(TPSUCCESS, SUCC_BFR, (char *)ptr_fml_Obuf, 0, 0 );
}

/*** Function Added in Ver 2.1 ** Starts ***/

int fn_optplussell_opnpstn(char *c_ServiceName,
                        char *c_cln_mtch_accnt,
                        char *c_xchng_cd,
                        char *c_undrlyng,
                        char *c_expry_dt,
                        char c_exrc_typ,
                        long l_strike_prc,
                        char c_opt_typ,
                        double *d_op_opn_val)
{

/**  double d_buy_val = 0;  			*** Commented in VQC ****/
/**  double d_opn_sell_val = 0;		*** Commented in VQC ****/	
  double li_uncrst_qty = 0;
/**  double d_opn_sltp_val = 0;		*** Commented in VQC ****/
/**  long int li_qty_bal = 0;		  *** Commented in VQC ****/	
  long l_tot_buy_qty = 0;
  long li_bal_qty = 0;
  long int li_crst_qty = 0;
  sql_cursor trd_cursor;
  long int li_exctd_qty;
  long int li_exctd_rt;
  char c_trd_dt[LEN_DATE];
  varchar c_errmsg[256]; 	/*** Changed data type from char[] to varchar & changed c_errmsg to c_errmsg.arr in VQC  ***/		

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Inside Function fn_optplussell_opnpstn ");
  }

  if( DEBUG_MSG_LVL_5 )
  {
    fn_userlog(c_ServiceName,"Match Account Is ;%s:",c_cln_mtch_accnt);
    fn_userlog(c_ServiceName,"Exchnage Code Is :%s:",c_xchng_cd);
    fn_userlog(c_ServiceName,"Expiry Date Is :%s:",c_expry_dt);
    fn_userlog(c_ServiceName,"Exercise Type Is :%c:",c_exrc_typ);
    fn_userlog(c_ServiceName,"Underlying Is :%s:",c_undrlyng);
    fn_userlog(c_ServiceName,"Strike Price Is :%ld:",l_strike_prc);
    fn_userlog(c_ServiceName," OPT typeIs :%c:",c_opt_typ);
  }

  EXEC SQL
    SELECT  NVL ( SUM ( ftd_exctd_qty ), 0)
   /**         NVL ( SUM ( ( ftd_exctd_qty * ftd_exctd_rt ) ),0)		*** Commented in VQC ***/
    INTO    :l_tot_buy_qty
   /**         :d_buy_val			** Commented in VQC ***/
    FROM    ftd_fo_trd_dtls
    WHERE   ftd_clm_mtch_accnt  = :c_cln_mtch_accnt
    AND     ftd_xchng_cd        = :c_xchng_cd
    AND     ftd_prdct_typ = 'I'
    AND     ftd_undrlyng        = :c_undrlyng
    AND     ftd_expry_dt        = :c_expry_dt
    AND     ftd_exer_typ        = :c_exrc_typ
    AND     ftd_trd_flw         = 'B'
    AND     FTD_OPT_TYP         = :c_opt_typ
    AND     FTD_STRK_PRC        = :l_strike_prc;

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31305", SQLMSG, c_errmsg.arr  );
      return -1;
    }

    EXEC SQL ALLOCATE :trd_cursor;


        EXEC SQL  EXECUTE
          BEGIN
            OPEN  :trd_cursor FOR
              SELECT ftd_exctd_qty,
                     ftd_exctd_rt,
                     ftd_trd_dt
              FROM ftd_fo_trd_dtls
              WHERE   ftd_clm_mtch_accnt  = :c_cln_mtch_accnt
              AND     ftd_xchng_cd        = :c_xchng_cd
              AND     ftd_prdct_typ       = 'I'
              AND     ftd_undrlyng        = :c_undrlyng
              AND     ftd_expry_dt        = :c_expry_dt
              AND     ftd_exer_typ        = :c_exrc_typ
              AND     ftd_trd_flw         = 'S'
              AND     FTD_OPT_TYP         = :c_opt_typ
              AND     FTD_STRK_PRC        = :l_strike_prc
              ORDER BY 3;
          END;
        END-EXEC;


      li_bal_qty = l_tot_buy_qty;

     while ( 1 )
      {
      /** li_qty_bal = 0;		*** Commented in VQC ****/

        EXEC SQL
          FETCH :trd_cursor
          INTO :li_exctd_qty,
               :li_exctd_rt,
               :c_trd_dt;

        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
            break;
          }
          else
          {
            fn_errlog( c_ServiceName, "S31310", SQLMSG, c_errmsg.arr  );
            EXEC SQL CLOSE :trd_cursor;
            EXEC SQL FREE :trd_cursor;
          }
        }

        if ( li_bal_qty > 0 )
        {
          li_crst_qty = fn_minl ( li_bal_qty, li_exctd_qty );
          li_bal_qty = li_bal_qty - li_crst_qty;

          if ( li_bal_qty == 0 )
          {
            if(DEBUG_MSG_LVL_5)
            {
              fn_userlog(c_ServiceName,"Inside SELL li_bal_qty == 0 ");
            }

            li_uncrst_qty = li_exctd_qty - li_crst_qty;
            *d_op_opn_val = *d_op_opn_val + ( (double) li_uncrst_qty * (double) li_exctd_rt );

          }
        }
         else
        {
          li_uncrst_qty = li_uncrst_qty + li_exctd_qty;
          *d_op_opn_val = (*d_op_opn_val) + ( (double) li_exctd_qty * (double) li_exctd_rt );

        }

      }

 EXEC SQL CLOSE :trd_cursor;
  EXEC SQL FREE :trd_cursor;

    *d_op_opn_val = *d_op_opn_val * (-1);

   if( DEBUG_MSG_LVL_3 )
   {
       fn_userlog (c_ServiceName,"Sltp Sell  d_op_opn_val is :%lf:",d_op_opn_val);
   }
}



int fn_optplusbuy_opnpstn(char *c_ServiceName,
                       char *c_cln_mtch_accnt,
                       char *c_xchng_cd,
                       char *c_undrlyng,
                       char *c_expry_dt,
                       char c_exrc_typ,
                       long l_strike_prc,
                       char c_opt_typ,
                       double *d_op_opn_val
                      )
{


  sql_cursor trd_cursor;
  long l_tot_sell_qty = 0;
 /** double d_sell_val = 0;			**** Commented in VQC ****/
 /** double d_opn_sltp_val = 0;  **** Commented in VQC ****/ 
  long int li_uncrst_qty = 0;
  long int li_crst_qty = 0;
  long int li_bal_qty = 0;
/**  long int li_qty_bal = 0;		*** Commented in VQC ****/
/**  long int li_cum_exctd_qty = 0;		*** Commented in VQC ***/
/**  long int li_net_qty_bal = 0;			*** Comented in VQC ***/
   long int li_exctd_qty;
  long int li_exctd_rt;
  char c_trd_dt[LEN_DATE];
  varchar c_errmsg[256];	/*** Changed data type from char[] to varchar & changed c_errmsg to c_errmsg.arr in VQC  ***/

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Inside Function fn_optplusbuy_opnpstn");
  }

  if( DEBUG_MSG_LVL_5 )
  {
    fn_userlog(c_ServiceName,"Match Account Is ;%s:",c_cln_mtch_accnt);
    fn_userlog(c_ServiceName,"Exchnage Code Is :%s:",c_xchng_cd);
    fn_userlog(c_ServiceName,"Expiry Date Is :%s:",c_expry_dt);
    fn_userlog(c_ServiceName,"Exercise Type Is :%c:",c_exrc_typ);
    fn_userlog(c_ServiceName,"Underlying Is :%s:",c_undrlyng);
  }

  EXEC SQL
        SELECT  NVL ( SUM ( ftd_exctd_qty ), 0)
        /**        NVL ( SUM ( ( ftd_exctd_qty * ftd_exctd_rt ) ), 0 )		** Commented in VQC ***/
        INTO    :l_tot_sell_qty
        /**        :d_sell_val 		*** Commented in VQC ***/
        FROM    ftd_fo_trd_dtls
        WHERE   ftd_clm_mtch_accnt  = :c_cln_mtch_accnt
        AND     ftd_xchng_cd        = :c_xchng_cd
        AND     ftd_prdct_typ = 'I'
        AND     ftd_undrlyng        = :c_undrlyng
        AND     ftd_expry_dt        = :c_expry_dt
        AND     ftd_exer_typ        = :c_exrc_typ
        AND     ftd_trd_flw         = 'S'
        AND     FTD_OPT_TYP         = :c_opt_typ
        AND     FTD_STRK_PRC        = :l_strike_prc;


    if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31315", SQLMSG, c_errmsg.arr  );
        return -1;
      }

    EXEC SQL ALLOCATE :trd_cursor;

        EXEC SQL  EXECUTE
          BEGIN
            OPEN  :trd_cursor FOR
              SELECT ftd_exctd_qty,
                     ftd_exctd_rt,
                     ftd_trd_dt
              FROM ftd_fo_trd_dtls
              WHERE   ftd_clm_mtch_accnt  = :c_cln_mtch_accnt
              AND     ftd_xchng_cd        = :c_xchng_cd
              AND     ftd_prdct_typ = 'I'
              AND     ftd_undrlyng        = :c_undrlyng
              AND     ftd_expry_dt        = :c_expry_dt
              AND     ftd_exer_typ        = :c_exrc_typ
              AND     ftd_trd_flw         = 'B'
               AND     FTD_OPT_TYP         = :c_opt_typ
              AND     FTD_STRK_PRC        = :l_strike_prc
              ORDER BY ftd_trd_dt;
          END;
        END-EXEC;


      li_bal_qty = l_tot_sell_qty;

  while ( 1 )
    {
      /**  li_qty_bal = 0;		** Commented in VQC ***/

        EXEC SQL
          FETCH :trd_cursor
          INTO :li_exctd_qty,
               :li_exctd_rt,
               :c_trd_dt;

        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {

            break;
          }
          else
          {
            fn_errlog( c_ServiceName, "S31320", SQLMSG, c_errmsg.arr  );
            EXEC SQL CLOSE :trd_cursor;
            EXEC SQL FREE :trd_cursor;
            return -1;
          }
        }

     if ( li_bal_qty > 0 )
     {
          if(DEBUG_MSG_LVL_5)
          {
            fn_userlog(c_ServiceName,"Inside li_bal_qty > 0");
            fn_userlog(c_ServiceName,"HERE li_bal_qty is :%ld:",li_bal_qty);
            fn_userlog(c_ServiceName,"HERE li_exctd_qty is :%ld:",li_exctd_qty);
          }

          li_crst_qty = fn_minl ( li_bal_qty, li_exctd_qty );

          li_bal_qty = li_bal_qty - li_crst_qty;

          if ( li_bal_qty == 0 )
          {
            li_uncrst_qty = li_exctd_qty - li_crst_qty;
            *d_op_opn_val = *d_op_opn_val + ( (double) li_uncrst_qty * (double) li_exctd_rt );
          }
        }
        else
        {
          if(DEBUG_MSG_LVL_5)
          {
            fn_userlog(c_ServiceName,"Inside li_bal_qty = 0");
            fn_userlog(c_ServiceName,"Executed Qty Is :%ld:",li_exctd_qty);
          }

          li_uncrst_qty = li_uncrst_qty + li_exctd_qty;
          *d_op_opn_val = (*d_op_opn_val) + ( (double) li_exctd_qty * (double)  li_exctd_rt );

          if(DEBUG_MSG_LVL_5)
          {
            fn_userlog(c_ServiceName,"Uncrystalised Qty Is :%ld:",li_uncrst_qty);
          }
        }

      }

      EXEC SQL CLOSE :trd_cursor;
      EXEC SQL FREE :trd_cursor;


      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog (c_ServiceName,"Sltp buy  d_op_opn_val is :%lf:",d_op_opn_val);
      }


}

/*** Ver 2.1 ** Ends ***/
