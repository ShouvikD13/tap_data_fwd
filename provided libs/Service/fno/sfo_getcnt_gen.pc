/******************************************************************************/
/*	Program	    			:	SFO_GETCNT_GEN                                        */
/*                                                                            */
/*  Input             : vw_contract                                           */
/*                                                                            */
/*  Output            : vw_cntrt_gen_inf                                      */
/*											vw_err_msg																						*/
/*                                                                            */
/*  Description       : This service will fetch the general information of the*/
/*                      contract like underlying category, Minimum lot qty of */
/*                      the contract, Board lot qty, Tick size, Record date,  */
/*                      ND start and end date,Book closure start and end date */
/*                                                                            */
/*  Log               : 1.0	18-Sep-2001		Ramesh Reddy.V                      */
/*										: 1.1	03-Mar-2008		Sandeep Patil												*/
/*										: 1.2	19-Mar-2008		Smitha Nuti													*/
/*										: 1.3 13-Dec-2012		Vishnu Nair													*/
/*										: 1.4 23-Sep-2013		Navina D. 													*/
/*										: 1.5 19-Jan-2015		Sachin Birje										  	*/
/*                    : 1.6 13-Jul-2015   Anand Dhopte                        */
/*										: 1.7 01-Sep-2015		Sachin Birje										  	*/
/*                    : 1.9 14-Oct-2016   Sachin Birje                        */
/*                    : 2.0 27-Feb-2018   Parag Kanojia                       */
/*                    : 2.1 17-Apr-2023   Ravi Malla  			                  */
/******************************************************************************/
/* 1.0	-	New Release                                                         */
/* 1.1  - IBM MIGRATION CHANGES																								*/	
/* 1.2  - FP CHANGES																													*/
/* 1.3  - SLTP Changes																												*/	
/* 1.4  - OptionPLUS Changes																									*/
/* 1.5  - view to FMl CHanges                                                 */
/* 1.6  - Contract Master and Trade Quote Table Merger Changes                */
/* 1.7  - Memory Free() added       																					*/
/* 1.9  - Trail Order Changes                                                 */
/* 2.0  - Rollover with Spread Changes                                        */
/* 2.1  - CR-ISEC14-182394_ Pop-up message for contract under surveillance in Equity Derivatives Segment. */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
/*** #include <fo_view_def.h> ** Ver 1.5 **/
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>			/*** Ver 1.1 ***/
#include <fo_fml_def.h>      /** Ver 1.5 **/
#include <fo_view_def.h>   /** Ver 1.5 **/
#include <fml_rout.h>        /** Ver 1.5 */

#define SPREAD_CNTRCT 'S'   /** Ver 2.0 **/

EXEC SQL INCLUDE "table/sim_surv_indctr_mstr.h"; /* Ver 2.1 */

void SFO_GETCNT_GEN( TPSVCINFO *rqst )
{

  /** Ver 1.5 ****/
  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;
  int  i_returncode=0;
  /** Ver 1.5 Ends ****/

  char  c_ServiceName[33];
  char  c_errmsg[256];
  char  c_trail_flag='\0'; /** Ver 1.9 ***/

  /** Ver 2.1 Start **/
    long sql_xsm_surv_ind ;
    varchar sql_sim_desc[100] ;
    varchar sql_sim_short_cd[50] ;
    char c_msg[500];
    char c_err_type='\0';
  /** Ver 2.1 End **/


 EXEC SQL BEGIN DECLARE SECTION;
    struct vw_contract *ptr_st_contract;
    struct vw_cntrt_gen_inf *ptr_st_cntrt_gen_inf;
    varchar c_expiry_dt [ LEN_DATE ];
    varchar c_exp_dt [ LEN_DATE ];
    varchar c_rcrd_dt [ LEN_DATE ];
    varchar c_nd_start_dt [ LEN_DATE ];
    varchar c_nd_enddt [ LEN_DATE ];
    varchar c_bkcls_strt_dt [ LEN_DATE ];
    varchar c_bkcls_end_dt [ LEN_DATE ];
		varchar c_expry_dt2 [ LEN_DATE ];		/*** Ver 2.0 ***/
  EXEC SQL END DECLARE SECTION;

	MEMSET ( c_expry_dt2 );								/*** Ver 2.0 ***/

  struct vw_err_msg *ptr_st_err_msg;
  /***** COmmented in ver 1.5 *************************
  ptr_st_contract = ( struct vw_contract * )rqst->data;
  ************ Ver 1.5 ********************************/
  /********** Ver 1.5 Starts Here **********/
  ptr_fml_Ibuf = (FBFR32 *)rqst->data;

  ptr_st_contract = malloc(sizeof(struct vw_contract));
  /********** Ver 1.5 Ends Here ************/

  strcpy( c_ServiceName, rqst->name );

	INITDBGLVL(c_ServiceName);			/*** Ver 1.1 ***/

  /**** Ver 1.5 Starts Here ****/
  i_returncode = fn_unpack_fmltovar_dflt ( c_ServiceName,
                                           c_errmsg,
                                           ptr_fml_Ibuf,
                                           9,
                                           FFO_XCHNG_CD, (char*)ptr_st_contract->c_xchng_cd,"*",
                                           FFO_PRDCT_TYP,(char*)&ptr_st_contract->c_prd_typ,"*",
                                           FFO_UNDRLYNG, (char*)ptr_st_contract->c_undrlyng,"NULL",
                                           FFO_EXPRY_DT, (char*)ptr_st_contract->c_expry_dt,0,
                                           FFO_EXER_TYP,(char*)&ptr_st_contract->c_exrc_typ,"*",
                                           FFO_OPT_TYP,(char*)&ptr_st_contract->c_opt_typ,"*",
                                           FFO_STRK_PRC,(char*)&ptr_st_contract->l_strike_prc,"*",
                                           FFO_CTGRY_INDSTK,(char*)&ptr_st_contract->c_ctgry_indstk,"*",
                                           FFO_ROUT_CRT,(char*)ptr_st_contract->c_rout_crt,"000"
                                         );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    free((char*)ptr_st_contract);  /** Ver 1.7 **/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /**** Ver 1.5 Ends Here *****/

	/*** Ver 2.0 Starts ***/
  i_returncode = Fget32( ptr_fml_Ibuf, FFO_RQST_TYP, 0, (char*)&ptr_st_contract->c_rqst_typ, 0 );

  if (i_returncode == -1 )
  {
      if ( Ferror32 != FNOTPRES )
      {
        fn_errlog( c_ServiceName, "S31010", FMLMSG, c_errmsg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
        ptr_st_contract->c_rqst_typ ='*';
      }
  }

	if( ptr_st_contract->c_rqst_typ == SPREAD_CNTRCT )
	{
		i_returncode = Fget32( ptr_fml_Ibuf, FFO_TO_DT, 0, (char*)c_expry_dt2.arr, 0 );
		if (i_returncode == -1 )
  	{
    	fn_errlog( c_ServiceName, "S31015", FMLMSG, c_errmsg  );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
		SETLEN ( c_expry_dt2 );
	}
  /*** Ver 2.0 Ends ***/

  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_contract->c_expry_dt );
  SETLEN ( c_expiry_dt );

	if (DEBUG_MSG_LVL_3)			/*** Ver 1.1 ***/ 
	{
  	fn_userlog ( c_ServiceName, "c_xchng_cd**:%s:", ptr_st_contract->c_xchng_cd );
  	fn_userlog ( c_ServiceName, "c_prd_typ   :%c:", ptr_st_contract->c_prd_typ );
  	fn_userlog ( c_ServiceName, "c_undrlyng  :%s:", ptr_st_contract->c_undrlyng );
  	fn_userlog ( c_ServiceName, "c_expiry_dt :%s:", c_expiry_dt.arr );
  	fn_userlog ( c_ServiceName, "c_exrc_typ  :%c:", ptr_st_contract->c_exrc_typ );
  	fn_userlog ( c_ServiceName, "c_opt_typ   :%c:", ptr_st_contract->c_opt_typ );
  	fn_userlog ( c_ServiceName, "l_strike_prc:%ld:", 
																					 ptr_st_contract->l_strike_prc ); 
		fn_userlog ( c_ServiceName, "c_expry_dt2 is :%s:", c_expry_dt2.arr );	/** Ver 2.0 **/
	}

  /**** Ver 1.5 ****************************************************************
  ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
  ***************** Ver 1.5 ****************************************************/

  ptr_st_err_msg = malloc(sizeof(struct vw_err_msg));  /** Ver 1.5 **/ 
  if ( ptr_st_err_msg ==  NULL )
  {
    fn_errlog ( c_ServiceName, "S31020", TPMSG, c_errmsg );
    free((char*)ptr_st_contract);  /** Ver 1.7 **/
    tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
  }

  memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );

  /************ Ver 1.5 *****************************************************
  ptr_st_cntrt_gen_inf = ( struct vw_cntrt_gen_inf *) tpalloc ( "VIEW32",
                                                         "vw_cntrt_gen_inf",
                                        sizeof ( struct vw_cntrt_gen_inf ) );
   ************************** Ver 1.5 ****** Ends ***************************/

  ptr_st_cntrt_gen_inf = malloc(sizeof(struct vw_cntrt_gen_inf));  /** Ver 1.5 **/
  if ( ptr_st_cntrt_gen_inf ==  NULL )
  {
    fn_errlog ( c_ServiceName, "S31025", TPMSG, ptr_st_err_msg->c_err_msg );
    free((char*)ptr_st_contract);  /** Ver 1.7 **/
    free((char*)ptr_st_err_msg); /** Ver 1.7 **/
    /*** tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 ); ** Ver 1.7 **/
    tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
  }

  memset ( ptr_st_cntrt_gen_inf, 0, sizeof ( struct vw_cntrt_gen_inf ) );

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( ptr_st_contract->c_rout_crt );

	/***** Ver 2.0 Starts *****/

  if( ptr_st_contract->c_rqst_typ == SPREAD_CNTRCT )
  {
  ptr_st_contract->c_prd_typ = 'S';

	EXEC SQL
      SELECT      ftq_xchng_cd,
                  ftq_prdct_typ,
                  ftq_indstk,
                  ftq_undrlyng,
                  to_char ( ftq_expry_dt, 'dd-Mon-yyyy' ),
                  ftq_exer_typ,
                  ftq_opt_typ,
                  nvl(ftq_strk_prc,0),
                  nvl(ftq_prmtd_to_trd,0),
                  nvl(ftq_stts,0),
                  nvl(ftq_board_lot_qty,0),
                  nvl(to_char (ftq_rcrd_dt, 'dd-Mon-yyyy hh24:mi:ss' ),'*'),
                  nvl(to_char (ftq_nd_strt_dt, 'dd-Mon-yyyy hh24:mi:ss' ),'*'),
                  nvl(to_char (ftq_nd_end_dt, 'dd-Mon-yyyy hh24:mi:ss' ),'*'),
                  nvl(to_char(ftq_bk_cls_strt_dt,'dd-Mon-yyyy hh24:mi:ss'),'*'),
                  nvl(to_char (ftq_bk_cls_end_dt,'dd-Mon-yyyy hh24:mi:ss'),'*'),
                  nvl(ftq_setl_setlmnt_no,0),
                  '*',
                  NVL(ftq_eba_cntrct_id,0),
                  NVL( ftq_ca_lvl,0 ),
                  NVL( ftq_multplr, 0 ),
                  ftq_min_lot_qty,
                  ftq_tck_sz,
                  NVL(FTQ_TRAIL_FLG,'N')
         INTO     :ptr_st_cntrt_gen_inf->c_xchng_cd,
                  :ptr_st_cntrt_gen_inf->c_prd_typ,
                  :ptr_st_cntrt_gen_inf->c_ctgry_indstk,
                  :ptr_st_cntrt_gen_inf->c_undrlyng,
                  :c_exp_dt,
                  :ptr_st_cntrt_gen_inf->c_exrc_typ,
                  :ptr_st_cntrt_gen_inf->c_opt_typ,
                  :ptr_st_cntrt_gen_inf->l_strike_prc,
                  :ptr_st_cntrt_gen_inf->l_prmtd_to_trd,
									:ptr_st_cntrt_gen_inf->l_stts,
                  :ptr_st_cntrt_gen_inf->l_board_lot_qty,
                  :c_rcrd_dt,
                  :c_nd_start_dt,
                  :c_nd_enddt,
                  :c_bkcls_strt_dt,
                  :c_bkcls_end_dt,
                  :ptr_st_cntrt_gen_inf->l_setl_stlmnt_no,
                  :ptr_st_cntrt_gen_inf->c_rqst_typ,
                  :ptr_st_cntrt_gen_inf->l_eba_cntrct_id,
                  :ptr_st_cntrt_gen_inf->l_ca_lvl,
                  :ptr_st_cntrt_gen_inf->l_multplr,
                  :ptr_st_cntrt_gen_inf->l_min_lot_qty,
                  :ptr_st_cntrt_gen_inf->l_tick_sz,
                  :c_trail_flag
        FROM      ftq_fo_trd_qt
       WHERE      ftq_xchng_cd  = :ptr_st_contract->c_xchng_cd
         AND      ftq_prdct_typ = decode(:ptr_st_contract->c_prd_typ,'P','F','U','F','I','O',:ptr_st_contract->c_prd_typ)
         AND      ftq_undrlyng  = :ptr_st_contract->c_undrlyng
         AND      ftq_expry_dt  = to_date ( :c_expiry_dt, 'dd-Mon-yyyy' )
         AND      ftq_expry_dt2 = to_date ( :c_expry_dt2, 'dd-Mon-yyyy' )
         AND      ftq_exer_typ  = :ptr_st_contract->c_exrc_typ
         AND      ftq_rollover_sprd_allwd_flg = 'Y';

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31030", SQLMSG, ptr_st_err_msg->c_err_msg );
      free((char*)ptr_st_contract);
      free((char*)ptr_st_cntrt_gen_inf);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg , 0 );
      free((char*)ptr_st_err_msg);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

	}

  else
  {

  /***** Ver 2.0 Ends *****/
	EXEC SQL
			SELECT			ftq_xchng_cd,
									ftq_prdct_typ,
									ftq_indstk,
									ftq_undrlyng,
									to_char ( ftq_expry_dt, 'dd-Mon-yyyy' ),
									ftq_exer_typ,
									ftq_opt_typ,
									nvl(ftq_strk_prc,0),
									nvl(ftq_prmtd_to_trd,0),
									nvl(ftq_stts,0),
									nvl(ftq_board_lot_qty,0),
									nvl(to_char (ftq_rcrd_dt, 'dd-Mon-yyyy hh24:mi:ss' ),'*'),
									nvl(to_char (ftq_nd_strt_dt, 'dd-Mon-yyyy hh24:mi:ss' ),'*'),
									nvl(to_char (ftq_nd_end_dt, 'dd-Mon-yyyy hh24:mi:ss' ),'*'),
									nvl(to_char(ftq_bk_cls_strt_dt,'dd-Mon-yyyy hh24:mi:ss'),'*'),
									nvl(to_char (ftq_bk_cls_end_dt,'dd-Mon-yyyy hh24:mi:ss'),'*'),
									nvl(ftq_setl_setlmnt_no,0),
									'*',
                  NVL(ftq_eba_cntrct_id,0),                   /*** Ver 1.6 ***/
                  NVL( ftq_ca_lvl,0 ),                        /*** Ver 1.6 ***/
                  NVL( ftq_multplr, 0 ),                      /*** Ver 1.6 ***/
                  ftq_min_lot_qty,                            /*** Ver 1.6 ***/
                  ftq_tck_sz,                                  /*** Ver 1.6 ***/
                  NVL(FTQ_TRAIL_FLG,'N')                      /*** Ver 1.9 ***/
         INTO			:ptr_st_cntrt_gen_inf->c_xchng_cd,
									:ptr_st_cntrt_gen_inf->c_prd_typ,
									:ptr_st_cntrt_gen_inf->c_ctgry_indstk,
									:ptr_st_cntrt_gen_inf->c_undrlyng,
									:c_exp_dt,
									:ptr_st_cntrt_gen_inf->c_exrc_typ,
									:ptr_st_cntrt_gen_inf->c_opt_typ,
									:ptr_st_cntrt_gen_inf->l_strike_prc,
									:ptr_st_cntrt_gen_inf->l_prmtd_to_trd,
									:ptr_st_cntrt_gen_inf->l_stts,
									:ptr_st_cntrt_gen_inf->l_board_lot_qty,
									:c_rcrd_dt,
									:c_nd_start_dt,
									:c_nd_enddt,
									:c_bkcls_strt_dt,
									:c_bkcls_end_dt,
									:ptr_st_cntrt_gen_inf->l_setl_stlmnt_no,
									:ptr_st_cntrt_gen_inf->c_rqst_typ,
                  :ptr_st_cntrt_gen_inf->l_eba_cntrct_id,      /*** Ver 1.6 ***/
                  :ptr_st_cntrt_gen_inf->l_ca_lvl,             /*** Ver 1.6 ***/
                  :ptr_st_cntrt_gen_inf->l_multplr,            /*** Ver 1.6 ***/
                  :ptr_st_cntrt_gen_inf->l_min_lot_qty,        /*** Ver 1.6 ***/
                  :ptr_st_cntrt_gen_inf->l_tick_sz,             /*** Ver 1.6 ***/
                  :c_trail_flag                                /*** ver 1.9 ***/
				FROM			ftq_fo_trd_qt
			 WHERE		  ftq_xchng_cd	= :ptr_st_contract->c_xchng_cd
				/* AND      ftq_prdct_typ	= decode(:ptr_st_contract->c_prd_typ,'P','F',:ptr_st_contract->c_prd_typ) *Ver 1.2*  commented in ver 1.3 */
				/* AND      ftq_prdct_typ	= decode(:ptr_st_contract->c_prd_typ,'P','F','U','F',:ptr_st_contract->c_prd_typ) * Ver 1.3 *	*** Commented in Ver 1.4 ***/
			   AND      ftq_prdct_typ	= decode(:ptr_st_contract->c_prd_typ,'P','F','U','F','I','O',:ptr_st_contract->c_prd_typ) /* Ver 1.4 */
				 AND			ftq_undrlyng	= :ptr_st_contract->c_undrlyng
				 AND			ftq_expry_dt 	= to_date ( :c_expiry_dt, 'dd-Mon-yyyy' )
				 AND			ftq_exer_typ	= :ptr_st_contract->c_exrc_typ
				 AND			ftq_opt_typ		= :ptr_st_contract->c_opt_typ
				 AND			ftq_strk_prc	= :ptr_st_contract->l_strike_prc;	

		if ( SQLCODE != 0 ) 
  	{
    	fn_errlog ( c_ServiceName, "S31035", SQLMSG, ptr_st_err_msg->c_err_msg );
    	/** tpfree ( ( char * ) ptr_st_cntrt_gen_inf ); ** Ver 1.7 **/
    	free((char*)ptr_st_contract);  /** Ver 1.7 **/
    	free((char*)ptr_st_cntrt_gen_inf); /** Ver 1.7 **/
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg , 0 ); /** Ver 1.7 **/
    	free((char*)ptr_st_err_msg); /** Ver 1.7 **/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );  /** Ver 1.7 **/ 
    	/** tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 ); ** Ver 1.7 **/
  	}
	} /*** Added in Ver 2.0 ***/

   if(DEBUG_MSG_LVL_0 )
   {
   fn_userlog(c_ServiceName, "Trade Quote EBA Contract ID :%ld: ",ptr_st_cntrt_gen_inf->l_eba_cntrct_id);
   fn_userlog(c_ServiceName, "Trade Quote CA LEVEL :%ld: ", ptr_st_cntrt_gen_inf->l_ca_lvl);
   fn_userlog(c_ServiceName, "Trade Quote Multiplier :%ld:  ",ptr_st_cntrt_gen_inf->l_multplr);
   fn_userlog(c_ServiceName, "Trade Quote Lot Size :%ld: ",ptr_st_cntrt_gen_inf->l_min_lot_qty);
   fn_userlog(c_ServiceName, "Trade Quote Tick Size :%ld: ",ptr_st_cntrt_gen_inf->l_tick_sz);
   }

  SETNULL ( c_exp_dt );
  SETNULL ( c_rcrd_dt );
  SETNULL ( c_nd_start_dt );
  SETNULL ( c_nd_enddt );
  SETNULL ( c_bkcls_strt_dt );
  SETNULL ( c_bkcls_end_dt );

  strcpy ( ptr_st_cntrt_gen_inf->c_expry_dt , ( char * ) c_exp_dt.arr );
  strcpy ( ptr_st_cntrt_gen_inf->c_record_dt , ( char * ) c_rcrd_dt.arr );
  strcpy ( ptr_st_cntrt_gen_inf->c_nd_strt_dt ,( char * ) c_nd_start_dt.arr );
  strcpy ( ptr_st_cntrt_gen_inf->c_nd_end_dt , ( char * ) c_nd_enddt.arr );
  strcpy (ptr_st_cntrt_gen_inf->c_bk_cls_strt_dt,(char *)c_bkcls_strt_dt.arr);
  strcpy (ptr_st_cntrt_gen_inf->c_bk_cls_end_dt,(char *) c_bkcls_end_dt.arr);

  /*** Commented in Ver 1.6 and below column selected in above select from FTQ ***

	EXEC SQL
			SELECT		fcm_eba_cntrct_id,
								NVL( fcm_ca_lvl,0 ),
								NVL( fcm_multplr, 0 ),
								fcm_lot_sz,
								fcm_tck_sz
				INTO		:ptr_st_cntrt_gen_inf->l_eba_cntrct_id,
								:ptr_st_cntrt_gen_inf->l_ca_lvl,
								:ptr_st_cntrt_gen_inf->l_multplr,
								:ptr_st_cntrt_gen_inf->l_min_lot_qty,
								:ptr_st_cntrt_gen_inf->l_tick_sz
				FROM		fcm_fo_cntrct_mstr
			 WHERE		fcm_xchng_cd		=	:ptr_st_contract->c_xchng_cd
			 *AND		fcm_prdct_typ		=	decode(:ptr_st_contract->c_prd_typ,'P','F',:ptr_st_contract->c_prd_typ) *Ver 1.2* commented in ver 1.3 *
			***  AND		fcm_prdct_typ		=	decode(:ptr_st_contract->c_prd_typ,'P','F','U','F',:ptr_st_contract->c_prd_typ) *Ver 1.3*  ***Commented in Ver 1.4 ***
				 AND		fcm_prdct_typ		=	decode(:ptr_st_contract->c_prd_typ,'P','F','U','F','I','O',:ptr_st_contract->c_prd_typ) *Ver 1.4*
				 AND		fcm_undrlyng		=	:ptr_st_contract->c_undrlyng
				 AND		fcm_expry_dt		= to_date ( :c_expiry_dt, 'dd-Mon-yyyy' )
				 AND		fcm_exer_typ		= :ptr_st_contract->c_exrc_typ
				 AND		fcm_opt_typ     = :ptr_st_contract->c_opt_typ
				 AND    fcm_strk_prc    = :ptr_st_contract->l_strike_prc; 
								
	if ( SQLCODE != 0 )  
  {
    fn_errlog ( c_ServiceName, "S31040", SQLMSG, ptr_st_err_msg->c_err_msg );
    ** tpfree ( ( char * ) ptr_st_cntrt_gen_inf );  ** Ver 1.7 **
    free((char*)ptr_st_contract);  ** Ver 1.7 **
    free((char*)ptr_st_cntrt_gen_inf); ** Ver 1.7 **
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg , 0 ); ** Ver 1.7 **
    free((char*)ptr_st_err_msg); ** Ver 1.7 **
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );  ** Ver 1.7 **
    *** tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 ); ** Ver 1.7 **
  }
  
  *** Ver 1.6 Comment Ends ***/

 



	/*** Ver 2.1 Start ***/
	MEMSET(sql_sim_desc);
  MEMSET(sql_sim_short_cd);
  MEMSET(c_msg);

	 EXEC SQL
        SELECT  NVL(XSM_SURV_IND, 0 )
        INTO    :sql_xsm_surv_ind
        FROM    XSM_XCHNG_STK_MSTR
        WHERE   XSM_XCHNG_CD  = 'NSE'
        AND     XSM_STCK_CD   = :ptr_st_cntrt_gen_inf->c_undrlyng;
        if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND)
        {
							fn_errlog ( c_ServiceName, "S31045", SQLMSG, ptr_st_err_msg->c_err_msg );
							free((char*)ptr_st_contract);
							free((char*)ptr_st_cntrt_gen_inf);
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg , 0 );
							free((char*)ptr_st_err_msg);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
        }

				if(sql_xsm_surv_ind > 0)
        {
           c_err_type = 'P';
           fn_userlog(c_ServiceName,"Message for surveillance action");

           EXEC SQL
            SELECT  NVL(SIM_DESC, '' ),
            NVL(SIM_SHORT_CD, '' )
            INTO    :sql_sim_desc,
                    :sql_sim_short_cd
            FROM    SIM_SURV_INDCTR_MSTR
            WHERE   SIM_SURV_IND  = :sql_xsm_surv_ind;

            SETNULL(sql_sim_desc);
            SETNULL(sql_sim_short_cd);

           if(DEBUG_MSG_LVL_3)
           {
             fn_userlog(c_ServiceName,"Err_type |%c| Surv msg desc |%s| Short code |%s|",c_err_type,sql_sim_desc.arr,sql_sim_short_cd.arr);
           }

					 if(SQLCODE != 0)
           {
               if(SQLCODE == NO_DATA_FOUND)
               {
                 fn_userlog(c_ServiceName,"No description found for surveillance action indicator |%ld|.",sql_xsm_surv_ind);
               }
               else
               {
											fn_errlog ( c_ServiceName, "S31050", SQLMSG, ptr_st_err_msg->c_err_msg );
											free((char*)ptr_st_contract);
											free((char*)ptr_st_cntrt_gen_inf);
											Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg , 0 );
											free((char*)ptr_st_err_msg);
											tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
                }
						}
			

            /*sprintf(c_msg,"This Security is under surveillance Measure by the exchange.Surveillance Reason is : %s[%s]",sql_sim_desc
						.arr,sql_sim_short_cd.arr);*/
			
						sprintf(c_msg,"%s[%s]",sql_sim_desc.arr,sql_sim_short_cd.arr);


            rtrim(c_msg);
         }
				 else
				 {
							c_err_type='N';
				 }


	/*** Ver 2.1 End ***/


  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*3 );
  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog ( c_ServiceName, "B25000", TPMSG, ptr_st_err_msg->c_err_msg );
    /** tpfree ( ( char * ) ptr_st_cntrt_gen_inf ); ** ver 1.7 **/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg , 0 );   
    free((char*)ptr_st_contract);  /** Ver 1.7 **/
    free((char*)ptr_st_cntrt_gen_inf); /** Ver 1.7 **/
    free((char*)ptr_st_err_msg); /** Ver 1.7 **/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
  }

  /******* Ver 1.5 Starts Here *******/
  i_returncode = fn_pack_vartofml(c_ServiceName,
                                  c_errmsg,
                                  &ptr_fml_Obuf,
                                  28,  /** Ver 1.9 , changed 25 to 26 **/ /** Ver 2.1 , changed 26 to 28 **/
                                  FFO_XCHNG_CD, (char*)ptr_st_cntrt_gen_inf->c_xchng_cd,
                                  FFO_PRDCT_TYP, (char*)&ptr_st_cntrt_gen_inf->c_prd_typ,
                                  FFO_UNDRLYNG, (char*)ptr_st_cntrt_gen_inf->c_undrlyng,
                                  FFO_EXPRY_DT, (char*)ptr_st_cntrt_gen_inf->c_expry_dt,
                                  FFO_EXER_TYP, (char*)&ptr_st_cntrt_gen_inf->c_exrc_typ,
                                  FFO_OPT_TYP, (char*)&ptr_st_cntrt_gen_inf->c_opt_typ,
                                  FFO_STRK_PRC, (char*)&ptr_st_cntrt_gen_inf->l_strike_prc,
                                  FFO_CTGRY_INDSTK, (char*)&ptr_st_cntrt_gen_inf->c_ctgry_indstk,
                                  FFO_CA_LVL, (char*)&ptr_st_cntrt_gen_inf->l_ca_lvl,
                                  FFO_PRMTD_TO_TRD, (char*)&ptr_st_cntrt_gen_inf->l_prmtd_to_trd,
                                  FFO_CNTRCT_STTS, (char*)&ptr_st_cntrt_gen_inf->l_stts,
                                  FFO_MIN_LOT_QTY, (char*)&ptr_st_cntrt_gen_inf->l_min_lot_qty,
                                  FFO_BOARD_LOT_QTY, (char*)&ptr_st_cntrt_gen_inf->l_board_lot_qty,
                                  FFO_TCK_SZ, (char*)&ptr_st_cntrt_gen_inf->l_tick_sz,
                                  FFO_RCRD_DT, (char*)ptr_st_cntrt_gen_inf->c_record_dt,
                                  FFO_ND_STRT_DT, (char*)ptr_st_cntrt_gen_inf->c_nd_strt_dt,
                                  FFO_ND_END_DT, (char*)ptr_st_cntrt_gen_inf->c_nd_end_dt,
                                  FFO_BK_CLS_STRT_DT, (char*)ptr_st_cntrt_gen_inf->c_bk_cls_strt_dt,
                                  FFO_BK_CLS_END_DT, (char*)ptr_st_cntrt_gen_inf->c_bk_cls_end_dt,
                                  FFO_SETLMNT_NO, (char*)&ptr_st_cntrt_gen_inf->l_setl_stlmnt_no,
                                  FFO_MULTPLR, (char*)&ptr_st_cntrt_gen_inf->l_multplr,
                                  FFO_RQST_TYP, (char*)&ptr_st_cntrt_gen_inf->c_rqst_typ,
                                  FFO_HGH_PRC_RNG, (char*)&ptr_st_cntrt_gen_inf->l_hgh_prc_rng,
                                  FFO_LOW_PRC_RNG, (char*)&ptr_st_cntrt_gen_inf->l_low_prc_rng,
                                  FFO_ROUT_CRT, (char*)ptr_st_cntrt_gen_inf->c_rout_crt,
                                  FFO_NEW_CNTRCT_TAG,(char*)&c_trail_flag,  /*** Ver 1.9 ***/
  				  FFO_SYS_MSG,(char*)c_msg,   /*** Ver 2.1 ***/
				  FFO_STLMNT_TYP,(char*)&c_err_type   /*** Ver 2.1 ***/
																	);

  if( i_returncode != 0 )
  {
    fn_errlog ( c_ServiceName, "B25000", TPMSG, ptr_st_err_msg->c_err_msg );
    /** tpfree ( ( char * ) ptr_st_cntrt_gen_inf ); ** Ver 1.7 **/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg , 0 );   /** Ver 1.5 **/
    free((char*)ptr_st_contract);  /** Ver 1.7 **/
    free((char*)ptr_st_cntrt_gen_inf); /** Ver 1.7 **/
    free((char*)ptr_st_err_msg); /** Ver 1.7 **/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); /** Ver 1.5 **/
  }
  /**** Ver 1.5 Ends HEre *******/

  /*** Ver 1.7 Starts here ****/
  free((char*)ptr_st_contract); 
  free((char*)ptr_st_cntrt_gen_inf); 
  free((char*)ptr_st_err_msg);
  /*** Ver 1.7 Ends Here ***/

  /**** Commented in Ver 1.7 ************************
  *** tpfree ( ( char * ) ptr_st_err_msg ); *********
  ** tpfree ( ( char * ) ptr_st_cntrt_gen_inf ); ** Ver 1.5 ** ver 1.7 **/
  /******** tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_st_cntrt_gen_inf, 0, 0 ); ** Ver 1.5 **/

  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 ); 

}

