/******************************************************************************/
/*	Program	    			:	SFO_UPDGEN_INF                                        */
/*                                                                            */
/*  Input             : vw_cntrt_gen_inf                                      */
/*                                                                            */
/*  Output            : vw_cntrt_gen_inf/vw_err_msg                           */
/*                                                                            */
/*  Description       : This service inserts/updates general information      */
/*                      of the contract like Minimum lot qty of the contract, */
/*                      Board lot qty, Tick size, Record date, ND start and   */
/*                      end date, Book closure start and end date             */
/*                                                                            */
/*  Log               : 1.0   20-Sep-2001    S.Swaminathan                    */
/*                    : 1.1 	19-Dec-2007   Sushil Sharma - IBM Migration     */
/*										: 1.2		02-Jan-2009		Sandeep Patil											*/
/*										: 1.3		07-Mar-2014		Swati A.B                         */
/*										: 1.4		08-May-2014		Vishnu Nair                       */
/*										: 1.5		26-Mar-2015		Ritesh D.													*/
/*                    : 1.6   14-Apr-2015   Ritesh Deolekar                   */
/*                    : 1.8   02-May-2015   Ritesh Deolekar                   */
/*                    : 1.9   20-May-2016   Ritesh Deolekar                   */
/*      							: 2.0		23-Jun-2016		Swapnil More                      */
/*										: 2.1   05-Jul-2018   Suchita Dabir              				*/	
/*										: 2.2   02-Mar-2018   Edwin Thomas              				*/	
/******************************************************************************/
/*  1.0   -  New release                                                      */
/*	1.1		-	 IBM Migration																										*/
/*	1.2   -  Changes For NNF Extended Market Hours														*/
/*	1.3   -  Printing logs for new lot size upd iss for stock under corp actn	*/
/*  1.4   -  updating lot sz of tables FMW_FNO_MKT_WTCH,FFC_FO_FVRT_CNTRCT_LST*/
/*	1.5		-	 Update Token No in Trade Quote Table.														*/
/*  1.6   -  Contract Master and Trade Quote Table Merger Changes             */
/*  1.8   -  Token No Update date added for Duplicate token No Issue.         */
/*  1.9   -  Weekly contract handling Added                                   */
/*	2.0		-	 Weekly contract handling added for optimization 									*/
/*  2.1   -  The value of ftq_setlmnt_flg is updated.                         */   
/*  2.2   -  Changed variable size to fix trailing null issue in bat_cnt_part.*/
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>             /*  Ver 1.1 : Added */
#include <fn_read_debug_lvl.h>  /*  Ver 1.1 : Added */

void SFO_UPDGEN_INF( TPSVCINFO *rqst )
{
	int	 i_trnsctn;
  int  i_qnt=0;                   	/*** Added in Ver 1.9 ***/
  int  i_rmndr=0;                   /*** Added in Ver 1.9 ***/
	char c_ServiceName[ 33];
	char c_errmsg[256];
  char mltcst_cntrct_lbl[8]="NA";   /*** Added in Ver 1.9 ***//** 6 to 8 in Ver 2.2 **/

	EXEC SQL BEGIN DECLARE SECTION;
		struct vw_cntrt_gen_inf *ptr_st_cntrct_gen_info;
	EXEC SQL END DECLARE SECTION;

	struct vw_err_msg *ptr_st_err_msg;

	ptr_st_cntrct_gen_info = ( struct vw_cntrt_gen_inf *)rqst->data;
	strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.1 : Added   */

	ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
	if ( ptr_st_err_msg ==  NULL )
	{
		fn_errlog ( c_ServiceName, "S31005", TPMSG, c_errmsg );
		tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
	}
	memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( ptr_st_cntrct_gen_info->c_rout_crt );

	i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );
	if ( i_trnsctn == -1 )
	{
		strcpy( ptr_st_err_msg->c_err_msg, c_errmsg );
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
	}

	fn_userlog(c_ServiceName, "c_rqst_typ is :%c:", ptr_st_cntrct_gen_info->c_rqst_typ);
	switch ( ptr_st_cntrct_gen_info->c_rqst_typ )
	{
		case UPDATE_STATUS:

			EXEC SQL
				UPDATE ftq_fo_trd_qt
				SET ftq_stts 				= :ptr_st_cntrct_gen_info->l_stts
				WHERE ftq_xchng_cd 	= :ptr_st_cntrct_gen_info->c_xchng_cd
				AND ftq_prdct_typ 	= :ptr_st_cntrct_gen_info->c_prd_typ
				AND ftq_undrlyng 		= :ptr_st_cntrct_gen_info->c_undrlyng
				AND ftq_expry_dt 		= to_date ( :ptr_st_cntrct_gen_info->c_expry_dt, 
	                         	            'dd-mon-yyyy' )
				AND ftq_exer_typ 		= :ptr_st_cntrct_gen_info->c_exrc_typ
				AND ftq_opt_typ 		= :ptr_st_cntrct_gen_info->c_opt_typ
				AND ftq_strk_prc 		= :ptr_st_cntrct_gen_info->l_strike_prc;

			if ( SQLCODE != 0 )
			{
    		fn_errlog ( c_ServiceName, "S31010", SQLMSG,ptr_st_err_msg->c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
			}
	 		break;

		case UPDATE_GEN_INFO:

	/**		fn_userlog(c_ServiceName,"Token No Is :%ld:",ptr_st_cntrct_gen_info->l_hgh_prc_rng); ** Commented in Ver 1.8 ** incorrect Variable Printing ***/
			fn_userlog(c_ServiceName,"Token No Is :%ld:",ptr_st_cntrct_gen_info->l_eba_cntrct_id); /*** Added in Ver 1.8 ***/
			fn_userlog(c_ServiceName,"High Price Range Is :%ld:",ptr_st_cntrct_gen_info->l_hgh_prc_rng);
			fn_userlog(c_ServiceName,"Low Price Range Is :%ld:",ptr_st_cntrct_gen_info->l_low_prc_rng);

			if(DEBUG_MSG_LVL_3)  /*** Added in Ver 1.8 below log taken above ***/ 
      {
        fn_userlog(c_ServiceName, "c_xchng_cd   is :%s:",   ptr_st_cntrct_gen_info->c_xchng_cd);
        fn_userlog(c_ServiceName, "c_prd_typ    is :%c:",   ptr_st_cntrct_gen_info->c_prd_typ);
        fn_userlog(c_ServiceName, "c_undrlyng   is :%s:",   ptr_st_cntrct_gen_info->c_undrlyng);
        fn_userlog(c_ServiceName, "c_expry_dt   is :%s:",   ptr_st_cntrct_gen_info->c_expry_dt);
        fn_userlog(c_ServiceName, "c_exrc_typ   is :%c:",   ptr_st_cntrct_gen_info->c_exrc_typ);
        fn_userlog(c_ServiceName, "c_opt_typ    is :%c:",   ptr_st_cntrct_gen_info->c_opt_typ);
        fn_userlog(c_ServiceName, "l_strike_prc is :%ld:",  ptr_st_cntrct_gen_info->l_strike_prc);
      }

			EXEC SQL
				UPDATE ftq_fo_trd_qt
				SET 	ftq_prmtd_to_trd	    = :ptr_st_cntrct_gen_info->l_prmtd_to_trd,
							ftq_stts 					    = :ptr_st_cntrct_gen_info->l_stts,
							ftq_min_lot_qty 			= :ptr_st_cntrct_gen_info->l_min_lot_qty,
							ftq_board_lot_qty 		= :ptr_st_cntrct_gen_info->l_board_lot_qty,
			/***		ftq_tck_sz 						= :ptr_st_cntrct_gen_info->l_tick_sz*100,			Commented In Ver 1.6	***/
							ftq_tck_sz 						= :ptr_st_cntrct_gen_info->l_tick_sz,			/***	Added In Ver 1.6	***/
							ftq_rcrd_dt 					= to_date(
																			:ptr_st_cntrct_gen_info->c_record_dt,
                                      'dd-mon-yyyy' ),
							ftq_nd_strt_dt 				= to_date (
																			:ptr_st_cntrct_gen_info->c_nd_strt_dt,
                                      'dd-mon-yyyy' ),
							ftq_nd_end_dt 				= to_date(
																			:ptr_st_cntrct_gen_info->c_nd_end_dt,
                                      'dd-mon-yyyy' ),
							ftq_bk_cls_strt_dt 		= to_date (
																			:ptr_st_cntrct_gen_info->c_bk_cls_strt_dt,
                                      'dd-mon-yyyy' ),
							ftq_bk_cls_end_dt 		= to_date(
																			:ptr_st_cntrct_gen_info->c_bk_cls_end_dt,
                                      'dd-mon-yyyy' ),
/*				ftq_setl_setlmnt_no  	= :ptr_st_cntrct_gen_info->l_setl_stlmnt_no*/
						  ftq_setl_setlmnt_no  	= 0,
							ftq_hgh_prc_rng 			= :ptr_st_cntrct_gen_info->l_hgh_prc_rng,
							ftq_low_prc_rng 			= :ptr_st_cntrct_gen_info->l_low_prc_rng,
							ftq_token_no					=	:ptr_st_cntrct_gen_info->l_eba_cntrct_id,			/***	Added In Ver 1.5	***/
							ftq_mrkt_typ					= decode(:ptr_st_cntrct_gen_info->l_multplr,2,'X','N'), /*** Added In Ver 1.5	***/
							ftq_token_upd_dt      = sysdate,               /*** Added in Ver 1.8 ***/
              ftq_setlmnt_flg       = decode(:ptr_st_cntrct_gen_info->l_setl_stlmnt_no,67,'C',80,'P',ftq_setlmnt_flg) /** ver 2.1 **/ 
				WHERE ftq_xchng_cd 		= :ptr_st_cntrct_gen_info->c_xchng_cd
				AND 	ftq_prdct_typ 		= :ptr_st_cntrct_gen_info->c_prd_typ
				AND 	ftq_undrlyng 			= :ptr_st_cntrct_gen_info->c_undrlyng
				AND 	ftq_expry_dt 			= to_date ( :ptr_st_cntrct_gen_info->c_expry_dt, 
	                           		          'dd-mon-yyyy' )
				AND 	ftq_exer_typ 			= :ptr_st_cntrct_gen_info->c_exrc_typ
				AND 	ftq_opt_typ 			= :ptr_st_cntrct_gen_info->c_opt_typ
				AND 	ftq_strk_prc 			= :ptr_st_cntrct_gen_info->l_strike_prc;

			if ( SQLCODE != 0 )
			{
    		fn_errlog ( c_ServiceName, "S31015", SQLMSG,ptr_st_err_msg->c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
			}

			/****	In The Following Update Statement Extended Market Type Is Stored ****/
		 /****  In The Multiplier Element Of Strucutre Contract General Info 		 ****/

			if(DEBUG_MSG_LVL_3)  /*** Ver 1.3 Log printing ***/
  		{
				fn_userlog(c_ServiceName, "Inside lot size update of UPDATE_GEN_INFO");
			
				/*** Commented in Ver 1.8 ***
				
				fn_userlog(c_ServiceName, "c_xchng_cd		is :%s:",		ptr_st_cntrct_gen_info->c_xchng_cd);
				fn_userlog(c_ServiceName, "c_prd_typ		is  :%c:",	ptr_st_cntrct_gen_info->c_prd_typ);
				fn_userlog(c_ServiceName, "c_undrlyng		is :%s:",		ptr_st_cntrct_gen_info->c_undrlyng);
				fn_userlog(c_ServiceName, "c_expry_dt		is :%s:",		ptr_st_cntrct_gen_info->c_expry_dt);
				fn_userlog(c_ServiceName, "c_exrc_typ		is :%c:",		ptr_st_cntrct_gen_info->c_exrc_typ);
				fn_userlog(c_ServiceName, "c_opt_typ		is :%c:",		ptr_st_cntrct_gen_info->c_opt_typ);
				fn_userlog(c_ServiceName, "l_strike_prc is :%ld:",	ptr_st_cntrct_gen_info->l_strike_prc);
				fn_userlog(c_ServiceName, "l_min_lot_qty is :%ld:",	ptr_st_cntrct_gen_info->l_min_lot_qty);
			
				*** Ver 1.8 Comment Ends ***/

				fn_userlog(c_ServiceName, "c_ctgry_indstk is :%c:",	ptr_st_cntrct_gen_info->c_ctgry_indstk);	/* Ver 1.4 */

			}

      /*** Commented in Ver 1.6 ***

			EXEC SQL
				UPDATE fcm_fo_cntrct_mstr
				SET 	fcm_token_no	    = :ptr_st_cntrct_gen_info->l_eba_cntrct_id,
							fcm_lot_sz 				= :ptr_st_cntrct_gen_info->l_min_lot_qty,
							fcm_mrkt_typ 			= decode(:ptr_st_cntrct_gen_info->l_multplr,2,'X','N')			* Ver 1.2 *
				WHERE fcm_xchng_cd 		  = :ptr_st_cntrct_gen_info->c_xchng_cd
				AND 	fcm_prdct_typ 		= :ptr_st_cntrct_gen_info->c_prd_typ
				AND 	fcm_undrlyng 			= :ptr_st_cntrct_gen_info->c_undrlyng
				AND 	fcm_expry_dt 			= to_date ( :ptr_st_cntrct_gen_info->c_expry_dt, 
	                           		          'dd-mon-yyyy' )
				AND 	fcm_exer_typ 			= :ptr_st_cntrct_gen_info->c_exrc_typ
				AND 	fcm_opt_typ 			= :ptr_st_cntrct_gen_info->c_opt_typ
				AND 	fcm_strk_prc 			= :ptr_st_cntrct_gen_info->l_strike_prc;

			if ( SQLCODE != 0 )
			{
    		fn_errlog ( c_ServiceName, "S31020", SQLMSG,ptr_st_err_msg->c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
			}

      *** Ver 1.6 Comment Ends ***/

			/*** Ver 1.4 Starts ***/
			
			EXEC SQL
				UPDATE FMW_FNO_MKT_WTCH
				SET		 FMW_LOT_SZ 		= :ptr_st_cntrct_gen_info->l_min_lot_qty
				WHERE	 FMW_XCHNG_CD 	= :ptr_st_cntrct_gen_info->c_xchng_cd
				AND		 FMW_PRDCT_TYP	= :ptr_st_cntrct_gen_info->c_prd_typ
				AND		 FMW_UNDRLYNG   = :ptr_st_cntrct_gen_info->c_undrlyng
				AND		 FMW_INDSTK		 	= :ptr_st_cntrct_gen_info->c_ctgry_indstk
				AND		 FMW_EXPRY_DT   = to_date ( :ptr_st_cntrct_gen_info->c_expry_dt,'dd-mon-yyyy' )
			  AND		 FMW_EXER_TYP		= :ptr_st_cntrct_gen_info->c_exrc_typ
			  AND		 FMW_OPT_TYP		= :ptr_st_cntrct_gen_info->c_opt_typ
				AND		 FMW_STRK_PRC		=	:ptr_st_cntrct_gen_info->l_strike_prc;

			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog ( c_ServiceName, "S31025", SQLMSG,ptr_st_err_msg->c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
      }
			
		 EXEC SQL
			UPDATE	FFC_FO_FVRT_CNTRCT_LST
			SET			FFC_LOT_SZ		= :ptr_st_cntrct_gen_info->l_min_lot_qty
			WHERE		FFC_XCHNG_CD	= :ptr_st_cntrct_gen_info->c_xchng_cd
			AND			FFC_PRDCT_TYP	= :ptr_st_cntrct_gen_info->c_prd_typ
			AND			FFC_UNDRLYNG	= :ptr_st_cntrct_gen_info->c_undrlyng
			AND			FFC_INDSTK		= :ptr_st_cntrct_gen_info->c_ctgry_indstk
			AND			FFC_EXPRY_DT	= to_date ( :ptr_st_cntrct_gen_info->c_expry_dt,'dd-mon-yyyy' )
			AND			FFC_EXER_TYP	= :ptr_st_cntrct_gen_info->c_exrc_typ
			AND			FFC_OPT_TYP		= :ptr_st_cntrct_gen_info->c_opt_typ
			AND			FFC_STRK_PRC	= :ptr_st_cntrct_gen_info->l_strike_prc;
		
			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog ( c_ServiceName, "S31030", SQLMSG,ptr_st_err_msg->c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
      }	
			
			/** Ver 1.4 Ends **/

			/*** Ver 1.9 Statrs ***/

			i_qnt = ptr_st_cntrct_gen_info->l_ca_lvl / 10;
      i_rmndr = ptr_st_cntrct_gen_info->l_ca_lvl % 10;

			if(i_qnt == 1)
      {
      	sprintf(mltcst_cntrct_lbl,"%d-Mon",i_rmndr);
      }
      if(i_qnt == 2)
      {
         sprintf(mltcst_cntrct_lbl,"%d-Mon",i_rmndr);
      }
  /** if(i_qnt == 3) ** commented in ver 2.0  because if exchange introduce weekly contracts more than 10 then value of i_qnt will be gtrater than 3 **/
			if(i_qnt >= 3)		/*** Ver 2.0 ****/
      {
        	i_rmndr = ptr_st_cntrct_gen_info->l_ca_lvl - 30;  /*** Ver 2.0 ***/
					sprintf(mltcst_cntrct_lbl,"%d-Wek",i_rmndr);
      }
			
			if(strcmp( mltcst_cntrct_lbl, "NA") != 0)
      {
      	EXEC SQL
          INSERT INTO FMC_FNO_MLTCST_CNTRCT
          (
          	FMC_XCHNG_CD,
            FMC_PRDCT_TYP,
            FMC_INDSTK,
            FMC_UNDRLYNG,
            FMC_EXPRY_DT,
            FMC_EXER_TYP,
            FMC_OPT_TYP,
            FMC_STRK_PRC,
            FMC_MLTCST_CNTRCT_LBL
          )
          VALUES
          (
            :ptr_st_cntrct_gen_info->c_xchng_cd,
            :ptr_st_cntrct_gen_info->c_prd_typ,
            :ptr_st_cntrct_gen_info->c_ctgry_indstk,
            :ptr_st_cntrct_gen_info->c_undrlyng,
            to_date ( :ptr_st_cntrct_gen_info->c_expry_dt,'dd-mon-yyyy' ),
            :ptr_st_cntrct_gen_info->c_exrc_typ,
            :ptr_st_cntrct_gen_info->c_opt_typ,
            :ptr_st_cntrct_gen_info->l_strike_prc,
            :mltcst_cntrct_lbl
          );
       }

			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
				fn_errlog ( c_ServiceName, "S31035", SQLMSG,ptr_st_err_msg->c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
      }

			/*** Ver 1.9 Starts ***/			

			break;

		default:
   		fn_errlog ( c_ServiceName, "S31040", "Protocol error",
																				ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
   		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
			break;
	}

	if ( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 )
	{
		strcpy( ptr_st_err_msg->c_err_msg, c_errmsg );
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
	}
	tpfree ( ( char * ) ptr_st_err_msg );
  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_st_cntrct_gen_info, 0, 0 );
}
