/*  Program           : SFO_GT_FLASHCNT                                      */
/*                                                                            */
/* Input              : FFO_EBA_MTCH_ACT_NO																		*/
/*											FFO_REQ_TYP																						*/
/*											FFO_UNDRLYNG																					*/
/*											FFO_CSE_ID																						*/
/*											FFO_ORD_TYP					-- 	1.1 													*/
/*										  FFO_STP_LSS_TGR			-- 	1.4 													*/
/*										  FFO_OPNPSTN_RT			-- 	1.4 													*/
/*											FFO_NET_TRD_VAL			-- 	1.4 													*/
/*                                                                            */
/*  Output            : FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_OPT_TYP                                           */
/*                      FFO_STRK_PRC                                          */
/*                      FFO_CTGRY_INDSTK                                      */
/*											FFO_HGH_INDX_VAL																			*/
/*											FFO_INDX_CD																						*/
/*											FFO_REMARKS 																					*/
/*										  FFO_STP_LSS_TGR			-- 	1.4 													*/
/*										  FFO_OPNPSTN_RT			-- 	1.4 													*/
/*											FFO_NET_TRD_VAL			-- 	1.4 													*/
/*                                                                            */
/******************************************************************************/
/*  Log               : 1.0 Shailesh Hinge  02-May-2022 New                   */
/*                      1.1 Ravi Malla      20-Jul-2022 Minor Changes         */
/*                      1.2 Ravi Malla      19-Sep-2022 Spira Changes         */
/*                      1.3 Ravi Malla      21-Nov-2022 Spira Changes         */
/*                      1.4 Ravi Malla      06-Dec-2022 OptionPlus            */
/*                      1.5 Ravi Malla      27-Jan-2023 OptionPlus            */
/*                      1.6 Ravi Malla      22-Feb-2023 Expiry Day Changes    */
/*                      1.7 Ankita Satav    20-Feb-2023 Spira Changes         */
/*                      1.8 Ankita Satav    26-Apr-2023 Spira Changes         */
/*                      1.9 Ravi Malla      17-May-2023 Spira Changes         */
/*                      2.0 Ravi Malla      15-Jun-2023 Ora ORA-04025 Fix     */
/******************************************************************************/
/*  This service is called from the Flash trade in two ways:                  */
/*    1.0:To return the default list of stock codes & the criteria            */
/*    1.1:To return the unique contract matching the input stockcode &criteria*/
/*    1.2:Spira changes                                                       */
/*    1.3:Spira change - changing 5 mins to 15Mins &													*/ 
/*									   - square off time allowing only till 3 digits max 999  */
/*    1.4:Option Plus Changes                       													*/ 
/*    1.5:Option Plus Changes -- market app ios handling 										  */ 
/*    1.6:Expiry Day Categeory Changes									 										  */ 
/*    1.7:Flash Trade in F&O Segment,Till Expiry Spira Changes                */
/*    1.8:Flash Trade Till Expiry Spira 1780 Changes                					*/
/*    1.9:Making CNXBAN & NIFFIN as default contracts                					*/
/*    2.0:"ORA-04025: maximum allowed library object lock allocated for" Fix	*/
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fml_def.h>
#include <fo.h>
#include <fo_view_def.h>
#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>			
#include <fml_rout.h>	
#include <fn_read_debug_lvl.h>		
#include <fo_get_records.h>			
#include <fn_session.h>	/** Ver 1.4 **/


#define MOST_TRADED_OPTION	1
#define HIGHEST_OI_OPTION	2
#define ATM_OPTION	3
#define CURRENT_MONTH_FUTURES	4	
#define EQUITY 5
#define SET_CNTRCT 'S'
#define GET_CNTRCT 'G'
#define DEFAULT 'D' 
#define CALL_CNTRCT 'C'

int fn_pnl(char *c_ServiceName, char *c_cln_mtch_accnt, char *c_errmsg, double *d_total_prft);

void SFO_GT_FLASHCNT( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

	ptr_fml_Obuf = NULL;

	char  c_ServiceName[33];
  char  c_err_msg[256]; 

	int i_returncode  = 0;  


	/** Ver 1.4 start **/
	struct vw_usr_prfl st_usr_prfl;
	struct vw_err_msg st_err_msg;
	int i_invalid = 0;
	int i_optplus=0;
	/** Ver 1.4 end **/


	char c_eq_xchng_cd[4];
	char c_category_op[50];
	char c_underlyng[7];
	char c_ord_type='\0';			/* 1.1 Minor changes */
	
	int i_actn_id = -1;
	int i_default = 0; 
	int l_category = 0; 

	int i_cntrct[15];
  int i_cntrcterr[15];

	char c_xchng_cd[4];
	char c_prdct_typ;
	char c_undrlyng_op[7]="\0";
	char c_undrlyng[7];
	char c_input_undrlyng[7];
	char c_underlyng_op[7];
	char c_expry_dt[12];
	char c_fut_expry_dt[12];
	long l_strk_prc=0;
	char c_exer_typ='\0';
	char c_opt_typ= '\0';
	long l_token_no = 0;
	long l_vol = 0;
	long l_oi = 0;
	long l_spot_prc= 0;
	int i = 0;

	int i_exist = -1;
	char c_mode = '\0';
	char c_lmt_mkt_flg='\0';
	long l_ordr_qty = 0;
	long l_cls_time = 0;
	char c_mtch_accnt[11] = "\0";
	char c_subtyp = '\0';
  char c_conf_req = 'R'; /*** Order confirmation required ***/
	long l_lmt_rt = 0;
	/** Ver 1.4 Start **/
	long l_sltp_rt = 0;
	long l_sltp_lmtrt = 0;
	long l_margin = 0;
	/** Ver 1.4 End **/
	char c_null     = '\0'; 
	long l_null = 0;
	int i_pnd_stts = 0;
	int i_open_stts = 0;
  char c_ebl_dsbl_flg = '\0';

	/** Commented in Ver 1.4 
	long l_opnpstn_qty=0;
	long l_cvr_ord=0;
	long l_flash_open=0;		Commented in Ver 1.4 **/
	double d_profit=0;
	int fav_cnt=0;
	int lot_size=0; /* Ver 1.2 */
	int min_lot=0;  /* Ver 1.2 */
	int normalflag=0;  /* Ver 1.2 */

	int max_timer=0;	/* Ver 1.3 */
	int def_time=0;	/* Ver 1.3 */

	char c_clm_span_allwd = '\0'; /* Ver 1.7 */
	int i_opn_pos=0;	/* Ver 1.7 */


  EXEC SQL BEGIN DECLARE SECTION;
		    sql_cursor     sys_cursor;
				/* Ver 1.9 start */
				varchar v_col_name[13];
				varchar v_fpm_stmt[200];
				/* Ver 1.9 End */
	EXEC SQL END DECLARE SECTION;

	ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );

	INITDBGLVL(c_ServiceName);	

	MEMSET(c_err_msg);      
	MEMSET(c_input_undrlyng);      
	MEMSET(c_underlyng);      
	MEMSET(c_underlyng_op);      
	MEMSET(c_category_op);      
	MEMSET(i_cntrct);      
	MEMSET(i_cntrcterr);      
	MEMSET(c_expry_dt);
	MEMSET(c_fut_expry_dt);

	i_cntrct    [ 0 ]   = Fget32( ptr_fml_Ibuf ,FFO_EBA_MTCH_ACT_NO,0,(char *) c_mtch_accnt,0);
  i_cntrcterr [ 0 ]   = Ferror32;
	i_cntrct    [ 1 ]   = Fget32( ptr_fml_Ibuf ,FFO_REQ_TYP,0,(char *) &c_mode,0);
  i_cntrcterr [ 1 ]   = Ferror32;

  for ( i=0 ; i < 2 ;  i++ )
  {
    if ( (i_cntrct[ i ] == -1 ) && (i_cntrcterr[ i ]  != FNOTPRES ) )
    {
      fn_userlog( c_ServiceName, "Error in :%d:",i );
      fn_errlog( c_ServiceName, "S31005", Fstrerror32( i_cntrcterr[i]),c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
		 if ( i_cntrct[ i ] == -1 && i_cntrcterr[1] == FNOTPRES)
		 {
				c_mode = 'G'; 
			  i_default = 1;
		 }
  }


	/* Ver 1.7 Start */
	 EXEC SQL
    SELECT NVL(CLM_SPAN_ALLWD,'N')
    INTO :c_clm_span_allwd
    FROM clm_clnt_mstr
    WHERE CLM_MTCH_ACCNT=:c_mtch_accnt;

   if( SQLCODE != 0 )
   {
      fn_errlog( c_ServiceName, "S31010", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
		fn_userlog(c_ServiceName,"c_clm_span_allwd=:%c:",c_clm_span_allwd);

	/* Ver 1.7 End */

  EXEC SQL
   SELECT count(0)
   INTO   :i_exist
   FROM   FFS_FO_FLASH_SETTING
   WHERE  FFS_CLM_MTCH_ACCNT= :c_mtch_accnt;

  if ( SQLCODE != 0)
  {
    fn_errlog ( c_ServiceName, "S31015", SQLMSG, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if (i_exist == 1)
	{

    EXEC SQL
      SELECT COUNT(1)
      INTO  :i_pnd_stts
      FROM FOD_FO_ORDR_DTLS,FFS_FO_FLASH_SETTING /*Ver 1.1 added FFS_FO_FLASH_SETTING */
      WHERE FOD_CLM_MTCH_ACCNT = :c_mtch_accnt 
			AND FOD_CLM_MTCH_ACCNT = FFS_CLM_MTCH_ACCNT /*Ver 1.1 */
			AND FOD_XCHNG_CD = FFS_XCHNG_CD
			AND FOD_PRDCT_TYP = FFS_PRDCT_TYP
			AND FOD_UNDRLYNG =	FFS_UNDRLYNG   
			AND FOD_EXPRY_DT = FFS_EXPRY_DT   
			AND FOD_EXER_TYP = FFS_EXER_TYP 
			AND FOD_OPT_TYP =	 FFS_OPT_TYP  
			AND FOD_STRK_PRC = FFS_STRK_PRC 
      AND FOD_ORDR_STTS IN ('O','Q','R','P')  
			AND FOD_SOURCE_FLG = 'F'; /*** Flash trade ***/

	 		if ( SQLCODE != 0)
  		{
    		fn_errlog ( c_ServiceName, "S31020", SQLMSG, c_err_msg );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}	

			EXEC SQL SELECT NVL(SUM(NVL(SUMVALUE,0)),0) INTO  :i_open_stts FROM /** Added Ver 1.7 **/
			(
       SELECT 
       	SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) )  SUMVALUE
				FROM
				(
				SELECT FOD_FC_FLAG,FOD_EXEC_QTY,FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC
        FROM   FOD_FO_ORDR_DTLS,FFS_FO_FLASH_SETTING /*Ver 1.1 added FFS_FO_FLASH_SETTING */
        WHERE  FOD_XCHNG_CD = 'NFO'
        AND    FOD_PRDCT_TYP  in ('F','O','I') AND FFS_CLM_MTCH_ACCNT  = FOD_CLM_MTCH_ACCNT	/* 1.4 */
        AND    FOD_CLM_MTCH_ACCNT = :c_mtch_accnt
			  AND    FOD_SOURCE_FLG = 'F'
				AND    FFS_MARGIN=DECODE(FOD_SQROFF_TM,-1,-1,FFS_MARGIN)		/** Added in Ver 1.8 **/
				AND   FFS_CLM_MTCH_ACCNT=FOD_CLM_MTCH_ACCNT AND FFS_PRDCT_TYP=FOD_PRDCT_TYP AND FFS_UNDRLYNG=FOD_UNDRLYNG
				AND   FFS_EXPRY_DT=FOD_EXPRY_DT AND FFS_STRK_PRC=FOD_STRK_PRC AND FFS_OPT_TYP=FOD_OPT_TYP
				AND TRUNC(FFS_EXPRY_DT) >= TRUNC(SYSDATE)/*Added for Ver 1.6*/
			UNION ALL /** Ver 1.7 Start **/
				SELECT FOD_FC_FLAG,FOD_EXEC_QTY,FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC
        FROM   FOD_FO_ORDR_DTLS_HSTRY,FFS_FO_FLASH_SETTING 
        WHERE  FOD_XCHNG_CD = 'NFO'
        AND    FOD_PRDCT_TYP  in ('F','O') AND FFS_CLM_MTCH_ACCNT  = FOD_CLM_MTCH_ACCNT	
        AND    FOD_CLM_MTCH_ACCNT = :c_mtch_accnt
			  AND    FOD_SOURCE_FLG = 'F' and (FFS_MARGIN=-1)
				AND   FFS_CLM_MTCH_ACCNT=FOD_CLM_MTCH_ACCNT AND FFS_PRDCT_TYP=FOD_PRDCT_TYP AND FFS_UNDRLYNG=FOD_UNDRLYNG
				AND   FFS_EXPRY_DT=FOD_EXPRY_DT AND FFS_STRK_PRC=FOD_STRK_PRC AND FFS_OPT_TYP=FOD_OPT_TYP
				AND TRUNC(FFS_EXPRY_DT) >= TRUNC(SYSDATE)
			  )
        GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
        HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) != 0
			UNION ALL 
				SELECT NVL(FCO_CLS_QTY,0)  SUMVALUE
        FROM   FCO_FO_FCLSOUT,FFS_FO_FLASH_SETTING 
        WHERE  FCO_XCHNG_CD = 'NFO'
        AND    FCO_PRDCT_TYP  in ('F','O') AND FFS_CLM_MTCH_ACCNT  = FCO_CLM_MTCH_ACCNT	
        AND    FCO_CLM_MTCH_ACCNT = :c_mtch_accnt
			  AND    (FFS_MARGIN=-1)
				AND   FFS_PRDCT_TYP=FCO_PRDCT_TYP AND FFS_UNDRLYNG=FCO_UNDRLYNG
				AND   FFS_EXPRY_DT=FCO_EXPRY_DT AND FFS_STRK_PRC=FCO_STRK_PRC AND FFS_OPT_TYP=FCO_OPT_TYP /** Ver 1.7 End**/
			);

      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
      {
        fn_errlog ( c_ServiceName, "S31025", SQLMSG, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"i_exist=:%d: i_pnd_stts=:%d: i_open_stts=:%d:",i_exist,i_pnd_stts,i_open_stts);
		fn_userlog( c_ServiceName, "Mode passed is :%c:",c_mode );
	}

	if (i_pnd_stts > 0  || i_open_stts > 0)
	{
		c_ebl_dsbl_flg = 'D';
	}
	else
	{
		c_ebl_dsbl_flg = 'E';
	}

	if (c_mode == DEFAULT)
	{
		i_default = 1;
	}

	if (c_mode == SET_CNTRCT )
	{
		i_cntrct    [ 0 ]   = Fget32( ptr_fml_Ibuf ,FFO_XCHNG_CD,0,(char *) c_xchng_cd,0);
		i_cntrcterr [ 0 ]   = Ferror32;
		i_cntrct    [ 1 ]   = Fget32( ptr_fml_Ibuf ,FFO_PRDCT_TYP,0,(char *) &c_prdct_typ,0);
		i_cntrcterr [ 1 ]   = Ferror32;
		i_cntrct    [ 2 ]   = Fget32( ptr_fml_Ibuf ,FFO_UNDRLYNG,0,(char *) c_undrlyng_op,0);
		i_cntrcterr [ 2 ]   = Ferror32;
		i_cntrct    [ 3 ]   = Fget32( ptr_fml_Ibuf ,FFO_EXPRY_DT,0,(char *) c_expry_dt,0);
		i_cntrcterr [ 3 ]   = Ferror32;
		i_cntrct    [ 4 ]   = Fget32( ptr_fml_Ibuf ,FFO_EXER_TYP,0,(char *) &c_exer_typ,0);
		i_cntrcterr [ 4 ]   = Ferror32;
		i_cntrct    [ 5 ]   = Fget32( ptr_fml_Ibuf ,FFO_OPT_TYP,0,(char *) &c_opt_typ,0);
		i_cntrcterr [ 5 ]   = Ferror32;
		i_cntrct    [ 6 ]   = Fget32( ptr_fml_Ibuf ,FFO_STRK_PRC,0,(char *) &l_strk_prc,0);
		i_cntrcterr [ 6 ]   = Ferror32;
		i_cntrct    [ 7 ]   = Fget32( ptr_fml_Ibuf ,FFO_LMT_MKT_SL_FLG,0,(char *) &c_lmt_mkt_flg,0);
		i_cntrcterr [ 7 ]   = Ferror32;
		i_cntrct    [ 8 ]   = Fget32( ptr_fml_Ibuf ,FFO_ORD_TOT_QTY,0,(char *) &l_ordr_qty,0);
		i_cntrcterr [ 8 ]   = Ferror32;
		i_cntrct    [ 9 ]   = Fget32( ptr_fml_Ibuf ,FFO_CLS_TM,0,(char *) &l_cls_time,0);
		i_cntrcterr [ 9 ]   = Ferror32;
		i_cntrct    [ 10 ]   = Fget32( ptr_fml_Ibuf ,FFO_RMS_PRCSD_FLG,0,(char *) &c_conf_req,0);
    i_cntrcterr [ 10 ]   = Ferror32;
    i_cntrct    [ 11 ]   = Fget32( ptr_fml_Ibuf ,FFO_LMT_RT,0,(char *) &l_lmt_rt,0);
    i_cntrcterr [ 11 ]   = Ferror32;
		/** Ver 1.4 Start **/
    i_cntrct    [ 12 ]   = Fget32( ptr_fml_Ibuf ,FFO_STP_LSS_TGR,0,(char *) &l_sltp_rt,0);
    i_cntrcterr [ 12 ]   = Ferror32;
    i_cntrct    [ 13 ]   = Fget32( ptr_fml_Ibuf ,FFO_OPNPSTN_RT,0,(char *) &l_sltp_lmtrt,0);
    i_cntrcterr [ 13 ]   = Ferror32;
    i_cntrct    [ 14 ]   = Fget32( ptr_fml_Ibuf ,FFO_NET_TRD_VAL,0,(char *) &l_margin,0);
    i_cntrcterr [ 14 ]   = Ferror32;
		/** Ver 1.4 End **/

		for ( i=0 ; i < 15 ;  i++ )
		{
			if ( (i_cntrct[ i ] == -1 ) && (i_cntrcterr[ i ]  != FNOTPRES ) )
			{
				fn_userlog( c_ServiceName, "Error in :%d:",i );
				fn_errlog( c_ServiceName, "S31030", Fstrerror32( i_cntrcterr[i]),c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			 }
				/* Ver 1.4 start **/
			 if( i==12 && i_cntrct[i] == -1 && i_cntrcterr[ i ]  == FNOTPRES)
			 {
					l_sltp_rt=0;l_sltp_lmtrt=0;l_margin=0;	
			 }
			 if( i==13 && i_cntrct[i] == -1 && i_cntrcterr[ i ]  == FNOTPRES)
			 {
					l_sltp_rt=0;l_sltp_lmtrt=0;l_margin=0;	
			 }
			 if( i==14 && i_cntrct[i] == -1 && i_cntrcterr[ i ]  == FNOTPRES)
			 {
					l_sltp_rt=0;l_sltp_lmtrt=0;l_margin=0;	
			 }
				/* Ver 1.4 end **/
		}

			/** Ver 1.3 Start */
				max_timer=0;
				EXEC SQL SELECT MAX(NVL(FFC_MAX_TIMER,15)) into :max_timer from FFC_CATEGORY_MASTER;
				if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
      	{
        	fn_errlog ( c_ServiceName, "S31035", SQLMSG, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}
			 	else if(SQLCODE == NO_DATA_FOUND)
				{
					max_timer=999;
				}
		
				if(l_cls_time>max_timer)
				{
		 		fn_userlog(c_ServiceName, "Maximum timer can be set only till %d",max_timer);
		 		fn_errlog ( c_ServiceName,"S31040","Max Timer Reached",c_err_msg);
		 		sprintf(c_err_msg,"Maximum timer can be set only till %d",max_timer);
		 		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}		
				if(DEBUG_MSG_LVL_3)
				{
		 			fn_userlog(c_ServiceName, "Setting Timer:%ld, Max Timer:%ld ",l_cls_time,max_timer);
				}
		
			/** Ver 1.3 End */

			/** Ver 1.2 Start */

			/*Ver 1.1 start */
			fav_cnt=0;
			EXEC SQL SELECT COUNT(*) INTO :fav_cnt FROM FFS_FO_FLASH_DISCRYP 
			WHERE 
				FFS_CLM_MTCH_ACCNT=:c_mtch_accnt
				AND FFS_XCHNG_CD=:c_xchng_cd
				AND FFS_PRDCT_TYP=:c_prdct_typ
				AND FFS_UNDRLYNG =:c_undrlyng_op
				AND FFS_EXPRY_DT=to_date(:c_expry_dt,'DD-Mon-YYYY')
				AND FFS_OPT_TYP=DECODE(:c_prdct_typ,'F',FFS_OPT_TYP,:c_opt_typ)
				AND FFS_STRK_PRC=DECODE(:c_prdct_typ,'F',FFS_STRK_PRC,:l_strk_prc);

			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
      {
        fn_errlog ( c_ServiceName, "S31045", SQLMSG, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

		 	if(fav_cnt>0)
		 	{
		 		fn_userlog(c_ServiceName, "This Contract we can't set as favouite as we found some discrepancy in your past transactions for MatchId :%s",c_mtch_accnt);
		 		fn_errlog ( c_ServiceName,"S31050","This Contract we can't set as favouite as we found some discrepancy in your past transactions",c_err_msg);
		 		strcpy(c_err_msg,"This Contract we can't set as favouite as we found some discrepancy in your past transactions");
		 		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		 	}
			/*Ver 1.1 end */

			/* Ver 1.2 Start */
			EXEC SQL
				SELECT nvl(ftq_min_lot_qty,1) INTO :min_lot FROM FTQ_FO_TRD_QT
				WHERE ftq_prdct_typ=DECODE(:c_prdct_typ,'I','O',:c_prdct_typ)		/** Ver 1.4 **/
				AND ftq_xchng_cd=:c_xchng_cd
				AND ftq_undrlyng=:c_undrlyng_op
				AND ftq_opt_typ=DECODE(:c_prdct_typ,'F',ftq_opt_typ,:c_opt_typ)
				AND ftq_expry_dt=to_date(:c_expry_dt,'DD-Mon-YYYY')
				AND ftq_strk_prc=DECODE(:c_prdct_typ,'F',ftq_strk_prc,:l_strk_prc);
			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
			{
				fn_errlog ( c_ServiceName, "S31055", SQLMSG, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			else if (SQLCODE == NO_DATA_FOUND)
			{
  			min_lot=1;
			}
			lot_size=l_ordr_qty/min_lot;
			/* Ver 1.2 End */
		
		if (i_exist == 0)
		{	

		 	if (tpbegin(TRAN_TIMEOUT,0)== -1)
      {
      	fn_errlog(c_ServiceName,"S31060",TPMSG,c_err_msg);
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpabort( 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

			if (c_prdct_typ == 'F' )
		  {	
				c_exer_typ = 'E';
				c_opt_typ = '*';
			}
			
			EXEC SQL
			INSERT INTO FFS_FO_FLASH_SETTING
			(
				FFS_CLM_MTCH_ACCNT,  
				FFS_XCHNG_CD,        
				FFS_PRDCT_TYP,       
				FFS_UNDRLYNG  ,      
				FFS_EXPRY_DT,        
				FFS_EXER_TYP,        
				FFS_OPT_TYP,         
				FFS_STRK_PRC,        
				FFS_LMT_MRKT_FLG,       
				FFS_LMT_RT,
				FFS_ORDR_TOT_QTY,    
				FFS_CLS_TIME,	     
				FFS_CONF_REQ,
				FFS_INS_DT	  ,
				FFS_LOT_SIZE	,
				/** Ver 1.4 Start **/
				FFS_SLTP,
				FFS_PRICE,
				FFS_MARGIN
				/** Ver 1.4 End **/
			)
			VALUES
			(
				:c_mtch_accnt,
				:c_xchng_cd,
				:c_prdct_typ,
				:c_undrlyng_op,
				to_date(:c_expry_dt,'DD-Mon-YYYY'),
				:c_exer_typ,
				:c_opt_typ,
				:l_strk_prc,
				:c_lmt_mkt_flg,
				:l_lmt_rt,
				:l_ordr_qty,
				:l_cls_time,
				:c_conf_req, 
				 SYSDATE,
				:lot_size,
				/** Ver 1.4 Start **/
				:l_sltp_rt,
				:l_sltp_lmtrt,
				:l_margin
				/** Ver 1.4 End **/
			);

      if ( SQLCODE != 0)
      {
        fn_userlog(c_ServiceName, "Error while inserting:%s:%s:%c:%s:%s:%c:%c:%ld:%c:%ld:%ld:%c",c_mtch_accnt,c_xchng_cd,c_prdct_typ,c_undrlyng_op,c_expry_dt,c_exer_typ,c_opt_typ,l_strk_prc,c_lmt_mkt_flg,l_ordr_qty,l_cls_time,c_conf_req);
			  fn_errlog ( c_ServiceName, "S31065", SQLMSG, c_err_msg );
        tpabort( 0 );
			  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

		 if (tpcommit(0) == -1)
     {
			fn_errlog(c_ServiceName,"S31070",TPMSG,c_err_msg);
      tpabort( 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		 }

	 }
	 else if (i_exist == 1 && i_pnd_stts == 0 && i_open_stts == 0)
	 {
      if (tpbegin(TRAN_TIMEOUT,0)== -1)
      {
        fn_errlog(c_ServiceName,"S31075",TPMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpabort( 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if (c_prdct_typ == 'F' )
      {
        c_exer_typ = 'E';
        c_opt_typ = '*';
      }
	   EXEC SQL
      UPDATE FFS_FO_FLASH_SETTING SET
        FFS_XCHNG_CD =			:c_xchng_cd,                        
        FFS_PRDCT_TYP =			:c_prdct_typ,                       
        FFS_UNDRLYNG  =			:c_undrlyng_op,                     
        FFS_EXPRY_DT =			to_date(:c_expry_dt,'DD-Mon-YYYY'), 
        FFS_EXER_TYP =			:c_exer_typ,                        
        FFS_OPT_TYP  =			:c_opt_typ,                         
        FFS_STRK_PRC =			:l_strk_prc,                        
        FFS_LMT_MRKT_FLG =	:c_lmt_mkt_flg,                     
        FFS_LMT_RT =				:l_lmt_rt,                          
        FFS_ORDR_TOT_QTY =	:l_ordr_qty,                        
        FFS_CLS_TIME =			:l_cls_time,                        
        FFS_CONF_REQ =			:c_conf_req,                        
        FFS_INS_DT	 =			 SYSDATE,
        FFS_LOT_SIZE =			:lot_size,                            
				/** Ver 1.4 Start **/
        FFS_SLTP		 =			:l_sltp_rt,                            
        FFS_PRICE		 =			:l_sltp_lmtrt,                            
        FFS_MARGIN	 =			:l_margin                            
				/** Ver 1.4 End **/
			WHERE FFS_CLM_MTCH_ACCNT = :c_mtch_accnt;

     if ( SQLCODE != 0)
      {
        fn_userlog(c_ServiceName, "Error while Updating:%s:%s:%c:%s:%s:%c:%c:%ld:%c:%ld:%ld:%c",c_mtch_accnt,c_xchng_cd,c_prdct_typ,c_undrlyng_op,c_expry_dt,c_exer_typ,c_opt_typ,l_strk_prc,c_lmt_mkt_flg,l_ordr_qty,l_cls_time,c_conf_req);
        fn_errlog ( c_ServiceName, "S31080", SQLMSG, c_err_msg );
        tpabort( 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
		
  	if( DEBUG_MSG_LVL_3 )
		 fn_userlog(c_ServiceName, "After  Updating:%s:%s:%c:%s:%s:%c:%c:%ld:%c:%ld:%ld:%c",c_mtch_accnt,c_xchng_cd,c_prdct_typ,c_undrlyng_op,c_expry_dt,c_exer_typ,c_opt_typ,l_strk_prc,c_lmt_mkt_flg,l_ordr_qty,l_cls_time,c_conf_req);

     if (tpcommit(0) == -1)
     {
      fn_errlog(c_ServiceName,"S31085",TPMSG,c_err_msg);
      tpabort( 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	 }
	 else
	 {
		 fn_userlog(c_ServiceName, "Contract already Set for MatchId:%s",c_mtch_accnt);
		 fn_errlog ( c_ServiceName, "Contract already Set",DEFMSG,c_err_msg);
		 strcpy(c_err_msg,"Contract already Set");
		 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	 } 
	}
	else if (c_mode == GET_CNTRCT  || c_mode == DEFAULT )
	{

	/** Ver 1.4 start **/
	/* i_err[ 0 ]   = Fget32( ptr_fml_Ibuf ,FFO_USR_ID,0,(char *) c_user_id,0);
	i_ferr[ 0 ]  = Ferror32;
	i_err[ 1 ]   = Fget32( ptr_fml_Ibuf ,FFO_SSSN_ID,0,(char *) &l_sssn_id,0);
	i_ferr[ 1 ]  = Ferror32;*/

	/*if (l_sssn_id != 0 )*/
	{
	  i_returncode = Fvftos32( ptr_fml_Ibuf, (char *) &st_usr_prfl, "vw_usr_prfl" );

		i_returncode = fn_chk_sssn( c_ServiceName, &st_usr_prfl, &st_err_msg ) ;
   	if ( i_returncode == -1 )
   	{
   	 fn_errlog(c_ServiceName,"S31090",LIBMSG, c_err_msg);
   	 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   	}
	}

	if(DEBUG_MSG_LVL_3)
	{
  fn_userlog(c_ServiceName, "Input UserId:%s:",st_usr_prfl.c_user_id);
  fn_userlog(c_ServiceName, "Input SessionId:%ld:",st_usr_prfl.l_session_id);
	}

	/*** temp added to restrict market app ***/

	/** 

		X - Android market app fingerprint login
		D - Android market app password & otp login
		I - IOS market app fingerprint login
		B - IOS market app password & otp login

	**/

	EXEC SQL SELECT 1 into :i_invalid FROM USM_SSSN_MNGR 
				 	 WHERE USM_USR_ID=:st_usr_prfl.c_user_id and USM_SSSN_ID=:st_usr_prfl.l_session_id and USM_SUP_USR_TYP in ('X','D','I','B') and USM_LOGIN_SOURCE='746'; /** Ver 1.5 added sup_usr_typ "B","X","I" **/
	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
	{
		fn_errlog ( c_ServiceName, "S31095", SQLMSG, c_err_msg );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	else if(SQLCODE == NO_DATA_FOUND)
	{
		i_invalid=0;
	}

	if( (i_pnd_stts > 0  || i_open_stts > 0) && i_invalid > 0)
	{

		i_optplus=0;
		EXEC SQL SELECT 1 into :i_optplus from FFS_FO_FLASH_SETTING WHERE FFS_CLM_MTCH_ACCNT=:c_mtch_accnt and FFS_PRDCT_TYP='I';
		if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
		{
				fn_errlog ( c_ServiceName, "S31100", SQLMSG, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if(i_optplus>0)
		{
		fn_userlog(c_ServiceName, "To access Flash on mobile, kindly close your Intraday open positions from Flash Web. User:%s",st_usr_prfl.c_user_id);
		fn_errlog ( c_ServiceName, "To access Flash on mobile, kindly close your Intraday open positions from Flash Web",DEFMSG,c_err_msg);
		strcpy(c_err_msg,"To access Flash on mobile, kindly close your Intraday open positions from Flash Web");
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
	/*** temp added to restrict market app ***/
	/** Ver 1.4 end **/

	i_cntrct    [ 0 ]   = Fget32( ptr_fml_Ibuf ,FFO_CSE_ID,0,(char *) &l_category,0);
  i_cntrcterr [ 0 ]   = Ferror32;
  i_cntrct    [ 1 ]   = Fget32( ptr_fml_Ibuf ,FFO_UNDRLYNG,0,(char *) c_input_undrlyng,0);
  i_cntrcterr [ 1 ]   = Ferror32;
	 /* 1.1 Minor changes start */
  i_cntrct    [ 2 ]   = Fget32( ptr_fml_Ibuf ,FFO_ORD_TYP,0,(char *) &c_ord_type,0);
  i_cntrcterr [ 2 ]   = Ferror32;
	 /* 1.1 Minor changes end */

	 /** Ver 1.9 Start **/

		if(c_mode == DEFAULT)
		{

		MEMSET(v_col_name.arr);

		EXEC SQL SELECT 'FPM_'||TO_CHAR(sysdate,'DY')||'_RANK' into :v_col_name from dual;
		if ( SQLCODE != 0 )
		{
			fn_errlog ( c_ServiceName, "S31105", SQLMSG, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		SETLEN(v_col_name);

		MEMSET(v_fpm_stmt.arr);
		sprintf(v_fpm_stmt.arr,"%s%s%s","SELECT NVL(FPM_UNDRLYNG,'NIFTY') FROM FPM_FO_PRIORITY_MSTR where ",v_col_name.arr,"=1 and rownum=1");
		SETLEN(v_fpm_stmt);

		EXEC SQL EXECUTE 
				BEGIN
						EXECUTE IMMEDIATE :v_fpm_stmt INTO :c_input_undrlyng;
				END;
		END-EXEC;
		if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog ( c_ServiceName, "S31110", SQLMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		else if ( SQLCODE == NO_DATA_FOUND )
		{
			strcpy(c_input_undrlyng,"NIFTY");
		}

		}
	 /** Ver 1.9 End **/


	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName, "Input l_category=:%ld:",l_category);
  	fn_userlog(c_ServiceName, "Input c_input_undrlyng:%s:",c_input_undrlyng);
  	fn_userlog(c_ServiceName, "Input c_ord_type:%c:",c_ord_type);	 /* 1.1 Minor changes */
	}

	for ( i=0 ; i < 3 ;  i++ )
  {
    if ( (i_cntrct[ i ] == -1 ) && (i_cntrcterr[ i ]  != FNOTPRES ) )
    {
      fn_userlog( c_ServiceName, "Error in :%d:",i );
      fn_errlog( c_ServiceName, "S31115", Fstrerror32( i_cntrcterr[i]),c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
		 /* 1.1 Minor changes start */
		if( i==2 && i_cntrct[i] == -1 && i_cntrcterr[ i ]  == FNOTPRES)
		{
			c_ord_type='C';		
			i_default = 1;
		}	 /* 1.1 Minor changes end*/
		else if (i_cntrct[ i ] == -1 && i_cntrcterr[ i ]  == FNOTPRES)
		{
			i_default = 1;
		}
  }

	 /* 1.1 Minor changes start*/
	if (c_ord_type !='C' && c_ord_type !='P')
			c_ord_type='C';
	if (l_category == 0 )
			i_default=1;
	/* 1.1 Minor changes end*/

	/* Ver 1.2 Start */
		lot_size=0;
		EXEC SQL SELECT NVL(FFS_LOT_SIZE,1) INTO :lot_size FROM FFS_FO_FLASH_SETTING where FFS_CLM_MTCH_ACCNT=:c_mtch_accnt;
		if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
		{
			fn_errlog ( c_ServiceName, "S31120", SQLMSG, c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		else if ( SQLCODE == NO_DATA_FOUND )
		{
			lot_size=1;
		}
	/* Ver 1.2 End*/

	/* i_returncode=fn_pnl(c_ServiceName,c_mtch_accnt,c_err_msg,&d_profit);
	if(i_returncode == -1)
	{
      fn_errlog ( c_ServiceName, "S31125", "Error in fn_pnl", c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}	for optimization commenting in Ver 1.9 but when Relized PNL required we can uncomment*/

		/* Ver 1.2 Start */
			normalflag=0;
			/* EXEC SQL select 1 into :normalflag from ftq_fo_trd_qt,FBC_FO_BRNCH_CAL where ftq_xchng_cd = 'NFO' AND ftq_qt_trdng_flg='T' AND ftq_expry_dt>= trunc(sysdate) and FBC_TRD_DT>=trunc(sysdate) and ftq_undrlyng='NIFTY' having MIN(ftq_expry_dt)-MIN(FBC_TRD_DT)>0; commented in Ver 1.9 */
			 EXEC SQL select 1 into :normalflag from ftq_fo_trd_qt,FBC_FO_BRNCH_CAL where ftq_xchng_cd = 'NFO' AND ftq_qt_trdng_flg='T' AND ftq_expry_dt>= trunc(sysdate) and FBC_TRD_DT>=trunc(sysdate) and ftq_undrlyng=:c_input_undrlyng having MIN(ftq_expry_dt)-MIN(FBC_TRD_DT)>0; /* Added in Ver 1.9 */
    if ( SQLCODE != 0 && SQLCODE!=NO_DATA_FOUND )
    {
      fn_errlog ( c_ServiceName, "S31130", SQLMSG, c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}
		else if(SQLCODE == NO_DATA_FOUND)
		{
			normalflag=0;
		}

		/** Ver 1.6 Start **/
		if(i_default==1)
		{
				l_category=1;
		}
		/** Ver 1.6 End **/

		EXEC SQL SELECT FFC_NORMAL_PRIOR INTO :l_category 
			FROM FFC_CATEGORY_MASTER WHERE (case when :normalflag>0 then FFC_NORMAL_PRIOR else  FFC_EXPIRY_PRIOR  end)=:l_category;
    if ( SQLCODE != 0 && SQLCODE!=NO_DATA_FOUND )
    {
      fn_errlog ( c_ServiceName, "S31135", SQLMSG, c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}
		else if (SQLCODE==NO_DATA_FOUND)
		{
			l_category=0;
		}

  if( DEBUG_MSG_LVL_3 )
		fn_userlog(c_ServiceName, "Input Modified l_category=:%ld:%d",l_category,normalflag);
		/* Ver 1.2 End */

  if( i_default  == 1)
	{

		if(DEBUG_MSG_LVL_3)
		{
		fn_userlog(c_ServiceName,"In default equal to 1");
		}
		/** Return the underlying drop down values and the selecttion criteria..also set the default underlying and criteria**/ 

	 
		EXEC SQL ALLOCATE :sys_cursor; 


  EXEC SQL EXECUTE
    BEGIN
      /*OPEN    :sys_cursor FOR
			select undr from(select FPM_UNDRLYNG undr, FPM_RANK from FPM_FO_PRIORITY_MSTR  union (select rtrim(fum_undrlyng) undr, 100 			from fum_fo_undrlyng_mstr where fum_prdct_typ='F' and fum_qt_trdng_flg='T' 
			minus select rtrim(FPM_UNDRLYNG),100 from FPM_FO_PRIORITY_MSTR )) order by FPM_RANK,undr ; commented in ver 1.9 */

			/** Ver 2.0 Start **/
      OPEN    :sys_cursor FOR
			select undr from
			(	 select FPM_UNDRLYNG undr,(case when TO_CHAR(sysdate,'DY')='MON' THEN FPM_MON_RANK 
				 when TO_CHAR(sysdate,'DY')='TUE' THEN FPM_TUE_RANK when TO_CHAR(sysdate,'DY')='WED' THEN FPM_WED_RANK 
				 when TO_CHAR(sysdate,'DY')='THU' THEN FPM_THU_RANK when TO_CHAR(sysdate,'DY')='FRI' THEN FPM_FRI_RANK 
				 when TO_CHAR(sysdate,'DY')='SAT' THEN FPM_SAT_RANK when TO_CHAR(sysdate,'DY')='SUN' THEN FPM_SUN_RANK 
				 else FPM_RANK end) DAYWISE 
				 from FPM_FO_PRIORITY_MSTR  
				union 
				(
				select rtrim(fum_undrlyng) undr,100 from fum_fo_undrlyng_mstr where fum_prdct_typ='F' and fum_qt_trdng_flg='T' 
				minus 
				select rtrim(FPM_UNDRLYNG),100 from FPM_FO_PRIORITY_MSTR 
				)
			) order by DAYWISE,undr ;
			/** Ver 2.0 End **/

			 /*FNO_FLASH_STK_PKG.FLASH_STOCKS(:sys_cursor,:v_col_name);*/ 		/** Added in Ver 1.9 **/

 		END;
    END-EXEC;

    if ( SQLCODE != 0 )
    {
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      fn_errlog ( c_ServiceName, "S31140", SQLMSG, c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		while (1)
    {
        EXEC SQL
          FETCH :sys_cursor 
          INTO  :c_undrlyng_op;

        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
            break;
          }
          fn_errlog( c_ServiceName, "S31145", SQLMSG, c_err_msg  );
          EXEC SQL CLOSE :sys_cursor;
      		EXEC SQL FREE :sys_cursor;
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }


		if(DEBUG_MSG_LVL_3)
		fn_userlog(c_ServiceName,"before packing:%s:", c_undrlyng_op);
					i_returncode = fn_pack_vartofml( c_ServiceName,
                                           c_err_msg,
                                           &ptr_fml_Obuf,
																					 1,
																					 FFO_INDX_CD, ( char * )c_undrlyng_op
                                           ); 
					if( i_returncode == -1 )
          {
						EXEC SQL CLOSE :sys_cursor;
						EXEC SQL FREE :sys_cursor;
            fn_errlog( c_ServiceName, "S31150", LIBMSG, c_err_msg );
            tpfree ( ( char * ) ptr_fml_Obuf );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
          }
  }	

			EXEC SQL CLOSE :sys_cursor;
			EXEC SQL FREE :sys_cursor;


		EXEC SQL ALLOCATE :sys_cursor;

  	EXEC SQL EXECUTE
    BEGIN
      OPEN    :sys_cursor FOR
			select FFC_CATEGORY from FFC_CATEGORY_MASTER where FFC_ENABLE ='Y' and FFC_XCHNG_CD='NFO'
			ORDER BY DECODE(:normalflag,0,FFC_EXPIRY_PRIOR,FFC_NORMAL_PRIOR);	/* Ver 1.2 */
 		END;
    END-EXEC;

    if ( SQLCODE != 0 )
    {
			EXEC SQL CLOSE :sys_cursor;
			EXEC SQL FREE :sys_cursor;
      fn_errlog ( c_ServiceName, "S31155", SQLMSG, c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
    }

		while (1)
    {
        EXEC SQL
          FETCH :sys_cursor 
          INTO  :c_category_op;

        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
            break;
          }
          fn_errlog( c_ServiceName, "S31160", SQLMSG, c_err_msg  );
					EXEC SQL CLOSE :sys_cursor;
					EXEC SQL FREE :sys_cursor;
      		tpfree((char *)ptr_fml_Obuf);
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

				if(DEBUG_MSG_LVL_3)
					fn_userlog(c_ServiceName,"before packing:%s:",c_category_op);
					i_returncode = fn_pack_vartofml( c_ServiceName,
                                           c_err_msg,
                                           &ptr_fml_Obuf,
																						1,
																					 FFO_REMARKS , ( char * )c_category_op
                                           );
					if( i_returncode == -1 )
          {
            fn_errlog( c_ServiceName, "S31165", LIBMSG, c_err_msg );
            tpfree ( ( char * ) ptr_fml_Obuf );
						EXEC SQL CLOSE :sys_cursor;
						EXEC SQL FREE :sys_cursor;
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
          }
  }	

				EXEC SQL CLOSE :sys_cursor;
				EXEC SQL FREE :sys_cursor;

		

	  /*if(normalflag==0)
			l_category = 3;
		else
			l_category = 1; commented in 1.6 */


		/*** Ver 1.6 Start ***/
		if(l_category ==0)
			l_category=1;
		/*** Ver 1.6 End ***/

		/** strcpy(c_input_undrlyng,"NIFTY"); commented in ver 1.9 **/
	}

  if( DEBUG_MSG_LVL_3 )
   fn_userlog( c_ServiceName,"Underlying :%s:%d",c_input_undrlyng,l_category);


		EXEC SQL
     SELECT nvl(ltq_rt*100,0)
     INTO   :l_spot_prc
		 FROM   ltq_trd_qt
		 WHERE  ltq_xchng_cd = 'NSE'
		 AND    ltq_stck_cd  = :c_input_undrlyng;
		 if(SQLCODE != 0)
		 {
				fn_errlog( c_ServiceName, "S31170", SQLMSG, c_err_msg );
				tpfree ( ( char * ) ptr_fml_Obuf );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
     }

		/* 1.1 minor changes start 
		 EXEC SQL
		 SELECT MIN(ftq_expry_dt)
			INTO :c_expry_dt
		 FROM   ftq_fo_trd_qt
		 WHERE  ftq_xchng_cd = 'NFO'
		 AND    ftq_prdct_typ = 'F'
		 AND    ftq_undrlyng = 'NIFTY'
		 AND    ftq_expry_dt >= trunc(sysdate)    
		 ORDER BY ftq_expry_dt;	*/

			 EXEC SQL
     SELECT MIN(DECODE(FTQ_INDSTK,'I',ftq_expry_dt,DECODE(ftq_prdct_typ,'F',ftq_expry_dt))),MIN(DECODE(ftq_prdct_typ,'F',ftq_expry_dt))
      INTO :c_expry_dt,:c_fut_expry_dt
     FROM   ftq_fo_trd_qt
     WHERE  ftq_xchng_cd = 'NFO'
     AND    ftq_undrlyng = :c_input_undrlyng
		 AND		ftq_opt_typ=DECODE(ftq_prdct_typ,'F','*',:c_ord_type)
		 AND 		ftq_qt_trdng_flg='T'
     AND    ftq_expry_dt >= trunc(sysdate)
     ORDER BY ftq_expry_dt;
		/* 1.1 minor changes end */
     if ( SQLCODE != 0 )
		 {	
        if ( SQLCODE == NO_DATA_FOUND || SQLCODE == NULL_RETURN )
        {
						 fn_userlog(c_ServiceName, "This Contract not allowed for trading");
						 fn_errlog ( c_ServiceName, "S31175","This Contract not allowed for trading",c_err_msg);
							strcpy(c_err_msg,"This Contract not allowed for trading");
						 tpfree ( ( char * ) ptr_fml_Obuf );
						 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
				else
				{
        fn_errlog( c_ServiceName, "S31180", SQLMSG, c_err_msg );
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }
		}

	EXEC SQL ALLOCATE :sys_cursor;

	if(l_category == MOST_TRADED_OPTION)
	{
  EXEC SQL EXECUTE
    BEGIN
      OPEN    :sys_cursor FOR
			select * from (select ftq_xchng_cd, ftq_prdct_typ,ftq_undrlyng,ftq_expry_dt,ftq_exer_typ,ftq_opt_typ, ftq_strk_prc, 
			CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
             ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END, ftq_crnt_oi,FTQ_TOKEN_NO, nvl(ftq_min_lot_qty,0)*:lot_size
			from ftq_fo_trd_qt where ftq_prdct_typ='O' and ftq_undrlyng=:c_input_undrlyng and ftq_qt_trdng_flg='T' 
			AND 	ftq_opt_typ=:c_ord_type	 /* 1.1 Minor changes */	
			AND   to_char(ftq_expry_dt,'dd-Mon-yyyy') = :c_expry_dt
			order by 8 desc) where rownum =1;

 		END;
    END-EXEC;
  } else if(l_category == HIGHEST_OI_OPTION)
	{
  EXEC SQL EXECUTE
    BEGIN
      OPEN    :sys_cursor FOR
			select * from (select ftq_xchng_cd, ftq_prdct_typ,ftq_undrlyng,ftq_expry_dt,ftq_exer_typ,ftq_opt_typ, ftq_strk_prc, 
			CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
             ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END, ftq_crnt_oi,FTQ_TOKEN_NO,nvl(ftq_min_lot_qty,0)*:lot_size
			from ftq_fo_trd_qt where ftq_prdct_typ='O' and ftq_undrlyng=:c_input_undrlyng and ftq_qt_trdng_flg='T' 
			AND 	ftq_opt_typ=:c_ord_type	 /* 1.1 Minor changes */
			AND   to_char(ftq_expry_dt,'dd-Mon-yyyy') = :c_expry_dt
			order by 9 desc) where rownum =1;

 		END;
    END-EXEC;
 } else if(l_category == ATM_OPTION)
	{

			if(c_ord_type == CALL_CNTRCT)
			{
  EXEC SQL EXECUTE
    BEGIN
      OPEN    :sys_cursor FOR
			select * from (select ftq_xchng_cd, ftq_prdct_typ,ftq_undrlyng,ftq_expry_dt,ftq_exer_typ,ftq_opt_typ, ftq_strk_prc, 
			CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
             ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END, ftq_crnt_oi,FTQ_TOKEN_NO,nvl(ftq_min_lot_qty,0)*:lot_size
			from ftq_fo_trd_qt where ftq_prdct_typ='O' and ftq_undrlyng=:c_input_undrlyng and ftq_qt_trdng_flg='T' 
			AND 	ftq_opt_typ=:c_ord_type		 /* 1.1 Minor changes */
			AND   to_char(ftq_expry_dt,'dd-Mon-yyyy') = :c_expry_dt
			AND   (ftq_opt_typ ='C' and ftq_strk_prc > :l_spot_prc)
			order by 7 ) where rownum =1;
 		END;
    END-EXEC;
			}
			else
			{
  EXEC SQL EXECUTE
    BEGIN
      OPEN    :sys_cursor FOR
			select * from (select ftq_xchng_cd, ftq_prdct_typ,ftq_undrlyng,ftq_expry_dt,ftq_exer_typ,ftq_opt_typ, ftq_strk_prc, 
			CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
             ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END, ftq_crnt_oi,FTQ_TOKEN_NO,nvl(ftq_min_lot_qty,0)*:lot_size
			from ftq_fo_trd_qt where ftq_prdct_typ='O' and ftq_undrlyng=:c_input_undrlyng and ftq_qt_trdng_flg='T' 
			AND 	ftq_opt_typ=:c_ord_type		 /* 1.1 Minor changes */
			AND   to_char(ftq_expry_dt,'dd-Mon-yyyy') = :c_expry_dt
      AND   (ftq_opt_typ ='P' and ftq_strk_prc < :l_spot_prc)
			order by 7 desc ) where rownum =1;
 		END;
    END-EXEC;
			}
 } else if(l_category == CURRENT_MONTH_FUTURES)
	{
  EXEC SQL EXECUTE
    BEGIN
      OPEN    :sys_cursor FOR
			select * from (select ftq_xchng_cd, ftq_prdct_typ,ftq_undrlyng,ftq_expry_dt,ftq_exer_typ,ftq_opt_typ, ftq_strk_prc, 
			CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
             ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END, ftq_crnt_oi,FTQ_TOKEN_NO,nvl(ftq_min_lot_qty,0)*:lot_size
			from ftq_fo_trd_qt where ftq_prdct_typ='F' and ftq_undrlyng=:c_input_undrlyng and ftq_qt_trdng_flg='T' 
			AND   to_char(ftq_expry_dt,'dd-Mon-yyyy') = :c_fut_expry_dt);

 		END;
    END-EXEC;
 } else if(l_category == EQUITY)
	{
		EXEC SQL EXECUTE
		BEGIN
		OPEN  :sys_cursor FOR
		select LTQ_XCHNG_CD,
					 'M',
					 LTQ_STCK_CD,
					 '*',
					 '*',
					 '*',
					 0,
					 0,
					 0,
					 0,
					 0 
		from ( select LTQ_STCK_CD,NVL(LTQ_VLME,0),LTQ_XCHNG_CD 
					 from LTQ_TRD_QT where LTQ_XCHNG_CD='NSE' 
					order by NVL(LTQ_VLME,0) desc ) where rownum=1;
		
    END;
    END-EXEC;

  /*EXEC SQL EXECUTE
    BEGIN
      OPEN    :sys_cursor FOR
			select undr from(select underlying undr, rank from prio union (select rtrim(fum_undrlyng) undr, 100 
			from fum_fo_undrlyng_mstr where fum_prdct_typ='F' and fum_qt_trdng_flg='T' 
			minus select rtrim(underlying),100 from prio)) order by rank;

 		END;
    END-EXEC;*/
 }
   if ( SQLCODE != 0 )
    {
      EXEC SQL CLOSE:sys_cursor;
      EXEC SQL FREE :sys_cursor;
      fn_errlog ( c_ServiceName, "S31185", SQLMSG, c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
    }

		/* Ver 1.1 Start */
		if (i_exist == 1)
		{
			EXEC SQL 
			select FFS_CLS_TIME,NVL(FFS_SLTP,0),NVL(FFS_MARGIN,0) into :l_cls_time,:l_sltp_rt,:l_margin from FFS_FO_FLASH_SETTING where FFS_CLM_MTCH_ACCNT=:c_mtch_accnt;	/* added l_sltp_rt in ver 1.4 */ /** FFS_MARGIN added in 1.7 **/
			if ( SQLCODE != 0 )
      {
         fn_errlog( c_ServiceName, "S31190", SQLMSG, c_err_msg  );
         EXEC SQL FREE :sys_cursor;
         EXEC SQL CLOSE :sys_cursor;
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         tpfree((char *)ptr_fml_Obuf);
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
		}
		else
		{
			 /** Ver 1.3 start **/
			EXEC SQL SELECT MAX(NVL(FFC_DEF_TIMER,0)) INTO :l_cls_time from FFC_CATEGORY_MASTER;
			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
         fn_errlog( c_ServiceName, "S31195", SQLMSG, c_err_msg  );
         EXEC SQL FREE :sys_cursor;
         EXEC SQL CLOSE :sys_cursor;
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         tpfree((char *)ptr_fml_Obuf);
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
			else if(SQLCODE == NO_DATA_FOUND)
			{ /** Ver 1.3 End */
				l_cls_time = 15;	/* Ver 1.3 changes from 5 to 15 */
			}/* Ver 1.3 */
		}
		/* Ver 1.1 End */

		while (1)
    {
        EXEC SQL
          FETCH :sys_cursor
          INTO  :c_xchng_cd,
								:c_prdct_typ,
								:c_undrlyng_op,
								:c_expry_dt,
								:c_exer_typ,
								:c_opt_typ,
								:l_strk_prc,
								:l_vol,
								:l_oi,
								:l_token_no,
								:l_ordr_qty;
        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
            break;
          }
          fn_errlog( c_ServiceName, "S31200", SQLMSG, c_err_msg  );
          EXEC SQL FREE :sys_cursor;
          EXEC SQL CLOSE :sys_cursor;
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpfree((char *)ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

		if(DEBUG_MSG_LVL_3)
		{
		fn_userlog(c_ServiceName,"before packing:%s:", c_undrlyng_op);
		fn_userlog(c_ServiceName,"c_xchng_cd:%s:", c_xchng_cd);
		fn_userlog(c_ServiceName,"c_prdct_typ:%c:",c_prdct_typ );
		fn_userlog(c_ServiceName,"c_undrlyng_op:%s:",c_undrlyng_op );
		fn_userlog(c_ServiceName,"c_expry_dt:%s:",c_expry_dt );
		fn_userlog(c_ServiceName,"c_exer_typ:%c:",c_exer_typ );
		fn_userlog(c_ServiceName,"c_opt_typ:%c:",c_opt_typ );
		fn_userlog(c_ServiceName,"l_strk_prc:%ld:",l_strk_prc);
		fn_userlog(c_ServiceName,"l_token_no:%ld:",l_token_no);
		fn_userlog(c_ServiceName,"l_ordr_qty:%ld:",l_ordr_qty);
		}

		c_subtyp = 'C'; /*** Display chart ***/
		c_lmt_mkt_flg = 'M'; 
		/* l_cls_time = 5; commented for 1.1 */ /*** 5 mins ***/
 
					i_returncode = fn_pack_vartofml( c_ServiceName,
                                           c_err_msg,
                                           &ptr_fml_Obuf,
																						19,
																						FFO_XCHNG_CD ,(char *) c_xchng_cd,
																						FFO_PRDCT_TYP, (char *) &c_prdct_typ,
																						FFO_UNDRLYNG, (char *) c_undrlyng_op,
																						FFO_EXPRY_DT, (char *) c_expry_dt,
																						FFO_EXER_TYP, (char * ) &c_exer_typ,
																						FFO_OPT_TYP, (char *) &c_opt_typ,
																						FFO_STRK_PRC, (long) &l_strk_prc,
																						FFO_HGH_INDX_VAL, (long) &l_token_no,
																						FFO_PLG_TYP, (char *)&c_subtyp,
                                     				FFO_LMT_MKT_SL_FLG, (char *)&c_lmt_mkt_flg,
                                     				FFO_ORD_TOT_QTY, (long) &l_ordr_qty,
                                     				FFO_CLS_TM, (long) &l_cls_time,
																						FFO_RMS_PRCSD_FLG, (char *) &c_null,
																					  FFO_LMT_RT, (char *) &l_null,
																						FFO_QT_TRDNG_FLG, (char *) &c_ebl_dsbl_flg,
																		 				FFO_RLZD_PL, (char *) &d_profit,
																						/** Ver 1.4 Start **/
																		 				FFO_STP_LSS_TGR, (char *) &l_sltp_rt,
																		 				FFO_OPNPSTN_RT, (char *) &l_sltp_lmtrt,
																		 				FFO_NET_TRD_VAL, (char *) &l_margin
																						/** Ver 1.4 End **/
                                           );
					if( i_returncode == -1 )
          {
							EXEC SQL FREE :sys_cursor;
							EXEC SQL CLOSE :sys_cursor;
							fn_errlog ( c_ServiceName, "S31205", LIBMSG, c_err_msg );
							tpfree((char *)ptr_fml_Obuf);
							tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
					}
		}
		
		EXEC SQL CLOSE :sys_cursor;
		EXEC SQL FREE :sys_cursor;

		if(DEBUG_MSG_LVL_3)
		fn_userlog(c_ServiceName,"i_default=:%d: i_exist=:%d: i_pnd_stts=:%d: i_open_stts=:%d: l_sltp_rt=:%ld:",i_default,i_exist,i_pnd_stts,i_open_stts,l_sltp_rt);
	
		/*** if ( (i_exist > 0 && i_pnd_stts > 0) || (i_exist > 0 && i_default == 1) ) *** Fav exist and pending record exist ***/	
		if ( i_exist > 0 && (i_pnd_stts > 0 || i_open_stts >0) ) /*** Fav exist and pending record exist ***/
		{
		
		 EXEC SQL
			SELECT
        FFS_XCHNG_CD,
        FFS_PRDCT_TYP,
        FFS_UNDRLYNG  ,
        FFS_EXPRY_DT,
        NVL(FFS_EXER_TYP,'E'),
        NVL(FFS_OPT_TYP,'*'),
        FFS_STRK_PRC,
        FTQ_TOKEN_NO,
				FFS_LMT_MRKT_FLG,
				FFS_LMT_RT,
				FFS_ORDR_TOT_QTY,
				FFS_CLS_TIME ,
				NVL(FFS_CONF_REQ,'R'),
				/** Ver 1.4 Start **/
				NVL(FFS_SLTP,0),
				NVL(FFS_PRICE,0),
				NVL(FFS_MARGIN,0)	/** Ver 1.4 End **/
			INTO
				:c_xchng_cd,
				:c_prdct_typ,
				:c_undrlyng_op,
				:c_expry_dt,
				:c_exer_typ,
				:c_opt_typ,
				:l_strk_prc,
				:l_token_no,
				:c_lmt_mkt_flg,
				:l_lmt_rt,
				:l_ordr_qty,
				:l_cls_time,
				:c_conf_req,
				/** Ver 1.4 Start **/
				:l_sltp_rt,
				:l_sltp_lmtrt,
				:l_margin	/** Ver 1.4 End **/
			FROM	FFS_FO_FLASH_SETTING,FTQ_FO_TRD_QT
			WHERE	FFS_CLM_MTCH_ACCNT = :c_mtch_accnt
			AND FTQ_PRDCT_TYP	= DECODE(FFS_PRDCT_TYP,'I','O',FFS_PRDCT_TYP)
			AND	FFS_UNDRLYNG  = FTQ_UNDRLYNG
			AND	FFS_EXPRY_DT  = FTQ_EXPRY_DT
			AND	FFS_OPT_TYP   = FTQ_OPT_TYP
			AND FFS_STRK_PRC  = FTQ_STRK_PRC;

			if ( SQLCODE != 0)
			{
				fn_userlog(c_ServiceName, "Error while Selecting FFS for :%s:",c_mtch_accnt);
				fn_errlog ( c_ServiceName, "S31210", SQLMSG, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}

		if(DEBUG_MSG_LVL_3)
			fn_userlog(c_ServiceName,"c_undrlyng_op:%s:",c_undrlyng_op);
		if (strcmp(c_undrlyng_op , "") != 0)
		{

		if ( i_exist > 0 && (i_pnd_stts > 0 || i_open_stts >0) )
		{
			/*** To get order/position contract displayed on chart in case of default call ***/
			ptr_fml_Obuf = NULL;
    	c_subtyp = 'C'; /*** Display chart ***/

    	i_returncode = fn_pack_vartofml( c_ServiceName,
                                     c_err_msg,
                                     &ptr_fml_Obuf,
                                     19,
                                     FFO_XCHNG_CD ,(char *) c_xchng_cd,
                                     FFO_PRDCT_TYP, (char *) &c_prdct_typ,
                                     FFO_UNDRLYNG, (char *) c_undrlyng_op,
                                     FFO_EXPRY_DT, (char *) c_expry_dt,
                                     FFO_EXER_TYP, (char *) &c_exer_typ,
                                     FFO_OPT_TYP, (char *) &c_opt_typ,
                                     FFO_STRK_PRC, (long) &l_strk_prc,
                                     FFO_HGH_INDX_VAL, (long) &l_token_no,
                                     FFO_PLG_TYP, (char *)&c_subtyp,
                                     FFO_LMT_MKT_SL_FLG, (char *)&c_lmt_mkt_flg,
                                     FFO_ORD_TOT_QTY, (long) &l_ordr_qty,
                                     FFO_CLS_TM, (long) &l_cls_time ,
                                     FFO_RMS_PRCSD_FLG, (char *) &c_conf_req ,
                                     FFO_LMT_RT, (char *) &l_lmt_rt,
                                     FFO_QT_TRDNG_FLG, (char *) &c_ebl_dsbl_flg,
																		 FFO_RLZD_PL, (char *) &d_profit,
																		/** Ver 1.4 Start **/
																		 FFO_STP_LSS_TGR, (char *) &l_sltp_rt,
																		 FFO_OPNPSTN_RT, (char *) &l_sltp_lmtrt,
																		 FFO_NET_TRD_VAL, (char *) &l_margin
																		/** Ver 1.4 End **/
                                    ); 
   		if( i_returncode == -1 )
   		{
     		fn_errlog ( c_ServiceName, "S31215", LIBMSG, c_err_msg );
     		tpfree((char *)ptr_fml_Obuf);
     		tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
   		}
		}
		/*********************************************************************************/

		/* 

		 EXEC SQL
        SELECT
            DECODE(FCP_OPNPSTN_FLW,'S',-1*FCP_OPNPSTN_QTY,0),NVL(GREATEST(ABS(FCP_ISELL_QTY), ABS(FCP_EXSELL_QTY)),0)
        INTO
            :l_opnpstn_qty,:l_cvr_ord
        FROM
            FCP_FO_SPN_CNTRCT_PSTN
        WHERE (
							FCP_XCHNG_CD,FCP_CLM_MTCH_ACCNT,FCP_PRDCT_TYP,
							FCP_UNDRLYNG,FCP_EXPRY_DT,FCP_EXER_TYP,FCP_OPT_TYP,FCP_STRK_PRC
							)=
							( 
							SELECT FFS_XCHNG_CD,FFS_CLM_MTCH_ACCNT,FFS_PRDCT_TYP,
							FFS_UNDRLYNG,FFS_EXPRY_DT,FFS_EXER_TYP,FFS_OPT_TYP,FFS_STRK_PRC 
							FROM FFS_FO_FLASH_SETTING WHERE  FFS_CLM_MTCH_ACCNT= :c_mtch_accnt
							) AND FCP_PRDCT_TYP  in ('F','O'); */

			/*	Commented in Ver 1.4 
		EXEC SQL SELECT NVL(SUM((FOD_ORDR_TOT_QTY-(FOD_CNCL_QTY+FOD_EXPRD_QTY))*DECODE(FOD_ORDR_FLW,'S',-1,1)),0) OPEN_QTY
        INTO
              :l_opnpstn_qty
        FROM
              FOD_FO_ORDR_DTLS
        WHERE (
							FOD_XCHNG_CD,FOD_CLM_MTCH_ACCNT,FOD_PRDCT_TYP,
							FOD_UNDRLYNG,FOD_EXPRY_DT,FOD_EXER_TYP,FOD_OPT_TYP,FOD_STRK_PRC
							)=
							( 
							SELECT FFS_XCHNG_CD,FFS_CLM_MTCH_ACCNT,FFS_PRDCT_TYP,
							FFS_UNDRLYNG,FFS_EXPRY_DT,FFS_EXER_TYP,FFS_OPT_TYP,FFS_STRK_PRC
							FROM FFS_FO_FLASH_SETTING WHERE  FFS_CLM_MTCH_ACCNT= :c_mtch_accnt
							) AND FOD_PRDCT_TYP  in ('F','O') and FOD_ORDR_STTS IN ('O','Q','R','P','E');

		
		if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
      {
        fn_errlog( c_ServiceName, "S31220",SQLMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      if (SQLCODE == NO_DATA_FOUND)
      {
        l_opnpstn_qty = 0;
        l_cvr_ord =0;
      }
			if (l_opnpstn_qty >0)
				l_opnpstn_qty=0;
			else 
				l_opnpstn_qty=l_opnpstn_qty*-1;

			l_flash_open=0;
      EXEC SQL SELECT NVL(SUM((FOD_ORDR_TOT_QTY-(FOD_CNCL_QTY+FOD_EXPRD_QTY))*DECODE(FOD_ORDR_FLW,'S',-1,1)),0) OPEN_QTY
        INTO
              :l_flash_open
        FROM
              FOD_FO_ORDR_DTLS
        WHERE (
							FOD_XCHNG_CD,FOD_CLM_MTCH_ACCNT,FOD_PRDCT_TYP,
							FOD_UNDRLYNG,FOD_EXPRY_DT,FOD_EXER_TYP,FOD_OPT_TYP,FOD_STRK_PRC,FOD_SOURCE_FLG
							)=
							( 
							SELECT FFS_XCHNG_CD,FFS_CLM_MTCH_ACCNT,FFS_PRDCT_TYP,
							FFS_UNDRLYNG,FFS_EXPRY_DT,FFS_EXER_TYP,FFS_OPT_TYP,FFS_STRK_PRC ,'F'
							FROM FFS_FO_FLASH_SETTING WHERE  FFS_CLM_MTCH_ACCNT= :c_mtch_accnt
							) AND FOD_PRDCT_TYP  in ('F','O') and FOD_ORDR_STTS IN ('O','Q','R','P','E');

			if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
      {
        fn_errlog( c_ServiceName, "S31225",SQLMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      if (SQLCODE == NO_DATA_FOUND)
      {
        l_flash_open = 0;
      }
	
			if(l_flash_open>0)
				l_flash_open=0;
			Commented in Ver 1.4 */
			

		c_subtyp = 'F'; /*** Get or Set favourite ***/		

    i_returncode = fn_pack_vartofml( c_ServiceName,
                                     c_err_msg,
                                     &ptr_fml_Obuf,
                                     18,
                                     FFO_XCHNG_CD ,(char *) c_xchng_cd,
                                     FFO_PRDCT_TYP, (char *) &c_prdct_typ,
                                     FFO_UNDRLYNG, (char *) c_undrlyng_op,
                                     FFO_EXPRY_DT, (char *) c_expry_dt,
                                     FFO_EXER_TYP, (char *) &c_exer_typ,
                                     FFO_OPT_TYP, (char *) &c_opt_typ,
                                     FFO_STRK_PRC, (long) &l_strk_prc,
                                     FFO_HGH_INDX_VAL, (long) &l_token_no,
																		 FFO_PLG_TYP, (char *)&c_subtyp,
																		 FFO_LMT_MKT_SL_FLG, (char *)&c_lmt_mkt_flg,
																		 FFO_ORD_TOT_QTY, (long) &l_ordr_qty,
																		 FFO_CLS_TM, (long) &l_cls_time ,
																		 FFO_RMS_PRCSD_FLG, (char *) &c_conf_req ,
																		 FFO_LMT_RT, (char *) &l_lmt_rt,
																		 FFO_QT_TRDNG_FLG, (char *) &c_ebl_dsbl_flg,
																		 FFO_STP_LSS_TGR, (char *) &l_sltp_rt,
																		 FFO_OPNPSTN_RT, (char *) &l_sltp_lmtrt,
																		 FFO_NET_TRD_VAL, (char *) &l_margin
                                    );
    if( i_returncode == -1 )
    {
      fn_errlog ( c_ServiceName, "S31230", LIBMSG, c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
    }

		if(DEBUG_MSG_LVL_3)
		{
    fn_userlog(c_ServiceName,"After packing fav contract:%s:", c_undrlyng_op);
    fn_userlog(c_ServiceName,"c_xchng_cd:%s:", c_xchng_cd);
    fn_userlog(c_ServiceName,"c_prdct_typ:%c:",c_prdct_typ );
    fn_userlog(c_ServiceName,"c_undrlyng_op:%s:",c_undrlyng_op );
    fn_userlog(c_ServiceName,"c_expry_dt:%s:",c_expry_dt );
    fn_userlog(c_ServiceName,"c_exer_typ:%c:",c_exer_typ );
    fn_userlog(c_ServiceName,"c_opt_typ:%c:",c_opt_typ );
    fn_userlog(c_ServiceName,"l_strk_prc:%ld:",l_strk_prc);
    fn_userlog(c_ServiceName,"l_token_no:%ld:",l_token_no);
    fn_userlog(c_ServiceName,"l_ordr_qty:%ld:",l_ordr_qty);
    fn_userlog(c_ServiceName,"l_lmt_rt:%ld:",l_lmt_rt);
		}

		/** Commented in Ver 1.4 
    fn_userlog(c_ServiceName,"l_opnpstn_qty:%ld:l_cvr_ord:%ld:l_flash_open:%ld:",l_opnpstn_qty,l_cvr_ord,l_flash_open);

		MEMSET(c_err_msg);		Commented in Ver 1.4 **/
    /*if((l_opnpstn_qty+l_cvr_ord-l_flash_open) >0)*/  /* Default load */
		/*** Commented in Ver 1.4 
		if(l_opnpstn_qty>0 && l_flash_open>0)
    {
     fn_userlog( c_ServiceName, "Since you have traded the same contracts from the website, Kindly square off your open positions on this contract from site open position tab and then restart trading from flashTrade");
     strcpy(c_err_msg,"Since you have traded the same contract from the website, Kindly square off your open positions on this contract from site open position tab and then restart trading from flashTrade");
     Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    }	 Commented in Ver 1.4 ***/
	 }
	}
  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
}

int fn_pnl1(char *c_ServiceName,
                   char *c_cln_mtch_accnt,
                   char *c_errmsg,
                   double *d_total_prft
									)
{
  char c_trd_dt;

  long int li_qty_bal = 0;
  long int li_uncrst_qty = 0;
  long int li_cum_exctd_qty = 0;
  long int li_net_qty_bal   = 0;
  long int li_exctd_rt      = 0;
  long int li_exctd_qty     = 0;
  long int li_crst_qty      = 0;
  long int li_bal_qty       = 0;
  long l_tot_buy_qty        = 0;

  double d_frsh_brk         = 0;
  double d_cvr_brk          = 0;
  double d_buy_val          = 0;
  double d_sell_val         = 0;
  double d_net_avg_rt       = 0;
  double d_opn_sell_val       = 0;
	double d_crst_prft=0,d_avg_pr=0;
	


  sql_cursor trd_cursor;

  /* struct st_cntrct_qt st_cntrct_qt;

   st_cntrct_qt.l_lst_trdd_prc = d_ltp;*/

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Inside Function fn_pnl1 ");
  }

  if( DEBUG_MSG_LVL_5 )
  {
    fn_userlog(c_ServiceName,"Match Account Is ;%s:",c_cln_mtch_accnt);
  }

   EXEC SQL
    SELECT  NVL ( SUM ( ftd_exctd_qty ), 0), NVL ( SUM ( ( ftd_exctd_qty * ftd_exctd_rt ) - NVL ( ftd_frs_brkg,0 )- NVL ( ftd_cvr_brkg,0 )), 0 )
    INTO    :l_tot_buy_qty,
            :d_buy_val
    FROM    ftd_fo_trd_dtls,FOD_FO_ORDR_DTLS
    WHERE   FTD_ORDR_RFRNC 			= FOD_ORDR_RFRNC
	  AND 	  ftd_clm_mtch_accnt  = :c_cln_mtch_accnt
    AND     ftd_prdct_typ in ('F','O')
    AND     ftd_trd_flw         = 'B'
		AND 		FOD_SOURCE_FLG			= 'F';

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31235", SQLMSG, c_errmsg  );
      return -1;
    }
   EXEC SQL ALLOCATE :trd_cursor;

        EXEC SQL  EXECUTE
          BEGIN
            OPEN  :trd_cursor FOR
              SELECT ftd_exctd_qty,
                     ftd_exctd_rt,
                     NVL (ftd_frs_brkg, 0),
                     NVL (ftd_cvr_brkg, 0),
                     ftd_trd_dt
              FROM ftd_fo_trd_dtls,FOD_FO_ORDR_DTLS
              WHERE   FTD_ORDR_RFRNC      = FOD_ORDR_RFRNC 
							AND 		ftd_clm_mtch_accnt  = :c_cln_mtch_accnt
              AND     ftd_prdct_typ in ('F','O')
              AND     ftd_trd_flw         = 'S'
							AND     FOD_SOURCE_FLG      = 'F'
							AND 		TRUNC(ftd_trd_dt)		= TRUNC(SYSDATE)
              ORDER BY 5;
          END;
        END-EXEC;

		  li_bal_qty = l_tot_buy_qty;
    while ( 1 )
    {
        li_qty_bal = 0;

          EXEC SQL
          FETCH :trd_cursor
          INTO :li_exctd_qty,
               :li_exctd_rt,
               :d_frsh_brk,
               :d_cvr_brk,
               :c_trd_dt;
        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
            break;
          }
          else
          {
            fn_errlog( c_ServiceName, "S31240", SQLMSG, c_errmsg  );
            EXEC SQL CLOSE :trd_cursor;
            EXEC SQL FREE :trd_cursor;
          }
        }

				
       if ( li_bal_qty > 0 )
        {
          li_crst_qty = fn_minl ( li_bal_qty, li_exctd_qty );
          d_sell_val = d_sell_val + ( (double) li_crst_qty * (double)  li_exctd_rt ) -
                      d_frsh_brk - d_cvr_brk;
          li_bal_qty = li_bal_qty - li_crst_qty;


          if ( li_bal_qty == 0 )
          {
            if(DEBUG_MSG_LVL_3)
            {
              fn_userlog(c_ServiceName,"Inside SELL li_bal_qty == 0 ");
            }

            li_uncrst_qty = li_exctd_qty - li_crst_qty;
            d_opn_sell_val = d_opn_sell_val  + ( (double) li_uncrst_qty * (double) li_exctd_rt ) - d_frsh_brk - d_cvr_brk;
          }
        }
       else
        {
          li_uncrst_qty = li_uncrst_qty + li_exctd_qty;
          d_opn_sell_val = d_opn_sell_val + ( (double) li_exctd_qty * (double) li_exctd_rt ) - d_frsh_brk - d_cvr_brk;
        }

        li_cum_exctd_qty = li_cum_exctd_qty + li_exctd_qty;
        if( (li_cum_exctd_qty  - l_tot_buy_qty) > 0)
        {
          li_qty_bal = fn_minl(li_cum_exctd_qty  - l_tot_buy_qty, li_exctd_qty);
          li_net_qty_bal = li_net_qty_bal + li_qty_bal;
        }

        if ( li_qty_bal > 0 )
        {
          d_net_avg_rt = d_net_avg_rt + (double) li_qty_bal * (double) li_exctd_rt;
        }
    }

  EXEC SQL CLOSE :trd_cursor;
  EXEC SQL FREE :trd_cursor;

  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"d_sell_val [%lf]",d_sell_val);
    fn_userlog(c_ServiceName,"d_buy_val [%lf]",d_buy_val);
    fn_userlog(c_ServiceName,"d_opn_sell_val [%lf]",d_opn_sell_val);
    fn_userlog(c_ServiceName,"li_uncrst_qty [%ld]",li_uncrst_qty);
  }

  d_avg_pr = d_net_avg_rt/(double)li_net_qty_bal;

  d_crst_prft = d_sell_val - d_buy_val;

    /*
		*d_uncrst_prft = *d_opn_sell_val - ((double) li_uncrst_qty * (double)st_cntrct_qt.l_lst_trdd_prc );
  	*d_total_prft = *d_crst_prft + *d_uncrst_prft;
  	*l_opnpstn_qty = li_uncrst_qty ;
		*/

		*d_total_prft = d_crst_prft;

  if( DEBUG_MSG_LVL_5 )    
  {
    fn_userlog(c_ServiceName,"d_avg_pr is :%lf:",d_avg_pr);
    fn_userlog(c_ServiceName,"Inside SELL Function d_crst_prft is :%lf:",d_crst_prft);
  }
}
int fn_pnl(char *c_ServiceName,
                   char *c_cln_mtch_accnt,
                   char *c_errmsg,
                   double *d_total_prft
                  )
{
  double d_frsh_brk         = 0;
  double d_cvr_brk          = 0;
  double d_exctd_qty        = 0;
  double d_exctd_rt         = 0;
  double d_crst_prft        = 0;
  int trd_cnt               = 0;

 if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Inside Function fn_pnl for Match Account Is ;%s:",c_cln_mtch_accnt);
  }
 EXEC SQL
    SELECT COUNT(*),
      NVL(SUM(ftd_exctd_qty),0),
      NVL(SUM(ftd_exctd_rt),0),
      NVL(SUM(NVL (ftd_frs_brkg, 0)),0),
      NVL(SUM(NVL (ftd_cvr_brkg, 0)),0),
      NVL(SUM((ftd_exctd_qty*(ftd_exctd_rt))*DECODE(fresh.FOD_FC_FLAG,'F',DECODE(fresh.FOD_ORDR_FLW,'S',1,-1),DECODE(fresh.FOD_ORDR_FLW,'B',-1,1))),0)
    INTO
      :trd_cnt,:d_exctd_qty,:d_exctd_rt,:d_frsh_brk,:d_cvr_brk,:d_crst_prft
    FROM ftd_fo_trd_dtls,FOD_FO_ORDR_DTLS fresh,FOD_FO_ORDR_DTLS cover
    WHERE   FTD_ORDR_RFRNC      = fresh.FOD_ORDR_RFRNC
    AND ftd_clm_mtch_accnt  = :c_cln_mtch_accnt
    AND ftd_prdct_typ in ('F','O')
    AND fresh.FOD_SOURCE_FLG      = 'F'
		AND fresh.FOD_ORDR_STTS	in ('D','B','E','P')
		AND	cover.FOD_ORDR_STTS in ('D','B','E','P') 
		AND fresh.FOD_ORDR_RFRNC = cover.FOD_SLTP_ORDR_RFRNC
    AND TRUNC(ftd_trd_dt)   = TRUNC(SYSDATE) and fresh.FOD_SLTP_ORDR_RFRNC is not null;

    if ( SQLCODE != 0  && SQLCODE !=NO_DATA_FOUND)
    {
      fn_errlog( c_ServiceName, "S31245", SQLMSG, c_errmsg  );
      return -1;
    }

    *d_total_prft = d_crst_prft-d_frsh_brk-d_cvr_brk;

    if( DEBUG_MSG_LVL_5 )
    {
    fn_userlog(c_ServiceName,"Match Accnt :%s: Cnt :%d: d_crst_prft:%lf: ",c_cln_mtch_accnt,trd_cnt,d_crst_prft);
    }
}
