/******************************************************************************/
/*	Program	    			:	SFO_GT_BILLDTLS                                       */
/*                                                                            */
/*  Input             :  FFO_XCHNG_CD                                         */
/*                       FFO_TRD_DT                                           */
/*                                                                            */
/*  Output            :  FFO_XCHNG_CD                                         */
/*                       FFO_BILL_NO                                          */
/*                       FFO_TRD_DT                                           */
/*                       FFO_PI_PO_AMT                                        */
/*                       FFO_INT_ADJ_AMT                                      */
/*                       FFO_INTADJ_RFRNC                                     */
/*                       FFO_PIPO_RFRNC                                       */
/*                       FFO_BNK_ACT_NO                                       */
/*                                                                            */
/*  Description       :  This program fetches all records which bill settlment*/
/*											 have not been uploaded for a given rundate to match  */
/*											 derivatives interface.                               */
/*                                                                            */
/*  Log               :                                                       */
/*                                                                            */
/******************************************************************************/
/*      Version 1.0      22-Dec-2001      S.Balamurugan      Release 1.0      */
/*			Version 1.1      04-Mar-2008			Sandeep Patil			 IBM Changes			*/
/*			Version 1.2      07-Dec-2013 		  Sachin Birje       PIPO Run No Pass */
/*      VQC              13-Jul-2017      Bhushan Harekar                     */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */

#include <fn_tuxlib.h>
/***	#include <fn_battmpt.h>				*** Commented in VQC ***/
#include <fo.h>
#include <fo_fml_def.h>
/***  #include <fml_def.h>			*** Commented in VQC ***/
#include <fn_log.h>			/*** Ver 1.1 ***/
#include <fn_read_debug_lvl.h>      /*** Ver 1.1 ***/

void SFO_GT_BILLDTLS( TPSVCINFO *rqst )
{

	FBFR32 *ptr_fml_Ibuf;
	FBFR32 *ptr_fml_Obuf;
	int i_returncode = 0;									/*** Variable initialized in VQC ***/
	int i_cntr = 0;											  /*** added in VQC ***/
 
  long l_run_no=0;   /** Ver 1.2 **/
	char c_ServiceName [ 33 ];
	/*** char c_err_msg [ 256 ];	*** Commente in VQC ***/

	varchar c_err_msg [ 256 ];		/*** Data type of variable is changed from char to varchar in VQC ***/

	EXEC SQL BEGIN DECLARE SECTION;
		char c_xchng_cd [ 4 ] = "\0";				/*** Variable initialized in VQC ***/
    char c_run_dt [ LEN_DATE ];
		char c_bnk_accnt [ 12 ];
	  char c_bill_no [ 50 ];	
		double d_pipo_amt = 0.0;						/*** Variable initialized in VQC ***/
		double d_intadj_amt = 0.0;					/*** Variable initialized in VQC ***/
		char c_intadj_rfrnc [ 50 ];
		char c_pipo_rfrnc [ 50 ];	
	EXEC SQL END DECLARE SECTION;

	ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, "SFO_GT_BILLDTLS" );

	INITDBGLVL(c_ServiceName);			/*** Ver 1.1 ***/

	MEMSET(c_run_dt);		 /*** added in VQC ***/
	MEMSET(c_bnk_accnt); /*** added in VQC ***/

	i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                    c_err_msg.arr,		/** .arr added in VQC **/
                                    ptr_fml_Ibuf,
                                    2,
                                    FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL,
                                    FFO_TRD_DT, (char * )c_run_dt, NULL );
	if( i_returncode != 0 )
	{
		fn_errlog( c_ServiceName, "S31005", LIBMSG , c_err_msg.arr ); /*** .arr added in VQC ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );				/*** .arr added in VQC ***/
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}

/********************************************************************
	ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

	if(ptr_fml_Obuf == NULL)
	{

		fn_errlog(c_ServiceName, "S31010", TPMSG, c_err_msg);
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
********************************************************************/

	ptr_fml_Obuf = NULL;

	EXEC SQL

		SELECT  exg_mtch_bnk_accnt 
		INTO : c_bnk_accnt 
		FROM  exg_xchng_mstr
		WHERE exg_xchng_cd = :c_xchng_cd;

	if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
	{
		fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg.arr );	/*** .arr added in VQC ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );				/*** .arr added in VQC ***/
    /***	tpfree ( ( char * ) ptr_fml_Obuf );								*** Commented in VQC ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	EXEC SQL
		DECLARE cur_bill_stlmnt CURSOR FOR
			SELECT  FBS_BILL_NO,
        			FBS_INT_ADJ_AMT,
        			FBS_PI_PO_AMT,
        			NVL(FBS_INTADJ_RFRNC,' '),
        			NVL(FBS_PIPO_RFRNC,' '),
              nvl(FBS_RUN_NO,0)   /** Ver 1.2 **/
			FROM 		FBS_FO_BILL_STLMNT
			WHERE 	FBS_XCHNG_CD = :c_xchng_cd
			AND 		FBS_RUN_DT = to_date( :c_run_dt , 'DD-Mon-YYYY' )
			AND 		FBS_MTCH_UPLD_FLG = 'N';

	EXEC SQL
		OPEN cur_bill_stlmnt;
	
		if( SQLCODE != 0 )
		{
			fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg.arr );	/*** .arr added in VQC ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );				/*** .arr added in VQC ***/
		/***	tpfree ( ( char * ) ptr_fml_Obuf );								*** Commented in VQC ***/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

	i_cntr = 0;	/*** added in VQC ***/

	while(1)
	{

		/*** Added in VQC ***/

		MEMSET(c_bill_no);
		MEMSET(c_intadj_rfrnc);
		MEMSET(c_pipo_rfrnc);
		d_intadj_amt = 0.0;
		d_pipo_amt	 = 0.0;
		l_run_no		 = 0;

		/*** VQC Ends ***/
		
		EXEC SQL
			FETCH cur_bill_stlmnt
    	INTO  :c_bill_no,
      	    :d_intadj_amt,
            :d_pipo_amt,
            :c_intadj_rfrnc,
            :c_pipo_rfrnc,
            :l_run_no;     /** Ver 1.2 **/
	
		if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg.arr ); /** .arr added in VQC **/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );			 /** .arr added in VQC **/ 
			if( i_cntr != 0 )		/*** added in VQC ***/
			{
				tpfree ( ( char * ) ptr_fml_Obuf );					
			}
   		EXEC SQL 
 			CLOSE cur_bill_stlmnt;     /***   added in VQC  ***/    
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		i_cntr = 1;				/*** added in VQC ***/

		if( SQLCODE == NO_DATA_FOUND )
		{
			break;
		}

		i_returncode = fn_pack_vartofml( c_ServiceName,
                                     c_err_msg.arr,
                                     &ptr_fml_Obuf,
                                     9,            /** Ver 1.2 Changed from 8 to 9 **/
                                 FFO_XCHNG_CD, ( char * )c_xchng_cd,
                                 FFO_BILL_NO, ( char * )c_bill_no,
                                 FFO_TRD_DT, ( char * )c_run_dt,
                                 FFO_PI_PO_AMT, ( char * )&d_pipo_amt,
																 FFO_INT_ADJ_AMT, ( char * )&d_intadj_amt,
																 FFO_INTADJ_RFRNC, ( char * )c_intadj_rfrnc,
																 FFO_PIPO_RFRNC, ( char * )c_pipo_rfrnc,
																 FFO_BNK_ACT_NO, ( char * )c_bnk_accnt,
                                 FFO_PRCS_NO, ( char * )&l_run_no );  /*** Ver 1.2 **/

    if( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg.arr ); /** .arr added in VQC **/
      tpfree ( ( char * ) ptr_fml_Obuf );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );			 /** .arr added in VQC **/
      EXEC SQL    
      CLOSE cur_bill_stlmnt;      /***    added in VQC  ***/
      tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
    }

	}		
	EXEC SQL
		CLOSE cur_bill_stlmnt;

	tpreturn( TPSUCCESS, SUCC_BFR, ( char *)ptr_fml_Obuf, 0, 0 );
}

