/******************************************************************************/
/*	Program	    			:	SFO_UPD_ORDRBK                                        */
/*                                                                            */
/*  Input             : vw_orderbook                                          */
/*                                                                            */
/*  Output            : vw_orderbook                                          */
/*                      vw_err_msg                                            */
/*                                                                            */
/*  Description       : To update the Order Book based on the following       */
/*                      request:-                                             */
/*                      INSERT_ON_ORDER_PLACEMENT      'N'                    */
/*                      UPDATE_ORDER_STATUS            'S'                    */
/*                      UPDATE_ORDER_MODIFICATION      'M'                    */
/*                      UPDATE_XCHNG_RESPONSE          'X'                    */
/*                      UPDATE_STATUS_ACK_TM           'A'                    */
/*                      UPDATE_MOD_CNTR                'C'                    */
/*                      UPDATE_TRADE_CONFIRMATION      'T'                    */
/*                      UPDATE_XCHNG_RESP_DTLS         'Z'                    */
/*                      UPDATE_FUT_CONVERSION					 'P'                    */
/*                                                                            */
/*  Log               : 1.0   03-Oct-2001   S. Swaminathan                    */
/*  Log               : 1.0   14-Jul-2002   Infotech|Sangeet                  */
/*  Log               : 1.2   23-Sep-2005   Infotech|Jagapathi                */
/*  Log								: 1.3		15-Feb-2007		Infotech|Sushil Sharma            */
/*  Log								: 1.4		10-Mar-2008		Infotech|Shailesh Hinge						*/
/*  Log							  : 1.5		01-Apr-2008   Infotech|Kunal Jadav							*/
/*  Log								: 1.6		12-Mar-2009		Infotech|Vidyayini Krish          */
/*  Log               : 1.8   22-Aug-2016   Infotech|Bhupendra Malik          */
/*  Log               : 1.9   13-Oct-2016   Infotech|Sachin Birje             */
/*  Log               : 2.0   30-Mar-2023   Infotech|bhavana                  */
/*                                                                            */
/******************************************************************************/
/*  1.0  -  New release                                                       */
/*  1.1  -  BP Changes                                                        */
/*  1.2  -  Insert CTCL ID                                                    */
/*  1.3  -  Insert USER ID on request 'N' 																		*/
/*  1.4  -  FuturePlus																												*/
/*  1.5	 -  IBM Migration Changes																							*/
/*  1.6  -  Addition of CSE ID in CRCNT22353																	*/
/*  1.8  -  My eos changes                                                     */
/*  1.9  -  FO Trail order Changes                                            */
/*	2.0  -  Real-time margin reporting regulatory changes                     */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <sqlca.h>
#include <fml32.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_read_debug_lvl.h> 		/* 1.5 */

void SFO_UPD_ORDRBK( TPSVCINFO *rqst )
{
	char c_ServiceName[ 33];
	char c_ucc_cd[13] ; /**Ver 2.0 **/
	char c_errmsg[256];
	char c_msg[256];
	int i_trnsctn=0;

	EXEC SQL BEGIN DECLARE SECTION;
		struct vw_orderbook *ptr_st_orderbook;
	EXEC SQL END DECLARE SECTION;

	struct vw_err_msg *ptr_st_err_msg;

	ptr_st_orderbook = ( struct vw_orderbook *)rqst->data;
	strcpy( c_ServiceName, rqst->name );
	
	INITDBGLVL(c_ServiceName);                /* Ver 1.5 */

	ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
	if ( ptr_st_err_msg ==  NULL )
	{
		fn_errlog ( c_ServiceName, "S31005", TPMSG, c_errmsg );
		tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
	}

	memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );

if(DEBUG_MSG_LVL_3){
  fn_userlog ( c_ServiceName,"c_oprn_typ:%c:", ptr_st_orderbook->c_oprn_typ );
  fn_userlog ( c_ServiceName,"c_undrlyng:%s:", ptr_st_orderbook->c_undrlyng );
  fn_userlog ( c_ServiceName,"C_CHANNEL:%s:", ptr_st_orderbook->c_channel ); /*1.1*/
  fn_userlog ( c_ServiceName,"C_CTCL_ID:%s:", ptr_st_orderbook->c_ctcl_id ); /*1.2*/
	fn_userlog ( c_ServiceName,"c_user_id:%s:", ptr_st_orderbook->c_user_id ); /*1.3*/
/*  fn_userlog ( c_ServiceName,"C_BP_ID:%s:", ptr_st_orderbook->c_usr_id ); */ /*1.1*/

	fn_userlog ( c_ServiceName,"c_prev_ack_tm:%s:", ptr_st_orderbook->c_prev_ack_tm ); /*1.4*/
	fn_userlog ( c_ServiceName,"c_ack_tm:%s:", ptr_st_orderbook->c_ack_tm ); /*1.4*/
	fn_userlog ( c_ServiceName,"l_cse_id:%ld:", ptr_st_orderbook->l_cse_id ); /* Ver 1.6 */
}

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( ptr_st_orderbook->c_rout_crt );

	i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );

	if ( i_trnsctn == -1 )
	{
		strcpy( ptr_st_err_msg->c_err_msg, c_errmsg );
		tpreturn ( TPFAIL, ERR_BFR,  ( char * )ptr_st_err_msg, 0, 0 );
	}
	
	/***Ver 2.0 Added Fetch ucc code from clm_mstr ***/
	MEMSET(c_ucc_cd);
	
	EXEC SQL
     SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
     INTO  :c_ucc_cd
     FROM  CLM_CLNT_MSTR
     WHERE CLM_MTCH_ACCNT =:ptr_st_orderbook->c_cln_mtch_accnt;

   if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND )
  {
    fn_userlog(c_ServiceName," Error while fetching UCC code for :%s:", ptr_st_orderbook->c_cln_mtch_accnt);
    fn_errlog( c_ServiceName, "S31010", SQLMSG, ptr_st_err_msg->c_err_msg );
		fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }

  rtrim(c_ucc_cd);
  if(DEBUG_MSG_LVL_3)
    fn_userlog(c_ServiceName," MAtch ID :%s: have ucc code :%s:", ptr_st_orderbook->c_cln_mtch_accnt, c_ucc_cd);

	/***Ver 2.0 Ends  here ***/
	switch( ptr_st_orderbook->c_oprn_typ )
	{
		case	INSERT_ON_ORDER_PLACEMENT:


			EXEC SQL
				INSERT INTO fod_fo_ordr_dtls
				(
					fod_clm_mtch_accnt,
					fod_clnt_ctgry,
					fod_ordr_rfrnc,
					fod_pipe_id,
					fod_xchng_cd,
					fod_prdct_typ,
					fod_undrlyng,
					fod_expry_dt,
					fod_exer_typ,
					fod_opt_typ,
					fod_strk_prc,
					fod_ordr_flw,
					fod_lmt_mrkt_sl_flg,
					fod_dsclsd_qty,
					fod_ordr_tot_qty,
					fod_lmt_rt,
					fod_stp_lss_tgr,
					fod_ordr_type,
					fod_ordr_valid_dt,
					fod_trd_dt,
					fod_ordr_stts,
					fod_sprd_ordr_ref,
					fod_mdfctn_cntr,
					fod_settlor,
					fod_spl_flag,
					fod_indstk,
					fod_pro_cli_ind,
					fod_channel, 		/*1.1*/
					fod_bp_id, 			/*1.1*/
					fod_ctcl_id,		/*1.2*/
					fod_usr_id,			/*1.3*/
					fod_mrkt_typ,		/*1.6*/
					fod_cse_id,      /*1.6*/
					fod_ucc_cd    /*Ver 2.0 */
				)
				VALUES
				(
					:ptr_st_orderbook->c_cln_mtch_accnt,
					:ptr_st_orderbook->l_clnt_ctgry,
					:ptr_st_orderbook->c_ordr_rfrnc,
					:ptr_st_orderbook->c_pipe_id,
					:ptr_st_orderbook->c_xchng_cd,
					:ptr_st_orderbook->c_prd_typ,
					:ptr_st_orderbook->c_undrlyng,
					to_date( :ptr_st_orderbook->c_expry_dt, 'dd-mon-yyyy' ),
					:ptr_st_orderbook->c_exrc_typ,
					:ptr_st_orderbook->c_opt_typ,
					:ptr_st_orderbook->l_strike_prc,
					:ptr_st_orderbook->c_ordr_flw,
					:ptr_st_orderbook->c_slm_flg,
					:ptr_st_orderbook->l_dsclsd_qty,
					:ptr_st_orderbook->l_ord_tot_qty,
					:ptr_st_orderbook->l_ord_lmt_rt,
					:ptr_st_orderbook->l_stp_lss_tgr,
					:ptr_st_orderbook->c_ord_typ,
					to_date( :ptr_st_orderbook->c_valid_dt,
                                       'dd-mon-yyyy' ),
					to_date( :ptr_st_orderbook->c_trd_dt,
                                       'dd-mon-yyyy' ),
					:ptr_st_orderbook->c_ordr_stts,
					:ptr_st_orderbook->c_sprd_ord_rfrnc,
					:ptr_st_orderbook->l_mdfctn_cntr,
					:ptr_st_orderbook->c_settlor,
					:ptr_st_orderbook->c_spl_flg,
					:ptr_st_orderbook->c_ctgry_indstk,
					:ptr_st_orderbook->c_pro_cli_ind,
					:ptr_st_orderbook->c_channel, 	/*1.1*/
					:ptr_st_orderbook->c_bp_id, 		/*1.1*/
					:ptr_st_orderbook->c_ctcl_id,		/*1.2*/
					:ptr_st_orderbook->c_user_id,		/*1.3*/
					:ptr_st_orderbook->c_mrkt_typ,  /* Ver 1.6 */
					:ptr_st_orderbook->l_cse_id,			/* Ver 1.6 */
					:c_ucc_cd /*Ver 2.0*/
				);
			break;

		case	UPDATE_ORDER_STATUS:
			EXEC SQL
				UPDATE	fod_fo_ordr_dtls
				SET			fod_ordr_stts = :ptr_st_orderbook->c_ordr_stts
				WHERE		fod_ordr_rfrnc=	:ptr_st_orderbook->c_ordr_rfrnc;
			break;

		case	UPDATE_ORDER_MODIFICATION:
			EXEC SQL
				UPDATE	fod_fo_ordr_dtls
				SET			fod_lmt_mrkt_sl_flg = :ptr_st_orderbook->c_slm_flg,
								fod_dsclsd_qty      = :ptr_st_orderbook->l_dsclsd_qty,
								fod_ordr_type				=	:ptr_st_orderbook->c_ord_typ,
								fod_stp_lss_tgr			=	:ptr_st_orderbook->l_stp_lss_tgr,
								fod_ordr_tot_qty		=	:ptr_st_orderbook->l_ord_tot_qty,
								fod_lmt_rt					=	:ptr_st_orderbook->l_ord_lmt_rt,
								fod_ordr_stts 			= :ptr_st_orderbook->c_ordr_stts,
								fod_ordr_valid_dt   = to_date (:ptr_st_orderbook->c_valid_dt,
                                               'dd-mon-yyyy' ),
								fod_trd_dt          = to_date (:ptr_st_orderbook->c_trd_dt,
                                               'dd-mon-yyyy' ),
								fod_lst_rqst_ack_tm = to_date (:ptr_st_orderbook->c_ack_tm,
                                               'dd-mon-yyyy hh24:mi:ss' )
				WHERE		fod_ordr_rfrnc			=	:ptr_st_orderbook->c_ordr_rfrnc;
			break;

		case	UPDATE_XCHNG_RESPONSE:
			EXEC SQL
				UPDATE	fod_fo_ordr_dtls
				SET			fod_ack_nmbr 	= :ptr_st_orderbook->c_xchng_ack
				WHERE		fod_ordr_rfrnc=	:ptr_st_orderbook->c_ordr_rfrnc;
			break;

		case	UPDATE_STATUS_ACK_TM:
			/** fod_ord_ack_tm = time at which the order entered the NSE system **/
			/** c_prev_ack_tm is a little misleading name ..                    **/
			/** fod_lst_rqst_ack_tm = acknowledge time of the last request      **/
			EXEC SQL
				UPDATE	fod_fo_ordr_dtls
				SET			fod_ordr_stts = :ptr_st_orderbook->c_ordr_stts,
								fod_ord_ack_tm = to_date (:ptr_st_orderbook->c_prev_ack_tm,
                                               'dd-mon-yyyy hh24:mi:ss' ),
								fod_lst_rqst_ack_tm = to_date (:ptr_st_orderbook->c_ack_tm,
                                               'dd-mon-yyyy hh24:mi:ss' )
				WHERE		fod_ordr_rfrnc=	:ptr_st_orderbook->c_ordr_rfrnc;
			break;

		case	UPDATE_MOD_CNTR:
			EXEC SQL
				UPDATE	fod_fo_ordr_dtls
				SET			fod_mdfctn_cntr 	= fod_mdfctn_cntr + 1,
								FOD_EOS_FLG       =:ptr_st_orderbook->c_req_typ  /*** Ver 1.8 ***/
				WHERE		fod_ordr_rfrnc=	:ptr_st_orderbook->c_ordr_rfrnc;
			break;

		case	UPDATE_TRADE_CONFIRMATION:
			EXEC SQL
				UPDATE	fod_fo_ordr_dtls
				SET			fod_exec_qty 				= :ptr_st_orderbook->l_exctd_qty,
								fod_exec_qty_day		=	:ptr_st_orderbook->l_exctd_qty_day,
								fod_ordr_stts				=	:ptr_st_orderbook->c_ordr_stts,
								fod_lst_rqst_ack_tm = to_date (:ptr_st_orderbook->c_ack_tm,
                                               'dd-mon-yyyy hh24:mi:ss' )
				WHERE		fod_ordr_rfrnc			=	:ptr_st_orderbook->c_ordr_rfrnc;
			break;

		case	UPDATE_XCHNG_RESP_DTLS:
			EXEC SQL
				UPDATE	fod_fo_ordr_dtls
				SET			fod_ordr_stts       = :ptr_st_orderbook->c_ordr_stts,
								fod_cncl_qty	      =	:ptr_st_orderbook->l_can_qty,
								fod_exprd_qty	      =	:ptr_st_orderbook->l_exprd_qty,
								fod_trd_dt          = to_date (:ptr_st_orderbook->c_trd_dt,
                                               'dd-mon-yyyy' )
				WHERE		fod_ordr_rfrnc=	:ptr_st_orderbook->c_ordr_rfrnc;
			break;

		case	UPDATE_XCHNG_RESP_DTLS_CA:
			EXEC SQL
				UPDATE	fod_fo_ordr_dtls
				SET			fod_ordr_stts       = :ptr_st_orderbook->c_ordr_stts,
								fod_cncl_qty	      =	:ptr_st_orderbook->l_can_qty,
								fod_exprd_qty	      =	:ptr_st_orderbook->l_exprd_qty,
								fod_trd_dt          = to_date (:ptr_st_orderbook->c_trd_dt,
                                               'dd-mon-yyyy' ),
								fod_lst_rqst_ack_tm = to_date (:ptr_st_orderbook->c_ack_tm,
                                               'dd-mon-yyyy hh24:mi:ss' )
				WHERE		fod_ordr_rfrnc=	:ptr_st_orderbook->c_ordr_rfrnc;
			break;

		case	UPDATE_XCHNG_RESP_DTLS_OT:
			EXEC SQL
				UPDATE	fod_fo_ordr_dtls
				SET     fod_lst_rqst_ack_tm = to_date (:ptr_st_orderbook->c_ack_tm,
                                               'dd-mon-yyyy hh24:mi:ss' ),
                fod_lmt_mrkt_sl_flg = 'L',
                fod_stp_lss_tgr     = 0,
                FOD_PRCIMPV_FLG = DECODE(FOD_PRCIMPV_FLG,'Y','N',FOD_PRCIMPV_FLG)  /** Ver 1.9 **/
				WHERE		fod_ordr_rfrnc=	:ptr_st_orderbook->c_ordr_rfrnc;
			break;

		/*********Ver 1.4 starts ************/
		case	UPDATE_FUT_CONVERSION:
			EXEC SQL
				INSERT INTO fod_fo_ordr_dtls
				(
					fod_clm_mtch_accnt,
					fod_clnt_ctgry,
					fod_ordr_rfrnc,
					fod_pipe_id,
					fod_xchng_cd,
					fod_prdct_typ,
					fod_indstk,
					fod_undrlyng,
					fod_expry_dt,
					fod_exer_typ,
					fod_opt_typ,
					fod_strk_prc,
					fod_ordr_flw,
					fod_lmt_mrkt_sl_flg,
					fod_dsclsd_qty,
					fod_ordr_tot_qty,
					fod_lmt_rt,
					fod_stp_lss_tgr,
					fod_ordr_type,
					fod_ordr_valid_dt,
					fod_trd_dt,
					fod_ordr_stts,
					fod_exec_qty,
					fod_cncl_qty,
					fod_exprd_qty,
					fod_sprd_ordr_ref,
					fod_mdfctn_cntr,
					fod_settlor,
					fod_ack_nmbr,
					fod_spl_flag,
					fod_ord_ack_tm,
					fod_lst_rqst_ack_tm,
					fod_pro_cli_ind,
					fod_exec_qty_day,
					fod_channel, 		
					fod_bp_id, 			
					fod_ctcl_id,		
					fod_usr_id, 
					fod_cse_id,	 /* Ver 1.6 */
					fod_ucc_cd /*Ver 2.0 */
				)
				VALUES
				(
					:ptr_st_orderbook->c_cln_mtch_accnt,
					:ptr_st_orderbook->l_clnt_ctgry,
					:ptr_st_orderbook->c_ordr_rfrnc,
					:ptr_st_orderbook->c_pipe_id,
					:ptr_st_orderbook->c_xchng_cd,
					:ptr_st_orderbook->c_prd_typ,
					:ptr_st_orderbook->c_ctgry_indstk,
					:ptr_st_orderbook->c_undrlyng,
					to_date( :ptr_st_orderbook->c_expry_dt, 'dd-mon-yyyy' ),
					:ptr_st_orderbook->c_exrc_typ,
					:ptr_st_orderbook->c_opt_typ,
					:ptr_st_orderbook->l_strike_prc,
					:ptr_st_orderbook->c_ordr_flw,
					:ptr_st_orderbook->c_slm_flg,
					:ptr_st_orderbook->l_dsclsd_qty,
					:ptr_st_orderbook->l_ord_tot_qty,
					:ptr_st_orderbook->l_ord_lmt_rt,
					:ptr_st_orderbook->l_stp_lss_tgr,
					:ptr_st_orderbook->c_ord_typ,
					to_date( :ptr_st_orderbook->c_valid_dt,
                                       'dd-mon-yyyy' ),
					to_date( :ptr_st_orderbook->c_trd_dt,
                                       'dd-mon-yyyy' ),
					:ptr_st_orderbook->c_ordr_stts,
					:ptr_st_orderbook->l_exctd_qty,
					:ptr_st_orderbook->l_can_qty,
					:ptr_st_orderbook->l_exprd_qty,
					:ptr_st_orderbook->c_sprd_ord_rfrnc,
					:ptr_st_orderbook->l_mdfctn_cntr,
					:ptr_st_orderbook->c_settlor,
					:ptr_st_orderbook->c_xchng_ack,
					:ptr_st_orderbook->c_spl_flg,
					to_date(:ptr_st_orderbook->c_ack_tm,'dd-mon-yyyy hh24:mi:ss' ),
					to_date(:ptr_st_orderbook->c_prev_ack_tm,'dd-mon-yyyy hh24:mi:ss' ),
					:ptr_st_orderbook->c_pro_cli_ind,
					:ptr_st_orderbook->l_exctd_qty_day,
					:ptr_st_orderbook->c_channel, 	
					:ptr_st_orderbook->c_bp_id, 	
					:ptr_st_orderbook->c_ctcl_id,	
					:ptr_st_orderbook->c_user_id,
					:ptr_st_orderbook->l_cse_id, 	/* Ver 1.6 */
					:c_ucc_cd /*Ver 2.0 */	
				);
			break;

		/*********Ver 1.4 ends ************/

		default:
			strcpy( ptr_st_err_msg->c_err_msg, "Invalid Operation Type" );
    	fn_errlog ( c_ServiceName, "S31015", DEFMSG, ptr_st_err_msg->c_err_msg );
    	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
			break;
	}
	if ( SQLCODE != 0 ) 
  {
    fn_errlog ( c_ServiceName, "S31020", SQLMSG, ptr_st_err_msg->c_err_msg );
		fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }

	if ( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 )
	{
		strcpy( ptr_st_err_msg->c_err_msg, c_errmsg );
		tpreturn ( TPFAIL, ERR_BFR,  ( char * )ptr_st_err_msg, 0, 0 );
	}
	tpfree ( ( char * ) ptr_st_err_msg );
  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_st_orderbook, 
                                  sizeof( struct vw_orderbook ), 0 );
}

