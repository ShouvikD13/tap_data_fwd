/*********************************************************************************************/
/*    Program            : bat_mrgndtls_mail                                                 */
/*                                                                                           */
/*    Input              : Exchange_code                                                     */
/*                                                                                           */
/*    Output             :                                                                   */
/*                                                                                           */
/*    Description        : This program sends margin detail mails to the customers           */
/*                                                                                   				 */
/*    Log                : 1.0  08-Apr-2008	 New Release														Sandeep  */
/*			   							 : 1.1	08-Jan-2009	 Trade Date Added For EOD-MTM						Sandeep  */									
/*											 : 1.2  16-Jan-2009  Posix Changes								  				Sandeep  */
/*											 : 1.3	17-Apr-2009	 Data Type Change From long to double		Sandeep	 */
/*											 : 1.4  06-Aug-2009  CRARE33295 & CRCSN35191  Changes				Sandeep	 */
/*                       : 1.5  19-May-2011  CRCON44062(ADM) Changes                Sachin   */
/*											 : 1.6  02-Feb-2012  MRGN STMNT CR-ISEC14-22552							Sandip	 */ 
/*											 : 1.7  20-Feb-2012  SPAN Changes 												  Swati A	 */ 
/*											 : 1.8  04-Apr-2012  BSE_NSE Combined 							  			Sandip	 */ 
/*											 : 1.9  03-Jul-2012  Inclusion of profit/Loss on Index 							 */
/*																					 exercise / asgnmnt in mrgn statement		Sandip   */
/*											 : 2.0  21-Sep-2012  Fno Backoffice Optimization						Sandip	 */ 
/*                       : 2.1  26-Mar-2014  FNO FDR Module                         Sachin B */
/*                       : 2.2  16-Sep-2016  Margin reporting with Eod Mtm          Bhupendra Malik          */
/*                       : 2.3  24-Jul-2017  Margin statement changes for  Equity Allocation - Tanmay Patel  */
/*                       : 2.4  04-Jan-2018  Margin Statement Rerun  - Tanmay Patel                          */
/*                       : 2.5  08-Feb-2018  T Day changes for Margin Statement Generation   - Tanmay Patel  */
/*                       : 2.6  13-Apr-2018  Optimization Changes - Samip M	  							               	 */
/*                       : 2.7  25-Jun-2018  Margin Statement Changes from Exchange - Samip M								 */
/*                       : 2.8  10-Dec-2018  Revision in Margin statement for FNO  segments  - Tanmay Patel  */
/*							         : 2.9  13-Oct-2020  CR-ISEC27-137651 -Review of Margin Framework for FNO - Shlok G  */
/*							         : 3.0  31-Dec-2021  Minor Changes Sum added in FBD query - Sachin Birje             */
/*************************************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <userlog.h>
#include <Usysflds.h>
#include <fn_ddr.h>
#include <fo.h>
#include <fn_battmpt.h>
#include <fn_tuxlib.h>	
#include <fn_log.h>		 
#include <fn_read_debug_lvl.h>      
#define MEMSET(A) memset(&A,'\0',sizeof(A))

void BAT_MRGNDTLS_MAIL( int argc, char* argv[] )
{
	char 	 c_ServiceName[33];
  char	 c_err_msg[256];
  int		 i_cntr;
  int		 i;
  int		 i_returncode;
	int		 i_trnsctn;
	int		 i_count = 0;
	int		 i_cnt=0;
  int    i_spn_cnt=0;             /*** Ver 2.5 ***/
	int		 i_bse_cnt=0;							/*** Ver 1.8 ***/
	int		 i_rec_count = 0;
  int		 i_option = 0;
  int		 i_mail_status = 0;
  int		 i_success_mails_sent = 0;
  int 	 i_mails_failed_other = 0;
  int 	 i_invalid_mails =0;
  int		 i_loop;
	int    i_ret_val ;					/*** Ver 1.2 ***/
  int    i_hstry_chk = 0;
	double d_pl_amt;
	double d_sprd_mrgn;
	double d_bse_sprd_mrgn;			/*** Ver 1.8 ***/
	double d_act_mrgn = 0;			/*** Ver 1.3 Data type converted from long to double ***/
	double d_act_bse_mrgn = 0;	/*** Ver 1.8 ***/
  double d_spn_act_mrgn = 0;  /*** Ver 2.9 ***/
  double d_spn_dlvr_mrgn_opnpstn =0; /*** Ver 2.9 ***/
  double d_dlvr_mrgn_opnpstn =0;     /*** Ver 2.9 ***/
	char 	 c_xchng_cd [ 4 ];		/*** Ver 1.2 ***/
	char   c_mtch_act_no[11];
  char   c_event[256];
  char   *null_ptr = 0;
	char   c_trd_dt[23];
	char	 c_xchng_dt[23];
  char   c_date[23];
	char   c_prvdate[23];
  char   c_mtch_accnt[11];
  char   c_usr_nm[31];
  char   c_email_addrss[100];
  char   c_email_addrss2[100];
  char   c_command[200];
  char   c_path[100];
  char   c_temp[50];
  char   c_opt[2];
  char   **ptr_temp;
  char   c_spn_flag = 'N' ;         /*** Ver 1.7 ***/
  char   c_bse_spn_flag = 'N' ;     /*** Ver 1.8 ***/
  char   c_run_flg;                 /*** Ver 2.4 ***/
	double d_total_limit=0;						/*** Ver 1.6 ***/
	double d_exch_tot_mrgn=0;					/*** Ver 1.6 ***/
	double d_isec_im_tot_mrgn=0;			/*** Ver 1.6 ***/
	double d_mg_int_mrgn =0.0;				/*** Ver 1.6 ***/
	double d_mg_prm=0.0;							/*** Ver 1.6 ***/
	double d_mg_tot_mrgn=0.0;					/*** Ver 1.6 ***/
	double d_mg_expsr=0.0;						/*** Ver 1.6 ***/
	int 	 i_mg_cnt=0;								/*** Ver 1.6 ***/
	double d_bse_exch_tot_mrgn=0;					/*** Ver 1.8 ***/
	double d_bse_isec_im_tot_mrgn=0;			/*** Ver 1.8 ***/
	double d_bse_mg_int_mrgn =0.0;				/*** Ver 1.8 ***/
	double d_bse_mg_prm=0.0;							/*** Ver 1.8 ***/
	double d_bse_mg_tot_mrgn=0.0;					/*** Ver 1.8 ***/
	double d_bse_mg_expsr=0.0;						/*** Ver 1.8 ***/
  double d_mg_del_mgn=0.0;              /*** Ver 2.7 ***/
  double d_mg_mtm_loss=0.0;             /*** Ver 2.7 ***/
  double d_bse_mg_del_mgn=0.0;          /*** Ver 2.7 ***/
  double d_bse_mg_mtm_loss=0.0;         /*** Ver 2.7 ***/
		
strcpy( c_ServiceName, "BAT_MRGNDTLS_MAIL");

	if( argc != 4 && argc != 6)  /****   Ver 2.4  *****/
  {
  	fn_userlog( c_ServiceName, "Usage: BAT_MRGNDTLS_MAIL <INI> <EXCHANGE_CD> <NA>");
    fn_userlog( c_ServiceName, "Usage: BAT_MRGNDTLS_MAIL <INI> <EXCHANGE_CD> <NA> <Run Flag> <Rerun Date>");
		fn_userlog( c_ServiceName, "Invalid Number of Arguments");
    return;
  }
/****    Ver 2.4 Starts ****/
  else if( argc == 4)
  {
   c_run_flg ='F';
  }
  else if(argc == 6)
  {
   if(argv[4][0] == 'R')
   {
    c_run_flg = 'R';
   }
   else
   {
    fn_userlog( c_ServiceName, "Rerun flag is not valid");
   }
  }

/****    Ver 2.4 Ends ****/

	strcpy( c_xchng_cd, argv[2] );	/*** Ver 1.2 ***/
	if(DEBUG_MSG_LVL_0)							/*** Ver 1.9 Debug Level Added **/
	{
		fn_userlog(c_ServiceName,"BAT_MRGNDTLS_MAIL Started .......");
    fn_userlog(c_ServiceName,"c_run_flg :%c:",c_run_flg);
	}

	INITBATDBGLVL(argv[0]);     
/*****************************************************************
  EXEC SQL
		SELECT (sysdate-1)
		INTO	 :c_trd_dt
		FROM		DUAL;

	if(SQLCODE != 0)
	{
		fn_userlog(c_ServiceName,"Failed To Get Current Trade Date");
    fn_errlog( c_ServiceName, "S31005",SQLMSG, c_err_msg);
    return;
	}
****************************************************/

 
  
	/*** To get the trade date on basis of sysdate ***/

  if( c_run_flg == 'F' )    /*** Ver 2.4 ***/
  {

   /*** Ver 3.0 Starts ****/
    EXEC SQL
    SELECT MAX(fbc_trd_dt)
    INTO   :c_trd_dt
    FROM   fbc_fo_brnch_cal,(SELECT GREATEST(exg_nxt_trd_dt,EXG_TMP_TRD_DT) trd_dt
                         FROM    exg_xchng_mstr
                         WHERE   exg_xchng_cd = 'NFO')
    WHERE  fbc_trd_dt < trd_dt
    AND FBC_XCHNG_CD = 'NFO';
   /*** Ver 3.0 Ends ***/

	 /*** commented in  Ver 3.0 *****
      EXEC SQL 
  		SELECT MAX(fbc_trd_dt)
			INTO   :c_trd_dt
			FROM   fbc_fo_brnch_cal
      WHERE  fbc_trd_dt < (SELECT  GREATEST(exg_nxt_trd_dt,EXG_TMP_TRD_DT)
                           FROM    exg_xchng_mstr
                           WHERE   exg_xchng_cd='NFO'); *****/  /*** where condition changed in Ver 2.5 ***/
/**			WHERE  fbc_trd_dt <trunc(sysdate); Commented in Ver 2.5 **/


		if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
		{
			fn_userlog(c_ServiceName,"Failed To Get Current Trade Date");
			fn_errlog( c_ServiceName, "S31010",SQLMSG, c_err_msg);
			return;
		}

		fn_userlog(c_ServiceName, "Value of trade date is :%s: ",c_trd_dt);
  }
  /*** Ver 2.4 Start ***/ 
  else if ( c_run_flg == 'R' ) 
  {
		 strcpy(c_trd_dt,argv[5]);
		 fn_userlog( c_ServiceName, "Value of Rerun Date is :%s: ",c_trd_dt);
  }
  /*** Ver 2.4 End ***/

	/** Ver 1.2 Starts **/
	rtrim(c_trd_dt);
	MEMSET(c_command);
	strcpy(c_command,"bat_mrgnmail_clk NFO ");
  strcat(c_command, c_xchng_cd );
  strcat(c_command, " NA ");
  strcat(c_command, c_trd_dt );
	/** Ver 1.2 Ends **/


	if(tuxgetenv("FNO_HOME") == NULL)
  {
    fn_errlog(c_ServiceName, "S31015",LIBMSG,c_err_msg);
    return;
  }

  strcpy(c_path, tuxgetenv("FNO_HOME"));

	/*** Added To Handel Spread Case ***/

  if( c_run_flg == 'F' )    /*** Ver 2.4 ***/
  {	
  
		EXEC SQL
/**		SELECT	exg_nxt_trd_dt  ** commented in Ver 2.5 **/
      SELECT  GREATEST(exg_nxt_trd_dt,exg_tmp_trd_dt)  /*** change in Ver 2.5 ***/
			INTO		:c_xchng_dt
			FROM		exg_xchng_mstr
			WHERE		exg_xchng_cd='NFO';

		if( (SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
		{
			fn_userlog(c_ServiceName,"Inside Selection Of Exchange Date"); 
			fn_errlog(c_ServiceName,"S31020",SQLMSG,c_err_msg);
			return;
		}
  }
 /*** Ver 2.4 Start ***/
  else if( c_run_flg == 'R' )
  {
		EXEC SQL
			SELECT  MIN(FBC_TRD_DT)
			INTO   :c_xchng_dt
			FROM    FBC_FO_BRNCH_CAL
			WHERE   FBC_TRD_DT > :c_trd_dt;
		
		if( (SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
		{
			fn_userlog(c_ServiceName,"Inside Selection Of Exchange Date");
			fn_errlog(c_ServiceName,"S31025",SQLMSG,c_err_msg);
			return;
		}
  }
 /*** Ver 2.4 Ends ***/

   fn_userlog(c_ServiceName," Exchange Trade date is :%s:",c_xchng_dt);
	/*** Check whether EOD-MTM completed for the trade date ***/

/*** Ver 2.5 Starts ***/
   EXEC SQL 
   SELECT COUNT(*) 
   INTO   :i_cnt
   FROM   AUDIT_PROG_RUNSTTS 
   WHERE  APR_PROG_NAME = 'bat_eod_mtm' 
   AND    APR_XCHNG_CD  = 'NFO'
   AND    APR_SUCC_FLG  = 'P'
   AND    APR_TRD_DT    = :c_trd_dt;

  if( (SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog(c_ServiceName,"S31030",SQLMSG,c_err_msg);
    return;
  }

  if ( i_cnt == 0 )
  {
    fn_bat_pst_msg ( c_ServiceName, "Can't Run The Process Before Completion EOD MTM Process", c_tag );
    fn_errlog(c_ServiceName,"S31035",DEFMSG,c_err_msg);
    return;
  }

   EXEC SQL
   SELECT COUNT(*) 
   INTO   :i_spn_cnt
   FROM   AUDIT_PROG_RUNSTTS 
   WHERE  APR_PROG_NAME = 'bat_span_eodmtm' 
   AND    APR_XCHNG_CD  = 'NFO'
   AND    APR_SUCC_FLG  = 'P'
   AND    APR_TRD_DT    = :c_trd_dt;

  if( (SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog(c_ServiceName,"S31040",SQLMSG,c_err_msg);
    return;
  }

  if ( i_spn_cnt == 0 )
  {
    fn_bat_pst_msg ( c_ServiceName, "Can't Run The Process Before Completion Span_EOD MTM Process", c_tag );
    fn_errlog(c_ServiceName,"S31045",DEFMSG,c_err_msg);
    return;
  }

   EXEC SQL
   SELECT COUNT(*) 
   INTO   :i_cnt
   FROM   AUDIT_PROG_RUNSTTS 
   WHERE  APR_PROG_NAME = 'bat_eod_mtm' 
   AND    APR_XCHNG_CD  = 'BFO'
   AND    APR_SUCC_FLG  = 'P'
   AND    APR_TRD_DT    = :c_trd_dt;

  if( (SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog(c_ServiceName,"S31050",SQLMSG,c_err_msg);
    return;
  }

  if ( i_cnt == 0 )
  {
    fn_bat_pst_msg ( c_ServiceName, "Can't Run The Process Before Completion BFO EOD MTM Process", c_tag );
    fn_errlog(c_ServiceName,"S31055",DEFMSG,c_err_msg);
    return;
  }

/****   Ver 2.5 Ends ****/
/**** Comment Stars for Ver 2.5 **** 

	EXEC SQL
		SELECT  1
		INTO    :i_cnt
		FROM		exg_xchng_mstr
		WHERE		exg_nxt_trd_dt = :c_trd_dt
		AND			exg_xchng_cd='NFO';
		
	if( (SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog(c_ServiceName,"S31060",SQLMSG,c_err_msg);
    return;
  }

	if ( i_cnt == 1 )
  {
		sprintf(c_command,"ksh %s/eod_mailer_report.sh %s", c_path,c_trd_dt);	
		system(c_command);
		fn_bat_pst_msg ( c_ServiceName, "Can't Run The Process Before Completion EOD Process", c_tag );
    fn_errlog(c_ServiceName,"S31065",DEFMSG,c_err_msg);
    return;
  } 

******* Ver 1.8 New Check for BFO EOD Process **********

	EXEC SQL
		SELECT  1
		INTO    :i_cnt
		FROM		exg_xchng_mstr
		WHERE		exg_nxt_trd_dt = :c_trd_dt
		AND			exg_xchng_cd='BFO';
		
	if( (SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog(c_ServiceName,"S31070",SQLMSG,c_err_msg);
    return;
  }

	if ( i_cnt == 1 )
  {
		sprintf(c_command,"ksh %s/eod_mailer_report.sh %s", c_path,c_trd_dt);	
		system(c_command);
		fn_bat_pst_msg ( c_ServiceName, "Can't Run The Process Before Completion BFO EOD Process", c_tag );
    fn_errlog(c_ServiceName,"S31075",DEFMSG,c_err_msg);
    return;
  }
 *********** Commented in Ver 2.5 ***************/


	/*** Ver 1.8 New Check For BFO  Process EOD Ends ***/

	/*** Ver 1.6 Chech for mrgin details uploaded in FMG for the trade date ***/
  if( c_run_flg == 'F')  /***  Ver 2.4  ***/
  {
		EXEC SQL
		/*	SELECT  count(*)				** Ver 2.0 Comment ***/ 
			SELECT  count(FMG_MG_MTCH_ACC)		/** Ver 2.0 ***/ 
			INTO    :i_mg_cnt
			FROM		FMG_MRGN_XCHNG_DTLS
			WHERE		FMG_MG_TRDDT= :c_trd_dt;
			
			if( (SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
			{
			 fn_errlog(c_ServiceName,"S31080",SQLMSG,c_err_msg);
			 return;
			}
   }
/****  Ver 2.4 starts  *****/
  else if( c_run_flg == 'R')
  {
		EXEC SQL
			SELECT  count(FMG_MG_MTCH_ACC)  
			INTO    :i_mg_cnt
			FROM    FMG_MRGN_XCHNG_DTLS_HSTRY
			WHERE   FMG_MG_TRDDT= :c_trd_dt;
		
			if( (SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
			{
			 fn_errlog(c_ServiceName,"S31085",SQLMSG,c_err_msg);
			 return;
			} 
  }
/**** Ver 2.4 Ends  ****/
 
	if ( i_mg_cnt == 0  )
  {
		sprintf(c_command,"ksh %s/mrgn_not_uploaded_mail.sh %s",c_path,c_trd_dt);
		system(c_command);
		fn_bat_pst_msg ( c_ServiceName, "Can't Run The Process Before Margin upload ", c_tag );
    fn_errlog(c_ServiceName,"S31090",DEFMSG,c_err_msg);
    return;
  }
	/*** Ver 1.6 Ends ****/ 
	/*** To get the previous trade date for the trade date***/
	/*** Ver 1.6 Following commented as only current trade date margin 
							 details to be send to customer as per CR-ISEC14-22552 *****
	 EXEC SQL
		SELECT	MAX(fbc_trd_dt)
		INTO		:c_prvdate
		FROM		fbc_fo_brnch_cal
		WHERE		fbc_xchng_cd ='NFO'
		AND 		fbc_trd_dt <:c_trd_dt;

	if(SQLCODE != 0)
  {
    fn_userlog(c_ServiceName,"Failed To Get Previous Trade Date");
    fn_errlog( c_ServiceName, "S31095",SQLMSG, c_err_msg);
    return;
  }
  rtrim(c_trd_dt);
	rtrim(c_prvdate);
	**************** Ver 1.6 Comment ends ***/
  rtrim(c_trd_dt);
	if(DEBUG_MSG_LVL_3)       
  {
  	fn_userlog(c_ServiceName,"Current Trade Date :%s:", c_trd_dt);
		/*fn_userlog(c_ServiceName,"Previous Trade Date :%s:", c_prvdate);*  Ver1.6 ***/
    fn_userlog(c_ServiceName,"Starting the mail sending process........");
  }

	EXEC SQL
    TRUNCATE TABLE tmp_opn_pstn;


  if(SQLCODE!=0)
  {
  	fn_errlog(c_ServiceName,"S31100",LIBMSG,c_err_msg);
    return;
  }

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if( i_trnsctn == -1 )
  {
  	fn_errlog(c_ServiceName, "S31105", LIBMSG, c_err_msg);
    fn_userlog(c_ServiceName, "Error while beginning the transaction");
    return;
  }


/*** Get all the match accounts both i.e. with and without open positions in FNO ***/

/***	Commented Into Ver 1.4

	EXEC SQL 
		INSERT INTO tmp_opn_pstn
		(
			SELECT	distinct ffp_clm_mtch_accnt
			FROM		ffp_fo_futures_pstn
			UNION
			SELECT	distinct fop_clm_mtch_accnt
			FROM		fop_fo_options_pstn
		);
	
		********/

	/*** Added In Ver 1.4 ***/

  if(c_run_flg == 'F' )    /*** Ver 2.4 ***/
  { 
	EXEC SQL
		INSERT INTO tmp_opn_pstn
		(
			SELECT  distinct fup_clm_mtch_accnt
			FROM    fup_fut_undrlyng_pstn
			WHERE		fup_uopnpstn_qty <> 0		
			OR			fup_uspread_mrgn <> 0 
      UNION
      SELECT  distinct fop_clm_mtch_accnt
      FROM    fop_fo_options_pstn
			WHERE		fop_opnpstn_qty <> 0
			UNION
			SELECT  distinct fus_clm_mtch_accnt    /*** Ver 1.7 ***/
      FROM    fus_fo_undrlyng_spn_pstn
      WHERE   ( fus_uopnpstn_qty != 0 OR fus_initial_mrgn !=0 )
			UNION
			SELECT	distinct ftd_clm_mtch_accnt
			FROM		ftd_fo_trd_dtls_hstry
			WHERE		trunc(ftd_trd_dt) = :c_trd_dt
			UNION																/** Union Added for Ver 2.7 to avoid house keep check **/
			SELECT	distinct ftd_clm_mtch_accnt
			FROM		ftd_fo_trd_dtls
			WHERE		trunc(ftd_trd_dt) = :c_trd_dt
			UNION /*** Ver 2.2 Starts ********/
			/** SELECT  distinct FAB_CLM_MTCH_ACCNT
			FROM		fab_fo_alc_bft_smry_dump
			WHERE   trunc(FAB_TRD_DT)= :c_trd_dt **/
			SELECT distinct DBD_CLM_MTCH_ACCNT
			FROM	DBD_DP_BLCK_DTLS_DUMP
			where DBD_TRD_DT = :c_trd_dt
    );

   if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND) 
   {
   	 fn_errlog( c_ServiceName, "S31110", SQLMSG, c_err_msg );
		 return;
   }
  }
  /*******     Ver 2.4 Starts     *******/
  else if( c_run_flg == 'R' )    
  {
   
    EXEC SQL
    INSERT INTO TMP_OPN_PSTN
    (
      SELECT  DISTINCT FUP_CLM_MTCH_ACCNT 
      FROM    FUP_FUT_UNDRLYNG_PSTN_LOGHSTRY
      WHERE   ( FUP_UOPNPSTN_QTY  <> 0 OR  FUP_USPREAD_MRGN  <> 0 )
      AND     FUP_TRD_DT = :c_trd_dt
      UNION
      SELECT  DISTINCT  FOP_CLM_MTCH_ACCNT
      FROM    FOP_FO_OPTIONS_PSTN_LOGHSTRY
      WHERE   FOP_OPNPSTN_QTY <> 0
      AND     FOP_TRD_DT = :c_trd_dt
      UNION
      SELECT  DISTINCT  FUS_CLM_MTCH_ACCNT
      FROM    FUS_UND_SPNPSTN_LOGHSTRY
      WHERE   ( FUS_UOPNPSTN_QTY != 0 OR  FUS_INITIAL_MRGN !=0 )
      AND     FUS_TRD_DT = :c_trd_dt
      UNION
      SELECT  DISTINCT  FTD_CLM_MTCH_ACCNT
      FROM    FTD_FO_TRD_DTLS_HSTRY
      WHERE   TRUNC(FTD_TRD_DT) = :c_trd_dt
      UNION 
      SELECT  DISTINCT DBD_CLM_MTCH_ACCNT
      FROM    DBD_DP_BLCK_DTLS_DUMP_HSTRY
      where   DBD_TRD_DT = :c_trd_dt
    );

   if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
   {
     fn_errlog( c_ServiceName, "S31115", SQLMSG, c_err_msg );
     return;
   }
  } 
  /*******   Ver 2.4 Ends   *******/
	
  if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
  	fn_errlog(c_ServiceName, "S31120", SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName, "Error in commit [%s] exiting..", c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return;
  }

	/*** Process for each match account ***/

	while(1)
	{
		d_total_limit=0.0;					/*** Ver 1.6 ***/
		d_exch_tot_mrgn=0.0;				/*** Ver 1.6 ***/
		d_isec_im_tot_mrgn=0.0;			/*** Ver 1.6 ***/
		d_mg_int_mrgn =0.0;					/*** Ver 1.6 ***/
		d_mg_prm=0.0;								/*** Ver 1.6 ***/
		d_mg_tot_mrgn=0.0;					/*** Ver 1.6 ***/
		d_mg_expsr=0.0;							/*** Ver 1.6 ***/
		d_bse_exch_tot_mrgn=0.0;		/*** Ver 1.8 ***/
		d_bse_isec_im_tot_mrgn=0.0;	/*** Ver 1.8 ***/
		d_bse_mg_int_mrgn =0.0;			/*** Ver 1.8 ***/
		d_bse_mg_prm=0.0;						/*** Ver 1.8 ***/
		d_bse_mg_tot_mrgn=0.0;			/*** Ver 1.8 ***/
		d_bse_mg_expsr=0.0;					/*** Ver 1.8 ***/
    d_mg_del_mgn=0.0;              /*** Ver 2.7 ***/
    d_mg_mtm_loss=0.0;             /*** Ver 2.7 ***/
    d_bse_mg_del_mgn=0.0;          /*** Ver 2.7 ***/
    d_bse_mg_mtm_loss=0.0;         /*** Ver 2.7 ***/
		EXEC SQL
	  	SELECT	tmp_clm_mtch_accnt
			INTO    :c_mtch_act_no
			FROM		tmp_opn_pstn
			WHERE   rownum <2;

		if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  	{
    	fn_errlog( c_ServiceName, "S31125", SQLMSG, c_err_msg );
    	return;
  	} 

		if( SQLCODE == NO_DATA_FOUND )
		{
			fn_userlog(c_ServiceName,"NO DATA FOUND");
			break;
		}
	
		i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  	if( i_trnsctn == -1 )
  	{
  		fn_errlog(c_ServiceName, "S31130", LIBMSG, c_err_msg);
    	fn_userlog(c_ServiceName, "Error while beginning the transaction");
    	return;
  	}

		fn_userlog(c_ServiceName,"Match Account No. Is :%s:",c_mtch_act_no);

		EXEC SQL                                /***  Ver 1.7 ***/
      SELECT  NVL(CLM_SPAN_ALLWD,'N'),
							NVL(CLM_BSESPAN_ALLWD,'N')		/*** Ver 1.8  ***/
      INTO    :c_spn_flag,
							:c_bse_spn_flag								/*** Ver 1.8 ****/
      FROM    CLM_CLNT_MSTR
      WHERE   CLM_MTCH_ACCNT = :c_mtch_act_no ;

    if( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31135", LIBMSG, c_err_msg);
      fn_userlog(c_ServiceName, "Error while selecting SPAN Flag ");
      return;
    }

		if(DEBUG_MSG_LVL_0)							/*** Ver 1.9 Debug Level Added **/
		{
    	fn_userlog(c_ServiceName,"Span Flag For Match :%s: Is :%c:",c_mtch_act_no,c_spn_flag);
			fn_userlog(c_ServiceName,"BSE Span Flag For Match :%s: Is :%c:",c_mtch_act_no,c_bse_spn_flag);/* Ver 1.8 **/
		}
		/*** Ver 1.4 Insert Customer Name ***

		EXEC SQL
			INSERT INTO fmd_fo_mrgn_dtls
			(
				fmd_clnt_nm,
				fmd_clm_mtch_accnt,
        fmd_trd_dt
			)
			(
				SELECT nvl(ipd_first_name,' ')||' '|| nvl(ipd_middle_name,' ')||' '|| nvl(ipd_last_name,' '),
							 :c_mtch_act_no,
							 :c_trd_dt
				FROM	 ipd_info_personal_dtls,
							 icd_info_client_dtls,
							 uac_usr_accnts
				WHERE	 icd_user_id = uac_usr_id
				AND		 icd_serial_no = ipd_serial_no
				AND		 ipd_type = 'APPLICANT'
				AND		 uac_clm_mtch_accnt = :c_mtch_act_no
			);
			  
			if(SQLCODE != 0)
    	{
        fn_errlog(c_ServiceName, "S31140", SQLMSG,c_err_msg);
        fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
        return;
    	}
		***/
		if(DEBUG_MSG_LVL_0)							/*** Ver 1.9 Debug Level Added **/
		{
			fn_userlog(c_ServiceName,"Before Insertion Of Allocation Details");
		}
	/*** Insert customer & allocation  details for the trade date *** Version 1.4***/

  
   if( c_run_flg == 'F' )    /*** Ver 2.4 ***/
   {
		EXEC SQL
			INSERT INTO fmd_fo_mrgn_dtls
			(
				fmd_clnt_nm,
 			  fmd_clm_mtch_accnt,   
				fmd_trd_dt,
				fmd_alctd_amt,
				fmd_bft_amt,
		  	fmd_plg_amt,
        fmd_isec_mrgn_amt,     /*** Ver 1.5 ***/
        fmd_fdr_amt,            /** Ver 2.1 **/
				fmd_ttl_amt,
				fmd_prcsng_tm,
				fmd_mail_snt_flg,
				FMD_NWB_AMT,        /*** Ver 2.2 ***/
				FMD_EQ_PLG_AMT,			/*** Ver 2.2 ***/
				FMD_TOT_COLL_AMT,    /*** Ver 2.2 ***/
        FMD_EQ_NSE_PLG_AMT,    /**  ver 2.3  **/  
        FMD_EQ_BSE_PLG_AMT,    /**  ver 2.3  **/
        FMD_EQ_FREE_PLG_AMT   /**  ver 2.3  **/
			)
			(
				SELECT
					nvl(ipd_first_name,' ')||' '|| nvl(ipd_middle_name,' ')||' '|| nvl(ipd_last_name,' '),
				  fab_clm_mtch_accnt,
					:c_trd_dt,
					fab_alctd_amt,
		  		fab_bft_amt,
					fab_plg_amt,
         /* nvl(fab_isec_mrgn_amt,0),                   *** Ver 1.5 ***/  /* ver 1.8 Comment **/
          nvl(fab_isec_mrgn_amt,0) +  nvl(fab_isec_mrgn_amt_bse,0) ,      /*** Ver 1.8 ***/
          nvl(fab_fdr_amt,0),                                            /*** Ver 2.1 ***/
				/*fab_bft_amt+fab_alctd_amt+fab_plg_amt+ nvl(fab_isec_mrgn_amt,0),* Ver 1.5 */ /* V 1.8 Comment **/
					fab_bft_amt+fab_alctd_amt+fab_plg_amt+ nvl(fab_isec_mrgn_amt,0)+nvl(fab_isec_mrgn_amt_bse,0)+nvl(fab_fdr_amt,0) , /*** Ver 1.8 ***/  /*** Ver 2.1 ***/
		  		sysdate,
					'N',
					FAB_NWB_AMT,     /*** Ver 2.2 ***/
					FAB_EQ_PLG_AMT,  /*** Ver 2.2 ***/
					FAB_TOT_COLL_AMT,     /*** Ver 2.2 ***/
          FAB_EQ_NSE_PLG_AMT,   /**  ver 2.3  **/
          FAB_EQ_BSE_PLG_AMT,   /**  ver 2.3  **/
          FAB_EQ_FREE_PLG_AMT   /**  ver 2.3  **/        
				FROM  fab_fo_alc_bft_smry_dump,ipd_info_personal_dtls,icd_info_client_dtls,uac_usr_accnts
				WHERE fab_clm_mtch_accnt = :c_mtch_act_no
				AND		fab_trd_dt  = :c_trd_dt /*** Trunc removed in ver 2.4 ***/ 
				AND 	icd_user_id = uac_usr_id
				AND 	icd_serial_no = ipd_serial_no
				AND   ipd_type = 'APPLICANT'
				AND   uac_clm_mtch_accnt = fab_clm_mtch_accnt
				/** GROUP BY nvl(ipd_first_name,' ')||' '|| nvl(ipd_middle_name,' ')||' '|| nvl(ipd_last_name,' '),fab_clm_mtch_accnt,fab_alctd_amt,fab_bft_amt,fab_plg_amt,fab_isec_mrgn_amt,fab_isec_mrgn_amt_bse,fab_fdr_amt,FAB_NWB_AMT,FAB_EQ_PLG_AMT,FAB_TOT_COLL_AMT,FAB_EQ_NSE_PLG_AMT, FAB_EQ_BSE_PLG_AMT,FAB_EQ_FREE_PLG_AMT  *** Commented for Ver 2.4 **/  /** Ver 2.1 **//** Ver 2.2 **//**  ver 2.3  **/ 
			
				/*** Ver 1.5 added fab_isec_mrgn_amt in group by clause ***/
				/*** Ver 1.8 added fab_isec_mrgn_amt_bse in group by clause ***/
			);

		if(SQLCODE != 0)
    {
    		fn_errlog(c_ServiceName, "S31145", SQLMSG,c_err_msg);
      	fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
      	return;
    }

		/**** Ver 1.6 New Code Starts ************/

  fn_userlog(c_ServiceName,"Findin FMG details ofmatch:%s:for trd_dt:%s:",c_mtch_act_no,c_trd_dt);

    EXEC SQL
      SELECT nvl(FMG_MG_INITIAL_MRGN,0),
             nvl(FMG_MG_PRMUM,0),
             nvl(FMG_MG_TOTAL_MRGN,0),
             nvl(FMG_MG_EXPSR,0),
             nvl(FMG_BSE_INITIAL_MRGN,0),   /**** Ver 1.8 ***/
             nvl(FMG_BSE_PRMUM,0),            /**** Ver 1.8 ***/
             nvl(FMG_BSE_TOTAL_MRGN,0),     /**** Ver 1.8 ***/
             nvl(FMG_BSE_EXPSR,0),           /**** Ver 1.8 ***/
						 nvl(FMG_MG_DEL_MRGN,0),					/** Ver 2.7 **/
						 nvl(FMG_MG_MTM_LOSS,0),					/** Ver 2.7 **/
						 nvl(FMG_BSE_MG_DEL_MRGN,0),			/** Ver 2.7 **/
						 nvl(FMG_BSE_MG_MTM_LOSS,0)				/** Ver 2.7 **/
      INTO   :d_mg_int_mrgn,
             :d_mg_prm,
             :d_mg_tot_mrgn,
             :d_mg_expsr,
             :d_bse_mg_int_mrgn,                /**** Ver 1.8 ***/
             :d_bse_mg_prm,                 /**** Ver 1.8 ***/
             :d_bse_mg_tot_mrgn,                /**** Ver 1.8 ***/
             :d_bse_mg_expsr,                    /**** Ver 1.8 ***/
						 :d_mg_del_mgn,								/** Ver 2.7 **/
						 :d_mg_mtm_loss,							/** Ver 2.7 **/
						 :d_bse_mg_del_mgn,						/** Ver 2.7 **/
						 :d_bse_mg_mtm_loss						/** Ver 2.7 **/
      FROM  FMG_MRGN_XCHNG_DTLS
      WHERE FMG_MG_MTCH_ACC=:c_mtch_act_no
      AND   FMG_MG_TRDDT = :c_trd_dt;
    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog(c_ServiceName,"S31150",SQLMSG,c_err_msg);
      return ;
    }
    if(SQLCODE == NO_DATA_FOUND)
    {
      fn_userlog(c_ServiceName,"No Margin Details present ");
    }

   }
    /*******   Ver 2.4 Starts   *******/
   else if( c_run_flg == 'R' )
   {
    EXEC SQL
    INSERT INTO fmd_fo_mrgn_dtls
    (
      FMD_CLNT_NM,
      FMD_CLM_MTCH_ACCNT,
      FMD_TRD_DT,
      FMD_ALCTD_AMT,
      FMD_BFT_AMT,
      FMD_PLG_AMT,
      FMD_ISEC_MRGN_AMT,     
      FMD_FDR_AMT,            
      FMD_TTL_AMT,
      FMD_PRCSNG_TM,
      FMD_MAIL_SNT_FLG,
      FMD_NWB_AMT,        
      FMD_EQ_PLG_AMT,     
      FMD_TOT_COLL_AMT,    
      FMD_EQ_NSE_PLG_AMT,    
      FMD_EQ_BSE_PLG_AMT,    
      FMD_EQ_FREE_PLG_AMT    
     )
     (
      SELECT
      NVL(IPD_FIRST_NAME,' ')||' '|| NVL(IPD_MIDDLE_NAME,' ')||' '|| NVL(IPD_LAST_NAME,' '),
      FAB_CLM_MTCH_ACCNT,
      :c_trd_dt,
      FAB_ALCTD_AMT,
      FAB_BFT_AMT,
      FAB_PLG_AMT,
      NVL(FAB_ISEC_MRGN_AMT,0) +  NVL(FAB_ISEC_MRGN_AMT_BSE,0) ,     
      NVL(FAB_fdr_AMT,0),                                            
      FAB_bft_AMT+FAB_ALCTD_AMT+FAB_PLG_AMT+ NVL(FAB_ISEC_MRGN_AMT,0)+NVL(FAB_ISEC_MRGN_AMT_BSE,0)+NVL(FAB_FDR_AMT,0), 
      SYSDATE,
      'N',
      FAB_NWB_AMT,     
      FAB_EQ_PLG_AMT, 
      FAB_TOT_COLL_AMT,   
      FAB_EQ_NSE_PLG_AMT,  
      FAB_EQ_BSE_PLG_AMT,   
      FAB_EQ_FREE_PLG_AMT   
      FROM  FAB_FO_ALC_BFT_SMRY_HSTRY,IPD_INFO_PERSONAL_DTLS,ICD_INFO_CLIENT_DTLS,UAC_USR_ACCNTS
      WHERE FAB_CLM_MTCH_ACCNT = :c_mtch_act_no
      AND   FAB_TRD_DT  = :c_trd_dt
      AND   ICD_USER_ID = UAC_USR_ID
      AND   ICD_SERIAL_NO = IPD_SERIAL_NO
      AND   IPD_type = 'APPLICANT'
      AND   UAC_CLM_MTCH_ACCNT = FAB_CLM_MTCH_ACCNT);
      /** GROUP BY NVL(IPD_FIRST_NAME,' ')||' '|| NVL(IPD_MIDDLE_NAME,' ')||' '|| NVL(IPD_LAST_NAME,' '),FAB_CLM_MTCH_ACCNT,FAB_ALCTD_AMT ,FAB_BFT_AMT,FAB_plg_AMT,FAB_ISEC_MRGN_AMT,FAB_ISEC_MRGN_AMT_BSE,FAB_FDR_AMT,FAB_NWB_AMT,FAB_EQ_PLG_AMT,FAB_TOT_COLL_AMT,FAB_EQ_NSE_PLG_AMT, FAB_EQ_BSE_PLG_AMT,FAB_EQ_FREE_PLG_AMT ); ** Commented for Ver 2.4 **/
  
    if(SQLCODE != 0)
    {
        fn_errlog(c_ServiceName, "S31155", SQLMSG,c_err_msg);
        fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
        return;
    }  

  fn_userlog(c_ServiceName,"Findin FMG details ofmatch:%s:for trd_dt:%s:",c_mtch_act_no,c_trd_dt);
   
   
    EXEC SQL
      SELECT NVL(FMG_MG_INITIAL_MRGN,0),
             NVL(FMG_MG_PRMUM,0),
             NVL(FMG_MG_TOTAL_MRGN,0),
             NVL(FMG_MG_EXPSR,0),
             NVL(FMG_BSE_INITIAL_MRGN,0),
             NVL(FMG_BSE_PRMUM,0),
             NVL(FMG_BSE_TOTAL_MRGN,0),
             NVL(FMG_BSE_EXPSR,0),
						 nvl(FMG_MG_DEL_MRGN,0),					/** Ver 2.7 **/
						 nvl(FMG_MG_MTM_LOSS,0),					/** Ver 2.7 **/
						 nvl(FMG_BSE_MG_DEL_MRGN,0),			/** Ver 2.7 **/
						 nvl(FMG_BSE_MG_MTM_LOSS,0)				/** Ver 2.7 **/
      INTO   :d_mg_int_mrgn,
             :d_mg_prm,
             :d_mg_tot_mrgn,
             :d_mg_expsr,
             :d_bse_mg_int_mrgn,
             :d_bse_mg_prm,
             :d_bse_mg_tot_mrgn,
             :d_bse_mg_expsr,
						 :d_mg_del_mgn,								/** Ver 2.7 **/
						 :d_mg_mtm_loss,							/** Ver 2.7 **/
						 :d_bse_mg_del_mgn,						/** Ver 2.7 **/
						 :d_bse_mg_mtm_loss						/** Ver 2.7 **/
      FROM  FMG_MRGN_XCHNG_DTLS_HSTRY
      WHERE FMG_MG_MTCH_ACC = :c_mtch_act_no
      AND   FMG_MG_TRDDT    = :c_trd_dt;

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog(c_ServiceName,"S31160",SQLMSG,c_err_msg);
      return ;
    }
    if(SQLCODE == NO_DATA_FOUND)
    {
      fn_userlog(c_ServiceName,"No Margin Details present ");
    }

   }
  /*******    Ver 2.4 Ends    *******/

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Margin details from MG FILE");
			fn_userlog(c_ServiceName,"d_mg_int_mrgn:%lf:",d_mg_int_mrgn);
			fn_userlog(c_ServiceName,"d_mg_prm		 :%lf:",d_mg_prm);
			fn_userlog(c_ServiceName,"d_mg_tot_prm :%lf:",d_mg_tot_mrgn);
			fn_userlog(c_ServiceName,"d_mg_expsr	 :%lf:",d_mg_expsr);
			fn_userlog(c_ServiceName,"d_bse_mg_int_mrgn:%lf:",d_bse_mg_int_mrgn);	/** Ver 1.8 **/
			fn_userlog(c_ServiceName,"d_bse_mg_prm		 :%lf:",d_bse_mg_prm);			/** Ver 1.8 **/
			fn_userlog(c_ServiceName,"d_bse_mg_tot_prm :%lf:",d_bse_mg_tot_mrgn);	/** Ver 1.8 **/
			fn_userlog(c_ServiceName,"d_bse_mg_expsr	 :%lf:",d_bse_mg_expsr);		/** Ver 1.8 **/
		}

		/*** Ver 1.6 Code Ends ***************/
		fn_userlog(c_ServiceName,"now updating FMD Table");	
		/*** Update profit & loss amount from FLL for the trade date ***/
   /*******   Ver 2.4 Starts    *******/
   i_hstry_chk = 0; 

   if( c_run_flg == 'R' )
   { 
    EXEC SQL
    SELECT COUNT(*)
    INTO  :i_hstry_chk
    FROM   FBD_FO_BNK_DRCR_HSTRY
    WHERE  FBD_CLM_MTCH_ACCNT = :c_mtch_act_no
    AND    FBD_TRD_DT = :c_trd_dt;

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog(c_ServiceName,"S31165",SQLMSG,c_err_msg);
      return ;
    }  
   }
   /*******   Ver 2.4 Ends   ******/

   if( i_hstry_chk == 0 )    /***   Ver 2.4   ***/
   {
		EXEC SQL
			UPDATE  FMD_FO_MRGN_DTLS
			SET     FMD_PL_AMT 		= (	select sum(fll_dc_amt) from fll_fo_lmtupd_log
																where fll_clm_mtch_accnt= :c_mtch_act_no
																and fll_trd_dt =:c_trd_dt  /*** Trunc removed in Ver 2.4 ***/
																and fll_xchng_cd = 'NFO'							/*** Ver 1.8 ***/
																and  fll_narration_id in ('PA','AA','AB','M1','M2','M4','M7','N','Q','M3','M5')																							/** Ver 1.9 Added M3 and M5 *******/
															),
							FMD_OUTSTNDNG	=	(	select NVL(SUM(fbd_dc_amt - fbd_pi_po_amt - fbd_int_adj_amt),0)
																from	fbd_fo_bnk_drcr
																where	fbd_xchng_cd='NFO'
																and		fbd_clm_mtch_accnt=:c_mtch_act_no
																and		fbd_dc_amt != fbd_pi_po_amt + fbd_int_adj_amt
																and		fbd_payin_dt < :c_trd_dt
															),
							FMD_PAYIO     = ( select NVL(sum(abs(fbd_pi_po_amt + fbd_int_adj_amt)),0)  /*** Ver 3.0 NVL and SUM added **/
																from	 fbd_fo_bnk_drcr
																where fbd_xchng_cd='NFO'  
																and   fbd_clm_mtch_accnt=:c_mtch_act_no
																and   fbd_trd_dt = :c_trd_dt	/** Trunc removed for Ver 2.4 **/
																and   FBD_DC_FLG = 'D'
																and   FBD_GRP_ID <> 9
															),
						/*FMD_EXCH_TOTAL_MRGN =(:d_mg_tot_mrgn + :d_mg_expsr),	** Ver 1.6 **Ver 1.8 Comment*/
					  /*FMD_EXCH_TOTAL_MRGN =(:d_mg_int_mrgn + :d_mg_expsr),	**** Ver 1.8 *** ** commented in Ver 2.7 ***/
              FMD_EXCH_TOTAL_MRGN =(:d_mg_int_mrgn + :d_mg_expsr + :d_mg_prm + :d_mg_del_mgn + :d_mg_mtm_loss), /*** Ver 2.7 ***/ 
							FMD_EXCH_MRGN =  :d_mg_int_mrgn ,										/**** Ver 1.6 ***/
							FMD_EXCH_PRMUM = :d_mg_prm,												/**** Ver 1.6 ***/
							FMD_EXCH_EXPSR = :d_mg_expsr,  										  /**** Ver 1.6 ***/
              FMD_EXCH_DEL_MRGN = :d_mg_del_mgn,     /*** Ver 2.7 ***/
              FMD_MTM_LOSS = :d_mg_mtm_loss,         /*** Ver 2.7 ***/

							/*** Ver 1.8 New update statements for BSE *****/

							FMD_BSE_PL_AMT 		= (	select sum(fll_dc_amt) from fll_fo_lmtupd_log
																where fll_clm_mtch_accnt= :c_mtch_act_no
																and fll_trd_dt =:c_trd_dt  /*** Trunc Removed in Ver 2.4  ***/
																and fll_xchng_cd = 'BFO'
																and  fll_narration_id in ('PA','AA','AB','M1','M2','M4','M7','N','Q','M3','M5')																												/**** Ver 1.9 Added M3 , M5 ***/
															),																				/** Ver 1.8 ***/
							FMD_BSE_OUTSTNDNG	=	(	select NVL(SUM(fbd_dc_amt - fbd_pi_po_amt - fbd_int_adj_amt),0)
																from	fbd_fo_bnk_drcr
																where	fbd_xchng_cd='BFO'
																and		fbd_clm_mtch_accnt=:c_mtch_act_no
																and		fbd_dc_amt != fbd_pi_po_amt + fbd_int_adj_amt
																and		fbd_payin_dt < :c_trd_dt
															),																					/** Ver 1.8 ***/
							FMD_BSE_PAYIO     = ( select NVL(SUM(abs(fbd_pi_po_amt + fbd_int_adj_amt)),0)  /*** Ver 3.0, NVL and sum added **/
																from	 fbd_fo_bnk_drcr
																where fbd_xchng_cd='BFO'  
																and   fbd_clm_mtch_accnt=:c_mtch_act_no
																and   fbd_trd_dt = :c_trd_dt		/** Trunc removed for Ver 2.4 **/
																and   FBD_DC_FLG = 'D'
																and   FBD_GRP_ID <> 9
															),																			    /** Ver 1.8 ***/	
					/*	FMD_BSE_EXCH_TOTAL_MRGN =(:d_bse_mg_int_mrgn + :d_bse_mg_expsr),	**** Ver 1.8 *** Commented in Ver 2.7 ***/
              FMD_BSE_EXCH_TOTAL_MRGN =(:d_bse_mg_int_mrgn + :d_bse_mg_expsr + :d_bse_mg_prm + :d_bse_mg_del_mgn + :d_bse_mg_mtm_loss),          /*** Ver 2.7 ***/ 
							FMD_BSE_EXCH_MRGN =  :d_bse_mg_int_mrgn ,										/** Ver 1.8 ***/
							FMD_BSE_EXCH_PRMUM = :d_bse_mg_prm,													/** Ver 1.8 ***/
							FMD_BSE_EXCH_EXPSR = :d_bse_mg_expsr, 										  /** Ver 1.8 ***/
              FMD_BSE_EXCH_DEL_MRGN = :d_bse_mg_del_mgn,                  /** Ver 2.7 ***/
              FMD_BSE_MTM_LOSS = :d_bse_mg_mtm_loss                       /** Ver 2.7 ***/

		  WHERE   FMD_CLM_MTCH_ACCNT=:c_mtch_act_no
      AND     FMD_TRD_DT=:c_trd_dt;

		if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog(c_ServiceName, "S31170", SQLMSG,c_err_msg);
      fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
      return;
    }
    }
    /********   Ver 2.4 Starts *******/
    else if( i_hstry_chk >  0 )
    {

  EXEC SQL
    UPDATE FMD_FO_MRGN_DTLS
    SET    FMD_PL_AMT    = ( SELECT sum(FLL_DC_AMT) FROM FLL_FO_LMTUPD_LOG
                             WHERE FLL_CLM_MTCH_ACCNT = :c_mtch_act_no
                             AND   FLL_TRD_DT   = :c_trd_dt /***  Trunc Removed in Ver 2.4 ***/
                             AND   FLL_XCHNG_CD = 'NFO'            
                             AND   FLL_NARRATION_ID IN ('PA','AA','AB','M1','M2','M4','M7','N','Q','M3','M5')
                            ),
           FMD_OUTSTNDNG = ( SELECT NVL(SUM(FBD_DC_AMT - FBD_PI_PO_AMT - FBD_INT_ADJ_AMT),0)
                             FROM  FBD_FO_BNK_DRCR_HSTRY 
                             WHERE FBD_XCHNG_CD       = 'NFO'
                             AND   FBD_CLM_MTCH_ACCNT = :c_mtch_act_no
                             AND   FBD_DC_AMT != FBD_PI_PO_AMT + FBD_INT_ADJ_AMT
                             AND   FBD_PAYIN_DT < :c_trd_dt
                            ),
           FMD_PAYIO     = ( SELECT NVL(sum(abs(FBD_PI_PO_AMT + FBD_INT_ADJ_AMT)),0)  /*** Ver 3.0, NVL and sum added **/
                             FROM   FBD_FO_BNK_DRCR_HSTRY 
                             WHERE  FBD_XCHNG_CD ='NFO'
                             AND    FBD_CLM_MTCH_ACCNT = :c_mtch_act_no
                             AND    FBD_TRD_DT  = :c_trd_dt		/** trunc removed for Ver 2.4 **/
                             AND    FBD_DC_FLG = 'D'
														 AND    FBD_GRP_ID <> 9
                            ),
         /*FMD_EXCH_TOTAL_MRGN =(:d_mg_int_mrgn + :d_mg_expsr), *** Commented in Ver 2.7 ***/
           FMD_EXCH_TOTAL_MRGN =(:d_mg_int_mrgn + :d_mg_expsr + :d_mg_prm + :d_mg_del_mgn + :d_mg_mtm_loss), /*** Ver 2.7 ***/ 
           FMD_EXCH_MRGN  = :d_mg_int_mrgn ,                 
           FMD_EXCH_PRMUM = :d_mg_prm,
           FMD_EXCH_EXPSR = :d_mg_expsr,
           FMD_EXCH_DEL_MRGN = :d_mg_del_mgn,     /*** Ver 2.7 ***/
           FMD_MTM_LOSS = :d_mg_mtm_loss,         /*** Ver 2.7 ***/
           FMD_BSE_PL_AMT    = ( SELECT sum(FLL_DC_AMT) FROM FLL_FO_LMTUPD_LOG
                                 WHERE FLL_CLM_MTCH_ACCNT = :c_mtch_act_no
                                 AND   FLL_TRD_DT   = :c_trd_dt /*** Trunc removed in Ver 2.4 ***/
                                 AND   FLL_XCHNG_CD = 'BFO'
                                 AND   FLL_NARRATION_ID IN ('PA','AA','AB','M1','M2','M4','M7','N','Q','M3','M5')
                                ),        
           FMD_BSE_OUTSTNDNG = ( SELECT NVL(SUM(FBD_DC_AMT - FBD_PI_PO_AMT - FBD_INT_ADJ_AMT),0)
                                 FROM  FBD_FO_BNK_DRCR_HSTRY 
                                 WHERE FBD_XCHNG_CD='BFO'
                                 AND   FBD_CLM_MTCH_ACCNT=:c_mtch_act_no
                                 AND   FBD_DC_AMT != FBD_PI_PO_AMT + FBD_INT_ADJ_AMT
                                 AND   FBD_PAYIN_DT < :c_trd_dt
                                ),   
           FMD_BSE_PAYIO     = ( SELECT NVL(sum(abs(FBD_PI_PO_AMT + FBD_INT_ADJ_AMT)),0)  /*** Ver 3.0, NVL and sum added **/
                                 FROM   FBD_FO_BNK_DRCR_HSTRY 
				                         WHERE  FBD_XCHNG_CD='BFO'
                                 AND   FBD_CLM_MTCH_ACCNT=:c_mtch_act_no
                                 AND   FBD_TRD_DT = :c_trd_dt		/** trunc removed for Ver 2.4 **/
                                 AND   FBD_DC_FLG = 'D'
                                 AND   FBD_GRP_ID <> 9
                                ),                                        
           /*FMD_BSE_EXCH_TOTAL_MRGN = (:d_bse_mg_int_mrgn + :d_bse_mg_expsr),*** Commented in Ver 2.7 ***/
             FMD_BSE_EXCH_TOTAL_MRGN = (:d_bse_mg_int_mrgn + :d_bse_mg_expsr  + :d_bse_mg_prm + :d_bse_mg_del_mgn + :d_bse_mg_mtm_loss),          /*** Ver 2.7 ***/
             FMD_BSE_EXCH_MRGN  = :d_bse_mg_int_mrgn ,                
             FMD_BSE_EXCH_PRMUM = :d_bse_mg_prm,              
             FMD_BSE_EXCH_EXPSR = :d_bse_mg_expsr,
             FMD_BSE_EXCH_DEL_MRGN = :d_bse_mg_del_mgn,                  /** Ver 2.7 ***/
             FMD_BSE_MTM_LOSS = :d_bse_mg_mtm_loss                       /** Ver 2.7 ***/    
      WHERE  FMD_CLM_MTCH_ACCNT = :c_mtch_act_no
      AND    FMD_TRD_DT = :c_trd_dt;

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog(c_ServiceName, "S31175", SQLMSG,c_err_msg);
      fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
      return;
    }
    }
    /********   Ver 2.4 Ends *******/
		/*** Added To handle Spread Position Cases ***/
	  if ( c_run_flg == 'F' )    /*** Ver 2.4 ***/
    {	
  /** if ( c_spn_flag == 'N' || c_bse_spn_flag =='N') ** Ver 1.7 -- Check Added For SPAN customer ** commented in Ver 2.5 **/
      if ( c_spn_flag == 'N' ) /*** If condition changed in Ver 2.5 ***/
      {
		  	fn_userlog(c_ServiceName," Inside Normal Customer ");  /*** Ver 1.7 -- Log Added ***/

	      EXEC SQL
			  SELECT FUP_USPREAD_MRGN
			  INTO   :d_sprd_mrgn
			  FROM   FUP_FUT_UNDRLYNG_PSTN
			  WHERE	 FUP_CLM_MTCH_ACCNT=:c_mtch_act_no
			  AND		 FUP_USPREAD_MRGN <>0
			  /**	AND 	 FUP_CLM_MTCH_ACCNT = 'NFO'						*** Ver 1.8 ***/ /** Ver 2.0 comment**/
			  AND 	 FUP_XCHNG_CD = 'NFO'										/*** Ver 2.0 ***/
			  AND    rownum <2;	

	    	if(SQLCODE != 0 )
    	  {
			    if (SQLCODE != NO_DATA_FOUND)
			    { 
    		    fn_errlog(c_ServiceName, "S31180", SQLMSG,c_err_msg);
				    fn_userlog(c_ServiceName,"Failed while selecting Spread margin From FUP_FUT_UNDRLYNG_PSTN");
      		  fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
      		  return;
    		  }
		  	  else if (SQLCODE == NO_DATA_FOUND) 
		 		  {
					  d_sprd_mrgn=0; /***  for Normal case initialize to 0 ***/
				  }
			  }

        if(d_sprd_mrgn!=0)  /***  Spread margin cases ***/
        {
          EXEC SQL
          UPDATE  fmd_fo_mrgn_dtls
          SET     fmd_fut_mrgn =( SELECT SUM(fup_utrd_mrgn)
                                  FROM  fup_fut_undrlyng_pstn
                                  WHERE fup_clm_mtch_accnt=:c_mtch_act_no
                                  AND   fup_trd_dt=:c_xchng_dt
                                  AND   fup_xchng_cd='NFO'          /*** Ver 1.8 ****/
                                )

/***************************************************************************************************
              fmd_opt_mrgn = (SELECT sum(for_trd_mrgn)  FROM for_opt_imtm_rep
                                WHERE for_clm_mtch_accnt = :c_mtch_act_no
                                AND to_char(for_rprt_tm_stmp,'dd-Mon-yyyy hh24:mi:ss') in
                                           (SELECT MAX(TO_CHAR(for_rprt_tm_stmp,'dd-Mon-yyyy hh24:mi:ss'))
                                            FROM for_opt_imtm_rep
                                            WHERE for_clm_mtch_accnt = :c_mtch_act_no
                                            AND trunc(for_rprt_tm_stmp)=:c_trd_dt
                                            GROUP BY for_undrlyng))
**************************************************************************************************/

          WHERE fmd_clm_mtch_accnt = :c_mtch_act_no
          AND fmd_trd_dt =:c_trd_dt;      /*** Ver 1.4 trunc removed ***/

          if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
          {
            fn_errlog(c_ServiceName, "S31185", SQLMSG,c_err_msg);
            fn_userlog(c_ServiceName,"Failed In Updation For Spread Position");
            fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
            return;
          }
        }
        else      /*** Normal margin cases ***/
        {
          if(DEBUG_MSG_LVL_0)               /*** Ver 1.9 Debug Level Added **/
          {
            fn_userlog(c_ServiceName,"BEFORE NORMAL FUTURE MARGIN CALCULATION");
            fn_userlog(c_ServiceName,"Current Trade Date :%s:", c_trd_dt);
          }

          EXEC SQL
          UPDATE  fmd_fo_mrgn_dtls
          SET     fmd_fut_mrgn = (SELECT sum(fer_trd_mrgn) FROM fer_fut_eodmtm_rep
                                  WHERE fer_clm_mtch_accnt = :c_mtch_act_no
                                  AND    fer_trd_dt = :c_trd_dt            /*** Ver 2.7 ***/
                                  /** AND to_char(FER_RPRT_TM_STMP,'dd-Mon-yyyy hh24:mi:ss') in
                                      (SELECT MAX(TO_CHAR(FER_RPRT_TM_STMP,'dd-Mon-yyyy hh24:mi:ss')) ** Commented and modified for Ver 2.6 **/
                                  AND FER_RPRT_TM_STMP in
                                      (SELECT MAX(FER_RPRT_TM_STMP)
                                       FROM fer_fut_eodmtm_rep
                                       WHERE  fer_clm_mtch_accnt = :c_mtch_act_no
                                       AND    fer_xchng_cd='NFO'                    /* Ver 1.8 */
                                       AND    fer_trd_dt = :c_trd_dt                /* Ver 1.1 */
                                       /*AND    trunc(FER_RPRT_TM_STMP)=:c_trd_dt*/ /* Ver 1.1 */
                                       GROUP BY fer_undrlyng,fer_cntrct_tag)) /* Ver 1.4 Group By Clause changed fer_expry_dt
 replaced by fer_cntrct_tag */

/*******************************************************************************************************
                fmd_opt_mrgn =  (SELECT sum(for_trd_mrgn)  FROM for_opt_imtm_rep
                                 WHERE for_clm_mtch_accnt = :c_mtch_act_no
                                 AND to_char(for_rprt_tm_stmp,'dd-Mon-yyyy hh24:mi:ss') in
                                        (SELECT MAX(TO_CHAR(for_rprt_tm_stmp,'dd-Mon-yyyy hh24:mi:ss'))
                                         FROM for_opt_imtm_rep
                                         WHERE for_clm_mtch_accnt = :c_mtch_act_no
                                         AND trunc(for_rprt_tm_stmp)=:c_trd_dt
                                         GROUP BY for_undrlyng))
*******************************************************************************************************/

          WHERE   fmd_clm_mtch_accnt = :c_mtch_act_no
          AND     fmd_trd_dt =:c_trd_dt;      /*** Ver 1.4 trunc removed ***/

          if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
          {
            fn_errlog(c_ServiceName, "S31190", SQLMSG,c_err_msg);
            fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
            return;
          }
        }
      }
   
      if ( c_bse_spn_flag =='N')   /*** If conditon added in  Ver 2.5  ***/
      {
				/**** Ver 1.8 New Code Starts *************/	
			
			  EXEC SQL
			  SELECT nvl(FUP_USPREAD_MRGN,0)
			  INTO   :d_bse_sprd_mrgn
			  FROM   FUP_FUT_UNDRLYNG_PSTN
			  WHERE	 FUP_CLM_MTCH_ACCNT=:c_mtch_act_no
			  AND		 FUP_USPREAD_MRGN <>0
			  /*AND 	 FUP_CLM_MTCH_ACCNT = 'BFO'   ** Ver 2.0 comment **/						
			  AND 	 FUP_XCHNG_CD = 'BFO'		  			/** Ver 2.0 ***/				
			  AND    rownum <2;	

		    if(SQLCODE != 0 )
   	    {
			    if (SQLCODE != NO_DATA_FOUND)
		     	{
   			    fn_errlog(c_ServiceName, "S31195", SQLMSG,c_err_msg);
				    fn_userlog(c_ServiceName,"Failed while selecting BSE  Spread margin From FUP");
     		    fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
     		    return;
   		    }
  		  	else if (SQLCODE == NO_DATA_FOUND) 
	  	 		{
		  			d_bse_sprd_mrgn=0; /***  for Normal case initialize to 0 ***/
			  	}
		  	}
				/**** Ver 1.8 New Code Ends **************/	

  	  	/********** Ver 1.8 BFO Spread Case *******************/
			  if (d_bse_sprd_mrgn != 0 )
		  	{
				  EXEC SQL
					UPDATE  fmd_fo_mrgn_dtls
					SET			fmd_bse_fut_mrgn =(	SELECT SUM(fup_utrd_mrgn)
																	    FROM	fup_fut_undrlyng_pstn
																	    WHERE fup_clm_mtch_accnt=:c_mtch_act_no
																	    AND 	fup_trd_dt=:c_xchng_dt
																	    AND 	fup_xchng_cd='BFO'
															      ) 
      		WHERE fmd_clm_mtch_accnt = :c_mtch_act_no
       		AND fmd_trd_dt =:c_trd_dt;			/*** Ver 1.4 trunc removed ***/
	
	  			if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
        	{
          	fn_errlog(c_ServiceName, "S31200", SQLMSG,c_err_msg);
				  	fn_userlog(c_ServiceName,"Failed In Updation For Spread Position");
        	  fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
        	  return;
			  	}
			  }
		  	else
			  {
				  if(DEBUG_MSG_LVL_0)								/*** Ver 1.9 Debug Level Added **/
				  {
					  fn_userlog(c_ServiceName,"BEFORE NORMAL BSE FUTURE MARGIN CALCULATION");
					  fn_userlog(c_ServiceName,"Current Trade Date :%s:", c_trd_dt);
				  }

	  			EXEC SQL
    			UPDATE  fmd_fo_mrgn_dtls
      		SET			fmd_bse_fut_mrgn = (SELECT sum(fer_trd_mrgn) FROM fer_fut_eodmtm_rep
          	                   		WHERE fer_clm_mtch_accnt = :c_mtch_act_no
                                  AND    fer_trd_dt = :c_trd_dt            /*** Ver 2.7 ***/
              	               		/** AND to_char(FER_RPRT_TM_STMP,'dd-Mon-yyyy hh24:mi:ss') in 
																			(SELECT MAX(TO_CHAR(FER_RPRT_TM_STMP,'dd-Mon-yyyy hh24:mi:ss')) ** Commented and modified for Ver 2.6 **/
              	               		AND FER_RPRT_TM_STMP in
																			(SELECT MAX(FER_RPRT_TM_STMP)
																			 FROM	fer_fut_eodmtm_rep
																			 WHERE	fer_clm_mtch_accnt = :c_mtch_act_no
																			 AND		fer_xchng_cd='BFO'									
																			 AND    fer_trd_dt = :c_trd_dt							
																			 GROUP BY fer_undrlyng,fer_cntrct_tag)) 
    			WHERE   fmd_clm_mtch_accnt = :c_mtch_act_no
    			AND     fmd_trd_dt =:c_trd_dt;		


      		if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
        	{
          	fn_errlog(c_ServiceName, "S31205", SQLMSG,c_err_msg);
          	fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
          	return;
        	}
			  }		
			/********** Ver 1.8 BFO Spread Case END *******************/
  	  }
    }
/****  Ver 2.4 Starts ****/
    else if ( c_run_flg == 'R' )
    {
  /** if ( c_spn_flag == 'N' || c_bse_spn_flag =='N') ** Ver 1.7 -- Check Added For SPAN customer ** commented in Ver 2.5 **/
      if ( c_spn_flag == 'N' )  /*** If condition changed in Ver 2.5 ***/
      {
        fn_userlog(c_ServiceName," Inside Normal Customer ");  /*** Ver 1.7 -- Log Added ***/

        EXEC SQL
        SELECT FUP_USPREAD_MRGN
        INTO   :d_sprd_mrgn
        FROM   FUP_FUT_UNDRLYNG_PSTN_LOGHSTRY
        WHERE  FUP_CLM_MTCH_ACCNT=:c_mtch_act_no
        AND    FUP_USPREAD_MRGN <>0
        AND    FUP_XCHNG_CD = 'NFO'
        AND    FUP_TRD_DT = :c_trd_dt
        AND    rownum <2;

        if(SQLCODE != 0 )
        {
          if (SQLCODE != NO_DATA_FOUND)
          {
            fn_errlog(c_ServiceName, "S31210", SQLMSG,c_err_msg);
            fn_userlog(c_ServiceName,"Failed while selecting Spread margin From FUP_FUT_UNDRLYNG_PSTN_LOGHSTRY");
            fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
            return;
          }
          else if (SQLCODE == NO_DATA_FOUND)
          {
            d_sprd_mrgn=0;
          }
        }

        if(d_sprd_mrgn!=0)  /***  Spread margin cases ***/
        {

          EXEC SQL
          UPDATE  FMD_FO_MRGN_DTLS
          SET     FMD_FUT_MRGN =( SELECT SUM(FUP_UTRD_MRGN)
                                  FROM  FUP_FUT_UNDRLYNG_PSTN_LOGHSTRY
                                  WHERE FUP_CLM_MTCH_ACCNT =:c_mtch_act_no
                                  AND   FUP_TRD_DT   = :c_trd_dt
                                  AND   FUP_XCHNG_CD = 'NFO'
                                )
          WHERE FMD_CLM_MTCH_ACCNT = :c_mtch_act_no
          AND FMD_TRD_DT =:c_trd_dt;

          if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
          {
            fn_errlog(c_ServiceName, "S31215", SQLMSG,c_err_msg);
            fn_userlog(c_ServiceName,"Failed In Updation For Spread Position");
            fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
            return;
          }
        }
        else      /*** Normal margin cases ***/
        {
          if(DEBUG_MSG_LVL_0)
          {
            fn_userlog(c_ServiceName,"BEFORE NORMAL FUTURE MARGIN CALCULATION");
            fn_userlog(c_ServiceName,"Current Trade Date :%s:", c_trd_dt);
          }

          EXEC SQL
          UPDATE  fmd_fo_mrgn_dtls
          SET     fmd_fut_mrgn = (SELECT sum(fer_trd_mrgn) FROM fer_fut_eodmtm_rep
                                  WHERE fer_clm_mtch_accnt = :c_mtch_act_no
                                  AND    fer_trd_dt = :c_trd_dt            /*** Ver 2.7 ***/
                                  /** AND to_char(FER_RPRT_TM_STMP,'dd-Mon-yyyy hh24:mi:ss') in
                                      (SELECT MAX(TO_CHAR(FER_RPRT_TM_STMP,'dd-Mon-yyyy hh24:mi:ss')) ** Commented and modified for Ver 2.6 **/
                                  AND FER_RPRT_TM_STMP in
                                      (SELECT MAX(FER_RPRT_TM_STMP)
                                       FROM fer_fut_eodmtm_rep
                                       WHERE  fer_clm_mtch_accnt = :c_mtch_act_no
                                       AND    fer_xchng_cd='NFO'
                                       AND    fer_trd_dt = :c_trd_dt
                                       GROUP BY fer_undrlyng,fer_cntrct_tag))
          WHERE   fmd_clm_mtch_accnt = :c_mtch_act_no
          AND     fmd_trd_dt =:c_trd_dt;      /*** Ver 1.4 trunc removed ***/

          if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
          {
            fn_errlog(c_ServiceName, "S31220", SQLMSG,c_err_msg);
            fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
            return;
          }
        }
      }

      if ( c_bse_spn_flag =='N' ) /*** If condition added in Ver 2.5 ***/
      {
        EXEC SQL
        SELECT nvl(FUP_USPREAD_MRGN,0)
        INTO   :d_bse_sprd_mrgn
        FROM   FUP_FUT_UNDRLYNG_PSTN_LOGHSTRY
        WHERE  FUP_CLM_MTCH_ACCNT=:c_mtch_act_no
        AND    FUP_USPREAD_MRGN <>0
        AND    FUP_XCHNG_CD = 'BFO'
        AND    FUP_TRD_DT = :c_trd_dt
        AND    rownum <2;

        if(SQLCODE != 0 )
        {
          if (SQLCODE != NO_DATA_FOUND)
          {
            fn_errlog(c_ServiceName, "S31225", SQLMSG,c_err_msg);
            fn_userlog(c_ServiceName,"Failed while selecting BSE  Spread margin From FUP");
            fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
            return;
          }
          else if (SQLCODE == NO_DATA_FOUND)
          {
            d_bse_sprd_mrgn=0;
          }
        }

        if (d_bse_sprd_mrgn != 0 )
        {
          EXEC SQL
          UPDATE  FMD_FO_MRGN_DTLS
          SET     FMD_BSE_FUT_MRGN =( SELECT SUM(FUP_UTRD_MRGN)
                                      FROM  FUP_FUT_UNDRLYNG_PSTN_LOGHSTRY
                                      WHERE FUP_CLM_MTCH_ACCNT = :c_mtch_act_no
                                      AND   FUP_TRD_DT   = :c_trd_dt
                                      AND   FUP_XCHNG_CD = 'BFO'
                                    )
          WHERE FMD_CLM_MTCH_ACCNT = :c_mtch_act_no
          AND FMD_TRD_DT =:c_trd_dt;

          if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
          {
            fn_errlog(c_ServiceName, "S31230", SQLMSG,c_err_msg);
            fn_userlog(c_ServiceName,"Failed In Updation For Spread Position");
            fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
            return;
          }
        }
        else
        {
          if(DEBUG_MSG_LVL_0)     
          {
            fn_userlog(c_ServiceName,"BEFORE NORMAL BSE FUTURE MARGIN CALCULATION");
            fn_userlog(c_ServiceName,"Current Trade Date :%s:", c_trd_dt);
          }

          EXEC SQL
          UPDATE  fmd_fo_mrgn_dtls
          SET     fmd_bse_fut_mrgn = (SELECT sum(fer_trd_mrgn) FROM fer_fut_eodmtm_rep
                                      WHERE fer_clm_mtch_accnt = :c_mtch_act_no
                                      AND    fer_trd_dt = :c_trd_dt            /*** Ver 2.7 ***/
                                      /** AND to_char(FER_RPRT_TM_STMP,'dd-Mon-yyyy hh24:mi:ss') in
                                      (SELECT MAX(TO_CHAR(FER_RPRT_TM_STMP,'dd-Mon-yyyy hh24:mi:ss')) ** Commented and modified for Ver 2.6 **/
                                      AND FER_RPRT_TM_STMP in
                                      (SELECT MAX(FER_RPRT_TM_STMP)
                                       FROM fer_fut_eodmtm_rep
                                       WHERE  fer_clm_mtch_accnt = :c_mtch_act_no
                                       AND    fer_xchng_cd='BFO'
                                       AND    fer_trd_dt = :c_trd_dt
                                       GROUP BY fer_undrlyng,fer_cntrct_tag))
          WHERE   fmd_clm_mtch_accnt = :c_mtch_act_no
          AND     fmd_trd_dt =:c_trd_dt;


          if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
          {
           fn_errlog(c_ServiceName, "S31235", SQLMSG,c_err_msg);
           fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
           return;
          }
        }
      }
    }
/*****   Ver 2.4 Ends *****/


	
	/*	else if (c_spn_flag == 'Y')      *** Ver 1.7 ***/					/*** Ver 1.8 Comment ****/
		if (c_spn_flag == 'Y')      /*** Ver 1.8 ***/
    {
      fn_userlog(c_ServiceName," Inside SPAN Customer ");

/****** Commented in Ver 2.9 ***
				EXEC SQL 
					UPDATE  fmd_fo_mrgn_dtls
 					SET     fmd_fut_mrgn = ( 
																	select sum(margin1) 
																	from 
																	( SELECT distinct(SER_MRGN_BLKD,0) margin1 
																		FROM SER_SPN_EODMTM_REP  
																		WHERE SER_CLM_MTCH_ACCNT  = :c_mtch_act_no 
																		AND  SER_REPORT_NO = 
																				(SELECT MAX(SER_REPORT_NO)
								 												 FROM   SER_SPN_EODMTM_REP
								 												 WHERE  SER_CLM_MTCH_ACCNT  = :c_mtch_act_no 
								 												 AND    SER_TRD_DT          = :c_trd_dt 
								 											*AND    SER_XCHNG_CD        = :c_xchng_cd *Ver 1.8 comment*
                                    		 AND    SER_XCHNG_CD        = 'NFO'				* Ver 1.8 **
								 												 )
																		AND    SER_TRD_DT          = :c_trd_dt
                                   * AND    SER_XCHNG_CD        = :c_xchng_cd * Ver 1.8 comment*
                                    AND    SER_XCHNG_CD        = 'NFO'				* Ver 1.8 **
						  										))
  				WHERE   fmd_clm_mtch_accnt = :c_mtch_act_no 
  				AND     fmd_trd_dt         = :c_trd_dt ; 
********************************/

        /******* Ver 2.9 Starts *******/

        d_spn_act_mrgn =0;

        EXEC SQL
        select NVL(sum(margin1),0)
        into   :d_spn_act_mrgn
        from
            ( SELECT distinct(SER_MRGN_BLKD) margin1
              FROM   SER_SPN_EODMTM_REP
              WHERE  SER_CLM_MTCH_ACCNT  = :c_mtch_act_no
              AND    SER_REPORT_NO =
                                  (SELECT MAX(SER_REPORT_NO)
                                   FROM   SER_SPN_EODMTM_REP
                                   WHERE  SER_CLM_MTCH_ACCNT  = :c_mtch_act_no
                                   AND    SER_TRD_DT          = :c_trd_dt
                                   AND    SER_XCHNG_CD        = 'NFO'  
                                  )
              AND    SER_TRD_DT          = :c_trd_dt
              AND    SER_XCHNG_CD        = 'NFO'       
            );

        if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
        {
          fn_errlog(c_ServiceName, "S31240", SQLMSG,c_err_msg);
          fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
          return;
        }

        d_spn_dlvr_mrgn_opnpstn =0;

        EXEC SQL
        SELECT NVL(SUM(FCP_UDLVRY_MRGN),0)
        INTO   :d_spn_dlvr_mrgn_opnpstn
        FROM   FCP_FO_SPN_CNTRCT_PSTN
        WHERE  FCP_CLM_MTCH_ACCNT = :c_mtch_act_no
        AND    FCP_XCHNG_CD = 'NFO'
        AND    ( FCP_IBUY_QTY    <> 0      OR  
                 FCP_ISELL_QTY   <> 0      OR
                 FCP_EXBUY_QTY   <> 0      OR
                 FCP_EXSELL_QTY  <> 0      OR
                 FCP_OPNPSTN_QTY <> 0      OR
                 FCP_OPT_PREMIUM <> 0 
               );

        if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
        {
          fn_errlog(c_ServiceName, "S31245", SQLMSG,c_err_msg);
          fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
          return;
        }

        EXEC SQL
        UPDATE  fmd_fo_mrgn_dtls
        SET     fmd_fut_mrgn = :d_spn_act_mrgn + :d_spn_dlvr_mrgn_opnpstn + :d_mg_mtm_loss 
        WHERE   fmd_clm_mtch_accnt = :c_mtch_act_no
        AND     fmd_trd_dt         = :c_trd_dt ;

        if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
        {
          fn_errlog(c_ServiceName, "S31250", SQLMSG,c_err_msg);
          fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
          return;
        }

        /******* Ver 2.9 Ends *******/

    }
		/** else if (c_bse_spn_flag == 'Y') ** Commented in Ver 2.5 ***/     /*** Ver 1.7 ***/
    if (c_bse_spn_flag == 'Y')  /** Ver 2.5 **/
		{
      fn_userlog(c_ServiceName," Inside BSE  SPAN Customer ");

				EXEC SQL 
					UPDATE  fmd_fo_mrgn_dtls
 					SET     fmd_bse_fut_mrgn = (
																	select sum(margin1)
																	from 
																	( SELECT distinct(SER_MRGN_BLKD) margin1  
																		FROM SER_SPN_EODMTM_REP  
																		WHERE SER_CLM_MTCH_ACCNT  = :c_mtch_act_no 
																		AND  SER_REPORT_NO = 
																				(SELECT MAX(SER_REPORT_NO)
								 												 FROM   SER_SPN_EODMTM_REP
								 												 WHERE  SER_CLM_MTCH_ACCNT  = :c_mtch_act_no 
								 												 AND    SER_TRD_DT          = :c_trd_dt 
								 												 AND    SER_XCHNG_CD        ='BFO' 
								 												 )
																		AND    SER_TRD_DT          = :c_trd_dt
                                    AND    SER_XCHNG_CD        ='BFO' 
						  										)
			 													 )
  				WHERE   fmd_clm_mtch_accnt = :c_mtch_act_no 
  				AND     fmd_trd_dt         = :c_trd_dt ; 

        if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
        {
          fn_errlog(c_ServiceName, "S31255", SQLMSG,c_err_msg);
          fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
          return;
        }
		}
/********** Added For Cases Having Trade Marign Greater In Position Table Than In Report  Table *********/

		if ( c_spn_flag == 'N' )  /*** Ver 1.7 -- SPAN Check Added  ***/
    {
      fn_userlog(c_ServiceName," Inside NORMAL Customer for OPTION Margin Calculation  "); /** Ver 1.7 **/

			EXEC SQL
				SELECT	nvl(sum(decode(sign(nvl(FOR_BLKD_TRD_MRGN,0) - nvl(FOR_TRD_MRGN,0)),-1,nvl(FOR_TRD_MRGN,0),
								nvl(FOR_BLKD_TRD_MRGN,0))),0)
				INTO		:d_act_mrgn
				FROM		FOR_OPT_IMTM_REP
				WHERE		for_clm_mtch_accnt = :c_mtch_act_no
		  	/** AND to_char(for_rprt_tm_stmp,'dd-Mon-yyyy hh24:mi:ss') in
                                        (SELECT MAX(TO_CHAR(for_rprt_tm_stmp,'dd-Mon-yyyy hh24:mi:ss')) ** Commented and modified for Ver 2.6 **/
		  	AND for_rprt_tm_stmp in
                                        (SELECT MAX(for_rprt_tm_stmp)
                                         FROM for_opt_imtm_rep
                                         WHERE for_clm_mtch_accnt = :c_mtch_act_no
                                         AND trunc(for_rprt_tm_stmp)=:c_trd_dt
																				 AND for_xchng_cd='NFO'					/*** Ver 1.8 ***/
                                         GROUP BY for_undrlyng,for_strk_prc,for_exer_typ,for_opt_typ,
																									for_expry_dt);

			if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    	{
    		fn_errlog(c_ServiceName, "S31260", SQLMSG,c_err_msg);
      	fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
      	return;
    	}

      /** Ver 2.9 Started **/

      d_dlvr_mrgn_opnpstn = 0;

      EXEC SQL
      SELECT NVL( SUM (fop_udlvry_mrgn + fop_uexctd_mrgn), 0)
      INTO   :d_dlvr_mrgn_opnpstn
      FROM   fop_fo_options_pstn
      WHERE  fop_clm_mtch_accnt = :c_mtch_act_no
      AND    fop_xchng_cd = 'NFO'
      AND    FOP_OPNPSTN_QTY > 0;

      if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog(c_ServiceName, "S31265", SQLMSG,c_err_msg);
        fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
        return;
      }

      /** Ver 2.9 Ends **/

			EXEC SQL
				UPDATE  FMD_FO_MRGN_DTLS
				SET     fmd_opt_mrgn =:d_act_mrgn + :d_mg_mtm_loss + :d_dlvr_mrgn_opnpstn  /*** Ver 2.9 ***/
				WHERE   FMD_CLM_MTCH_ACCNT=:c_mtch_act_no
				AND     FMD_TRD_DT=:c_trd_dt;

			if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    	{
    		fn_errlog(c_ServiceName, "S31270", SQLMSG,c_err_msg);
      	fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
      	return;
    	}
		}
		else if (c_spn_flag == 'Y')  /*** Ver 1.7 ***/
    {
      fn_userlog(c_ServiceName," Inside SPAN Customer for OPTION Margin Calculation  ");
      EXEC SQL
        UPDATE  FMD_FO_MRGN_DTLS
        SET     fmd_opt_mrgn = 0             /*** Updating to Zero For SPAN Customer ***/
        WHERE   FMD_CLM_MTCH_ACCNT =:c_mtch_act_no
        AND     FMD_TRD_DT         =:c_trd_dt;

      if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog(c_ServiceName, "S31275", SQLMSG,c_err_msg);
        fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
        return;
      }
    }
		/****** Ver 1.8 New Code Starts ********************/
		if ( c_bse_spn_flag == 'N' )  
    {
      fn_userlog(c_ServiceName," Inside NORMAL BSE Customer for OPTION Margin Calculation  ");

			EXEC SQL
				SELECT	nvl(sum(decode(sign(nvl(FOR_BLKD_TRD_MRGN,0) - nvl(FOR_TRD_MRGN,0)),-1,nvl(FOR_TRD_MRGN,0), nvl(FOR_BLKD_TRD_MRGN,0))),0)
				INTO		:d_act_bse_mrgn
				FROM		FOR_OPT_IMTM_REP
				WHERE		for_clm_mtch_accnt = :c_mtch_act_no
		  	/** AND to_char(for_rprt_tm_stmp,'dd-Mon-yyyy hh24:mi:ss') in
                                        (SELECT MAX(TO_CHAR(for_rprt_tm_stmp,'dd-Mon-yyyy hh24:mi:ss')) ** Commented and modified for Ver 2.6 **/
		  	AND for_rprt_tm_stmp in
                                        (SELECT MAX(for_rprt_tm_stmp)
                                         FROM for_opt_imtm_rep
                                         WHERE for_clm_mtch_accnt = :c_mtch_act_no
                                         AND trunc(for_rprt_tm_stmp)=:c_trd_dt
																				 AND for_xchng_cd='BFO'
                                         GROUP BY for_undrlyng,for_strk_prc,for_exer_typ,for_opt_typ,for_expry_dt);
			if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    	{
    		fn_errlog(c_ServiceName, "S31280", SQLMSG,c_err_msg);
      	fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
      	return;
    	}


			EXEC SQL
				UPDATE  FMD_FO_MRGN_DTLS
				SET     FMD_BSE_OPT_MRGN = :d_act_bse_mrgn
				WHERE   FMD_CLM_MTCH_ACCNT= :c_mtch_act_no
				AND     FMD_TRD_DT=:c_trd_dt;

			if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    	{
    		fn_errlog(c_ServiceName, "S31285", SQLMSG,c_err_msg);
      	fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
      	return;
    	}
		}
		else if (c_bse_spn_flag == 'Y')  
    {
      fn_userlog(c_ServiceName," Inside BSE  SPAN Customer for OPTION Margin Calculation  ");
      EXEC SQL
        UPDATE  FMD_FO_MRGN_DTLS
        SET     fmd_bse_opt_mrgn = 0             
        WHERE   FMD_CLM_MTCH_ACCNT =:c_mtch_act_no
        AND     FMD_TRD_DT         =:c_trd_dt;

      if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog(c_ServiceName, "S31290", SQLMSG,c_err_msg);
        fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
        return;
      }
    }
		/****** Ver 1.8 New Code Ends ********************/

		/****** Ver 1.6 New code starts  ********/
/****		EXEC SQL
			SELECT NVL(FMD_TTL_AMT,0) + NVL(FMD_PAYIO,0) + NVL(FMD_PL_AMT,0) + NVL(FMD_OUTSTNDNG,0)
								 + NVL( FMD_BSE_PL_AMT,0) + NVL(FMD_BSE_PAYIO,0) + NVL(FMD_BSE_OUTSTNDNG,0) , *** Commented in Ver 2.8 ***/
    EXEC SQL
      SELECT NVL(FMD_TTL_AMT,0) + NVL(FMD_PAYIO,0) + NVL(FMD_BSE_PAYIO,0) +                                                 ( CASE WHEN (NVL(FMD_PL_AMT,0) + NVL(FMD_OUTSTNDNG,0)) < 0 THEN 0 ELSE (NVL(FMD_PL_AMT,0) + NVL(FMD_OUTSTNDNG,0)) END ) + ( CASE WHEN (NVL( FMD_BSE_PL_AMT,0) + NVL(FMD_BSE_OUTSTNDNG,0)) < 0 THEN 0 ELSE (NVL( FMD_BSE_PL_AMT,0) + NVL(FMD_BSE_OUTSTNDNG,0)) END),   /*** Change in Ver 2.8 ***/
						 NVL(FMD_EXCH_TOTAL_MRGN,0),
						 NVL(FMD_BSE_EXCH_TOTAL_MRGN,0),
						 NVL(FMD_FUT_MRGN,0) + nvl(FMD_OPT_MRGN,0)+ nvl(FMD_EXCH_PRMUM, 0), /** Premium Value Added in Ver 2.8 **/
						 NVL(FMD_BSE_FUT_MRGN,0) + nvl(FMD_BSE_OPT_MRGN,0) + nvl(FMD_BSE_EXCH_PRMUM, 0)  /** Premuim value added in Ver 2.8 **/
			INTO	:d_total_limit,
						:d_exch_tot_mrgn,
						:d_bse_exch_tot_mrgn,
						:d_isec_im_tot_mrgn,
						:d_bse_isec_im_tot_mrgn
			FROM 	fmd_fo_mrgn_dtls
			WHERE	FMD_CLM_MTCH_ACCNT=:c_mtch_act_no
      AND   FMD_TRD_DT=:c_trd_dt;
		if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
		{
    	fn_errlog(c_ServiceName, "S31295", SQLMSG,c_err_msg);
     	fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
     	return;
		}
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Margin Details From FMD for match:%s:are ",c_mtch_act_no);
			fn_userlog(c_ServiceName,"Total limit avalable:%lf:",d_total_limit);
			fn_userlog(c_ServiceName,"Total NSE exch margin:%lf:",d_exch_tot_mrgn);
			fn_userlog(c_ServiceName,"Total BSE exch margin:%lf:",d_bse_exch_tot_mrgn);
			fn_userlog(c_ServiceName,"Isec required total F & O Margin NSE:%lf:",d_isec_im_tot_mrgn);
			fn_userlog(c_ServiceName,"Isec required total F & O Margin BSE:%lf:",d_bse_isec_im_tot_mrgn);
		}

		d_exch_tot_mrgn	=	 d_exch_tot_mrgn	+	d_bse_exch_tot_mrgn;					/** Ver 1.8 **/
  /**		d_isec_im_tot_mrgn	=	 d_isec_im_tot_mrgn	+	d_bse_isec_im_tot_mrgn + d_mg_mtm_loss; ** Ver 1.8 ** ** d_mg_mtm_loss added in Ver 2.9 **/

    d_isec_im_tot_mrgn  =  d_isec_im_tot_mrgn + d_bse_isec_im_tot_mrgn; /** Agin change for Ver 2.9 **/ 
	
		if ( d_exch_tot_mrgn  >  d_isec_im_tot_mrgn)  
		{
			fn_userlog(c_ServiceName,"Margin Statement Inside Margin Requirement In Exchange Is Greter Than That In Isec RMS.");
			d_isec_im_tot_mrgn	=	0.0;
 		}	
		else
		{
			if(DEBUG_MSG_LVL_0)							/*** Ver 1.9 Debug Level Added **/
			{
				fn_userlog(c_ServiceName,"Margin Statement Inside Margin Requirement In Exchange Is less Than That In Isec RMS.");
				fn_userlog(c_ServiceName,"Margin Statement d_isec_im_tot_mrgn Is :%lf:",d_isec_im_tot_mrgn);
				fn_userlog(c_ServiceName,"Margin Statement d_exch_tot_mrgn Is :%lf:",d_exch_tot_mrgn);
			}
			d_isec_im_tot_mrgn	=	 d_isec_im_tot_mrgn	-	d_exch_tot_mrgn;

			fn_userlog(c_ServiceName,"After Calculation d_isec_im_tot_mrgn Is :%lf:",d_isec_im_tot_mrgn);
		}

		EXEC SQL
			UPDATE  FMD_FO_MRGN_DTLS
			SET     FMD_EXCH_SHRT_FLL =:d_total_limit - :d_exch_tot_mrgn,
							FMD_ISEC_REQMNT		=:d_isec_im_tot_mrgn 
			WHERE   FMD_CLM_MTCH_ACCNT=:c_mtch_act_no
			AND     FMD_TRD_DT=:c_trd_dt;

		if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
    	fn_errlog(c_ServiceName, "S31300", SQLMSG,c_err_msg);
      fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
      return;
    }
		fn_userlog(c_ServiceName,"Margin Updated Successfullyfor match:%s:",c_mtch_act_no);

			/*********** Ver 1.6 New code Ends ************/
/***** Ver 1.6 Following code is Commented as only current trade data data is required to be send to customer as per CR-ISEC14-22552***************************

 *** Select profit & loss amount from FLL for the previous trade date ***
	
		EXEC SQL
			SELECT	nvl(sum(fll_dc_amt),0)
			INTO	:d_pl_amt
			FROM  fll_fo_lmtupd_log
			WHERE	fll_clm_mtch_accnt = :c_mtch_act_no
			AND		trunc(fll_trd_dt) = :c_prvdate
			AND		fll_narration_id in ('PA','AA','AB','M1','M2','M4','M7','N','Q');
	
		if(SQLCODE != 0)
    {
      fn_errlog(c_ServiceName, "S31305", SQLMSG,c_err_msg);
			fn_userlog(c_ServiceName,"Error While Selecting fll_dc_amt"); 
      fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
      return;
    }

		if (DEBUG_MSG_LVL_3)       
   	{
	 		fn_userlog(c_ServiceName,"HERE Match_accnt :%s:",c_mtch_act_no);
			fn_userlog(c_ServiceName,"Current Trade Date :%s:", c_trd_dt);
  		fn_userlog(c_ServiceName,"Previous Trade Date :%s:", c_prvdate);
	 	}

 *** Update all allocation  and PNL  amounts for the previous trade date for the given trade date record  ***

		EXEC SQL
			UPDATE	fmd_fo_mrgn_dtls
			SET	(	
						fmd_prvtrd_dt,
						fmd_prvalctd_amt,
						fmd_prvbft_amt,
						fmd_prvplg_amt,
            fmd_prvisec_mrgn_amt,           *** Ver 1.5 ***
						fmd_prvpl_amt,
						fmd_prvttl_amt
					) =
					(
						SELECT
							fab_trd_dt,
							nvl(fab_alctd_amt,0),
		        	nvl(fab_bft_amt,0), 
							nvl(fab_plg_amt,0),
              nvl(fab_isec_mrgn_amt,0),        *** Ver 1.5 ***
							:d_pl_amt,
							nvl((fab_bft_amt+fab_alctd_amt+fab_plg_amt+ nvl(fab_isec_mrgn_amt,0)),0)  *** Ver 1.5 added fab_isec_mrgn_amt ***
		 				FROM	 	fab_fo_alc_bft_smry_dump,fmd_fo_mrgn_dtls
		 				WHERE 	fab_clm_mtch_accnt=fmd_clm_mtch_accnt
		 				AND   	fab_clm_mtch_accnt =:c_mtch_act_no
		 				AND   	fmd_trd_dt = :c_trd_dt
		 				AND	 		trunc(fab_trd_dt) = :c_prvdate
		 				GROUP BY fab_trd_dt,fab_plg_amt,fab_alctd_amt,fab_bft_amt,fab_isec_mrgn_amt * Ver 1.5 added fab_isec_mrgn_amt *
					)
			WHERE  fmd_trd_dt =:c_trd_dt								*** Ver 1.4 trunc removed ***
		 	AND		fmd_clm_mtch_accnt = :c_mtch_act_no;

			if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog(c_ServiceName, "S31310", SQLMSG,c_err_msg);
        fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
        return;
      }

		***  Updation of IM for both fut and opt for previous trade date ***

		EXEC SQL
			UPDATE	fmd_fo_mrgn_dtls
			SET 		fmd_prvfut_mrgn =(	SELECT 	fmd_fut_mrgn FROM fmd_fo_mrgn_dtls
														  		WHERE  	fmd_trd_dt = :c_prvdate
														 			AND    	fmd_clm_mtch_accnt = :c_mtch_act_no),
							fmd_prvopt_mrgn =(	SELECT 	fmd_opt_mrgn FROM fmd_fo_mrgn_dtls
																	WHERE  	fmd_trd_dt = :c_prvdate
																	AND    	fmd_clm_mtch_accnt = :c_mtch_act_no),
							fmd_prv_outstndng=(	SELECT	fmd_outstndng FROM fmd_fo_mrgn_dtls
																	WHERE  	fmd_trd_dt = :c_prvdate
                                	AND    	fmd_clm_mtch_accnt = :c_mtch_act_no),
							fmd_prv_payio		 =( SELECT  fmd_payio FROM fmd_fo_mrgn_dtls
																	WHERE		fmd_trd_dt = :c_prvdate
																	AND     fmd_clm_mtch_accnt = :c_mtch_act_no)

			WHERE		fmd_clm_mtch_accnt = 	:c_mtch_act_no
			AND     fmd_trd_dt  =	:c_trd_dt;			*** Ver 1.4 trunc removed ***
					

			if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog(c_ServiceName, "S31315", SQLMSG,c_err_msg);
        fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
        return;
      }
		************************ ver 1.6 Comment Ends ************************/
		EXEC SQL
			DELETE  FROM tmp_opn_pstn
			WHERE tmp_clm_mtch_accnt = :c_mtch_act_no;

			if(SQLCODE != 0) 
      {
        fn_errlog(c_ServiceName, "S31320", SQLMSG,c_err_msg);
        fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
        return;
      }

		if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    {
    	fn_errlog(c_ServiceName, "S31325", SQLMSG, c_err_msg);
      fn_userlog(c_ServiceName, "Error in commit [%s] exiting..", c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return;
    }

	}  /*** End of while ***/

	/***	Commented In Ver 1.2 For Posix Changes   

	*** Get match account and trade date  ***

	EXEC SQL
  	SELECT  count(distinct(fmd_clm_mtch_accnt||'*'||fmd_trd_dt||'*'))
   	INTO    :i_cntr
   	FROM    fmd_fo_mrgn_dtls
   	WHERE   fmd_trd_dt = :c_trd_dt
	 	AND  		 fmd_mail_snt_flg = 'N';

		if(SQLCODE != 0)
 	 	{
   		fn_errlog(c_ServiceName, "S31330", SQLMSG,c_err_msg);
   		return;
 	 	}

	EXEC SQL
  	DECLARE c_mail CURSOR FOR
   	SELECT  distinct(fmd_clm_mtch_accnt||'*'||fmd_trd_dt||'*')
   	FROM    fmd_fo_mrgn_dtls
	 	WHERE   fmd_trd_dt = :c_trd_dt
	 	AND     fmd_mail_snt_flg = 'N';

		if(SQLCODE != 0)
 	 	{
   		fn_errlog(c_ServiceName, "S31335", SQLMSG,c_err_msg);
   		fn_userlog(c_ServiceName,"Failed In Cursor");
   		return;
 	 	}

	if(DEBUG_MSG_LVL_3)       
  {
   	fn_userlog(c_ServiceName,"The number of mails to be sent are :%d:",i_cntr);
 	} 

	ptr_temp = (char **)malloc(sizeof(char *) * i_cntr);

  for(i = 0; i < i_cntr; i++)
		ptr_temp[i] = (char *)malloc(sizeof(char) * 50);

  EXEC SQL
    OPEN  c_mail;

	i_loop = 0;

  while(1)
  {
  	EXEC SQL
      FETCH c_mail
      INTO  :c_temp;

    if(SQLCODE != 0)
    {
    	if(SQLCODE == NO_DATA_FOUND)
      {
        EXEC SQL CLOSE c_mail;
        break;
      }
			EXEC SQL CLOSE c_mail;
      fn_errlog(c_ServiceName, "S31340", SQLMSG,c_err_msg);
      return;
    }

    strcpy((char *)ptr_temp[i_loop], c_temp);
    i_loop++;
  }


  EXEC SQL CLOSE c_mail;

		
	for(i = 0; i < i_loop; i++)
	{
	
  	if(DEBUG_MSG_LVL_3)       
  	{	
    	fn_userlog(c_ServiceName,"The string is :%s:", ptr_temp[i]);
  	}

  	strcpy(c_mtch_accnt, strtok((char *)ptr_temp[i], "*"));
  	strcpy(c_trd_dt, strtok(null_ptr, "*"));

  	rtrim(c_mtch_accnt);
  	rtrim(c_trd_dt);

  	if(DEBUG_MSG_LVL_3)       
  	{	
    	fn_userlog(c_ServiceName,"Match Account   :%s:", c_mtch_accnt);
    	fn_userlog(c_ServiceName,"Trade Date  :%s:", c_trd_dt);
  	}


  	MEMSET(c_usr_nm);
  	MEMSET(c_email_addrss);
  	MEMSET(c_email_addrss2);

		*** Getting Customer Mail Addresses From User Master ***
		EXEC SQL
  		SELECT  usr_usr_nm,
          		usr_email_addrss,
          		NVL(usr_email_addrss2,' ')
  		INTO  	:c_usr_nm,
        			:c_email_addrss,
        			:c_email_addrss2
  		FROM  	usr_user_master, uac_usr_accnts
  		WHERE 	usr_usr_id = uac_usr_id
  		AND   	uac_clm_mtch_accnt = :c_mtch_accnt;

		if(SQLCODE != 0)
		{
  		fn_errlog(c_ServiceName, "S31345", SQLMSG,c_err_msg);
  		fn_userlog(c_ServiceName,"Failed To Get Mail Id");
  		return;
		}

		rtrim(c_usr_nm);
		rtrim(c_email_addrss);
		rtrim(c_email_addrss2); 
		
		if(DEBUG_MSG_LVL_3)       
  	{
  		fn_userlog(c_ServiceName,"User Name  :%s:", c_usr_nm);
  		fn_userlog(c_ServiceName,"Primary Email  :%s:", c_email_addrss);
  		fn_userlog(c_ServiceName,"Secondary Email Address  :%s:", c_email_addrss2);
		}

	  ** Condition for validiating  e-mail address. **

		if(strcmp(c_email_addrss2," ")!=0)
		{
  		if(strcmp(c_email_addrss2, "Enter @ Valid Email ID.") == 0 ||
     		 strcmp(c_email_addrss2, "enter @ valid email id.") == 0 ||
         strcmp(c_email_addrss2, "xyz@.") == 0 ||
         strcmp(c_email_addrss2, "xyz@xyz.com") == 0 ||
         strcmp(c_email_addrss2, "xyz@.com") == 0 ||
         strchr(c_email_addrss2,'@')==NULL || strchr(c_email_addrss2,'.')==NULL )
   		{
     		fn_userlog(c_ServiceName,"%s", c_event);
     		strcpy(c_email_addrss2, " ");
   		}
		}

		if(strcmp(c_email_addrss, "Enter @ Valid Email ID.") == 0 ||
    	 strcmp(c_email_addrss, "enter @ valid email id.") == 0 ||
       strcmp(c_email_addrss, "xyz@.") == 0 ||
       strcmp(c_email_addrss, "xyz@xyz.com") == 0 ||
       strcmp(c_email_addrss, "xyz@.com") == 0 ||
       strchr(c_email_addrss,'@')==NULL || strchr(c_email_addrss,'.')==NULL )
    	{
     		i_invalid_mails++;
     		fn_userlog(c_ServiceName,"%s", c_event);
   		}

		
		else
		{
  		*Call the script to send the mail*

  		sprintf(c_command, "ksh %s/mrgn_mailer.sh %s %s \"%s\" \"%s\" \"%s\"",
            	c_path, c_mtch_accnt, c_trd_dt, c_usr_nm, c_email_addrss,c_email_addrss2);


  		********Trap the return value of the mail sending script*********

			fn_userlog(c_ServiceName,"The Command Is :%s:",c_command);
  		i_mail_status = system(c_command);
  		MEMSET(c_command);
  		system(c_command);

  		*********** Begining the transaction *************

  		i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  		if( i_trnsctn == -1 )
  		{
    		fn_errlog(c_ServiceName, "S31350", LIBMSG, c_err_msg);
    		fn_userlog(c_ServiceName, "Error while beginning the transaction");
    		return;
  		}
		
			if(i_mail_status == 0)
			{
  			i_success_mails_sent++;
  			if(i_success_mails_sent % 100 == 0)
  			{
    			fn_userlog(c_ServiceName,":%d: mails successfully sent.", i_success_mails_sent);
  			}
			}
	  	else
			{
  			fn_userlog(c_ServiceName,"Mail sending failed for Match account :%s:.",c_mtch_accnt);
			}

			*** Updation Of Mail Status ***
	  	EXEC SQL
    		UPDATE	fmd_fo_mrgn_dtls
    		SET 		fmd_mail_snt_flg = decode( :i_mail_status,0,'Y','F')
    		WHERE 	fmd_clm_mtch_accnt = :c_mtch_accnt
    		AND 		trunc(fmd_trd_dt) = :c_trd_dt;

			if(SQLCODE != 0)
 			{
   			fn_errlog(c_ServiceName, "S31355", SQLMSG,c_err_msg);
   			fn_userlog(c_ServiceName,"Failed To Update Flag ");
   			fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
   			return;
 			}

			if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    	{
    		fn_errlog(c_ServiceName, "S31360", SQLMSG, c_err_msg);
     	 	fn_userlog(c_ServiceName, "Error in commit [%s] exiting..", c_err_msg);
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	return;
   	 	}
		}

		i_count++;

	} * End of for loop*

	if(i_count == 0)
	{
  	fn_userlog(c_ServiceName,"No records processed.");
	}
	else
	{
  	fn_userlog(c_ServiceName," :%d: records processed.", i_count);
  	fn_userlog(c_ServiceName," :%d: mails to be sent.",i_cntr);
  	fn_userlog(c_ServiceName," :%d: mails sucessfully sent.",i_success_mails_sent);
	}

	**  sending  mail send report to specified IDs **
	i_mails_failed_other = i_count - i_success_mails_sent - i_invalid_mails ;

	sprintf(c_command,"ksh %s/mrgn_mailer_report.sh %s %d %d %d %d", c_path,c_trd_dt,i_count,
	i_success_mails_sent,i_invalid_mails,i_mails_failed_other);
	system(c_command);

	if (DEBUG_MSG_LVL_3)       
  {
  	fn_userlog(c_ServiceName,"Finished sending mails.");
	}

	for(i = 0; i < i_cntr; i++)
	{
  	tpfree((char*)ptr_temp[i]);
	}

	tpfree(*ptr_temp);

	Comment Ended	*********************/

	if (DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"The Command Is :%s:",c_command);
		fn_userlog(c_ServiceName,"Before Call To Click Upload");
	}
   
 	i_ret_val = system(c_command);			/*** Ver 1.2 ***/

	fn_userlog(c_ServiceName," i_ret_val Is :%d:",i_ret_val);

	fn_userlog(c_ServiceName," After Call To Click Upload");

	return;

}

int fn_bat_init ( int argc, char *argv[] )
	{
  	fn_var = BAT_MRGNDTLS_MAIL;
    return 0;
  }

void fn_bat_term ( int argc, char *argv[] )
	{
  	return;
  }

int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
	{
  	return 0;
  }
