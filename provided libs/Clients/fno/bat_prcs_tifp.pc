/******************************************************************************/
/*  Program           : BAT_PRCS_TIFP																			  	*/
/*                                                                            */
/*  Input             : FFO_PLG_TYP																						*/
/*											FFO_EXECN_DT																					*/
/*											FFO_STCK_CD																						*/
/*											FFO_DP_CLNT_ID																				*/
/*											FFO_DPID																							*/
/*											FFO_OPERATION_TYP																			*/
/*																																						*/
/*                                                                            */
/*  Output            :  Integer 1 on sucess and 0 on fail                    */
/*                                                                            */
/*  Description       :  This batch process internally call SFO_PRCS_TIFP		  */
/*                                                                            */
/*  Service. if dpid is * this process can be run for all dpids.			  			*/
/*  pledge type  										                           								*/
/*																																						*/
/*																																						*/
/*  Log               : 1.0   15-oct-2004   Infotech|Himanshu Ahire           */
/*										:	1.1		01-Mar-2008		Infotech|Ranjit										*/
/*										:	1.2		30-Jan-2014		Infotech|Samip M									*/
/*  Reviewed By       : 1.0                                                   */
/*                                                                            */
/******************************************************************************/
/*   1.0  -  New release                                                      */
/*   1.2  -  TPNOTIME added to avoid timeout                                  */
/******************************************************************************/

#include "fn_collateral.h"
#include <fn_read_debug_lvl.h>		/* ver 1.1 */

#define		BUF_MULTIPLY 1
#define		MAX	7 

int main (int argc ,char* argv[])
{
		char	c_ServiceName [ 33 ];
		char	c_err_msg[256];
		char	c_clm_mtch_accnt[11];
		char	c_dp_id[9];
		char	c_dp_clnt_id[9];
		char	c_stck_cd[7];
		char	c_execn_dt[15];
		char  c_tag[35];
		char  c_msg[256];

		char	c_plg_typ;
		char	c_operation_typ;

		int  i_err[MAX];
		int  i_returncode;
		int  i_cnt;
		int  count=0;

		long int  li_Obuf_len;


		FBFR32 *ptr_fml_Ibuffer = (FBFR32 *)NULL;         /* Pointer to FML Input buffer */
		FBFR32 *ptr_fml_Obuffer = (FBFR32 *)NULL;
		

		strcpy(c_ServiceName ,"bat_prcs_tifp");
	
		INITBATDBGLVL(argv[0]);		/* ver 1.1 */
	
		if( argc !=  10 )
		{
			strcpy(c_err_msg,
			"bat_prcs_tifp <PledgeTyp><Execn Date><StockCode> <dpid> <dpClientId>\
			<OprationTyp> <Config File > <Exchange Code> < Pipe Id>");

			fn_userlog(c_ServiceName,c_err_msg );
			fn_userlog(c_ServiceName,"no of arguments got is :%d:", argc);
			destroy_bat();
		}

     strcpy( c_msg, "STAGE 1.0 Starting BAT_PRCS_TIFP...");
     fn_userlog( c_ServiceName,c_msg);
     fn_userlog( c_ServiceName,"config File :%s:"   ,argv[7]);
     fn_userlog( c_ServiceName,"Exchange Code :%s:" ,argv[8]);
     fn_userlog( c_ServiceName,"Pipe Id :%s:"       ,argv[9]);

  	sprintf(c_tag,"%s_%s",c_ServiceName,argv[7]);

  	init_bat(c_ServiceName,argv[8],argv[9]);

 		if(DEBUG_MSG_LVL_3)
		{
    	fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
  	}
		
		
	/************************* Getting Input from commandline *********************/

		NULLCHAR(c_execn_dt);
		NULLCHAR(c_stck_cd);
		NULLCHAR(c_dp_clnt_id);
		NULLCHAR(c_dp_id);


		if( strcmp(argv[1],"P") == 0)
				c_plg_typ = 'P';
		else if ( strcmp(argv[1],"R") == 0)
				c_plg_typ = 'W';
		else if ( strcmp(argv[1],"I") == 0)
				c_plg_typ = 'I';
		else 
		{
					strcpy(c_err_msg,"Invalid Pledge Type must be P,R or I");
					fn_userlog(c_ServiceName,c_err_msg );
	  			fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
					destroy_bat();
		}

		if(strcmp(argv[6],"R") == 0 )
				c_operation_typ = 'R';
		else if (strcmp(argv[6],"C") == 0)
				c_operation_typ = 'C';
		else 
		{
			strcpy(c_err_msg,"Invalid Operation Type must be C or R ");
			fn_userlog(c_ServiceName,c_err_msg );
	  	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
			destroy_bat();
		}


	/**************** If DPID is (*) run process for all DPIDs  *****************/

		strcpy(c_execn_dt     , argv[2]);

		if ( (strcmp( argv[3], "*") == 0) || ( strcmp(argv[3], "A") == 0) )
		{
				strcpy(c_stck_cd,"******");
		}
		else
		{
				strcpy(c_stck_cd , argv[3]);
		}


		if( (strcmp (argv[4],"*") == 0) || (strcmp(argv[4],"A") == 0 ) )
		{
				NULLCHAR(c_dp_id);
				NULLCHAR(c_dp_clnt_id);

				strcpy(c_dp_id			,"********");
				strcpy(c_dp_clnt_id	,"********");
		}			
		else
		{
				if( (strcmp (argv[5],"*") == 0) || (strcmp(argv[5],"A") == 0 ) )
				{
					 strcpy(c_err_msg,"DP Client Id can't be A or *");
					 fn_userlog(c_ServiceName,c_err_msg);
					 fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
					 destroy_bat();
				}
				strcpy(c_dp_id        , argv[4]);
				strcpy(c_dp_clnt_id   , argv[5]);
		}


	/**************** Allocate Memory to input and output buffer *****************/


		ptr_fml_Ibuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN * 2);

		if (ptr_fml_Ibuffer == NULL)
		{
			 fn_errlog(c_ServiceName, "S31005", TPMSG, c_err_msg);
	  	 fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
			 destroy_bat();
		}

		ptr_fml_Obuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

		if (ptr_fml_Obuffer == NULL)
		{
				fn_errlog(c_ServiceName, "S31010", TPMSG, c_err_msg);
	  	 	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
				tpfree((char *)ptr_fml_Ibuffer);
				destroy_bat();
		}

		Finit32(ptr_fml_Ibuffer, (FLDLEN32) Fsizeof32(ptr_fml_Ibuffer));
		Finit32(ptr_fml_Obuffer, (FLDLEN32) Fsizeof32(ptr_fml_Obuffer));
		

	/**************************** Add input to FML   ****************************/

		fn_userlog( c_ServiceName, "Pledge Type :%c: "			,c_plg_typ			);
		fn_userlog( c_ServiceName, "Execution Date :%s:"		,c_execn_dt			);
		fn_userlog( c_ServiceName, "Stock Code :%s:"				,c_stck_cd			);
		fn_userlog( c_ServiceName, "Dp Client Id :%s:"			,c_dp_clnt_id		);
		fn_userlog( c_ServiceName, "Dp Id :%s:"						,c_dp_id				);
		fn_userlog( c_ServiceName, "Operation Type :%c:"		,c_operation_typ);

		i_err [0] = Fadd32(ptr_fml_Ibuffer,FFO_PLG_TYP        ,(char*)&c_plg_typ ,0);
		i_err [1] = Fadd32(ptr_fml_Ibuffer,FFO_EXECN_DT       ,c_execn_dt ,0);
		i_err [2] = Fadd32(ptr_fml_Ibuffer,FFO_STCK_CD        ,c_stck_cd ,0);
		i_err [3] = Fadd32(ptr_fml_Ibuffer,FFO_DP_CLNT_ID     ,c_dp_clnt_id ,0);
		i_err [4] = Fadd32(ptr_fml_Ibuffer,FFO_DPID        		,c_dp_id ,0);
		i_err [5] = Fadd32(ptr_fml_Ibuffer,FFO_OPERATION_TYP	,(char*)&c_operation_typ ,0);
		i_err [6] = Fadd32(ptr_fml_Ibuffer,FFO_BAT_TAG				,c_tag,0);



		for ( i_cnt=0; i_cnt < MAX; i_cnt++ )
		{
				if ( i_err[ i_cnt ] == -1 )
				{
						sprintf(c_msg, "ERROR : At FML no :%d:",i_cnt);
						fn_errlog( c_ServiceName,"S31015",Fstrerror32(i_err[i_cnt]),c_err_msg );
	  	 			fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
						fn_userlog(c_ServiceName,c_msg);
	  	 			fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
						tpfree((char *)ptr_fml_Ibuffer);
						tpfree((char*)ptr_fml_Obuffer);
						destroy_bat();
				}
		}

	/************************* Call Service SFO_PRCS_TIFP  ***********************/


/**		i_returncode = tpcall("SFO_PRCS_TIFP", (char*)ptr_fml_Ibuffer, 0,
														 (char **)&ptr_fml_Obuffer, &li_Obuf_len, 0);***//** Commented for Ver 1.2 **/
		i_returncode = tpcall("SFO_PRCS_TIFP", (char*)ptr_fml_Ibuffer, 0,
														 (char **)&ptr_fml_Obuffer, &li_Obuf_len, TPNOTIME); /*** TPNOTIME added for Ver 1.2 **/
		
		if ( i_returncode == -1 )
		{
				if ( tperrno  == TPESVCFAIL )
				{
					memset(c_err_msg,0,sizeof(c_err_msg));
						
					if( Fget32( ptr_fml_Obuffer, FFO_ERR_MSG, 0,c_err_msg, 0 ) == -1 )
					{
							fn_errlog(c_ServiceName,"S31020",Fstrerror32(Ferror32),c_msg);
					}

					fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
					fn_userlog(c_ServiceName,c_err_msg);
					sprintf(c_msg,"ERROR : Service Fail ");
					fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
					fn_userlog(c_ServiceName,c_msg);
				}
				else
				{
					fn_errlog ( c_ServiceName, "S31025", TPMSG,c_err_msg);
	  	 		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
				}

				tpfree ( ( char * ) ptr_fml_Ibuffer );
				tpfree ( ( char * ) ptr_fml_Obuffer );
				destroy_bat();
		}	

		/*************** Unlock users locked by Create TIFP process ************/

		if(c_operation_typ == 'R')
		{
				EXEC SQL
				SELECT	count(*)
				INTO   	:count	
				FROM		PTD_TIFP_DTLS
				WHERE 	PTD_TIFP_STTS = 'N';

				if(SQLCODE != 0)
				{
						fn_errlog ( c_ServiceName, "S31030",SQLMSG,c_err_msg);
						fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
						tpfree ( ( char * ) ptr_fml_Ibuffer );
						tpfree ( ( char * ) ptr_fml_Obuffer );
						destroy_bat();
				}

				EXEC SQL
				UPDATE  PPP_PAR_PLG_PRMTR
				SET     PPP_PLG_OPNCLS_FLG = 'Y',
								PPP_CLNT_SPT_FLG   = 'Y';

				if(SQLCODE != 0)
				{
							fn_errlog(c_ServiceName, "S31035", SQLMSG, c_err_msg);
							fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
							tpfree ( ( char * ) ptr_fml_Ibuffer );
							tpfree ( ( char * ) ptr_fml_Obuffer );
							strcpy(c_msg,"Dead Lock Users can not be unlocked Now ");
							fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
							fn_userlog(c_ServiceName,c_msg);
							destroy_bat();
				}


				if(count > 0)
				{
					sprintf(c_msg,"%d records still remain to process But all users are unlocked",count);
					fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
					fn_userlog(c_ServiceName,c_msg);
				}
				else
				{
						strcpy(c_msg,"All Users are UnLocked for collateral");
						fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
						fn_userlog(c_ServiceName,c_msg);
				}
				
		}
		
		fn_userlog(c_ServiceName,"ALL Done ");
	  fn_bat_pst_msg(c_ServiceName,"ALL Done ",c_tag);

		tpfree ( ( char * ) ptr_fml_Ibuffer );
		tpfree ( ( char * ) ptr_fml_Obuffer );
		destroy_bat();
}

