/******************************************************************************/
/*	Program           : BAT_SPT_CAN                                           */
/*                                                                            */
/*  Input             : <bat_spt_can>  								                        */
/*                                                                            */
/*  Output            : Integer 1 on sucess and 0 on fail                     */
/*                                                                            */
/*  Description       : This bat process finds failure records in bat_plg_spt */
/*											and cancel those records by calling service						*/
/*										  sfo_moncan_plg.																				*/
/*                                                                            */
/*  Log               : 1.0   03-Nov-2009  Infotech|Shamili Dalvi             */
/*  Log               : 1.1   22-Apr-2015  Infotech|Samip M										*/
/*                                                                            */
/******************************************************************************/
/*   1.0  -  New release                                                      */
/*   1.1  -  Changes for SAM Block Unblock                                    */
/******************************************************************************/	

#include "fn_collateral.h"
#include <fn_read_debug_lvl.h>

#define CANCEl C
#define INPUTS 11

char c_tag[32];
char c_ServiceName [ 33 ];
int i_trnsctn = -1;
FBFR32 *ptr_fml_Ibuffer;
FBFR32 *ptr_fml_Obuffer;
void do_err(char* c_err_msg ,int flag);

int main (int argc , char* argv[])
{

	 varchar c_clm_mtch_accnt[11] ;
	 varchar c_channel[5];  
	 varchar c_usr_id[10];
	 varchar c_ordr_dt[22];
	 char	c_plg_rev_typ;
	 char	c_oprn_typ;
	 char c_msg[256];
   char c_err_msg[256 + 1];
	 char c_xchng_cd[4];	
	 char c_dp_id[9];
   char c_dp_clnt_id[9];
	 char c_stck_cd[7];

	 int  i,j;
	 int  i_cnt=0;
	 int	i_no_of_record;
	 int  i_returncode;
   int  i_err[INPUTS];
	 long li_Ibuf_len=0;
	 long	l_sssn_id;
	 long l_run_no;
	 long l_rate;
	 long l_qty;


	 NULLCHAR(c_ServiceName);
   NULLCHAR(c_tag);
   NULLCHAR(c_err_msg);	 
	 
	 MEMSET(c_clm_mtch_accnt);
	 MEMSET(c_usr_id);
	 MEMSET(c_channel);
	 MEMSET(c_ordr_dt);

	 strcpy(c_ServiceName ,"bat_spt_can");
   INITBATDBGLVL(argv[0]);   

	 if(argc != 5)
   {
      fn_userlog(c_ServiceName, "Usage: bat_spt_can <Config File> <Exchange Cd> <Pipe Id> <Sequence number >");
      exit(-1);
   }

	 strcpy( c_msg, "STAGE 1.0 Starting BAT_SPT_CAN...");
	 if (DEBUG_MSG_LVL_3){
   fn_userlog( c_ServiceName,c_msg);
   fn_userlog( c_ServiceName,"config File :%s:"   ,argv[1]);
   fn_userlog( c_ServiceName,"Exchange Code :%s:" ,argv[2]);
   fn_userlog( c_ServiceName,"Pipe Id :%s:"       ,argv[3]);
	 fn_userlog( c_ServiceName,"Sequence Number:%s:",argv[4]);
	 }

   sprintf(c_tag,"%s_%s",c_ServiceName,argv[1]);
   init_bat(c_ServiceName,argv[2],argv[3]);

   if (DEBUG_MSG_LVL_3)      
   {
        fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
   }
	
	 l_run_no =  atol(argv[4]); 

	 if (l_run_no == 0 )
   {
        strcpy(c_msg,"Please Enter Valid Sequence Number");
        fn_userlog(c_ServiceName,c_msg);
        do_err(c_msg,0);
   } 
	
	 fn_userlog( c_ServiceName, "Sequence Number is :%ld:",l_run_no);	

	  ptr_fml_Ibuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
    if (ptr_fml_Ibuffer == NULL)
    {
        fn_errlog(c_ServiceName, "S31005", TPMSG, c_err_msg);
        do_err(c_err_msg,0);
    }

    ptr_fml_Obuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
    if (ptr_fml_Obuffer == NULL)
    {
        fn_errlog(c_ServiceName, "S31010", TPMSG, c_err_msg);
        do_err(c_err_msg,0);
    }

		/*** Commented for Ver 1.1 ****
	 EXEC SQL
				SELECT count(*) 
				INTO   :i_no_of_record
			 	FROM   psd_plg_spt_dtls,pod_plg_ordr_dtls
				WHERE  psd_spt_flg 		= 'Y'
				AND    psd_run_no 	  = :l_run_no
				AND    pod_ordr_stts  = 'R'
				AND    pod_clnt_mtch_accnt = psd_clm_mtch_accnt
				AND    pod_stck_cd 				 = psd_stck_cd
				AND    pod_dp_accnt 			 = psd_dp_id
				AND    pod_dp_clnt_accnt   = psd_dp_clnt_id;

		**** Ver 1.1 *******/

		/*** Added for Ver 1.1 ****/
			EXEC SQL
				SELECT	count(1)
				INTO		:i_no_of_record
				FROM		psd_plg_spt_dtls,SBD_SAM_BKUBK_DTLS
				WHERE		psd_spt_flg 		= 'Y'
				AND			psd_run_no 	  = :l_run_no
				AND			SBD_BKUBK_STTS = 'R'
				AND			SBD_CLNT_MTCH_ACCNT = psd_clm_mtch_accnt
				AND			SBD_STCK_CD = psd_stck_cd
				AND			SBD_DP_ACCNT = psd_dp_id
				AND			SBD_DP_CLNT_ACCNT = psd_dp_clnt_id;
			/*** Ver 1.1 ***/


	 			if(SQLCODE != 0)
   			{
        		fn_errlog(c_ServiceName, "S31015", SQLMSG, c_err_msg);
        		do_err(c_err_msg,0);
   			}

	 			if(i_no_of_record  <= 0)
   			{
        		strcpy(c_msg, "No data To Process....");
        		fn_userlog(c_ServiceName,c_msg);
        		do_err(c_msg,0);
	 			}
	
	 			sprintf(c_msg,"Total Number of Records to be Process :%d:",i_no_of_record);
   			fn_bat_pst_msg( c_ServiceName, c_msg, c_tag );


				MEMSET(c_ordr_dt);
				SETNULL(c_ordr_dt);

				/****************************/
				/**** Declaring cursor ******/
				/****************************/

				/*** Commented for Ver 1.1 ****
				EXEC SQL
						 DECLARE cur_pod_psd CURSOR FOR
							SELECT psd_clm_mtch_accnt,
                     psd_dp_id,
                     psd_dp_clnt_id,
										 pod_channel, 
                     psd_stck_cd,
                     pod_ordr_qty,
										 psd_rt,
                     to_char(pod_ordr_dt,'dd-Mon-yyyy hh24:mi:ss'),
                     pod_plg_rev_typ 
										 FROM   psd_plg_spt_dtls,pod_plg_ordr_dtls
										 WHERE  psd_spt_flg 		= 'Y'
										 AND    psd_run_no  		= :l_run_no
										 AND    pod_ordr_stts 	= 'R'
										 AND    pod_clnt_mtch_accnt = psd_clm_mtch_accnt
										 AND    pod_stck_cd 			  = psd_stck_cd
										 AND    pod_dp_accnt 				= psd_dp_id
										 AND    pod_dp_clnt_accnt 	= psd_dp_clnt_id;

					**** Ver 1.1 **********/

				/*** Added for Ver 1.1 ***/
				EXEC SQL
						 DECLARE cur_pod_psd CURSOR FOR
							SELECT psd_clm_mtch_accnt,
                     psd_dp_id,
                     psd_dp_clnt_id,
										 SBD_CHANNEL, 
                     psd_stck_cd,
                     SBD_BKUBK_QTY,
										 psd_rt,
                     to_char(SBD_BKUBK_DT,'dd-Mon-yyyy hh24:mi:ss'),
                     SBD_SAM_BKUBK_TYP 
										 FROM   psd_plg_spt_dtls,SBD_SAM_BKUBK_DTLS
										 WHERE  psd_spt_flg 		= 'Y'
										 AND    psd_run_no  		= :l_run_no
										 AND    SBD_BKUBK_STTS 	= 'R'
										 AND    SBD_CLNT_MTCH_ACCNT = psd_clm_mtch_accnt
										 AND    SBD_STCK_CD 			  = psd_stck_cd
										 AND    SBD_DP_ACCNT 				= psd_dp_id
										 AND    SBD_DP_CLNT_ACCNT 	= psd_dp_clnt_id;

				/*** Ver 1.1 ***/

						if(SQLCODE !=0 && (SQLCODE != NO_DATA_FOUND))
						{
								EXEC SQL CLOSE cur_pod_psd;
								fn_errlog(c_ServiceName, "S31020", SQLMSG, c_err_msg);
								do_err(c_err_msg,0);
						}	
						else if ( SQLCODE == NO_DATA_FOUND)
						{
								EXEC SQL CLOSE cur_pod_psd;
								sprintf(c_err_msg,"Failure record not Found");	
								fn_bat_pst_msg( c_ServiceName, c_err_msg, c_tag );
								do_err(c_err_msg,0);
						}
					
					/****************************/
				  /****** Opening cursor ******/
					/****************************/

					EXEC SQL
							 OPEN cur_pod_psd;

					if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
					{
						EXEC SQL CLOSE cur_pod_psd;
						fn_errlog(c_ServiceName, "S31025", SQLMSG, c_err_msg);
						Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
					}
					if ( SQLCODE == NO_DATA_FOUND)
					{
						EXEC SQL CLOSE cur_pod_psd;

						fn_errlog(c_ServiceName, "S31030", SQLMSG, c_err_msg);
						strcpy(c_msg,"No Data Found  ");
						fn_userlog(c_ServiceName,c_msg);
						Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
					}

					/**********************************/
          /**** Fetching data from cursor ***/
          /**********************************/	
			
				  for(i=1;i <= i_no_of_record; i++) 
				  {	

						      EXEC SQL FETCH	cur_pod_psd
									INTO    :c_clm_mtch_accnt,
													:c_dp_id,
													:c_dp_clnt_id,
													:c_channel,
													:c_stck_cd,
													:l_qty,
													:l_rate,
													:c_ordr_dt,
													:c_plg_rev_typ;
													
								 if(SQLCODE != 0)
    						 {
											if(SQLCODE == NO_DATA_FOUND)
											{
												fn_userlog(c_ServiceName,c_msg);
											  EXEC SQL CLOSE cur_pod_psd;
											  break;
											}
											else
											{
												EXEC SQL CLOSE cur_pod_psd;
												sprintf(c_msg,"Error occured while fetching cur_pod_psd ,sqlcode-:%d:",sqlca.sqlcode);
												fn_userlog(c_ServiceName,c_msg);
												fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg  );
											}

           						EXEC SQL CLOSE cur_pod_psd;
           					  Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
           						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
								 }


								 c_oprn_typ = CANCEL;
								 l_sssn_id = 0;
								 strcpy(c_usr_id.arr,"system");
								 rtrim(c_stck_cd);
								 SETLEN(c_ordr_dt);

								 if( DEBUG_MSG_LVL_3 ) {
								 fn_userlog(c_ServiceName,"c_usr_id 				:%s:",	c_usr_id.arr);
								 fn_userlog(c_ServiceName,"c_clm_mtch_accnt	:%s:",	c_clm_mtch_accnt.arr);
								 fn_userlog(c_ServiceName,"l_sssn_id				:%ld:",	l_sssn_id);
								 fn_userlog(c_ServiceName,"c_oprn_typ 		  :%c:",	c_oprn_typ);
								 fn_userlog(c_ServiceName,"c_channel  			:%s:",	c_channel.arr);
								 fn_userlog(c_ServiceName,"c_dp_id    			:%s:",	c_dp_id);
								 fn_userlog(c_ServiceName,"c_dp_clnt_id 		:%s:",	c_dp_clnt_id);
								 fn_userlog(c_ServiceName,"c_stck_cd 				:%s:",	c_stck_cd);
								 fn_userlog(c_ServiceName,"l_qty 						:%ld:",	l_qty);
								 fn_userlog(c_ServiceName,"c_ordr_dt 				:%s:",	c_ordr_dt.arr);
								 fn_userlog(c_ServiceName,"c_plg_rev_typ 		:%c:",	c_plg_rev_typ);
								 }


								 Finit32(ptr_fml_Ibuffer, (FLDLEN32) Fsizeof32(ptr_fml_Ibuffer));
        				 Finit32(ptr_fml_Obuffer, (FLDLEN32) Fsizeof32(ptr_fml_Obuffer));
					 
						
								i_err[0] = Fadd32(ptr_fml_Obuffer,FFO_USR_ID,(char *)c_usr_id.arr,0);
								i_err[1] = Fadd32(ptr_fml_Obuffer,FFO_EBA_MTCH_ACT_NO,(char *)c_clm_mtch_accnt.arr,0);
								i_err[2] = Fadd32(ptr_fml_Obuffer,FFO_SSSN_ID,(char *)&l_sssn_id,0);     
								i_err[3] = Fadd32(ptr_fml_Obuffer,FFO_OPERATION_TYP,(char *)&c_oprn_typ,0);
								i_err[4] = Fadd32(ptr_fml_Obuffer,FFO_CHANNEL,(char *)c_channel.arr,0);
								i_err[5] = Fadd32(ptr_fml_Obuffer,FFO_DPID,(char *)c_dp_id,0);
								i_err[6] = Fadd32(ptr_fml_Obuffer,FFO_DP_CLNT_ID,(char *)c_dp_clnt_id,0);
								i_err[7] = Fadd32(ptr_fml_Obuffer,FFO_STCK_CD,(char *)c_stck_cd,0);
								i_err[8] = Fadd32(ptr_fml_Obuffer,FFO_ORD_TOT_QTY,(char *)&l_qty,0);
								i_err[9] = Fadd32(ptr_fml_Obuffer,FFO_ORD_DT,(char *)c_ordr_dt.arr,0);
								i_err[10] = Fadd32(ptr_fml_Obuffer,FFO_ORD_TYP,(char *)&c_plg_rev_typ,0);	

								for(j =0;j < INPUTS ;j++)
        				{
            			 if(i_err[j]==-1)
            				{
											EXEC SQL CLOSE cur_pod_psd;
                			sprintf(c_msg,"ERROR in FML Field no  :%d: ",i);
                			fn_userlog(c_ServiceName,c_msg);
                			fn_bat_pst_msg( c_ServiceName, c_msg, c_tag );
											do_err(c_err_msg,0);
            				}
        				}
	
					

							 i_returncode = tpcall("SFO_MODCAN_PLG",
                            				  (char*)ptr_fml_Obuffer,
                            				  0,
                            				  (char **)&ptr_fml_Ibuffer,
                            				  &li_Ibuf_len,
                            				  0);

							if ( i_returncode == -1 )
							{

									if ( tperrno != TPESVCFAIL )
            			{
                			fn_errlog ( c_ServiceName, "S31040", TPMSG,c_err_msg);
                			do_err(c_err_msg,0);
           		 		}	

							 		fn_errlog ( c_ServiceName, "S31045", TPMSG,c_err_msg);
							 		Fget32 ( ptr_fml_Ibuffer, FML_ERR_MSG, 0, c_err_msg, 0 );
									sprintf(c_err_msg,"ERROR in Modification of record :%d: Skipping record ..............",i);
            	 		fn_bat_pst_msg( c_ServiceName, c_err_msg, c_tag ); 
							 		fn_userlog(c_ServiceName,"Skipping record ............... ");

						  }	
							else
							{
									i_cnt ++;
		 							sprintf(c_msg,"Order for match id %s cancelled  sucessfully",c_clm_mtch_accnt.arr);
        					fn_bat_pst_msg( c_ServiceName,c_msg,c_tag);
							}
	
				
	    		} /** End of for Loop **/	 	 


					EXEC SQL CLOSE cur_pod_psd;
				 

					sprintf(c_msg," %d records updated out of %d records ",i_cnt,i_no_of_record);	
					fn_userlog(c_ServiceName,c_msg);
    			fn_bat_pst_msg( c_ServiceName,c_msg,c_tag );

    			fn_userlog(c_ServiceName,"ALL DONE ");
    			do_err("ALL DONE",0);


}
void do_err(char* c_err_msg ,int flag)
{
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    if(flag)
    {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    }
    tpfree ( ( char * ) ptr_fml_Ibuffer );
    tpfree ( ( char * ) ptr_fml_Obuffer );
    destroy_bat();
}
