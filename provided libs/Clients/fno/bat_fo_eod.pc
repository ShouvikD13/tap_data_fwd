/***************************************************************************
* Service name :  BAT_FO_EOD                                     					 *	 
*                                                                					 * 
* Description  :  This Batch Program updates the Sequence        					 * 
*                 Tables                                         					 * 
*                                                                					 * 
* Input        :  Exchange Code                                  					 * 
*                 Exchange Next Date                             					 * 
*                                                                					 * 
* Output      :                                                  					 * 
*                                                                					 * 
* Log         :   22-Nov-2001 Initial Release  - Senthil         					 * 
* Ver 1.1     :   10-Sep-2007 To reset database sequences									 *	
*															- Vidyayini Krish														 *	
* Ver 1.2     :   18-Dec-2007 To Clean-up DL_FNO Order & Trade Tbl			   *
*             :               CR:INR65 - Sushil Sharma      							 *	
* Ver 1.3     :   10-Mar-2008 For pipe 16 & 17 by Vidyayini Krish					 * 
* Ver 1.4			:		10-Apr-2008 IBM Migration Changes	 Sandeep							 *	
* Ver 1.5     :   18-Nov-2008 Update mark to market flag 								   *
															CRCSN25392 - Shailesh|Nilesh 								 *
*	Ver 1.6			:		14-Jul-2009	ORS2 Changes	-	Sandeep											 *
*	Ver 1.7			:		06-Jan-2010	Risk Exposur Changes	-	Sandeep							 *
*	Ver 1.8			:		03-Dec-2010	Market Watch Delete	-	Parul  							   *
*	Ver 1.9			:		22-Mar-2011	Preferences Delete - Parul  							   *
*	Ver	2.0			:		27-Jun-2011	SPAN Changes	-	Sandeep Patil								 *
* Ver 2.1     :   09-Nov-2011 FNO BSE Changes Sachin                       *
* Ver 2.2     :   17-Jul-2012 FNO BSE Changes [For Pipe A2 ] Sandip        *
* Ver 2.3     :   01-Aug-2012 FNO Pipe Changes [For Pipe 18 ] SH           *
* Ver 2.4     :   23-Aug-2012 FNO BSE Pipe Changes [For Pipe A3] Sachin    *
* Ver 2.5     :   20-Jul-2012 Resetting the order sequence - Mahesh Shinde *
* Ver 2.6     :   30-Oct-2012 CR-Overnight Orders  - Swati A.B             *
* Ver 2.7     :   23-Feb-2013 GAME Backoffice Automation - Sachin Birje    *
* Ver 2.8     :   26-Mar-2013 Reseting DL sequenses For NFO only- Sachin   *
* Ver 2.9     :   23-Jan-2013 SLTP F+ handling - Navina D.                 *    
* Ver 3.0			:		20-Sep-2013 OptionPlus handling - Shailesh Sabale				 *
* Ver 3.1			:		30-Jul-2014 Changes for portfolio calculation on expiry  *
* Ver 3.2			:		27-Jan-2015	bug fix for nxt trd date										 *
* Ver 3.3     :   25-Feb-2015 bug fix for calling product portfolio on eod *
*                             of expiry day                                *
* Ver 3.4			:		19-Jun-2015	Contract Master and Trade Quote Merger			 *
* 														Changes - Ritesh D	  											 *
* Ver 3.5     :   03-Sep-2015 FO Auto MTM Changes - Sachin Birje           *
* Ver 3.6     :   15-Feb-2016 Insert in history table commented and shifted in*
*                             housekeep proces    - Sachin Birje           *
* Ver 3.7     :   19-Feb-2016 FO Cloud Order Changes  -Sachin Birje        *
* Ver 3.8			: 	06-Jul-2017	Delete of FMW table in case of BFO -Swapnil	M*
* Ver 3.9     :   03-Aug-2017 Optimization Changes -Bhupendra/Mrinal       *
* Ver 4.0     :   20-Dec-2018 Auto trigger of bat_prdct_prtfl	-Mrinal      *
* Ver 4.1     :   07-Aug-2019 Delivery Margin Process Changes - Akash B    *
* Ver 4.2     :   28-Dec-2020 Minor changes Deep OTM EML % - Anuj P        *
* Ver 4.3			:		02-Feb-2021	Separate EOS for Stock and Index Underlyings *
*															in FPSL - Kiran Itkar												 *
* Ver 4.4     :   13-May-2021 Delete replaced with Truncate                * 
*                             for DL Tables - Anand Dhopte                 *
* Ver 4.6     :   13-jun-2021 Basket order changes - Suchita               * 
* Ver 4.7     :   03-jun-2021 Unsettled profit changes - Suchita           * 
* Ver 4.8     :   26-Nov-2021 CR-ISEC14-162094_NRI_TDS_UNSETTLED_PROF  - Suchita * 
*	Ver 4.9     :   16-May-2022 CR-ISEC14-170192 Options premium for Fresh Option buy - Shlok Ghan	*
* Ver 5.0     :   28-Feb-2023 Pipe id 21,22,23 and 24 Sequence  Devesh 	   * 
* Ver 5.1     :   24-Mar-2023 Pipe ID 25,26, 27, 28, 31 and 32 Sequence Devesh  *
* Ver 5.2     :   29-Mar-2023 RQ:3117 Resetting sequence number for GTT order Devesh *
***************************************************************************/

#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fn_read_debug_lvl.h>			/** Ver 1.4 **/
#include <fn_pos.h>       /*** Ver 2.7 ***/
#include <stdlib.h>       /*** Ver 3.1 ***/

#define  EXPIRY  'X'

char c_ServiceName[33];
char c_xchng[4];

void fn_exit( char* c_err_msg, char c_mem_flg );

void BAT_FO_EOD ( int argc, char *argv[] )
{
  EXEC SQL INCLUDE "table/exg_xchng_mstr.h";
  EXEC SQL INCLUDE "table/opm_ord_pipe_mstr.h";

  EXEC SQL BEGIN DECLARE SECTION;
    char   c_rundt[11 + 1];
	char old_exg_nxt_trd_dt [11 + 1];  /* Ver 3.2 */
  EXEC SQL END DECLARE SECTION;

  char c_errmsg[256];
	char c_exg_ovrnght_trd_dt[12];    /***  Ver 2.6 ***/
  int  i_returncode;
  int  i_dategreater=0;
  int  i_record_exists=0;
	int	i_ret_cd	=	0;
	int dt_flg = 0; /** ver 2.6 **/
  int i_retrn_cd=0; /** Ver 4.1 **/ 

	/*** Ver 3.1 ***/	

	char c_command[60];
	char c_exp_day ='\0';
	
	/*** Ver 3.1 ***/	

	char c_scrpt_cmd[250];					/*** Ver 4.0 ***/
	MEMSET(c_scrpt_cmd);        		/*** Ver 4.0 ***/
  char c_cmd_sh[250];          /*** Ver 4.2 ***/
  MEMSET(c_cmd_sh);            /*** Ver 4.2 ***/
	/**** Ver 2.7 Starts ****/
  char c_program_nm[33];
  char c_xchng_cd_tmp[4];
  char c_match_id[11];
  char c_error_txt[256];
  char c_err_msg[256];
 
  int fn_lodm_check(char *,char * ,char *);    /**** Ver 4.1 ****/
  int fn_update_isec_amt(char *,char *,char *,char *); /*** ver 4.7 **/
  
  MEMSET(c_program_nm);
  MEMSET(c_xchng_cd_tmp);
  MEMSET(c_match_id);
  MEMSET(c_error_txt);

  /**** Ver 2.7 Ends ***/

	strcpy ( c_ServiceName, argv[0] );
	INITBATDBGLVL(argv[0]);     /*** Ver 1.4 ***/
	
	strcpy ( sql_exg_xchng_cd, argv[2] );
	strcpy ( c_rundt, argv[4] );

	/*** Ver 2.7 ***/
  strcpy(c_program_nm,c_ServiceName);
  strcpy(c_xchng_cd_tmp,sql_exg_xchng_cd);
  /** Ver 2.7 ends ***/

  fn_bat_pst_msg ( c_ServiceName, " ***** EOD Process Started *****", c_tag );

	if (DEBUG_MSG_LVL_0)      /*** Ver 1.4 ***/
  {
		fn_userlog( c_ServiceName, "sql_exg_xchng_cd:%s:", sql_exg_xchng_cd );
		fn_userlog( c_ServiceName, "Run Date is :%s:", c_rundt );
	}

  EXEC SQL
    SELECT  exg_crrnt_stts,
            exg_nxt_trd_dt,
						exg_tmp_trd_dt    /*** Ver 2.6 ***/
    INTO    :sql_exg_crrnt_stts,
            :sql_exg_nxt_trd_dt,
						:c_exg_ovrnght_trd_dt  /*** Ver 2.6 ***/
    FROM    exg_xchng_mstr
    WHERE   exg_xchng_cd = :sql_exg_xchng_cd;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName,"S31005",SQLMSG,c_errmsg);
    fn_exit ( "Unable to fetch exchange status ",'N');
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 2.7 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
	  return;
  }
  SETNULL(sql_exg_nxt_trd_dt);

  /******* Ver 4.1 Starts  **********/

 if(strcmp(sql_exg_xchng_cd,"NFO")==0)
 {
   i_retrn_cd = fn_lodm_check(c_ServiceName,sql_exg_nxt_trd_dt.arr,sql_exg_xchng_cd);

  if(i_retrn_cd!=0)
  {
   fn_exit ( "Delivery Margin check failed",'N');
   strcpy(c_error_txt,"Delivery Margin check failed");  
   fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  
   return; 
  } 
  /** ver 4.7 starts ***/

  i_retrn_cd = fn_update_isec_amt(c_ServiceName,sql_exg_nxt_trd_dt.arr,c_rundt,sql_exg_xchng_cd);

  if(i_retrn_cd!=0)
  {
   fn_exit ( "ISEC AMOUNT  NOT UPDATED",'N');
   strcpy(c_error_txt,"ISEC AMOUNT  NOT UPDATED");
   fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
   return;
  }

  /** ver 4.7 ends **/
 }

  /******** Ver 4.1 Ends ***********/

	if (DEBUG_MSG_LVL_0)      /*** Ver 1.4 ***/
  {
		fn_userlog( c_ServiceName, "sql_exg_nxt_trd_dt:%s:", sql_exg_nxt_trd_dt.arr );
		fn_userlog( c_ServiceName, "Exchange Status :%c:", sql_exg_crrnt_stts );
	}

  EXEC SQL
    SELECT  1
    INTO    :i_dategreater
    FROM    dual
    WHERE   trunc(SYSDATE) > to_date( :c_rundt, 'DD-Mon-YYYY' );

  if ( (SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog(c_ServiceName,"S31010",SQLMSG,c_errmsg);
    fn_exit ( "Unable to compare date ",'N');
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 2.7 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
	  return;
  }

  if ( i_dategreater == 1 )
  {
    fn_exit ( "Next trade date cannot be less than system date",'N');
    strcpy(c_error_txt,"Next trade date cannot be less than system date");  /*** Ver 2.7 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
		return;
  }

  if ( sql_exg_crrnt_stts != EXPIRY )
  {
    fn_exit ( "Exchange not in Expiry mode - contact system support",'N');
    strcpy(c_error_txt,"Exchange not in Expiry mode - contact system support");  /*** Ver 2.7 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/ 
		return;
  }
  
  i_dategreater = 0;
  
	EXEC SQL
    SELECT  1
    INTO    :i_dategreater
    FROM    dual
    WHERE   to_date( :sql_exg_nxt_trd_dt ,'DD-Mon-YYYY') >= to_date( :c_rundt, 'DD-Mon-YYYY' );

  if ( (SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog(c_ServiceName,"S31015",SQLMSG,c_errmsg);
    fn_exit ( "Unable to compare date ",'N');
    strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
	  return;
  }
  
  if ( i_dategreater == 1 )
  {
    fn_exit ( "Next trade date cannot be <= to current trd dt",'N');
	  strcpy(c_error_txt,"Next trade date cannot be <= to current trd dt");  /*** Ver 2.7 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
		return;
  }

  i_returncode = tpbegin( TRAN_TIMEOUT, 0 );
  if ( i_returncode == -1 )
  {
    fn_errlog(c_ServiceName,"S31020",TPMSG,c_errmsg);
    fn_exit ( "Unable to start transaction - Contact system support",'N');
    strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
		return;
  }

	fn_userlog(c_ServiceName,"c_exg_ovrnght_trd_dt :%s:",c_exg_ovrnght_trd_dt);
	
  /**** Following checks whether O.T date= Nrml Mkt date ****/
	/**** If equal means Ovnght Eod not run , go by				 ****/
	/**** exisiting flw ,else Ovnght Eod  run ,hence reset ****/
	/**** remaining sequences.Note that the '>' condition  ****/
	/**** should never happen in Live scenerio						 ****/	


	EXEC SQl				/** ver 2.6 **/
	SELECT 1
	INTO	 :dt_flg
	FROM 	 DUAL
	WHERE  to_date(:sql_exg_nxt_trd_dt,'dd-Mon-yyyy') >= to_date(:c_exg_ovrnght_trd_dt,'dd-Mon-yyyy');

	
  if ( (SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog(c_ServiceName,"S31025",SQLMSG,c_errmsg);
    fn_exit ( "error ",'N');
    strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
    return;
  }

	if (DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"date flg is ---:%d:",dt_flg	);
	}
	

	if( dt_flg == 1  ) 	/* ver 2.6 */
  {                                     					  						  /* ver 2.6 */

		if (DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"inside condition 1"); /*** Ver 2.6 ***/
			fn_userlog(c_ServiceName,"Overnight eod  process is not run ....going by existing flow...");  /*** Ver 2.6 ***/
		}
  		fn_bat_pst_msg ( c_ServiceName, "EOD Process - Updating Sequence Numbers", c_tag );

    /* Updation of all Sequence Tables - START */
    EXEC SQL
      DECLARE   opm_pipe_rec CURSOR FOR
      SELECT    opm_pipe_id
      FROM      opm_ord_pipe_mstr
      WHERE     opm_xchng_cd  = :sql_exg_xchng_cd;

    EXEC SQL
      OPEN opm_pipe_rec;

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName,"S31030",SQLMSG,c_errmsg);
      fn_exit ( "Unable to find pipe ids for the exchange -Contact system support",'Y');
			strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
			fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
		  return;
    }

    while (1)
    {
      EXEC SQL
        FETCH opm_pipe_rec
        INTO  :sql_opm_pipe_id;

      if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
      {
        fn_errlog(c_ServiceName,"S31035",SQLMSG,c_errmsg);
        EXEC SQL
          CLOSE opm_pipe_rec;
        fn_exit ( "Unable to fetch pipe ids for the exchange -Contact system support",'Y');
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
				fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
		    return;
      }
      if ( SQLCODE == NO_DATA_FOUND )
      {
        EXEC SQL
          CLOSE opm_pipe_rec;
        break;
      }
      fn_userlog(c_ServiceName," Pipe Id :%s:",sql_opm_pipe_id);  /*** Ver 2.1 ***/ 

			/*** Commented in ver 2.5 table sequence replaced with database sequence 
      EXEC SQL
        SELECT  1
        INTO :i_record_exists
        FROM FOS_FO_ORD_SEQ
        WHERE FOS_TRD_DT = :c_rundt
        AND   FOS_PIPE_ID = :sql_opm_pipe_id;

      if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
      {
        fn_errlog(c_ServiceName,"S31040",SQLMSG,c_errmsg);
        EXEC SQL
          CLOSE opm_pipe_rec;
        fn_exit ( "Unable to find ord seq info -Contact system support",'Y');
		    return;
      }
      if ( SQLCODE == NO_DATA_FOUND )
      {
        EXEC SQL
        INSERT INTO FOS_FO_ORD_SEQ
        ( FOS_TRD_DT,
          FOS_PIPE_ID,
          FOS_SEQ_NUM
        )
        VALUES
        (
           :c_rundt,
           :sql_opm_pipe_id,
           0
        );

        if (SQLCODE != 0 )
        {
          fn_errlog(c_ServiceName,"S31045",SQLMSG,c_errmsg);
          EXEC SQL
            CLOSE opm_pipe_rec;
          fn_exit ( "Unable to insert ord seq info-Contact system support",'Y');
		    	return;
        }
      }

      EXEC SQL
        DELETE FOS_FO_ORD_SEQ
        WHERE FOS_TRD_DT < :sql_exg_nxt_trd_dt
        AND   FOS_PIPE_ID = :sql_opm_pipe_id; *** Ver 2.1 ***

      if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
      {
        fn_errlog(c_ServiceName,"S31050",SQLMSG,c_errmsg);
        EXEC SQL
          CLOSE opm_pipe_rec;
        fn_exit ( "Unable to delete xchng seq info -Contact system support",'Y');
		    return;
      }
			******* Ver 2.5 comment ends ***************/

			/***	Commented In Ver 1.6

			* Ver 1.1 Comment Begins 

      EXEC SQL
        SELECT  1
        INTO :i_record_exists
        FROM FXS_FO_XCHNG_SEQ
        WHERE FXS_TRD_DT = :c_rundt
        AND   FXS_PIPE_ID = :sql_opm_pipe_id;

      if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
      {
        fn_errlog(c_ServiceName,"S31055",SQLMSG,c_errmsg);
        EXEC SQL
          CLOSE opm_pipe_rec;
        fn_exit ( "Unable to find xchng seq info -Contact system support",'Y');
		    return;
      }
      if ( SQLCODE == NO_DATA_FOUND )
      {
        EXEC SQL
        INSERT INTO FXS_FO_XCHNG_SEQ
        ( FXS_TRD_DT,
          FXS_PIPE_ID,
          FXS_SEQ_NUM
        )
        VALUES
        (
           :c_rundt,
           :sql_opm_pipe_id,
           0
        );

        if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
        {
          fn_errlog(c_ServiceName,"S31060",SQLMSG,c_errmsg);
          EXEC SQL
            CLOSE opm_pipe_rec;
          fn_exit ( "Unable to insert xchng seq info-Contact system support",'Y');
		    	return;
        }
      }

      EXEC SQL
        DELETE FXS_FO_XCHNG_SEQ
        WHERE FXS_TRD_DT < :sql_exg_nxt_trd_dt;

      if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
      {
        fn_errlog(c_ServiceName,"S31065",SQLMSG,c_errmsg);
        EXEC SQL
          CLOSE opm_pipe_rec;
        fn_exit ( "Unable to delete xchng seq info -Contact system support",'Y');
		    return;
      } *

			* Ver 1.1 Begins *

			EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_11' );
        END;
      END-EXEC;

    	if ( SQLCODE != 0 )
    	{
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 1 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31070", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        return;
    	}

			EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_12' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 2 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31075", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        return;
      }

			EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_13' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 3 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31080", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        return;
      }

			EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_14' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 4 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31085", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        return;
      }


			EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_15' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 5 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31090", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        return;
      }

			* Ver 1.3 Add *

      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_16' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 6 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31095", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        return;
      }

      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_17' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 7 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31100", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        return;
      }

      * Ver 1.3 Ends *

			
			* Ver 1.1 Ends *

      EXEC SQL
        SELECT  1
        INTO :i_record_exists
        FROM FTS_FO_TRD_SEQ
        WHERE FTS_TRD_DT = :c_rundt
        AND   FTS_PIPE_ID = :sql_opm_pipe_id;

      if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
      {
        fn_errlog(c_ServiceName,"S31105",SQLMSG,c_errmsg);
        EXEC SQL
          CLOSE opm_pipe_rec;
        fn_exit ( "Unable to find xchng seq info -Contact system support",'Y');
		    return;
      }
      if ( SQLCODE == NO_DATA_FOUND )
      {
        EXEC SQL
        INSERT INTO FTS_FO_TRD_SEQ
        ( FTS_TRD_DT,
          FTS_PIPE_ID,
          FTS_SEQ_NUM
        )
        VALUES
        (
           :c_rundt,
           :sql_opm_pipe_id,
           0
        );

        if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
        {
          fn_errlog(c_ServiceName,"S31110",SQLMSG,c_errmsg);
          EXEC SQL
            CLOSE opm_pipe_rec;
            fn_exit ( "Unable to insert xchng seq info-Contact system support",'Y');
		    		return;
        }
      }

      EXEC SQL
        DELETE FTS_FO_TRD_SEQ
        WHERE FTS_TRD_DT < :sql_exg_nxt_trd_dt;

      if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
      {
        fn_errlog(c_ServiceName,"S31115",SQLMSG,c_errmsg);
        EXEC SQL
          CLOSE opm_pipe_rec;
        fn_exit ( "Unable to delete xchng seq info -Contact system support",'Y');
		    return;
      }

			Comment Ends ***/

      EXEC SQL
        SELECT  1
        INTO :i_record_exists
        FROM FSP_FO_SEQ_PLCD
        WHERE FSP_TRD_DT = :c_rundt
        AND   FSP_PIPE_ID = :sql_opm_pipe_id;

      if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
      {
        fn_errlog(c_ServiceName,"S31120",SQLMSG,c_errmsg);
        EXEC SQL
          CLOSE opm_pipe_rec;
        fn_exit ( "Unable to find xchng seq info -Contact system support",'Y');
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/ 
		    return;
      }
      if ( SQLCODE == NO_DATA_FOUND )
      {
        EXEC SQL
        INSERT INTO FSP_FO_SEQ_PLCD
        ( FSP_TRD_DT,
          FSP_PIPE_ID,
          FSP_SEQ_NUM
        )
        VALUES
        (
           :c_rundt,
           :sql_opm_pipe_id,
           0
        );

        if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
        {
          fn_errlog(c_ServiceName,"S31125",SQLMSG,c_errmsg);
          EXEC SQL
            CLOSE opm_pipe_rec;
            fn_exit ( "Unable to insert xchng seq info-Contact system support",'Y');
						strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
            fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
		    		return;
        }
      }

      EXEC SQL
        DELETE FSP_FO_SEQ_PLCD
        WHERE FSP_TRD_DT < :sql_exg_nxt_trd_dt
        AND   FSP_PIPE_ID = :sql_opm_pipe_id;  /*** Ver 2.1 ***/

      if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
      {
        fn_errlog(c_ServiceName,"S31130",SQLMSG,c_errmsg);
        EXEC SQL
          CLOSE opm_pipe_rec;
        fn_exit ( "Unable to delete xchng seq info -Contact system support",'Y');
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
		    return;
      } 

      /***** Commented in ver 3.9 *******************
      EXEC SQL
        SELECT  1
        INTO :i_record_exists
        FROM FSS_FO_SPDORD_SEQ
        WHERE FSS_TRD_DT = :c_rundt
        AND   FSS_PIPE_ID = :sql_opm_pipe_id;

      if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
      {
        fn_errlog(c_ServiceName,"S31135",SQLMSG,c_errmsg);
        EXEC SQL
          CLOSE opm_pipe_rec;
        fn_exit ( "Unable to find spread ord seq info - Contact system support",'Y');
				strcpy(c_error_txt,"System Error. Contact System Support");  *** Ver 2.7 ***
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  *** Ver 2.7 ***
		    return;
      }
      if ( SQLCODE == NO_DATA_FOUND )
      {
        EXEC SQL
        INSERT INTO FSS_FO_SPDORD_SEQ
        ( FSS_TRD_DT,
          FSS_PIPE_ID,
          FSS_SEQ_NUM
        )
        VALUES
        (
           :c_rundt,
           :sql_opm_pipe_id,
           0
        );

        if (SQLCODE != 0 )
        {
          fn_errlog(c_ServiceName,"S31140",SQLMSG,c_errmsg);
          EXEC SQL
            CLOSE opm_pipe_rec;
          fn_exit ( "Unable to insert spread ord seq info - Contact system support",'Y');
					strcpy(c_error_txt,"System Error. Contact System Support");  *** Ver 2.7 ***
          fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  *** Ver 2.7 ***
		    	return;
        }
      }

      EXEC SQL
        DELETE FSS_FO_SPDORD_SEQ
        WHERE FSS_TRD_DT < :sql_exg_nxt_trd_dt
        AND   FSS_PIPE_ID =:sql_opm_pipe_id;   *** Ver 2.1 ***

      if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
      {
        fn_errlog(c_ServiceName,"S31145",SQLMSG,c_errmsg);
        EXEC SQL
          CLOSE opm_pipe_rec;
        fn_exit ( "Unable to delete xchng seq info - Contact system support",'Y');
				strcpy(c_error_txt,"System Error. Contact System Support");  *** Ver 2.7 ***
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  *** Ver 2.7 ***
		    return;
      }
      ********* 3.9 Comment Ends Here *******/
    }

		EXEC SQL
      CLOSE opm_pipe_rec;


    if( strcmp( sql_exg_xchng_cd,"NFO" ) == 0 ) /** Ver 2.1 , Added IF condition ***/
    {  
	  	/*** Added In Ver 1.6 ***/
     fn_userlog(c_ServiceName," Inside NFO Case ");

		 EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_11' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 1 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31150", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/ 
        return;
      }

		 EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_12' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 2 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31155", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/ 
        return;
      }
		
			 EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_13' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 3 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31160", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_14' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 4 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31165", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }


      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_15' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 5 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31170", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

			EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_16' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 6 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31175", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_17' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 7 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31180", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

			/**Ver 2.3 starts **/
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_18' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 7 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31185", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }
			/**Ver 2.3 ends **/

      /*** Ver 5.0 Starts  ***/
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_21' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 21 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31190", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_22' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 22 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31195", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_23' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 23 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31200", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_24' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 24 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31205", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      /*** Ver 5.0 Ends  ***/
      /*** Ver 5.1 starts  ***/
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_25' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 25 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31210", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_26' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 26 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31215", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_27' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 27 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31220", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_28' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 28 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31225", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_31' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 31 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31230", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_32' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 32 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31235", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      /*** Ver 5.1 Ends  ***/

			/**Ver 2.6 starts **/
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_99' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 99 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31240", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }
      /**Ver 2.6 ends **/


		EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_11');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 1 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31245", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

      EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_12');
          END;
        END-EXEC;

      if( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 1 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31250", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

			EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_13');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 1 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31255", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

			 EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_14');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 1 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31260", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

      EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_15');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 1 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31265", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

      EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_16');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 1 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31270", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

			 EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_17');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 1 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31275", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }
		/*** Ver 1.6 Ends ***/

		/*** Ver 2.3 starts ***/
			 EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_18');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 1 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31280", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }
		/*** Ver 2.3 ends ***/

    /*** Ver 5.0 Starts  ***/
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_TRD_SEQ_21' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 21 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31285", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_TRD_SEQ_22' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 22 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31290", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_TRD_SEQ_23' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 23 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31295", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_TRD_SEQ_24' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 24 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31300", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      /*** Ver 5.0 Ends  ***/
      /*** Ver 5.1 starts  ***/
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_TRD_SEQ_25' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 25 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31305", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_TRD_SEQ_26' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 26 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31310", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_TRD_SEQ_27' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 27 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31315", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_TRD_SEQ_28' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 28 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31320", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_TRD_SEQ_31' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 31 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31325", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_TRD_SEQ_32' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 32 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31330", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      /*** Ver 5.1 Ends  ***/

      /*** Ver 5.2 Starts ***/
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence('SEQ_GTT_RQST' );
        END;
      END-EXEC;
      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting Sequence for GTT order :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31335", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
		/*** Ver 5.2 Ends ***/

		/*** Ver 2.6 starts ***/
			 EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_99');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 99 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31340", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }
		/*** Ver 2.6 ends ***/
		/***	Ver 1.7	Starts	***/
			EXEC SQL
       	EXECUTE
         	BEGIN
          	 reset_sequence( 'CMP_PLEXP_SEQ');
         	END;
       	END-EXEC;

     	if ( SQLCODE != 0 )
     	{
       	fn_userlog( c_ServiceName, "Error in resetting CMP_PLEXP_SEQ :%s:", SQLMSG );
       	fn_errlog( c_ServiceName, "S31345", SQLMSG, c_errmsg );
       	fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
       	return;
     	}

			EXEC SQL
    		EXECUTE
        	BEGIN
          	reset_sequence( 'CMP_CLN_PLEXP_SEQ');
        	END;
      	END-EXEC;

    	if ( SQLCODE != 0 )
    	{
       	fn_userlog( c_ServiceName, "Error in resetting CMP_CLN_PLEXP_SEQ:%s:", SQLMSG );
       	fn_errlog( c_ServiceName, "S31350", SQLMSG, c_errmsg );
       	fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
       	return;
     	}

		/***	Ver 1.7	Ends	***/

		/***	Ver	2.0	Starts	***/

		fn_userlog(c_ServiceName,"SPAN - SPN_PRTFL1_SEQ Reset Starts.");
		
		EXEC SQL
       EXECUTE
         BEGIN
            reset_sequence( 'SPN_PRTFL1_SEQ');
         END;
       END-EXEC;

     if ( SQLCODE != 0 )
     {
       fn_userlog( c_ServiceName, "Error in resetting SPN_PRTFL1_SEQ :%s:", SQLMSG );
       fn_errlog( c_ServiceName, "S31355", SQLMSG, c_errmsg );
       fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
       return;
     }

		fn_userlog(c_ServiceName,"SPAN - SPN_PRTFL1_SEQ Reset Ends.");

		/***	Ver	2.0	Ends	***/


		/** Addition done on 10-Apr-2002 for generating the sequence **/
		/** no for assignment ref. no.                               **/
    EXEC SQL
      SELECT  1
      INTO :i_record_exists
      FROM fas_fo_asg_seq
      WHERE fas_trd_dt = :c_rundt;

    if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog(c_ServiceName,"S31360",SQLMSG,c_errmsg);
      fn_exit ( "Unable to find assignment seq - Contact system support",'Y');
			strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
	    return;
    }

    if ( SQLCODE == NO_DATA_FOUND )
    {
      EXEC SQL
        INSERT INTO fas_fo_asg_seq
        ( fas_trd_dt,
          fas_seq_num
        )
        VALUES
        (
           :c_rundt,
           0
        );

      if (SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName,"S31365",SQLMSG,c_errmsg);
        fn_exit ("Unable to insert assignment seq -Contact system support",'Y');
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
		  	return;
      }
    }

    EXEC SQL
      DELETE fas_fo_asg_seq
      WHERE fas_trd_dt < :sql_exg_nxt_trd_dt;

    if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog(c_ServiceName,"S31370",SQLMSG,c_errmsg);
      fn_exit ( "Unable to delete asssignment seq -Contact system support",'Y');
      strcpy(c_error_txt,"System Error. Contact system support");  /*** Ver 2.7 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
		  return;
    }
		
		 /*** Ver 2.5 Order sequence reset Start****/

    EXEC SQL
       EXECUTE
         BEGIN
           reset_sequence( 'GET_ORDR_SEQ_11');
         END;
       END-EXEC;

    if ( SQLCODE != 0 )
    {
      fn_userlog( c_ServiceName, "Error in resetting order sequence for pipe 11 :%s:", SQLMSG );
      fn_errlog( c_ServiceName, "S31375", SQLMSG, c_errmsg );
      fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
			strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
      return;
    }
    EXEC SQL
       EXECUTE
         BEGIN
           reset_sequence( 'GET_ORDR_SEQ_12');
         END;
       END-EXEC;

    if ( SQLCODE != 0 )
    {
      fn_userlog( c_ServiceName, "Error in resetting order sequence for pipe 12 :%s:", SQLMSG );
      fn_errlog( c_ServiceName, "S31380", SQLMSG, c_errmsg );
      fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
			strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
      return;
    }
    EXEC SQL
       EXECUTE
         BEGIN
           reset_sequence( 'GET_ORDR_SEQ_13');
         END;
       END-EXEC;

    if ( SQLCODE != 0 )
    {
      fn_userlog( c_ServiceName, "Error in resetting order sequence for pipe 13 :%s:", SQLMSG );
      fn_errlog( c_ServiceName, "S31385", SQLMSG, c_errmsg );
      fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
			strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
      return;
    }
		 EXEC SQL
       EXECUTE
         BEGIN
           reset_sequence( 'GET_ORDR_SEQ_14');
         END;
       END-EXEC;

    if ( SQLCODE != 0 )
    {
      fn_userlog( c_ServiceName, "Error in resetting order sequence for pipe 14 :%s:", SQLMSG );
      fn_errlog( c_ServiceName, "S31390", SQLMSG, c_errmsg );
      fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
			strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
      return;
    }
    EXEC SQL
       EXECUTE
         BEGIN
           reset_sequence( 'GET_ORDR_SEQ_15');
         END;
       END-EXEC;

    if ( SQLCODE != 0 )
    {
      fn_userlog( c_ServiceName, "Error in resetting order sequence for pipe 15 :%s:", SQLMSG );
      fn_errlog( c_ServiceName, "S31395", SQLMSG, c_errmsg );
      fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
			strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
      return;
    }
    EXEC SQL
       EXECUTE
         BEGIN
           reset_sequence( 'GET_ORDR_SEQ_16');
         END;
       END-EXEC;

    if ( SQLCODE != 0 )
    {
      fn_userlog( c_ServiceName, "Error in resetting order sequence for pipe 16 :%s:", SQLMSG );
      fn_errlog( c_ServiceName, "S31400", SQLMSG, c_errmsg );
      fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
			strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
      return;
    }
		EXEC SQL
       EXECUTE
         BEGIN
           reset_sequence( 'GET_ORDR_SEQ_17');
         END;
       END-EXEC;

    if ( SQLCODE != 0 )
    {
      fn_userlog( c_ServiceName, "Error in resetting order sequence for pipe 17 :%s:", SQLMSG );
      fn_errlog( c_ServiceName, "S31405", SQLMSG, c_errmsg );
      fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
			strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
      return;
    }
		EXEC SQL
       EXECUTE
         BEGIN
           reset_sequence( 'GET_ORDR_SEQ_18');
         END;
       END-EXEC;

    if ( SQLCODE != 0 )
    {
      fn_userlog( c_ServiceName, "Error in resetting order sequence for pipe 17 :%s:", SQLMSG );
      fn_errlog( c_ServiceName, "S31410", SQLMSG, c_errmsg );
      fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
			strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
      return;
    }

    /*** Ver 5.0 Starts  ***/
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_ORDR_SEQ_21' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 21 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31415", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_ORDR_SEQ_22' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 22 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31420", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
         }

      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_ORDR_SEQ_23' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 23 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31425", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_ORDR_SEQ_24' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 24 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31430", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      /*** Ver 5.0 Ends  ***/
      /*** Ver 5.1 starts  ***/
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_ORDR_SEQ_25' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 25 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31435", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_ORDR_SEQ_26' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 26 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31440", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_ORDR_SEQ_27' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 27 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31445", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_ORDR_SEQ_28' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 28 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31450", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_ORDR_SEQ_31' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 31 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31455", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_ORDR_SEQ_32' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 32 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31460", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      /*** Ver 5.1 Ends  ***/     

		/*** Ver 2.6 Starts ****/
		EXEC SQL
       EXECUTE
         BEGIN
           reset_sequence( 'GET_ORDR_SEQ_99');
         END;
       END-EXEC;

    if ( SQLCODE != 0 )
    {
      fn_userlog( c_ServiceName, "Error in resetting order sequence for pipe 99 :%s:", SQLMSG );
      fn_errlog( c_ServiceName, "S31465", SQLMSG, c_errmsg );
      fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
			strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
      return;
    }
		/*** Ver 2.6 Ends ****/
    /*** Ver 2.5 Order sequence reset Ends****/

    /********* Ver 3.9 Starts Here ****************/

     EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence('GET_SPDORD_SEQ_11');
          END;
        END-EXEC;
      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting spread sequence for pipe 11 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31470", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }

     EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence('GET_SPDORD_SEQ_12');
          END;
        END-EXEC;
      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting spread sequence for pipe 12 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31475", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }

     EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence('GET_SPDORD_SEQ_13');
          END;
        END-EXEC;
      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting spread sequence for pipe 13 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31480", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }

    EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence('GET_SPDORD_SEQ_14');
          END;
        END-EXEC;
      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting spread sequence for pipe 14 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31485", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }

    EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence('GET_SPDORD_SEQ_15');
          END;
        END-EXEC;
      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting spread sequence for pipe 15 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31490", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }

    EXEC SQL
       EXECUTE
         BEGIN
           reset_sequence('GET_SPDORD_SEQ_16');
         END;
       END-EXEC;
     if ( SQLCODE != 0 )
     {
       fn_userlog( c_ServiceName, "Error in resetting spread sequence for pipe 16 :%s:", SQLMSG );
       fn_errlog( c_ServiceName, "S31495", SQLMSG, c_errmsg );
       fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
       strcpy(c_error_txt,"System Error - Contact system support");
       fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
       return;
     }

    EXEC SQL
       EXECUTE
         BEGIN
           reset_sequence('GET_SPDORD_SEQ_17');
         END;
       END-EXEC;
     if ( SQLCODE != 0 )
     {
       fn_userlog( c_ServiceName, "Error in resetting spread sequence for pipe 17 :%s:", SQLMSG );
       fn_errlog( c_ServiceName, "S31500", SQLMSG, c_errmsg );
       fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
       strcpy(c_error_txt,"System Error - Contact system support");
       fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
       return;
     }

    EXEC SQL
       EXECUTE
         BEGIN
           reset_sequence('GET_SPDORD_SEQ_18');
         END;
       END-EXEC;
     if ( SQLCODE != 0 )
     {
       fn_userlog( c_ServiceName, "Error in resetting spread sequence for pipe 18 :%s:", SQLMSG );
       fn_errlog( c_ServiceName, "S31505", SQLMSG, c_errmsg );
       fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
       strcpy(c_error_txt,"System Error - Contact system support");
       fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
       return;
     }

    /*** Ver 5.0 Starts  ***/

      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_SPDORD_SEQ_21' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 21 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31510", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_SPDORD_SEQ_22' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 22 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31515", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
			}
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_SPDORD_SEQ_23' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 23 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31520", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_SPDORD_SEQ_24' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 24 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31525", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      /*** Ver 5.0 Ends  ***/
      /*** Ver 5.1 starts  ***/
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_SPDORD_SEQ_25' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 25 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31530", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_SPDORD_SEQ_26' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 26 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31535", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_SPDORD_SEQ_27' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 27 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31540", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_SPDORD_SEQ_28' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 28 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31545", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_SPDORD_SEQ_31' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 31 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31550", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_SPDORD_SEQ_32' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 32 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31555", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      /*** Ver 5.1 Ends  ***/

    EXEC SQL
       EXECUTE
         BEGIN
           reset_sequence('GET_SPDORD_SEQ_A1');
         END;
       END-EXEC;
     if ( SQLCODE != 0 )
     {
       fn_userlog( c_ServiceName, "Error in resetting spread sequence for pipe A1 :%s:", SQLMSG );
       fn_errlog( c_ServiceName, "S31560", SQLMSG, c_errmsg );
       fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
       strcpy(c_error_txt,"System Error - Contact system support");
       fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
       return;
     }

     EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence('GET_SPDORD_SEQ_A2');
          END;
        END-EXEC;
      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting spread sequence for pipe A2 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31565", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }

     EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence('GET_SPDORD_SEQ_A3');
          END;
        END-EXEC;
      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting spread sequence for pipe A3 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31570", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }

      EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence('GET_SPDORD_SEQ_99');
          END;
        END-EXEC;
      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting spread sequence for pipe 99 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31575", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }

      EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence('GET_SPDORD_SEQ_A9');
          END;
        END-EXEC;
      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting spread sequence for pipe A9 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31580", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
    /********** Ver 3.9 Ends *************/ 

   } /*** Ver 2.1 , End of IF Condition ***/
   else if( strcmp( sql_exg_xchng_cd , "BFO" ) == 0 ) /*** Ver 2.1 Starts Here ***/ 
   {
    fn_userlog(c_ServiceName," Inside BFO Case ");
    EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_A1' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe A1 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31585", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
			strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
	      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

    EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_A1');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting trade sequence for pipe A1 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31590", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
			strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }
			/**** Ver 2.2 Starts *****/

		fn_userlog(c_ServiceName,"Restting The Sequences for Pipe A2");

    EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_A2' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe A2 :%s:",SQLMSG );
        fn_errlog( c_ServiceName, "S31595", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        return;
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
	      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
      }

    EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_A2');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting trade sequence for pipe A2 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31600", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

			/**** Ver 2.2 Ends *****/
			
			 /**** Ver 2.4 Starts *****/

     fn_userlog(c_ServiceName,"Restting The Sequences for Pipe A3");

     EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_A3' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe A2 :%s:",SQLMSG );
        fn_errlog( c_ServiceName, "S31605", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

     EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_A3');
          END;
        END-EXEC;
      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting trade sequence for pipe A2 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31610", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

      /**** Ver 2.4 Ends *****/

			/**** Ver 2.6 Starts *****/

     fn_userlog(c_ServiceName,"Restting The Sequences for Pipe A3");

     EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_XCHNG_SEQ_A9' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe A9 :%s:",SQLMSG );
        fn_errlog( c_ServiceName, "S31615", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

     EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_A9');
          END;
        END-EXEC;
      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting trade sequence for pipe A9 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31620", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

      /**** Ver 2.6 Ends *****/

			/*** Ver 2.5 Reset Order sequence starts ***/

    EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_ORDR_SEQ_A1');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting order sequence for pipe A1 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31625", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

     EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_ORDR_SEQ_A2');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting order sequence for pipe A2 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31630", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

		 EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_ORDR_SEQ_A3');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting order sequence for pipe A3 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31635", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
			}

    /*** Ver 2.5 Reset Order sequence Ends ***/
			/*** Ver 2.6 Starts ***/
			EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_ORDR_SEQ_A9');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting order sequence for pipe A9 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31640", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
      }

			/*** Ver 2.6 Ends   ***/

   } /*** Ver 2.1 Ends here ***/
 
    /* Updation of all Sequence Tables - END */

    EXEC SQL
         UPDATE  exg_xchng_mstr
         SET     exg_sec_tm = exg_nxt_trd_dt,
								 exg_part_tm = exg_nxt_trd_dt ,
								 exg_inst_tm = exg_nxt_trd_dt,
								 exg_idx_tm = exg_nxt_trd_dt
         WHERE   exg_xchng_cd = :sql_exg_xchng_cd;

    if ( SQLCODE != 0 )
    {
        fn_errlog(c_ServiceName,"S31645",SQLMSG,c_errmsg);
        fn_exit ( "Unable to update next trade date- Contact system support",'Y');
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
		  	return;
    }

		/**	strcpy( old_exg_nxt_trd_dt, c_rundt);     * Ver 3.2 * 			** Commented in Ver 3.3 **/
	
    EXEC SQL
         UPDATE  exg_xchng_mstr
         SET     exg_nxt_trd_dt = to_date(:c_rundt , 'dd-Mon-yyyy')
         WHERE   exg_xchng_cd = :sql_exg_xchng_cd;

    if ( SQLCODE != 0 )
    {
        fn_errlog(c_ServiceName,"S31650",SQLMSG,c_errmsg);
        fn_exit ( "Unable to update next trade date- Contact system support",'Y');
				strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
		  	return;
    }
		
    /***************  VER 1.2 ADDITION STARTS ***************/
   if( strcmp( sql_exg_xchng_cd , "NFO" ) == 0 )  /*** Ver 2.1 , IF Condition Added ***/
   {
    fn_userlog(c_ServiceName," Inside NFO Case 11 "); 
    EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'DFO_DL_FO_ORDBK_SEQ' );
        END;
      END-EXEC;

    if ( SQLCODE != 0 )
    {
        fn_userlog( c_ServiceName, "ERROR IN CALLING STORED PROC FOR DL ORDER BOOK. SQLMSG is :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31655", SQLMSG, c_errmsg );
        fn_exit ( "UNABLE TO CALL STORED PROC. \"reset_sequence\"- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
    }

     if (DEBUG_MSG_LVL_3)      /*** Ver 1.4 ***/
  	 {
        fn_userlog( c_ServiceName, "DL ORDER BOOK SEQUENCE RESET DONE");
     }

    EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'DFT_DL_FO_TRDBK_SEQ' );
        END;
      END-EXEC;

    if ( SQLCODE != 0 )
    {
        fn_userlog( c_ServiceName, "ERROR IN CALLING STORED PROC FOR DL TRADE BOOK. SQLMSG is :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31660", SQLMSG, c_errmsg );
        fn_exit ( "UNABLE TO CALL STORED PROC. \"reset_sequence\"- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
    }

		if (DEBUG_MSG_LVL_3)      /*** Ver 1.4 ***/
  	{
    	fn_userlog( c_ServiceName, "DL TRADE BOOK SEQUENCE RESET DONE");
		}
	 } /*** end of if condition *** Ver 2.8 ***/

   /*** Commented in Ver 4.4 as delete replaced by truncate ***

    EXEC SQL
         DELETE FROM dfo_dl_fo_ordbk WHERE DFO_XCHNG_CD =:sql_exg_xchng_cd;  *** Where clause added in Ver 2.1 ***

    if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
        fn_errlog( c_ServiceName, "S31665", SQLMSG, c_errmsg );
        fn_exit ( "UNABLE TO DELETE DL ORDER BOOK- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  *** Ver 2.7 ***
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  *** Ver 2.7 ***
        return;
    }

		if (DEBUG_MSG_LVL_3)      *** Ver 1.4 ***
  	{
    	fn_userlog( c_ServiceName, "DL FNO ORDER BOOK DELETED");
    }

    EXEC SQL
         DELETE FROM dft_dl_fo_trdbk WHERE DFT_XCHNG_CD =:sql_exg_xchng_cd;  *** Where clause added in Ver 2.1 ***

    if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
        fn_errlog( c_ServiceName, "S31670", SQLMSG, c_errmsg );
        fn_exit ( "UNABLE TO DELETE DL TRADE BOOK- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  *** Ver 2.7 ***
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  *** Ver 2.7 ***
        return;
    }

    if (DEBUG_MSG_LVL_3)      *** Ver 1.4 ***
  	{ 
    	fn_userlog( c_ServiceName, "DL FNO TRADE BOOK DELETED");
    }

    *** Ver 4.4 Comment Ends ******************/

    /***************  VER 1.2 ADDITION ENDS ***************/

    EXEC SQL
         DELETE  FFC_FO_FVRT_CNTRCT_LST
				 WHERE   FFC_XCHNG_CD = :sql_exg_xchng_cd  /*** Ver 2.1 ***/
				 AND	   FFC_EXPRY_DT < :c_rundt;

    if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
        fn_errlog(c_ServiceName,"S31675",SQLMSG,c_errmsg);
        fn_exit ( "Unable to delete expired favourite contracts",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
		  	return;
    }

/** ver 4.6 starts **/
    EXEC SQL
         DELETE  FBC_FO_BSKT_CNTRCT_LST
         WHERE   FBC_XCHNG_CD = :sql_exg_xchng_cd 
         AND     FBC_EXPRY_DT < :c_rundt;

    if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
        fn_errlog(c_ServiceName,"S31680",SQLMSG,c_errmsg);
        fn_exit ( "Unable to delete expired Basket contracts",'Y');
        strcpy(c_error_txt,"System Error - Contact system support"); 
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); 
        return;
    }
  /*** ver 4.6 ends **/
    /*** Commented in Ver 3.4 ***

    EXEC SQL
         UPDATE FCM_FO_CNTRCT_MSTR
				 SET FCM_QT_TRDNG_FLG = 'Q'
				 WHERE FCM_XCHNG_CD = :sql_exg_xchng_cd  *** Ver 2.1 ***
				 AND   FCM_EXPRY_DT < :c_rundt;

    if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
        fn_errlog(c_ServiceName,"S31685",SQLMSG,c_errmsg);
        fn_exit ( "Unable to disable expired contracts",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");  *** Ver 2.7 ***
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  *** Ver 2.7 ***
		  	return;
    }

    *** Ver 3.4 Comment Ends ***/

		/***	Ver 3.4 Starts	***/

    EXEC SQL
         UPDATE FTQ_FO_TRD_QT
				 SET FTQ_QT_TRDNG_FLG = 'Q'
				 WHERE FTQ_XCHNG_CD = :sql_exg_xchng_cd 
				 AND   FTQ_EXPRY_DT < :c_rundt;

    if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
        fn_errlog(c_ServiceName,"S31690",SQLMSG,c_errmsg);
        fn_exit ( "Unable to disable expired contracts",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); 
		  	return;
    }

		/***	Ver 3.4 Ends	***/

    /***************  VER 1.8  ADDITION STARTS ***************/
    EXEC SQL
         DELETE  FROM FMW_FNO_MKT_WTCH 
				 WHERE   FMW_XCHNG_CD = :sql_exg_xchng_cd  /*** Ver 2.1 ***/
			   AND     FMW_EXPRY_DT < :c_rundt;

    if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
        fn_errlog(c_ServiceName,"S31695",SQLMSG,c_errmsg);
        fn_exit ( "Unable to delete from fmw_fno_mkt_wtch",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
		  	return;
    }
    /***************  VER 1.8  ADDITION ENDS *****************/

    /***************  VER 1.9  ADDITION STARTS ***************/
    EXEC SQL
         DELETE  FROM RUF_RIA_USR_FOPRF 
				 WHERE   RUF_XCHNG_CD = :sql_exg_xchng_cd  /*** Ver 2.1 ***/
			   AND     RUF_EXPRY_DT < :c_rundt;

    if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
        fn_errlog(c_ServiceName,"S31700",SQLMSG,c_errmsg);
        fn_exit ( "Unable to delete from ruf_ria_usr_foprf",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
		  	return;
    }
    /***************  VER 1.9  ADDITION ENDS *****************/

    /***************  VER 1.5  ADDITION STARTS ***************/
     EXEC SQL
        UPDATE fup_fut_undrlyng_pstn
        SET    fup_mtm_flg = 'O'
        WHERE  fup_xchng_cd = :sql_exg_xchng_cd  /*** Ver 2.1 ***/
				AND    fup_mtm_flg = 'M';

    if(SQLCODE  != 0 && SQLCODE != NO_DATA_FOUND )
    {
        fn_errlog(c_ServiceName,"S31705",SQLMSG,c_errmsg);
        fn_exit ( "Unable to update future mtm flag",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
    }

    if (DEBUG_MSG_LVL_3)     /*** Ver 1.4 ***/
    {
      fn_userlog( c_ServiceName, "Future mtm flag updated");
    } 

    
     EXEC SQL
        UPDATE fop_fo_options_pstn
        SET    fop_mtm_flg = 'O'
        WHERE  FOP_XCHNG_CD = :sql_exg_xchng_cd  /*** Ver 2.1 ***/
				AND    fop_mtm_flg = 'M';

    if(SQLCODE  != 0 && SQLCODE != NO_DATA_FOUND )
    {
        fn_errlog(c_ServiceName,"S31710",SQLMSG,c_errmsg);
        fn_exit ( "Unable to update option mtm flag",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
    }

    /** Ver 4.1 Starts **/
    EXEC SQL
      UPDATE fop_fo_options_pstn
      SET    fop_mtm_flg = 'O'
      WHERE  FOP_XCHNG_CD = :sql_exg_xchng_cd
      /** AND    NVL(fop_mtm_flg,'O') = 'D'; **/
      AND    NVL(fop_mtm_flg,'O') IN ('D','L');
    
    if(SQLCODE  != 0 && SQLCODE != NO_DATA_FOUND )
    {
        fn_errlog(c_ServiceName,"S31715",SQLMSG,c_errmsg);
        fn_exit ( "Unable to update option mtm flag",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
    }
   
    EXEC SQL
         UPDATE FCP_FO_SPN_CNTRCT_PSTN
         SET FCP_MTM_FLG ='O'
         WHERE FCP_XCHNG_CD = :sql_exg_xchng_cd
         AND   NVL(FCP_MTM_FLG,'O') = 'D';

    if(SQLCODE  != 0 && SQLCODE != NO_DATA_FOUND )
    {
        fn_errlog(c_ServiceName,"S31720",SQLMSG,c_errmsg);
        fn_exit ( "Unable to update option mtm flag",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
    }  
   /** Ver 4.1 Ends **/

    if (DEBUG_MSG_LVL_3)     /*** Ver 1.4 ***/
    {
      fn_userlog( c_ServiceName, "Option mtm flag updated");
    }
 
    /***************  VER 1.5 ADDITION ENDS ***************/
	/** } *** Ver 2.1 , IF Condition ends here *** Ver 2.8 ***/

	 /***************  VER 2.0  ADDITION STARTS ***************/

    EXEC SQL
         DELETE FROM TMP_SQOFF_DEFAULTER
				 WHERE	TMP_XCHNG_CD = :sql_exg_xchng_cd;

    if(SQLCODE  != 0 && SQLCODE != NO_DATA_FOUND )
    {
        fn_errlog(c_ServiceName,"S31725",SQLMSG,c_errmsg);
        fn_exit ( "Unable to delete from tmp_sqoff_defaulter",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
		  	return;
    }

		EXEC SQL
		UPDATE FUS_FO_UNDRLYNG_SPN_PSTN
		SET    FUS_MTM_FLG = 'O'
		WHERE  FUS_XCHNG_CD = :sql_exg_xchng_cd
	 /**	AND		 FUS_MTM_FLG = 'M'; ***/ /** commented in Ver 4.1 **/
    AND FUS_MTM_FLG IN ('L','M'); /** Ver 4.1 **/


    if(SQLCODE  != 0 && SQLCODE != NO_DATA_FOUND )
    {
        fn_errlog(c_ServiceName,"S31730",SQLMSG,c_errmsg);
        fn_exit ( "Unable to update future mtm flag",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
    }

    if (DEBUG_MSG_LVL_3)     /*** Ver 1.4 ***/
    {
      fn_userlog( c_ServiceName, "Span mtm flag updated");
    } 

		/***************  VER 2.0  ADDITION ENDS ***************/

		/************************** Ver 2.6 Starts *****************************************/

	  EXEC SQL
         UPDATE exg_xchng_mstr
         SET    exg_tmp_trd_dt = to_date(:c_rundt , 'dd-Mon-yyyy')
         WHERE  exg_xchng_cd = :sql_exg_xchng_cd;

    if ( SQLCODE != 0 )
    {
        fn_errlog(c_ServiceName,"S31735",SQLMSG,c_errmsg);
        fn_exit ( "Unable to update next trade date- Contact system support",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
    }

    }
    else /** if overnight eod already runned  **/ /*** Ver 2.6 -- Else Condition Added ***/
    {

			if (DEBUG_MSG_LVL_3)
			{	
				fn_userlog(c_ServiceName,"inside condition 2");
				fn_userlog(c_ServiceName," Overnight EOD process already run for date :%s:",c_exg_ovrnght_trd_dt);
			}


    dt_flg = 0 ;

    EXEC SQl
        SELECT 1
        INTO   :dt_flg
        FROM    DUAL
        WHERE  to_date(:c_rundt,'dd-Mon-yyyy') != to_date(:c_exg_ovrnght_trd_dt,'dd-Mon-yyyy');


    if ( (SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog(c_ServiceName,"S31740",SQLMSG,c_errmsg);
      fn_exit ( "error ",'N');
      strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
      return;
    }


    if ( dt_flg == 1 )
    {
      fn_exit ( "As overnight eod process is already run ...normal eod process should run for overnight market date ",'N');
      strcpy(c_error_txt,"As overnight eod process is already run ...normal eod process should run for overnight market date");  /*** Ver 2.7 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/ 
      return;
    }

		if( strcmp( sql_exg_xchng_cd,"NFO" ) == 0 ) 
    {
			fn_userlog(c_ServiceName," Inside NFO Case ");

			EXEC SQL
      		EXECUTE
       		BEGIN
            reset_sequence( 'GET_TRD_SEQ_11');
          END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 1 :%s:",SQLMSG );
        fn_errlog( c_ServiceName, "S31745", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

			EXEC SQL
       		 EXECUTE
           BEGIN
            reset_sequence( 'GET_TRD_SEQ_12');
           END;
      END-EXEC;

      if( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 1 :%s:",SQLMSG );
        fn_errlog( c_ServiceName, "S31750", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

      EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_13');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 1 :%s:",SQLMSG );
        fn_errlog( c_ServiceName, "S31755", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }
		

 			EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_14');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 1 :%s:",SQLMSG );
        fn_errlog( c_ServiceName, "S31760", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

      EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_15');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 1 :%s:",SQLMSG );
        fn_errlog( c_ServiceName, "S31765", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

			EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_16');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 1 :%s:",SQLMSG );
        fn_errlog( c_ServiceName, "S31770", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

      EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_17');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 1 :%s:",SQLMSG );
        fn_errlog( c_ServiceName, "S31775", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }
 
      EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_18');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 1 :%s:",SQLMSG );
        fn_errlog( c_ServiceName, "S31780", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

      /*** Ver 5.0 Starts  ***/
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_TRD_SEQ_21' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 21 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31785", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_TRD_SEQ_22' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 22 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31790", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_TRD_SEQ_23' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 23 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31795", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_TRD_SEQ_24' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 24 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31800", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      /*** Ver 5.0 Ends  ***/
      /*** Ver 5.1 starts  ***/
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_TRD_SEQ_25' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 25 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31805", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_TRD_SEQ_26' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 26 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31810", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_TRD_SEQ_27' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 27 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31815", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_TRD_SEQ_28' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 28 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31820", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_TRD_SEQ_31' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 31 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31825", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'GET_TRD_SEQ_32' );
        END;
      END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 32 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31830", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error. Contact System Support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        return;
      }
      /*** Ver 5.1 Ends  ***/

      EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_99');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting exchange sequence for pipe 1 :%s:",SQLMSG );
        fn_errlog( c_ServiceName, "S31835", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

      EXEC SQL
        EXECUTE
          BEGIN
             reset_sequence( 'CMP_PLEXP_SEQ');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting CMP_PLEXP_SEQ :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31840", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

			EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'CMP_CLN_PLEXP_SEQ');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting CMP_CLN_PLEXP_SEQ:%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31845", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

    	EXEC SQL
      SELECT  1
      INTO :i_record_exists
      FROM fas_fo_asg_seq
      WHERE fas_trd_dt = :c_rundt;

   		if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    	{
      	fn_errlog(c_ServiceName,"S31850",SQLMSG,c_errmsg);
      	fn_exit ( "Unable to find assignment seq - Contact system support",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
      	return;
    	}

    	if ( SQLCODE == NO_DATA_FOUND )
    	{
      	EXEC SQL
        	INSERT INTO fas_fo_asg_seq
        	( fas_trd_dt,
          	fas_seq_num
        	)
        	VALUES
        	(
            :c_rundt,
           	0	
        	);

      	if (SQLCODE != 0 )
      	{
        	fn_errlog(c_ServiceName,"S31855",SQLMSG,c_errmsg);
        	fn_exit ("Unable to insert assignment seq -Contact system support",'Y');
					strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
					fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        	return;
      	}
    	}


    EXEC SQL
      DELETE fas_fo_asg_seq
      WHERE fas_trd_dt < :sql_exg_nxt_trd_dt;

    if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog(c_ServiceName,"S31860",SQLMSG,c_errmsg);
      fn_exit ( "Unable to delete asssignment seq -Contact system support",'Y');
      strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
      return;
    }


   } /*** End of IF Condition ***/
   else if( strcmp( sql_exg_xchng_cd , "BFO" ) == 0 ) 
   {

		 fn_userlog(c_ServiceName," Inside BFO Case ");

			EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_A1');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting trade sequence for pipe A1 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31865", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }

    EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_A2');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting trade sequence for pipe A2 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31870", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }
		EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_A3');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting trade sequence for pipe A2 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31875", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }
	
			EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_TRD_SEQ_A9');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting trade sequence for pipe A9 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31880", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      } 	
	

		} 

    /**** Ver 3.7 Starts Here ****/
    if( strcmp( sql_exg_xchng_cd , "NFO" ) == 0 )
    {

      EXEC SQL
        EXECUTE
          BEGIN
            reset_sequence( 'GET_CLOUD_SEQ');
          END;
        END-EXEC;

      if ( SQLCODE != 0 )
      {
        fn_userlog( c_ServiceName, "Error in resetting trade sequence for pipe A1 :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31885", SQLMSG, c_errmsg );
        fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
      }
    }
 
    /**** Ver 3.7 Ends here ******/

    /**** Commented in Ver 3.6 *****************
    **** Ver 3.5 Starts Here ****
    EXEC SQL
    INSERT INTO FMD_FO_MTM_DTLS_HSTRY
                (FMD_CLM_MTCH_ACCNT,
                 FMD_XCHNG_CD,
                 FMD_PRDCT_TYP,
                 FMD_INDSTK,
                 FMD_UNDRLYNG,
                 FMD_EXPRY_DT,
                 FMD_EXER_TYP,
                 FMD_OPT_TYP,
                 FMD_STRK_PRC,
                 FMD_ORDR_FLW,
                 FMD_CNTRCT_TAG,
                 FMD_CNTRCT_DESC,
                 FMD_STATUS,
                 FMD_LMT_RT,
                 FMD_TRGR_RT,
                 FMD_SEM_VAL,
                 FMD_SEQUENCE,
                 FMD_ROWID,
                 FMD_REMARKS,
                 FMD_SND_DATE,
                 FMD_MIN_TRGR_RT
                )
                (SELECT FMD_CLM_MTCH_ACCNT,
                 FMD_XCHNG_CD,
                 FMD_PRDCT_TYP,
                 FMD_INDSTK,
                 FMD_UNDRLYNG,
                 FMD_EXPRY_DT,
                 FMD_EXER_TYP,
                 FMD_OPT_TYP,
                 FMD_STRK_PRC,
                 FMD_ORDR_FLW,
                 FMD_CNTRCT_TAG,
                 FMD_CNTRCT_DESC,
                 FMD_STATUS,
                 FMD_LMT_RT,
                 FMD_TRGR_RT,
                 FMD_SEM_VAL,
                 FMD_SEQUENCE,
                 FMD_ROWID,
                 FMD_REMARKS,
                 FMD_SND_DATE,
                 FMD_MIN_TRGR_RT
                 FROM FMD_FO_MTM_DTLS
                WHERE FMD_XCHNG_CD = :sql_exg_xchng_cd
                );
    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog( c_ServiceName, "S31890", SQLMSG, c_errmsg );
      fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
      strcpy(c_error_txt,"System Error - Contact system support");
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
      return;
    }

    EXEC SQL
      DELETE FROM FMD_FO_MTM_DTLS WHERE FMD_XCHNG_CD=:sql_exg_xchng_cd;
    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog( c_ServiceName, "S31895", SQLMSG, c_errmsg );
      fn_exit ( "Failed to reset_sequence- Contact system support", 'Y' );
      strcpy(c_error_txt,"System Error - Contact system support");
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
      return;
    }
    **** Ver 3.5 Ends Here ****
    ****************** Ver 3.6 Ends Here ****************/
 
 		EXEC SQL
         UPDATE  exg_xchng_mstr
         SET     exg_sec_tm = exg_nxt_trd_dt,
                 exg_part_tm = exg_nxt_trd_dt ,
                 exg_inst_tm = exg_nxt_trd_dt,
                 exg_idx_tm = exg_nxt_trd_dt
         WHERE   exg_xchng_cd = :sql_exg_xchng_cd;

    if ( SQLCODE != 0 )
    {
        fn_errlog(c_ServiceName,"S31900",SQLMSG,c_errmsg);
        fn_exit ( "Unable to update next trade date- Contact system support",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
    }

 		 EXEC SQL
         UPDATE  exg_xchng_mstr
         SET     exg_nxt_trd_dt = to_date(:c_rundt , 'dd-Mon-yyyy')
         WHERE   exg_xchng_cd = :sql_exg_xchng_cd;

    if ( SQLCODE != 0 )
    {
        fn_errlog(c_ServiceName,"S31905",SQLMSG,c_errmsg);
        fn_exit ( "Unable to update next trade date- Contact system support",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
    }

   if( strcmp( sql_exg_xchng_cd , "NFO" ) == 0 )  
   {
	  fn_userlog(c_ServiceName," Inside NFO Case 11 ");
    EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'DFO_DL_FO_ORDBK_SEQ' );
        END;
      END-EXEC;

    if ( SQLCODE != 0 )
    {
       fn_userlog( c_ServiceName, "ERROR IN CALLING STORED PROC FOR DL ORDER BOOK. SQLMSG is :%s:", SQLMSG );
       fn_errlog( c_ServiceName, "S31910", SQLMSG, c_errmsg );
       fn_exit ( "UNABLE TO CALL STORED PROC. \"reset_sequence\"- Contact system support", 'Y' );
       strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
       fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
       return;
    }

    if (DEBUG_MSG_LVL_3)     
    {
       fn_userlog( c_ServiceName, "DL ORDER BOOK SEQUENCE RESET DONE");
    }

    EXEC SQL
      EXECUTE
        BEGIN
          reset_sequence( 'DFT_DL_FO_TRDBK_SEQ' );
        END;
      END-EXEC;

		if ( SQLCODE != 0 )
   	{
        fn_userlog( c_ServiceName, "ERROR IN CALLING STORED PROC FOR DL TRADE BOOK. SQLMSG is :%s:", SQLMSG );
        fn_errlog( c_ServiceName, "S31915", SQLMSG, c_errmsg );
        fn_exit ( "UNABLE TO CALL STORED PROC. \"reset_sequence\"- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
    }

    if (DEBUG_MSG_LVL_3)      
    {
      fn_userlog( c_ServiceName, "DL TRADE BOOK SEQUENCE RESET DONE");
    }


    /*** Commented in Ver 4.4 as delete replaced with truncate ***

    EXEC SQL
         DELETE FROM dfo_dl_fo_ordbk WHERE DFO_XCHNG_CD =:sql_exg_xchng_cd;  

    if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
        fn_errlog( c_ServiceName, "S31920", SQLMSG, c_errmsg );
        fn_exit ( "UNABLE TO DELETE DL ORDER BOOK- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  *** Ver 2.7 ***
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  *** Ver 2.7 ***
        return;
    }

    if (DEBUG_MSG_LVL_3)     
    {
      fn_userlog( c_ServiceName, "DL FNO ORDER BOOK DELETED");
    }


    EXEC SQL
         DELETE FROM dft_dl_fo_trdbk WHERE DFT_XCHNG_CD =:sql_exg_xchng_cd;

    if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
        fn_errlog( c_ServiceName, "S31925", SQLMSG, c_errmsg );
        fn_exit ( "UNABLE TO DELETE DL TRADE BOOK- Contact system support", 'Y' );
        strcpy(c_error_txt,"System Error - Contact system support");  *** Ver 2.7 ***
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  *** Ver 2.7 ***
        return;
    }

    if (DEBUG_MSG_LVL_3)      
    {
      fn_userlog( c_ServiceName, "DL FNO TRADE BOOK DELETED");
    }


    *** Ver 4.4 Comment Ends ***/

    EXEC SQL
         DELETE  FFC_FO_FVRT_CNTRCT_LST
         WHERE   FFC_XCHNG_CD = :sql_exg_xchng_cd 
         AND     FFC_EXPRY_DT < :c_rundt;

    if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
        fn_errlog(c_ServiceName,"S31930",SQLMSG,c_errmsg);
        fn_exit ( "Unable to delete expired favourite contracts",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
    }

/*** ver 4.6 starts ***/

    EXEC SQL
         DELETE  FBC_FO_BSKT_CNTRCT_LST 
         WHERE   FBC_XCHNG_CD = :sql_exg_xchng_cd
         AND     FBC_EXPRY_DT < :c_rundt;

    if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
        fn_errlog(c_ServiceName,"S31935",SQLMSG,c_errmsg);
        fn_exit ( "Unable to delete expired basket contracts",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");  
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); 
        return;
    }

/** ver 4.6 ends ***/

    /*** Commented in Ver 3.4 ***

 		EXEC SQL
         UPDATE FCM_FO_CNTRCT_MSTR
         SET FCM_QT_TRDNG_FLG = 'Q'
         WHERE FCM_XCHNG_CD = :sql_exg_xchng_cd  
         AND   FCM_EXPRY_DT < :c_rundt;

    if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
        fn_errlog(c_ServiceName,"S31940",SQLMSG,c_errmsg);
        fn_exit ( "Unable to disable expired contracts",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");  *** Ver 2.7 ***
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  *** Ver 2.7 ***
        return;
    }

    *** Ver 3.4 Comment Ends ***/

		/***	Ver 3.4	Starts	***/

 		EXEC SQL
         UPDATE FTQ_FO_TRD_QT
         SET FTQ_QT_TRDNG_FLG = 'Q'
         WHERE FTQ_XCHNG_CD = :sql_exg_xchng_cd  
         AND   FTQ_EXPRY_DT < :c_rundt;

    if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
        fn_errlog(c_ServiceName,"S31945",SQLMSG,c_errmsg);
        fn_exit ( "Unable to disable expired contracts",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  
        return;
    }

		/***	Ver 3.4 Ends	***/

    EXEC SQL
         DELETE  FROM FMW_FNO_MKT_WTCH
         WHERE   FMW_XCHNG_CD = :sql_exg_xchng_cd  
         AND     FMW_EXPRY_DT < :c_rundt;

    if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
        fn_errlog(c_ServiceName,"S31950",SQLMSG,c_errmsg);
        fn_exit ( "Unable to delete from fmw_fno_mkt_wtch",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
    }

    EXEC SQL
         DELETE  FROM RUF_RIA_USR_FOPRF
         WHERE   RUF_XCHNG_CD = :sql_exg_xchng_cd  
         AND     RUF_EXPRY_DT < :c_rundt;

		if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
        fn_errlog(c_ServiceName,"S31955",SQLMSG,c_errmsg);
        fn_exit ( "Unable to delete from ruf_ria_usr_foprf",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
    }

     EXEC SQL
        UPDATE fup_fut_undrlyng_pstn
        SET    fup_mtm_flg = 'O'
        WHERE  fup_xchng_cd = :sql_exg_xchng_cd  
        AND    fup_mtm_flg = 'M';

    if(SQLCODE  != 0 && SQLCODE != NO_DATA_FOUND )
    {
        fn_errlog(c_ServiceName,"S31960",SQLMSG,c_errmsg);
        fn_exit ( "Unable to update future mtm flag",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
    }

    if (DEBUG_MSG_LVL_3)     
    {
      fn_userlog( c_ServiceName, "Future mtm flag updated");
    }


     EXEC SQL
        UPDATE fop_fo_options_pstn
        SET    fop_mtm_flg = 'O'
        WHERE  FOP_XCHNG_CD = :sql_exg_xchng_cd 
        AND    fop_mtm_flg = 'M';


		if(SQLCODE  != 0 && SQLCODE != NO_DATA_FOUND )
    {
       fn_errlog(c_ServiceName,"S31965",SQLMSG,c_errmsg);
       fn_exit ( "Unable to update option mtm flag",'Y');
       strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
       fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
       return;
    }

   /** Ver 4.1 Started **/
     EXEC SQL
          UPDATE fop_fo_options_pstn
          SET    fop_mtm_flg = 'O'
          WHERE  FOP_XCHNG_CD = :sql_exg_xchng_cd
          /** AND    NVL(fop_mtm_flg,'O') = 'D'; **/
          AND    NVL(fop_mtm_flg,'O') in ('L','D');
  
     if(SQLCODE  != 0 && SQLCODE != NO_DATA_FOUND )
     {
       fn_errlog(c_ServiceName,"S31970",SQLMSG,c_errmsg);
       fn_exit ( "Unable to update option mtm flag",'Y');
       strcpy(c_error_txt,"System Error - Contact system support");  
       fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); 
       return;
     } 

     EXEC SQL
          UPDATE FCP_FO_SPN_CNTRCT_PSTN
          SET FCP_MTM_FLG ='O'
          WHERE FCP_XCHNG_CD = :sql_exg_xchng_cd
          AND   NVL(FCP_MTM_FLG,'O') = 'D';

     if(SQLCODE  != 0 && SQLCODE != NO_DATA_FOUND )
     {
       fn_errlog(c_ServiceName,"S31975",SQLMSG,c_errmsg);
       fn_exit ( "Unable to update option mtm flag",'Y');
       strcpy(c_error_txt,"System Error - Contact system support"); 
       fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
       return;
     } 

   /** Ver 4.1 Ends **/

    if (DEBUG_MSG_LVL_3)     
    {
      fn_userlog( c_ServiceName, "Option mtm flag updated");
    }


   }  /*** IF Condition ends here ***/
		
	 /*** Ver 3.8 Started ***/

	 if( strcmp( sql_exg_xchng_cd , "BFO") == 0)
	 {
			fn_userlog(c_ServiceName, "Inside FMW_FNO_MKT_WTCH delete");

			EXEC SQL
         DELETE  FROM FMW_FNO_MKT_WTCH
         WHERE   FMW_XCHNG_CD = :sql_exg_xchng_cd
         AND     FMW_EXPRY_DT < :c_rundt;

    	if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    	{
       	 fn_errlog(c_ServiceName,"S31980",SQLMSG,c_errmsg);
         fn_exit ( "Unable to delete from fmw_fno_mkt_wtch",'Y');
       	 strcpy(c_error_txt,"System Error - Contact system support");  
         fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
         return;
    	}

			fn_userlog(c_ServiceName, "After successful delete of FMW_FNO_MKT_WTCH");
	 }
	 /*** Ver 3.8 Ends ***/


	 EXEC SQL
         DELETE FROM TMP_SQOFF_DEFAULTER
         WHERE  TMP_XCHNG_CD = :sql_exg_xchng_cd;

    if(SQLCODE  != 0 && SQLCODE != NO_DATA_FOUND )
    {
        fn_errlog(c_ServiceName,"S31985",SQLMSG,c_errmsg);
        fn_exit ( "Unable to delete from tmp_sqoff_defaulter",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
    }

    EXEC SQL
    UPDATE FUS_FO_UNDRLYNG_SPN_PSTN
    SET    FUS_MTM_FLG = 'O'
    WHERE  FUS_XCHNG_CD = :sql_exg_xchng_cd
    /** AND    FUS_MTM_FLG = 'M'; commented in Ver 4.1 **/
    AND    FUS_MTM_FLG IN ('L','M'); /** Ver 4.1 **/

    if(SQLCODE  != 0 && SQLCODE != NO_DATA_FOUND )
    {
        fn_errlog(c_ServiceName,"S31990",SQLMSG,c_errmsg);
        fn_exit ( "Unable to update future mtm flag",'Y');
        strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
        return;
    }

    if (DEBUG_MSG_LVL_3)     
    {
      fn_userlog( c_ServiceName, "Span mtm flag updated");
    }



	
    } /*** End of else condition ***/

    /******************************** Ver 2.6 Ends **************************************/ 

	/**** Ver 2.6 Bug Fix Starts ***/
     EXEC SQL
         UPDATE exg_xchng_mstr
         SET    exg_tmp_mkt_stts = 'X'
         WHERE  exg_xchng_cd = :sql_exg_xchng_cd;

     if ( SQLCODE != 0 )
     {
        fn_errlog(c_ServiceName,"S31995",SQLMSG,c_errmsg);
        fn_exit ( "Unable to update next trade date- Contact system support",'Y');
        return;
     }
    /**** Ver 2.6 Bug Fix Ends   ***/

	 /*** Ver 2.9 starts here ***/
	  EXEC SQL
			UPDATE MTM_APPLN_STTS 
			SET    MTM_SLTP_EOS_FLG = 'N', 
						 MTM_SLTP_EOS_FLG_S = 'N'	/*** Added in Ver 4.3 ***/
			WHERE  MTM_XCHNG_CD = :sql_exg_xchng_cd;

    if(SQLCODE  != 0 && SQLCODE != NO_DATA_FOUND )
    {
        fn_errlog(c_ServiceName,"S32000",SQLMSG,c_errmsg);
        fn_exit ( "Unable to update sltp F+ eos flag",'Y');
        return;
    }

    if (DEBUG_MSG_LVL_3)     
    {
      fn_userlog( c_ServiceName, "SLTP F+ EOS flag updated");
    }
		/*** Ver 2.9 ends here ***/

   /*** Ver 3.0 starts here ***/
    EXEC SQL
      UPDATE MTM_APPLN_STTS
      SET    MTM_OP_EOS_FLG = 'N',
						 MTM_OP_EOS_FLG_S = 'N'	/*** Added in Ver 4.3 ***/
      WHERE  MTM_XCHNG_CD = :sql_exg_xchng_cd;

    if(SQLCODE  != 0 && SQLCODE != NO_DATA_FOUND )
    {
        fn_errlog(c_ServiceName,"S32005",SQLMSG,c_errmsg);
        fn_exit ( "Unable to update Option+ eos flag",'Y');
        return;
    }

    if (DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName, "Option+ EOS flag updated");
    }
    /*** Ver 3.0 ends here ***/
	
		/**** Ver 3.1 Starts *** Comented in Ver 4.0 ***

		if( strcmp( sql_exg_xchng_cd,"NFO" ) == 0 )
    {
      fn_userlog(c_ServiceName," Inside NFO portfolio calculation.");
			
			** Commented in Ver 3.3 **
 				EXEC SQL
        SELECT 'Y'
        INTO   :c_exp_day
        FROM   dual
        WHERE  exists
        (
          SELECT 1
          FROM   FCM_FO_CNTRCT_MSTR
          WHERE  trunc(FCM_EXPRY_DT) =	:old_exg_nxt_trd_dt   * Ver 3.2 **  trunc(sysdate) *	
					AND    FCM_XCHNG_CD = :sql_exg_xchng_cd
        );
				** Commented in Ver 3.3 **

      *** Commented in Ver 3.4 ***

			** Added in Ver 3.3 **

			EXEC SQL
        SELECT 'Y'
        INTO   :c_exp_day
        FROM   dual
        WHERE  exists
        (
          SELECT 1
          FROM   FCM_FO_CNTRCT_MSTR
          WHERE  trunc(FCM_EXPRY_DT) = :sql_exg_nxt_trd_dt
          AND    FCM_XCHNG_CD = :sql_exg_xchng_cd
        );

			   ** Added in Ver 3.3 **

        *** Ver 3.4 Comment Ends ***

      *** Ver 3.4 Starts ***

      EXEC SQL
        SELECT 'Y'
        INTO   :c_exp_day
        FROM   dual
        WHERE  exists
        (
          SELECT 1
          FROM   FTQ_FO_TRD_QT
          WHERE  trunc(FTQ_EXPRY_DT) = :sql_exg_nxt_trd_dt
          AND    FTQ_XCHNG_CD = :sql_exg_xchng_cd
        );

      *** Ver 3.4 Ends ***


    	if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    	{
				fn_errlog(c_ServiceName,"S32010",SQLMSG,c_errmsg);
      	fn_exit ( "Unable to select date - Contact system support",'Y');
      	strcpy(c_error_txt,"System Error - Contact system support"); 
      	fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); 
      	return;
    	}

    	if (SQLCODE == NO_DATA_FOUND )
    	{
      	fn_userlog ( c_ServiceName, "Inside No data found in fcm ");
				c_exp_day = 'N';
			}
		
      fn_userlog ( c_ServiceName, "Expiry day yes/no |%c|",c_exp_day);

			if ( c_exp_day == 'Y' )
			{
      	 fn_userlog ( c_ServiceName, "date is |%s|",sql_exg_nxt_trd_dt.arr);

				 strcpy(c_command, "nohup bat_prdct_prtfl NFO NFO NA ");
         strcat(c_command, sql_exg_nxt_trd_dt.arr);
         strcat(c_command, " X &");

      	 fn_userlog ( c_ServiceName, "command is |%s|",c_command);
	
				i_ret_cd = system(c_command);

   			if( i_ret_cd != 0 )
   			{
					fn_errlog(c_ServiceName,"S32015",SQLMSG,c_errmsg);
        	fn_exit ( "Error calling portfolio process - Contact system support",'Y');
        	strcpy(c_error_txt,"System Error - Contact system support");
        	fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        	return;
   			}

      	fn_userlog ( c_ServiceName, "Portfolio process called succefully");
				
				EXEC SQL 
					UPDATE FNO_SYSTM_PRMTR 
						 SET FSP_PRTFL_FLG = 'R' 
					WHERE  FSP_PRODCT = 'FNO';
			
				if ( SQLCODE != 0 )
      	{
        	fn_errlog(c_ServiceName,"S32020",SQLMSG,c_errmsg);
        	fn_exit ( "Unable to update FNO_SYSTM_PRMTR - Contact system support",'Y');
        	strcpy(c_error_txt,"System Error - Contact system support");
        	fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
        	return;
      	}
			}
		}

		**** Ver 3.1 Ends *** Comment end for Ver 4.0 ****/
  /*** Add start in Ver 4.0 ***/
  if( strcmp( sql_exg_xchng_cd,"NFO" ) == 0 )
  {

    fn_userlog ( c_ServiceName, "Updating Portfolio process Flag For Portfolio Script");

    EXEC SQL
       UPDATE FNO_SYSTM_PRMTR
          SET FSP_PRTFL_FLG = 'R'
       WHERE  FSP_PRODCT = 'FNO';

    if ( SQLCODE != 0 )
    {
       fn_errlog(c_ServiceName,"S32025",SQLMSG,c_errmsg);
       fn_exit ( "Unable to update FNO_SYSTM_PRMTR - Contact system support",'Y');
       strcpy(c_error_txt,"System Error - Contact system support");
       fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
       return;
    }

    fn_userlog(c_ServiceName," Running NFO Portfolio Calculation Script.");
    sprintf(c_scrpt_cmd,"nohup ksh auto_prtfl_trgr.sh '%s' '%s' &",sql_exg_nxt_trd_dt.arr,sql_exg_xchng_cd);
    fn_userlog( c_ServiceName, "portfolio run command :%s:",c_scrpt_cmd);
    system(c_scrpt_cmd);
    
    /************ ver 4.2 Starts *******************/
     
    EXEC SQL
    INSERT INTO FEU_FO_ELM_UPLD_LOG
                (
                  FEU_STCK_NM,
                  FEU_INTRUMENT,
                  FEU_NRML_ELM_MRGN_PRCNT,
                  FEU_ADDL_ELM_MRGN_PRCNT,
                  FEU_TOTAL_ELM_MRGN_PRCNT,
                  FEU_ACTV_FLG,
                  FEU_INS_DT,
                  FEU_TRD_DT
                 )
                 (
                  select
                        FEU_STCK_NM,
                        FEU_INTRUMENT,
                        FEU_NRML_ELM_MRGN_PRCNT,
                        FEU_ADDL_ELM_MRGN_PRCNT,
                        FEU_TOTAL_ELM_MRGN_PRCNT,
                        FEU_ACTV_FLG,
                        sysdate,
                        to_date( :sql_exg_nxt_trd_dt ,'DD-Mon-YYYY')
                  from FEU_FO_ELM_UPLD
                 ); 

    if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND)
    {
     fn_userlog( c_ServiceName, "Error while inserting in FEU LOG :%s:", SQLMSG );
     fn_errlog( c_ServiceName, "S32030", SQLMSG, c_errmsg );
     strcpy(c_error_txt,"System Error - Contact system support");
     fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
     return;
    }

    EXEC SQL
    delete from FEU_FO_ELM_UPLD;

    if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND)
    {
     fn_userlog( c_ServiceName, "Error while  Deleting from FEU :%s:", SQLMSG );
     fn_errlog( c_ServiceName, "S32035", SQLMSG, c_errmsg );
     strcpy(c_error_txt,"System Error - Contact system support");
     fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
     return;
    } 

    EXEC SQL
    INSERT INTO FOC_FO_OTM_CNTRCTS_LOG
                (
                  FOC_INSTRUMENT,
                  FOC_STCK_NM,
                  FOC_EXPRY_DT,
                  FOC_STRK_PRC,
                  FOC_OPT_TYP,
                  FOC_FILLER,
                  FOC_ELM_PRCNT,
                  FOC_ACTV_FLG,
                  FOC_INS_DT,
                  FOC_TRD_DT
                )
                (
                 select
                       FOC_INSTRUMENT,
                       FOC_STCK_NM,
                       FOC_EXPRY_DT,
                       FOC_STRK_PRC,
                       FOC_OPT_TYP,
                       FOC_FILLER,
                       FOC_ELM_PRCNT,
                       FOC_ACTV_FLG,
                       sysdate,
                       to_date( :sql_exg_nxt_trd_dt ,'DD-Mon-YYYY')
                  from FOC_FO_OTM_CNTRCTS
                 ); 
     if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
     {
      fn_userlog( c_ServiceName, "Error while Inserting FOC Log :%s:", SQLMSG );
      fn_errlog( c_ServiceName, "S32040", SQLMSG, c_errmsg );
      strcpy(c_error_txt,"System Error - Contact system support");
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
      return;
     }

    EXEC SQL
    delete from FOC_FO_OTM_CNTRCTS;

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
     fn_userlog( c_ServiceName, "Error while  Deleting from FOC :%s:", SQLMSG );
     fn_errlog( c_ServiceName, "S32045", SQLMSG, c_errmsg );
     strcpy(c_error_txt,"System Error - Contact system support");
     fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
     return;
    }
    
     sprintf(c_cmd_sh,"nohup ksh %s/sh_scripts/elm_bkp_notifier.sh & ",tuxgetenv("HOME"));
     fn_userlog( c_ServiceName, "Script :%s: for ELM executed",c_cmd_sh);
     system(c_cmd_sh); 

    /*********** ver 4.2 Ends *********************/   

  }
  /*** Add Ends for Ver 4.0 ***/

		if (DEBUG_MSG_LVL_3)      /*** Ver 1.4 ***/
    {
        fn_userlog( c_ServiceName, "COMMITTING THE TRANSACTION" );
    }

		i_returncode = tpcommit(0);
  	if ( i_returncode == -1 )
  	{
    	fn_errlog(c_ServiceName,"S32050",TPMSG,c_errmsg);
    	fn_exit ( "Unable to commit transaction- Contact system support",'Y');
    	strcpy(c_error_txt,"System Error - Contact system support");  /*** Ver 2.7 ***/
    	fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 2.7 ***/
    	return;
  	}


    /*** Ver 4.4 Starts ***/

    EXEC SQL
      TRUNCATE TABLE DFO_DL_FO_ORDBK;

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
     fn_userlog( c_ServiceName, "Error in truncate DFO :%s:", SQLMSG );
     fn_errlog( c_ServiceName, "S32055", SQLMSG, c_errmsg );
     strcpy(c_error_txt,"System Error - Contact system support");
     fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
     return;
    } 


    EXEC SQL
      TRUNCATE TABLE DFT_DL_FO_TRDBK;

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
     fn_userlog( c_ServiceName, "Error in truncate DFT :%s:", SQLMSG );
     fn_errlog( c_ServiceName, "S32060", SQLMSG, c_errmsg );
     strcpy(c_error_txt,"System Error - Contact system support");
     fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
     return;
    }

    /*** Ver 4.4 Ends ***/


  fn_exit ( "*** EOD Process Completed ****",'N');

	return;
}
/*** Ver 4.1 ***/
int fn_lodm_check(char *c_ServiceName, char *c_nxt_trd, char *c_xchng_cd)
{
 char c_min_trd_dt[12];
 char c_max_trd_dt[12];
 char c_err_msg[256];
 
 int i_lodm_check=0;
 int i_date_range_chk=0;
 
 MEMSET(c_min_trd_dt);
 MEMSET(c_max_trd_dt);
 MEMSET(c_err_msg);

 if (DEBUG_MSG_LVL_3)     
 {
  fn_userlog(c_ServiceName,"Inside Delivery Margin check "); 
  fn_userlog(c_ServiceName,"Exchange Trade date :%s:",c_nxt_trd); 
 }

 /*****   Query commented  ***** 

 EXEC SQL
 SELECT MIN(trd_dt),MAX(trd_dt)
 INTO :c_min_trd_dt,
      :c_max_trd_dt
 FROM
 (
  SELECT trd_dt
  FROM
  (
   SELECT FBC_TRD_DT trd_dt from FBC_FO_BRNCH_CAL
   WHERE FBC_XCHNG_CD='NFO'
   AND FBC_GRP_ID='1'
   AND  FBC_TRD_DT <= (select min(FTQ_EXPRY_DT) AS min_expry_dt from ftq_fo_trd_qt where FTQ_XCHNG_CD='NFO'
   AND  FTQ_PRDCT_TYP='F'
   AND  FTQ_UNDRLYNG='NIFTY' and FTQ_EXPRY_DT >=trunc(sysdate))
   AND trunc(FBC_TRD_DT,'MM') between add_months(trunc(to_date(:c_nxt_trd),'MM'),-1) and  trunc(to_date(:c_nxt_trd),'MM')
   ORDER BY FBC_TRD_DT desc
  ),FSP_FO_SYSTM_PRMTR
  WHERE
  ROWNUM <=FSP_DLVRY_STRT_DAY+1
  ORDER BY trd_dt ASC
 );
    *******/

 /****** Revised Query ******/
 
 EXEC SQL
 SELECT MIN(trd_dt),MAX(trd_dt)
 INTO :c_min_trd_dt,
      :c_max_trd_dt
 FROM
 (
  SELECT trd_dt
  FROM
  (
   SELECT FBC_TRD_DT trd_dt
   from FBC_FO_BRNCH_CAL,
   (select min(FTQ_EXPRY_DT) min_dt from ftq_fo_trd_qt where FTQ_XCHNG_CD='NFO' AND FTQ_PRDCT_TYP='F' AND FTQ_UNDRLYNG='NIFTY') A
   WHERE  FBC_TRD_DT <= A.min_dt
   AND trunc(FBC_TRD_DT,'MM')= trunc(A.min_dt,'MM')
   AND    FBC_XCHNG_CD='NFO'
   AND FBC_GRP_ID='1'
   ORDER BY FBC_TRD_DT desc
  ),FSP_FO_SYSTM_PRMTR
  WHERE
  ROWNUM <=FSP_DLVRY_STRT_DAY+1
  ORDER BY trd_dt ASC
 ); 


 if( SQLCODE != 0 )
 {
  fn_errlog( c_ServiceName, "S32065", SQLMSG, c_err_msg );
  return -1;
 }


 if (DEBUG_MSG_LVL_3)      
 { 
  fn_userlog(c_ServiceName,"Min Trade date range :%s:",c_min_trd_dt);
  fn_userlog(c_ServiceName,"Max Trade date range :%s:",c_max_trd_dt);
 }

 EXEC SQL
 SELECT 1
 INTO :i_date_range_chk
 FROM DUAL
 WHERE to_date(:c_nxt_trd) >= to_date(:c_min_trd_dt) 
 AND to_date(:c_nxt_trd) < to_date(:c_max_trd_dt);

 if(( SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND) )
 {
  fn_errlog( c_ServiceName, "S32070", SQLMSG, c_err_msg );
  return -1;
 }

 if( SQLCODE == NO_DATA_FOUND )
 {
  i_date_range_chk=0;
  fn_userlog(c_ServiceName,"Date range check :%d:",i_date_range_chk); 
  fn_userlog(c_ServiceName,"Skipping Open Delivery Margin Check");
  return 0;
 }


 EXEC SQL
 SELECT 1
 INTO  :i_lodm_check
 FROM  DUAL
 WHERE EXISTS  ( SELECT APR_XCHNG_CD
                 FROM    AUDIT_PROG_RUNSTTS
                 WHERE APR_PROG_NAME = 'bat_dlvrymrgn_prcs'
                 AND trunc(APR_TRD_DT) =:c_nxt_trd
                 AND APR_SUCC_FLG = 'P'
                 AND APR_XCHNG_CD =:c_xchng_cd);

 if(( SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND) )
 {
  fn_errlog( c_ServiceName, "S32075", SQLMSG, c_err_msg );
  return -1;
 }

 if( SQLCODE == NO_DATA_FOUND )
 {
  i_lodm_check=0;
  fn_userlog(c_ServiceName,"LODM check flag :%d:",i_lodm_check);
  fn_userlog(c_ServiceName,"Please run bat_dlvrymrgn_prcs");
  fn_bat_pst_msg ( c_ServiceName, "Please run bat_dlvrymrgn_prcs", c_tag );
  return -1;    
 }


 if (DEBUG_MSG_LVL_3)      
 {
  fn_userlog(c_ServiceName,"bat_dlvrymrgn_prcs check successful");
 }

 return 0; 
 
}

/** ver 4.7 starts **/
int fn_update_isec_amt(char *c_ServiceName, char *c_nxt_trd, char *c_rundt, char *c_xchng_cd)
{

 int i_date_difference = 0;
 char c_err_msg[256] = "\0";
 char c_trade_date[20]="\0";
 int i_trnsctn = 0;

   EXEC SQL
        SELECT to_date(FBC_CLN_PYOUT_DT,'DD-MM-YYYY') - to_date(:c_rundt,'DD-MM-YYYY')
          INTO :i_date_difference
          FROM FBC_FO_BRNCH_CAL
         where FBC_XCHNG_CD = :c_xchng_cd
           and FBC_TRD_DT = :c_nxt_trd
           and FBC_GRP_ID   = 1;
 if(( SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND) )
 {
  fn_errlog( c_ServiceName, "S32080", SQLMSG, c_err_msg );
  return -1;
 }

 if ( i_date_difference == 0 )
 {
  i_trnsctn = fn_begintran( c_ServiceName,c_err_msg );
  if ( i_trnsctn == -1 )
  {
     fn_errlog( c_ServiceName, "S32085", SQLMSG, c_err_msg );
     return -1;
  }

    EXEC SQL
      DECLARE cur_get_strk_price CURSOR FOR
      SELECT FBC_TRD_DT
        from FBC_FO_BRNCH_CAL
       where FBC_XCHNG_CD='NFO'
         and FBC_GRP_ID=1
         and FBC_CLN_PYOUT_DT=:c_rundt;

     EXEC SQL
      OPEN cur_get_strk_price;

    if(SQLCODE != 0)
    {
     fn_errlog( c_ServiceName, "S32090", SQLMSG, c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn,c_err_msg );
     return -1;
    }
  while ( 1 )
  {

      EXEC SQL
        FETCH cur_get_strk_price
        INTO  :c_trade_date;

      if(SQLCODE != 0)
      {
        if(SQLCODE == NO_DATA_FOUND)
        {
          EXEC SQL CLOSE cur_get_strk_price;
          break;
        }
       fn_userlog(c_ServiceName,"Failed in fetching details in trade date loop  ");
        EXEC SQL CLOSE cur_get_strk_price;
        fn_aborttran( c_ServiceName, i_trnsctn,c_err_msg );
        fn_errlog( c_ServiceName, "S32095", SQLMSG, c_err_msg );
        return -1;
     }
     rtrim(c_trade_date);

     EXEC SQL
          UPDATE fcb_fo_clnt_blncs
           SET FCB_ISEC_WITHHELD_AMT = 0,
               FCB_WITHHELD_TDSADJAMT=0,  /** Ver 4.8 **/
               FCB_PRMUM_UTILISED=0, /*** ver 4.9 ***/ 
							 FCB_PRMUM_RCVBL = 0 /*** ver 4.9 ***/	
         WHERE FCB_XCHNG_CD= :c_xchng_cd
           AND FCB_GRP_ID = 1
           AND FCB_TRD_DT = :c_trade_date;

     if(( SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND) )
     {
     fn_errlog( c_ServiceName, "S32100", SQLMSG, c_err_msg );
     fn_aborttran( c_ServiceName, i_trnsctn,c_err_msg );
     EXEC SQL CLOSE cur_get_strk_price;
     return -1;
     }
  }
 
  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog ( c_ServiceName, "S32105", LIBMSG, c_err_msg );
     return -1;
  }
 }

}
/*** ver 4.7 ends ***/


void fn_exit( char* c_err_msg, char c_mem_flg )
{
    fn_bat_pst_msg ( c_ServiceName, c_err_msg, c_tag );
    if( c_mem_flg == 'Y' )
    {
      tpabort(0);
    }
		return;
}

int fn_bat_init ( int argc, char *argv[] ) 
{
	fn_var = BAT_FO_EOD;

  if ( argc != 5 )
  {
    fn_userlog ( "bat_fo_eod",
   "Usage : %s <Tag> <Exchange Code> <Pipe id> <Exchange Next Date>", argv[0] );
		return -1;
	}

	return 0;
}

void fn_bat_term (  int argc, char *argv[] )
{
   return ;
}

int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
  return 0;
}
