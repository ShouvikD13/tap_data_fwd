/* Service name :  BAT_FO_CNTPART                                               		*
*                                                                              			*
* Description  :  This Batch Program updates the contract and participant      			*
*									information download         																 			*
*                 Tables                                                       			*
*                                                                              			*
* Input        :  contract.txt                                                 			*
*									participant.txt																							 			*
*                                                                              			*
*                                                                              			*
* Log         :   Ver 1.0 18-Mar-2002 Initial Release  - Sridhar.T.N           			*
*							:		Ver 1.1	28-Dec-2007	IBM Migration Changes		Sandeep					 			*
*             :   Ver 1.2 02-Jan-2009 NNF Changes For Extended Market Hours    			*
*                                                  Prakash & Shailesh          			*
*							:		Ver 1.3	05-Jun-2012	Changes to run for current date 				 			*
*																									 directory   - Shashi 		   			*
*             :   Ver 1.4 30-Nov-2015 Changes for automation                   			*   
*																									 of process - Vishal B.      			* 
*             :   Ver 1.6 31-Dec-2015 Service call Commented (SFO_CNT_FOR_ENT) 			*
*																															- Ritesh D.      			*
*             :   Ver 1.7 23-May-2016 Multicast changes (Ritesh Deolekar)      			*
*							:		Ver 1.8	26-may-2016 Multicast changes for Optimization (Swapnil) 	* 	
*							:		Ver 1.9	28-Apr-2017	Changes for contract housekeep issue(Swapnil)	*					
*             :   Ver 2.0 18-Sep-2017 Handling for Incorrect Mapping in SEM					*
* 																																	(Anand Dhopte)  *
*							:		Ver 2.1 12-Dec-2017 Store Duplicate Token No into Temp table 			*
*																		  and update these Token No to 0 (Sandeep)			*
*             :   Ver 2.2 15-Feb-2018 Missing columns added in Temp Table           *
*                                     used for backup of duplicated                 * 
*   																	token records (Anand Dhopte)                  *
*             :   Ver 2.3 16-Mar-2018 Trigger mail if contract file                 *
*                                     is invalid(old) (Anand Dhopte)                *  
*             :   Ver 2.4 16-Mar-2018 Query to find duplicate records changed to    * 
*                                     skip records with token no 0                  *    
*             :   Ver 2.5 04-July-2018 The field settlement_indicator is read from  *
*                                      contract.txt file                            *
*             :   Ver 2.6 07-Feb-2022 CR-ISEC14-165712_Disable_OPTCNTRCT_EOSBUYSELL *
*                                      (Nikhil Soni)                                * 
*             :   Ver 2.7 29-Nov-2022 Minor changes in date comparison              *
*                                      (Edwin Thomas)                               *       
************************************************************************************/
#include <stdio.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <Usysflds.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <eba_to_ors.h>
#include <fn_ddr.h>
#include <errno.h>
#include <string.h>				/** Ver 1.1 **/
#include <time.h>					/** Ver 1.1 **/
#include <stdlib.h>				/** Ver 1.1 **/
#include <fn_read_debug_lvl.h>      /*** Ver 1.1 ***/

#define SEC_SUSPENDED 2
#define PART_SUSPENDED 2

int fn_ors_cntct_info ( msg_cntrct_info *st_cntrct_info_msg,
                        int  i_max_loop_count,            	/***  Ver 1.8 ***/
                        struct st_cache arr_st_cache[],   	/***  Ver 1.8 ***/
                        char *c_near_expry_dt,          		/***  Ver 1.7 ***/
                        char *c_mid_expry_dt,           		/***  Ver 1.7 ***/
                        char *c_far_expry_dt,           		/***  Ver 1.7 ***/
                        char *c_near_glbl_expry_dt,     		/***  Ver 1.7 ***/
                        char *c_mid_glbl_expry_dt,      		/***  Ver 1.7 ***/
                        char *c_far_glbl_expry_dt,      		/***  Ver 1.7 ***/
                        char *c_settlmnt_indicator,          /***  Ver 2.5 ***/
						int i_diff,                          /* Ver 2.7 */
                        char *c_ServiceName,
                        char *c_err_msg );

int fn_nse_to_eba_cntrct ( nfo_cntrct st_nse_cntrct,
                           struct vw_contract *ptr_cntrct,
                           char *c_ServiceName,
                           char *c_err_msg );

void fn_nsetoors_tm ( char *c_tm_stmp,
                      long int li_src );

void fn_chk_process_status(char *c_ServiceName, 
							char *c_err_msg ); 		   /**ver 1.4**/


void bat_tm_init(void);

long int li_utc_offset;
long int li_ten_yrs;

int i_temp ; /*** Ver 2.0 ***/

/*** Ver 1.8 Starts ***/

char c_prev_exp_dt[12];   
int  i_prev_lbl_val;     


struct st_cache
{
    char c_exp_dt[12];
    long l_lbl_val;
};

/*** Ver 1.8 Ends ***/ 


/*****************This is for Particpant upload *****************
void BAT_PART_UPLD ( int argc, char *argv[] )
{
	char c_ServiceName[33];
	char c_err_msg[256];
	char c_file_name[256];
	char c_rout_str[4];
	char c_msg[256];
	char c_data[1024+1];
	char c_o_data[1024+1];
	char c_parti_name[26];
	char c_delete_flg;
	long int li_lst_upd_tm;

	FILE *ptr_parti_file;

	char *ptr_c_tmp;

	struct vw_xchngstts st_stts;

	int i_len;
	int i;
	int j;
	int i_ch_val;

	strcpy(c_ServiceName, argv[0]);

	ptr_c_tmp = (char*)getenv("EBALOG_PATH");

	if (ptr_c_tmp == NULL)
	{
		fn_errlog(c_ServiceName, "S31005", UNXMSG, c_err_msg);
  	fn_bat_pst_msg ( c_ServiceName, 
										"System error occured. Contact system support", c_tag );
		return;
	}

	*** Open file pointer for participant information file ***
	sprintf(c_file_name, "%s/%s/trade/%s/%s", ptr_c_tmp, argv[4],argv[2],argv[5]);
	ptr_parti_file = fopen(c_file_name, "r");
	if ( ptr_parti_file == NULL )
	{
		fn_errlog(c_ServiceName, "S31010", UNXMSG, c_err_msg);
  	fn_bat_pst_msg ( c_ServiceName, 
										"System error occured. Contact system support", c_tag );
		return;
	}	

  sprintf ( c_msg, "Batch process %s started", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  fn_bat_pst_msg ( c_ServiceName, "Uploading Participant details....", c_tag );

	fgets(c_data, 1024, ptr_parti_file);
	if ( c_data == NULL)
	{
		fn_errlog(c_ServiceName, "S31015", UNXMSG, c_err_msg);
  	fn_bat_pst_msg ( c_ServiceName, 
										"System error occured. Contact system support", c_tag );
		return;
	}	
	
	while( feof(ptr_parti_file) == 0 )
	{
		*** Check for triggers ***
		fn_chk_stts(c_ServiceName);

  	memset(&st_stts, '\0', sizeof(struct vw_xchngstts) );

		fgets(c_data, 1024, ptr_parti_file);
		if ( c_data == NULL)
		{
			fn_errlog(c_ServiceName, "S31020", UNXMSG, c_err_msg);
  		fn_bat_pst_msg ( c_ServiceName, 
											"System error occured. Contact system support", c_tag );
			return;
		}	

		if( feof(ptr_parti_file) != 0)
		{
			break;
		}

		*** Replace '|' by ' ' and '||' by  ' . ' to make standard ***
	  i_len = strlen(c_data);
	  j=0;
	  for(i=0;i<i_len;i++)
	  {
	    if(c_data[i] == '|')
	    {
	      c_o_data[j++] = ' ';
	      if(c_data[i+1] == '|')
	      {
	        c_o_data[j++]='.';
	      }
	    }
    	else if(c_data[i] == ' ')
    	{
      	continue;
    	}
	    else
	    {
	      c_o_data[j++] = c_data[i];
	    }
	  }
	  c_o_data[j] = '\0';

		sscanf(c_o_data, "%s %s %c %c %ld",
											 st_stts.c_settlor, c_parti_name, &st_stts.c_settlor_stts,
											 &c_delete_flg, &li_lst_upd_tm);

		fn_userlog(c_ServiceName, "%s, %s, %c, %c, %ld",
											 st_stts.c_settlor, c_parti_name, st_stts.c_settlor_stts,
											 c_delete_flg, li_lst_upd_tm);

		if(c_delete_flg == 'D')
		{
			st_stts.c_settlor_stts = PART_SUSPENDED;
		}
		strcpy(st_stts.c_xchng_cd, argv[2]);
	  st_stts.c_rqst_typ = UPD_PARTICIPANT_STTS;
	
	  i_ch_val = fn_acall_svc ( c_ServiceName,
	                            c_err_msg,
	                            &st_stts,
	                            "vw_xchngstts",
	                            sizeof (struct vw_xchngstts ),
	                            TPNOREPLY,
	                            "SFO_UPD_XSTTS" );
	  if ( i_ch_val == -1 )
	  {
	    fn_errlog ( c_ServiceName, "S31025", LIBMSG, c_err_msg );
  		fn_bat_pst_msg ( c_ServiceName, 
											"System error occured. Contact system support", c_tag );
	    return;
	  }
	}
	fn_userlog(c_ServiceName, " %s - Process completed", argv[0]);
	fclose(ptr_parti_file);
	return;
}
******************************************************/

void BAT_CNT_UPLD ( int argc, char *argv[] )
{
	char c_ServiceName[33];
	char c_err_msg[256];
	char c_file_name[256];
/**	char c_rout_str[4]; *** Unused variable	Commented in Ver 1.6 ***/ 
	char c_msg[256];
	char c_data[1024+1];
	char c_o_data[1024+1];
	char c_instrument_name[6+1];
	char c_option_typ[2+1];
  char c_settlmnt_indicator[2]; /** ver 2.5 **/
   char c_del_flg[2]; /*** ver 2.5 ***/
 /***  Ver 1.7 Starts  ***/

  char c_expry_dt[3][12];
  char c_glbl_expry_dt[3][12];
  char c_near_expry_dt[12];
  char c_mid_expry_dt[12];
  char c_far_expry_dt[12];
  char c_near_glbl_expry_dt[12];
  char c_mid_glbl_expry_dt[12];
  char c_far_glbl_expry_dt[12];

  /***  Ver 1.7 Ends  ***/

  struct st_cache arr_st_cache[15];   		/*** Ver 1.8 ***/
  MEMSET(c_prev_exp_dt);									/*** Ver 1.8 ***/
  i_prev_lbl_val  			= 0;							/*** Ver 1.8 ***/
  int i_max_loop_count	=	0;							/*** Ver 1.8 ***/

	char *ptr_c_tmp;

	/*** Commented in Ver 1.6 *** Unused variable Commented

	char *ptr_crrnt;
	char *ptr_nxt;

	*** Ver 1.6 Comment Ends ***/

	char c_delete_flg;
  char c_cmd[100];        /*** Ver 2.3 ***/
  char c_ts_command[100]; /*** Ver 2.3 ***/ 
  char c_ts[21];          /*** Ver 2.3 ***/

	FILE *ptr_cntrct_file;
  FILE *pf;               /*** Ver 2.3 ***/   

	long int li_exp_dt;
	long int li_iss_strt_dt;
	long int li_intrst_paymnt_dt;
	long int li_iss_maturity_dt;
	long int li_listing_dt;
	long int li_expulsion_dt;
	long int li_readmsn_dt;
	long int li_rec_dt;
	long int li_nd_strt_dt;
	long int li_nd_end_dt;
	long int li_bkcls_strt_dt;
	long int li_bkcls_end_dt;
	long int li_local_upd_tm;
	long int li_exer_strt_dt;
	long int li_exer_end_dt;
	long int li_sec_stts;

	int i_len;
	long i;
	int j;
	int i_ch_val;
  int no_of_records = 0;      /***  Ver 1.7 ***/
	int i_trnsctn		=	0;		/*** Ver 2.1 ***/
	int i_dplct_cnt	=	0;		/*** Ver 2.1 ***/
  int i_date_diff = 0;          /*** Ver 2.3 ***/
  int i_diff_flg = 0;      /* Ver 2.7 */

/** ver 2.5 started **/
  char  c_assetToken[30];
  char  c_skip2[30];
  char  c_skip3[30];
  char	c_skip4[30];
  char	c_skip5[30];
  char	c_skip6[30];
  char	c_skip7[30];
  char	c_skip8[30];
  char	c_skip9[30];
  char	c_skip10[30];
  char	c_skip11[30];
  char	c_skip12[30];
  char	c_skip13[30];
  char	c_skip14[30];
  char	c_skip15[30];
  char	c_skip16[30];
  char	c_skip17[30];
  char	c_skip18[30];
  char	c_skip19[30];
  char	c_skip20[30];
  char	c_skip21[30];
  char	c_skip22[30];
  char	c_skip23[30];
  char	c_skip24[30];
  char	c_skip25[30];
  char	c_skip26[30];
  char	c_skip27[30];
  char	c_skip28[30];
  char	c_skip29[30];
  char	c_skip30[30];
  char	c_skip31[30];
  char	c_skip32[30];
  char	c_skip33[30];
  char	c_skip34[30];
  char	c_skip35[30];
  char	c_skip36[30];
  char  c_exp_dt [ 30 ];
	char  c_sec_stts [ 30 ];
	char  c_iss_strt_dt [ 30 ];
	char  c_intrst_paymnt_dt [ 30 ];
	char  c_iss_maturity_dt [ 30 ];
	char  c_listing_dt  [ 30 ];
	char  c_expulsion_dt [ 30 ];
	char  c_readmsn_dt [ 30 ];
	char  c_rec_dt [ 30 ];
	char  c_nd_strt_dt [ 30 ];
	char  c_nd_end_dt [ 30 ];
	char  c_bkcls_strt_dt [ 30 ];
	char  c_bkcls_end_dt [ 30 ];
	char  c_local_upd_tm [ 30 ];
	char  c_exer_strt_dt [ 30 ];
	char  c_exer_end_dt [ 30 ];
  char   c_token_id[ 30 ];
	char   c_strike_prc[ 30 ];
	char   c_ca_lvl[ 30 ];
  char   c_perm_trd [ 30 ];
	char   c_issue_rt [30];  
	char   c_min_lot_qty [30];
	char   c_brd_lot_qty [30];
	char   c_tck_sz [30];   
	char   c_low_prc_rng [30];
	char   c_high_prc_rng [30];
  char   c_normal_ext_mkttyp[2];
/** ver 2.5 **/

  char *c_temp_data;  /** ver 2.5 **/
	EXEC SQL BEGIN DECLARE SECTION;
		char c_tmp_date2[23];
		long li_tm_diff;
	EXEC SQL END DECLARE SECTION;

	msg_cntrct_info st_cntrct_info;

	strcpy(c_ServiceName, argv[0]);

	INITBATDBGLVL(argv[0]);     /*** Ver 1.1 ***/

	ptr_c_tmp = (char*)getenv("EBALOG_PATH");
	if (ptr_c_tmp == NULL)
	{
		fn_errlog(c_ServiceName, "S31030", UNXMSG, c_err_msg);
    fn_bat_pst_msg ( c_ServiceName, 
										"System error occured. Contact system support", c_tag );
	  fn_chk_process_status(c_ServiceName,c_err_msg );  /**ver 1.4**/
		return;
	}

	/*** Open file pointer for contract information file ***/
/********************
	sprintf(c_file_name, "%s/%s/trade/%s/%s", ptr_c_tmp, argv[4],argv[2],argv[5]);
**********************/

/*************************1.3 Start *********************************/
      EXEC SQL
      SELECT to_char(sysdate,'yyyymmdd')
      INTO :c_tmp_date2
      from dual;
		
			rtrim(c_tmp_date2);


/**************************1.3 End *********************************/

	 /** sprintf(c_file_name, "%s/%s/fno/%s", ptr_c_tmp, argv[4],argv[5]); ** comment Ver 1.3**/
   
	 sprintf(c_file_name, "%s/%s/fno/%s", ptr_c_tmp,c_tmp_date2,argv[5]); /** added Ver 1.3 **/
	 fn_bat_pst_msg ( c_ServiceName, c_file_name, c_tag ); /** added Ver 1.3 ***/

  	ptr_cntrct_file = fopen(c_file_name, "r");
		if ( ptr_cntrct_file == NULL )
		{
				fn_errlog(c_ServiceName, "S31035", UNXMSG, c_err_msg);
  		  fn_bat_pst_msg ( c_ServiceName, 
										"System error occured. Contact system support", c_tag );
			  fn_chk_process_status(c_ServiceName,c_err_msg );  /**ver 1.4**/
				return;
		}	


/***	strcpy(c_tmp_date2, argv[4]);  *** comment Ver 1.3***/


  sprintf ( c_msg, "Batch process %s started", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  fn_bat_pst_msg ( c_ServiceName, "Uploading Contract details....", c_tag );
	fgets(c_data, 1024, ptr_cntrct_file);
	if ( c_data == NULL)
	{
		fn_errlog(c_ServiceName, "S31040", UNXMSG, c_err_msg);
  	fn_bat_pst_msg ( c_ServiceName, 
										"System error occured. Contact system support", c_tag );
	  fn_chk_process_status(c_ServiceName,c_err_msg );  /**ver 1.4**/
		return;
	}	

	/***  Ver 1.7 Starts  ***/

  EXEC SQL
    TRUNCATE TABLE FMC_FNO_MLTCST_CNTRCT;

  if(SQLCODE!=0)
  {
  	fn_errlog(c_ServiceName, "S31045",SQLMSG, c_err_msg);
   	fn_userlog(c_ServiceName,"Inside Error Truncate FMC_FNO_MLTCST_CNTRCT");
    fn_bat_pst_msg ( c_ServiceName,"System error occured. Contact system support", c_tag );
    fn_chk_process_status(c_ServiceName,c_err_msg );  /**ver 1.4**/
    return;
  }


  MEMSET(c_expry_dt);
  MEMSET(c_glbl_expry_dt);

	  EXEC SQL
       SELECT  FTQ_EXPRY_DT
       INTO   :c_expry_dt
       FROM    (
                 SELECT FTQ_EXPRY_DT
                 FROM   FTQ_FO_TRD_QT
                 WHERE  FTQ_XCHNG_CD = 'NFO'
                 AND    FTQ_PRDCT_TYP = 'F'
                 AND    FTQ_UNDRLYNG  = 'NIFTY'
                 AND		FTQ_EXPRY_DT  >=  trunc(SYSDATE)				/*** Added in Ver 1.9 ***/
								 ORDER BY FTQ_EXPRY_DT
               );

  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_userlog( c_ServiceName,"Minimum three expiry dates are not present in system" );
    fn_errlog( c_ServiceName, "S31050", SQLMSG, c_err_msg  );
    fn_bat_pst_msg ( c_ServiceName,"System error occured. Contact system support", c_tag );
    fn_chk_process_status(c_ServiceName,c_err_msg );
    return;
  }

	no_of_records = sqlca.sqlerrd[2];
	
	if(DEBUG_MSG_LVL_2)
	{
  	fn_userlog(c_ServiceName,"Total No Of Expiry Dates :%d", no_of_records);
	}

  strcpy(c_near_expry_dt,c_expry_dt[0]);
  strcpy(c_mid_expry_dt,c_expry_dt[1]);
  strcpy(c_far_expry_dt,c_expry_dt[2]);

  EXEC SQL
       SELECT  FTQ_EXPRY_DT
       INTO   :c_glbl_expry_dt
       FROM    (
                 SELECT distinct FTQ_EXPRY_DT
                 FROM   FTQ_FO_TRD_QT
                 WHERE  FTQ_XCHNG_CD = 'NFO'
                 AND    FTQ_PRDCT_TYP = 'F'
                 AND    FTQ_UNDRLYNG  in ('SNP500','FTSE','DJIA')
                 AND    FTQ_EXPRY_DT < :c_far_expry_dt
                 AND    FTQ_EXPRY_DT >= trunc(sysdate)
                 ORDER BY FTQ_EXPRY_DT
               );

  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_userlog( c_ServiceName,"Minimum three expiry dates are not present in system" );
    fn_errlog( c_ServiceName, "S31055", SQLMSG, c_err_msg  );
    fn_bat_pst_msg ( c_ServiceName,"System error occured. Contact system support", c_tag );
    fn_chk_process_status(c_ServiceName,c_err_msg );
    return;
  }

	no_of_records = sqlca.sqlerrd[2];

  if(DEBUG_MSG_LVL_2)
	{	
		fn_userlog(c_ServiceName,"Total No Of Expiry Dates :%d", no_of_records);
	}

  strcpy(c_near_glbl_expry_dt,c_glbl_expry_dt[0]);
  strcpy(c_mid_glbl_expry_dt,c_glbl_expry_dt[1]);
  strcpy(c_far_glbl_expry_dt,c_glbl_expry_dt[2]);
	
	/*** Ver 1.8 Start ***/
	
    EXEC SQL
      	DECLARE cur_dstnct_wek_exp_dt CURSOR  FOR
        	SELECT  DISTINCT(FTQ_EXPRY_DT)
        	FROM    FTQ_FO_TRD_QT
        	WHERE   FTQ_XCHNG_CD = 'NFO'
        	AND     FTQ_EXPRY_DT != :c_near_expry_dt
        	AND     FTQ_EXPRY_DT != :c_mid_expry_dt
        	AND     FTQ_EXPRY_DT  < :c_far_expry_dt
        	AND     FTQ_EXPRY_DT >= trunc(sysdate)
        	AND     FTQ_UNDRLYNG NOT IN ('SNP500','FTSE','DJIA', 'INDVIX')
        	ORDER BY FTQ_EXPRY_DT;

    	EXEC SQL
      	OPEN cur_dstnct_wek_exp_dt;

    	if(SQLCODE !=0 )
    	{
      	fn_userlog( c_ServiceName,"Error While Selecting Weekly Expiry Dates." );
      	fn_errlog( c_ServiceName, "S31060", SQLMSG, c_err_msg  );
      	fn_bat_pst_msg ( c_ServiceName,"System error occured. Contact system support", c_tag );
      	fn_chk_process_status(c_ServiceName,c_err_msg );
      	return;
    	}

    	MEMSET(arr_st_cache);
    	i = 0;
	
			while(1)
    	{
          EXEC SQL
            FETCH cur_dstnct_wek_exp_dt
            INTO :arr_st_cache[i].c_exp_dt;


          if(SQLCODE != 0 )
          {
            if(SQLCODE == NO_DATA_FOUND)
            {
              fn_userlog(c_ServiceName, "Inside Cursor Break..");
              break;
            }

            fn_userlog( c_ServiceName,"Error While Fetching Records From Cursor." );
            fn_errlog( c_ServiceName, "S31065", SQLMSG, c_err_msg  );
            fn_bat_pst_msg ( c_ServiceName,"System error occured. Contact system support", c_tag );
            fn_chk_process_status(c_ServiceName,c_err_msg );
            EXEC SQL
              CLOSE cur_dstnct_wek_exp_dt;
            return;
          }

        	arr_st_cache[i].l_lbl_val = 31 + i ;
       	 	i_max_loop_count  = i;
        	i++;

				if(DEBUG_MSG_LVL_2)
				{
      		fn_userlog(c_ServiceName, "Date No:%d=%s|Lable Val:%d", i, arr_st_cache[i].c_exp_dt, arr_st_cache[i].l_lbl_val);
   			}	 
			}

    	EXEC SQL
     	 CLOSE cur_dstnct_wek_exp_dt;

		/*** Ver 1.8 End***/	

  /***  Ver 1.7 Ends  ***/
	
	while( feof(ptr_cntrct_file) == 0 )
	{
		/*** Check for triggers ***/
		fn_chk_stts(c_ServiceName);

    memset(&st_cntrct_info, '\0', sizeof(st_cntrct_info) );

    /** ver 2.5 starts ***/
		MEMSET( c_assetToken );
		MEMSET( c_skip2     );
		MEMSET( c_skip3	   );
		MEMSET( c_skip4	   );
		MEMSET( c_skip5	   );
		MEMSET( c_skip6	   );
		MEMSET( c_skip7	   );
		MEMSET( c_skip8	   );
		MEMSET( c_skip9	   );
		MEMSET( c_skip10  );
		MEMSET( c_skip11  );
		MEMSET( c_skip12  );
		MEMSET( c_skip13  );
		MEMSET( c_skip14  );
		MEMSET( c_skip15  );
		MEMSET( c_skip16  );
		MEMSET( c_skip17  );
		MEMSET( c_skip18  );
		MEMSET( c_skip19  );
		MEMSET( c_skip20  );
		MEMSET( c_skip21  );
		MEMSET( c_skip22  );
		MEMSET( c_skip23  );
		MEMSET( c_skip24  );
		MEMSET( c_skip25  );
		MEMSET( c_skip26  );
		MEMSET( c_skip27  );
		MEMSET( c_skip28  );
		MEMSET( c_skip29  );
		MEMSET( c_skip30  );
		MEMSET( c_skip31  );
		MEMSET( c_skip32  );
		MEMSET( c_skip33  );
		MEMSET( c_skip34  );
		MEMSET( c_skip35  );
		MEMSET( c_skip36  );
		MEMSET (c_instrument_name);
		MEMSET(c_option_typ);

	  MEMSET(  c_exp_dt );
	  MEMSET(  c_sec_stts );
	  MEMSET(  c_iss_strt_dt );
	  MEMSET(  c_intrst_paymnt_dt );
	  MEMSET(  c_iss_maturity_dt );
	  MEMSET(  c_listing_dt  );
	  MEMSET(  c_expulsion_dt );
	  MEMSET(  c_readmsn_dt );
	  MEMSET(  c_rec_dt );
	  MEMSET(  c_nd_strt_dt );
	  MEMSET(  c_nd_end_dt );
	  MEMSET(  c_bkcls_strt_dt );
	  MEMSET(  c_bkcls_end_dt );
	  MEMSET(  c_local_upd_tm );
	  MEMSET(  c_exer_strt_dt );
	  MEMSET(  c_exer_end_dt );
	  MEMSET(   c_token_id  );
	  MEMSET(   c_strike_prc  );
	  MEMSET(   c_ca_lvl  );
	  MEMSET(   c_perm_trd );
	  MEMSET(   c_issue_rt  );
	  MEMSET(   c_min_lot_qty  );
	  MEMSET(   c_brd_lot_qty  );
	  MEMSET(   c_tck_sz  );
	  MEMSET(   c_low_prc_rng  );
	  MEMSET(   c_high_prc_rng  );

    MEMSET(c_del_flg);
    MEMSET(c_normal_ext_mkttyp);

		li_exp_dt = 0;
		li_sec_stts = 0;
		li_iss_strt_dt =0;
		li_intrst_paymnt_dt = 0;
		li_iss_maturity_dt = 0;
		li_listing_dt  = 0;
		li_expulsion_dt = 0;
		li_readmsn_dt = 0;
		li_rec_dt = 0;
		li_nd_strt_dt = 0;
		li_nd_end_dt = 0;
		li_bkcls_strt_dt = 0;
		li_bkcls_end_dt = 0;
		li_local_upd_tm = 0;
		li_exer_strt_dt = 0;
		li_exer_end_dt = 0;
		MEMSET(c_settlmnt_indicator);
    MEMSET(c_del_flg);
		c_delete_flg = '\0'; 
    /*** ver 2.5 ends ***/
   
		fgets(c_data, 1024, ptr_cntrct_file);
		if ( c_data == NULL)
		{
			fn_errlog(c_ServiceName, "S31070", UNXMSG, c_err_msg);
  		fn_bat_pst_msg ( c_ServiceName, 
											"System error occured. Contact system support", c_tag );
		  fn_chk_process_status(c_ServiceName,c_err_msg );  /**ver 1.4**/
			return;
		}	

		if( feof(ptr_cntrct_file) != 0)
		{
			break;
		}

		/*** Replace '|' by ' ' and '||' by  ' . ' to make standard *** commented in ver 2.5
	  i_len = strlen(c_data);
	  j=0;
	  for(i=0;i<i_len;i++)
	  {
	    if(c_data[i] == '|')
	    {
	      c_o_data[j++] = ' ';
	      if(c_data[i+1] == '|')
	      {
	        c_o_data[j++]='.';
	      }
	    }
    	else if(c_data[i] == ' ')
    	{
      	continue;
    	}
	    else
	    {
	      c_o_data[j++] = c_data[i];
	    }
	  }
	  c_o_data[j] = '\0'; ver 2.5 comment ends **/

    /** ver 2.5 starts **/
     c_temp_data = strdup(c_data);

		strcpy( c_token_id,strsep(&c_temp_data,"|"));
		strcpy( c_assetToken, strsep(&c_temp_data,"|"));
		strcpy( c_instrument_name, strsep(&c_temp_data,"|"));
		strcpy( st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_symbol, strsep(&c_temp_data,"|"));
		strcpy( st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_series, strsep(&c_temp_data,"|"));
		strcpy( c_skip2, strsep(&c_temp_data,"|"));
		strcpy( c_exp_dt, strsep(&c_temp_data,"|"));
		strcpy( c_strike_prc, strsep(&c_temp_data,"|"));
		strcpy( c_option_typ, strsep(&c_temp_data,"|"));
		strcpy( c_normal_ext_mkttyp, strsep(&c_temp_data,"|"));
		strcpy( c_ca_lvl, strsep(&c_temp_data,"|"));
		strcpy( c_skip3, strsep(&c_temp_data,"|"));
		strcpy( c_perm_trd, strsep(&c_temp_data,"|"));
		strcpy( c_issue_rt, strsep(&c_temp_data,"|"));
		strcpy( c_sec_stts, strsep(&c_temp_data,"|"));
		strcpy( c_skip4, strsep(&c_temp_data,"|"));
		strcpy( c_skip5, strsep(&c_temp_data,"|"));
		strcpy( c_skip6, strsep(&c_temp_data,"|"));
		strcpy( c_skip7, strsep(&c_temp_data,"|"));
		strcpy( c_skip8, strsep(&c_temp_data,"|"));
		strcpy( c_skip9, strsep(&c_temp_data,"|"));
		strcpy( c_skip10, strsep(&c_temp_data,"|"));
		strcpy( c_skip11, strsep(&c_temp_data,"|"));
		strcpy( c_skip12, strsep(&c_temp_data,"|"));
		strcpy( c_skip13, strsep(&c_temp_data,"|"));
		strcpy( c_skip14, strsep(&c_temp_data,"|"));
		strcpy( c_iss_strt_dt, strsep(&c_temp_data,"|"));
		strcpy( c_intrst_paymnt_dt, strsep(&c_temp_data,"|"));
		strcpy( c_iss_maturity_dt, strsep(&c_temp_data,"|"));
		strcpy( c_skip15, strsep(&c_temp_data,"|"));
		strcpy( c_min_lot_qty, strsep(&c_temp_data,"|"));
		strcpy( c_brd_lot_qty, strsep(&c_temp_data,"|"));
		strcpy( c_tck_sz, strsep(&c_temp_data,"|"));
		strcpy( c_skip16, strsep(&c_temp_data,"|"));
		strcpy( c_skip17, strsep(&c_temp_data,"|"));
		strcpy( c_skip18, strsep(&c_temp_data,"|"));
		strcpy( c_listing_dt, strsep(&c_temp_data,"|"));
		strcpy( c_expulsion_dt, strsep(&c_temp_data,"|"));
		strcpy( c_readmsn_dt, strsep(&c_temp_data,"|"));
		strcpy( c_rec_dt, strsep(&c_temp_data,"|"));
		strcpy( c_nd_strt_dt, strsep(&c_temp_data,"|"));
		strcpy( c_nd_end_dt, strsep(&c_temp_data,"|"));
		strcpy( c_low_prc_rng, strsep(&c_temp_data,"|"));
		strcpy( c_high_prc_rng, strsep(&c_temp_data,"|"));
		strcpy( c_skip19, strsep(&c_temp_data,"|"));
		strcpy( c_bkcls_strt_dt, strsep(&c_temp_data,"|"));
		strcpy( c_bkcls_end_dt, strsep(&c_temp_data,"|"));
		strcpy( c_local_upd_tm, strsep(&c_temp_data,"|"));
		strcpy( c_exer_strt_dt, strsep(&c_temp_data,"|"));
		strcpy( c_exer_end_dt, strsep(&c_temp_data,"|"));
		strcpy( c_skip20, strsep(&c_temp_data,"|"));
		strcpy( c_skip21, strsep(&c_temp_data,"|"));
		strcpy( c_skip22, strsep(&c_temp_data,"|"));
		strcpy( c_skip23, strsep(&c_temp_data,"|"));
		strcpy( c_skip24, strsep(&c_temp_data,"|"));
		strcpy( c_skip25, strsep(&c_temp_data,"|"));
		strcpy( c_skip26, strsep(&c_temp_data,"|"));
		strcpy( c_skip27, strsep(&c_temp_data,"|"));
		strcpy( c_skip28, strsep(&c_temp_data,"|"));
		strcpy( c_skip29, strsep(&c_temp_data,"|"));
		strcpy( c_skip30, strsep(&c_temp_data,"|"));
		strcpy( c_skip31, strsep(&c_temp_data,"|"));
		strcpy( c_skip32, strsep(&c_temp_data,"|"));
		strcpy( c_settlmnt_indicator, strsep(&c_temp_data,"|"));
		strcpy( c_skip33, strsep(&c_temp_data,"|"));
		strcpy( c_skip34, strsep(&c_temp_data,"|"));
		strcpy( c_skip35, strsep(&c_temp_data,"|"));
		strcpy( c_skip36, strsep(&c_temp_data,"|"));
		strncpy( c_del_flg, strsep(&c_temp_data,"|"),1);


    rtrim( c_del_flg );

    if(DEBUG_MSG_LVL_4)
    { 
		fn_userlog( c_ServiceName,"1 :%s: ", c_token_id );
		fn_userlog( c_ServiceName,"2 :%s: ", c_assetToken);
		fn_userlog( c_ServiceName,"3 :%s: ", c_instrument_name);
		fn_userlog( c_ServiceName,"4 :%s: ", st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_symbol);
		fn_userlog( c_ServiceName,"5 :%s: ", st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_series);
		fn_userlog( c_ServiceName,"6 :%s: ", c_skip2);
		fn_userlog( c_ServiceName,"7 :%s: ", c_exp_dt);
		fn_userlog( c_ServiceName,"8 :%s: ", c_strike_prc);
		fn_userlog( c_ServiceName,"9 :%s: ", c_option_typ);
		fn_userlog( c_ServiceName,"10 :%s: ", c_normal_ext_mkttyp);
		fn_userlog( c_ServiceName,"11 :%s: ", c_ca_lvl);
		fn_userlog( c_ServiceName,"12 :%s: ", c_skip3);
		fn_userlog( c_ServiceName,"13 :%s: ", c_perm_trd);
		fn_userlog( c_ServiceName,"14 :%s: ", c_issue_rt);
		fn_userlog( c_ServiceName,"15 :%s: ", c_sec_stts);
		fn_userlog( c_ServiceName,"16 :%s: ", c_skip4);
		fn_userlog( c_ServiceName,"17 :%s: ", c_skip5);
		fn_userlog( c_ServiceName,"18 :%s: ", c_skip6);
		fn_userlog( c_ServiceName,"19 :%s: ", c_skip7);
		fn_userlog( c_ServiceName,"20 :%s: ", c_skip8);
		fn_userlog( c_ServiceName,"21 :%s: ", c_skip9);
		fn_userlog( c_ServiceName,"22 :%s: ", c_skip10);
		fn_userlog( c_ServiceName,"23 :%s: ", c_skip11);
		fn_userlog( c_ServiceName,"24 :%s: ", c_skip12);
		fn_userlog( c_ServiceName,"25 :%s: ", c_skip13);
		fn_userlog( c_ServiceName,"26 :%s: ", c_skip14);
		fn_userlog( c_ServiceName,"27 :%s: ", c_iss_strt_dt);
		fn_userlog( c_ServiceName,"28 :%s: ", c_intrst_paymnt_dt);
		fn_userlog( c_ServiceName,"29 :%s: ", c_iss_maturity_dt);
		fn_userlog( c_ServiceName,"30 :%s: ", c_skip15);
		fn_userlog( c_ServiceName,"31 :%s: ", c_min_lot_qty);
		fn_userlog( c_ServiceName,"32 :%s: ", c_brd_lot_qty);
		fn_userlog( c_ServiceName,"33 :%s: ", c_tck_sz);
		fn_userlog( c_ServiceName,"34 :%s: ", c_skip16);
		fn_userlog( c_ServiceName,"35 :%s: ", c_skip17);
		fn_userlog( c_ServiceName,"36 :%s: ", c_skip18);
		fn_userlog( c_ServiceName,"37 :%s: ", c_listing_dt);
		fn_userlog( c_ServiceName,"38 :%s: ", c_expulsion_dt);
		fn_userlog( c_ServiceName,"39 :%s: ", c_readmsn_dt);
		fn_userlog( c_ServiceName,"40 :%s: ", c_rec_dt);
		fn_userlog( c_ServiceName,"41 :%s: ", c_nd_strt_dt);
		fn_userlog( c_ServiceName,"42 :%s: ", c_nd_end_dt);
		fn_userlog( c_ServiceName,"43 :%s: ", c_low_prc_rng);
		fn_userlog( c_ServiceName,"44 :%s: ", c_high_prc_rng);
		fn_userlog( c_ServiceName,"45 :%s: ", c_skip19);
		fn_userlog( c_ServiceName,"46 :%s: ", c_bkcls_strt_dt);
		fn_userlog( c_ServiceName,"47 :%s: ", c_bkcls_end_dt);
		fn_userlog( c_ServiceName,"48 :%s: ", c_local_upd_tm);
		fn_userlog( c_ServiceName,"49 :%s: ", c_exer_strt_dt);
		fn_userlog( c_ServiceName,"50 :%s: ", c_exer_end_dt);
		fn_userlog( c_ServiceName,"51 :%s: ", c_skip20);
		fn_userlog( c_ServiceName,"52 :%s: ", c_skip21);
		fn_userlog( c_ServiceName,"53 :%s: ", c_skip22);
		fn_userlog( c_ServiceName,"54 :%s: ", c_skip23);
		fn_userlog( c_ServiceName,"55 :%s: ", c_skip24);
		fn_userlog( c_ServiceName,"56 :%s: ", c_skip25);
		fn_userlog( c_ServiceName,"57 :%s: ", c_skip26);
		fn_userlog( c_ServiceName,"58 :%s: ", c_skip27);
		fn_userlog( c_ServiceName,"59 :%s: ", c_skip28);
		fn_userlog( c_ServiceName,"60 :%s: ", c_skip29);
		fn_userlog( c_ServiceName,"61 :%s: ", c_skip30);
		fn_userlog( c_ServiceName,"62 :%s: ", c_skip31);
		fn_userlog( c_ServiceName,"63 :%s: ", c_skip32);
		fn_userlog( c_ServiceName,"64 :%s: ", c_settlmnt_indicator);
		fn_userlog( c_ServiceName,"65 :%s: ", c_skip33);
		fn_userlog( c_ServiceName,"66 :%s: ", c_skip34);
		fn_userlog( c_ServiceName,"67 :%s: ", c_skip35);
		fn_userlog( c_ServiceName,"68 :%s: ", c_skip36);
		fn_userlog( c_ServiceName,"69 :%s: ", c_del_flg);
    } 

    st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.l_token_id =  atol(  c_token_id );
    li_exp_dt = atol(c_exp_dt);
    st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.l_strike_prc = atol( c_strike_prc );
    st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.l_ca_lvl = atol( c_ca_lvl );
    st_cntrct_info.li_perm_trd = atol(c_perm_trd );
    st_cntrct_info.li_issue_rt = atol(c_issue_rt);
    li_sec_stts =atol(c_sec_stts);
    li_iss_strt_dt = atol(c_iss_strt_dt);
    li_intrst_paymnt_dt=atol(c_intrst_paymnt_dt);
    li_iss_maturity_dt=atol(c_iss_maturity_dt);
    st_cntrct_info.li_min_lot_qty=atol(c_min_lot_qty);
    st_cntrct_info.li_brd_lot_qty=atol(c_brd_lot_qty);
    st_cntrct_info.li_tck_sz=atol(c_tck_sz);
    li_listing_dt=atol(c_listing_dt);
    li_expulsion_dt=atol(c_expulsion_dt);
    li_readmsn_dt=atol(c_readmsn_dt);
    li_rec_dt=atol(c_rec_dt);
    li_nd_strt_dt=atol(c_nd_strt_dt);
    li_nd_end_dt=atol(c_nd_end_dt);
    st_cntrct_info.li_low_prc_rng=atol(c_low_prc_rng);
    st_cntrct_info.li_high_prc_rng=atol(c_high_prc_rng);
    li_bkcls_strt_dt=atol(c_bkcls_strt_dt);
    li_bkcls_end_dt= atol(c_bkcls_end_dt);
    li_local_upd_tm=atol(c_local_upd_tm);
    li_exer_strt_dt=atol(c_exer_strt_dt);
    li_exer_end_dt=atol(c_exer_end_dt);

    st_cntrct_info.c_normal_ext_mkttyp = c_normal_ext_mkttyp[0];
    c_delete_flg = c_del_flg[0];   

		/* sscanf(c_o_data, "%ld %*s %s %s %s %*s %ld %ld %s %*s %ld %*s %ld %ld %ld \  commented in Ver 1.2 */
/** commented in ver 2.5 sscanf(c_o_data, "%ld %*s %s %s %s %*s %ld %ld %s %c %ld %*s %ld %ld %ld \
											%*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %ld %ld %ld \
											%*s %ld %ld %ld %*s %*s %*s %ld %ld %ld %ld %ld %ld %ld \
											%ld %*s %ld %ld %ld %ld %ld %*s %*s %*s %*s %*s %*s %*s \
											%*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %c", 
											&st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.l_token_id,	
											c_instrument_name, 
											st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_symbol,
											st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_series,
											&li_exp_dt, 
											&st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.l_strike_prc,
											c_option_typ, 
                      &st_cntrct_info.c_normal_ext_mkttyp,                 * Added in Ver 1.2 *
											&st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.l_ca_lvl,
											&st_cntrct_info.li_perm_trd, &st_cntrct_info.li_issue_rt,
											&li_sec_stts, &li_iss_strt_dt, &li_intrst_paymnt_dt,
											&li_iss_maturity_dt, &st_cntrct_info.li_min_lot_qty,
											&st_cntrct_info.li_brd_lot_qty, &st_cntrct_info.li_tck_sz,
											&li_listing_dt, &li_expulsion_dt, &li_readmsn_dt,
											&li_rec_dt, &li_nd_strt_dt, &li_nd_end_dt,
											&st_cntrct_info.li_low_prc_rng,
											&st_cntrct_info.li_high_prc_rng, &li_bkcls_strt_dt,
										  &li_bkcls_end_dt, &li_local_upd_tm, &li_exer_strt_dt,
											&li_exer_end_dt,&c_delete_flg); ***/

    if(DEBUG_MSG_LVL_4)
    {
    fn_userlog( c_ServiceName,"st_cntrct_info.c_normal_ext_mkttyp :%c:",st_cntrct_info.c_normal_ext_mkttyp); 
    fn_userlog( c_ServiceName,"li_exer_end_dt is :%ld: ",li_exer_end_dt);
    fn_userlog( c_ServiceName,"c_del_flg is :%c:",c_delete_flg);


	fn_userlog(c_ServiceName,"%ld",st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.l_token_id );                      
	fn_userlog(c_ServiceName,"%ld",li_exp_dt );                                                                               
	fn_userlog(c_ServiceName,"%ld",st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.l_strike_prc  );                             
	fn_userlog(c_ServiceName,"%ld",st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.l_ca_lvl  );                                          
	fn_userlog(c_ServiceName,"%ld",st_cntrct_info.li_perm_trd  );                                                                    
	fn_userlog(c_ServiceName,"%ld",st_cntrct_info.li_issue_rt );                                                                          
	fn_userlog(c_ServiceName,"%ld",li_sec_stts );                                                                                                
	fn_userlog(c_ServiceName,"%ld",li_iss_strt_dt );                                                                                        
	fn_userlog(c_ServiceName,"%ld",li_intrst_paymnt_dt);                                                                      
	fn_userlog(c_ServiceName,"%ld",li_iss_maturity_dt);                                                                           
	fn_userlog(c_ServiceName,"%ld",st_cntrct_info.li_min_lot_qty);                                                                
	fn_userlog(c_ServiceName,"%ld",st_cntrct_info.li_brd_lot_qty);                                                                
	fn_userlog(c_ServiceName,"%ld",st_cntrct_info.li_tck_sz);                                                                                
	fn_userlog(c_ServiceName,"%ld",li_listing_dt);                                                                                              
	fn_userlog(c_ServiceName,"%ld",li_expulsion_dt);                                                                                   
	fn_userlog(c_ServiceName,"%ld",li_readmsn_dt);                                                                                     
	fn_userlog(c_ServiceName,"%ld",li_rec_dt);                                                                                                     
	fn_userlog(c_ServiceName,"%ld",li_nd_strt_dt);                                                                                          
	fn_userlog(c_ServiceName,"%ld",li_nd_end_dt);                                                                                        
	fn_userlog(c_ServiceName,"%ld",st_cntrct_info.li_low_prc_rng);                                                             
	fn_userlog(c_ServiceName,"%ld",st_cntrct_info.li_high_prc_rng);                                                            
	fn_userlog(c_ServiceName,"%ld",li_bkcls_strt_dt);                                                                                 
	fn_userlog(c_ServiceName,"%ld",li_bkcls_end_dt);                                                                               
	fn_userlog(c_ServiceName,"%ld",li_local_upd_tm);                                                                                
	fn_userlog(c_ServiceName,"%ld",li_exer_strt_dt);                                                                                    
	fn_userlog(c_ServiceName,"%ld",li_exer_end_dt);                      
    fn_userlog( c_ServiceName," The settlement indicator is :%s: ",c_settlmnt_indicator );
  }
	if (DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"edwin: c_far_expry_dt is %s",c_far_expry_dt);
		fn_userlog(c_ServiceName,"edwin: li_exp_dt is %ld",li_exp_dt);
	} 
 
    /** ver 2.5 ends **/ 	
		/*** Since exchange is sending the date format as no of seconds from ***/
		/*** 01-Jan-1980, we can calculate the no of seconds for current     ***/
		/*** running date and can ignore the expired data     							 ***/
		EXEC SQL
			SELECT ( ( to_date(:c_tmp_date2, 'yyyymmdd') -
							   to_date('01-Jan-1980 00:00:00', 'dd-Mon-yyyy hh24:mi:ss') )
								* 86400 ) ,
						(((to_date(:c_far_expry_dt) - to_date('01-Jan-1980 00:00:00', 'dd-Mon-yyyy hh24:mi:ss'))* 86400) - 
						:li_exp_dt)/86400   /* Ver 2.7 */		
			INTO :li_tm_diff,
				:i_diff_flg   /* Ver 2.7 */
			FROM dual;
		if ( SQLCODE != 0 )
		{
        fn_errlog(c_ServiceName, "S31075", SQLMSG, c_err_msg);
  		  fn_bat_pst_msg ( c_ServiceName, 
											"System error occured. Contact system support", c_tag );
		    fn_chk_process_status(c_ServiceName,c_err_msg );  /**ver 1.4**/
        return;
		}
		if ( li_exp_dt < li_tm_diff )
		{
			continue;
		}
		
/*******************
		fn_userlog(c_ServiceName, "%ld,%s,%s,%s,%ld,%ld,%s,%ld,%ld,%ld,%ld,%ld,%ld \
											%ld,%ld,%ld,%ld,%ld,%ld,%ld,%ld,%ld,%ld,%ld \
											%ld,%ld,%ld,%ld,%ld,%ld,%c",
											st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.l_token_id,	
											c_instrument_name, 
											st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_symbol,
											st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_series,
											li_exp_dt, 
											st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.l_strike_prc,
											c_option_typ, 
											st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.l_ca_lvl,
											st_cntrct_info.li_perm_trd, st_cntrct_info.li_issue_rt,
											li_sec_stts, li_iss_strt_dt, li_intrst_paymnt_dt,
											li_iss_maturity_dt, st_cntrct_info.li_min_lot_qty,
											st_cntrct_info.li_brd_lot_qty, st_cntrct_info.li_tck_sz,
											li_listing_dt, li_expulsion_dt, li_readmsn_dt,
											li_rec_dt, li_nd_strt_dt, li_nd_end_dt,
											st_cntrct_info.li_low_prc_rng,
											st_cntrct_info.li_high_prc_rng, li_bkcls_strt_dt,
										  li_bkcls_end_dt, li_local_upd_tm, li_exer_strt_dt,
											li_exer_end_dt, c_delete_flg);
*******************/

		strcpy(st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_xchng_cd, argv[2]);
		st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_prd_typ = c_instrument_name[0];
		fn_nsetoors_tm ( st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_expry_dt, 
											li_exp_dt);
	  st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_exrc_typ = c_option_typ[1];
		st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_opt_typ = c_option_typ[0];
		st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_ctgry_indstk = 
																										c_instrument_name[3];
	  if(li_sec_stts == SEC_SUSPENDED )
	  {
	    st_cntrct_info.i_cntrct_stts = 0;
	  }
	  else
	  {
	    st_cntrct_info.i_cntrct_stts = 1;
	  }
	
	  if ( c_delete_flg == 'N' )
	  {
	    st_cntrct_info.c_adc_flg = 'A';
	  }
	  else
	  {
	    st_cntrct_info.c_adc_flg = 'D';
	  }

	  fn_nsetoors_tm ( st_cntrct_info.c_issue_strt_dt, li_iss_strt_dt);
	  fn_nsetoors_tm ( st_cntrct_info.c_issue_int_pymt_dt, li_intrst_paymnt_dt);
	  fn_nsetoors_tm ( st_cntrct_info.c_issue_mat_dt, li_iss_maturity_dt);
	  fn_nsetoors_tm ( st_cntrct_info.c_list_dt, li_listing_dt);
	  fn_nsetoors_tm ( st_cntrct_info.c_exp_dt, li_expulsion_dt);
	  fn_nsetoors_tm ( st_cntrct_info.c_read_dt, li_readmsn_dt);
	  fn_nsetoors_tm ( st_cntrct_info.c_rec_dt, li_rec_dt);
	  fn_nsetoors_tm ( st_cntrct_info.c_nd_strt_dt, li_nd_strt_dt);
	  fn_nsetoors_tm ( st_cntrct_info.c_nd_end_dt, li_nd_end_dt);
	  fn_nsetoors_tm ( st_cntrct_info.c_bc_strt_dt, li_bkcls_strt_dt);
	  fn_nsetoors_tm ( st_cntrct_info.c_bc_end_dt, li_bkcls_end_dt);
	  fn_nsetoors_tm ( st_cntrct_info.c_ex_strt_dt, li_exer_strt_dt);
	  fn_nsetoors_tm ( st_cntrct_info.c_ex_end_dt, li_exer_end_dt);
	  fn_nsetoors_tm ( st_cntrct_info.c_tm, li_local_upd_tm );
	
		i_ch_val = fn_ors_cntct_info ( &st_cntrct_info,
                                    i_max_loop_count,         /***  Ver 1.8 ***/
                                    arr_st_cache,             /***  Ver 1.8 ***/ 
													          c_near_expry_dt,          /***  Ver 1.7 ***/
                                    c_mid_expry_dt,           /***  Ver 1.7 ***/
                                    c_far_expry_dt,           /***  Ver 1.7 ***/
                                    c_near_glbl_expry_dt,     /***  Ver 1.7 ***/
                                    c_mid_glbl_expry_dt,      /***  Ver 1.7 ***/
                                    c_far_glbl_expry_dt,      /***  Ver 1.7 ***/
                                    c_settlmnt_indicator,     /***  Ver 2.5 ***/
									i_diff_flg,               /* Ver 2.7 */
                        					 	c_ServiceName,
                        					 	c_err_msg );
    if ( i_ch_val == -1 )
    {
      fn_errlog(c_ServiceName, "S31080", LIBMSG, c_err_msg);
  		fn_bat_pst_msg ( c_ServiceName, 
											"System error occured. Contact system support", c_tag );
			fn_chk_process_status(c_ServiceName,c_err_msg );  /**ver 1.4**/
      return;
    }
    if ( i_ch_val == -2)   /*** Added in Ver 2.0 ***/
    {
      fn_userlog(c_ServiceName,"SEM MAPPING INCORRECT, PLEASE CONTACT OPS ");
    }

	}

  /*** Ver 2.0 Starts ***/

  if ( i_temp == 1 )
  {
    fn_chk_process_status(c_ServiceName,c_err_msg );
  } 
  
  /*** Ver 2.0 Ends ***/

	/***	Ver 2.1	Started	***/

	fn_userlog(c_ServiceName,"ISEC Duplicate Token No Processing Starts.");

	EXEC SQL
		SELECT COUNT(1)
		INTO :i_dplct_cnt
		FROM
		(	SELECT  A.FTQ_XCHNG_CD,
							A.FTQ_PRDCT_TYP,
							A.FTQ_INDSTK,
							A.FTQ_UNDRLYNG,
							A.FTQ_EXPRY_DT,
							A.FTQ_EXER_TYP,
							A.FTQ_OPT_TYP,
							A.FTQ_STRK_PRC,
							TRUNC(A.FTQ_TOKEN_UPD_DT),
							SYSDATE
			FROM    FTQ_FO_TRD_QT A,FTQ_FO_TRD_QT B
			WHERE   A.FTQ_XCHNG_CD ='NFO'
			AND     A.FTQ_XCHNG_CD = B.FTQ_XCHNG_CD
			AND     TRUNC(A.FTQ_TOKEN_UPD_DT) < TRUNC(B.FTQ_TOKEN_UPD_DT)
			AND     A.FTQ_TOKEN_NO = B.FTQ_TOKEN_NO
      AND     A.FTQ_TOKEN_NO != 0                  /*** Ver 2.4 ***/
	);

	if( SQLCODE != 0 )
	{
		fn_userlog(c_ServiceName,"ISEC Inside No Duplicate Token Records." );
		fn_errlog(c_ServiceName, "S31085", SQLMSG, c_err_msg);
    fn_bat_pst_msg ( c_ServiceName, "System error occured. Contact system support", c_tag );
    fn_chk_process_status(c_ServiceName,c_err_msg );
    return;
	}

	fn_userlog(c_ServiceName,"ISEC Total No Of Invalid Token No :%d:",i_dplct_cnt);

	if ( i_dplct_cnt > 0 )
	{

		i_trnsctn= fn_begintran( c_ServiceName, c_err_msg );	

		if(i_trnsctn	==	-1)
		{
			fn_errlog(c_ServiceName, "S31090", SQLMSG, c_err_msg);
			fn_bat_pst_msg ( c_ServiceName, "System error occured. Contact system support", c_tag );
			fn_chk_process_status(c_ServiceName,c_err_msg );
			return;
		}

		fn_userlog(c_ServiceName,"ISEC Before INSERT.");

		EXEC SQL 
			INSERT INTO FDT_FTQ_DPLCT_TKN
			(
				FDT_XCHNG_CD,
				FDT_PRDCT_TYP,
				FDT_INDSTK,
				FDT_UNDRLYNG,
				FDT_EXPRY_DT,
				FDT_EXER_TYP,
				FDT_OPT_TYP,
				FDT_STRK_PRC,
				FDT_CLS_PRC,
      	FDT_OPN_PRC,
      	FDT_HGH_PRC,
      	FDT_LOW_PRC,
      	FDT_PRVS_CLS_PRC,
      	FDT_CHNG_PRVS_CLS,
        FDT_INDCTR,                   /*** Ver 2.2 ***/
      	FDT_HGH_PRC_RNG,
      	FDT_LOW_PRC_RNG,
      	FDT_TOT_QTY_TRDD,
      	FDT_TOT_VAL_TRDD,
      	FDT_LST_TRD_PRC,
      	FDT_LST_TRD_TM,
      	FDT_LST_TRD_QTY,
        FDT_AVRG_TRD_PRC,            /*** Ver 2.2 ***/
      	FDT_BST1_BID_PRC,
      	FDT_BST1_BID_QTY,
        FDT_BST2_BID_PRC,             /*** Ver 2.2 ***/
				FDT_BST2_BID_QTY,             /*** Ver 2.2 ***/
				FDT_BST3_BID_PRC,             /*** Ver 2.2 ***/
				FDT_BST3_BID_QTY,             /*** Ver 2.2 ***/
				FDT_BST4_BID_PRC,             /*** Ver 2.2 ***/
				FDT_BST4_BID_QTY,							/*** Ver 2.2 ***/
				FDT_BST5_BID_PRC,							/*** Ver 2.2 ***/
        FDT_BST5_BID_QTY,             /*** Ver 2.2 ***/
      	FDT_BST1_OFFR_PRC,				
      	FDT_BST1_OFFR_QTY,       
      	FDT_BST2_OFFR_PRC,            /*** Ver 2.2 ***/
				FDT_BST2_OFFR_QTY,            /*** Ver 2.2 ***/
				FDT_BST3_OFFR_PRC,            /*** Ver 2.2 ***/
				FDT_BST3_OFFR_QTY,            /*** Ver 2.2 ***/
				FDT_BST4_OFFR_PRC,            /*** Ver 2.2 ***/
				FDT_BST4_OFFR_QTY,            /*** Ver 2.2 ***/
				FDT_BST5_OFFR_PRC,            /*** Ver 2.2 ***/
				FDT_BST5_OFFR_QTY,            /*** Ver 2.2 ***/
      	FDT_TOT_BID_QTY,          
      	FDT_TOT_OFFR_QTY,
        FDT_PRMTD_TO_TRD,             /*** Ver 2.2 ***/
				FDT_STTS,                     /*** Ver 2.2 ***/
      	FDT_MIN_LOT_QTY,
        FDT_BOARD_LOT_QTY,            /*** Ver 2.2 ***/
      	FDT_TCK_SZ,
        FDT_RCRD_DT,                  /*** Ver 2.2 ***/
				FDT_ND_STRT_DT,               /*** Ver 2.2 ***/
				FDT_ND_END_DT,                /*** Ver 2.2 ***/
				FDT_BK_CLS_STRT_DT,           /*** Ver 2.2 ***/
				FDT_BK_CLS_END_DT,            /*** Ver 2.2 ***/
				FDT_SETL_SETLMNT_NO,          /*** Ver 2.2 ***/
				FDT_CRNT_OI,                  /*** Ver 2.2 ***/
				FDT_CHNG_OI,                  /*** Ver 2.2 ***/
				FDT_OI_INDCTR,                /*** Ver 2.2 ***/
				FDT_OI_HIGH,                  /*** Ver 2.2 ***/
				FDT_OI_LOW,                   /*** Ver 2.2 ***/
				FDT_BASE_PRC,                 /*** Ver 2.2 ***/
				FDT_BASE_PRC_UPD_DT,          /*** Ver 2.2 ***/ 
				FDT_CLS_OI,                   /*** Ver 2.2 ***/
				FDT_CLS_IV,                   /*** Ver 2.2 ***/
				FDT_CLS_TRD_QTY,              /*** Ver 2.2 ***/
				FDT_ROLL_OVER,                /*** Ver 2.2 ***/
				FDT_RLVR_PER,                 /*** Ver 2.2 ***/
				FDT_RLVR_OPN_CNTRCTS,         /*** Ver 2.2 ***/
				FDT_ATS_CLS_PRC,              /*** Ver 2.2 ***/
				FDT_HGH_TRD_EXEC_RNG,         /*** Ver 2.2 ***/
				FDT_LOW_TRD_EXEC_RNG,         /*** Ver 2.2 ***/
				FDT_MULTPLR,                  /*** Ver 2.2 ***/
				FDT_ACT_STTS,                 /*** Ver 2.2 ***/
      	FDT_TOKEN_NO,
      	FDT_QT_TRDNG_FLG,
        FDT_CA_LVL,                   /*** Ver 2.2 ***/
        FDT_CLS_PRC_DT,               /*** Ver 2.2 ***/
      	FDT_CNTRCT_TAG,
        FDT_MRKT_TYP,
      	FDT_FP_CNTRCT_TAG,
      	FDT_FP_QT_TRDNG_FLG,
      	FDT_DS_QT_TRDNG_FLG,
      	FDT_SLTP_FP_QT_TRDNG_FLG,
        FDT_ROLLOVER_FLAG,            /*** Ver 2.2 ***/
				FDT_NRML_SERIES_CD,           /*** Ver 2.2 ***/
				FDT_SPRD_SERIES_CD,           /*** Ver 2.2 ***/
				FDT_SPRD_TOKEN_NO,            /*** Ver 2.2 ***/
				FDT_EBA_CNTRCT_ID,            /*** Ver 2.2 ***/
				FDT_TOKEN_UPD_DT, 
        FDT_TRAIL_FLG,                /*** Ver 2.2 ***/
        FTQ_SETLMNT_FLG,              /*** Ver 2.5 ***/
        FTQ_DLVRY_POS_ALLWD,          /*** Ver 2.5 ***/ 
	      FTQ_BUY_ALLWD,		            /*** Ver 2.6 ***/ 	
        FTQ_SELL_ALLWD,               /*** Ver 2.6 ***/
        FDT_INSERT_DT
			)
			(
				SELECT	A.FTQ_XCHNG_CD,
								A.FTQ_PRDCT_TYP,
								A.FTQ_INDSTK,
								A.FTQ_UNDRLYNG,
								A.FTQ_EXPRY_DT,
								A.FTQ_EXER_TYP,
								A.FTQ_OPT_TYP,
								A.FTQ_STRK_PRC,
								A.FTQ_CLS_PRC,
								A.FTQ_OPN_PRC,
								A.FTQ_HGH_PRC,
								A.FTQ_LOW_PRC,
								A.FTQ_PRVS_CLS_PRC,
								A.FTQ_CHNG_PRVS_CLS,
                A.FTQ_INDCTR,              /*** Ver 2.2 ***/
								A.FTQ_HGH_PRC_RNG,
								A.FTQ_LOW_PRC_RNG,
								A.FTQ_TOT_QTY_TRDD,
								A.FTQ_TOT_VAL_TRDD,
								A.FTQ_LST_TRD_PRC,
								A.FTQ_LST_TRD_TM,
								A.FTQ_LST_TRD_QTY,
                A.FTQ_AVRG_TRD_PRC,         /*** Ver 2.2 ***/ 
								A.FTQ_BST1_BID_PRC,
								A.FTQ_BST1_BID_QTY,
                A.FTQ_BST2_BID_PRC,         /*** Ver 2.2 ***/ 
								A.FTQ_BST2_BID_QTY,         /*** Ver 2.2 ***/
								A.FTQ_BST3_BID_PRC,         /*** Ver 2.2 ***/
								A.FTQ_BST3_BID_QTY,         /*** Ver 2.2 ***/
								A.FTQ_BST4_BID_PRC,         /*** Ver 2.2 ***/
								A.FTQ_BST4_BID_QTY,         /*** Ver 2.2 ***/
								A.FTQ_BST5_BID_PRC,         /*** Ver 2.2 ***/
                A.FTQ_BST5_BID_QTY,         /*** Ver 2.2 ***/
                A.FTQ_BST1_OFFR_PRC,     
								A.FTQ_BST1_OFFR_QTY,     
								A.FTQ_BST2_OFFR_PRC,        /*** Ver 2.2 ***/ 
                A.FTQ_BST2_OFFR_QTY,        /*** Ver 2.2 ***/
								A.FTQ_BST3_OFFR_PRC,        /*** Ver 2.2 ***/
								A.FTQ_BST3_OFFR_QTY,        /*** Ver 2.2 ***/
								A.FTQ_BST4_OFFR_PRC,        /*** Ver 2.2 ***/
								A.FTQ_BST4_OFFR_QTY,        /*** Ver 2.2 ***/
								A.FTQ_BST5_OFFR_PRC,        /*** Ver 2.2 ***/
								A.FTQ_BST5_OFFR_QTY,        /*** Ver 2.2 ***/
								A.FTQ_TOT_BID_QTY,
								A.FTQ_TOT_OFFR_QTY,
                A.FTQ_PRMTD_TO_TRD,         /*** Ver 2.2 ***/
                A.FTQ_STTS,                 /*** Ver 2.2 ***/
								A.FTQ_MIN_LOT_QTY,
                A.FTQ_BOARD_LOT_QTY,        /*** Ver 2.2 ***/
								A.FTQ_TCK_SZ,
                A.FTQ_RCRD_DT,              /*** Ver 2.2 ***/
 					      A.FTQ_ND_STRT_DT,           /*** Ver 2.2 ***/
								A.FTQ_ND_END_DT,            /*** Ver 2.2 ***/
								A.FTQ_BK_CLS_STRT_DT,       /*** Ver 2.2 ***/
								A.FTQ_BK_CLS_END_DT,        /*** Ver 2.2 ***/
								A.FTQ_SETL_SETLMNT_NO,      /*** Ver 2.2 ***/ 
								A.FTQ_CRNT_OI,              /*** Ver 2.2 ***/
								A.FTQ_CHNG_OI,              /*** Ver 2.2 ***/
								A.FTQ_OI_INDCTR,            /*** Ver 2.2 ***/
								A.FTQ_OI_HIGH,              /*** Ver 2.2 ***/
								A.FTQ_OI_LOW,               /*** Ver 2.2 ***/
								A.FTQ_BASE_PRC,             /*** Ver 2.2 ***/
								A.FTQ_BASE_PRC_UPD_DT,      /*** Ver 2.2 ***/ 
								A.FTQ_CLS_OI,               /*** Ver 2.2 ***/
								A.FTQ_CLS_IV,               /*** Ver 2.2 ***/
								A.FTQ_CLS_TRD_QTY,          /*** Ver 2.2 ***/
								A.FTQ_ROLL_OVER,            /*** Ver 2.2 ***/ 
								A.FTQ_RLVR_PER,             /*** Ver 2.2 ***/
								A.FTQ_RLVR_OPN_CNTRCTS,     /*** Ver 2.2 ***/  
								A.FTQ_ATS_CLS_PRC,          /*** Ver 2.2 ***/ 
								A.FTQ_HGH_TRD_EXEC_RNG,     /*** Ver 2.2 ***/
								A.FTQ_LOW_TRD_EXEC_RNG,     /*** Ver 2.2 ***/
				        A.FTQ_MULTPLR,              /*** Ver 2.2 ***/
                A.FTQ_ACT_STTS,             /*** Ver 2.2 ***/
        				A.FTQ_TOKEN_NO,            
								A.FTQ_QT_TRDNG_FLG,
                A.FTQ_CA_LVL,               /*** Ver 2.2 ***/
                A.FTQ_CLS_PRC_DT,           /*** Ver 2.2 ***/
								A.FTQ_CNTRCT_TAG,
                A.FTQ_MRKT_TYP,
								A.FTQ_FP_CNTRCT_TAG,
								A.FTQ_FP_QT_TRDNG_FLG,
								A.FTQ_DS_QT_TRDNG_FLG,
								A.FTQ_SLTP_FP_QT_TRDNG_FLG,
                A.FTQ_ROLLOVER_FLAG,         /*** Ver 2.2 ***/
                A.FTQ_NRML_SERIES_CD,        /*** Ver 2.2 ***/
                A.FTQ_SPRD_SERIES_CD,        /*** Ver 2.2 ***/
                A.FTQ_SPRD_TOKEN_NO,         /*** Ver 2.2 ***/
                A.FTQ_EBA_CNTRCT_ID,         /*** Ver 2.2 ***/
                TRUNC(A.FTQ_TOKEN_UPD_DT),
                A.FTQ_TRAIL_FLG,             /*** Ver 2.2 ***/
                A.FTQ_SETLMNT_FLG,              /*** Ver 2.5 ***/
                A.FTQ_DLVRY_POS_ALLWD,          /*** Ver 2.5 ***/
	              A.FTQ_BUY_ALLWD,			          /*** Ver 2.6 ***/
                A.FTQ_SELL_ALLWD,               /*** Ver 2.6 ***/
        				SYSDATE
				FROM    FTQ_FO_TRD_QT A,FTQ_FO_TRD_QT B
      	WHERE   A.FTQ_XCHNG_CD ='NFO'
      	AND     A.FTQ_XCHNG_CD = B.FTQ_XCHNG_CD
      	AND     TRUNC(A.FTQ_TOKEN_UPD_DT) < TRUNC(B.FTQ_TOKEN_UPD_DT)
      	AND     (A.FTQ_TOKEN_NO = B.FTQ_TOKEN_NO)
        AND     A.FTQ_TOKEN_NO != 0                  /*** Ver 2.4 ***/
		);
  
		if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  	{
    	fn_errlog(c_ServiceName, "S31095", SQLMSG, c_err_msg);
    	fn_bat_pst_msg ( c_ServiceName, "System error occured. Contact system support", c_tag );
    	fn_chk_process_status(c_ServiceName,c_err_msg );
    	return;
  	}
	
		fn_userlog(c_ServiceName,"ISEC After INSERT");

		EXEC SQL
			UPDATE	FTQ_FO_TRD_QT 
			SET			FTQ_TOKEN_NO = 0 
			WHERE		ROWID IN
											(
												SELECT	A.ROWID
												FROM 		FTQ_FO_TRD_QT A,FTQ_FO_TRD_QT B
												WHERE 	A.FTQ_XCHNG_CD ='NFO'
												AND 		A.FTQ_XCHNG_CD = B.FTQ_XCHNG_CD
												AND 		A.FTQ_TOKEN_NO = B.FTQ_TOKEN_NO
												AND 		TRUNC(A.FTQ_TOKEN_UPD_DT) < TRUNC(B.FTQ_TOKEN_UPD_DT)
                        AND     A.FTQ_TOKEN_NO != 0                  /*** Ver 2.4 ***/ 
											);
		
		if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  	{
    	fn_errlog(c_ServiceName, "S31100", SQLMSG, c_err_msg);
    	fn_bat_pst_msg ( c_ServiceName, "System error occured. Contact system support", c_tag );
    	fn_chk_process_status(c_ServiceName,c_err_msg );
    	return;
  	}

		fn_userlog(c_ServiceName,"ISEC After UPDATE");

		if (fn_committran( c_ServiceName, i_trnsctn,c_err_msg ) == -1)
		{
			fn_errlog(c_ServiceName, "S31105", SQLMSG, c_err_msg);
			fn_bat_pst_msg ( c_ServiceName, "System error occured. Contact system support", c_tag );
			fn_chk_process_status(c_ServiceName,c_err_msg );
			return;
		}

		fn_userlog(c_ServiceName,"ISEC Duplicate Token No Processing Ends.");

	}

	/***	Ver 2.1	Ends  ***/

  /*** Ver 2.3 Starts ***/
  
  sprintf(c_ts_command,"ls -tlr %s | cut -c 46-57",c_file_name);

  fn_userlog(c_ServiceName,"c_ts_command :%s:",c_ts_command);
 
  pf = popen(c_ts_command,"r");
  if ( pf == NULL ) 
  {
    fn_errlog(c_ServiceName, "S31110", UNXMSG, c_err_msg);
    fn_bat_pst_msg ( c_ServiceName,
                    "System error occured. Contact system support", c_tag );
  }

  fgets(c_ts,20,pf); 
  if ( c_ts == NULL)
    {
      fn_errlog(c_ServiceName, "S31115", UNXMSG, c_err_msg);
      fn_bat_pst_msg ( c_ServiceName,
                      "System error occured. Contact system support", c_tag );
    } 
 
  fn_userlog(c_ServiceName,"c_ts :%s:",c_ts);

   EXEC SQL 
   SELECT MAX(FBC_TRD_DT) - (decode(instr(:c_ts,':'),0, TO_DATE(TO_DATE(:c_ts,'Mon DD YYYY'), 'DD-Mon-YYYY'), TO_DATE(TO_DATE(:c_ts, 'Mon DD hh24:mi'),'DD-Mon-YYYY')))
    INTO :i_date_diff
    FROM FBC_FO_BRNCH_CAL, EXG_XCHNG_MSTR
   WHERE FBC_XCHNG_CD = EXG_XCHNG_CD
     AND FBC_TRD_DT < EXG_NXT_TRD_DT
     AND FBC_TRD_DT > sysdate - 30;

   if (SQLCODE != 0)
    {
      fn_errlog(c_ServiceName, "S31120", SQLMSG, c_err_msg);
      fn_bat_pst_msg ( c_ServiceName, "System error occured. Contact system support", c_tag );
    }

  fn_userlog(c_ServiceName," i_date_diff :%d:",i_date_diff);
 
  pclose(pf);

  if ( i_date_diff > 0 )
  {
   MEMSET(c_cmd);
   sprintf(c_cmd,"ksh $HOME/sh_scripts/fo_chk_cntrct_file_mail.sh");
   system(c_cmd);
   fn_userlog(c_ServiceName, " %s - Process run with old contract file. Please Verify..!",argv[0]);
  } /*** Ver 2.3 Ends ***/ 
  else /*** userlog taken inside else part in Ver 2.3 ***/
  {
	 fn_userlog(c_ServiceName, " %s - Process completed", argv[0]);
	} 

  fclose(ptr_cntrct_file);
	return;
}

int fn_bat_init ( int argc, char *argv[] )
{
	if (argc != 6)   /** change from 6 to 5 ver 1.3 ***/
	{
     /*** commneted in Ver 1.3 ***
		fn_userlog("bat_cnt_part",
    "Usage - %s <configuration file> <Exchange code> <pipe_id> \
    <Date(yyyymmdd)> <fileName>",argv[0]);
  	*********/

		fn_userlog("bat_cnt_part", "Usage - %s <configuration file> <Exchange code> <pipe_id> <Date(yyyymmdd)> <fileName>",argv[0]); /* Ver 1.3**/
  	fn_bat_pst_msg ( "bat_cnt_part", "Invalid number of arguments", c_tag );

		fn_chk_process_status("bat_cnt_part","Invalid number of arguments" );  /**ver 1.4**/
		
		return -1;
	}

	bat_tm_init();
 	fn_var = BAT_CNT_UPLD;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
	char c_msg[256];

  sprintf ( c_msg, "Batch process %s ended", argv[0] );
  fn_bat_pst_msg (  argv[0], c_msg, c_tag );
  return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}

/******************************************************************************/
/*  To update contract informations which have got from exchange.             */
/*  INPUT PARAMETERS                                                          */
/*      st_cntrct_info_msg  - contract information message                    */
/*      c_err_msg           - Error message to be returned in case of error   */
/*  OUTPUT PARAMETERS                                                         */
/*      void                                                                  */
/******************************************************************************/
int fn_ors_cntct_info ( msg_cntrct_info *st_cntrct_info_msg,
                        int i_max_loop_count,         			/***  Ver 1.8 ***/
                        struct st_cache arr_st_cache[],     /***  Ver 1.8 ***/
                        char *c_near_expry_dt,          		/***  Ver 1.7 ***/
                        char *c_mid_expry_dt,           		/***  Ver 1.7 ***/
                        char *c_far_expry_dt,           		/***  Ver 1.7 ***/
                        char *c_near_glbl_expry_dt,     		/***  Ver 1.7 ***/
                        char *c_mid_glbl_expry_dt,      		/***  Ver 1.7 ***/
                        char *c_far_glbl_expry_dt,      		/***  Ver 1.7 ***/
                        char *c_settlmnt_indicator,          /***  Ver 2.5 ***/
						int i_diff_flg,                      /* Ver 2.7 */
                        char *c_ServiceName,
                        char *c_err_msg )
{
  struct vw_contract st_cntrct_dtls;
  struct vw_cntrt_gen_inf st_gen_info;

  nfo_cntrct st_nse_cntrct;

  int i_ch_val;
  int i_cntr = 0;           /***  Ver 1.7 ***/
  int i_rem_cnt = 0;				/***  Ver 1.7 ***/
  int i = 0;								/***  Ver 1.8 ***/

  char c_nexp_dt[9];        /***  Ver 1.7 ***/
  char c_mexp_dt[9];        /***  Ver 1.7 ***/
  char c_fexp_dt[9];        /***  Ver 1.7 ***/
  char c_wkly_exp_dt[9];    /***  Ver 1.7 ***/
  char c_sys_dt[12];        /***  Ver 1.7 ***/
  
  /* convert exchange contract details to EBA format  */
  if ( strcmp ( st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.c_xchng_cd,
                "NFO"                                                   ) == 0 )
  {
    st_nse_cntrct = st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt;
	
		/*** Commented in Ver 1.6 ***

    i_ch_val = fn_nse_to_eba_cntrct ( st_nse_cntrct,
                                      &st_cntrct_dtls,
                                      c_ServiceName,
                                      c_err_msg );
    if ( i_ch_val == SYSTEM_ERROR )
    {
      fn_errlog(c_ServiceName, "S31125", LIBMSG, c_err_msg);
      return -1;
    }
    else if ( i_ch_val != 0 )
    {
      return 0;
    }

		*** Ver 1.6 Comment Ends ***/
		
		/*** Ver 1.6 Starts ***/

		EXEC SQL
      SELECT sem_stck_cd
      INTO   :st_gen_info.c_undrlyng
      FROM   SEM_STCK_MAP
      WHERE  sem_entty= 3 
      AND    sem_map_vl=:st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.c_symbol;

		if ( SQLCODE != 0 )
    {
			  if(SQLCODE == NO_DATA_FOUND)
				{
          fn_errlog(c_ServiceName, "S31130", SQLMSG, c_err_msg);
        	fn_bat_pst_msg ( c_ServiceName,
                      "System error occured. Contact system support", c_tag );
          /*** Commented in Ver 2.0 to avoid sending of mail for every failed record and handling added in calling code  ***
        	  fn_chk_process_status(c_ServiceName,c_err_msg );
          ***/
          i_temp = 1; /*** Ver 2.0 ***/  
      
          fn_userlog(c_ServiceName,"Entry not found in SEM for symbol :%s:",
                     st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.c_symbol);  /*** Added in Ver 2.0 ***/ 
        	return -2;  /*** Ver 2.0 returned -2 instead of -1 ***/
				}
    }
		rtrim(st_gen_info.c_undrlyng);

	if(DEBUG_MSG_LVL_3)
	{		
	  fn_userlog(c_ServiceName,"Data from contract File.");
	  fn_userlog(c_ServiceName,"c_xchng_cd		:%s:",st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.c_xchng_cd);
	  fn_userlog(c_ServiceName,"c_prd_typ			:%c:",st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.c_prd_typ);
	  fn_userlog(c_ServiceName,"c_symbol			:%s:",st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.c_symbol);
	  fn_userlog(c_ServiceName,"c_expry_dt		:%s:",st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.c_expry_dt);
	  fn_userlog(c_ServiceName,"c_exrc_typ		:%c:",st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.c_exrc_typ);
	  fn_userlog(c_ServiceName,"c_opt_typ			:%c:",st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.c_opt_typ);
	  fn_userlog(c_ServiceName,"l_strike_prc	:%ld:",st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.l_strike_prc);
	  fn_userlog(c_ServiceName,"ctgry_indstk	:%c:",st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.c_ctgry_indstk);
	  fn_userlog(c_ServiceName,"l_ca_lvl			:%ld:",st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.l_ca_lvl);
	}

		/*** Ver 1.6 Ends ***/

  }
  else if ( strcmp ( st_cntrct_info_msg->st_cntrt_dtls.st_bfo_cnt.c_xchng_cd,
                     "BFO"  ) == 0 )
  {
    /*  BSE code to be added here   */
    fn_errlog ( c_ServiceName, "S31135",
                "BSE code not handled", c_err_msg );
    return 0;
  }

  /*  populate general contract information view  */
  st_gen_info.l_eba_cntrct_id = st_nse_cntrct.l_token_id;

	/*** Commented in Ver 1.6 ***

  strcpy( st_gen_info.c_xchng_cd, st_cntrct_dtls.c_xchng_cd);
  st_gen_info.c_prd_typ = st_cntrct_dtls.c_prd_typ;
  strcpy( st_gen_info.c_undrlyng, st_cntrct_dtls.c_undrlyng);
  strcpy( st_gen_info.c_expry_dt , st_cntrct_dtls.c_expry_dt);
  st_gen_info.c_exrc_typ = st_cntrct_dtls.c_exrc_typ;
  st_gen_info.c_opt_typ = st_cntrct_dtls.c_opt_typ;
  st_gen_info.l_strike_prc = st_cntrct_dtls.l_strike_prc;
  st_gen_info.c_ctgry_indstk = st_cntrct_dtls.c_ctgry_indstk;
  st_gen_info.l_ca_lvl = st_cntrct_dtls.l_ca_lvl;

	*** Ver 1.6 Comment Ends  ***/

	/*** Ver 1.6 Starts ***/

		if( st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.c_prd_typ == 'F' )
		{
        if( st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.c_exrc_typ == 'X')
        {
          st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.c_exrc_typ = 'E';
        }
        if( st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.c_opt_typ == 'X')
        {
          st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.c_opt_typ = '*';
        }
        if (st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.l_strike_prc == -1)
        {
          st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.l_strike_prc = 0;
				}
		}

	strcpy( st_gen_info.c_xchng_cd, st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.c_xchng_cd);
  st_gen_info.c_prd_typ = st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.c_prd_typ;
 
  st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.c_expry_dt[11] = '\0';
  strcpy( st_gen_info.c_expry_dt ,  st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.c_expry_dt);

  st_gen_info.c_exrc_typ = st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.c_exrc_typ;
  st_gen_info.c_opt_typ = st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.c_opt_typ;
  st_gen_info.l_strike_prc = st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.l_strike_prc;
  st_gen_info.c_ctgry_indstk = st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.c_ctgry_indstk;
  st_gen_info.l_ca_lvl = st_cntrct_info_msg->st_cntrt_dtls.st_nfo_cnt.l_ca_lvl;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName, "Data After Conversion.");
		fn_userlog(c_ServiceName, "after st_gen_info.c_xchng_cd			:%s:",st_gen_info.c_xchng_cd);
    fn_userlog(c_ServiceName, "after st_gen_info.c_prd_typ			:%c:",st_gen_info.c_prd_typ);
    fn_userlog(c_ServiceName, "after st_gen_info.c_expry_dt			:%s:",st_gen_info.c_expry_dt);
    fn_userlog(c_ServiceName, "after st_gen_info.c_exrc_typ			:%c:",st_gen_info.c_exrc_typ);
    fn_userlog(c_ServiceName, "after st_gen_info.c_opt_typ			:%c:",st_gen_info.c_opt_typ);
    fn_userlog(c_ServiceName, "after st_gen_info.l_strike_prc		:%ld:",st_gen_info.l_strike_prc);
    fn_userlog(c_ServiceName, "after st_gen_info.c_ctgry_indstk	:%c:",st_gen_info.c_ctgry_indstk);
    fn_userlog(c_ServiceName, "after st_gen_info.l_ca_lvl				:%ld:",st_gen_info.l_ca_lvl);
    fn_userlog(c_ServiceName, "after st_gen_info.c_undrlyng			:%s:",st_gen_info.c_undrlyng);
	}

	/*** ver 1.6 Ends ***/

	/***  Ver 1.7 Starts  ***/

  if( (strcmp(st_gen_info.c_expry_dt,c_near_expry_dt) != 0 ) &&
      (strcmp(st_gen_info.c_expry_dt,c_mid_expry_dt) != 0 ) &&
      (strcmp(st_gen_info.c_expry_dt,c_far_expry_dt) != 0 )
    )
  {
    if ((strcmp(st_gen_info.c_undrlyng,"SNP500") == 0 ) ||
        (strcmp(st_gen_info.c_undrlyng,"FTSE")   == 0 ) ||
        (strcmp(st_gen_info.c_undrlyng,"DJIA")   == 0 )
      )
    {
      if (strcmp(st_gen_info.c_expry_dt,c_near_glbl_expry_dt)== 0 )
      {
				if(DEBUG_MSG_LVL_2)
				{
        	fn_userlog(c_ServiceName,"Inside Global Near Month.");
        }
				st_gen_info.l_ca_lvl = 21;
      }
      else if (strcmp(st_gen_info.c_expry_dt,c_mid_glbl_expry_dt) == 0 )
      {
				if(DEBUG_MSG_LVL_2)
				{	
        	fn_userlog(c_ServiceName,"Inside Global Mid Month.");
				}	
        st_gen_info.l_ca_lvl = 22;
      }
      else if (strcmp(st_gen_info.c_expry_dt,c_far_glbl_expry_dt) == 0)
      {
				if(DEBUG_MSG_LVL_2)
				{
        	fn_userlog(c_ServiceName,"Inside Global Far Month.");
        }
				st_gen_info.l_ca_lvl = 23;
      }
    }
    else if ( strcmp(st_gen_info.c_undrlyng,"INDVIX") != 0 )
    {
      if(DEBUG_MSG_LVL_2)
			{
				fn_userlog(c_ServiceName,"Inside Weekly Contract.");
			}
		
		/****** Ver 1.8 Commenting Start *******
      EXEC SQL
        SELECT  to_char(to_date(:st_gen_info.c_expry_dt,'DD-Mon-YYYY'),'YYYYMMDD' ),
                to_char(to_date(:c_near_expry_dt,'DD-Mon-YYYY'),'YYYYMMDD' ),
                to_char(to_date(:c_mid_expry_dt,'DD-Mon-YYYY'),'YYYYMMDD' ),
                NVL(to_char(to_date(:c_far_expry_dt,'DD-Mon-YYYY'),'YYYYMMDD' ),'*'),
                to_char(sysdate,'DD-Mon-YYYY')
        INTO    :c_wkly_exp_dt,
                :c_nexp_dt,
                :c_mexp_dt,
                :c_fexp_dt,
                :c_sys_dt
        FROM    dual;

      if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName, "S31140", SQLMSG, c_err_msg);
        fn_bat_pst_msg ( c_ServiceName,"System error occured. Contact system support", c_tag );
        fn_chk_process_status(c_ServiceName,c_err_msg );
        return -1;
      }

      EXEC SQL
        SELECT ceil((to_date(:st_gen_info.c_expry_dt,'DD-Mon-YYYY') - to_date(:c_sys_dt,'DD-Mon-YYYY')) / 7)
        INTO   :i_cntr
        FROM DUAL;

      if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName, "S31145", SQLMSG, c_err_msg);
        fn_bat_pst_msg ( c_ServiceName,"System error occured. Contact system support", c_tag );
        fn_chk_process_status(c_ServiceName,c_err_msg );
        return -1;
      }

      fn_userlog(c_ServiceName,"Weekly Counter Is :%d:",i_cntr);

			EXEC SQL
        SELECT mod(ceil(to_date(:st_gen_info.c_expry_dt,'DD-Mon-YYYY') - to_date(:c_sys_dt,'DD-Mon-YYYY')),7)
        INTO   :i_rem_cnt
        FROM DUAL;

      if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName, "S31150", SQLMSG, c_err_msg);
        fn_bat_pst_msg ( c_ServiceName,"System error occured. Contact system support", c_tag );
        fn_chk_process_status(c_ServiceName,c_err_msg );
        return -1;
      }


   		fn_userlog(c_ServiceName,"Counter Is :%d: Exp Date :%s:",i_rem_cnt,st_gen_info.c_expry_dt);

   		if ( i_rem_cnt == 0 )
   		{
     		fn_userlog(c_ServiceName,"Inside i_rem_cnt = 0.");

     		i_cntr = i_cntr + 1;
  	 	}

   		fn_userlog(c_ServiceName,"After counter Is :%d: Exp Date :%s:",i_cntr,st_gen_info.c_expry_dt);


      if((strncmp(c_wkly_exp_dt,c_nexp_dt,8) > 0) && (strncmp(c_wkly_exp_dt,c_mexp_dt,8)<0))
      {
        st_gen_info.l_ca_lvl  = ( i_cntr - 1 ) + 30;
        fn_userlog(c_ServiceName,"Weekly Contract :%ld:",st_gen_info.l_ca_lvl);
      }
      else if((strncmp(c_wkly_exp_dt,c_mexp_dt,8) > 0 ))
      {
        st_gen_info.l_ca_lvl  = ( i_cntr - 2 ) + 30;
        fn_userlog(c_ServiceName,"Weekly Contract :%ld:",st_gen_info.l_ca_lvl);
      }
      else
      {
        st_gen_info.l_ca_lvl  = i_cntr + 30 ;
        fn_userlog(c_ServiceName,"Weekly Contract :%ld:",st_gen_info.l_ca_lvl);
      }
		********** Ver 1.8 Commenting end ******/
	
		/**** Ver 1.8 Start ****/
	      
	/*	  if(strcmp(st_gen_info.c_expry_dt,c_far_expry_dt) < 0) **** commented in Ver 2.7 */
		if(i_diff_flg > 0 )
      {
         if(strcmp(st_gen_info.c_expry_dt, c_prev_exp_dt) == 0)
         {
             st_gen_info.l_ca_lvl = i_prev_lbl_val;
						
						 if(DEBUG_MSG_LVL_2)
						 {
								fn_userlog(c_ServiceName, "Date:%s | Label Value:%d", st_gen_info.c_expry_dt, st_gen_info.l_ca_lvl);
						 } 
         }
         else
         {
             for(i=0; i<=i_max_loop_count; i++)
             {
               if(strcmp(st_gen_info.c_expry_dt, arr_st_cache[i].c_exp_dt) == 0)
               {
                   st_gen_info.l_ca_lvl = arr_st_cache[i].l_lbl_val;

									 if(DEBUG_MSG_LVL_2)
									 {
											fn_userlog(c_ServiceName, "Date:%s | Label Value:%d", st_gen_info.c_expry_dt, st_gen_info.l_ca_lvl);	
									 }
									
                   strcpy(c_prev_exp_dt, arr_st_cache[i].c_exp_dt);
                   i_prev_lbl_val = arr_st_cache[i].l_lbl_val ;
                   break;
               }

             }
           }
        }
	
			/**** Ver 1.8 End ****/			
    }
  }
 	else
  {
    if (strcmp(st_gen_info.c_expry_dt,c_near_expry_dt) == 0 )
    {
      if(DEBUG_MSG_LVL_2)
			{
				fn_userlog(c_ServiceName,"Inside Near Month.");
      }
			st_gen_info.l_ca_lvl =  11 ;
    }
    else if (strcmp(st_gen_info.c_expry_dt,c_mid_expry_dt) == 0 )
    {
			if(DEBUG_MSG_LVL_2)
			{
      	fn_userlog(c_ServiceName,"Inside Middle Month.");
      }
			st_gen_info.l_ca_lvl =  12 ;
    }
    else if (strcmp(st_gen_info.c_expry_dt,c_far_expry_dt) == 0)
    {
			if(DEBUG_MSG_LVL_2)
			{
      	fn_userlog(c_ServiceName,"Inside Far Month.");
      }
			st_gen_info.l_ca_lvl =  13 ;
    }
  }

	if(DEBUG_MSG_LVL_2)
	{
  	fn_userlog(c_ServiceName,"Mltcst Expiry Date :%s: With Lable IS :%ld:",st_gen_info.c_expry_dt,st_gen_info.l_ca_lvl);
	}
  /***  Ver 1.7 Ends  ***/

  st_gen_info.l_prmtd_to_trd = st_cntrct_info_msg->li_perm_trd;
  st_gen_info.l_stts = st_cntrct_info_msg->i_cntrct_stts;
  st_gen_info.l_min_lot_qty = st_cntrct_info_msg->li_min_lot_qty;
  st_gen_info.l_board_lot_qty = st_cntrct_info_msg->li_brd_lot_qty;
  st_gen_info.l_tick_sz = st_cntrct_info_msg->li_tck_sz;
  st_cntrct_info_msg->c_rec_dt[11] = '\0';
  strcpy( st_gen_info.c_record_dt , st_cntrct_info_msg->c_rec_dt );
  st_cntrct_info_msg->c_nd_strt_dt[11] = '\0';
  strcpy( st_gen_info.c_nd_strt_dt , st_cntrct_info_msg->c_nd_strt_dt );
  st_cntrct_info_msg->c_nd_end_dt[11] = '\0';
  strcpy( st_gen_info.c_nd_end_dt , st_cntrct_info_msg->c_nd_end_dt );
  st_cntrct_info_msg->c_bc_strt_dt[11] = '\0';
  strcpy( st_gen_info.c_bk_cls_strt_dt , st_cntrct_info_msg->c_bc_strt_dt );
  st_cntrct_info_msg->c_bc_end_dt[11] = '\0';
  strcpy( st_gen_info.c_bk_cls_end_dt , st_cntrct_info_msg->c_bc_end_dt );
  st_gen_info.l_hgh_prc_rng = st_cntrct_info_msg->li_high_prc_rng;
  st_gen_info.l_low_prc_rng = st_cntrct_info_msg->li_low_prc_rng;
  st_gen_info.l_multplr = atol( &st_cntrct_info_msg->c_normal_ext_mkttyp );             /*  multplr is used to store market type from contract.txt Ver 1.2  */
  fn_cpy_ddr(st_gen_info.c_rout_crt);
  st_gen_info.c_rqst_typ = UPDATE_GEN_INFO;

  /*** ver 2.5 started  67 and 80 are ascii values of C and P respectively used only for temporary purpose. They are used in oracle decode function written in SFO_UPDGEN_INF service ***/
  if( strcmp(c_settlmnt_indicator,"C") == 0 )
  {
      st_gen_info.l_setl_stlmnt_no = 67;
  }
  else if ( strcmp(c_settlmnt_indicator,"P") == 0 )
  {
     st_gen_info.l_setl_stlmnt_no = 80;
  }
   if(DEBUG_MSG_LVL_4)
   { 
   fn_userlog( c_ServiceName,"c_settlmnt_indicator is :%s: and st_gen_info.l_setl_stlmnt_no is :%ld:",c_settlmnt_indicator,st_gen_info.l_setl_stlmnt_no);
   }

  /*** ver 2.5 ended ***/

  /*  call service routine  */
  i_ch_val = fn_acall_svc ( c_ServiceName,
                            c_err_msg,
                            &st_gen_info,
                            "vw_cntrt_gen_inf",
                            sizeof (st_gen_info),
                            TPNOREPLY,
                            "SFO_UPDGEN_INF" );
  if ( i_ch_val == -1 )
  {
    fn_errlog ( c_ServiceName, "S31155", LIBMSG, c_err_msg );
    return -1;
  }

  return 0;
}

/******************************************************************************/
/*  To convert NSE contract information to EBA contract information           */
/*  INPUT PARAMETERS                                                          */
/*      st_nse_cntrct  - NSE contract structure                               */
/*      ptr_cntrct     - EBA contract structure to be returned                */
/*      c_err_msg      - Error message to be returned in case of error        */
/*  OUTPUT PARAMETERS                                                         */
/*      void                                                                  */
/******************************************************************************/
int fn_nse_to_eba_cntrct ( nfo_cntrct st_nse_cntrct,
                           struct vw_contract *ptr_cntrct,
                           char *c_ServiceName,
                           char *c_err_msg )
{
  struct vw_nse_cntrct st_nse_dtls;
  int i_ch_val;

  strcpy( st_nse_dtls.c_xchng_cd,  st_nse_cntrct.c_xchng_cd);
  st_nse_dtls.c_prd_typ =  st_nse_cntrct.c_prd_typ;
  st_nse_cntrct.c_expry_dt[11] = '\0';
  strcpy( st_nse_dtls.c_expry_dt,  st_nse_cntrct.c_expry_dt);
  st_nse_dtls.c_exrc_typ =  st_nse_cntrct.c_exrc_typ;
  st_nse_dtls.c_opt_typ =  st_nse_cntrct.c_opt_typ;
  st_nse_dtls.l_strike_prc =  st_nse_cntrct.l_strike_prc;
  st_nse_dtls.c_ctgry_indstk =  st_nse_cntrct.c_ctgry_indstk;
  strcpy( st_nse_dtls.c_symbol,  st_nse_cntrct.c_symbol );
  strcpy( st_nse_dtls.c_series , st_nse_cntrct.c_series );
  st_nse_dtls.l_ca_lvl =  st_nse_cntrct.l_ca_lvl;
  fn_cpy_ddr(st_nse_dtls.c_rout_crt);
  st_nse_dtls.c_rqst_typ = NSE_ID_TO_CONTRACT;
  i_ch_val = fn_call_svc ( c_ServiceName,
                           c_err_msg,
                           &st_nse_dtls,
                           ptr_cntrct,
                           "vw_nse_cntrct",
                           "vw_contract",
                           sizeof (st_nse_dtls),
                           sizeof (struct vw_contract),
                           0,
                           "SFO_CNT_FOR_ENT" );
  if ( i_ch_val != SUCC_BFR )
  {
    fn_errlog ( c_ServiceName, "S31160", LIBMSG, c_err_msg );
    fn_userlog ( c_ServiceName,
                 "Contract details |%s|%c|%s|%c|%c|%ld|%c|%s|%s|%d|",
                 st_nse_cntrct.c_xchng_cd, st_nse_cntrct.c_prd_typ,
                 st_nse_cntrct.c_expry_dt, st_nse_cntrct.c_exrc_typ,
                 st_nse_cntrct.c_opt_typ, st_nse_cntrct.l_strike_prc,  
                 st_nse_cntrct.c_ctgry_indstk, st_nse_cntrct.c_symbol,
                 st_nse_cntrct.c_series, st_nse_cntrct.l_ca_lvl );
    return i_ch_val;
  }

  return 0;
}

void fn_nsetoors_tm ( char *c_tm_stmp,
                      long int li_src )
{
  char *c_tm;
  int i;
  int j;
  time_t now;

  li_src += li_ten_yrs;
  strftime(c_tm_stmp, 21, "%d-%b-%Y %H:%M:%S", gmtime(&li_src) );
}

void bat_tm_init(void)
{
  struct tm tenyrs_tm;

  tenyrs_tm.tm_sec = 0;
  tenyrs_tm.tm_min = 0;
  tenyrs_tm.tm_hour = 0;
  tenyrs_tm.tm_mday = 1;
  tenyrs_tm.tm_mon = 0;
  tenyrs_tm.tm_year = 70;
  tenyrs_tm.tm_wday = 0;
  tenyrs_tm.tm_yday = 0;
  tenyrs_tm.tm_isdst = 0;

  li_utc_offset = mktime(&tenyrs_tm) * (-1);

  tenyrs_tm.tm_sec = 0;
  tenyrs_tm.tm_min = 0;
  tenyrs_tm.tm_hour = 0;
  tenyrs_tm.tm_mday = 1;
  tenyrs_tm.tm_mon = 0;
  tenyrs_tm.tm_year = 80;
  tenyrs_tm.tm_wday = 0;
  tenyrs_tm.tm_yday = 0;
  tenyrs_tm.tm_isdst = 0;

  li_ten_yrs = mktime(&tenyrs_tm) + li_utc_offset;
}

void fn_chk_process_status(char *c_ServiceName, char *c_err_msg )	 /**ver 1.4**/
{
	char c_command[100];
	MEMSET(c_command); 
	sprintf(c_command,"ksh $HOME/sh_scripts/fo_process_status_mail.sh '%s' '%s'",c_ServiceName,c_err_msg);	
  system(c_command);	
}
