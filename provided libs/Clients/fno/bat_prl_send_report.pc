/**************************************************************************/ 
/* File             : bat_prl_send_report                                 */ 
/*                                                                        */ 
/*                                                                        */ 
/* Description      : This Batch program will run after Populating Request*/ 
/*                    book details in log table. It will generate         */ 
/*                    Collateral Report as per the Format                 */ 
/*                                                                        */ 
/*                                                                        */ 
/*                                                                        */ 
/* Calling Programs/Sub-routines:                                         */ 
/*                                                                        */ 
/*                                                                        */ 
/* Called by        :                                                     */ 
/*                                                                        */ 
/* Author           : Amisha|Vidyayini Krish                              */ 
/*                                                                        */ 
/* Created on       : 18-Aug-2008                                         */ 
/*                                                                        */ 
/* Modification History:                                                  */ 
/*                                                                        */ 
/*  Date    Version No.    Modified by    Modification Description        */ 
/*          Ver 1.1        Vidyayini Krish  Corrections in CUG            */
/*          Ver 1.2        Vidyayini Krish  Rectifying Time out error     */
/*          Ver 1.3        Vidyayini Krish  Console Changes               */
/*          Ver 1.4        Shamili Dalvi    Timeout error                 */
/*          ver 1.5        Tanmay Warkhade  sam block unblock changes     */
/*					Ver 1.6				 Tanmay Warkhade	include of ISIN no 						*/
/*					Ver 1.7				 Samip M					Change for Optimization				*/
/*                                                                        */
/*                                                                        */ 
/*                                                                        */ 
/**************************************************************************/ 
 
/* Standards include files*/ 
 
#include<stdio.h>           /* C Header File */ 
#include<stdlib.h>          /* C Header File */ 
#include<sqlca.h>           /* Oracle header file */ 
#include <atmi.h>           /* TUXEDO Header File */ 
#include <userlog.h>        /* TUXEDO Header File */ 
#include <fml32.h>          /* TUXEDO Header File */ 
#include <fml_def.h> 
#include <string.h> 
#include <fml_rout.h> 
#include <fn_read_debug_lvl.h> 
#include <fo.h> 
#include <fn_log.h> 
#include <fn_tuxlib.h> 
#include <fn_collateral.h> 
#include <fn_battmpt.h> 
 
 
/* Defines */ 
 
#define TOTAL_FML 13 
#define LEN_EVENT 256 
#define LEN_USER_ID 9 
#define LEN_ERR_MSG 256 
#define LEN_MSG  256 
#define LEN_SRVC_NM 33 
#define LEN_TAG 32 
#define LEN_FILE_NM 250 
#define LEN_HEADER  2000 
#define LEN_CH  1000 
#define LEN_ADDRESS 250 
#define LEN_ROW_ID  25 
#define LEN_SYS_DT 22+1 
#define LEN_EMAIL_ID  100 
#define LEN_COMMAND 100 
#define LEN_FINAL_FILE  1000 
#define LEN_SUB 100 
#define SUCCESS_C 0 
#define FAILURE_C -1 
#define ZERO  0 
#define NLVL {'\0'} 
/*#define BAT_TRAN_LOCAL 4000     * ver 1.1 */
/**#define BAT_TRAN_LOCAL 4500       * ver 1.4 */
/**#define BAT_TRAN_LOCAL 7200       * ver 1.4 */
#define BAT_TRAN_LOCAL 9000       /* ver 1.4 */
 
/*****Function Prototype********/ 
void fn_tab_header(FILE *fp); 
char *replace_str(char *str, char *orig, char *rep); 
int GetValue(char file_name[],char search_str[],char retstr[]); 
 
/******File Declarations*****/ 
 
FILE *Final_file; 
FILE *fp1; 
FILE *fp2; 
FILE *fp; 
 
void main( int argc, char * argv[] ) /* Main Program Starts here */ 
{ 
 
  char  c_event[LEN_EVENT]=NLVL; 
  char  c_user_id[LEN_USER_ID]=NLVL; 
  char  c_err_msg[LEN_ERR_MSG]=NLVL; 
  char  c_msg[LEN_MSG]=NLVL; 
  char  c_ServiceName[LEN_SRVC_NM]=NLVL; 
  char  c_tag[LEN_TAG]=NLVL; 
	char  c_ini_FileName[LEN_FILE_NM]=NLVL;
	char  c_rep_head[LEN_HEADER]=NLVL;
	char  tempval[LEN_HEADER]=NLVL;
  char  ch[LEN_CH]=NLVL;
	char  * pch;
	char  c_report[LEN_HEADER]=NLVL;
	char  c_report_head[LEN_HEADER]=NLVL;
	char  c_command[200];
	char  c_trd_dt[LEN_DATE];
	

  int i_returncode; /* Store return code */ 
  int i_plg_prcs=ZERO; 
  int i_counter=ZERO; 
  int i_row_count=ZERO; 
  int i_err[TOTAL_FML]; 
  int i_trnsctn; 
  int i_count=ZERO; 
  int i_record_count=0; 
  int i=ZERO; 
  int i_acc_val=0; 
  int i_gen_dt=0; 
	int i_ret_val=0;
 
  EXEC SQL INCLUDE "table/prl_plg_report_log.h"; 
  EXEC SQL INCLUDE "table/pod_plg_ordr_dtls.h"; 
  EXEC SQL INCLUDE "table/prm_plg_report_mail.h"; 
 
/* Host variable declaration Starts */ 
 
  EXEC SQL BEGIN DECLARE SECTION; 
    char  sql_rcrdon_dt[LEN_SYS_DT]; 
    long sql_l_tot_req_qty=0; 
    long sql_l_cur_plg_qty=0; 
    varchar sql_rowid[LEN_ROW_ID]; 
    varchar sql_sys_dt[LEN_SYS_DT]; 
    varchar sql_sys_dt1[LEN_SYS_DT]; 
    varchar sql_sys_date[LEN_SYS_DT]; 
		varchar v_last_run_dt[LEN_SYS_DT];
    int i_rep_count=0; 
    //varchar sql_c_dbd_stck_cd[8]; 
    char sql_c_dbd_stck_cd[7]; 
 
  EXEC SQL END DECLARE SECTION; 
 
    sql_prm_opn_bal=0; 
    sql_prm_tot_qty=0; 
    sql_prm_rjct_qty=0; 
    sql_prm_plg_qty=0; 
    sql_prm_sqoff_qty=0; 
    sql_prm_wdl_qty=0; 
  TPINIT  *tpinfo; 
 
  NULLCHAR(c_ServiceName); 
  NULLCHAR(c_tag); 
  NULLCHAR(c_msg); 
  NULLCHAR(c_err_msg); 
	SETNULL(v_last_run_dt);
 
  strcpy(c_ServiceName, "bat_prl_send_report" ); 
  INITBATDBGLVL(argv[0]); 
 
	/**********Calling Function to Create Log pipe**************/ 
  if( fn_create_pipe() == -1) 
    exit(-1); 
 
  if(argc != 1) 
  { 
    sprintf(c_msg,"Usage: bat_prl_send_report <SERVICE NAME>"); 
    fn_userlog(c_ServiceName,c_msg); 
    exit(0); 
  } 

 
  if((tpinfo = (TPINIT *)tpalloc("TPINIT",NULL,MIN_FML_BUF_LEN)) == NULL) 
  { 
    sprintf( c_msg,"[%s]:Following error occured while allocating memory for TPINIT buffer: Code:'%d' Message:'%s'", 
						 c_ServiceName, TPCODE, TPMSG ); 
    fn_userlog(c_ServiceName,c_msg); 
    fn_errlog( c_ServiceName, "S31005", LIBMSG, c_err_msg  ); 
    exit(FAILURE); 
  } 
 
	/************ Connection Details from Profile ***********/ 
 
  if(tuxgetenv("ORA_GRP") == NULL) 
  { 
    strcpy(c_msg,"ORA_GRP not defined in the environment"); 
    fn_userlog(c_ServiceName,c_msg); 
    fn_errlog( c_ServiceName, "S31010", LIBMSG, c_err_msg  ); 
    tpfree((char*)tpinfo); 
    exit(FAILURE); 
  } 
 
  sprintf(c_msg,"ORA_GRP is defined in the environment: [%s]",tuxgetenv("ORA_GRP")); 

	if(DEBUG_MSG_LVL_3){ fn_userlog(c_ServiceName,c_msg); }	/**1.4 **/

  strcpy(tpinfo->grpname,tuxgetenv("ORA_GRP")); 
  strcpy ( tpinfo->usrname, "\0" ); 
  strcpy ( tpinfo->passwd, "\0" ); 
  strcpy ( tpinfo->cltname, "" ); 
  tpinfo->flags = TPU_DIP; 

  if(tpinit((TPINIT *) tpinfo) == FAILURE) 
  { 
    sprintf( c_msg,"[%s]:Client failed in connecting to group %s, due to following reason: Code:'%d' Message:'%s'", 
						 c_ServiceName, tuxgetenv("ORA_GRP"), TPCODE, TPMSG ); 
    fn_userlog(c_ServiceName,c_msg); 
    fn_errlog( c_ServiceName, "S31015", LIBMSG, c_err_msg  ); 
    tpfree((char*)tpinfo); 
    exit(FAILURE); 
  } 
 
  tpfree((char*)tpinfo); 
 
  sprintf(c_msg,"tpinit() returns SUCCESS : [%d]",tperrno); 
	if(DEBUG_MSG_LVL_3){ fn_userlog(c_ServiceName,c_msg); }	/**1.4**/
 
  /******** Validation for connection estabilishment ***********/ 
 
  if (tpopen() == FAILURE) 
  { 
    sprintf( c_msg,"[%s]:Unable to open connection with resource manager, due to following reason: Code:'%d' Message:'%s'" , 
						 c_ServiceName, TPCODE, TPMSG ); 

    fn_userlog(c_ServiceName,c_msg); 
    tpterm(); 
    exit(FAILURE); 
  } 
 
  sprintf(c_msg,"[%s]:Client successfully connected to group %s",c_ServiceName,tuxgetenv("ORA_GRP")); 
	if(DEBUG_MSG_LVL_3){ fn_userlog(c_ServiceName,c_msg); }	/**1.4 **/
 
 
  /************Calling function to begin Transaction******************/ 
 
  /* i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );  ver 1.1 */

	i_trnsctn = tpbegin(BAT_TRAN_LOCAL,0); /* ver 1.1 */

  if ( i_trnsctn == -1 ) 
  { 
    fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg  ); 
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); 
    exit(FAILURE); 
  } 
 
  strcpy( c_msg, " Starting BAT_PRL_SEND_REPORT..."); 
  fn_userlog( c_ServiceName,c_msg); 
  /* Ver 1.3 sprintf(c_tag,"%s",c_ServiceName);  */
  strcpy(c_tag,"bat_populate_prl_na"); /* Ver 1.3 */
	
  fn_userlog( c_ServiceName,c_msg); 
  fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
 
  /****Reading Values from  INI file********/ 
 
  sprintf( c_ini_FileName, "%s/%s", tuxgetenv("BIN"),"CollateralReport.INI"); 
  fn_userlog(c_ServiceName,"%s",c_ini_FileName); 

  GetValue(c_ini_FileName,"PLEDGE_TIME",tempval); 
  i_plg_prcs=atoi(tempval); 
  fn_userlog(c_ServiceName,"%d",i_plg_prcs); 
 
  GetValue(c_ini_FileName,"ROWS_COUNT",tempval); 
  i_record_count=atoi(tempval); 
  fn_userlog(c_ServiceName,"%d",i_record_count); 

	EXEC SQL
			 DELETE prm_plg_report_mail 
							WHERE trunc(prm_rep_dt) = trunc(sysdate);

	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
    fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg );
    fn_bat_pst_msg( c_ServiceName,c_err_msg,c_tag );
		fn_userlog( c_ServiceName,"====SD:Abort1  ");
    tpabort(0);
		exit(FAILURE);
  } 

	/* Ver 1.2 Begins */

	EXEC SQL
         SELECT nvl(MAX(prm_rep_dt),trunc(sysdate)-1)
         INTO   :v_last_run_dt
         FROM   prm_plg_report_mail;

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog(c_ServiceName, "S31030", SQLMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      exit(FAILURE);
    }

    SETLEN(v_last_run_dt);

    fn_userlog( c_ServiceName,"SD:Phase I:Last run date is :%s:",v_last_run_dt.arr );/**1.4**/
		fn_userlog( c_ServiceName,"====SD1:Inserting in PRM HSTRY ====  ");

	EXEC SQL
			 INSERT INTO prm_plg_report_mail_hstry 
			 (
				 prm_stck_cd,
         prm_rep_dt,
         prm_dp_clnt_accnt,
         prm_dp_accnt,
         prm_clnt_mtch_accnt,
         prm_opn_bal,
         prm_rjct_qty,
         prm_plg_qty,
         prm_sqoff_qty,
         prm_wdl_qty,
         prm_tot_qty,
         prm_rep_status,
				 PRM_ISIN_NO
			 )
			 (
				 SELECT prm_stck_cd,
							  prm_rep_dt,
							  prm_dp_clnt_accnt,
								prm_dp_accnt,
								prm_clnt_mtch_accnt,
								prm_opn_bal,
								prm_rjct_qty,
								prm_plg_qty,
								prm_sqoff_qty,
								prm_wdl_qty,
								prm_tot_qty,
							  prm_rep_status,
								PRM_ISIN_NO
				 FROM   prm_plg_report_mail
				 WHERE trunc(prm_rep_dt) < :v_last_run_dt
			); 

	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
    fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg );
    fn_bat_pst_msg( c_ServiceName,c_err_msg,c_tag );
		fn_userlog( c_ServiceName,"====SD:Abort2  ");
    tpabort(0);
    exit(FAILURE);
  }	
	else if( SQLCODE == NO_DATA_FOUND)	/** 1.4**/
	{

		fn_userlog( c_ServiceName,"NO_DATA_FOUND for insertion in history table"); 

	}
			

	EXEC SQL
			 DELETE prm_plg_report_mail WHERE trunc(prm_rep_dt) < :v_last_run_dt; 
	
	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
    fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg );
    fn_bat_pst_msg( c_ServiceName,c_err_msg,c_tag );
		fn_userlog( c_ServiceName,"====SD:Abort3  ");
    tpabort(0);
    exit(FAILURE);
  }
	else if( SQLCODE == NO_DATA_FOUND)  /** 1.4**/
	{

		fn_userlog( c_ServiceName,"NO_DATA_FOUND for deleteion from prm_plg_report_mail");
	}

	fn_userlog( c_ServiceName,"Number of rows deleted are :%d:", sqlca.sqlerrd[2] );

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog(c_ServiceName, "S31045", LIBMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
	  fn_userlog( c_ServiceName,"====SD:Abort1  ");
		tpabort(0);
    exit(FAILURE);
  }


	/* Ver 1.2 Commented and moved up 

	EXEC SQL
         SELECT nvl(MAX(prm_rep_dt),trunc(sysdate)-1)
         INTO   :v_last_run_dt
         FROM   prm_plg_report_mail;

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog(c_ServiceName, "S31050", SQLMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      exit(FAILURE);
    }

    SETLEN(v_last_run_dt);

    fn_userlog( c_ServiceName,"Last run date is :%s:",v_last_run_dt.arr );  Ver 1.2 Ends */

	i_trnsctn = 0;
	
  /* i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg ); ver 1.1 */

   fn_userlog( c_ServiceName,"======= sss: New transation started ======== ");	

	i_trnsctn = tpbegin(BAT_TRAN_LOCAL,0); /* ver 1.1 */

  if ( i_trnsctn == FAILURE )
  {
    fn_errlog( c_ServiceName, "S31055", LIBMSG, c_err_msg  );
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    exit(FAILURE);
  }

	/** Start for Ver 1.7 ***/
    EXEC SQL
         SELECT MAX(TO_DATE(prl_recorded_on,'dd-mon-yyyy'))
         INTO   :sql_sys_date
         FROM   prl_plg_report_log;

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog(c_ServiceName, "S31060", SQLMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      fn_userlog( c_ServiceName,"====SM:Abort1  ");
      tpabort(0);
      exit(FAILURE);
    }

	/*** Ver 1.7 **/


 
  /* Declaring Cursor */ 
  /**************************** Commented in ver 1.5 ******************************
 
  EXEC SQL 
       DECLARE cur_gen_rep CURSOR FOR 
               SELECT DISTINCT dbd_clm_mtch_accnt, 
                               dbd_dp_id, 
                               dbd_dp_clnt_id
               FROM   dbd_dp_blck_dtls 
               WHERE  ( dbd_tifp_qty+dbd_rev_cov_qty+dbd_rev_req_qty+dbd_block_for_sale+dbd_inv_req_qty+dbd_inv_cov_qty ) <> 0
			 UNION 
			 SELECT prl_clnt_mtch_accnt,
							prl_dp_accnt,
							prl_dp_clnt_accnt
			 FROM   prl_plg_report_log prl
			 WHERE  prl_prcs_stts is NULL
			 AND    prl_rec_stts=(
														 SELECT DECODE(pod_ordr_stts,'J','Y','N') 
														 FROM   pod_plg_ordr_dtls 
														 WHERE  pod_ordr_no=prl.prl_ordr_no)
       AND    TRUNC(prl_recorded_on)=(
																			 SELECT MAX(TO_DATE(prl_recorded_on,'dd-mon-yyyy')) 
																			 FROM prl_plg_report_log);

	  **************************** Commented in ver 1.5 ********************************/
		
		/**************************** Added in ve 1.5 ****************************/

    EXEC SQL
       DECLARE cur_gen_rep CURSOR FOR
               SELECT DISTINCT dbd_clm_mtch_accnt,
                               dbd_dp_id,
                               dbd_dp_clnt_id
       FROM   dbd_dp_blck_dtls
       WHERE  ( dbd_block_for_sale + DBD_SAM_BLCKD_QTY) <> 0
       UNION
       SELECT prl_clnt_mtch_accnt,
              prl_dp_accnt,
              prl_dp_clnt_accnt
       FROM   prl_plg_report_log prl
       WHERE  prl_prcs_stts is NULL
       AND    prl_rec_stts=(
                             SELECT DECODE(SBD_BKUBK_STTS,'J','Y','N')
                             FROM  SBD_SAM_BKUBK_DTLS
                             WHERE  SBD_ORDR_NO = prl.prl_ordr_no)
       /** AND    TRUNC(prl_recorded_on)=(
                                       SELECT MAX(TO_DATE(prl_recorded_on,'dd-mon-yyyy'))
                                       FROM prl_plg_report_log); ** Ver 1.7 ***/
       AND    TRUNC(prl_recorded_on)=:sql_sys_date;		/*** Ver 1.7 ***/


     /**************************** Added in ve 1.5 ****************************/

		
  fn_userlog( c_ServiceName,"Declared Cursor for getting records from dbd_dp_blck_dtls "); 
 
  /***Opening the Cursor*****/ 

	fn_userlog( c_ServiceName,"====SD2:Opening the Cursor cur_gen_rep "); /**1.4 **/
 
  EXEC SQL OPEN cur_gen_rep; 			
 
  if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND) 
  { 
    EXEC SQL CLOSE cur_gen_rep; 
    fn_errlog(c_ServiceName, "S31065", SQLMSG, c_err_msg); 
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); 
		fn_userlog( c_ServiceName,"====SD:Abort4  ");
    tpabort(0); 
  } 
 
  if ( SQLCODE == NO_DATA_FOUND) 
  { 
    EXEC SQL CLOSE cur_gen_rep; 
 
    fn_errlog(c_ServiceName, "S31070", SQLMSG, c_err_msg); 
    strcpy(c_msg,"No Data Found in PRL_PLG_REPORT_LOG "); 
    fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
    fn_userlog(c_ServiceName,c_msg); 
		fn_userlog( c_ServiceName,"====SD:Abort5  ");
    tpabort(0); 
    exit(FAILURE); 
  } 

 
  while(1)  /* First Loop Starts */ 
  { 
    i=0; 

      fn_userlog(c_ServiceName,"Fetching Records for cur_gen_rep Cursor"); 
 
    memset(sql_prl_clnt_mtch_accnt,0x00,sizeof(sql_prl_clnt_mtch_accnt)); 
    memset(sql_prl_dp_accnt,0x00,sizeof(sql_prl_dp_accnt)); 
    memset(sql_prl_dp_clnt_accnt,0x00,sizeof(sql_prl_dp_clnt_accnt)); 
 
    EXEC SQL FETCH CUR_GEN_REP 
             INTO  :sql_prl_clnt_mtch_accnt, 
                	 :sql_prl_dp_accnt, 
                	 :sql_prl_dp_clnt_accnt;
 
 
    if(SQLCODE != 0) 
    { 
        if(SQLCODE == NO_DATA_FOUND) 
        { 
          sprintf(c_msg,":%d:CUR_GEN_REP Record is prcessed. No More Records to process ",i_counter); 
					if(DEBUG_MSG_LVL_3){ fn_userlog(c_ServiceName,c_msg); } /** 1.4 **/
          fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
          EXEC SQL CLOSE cur_gen_rep; 
          break; 
        } 
        else 
        { 
          sprintf(c_msg,"Error occured while fetching CUR_GEN_REP ,sqlcode-:%d:",sqlca.sqlcode); 
					if(DEBUG_MSG_LVL_3){
          fn_userlog(c_ServiceName,c_msg); } /**1.4 **/
          fn_errlog( c_ServiceName, "S31075", SQLMSG, c_err_msg  ); 
          fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); 
        } 
				fn_userlog( c_ServiceName,"====SD:Abort6  ");
        tpabort(0); 
        EXEC SQL CLOSE cur_gen_rep; 
        exit(FAILURE); 
    } 
 
    sprintf(c_msg,"Fetching gen rep %s %s %s",sql_prl_clnt_mtch_accnt,sql_prl_dp_accnt,sql_prl_dp_clnt_accnt); 

		fn_userlog(c_ServiceName,c_msg); 
 
		/***** 1.4 Commented as not use anywhere 
    EXEC SQL 
         SELECT to_char(sysdate , 'ddmmyyyyhh24miss') 
         INTO   :sql_sys_dt 
         FROM   dual; 

		if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  	{
    	EXEC SQL CLOSE cur_gen_rep;
    	fn_errlog(c_ServiceName, "S31080", SQLMSG, c_err_msg);
    	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
			fn_userlog( c_ServiceName,"====SD:Abort7  ");
    	tpabort(0);
			exit(FAILURE);
  	}

 
    EXEC SQL 
         SELECT max(to_char(PRL_RECORDED_ON,'dd-MON-yyyy hh24:mi')),max(to_char(PRL_RECORDED_ON,'dd-MON-yyyy')) 
         INTO   :sql_sys_dt1,:sql_sys_date 
         FROM   prl_plg_report_log; 

		if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  	{
    	EXEC SQL CLOSE cur_gen_rep;
    	fn_errlog(c_ServiceName, "S31085", SQLMSG, c_err_msg);
    	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
			fn_userlog( c_ServiceName,"====SD:Abort8  ");
    	tpabort(0);
			exit(FAILURE);
  	}

		SETNULL(sql_sys_date);  ***/

		/*****Declare Cursor****/ 

		fn_userlog(c_ServiceName,"===========SD :Declare Cursor cur_opn_bal ========"); /**1.4 **/

		/* Added inv_req_qty,inv_cov_qty,block_for_sale in query Vidya */

		/************************ Commented in ver 1.5 ***************************
 
    EXEC SQL 
         DECLARE cur_opn_bal CURSOR FOR 
				 (
         SELECT ( dbd_tifp_qty-dbd_rev_req_qty-dbd_rev_cov_qty-dbd_inv_req_qty-dbd_inv_cov_qty-dbd_block_for_sale ),
								dbd_stck_cd 
         FROM   dbd_dp_blck_dtls 
         WHERE  dbd_clm_mtch_accnt = :sql_prl_clnt_mtch_accnt 
				 AND    dbd_dp_clnt_id = :sql_prl_dp_clnt_accnt 
         AND    ( dbd_tifp_qty-dbd_rev_req_qty-dbd_rev_cov_qty -dbd_inv_req_qty-dbd_inv_cov_qty-dbd_block_for_sale ) >0 )
				 UNION
				 (SELECT prl_ordr_qty,
								prl_stck_cd
				 FROM   prl_plg_report_log prl , dbd_dp_blck_dtls dbd
				 WHERE  prl_prcs_stts is NULL
				 AND    prl_clnt_mtch_accnt = :sql_prl_clnt_mtch_accnt
				 AND    prl_dp_clnt_accnt = :sql_prl_dp_clnt_accnt
				 AND    prl_clnt_mtch_accnt = dbd_clm_mtch_accnt
				 AND    prl_dp_clnt_accnt   = dbd_dp_clnt_id
				 AND    prl_stck_cd         = dbd_stck_cd 
				 AND    ( dbd_tifp_qty-dbd_rev_req_qty-dbd_rev_cov_qty -dbd_inv_req_qty-dbd_inv_cov_qty-dbd_block_for_sale ) = 0
				 AND    prl_rec_stts=( SELECT DECODE(pod_ordr_stts,'J','Y','N')
															 FROM   pod_plg_ordr_dtls
															 WHERE  pod_ordr_no=prl.prl_ordr_no)
				 AND    TRUNC(prl_recorded_on)=( SELECT MAX(TO_DATE(prl_recorded_on,'dd-mon-yyyy')) 
			   FROM   prl_plg_report_log)
				 ); 

			************************ Commented in ver 1.5 ***************************/


    /************************ Added in ver 1.5 ************************/

         EXEC SQL
         DECLARE cur_opn_bal CURSOR FOR
         (
         SELECT ( DBD_SAM_BLCKD_QTY  -  dbd_block_for_sale ),
                dbd_stck_cd,
								DBD_ISIN_NMBR	/*** Ver 1.6 **/
         FROM   dbd_dp_blck_dtls
         WHERE  dbd_clm_mtch_accnt = :sql_prl_clnt_mtch_accnt
         AND    dbd_dp_clnt_id = :sql_prl_dp_clnt_accnt
         AND    ( DBD_SAM_BLCKD_QTY - dbd_block_for_sale ) >0 )
         UNION
         (SELECT /** prl_ordr_qty,		** Commented and added Error handling for Ver 1.5 ***/
								distinct ( DBD_SAM_BLCKD_QTY - dbd_block_for_sale )	 ,
                prl_stck_cd,
								PRL_ISIN_NO	/** Ver 1.6 ***/
         FROM   prl_plg_report_log prl , dbd_dp_blck_dtls dbd
         WHERE  prl_prcs_stts is NULL
         AND    prl_clnt_mtch_accnt = :sql_prl_clnt_mtch_accnt
         AND    prl_dp_clnt_accnt = :sql_prl_dp_clnt_accnt
         AND    prl_clnt_mtch_accnt = dbd_clm_mtch_accnt
         AND    prl_dp_clnt_accnt   = dbd_dp_clnt_id
         AND    prl_stck_cd         = dbd_stck_cd
         AND    ( DBD_SAM_BLCKD_QTY - dbd_block_for_sale ) = 0
         AND    prl_rec_stts=( SELECT DECODE(SBD_BKUBK_STTS,'J','Y','N')
                               FROM  SBD_SAM_BKUBK_DTLS
                               WHERE  SBD_ORDR_NO = prl.prl_ordr_no)
         /*** AND    TRUNC(prl_recorded_on)=( SELECT MAX(TO_DATE(prl_recorded_on,'dd-mon-yyyy'))
         FROM   prl_plg_report_log) *** Ver 1.7 ***/
         AND    TRUNC(prl_recorded_on)=:sql_sys_date		/** Ver 1.7 **/
         );

    /************************ Added in ver 1.5 ************************/

 
      fn_userlog(c_ServiceName,"Successfully completed selecting the records from cur_opn_bal "); 
 
    if ( SQLCODE != SUCCESS ) 
    { 
				fn_userlog(c_ServiceName,"====SD:11");
        if ( SQLCODE == NO_DATA_FOUND ) 
        { 
						fn_userlog(c_ServiceName,"====SD:22");
            strcpy(c_msg," No Data Found while selecting the records from cur_opn_bal"); 
					 	if(DEBUG_MSG_LVL_3){fn_userlog(c_ServiceName,c_msg); } /** 1.4 **/
            fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
        } 
        else 
        { 
						fn_userlog(c_ServiceName,"====SD:33");
            strcpy(c_msg,"SQL ERROR while selecting the records from cur_opn_bal"); 
            if(DEBUG_MSG_LVL_3){fn_userlog(c_ServiceName,c_msg); } /**1.4 **/
            fn_errlog( c_ServiceName, "S31090", SQLMSG, c_err_msg  ); 
            fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); 
        } 
            EXEC SQL CLOSE cur_opn_bal; 
					  EXEC SQL CLOSE cur_gen_rep;
						fn_userlog( c_ServiceName,"====SD:Abort8  ");
            tpabort(0); 
            exit(FAILURE); 
    } 

		fn_userlog(c_ServiceName,"====SD:55");
 
    /*****Open Cursor*****/ 
 
    EXEC SQL OPEN cur_opn_bal; 
 
    if(SQLCODE != SUCCESS) 
    { 
			fn_userlog(c_ServiceName,"====SD:66");
      if(SQLCODE == NO_DATA_FOUND) 
      { 

					fn_userlog(c_ServiceName,"====SD:77");
          sprintf(c_msg,"No Data Found while opening the  cur_opn_bal"); 
          if(DEBUG_MSG_LVL_3){fn_userlog(c_ServiceName,c_msg); } /** 1.4**/
          fn_errlog(c_ServiceName, "S31095", SQLMSG, c_err_msg); 
          fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
      } 
      else 
      { 

					fn_userlog(c_ServiceName,"====SD:88");
					if(DEBUG_MSG_LVL_3){
          fn_userlog(c_ServiceName,"Error while opening the cur_opn_bal"); } /**1.4**/
          fn_errlog( c_ServiceName, "S31100", SQLMSG, c_err_msg  ); 
          fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); 
      } 
      EXEC SQL CLOSE CUR_OPN_BAL; 
			fn_userlog( c_ServiceName,"====SD:Abort9  ");
      tpabort(0); 
      exit(FAILURE); 
    } 
 
    while(1) /****Loop Starts Here***/ 
    { 

				fn_userlog(c_ServiceName," ====SD:inside while loop=====");
 
      EXEC SQL FETCH cur_opn_bal 
               INTO :sql_l_tot_req_qty, 
                    :sql_c_dbd_stck_cd,
										:sql_prm_isin_no;											/** Ver 1.6 **/
 
  		if(SQLCODE != SUCCESS) 
  		{ 

					fn_userlog(c_ServiceName,"====SD:111");
      		if(SQLCODE == NO_DATA_FOUND) 
      		{ 
							fn_userlog(c_ServiceName,"====SD:222");
          		sprintf(c_msg,":%d:cur_opn_bal Record is prcessed .No More Records still to process ",i_counter); 
							if(DEBUG_MSG_LVL_3){ fn_userlog(c_ServiceName,c_msg); } /**1.4**/
          		fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
          		break; 
      		} 
      		else 
      		{ 
							fn_userlog(c_ServiceName,"====SD:333");
          		sprintf(c_msg,"fetching crsor cur_opn_bal is fail,sqlcode-:%d:",sqlca.sqlcode); 
							if(DEBUG_MSG_LVL_3){ fn_userlog(c_ServiceName,c_msg); } /**1.4**/
          		fn_errlog( c_ServiceName, "S31105", SQLMSG, c_err_msg  ); 
          		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); 
      		} 
					fn_userlog( c_ServiceName,"====SD:Abort10  ");
          tpabort(0); 
          EXEC SQL CLOSE cur_opn_bal; 
          exit(FAILURE); 
      } 

			fn_userlog(c_ServiceName,"====SD:555");
 
      sprintf(c_msg,"total qty :%d:",sql_l_tot_req_qty); 
			if(DEBUG_MSG_LVL_3){ fn_userlog(c_ServiceName,c_msg); } /**1.4**/
      sprintf(c_msg,":%s:stock code",sql_c_dbd_stck_cd); 
			if(DEBUG_MSG_LVL_3){ fn_userlog(c_ServiceName,c_msg); } /** 1.4 **/
 
      /***Checking for the report generation****/ 

      i_rep_count=0; 

			if(DEBUG_MSG_LVL_3){
			fn_userlog( c_ServiceName,"MATCH IS :%s:",sql_prl_clnt_mtch_accnt );
			fn_userlog( c_ServiceName,"CLIENT ID IS :%s:",sql_prl_dp_clnt_accnt );
			fn_userlog( c_ServiceName,"STOCK CODE IS :%s:",sql_c_dbd_stck_cd );
			fn_userlog( c_ServiceName, " I:COUNT IS :%d:", i_rep_count );
			}/**1.4**/
 
      EXEC SQL  SELECT  COUNT(*) 
                INTO    :i_rep_count 
                FROM    prm_plg_report_mail 
                WHERE   prm_clnt_mtch_accnt = :sql_prl_clnt_mtch_accnt 
                AND     prm_dp_clnt_accnt = :sql_prl_dp_clnt_accnt 
                AND     trim(prm_stck_cd)=trim(:sql_c_dbd_stck_cd) 
								AND		  PRM_ISIN_NO = :sql_prm_isin_no;										/** Ver 1.6 **/

			fn_userlog( c_ServiceName, " COUNT IS :%d:", i_rep_count );
 
      sprintf(c_msg,"Chcking Report gen [%s] [%s] [%s] [%d]",sql_prl_clnt_mtch_accnt,sql_prl_dp_clnt_accnt,sql_c_dbd_stck_cd,i_rep_count); 
			if(DEBUG_MSG_LVL_3){ fn_userlog(c_ServiceName,c_msg); } /**1.4**/
 
      if(i_rep_count==0) 
      { 

				fn_userlog(c_ServiceName,"================ ====SD:i_rep_count = 0 ============="); /**1.4 **/
        strcpy(c_msg,"No record found..Getting opening balance"); 
        fn_userlog(c_ServiceName,c_msg); 
 

				/*******************   Commented in Ver 1.5  ***********************

        EXEC SQL  SELECT  (NVL(SUM(DECODE(prl_plg_rev_typ,'I', prl_ordr_qty)),0)+ 
                          NVL(SUM(DECODE(prl_plg_rev_typ,'W', prl_ordr_qty)),0)- 
                          NVL(SUM(DECODE(prl_plg_rev_typ,'P', prl_ordr_qty)),0)) 
                  INTO    :sql_l_cur_plg_qty 
                  FROM    prl_plg_report_log prl 
                  WHERE   prl_clnt_mtch_accnt = :sql_prl_clnt_mtch_accnt 
                  AND     prl_dp_clnt_accnt = :sql_prl_dp_clnt_accnt 
                  AND     trim(prl_stck_cd) = trim(:sql_c_dbd_stck_cd) 
                  AND     prl_rec_stts=(select decode(pod_ordr_stts,'J','Y','N') from pod_plg_ordr_dtls where pod_ordr_no=prl.prl_ordr_no)
									AND     ( prl_rej_mail_stts = 'N' OR prl_rej_mail_stts IS NULL ); 
 
				*******************   Commented in Ver 1.5  ***********************/

				 /*********************** Added in Ver 1.5 ***********************/			

				 EXEC SQL  SELECT (NVL(SUM(DECODE(prl_plg_rev_typ,'I', prl_ordr_qty)),0)+
                          NVL(SUM(DECODE(prl_plg_rev_typ,'U', prl_ordr_qty)),0)-
                          NVL(SUM(DECODE(prl_plg_rev_typ,'B', prl_ordr_qty)),0))
                  INTO    :sql_l_cur_plg_qty
                  FROM    prl_plg_report_log prl
                  WHERE   prl_clnt_mtch_accnt = :sql_prl_clnt_mtch_accnt
                  AND     prl_dp_clnt_accnt = :sql_prl_dp_clnt_accnt
                  AND     trim(prl_stck_cd) = trim(:sql_c_dbd_stck_cd)
                  AND     prl_rec_stts=(select decode(SBD_BKUBK_STTS,'J','Y','N') from SBD_SAM_BKUBK_DTLS where SBD_ORDR_NO = prl.prl_ordr_no)
                  AND     ( prl_rej_mail_stts = 'N' OR prl_rej_mail_stts IS NULL );

 				/*********************** Added in Ver 1.5 ***********************/				

        if ( SQLCODE != SUCCESS ) 
        { 

						  fn_userlog(c_ServiceName,"====SD:1111");

          if ( SQLCODE == NO_DATA_FOUND ) 
          { 
							fn_userlog(c_ServiceName,"====SD:2222");
              strcpy(c_msg," No Data Found while selecting the plg qty"); 
							if(DEBUG_MSG_LVL_3){ fn_userlog(c_ServiceName,c_msg); } /**1.4 **/
              fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
          } 
          else 
          { 
							fn_userlog(c_ServiceName,"====SD:3333");
              strcpy(c_msg,"SQL ERROR while selecting the plg qty"); 
							if(DEBUG_MSG_LVL_3){ fn_userlog(c_ServiceName,c_msg); } /** 1.4 **/
              fn_errlog( c_ServiceName, "S31110", SQLMSG, c_err_msg  ); 
              fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); 
          } 
          EXEC SQL CLOSE CUR_OPN_BAL; 
					fn_userlog( c_ServiceName,"====SD:Abort11  ");
          tpabort(0); 
          exit(FAILURE); 
        } 

				if(DEBUG_MSG_LVL_3){
				 fn_userlog( c_ServiceName," Cur_Plg_Qty is :%ld:",sql_l_cur_plg_qty );} /**1.4**/

      	sprintf(c_msg,"----- in if opn bal [%s] [%s] [%s]",sql_prl_clnt_mtch_accnt,sql_prl_dp_clnt_accnt,sql_c_dbd_stck_cd); 
				fn_userlog(c_ServiceName,c_msg); 
 
        sql_prm_opn_bal = sql_l_tot_req_qty + sql_l_cur_plg_qty; 
 
        sprintf(c_msg,"opening balance :%d:%d:%d",sql_prm_opn_bal,sql_l_tot_req_qty,sql_l_cur_plg_qty); 
				if(DEBUG_MSG_LVL_3){ fn_userlog(c_ServiceName,c_msg); } /**1.4**/
 
       } 
       else 
       { 
				 fn_userlog(c_ServiceName,"======================= ====SD:i_rep_count != 0 =============");
				 fn_userlog(c_ServiceName,"====SD:i_rep_count :%d:",i_rep_count);
         sql_prm_opn_bal=0; 
         sprintf(c_msg," in else opn loop :[%s] [%s] [%s]",sql_prl_clnt_mtch_accnt,sql_prl_dp_clnt_accnt,sql_c_dbd_stck_cd); 
         fn_userlog(c_ServiceName,c_msg); 

				 fn_userlog( c_ServiceName,"====SD: Phase II:Last run date is :%s:",v_last_run_dt.arr );

				 fn_userlog(c_ServiceName,"-------------------------------------------");/**1.4**/
 
         EXEC SQL SELECT NVL(prm_tot_qty,0) 
                  INTO   :sql_prm_opn_bal 
                  FROM   prm_plg_report_mail prm 
                  WHERE  to_date(prm_rep_dt,'dd-Mon-YYYY') = :v_last_run_dt 
																															 /* ( SELECT max(to_date(prm_rep_dt,'dd-mon-yyyy')) 
                              																 FROM   prm_plg_report_mail 
																															 WHERE  prm_clnt_mtch_accnt=prm.prm_clnt_mtch_accnt 
                              																 AND    prm_dp_clnt_accnt=prm.prm_dp_clnt_accnt 
																															 AND    trim(prm_stck_cd) =trim(prm.prm_stck_cd)) */
                  AND prm_clnt_mtch_accnt=:sql_prl_clnt_mtch_accnt 
                  AND prm_dp_clnt_accnt = :sql_prl_dp_clnt_accnt   
								  AND trim(PRM_STCK_CD) =trim(:sql_c_dbd_stck_cd)
									AND     PRM_ISIN_NO = :sql_prm_isin_no;									/*** Ver 1.6 **/
 
         if ( SQLCODE != SUCCESS ) 
         { 
					 fn_userlog(c_ServiceName,"====SD: 5555");
           if ( SQLCODE != 1403 && SQLCODE != -2112 && SQLCODE != 1422) /** Error handling for Ver 1.5 ***/
           { 
					 		 fn_userlog(c_ServiceName,"====SD: 6666");
							 if(DEBUG_MSG_LVL_3){ fn_userlog(c_ServiceName,c_msg); } /** 1.4 **/
              fn_errlog( c_ServiceName, "S31115", SQLMSG, c_err_msg  ); 
              fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); 
							EXEC SQL CLOSE cur_opn_bal;
							fn_userlog( c_ServiceName,"====SD:Abort12  ");
           		tpabort(0);
							fn_userlog(c_ServiceName,"====SD:7777");
           		exit(FAILURE);
		
           } 
           else 
           { 
					 		fn_userlog(c_ServiceName,"====SD: 8888");
              sprintf(c_msg,"Code value [%ld] ",sqlca.sqlcode); 
							if(DEBUG_MSG_LVL_3){ fn_userlog(c_ServiceName,c_msg); } /** 1.4 **/
              strcpy(c_msg," No Data Found while selecting the open bal"); 
							if(DEBUG_MSG_LVL_3){ fn_userlog(c_ServiceName,c_msg); } /** 1.4 **/
              sprintf(c_msg,"VALUES[%s] [%s] [%s] [%d]",sql_prl_clnt_mtch_accnt,sql_prl_dp_clnt_accnt,sql_c_dbd_stck_cd,sql_prm_opn_bal); 
              fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
           } 

           /* commented and moved up EXEC SQL CLOSE cur_opn_bal; 
           tpabort(0); 
           exit(FAILURE);  */
         }  
         sprintf(c_msg,"in else opn bal [%s] [%s] [%s] [%d]",sql_prl_clnt_mtch_accnt,sql_prl_dp_clnt_accnt,sql_c_dbd_stck_cd,sql_prm_opn_bal); 
				  /* fn_userlog(c_ServiceName,c_msg); */


				 fn_userlog(c_ServiceName,"====SD:else loop ends"); /** 1.4 **/
       } 

				fn_userlog(c_ServiceName,"====SD: A1111");
 
       /*****Caluculating Rejected qty*******/ 
 
			 /******************* Commented in Ver 1.5 *******************

       EXEC SQL SELECT COUNT(*) 
                INTO  :i_row_count 
                FROM  prl_plg_report_log,pod_plg_ordr_dtls 
                WHERE prl_ordr_no=pod_ordr_no 
                AND   pod_ordr_stts='J' 
                AND   prl_clnt_mtch_accnt = :sql_prl_clnt_mtch_accnt 
                AND   prl_dp_clnt_accnt=:sql_prl_dp_clnt_accnt 
                AND   trim(PRL_STCK_CD) = trim(:sql_c_dbd_stck_cd) 
                AND   prl_clnt_mtch_accnt=pod_clnt_mtch_accnt 
                AND   prl_dp_clnt_accnt=pod_dp_clnt_accnt 
                AND   trim(prl_stck_cd)=trim(pod_stck_cd) 
                AND   prl_prcs_stts is NULL 
                AND   prl_rec_stts='Y'; 
				
				******************* Commented in Ver 1.5 *******************/
		
				/******************* Added in Ver 1.5 *******************/

				/*** Commented for optimize on 27-Apr-2015 ***
				
				EXEC SQL SELECT COUNT(*)
                INTO  :i_row_count
                FROM  prl_plg_report_log,SBD_SAM_BKUBK_DTLS
                WHERE prl_ordr_no= SBD_ORDR_NO
                AND   SBD_BKUBK_STTS ='J'
                AND   prl_clnt_mtch_accnt = :sql_prl_clnt_mtch_accnt
                AND   prl_dp_clnt_accnt=:sql_prl_dp_clnt_accnt
                AND   trim(PRL_STCK_CD) = trim(:sql_c_dbd_stck_cd)
                AND   prl_clnt_mtch_accnt = SBD_CLNT_MTCH_ACCNT
                AND   prl_dp_clnt_accnt =  SBD_DP_CLNT_ACCNT
                AND   trim(prl_stck_cd)=trim(SBD_STCK_CD)
                AND   prl_prcs_stts is NULL
                AND   prl_rec_stts='Y';

					********/
					
				/******************* Added in Ver 1.5 *******************/
 
       sprintf(c_msg,"Calculating Rejected Qty [%s] [%s] [%s]",sql_prl_clnt_mtch_accnt,sql_prl_dp_clnt_accnt,sql_c_dbd_stck_cd); 
       fn_userlog(c_ServiceName,c_msg); 

       if(i_row_count==0) 
       { 
				 fn_userlog(c_ServiceName,"====SD:A2222");
         sprintf(c_msg,":%s:stock code",sql_c_dbd_stck_cd); 
				  if(DEBUG_MSG_LVL_3){ 
         fn_userlog(c_ServiceName,c_msg); 
         fn_userlog(c_ServiceName,"Rejected Qty Zero"); } /**1.4 **/
         sql_prm_rjct_qty=0; 
       } 
       else 
       { 
				fn_userlog(c_ServiceName,"====SD:A3333");
			
				/******************* Commented in Ver 1.5 *******************
	
        EXEC SQL  SELECT (nvl(SUM(DECODE(pod_plg_rev_typ,'I', pod_ordr_qty)),0)+ 
                           nvl(SUM(DECODE(pod_plg_rev_typ,'W', pod_ordr_qty)),0)- 
                           nvl(SUM(DECODE(pod_plg_rev_typ,'P', pod_ordr_qty)),0)), 
                           prl_plg_report_log.ROWID 
                   INTO  :sql_prm_rjct_qty,:sql_rowid 
                   FROM  prl_plg_report_log,pod_plg_ordr_dtls 
                   WHERE prl_ordr_no=pod_ordr_no 
                   AND   pod_ordr_stts='J' 
                   AND   prl_clnt_mtch_accnt = :sql_prl_clnt_mtch_accnt 
                   AND   prl_dp_clnt_accnt=:sql_prl_dp_clnt_accnt 
                   AND   trim(prl_stck_cd) = trim(:sql_c_dbd_stck_cd) 
                   AND   prl_clnt_mtch_accnt=pod_clnt_mtch_accnt 
                   AND   prl_dp_clnt_accnt=pod_dp_clnt_accnt 
                   AND   trim(prl_stck_cd)=trim(pod_stck_cd) 
                   AND   prl_prcs_stts is NULL 
                   AND   prl_rec_stts='Y' 
                   GROUP BY  prl_plg_report_log.ROWID; 

					******************* Commented in Ver 1.5 *******************/

					/******************* Added in Ver 1.5 *******************/
			
				/***** Commented for optimize on 27-Apr-2015 ******

        EXEC SQL  SELECT (nvl(SUM(DECODE(SBD_SAM_BKUBK_TYP,'I', SBD_BKUBK_QTY)),0)+
                           nvl(SUM(DECODE(SBD_SAM_BKUBK_TYP,'U', SBD_BKUBK_QTY)),0)-
                           nvl(SUM(DECODE(SBD_SAM_BKUBK_TYP,'B', SBD_BKUBK_QTY)),0)),	
                           prl_plg_report_log.ROWID
                   INTO  :sql_prm_rjct_qty,:sql_rowid
                   FROM  prl_plg_report_log, SBD_SAM_BKUBK_DTLS
                   WHERE prl_ordr_no= SBD_ORDR_NO
                   AND   SBD_BKUBK_STTS  ='J'
                   AND   prl_clnt_mtch_accnt = :sql_prl_clnt_mtch_accnt
                   AND   prl_dp_clnt_accnt=:sql_prl_dp_clnt_accnt
                   AND   trim(prl_stck_cd) = trim(:sql_c_dbd_stck_cd)
                   AND   prl_clnt_mtch_accnt= SBD_CLNT_MTCH_ACCNT
                   AND   prl_dp_clnt_accnt= SBD_DP_CLNT_ACCNT
                   AND   trim(prl_stck_cd)=trim(SBD_STCK_CD )
                   AND   prl_prcs_stts is NULL
                   AND   prl_rec_stts='Y'
                   GROUP BY  prl_plg_report_log.ROWID;

							******/
	
					 /******************* Added in Ver 1.5 *******************/ 
 
      	 sprintf(c_msg,"in Rej qty [%s] [%s] [%s]",sql_prl_clnt_mtch_accnt,sql_prl_dp_clnt_accnt,sql_c_dbd_stck_cd); 
				 if(DEBUG_MSG_LVL_3){ fn_userlog(c_ServiceName,c_msg); } /** 1.4 **/
 
      	 sprintf(c_msg,":%s:stock code",sql_c_dbd_stck_cd); 
				 if(DEBUG_MSG_LVL_3){ fn_userlog(c_ServiceName,c_msg); } /**1.4 **/
 
      	 if ( SQLCODE != SUCCESS ) 
      	 { 

					 fn_userlog(c_ServiceName,"====SD:A4444");
        	 if ( SQLCODE == NO_DATA_FOUND ) 
        	 { 
					   fn_userlog(c_ServiceName,"====SD:A5555");
             strcpy(c_msg," No Data Found while selecting the rej qty"); 
             fn_userlog(c_ServiceName,c_msg); 
             fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
        	 } 
        	 else 
        	 { 
					   fn_userlog(c_ServiceName,"====SD:A6666");
             strcpy(c_msg,"SQL ERROR while selecting the rej qty"); 
             fn_userlog(c_ServiceName,c_msg); 
             fn_errlog( c_ServiceName, "S31120", SQLMSG, c_err_msg  ); 
             fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); 
        	 } 
        	 EXEC SQL CLOSE CUR_OPN_BAL; 
						fn_userlog( c_ServiceName,"====SD:Abort13  "); 
        	 tpabort(0); 
        	 exit(FAILURE); 
      	 } 

						fn_userlog(c_ServiceName,"====SD:else ends"); /**1.4 **/
    	 } 
       /****Updating the Log with process status****/ 
			
				fn_userlog(c_ServiceName," ======== sss:updating prl_plg_report_log ===="); /** 1.4 **/

				/**** Commented for optimize on 27-Apr-2015 ***
 
       EXEC SQL 
					  UPDATE prl_plg_report_log SET prl_prcs_stts='J', prl_rej_mail_stts = 'Y' WHERE ROWID=:sql_rowid ; 


       if ( SQLCODE != SUCCESS ) 
       { 
				 fn_userlog(c_ServiceName,"====SD:A8888");
					fn_userlog(c_ServiceName,"sql_rowid:%s:",sql_rowid);
         strcpy(c_msg,"No Record is Updated"); 
         fn_userlog(c_ServiceName,c_msg); 
         fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
 
       } 

			*** 27-Apr-2015 ******/
 
       /*****Caluculating Plg qty,Invoke qty,withdraw qty******/ 

       
			 fn_userlog( c_ServiceName,"MATCH IS :%s:",sql_prl_clnt_mtch_accnt );
			 fn_userlog( c_ServiceName,"CLIENT IS :%s:",sql_prl_dp_clnt_accnt );
			 fn_userlog( c_ServiceName,"STOCK IS :%s:",sql_c_dbd_stck_cd );
			 fn_userlog( c_ServiceName,"ISIN NO IS :%s:",sql_prm_isin_no);							/** Ver 1.6 **/
			 fn_userlog( c_ServiceName,"---------------------------------"); /**1.4**/
			
			 /******************** Commented in Ver 1.5 ******************	
 
       EXEC SQL SELECT nvl(SUM(DECODE(prl_plg_rev_typ, 'P', prl_ordr_qty)),0), 
                       nvl(SUM(DECODE(prl_plg_rev_typ, 'I', prl_ordr_qty)),0), 
                       nvl(SUM(DECODE(prl_plg_rev_typ, 'W', prl_ordr_qty)),0) 
                INTO   :sql_prm_plg_qty, 
                       :sql_prm_sqoff_qty, 
                       :sql_prm_wdl_qty 
                FROM    prl_plg_report_log prl 
                WHERE   prl_clnt_mtch_accnt = :sql_prl_clnt_mtch_accnt 
                AND     prl_dp_clnt_accnt=:sql_prl_dp_clnt_accnt 
                AND     prl_ordr_stts = 'I' 
                AND     trim(prl_stck_cd) = trim(:sql_c_dbd_stck_cd) 
                AND     prl_rec_stts=( SELECT DECODE(pod_ordr_stts,'J','Y','N') 
																			 FROM   pod_plg_ordr_dtls 
																			 WHERE  pod_ordr_no=prl.prl_ordr_no) 
                AND     trunc(prl_recorded_on) = trunc(sysdate) 
*   ( SELECT MAX(to_date(prl_recorded_on,'dd-mon-yyyy')) FROM   prl_plg_report_log ) *
							  AND     ( prl_rej_mail_stts = 'N' OR prl_rej_mail_stts IS NULL ); 
 
				******************** Commented in Ver 1.5 ******************/

				/********************* Added in Ver 1.5 *********************/

				 EXEC SQL SELECT nvl(SUM(DECODE(prl_plg_rev_typ, 'B', prl_ordr_qty)),0),
                       nvl(SUM(DECODE(prl_plg_rev_typ, 'I', prl_ordr_qty)),0),
                       nvl(SUM(DECODE(prl_plg_rev_typ, 'U', prl_ordr_qty)),0)
                INTO   :sql_prm_plg_qty,
                       :sql_prm_sqoff_qty,
                       :sql_prm_wdl_qty
                FROM    prl_plg_report_log prl
                WHERE   prl_clnt_mtch_accnt = :sql_prl_clnt_mtch_accnt
                AND     prl_dp_clnt_accnt=:sql_prl_dp_clnt_accnt
                /** AND     prl_ordr_stts = 'I' ***/
                AND     trim(prl_stck_cd) = trim(:sql_c_dbd_stck_cd)
                AND     prl_rec_stts=( SELECT DECODE(SBD_BKUBK_STTS,'J','Y','N')
                                       FROM   SBD_SAM_BKUBK_DTLS
                                       WHERE   SBD_ORDR_NO=prl.prl_ordr_no)
                AND     trunc(prl_recorded_on) = trunc(sysdate)
								AND     ( prl_rej_mail_stts = 'N' OR prl_rej_mail_stts IS NULL );

				/********************* Added in Ver 1.5 *********************/
			
 
       if ( SQLCODE != SUCCESS ) 
       { 

					fn_userlog(c_ServiceName,"====SD:9999");
         if ( SQLCODE == NO_DATA_FOUND ) 
         { 
						fn_userlog(c_ServiceName,"sss:B1111");
            strcpy(c_msg," No Data Found while selecting the wdl qty"); 
            fn_userlog(c_ServiceName,c_msg); 
            fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
         } 
         else 
         { 
				  	fn_userlog(c_ServiceName,"====SD:B2222");
            strcpy(c_msg,"SQL ERROR while selecting the wdl qty"); 
            fn_userlog(c_ServiceName,c_msg); 
            fn_errlog( c_ServiceName, "S31125", SQLMSG, c_err_msg  ); 
            fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); 
         } 
         EXEC SQL CLOSE cur_opn_bal; 
				fn_userlog( c_ServiceName,"====SD:Abort14  "); 
         tpabort(0); 
         exit(FAILURE); 
       } 
       sprintf(c_msg,"Wdl Qty [%s] [%s] [%s]",sql_prl_clnt_mtch_accnt,sql_prl_dp_clnt_accnt,sql_c_dbd_stck_cd); 
       fn_userlog(c_ServiceName,c_msg); 
 
       /* Calculate the closing balances for the scrip */ 
    	 /*fn_userlog(c_ServiceName,"Caluculating total qty "); 

			 fn_userlog( c_ServiceName,"Opening is :%d:,Reject is :%d:,Pledge is :%d:,Squareoff is :%d:,Withdrawal is :%d:",sql_prm_opn_bal,sql_prm_rjct_qty,sql_prm_plg_qty,sql_prm_sqoff_qty,sql_prm_wdl_qty ); */ /**1.4 **/

    	 sql_prm_tot_qty = sql_prm_opn_bal + sql_prm_rjct_qty + sql_prm_plg_qty - sql_prm_sqoff_qty - sql_prm_wdl_qty; 
 
    	 sprintf(c_msg,"Closing balance :%d:",sql_prm_tot_qty); 
    	 fn_userlog(c_ServiceName,c_msg); 
 
  		 /* Inserting Values into PRM_PLG_REPORT_LOG */ 

			fn_userlog(c_ServiceName,"===============SD: Insertion in PRM ============");/**1.4 **/
	
  	   EXEC SQL 
            INSERT INTO prm_plg_report_mail 
					  (
							prm_stck_cd, 
          		prm_rep_dt, 
          		prm_dp_clnt_accnt, 
          		prm_dp_accnt, 
          		prm_clnt_mtch_accnt, 
          		prm_opn_bal, 
          		prm_rjct_qty, 
          		prm_plg_qty, 
          		prm_sqoff_qty, 
          		prm_wdl_qty, 
          		prm_tot_qty, 
          		prm_rep_status,
							PRM_ISIN_NO 																							/*** Ver 1.6 **/
					  ) 
        	  VALUES
					  ( 
          		:sql_c_dbd_stck_cd, 
        			trunc(SYSDATE), 
          		:sql_prl_dp_clnt_accnt, 
          		:sql_prl_dp_accnt, 
          		:sql_prl_clnt_mtch_accnt, 
          		:sql_prm_opn_bal, 
          		:sql_prm_rjct_qty, 
          		:sql_prm_plg_qty, 
          		:sql_prm_sqoff_qty, 
          		:sql_prm_wdl_qty, 
          		:sql_prm_tot_qty, 
							0,
							:sql_prm_isin_no                 													/*** Ver 1.6 **/
            ); 
 
 
      if(SQLCODE != SUCCESS) 
      { 

				 fn_userlog(c_ServiceName,"====SD:B4444");
        if(SQLCODE == NO_DATA_FOUND) 
        { 
						fn_userlog(c_ServiceName,"====SD:B5555");
            strcpy(c_msg,"No Data To Process..."); 
            fn_errlog(c_ServiceName,"S31130",SQLMSG,c_err_msg); 
            fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
            fn_userlog(c_ServiceName,c_msg); 
        } 
        else 
        { 
						fn_userlog(c_ServiceName,"====SD:B6666");
            fn_errlog(c_ServiceName , "S31135", SQLMSG,c_err_msg); 
            fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); 
        } 
				fn_userlog( c_ServiceName,"====SD:Abort15  ");
        tpabort(0); 
        EXEC SQL CLOSE CUR_OPN_BAL; 
        exit(FAILURE); 
      } 

			fn_userlog(c_ServiceName,"====SD:Insertion Completed Successfully"); /** 1.4**/

			sprintf(c_msg,"Update [%s] [%s] [%s]",sql_prl_clnt_mtch_accnt,sql_prl_dp_clnt_accnt,sql_c_dbd_stck_cd); /** 1.4 **/
				 fn_userlog(c_ServiceName,c_msg); /**1.4 **/
 
      EXEC SQL 
					 UPDATE prl_plg_report_log 
					 SET    prl_rec_stts='Y' 
           WHERE  prl_clnt_mtch_accnt = :sql_prl_clnt_mtch_accnt 
           AND    prl_dp_clnt_accnt=:sql_prl_dp_clnt_accnt 
           AND    trim(prl_stck_cd) =trim(:sql_c_dbd_stck_cd) 
           AND    prl_rec_stts='N'; 
 
      /*sprintf(c_msg,"Update [%s] [%s] [%s]",sql_prl_clnt_mtch_accnt,sql_prl_dp_clnt_accnt,sql_c_dbd_stck_cd); 
      fn_userlog(c_ServiceName,c_msg); */	/**1.4 **/
 
 
      if ( SQLCODE != SUCCESS ) 
      { 
				fn_userlog(c_ServiceName,"====SD:B8888");
        strcpy(c_msg,"Error while updating record status as Y"); 
        fn_userlog(c_ServiceName,c_msg); 
        fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
 
      } 

				fn_userlog(c_ServiceName,"====SD:B9999");
 
    } //End of open balance loop 
 
 
		fn_userlog(c_ServiceName,"====SD:C1111");

  	/***Closing the Cursor CUR_OPN_BAL***/ 

  	EXEC SQL CLOSE cur_opn_bal; 
 
  	if(SQLCODE != SUCCESS) 
  	{ 
			fn_userlog(c_ServiceName,"====SD:C2222");
    	sprintf(c_msg,"Error while Closing cursor CUR_GEN_REP ,sqlcode-:%d:",sqlca.sqlcode); 
    	fn_userlog(c_ServiceName,c_msg); 
    	fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
  	} 

		fn_userlog(c_ServiceName,"-----------====SD:Updating PRM_REP_STATUS -----------");	/**1.4 **/
 
  	EXEC SQL UPDATE prm_plg_report_mail 
					 	 SET    prm_rep_status='Y' 
					   WHERE  prm_clnt_mtch_accnt=:sql_prl_clnt_mtch_accnt 
					   AND    prm_dp_clnt_accnt=:sql_prl_dp_clnt_accnt
						 AND    prm_stck_cd = trim(:sql_c_dbd_stck_cd)
						 AND     PRM_ISIN_NO = :sql_prm_isin_no                 /*** Ver 1.6 **/
						 AND    prm_rep_dt = trunc(sysdate);

	  if(SQLCODE < 0 ) 
	  {
			fn_userlog(c_ServiceName,"====SD:C3333");
      sprintf(c_msg,"Error while updating the PRM_REP_STATUS %ld ,sqlcode-:%d:",sqlca.sqlcode); 
      fn_userlog(c_ServiceName,c_msg); 
      fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
	  }

		fn_userlog(c_ServiceName,"====SD:C4444");
 
	}/* END of first LOOP*/ 
 
	fn_userlog(c_ServiceName,"====SD:C5555");
  EXEC SQL CLOSE cur_gen_rep; 

  if(SQLCODE != SUCCESS) 
  { 
			fn_userlog(c_ServiceName,"====SD:C6666");
      sprintf(c_msg,"Error while Closing cursor CUR_GEN_REP ,sqlcode-:%d:",sqlca.sqlcode); 
      fn_userlog(c_ServiceName,c_msg); 
      fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
  } 

	fn_userlog(c_ServiceName,"====SD:C7777");
 
  /***Commiting the transaction***/ 

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 ) 
  { 
    fn_errlog(c_ServiceName, "S31140", LIBMSG, c_err_msg); 
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); 
		fn_userlog( c_ServiceName,"====SD:Abort16  ");	
    tpabort(0); 
		fn_userlog(c_ServiceName,"====SD:C9999");
    exit(FAILURE); 
  } 
	fn_userlog(c_ServiceName,"====SD:D1111");

	MEMSET(c_trd_dt);

	EXEC SQL
			 SELECT to_char(sysdate,'dd-Mon-YYYY')
			 INTO   :c_trd_dt
			 FROM   dual;

	if(SQLCODE != SUCCESS)
  {
      sprintf(c_msg,"Error while Closing cursor CUR_GEN_REP ,sqlcode-:%d:",sqlca.sqlcode);
      fn_userlog(c_ServiceName,c_msg);
      fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
  }	

  MEMSET(c_command);
  strcpy(c_command,"bat_coll_click NFO ");
  strcat(c_command, " NA " );
  strcat(c_command, " NA ");
  strcat(c_command, c_trd_dt );
	strcat(c_command, " 1 ");

  fn_userlog(c_ServiceName,"The Command Is :%s:",c_command);
  fn_userlog(c_ServiceName,"Before Call To Click Upload");
  

  i_ret_val = system(c_command); 

  fn_userlog(c_ServiceName," i_ret_val Is :%d:",i_ret_val);

  fn_userlog(c_ServiceName," After Call To Click Upload");

 
}/* Main Ends */ 
 
/****Function to read the values from INI file********/ 
 
int GetValue(char file_name[],char search_str[],char retstr[]) 
{ 
        FILE *ini_fp; 
        char filestr[1000]; 
 
        ini_fp = fopen( file_name, "r" ); 
        if ( ini_fp == NULL ) 
        { 
            return -1; 
        } 
        while(fgets(filestr,1000,ini_fp) != NULL) 
        { 
                fflush(NULL); 
                if(strstr(filestr,search_str) != NULL) 
                { 
                        break; 
                } 
        } 
        fclose(ini_fp); 
 
        strcpy(retstr,(strstr(filestr,"=")+1)); 
        if(retstr[strlen(retstr)-1]='\n') 
        retstr[strlen(retstr)-1]='\0'; 
 
 
        return 0; 
 
} 
 
 
