/*   Program      :   BAT_MARGN_MSTR																					*/
/*                                                                            */
/*   Input        :                                                           */
/*                                                                            */
/*   Description  :                                                           */
/*                                                                            */
/*   Log          : 1.0 27-Jul-2012  Bineet/Shamili .                         */
/*   Log          : 1.1 31-Jan-2014  Samip M.				                          */
/*   Log          : 1.3 09-Sep-2014  Sachin B				                          */
/*   Log          : 1.4 12-Dec-2014  Sachin B				                          */
/*   Log          : 1.5 13-Aug-2015  Anand Dhopte                             */
/*   Log          : 1.6 11-Jan-2016  Sachin Birje                             */
/*   Log          : 1.8 28-Feb-2022  Samip M																	*/
/******************************************************************************/
/*  1.0  -  New release                                                       */
/*  1.1  -  Change in logic of Margin calculation															*/
/*  1.2  -  logic change due to parameter 1000 of Margin calculation					*/
/*  1.3  -  VIew to FML CHanges                                             	*/
/*  1.4  -  Auto MTM CHanges                                                	*/
/*  1.5  -  Contract Master and Trade Quote Table Merger Changes              */
/*  1.6  -  Dlinking of Computation of Initial and minimum margin for FP      */
/*  1.7  -  Different ELM% for Deep OTM Option for SPAN and Non SPAN CR-ISEC14-141383 */
/*  1.8  -  Different ELM% for Deep OTM Option for SPAN and Non SPAN CR-ISEC14-141383 */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>

#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fml_def.h>
/** #include <fo_view_def.h> ** Ver 1.3 **/
#include <fn_log.h>
#include <fn_session.h>
#include <fn_battmpt.h>

#include <fn_tuxlib.h>
#include <fn_session.h>
#include <fn_read_debug_lvl.h>

#define LEN_PRCNT 6
#define LEN_FLAG 2
#define LEN_MAXARR 1000
#define ORA_TOT_ROWS sqlca.sqlerrd[2]
#define VC_INIT(x) memset(x.arr,'\0',sizeof(x.arr))

EXEC SQL BEGIN DECLARE SECTION;
	struct st_fo_undrlyng_mstr
	{
		varchar fum_xchng_cd[4];
    varchar fum_ctgry_indstk[LEN_FLAG];
    varchar fum_prdct_typ[LEN_FLAG];
    varchar fum_undrlyng[7];
    varchar fum_fp_trdng_flg[LEN_FLAG];
    varchar f_im_prcnt[LEN_PRCNT];
    varchar f_mm_prcnt[LEN_PRCNT];
    varchar fp_im_prcnt[LEN_PRCNT];
    varchar fp_mm_prcnt[LEN_PRCNT];
    /** ver 1.7 starts  **/
    varchar f_otm_im_prcnt[LEN_PRCNT];
    varchar f_otm_mm_prcnt[LEN_PRCNT];
    varchar f_spn_expr[LEN_PRCNT];
    varchar f_spn_min_expr[LEN_PRCNT];
    varchar f_spn_otm_expr[LEN_PRCNT];
    varchar f_spn_otm_min_expr[LEN_PRCNT];
    /** ver 1.7 ends **/
	} ;

EXEC SQL END DECLARE SECTION;


int updateDetails(char *c_ServiceName,char *c_msg,char *c_err_msg,int i_trnsctn, struct st_fo_undrlyng_mstr *ptr_fo_undrlyng_mstr_rec)
{
       /*** Ver 1.4 Starts Here ***/
  double d_diff_to_be_apld=0;
  double d_ers_prcnt=0;
  double d_im_prcnt=0;
  double d_mm_prcnt =0;
       
       d_mm_prcnt = atof(ptr_fo_undrlyng_mstr_rec->f_mm_prcnt.arr);

       fn_userlog(c_ServiceName," d_mm_prcnt :%lf:",d_mm_prcnt);  
       EXEC SQL 
         SELECT FMM_DIFF_APLD
           INTO :d_diff_to_be_apld
           FROM FMM_fo_MINTRGPRCNT_MSTR
          WHERE :d_mm_prcnt > FMM_PRCNT_STRT
            AND :d_mm_prcnt <= FMM_PRCNT_END; 
        if(SQLCODE!=0)
        {
          sprintf(c_msg,"Error while updating Margin Master for Exchg Cd=%s,symbol=%s,prdct=%s,sqlcode-:%d:",ptr_fo_undrlyng_mstr_rec->fum_xchng_cd.arr,ptr_fo_undrlyng_mstr_rec->fum_undrlyng.arr, ptr_fo_undrlyng_mstr_rec->fum_prdct_typ.arr, sqlca.sqlcode);
          fn_userlog(c_ServiceName,c_msg);
          fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
          fn_errlog(c_ServiceName, "S31005", SQLMSG, c_err_msg);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          return 1;
        } 
         
        d_im_prcnt = atof(ptr_fo_undrlyng_mstr_rec->f_im_prcnt.arr);
 
        d_ers_prcnt = d_im_prcnt - d_diff_to_be_apld;
        fn_userlog(c_ServiceName," d_diff_to_be_apld :%lf:",d_diff_to_be_apld);

       /*** Ver 1.4 Ends Here ****/
       /**** Ver 1.6 The initial and minimum margin % of future plus product are not being updated in ***
        **** fmm_fo_mrgn_mstr table, as they shall be updated through generic upload in BOF. ************
        **** The computation part is kept as it is ***** Ver 1.6 ****************************************/            
       EXEC SQL
              UPDATE fmm_fo_mrgn_mstr
              SET    fmm_init_mrgn_prcnt = :ptr_fo_undrlyng_mstr_rec->f_im_prcnt,
                     fmm_min_mrgn_prcnt  = :ptr_fo_undrlyng_mstr_rec->f_mm_prcnt,
                     /*** fmm_thrshd_mrgn_prcnt = :ptr_fo_undrlyng_mstr_rec->fp_mm_prcnt, ** Ver 1.6 **
                     *** fmm_span_mrgn_prcnt = :ptr_fo_undrlyng_mstr_rec->fp_im_prcnt, *** Ver 1.6 ****/
                     FMM_MIN_TRG_PRCNT = :d_ers_prcnt,   /** Ver 1.4 **/ 
                     /** ver 1.7 starts **/
                     FMM_DEEP_OTM_IM_PRCNT  = decode(:ptr_fo_undrlyng_mstr_rec->fum_prdct_typ,'F',0,:ptr_fo_undrlyng_mstr_rec->f_otm_im_prcnt),
                     FMM_DEEP_OTM_MM_PRCNT  = decode(:ptr_fo_undrlyng_mstr_rec->fum_prdct_typ,'F',0,:ptr_fo_undrlyng_mstr_rec->f_otm_mm_prcnt),
                     FMM_EXPSR              = :ptr_fo_undrlyng_mstr_rec->f_spn_expr,
                     FMM_MIN_EXPSR          = :ptr_fo_undrlyng_mstr_rec->f_spn_min_expr,
                     FMM_DEEP_OTM_EXPSR     = decode(:ptr_fo_undrlyng_mstr_rec->fum_prdct_typ,'F',0,:ptr_fo_undrlyng_mstr_rec->f_spn_otm_expr),
                     FMM_DEEP_OTM_MIN_EXPSR = decode(:ptr_fo_undrlyng_mstr_rec->fum_prdct_typ,'F',0,:ptr_fo_undrlyng_mstr_rec->f_spn_otm_min_expr)
                     /** ver 1.7 ends **/
              WHERE  FMM_UNDRLYNG = :ptr_fo_undrlyng_mstr_rec->fum_undrlyng
	      			AND		 FMM_PRDCT_TYP=:ptr_fo_undrlyng_mstr_rec->fum_prdct_typ
							AND 	 FMM_XCHNG_CD=:ptr_fo_undrlyng_mstr_rec->fum_xchng_cd;
 

              if ( SQLCODE != 0 && SQLCODE != 1403)
              {
                sprintf(c_msg,"Error while updating Margin Master for Exchg Cd=%s,symbol=%s,prdct=%s,sqlcode-:%d:",ptr_fo_undrlyng_mstr_rec->fum_xchng_cd.arr,ptr_fo_undrlyng_mstr_rec->fum_undrlyng.arr, ptr_fo_undrlyng_mstr_rec->fum_prdct_typ.arr, sqlca.sqlcode);
                fn_userlog(c_ServiceName,c_msg);
                fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
							  fn_errlog(c_ServiceName, "S31010", SQLMSG, c_err_msg);
			  				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                return 1;
              }

              if ( SQLCODE == 1403)
              {
                sprintf(c_msg,"No Data found in Margin Master for Exchg Cd=%s,symbol=%s,prdct=%s",ptr_fo_undrlyng_mstr_rec->fum_xchng_cd.arr,ptr_fo_undrlyng_mstr_rec->fum_undrlyng.arr, ptr_fo_undrlyng_mstr_rec->fum_prdct_typ.arr);
                fn_userlog(c_ServiceName,c_msg);
                fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
              }
							 
								return 0;

}


void BAT_MARGN_MSTR( int argc, char *argv[] )
{
      EXEC SQL BEGIN DECLARE SECTION;
      char c_xchng_cd[4];
			varchar v_undrlyng[7];
			varchar v_exg_nxt_trd_dt[LEN_DATE];	/*** Added for Ver 1.1 ***/
			char  c_msg[256];
			char  c_ServiceName [ 33 ];
  		char  c_err_msg [ 256 ];
		  FBFR32 *ptr_fml_buf;
			
			struct st_fo_undrlyng_mstr fo_undrlyng_mstr_rec[LEN_MAXARR];
			int i_complete_flag=0,
    			i_tot_recs=0,
    			i_tot_fetch=0,
					i_trnsctn=0,
    			i=0;
			EXEC SQL END DECLARE SECTION;

		 strcpy ( c_ServiceName, argv[0] );
		 INITBATDBGLVL(argv[0]);

		 sprintf ( c_msg, "Batch process %s started", argv[0] );
  	 fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

		 strcpy ( c_msg, "Creating data. Please wait ... " );
		 fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		
		 if( argc < 4 )
  	 {
    		fn_bat_pst_msg ( c_ServiceName, "Invalid Number of Arguments", c_tag );
   			return;            
		 }
			
     MEMSET(c_xchng_cd);
		 strcpy( c_xchng_cd, argv[4] );
			
		 /*fn_init_ddr_pop ( "NA", "NA", "NA" );*/


		 fn_userlog(c_ServiceName,"================= Program started===============");

	   i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

     if ( i_trnsctn == -1 )
     {
				 fn_userlog(c_ServiceName,"1111");
         fn_errlog(c_ServiceName, "S31015", LIBMSG, c_err_msg);
         fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
         return;
     }


	 /************* Checking if both the SPAN files are loaded *****************/


		EXEC SQL
          SELECT 1
          INTO   :i
          FROM   SPM_SPAN_PAR_MSTR
          WHERE  (SPM_T0_UPLD_DT IS NULL 
          OR      SPM_T1_UPLD_DT IS NULL)
          AND    ROWNUM < 2;

    if(SQLCODE != 0  && SQLCODE != NO_DATA_FOUND) 
    {
      sprintf(c_msg,"Error in selecting from SPAN Master , sqlcode-:%d:",sqlca.sqlcode);
      fn_userlog(c_ServiceName,c_msg);
      fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
      fn_errlog(c_ServiceName, "S31020", SQLMSG, c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return;
    }	

		if( i > 0)
		{

       sprintf(c_msg,"SPAN T0 or SPAN T1 is not loaded ");
       fn_userlog(c_ServiceName,c_msg);
       fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
       fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       return;


		}

/*** Added for Ver 1.1 ***/
		EXEC SQL
				SELECT to_char( exg_nxt_trd_dt, 'DD-Mon-YYYY' )
				INTO :v_exg_nxt_trd_dt
				FROM	exg_xchng_mstr
				WHERE exg_xchng_cd = :c_xchng_cd;

  if ( SQLCODE != 0 )
  {
      sprintf(c_msg,"Error in selecting Current Date , sqlcode-:%d:",sqlca.sqlcode);
      fn_userlog(c_ServiceName,c_msg);
      fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
      fn_errlog(c_ServiceName, "S31025", SQLMSG, c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return;
  }

  SETNULL(v_exg_nxt_trd_dt);

/*** End for Ver 1.1 ***/


		/***************Checking if SPAN T1 value is greater than SPAN T0 ************/

		i = 0;
		
		 EXEC SQL 
					SELECT SPM_UNDRLYNG,1 
					INTO   :v_undrlyng, :i 
					FROM   SPM_SPAN_PAR_MSTR 
					WHERE  SPM_T0_RQRD_MRGN/SPM_T0_SPAN_VAL > SPM_T1_RQRD_MRGN/SPM_T1_SPAN_VAL
					AND    ROWNUM < 2;
	
	  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND  ) 
    {
      sprintf(c_msg,"Error in selecting from SPAN Master , sqlcode-:%d:",sqlca.sqlcode);
      fn_userlog(c_ServiceName,c_msg);
      fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
			fn_errlog(c_ServiceName, "S31030", SQLMSG, c_err_msg);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return;
    }

    if(i > 0)
	  {
			SETNULL(v_undrlyng);
      sprintf(c_msg,"T0 TotReqMrg /T0 SPANTotVal is greater than T1 TotReqMrg/T1 SPANTotVal for symbol %s",v_undrlyng.arr);
      fn_userlog(c_ServiceName,c_msg);
      fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			return;

	  }

		/** Added for Ver 1.1 ***/
		/** 1000 added for Ver 1.2 ***/
		EXEC SQL 
		UPDATE SPM_SPAN_PAR_MSTR
		SET SPM_LST_TRD_PRC = (SELECT DECODE(FTQ_LST_TRD_PRC,0,FTQ_CLS_PRC,FTQ_LST_TRD_PRC)/100 * 1000
														FROM FTQ_FO_TRD_QT
														WHERE SPM_UNDRLYNG = FTQ_UNDRLYNG
														AND SPM_XCHNG_CD = FTQ_XCHNG_CD
														AND FTQ_PRDCT_TYP = 'F'	
														AND FTQ_EXPRY_DT = (
                                                /*** Commented in Ver 1.5 *** 
                                                
                                                SELECT MIN(FCM_EXPRY_DT) FROM FCM_FO_CNTRCT_MSTR
																								WHERE FCM_UNDRLYNG = FTQ_UNDRLYNG
																								AND FCM_XCHNG_CD = FTQ_XCHNG_CD
																								AND FTQ_PRDCT_TYP = FCM_PRDCT_TYP
																								AND FCM_EXPRY_DT > :v_exg_nxt_trd_dt

                                                ***/
          
                                                /*** Ver 1.5 Starts ***/
                                                 SELECT MIN(FTQ_EXPRY_DT)
                                                FROM   FTQ_FO_TRD_QT
                                                WHERE  FTQ_UNDRLYNG=SPM_UNDRLYNG
                                                AND    FTQ_XCHNG_CD=SPM_XCHNG_CD
                                                AND    FTQ_PRDCT_TYP = 'F'
                                                AND    FTQ_EXPRY_DT > :v_exg_nxt_trd_dt
                                                /*** Ver 1.5 Ends   ***/   
                                              
                                                                      ))
		WHERE SPM_XCHNG_CD = :c_xchng_cd;

      if ( SQLCODE != 0 && SQLCODE != 1403)
      {
        sprintf(c_msg,"Error while getting LTP, sqlcode-:%d:", sqlca.sqlcode);
        fn_userlog(c_ServiceName,c_msg);
        fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
        fn_errlog(c_ServiceName, "S31035", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return;
      }

    /** End for Ver 1.1 ***/

		/*** Commented for Ver 1.1 ***/
		/** EXEC SQL 
				 UPDATE FUM_FO_UNDRLYNG_MSTR 
				 SET    FUM_SPAN_PRCNTG= (SELECT DECODE(FUM_FILE_TYPE,'T0',
																				SPM_T0_RQRD_MRGN/SPM_T0_SPAN_VAL*100,
																				SPM_T1_RQRD_MRGN/SPM_T1_SPAN_VAL*100) 
					 												FROM  SPM_SPAN_PAR_MSTR 
																	WHERE SPM_XCHNG_CD=FUM_XCHNG_CD 
																	AND   SPM_UNDRLYNG=FUM_UNDRLYNG),
					 			FUM_FP_SPAN_PRCNTG= (SELECT DECODE(FUM_FP_FILE_TYPE,'T0',
																				SPM_T0_RQRD_MRGN/SPM_T0_SPAN_VAL*100,
																				SPM_T1_RQRD_MRGN/SPM_T1_SPAN_VAL*100) 
					 												 FROM SPM_SPAN_PAR_MSTR 
																	 WHERE SPM_XCHNG_CD=FUM_XCHNG_CD 
																	 AND SPM_UNDRLYNG=FUM_UNDRLYNG) 
				  WHERE (FUM_XCHNG_CD,FUM_UNDRLYNG) 
					IN    (SELECT SPM_XCHNG_CD, SPM_UNDRLYNG FROM SPM_SPAN_PAR_MSTR)
					AND FUM_XCHNG_CD=:c_xchng_cd;****/
			/*** Comment end for Ver 1.1 ***/

		/** Added for Ver 1.1 **/
		EXEC SQL 
				 UPDATE FUM_FO_UNDRLYNG_MSTR 
				 SET    FUM_SPAN_PRCNTG= (SELECT NVL(DECODE(FUM_FILE_TYPE,'T0',
																				SPM_T0_RQRD_MRGN / SPM_LST_TRD_PRC * 100,
																				SPM_T1_RQRD_MRGN / SPM_LST_TRD_PRC * 100),0) 
					 												FROM  SPM_SPAN_PAR_MSTR
																	WHERE SPM_XCHNG_CD=FUM_XCHNG_CD 
																	AND   SPM_UNDRLYNG=FUM_UNDRLYNG),
					 			FUM_FP_SPAN_PRCNTG= (SELECT NVL(DECODE(FUM_FP_FILE_TYPE,'T0',
																				SPM_T0_RQRD_MRGN / SPM_LST_TRD_PRC * 100,
																				SPM_T1_RQRD_MRGN / SPM_LST_TRD_PRC * 100),0) 
					 												 FROM SPM_SPAN_PAR_MSTR
																	 WHERE SPM_XCHNG_CD=FUM_XCHNG_CD 
																	 AND SPM_UNDRLYNG=FUM_UNDRLYNG)
				  WHERE (FUM_XCHNG_CD,FUM_UNDRLYNG) 
					IN    (SELECT SPM_XCHNG_CD, SPM_UNDRLYNG FROM SPM_SPAN_PAR_MSTR)
					AND FUM_XCHNG_CD=:c_xchng_cd;

		/** End for Ver 1.1 **/

			if ( SQLCODE != 0 && SQLCODE != 1403)
  		{
        sprintf(c_msg,"Error while updating underlying Master , sqlcode-:%d:", sqlca.sqlcode);
        fn_userlog(c_ServiceName,c_msg);
        fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
        fn_errlog(c_ServiceName, "S31040", SQLMSG, c_err_msg);
			  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return;
  		}

			sprintf(c_msg,"Total record updated in Underlying Master :%d:",ORA_TOT_ROWS);
			fn_userlog(c_ServiceName,c_msg);
			fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
   
      /**** ver 1.7 starts for updating FTQ wiht OTM/OTH Flag *****/
      EXEC SQL
      update FTQ_FO_TRD_QT
      set FTQ_OTM_FLG =  'N'
      where FTQ_OTM_FLG =  'Y';
  
      if ( SQLCODE != 0 && SQLCODE != 1403)
      {
        sprintf(c_msg,"Error while resetting FTQ OTM FLAG , sqlcode-:%d:", sqlca.sqlcode);
        fn_userlog(c_ServiceName,c_msg);
        fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
        fn_errlog(c_ServiceName, "S31045", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return;
      }

			/** Ver 1.8 **/
			sprintf(c_msg,"Total record updated in FTQ as N :%d:",ORA_TOT_ROWS);
			fn_userlog(c_ServiceName,c_msg);
			fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
			/** Ver 1.8 end **/
  
			/**** Commented for Ver 1.8 ****
      EXEC SQL
      update FTQ_FO_TRD_QT FTQ
      set FTQ.FTQ_OTM_FLG =  'Y'      ** OTM Flag is set 'Y' for Deep OTM contracts **
      where    1 =   ( select  1
                       from FOC_FO_OTM_CNTRCTS FOC,SEM_STCK_MAP SEM
                       where rtrim(FOC.FOC_STCK_NM) = rtrim(SEM.SEM_MAP_VL)
                       AND SEM.SEM_ENTTY = 3
                       AND FTQ.FTQ_PRDCT_TYP = 'O'
                       AND FTQ.FTQ_UNDRLYNG = SEM.SEM_STCK_CD
                       AND FTQ.FTQ_EXPRY_DT = FOC.FOC_EXPRY_DT
                       AND FTQ.FTQ_STRK_PRC = FOC.FOC_STRK_PRC*100
                       AND FTQ.FTQ_OPT_TYP  = decode(FOC.FOC_OPT_TYP,'CE','C','P')
                       AND FOC.FOC_ACTV_FLG = 'Y'
                       AND ROWNUM < 2
                       );

			**** Ver 1.8 ****/

			/*** Added for Ver 1.8 ***/

			EXEC SQL
			UPDATE FTQ_FO_TRD_QT FTQ
  		SET FTQ.FTQ_OTM_FLG =  'Y'
  		WHERE    EXISTS  ( SELECT  1
				   FROM FOC_FO_OTM_CNTRCTS FOC,SEM_STCK_MAP SEM
				   WHERE RTRIM(FOC.FOC_STCK_NM) = RTRIM(SEM.SEM_MAP_VL)
				   AND SEM.SEM_ENTTY = 3
				   AND FTQ.FTQ_PRDCT_TYP = 'O'
				   AND FTQ.FTQ_UNDRLYNG = SEM.SEM_STCK_CD
				   AND FTQ.FTQ_EXPRY_DT = FOC.FOC_EXPRY_DT
				   AND FTQ.FTQ_STRK_PRC = FOC.FOC_STRK_PRC*100
				   AND FTQ.FTQ_OPT_TYP  = DECODE(FOC.FOC_OPT_TYP,'CE','C','P')
				   AND FOC.FOC_ACTV_FLG = 'Y'
				   AND FTQ.FTQ_XCHNG_CD = :c_xchng_cd
				   AND FTQ.FTQ_EXER_TYP = SUBSTR(FOC.FOC_OPT_TYP,2,1)
				   ); 

			sprintf(c_msg,"Total record updated in FTQ as Y :%d:",ORA_TOT_ROWS);
			fn_userlog(c_ServiceName,c_msg);
			fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);

			/** Ver 1.8 end **/

			/** End for Ver 1.8 ***/

      if ( SQLCODE != 0 && SQLCODE != 1403)
      {
        sprintf(c_msg,"Error while updating FTQ for OTH/OTM , sqlcode-:%d:", sqlca.sqlcode);
        fn_userlog(c_ServiceName,c_msg);
        fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
        fn_errlog(c_ServiceName, "S31050", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return;
      }

      /**** ver 1.7 Ends ****/

			EXEC SQL
  				DECLARE cur_undrlyng_dtls CURSOR FOR
					SELECT FUM_XCHNG_CD,
								FUM_CTGRY_INDSTK,
								FUM_PRDCT_TYP,
								FUM_UNDRLYNG,
								FUM_FP_TRDNG_FLG, 
								NVL(F_IM_PRCNT,0), 
								NVL(F_MM_PRCNT,0), 
								NVL(FP_IM_PRCNT,0),
								NVL(FP_MM_PRCNT,0),
                NVL(F_DEEP_OTM_IM_PRCNT,0),  /** ver 1.7 **/
                NVL(F_DEEP_OTM_MM_PRCNT,0),  /** ver 1.7 **/
                NVL(F_SPN_EXPSR,0),          /** ver 1.7 **/
                NVL(F_SPN_MIN_EXPSR,0),      /** ver 1.7 **/
                NVL(F_SPN_OTM_EXPSR,0),      /** ver 1.7 **/
                NVL(F_SPN_OTM_MIN_EXPSR,0)   /** ver 1.7 **/
					FROM (
								SELECT FUM_XCHNG_CD,
								FUM_CTGRY_INDSTK,
								FUM_PRDCT_TYP,
								FUM_UNDRLYNG,
								FUM_FP_TRDNG_FLG,
								GREATEST( FUM_SPAN_PRCNTG+FUM_IM_BUFF_PRCNTG+FEU.OTH, FUM_MIN_IM_PRCNTG ) F_IM_PRCNT, 	 /** ver 1.7 **/	
								GREATEST(GREATEST( FUM_SPAN_PRCNTG+FUM_IM_BUFF_PRCNTG+FEU.OTH,FUM_MIN_IM_PRCNTG ) 
																	 - FUM_IM_MM_DIFF,FUM_MIN_MM_PRCNTG) F_MM_PRCNT,                       /** ver 1.7 **/
								GREATEST( FUM_FP_SPAN_PRCNTG+FUM_FP_IM_BUFF_PRCNTG,FUM_FP_MIN_IM_PRCNTG)FP_IM_PRCNT,
							  GREATEST(GREATEST(FUM_FP_SPAN_PRCNTG+FUM_FP_IM_BUFF_PRCNTG,FUM_FP_MIN_IM_PRCNTG ) 
																	 - FUM_FP_IM_MM_DIFF,FUM_FP_MIN_MM_PRCNTG) FP_MM_PRCNT,
                /** ver 1.7 starts **/
                GREATEST( FUM_SPAN_PRCNTG+FUM_IM_BUFF_PRCNTG+FEU.OTM, FUM_MIN_IM_PRCNTG ) F_DEEP_OTM_IM_PRCNT,
                GREATEST(GREATEST( FUM_SPAN_PRCNTG+FUM_IM_BUFF_PRCNTG+FEU.OTM ,FUM_MIN_IM_PRCNTG )
                                   - FUM_IM_MM_DIFF,FUM_MIN_MM_PRCNTG) F_DEEP_OTM_MM_PRCNT,
                ( NVL(FUM_SPN_IM_BUFF_PRCNTG,0) + FEU.OTH ) F_SPN_EXPSR,
                ( NVL(FUM_SPN_MM_BUFF_PRCNTG,0) + FEU.OTH ) F_SPN_MIN_EXPSR,
                ( NVL(FUM_SPN_IM_BUFF_PRCNTG,0) + FEU.OTM ) F_SPN_OTM_EXPSR,
                ( NVL(FUM_SPN_MM_BUFF_PRCNTG,0) + FEU.OTM ) F_SPN_OTM_MIN_EXPSR   
                /** ver 1.7 ends **/
							 	FROM  FUM_FO_UNDRLYNG_MSTR,SEM_STCK_MAP,( select FEU_STCK_NM,sum( decode(FEU_INTRUMENT,'OTH',NVL(FEU_TOTAL_ELM_MRGN_PRCNT,0),0) ) OTH , sum( decode(FEU_INTRUMENT,'OTM' ,NVL(FEU_TOTAL_ELM_MRGN_PRCNT,0),0) ) OTM from FEU_FO_ELM_UPLD where FEU_ACTV_FLG = 'Y' group by FEU_STCK_NM ) FEU                                   /** ver 1.7 **/
							 	WHERE FUM_XCHNG_CD=:c_xchng_cd 
                and rtrim(FEU.FEU_STCK_NM) = rtrim(SEM_MAP_VL)   /** ver 1.7 **/
                and SEM_ENTTY = 3                                /** ver 1.7 **/
                and FUM_UNDRLYNG = SEM_STCK_CD                   /** ver 1.7 **/
	  					);


 			EXEC SQL OPEN cur_undrlyng_dtls;
   		if(SQLCODE != 0)
   		{
					sprintf(c_msg,"Error in opening cursor cur_undrlyng_dtls, sqlcode-:%d:",sqlca.sqlcode);
		  		fn_userlog(c_ServiceName,c_msg);
				  fn_errlog(c_ServiceName, "S31055", SQLMSG, c_err_msg);
			    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	  			return;
   		}

	i_complete_flag=1;
	while (i_complete_flag)
	{
	    for(i=0; i<LEN_MAXARR; i++)
      {
        VC_INIT(fo_undrlyng_mstr_rec[i].fum_xchng_cd );
        VC_INIT(fo_undrlyng_mstr_rec[i].fum_ctgry_indstk );
        VC_INIT(fo_undrlyng_mstr_rec[i].fum_prdct_typ );
        VC_INIT(fo_undrlyng_mstr_rec[i].fum_undrlyng );
        VC_INIT(fo_undrlyng_mstr_rec[i].fum_fp_trdng_flg );
        VC_INIT(fo_undrlyng_mstr_rec[i].f_im_prcnt );
        VC_INIT(fo_undrlyng_mstr_rec[i].f_mm_prcnt );
        VC_INIT(fo_undrlyng_mstr_rec[i].fp_im_prcnt );
        VC_INIT(fo_undrlyng_mstr_rec[i].fp_mm_prcnt );
        /** ver 1.7 starts **/
        VC_INIT(fo_undrlyng_mstr_rec[i].f_otm_im_prcnt );
        VC_INIT(fo_undrlyng_mstr_rec[i].f_otm_mm_prcnt );
        VC_INIT(fo_undrlyng_mstr_rec[i].f_spn_expr );
        VC_INIT(fo_undrlyng_mstr_rec[i].f_spn_min_expr );
        VC_INIT(fo_undrlyng_mstr_rec[i].f_spn_otm_expr );
        VC_INIT(fo_undrlyng_mstr_rec[i].f_spn_otm_min_expr );
        /** ver 1.7 ends **/
      }	


	  	EXEC SQL 
					 FETCH cur_undrlyng_dtls 
					 INTO  :fo_undrlyng_mstr_rec;

      if(SQLCODE != 0 && sqlca.sqlcode != 1403)
      {

			  sprintf(c_msg,"Error in fetching cursor cur_undrlyng_dtls, sqlcode-:%d:",sqlca.sqlcode);
	  		fn_userlog(c_ServiceName,c_msg);
	  		EXEC SQL CLOSE cur_undrlyng_dtls;
        fn_errlog(c_ServiceName, "S31060", SQLMSG, c_err_msg);
			  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	  		return;
      }
      
      i_tot_fetch = ORA_TOT_ROWS - i_tot_recs;
      i_tot_recs = ORA_TOT_ROWS;

      fn_userlog(c_ServiceName,"Total Recs %d Fetched Recs %d", i_tot_recs, i_tot_fetch);

      if ( i_tot_fetch < LEN_MAXARR)
      {
				i_complete_flag=0;
      }


      for(i=0; i<i_tot_fetch; i++)
      {
				SETNULL(fo_undrlyng_mstr_rec[i].fum_xchng_cd );
				SETNULL(fo_undrlyng_mstr_rec[i].fum_ctgry_indstk );
				SETNULL(fo_undrlyng_mstr_rec[i].fum_prdct_typ );
				SETNULL(fo_undrlyng_mstr_rec[i].fum_undrlyng );
				SETNULL(fo_undrlyng_mstr_rec[i].fum_fp_trdng_flg );
				SETNULL(fo_undrlyng_mstr_rec[i].f_im_prcnt );
				SETNULL(fo_undrlyng_mstr_rec[i].f_mm_prcnt );
				SETNULL(fo_undrlyng_mstr_rec[i].fp_im_prcnt );
				SETNULL(fo_undrlyng_mstr_rec[i].fp_mm_prcnt );
        /** ver 1.7  starts **/
        SETNULL(fo_undrlyng_mstr_rec[i].f_otm_im_prcnt );
        SETNULL(fo_undrlyng_mstr_rec[i].f_otm_mm_prcnt );
        SETNULL(fo_undrlyng_mstr_rec[i].f_spn_expr );
        SETNULL(fo_undrlyng_mstr_rec[i].f_spn_min_expr );
        SETNULL(fo_undrlyng_mstr_rec[i].f_spn_otm_expr );
        SETNULL(fo_undrlyng_mstr_rec[i].f_spn_otm_min_expr );
        /** ver 1.7  ends **/
	
				if(updateDetails(c_ServiceName,c_msg,c_err_msg,i_trnsctn,&fo_undrlyng_mstr_rec[i]) == 1)
				{
					fn_userlog(c_ServiceName,"Error in function updateDetails");	
					return;
				}
      }
	}

      EXEC SQL CLOSE cur_undrlyng_dtls;
      if(SQLCODE != 0)
      {
			  sprintf(c_msg,"Error in Closing cursor cur_undrlyng_dtls, sqlcode-:%d:",sqlca.sqlcode);
	  		fn_userlog(c_ServiceName,c_msg);
			  fn_errlog(c_ServiceName, "S31065", SQLMSG, c_err_msg);
			  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	  		return;
      }


  	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  	{
    	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      fn_errlog(c_ServiceName, "S31070", LIBMSG, c_err_msg);
   	  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	return;
  	}
  		return;
}
int fn_bat_init ( int argc, char *argv[] )
{

  fn_userlog("bat_margn_mstr","inside INIT ");
  fn_var = BAT_MARGN_MSTR;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}

