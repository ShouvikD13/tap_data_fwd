/******************************************************************************/
/*  Program           : BAT_PRC_INVK				                                  */
/*                                                                            */
/*  Input             : Config file name 											 			          */
/*                      Exchange Code                                         */
/*                      Pipe ID                                               */
/*											Settlement No																					*/
/*                      Trade Date																						*/ 
/*											Order exchange                                        */
/*																																						*/
/*  Output            :  Integer 1 on sucess and 0 on fail                    */
/*                                                                            */
/*  Description       :  This process finds all records Which are required 		*/	
/*											 for running service sfo_plc_plg for invoke           */
/*                                                                            */
/*                                                                            */
/*  Log               : 1.0   15-oct-2004   Infotech|Himanshu Ahire           */
/*										:	1.1		01-Mar-2008		Infotech|Ranjit										*/
/*										:	1.2		22-Apr-2015		Infotech|Samip M									*/
/*                    : 1.3   15-Apr-2019   Infotech|Tanmay Patel             */
/*                    : 1.4   10-Jul-2020   Infotech|Anand Dhopte             */ 
/*                    : 1.5   13-Dec-2022   Infotech|Samip M									*/
/*  Reviewed By       : 1.0                                                   */
/*                                                                            */
/******************************************************************************/
/*   1.0  -  New release                                                      */
/*	 1.1	-  IBM Migration																										*/
/*	 1.2	-  Changes for SAM Block Unblock																		*/
/*   1.3  -  PRD ENTRY in No Data Found Case                                  */
/*   1.4  -  CR_ISEC14_138293 Margin Pledge Model Changes                     */    
/*   1.5  -  Spot Invocation																									*/
/******************************************************************************/

#include "fn_collateral.h"
#include <fn_read_debug_lvl.h>	/* ver 1.1 */

#define		BUF_MULTIPLY 1
#define		MAX	10			/** Changed from 9 to 10 for Ver 1.4 **/

int main (int argc , char* argv[])
{
		char	c_ServiceName [ 33 ];
		char	c_err_msg[256];
		char	c_clm_mtch_accnt[11];
		char	c_dp_id[9];
		char	c_dp_clnt_id[9];
		char	c_isin_nmbr[13];
		char	c_ordr_rfrnc[19];
		char	c_stck_cd[7];
		char  c_channel[4];
		char	c_rout_crt[4];
		char  c_usr_id[7];
		char  c_tag[32];
		char  c_msg[256 ];
		char  c_trt_rowid1[19];
		char  c_trd_date[12];
		char  c_xchng_cd[4];

		char	c_opt_typ;
		char  c_msc_char;

		int  i;
		int  i_err[MAX];
		int  i_returncode;
		int  i_trnsctn;
		int  i_cnt;

		long l_exctd_qty;
		long li_Obuf_len=0;
		long l_blck_sale;
		long l_bufferlength;
		long l_sssn_id;
		long l_action_id;
		long l_count =0;
		long l_cnt = 0;
		long l = 0;
		long l_sttlmnt_no=0;

		FBFR32 *ptr_fml_Ibuffer = (FBFR32 *)NULL;         /* Pointer to FML Input buffer */
		FBFR32 *ptr_fml_Obuffer = (FBFR32 *)NULL;

		NULLCHAR(c_ServiceName);
		NULLCHAR(c_err_msg);
		NULLCHAR(c_msg);
		NULLCHAR(c_tag);
		NULLCHAR(c_trd_date);
		NULLCHAR(c_xchng_cd);


		strcpy(c_ServiceName ,"bat_prc_invk");

		INITBATDBGLVL(argv[0]);		/* ver 1.1 */

		if(argc != 6)		/*** Changed from 7 to 6 for Ver 1.4 ***/
		{
				/** fn_userlog(c_ServiceName,	"Usage: bat_prc_invk <Config File> <Exchange Cd> <Pipe Id>\ 
<Settlement No> <Trade Date> <Order exchange>");		*** Commented for Ver 1.4 **/
				fn_userlog(c_ServiceName,	"Usage: bat_prc_invk <Config File> <Exchange Cd> <Pipe Id> <Trade Date> <Order exchange>");	/** Ver 1.4 **/
				exit(-1);
		}

		 strcpy( c_msg, "STAGE 1.0 Starting BAT_PRC_INVK...");
		 fn_userlog( c_ServiceName,c_msg);
		 fn_userlog( c_ServiceName,"config File :%s:"		,argv[1]);
		 fn_userlog( c_ServiceName,"Exchange Code :%s:"	,argv[2]);
		 fn_userlog( c_ServiceName,"Pipe Id :%s:"				,argv[3]);
		 /** fn_userlog( c_ServiceName,"Settlement No :%s:"	,argv[4]); ** Commented for Ver 1.4 **/
	
		
		sprintf(c_tag,"%s_%s",c_ServiceName,argv[1]);	
		init_bat(c_ServiceName,argv[2],argv[3]);

		if(DEBUG_MSG_LVL_3)		/* ver 1.1 */ 
		{	
			fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
		}

		/*** Commented for Ver 1.4 ****
	  l_sttlmnt_no = atol(argv[4]);	

		if(l_sttlmnt_no <= 0)
		{
				strcpy(c_msg,"Invalid Settlement Number Enter, Settlement No Should be Number");
				fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
				fn_userlog(c_ServiceName,c_msg);
				destroy_bat();
		}

		fn_userlog(c_ServiceName,"Settlement No :%ld:",l_sttlmnt_no);

		*** Ver 1.4 ***/

		fn_userlog( c_ServiceName,"Trade Date :%s:"		,argv[4]);					/*** Changed from 5 to 4 for Ver 1.4 **/
		fn_userlog( c_ServiceName,"Order Exchange Code :%s:"	,argv[5]);	/*** Changed from 6 to 5 for Ver 1.4 **/

		strcpy(c_trd_date,argv[4]);		/*** Changed from 5 to 4 for Ver 1.4 **/
		strcpy(c_xchng_cd,argv[5]);		/*** Changed from 6 to 5 for Ver 1.4 **/

		i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

		if ( i_trnsctn == -1 )
		{
				fn_errlog(c_ServiceName, "S31005", LIBMSG, c_err_msg);
				fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				destroy_bat();
		}

		EXEC SQL DELETE TEMP_ROWID_TABLE;


		/************* Select All Executed or Partially Executed Orders ***********/

		EXEC SQL
		INSERT INTO TEMP_ROWID_TABLE
		(
				TRT_ROWID1
		)
		(
				SELECT  rowid
        FROM    ORD_ORDR_DTLS
        WHERE   /* ORD_MSC_CHAR  = 'P'  Commented in Ver 1.4 */
                ORD_MSC_CHAR in ('P','G')   /* Added in Ver 1.4 */
				AND			ORD_TRD_DT = to_date(:c_trd_date,'dd-Mon-yyyy')
				AND     ORD_XCHNG_CD = :c_xchng_cd
				/** AND			ORD_XCHNG_SGMNT_STTLMNT = :l_sttlmnt_no ** Commented for Ver 1.4 **/
        AND     ORD_EXCTD_QTY > 0
		);

		if(SQLCODE != 0)
		{
				if(SQLCODE == NO_DATA_FOUND)
				{
						strcpy(c_msg,"No Data To Process...");
						fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
						fn_userlog(c_ServiceName,c_msg);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );  /*** Ver 1.3 ***/
				  goto PRD_ENTRY;   /*** Ver 1.3 ****/ 
        }
				else
				{
						fn_errlog(c_ServiceName , "S31010", SQLMSG,c_err_msg);
						fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
				}

				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				destroy_bat();
		}

		if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
		{
				fn_errlog(c_ServiceName, "S31015", LIBMSG, c_err_msg);
				fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				destroy_bat();
		}

		EXEC SQL
		SELECT	count(*)
		INTO   	:l_cnt
		FROM   	TEMP_ROWID_TABLE;

		if(SQLCODE != 0)
		{
				fn_errlog(c_ServiceName , "S31020", SQLMSG,c_err_msg);
				fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
				destroy_bat();
		}

		if(l_cnt <= 0)
		{
				strcpy(c_msg,"No Data Found To Process..");
				fn_userlog(c_ServiceName,c_msg);
				fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
		/**		destroy_bat();  ** commented in Ver 1.3 ***/
        goto PRD_ENTRY;   /*** Ver 1.3 ****/
		}

		ptr_fml_Ibuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

		if (ptr_fml_Ibuffer == NULL)
		{
				fn_errlog(c_ServiceName, "S31025", TPMSG, c_err_msg);
				fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
				destroy_bat();
		}

		ptr_fml_Obuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

		if (ptr_fml_Obuffer == NULL)
		{
				fn_errlog(c_ServiceName, "S31030", TPMSG, c_err_msg);
				fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
				tpfree((char *)ptr_fml_Ibuffer);
				destroy_bat();
		}

		sprintf(c_msg,"Total %ld records needs to be updated",l_cnt);
		fn_userlog(c_ServiceName,c_msg);
		fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);

		l_count = 0;

		for(l=0; l < l_cnt; l++) /*** Fetch Data From Cursor ***/
		{
				i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

				if ( i_trnsctn == -1 )
				{
						fn_errlog(c_ServiceName, "S31035", LIBMSG, c_err_msg);
						fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpfree((char *)ptr_fml_Ibuffer);
						tpfree((char *)ptr_fml_Obuffer);
						destroy_bat();
				}

				NULLCHAR(c_clm_mtch_accnt);
				NULLCHAR(c_dp_id);
				NULLCHAR(c_dp_clnt_id);
				NULLCHAR(c_isin_nmbr);
				NULLCHAR(c_ordr_rfrnc);
				NULLCHAR(c_stck_cd);
				NULLCHAR(c_trt_rowid1);
				c_msc_char = '\0';

				MEMSET(c_channel);		/** Ver 1.5 **/

				EXEC SQL
				SELECT  ORD_CLM_MTCH_ACCNT,
								ORD_DP_ID,
								ORD_DP_CLNT_ID,
								ORD_ISIN_NMBR,
								ORD_ORDR_RFRNC,
								ORD_STCK_CD,
								ORD_MSC_CHAR,
								ORD_CHANNEL				/** Ver 1.5 **/
				INTO		:c_clm_mtch_accnt,
								:c_dp_id,
								:c_dp_clnt_id,
								:c_isin_nmbr,
								:c_ordr_rfrnc,
								:c_stck_cd,
								:c_msc_char,
								:c_channel				/** Ver 1.5 **/
				FROM    ORD_ORDR_DTLS
				WHERE   rowid =
				(
						SELECT TRT_ROWID1
						FROM   TEMP_ROWID_TABLE
						where rownum < 2
				) ;


				if(SQLCODE != 0)
				{
						fn_errlog(c_ServiceName,"S31040",SQLMSG,c_err_msg);
						fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);

						if(SQLCODE == NO_DATA_FOUND || SQLCODE == NULL_RETURN)
						{
									
									/********************************************************** 
											If  NO_DATA_FOUND or NULL RETURN  than need to skip
											record and also delete it from temp table as if not
											deleted same record will get selected. 
									**********************************************************/ 

									EXEC SQL DELETE TEMP_ROWID_TABLE
									WHERE rownum <2; 

									if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
									{
												fn_errlog(c_ServiceName, "S31045", LIBMSG, c_err_msg);
												fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
												fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
												tpfree((char *)ptr_fml_Ibuffer);
												tpfree((char *)ptr_fml_Obuffer);
												destroy_bat();
									}

									fn_userlog(c_ServiceName , "ERROR : NO_DATA FOUND  Skipping Record....."); 
									continue;
						}

						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpfree((char *)ptr_fml_Ibuffer);
						tpfree((char *)ptr_fml_Obuffer);
						destroy_bat();
				}

				fn_userlog(c_ServiceName,"Match Account :%s:",c_clm_mtch_accnt);
				fn_userlog(c_ServiceName,"Dp id :%s:",c_dp_id);
				fn_userlog(c_ServiceName,"Dp Client Id :%s:",c_dp_clnt_id);
				fn_userlog(c_ServiceName,"ISIN number :%s:",c_isin_nmbr);
				fn_userlog(c_ServiceName,"Order Ref :%s:",c_ordr_rfrnc);
				fn_userlog(c_ServiceName,"Stock Code :%s:",c_stck_cd);
				fn_userlog(c_ServiceName,"c_msc_char :%c:",c_msc_char);

				EXEC SQL DELETE TEMP_ROWID_TABLE
				WHERE rownum <2; 

				if(SQLCODE != 0)
				{
						fn_errlog(c_ServiceName , "S31050", SQLMSG,c_err_msg);
						fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpfree((char *)ptr_fml_Ibuffer);
						tpfree((char *)ptr_fml_Obuffer);
						destroy_bat();
				}

				if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
				{
						fn_errlog(c_ServiceName, "S31055", LIBMSG, c_err_msg);
						fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpfree((char *)ptr_fml_Ibuffer);
						tpfree((char *)ptr_fml_Obuffer);
						destroy_bat();
				}


				/************ Select Total Executed Quantity ***************/

				l_exctd_qty = 0;
				EXEC SQL
				SELECT	sum(TRD_EXCTD_QTY)
				INTO		:l_exctd_qty
				FROM		TRD_TRD_DTLS
				WHERE		TRD_ORDR_RFRNC= :c_ordr_rfrnc
				AND			TRD_CLM_MTCH_ACCNT 	= :c_clm_mtch_accnt;

				if(SQLCODE != 0)
				{
						if(SQLCODE == NO_DATA_FOUND)
						{
								sprintf(c_msg, "Order :%s: is not Executed Skipping... ",c_ordr_rfrnc);
								fn_userlog(c_ServiceName ,c_msg ); 
								continue;
						}

						fn_errlog(c_ServiceName , "S31060" , SQLMSG , c_err_msg);
						fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
						tpfree((char *)ptr_fml_Ibuffer);
						tpfree((char *)ptr_fml_Obuffer);
						destroy_bat();
				}

				fn_userlog(c_ServiceName , "Total Executed Qty :%ld:",l_exctd_qty);

				if(l_exctd_qty <= 0 )
				{
						strcpy(c_msg , "ERROR : l_exctd_qty is <= 0 Skipping Record"); 
						fn_userlog(c_ServiceName ,c_msg);
						fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
						continue;
				}


				/*********************** Select Block For Sale Quantity ***********************/

				l_blck_sale =0;
				EXEC SQL			
				SELECT		NVL(DBD_BLOCK_FOR_SALE,0)
				INTO			:l_blck_sale
				FROM		 	DBD_DP_BLCK_DTLS	
				WHERE			DBD_CLM_MTCH_ACCNT	= :c_clm_mtch_accnt
				AND				DBD_DP_ID						=	:c_dp_id	 
				AND				DBD_DP_CLNT_ID			=	:c_dp_clnt_id
				AND				DBD_ISIN_NMBR				=	:c_isin_nmbr
				AND				DBD_STCK_CD					=	:c_stck_cd;

				if(SQLCODE != 0 )
				{
						fn_errlog(c_ServiceName , "S31065",SQLMSG,c_err_msg);
						fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);

						if(SQLCODE == NO_DATA_FOUND)
						{
								strcpy(c_err_msg,"ERROR :in DBD_DP_BLCK_DTLS Skipping Record ... ");
								fn_userlog(c_ServiceName ,c_err_msg );
								fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
								continue;
						}
						tpfree((char *)ptr_fml_Ibuffer);
						tpfree((char *)ptr_fml_Obuffer);
						destroy_bat();
				}

				fn_userlog(c_ServiceName , "Block For Sale :%ld:", l_blck_sale);


				if (l_blck_sale < l_exctd_qty)
				{
						strcpy(c_msg,"ERROR :Block For Sale is < executed Qty Skipping ...");
						fn_userlog(c_ServiceName ,c_msg);
						fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
						continue;
				}

				if(DEBUG_MSG_LVL_3)		/* ver 1.1 */
				{
					fn_userlog(c_ServiceName , "Adding Data to FML");
				}

				Finit32(ptr_fml_Ibuffer, (FLDLEN32) Fsizeof32(ptr_fml_Ibuffer));
				Finit32(ptr_fml_Obuffer, (FLDLEN32) Fsizeof32(ptr_fml_Obuffer));
				
				c_opt_typ	=	'I';
				/** strcpy(c_channel, "SYS");			** Commented for Ver 1.5 **/
				strcpy (c_usr_id , "system");
				l_sssn_id = 0;

				fn_userlog(c_ServiceName,"Value of c_channel :%s:",c_channel);		/** Ver 1.5 **/

				i_err [0]	= Fadd32(ptr_fml_Ibuffer,FFO_USR_ID						,(char*)c_usr_id	,0);
				i_err [1]	= Fadd32(ptr_fml_Ibuffer,FFO_SSSN_ID					,(char*)&l_sssn_id	,0);
				i_err [2]	= Fadd32(ptr_fml_Ibuffer,FFO_OPT_TYP					,(char*)&c_opt_typ,0);
				i_err [3]	= Fadd32(ptr_fml_Ibuffer,FFO_CHANNEL					,(char*)c_channel	,0);
				i_err [4]	= Fadd32(ptr_fml_Ibuffer,FFO_EBA_MTCH_ACT_NO	,c_clm_mtch_accnt	,0);
				i_err [5]	= Fadd32(ptr_fml_Ibuffer,FFO_DPID							,c_dp_id					,0);
				i_err [6]	= Fadd32(ptr_fml_Ibuffer,FFO_DP_CLNT_ID				,c_dp_clnt_id			,0);
				i_err [7]	= Fadd32(ptr_fml_Ibuffer,FFO_STCK_CD					,c_stck_cd				,0);
				i_err [8]	= Fadd32(ptr_fml_Ibuffer,FFO_ORD_TOT_QTY			,(char*)&l_exctd_qty,0);
				i_err [9]	= Fadd32(ptr_fml_Ibuffer,FFO_ORDR_RFRNC				,(char*)c_ordr_rfrnc,0);	/** Ver 1.4 **/

				for ( i_cnt=0; i_cnt < 10; i_cnt++ )		/** Changed from 9 to 10 for Ver 1.4 **/
				{
						if ( i_err[ i_cnt ] == -1 )
						{
								sprintf(c_msg,"ERROR : At FML no :%d:",i_cnt);
								fn_errlog( c_ServiceName,"S31070",Fstrerror32(i_err[i_cnt]),c_err_msg );
								fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
								fn_userlog(c_ServiceName,c_msg );
								fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
								tpfree((char *)ptr_fml_Ibuffer);
								tpfree((char*)ptr_fml_Obuffer);
								destroy_bat();
						}
				}


				i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

				if ( i_trnsctn == -1 )
				{
						fn_errlog(c_ServiceName, "S31075", LIBMSG, c_err_msg);
						fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpfree((char *)ptr_fml_Ibuffer);
						tpfree((char *)ptr_fml_Obuffer);
						destroy_bat();
				}

				/********** Update Order Status to I for invoke order **************/

				if(DEBUG_MSG_LVL_3)		/* ver 1.1 */
				{	
					fn_userlog(c_ServiceName , "Updateing Status");
				}

				EXEC SQL
				UPDATE ORD_ORDR_DTLS
				SET	   /* ORD_MSC_CHAR = 'I' Commented in Ver 1.4 */
               ORD_MSC_CHAR = DECODE(:c_msc_char,'P','I','G','V')  /* Added in Ver 1.4 */
				WHERE  ORD_ORDR_RFRNC	  = :c_ordr_rfrnc
				AND	   ORD_CLM_MTCH_ACCNT 		=  :c_clm_mtch_accnt;

				if(SQLCODE != 0)
				{
						fn_errlog( c_ServiceName , "S31080",SQLMSG,c_err_msg);
						fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );

						if(SQLCODE == NO_DATA_FOUND)
						{
								fn_bat_pst_msg(c_ServiceName,"Skipping Record...",c_tag);
								continue;
						}

						tpfree((char *)ptr_fml_Ibuffer);
						tpfree((char*)ptr_fml_Obuffer);
						destroy_bat();
				} 


				/********************* Call Service SFO_PLC_PLG for invoke    ********************/

				if(DEBUG_MSG_LVL_3)		/* ver 1.1 */
				{
					fn_userlog(c_ServiceName , "Calling SFO_PLC_PLG");
				}

				i_returncode = tpcall("SFO_PLC_PLG", (char*)ptr_fml_Ibuffer, 0, 
											 (char **)&ptr_fml_Obuffer, &li_Obuf_len, 0);

				if ( i_returncode == -1 )
				{

						fn_errlog ( c_ServiceName, "S31085", TPMSG,c_err_msg);
						fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );

						if(tperrno == TPESVCFAIL)	
						{
								/********* If Application level service fail than revert Status ******/

								Fget32 ( ptr_fml_Ibuffer, FML_ERR_MSG, 0, c_err_msg, 0 );
								sprintf(c_msg,"ERROR Return : %s",c_err_msg);
								fn_userlog(c_ServiceName,c_msg);
								fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);

								strcpy(c_msg , "Skipping record as Service Fail...");
								fn_userlog(c_ServiceName,c_msg);	
								fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);

								continue;		
						}
						else /****** System Error in TPCALL so exit **********/
						{
								tpfree ( ( char * ) ptr_fml_Ibuffer );
								tpfree ( ( char * ) ptr_fml_Obuffer );
								destroy_bat();
						}
				}

				if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
				{
						fn_errlog(c_ServiceName, "S31090", LIBMSG, c_err_msg);
						fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						destroy_bat();
				}

				strcpy(c_msg,"Service Return successfully invke order completed");
				fn_userlog(c_ServiceName,c_msg);

				l_count++;

		} /* Get Data from for loop  */

		sprintf(c_msg,"Total %ld  Updated Sucessfully out of %ld Records",l_count,	l_cnt);
		fn_userlog(c_ServiceName, c_msg);
		fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);

    PRD_ENTRY:   /*** Ver 1.3 ****/


		/******* Added for Ver 1.2 ****/
    i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

    if ( i_trnsctn == -1 )
    {
      fn_errlog(c_ServiceName, "S31095", LIBMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      tpfree((char *)ptr_fml_Ibuffer);
      tpfree((char *)ptr_fml_Obuffer);
      destroy_bat();
    }

	  EXEC SQL
	    INSERT INTO
	      PRD_PGM_RUN_DTLS
	      ( PRD_PGM_NAME,
		PRD_TRD_DT,
		PRD_INS_DT,
    PRD_XCHNG_CD   /** ver 1.3 **/
    /** PRD_STTLMNT_NO  ** ver 1.3 **//** Commented for Ver 1.4 **/
	      )
	    VALUES
	      ('bat_prc_invk',
				 to_date(:c_trd_date,'dd-Mon-yyyy'),
	       sysdate,
         :c_xchng_cd     /** ver 1.3 **/
         /*** :l_sttlmnt_no    ** ver 1.3 **//*** Commented for Ver 1.4 ***/
	      );

	  if ( SQLCODE != 0 )
	  {
	    fn_errlog(c_ServiceName, "S31100", SQLMSG, c_err_msg);
	    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
	    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	    destroy_bat();
	  }

    if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    {
        fn_errlog(c_ServiceName, "S31105", LIBMSG, c_err_msg);
        fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	tpfree((char *)ptr_fml_Ibuffer);
      	tpfree((char *)ptr_fml_Obuffer);
        destroy_bat();
    }
		/*** Ver 1.2 ***/

		fn_userlog(c_ServiceName, "ALL DONE ");
		fn_bat_pst_msg(c_ServiceName,"ALL DONE",c_tag);

		tpfree ( ( char * ) ptr_fml_Ibuffer );
		tpfree ( ( char * ) ptr_fml_Obuffer );
		destroy_bat();
}

