/*******************************************************************************
*  Program           : bat_lifo_trd_dump.pc                                  *
*                                                                              *
*  Description       : To find the fresh cover mapping as per LIFO basis       *  
*                      for nifty future Trades                                 *
*									      																											 *
*  Input Parameters  :							      																		 *
*                                                                              *
*  Change Log        : 1.0   20-Mar-2015  Nitin Save|Infotech                  *
*                    : TOL   23-Aug-2023  Agam                                 *
********************************************************************************
*  1.0    -  New Release                                                       *
*  TOL    -  Tux on Linux                                                      *
*******************************************************************************/

/* Header Files */

#include<sqlca.h>
#include<atmi.h>
#include <string.h>
#include <stdlib.h>
#include<fo.h>
#include<fml32.h>
#include<fn_log.h>
#include<fn_tuxlib.h>
#include<fn_battmpt.h>
#include<fml_def.h>
#include<fo_fml_def.h>
#include<fn_ddr.h>
#include <fn_read_debug_lvl.h>
#include <time.h>
#include <sys/time.h>              /* Added in Ver TOL */

#define DEFLOG3 if (DEBUG_MSG_LVL_3)
#define DEFLOG5 if (DEBUG_MSG_LVL_5)
#define SQL_ROW_COUNT sqlca.sqlerrd[2]
#define STR_TRIM(x) x[strlen(x)]='\0' 


EXEC SQL BEGIN DECLARE SECTION;

char c_ServiceName[256]={0};
char c_msg[256]={0};
char c_err_msg[256]={0};

char c_master_mode;
char c_run_mode;    
int  i_err_cd=0;
int i_insert_count=0;

EXEC SQL  END  DECLARE SECTION;

void fn_gettime(void);
char c_time[12];

void BAT_LIFO_TRD_DUMP ( int argc, char *argv[])
{
  char c_svc_name[18]={'\0'};
  char c_trd_date[12]={'\0'};

  char c_xchng_cd[4]={0};
  int i_returncode = 0;
  char c_rec_over;
  int i_rec_counter = 0;

  EXEC SQL  BEGIN  DECLARE SECTION;
	long l_l_seq_nbr=0;
	varchar c_usr_id[11];
	varchar c_mtch_acnt_id[11]={0};
	char c_fdt_uac_act_flg;
	char c_fno_validation_flag;
	char c_success_flg;
	char c_error_msg[200];

  EXEC SQL  END  DECLARE SECTION;

  strcpy(c_ServiceName,argv[0]);
  sprintf(c_tag,"%s_na",argv[0]);


  INITBATDBGLVL(argv[0]);

  fn_userlog (c_ServiceName,"====================================================");
  sprintf(c_msg,"Batch process %s is started",argv[0]);
  fn_userlog (c_ServiceName,"Batch process %s is started",argv[0]);
	MEMSET(c_trd_date);
  if ( argc < 5) 
  {
    fn_userlog (c_ServiceName,"Invalid Arguments passed %d",argc);
    fn_userlog (c_ServiceName,"Usage:%s NFO NFO NA <expiry>",argv[0]);
		fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);    
    return;
  }

  fn_userlog(c_ServiceName,"Parameter:<%s><%s><%s><%s><%s>",argv[0],argv[1],argv[2],argv[3],argv[4]);

  strcpy(c_trd_date,argv[4]);     

	EXEC SQL
		DECLARE trd_dtls cursor for
			SELECT distinct ftd_clm_mtch_accnt
			from  ftd_fo_trd_dtls_hstry
			where ftd_xchng_cd='NFO'
			and ftd_undrlyng='NIFTY'
			and ftd_prdct_typ='F'
			and ftd_expry_dt=trim(:c_trd_date);
	if (SQLCODE != 0 )
	{
			fn_errlog(c_ServiceName,"S31005",SQLMSG,c_err_msg);
			return;
	}
	EXEC SQL
		Open trd_dtls;
	if(SQLCODE != 0 )
	{
			fn_errlog(c_ServiceName,"S31010",SQLMSG,c_err_msg);
			fn_userlog(c_ServiceName,"Unable to get match account details for expiry:%s:",c_trd_date);
			return;
	}
	while (1)  
	{
		MEMSET(c_mtch_acnt_id);
	  i_insert_count=0;
		i_err_cd=0;		
		EXEC SQL
			FETCH trd_dtls
			into :c_mtch_acnt_id;
		if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND)
		{
			fn_errlog(c_ServiceName,"S31015",SQLMSG,c_err_msg);
			fn_userlog(c_ServiceName,"Unable to fetch match account from cursor");
			exec sql close trd_dtls;
			return;
		}
		if(SQLCODE == NO_DATA_FOUND)
		{
			fn_userlog(c_ServiceName,"No data to process or all records processed");
			break;
		}
		i_rec_counter = i_rec_counter+1;
		fn_userlog(c_ServiceName,"processing rec no:%d: and match account:%s:",i_rec_counter,c_mtch_acnt_id.arr);
		fn_userlog(c_ServiceName,"Expiry Date is :%s:",c_trd_date);
			EXEC SQL
			    EXECUTE
					    BEGIN
					    SP_LIFO_LIVE
					    (
					      'F',
					      :c_mtch_acnt_id,
					      'NIFTY',
					      trim(:c_trd_date),
					      0,
					      :i_insert_count,
                :i_err_cd
					     );
					     END;
					     END-EXEC; 											


			if (DEBUG_MSG_LVL_3)
			{
				fn_userlog (c_ServiceName,"Val of c_mtch_acnt_id<%s> i_err_cd<%d> after procedure execution", c_mtch_acnt_id.arr, i_err_cd);
			 	fn_userlog (c_ServiceName,"Val of i_insert_count<%d> ", i_insert_count);
			}
	}	
  exec sql close trd_dtls;

  sprintf(c_msg,"Batch process %s completed",argv[0]);
  fn_userlog (c_ServiceName,"Batch process %s completed for records:%d:",argv[0],i_rec_counter);
  fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
  fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
  
  return ;

 }
 /******************************************************************************/

	int fn_bat_init ( int argc, char *argv[] )
	{
	  fn_var = BAT_LIFO_TRD_DUMP;
  	return 0;
	}
 
	void fn_bat_term ( int argc, char *argv[] )
	{
 	 return;
	} 
 
	int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
	{
 	 return 0;
	}

  void fn_gettime()
  {
   	int i_mili_sec = 0;
   	struct timeval tv;
   	struct timezone tz;
   	struct tm *tm;

   	gettimeofday(&tv, &tz);
   	tm=localtime(&tv.tv_sec);
   	i_mili_sec= tv.tv_usec/1000;
   	sprintf(c_time,"%d:%d:%d:%d",tm->tm_hour, tm->tm_min, tm->tm_sec, i_mili_sec);
   	return;
  }
