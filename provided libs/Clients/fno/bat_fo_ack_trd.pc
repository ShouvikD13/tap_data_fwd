/******************************************************************************/
/*  Program           : bat_fo_ack_trd.pc																			*/
/*                                                                            */
/*  Description       : This Program Will Process All Unmatured Trades		    */
/*  Log               : 1.0   15-May-2014  								                    */
/*                    : TOL   11-Aug-2023                                     */
/******************************************************************************/
/*  1.0    	-  	New Release                                                   */
/*  TOL         -       Tux on Linux (Agam)                                   */
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <Usysflds.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fo.h>
#include <fn_env.h>
#include <fn_battmpt.h>
#include <fo_exch_comnN.h>
#include <eba_to_ors.h>
#include <fn_tuxlib.h>
#include <fn_fil_log.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fml_rout.h>
#include <fn_scklib_tap.h>
#include <fn_signal.h>
#include <fn_read_debug_lvl.h>
/* #include <fo_bse_exch_comnN.h>   commented in Ver TOL */
#include <fn_fo_bse_convrtn.h>
#include <signal.h>               /* Added in Ver TOL */

varchar	c_trd_dt [LEN_DATE];
varchar c_trd_ref [LEN_DATE];
char	c_xchng_cd [4];
char	c_pipe_id [3];
char	c_prcsd_flg;
char  c_filter2[32];

int i_trg_stts;
int i_exit_stts;
int	i_trdprcsd_tab;

long int li_prcs_trd_hnd = 0;

double d_response_order_number;

EXEC SQL INCLUDE  "table/ftt_fo_tmp_trd.h";

int fn_prcs_trd(char *c_ServiceName,
           			char *c_errmsg);

int fn_prcs_flg (char *c_ServiceName,
                 char c_prcsd_flg,
								 char *c_response_order_number,
								 long	l_xchngtrd_no,
								 char *c_rowid,
                 char *c_errmsg);

void fn_sgnl_usr2(int i_sig_no);

void trim(char *str); 
void BAT_FO_ACK_TRD( int argc, char *argv[] )
{
	char	c_ServiceName[256];
	char  c_errmsg[256];
	char  c_skip_ordref[19];

	int i_trnsctn;
	int i_ret_val;
	int i_ch_val;

	strcpy(c_ServiceName,argv[0]);
	strcpy(c_xchng_cd,argv[2]);

	INITBATDBGLVL(argv[0]);

	fn_userlog(c_ServiceName,"Inside BAT_FO_ACK_TRD for %s",c_xchng_cd);   

	if(argc<4)
  {
    fn_userlog(c_ServiceName,"In argc < 4 ");
    fn_userlog(c_ServiceName,"Usage:bat_fo_ack_trd <INI FIle> <Exchange cd> <NA>"); 
    exit(0);
  }

	if ( fn_set_sgn_hnd ( SIGUSR2, fn_sgnl_usr2, c_ServiceName, c_errmsg ) == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", LIBMSG, c_errmsg );
    return;
  }
	
	while ( i_exit_stts == DONT_EXIT)
	{
		fn_userlog(c_ServiceName,"Inside Condition DONT_EXIT");
		while(i_trdprcsd_tab == TRUE)
		{
			fn_userlog(c_ServiceName,"Before Call To Function fn_prcs_trd");

			i_ret_val = fn_prcs_trd(c_ServiceName,
															c_errmsg);

			if(i_ret_val == -1)
			{
				fn_userlog(c_ServiceName,"Failed While Processing Trade ");
			}
			
			i_trdprcsd_tab = FALSE;
  		li_prcs_trd_hnd =  tpsubscribe ( "TRG_PRCS_TRD",
                                   		 (char *)c_filter2,
																			 (TPEVCTL *)NULL,
																			 0);
  		if ( li_prcs_trd_hnd == -1 )
  		{
    		fn_errlog(c_ServiceName,"S31010", TPMSG, c_errmsg);
				return;
  		}

		}

		sleep (10);

		i_ch_val = fn_chk_stts ( c_ServiceName ) ;

    if ( i_ch_val == -1 )
    {
    	fn_errlog(c_ServiceName,"S31015", LIBMSG, c_errmsg);
    }
	}		

	return;

}
/*replace fn_bat_init in ver TOL*/ 
int fn_bat_init_trd ( int argc, char *argv[] )
{

	char c_ServiceName [ 33 ];
	char c_errmsg [ 256 ];


	i_exit_stts = DONT_EXIT;
	strcpy(c_ServiceName, argv[0]);
	strcpy(c_xchng_cd,argv[2]);
	strcpy(c_pipe_id,argv[3]);


	fn_userlog(c_ServiceName,"Exchange Code Is :%s:",c_xchng_cd);

  sprintf ( c_filter2, "FFO_FILTER=='%s'", c_xchng_cd);		
  fn_userlog(c_ServiceName," c_filter2 :%s:",c_filter2);    

	EXEC SQL
		SELECT	to_char ( EXG_NXT_TRD_DT, 'dd-mon-yyyy' ),
						to_char ( EXG_NXT_TRD_DT, 'yyyymmdd' )
		INTO		:c_trd_dt,
						:c_trd_ref
		FROM		exg_xchng_mstr
		WHERE		exg_xchng_cd = :c_xchng_cd;

	if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName,"S31020", SQLMSG, c_errmsg);
    return ( -1 );
  }


	i_trdprcsd_tab = FALSE;

	li_prcs_trd_hnd =  tpsubscribe ( "TRG_PRCS_TRD", 
                                   (char *)c_filter2,
																	 (TPEVCTL *)NULL,
																 	0);

	if ( li_prcs_trd_hnd == -1 )
  {
  	fn_errlog(c_ServiceName,"S31025", TPMSG, c_errmsg);
    return (-1);
  }

  fn_var = BAT_FO_ACK_TRD;
  return 0;
}

int fn_prcs_trd(char *c_ServiceName,
		    				char *c_errmsg)
{
	char  c_skip_ordref[19];
	char  c_rowid[19];

	int i_rec_cnt;
	int i_trnsctn;
	int i_dwnld_flg= DOWNLOAD;
  int i_err[9];	
  int i_ferr[9];	
  int i_read_size;
	int i_loop;
	int i_cnt;
  int i_ret_val;
	int i_ch_val;
	int i_deferred_dwnld_flg = 0;
  
  int i_yyyy;
  int i_dd;
  int i_mm;
  int i_hh;
  int i_mi;
  int i_ss; 
  
  long l_scrip_cd;
  long l_trade_no;
  long l_rate;
  long l_exec_qty;
  long l_ord_seq;  
  long long ll_exchange_ack;
 
  long  li_recvbuf = 0;
	long	l_xchngtrd_no;

	long long ll_xchng_jiffy;

	double d_jiffy;
	double d_exchrespnse_ordr_nmbr;
	double d_xchng_jiffy;

  struct st_trade_confirm st_trd_conf;
  struct st_trd_cnfrmtn   st_bse_trd_conf;  

  FBFR32  *ptr_fml_Sbuf;
  FBFR32  *ptr_fml_Rbuf;


	fn_userlog(c_ServiceName,"Inside Function fn_prcs_trd");

	EXEC SQL
    SELECT count(*)
    INTO   :i_rec_cnt
    FROM   ftt_fo_tmp_trd
    WHERE  trunc(ftt_trd_tm) = :c_trd_dt
    AND    ftt_prcsd_flg = 'N'
    AND    ftt_xchng_cd = :c_xchng_cd; 

  if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
    fn_errlog ( c_ServiceName, "S31030",SQLMSG, c_errmsg);
    fn_userlog(c_ServiceName,"Failed While Getting Count Of Records To Be Processed");
  }

  fn_userlog(c_ServiceName,"Total No. Of Records To Be Processed :%d:",i_rec_cnt);

  ptr_fml_Sbuf  = (FBFR32 *)tpalloc("FML32", NULL, MIN_FML_BUF_LEN);
  if ( ptr_fml_Sbuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31035", TPMSG, c_errmsg  );
  }

  ptr_fml_Rbuf  = (FBFR32 *)tpalloc("FML32", NULL, MIN_FML_BUF_LEN);
  if ( ptr_fml_Rbuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31040", TPMSG, c_errmsg  );
  }
  
  if( strcmp(c_xchng_cd,"NFO") == 0 ) 
  {
	 st_trd_conf.st_hdr.si_transaction_code = TRADE_CONFIRMATION ;
  }

	fn_userlog(c_ServiceName,"BEFORE FOR LOOP");

	for(i_cnt=0;i_cnt < i_rec_cnt;i_cnt++)
  {
    fn_userlog(c_ServiceName,"Inside For Loop Processing Record No. :%d:",i_cnt);

		sql_ftt_token_no = 0;
		sql_ftt_xchngtrd_no = 0;
		sql_ftt_exctd_qty = 0;
		sql_ftt_exctd_rt = 0;
		sql_ftt_jiffy = 0;	

		MEMSET(c_pipe_id);
		MEMSET(c_rowid);
		MEMSET(sql_ftt_ack_nmbr);

    EXEC SQL
      SELECT  ftt_ack_nmbr,
              ftt_pipe_id,
              ftt_token_no,
              ftt_xchngtrd_no,
              to_char(ftt_trd_tm,'dd-Mon-yyyy hh24:mi:ss'),
              ftt_exctd_qty,
              ftt_exctd_rt,
              ftt_jiffy,
							ftt_stream_no,						
              ftt_xchng_cd,            
							rowid
      INTO    :sql_ftt_ack_nmbr,
              :sql_ftt_pipe_id,
              :sql_ftt_token_no,
              :sql_ftt_xchngtrd_no,
              :sql_ftt_trd_tm,
              :sql_ftt_exctd_qty,
              :sql_ftt_exctd_rt,
							:sql_ftt_jiffy,
							:sql_ftt_stream_no,			
              :sql_ftt_xchng_cd,     
							:c_rowid
      FROM    ftt_fo_tmp_trd
			WHERE		ftt_prcsd_flg = 'N'
			AND			trunc(ftt_trd_tm) = :c_trd_dt
      AND     ftt_xchng_cd   = :c_xchng_cd  
			AND EXISTS ( SELECT 1 FROM FOD_FO_ORDR_DTLS
									WHERE trim(FOD_ACK_NMBR) = trim(ftt_ack_nmbr))
			AND 		ROWNUM < 2
			ORDER BY	ftt_trd_tm;

     if ( SQLCODE != 0 &&  SQLCODE != NO_DATA_FOUND)
     {
       fn_errlog ( c_ServiceName, "S31045",SQLMSG, c_errmsg);
     }
			
		 if  ( SQLCODE == NO_DATA_FOUND )
		 {
				fn_userlog(c_ServiceName,"No Data Found");
				continue;
		 }

		rtrim(sql_ftt_pipe_id);
		strcpy(c_pipe_id,sql_ftt_pipe_id);
	  rtrim(sql_ftt_xchng_cd);       
		
		SETNULL(c_trd_dt);
		SETNULL(c_trd_ref);
    SETNULL(sql_ftt_ack_nmbr);     
    SETNULL(sql_ftt_trd_tm);      

		if(DEBUG_MSG_LVL_3)
		{
      fn_userlog(c_ServiceName," Exchange Code :%s:",sql_ftt_xchng_cd); 
			fn_userlog(c_ServiceName,"Ack Number Is :%s:",sql_ftt_ack_nmbr.arr);
    	fn_userlog(c_ServiceName,"Token NO. Is :%ld:",sql_ftt_token_no);
    	fn_userlog(c_ServiceName,"Trade NO. Is :%ld:",sql_ftt_xchngtrd_no);
    	fn_userlog(c_ServiceName,"Trade Time Is :%s:",sql_ftt_trd_tm.arr);
    	fn_userlog(c_ServiceName,"Trade Qty Is :%ld:",sql_ftt_exctd_qty);
    	fn_userlog(c_ServiceName,"Trade Price Is :%ld:",sql_ftt_exctd_rt);
    	fn_userlog(c_ServiceName,"Pipe Id Is :%s:",c_pipe_id);
    	fn_userlog(c_ServiceName,"Trade Date Is :%s:",c_trd_dt.arr);
    	fn_userlog(c_ServiceName,"Trade Ref. Date :%s:",c_trd_ref.arr);
    	fn_userlog(c_ServiceName,"Trade stream number :%ld:",sql_ftt_stream_no);
			fn_userlog(c_ServiceName,"Trade Jiffy Is :%lf:",sql_ftt_jiffy);
		}
    if( strcmp(sql_ftt_xchng_cd,"NFO") == 0 )  
    { 
		 d_response_order_number= atof((char *)sql_ftt_ack_nmbr.arr);
		 l_xchngtrd_no = (long)sql_ftt_xchngtrd_no;

		 d_xchng_jiffy = sql_ftt_jiffy;
		 ll_xchng_jiffy = (long long) d_xchng_jiffy;

		 memcpy(st_trd_conf.st_hdr.c_time_stamp_1,&ll_xchng_jiffy,sizeof(ll_xchng_jiffy));


	 	 st_trd_conf.li_fill_number = sql_ftt_xchngtrd_no; 
		 st_trd_conf.li_fill_quantity = sql_ftt_exctd_qty;
		 st_trd_conf.li_fill_price = sql_ftt_exctd_rt;
		 st_trd_conf.l_token = sql_ftt_token_no;
		
		 fn_timearr_to_long(sql_ftt_trd_tm.arr,&st_trd_conf.li_activity_time);
		 st_trd_conf.d_response_order_number=d_response_order_number;
		 st_trd_conf.st_hdr.c_time_stamp_2[LEN_TIME_STAMP - 1] = sql_ftt_stream_no;		

		 if(DEBUG_MSG_LVL_3)
		 {
			 fn_userlog(c_ServiceName,"Exchange Ack Number Is :%lf:",st_trd_conf.d_response_order_number);
			 fn_userlog(c_ServiceName,"Exchange Token NO. Is :%ld:",st_trd_conf.l_token);
			 fn_userlog(c_ServiceName,"Exchange Trade NO. Is :%ld:",st_trd_conf.li_fill_number);
			 fn_userlog(c_ServiceName,"Exchange Trade Time Is :%ld:",st_trd_conf.li_activity_time);
			 fn_userlog(c_ServiceName,"Exchange Trade Qty Is :%ld:",st_trd_conf.li_fill_quantity);
			 fn_userlog(c_ServiceName,"Exchange Trade Price Is :%ld:",st_trd_conf.li_fill_price);
			 fn_userlog(c_ServiceName,"Exchange Trade Stream No Is :%ld:",st_trd_conf.st_hdr.c_time_stamp_2[LEN_TIME_STAMP - 1]);
			 fn_userlog(c_ServiceName,"Exchange Jiffy Is :%lld:",st_trd_conf.st_hdr.c_time_stamp_1);
		 }
    
     i_read_size = sizeof(struct st_trade_confirm);

     i_err[0] = Fchg32( ptr_fml_Sbuf, FFO_CBUF, 0, (char *)&st_trd_conf, i_read_size );
     i_ferr[0] = Ferror32;
     i_err[1] =  Fchg32( ptr_fml_Sbuf, FFO_TMPLT, 0, (char *)&i_read_size, 0 );
     i_ferr[1] = Ferror32;
     i_err[2] = Fchg32( ptr_fml_Sbuf, FFO_BIT_FLG, 0, (char *)&i_dwnld_flg, 0 );
     i_ferr[2] = Ferror32;
     i_err[3] = Fchg32( ptr_fml_Sbuf, FFO_NXT_TRD_DT, 0 , (char *)c_trd_dt.arr, 0 );
     i_ferr[3] = Ferror32;
     i_err[4] = Fchg32( ptr_fml_Sbuf, FFO_PIPE_ID,0, (char *)c_pipe_id, 0 );
     i_ferr[4] = Ferror32;
     i_err[5] = Fchg32( ptr_fml_Sbuf, FFO_XCHNG_CD,0, (char *)c_xchng_cd, 0 );
     i_ferr[5] = Ferror32;
     i_err[6] = Fchg32( ptr_fml_Sbuf, FFO_REF_NO, 0,(char *)c_trd_ref.arr, 0 );
     i_ferr[6] = Ferror32;
     i_err[7] = Fchg32( ptr_fml_Sbuf, FFO_ORDR_RFRNC, 0,(char *)c_skip_ordref, 0 );
     i_ferr[7] = Ferror32;
 		 i_err[8] = Fchg32( ptr_fml_Sbuf, FFO_DWNLD_FLG, 0,(char *)&i_deferred_dwnld_flg, 0 );
     i_ferr[8] = Ferror32;

		 for( i_loop=0; i_loop<=8; i_loop++ )
     {
      if(i_err[i_loop] == -1)
      {
        fn_userlog(c_ServiceName,"Error [%d] in Fchange at [%d], for pipe [%s] ", i_ferr[i_loop],i_loop, c_pipe_id );
        break;
      }
     }
     i_ret_val = tpcall ( "SFO_RCV_CLNT",
                         (char *)ptr_fml_Sbuf,
                          0,
                          (char **)&ptr_fml_Rbuf,
                          &li_recvbuf,
                          0
                        );
    
		 if(i_ret_val == -1)
     {
      fn_userlog(c_ServiceName,"Failed To Call SFO_RCV_CLNT");
			c_prcsd_flg ='F';

			fn_userlog(c_ServiceName,"Before Call To fn_prcs_flg With Processed Flag As :%c:",c_prcsd_flg);

			i_ch_val = fn_prcs_flg( c_ServiceName,
															c_prcsd_flg,
															sql_ftt_ack_nmbr.arr,		
															l_xchngtrd_no,
															c_rowid,
															c_errmsg);

			if( i_ch_val == -1 )
			{
				fn_userlog(c_ServiceName,"Failed in Update Flag Function For Processed Flag F");
			}
		
     }
		 else
     {

			c_prcsd_flg ='P';
	
		  fn_userlog(c_ServiceName,"Before Call To fn_prcs_flg With Processed Flag As :%c:",c_prcsd_flg);
			
			i_ch_val = fn_prcs_flg( c_ServiceName,
                              c_prcsd_flg,
															sql_ftt_ack_nmbr.arr,    
															l_xchngtrd_no,
															c_rowid,
                              c_errmsg);

      if( i_ch_val == -1 )
      {
        fn_userlog(c_ServiceName,"Failed in Update Flag Function For Processed Flag P");
      }

     }

    }
    else if( strcmp(sql_ftt_xchng_cd,"BFO") == 0 )  
	  {

      MEMSET(st_bse_trd_conf);
      l_scrip_cd=0;
      l_trade_no=0;
      l_rate=0;
      l_exec_qty=0;
      l_ord_seq=0;
      ll_exchange_ack=0;

      d_response_order_number= atof((char *)sql_ftt_ack_nmbr.arr);
      l_xchngtrd_no = (long)sql_ftt_xchngtrd_no;

      d_xchng_jiffy = sql_ftt_jiffy;
      ll_xchng_jiffy = (long long) d_xchng_jiffy;

      /*** Convert data into exchange format ****/
      l_scrip_cd = fn_swap_long((long)sql_ftt_token_no); 
      l_trade_no = fn_swap_long(sql_ftt_xchngtrd_no);
      l_rate     = fn_swap_long(sql_ftt_exctd_rt);
      l_exec_qty = fn_swap_long(sql_ftt_exctd_qty);
      l_ord_seq  = fn_swap_long((long)sql_ftt_jiffy);
      ll_exchange_ack = fn_swap_ulnglng(atoll(sql_ftt_ack_nmbr.arr));

      st_bse_trd_conf.l_msg_type = fn_swap_long(BSE_TRADE_CONFIRMATION) ; 
      st_bse_trd_conf.l_total_rec=  fn_swap_long(1);
      st_bse_trd_conf.st_trd_dtls[0].l_scrp_cd = l_scrip_cd;
      st_bse_trd_conf.st_trd_dtls[0].l_trd_id  = l_trade_no;
      st_bse_trd_conf.st_trd_dtls[0].l_rt = l_rate;
      st_bse_trd_conf.st_trd_dtls[0].l_trd_qty = l_exec_qty;
      st_bse_trd_conf.st_trd_dtls[0].l_msg_tag = l_ord_seq;
      st_bse_trd_conf.st_trd_dtls[0].ll_transaction_id = ll_exchange_ack;
           
      EXEC SQL
            SELECT TO_NUMBER( TO_CHAR(to_date(:sql_ftt_trd_tm,'DD-MM-YYYY HH24:MI:SS'),'YYYY'))- 1900,
                   TO_NUMBER( TO_CHAR(to_date(:sql_ftt_trd_tm,'DD-MM-YYYY HH24:MI:SS'),'DD')) ,
                   TO_NUMBER( TO_CHAR(to_date(:sql_ftt_trd_tm,'DD-MM-YYYY HH24:MI:SS'),'MM')),
                   TO_NUMBER( TO_CHAR(to_date(:sql_ftt_trd_tm,'DD-MM-YYYY HH24:MI:SS'),'HH24')),
                   TO_NUMBER( TO_CHAR(to_date(:sql_ftt_trd_tm,'DD-MM-YYYY HH24:MI:SS'),'MI')),
                   TO_NUMBER( TO_CHAR(to_date(:sql_ftt_trd_tm,'DD-MM-YYYY HH24:MI:SS'),'SS'))
            INTO  :i_yyyy,
                  :i_dd,
                  :i_mm,
                  :i_hh,
                  :i_mi,
                  :i_ss
            FROM  DUAL;
      if ( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31050",SQLMSG, c_errmsg);
      }
      st_bse_trd_conf.st_trd_dtls[0].st_timestmp_dmyhms.c_year  = i_yyyy;
      st_bse_trd_conf.st_trd_dtls[0].st_timestmp_dmyhms.c_month = i_mm; 
      st_bse_trd_conf.st_trd_dtls[0].st_timestmp_dmyhms.c_day   = i_dd;
      st_bse_trd_conf.st_trd_dtls[0].st_timestmp_dmyhms.c_hour  = i_hh;
      st_bse_trd_conf.st_trd_dtls[0].st_timestmp_dmyhms.c_min   = i_mi;
      st_bse_trd_conf.st_trd_dtls[0].st_timestmp_dmyhms.c_sec   = i_ss;

      i_read_size = sizeof(struct st_trd_cnfrmtn);

      i_err[0] = Fchg32( ptr_fml_Sbuf, FFO_CBUF, 0, (char *)&st_bse_trd_conf, i_read_size );
      i_ferr[0] = Ferror32;
      i_err[1] =  Fchg32( ptr_fml_Sbuf, FFO_TMPLT, 0, (char *)&i_read_size, 0 );
      i_ferr[1] = Ferror32;
      i_err[2] = Fchg32( ptr_fml_Sbuf, FFO_BIT_FLG, 0, (char *)&i_dwnld_flg, 0 );
      i_ferr[2] = Ferror32;
      i_err[3] = Fchg32( ptr_fml_Sbuf, FFO_NXT_TRD_DT, 0 , (char *)c_trd_dt.arr, 0 );
      i_ferr[3] = Ferror32;
      i_err[4] = Fchg32( ptr_fml_Sbuf, FFO_PIPE_ID,0, (char *)c_pipe_id, 0 );
      i_ferr[4] = Ferror32;
      i_err[5] = Fchg32( ptr_fml_Sbuf, FFO_XCHNG_CD,0, (char *)c_xchng_cd, 0 );
      i_ferr[5] = Ferror32;
      i_err[6] = Fchg32( ptr_fml_Sbuf, FFO_REF_NO, 0,(char *)c_trd_ref.arr, 0 );
      i_ferr[6] = Ferror32;
      i_err[7] = Fchg32( ptr_fml_Sbuf, FFO_ORDR_RFRNC, 0,(char *)c_skip_ordref, 0 );
      i_ferr[7] = Ferror32;
      i_err[8] = Fchg32( ptr_fml_Sbuf, FFO_DWNLD_FLG, 0,(char *)&i_deferred_dwnld_flg, 0 );
      i_ferr[8] = Ferror32;

      for( i_loop=0; i_loop<=8; i_loop++ )
      {
       if(i_err[i_loop] == -1)
       {
        fn_userlog(c_ServiceName,"Error [%d] in Fchange at [%d], for pipe [%s] ", i_ferr[i_loop],i_loop, c_pipe_id );
        break;
       }
      }
     
      i_ret_val = tpcall ( "SFO_BTRD_CLNT",
                         (char *)ptr_fml_Sbuf,
                          0,
                          (char **)&ptr_fml_Rbuf,
                          &li_recvbuf,
                          0
                        );

     if(i_ret_val == -1)
     {
      fn_userlog(c_ServiceName,"Failed To Call SFO_BTRD_CLNT");
      c_prcsd_flg ='F';

      fn_userlog(c_ServiceName,"Before Call To fn_prcs_flg With Processed Flag As :%c:",c_prcsd_flg);

      i_ch_val = fn_prcs_flg( c_ServiceName,
                              c_prcsd_flg,
															sql_ftt_ack_nmbr.arr,     
                              l_xchngtrd_no,
                              c_rowid,
                              c_errmsg);

      if( i_ch_val == -1 )
      {
        fn_userlog(c_ServiceName,"Failed in Update Flag Function For Processed Flag F");
      }

     }
     else if( i_ret_val == 2 )
     {
       fn_userlog(c_ServiceName,"Trade already Exists with process flag 'N'");
     }
     else
     {

      c_prcsd_flg ='P';

      fn_userlog(c_ServiceName,"Before Call To fn_prcs_flg With Processed Flag As :%c:",c_prcsd_flg);

      i_ch_val = fn_prcs_flg( c_ServiceName,
                              c_prcsd_flg,
															sql_ftt_ack_nmbr.arr,  
                              l_xchngtrd_no,
                              c_rowid,
                              c_errmsg);

      if( i_ch_val == -1 )
      {
        fn_userlog(c_ServiceName,"Failed in Update Flag Function For Processed Flag P");
      }
     }
    } 
		fn_userlog(c_ServiceName,"Inside For Loop End :%ld:",i_cnt);
  } /*** End Of FOR Loop ***/		
		
	return 0;
}

int fn_prcs_flg (char *c_ServiceName,
		    				 char	c_prcsd_flg,
								 char *c_response_order_number,
								 long	l_xchngtrd_no,
								 char *c_rowid,
						     char	*c_errmsg)
{
	char c_ord_ack_nmbr[20];
	int i_trnsctn;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Inside Function fn_prcs_flg");
		fn_userlog(c_ServiceName,"Order Number Is :%lf:",d_response_order_number);
		fn_userlog(c_ServiceName,"Order Number Is :%s:",c_response_order_number);
		fn_userlog(c_ServiceName,"Processed Flag Is :%c:",c_prcsd_flg);
		fn_userlog(c_ServiceName,"Exchange Trd No. Is :%ld:",l_xchngtrd_no);
	}
	

	strcpy(c_ord_ack_nmbr,c_response_order_number);	

  trim(c_ord_ack_nmbr); 

	fn_userlog(c_ServiceName,"After Conversion Ack Number Is :%s:",c_ord_ack_nmbr);

	i_trnsctn= fn_begintran( c_ServiceName, c_errmsg );

  if ( i_trnsctn == -1 )
  {
    fn_errlog ( c_ServiceName, "S31055", LIBMSG, c_errmsg );
    return -1;
  }

	EXEC SQL
  	UPDATE ftt_fo_tmp_trd
    SET    ftt_prcsd_flg = :c_prcsd_flg
    WHERE  ftt_ack_nmbr = :c_ord_ack_nmbr
		AND		 ftt_xchngtrd_no = :l_xchngtrd_no
		AND		 rowid =:c_rowid
		AND 	 ftt_prcsd_flg ='N'
    AND    ftt_xchng_cd = :c_xchng_cd;

	if( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31060", SQLMSG,c_errmsg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
    return -1;
  }

  if ( fn_committran( c_ServiceName, i_trnsctn,c_errmsg ) == -1 )
  {
    fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
    fn_errlog ( c_ServiceName, "S31065", LIBMSG, c_errmsg );
    return -1;
  }

  return 0;

}
/*replace fn_bat_term in ver TOL*/
void fn_bat_term_trd ( int argc, char *argv[] )
{
  return;
}

/*replace fn_prcs_trg in ver TOL*/
int fn_prcs_trg_trd ( char *c_ServiceName, int i_trg_typ )
{
	int i_ch_val;
  char c_err_msg[256];

	if ( i_trg_typ == SYSTM_TRG )
  {
    i_exit_stts = EXIT;
    return ( -1 );
  }
  fn_userlog(c_ServiceName," c_trg_msg :%s:",c_trg_msg); 
	
  if ( strcmp ( c_trg_msg, "TRG_PRCS_TRD" ) == 0 )
  {
    i_trdprcsd_tab = TRUE;
    i_ch_val = tpunsubscribe ( li_prcs_trd_hnd, 0 );
    if ( i_ch_val == -1 )
    {
      fn_errlog(c_ServiceName,"S31070", TPMSG, c_err_msg);
    }
  }

  return 0;
}
void fn_sgnl_usr2(int i_sig_no)
{
  fn_userlog("bat_fo_prcstrd","bat_fo_prcstrd SIGUSER2 exit");
  i_exit_stts = EXIT;
	return;
}

void trim(char *str)
{
  int i=0;
  char *ptr;
  ptr = str;
  while ( *str != '\0' )
  {
    if (*str != ' ' && *str != '\t')
    {
      i=i+1;
      *ptr++=*str;
    }
    str++;
  }
  *ptr='\0';
  while( i != 0 )
  {
    ptr--;
    i=i-1;
  }
  str = ptr;
}
