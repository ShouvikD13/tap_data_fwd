/**************************************************************************************************/
/* Batch Name 	: BAT_STGY_BLDR																							  										*/
/*																																																*/
/* Description : This batch will run daily. It will track records that were placed through 			  */
/*								strategy builoder and insert them into table with status ( weter batch ran 			*/
/*   							poperly for the day ). This batch will run in the evening. 							        */ 
/*																																																*/
/*																																																*/
/*	Input 			: BAT_STRTGY_BLDR NFO NFO NA run_dt ( dd-Mon-yyy : format )												*/
/*																																																*/
/*	Output 			:																																									*/
/*																																																*/
/*	Log 				: Ver 1.0 | Ravindra Panda																												*/
/**************************************************************************************************/
/*	Ver 1.0 		: New Release																																			*/
/**************************************************************************************************/

/** Header files **/
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <string.h>
#include <stdlib.h>
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>
#include <sqlca.h>
#include <fn_pos.h>
#include <stdio.h>
#include <fn_tuxlib.h>
#include <math.h>
#include <eba_to_ors.h>
#include <fo_view_def.h>
#include <fn_session.h>
#include <stdarg.h>

void BAT_STGY_BLDR( int argc, char *argv[] )
{

	char c_msg[256] = {'\0'};
  char c_ServiceName [ 33 ]= {'\0'};
  char c_err_msg [ 256 ]= {'\0'};

	char c_exec_date[21] = {'\0'};
	char c_scrpt_cmd[256] = {'\0'};
	char c_run_dt[21] = {'\0'};

	double  d_mtch_id_cnt = 0.0;
	double  d_turn_over = 0.0;
	double  d_tot_brkg = 0.0;

	int i_entry_count = 0;
	int i_trnsctn = 0;
	int i_rcrd_cnt = 0;

	strcpy ( c_ServiceName, argv[0] );

	if(argc != 5)
  {
    fn_userlog( argv[0],"Usage - %s <configuration file> <Exchange code> <NA> <run date> ",argv[0]);
    fn_bat_pst_msg ( argv[0], "Invalid number of arguments", c_tag );
    fn_userlog ( argv[0], "Invalid number of arguments" );
    return ;
  }

	INITBATDBGLVL(argv[0]);

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog (argv[0], " Exchnage code is :%s:",argv[2]);
		fn_userlog (argv[0], " Run date is :%s:", argv[4]);
	}

	strcpy(c_run_dt, argv[4]);
	rtrim(c_run_dt);


	/*** COMMENTED TEMPORARILY *** 
	EXEC SQL
	SELECT ( sysdate - 1 ) 
	INTO :c_exec_date
	FROM dual;

	if( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31005", SQLMSG, c_err_msg);
		fn_userlog ( argv[0], " Unable to fetch execution date from dual ... ");
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    return;
  } 
	*** COMMENTED TEMPORARILY ***/

	fn_userlog( c_msg, "Batch process %s started for date :%s:", argv[0], c_run_dt );	

	EXEC SQL
	SELECT  count(mtch_accnt )
  INTO  :d_mtch_id_cnt
	from (
				  select distinct  FOD_CLM_MTCH_ACCNT mtch_accnt
					FROM  FOD_FO_ORDR_DTLS,FBL_FO_BSKT_LST, FBC_FO_BSKT_CNTRCT_LST,
      		( SELECT DISTINCT UAC_CLM_MTCH_ACCNT mtch_id, trunc(FBC_INSRT_DT) TRD_DT
        		FROM UAC_USR_ACCNTS, FBL_FO_BSKT_LST, FBC_FO_BSKT_CNTRCT_LST
        		WHERE UAC_USR_ID = FBL_USR_ID
        		AND   FBL_BSKT_ID like 'S%'
        		AND   FBL_BSKT_ID = FBC_BSKT_ID
        		AND   FBL_USR_ID   = FBC_USR_ID
      		) Match_id_tab
  	WHERE FBL_BSKT_ID = FBC_BSKT_ID
  	AND   Match_id_tab.mtch_id = FOD_CLM_MTCH_ACCNT
  	AND   (FOD_TRD_DT) = :c_run_dt
  	AND   FBL_USR_ID   = FBC_USR_ID
  	AND   FBL_BSKT_ID like 'S%'
  	AND   FBC_XCHNG_CD = FOD_XCHNG_CD
  	AND   FBC_PRDCT_TYP = FOD_PRDCT_TYP
  	AND   FBC_INDSTK = FOD_INDSTK
  	AND   FBC_UNDRLYNG = FOD_UNDRLYNG
  	AND   FBC_EXPRY_DT = FOD_EXPRY_DT
  	AND   FBC_EXER_TYP = FOD_EXER_TYP
  	AND   FBC_OPT_TYP = FOD_OPT_TYP
  	AND   FBC_STRK_PRC = FOD_STRK_PRC
  	AND   FBC_ORDR_FLW = FOD_ORDR_FLW
  	AND   FOD_SPL_FLAG = 'B'
		union all
		select distinct  FOD_CLM_MTCH_ACCNT mtch_accnt
		FROM  FOD_FO_ORDR_DTLS_hstry,FBL_FO_BSKT_LST, FBC_FO_BSKT_CNTRCT_LST,
      	( SELECT DISTINCT UAC_CLM_MTCH_ACCNT mtch_id, trunc(FBC_INSRT_DT) TRD_DT
        	FROM UAC_USR_ACCNTS, FBL_FO_BSKT_LST, FBC_FO_BSKT_CNTRCT_LST
        	WHERE UAC_USR_ID = FBL_USR_ID
        	AND   FBL_BSKT_ID like 'S%'
        	AND   FBL_BSKT_ID = FBC_BSKT_ID
        	AND   FBL_USR_ID   = FBC_USR_ID
      	) Match_id_tab
  	WHERE FBL_BSKT_ID = FBC_BSKT_ID
  	AND   Match_id_tab.mtch_id = FOD_CLM_MTCH_ACCNT
  	AND   (FOD_TRD_DT) = :c_run_dt
  	AND   FBL_USR_ID   = FBC_USR_ID
  	AND   FBL_BSKT_ID like 'S%'
  	AND   FBC_XCHNG_CD = FOD_XCHNG_CD
  	AND   FBC_PRDCT_TYP = FOD_PRDCT_TYP
  	AND   FBC_INDSTK = FOD_INDSTK
  	AND   FBC_UNDRLYNG = FOD_UNDRLYNG
  	AND   FBC_EXPRY_DT = FOD_EXPRY_DT
  	AND   FBC_EXER_TYP = FOD_EXER_TYP
  	AND   FBC_OPT_TYP = FOD_OPT_TYP
  	AND   FBC_STRK_PRC = FOD_STRK_PRC
  	AND   FBC_ORDR_FLW = FOD_ORDR_FLW
  	AND   FOD_SPL_FLAG = 'B'
	);
	
	if( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31010", SQLMSG, c_err_msg);
    fn_userlog ( argv[0], " Unable to compute number of trades through strategy builder ... ");
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    return;
  }

	EXEC SQL
	select tot_trnovr, tot_brkg
	INTO    :d_turn_over,
          :d_tot_brkg
	from
	(
		Select  NVL(to_char(ROUND(SUM(((FTD_EXCTD_RT+FTD_STRK_PRC)*FTD_EXCTD_QTY)/100000000),2),'999999999.99'),0) tot_trnovr,
          NVL(ROUND(SUM(FTD_BRKG)/100,2),0) tot_brkg
  	FROM   FTD_FO_TRD_DTLS,FOD_FO_ORDR_DTLS
  	WHERE  FTD_CLM_MTCH_ACCNT = FOD_CLM_MTCH_ACCNT
  	AND    FOD_ORDR_RFRNC = FTD_ORDR_RFRNC
  	AND    FOD_PRDCT_TYP =FTD_PRDCT_TYP
  	AND    FTD_PRDCT_TYP in ('O')
  	AND    TRUNC(FTD_TRD_DT)  = FOD_TRD_DT
  	AND   (FOD_TRD_DT) = :c_run_dt
  	AND    FOD_ORDR_RFRNC in (select  DISTINCT FOD_ORDR_RFRNC
    	                        from FOD_FO_ORDR_DTLS,FBL_FO_BSKT_LST, FBC_FO_BSKT_CNTRCT_LST,
                                 ( SELECT DISTINCT UAC_CLM_MTCH_ACCNT mtch_id, trunc(FBC_INSRT_DT) TRD_DT
                                   FROM UAC_USR_ACCNTS, FBL_FO_BSKT_LST, FBC_FO_BSKT_CNTRCT_LST
                                   WHERE UAC_USR_ID = FBL_USR_ID
                                   AND   FBL_BSKT_ID like 'S%'
                                   AND   FBL_BSKT_ID = FBC_BSKT_ID
                                   AND   FBL_USR_ID   = FBC_USR_ID
                                 ) Match_id_tab
  	where FBL_BSKT_ID = FBC_BSKT_ID
  	AND   Match_id_tab.mtch_id = FOD_CLM_MTCH_ACCNT
  	AND   (FOD_TRD_DT) = :c_run_dt
  	AND   FBL_USR_ID   = FBC_USR_ID
  	AND   FBL_BSKT_ID like 'S%'
  	AND   FBC_XCHNG_CD = FOD_XCHNG_CD
  	AND   FBC_PRDCT_TYP = FOD_PRDCT_TYP
  	AND   FBC_INDSTK = FOD_INDSTK
  	AND   FBC_UNDRLYNG = FOD_UNDRLYNG
  	AND   FBC_EXPRY_DT = FOD_EXPRY_DT
  	AND   FBC_EXER_TYP = FOD_EXER_TYP
  	AND   FBC_OPT_TYP = FOD_OPT_TYP
  	AND   FBC_STRK_PRC = FOD_STRK_PRC
  	AND   FBC_ORDR_FLW = FOD_ORDR_FLW
  	AND   FOD_SPL_FLAG = 'B')
  	GROUP BY (FOD_TRD_DT)
  	union all
  	Select  NVL(to_char(ROUND(SUM(((FTD_EXCTD_RT+FTD_STRK_PRC)*FTD_EXCTD_QTY)/100000000),2),'999999999.99'),0) tot_trnovr,
          NVL(ROUND(SUM(FTD_BRKG)/100,2),0) tot_brkg
  	FROM   FTD_FO_TRD_DTLS_hstry,FOD_FO_ORDR_DTLS_hstry
  	WHERE  FTD_CLM_MTCH_ACCNT = FOD_CLM_MTCH_ACCNT
  	AND    FOD_ORDR_RFRNC = FTD_ORDR_RFRNC
  	AND    FOD_PRDCT_TYP =FTD_PRDCT_TYP
  	AND    FTD_PRDCT_TYP in ('O')
  	AND    TRUNC(FTD_TRD_DT)  = FOD_TRD_DT
  	AND   (FOD_TRD_DT) = :c_run_dt
  	AND    FOD_ORDR_RFRNC in (select  DISTINCT FOD_ORDR_RFRNC
   	                         from FOD_FO_ORDR_DTLS_HSTRY,FBL_FO_BSKT_LST, FBC_FO_BSKT_CNTRCT_LST,
                                 ( SELECT DISTINCT UAC_CLM_MTCH_ACCNT mtch_id, trunc(FBC_INSRT_DT) TRD_DT
                                   FROM UAC_USR_ACCNTS, FBL_FO_BSKT_LST, FBC_FO_BSKT_CNTRCT_LST
                                   WHERE UAC_USR_ID = FBL_USR_ID
                                   AND   FBL_BSKT_ID like 'S%'
                                   AND   FBL_BSKT_ID = FBC_BSKT_ID
                                   AND   FBL_USR_ID   = FBC_USR_ID
                                 ) Match_id_tab
  	where FBL_BSKT_ID = FBC_BSKT_ID
  	AND   Match_id_tab.mtch_id = FOD_CLM_MTCH_ACCNT
  	AND   (FOD_TRD_DT) = :c_run_dt
  	AND   FBL_USR_ID   = FBC_USR_ID
  	AND   FBL_BSKT_ID like 'S%'
  	AND   FBC_XCHNG_CD = FOD_XCHNG_CD
  	AND   FBC_PRDCT_TYP = FOD_PRDCT_TYP
  	AND   FBC_INDSTK = FOD_INDSTK
  	AND   FBC_UNDRLYNG = FOD_UNDRLYNG
  	AND   FBC_EXPRY_DT = FOD_EXPRY_DT
  	AND   FBC_EXER_TYP = FOD_EXER_TYP
  	AND   FBC_OPT_TYP = FOD_OPT_TYP
  	AND   FBC_STRK_PRC = FOD_STRK_PRC
  	AND   FBC_ORDR_FLW = FOD_ORDR_FLW
  	AND   FOD_SPL_FLAG = 'B')
  	GROUP BY (FOD_TRD_DT)
	);

	if( SQLCODE != 0 )
  {
		if ( SQLCODE == NO_DATA_FOUND )
    {
      fn_userlog(c_ServiceName,"No data found in tables for tirnover and brokerage calculation ...");
    }
		else
		{
    	fn_errlog(c_ServiceName, "S31015", SQLMSG, c_err_msg);
    	fn_userlog ( argv[0], " Unable to compute turnover and brokerage of trades through strategy builder ... ");
    	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    	return;
  	}
	}

	if( DEBUG_MSG_LVL_3 )
	{
    fn_userlog( c_ServiceName," Date for which batch is running is :%s:", c_run_dt);
		fn_userlog( c_ServiceName," No of trading customers are :%lf:", d_mtch_id_cnt);
		fn_userlog( c_ServiceName," Total turnover is :%lf:", d_turn_over);
		fn_userlog( c_ServiceName,"	Total brokerage is :%lf:", d_tot_brkg);
	}

	/*** Inserting days data as copumted by above SQL queries into database table ***/

	/*** Initiating transaction ***/
  i_trnsctn = fn_begintran(c_ServiceName, c_err_msg);

  if (i_trnsctn == -1)
  {
    fn_userlog(c_ServiceName, "Failed while initializing transaction");
    fn_errlog(c_ServiceName, "S31020", SQLMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    return;
  }

	/*** Checking if data for run date is already available in the table ***/
	EXEC SQL
	SELECT  COUNT(*)
	INTO	:i_rcrd_cnt
	FROM  FSB_STRTGY_BLDR_DATA
	WHERE  TRUNC(FSB_DATA_DT) = :c_run_dt;

	if( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31025", SQLMSG, c_err_msg);
    fn_userlog ( argv[0], " Error while inserting data in table for :%s: ... ", c_run_dt);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    return;
  }

	if( DEBUG_MSG_LVL_5 )
    fn_userlog( c_ServiceName,"No of record for date :%s: are :%d:", c_run_dt, i_rcrd_cnt);

	if ( i_rcrd_cnt == 0 )
	{
		if( DEBUG_MSG_LVL_5 )
    	fn_userlog( c_ServiceName,"Inside INSERT condition ..");

		EXEC SQL
		INSERT INTO FSB_STRTGY_BLDR_DATA
		(
			FSB_CLNT_TRDNG,
			FSB_TURN_OVER,
			FSB_TOT_BRKG,
			FSB_INSRT_DT,
			FSB_DATA_DT
		)	
		Values
		(
			:d_mtch_id_cnt,
			:d_turn_over,
			:d_tot_brkg,
			sysdate,        /*** Sysdate used, as we need the time stamp tooo ***/
			:c_run_dt
		);
	}
	else if ( i_rcrd_cnt != 0)
	{
		if( DEBUG_MSG_LVL_5 )
			fn_userlog(c_ServiceName," Inside UPDATE condition ..");
	
		EXEC SQL
		UPDATE  FSB_STRTGY_BLDR_DATA
		SET  FSB_CLNT_TRDNG = :d_mtch_id_cnt,
				 FSB_TURN_OVER = :d_turn_over,
				 FSB_TOT_BRKG = :d_tot_brkg,
				 FSB_INSRT_DT = SYSDATE,
				 FSB_DATA_DT = :c_run_dt
		WHERE  TRUNC(FSB_DATA_DT) = :c_run_dt;	
	
	}	

	if( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31030", SQLMSG, c_err_msg);
    fn_userlog ( argv[0], " Error while inserting data in table for :%s: ... ", c_run_dt);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    return;
  }

	/*** Commiting Transaction ***/

  if (fn_committran(c_ServiceName, i_trnsctn, c_err_msg) == -1)
  {
    fn_userlog(c_ServiceName, "Failed to committhe transaction.");
    fn_errlog(c_ServiceName, "S31035", SQLMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    return;
  }

	fn_userlog( c_msg, "Batch process %s ran successfully for date :%s:", argv[0], c_run_dt );	

} /* Main batch code ends here */

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_STGY_BLDR;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  fn_userlog ( argv[0], "BAT_STGY_BLDR ended" );
  return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
} 
