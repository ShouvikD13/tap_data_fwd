/******************************************************************************/
/*  Program           : BAT_SAM_BKUBKB                                         */
/*                                                                            */
/*  Input             : FFO_XCHNG_CD                                          */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_TRD_DT                                            */
/*                      FFO_DR_CR_FLG                                         */
/*                      FFO_AMOUNT                                            */
/*                      FFO_DWL_FLG                                           */
/*                      FFO_NARRATION_ID                                      */
/*                                                                            */
/*                                                                            */
/*  Output            :                                                       */
/*                                                                            */
/*  Description       : This batch process receives the input for Single SAM  */
/*                      blocking or SAM unblocking and accordingly it computes*/
/*                      Limit also by calling service SFO_SAM_BKUBK           */
/*                                                                            */
/*                                                                            */
/*  Log               : Ver 1.0   19-Nov-2014   Tanmay W											*/
/*                                                                            */
/******************************************************************************/
/*  1.0    -   New Release                                                    */
/*                                                                            */
/******************************************************************************/

#include <stdio.h>      /* C Header File                */
#include <stdlib.h>     /* C Header File                */
#include <sqlca.h>      /* Oracle header file           */
#include <atmi.h>       /* TUXEDO Header File           */
#include <userlog.h>    /* TUXEDO Header File           */
#include <fml32.h>      /* TUXEDO Header File           */

/* User defined h files */
#include "fn_collateral.h"
#include <fn_read_debug_lvl.h>
#define BLOCK 'B'
#define UNBLOCK 'U'
#define LEN_TAG 32
#define ZERO  0
#define NLVL {'\0'}
EXEC SQL INCLUDE "table/dbd_dp_blck_dtls.h";


void main( int argc, char *argv[] )
{
	FBFR32 *ptr_fml_Ibuf = (FBFR32 *)NULL;
	FBFR32 *ptr_fml_Obuf = (FBFR32 *)NULL;
  char    c_err_msg[256];
  char    c_stck_code[7];
  char    c_ServiceName[33];
    char  c_tag[LEN_TAG]=NLVL;
	char 		c_channel[4];
  char    c_narration[61];
  char    c_msg[256];
  char    c_run_mode;
  char    c_mtch_accnt[11];
  char    c_flg = 'F';
 	char 		c_bkubk_flg;
	char 		c_user_id[ 15 ];
	 char 	c_force_flag = 'F'; 
	char sql_oprn_typ;
  char 		c_xchng_cd[4];
	varchar sql_rowid[25];
  varchar sql_usr_id[10]; 
	long 		sql_sssn_id;
	long 		l_bkubk_qty = 0;
	long  	l_retbuf;

	int i_return = 0; 	
	int i_cnt = 0;
	int i_err[10];
	int i_exists =0;
  strcpy( c_ServiceName, argv[0] );

  INITBATDBGLVL(argv[0]);
	
	if(argc != 11){
fn_userlog(c_ServiceName,"Usage: bat_sam_bkubkS <Config File> <Exchange Cd> <Pipe Id> <Match Accnt> <DP ID> <DP Accnt> <Qty> <Stock code> <ISIN NO> <Sam Mode> ");
exit(-1);
}

	//sprintf(c_tag,"%s_%s",c_ServiceName,argv[1]);
	sprintf(c_tag,"%s_na",c_ServiceName);
	init_bat(c_ServiceName,argv[2],argv[3]);

	sprintf ( c_msg, "Prcess %s started....",c_ServiceName);
	fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);

fn_userlog(c_ServiceName, "iM AT STAGE 2");
	MEMSET(c_mtch_accnt);

	strcpy(c_mtch_accnt,argv[4]);
	strcpy(sql_dbd_dp_id,argv[5]);
	strcpy(sql_dbd_dp_clnt_id,argv[6]);
	l_bkubk_qty = atol(argv[7]);
	strcpy(c_stck_code,argv[8]);
	strcpy(sql_dbd_isin_nmbr,argv[9]);
	c_bkubk_flg = argv[10][0];	
	strcpy(c_user_id,"system");
	strcpy(c_channel,"SYS");
	sql_sssn_id =atol("0");

	fn_userlog(c_ServiceName, "iM AT STAGE 3:");
	ptr_fml_Ibuf = (FBFR32 *)tpalloc("FML32", NULL, MIN_FML_BUF_LEN * 5);
  if(ptr_fml_Ibuf == NULL)
  {
    fn_errlog(c_ServiceName, "S31005", FMLMSG, c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
		strcpy( c_err_msg,"Contact System Support" );
		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    destroy_bat(); 
  }

	ptr_fml_Obuf = (FBFR32 *)tpalloc("FML32", NULL, MIN_FML_BUF_LEN * 5);
  if(ptr_fml_Obuf == NULL)
  {
    fn_errlog(c_ServiceName, "S31010", FMLMSG, c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
		strcpy( c_err_msg,"Contact System Support" );
		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    destroy_bat();
  }

       Finit32(ptr_fml_Ibuf, (FLDLEN32) Fsizeof32(ptr_fml_Ibuf));
       Finit32(ptr_fml_Obuf, (FLDLEN32) Fsizeof32(ptr_fml_Obuf));
	
	if(strcmp(c_mtch_accnt,"A") == 0)
	{
		EXEC SQL
		select CLD_CLM_MTCH_ACCNT
		into :c_mtch_accnt
		from CLD_DP_ACCTS
		where CLD_DP_ID = :sql_dbd_dp_id
		and 	CLD_DP_CLNT_ID = :sql_dbd_dp_clnt_id;
		
		if ( SQLCODE != 0 )
    {
			fn_errlog( c_ServiceName, "S31015",SQLMSG,c_err_msg);
			fn_userlog(c_ServiceName,"Error in fetching Match acc  ");
			Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
			strcpy( c_err_msg,"Client does not exists." );
			fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    	destroy_bat();
		}
	 }	
	if(strcmp(c_stck_code,"A") == 0)
	{
	EXEC SQL
	select SEM_STCK_CD 
	into :c_stck_code
	from 	SEM_STCK_MAP
	where SEM_ENTTY = 10 
	and 	SEM_MAP_VL = :sql_dbd_isin_nmbr;

	if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31020",SQLMSG,c_err_msg);
      fn_userlog(c_ServiceName,"Error in fetching Match acc  ");
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
			strcpy( c_err_msg,"Invalid ISIN no." );
			fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      destroy_bat();
    }

	}

	fn_userlog(c_ServiceName,"c_mtch_accnt :%s:",c_mtch_accnt);
	fn_userlog(c_ServiceName,"sql_dbd_dp_id :%s:",sql_dbd_dp_id);
	fn_userlog(c_ServiceName,"sql_dbd_dp_clnt_id :%s:",sql_dbd_dp_clnt_id);
	fn_userlog(c_ServiceName,"l_bkubk_qty :%ld:",l_bkubk_qty);
	fn_userlog(c_ServiceName,"c_stck_code :%s:",c_stck_code);
	fn_userlog(c_ServiceName,"sql_dbd_isin_nmbr :%s:",sql_dbd_isin_nmbr);

	EXEC SQL
	SELECT 1 
	INTO :i_exists
	from dual
	where EXISTS
  (	
	SELECT 1 
	FROM 	DBD_DP_BLCK_DTLS
	where DBD_CLM_MTCH_ACCNT = :c_mtch_accnt
	AND   DBD_DP_ID = :sql_dbd_dp_id
	AND   DBD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
	AND   DBD_ISIN_NMBR = :sql_dbd_isin_nmbr
	AND   DBD_STCK_CD  = :c_stck_code
	);	
	if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND) 
	{
		fn_errlog( c_ServiceName, "S31025",SQLMSG,c_err_msg);
		fn_userlog(c_ServiceName,"Error in fetching data from DBD_DP_BLCK_DTLS");
		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);	
		destroy_bat();
	}
	if( SQLCODE == NO_DATA_FOUND || i_exists == 0)
	{
		sprintf(c_msg,"No Matching data available"); 
		fn_userlog(c_ServiceName,c_msg);
		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_msg, 0);
		fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);	
		destroy_bat();
	}

	rtrim(c_mtch_accnt);
	rtrim(sql_dbd_dp_id);
	rtrim(sql_dbd_dp_clnt_id);
	rtrim(c_stck_code);
	rtrim(sql_dbd_isin_nmbr);

 fn_userlog(c_ServiceName, "iM AT STAGE4 ");

	i_err [0] = Fadd32(ptr_fml_Ibuf,FFO_EBA_MTCH_ACT_NO, (char *)c_mtch_accnt,0);
	i_err [1] = Fadd32(ptr_fml_Ibuf,FFO_BK_UBK_FLG, (char *)&c_bkubk_flg,0);
	i_err [2] = Fadd32(ptr_fml_Ibuf,FFO_USR_ID, (char *)c_user_id,0);
	i_err [3] = Fadd32(ptr_fml_Ibuf,FFO_XCHNG_CD, (char *)c_xchng_cd ,0);
  i_err [4] = Fadd32(ptr_fml_Ibuf,FFO_STCK_CD, c_stck_code ,0);
  i_err [5] = Fadd32(ptr_fml_Ibuf,FFO_ORD_TOT_QTY, (char *)&l_bkubk_qty ,0);
  i_err [6] = Fadd32(ptr_fml_Ibuf,FFO_DPID, (char *)sql_dbd_dp_id ,0);
  i_err [7] = Fadd32(ptr_fml_Ibuf,FFO_DP_CLNT_ID, (char *)sql_dbd_dp_clnt_id ,0);
  i_err [8] = Fadd32(ptr_fml_Ibuf,FFO_CHANNEL,(char *)c_channel,0);
  i_err [9] = Fadd32(ptr_fml_Ibuf,FFO_SSSN_ID, (char *)&sql_sssn_id,0);

 	fn_userlog(c_ServiceName, "iM AT STAGE 5");	
  for ( i_cnt=0; i_cnt < 10; i_cnt++ )
  {
    if ( i_err[ i_cnt ] == -1 )
    {
      sprintf(c_msg, "ERROR : At FML no :%d:",i_cnt);
      fn_errlog( c_ServiceName,"S31030",Fstrerror32(i_err[i_cnt]),c_err_msg );
      fn_errlog( c_ServiceName,"S31035",FMLMSG,c_err_msg );
      fn_userlog(c_ServiceName,c_msg);
      tpfree((char *)ptr_fml_Ibuf);
      tpfree((char *)ptr_fml_Obuf);
      strcpy( c_err_msg,"Contact System Support" ); 
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
			destroy_bat();
    }
  }

	fn_userlog(c_ServiceName, "iM AT STAGE 1 ");

	i_err[0] = Fadd32(ptr_fml_Ibuf,FML_PLG_FLG,(char *)&c_force_flag,0);
	if((i_err[0] == -1) && (Ferror32 != FNOTPRES))
  {
    tpfree((char *)ptr_fml_Ibuf);
    tpfree((char *)ptr_fml_Obuf);
    fn_errlog( c_ServiceName, "S31040", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		strcpy( c_err_msg,"Contact System Support" );
		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    destroy_bat(); 
  }
/**
  if(Ferror32 == FNOTPRES)
  {
    c_force_flag = 'N';
  }
***/

	if (c_bkubk_flg == BLOCK)
  {
   sql_oprn_typ = 'P';
  }
  else if (c_bkubk_flg == UNBLOCK)
  {
   sql_oprn_typ = 'W';
  }

	i_err [0] = Fadd32(ptr_fml_Ibuf,FFO_OPT_TYP,(char*)&sql_oprn_typ,0);
  if((i_err[0] == -1) && (Ferror32 != FNOTPRES))
  {
    tpfree((char *)ptr_fml_Ibuf);
    tpfree((char *)ptr_fml_Obuf);
    fn_errlog( c_ServiceName, "S31045", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy( c_err_msg,"Contact System Support" );
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    destroy_bat();
  }

	fn_userlog(c_ServiceName,"sql_oprn_typ = :%c:",sql_oprn_typ);

	fn_userlog(c_ServiceName, "iM AT STAGE 6 ");
	 i_return = tpcall( "SFO_PLC_PLG",
											(char*)ptr_fml_Ibuf,
											0,
											(char**)&ptr_fml_Obuf,
											&l_retbuf,0);
	
	fn_userlog(c_ServiceName, "iM AT STAGE 7"); 
	if( i_return == -1)
  {
    if ( tperrno != TPESVCFAIL )
    {
        fn_errlog ( c_ServiceName, "S31050", TPMSG,c_err_msg);
				tpfree((char *)ptr_fml_Ibuf);
				tpfree((char *)ptr_fml_Obuf);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				strcpy( c_err_msg,"Contact System Support" );
				fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
			  destroy_bat();	
    }

		Fget32 ( ptr_fml_Obuf, FFO_ERR_MSG, 0, c_err_msg, 0 );
    fn_bat_pst_msg( c_ServiceName, c_err_msg, c_tag );
    fn_errlog ( c_ServiceName, "S31055", TPMSG,c_err_msg);
    fn_bat_pst_msg( c_ServiceName, c_err_msg, c_tag );
    fn_userlog(c_ServiceName,"ERROR : %s",c_err_msg);
		strcpy( c_err_msg,"Contact System Support" );
		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
		destroy_bat();	

	}

		Fget32 ( ptr_fml_Obuf, FFO_ERR_MSG, 0, c_err_msg, 0 );
    fn_bat_pst_msg( c_ServiceName, c_err_msg, c_tag );
        tpfree((char *)ptr_fml_Ibuf);
        tpfree((char *)ptr_fml_Obuf);
  strcpy ( c_msg, "All Done..." );
  fn_bat_pst_msg( c_ServiceName,c_msg,c_tag );
  destroy_bat();
	
}

	
