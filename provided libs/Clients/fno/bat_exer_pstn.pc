/********************************************************************************************/
/*** Ver 1.0	 Initial Release of Exercise Download from Match system ***/
/*** ver 1.1	 IBM Migration Changes	 Sandeep */
/*** ver 1.2   Taking data directly from PS03 file when Match derivative is down.(Shamili)  */
/*** Ver 1.3   BSE ORS changes (sandip) 																									***/  
/*** Ver 1.4   GAme Simulator Back Office Automation                                      ***/
/*** Ver 1.5   Buffer Allocation (Navina D.)                                              ***/
/*** Ver 1.6   View to FML Changes ( Sachin Birje )                                       ***/
/********************************************************************************************/

#include <atmi.h>
#include <sqlca.h>					/** Ver 1.2 **/
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fml_def.h>
#include <fo_fml_def.h>
/** #include <fo_view_def.h>	** Ver 1.6 **/	/** Ver 1.2 **/
#include <fn_ddr.h>
#include <string.h>					/*** Ver 1.1  ***/
#include <fml_rout.h>			  /*** Ver 1.1  ***/		 
#include <fn_read_debug_lvl.h>		/*** Ver 1.1  ***/			
#include <fn_pos.h>      /*** Ver 1.4 ***/

int i;
#define INIT(x,y) for(i=0 ;i<y;i++)x[i] = 0

/**** Ver 1.2 Starts ***/

#define NORMAL  "N"     
#define FILE "F"        
#define OUTPUT_FML   11


int fn_create_ps03(    char  *c_ServiceName,
                        char  *c_err_msg,
                        char  *c_xchng_cd,
                        char  *c_trd_dt,
                        char  *c_eba_mtch_act_no);


FBFR32  *ptr_fml_buf;

/**** Ver 1.2 Ends ***/

void BAT_EXER_PSTN ( int argc, char *argv[] )
{
	long int li_tot_rcrds;
  int i_ch_val;
  long int li_cnt;
  long l_session_id ;
  char c_msg[256];
  char c_usr_id[8];
  char c_xchng_cd[21];
  char c_trd_dt[12];
  char c_expiry_dt[12];
  char c_exer_init;

 	char c_option_typ[3];
  double d_strike_price;
  long  l_open_position;
  long  l_ca_level;
  long  l_exercise_quantity;

  char c_eba_mtch_act_no[12];
  char c_contract_ins_typ[9];
  char c_symbol[12];
	/*FBFR32 *ptr_fml_buf;*/			  /** Ver 1.2 **/
  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];
	char c_run_mode[2];             /** Ver 1.2 **/

	long  l_bse_token_id=0;           /*** Ver 1.3 ***/
  char  c_series_cd[24]={'\0'};         /*** Ver 1.3 ***/

  /**** Ver 1.4 Starts ****/
  char c_program_nm[33];
  char c_xchng_cd_tmp[4];
  char c_match_id[11];
  char c_error_txt[256];

  MEMSET(c_program_nm);
  MEMSET(c_xchng_cd_tmp);
  MEMSET(c_match_id);
  MEMSET(c_error_txt);

  /**** Ver 1.4 Ends ***/
 
	char c_rout_str[4];
  strcpy ( c_ServiceName, argv[0] );

	INITBATDBGLVL(argv[0]);       /*** Ver 1.1  ***/			

  /*** Ver 1.4 ***/
  strcpy(c_program_nm,c_ServiceName);
  strcpy(c_xchng_cd_tmp,argv[2]);

  /** Ver 1.4 ends ***/

	strcpy(c_usr_id,"system");
	l_session_id = 0;
  strcpy( c_xchng_cd, argv[2] );
  strcpy(c_trd_dt, argv[4] );
	strcpy(c_eba_mtch_act_no , argv[5] );/*Front end will send 0 if it has to go for all */
	strcpy(c_run_mode,argv[6]);     /** Ver 1.2 **/

  fn_userlog(c_ServiceName,"c_xchng_cd :%s:",c_xchng_cd);
  fn_userlog(c_ServiceName,"c_trd_dt :%s:",c_trd_dt);
  fn_userlog(c_ServiceName,"c_eba_mtch_act_no :%s:",c_eba_mtch_act_no);
	/*** For Service routing ***/
  fn_init_ddr_pop("NA", "NA", "NA");
  fn_userlog(c_ServiceName,"c_eba_mtch_act_no :%s:",c_eba_mtch_act_no);

	sprintf ( c_msg, "Batch process %s started", argv[0] );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	strcpy ( c_msg, "Creating data. Please wait ... " );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	if (strcmp(c_run_mode, NORMAL) == 0)
	{

					if (DEBUG_MSG_LVL_3)
					{
					 fn_userlog(c_ServiceName," c_run_mode = NORMAL ");
					}

					ptr_fml_buf = fn_create_rs ( c_ServiceName,
																			 c_err_msg,
																			 "SFO_GETEXERPSTN",
																			 TPNOTIME,
																			 3,
																			 FFO_XCHNG_CD ,( char * )c_xchng_cd,
																			 FFO_TRD_DT,( char * )c_trd_dt,
																			 FFO_EBA_MTCH_ACT_NO,( char * )c_eba_mtch_act_no);
					if ( ptr_fml_buf == NULL )
					{
						fn_errlog( c_ServiceName, "S31005", LIBMSG, c_err_msg );
						strcpy ( c_msg, "Could Not Create Data.." );
						fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
            strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.4 ***/
            fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.4 ***/
						return;
					}
	}

 	/****** Ver 1.2 Starts**********/

	else if ( strcmp(c_run_mode,FILE) == 0 )
	{

				 if (DEBUG_MSG_LVL_3)
				 {
				   fn_userlog(c_ServiceName,"c_run_mode = FILE");
				 }

				 i_ch_val = fn_create_ps03 (c_ServiceName,
																	 	c_err_msg,
																	 	c_xchng_cd,
																	 	c_trd_dt,
																	 	c_eba_mtch_act_no);	

		
  			if ( i_ch_val  ==  -1)
  			{
						fn_errlog( c_ServiceName, "S31010", LIBMSG, c_err_msg );
						fn_dstry_rs ( ptr_fml_buf );		/*** Ver 1.5 ***/
						strcpy ( c_msg, "Could Not Create Data.." );
						fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
            strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.4 ***/
            fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.4 ***/
						return;
				}


	}
	else
	{
 			     fn_userlog(c_ServiceName,"Invalid Run mode option ");
      		 fn_errlog( c_ServiceName, "S31015", LIBMSG, c_err_msg );
    		   strcpy ( c_msg, "Invalid Run mode option");
      		 fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
           strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.4 ***/
           fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.4 ***/  
      		 return;

	}

	/****** Ver 1.2  Ends **********/	

	if (DEBUG_MSG_LVL_3)			/*** Ver 1.1  ***/
	{
  	fn_userlog(c_ServiceName,"c_xchng_cd :%s:",c_xchng_cd);
  	fn_userlog(c_ServiceName,"c_trd_dt :%s:",c_trd_dt);
  	fn_userlog(c_ServiceName,"c_eba_mtch_act_no :%s:",c_eba_mtch_act_no);
	}

	li_tot_rcrds = fn_reccnt_rs ( ptr_fml_buf,
                                c_ServiceName,
                                c_err_msg,
                                FFO_XCHNG_CD );
	if ( li_tot_rcrds == SYSTEM_ERROR )
	{
		fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg );
		fn_dstry_rs ( ptr_fml_buf );
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.4 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.4 ***/
		return;
	}

	strcpy ( c_msg, "Data created." );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  sprintf ( c_msg, "Total records = %ld", li_tot_rcrds );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  for ( li_cnt=1; li_cnt<=li_tot_rcrds; li_cnt++ )
  {
		if(strcmp(c_xchng_cd ,"NFO") == 0)		/*** Ver 1.3 Added if ***/
    {

 			i_ch_val = fn_getnxt_rs ( ptr_fml_buf,
                              c_ServiceName,
                              c_err_msg,
															11,
                              FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL,
                              FFO_EBA_MTCH_ACT_NO, ( char * )c_eba_mtch_act_no, NULL,
                              FFO_INSTRMNT_TYP, ( char * )c_contract_ins_typ, NULL,
                              FFO_SYMBOL, ( char * )c_symbol, NULL,
                              FFO_EXPRY_DT, ( char * )c_expiry_dt, NULL,
                              FFO_OPTION_TYP, ( char * )c_option_typ, NULL,
                              FFO_STRIKE_PRC, ( char * )&d_strike_price, NULL,
                              FFO_CA_LVL, ( char * )&l_ca_level, NULL,
                              FFO_OPNPSTN_QTY, ( char * )&l_open_position, NULL,
                              FFO_EXER_INIT, ( char * )&c_exer_init, NULL,
                              FFO_EXEC_QTY, ( char * )&l_exercise_quantity, NULL );
		}
		else if(strcmp(c_xchng_cd ,"BFO") == 0)	/*** Ver 1.3 If else if Added ***/
		{
 			i_ch_val = fn_getnxt_rs ( ptr_fml_buf,
                              c_ServiceName,
                              c_err_msg,
															13,
                              FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL,
                              FFO_EBA_MTCH_ACT_NO, ( char * )c_eba_mtch_act_no, NULL,
                              FFO_INSTRMNT_TYP, ( char * )c_contract_ins_typ, NULL,
                              FFO_SYMBOL, ( char * )c_symbol, NULL,
                              FFO_EXPRY_DT, ( char * )c_expiry_dt, NULL,
                              FFO_OPTION_TYP, ( char * )c_option_typ, NULL,
                              FFO_STRIKE_PRC, ( char * )&d_strike_price, NULL,
                              FFO_CA_LVL, ( char * )&l_ca_level, NULL,
                              FFO_OPNPSTN_QTY, ( char * )&l_open_position, NULL,
                              FFO_EXER_INIT, ( char * )&c_exer_init, NULL,
                              FFO_EXEC_QTY, ( char * )&l_exercise_quantity, NULL, 
			                        FFO_TOKEN_ID , (char *)&l_bse_token_id, NULL,
                              FFO_STCK_CD, (char *)c_series_cd ,NULL);
		
		}/*** Ver 1.3 Ends **/

		if ( i_ch_val == SYSTEM_ERROR)
    {
      fn_errlog( c_ServiceName, "S31025", LIBMSG, c_err_msg );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      fn_dstry_rs ( ptr_fml_buf );
      strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.4 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.4 ***/
      return;
    }
    if(li_cnt % 50 == 1)
    {
    sprintf ( c_msg, "PROCESSING RECORD %ld OF %ld", li_cnt, li_tot_rcrds );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    }

		/*** Ver 1.3 ***/

    if(strncmp(c_series_cd,"MSX",3) == 0)
    {
      fn_userlog(c_ServiceName,"Original Symbol=:%s:",c_symbol);
      strcpy(c_symbol,"MSX");
      fn_userlog(c_ServiceName,"Copied Symbol =:%s:",c_symbol);
    }

    /*** Ver 1.3 ***/


    i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                  c_err_msg,
                                  "sfr_exrq_conf",
                                  li_cnt,
                                  li_tot_rcrds );
    if ( i_ch_val == SYSTEM_ERROR )
    {
			fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg );
			fn_dstry_rs ( ptr_fml_buf );
  		strcpy ( c_msg, "System error. Contact system support" );
  		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.4 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.4 ***/
			return;
    }
	if (DEBUG_MSG_LVL_3)			/*** Ver 1.1  ***/
	{
  	fn_userlog(c_ServiceName,"c_contract_ins_typ :%s:",c_contract_ins_typ);
  	fn_userlog(c_ServiceName,"c_symbol :%s:",c_symbol);
  	fn_userlog(c_ServiceName,"c_expiry_dt :%s:",c_expiry_dt);
  	fn_userlog(c_ServiceName,"c_option_typ :%s:",c_option_typ);
  	fn_userlog(c_ServiceName,"d_strike_price :%lf:",d_strike_price);
  	fn_userlog(c_ServiceName,"l_ca_level :%ld:",l_ca_level);
  	fn_userlog(c_ServiceName,"c_eba_mtch_act_no :%s:",c_eba_mtch_act_no);
  	fn_userlog(c_ServiceName,"c_trd_dt :%s:",c_trd_dt);
  	fn_userlog(c_ServiceName,"l_exercise_quantity :%ld:",l_exercise_quantity);
  	fn_userlog(c_ServiceName,"l_open_position :%ld:",l_open_position);
  	fn_userlog(c_ServiceName,"c_exer_init :%c:",c_exer_init);
    fn_userlog(c_ServiceName,"l_bse_token_id  :%ld:",l_bse_token_id);	/** ver 1.3 userlog added*/
    fn_userlog(c_ServiceName,"c_series_cd :%s:",c_series_cd);		/** ver 1.3 userlog added*/
	}
		fn_cpy_ddr(c_rout_str);
    i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                  c_err_msg,
                                  "SFO_EXREQ_TCONF",
																	0,
                                  15,
                              		FFO_INSTRMNT_TYP, ( char * )c_contract_ins_typ,
                              		FFO_SYMBOL, ( char * )c_symbol,
                              		FFO_EXPRY_DT, ( char * )c_expiry_dt,
                              		FFO_OPTION_TYP, ( char * )c_option_typ,
                              		FFO_STRIKE_PRC, ( char * )&d_strike_price,
                              		FFO_CA_LVL, ( char * )&l_ca_level, 
																 	FFO_EBA_MTCH_ACT_NO, ( char * )c_eba_mtch_act_no,
																 	FFO_TRD_DT, ( char * )c_trd_dt,
																 	FFO_EXEC_QTY, (char * )&l_exercise_quantity,
																 	FFO_OPNPSTN_QTY, ( char * )&l_open_position,
																 	FFO_XCHNG_CD, ( char * )c_xchng_cd,
																 	FFO_EXER_INIT, ( char * )&c_exer_init,
                                  FFO_BAT_TAG, ( char * )c_tag, 
                                  FFO_REC_NO, ( char * )&li_cnt ,
                                  FFO_ROUT_CRT, (char*) c_rout_str );
    if ( i_ch_val == SYSTEM_ERROR )
    {
			fn_errlog( c_ServiceName, "S31035", LIBMSG, c_err_msg );
			fn_dstry_rs ( ptr_fml_buf );
  		strcpy ( c_msg, "System error. Contact system support" );
  		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.4 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.4 ***/
			return;
		} 
  }

	fn_dstry_rs ( ptr_fml_buf );

	sprintf ( c_msg, "Batch process %s ended", argv[0] );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  return;
}

int fn_bat_init ( int argc, char *argv[] ) 
{
	fn_var = BAT_EXER_PSTN;
	return 0;
}

void fn_bat_term (int argc, char *argv[] ) 
{
	return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
	return 0;
}

/******* Ver 1.2 Starts ***************/

int fn_create_ps03(		char  *c_ServiceName,
                     	char	*c_err_msg,
                      char	*c_xchng_cd,
                      char	*c_trd_dt,
                      char	*c_eba_mtch_act_no)
											  
{

		int cnt_exer;
		int i_err[11];
		int   i_counter = 1;			/*** Ver 1.5 ***/
		int   i_bufferlength = 0;	/*** Ver 1.5 ***/
		char c_msg[256];

  	double d_sttlmnt_prcs;
	  double d_strike_price;

		long l_ca_level;
  	long l_strike_price;
  	long l_open_position;
  	long l_exercise_qty;
  	long l_sttlmnt_prcs;

		char c_exer_dt[12];
  	char c_client_code[11];
  	char c_contract_ins_typ[7];
  	char c_symbol[21];
  	char c_expiry_dt[12];
  	char c_option_typ[3];
  	char c_exer_init;

		int l=0,k;
		int i_trnsctn;

		Finit32(ptr_fml_buf, (FLDLEN32) Fsizeof32(ptr_fml_buf));

		ptr_fml_buf = ( FBFR32 * ) tpalloc ( "FML32", NULL, MIN_FML_BUF_LEN );
  	if ( ptr_fml_buf == NULL )
  	{
    		fn_errlog ( c_ServiceName, "L31060", TPMSG, c_err_msg );
    		return  -1;
  	}

		 fn_userlog(c_ServiceName,"c_trd_dt :%s:",c_trd_dt); 

			EXEC SQL
         SELECT count(*)
         INTO  :cnt_exer
         FROM  fpt_fo_ps01_tmp
         WHERE fpt_exercisedqty > 0
				 AND   fpt_positiondate = :c_trd_dt;

      if(  SQLCODE != 0  )
      {
         fn_errlog(c_ServiceName, "S31040", SQLMSG, c_err_msg);
         strcpy( c_msg, "System error. Contact system support" );
         fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
         return -1;
      }

			if(cnt_exer == 0)
      {
          fn_userlog(c_ServiceName,"No records to procesd");
          strcpy( c_msg, "No records to procesd");
          fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
          return -1;
      }

			
			EXEC SQL
      		 DECLARE get_ps03_det CURSOR FOR
						SELECT fpt_positiondate,
                	 fpt_clientaccountcode,
                	 fpt_instrumenttype,
                   fpt_symbol,
                   fpt_expirydate,
                   fpt_strikeprice,
                   fpt_optiontype,
                   fpt_calevel,
                   fpt_preexasgmntlongqty,
                   fpt_exercisedqty,
                   fpt_settlementprice
						FROM   fpt_fo_ps01_tmp
						WHERE  fpt_exercisedqty > 0
						AND		 fpt_positiondate = :c_trd_dt
						ORDER BY fpt_positiondate,fpt_expirydate ;

				if( SQLCODE != 0 )
        {
            fn_errlog(c_ServiceName, "S31045", SQLMSG, c_err_msg);
            strcpy( c_msg, "System error. Contact system support" );
            fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
            return -1;
         }

			
			EXEC SQL
      	OPEN get_ps03_det;

   			 if(SQLCODE != 0)
   			 {
     				 fn_errlog(c_ServiceName,"S31050",SQLMSG,c_err_msg) ;
      			 tpfree((char*)ptr_fml_buf) ;
						 return  -1;
      	 }


				/*** Ver 1.5 starts ***/
				i_bufferlength = sizeof(c_client_code)
																	+ sizeof(c_contract_ins_typ)
																	+ sizeof(c_symbol)
																	+ sizeof(c_expiry_dt)
																	+ sizeof(c_option_typ)
																	+ sizeof(d_strike_price)
																	+ sizeof(l_ca_level)
																	+ sizeof(l_open_position)
																	+ sizeof(c_xchng_cd)
																	+ sizeof(l_exercise_qty) 
																	+ sizeof(c_exer_init) 
																	+ 512;
				/*** Ver 1.5 ends ***/

			 while(1)
			 {

						EXEC SQL
								 FETCH get_ps03_det
								 INTO		:c_exer_dt,
												:c_client_code,
												:c_contract_ins_typ,
												:c_symbol,
												:c_expiry_dt,
												:d_strike_price,
												:c_option_typ,
												:l_ca_level,
												:l_open_position,
												:l_exercise_qty,
												:d_sttlmnt_prcs;	


					if(SQLCODE==NO_DATA_FOUND)
      	  {
		 					fn_userlog(c_ServiceName," No data Found");
        			EXEC SQL
          		CLOSE get_ps03_det;
							break;
      		}
      	  else if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
      		{
        			EXEC SQL
          		CLOSE get_ps03_det;
        			fn_errlog(c_ServiceName,"S31055",SQLMSG,c_err_msg);
							return -1;
      		}

					/*** Ver 1.5 starts ***/
			    if ( Fneeded32( 1, i_bufferlength) > Funused32( ptr_fml_buf ) )
					{
						fn_userlog(c_ServiceName,"Fneeded32 before realloc %d",Fneeded32(1, i_bufferlength));
						fn_userlog(c_ServiceName,"Funused32 before realloc %ld",Funused32(ptr_fml_buf));
						fn_userlog(c_ServiceName,"Buffer before realloc %ld",Fsizeof32(ptr_fml_buf));
						i_counter++;
						ptr_fml_buf = (FBFR32 *)tprealloc( (char *)ptr_fml_buf,
															(Fsizeof32(ptr_fml_buf)+ (i_counter * MIN_FML_BUF_LEN)));  
						fn_userlog(c_ServiceName,"Buffer after realloc %ld",Fsizeof32(ptr_fml_buf));
					}
					/*** Ver 1.5 Ends ***/


					l_strike_price =  (long)(d_strike_price* 100);
					l_sttlmnt_prcs =  (long)(d_sttlmnt_prcs * 100);

					rtrim(c_symbol);

					/*** strcpy(c_xchng_cd,"NFO"); ***/			/*** Commented under Ver 1.3 change ***/

					if(strcmp(c_exer_dt,c_expiry_dt)== 0) 
					{

							if (DEBUG_MSG_LVL_3){
						  fn_userlog(c_ServiceName,"Today is last day of contract");
						  fn_userlog(c_ServiceName,"c_exer_dt :%s:",c_exer_dt);
						  fn_userlog(c_ServiceName,"c_expiry_dt :%s:",c_expiry_dt);
							}
							
							c_exer_init='E';  

					 }
					 else
					 {	
							if (DEBUG_MSG_LVL_3){
						  fn_userlog(c_ServiceName,"Today is NOT last day of contract");
							fn_userlog(c_ServiceName," c_exer_init = C ");
						  }
							c_exer_init='C'; 
					 }


					 if (DEBUG_MSG_LVL_3){
       		 fn_userlog(c_ServiceName,"c_exer_dt:%s:",c_exer_dt);
					 fn_userlog(c_ServiceName,"c_client_code :%s:",c_client_code);
					 fn_userlog(c_ServiceName,"c_contract_ins_typ, :%s:",c_contract_ins_typ);
					 fn_userlog(c_ServiceName,"c_symbol, :%s:",c_symbol);
					 fn_userlog(c_ServiceName,"c_expiry_dt,:%s:",c_expiry_dt);
					 fn_userlog(c_ServiceName,"d_strike_price,:%lf:",d_strike_price);
					 fn_userlog(c_ServiceName,"c_option_typ,:%s:",c_option_typ);
					 fn_userlog(c_ServiceName,"l_ca_level,:%ld:",l_ca_level);
					 fn_userlog(c_ServiceName,"l_open_position,:%ld:",l_open_position);
					 fn_userlog(c_ServiceName,"l_exercise_qty,:%ld:",l_exercise_qty);
					 fn_userlog(c_ServiceName,"d_sttlmnt_prcs,:%lf:",d_sttlmnt_prcs);
					 fn_userlog(c_ServiceName,"-----------------------------------------");
					 }


       		i_err[0] = Fadd32(ptr_fml_buf, FFO_EBA_MTCH_ACT_NO, (char *)c_client_code, 0);
       		i_err[1] = Fadd32(ptr_fml_buf, FFO_INSTRMNT_TYP, (char *)c_contract_ins_typ, 0);
       		i_err[2] = Fadd32(ptr_fml_buf, FFO_SYMBOL, (char *)c_symbol, 0);
       		i_err[3] = Fadd32(ptr_fml_buf, FFO_EXPRY_DT, (char *)c_expiry_dt, 0);
       		i_err[4] = Fadd32(ptr_fml_buf, FFO_OPTION_TYP, (char *)c_option_typ, 0);
       		i_err[5] = Fadd32(ptr_fml_buf, FFO_STRIKE_PRC, (char *)&d_strike_price, 0);
       		i_err[6] = Fadd32(ptr_fml_buf, FFO_CA_LVL , (char *)&l_ca_level, 0);
       		i_err[7] = Fadd32(ptr_fml_buf, FFO_OPNPSTN_QTY, (char *)&l_open_position, 0);
       		i_err[8] = Fadd32(ptr_fml_buf, FFO_XCHNG_CD, (char *)c_xchng_cd, 0);
       		i_err[9] = Fadd32(ptr_fml_buf, FFO_EXEC_QTY, (char *)&l_exercise_qty, 0);
       		i_err[10]= Fadd32(ptr_fml_buf, FFO_EXER_INIT, (char *)&c_exer_init, 0);	

					 l++ ;

					 if (DEBUG_MSG_LVL_3){
       		 fn_userlog(c_ServiceName,"After Fadd of cycle no %ld",l);
					 }

       		 for (k=0;k<OUTPUT_FML;k++)
      		 {
          			if (i_err[k] == -1)
          			{
												fn_userlog(c_ServiceName,"Error in Fadd at %d",k);
												fn_errlog ( c_ServiceName, "S31060", TPMSG, c_err_msg );
												tpfree((char *)ptr_fml_buf);
												return -1;
          		  }
       		 }


			
		  } /*** End of while ***/

	return 0;
	
}

/****** Ver 1.2 Ends **********/
