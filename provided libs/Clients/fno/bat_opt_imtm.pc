/****************************************************************************************/
/*	Ver 1.1 IBM Migration														  Ranjit 														*/
/* 	Ver 1.2	Margin Statement Changes									Sandeep		 												*/
/* 	Ver 1.3	NNF Changes For Extended Market Hours			Sandeep														*/
/*	Ver	1.4	CRCON42364																Sandeep														*/
/*  Ver 1.5 ( mtm %age change)             						Shamili Dalvi         		  			*/	
/*	Ver	1.6	BSE Changes																Sandeep														*/
/*  Ver 1.7 12-Jun-2013 CR-ISEC14-39748 Previous Close Price Check Added Sandeep Patil  */
/*	Ver	1.8	08-Aug-2013	CR-ISEC14-40619_MTM_LGC_CHNGS      Bhushan Sonwane							*/
/*	Ver	1.9	26-Feb-2015	Processing record count printing   Sachin Birje   							*/
/*  Ver 2.0 26-Jul-2018 Margin Statement Changes from Exchange   Tanmay Patel           */
/*  Ver 2.1 29-Jul-2021 CR-ISEC10-156987 MarginShotfall_Communication   Tanmay Patel    */
/*  Ver 2.2 17-Aug-2021 Minor chnage Tanmay Patel                                       */
/****************************************************************************************/

#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <string.h>		/* Ver 1.1 */
#include <stdlib.h>		/* Ver 1.1 */
#include <fn_read_debug_lvl.h>	/* ver 1.1 */

#define MARGIN_REPORT 'R' /** Ver 2.1 **/

void BAT_OPT_IMTM ( int argc, char *argv[] )
{
	long int li_tot_rcrds;
  int i_ch_val;
  long int li_cnt;
  char c_msg[256];
	FBFR32 *ptr_fml_buf;
  char c_ServiceName [ 33 ];
  char c_svc_name [ 33 ];
  char c_err_msg [ 256 ];
  char c_und_str [3000 ];														/*** Ver 1.8 ** Array size increased to 3000 from 2000 ***/
	char c_und_str_new [ 3000 ];   /*** Ver 1.5 ***/  /*** Ver 1.8 ** Array size increased to 3000 from 2000 ***/
  char c_und_str1 [ 2000 ];      /*** Ver 1.5 ***/
  char c_match_str [ 400 ];
  char c_xchng_cd [ 4 ];
	char c_actn_typ;    /*** Ver 1.2 ***/
	char c_prd_typ;
	char c_rqst_typ;
	char c_exg_extnd_stts;			/*** Ver 1.3 ***/

  char c_clm_mtch_acnt [ 11 ];
  char c_undrlyng [ 7 ];
  char c_imtm_remarks [ 256 ];
  char c_expry_dt [ 12 ];
  char c_trd_date [ 12 ];

	char c_indstk;
	char c_cntrct_tag;
	char c_exer_typ;
	char c_opt_typ;
	char c_run_mode;			/***	Ver	1.4	***/
	char c_mtm_perc[5];   /***  Ver 1.5 ***/

	int i_mtm_perc=0;     /*** Ver 1.5 ***/
  int i_len=0;          /*** Ver 1.5 ***/
  int i_len1=0;          /*** Ver 1.5 ***/
  int i_cnt=0;          /*** Ver 1.5 ***/
  int i_trnsctn=0;      /*** Ver 2.0 ***/

  /*** Ver 1.8 ** Starts ***/

  int i_bufferlength = 0;
  int i_err[6];
  int i_count = 0 ;
  int i_undrlyng_cnt = 0;
  long int li_len_tobuf  = 0;

  FBFR32 *ptr_fml_Rbuf;

  /*** Ver 1.8 ** Ends ***/

	long	l_strk_prc;

  EXEC SQL BEGIN DECLARE SECTION;
		sql_cursor sys_mtm_und;       /*** Ver 1.5 ***/
		char	c_exg_stts ;
  EXEC SQL END DECLARE SECTION;

  strcpy ( c_ServiceName, argv[0] );
	INITBATDBGLVL(argv[0]);		/* ver 1.1 */

	sprintf ( c_msg, "Batch process %s started", argv[0] );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	strcpy ( c_msg, "Creating data. Please wait ... " );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  if( argc < 7 )   /*** Ver 1.4 Argument Changed From 6 To 7	***/
  {
    fn_bat_pst_msg ( c_ServiceName, "Invalid Number of Arguments", c_tag );
    exit(0);
  }

  strcpy( c_xchng_cd, argv[2] );
	/*strcpy( c_und_str, (char *)argv[8] );			*** Ver 1.3 ***			***	Ver 1.4	Argument Changed From 6 To 7	 ***/ 
  c_actn_typ = argv[4][0];			 /*** Ver 1.2 ***/
	c_run_mode = argv[5][0];			 /***	Ver	1.4	***/
	c_prd_typ = OPTIONS;

	fn_userlog(c_ServiceName,"c_run_mode Is :%c:",c_run_mode);

 	EXEC SQL
   	SELECT  EXG_CRRNT_STTS,
						EXG_EXTND_MRKT_STTS			/*** Ver 1.3 ***/
   	INTO    :c_exg_stts,
						:c_exg_extnd_stts			/*** Ver 1.3 ***/
   	FROM    EXG_XCHNG_MSTR
   	WHERE   EXG_XCHNG_CD = :c_xchng_cd
   	AND     EXG_MKT_TYP  = 'D';

 	if( SQLCODE != 0 )
 	{
   	strcpy ( c_msg, "System error. Contact system support" );
   	fn_errlog( c_ServiceName, "S31005", SQLMSG, c_err_msg );
   	return;
 	}

	/********* Ver 1.5 Starts *****************/

    MEMSET(c_und_str);

		if( argc > 7 )
    {

			fn_userlog(c_ServiceName,"******** c_mtm_perc *******");

      strcpy( c_mtm_perc, (char *)argv[7] );
      fn_userlog(c_ServiceName,"c_mtm_perc is :%s:",c_mtm_perc);

    }

		if( argc > 8 )                    
    {

      fn_userlog(c_ServiceName," *** stk list given *** ");
      strcpy( c_und_str, (char *)argv[8] );
			fn_userlog(c_ServiceName,"c_und_str is :%s:",c_und_str);

		}


    EXEC SQL ALLOCATE :sys_mtm_und;	

	/********* Ver 1.5 Ends   *****************/


	/** Ver 1.2 Starts **/

	if(c_actn_typ == MTM_MRGN_STMNT || c_actn_typ == MARGIN_REPORT ) /** Ver EOD_MRGN_REP Added in Ver 2.1 **/
	{
		fn_userlog(c_ServiceName, "Inside Check For Status Of Exchange ");
		if(c_exg_stts != EXCHANGE_UNDER_EXPIRY	|| c_exg_extnd_stts != EXCHANGE_UNDER_EXPIRY )			/*** Ver 1.3 ***/
		{
			strcpy ( c_msg, "Exchange status is open,u can't run IMTM For Margin statement " );
			fn_bat_pst_msg ( c_ServiceName , c_msg , c_tag );
			fn_userlog(c_ServiceName,"Exchange status is open,u can't run IMTM For Margin statement " );
			return;
		}
	}
	else if (c_actn_typ == NORMAL_IMTM)
	{
		if( c_exg_stts != EXCHANGE_OPEN )
		{
			/** Ver 1.3 Starts **/

    	if( c_exg_extnd_stts != EXCHANGE_OPEN )
    	{
				strcpy ( c_msg, "Exchange should be open for running MTM" );
				fn_bat_pst_msg ( c_ServiceName , c_msg , c_tag );
     		fn_errlog( c_ServiceName, "B28520",DEFMSG,c_err_msg);
     		return ;
    	}
			else if ( argc < 8)			/*** Ver 1.4 Argument Changed From 7 To 8 */ 
			{
				strcpy ( c_msg, "During Extend Market Hours MTM Can Be Run Only For NIFTY");
				fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
				fn_userlog (c_ServiceName,"During Extend Market Hours MTM Can Be Run Only For NIFTY"); 
				return ;
			}
			else if( strcmp(c_und_str,"\'NIFTY\'") != 0 )
			{
				fn_userlog (c_ServiceName,"Underlying String Is :%s:",c_und_str);
				strcpy ( c_msg, "During Extend Market Hours MTM Can Be Run Only For NIFTY");
				fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
				fn_userlog (c_ServiceName,"During Extend Market Hours MTM Can Be Run Only For NIFTY");
				return ;
			}
			/*** Commented In Ver 1.3 

			strcpy ( c_msg, "Exchange should be open for running MTM" );
   		fn_errlog( c_ServiceName, "B28520", DEFMSG, c_err_msg );
   		return;

      ***/

			/** Ver 1.3 Ends **/
		}
	}

	/***  Ver 1.2 Ends ***/
  strcpy( c_match_str, (char *)argv[6] );			/*** Ver 1.4 Argument Changed From 5 To 6	 ***/

	if (DEBUG_MSG_LVL_3){												/*** Ver 1.5 ***/
  fn_userlog(c_ServiceName,"c_match_str is :%s:",c_match_str);
  fn_userlog(c_ServiceName,"c_und_str is :%s:",c_und_str);
  fn_userlog(c_ServiceName,"c_mtm_perc is :%s:",c_mtm_perc);
	}


  if ( strcmp(c_match_str,"NONE") == 0 )
  {

	 fn_userlog(c_ServiceName," ***** ALL MATCH IDS ***** ");			/**** Ver 1.5 ***/

	 if( strcmp(c_mtm_perc,"NONE") == 0 )           /*** Ver 1.5 ***/
	 {

		fn_userlog(c_ServiceName," *** No mtm% given *** "); /*** Ver 1.5 ***/

	 	if( argc > 8 )											/*** Ver 1.4 Argument Changed From 6 To 7 ,7 to 8 in 1.5 ***/
	 	{

			fn_userlog(c_ServiceName," *** stk list given *** ");
	   	strcpy( c_und_str, (char *)argv[8] );	/*** Ver 1.4 Argument Changed From 6 To 7	,7 o 8 in 1.5***/
	   	c_rqst_typ = MTM_FOR_UNDRLYNG;

			if (DEBUG_MSG_LVL_5)			/***	Ver	1.8	***/
			{
				fn_userlog(c_ServiceName,"c_und_str is :%s:",c_und_str);
			}
			ptr_fml_buf = fn_create_rs ( 	c_ServiceName,
	                             	 		c_err_msg,
	                             	 		"SFO_GT_OIMTM",
	                             	 		TPNOTIME,
	                             	 		6,			/***	Ver	1.4	***/
	                             	 		FFO_XCHNG_CD, ( char * )c_xchng_cd,
	                             	 		FFO_PRDCT_TYP, (char * )&c_prd_typ,
	                             	 		FFO_RQST_TYP, (char *)&c_rqst_typ,
                                    FFO_EBA_MTCH_ACT_NO,( char * )c_match_str,
	                             	 		FFO_UNDRLYNG, (char *)c_und_str,
                                    FFO_OPERATION_TYP, (char *)&c_run_mode);     /***  Ver 1.4 ***/
	 	}
	 	else
	 	{

			 fn_userlog(c_ServiceName," *** stk list not given *** ");

	   	 c_rqst_typ = MTM_ALL_PSTN;
			ptr_fml_buf = fn_create_rs ( 	c_ServiceName,
	                             	 		c_err_msg,
	                             	 		"SFO_GT_OIMTM",
	                             	 		TPNOTIME,
	                             	 		5,				/***	Ver	1.4	***/
	                             	 		FFO_XCHNG_CD, ( char * )c_xchng_cd,
	                             	 		FFO_PRDCT_TYP, (char * )&c_prd_typ,
	                             	 		FFO_RQST_TYP, (char *)&c_rqst_typ,
                                    FFO_EBA_MTCH_ACT_NO,( char * )c_match_str,
                                    FFO_OPERATION_TYP, (char *)&c_run_mode);     /***  Ver 1.4 ***/
	 	}

	}
	else    /** Else part ( mtm %age is given) is added in Ver 1.5  **/
	{

			fn_userlog(c_ServiceName,"% given ");
      i_mtm_perc = atoi(c_mtm_perc);

			fn_userlog(c_ServiceName,"i_mtm_perc:%d:",i_mtm_perc); 
			fn_userlog(c_ServiceName,"c_xchng_cd:%s:",c_xchng_cd); 

			EXEC SQL EXECUTE
              BEGIN
                     OPEN :sys_mtm_und FOR
                     SELECT ltq_stck_cd
                     FROM   ltq_trd_qt
                     WHERE  ltq_rt != 0
                     AND    ltq_prev_cls_prc != 0     /***  Ver 1.7 ***/
                     AND    ltq_stck_cd in (SELECT fum_undrlyng FROM
                            fum_fo_undrlyng_mstr where
                            fum_prdct_typ = 'O' and
														fum_xchng_cd  =	:c_xchng_cd and		/***	Ver	1.6	***/
                            fum_qt_trdng_flg = 'T' )
										  AND ltq_xchng_cd = decode(:c_xchng_cd,'NFO','NSE','BFO','BSE')
                    AND   (CASE WHEN ltq_rt >= 0.01 THEN nvl(abs((nvl(ltq_rt,0)-nvl(ltq_prev_cls_prc,0))/nvl(ltq_prev_cls_prc,1))*100,0.0) ELSE 0.0 END) >= :i_mtm_perc;
                     END;
              END-EXEC;

              if(SQLCODE != 0)
              {
                strcpy ( c_msg, "System error. Contact system support" );
                fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
                fn_errlog(c_ServiceName, "S31010", SQLMSG, c_err_msg );
                EXEC SQL FREE :sys_mtm_und;
								fn_dstry_rs ( ptr_fml_buf );
      					return;

              }



							while(1)
							{

								
										MEMSET(c_undrlyng);
									
										EXEC SQL
                        FETCH :sys_mtm_und
                        into :c_undrlyng;


										if(SQLCODE != 0 )
                    {

                        if(SQLCODE == NO_DATA_FOUND )
                        {
                              EXEC SQL FREE :sys_mtm_und;
                              fn_userlog(c_ServiceName,"abcd...NO_DATA_FOUND");
                              break;

                        }
                        else
                        {

                            strcpy ( c_msg, "System error. Contact system support" );
                            fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
                            fn_errlog(c_ServiceName, "S31015", SQLMSG, c_err_msg );
                            EXEC SQL FREE :sys_mtm_und;
														fn_dstry_rs ( ptr_fml_buf );
                            return;
                        }

                    }

										i_cnt++;

										fn_userlog(c_ServiceName,"c_undrlyng:%s:i_cnt:%d:",c_undrlyng,i_cnt);

										rtrim(c_undrlyng);
                    MEMSET(c_und_str1);
                    sprintf( c_und_str1,"\'%s\'",c_undrlyng);


										if( strlen(c_und_str)== 0)
                    {
                          strcpy(c_und_str,c_und_str1);
                    }
                    else
                    {
                          strcat(c_und_str,c_und_str1);

                    }

                      strcat(c_und_str,",");

										i_len1=strlen(c_und_str); /** Ver 1.5 **/

										if (DEBUG_MSG_LVL_3){
                      fn_userlog(c_ServiceName,"i_len1=:%d:",i_len1); /** 1.5 **/
										}

										i_undrlyng_cnt++;                 /***  Ver 1.8 ***/	


							} /** end while **/


							 /********* Removing comma at the end of string *******/

							i_len = strlen(c_und_str);
              MEMSET(c_und_str_new);
              strncpy(c_und_str_new,c_und_str,i_len-1);						    

							c_rqst_typ = MTM_FOR_UNDRLYNG;

							/**** Ver 1.8 **** Comment Starts ***

      				ptr_fml_buf = fn_create_rs (  c_ServiceName,
                                    c_err_msg,
                                    "SFO_GT_OIMTM",
                                    TPNOTIME,
                                    6,      ***  Ver 1.4 ***
                                    FFO_XCHNG_CD, ( char * )c_xchng_cd,
                                    FFO_PRDCT_TYP, (char * )&c_prd_typ,
                                    FFO_RQST_TYP, (char *)&c_rqst_typ,
                                    FFO_EBA_MTCH_ACT_NO,( char * )c_match_str,
                                    FFO_UNDRLYNG, (char *)c_und_str_new,
                                    FFO_OPERATION_TYP, (char *)&c_run_mode);

							**** Comment Ends ****/

							/**** Ver 1.8 ** Starts ****/

              fn_userlog(c_ServiceName,"Total No. Of Records Are :%d:",i_undrlyng_cnt);

              ptr_fml_buf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

              if (ptr_fml_buf == NULL)
              {
                fn_errlog( c_ServiceName, "L31145", TPMSG, c_err_msg );
                return ;
              }

              ptr_fml_Rbuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

              if ( ptr_fml_Rbuf == NULL )
              {
                fn_errlog(c_ServiceName, "S31020", TPMSG, c_err_msg);
                tpfree((char *)ptr_fml_buf);
                return;
              }

              i_bufferlength = sizeof(c_xchng_cd)
                                  + sizeof(c_prd_typ)
                                  + sizeof(c_rqst_typ)
                                  + sizeof(c_match_str)
                                  + sizeof(c_und_str_new)
                                  + sizeof(c_run_mode)
                                  + 512;


              if ( Fneeded32( 1, i_bufferlength) > Funused32( ptr_fml_buf ) )
              {
                fn_userlog(c_ServiceName,"Fneeded32 before realloc i_bufferlength %d",Fneeded32(1, i_bufferlength));
                fn_userlog(c_ServiceName,"Funused32 before realloc ptr_fml_buf %ld",Funused32(ptr_fml_buf));
                fn_userlog(c_ServiceName,"Buffer before realloc %ld",Fsizeof32(ptr_fml_buf));
                ptr_fml_buf = (FBFR32 *)tprealloc( (char *)ptr_fml_buf,
                              (Fsizeof32(ptr_fml_buf)+ (10 * MIN_FML_BUF_LEN)));
                fn_userlog(c_ServiceName,"Buffer after realloc %ld",Fsizeof32(ptr_fml_buf));
              }

              i_err[0] = Fadd32(ptr_fml_buf,FFO_XCHNG_CD,(char *)c_xchng_cd,0);
              i_err[1] = Fadd32(ptr_fml_buf,FFO_PRDCT_TYP,(char *)&c_prd_typ,0);
              i_err[2] = Fadd32(ptr_fml_buf,FFO_RQST_TYP,(char *)&c_rqst_typ,0);
              i_err[3] = Fadd32(ptr_fml_buf,FFO_EBA_MTCH_ACT_NO,(char *)c_match_str,0);
              i_err[4] = Fadd32(ptr_fml_buf,FFO_UNDRLYNG,(char *)c_und_str_new,0);
              i_err[5] = Fadd32(ptr_fml_buf,FFO_OPERATION_TYP,(char *)&c_run_mode,0);

							for( i_count=0; i_count<6; i_count++ )
              {
                if(i_err[i_count] == -1)
                {
                  fn_userlog(c_ServiceName,"Error in Fadd for i [%d]",i_count);
                  fn_errlog( c_ServiceName, "S31025", FMLMSG, c_err_msg  );
                  strcpy( c_msg, "System error. Contact system support" );
                  fn_bat_pst_msg( c_ServiceName, c_msg, c_tag );
                  EXEC SQL CLOSE :sys_mtm_und;
                  tpfree((char *)ptr_fml_buf);
                  tpfree((char *)ptr_fml_Rbuf);
                  return ;
                }
             }

             i_ch_val = tpcall("SFO_GT_OIMTM", (char *)ptr_fml_buf, 0,(char **)&ptr_fml_Rbuf,&li_len_tobuf, 0);

             if(i_ch_val == -1)
             {
                if (TPCODE != TPESVCFAIL)
                {
                  fn_errlog(c_ServiceName, "S31030",TPMSG,c_err_msg);
                }
                else
                {
                  fn_errlog(c_ServiceName, "S31035",c_err_msg, c_err_msg);
                }
                fn_userlog(c_ServiceName, "SFO_GT_OIMTM Failed");
                strcpy( c_msg, "System error. Contact system support" );
                fn_bat_pst_msg( c_ServiceName, c_msg, c_tag );
                EXEC SQL CLOSE :sys_mtm_und;
                tpfree((char *)ptr_fml_buf);
                tpfree((char *)ptr_fml_Rbuf);
                return ;
             }

             ptr_fml_buf = ptr_fml_Rbuf;

             /**** Ver 1.8 ** Ends ****/



		}/****** end of mtm % age loop ****/
	

	} /****** end of all match ids ***/
  else
  {

		fn_userlog(c_ServiceName,"Single Match id");

		if( strcmp(c_mtm_perc,"NONE") == 0 )       /** Ver 1.5 **/
		{

	 		if( argc > 8 )			 							/*** Ver 1.4 Argument Changed From 6 To 7,7 to 8 in 1.5  ***/
	 		{
							strcpy( c_und_str, (char *)argv[8] );	/*** Ver 1.4 Argument Changed From 6 To 7,7 to 8 in 1.5  ***/
							c_rqst_typ = MTM_FOR_MATCH_UNDRLYNG;
							ptr_fml_buf = fn_create_rs ( 	c_ServiceName,
	                             	 		c_err_msg,
	                             	 		"SFO_GT_OIMTM",
	                             	 		TPNOTIME,
	                             	 		6,				/***	Ver	1.4	***/
	                             	 		FFO_XCHNG_CD, ( char * )c_xchng_cd,
	                             	 		FFO_PRDCT_TYP, (char * )&c_prd_typ,
	                             	 		FFO_RQST_TYP, (char *)&c_rqst_typ,
                                    FFO_EBA_MTCH_ACT_NO,( char * )c_match_str,
	                             	 		FFO_UNDRLYNG, (char *)c_und_str,
                                    FFO_OPERATION_TYP, (char *)&c_run_mode);     /***  Ver 1.4 ***/
	 	}
	 	else
	 	{
	   	c_rqst_typ = MTM_FOR_MATCH_ALL_UNDRLYNG;
			ptr_fml_buf = fn_create_rs ( 	c_ServiceName,
	                             	 		c_err_msg,
	                             	 		"SFO_GT_OIMTM",
	                             	 		TPNOTIME,
	                             	 		5,				 /***  Ver 1.4 ***/
	                             	 		FFO_XCHNG_CD, ( char * )c_xchng_cd,
	                             	 		FFO_PRDCT_TYP, (char * )&c_prd_typ,
	                             	 		FFO_RQST_TYP, (char *)&c_rqst_typ,
                                    FFO_EBA_MTCH_ACT_NO,( char * )c_match_str,
                                    FFO_OPERATION_TYP, (char *)&c_run_mode);     /***  Ver 1.4 ***/
	 	 }

	}
	else  /** Else part ( mtm %age is given) is added in Ver 1.5  **/
	{


						fn_userlog(c_ServiceName,"% given");

            i_mtm_perc = atoi(c_mtm_perc);

              EXEC SQL EXECUTE
                   BEGIN
                     OPEN :sys_mtm_und FOR
                     SELECT ltq_stck_cd
                     FROM  ltq_trd_qt
                     WHERE ltq_rt != 0
                     AND    ltq_prev_cls_prc != 0     /***  Ver 1.7 ***/
                     AND ltq_stck_cd in (SELECT fum_undrlyng FROM
                          fum_fo_undrlyng_mstr where
                          fum_prdct_typ = 'O' and
													fum_xchng_cd  = :c_xchng_cd	and			/***	Ver	1.6	***/
                          fum_qt_trdng_flg = 'T')
                     AND ltq_xchng_cd = decode(:c_xchng_cd,'NFO','NSE','BFO','BSE')
                    AND (CASE WHEN ltq_rt >= 0.01 THEN nvl(abs((nvl(ltq_rt,0)-nvl(ltq_prev_cls_prc,0))/nvl(ltq_prev_cls_prc,1))*100,0.0) ELSE 0.0 END) >= :i_mtm_perc;
                     END;
              END-EXEC;

              if(SQLCODE != 0)
              {

                strcpy ( c_msg, "System error. Contact system support" );
                fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
                fn_errlog(c_ServiceName, "S31040", SQLMSG, c_err_msg );
                EXEC SQL FREE :sys_mtm_und;
								fn_dstry_rs ( ptr_fml_buf );
                return;

              }

					

							while(1)
              {

                    EXEC SQL
                        FETCH :sys_mtm_und
                        into :c_undrlyng;

                    if(SQLCODE != 0)
                    {

                            if(SQLCODE == NO_DATA_FOUND)
                            {
                                      EXEC SQL FREE :sys_mtm_und;
                                      fn_userlog(c_ServiceName,"NO_DATA_FOUND");
                                      break;

                            }
                            else
                            {
                              strcpy ( c_msg, "System error. Contact system support" );
                              fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
                              fn_errlog(c_ServiceName, "S31045", SQLMSG, c_err_msg );
                              EXEC SQL FREE :sys_mtm_und;
															fn_dstry_rs ( ptr_fml_buf );
                              return;
                            }


                    }


										rtrim(c_undrlyng);
                    MEMSET(c_und_str1);
                    sprintf( c_und_str1,"\'%s\'",c_undrlyng);

                    if(strlen(c_und_str) == 0)
                    {
                        strcpy(c_und_str,c_und_str1);
                    }
                    else
                    {
                        strcat(c_und_str,c_und_str1);
                    }

                     strcat(c_und_str,",");
					
										i_undrlyng_cnt++;                 /***  Ver 1.8 ***/

                }


								i_len = strlen(c_und_str);
                MEMSET(c_und_str_new);
                strncpy(c_und_str_new,c_und_str,i_len-1);

								c_rqst_typ =	MTM_FOR_MATCH_UNDRLYNG;

								/**** Ver 1.8 **** Comment Starts **	
								
              	ptr_fml_buf = fn_create_rs (  c_ServiceName,
                                    c_err_msg,
                                    "SFO_GT_OIMTM",
                                    TPNOTIME,
                                    6,   
                                    FFO_XCHNG_CD, ( char * )c_xchng_cd,
                                    FFO_PRDCT_TYP, (char * )&c_prd_typ,
                                    FFO_RQST_TYP, (char *)&c_rqst_typ,
                                    FFO_EBA_MTCH_ACT_NO,( char * )c_match_str,
                                    FFO_UNDRLYNG, (char *)c_und_str_new,
                                    FFO_OPERATION_TYP, (char *)&c_run_mode);

								**** Comment Ends ****/

								/**** Ver 1.8 ** Starts ****/

                fn_userlog(c_ServiceName,"Total No. Of Records Are :%d:",i_undrlyng_cnt);

                ptr_fml_buf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

                if (ptr_fml_buf == NULL)
                {
                  fn_errlog( c_ServiceName, "L31145", TPMSG, c_err_msg );
                  return ;
                }

                ptr_fml_Rbuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

                if ( ptr_fml_Rbuf == NULL )
                {
                  fn_errlog(c_ServiceName, "S31050", TPMSG, c_err_msg);
                  tpfree((char *)ptr_fml_buf);
                  return;
                }

                i_bufferlength = sizeof(c_xchng_cd)
                                    + sizeof(c_prd_typ)
                                    + sizeof(c_rqst_typ)
                                    + sizeof(c_match_str)
                                    + sizeof(c_und_str_new)
                                    + sizeof(c_run_mode)
                                    + 512;


                if ( Fneeded32( 1, i_bufferlength) > Funused32( ptr_fml_buf ) )
                {
                  fn_userlog(c_ServiceName,"Fneeded32 before realloc i_bufferlength %d",Fneeded32(1, i_bufferlength));
                  fn_userlog(c_ServiceName,"Funused32 before realloc ptr_fml_buf %ld",Funused32(ptr_fml_buf));
                  fn_userlog(c_ServiceName,"Buffer before realloc %ld",Fsizeof32(ptr_fml_buf));
                  ptr_fml_buf = (FBFR32 *)tprealloc( (char *)ptr_fml_buf,
                                (Fsizeof32(ptr_fml_buf)+ (10 * MIN_FML_BUF_LEN)));
                  fn_userlog(c_ServiceName,"Buffer after realloc %ld",Fsizeof32(ptr_fml_buf));
                }

                i_err[0] = Fadd32(ptr_fml_buf,FFO_XCHNG_CD,(char *)c_xchng_cd,0);
                i_err[1] = Fadd32(ptr_fml_buf,FFO_PRDCT_TYP,(char *)&c_prd_typ,0);
                i_err[2] = Fadd32(ptr_fml_buf,FFO_RQST_TYP,(char *)&c_rqst_typ,0);
                i_err[3] = Fadd32(ptr_fml_buf,FFO_EBA_MTCH_ACT_NO,(char *)c_match_str,0);
                i_err[4] = Fadd32(ptr_fml_buf,FFO_UNDRLYNG,(char *)c_und_str_new,0);
                i_err[5] = Fadd32(ptr_fml_buf,FFO_OPERATION_TYP,(char *)&c_run_mode,0);

								for( i_count=0; i_count<6; i_count++ )
                {
                  if(i_err[i_count] == -1)
                  {
                    fn_userlog(c_ServiceName,"Error in Fadd for i [%d]",i_count);
                    fn_errlog( c_ServiceName, "S31055", FMLMSG, c_err_msg  );
                    strcpy( c_msg, "System error. Contact system support" );
                    fn_bat_pst_msg( c_ServiceName, c_msg, c_tag );
                    EXEC SQL CLOSE :sys_mtm_und;
                    tpfree((char *)ptr_fml_buf);
                    tpfree((char *)ptr_fml_Rbuf);
                    return ;
                  }
               }

              i_ch_val = tpcall("SFO_GT_OIMTM", (char *)ptr_fml_buf, 0,(char **)&ptr_fml_Rbuf,&li_len_tobuf, 0);

              if(i_ch_val == -1)
              {
                if (TPCODE != TPESVCFAIL)
                {
                  fn_errlog(c_ServiceName, "S31060",TPMSG,c_err_msg);
                }
                else
                {
                  fn_errlog(c_ServiceName, "S31065",c_err_msg, c_err_msg);
                }
                fn_userlog(c_ServiceName, "SFO_GT_OIMTM Failed");
                strcpy( c_msg, "System error. Contact system support" );
                fn_bat_pst_msg( c_ServiceName, c_msg, c_tag );
                EXEC SQL CLOSE :sys_mtm_und;
                tpfree((char *)ptr_fml_buf);
                tpfree((char *)ptr_fml_Rbuf);
                return ;
             }

             ptr_fml_buf = ptr_fml_Rbuf;

             /**** Ver 1.8 ** Ends ****/
	}
	


	} /*** End of single match id **/


	if ( ptr_fml_buf == NULL )
	{
		fn_errlog( c_ServiceName, "S31070", LIBMSG, c_err_msg );
		strcpy ( c_msg, "System error. Contact system support" );		/***1.5 ***/
		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );							/***1.5 ***/
		tpfree((char *)ptr_fml_Rbuf);     /*** Ver 1.8 ***/
		return;
	}

	li_tot_rcrds = fn_reccnt_rs ( ptr_fml_buf,
                                c_ServiceName,
                                c_err_msg,
                                FFO_EBA_MTCH_ACT_NO);
	if ( li_tot_rcrds == -1 )
	{
		fn_errlog( c_ServiceName, "S31075", LIBMSG, c_err_msg );
		fn_dstry_rs ( ptr_fml_buf );
		tpfree((char *)ptr_fml_Rbuf);     /*** Ver 1.8 ***/
		return;
	}

	strcpy ( c_msg, "Data created." );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  sprintf ( c_msg, "Total records = %ld", li_tot_rcrds );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  for ( li_cnt=1; li_cnt<=li_tot_rcrds; li_cnt++ )
  {

		i_ch_val = fn_getnxt_rs ( ptr_fml_buf,
                              c_ServiceName,
                              c_err_msg,
                              9,
                              FFO_EBA_MTCH_ACT_NO, 
																						( char * )c_clm_mtch_acnt, NULL,
                              FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL,
                              FFO_PRDCT_TYP, ( char * )&c_prd_typ, NULL,
                              FFO_UNDRLYNG, ( char * )c_undrlyng, NULL,
                              FFO_CTGRY_INDSTK, ( char * )&c_indstk, NULL,
                              FFO_EXPRY_DT, ( char * )c_expry_dt, NULL,
                              FFO_STRK_PRC, ( char * )&l_strk_prc, NULL,
                              FFO_EXER_TYP, ( char * )&c_exer_typ, NULL,
                              FFO_OPT_TYP, ( char * )&c_opt_typ, NULL );
		if ( i_ch_val != 0 )
		{
			fn_errlog( c_ServiceName, "S31080", LIBMSG, c_err_msg );
			fn_dstry_rs ( ptr_fml_buf );
			tpfree((char *)ptr_fml_Rbuf);     /*** Ver 1.8 ***/
  		strcpy ( c_msg, "System error. Contact system support" );
  		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			return;
		}

    if( li_cnt % 500 == 0 )  /** Ver 1.9, Added in if condition **/
    { 
	    sprintf ( c_msg, "Processing record %ld of %ld - %s-%s", li_cnt, li_tot_rcrds,c_undrlyng,c_clm_mtch_acnt );   /**** 1.5 underlying and match id added ****/
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );	
    }
 
    i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                  c_err_msg,
                                  /** "sfr_bof_oimtm", ** Ver 2.2 **/
                                  "sfr_prcs_oimtm",    /** Ver 2.2 **/
                                  li_cnt,
                                  li_tot_rcrds );
    if ( i_ch_val == -1 )
    {
			fn_errlog( c_ServiceName, "S31085", LIBMSG, c_err_msg );
			fn_dstry_rs ( ptr_fml_buf );
			tpfree((char *)ptr_fml_Rbuf);     /*** Ver 1.8 ***/
  		strcpy ( c_msg, "System error. Contact system support" );
  		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			return;
    }


		/** call to SFO_ORD_ROUT is done to get the Pipe id for   **/
		/** creating the DDR string in the service SFO_PRCS_OIMTM **/

		if( c_actn_typ == MTM_MRGN_STMNT)			/*** Ver 1.2 ***/
		{
			strcpy( c_imtm_remarks,"MARGIN STATEMENT MTM");
		}
    else if ( c_actn_typ == MARGIN_REPORT )  /** Else if condition added in Ver 2.1 **/
    {
      strcpy( c_imtm_remarks,"EOD MARGIN REPORT");
    }
		else
			strcpy( c_imtm_remarks,"POSITION ENTERING MTM");
		strcpy( c_svc_name,"SFO_PRCS_OIMTM");
   	i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                 	c_err_msg,
                                 	"SFO_ORD_ROUT",
                                 	0,
                                 	13,			     
                              		FFO_EBA_MTCH_ACT_NO,(char *)c_clm_mtch_acnt,
                              		FFO_XCHNG_CD, ( char * )c_xchng_cd,
                              		FFO_PRDCT_TYP, ( char * )&c_prd_typ,
                              		FFO_UNDRLYNG, ( char * )c_undrlyng,
                              		FFO_CTGRY_INDSTK, ( char * )&c_indstk,
                              		FFO_EXPRY_DT, ( char * )c_expry_dt,
                              		FFO_STRK_PRC, ( char * )&l_strk_prc,
                              		FFO_EXER_TYP, ( char * )&c_exer_typ,
                              		FFO_OPT_TYP, ( char * )&c_opt_typ,
                              		FFO_IMTM_RMRKS, ( char * )c_imtm_remarks,
				                        	FFO_SVC_NAME, (char*) c_svc_name,
                                  FFO_BAT_TAG, ( char * )c_tag,
                                  FFO_REC_NO, ( char * )&li_cnt);

    if ( i_ch_val == -1 )
    {
			fn_errlog( c_ServiceName, "S31090", LIBMSG, c_err_msg );
			fn_dstry_rs ( ptr_fml_buf );
			tpfree((char *)ptr_fml_Rbuf);     /*** Ver 1.8 ***/
  		strcpy ( c_msg, "System error. Contact system support" );
  		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			return;
		}
  }

  /*** Ver 1.9 Starts ****/
  sprintf ( c_msg, "Processing record %ld of %ld - %s-%s", (li_cnt-1), li_tot_rcrds,c_undrlyng,c_clm_mtch_acnt );  
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  /*** Ver 1.9 Ends here ***/

	fn_dstry_rs ( ptr_fml_buf );
	tpfree((char *)ptr_fml_Rbuf);     /*** Ver 1.8 ***/

  /**** Ver 2.0 Starts ****/

  /** Ver 2.1 Starts **/
  if(c_actn_typ == MARGIN_REPORT )
  {
    EXEC SQL
    SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY')
    INTO   :c_trd_date
    FROM   EXG_XCHNG_MSTR
    WHERE  EXG_XCHNG_CD = :c_xchng_cd
    AND    EXG_MKT_TYP = 'D';
  }
  /** Ver 2.1 Ends **/
  else  /** Else added in Ver 2.1 **/
  {
    EXEC SQL
    SELECT MAX(fbc_trd_dt)
    INTO   :c_trd_date
    FROM   fbc_fo_brnch_cal,(SELECT  GREATEST(exg_nxt_trd_dt,EXG_TMP_TRD_DT) trd_dt
		   	 			 							 FROM    exg_xchng_mstr
		 	  	 			 						 WHERE   exg_xchng_cd = :c_xchng_cd)
	  WHERE fbc_trd_dt < trd_dt
	  AND FBC_XCHNG_CD = :c_xchng_cd;
  }

    if(SQLCODE != 0)
    {
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      fn_errlog(c_ServiceName, "S31095", SQLMSG, c_err_msg );
      return;
    }

    i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

    if ( i_trnsctn == -1 )
    {
      fn_errlog( c_ServiceName, "S31100", LIBMSG, c_err_msg );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }

    EXEC SQL  
    INSERT INTO audit_prog_runstts
             (
               APR_PROG_NAME,
               APR_TIME,
               APR_SUCC_FLG,
               APR_TRD_DT,
               APR_XCHNG_CD
              )
       VALUES (
               :c_ServiceName,
               sysdate,
               Decode(:c_actn_typ,'R','Z','P'), /** Decode Added in Ver 2.1 **/ 
               :c_trd_date,
               :c_xchng_cd );

    if(SQLCODE != 0)
    {
       fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       strcpy ( c_msg, "System error. Contact system support" );
       fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
       fn_errlog(c_ServiceName, "S31105", SQLMSG, c_err_msg );
       return;
    }

    if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName, "S31110", LIBMSG, c_err_msg );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }
  /**** Ver 2.0 Ends ****/
	sprintf ( c_msg, "Batch process %s ended", argv[0] );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  return;
}

int fn_bat_init ( int argc, char *argv[] ) 
{
	fn_var = BAT_OPT_IMTM;
	return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}


int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
	return 0;
}
