/*	File : bat_oth_amd.pc																									*/
/*																																				*/
/*	Description:  This process select data from CONTENT database 					*/ 
/*								and insert into AMD.    																*/ 
/*																																				*/
/*																																				*/
/*	Input Parameters: Trade Date																					*/
/*																																				*/
/*																																				*/
/*	Output Parameters :																										*/
/*																																				*/
/**************************************************************************/
/*	1.0  -  New release	: 08-Nov-2011	: Shamili Dalvi.										*/
/**************************************************************************/

/* Standards include files*/
#include <stdio.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <Usysflds.h>
#include <stdlib.h>
#include <string.h>
#include <userlog.h>
#include <errno.h>
#include <eba.h>
#include <time.h>
#include <fml_def.h>
#include <fo_fml_def.h>
#include <fn_read_debug_lvl.h>


#define TOTAL_FML      6


void main( int argc, char *argv[] )
{


		FBFR32  *ptr_fml_Sbuffer;
		FBFR32  *ptr_fml_Rbuffer;

		char     c_ServiceName [ 33 ];
		char     c_err_msg [ 256 ];
		char     c_pipe_id[3];
  	char     c_xchng[4];
		char  	 c_tag[32];
		char		 c_flag;

		int 		 i,j;
		int 		 i_cnt;
		int 		 i_cntr;
		int			 i_ch_val;
		int      i_err[TOTAL_FML];
    int      i_ferr[TOTAL_FML];

		char		 oth_rsn_cd0[5];					
		char		 oth_rsn_cd1[5];				
		char		 oth_rsn_cd2[5];			
		double	 oth_rsn_val0;			
		double	 oth_rsn_val1;		
		double	 oth_rsn_val2;	

		varchar   c_trd_trd_dt[15];

		long    l_recv_buff_len;

		struct	st_oth_details
		{

			char		oth_rsn_cd[4][5];
			double	oth_rsn_val[10];

		};

		struct st_oth_details oth_details;	

		c_flag = 'R';
		strcpy(c_pipe_id, "BO");
  	strcpy(c_xchng, "NA");
  	strcpy( c_tag, "bat_oth_amd_na");


		TPINIT   *ptr_st_tpinfo;

		strcpy ( c_ServiceName, argv[0] );
  	INITBATDBGLVL(argv[0]);

		ptr_fml_Sbuffer = (FBFR32 *)NULL;
		ptr_fml_Rbuffer = (FBFR32 *)NULL;


		strcpy((char *)c_trd_trd_dt.arr, argv[1]);
    SETLEN(c_trd_trd_dt);
    userlog("trade date is %s",(char *)c_trd_trd_dt.arr);


	 if((ptr_st_tpinfo = (TPINIT *)tpalloc("TPINIT",NULL,MIN_FML_BUF_LEN))==(TPINIT*)NULL)
   {
   		errlog(c_ServiceName, "S31005", TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
   		exit(0);
   }


	 c_flag = 'U';

	 if(tuxgetenv("ORA_GRP") == NULL)
   {
   		errlog(c_ServiceName, "S31010", TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
   		tpfree ( ( char * ) ptr_st_tpinfo );
   		exit(0);
   }

		
		strcpy(ptr_st_tpinfo->grpname ,tuxgetenv("ORA_GRP"));
  	strcpy ( ptr_st_tpinfo->usrname, "\0" );
  	strcpy ( ptr_st_tpinfo->passwd, "\0" );
  	strcpy ( ptr_st_tpinfo->cltname, "bat_oth_amd" );
  	ptr_st_tpinfo->flags = 0;



   	userlog("bat_oth_amd connected to %s\n",ptr_st_tpinfo->grpname);


		if(tpinit((TPINIT *) ptr_st_tpinfo) == -1)
  	{
   		errlog(c_ServiceName, "S31015", TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
   		tpfree ( ( char * ) ptr_st_tpinfo );
   		exit(0);
  	}

  	tpfree((char *) ptr_st_tpinfo );

		if (tpopen() == -1)
  	{
   		userlog("222");
   		errlog(c_ServiceName, "S31020", TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
   		exit(0);
  	}

		 /*  Allocate space for send  and receive buffer  */

    ptr_fml_Sbuffer = (FBFR32 *) tpalloc ("FML32", NULL, MIN_FML_BUF_LEN);
    if(ptr_fml_Sbuffer == NULL)
    {
      errlog(c_ServiceName, "S31025", TPMSG, DEF_USR, DEF_SSSN, c_err_msg );
      fn_rgstr_bat ( 'U', c_ServiceName, c_xchng, c_pipe_id );
      tpabort(0);
      tpclose();
      tpterm();
      exit (0);

    }

		ptr_fml_Rbuffer = (FBFR32 *) tpalloc ("FML32", NULL, MIN_FML_BUF_LEN);
    if(ptr_fml_Sbuffer == NULL)
    {
      errlog(c_ServiceName, "S31030", TPMSG, DEF_USR, DEF_SSSN, c_err_msg );
      fn_rgstr_bat ( 'U', c_ServiceName, c_xchng, c_pipe_id );
			tpfree ( ( char * ) ptr_fml_Sbuffer );
      tpabort(0);
      tpclose();
      tpterm();
      exit (0);

    }

		userlog("Calling service SVC_OTH_SEL........");


		if(tpcall("SVC_OTH_SEL",(char *)ptr_fml_Sbuffer,0,(char **)&ptr_fml_Rbuffer,
                              &l_recv_buff_len,0) == -1)

		{

				if (TPCODE != TPESVCFAIL)
    		{
      			errlog(c_ServiceName, "S31035", TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
    		}
				else
				{	

					if( Fget32(ptr_fml_Rbuffer,FML_ERR_MSG, 0,c_err_msg,0)== -1)
      		{
        			errlog(c_ServiceName, "S31040",FMLMSG,DEF_USR, DEF_SSSN, c_err_msg);
      		}
					else
					{
						errlog(c_ServiceName, "S31045", TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
					}


				}

      	tpfree((char *)ptr_fml_Sbuffer);
      	tpfree((char *)ptr_fml_Rbuffer);
      	fn_rgstr_bat ( 'U', c_ServiceName, c_xchng, c_pipe_id );
      	tpabort(0);
      	tpclose();
      	tpterm();
      	exit(0);

		}

		userlog("Fetching data from FML");

		MEMSET(oth_rsn_cd0);
		MEMSET(oth_rsn_cd1);
		MEMSET(oth_rsn_cd2);

		i_err[0] = Fget32(ptr_fml_Rbuffer, FFO_STRIKE1,0,( char * )oth_rsn_cd0,0);
		i_ferr[0] = Ferror32;
		i_err[1] = Fget32(ptr_fml_Rbuffer, FFO_STRIKE2,0,( char * )oth_rsn_cd1,0);
		i_ferr[1] = Ferror32;
		i_err[2] = Fget32(ptr_fml_Rbuffer, FFO_STRIKE3,0,( char * )oth_rsn_cd2,0);
		i_ferr[2] = Ferror32;
		i_err[3] = Fget32(ptr_fml_Rbuffer, FFO_BO_AMT_BLKD,0,( char * )&oth_rsn_val0,0);
		i_ferr[3] = Ferror32;
		i_err[4] = Fget32(ptr_fml_Rbuffer, FFO_SO_AMT_BLKD,0,( char * )&oth_rsn_val1,0);
		i_ferr[4] = Ferror32;
		i_err[5] = Fget32(ptr_fml_Rbuffer, FFO_PSTN_AMT_BLKD,0,( char * )&oth_rsn_val2,0);
		i_ferr[5] = Ferror32;

		
		for ( i_cnt=0; i_cnt<=5; i_cnt++ )
    {
      if ( i_err [ i_cnt ] == -1 )
      {

					userlog("ERROR at field number :%d:", i_cnt);
					errlog(c_ServiceName, "S31050", TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
      		tpfree((char *)ptr_fml_Sbuffer);
      		tpfree((char *)ptr_fml_Rbuffer);
      		fn_rgstr_bat ( 'U', c_ServiceName, c_xchng, c_pipe_id );
      		tpabort(0);
      		tpclose();
      		tpterm();
      		exit(0);

			}

		}


		
		if(DEBUG_MSG_LVL_3){
		userlog("oth_rsn_cd[0]:%s:",oth_rsn_cd0);
		userlog("oth_rsn_cd[1]:%s:",oth_rsn_cd1);
		userlog("oth_rsn_cd[2]:%s:",oth_rsn_cd2);
		userlog("oth_rsn_val[0]:%lf:",oth_rsn_val0);
		userlog("oth_rsn_val[1]:%lf:",oth_rsn_val1);
		userlog("oth_rsn_val[2]:%lf:",oth_rsn_val2);
		}

		userlog("Copying data into struct");

		strcpy(oth_details.oth_rsn_cd[0],oth_rsn_cd0);
		strcpy(oth_details.oth_rsn_cd[1],oth_rsn_cd1);
		strcpy(oth_details.oth_rsn_cd[2],oth_rsn_cd2);
		oth_details.oth_rsn_val[0]=oth_rsn_val0;
		oth_details.oth_rsn_val[1]=oth_rsn_val1;
		oth_details.oth_rsn_val[2]=oth_rsn_val2;


		i_ch_val = tpbegin ( TRAN_TIMEOUT, 0 );
		if ( i_ch_val == -1 )
  	{
					errlog(c_ServiceName, "S31055", TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
          tpfree((char *)ptr_fml_Sbuffer);
      		tpfree((char *)ptr_fml_Rbuffer);
          fn_rgstr_bat ( 'U', c_ServiceName, c_xchng, c_pipe_id );
          tpabort(0);
          tpclose();
          tpterm();
          exit(0);

  	}

		userlog("Inserting into AMD");

		for(i=0;i<3;i++)
	  {	


			if(DEBUG_MSG_LVL_3){
			userlog("oth_details.oth_rsn_cd[i]:%s:",oth_details.oth_rsn_cd[i]);
			userlog("oth_details.oth_rsn_val[i]:%lf:",oth_details.oth_rsn_val[i]);
			}

			EXEC SQL
				INSERT INTO amd_auto_mis_dtls
        (
          amd_trn_cd,
          amd_trd_dt,
          amd_value,
          amd_ins_dt,
          amd_remarks
        )
        VALUES		
				(
					:oth_details.oth_rsn_cd[i],
					:c_trd_trd_dt,
					:oth_details.oth_rsn_val[i],
					sysdate,
					decode(:oth_details.oth_rsn_cd[i],'OTH1','Number of Users',
																						'OTH2','Number of Active Users',
																						'OTH3','Number of Deactive Users',
																						'Invalid Option')
				);

		}

		i_ch_val = tpcommit ( 0 );

		if ( i_ch_val == -1 )
    {
          errlog(c_ServiceName, "S31060", TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
          tpfree((char *)ptr_fml_Sbuffer);
      		tpfree((char *)ptr_fml_Rbuffer);
          fn_rgstr_bat ( 'U', c_ServiceName, c_xchng, c_pipe_id );
          tpabort(0);
          tpclose();
          tpterm();
          exit(0);

    }


		userlog("bat_oth_amd completed successfullY");
		fn_rgstr_bat ( 'U', c_ServiceName, c_xchng, c_pipe_id );

  	tpclose();
  	tpterm();
  	exit(0);

} /**main endds **/
