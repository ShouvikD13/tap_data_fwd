/********************************************************************************
*  Program           : bat_fo_sam_intrst.pc                                   	*
*                                                                              	*
*  Description       : To compute SAM interest for FO														*
*                                                                              	*
*  Input Parameters  : Pgm_NM NFO NFO NA <run date>                             *
*                                                                              	*
*  Change Log        : 1.0   04-Nov-2020 Akash B|Infotech                  		  *
*********************************************************************************
*  1.0    -  New Release                                                       	*
*  1.1    -  CR-ISEC14-162075 SAM in Currency & Commodity (Tanmay Patel)        *
********************************************************************************/

/* Header Files */
#include <stdio.h>
#include <string.h>
#include <sqlca.h>
#include <stdlib.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fn_ddr.h>
#include <string.h>
#include <stdlib.h>
#include <fml_rout.h>
#include <unistd.h> 

FBFR32 *ptr_fml_Ibuf ;

char c_mtch_account[11];
char c_int_dt[12];
char c_mtch_accnt[11];
double d_sam_amt=0;
double d_mrgn_req=0;
double d_sam_amount=0;
double d_mrgn_rq=0;
char c_err_msg [ 256 ];
int i_returncode=0;
char c_frm_dt[12];
char c_to_dt[12];
double d_int_rt=0;
double d_int_samamt=0;
long l_count=0;

char c_rowid[20];
char c_run_dt[12];
char c_run_flg='N';
char c_rerun_flg='R';
int fn_get_sam_records(char *,char *,char *,char *);
int fn_get_flr_records(char *,char *,int *);
void BAT_FO_SAM_INTRST ( int argc, char *argv[] )
{
 long int li_tot_rcrds;
 int i_ch_val;
 long int li_cnt;
 long int li_run_no;
 char c_msg[256];
 char c_ServiceName [ 33 ];
 char c_xchng_cd [ 4 ];
 char c_trd_dt [12];
 char c_adm_dt [12];
 char c_cln_mtch_accnt [ 11 ];
 char c_rout_str[4];
 char c_path = 'B';
 char c_event[256];
 char c_command[60];
 char c_xchng_cd_tmp[3];
 char c_int_frm_dt[12];
 char c_sam_last_dt[12];

 char c_rout_crt[4];
 char c_tt_dt[12];
 char c_mod_flg='\0'; 

 int i_tot_amc_rec=0;
 int i_run_cnt=0;
 int i_sam_prc_cnt=0;
 int i_fbc_cnt=0;
 int i_trnsctn=0;

 int  i_rerun_cnt=0;

 strcpy ( c_ServiceName, argv[0] );
 strcpy(c_xchng_cd,argv[2]);
 strcpy(c_run_dt,argv[4]);
 rtrim(c_ServiceName);   

 rtrim(c_run_dt);

  EXEC SQL
  select count(*)
  into :i_sam_prc_cnt
  from audit_prog_runstts
  where APR_PROG_NAME='bat_fo_sam_intrst'
  and APR_SUCC_FLG='P'
  and  APR_XCHNG_CD='NFO'
  and trunc(APR_TRD_DT)=:c_run_dt;

  if(SQLCODE != 0)
  {
   fn_errlog(c_ServiceName, "S31005", SQLMSG, c_err_msg);
   fn_userlog(c_ServiceName, "Error in getting sam interest rundate count");
   return;
  }

  if ( i_sam_prc_cnt >  0 )
  {
   fn_userlog(c_ServiceName,"SAM interest process already run for :%s:",c_run_dt);
   return ;
  }

  MEMSET(c_int_frm_dt);

  EXEC SQL
  select max(to_date(APR_TRD_DT,'dd-mon-yyyy'))
  into :c_sam_last_dt
  from audit_prog_runstts
  where APR_PROG_NAME='bat_fo_sam_intrst'
  and APR_SUCC_FLG='P'
  and  APR_XCHNG_CD='NFO';
 
  if(SQLCODE != 0)
  {
   fn_errlog(c_ServiceName, "S31010", SQLMSG, c_err_msg);
   sprintf(c_event, "Error in getting count.");
   fn_bat_pst_msg( c_ServiceName, c_event, c_tag );
   return;
  }

  fn_userlog(c_ServiceName,"Last sam run date :%s:",c_sam_last_dt);

  EXEC SQL
  SELECT TO_DATE(:c_sam_last_dt,'DD-MON-YYYY')+1
  INTO :c_int_frm_dt
  FROM DUAL;

  if(SQLCODE != 0)
  {
   fn_errlog(c_ServiceName, "S31015", SQLMSG, c_err_msg);
   sprintf(c_event, "Error in getting count.");
   fn_bat_pst_msg( c_ServiceName, c_event, c_tag );
   return;
  }
   
  rtrim(c_int_frm_dt);
  fn_userlog(c_ServiceName,"Interest to be computed from date :%s:",c_int_frm_dt);

  fn_userlog(c_ServiceName," c_int_frm_dt :%s:",c_int_frm_dt);
  fn_userlog(c_ServiceName,"c_xchng_cd :%s:",c_xchng_cd); 
 
  fn_userlog(c_ServiceName,"Running process from date :%s:",c_int_frm_dt); 


  fn_cpy_ddr(c_rout_crt);


  fn_userlog(c_ServiceName,"Before inserting sam records"); 
  fn_userlog(c_ServiceName,"c_int_frm_dt :%s:",c_int_frm_dt);
  fn_userlog(c_ServiceName,"c_run_dt :%s:",c_run_dt);

 
  i_ch_val= fn_get_sam_records(c_ServiceName,
                               c_int_frm_dt, 
                               c_sam_last_dt,
                               c_run_dt);

  if ( i_ch_val != 0 )
  {
   fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg);
   strcpy ( c_msg, "System error. Contact system support" );
   fn_bat_pst_msg ( c_ServiceName, "Failed in Fetching Position Data", c_tag );
   return;
  }


  fn_userlog(c_ServiceName,"Reached here ");
 
  li_tot_rcrds = fn_reccnt_rs ( ptr_fml_Ibuf,
                               c_ServiceName,
                               c_err_msg,
                               FFO_INTERVAL 
                               );

  if ( li_tot_rcrds == -1 )
  {
   fn_errlog( c_ServiceName, "S31025", LIBMSG, c_err_msg );
   strcpy ( c_msg, "System error. Contact system support" );
   fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
   fn_dstry_rs ( ptr_fml_Ibuf );
   return;
  } 

  sprintf ( c_msg, "Total records = %ld", li_tot_rcrds );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  for ( li_cnt=1; li_cnt<=li_tot_rcrds; li_cnt++ )
  {
   i_ch_val = fn_getnxt_rs ( ptr_fml_Ibuf,
                             c_ServiceName,
                             c_err_msg,
                             6,
                             FFO_EBA_MTCH_ACT_NO, ( char * )c_mtch_accnt,NULL,
                             FFO_ORD_VALID_DT, ( char * )c_int_dt,NULL, 
                             FFO_AMOUNT,( char * )&d_sam_amt,NULL,
                             FFO_LIMIT,( char * )&d_mrgn_rq,NULL,
                             FFO_SERIES,( char *)c_rowid,NULL, 
                             FFO_INTERVAL,( char *)&l_count,NULL
                           ); 


   if ( i_ch_val != 0 )
   {
    fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg ( c_ServiceName, "Failed in Processing Data", c_tag );
    fn_dstry_rs ( ptr_fml_Ibuf );
    return;
   }


   sprintf ( c_msg, "Processing record %ld of %ld", li_cnt, li_tot_rcrds );
   fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);

   i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                 c_err_msg,
                                 "sfr_prcs_tifp",
                                 li_cnt,
                                 li_tot_rcrds );
   if (  i_ch_val == -1 )
   {
    fn_errlog( c_ServiceName, "S31035", LIBMSG, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg ( c_ServiceName,"Failed in Processing Data" , c_tag );
    fn_dstry_rs ( ptr_fml_Ibuf );
    return;
   }


   fn_userlog(c_ServiceName,"before service call"); 

   i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                 c_err_msg,
                                "SFO_SAM_INTCMPT",
                                 0,
                                 6,
                                 FFO_EBA_MTCH_ACT_NO,(char*)c_mtch_accnt,
                                 FFO_ORD_VALID_DT, ( char * )c_int_dt,
				 				  	 	 	 			   FFO_AMOUNT,( char * )&d_sam_amt,
					 		 		 				       FFO_LIMIT,( char * )&d_mrgn_rq,
                                 FFO_SERIES,( char *)c_rowid,
                                 FFO_INTERVAL,( char *)&l_count
                                );



   if ( i_ch_val == -1 )
   {
    fn_errlog( c_ServiceName, "S31040", LIBMSG, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg ( c_ServiceName,c_msg , c_tag );
    fn_dstry_rs ( ptr_fml_Ibuf );
    return;
   } 
  }

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg);

  if( i_trnsctn == -1 )
  {
   fn_errlog( c_ServiceName, "S31045",FMLMSG , c_err_msg );
   return;
  }

  EXEC SQL
  INSERT INTO audit_prog_runstts
            (
             APR_PROG_NAME,
             APR_TIME,
             APR_SUCC_FLG,
             APR_TRD_DT,
             APR_XCHNG_CD
            )
  VALUES    (
             :c_ServiceName,
             sysdate,
             'P',
             :c_run_dt,
             'NFO' 
            );
  
  if( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31050", SQLMSG, c_err_msg);
    fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg); 
    return;
  }


  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
   fn_errlog( c_ServiceName, "S31055",FMLMSG , c_err_msg );
   fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg);
   return;
  }


 return;

}

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_FO_SAM_INTRST;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}

void fn_abort()
{
  fn_userlog ("BAT_FO_SAM_INTRST","Abort BAT_ISEC_MRGN_PIPO processing");
  tpclose();
  tpterm ();
}

int fn_get_sam_records(char *c_ServiceName,char *c_date,char *c_lst_samdt,char *c_rundate)
{

 Finit32(ptr_fml_Ibuf,MIN_FML_BUF_LEN);
 ptr_fml_Ibuf = NULL;

 char c_flg_chk ='Y';
 char c_temp_dt[12];
 char c_int_dt[12];

 int i_int_cnt=0; 
 int i_trnsctn=0;
 int i_run_cnt=0;
 int i_fbc_cnt=0;
 char  c_hldy_flg='\0';
 char c_scrpt_cmd[256];
  
 fn_userlog(c_ServiceName,"Inside fn_ins_sam_records");
 fn_userlog(c_ServiceName,"c_date :%s:",c_date);
 fn_userlog(c_ServiceName,"c_lst_samdt :%s:",c_lst_samdt);

 while ( c_flg_chk == 'Y')
 {

  c_hldy_flg='\0';
  i_run_cnt=0;
  i_fbc_cnt=0;
  l_count =0;

  EXEC SQL
  SELECT COUNT(*)
  INTO :i_fbc_cnt
  FROM fbc_fo_brnch_cal
  where trunc(fbc_trd_dt)=:c_date
  and fbc_xchng_cd='NFO';

  if(SQLCODE != 0)
  {
   fn_errlog( c_ServiceName, "S31060",SQLMSG, c_err_msg ); 
   return -1;
  } 

  c_hldy_flg='\0';
 
  if ( i_fbc_cnt == 0 )
  {
   c_hldy_flg ='Y';
  }
  else
  {
   c_hldy_flg = 'N';
  } 

  fn_userlog(c_ServiceName," Date: :%s: Holiday flag :%c:",c_date,c_hldy_flg);

  if( c_hldy_flg == 'N')
  {
   EXEC SQL
   SELECT COUNT(*)
   INTO :i_run_cnt
   FROM audit_prog_runstts
   WHERE trim(APR_PROG_NAME) = 'bat_isec_mrgn_pipo'
   AND APR_TRD_DT = :c_date
   AND APR_SUCC_FLG = 'P'
   AND APR_XCHNG_CD = 'NA';

   if(SQLCODE != 0)
   {
    fn_errlog(c_ServiceName, "S31065", SQLMSG, c_err_msg);
    return -1;
   }

   if (i_run_cnt == 0)
   {
    fn_userlog(c_ServiceName,"ADM Process not run for the day");
    MEMSET(c_scrpt_cmd);
    sprintf(c_scrpt_cmd,"nohup %s/sh_scripts/saminterest_rpt.sh %s  & ",tuxgetenv("HOME"),c_date); 
    fn_userlog(c_ServiceName," command is :%s",c_scrpt_cmd);
    system(c_scrpt_cmd);
    return -1;
   }
  }


  EXEC SQL BEGIN DECLARE SECTION;
   sql_cursor  sys_cursor_sam;
   EXEC SQL END DECLARE SECTION;

  EXEC SQL ALLOCATE :sys_cursor_sam;

 if ( c_hldy_flg == 'N')
 {
   EXEC SQL EXECUTE
   BEGIN
   OPEN :sys_cursor_sam FOR
   select MTCH_ACCNT ,NVL(FAB_PLG_AMT,0)/100 pl , mg/100,to_date(:c_date,'dd-mon-yyyy'),'NA'
 from
   (
   select MTCH_ACCNT  , sum(MRGN_REQ) mg from (
    SELECT  FUP_CLM_MTCH_ACCNT MTCH_ACCNT,(FUP_UTRD_MRGN + FUP_ADD_MRGN_VAL) MRGN_REQ
    FROM  FUP_FUT_UNDRLYNG_PSTN
    WHERE (FUP_UTRD_MRGN + FUP_ADD_MRGN_VAL) != 0
    UNION ALL
    SELECT  FOP_CLM_MTCH_ACCNT MTCH_ACCNT,FOP_UEXCTD_MRGN MRGN_REQ
    FROM   FOP_FO_OPTIONS_PSTN
    WHERE  FOP_UEXCTD_MRGN !=0
    UNION ALL
    SELECT  FOP_CLM_MTCH_ACCNT MTCH_ACCNT,NVL(FOP_UDLVRY_MRGN,0) MRGN_REQ
    FROM   FOP_FO_OPTIONS_PSTN
    WHERE  NVL(FOP_UDLVRY_MRGN,0) !=0
    AND   FOP_OPNPSTN_FLW ='B'
    UNION ALL
    SELECT  FUS_CLM_MTCH_ACCNT MTCH_ACCNT  ,( FUS_INITIAL_MRGN + FUS_BLCKD_PL ) MRGN_REQ
    FROM   FUS_FO_UNDRLYNG_SPN_PSTN
    WHERE  ( FUS_INITIAL_MRGN + FUS_BLCKD_PL ) != 0
    UNION ALL
    SELECT distinct FCP_CLM_MTCH_ACCNT MTCH_ACCNT,NVL(FCP_UDLVRY_MRGN,0) MRGN_REQ
    FROM FCP_FO_SPN_CNTRCT_PSTN
    WHERE NVL(FCP_UDLVRY_MRGN,0) !=0
    AND  FCP_OPNPSTN_FLW ='B' ) group by MTCH_ACCNT 
   ),
   FAB_FO_ALC_BFT_SMRY,USR_USER_MASTER,UAC_USR_ACCNTS
   where FAB_CLM_MTCH_ACCNT=MTCH_ACCNT
   and  trim(UAC_CLM_MTCH_ACCNT)= MTCH_ACCNT
   and  USR_USR_ID = UAC_USR_ID
   and  NVL(USR_BRKG_MDL_FLG,'N')='L'
   and NVL(FAB_PLG_AMT,0)!=0
   and MTCH_ACCNT not in(
           SELECT DISTINCT AMC_CLM_MTCH_ACCNT
           FROM  AMC_ADM_MRGN_CALC
           WHERE TRUNC(AMC_TRD_DT) =:c_date
           AND   AMC_BATCH_SITE_IND = 'B'
           AND   AMC_STATUS_FLG = 'Y'
   )
   and MTCH_ACCNT not in ( select SID_MATCH_ACC
                          from SID_SAM_INTRST_DTLS
                          where trunc(SID_DATE)=:c_date
                          and   SID_XCHNG = 'NFO' /** ver 1.1 **/
                          ) 
   union 
     select AMC_CLM_MTCH_ACCNT mt ,
     AMC_NEW_PLG_AMT/100 pl ,
     AMC_TOTAL_MRGN_REQ/100 mg,
     to_date(:c_date,'dd-mon-yyyy'),
     'NA'
  FROM AMC_ADM_MRGN_CALC A,USR_USER_MASTER,UAC_USR_ACCNTS
  WHERE AMC_BATCH_SITE_IND='B'
  and trim(AMC_CLM_MTCH_ACCNT)=trim(UAC_CLM_MTCH_ACCNT)
  and USR_USR_ID = UAC_USR_ID
  and  NVL(USR_BRKG_MDL_FLG,'N')='L'
  AND TRUNC(AMC_TRD_DT)=:c_date
  AND AMC_STATUS_FLG = 'Y'
  AND NVL(AMC_NEW_PLG_AMT,0)!=0
  and UAC_CLM_MTCH_ACCNT not in ( select SID_MATCH_ACC
                          from SID_SAM_INTRST_DTLS
                          where trunc(SID_DATE)=:c_date
                          AND   SID_XCHNG = 'NFO' /** ver 1.1 **/
                          ) 
  union 
  SELECT SID_MATCH_ACC,
       SID_SAM_AMOUNT/100,
       SID_SAM_MRGN_REQ/100,
       SID_DATE,
       ROWIDTOCHAR(ROWID) 
  FROM SID_SAM_INTRST_DTLS
  WHERE SID_SAM_CMPT_FLG='F'
  AND   SID_XCHNG = 'NFO'; /** ver 1.1 **/


  END;
  END-EXEC;

  }
  else
  {
   EXEC SQL EXECUTE
   BEGIN
   OPEN :sys_cursor_sam FOR
   SELECT SID_MATCH_ACC,
          SID_SAM_AMOUNT/100,
          SID_SAM_MRGN_REQ/100,
          :c_date,
          'NA'
   FROM SID_SAM_INTRST_DTLS 
   WHERE TRUNC(SID_DATE)=:c_lst_samdt
   AND   SID_XCHNG = 'NFO'; /** ver 1.1 **/

  END;
  END-EXEC;

 }

 if( SQLCODE != 0 )
 {
  fn_errlog( c_ServiceName, "S31070",SQLMSG, c_err_msg );
  EXEC SQL CLOSE :sys_cursor_sam;
  EXEC SQL FREE  :sys_cursor_sam; 
  return -1;
 }

 while(1)
 {
  MEMSET(c_mtch_account);
  MEMSET(c_int_dt);
  MEMSET(c_rowid);
  d_sam_amount=0;
  d_mrgn_req=0;

   EXEC SQL FETCH :sys_cursor_sam
   INTO  :c_mtch_account,
         :d_sam_amount,
         :d_mrgn_req,
         :c_int_dt,
         :c_rowid;

  if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
   fn_errlog( c_ServiceName, "S31075", SQLMSG, c_err_msg );
   EXEC SQL CLOSE :sys_cursor_sam ;
   return -1;
  }


 if( SQLCODE == NO_DATA_FOUND )
 {
  fn_userlog(c_ServiceName,"All records fetched or Inside No data found for Match Account");
  EXEC SQL CLOSE :sys_cursor_sam;
  break;
 }

 rtrim(c_rowid);

 l_count = l_count + 1 ;

 fn_userlog(c_ServiceName,"Match account :%s:",c_mtch_account);
 fn_userlog(c_ServiceName,"Sam Amount :%lf:",d_sam_amount);
 fn_userlog(c_ServiceName,"Margin Required :%lf:",d_mrgn_req);
 fn_userlog(c_ServiceName,"Interest Date :%s:",c_int_dt);
 fn_userlog(c_ServiceName,"Row ID :%s:",c_rowid);
 fn_userlog(c_ServiceName,"Counter :%ld:",l_count);

 i_returncode = fn_pack_vartofml (c_ServiceName,
                                   c_err_msg,
                                   &ptr_fml_Ibuf,
                                   6,
                                   FFO_EBA_MTCH_ACT_NO, ( char * )c_mtch_account,
                                   FFO_ORD_VALID_DT, ( char * )c_int_dt,
                                   FFO_AMOUNT,( char * )&d_sam_amount,
                                   FFO_LIMIT,( char * )&d_mrgn_req,
                                   FFO_SERIES,  ( char *)c_rowid,
                                   FFO_INTERVAL,( char *)&l_count
                                   );


 if( i_returncode == -1 )
 {
  fn_errlog( c_ServiceName, "S31080", SQLMSG, c_err_msg );
  EXEC SQL CLOSE :sys_cursor_sam ;
  return -1;
 }

 }


 EXEC SQL
  SELECT (to_date(:c_date,'dd-mon-yyyy')+1 )
  INTO :c_date
  FROM DUAL;

  if( SQLCODE != 0  && ( SQLCODE != NO_DATA_FOUND))
  {
   fn_userlog(c_ServiceName,"Error in fetching values");
   fn_errlog( c_ServiceName, "S31085", SQLMSG, c_err_msg );
   return -1;
  }


  fn_userlog(c_ServiceName,"After incrementing date :%s:",c_date);

  EXEC SQL
  SELECT 'N'
  INTO :c_flg_chk
  FROM DUAL
  WHERE to_date(:c_date,'dd-mon-yyyy') > to_date(:c_rundate,'dd-mon-yyyy');

  if( SQLCODE != 0  && ( SQLCODE != NO_DATA_FOUND))
  {
   fn_userlog(c_ServiceName,"Error in fetching values");
   fn_errlog( c_ServiceName, "S31090", SQLMSG, c_err_msg );
   return -1;
  }

 }
  return 0;
}
  

