/**************************************************************************************************************/
/* Service name :   BAT_SUP_INVEST                                                                            */
/*                                                                                                            */
/* Description  :  This Batch Program would pick clients with challeneg complition date as provide by input,  */
/*                 compute their PNL, charges and update them for FNO.                                        */
/*                                                                                                            */ 
/* Input       :                                                                                              */
/*                                                                                                            */
/*                                                                                                            */
/* Output      :                                                                                              */
/*                                                                                                            */
/* Log         :   Ver 1.0 |  Ravindra Panda                                                                  */
/**************************************************************************************************************/
/* Ver 1.0  :  New Release                                                                                    */
/**************************************************************************************************************/


/** Header files **/
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <string.h>
#include <stdlib.h>
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>
#include <sqlca.h>          
#include <fn_pos.h>  
#include <stdio.h>
#include <fn_tuxlib.h>
#include <math.h>
#include <eba_to_ors.h>
#include <fo_view_def.h>
#include <fn_session.h>
#include <stdarg.h>

int fn_pack_vartofml_local ( char *c_ServiceName,
                       char *c_err_msg,
                       FBFR32 **ptr_fml_obuf,
                       int i_tot_ofields,
                       ... );

void BAT_SUP_INVEST( int argc, char *argv[] )
{
  char c_msg[256] = {'\0'};
  char c_ServiceName [ 33 ]= {'\0'};
  char c_err_msg [ 256 ]= {'\0'};
  char c_error_txt[256]= {'\0'};
  char c_trd_dt[LEN_DATE] = {'\0'};
  char c_lst_trd_dt[LEN_DATE] = {'\0'};
  char c_curr_dt[LEN_DATE] = {'\0'};
  char  c_xchng_cd[4] = {'\0'};
  char c_cln_mtch_accnt [ 11 ] = {'\0'};
  char c_mon_name[4] = {'\0'};
  char  c_strt_dt[LEN_DATE] = {'\0'};
  char  c_end_dt[LEN_DATE] = {'\0'};
  char  c_prdct_typ_opt = 'O';
  char  c_prdct_typ_fut = 'F';
  char  c_rout_crt[5] = "111";
  char  c_user_id[21] = "system";
	char  c_strt_dt_temp[LEN_DATE] = {'\0'};
  char  c_undrlyng[11] = "A";
  char  c_end_dt_temp[LEN_DATE] = {'\0'};
  char  c_mon_yr[10] = {'\0'};
	char c_scrpt_cmd[256] = {'\0'};
	char  c_req_flg = 'S';
 
  long  l_session_id = 0;
  long    l_recvbuf = 0;

  int     i_returncode = 0;
	int  i_fbc_day_count = 0;
  int     i = 0;
  int     i_trnsctn = 0;
  int     i_err[10] = {0};
  int     i_ferr[10] = {0};
	int     i_opt_count = 0;
  int     i_fut_count = 0;
  int     i_opt_counter = 0;
  int     i_fut_counter = 0; 
	int  		i_err_cnt_fut = 0;
	int  		i_err_cnt_opt = 0;

  double  d_rlzd_pl_opt = 0.0;
  double  d_charges_opt = 0.0;
  double  d_unrlzd_pl_opt = 0.0;
  double  d_rlzd_pl_fut = 0.0;
  double  d_charges_fut = 0.0;
  double  d_unrlzd_pl_fut = 0.0;
  double  d_tot_charges = 0.0;
  double  d_tot_pl = 0.0;
	double  d_rlzd_pl_opt_temp = 0.0;
	double  d_charges_opt_temp = 0.0;
	double  d_unrlzd_pl_opt_temp = 0.0;
	double  d_rlzd_pl_fut_temp = 0.0;
	double  d_charges_fut_temp = 0.0;
	double  d_unrlzd_pl_fut_temp = 0.0;

  FBFR32 *ptr_fml_IObuf = NULL;
  FBFR32 *ptr_fml_IFbuf = NULL;
  FBFR32 *ptr_fml_SObuf = NULL;  /*** Buffer used for Options ***/
  FBFR32 *ptr_fml_SFbuf = NULL;   /*** Buffer used for Futures ***/

  strcpy ( c_ServiceName, argv[0] );

	if(argc != 4)
  {
    fn_userlog( argv[0],"Usage - %s <configuration file> <Exchange code> ",argv[0]);
    fn_bat_pst_msg ( argv[0], "Invalid number of arguments", c_tag );
    fn_userlog ( argv[0], "Invalid number of arguments" );
    return ;
  } 

  INITBATDBGLVL(argv[0]);

  sprintf ( c_msg, "Batch process %s started", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  strcpy( c_xchng_cd, argv[1] );

  if( DEBUG_MSG_LVL_3 )
  {
		fn_userlog(c_ServiceName,"Service called with c_req_flg value :%c:",c_req_flg);
    fn_userlog( c_ServiceName, "***** Following Are the Inputs *****");
    fn_userlog( c_ServiceName, "Exchange code :%s:", c_xchng_cd );
    fn_userlog( c_ServiceName, "***********************************");
  }

 	/*** Selecting last trade date of month based on system date  and checking if its a match to current date start here ***/

 	EXEC SQL
 	select max(FBC_TRD_DT)
 	into  :c_lst_trd_dt
 	from FBC_FO_BRNCH_CAL where FBC_TRD_DT <= last_day(sysdate) and FBC_XCHNG_CD='NFO';

 	if( SQLCODE != 0 )
 	{
   	fn_errlog(c_ServiceName, "S31005", SQLMSG, c_err_msg);
   	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
   	return;
 	}

 	rtrim(c_lst_trd_dt);
	if( DEBUG_MSG_LVL_3 )
 		fn_userlog( c_ServiceName, "Last trading date for current month is :%s:",c_lst_trd_dt);

	EXEC SQL
 	select sysdate
 	into  :c_curr_dt
 	from dual;
	if( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31010", SQLMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    return;
  }

	rtrim(c_curr_dt);
	if( DEBUG_MSG_LVL_3 )
 		fn_userlog( c_ServiceName, "Current date is :%s:",c_curr_dt);

 	if (strcmp( c_lst_trd_dt,c_curr_dt ) != 0 )
 	{
		strcpy(c_err_msg,"Last trade date and current date mismatch");
   	fn_errlog( c_ServiceName, "S31015","Last trade date and current date mismatch", c_err_msg);
		return;
	}

  /*** Selecting last trade date of month based on system date ends here ***/


 	/*************************** Code segement to check, if fbc_fo_brnch_cal is defined for next month. ******************************
	 *************************** If yes, continue with next step of th batch process or else trigger a  ******************************
	 *************************** mail to OPS team to define fbc_fo_brnch_cal ********************************************************/
  
	EXEC SQL
  select count(FBC_TRD_DT)
  into  :i_fbc_day_count
	from FBC_FO_BRNCH_CAL
	where FBC_TRD_DT >= last_day(sysdate);

  if( SQLCODE != 0 )
  {
     fn_errlog(c_ServiceName, "S31020", SQLMSG, c_err_msg);
     fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
     return;
  }
	if( DEBUG_MSG_LVL_3 )
		fn_userlog( c_ServiceName, "No of trade days defined in fbc table for next month is :%d:",i_fbc_day_count);

	if ( i_fbc_day_count == 0 )
	{
		MEMSET(c_scrpt_cmd);
 		sprintf(c_scrpt_cmd,"ksh %s/sh_scripts/supinvstr_mlr.sh & ",tuxgetenv("HOME"));
 		fn_userlog( c_ServiceName, "Operation team  mailer run command :%s:",c_scrpt_cmd);
		system(c_scrpt_cmd);
		return;	
	}


	/******************************************* fbc_fo_brnch_cal check ends here **************************************************/
	
  /*** Selecting last trade date of month based on system date ends here ***/

  /*** fetching client records to process ***/
  EXEC SQL
  DECLARE clnt_data CURSOR FOR
  SELECT FSI_CLM_MTCH_ACCNT
  FROM    FSI_FO_SUPER_INVESTER
  WHERE   FSI_END_DT = to_date(sysdate,'dd-Mon-yyyy')
	AND			FSI_STATUS = 'O';

  EXEC SQL
  OPEN clnt_data;    /** Opening clnt_data cursor **/
  if( SQLCODE != 0 )
  {
     fn_errlog(c_ServiceName, "S31025", SQLMSG, c_err_msg);
     fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
     EXEC SQL CLOSE clnt_data;
      return;
  }

  /*** Initiating transaction ***/
  i_trnsctn = fn_begintran(c_ServiceName, c_err_msg);

  if (i_trnsctn == -1)
  {
    fn_userlog(c_ServiceName, "Failed in initial begin transaction");
    fn_errlog(c_ServiceName, "S31030", TPMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    EXEC SQL CLOSE clnt_data;
    return;
  }
	if( DEBUG_MSG_LVL_3 )
	  fn_userlog( c_ServiceName, "Transaction INITIATED successfully.");

	/*** Setting start and end date values for calling option, future protfolio services ***/

  EXEC SQL
  select trunc(sysdate,'MM'),
         last_day(add_months(sysdate,2))
  into   :c_strt_dt,
         :c_end_dt
  from dual;
  if( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31035", SQLMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    EXEC SQL CLOSE clnt_data;
    return;
  }

  rtrim(c_strt_dt);
  rtrim(c_end_dt);
	if( DEBUG_MSG_LVL_3 )
	{
  	fn_userlog(c_ServiceName, "Start date is :%s:",c_strt_dt);
  	fn_userlog(c_ServiceName, "End date is :%s:",c_end_dt);
	}

  /*** start and end date selection ends here ***/

  for( ; ; )
  {

		 char  c_err_chck_opt[256] = {'\0'};
  	 char  c_err_chck_fut[256] = {'\0'};

		 d_rlzd_pl_opt = 0.0;
		 d_charges_opt = 0.0;
		 d_unrlzd_pl_opt = 0.0;

		 d_rlzd_pl_fut = 0.0;
	   d_charges_fut = 0.0;
	   d_unrlzd_pl_fut = 0.0;

		 d_tot_pl = 0.0;
		 d_tot_charges = 0.0;

		 i_opt_count = 0;
		 i_fut_count = 0;
		 i_err_cnt_fut = 0;
		 i_err_cnt_opt = 0;

     EXEC SQL
     FETCH   clnt_data
     INTO  :c_cln_mtch_accnt;
     if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          fn_userlog(c_ServiceName,"NO DATA FOUND IN CLNT_DATA CURSOR. ");
          break;
        }
        else
        {
           fn_errlog(c_ServiceName, "S31040", SQLMSG, c_err_msg);
           fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
            EXEC SQL CLOSE clnt_data;
           fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
           return;
        }
      }

      if( DEBUG_MSG_LVL_3 )
        fn_userlog( c_ServiceName, "Working on trades of match id :%s:", c_cln_mtch_accnt);

      /*** Calculation for Option Trades starts here ***/

			ptr_fml_SObuf = ( FBFR32 *)NULL;
      i_returncode = fn_pack_vartofml_local ( c_ServiceName,
                     c_err_msg,
                     &ptr_fml_SObuf,
                     10,
	    						 	 FFO_PRDCT_TYP,      (char *)&c_prdct_typ_opt,
                     FFO_UNDRLYNG,       (char *)c_undrlyng,
                     FFO_SSSN_ID,             (char *) &l_session_id,
	    							 FFO_ROUT_CRT,        (char *)c_rout_crt,
	    							 FFO_USR_ID,              (char *)c_user_id,
	    							 FFO_XCHNG_CD,       (char *)c_xchng_cd,
	    							 FFO_EBA_MTCH_ACT_NO,  (char *)c_cln_mtch_accnt,
	    							 FFO_FROM_DT,         (char *)c_strt_dt,
	    							 FFO_TO_DT,               (char *)c_end_dt,
										 FFO_RQST_TYP,							(char *)&c_req_flg	);
       if ( i_returncode != 0 )
       {
         fn_errlog( c_ServiceName, "S31045", LIBMSG, c_err_msg);
         fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
         fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
         EXEC SQL CLOSE clnt_data;
         return;
       }

       ptr_fml_IObuf = ( FBFR32 *)NULL;
       ptr_fml_IObuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

       if ( ptr_fml_IObuf  == NULL )
       {
         fn_errlog( c_ServiceName, "S31050", TPMSG, c_err_msg);
       	 fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
         fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
       	 tpfree( ( char * )ptr_fml_SObuf);
         EXEC SQL CLOSE clnt_data;
         return;
       }

       i_returncode = tpcall ( "SFO_OPT_PRTFL",
                    ( char *)ptr_fml_SObuf,
                    0,
                    ( char **)&ptr_fml_IObuf ,
                    &l_recvbuf,
                    0
                    );
			 if ( i_returncode != SUCC_BFR)
       {
          fn_errlog( c_ServiceName, "S31055",TPMSG,c_err_msg);
          fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
          fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
          tpfree( ( char * )ptr_fml_IObuf);
          tpfree( ( char * )ptr_fml_SObuf);
          EXEC SQL CLOSE clnt_data;
          return;
       }
			 if ( Fget32( ptr_fml_IObuf,FFO_ERR_MSG,0,(char *)c_err_chck_opt, 0)== -1)
			 {
				 if( Ferror32 != FNOTPRES )
				 {
						fn_errlog( c_ServiceName, "S31060","Error while fetching value from FML FFO_ERR_MSG.",c_err_msg);
         		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
         		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
         		tpfree( ( char * )ptr_fml_IObuf);
         		tpfree( ( char * )ptr_fml_SObuf);
         		EXEC SQL CLOSE clnt_data;
         		return;
				 }
				 else
						i_err_cnt_opt = 1;
			 } 
				
			 if ( i_err_cnt_opt != 1 )
			 {
					fn_userlog(c_ServiceName, "C_ERR_CHCK_OPT is :%s:.",c_err_chck_opt);
					if ( strcmp(c_err_chck_opt,"No record to be shown in this view") != 0 )
       		{
       			fn_errlog( c_ServiceName, "S31065","NOT THE EXPECTED ERROR MESSAGE.",c_err_msg);
       			fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
       			fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
       			tpfree( ( char * )ptr_fml_IObuf);
       			tpfree( ( char * )ptr_fml_SObuf);
       			EXEC SQL CLOSE clnt_data;
       			return;
			 		}
			 		fn_userlog(c_ServiceName, "No records for for match id :%s: under OPTION PROTFOLIO.",c_cln_mtch_accnt);
       }

			 /* Fetching total options record count returned by sfo_opt_prtfl service for particular match id */
  		 i_opt_count = Foccur32((FBFR32 * ) ptr_fml_IObuf, FFO_RLZD_PL);
			 if( DEBUG_MSG_LVL_3 )
  		 	fn_userlog(c_ServiceName, "Total count records returned by sfo_opt_prtfl for match id :%s: is :%d:", c_cln_mtch_accnt,i_opt_count);

		 		for ( i_opt_counter = 0; i_opt_counter < i_opt_count; i_opt_counter++ ) /** for loop to process values returned by sfo_opt_prtfl **/
			 	{
					d_rlzd_pl_opt_temp = 0.0;
					d_charges_opt_temp = 0.0;
			  	d_unrlzd_pl_opt_temp = 0.0;
	
       		i_err [ 0 ] = Fget32( ptr_fml_IObuf ,FFO_RLZD_PL,i_opt_counter,(char *)&d_rlzd_pl_opt_temp ,0);
       		i_ferr[0] = Ferror32;
       		i_err [ 1 ] = Fget32( ptr_fml_IObuf ,FFO_BRKRG_VL,i_opt_counter,(char *)&d_charges_opt_temp ,0);
       		i_ferr[1] = Ferror32;
       		i_err [ 2] = Fget32( ptr_fml_IObuf ,FFO_UNRLZD_PL,i_opt_counter,(char *)&d_unrlzd_pl_opt_temp ,0);
       		i_ferr[2] = Ferror32;
 
       		for ( i =0; i<3; i++ )
       		{
       			if(i_err[0] == -1 )
      			{
        			fn_userlog( c_ServiceName, "Error in Fetching PL and Charges Vlues for Option trades");
        			fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        			fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
        			tpfree( ( char * )ptr_fml_IObuf);
        			tpfree( ( char * )ptr_fml_SObuf);
          		EXEC SQL CLOSE clnt_data;
        			return;
      			}
       		}
	
			  	d_rlzd_pl_opt = d_rlzd_pl_opt_temp + d_rlzd_pl_opt;
					d_charges_opt = d_charges_opt_temp + d_charges_opt;
					d_unrlzd_pl_opt = d_unrlzd_pl_opt_temp + d_unrlzd_pl_opt;

					if( DEBUG_MSG_LVL_3 )
					{
						fn_userlog( c_ServiceName, "----- Options data for record no :%d: -----",i_opt_counter);
						fn_userlog( c_ServiceName, "Total options realized profit/loss is :%lf:",d_rlzd_pl_opt_temp);
       			fn_userlog( c_ServiceName, "Total options unrealized profit/loss is :%lf:",d_unrlzd_pl_opt_temp);
       			fn_userlog( c_ServiceName, "Total options charges are :%lf:",d_charges_opt_temp);
						fn_userlog( c_ServiceName, "-------------------------------------------");
					}

			 	}  /** FOR loop for options end here **/  

			 if( DEBUG_MSG_LVL_3 )
			 {	
			   fn_userlog( c_ServiceName, "----------------------------------------------------------------------------");
			   fn_userlog( c_ServiceName, "--------- Total options realized profit/loss is :%lf:  -------",d_rlzd_pl_opt);
			   fn_userlog( c_ServiceName, "--------- Total options unrealized profit/loss is :%lf:  -------",d_unrlzd_pl_opt);
			   fn_userlog( c_ServiceName, "--------- Total options charges are :%lf:  -------",d_charges_opt);
			   fn_userlog( c_ServiceName, "----------------------------------------------------------------------------");
			 }	

			/*** Calculations for Options trade ends here ***/

       /*** Calculations for Futures trade starts here ***/

			 ptr_fml_SFbuf = ( FBFR32 *)NULL;	
       i_returncode = fn_pack_vartofml_local ( c_ServiceName,
                     c_err_msg,
                     &ptr_fml_SFbuf,
                     10,
	     							 FFO_PRDCT_TYP,      (char *)&c_prdct_typ_fut,
                     FFO_UNDRLYNG,       (char *)c_undrlyng,
                     FFO_SSSN_ID,             (char *) &l_session_id,
	        					 FFO_ROUT_CRT,        (char *)c_rout_crt,
	    							 FFO_USR_ID,              (char *)c_user_id,
	    							 FFO_XCHNG_CD,       (char *)c_xchng_cd,
	    							 FFO_EBA_MTCH_ACT_NO,  (char *)c_cln_mtch_accnt,
	    							 FFO_FROM_DT,         (char *)c_strt_dt,
	    							 FFO_TO_DT,               (char *)c_end_dt,
										 FFO_RQST_TYP,              (char *)&c_req_flg);
       if ( i_returncode != 0 )
       {
        fn_errlog( c_ServiceName, "S31070", LIBMSG, c_err_msg);
        fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
				tpfree( ( char * )ptr_fml_IObuf);
        tpfree( ( char * )ptr_fml_SObuf);
         EXEC SQL CLOSE clnt_data;
        return;
       }

       ptr_fml_IFbuf = ( FBFR32 *)NULL;
       ptr_fml_IFbuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

       if ( ptr_fml_IFbuf  == NULL )
       {
        fn_errlog( c_ServiceName, "S31075", TPMSG, c_err_msg);
       	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
       	fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
       	tpfree( ( char * )ptr_fml_SFbuf);
				tpfree( ( char * )ptr_fml_IObuf);
        tpfree( ( char * )ptr_fml_SObuf);
        EXEC SQL CLOSE clnt_data;
        return;
       }
			 l_recvbuf = 0;

       i_returncode = tpcall ( "SFO_FUT_PRTFL",
                    ( char *)ptr_fml_SFbuf,
                    0,
                    ( char **)&ptr_fml_IFbuf ,
                    &l_recvbuf,
                    0
                    );
			 if ( i_returncode != SUCC_BFR)
       {
         fn_errlog( c_ServiceName, "S31080","NOT THE EXPECTED ERROR MESSAGE.",c_err_msg);
         fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
         fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
         tpfree( ( char * )ptr_fml_IFbuf);
         tpfree( ( char * )ptr_fml_SFbuf);
         tpfree( ( char * )ptr_fml_IObuf);
         tpfree( ( char * )ptr_fml_SObuf);
         EXEC SQL CLOSE clnt_data;
         return;
       }
		   if ( Fget32( ptr_fml_IFbuf,FFO_ERR_MSG,0,(char *)c_err_chck_fut, 0) == -1 )
			 {
					if( Ferror32 != FNOTPRES )
          {
						fn_errlog( c_ServiceName, "S31085","Error while fetching value from FML FFO_ERR_MSG.",c_err_msg);
         		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
         		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
         		tpfree( ( char * )ptr_fml_IObuf);
         		tpfree( ( char * )ptr_fml_SObuf);
						tpfree( ( char * )ptr_fml_IFbuf);
           	tpfree( ( char * )ptr_fml_SFbuf);
         		EXEC SQL CLOSE clnt_data;
         		return;
					}
					else
						i_err_cnt_fut = 1;
			 }

			 if ( i_err_cnt_fut != 1 )
			 {
					fn_userlog(c_ServiceName, "C_ERR_CHCK_FUT is :%s:.",c_err_chck_fut);
       		if ( strcmp(c_err_chck_fut,"No record to be shown in this view") != 0 )
       		{
       	  	fn_errlog( c_ServiceName, "S31090","NOT THE EXPECTED ERROR MESSAGE.",c_err_msg);
       	 		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
       	 		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
       	 		tpfree( ( char * )ptr_fml_IFbuf);
       	 		tpfree( ( char * )ptr_fml_SFbuf);
				 		tpfree( ( char * )ptr_fml_IObuf);
       	 		tpfree( ( char * )ptr_fml_SObuf);
       	 		EXEC SQL CLOSE clnt_data;
       	 		return;
			 		}
			 		fn_userlog(c_ServiceName, "No records for for match id :%s: under FUTURE PROTFOLIO.",c_cln_mtch_accnt);
      	}

			 	/* Fetching total options record count returned by sfo_fut_prtfl service for particular match id */
  		 	i_fut_count = Foccur32((FBFR32 * ) ptr_fml_IFbuf, FFO_RLZD_PL);
				if( DEBUG_MSG_LVL_3 )
       		fn_userlog(c_ServiceName, "Total count records returned by sfo_fut_prtfl for match id :%s: is :%d:", c_cln_mtch_accnt,i_fut_count);

				for ( i_fut_counter = 0; i_fut_counter < i_fut_count; i_fut_counter++ ) /** for loop to process values returned by sfo_fut_prtfl **/
       	{
        	d_rlzd_pl_fut_temp = 0.0;
        	d_charges_fut_temp = 0.0;
        	d_unrlzd_pl_fut_temp = 0.0;

	        i_err [ 0 ] = Fget32( ptr_fml_IFbuf ,FFO_RLZD_PL,i_fut_counter,(char *)&d_rlzd_pl_fut_temp ,0);
  	      i_ferr[0] = Ferror32;
    	    i_err [ 1 ] = Fget32( ptr_fml_IFbuf ,FFO_BRKRG_VL,i_fut_counter,(char *)&d_charges_fut_temp ,0);
      	  i_ferr[1] = Ferror32;
        	i_err [ 2] = Fget32( ptr_fml_IFbuf ,FFO_UNRLZD_PL,i_fut_counter,(char *)&d_unrlzd_pl_fut_temp ,0);
        	i_ferr[2] = Ferror32;

	        for ( i =0; i<3; i++ )
    	    {
      	    if(i_err[0] == -1 )
        	  {
          	  fn_userlog( c_ServiceName, "Error in Fetching PL and Charges Vlues for Option trades");
            	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
            	fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
            	tpfree( ( char * )ptr_fml_IFbuf);
            	tpfree( ( char * )ptr_fml_SFbuf);
							tpfree( ( char * )ptr_fml_IObuf);
        			tpfree( ( char * )ptr_fml_SObuf);
            	EXEC SQL CLOSE clnt_data;
            	return;
          	}
        	}

     	   d_rlzd_pl_fut = d_rlzd_pl_fut_temp + d_rlzd_pl_fut;
      	  d_charges_fut = d_charges_fut_temp + d_charges_fut;
        	d_unrlzd_pl_fut = d_unrlzd_pl_fut_temp + d_unrlzd_pl_fut;
				
					if( DEBUG_MSG_LVL_3 )
					{
						fn_userlog( c_ServiceName, "----- Futures data for record number :%d: ------",i_fut_counter);
       			fn_userlog( c_ServiceName, "Total unrealized future profit/loss :%lf:",d_unrlzd_pl_fut_temp );
       			fn_userlog( c_ServiceName, "Total realized futures profit/loss is :%lf:",d_rlzd_pl_fut_temp );
       			fn_userlog( c_ServiceName, "Total futures charges are :%lf:",d_charges_fut_temp );
       			fn_userlog( c_ServiceName, "-------------------------------------------------");
					}

       	}   /*** For loop used for summing values returned by sfo_fut_prtfl ends here ***/

			 if( DEBUG_MSG_LVL_3 )
			 {
			 	 fn_userlog( c_ServiceName, "----------------------------------------------------------------------------");
			 	 fn_userlog( c_ServiceName, "-- Total unrealized future profit/loss :%lf: --",d_unrlzd_pl_fut );		
			   fn_userlog( c_ServiceName, "-- Total realized futures profit/loss is :%lf: --",d_rlzd_pl_fut );
    	   fn_userlog( c_ServiceName, "-- Total futures charges are :%lf: --",d_charges_fut);   
			   fn_userlog( c_ServiceName, "----------------------------------------------------------------------------");	
			 }

				/*** Calculations for Futures ends here ***/ 

       /*** Total PL and Charges calculation ***/
     	 d_tot_pl = d_rlzd_pl_fut + d_rlzd_pl_opt + d_unrlzd_pl_fut + d_unrlzd_pl_opt;
     	 d_tot_charges = d_charges_fut + d_charges_opt;

			 if( DEBUG_MSG_LVL_3 )
			 {
			 		fn_userlog( c_ServiceName, "P/L and Charges for match id :%s:",c_cln_mtch_accnt);
			   fn_userlog( c_ServiceName, "-- Total profit/loss is :%lf: --",d_tot_pl );
			   fn_userlog( c_ServiceName, "-- Total charges are :%lf: --", d_tot_charges );
			   fn_userlog( c_ServiceName, "--------------------------------");
			 }

       /*** Updating records of client in table ***/
       EXEC SQL
       UPDATE FSI_FO_SUPER_INVESTER
       SET  FSI_STATUS = 'C', 
            FSI_TOT_CHARGES = :d_tot_charges,
            FSI_PNL = :d_tot_pl 
       WHERE FSI_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
    	 AND   FSI_END_DT  = to_date(sysdate,'dd-Mon-yyyy'); 
    
     	 if( SQLCODE != 0 )
    	 {
     		fn_errlog(c_ServiceName, "S31095", SQLMSG, c_err_msg);
     		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
     		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
				tpfree( ( char * )ptr_fml_IFbuf);
        tpfree( ( char * )ptr_fml_SFbuf);
        tpfree( ( char * )ptr_fml_IObuf);
        tpfree( ( char * )ptr_fml_SObuf);
     		EXEC SQL CLOSE clnt_data;
     		return;
    		}
				
				tpfree( ( char * )ptr_fml_SObuf);
  			tpfree( ( char * )ptr_fml_IObuf);
  			tpfree( ( char * )ptr_fml_SFbuf);
  			tpfree( ( char * )ptr_fml_IFbuf);
	
  }   	/*** Infinite for loop used for processing record of inividual match ids closed ***/

  EXEC SQL
  CLOSE clnt_data;

  if (fn_committran(c_ServiceName, i_trnsctn, c_err_msg) == -1)
  {
     fn_userlog(c_ServiceName, "Failed in committing transaction");
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     fn_errlog(c_ServiceName, "S31100", TPMSG, c_err_msg);
     fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
		 return;
  }

  
  if( DEBUG_MSG_LVL_3 )
  {
     fn_userlog( c_ServiceName, "--------- Transaction commited successfully -------" );
  }

  sprintf ( c_msg, "Batch process %s ended", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  return;

}  /** End of code **/

int fn_pack_vartofml_local ( char *c_ServiceName,
                       char *c_err_msg,
                       FBFR32 **ptr_fml_obuf,
                       int i_tot_ofields,
                       ... )
{
  va_list c_arg_lst;
  int i_cnt;
  int i_ch_val;
  unsigned int i_op_fml; 
  char *c_op_dat;
  static int i_buf_cnt;

  if ( *ptr_fml_obuf == NULL )
  {
    *ptr_fml_obuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
    if (*ptr_fml_obuf == NULL)
    {
      fn_errlog( c_ServiceName, "L31005", TPMSG, c_err_msg );
      return SYSTEM_ERROR;
    }
    i_buf_cnt = 1;
  }

  fn_userlog( c_ServiceName, "Inside Local pack to fml func");
  va_start ( c_arg_lst,i_tot_ofields );
  for ( i_cnt=1; i_cnt<=i_tot_ofields; i_cnt++ )
  {
    i_op_fml = va_arg ( c_arg_lst, unsigned int );
    c_op_dat = va_arg ( c_arg_lst, char* );
    i_ch_val = Fadd32(*ptr_fml_obuf, i_op_fml, (char *)c_op_dat, 0);
    if ( i_ch_val == -1 )
    {
      if ( Ferror32 == FNOSPACE )
      {
        i_buf_cnt++;
        *ptr_fml_obuf = ( FBFR32 * ) tprealloc ( ( char * )*ptr_fml_obuf,
                                                 i_buf_cnt * MIN_FML_BUF_LEN * 10 );
        if (*ptr_fml_obuf == NULL)
        {
          fn_errlog( c_ServiceName, "L31010", TPMSG, c_err_msg );
          return SYSTEM_ERROR;
        }

        i_ch_val = Fadd32(*ptr_fml_obuf, i_op_fml, (char *)c_op_dat, 0);
        if ( i_ch_val == -1 )
        {
          fn_userlog ( c_ServiceName, "Error in field :%d:", i_cnt );
          fn_errlog( c_ServiceName, "L31015", FMLMSG, c_err_msg );
          tpfree ( ( char * )*ptr_fml_obuf );
          return SYSTEM_ERROR;
        }
      }
      else
      {
        fn_userlog ( c_ServiceName, "Error in field :%d:", i_cnt );
        fn_errlog( c_ServiceName, "L31020", FMLMSG, c_err_msg );
        return SYSTEM_ERROR;
      }
    }
  }

  return 0;
}

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_SUP_INVEST;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  fn_userlog ( argv[0], "BAT_SUP_INVEST ended" );
  return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}
