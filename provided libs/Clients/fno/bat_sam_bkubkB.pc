/******************************************************************************/
/*  Program           : BAT_SAM_BKUBKB                                         */
/*                                                                            */
/*  Input             : FFO_XCHNG_CD                                          */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_TRD_DT                                            */
/*                      FFO_DR_CR_FLG                                         */
/*                      FFO_AMOUNT                                            */
/*                      FFO_DWL_FLG                                           */
/*                      FFO_NARRATION_ID                                      */
/*                                                                            */
/*                                                                            */
/*  Output            :                                                       */
/*                                                                            */
/*  Description       : This batch process receives the input for Bulk SAM		*/
/*											blocking or SAM unblocking and accordingly it computes*/ 
/*											Limit also by calling service SFO_SAM_BKUBK						*/
/*                                                                            */
/*                                                                            */
/*  Log               : Ver 1.0		13-Nov-2014		Samip M												*/
/*  Log               : Ver 1.1		25-Aug-2020		Samip M												*/
/*                                                                            */
/******************************************************************************/
/*	1.0    -   New Release																										*/
/*	1.1    -   Margin Pledge																									*/
/*                                                                            */
/******************************************************************************/

#include <stdio.h>      /* C Header File                */
#include <stdlib.h>     /* C Header File                */
#include <sqlca.h>      /* Oracle header file           */
#include <atmi.h>       /* TUXEDO Header File           */
#include <userlog.h>    /* TUXEDO Header File           */
#include <fml32.h>      /* TUXEDO Header File           */

/* User defined h files */

/*#include <fml_def.h>    * created for FML handling */
/**#include <fo.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_log.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <string.h>
#include <fn_read_debug_lvl.h>
#include <fn_eqsam.h>***/
#include "fn_collateral.h"
#include <fn_read_debug_lvl.h>
#define BLOCK 'B'
#define UNBLOCK 'U'
#define NLVL {'\0'}
#define LEN_TAG 32

char    c_ServiceName[33];
char    c_msg[256];
char  c_tag[LEN_TAG]=NLVL;
char		c_flg = 'F';
int i_trnsctn;
int i_return;

EXEC SQL INCLUDE "table/sbr_sam_bkubk_rqst.h";
EXEC SQL INCLUDE "table/dbd_dp_blck_dtls.h";

int fn_prcs_unblk(char *c_stck_code, char *c_mtch_accnt);
int fn_prcs_rec(char *sql_rowid);
void fn_upd_status(char c_flg, char *sql_rowid);

void main( int argc, char *argv[] )
{
  char    c_err_msg[256];
  char    c_stck_code[7];
  char    c_narration[61];
  char    c_run_mode;
	char    c_mtch_accnt[11];
	int i_rec_count;


	varchar sql_rowid[25];
	
	EXEC SQL INCLUDE "table/sbr_sam_bkubk_rqst.h";

  strcpy ( c_ServiceName, argv[0] );

  INITBATDBGLVL(argv[0]);
	c_run_mode = argv[4][0];
//	strcpy(c_run_mode,argv[1]);

	if(argc < 5 || argc > 7)
	{
		fn_userlog(c_ServiceName,"Usage: bat_sam_bkubkB <Config File> <Exchange Cd> <Pipe Id> <Run mode>");
		exit(-1);
	}

	if ( c_run_mode == BLOCK )
	{
		if (argc != 5)
		{
			fn_userlog(c_ServiceName,"Usage: bat_sam_bkubkB <Config File> <Exchange Cd> <Pipe Id> <Run mode>");
			exit(-1);
		}
	}
	else if (c_run_mode == UNBLOCK)
	{
		if (argc != 6 && argc != 7 && argc != 5)		/** Added 5 for Ver 1.1 **/
		{
			fn_userlog(c_ServiceName,"Usage: bat_sam_bkubkB <Config File> <Exchange Cd> <Pipe Id> <Run mode> <Stock code> <Match Accnt>");
			exit(-1);
		}

		/** if and else added for Ver 1.1 **/
		if(argc > 5)
		{
			strcpy(c_stck_code, argv[5]);
		}
		else
		{
			strcpy(c_stck_code, "A");
		}
		NULLCHAR(c_mtch_accnt);
		if (argc == 6)
		{
			strcpy(c_mtch_accnt,"%");
		}
		else if (argc == 7)
		{
			strcpy(c_mtch_accnt,argv[6]);
		}
	}
	  sprintf(c_tag,"%s_na",c_ServiceName);
	init_bat(c_ServiceName,argv[2],argv[3]);

  sprintf ( c_msg, "Prcess %s started....",c_ServiceName);
  fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);

	fn_userlog(c_ServiceName,"Run mode :%c:",c_run_mode);
	fn_userlog(c_ServiceName,"Stock code :%s:",c_stck_code);
	fn_userlog(c_ServiceName,"Match Accnt :%s:",c_mtch_accnt);

	if (c_run_mode == UNBLOCK && strcmp(c_stck_code,"A") != 0)		/*** And condition added for Ver 1.1 **/
	{
		fn_userlog(c_ServiceName,"Match Accnt1 :%s:",c_mtch_accnt);
		i_return = fn_prcs_unblk(c_stck_code, c_mtch_accnt);
		if ( i_return == -1 )
		{
      strcpy ( c_msg, "Error while processing bulk unblock ..." );
      fn_errlog( c_ServiceName, "S31005", c_msg, c_err_msg );
      fn_bat_pst_msg( c_ServiceName,c_msg,c_tag );
	    destroy_bat();
		}
	}

	EXEC SQL
		TRUNCATE TABLE TEMP_SBR_SAM_BKUBK_RQST;


  i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31010", LIBMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    destroy_bat();
  }

	EXEC SQL
		INSERT INTO TEMP_SBR_SAM_BKUBK_RQST
								(SBR_ROWID)
				SELECT	ROWID
				FROM		SBR_SAM_BKUBK_RQST
				WHERE		TRUNC(SBR_DT) = TRUNC(SYSDATE)
				AND			SBR_BKUBK_STATUS = 'N';

	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
	{
		fn_errlog(c_ServiceName, "S31015", SQLMSG, c_err_msg);
		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    destroy_bat();
	}

	if ( SQLCODE == NO_DATA_FOUND )
	{
		fn_userlog( c_ServiceName,"No details for inputs");
	}

	i_rec_count = sqlca.sqlerrd[2];

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog(c_ServiceName, "S31020", LIBMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   
  }

	fn_userlog(c_ServiceName,"No of records to process :%d:",i_rec_count);
	sprintf(c_err_msg,"No of records to process :%d:",i_rec_count);
  fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);

	while (1)
	{

		c_flg = 'N';

		EXEC SQL
		SELECT SBR_ROWID
			INTO :sql_rowid
			FROM TEMP_SBR_SAM_BKUBK_RQST
			WHERE ROWNUM < 2;

		if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
		{
			fn_errlog(c_ServiceName, "S31025", SQLMSG, c_err_msg);
			fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			destroy_bat();
		}
	
		if ( SQLCODE == NO_DATA_FOUND )
		{
			fn_userlog( c_ServiceName,"All Done");
			break;
		}

		i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
		if ( i_trnsctn == -1 )
		{
			fn_errlog(c_ServiceName, "S31030", LIBMSG, c_err_msg);
			fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
			destroy_bat();
		}

		EXEC SQL
			DELETE FROM TEMP_SBR_SAM_BKUBK_RQST
			WHERE SBR_ROWID = :sql_rowid;

		if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
		{
			fn_errlog(c_ServiceName, "S31035", LIBMSG, c_err_msg);
			fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   
			destroy_bat();
		}
		
		SETNULL(sql_rowid);

		i_return = fn_prcs_rec(sql_rowid.arr);
		if ( i_return == -1 )
		{
      strcpy ( c_msg, "Error while processing bulk unblock ..." );
      fn_errlog( c_ServiceName, "S31040", c_msg, c_err_msg );
      fn_bat_pst_msg( c_ServiceName,c_err_msg,c_tag );
			c_flg = 'F';
			fn_upd_status(c_flg, sql_rowid.arr);
			continue;
		}

		c_flg = 'Y';
		fn_upd_status(c_flg, sql_rowid.arr);
  
	}

	strcpy ( c_msg, "All Done..." );
  fn_bat_pst_msg( c_ServiceName,c_msg,c_tag );
	destroy_bat();

}

int fn_prcs_unblk(char *c_stck_code, char *c_mtch_accnt)
{

	double d_plg_haircut = 0.0;

		fn_userlog(c_ServiceName,"Match Accnt1 :%s:",c_mtch_accnt);
  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog( c_ServiceName," Inside function fn_upd_haircut");
  }

	EXEC SQL
		SELECT NVL(STK_PLG_HAIRCUT,0)
		INTO :d_plg_haircut
		FROM STK_STK_MSTR
		WHERE STK_STCK_CD = :c_stck_code;

	if ( d_plg_haircut != 100)
	{
		strcpy(c_msg,"Haircut% is not 100, can not proceed for Bulk Unblock");
    fn_errlog(c_ServiceName, "S31045", c_msg, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
		return -1;
	}

  i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31050", LIBMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
		return -1;
  }

	EXEC SQL
		INSERT INTO SBR_SAM_BKUBK_RQST
								(SBR_DT,
								SBR_MTCH_CLNT_ID,
								SBR_DP_ID,
								SBR_DP_CLNT_ID,
								SBR_STCK_CD,
								SBR_ISIN_NO,
								SBR_BKUBK_FLG,
								SBR_BKUBK_QTY,
								SBR_BKUBK_STATUS)
					SELECT TRUNC(SYSDATE),
								DBD_CLM_MTCH_ACCNT,
								DBD_DP_ID,
								DBD_DP_CLNT_ID,
								DBD_STCK_CD,
								DBD_ISIN_NMBR,
								'U',
								DBD_SAM_BLCKD_QTY,
								'N'
					FROM	DBD_DP_BLCK_DTLS
					WHERE DBD_CLM_MTCH_ACCNT like :c_mtch_accnt
					AND		DBD_STCK_CD = :c_stck_code
					AND		DBD_SAM_BLCKD_QTY > 0	;

	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
	{
		fn_errlog(c_ServiceName, "S31055", SQLMSG, c_err_msg);
		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
		return -1;
	}

	if ( SQLCODE == NO_DATA_FOUND )
	{
		fn_userlog( c_ServiceName,"No details for inputs");
		strcpy(c_err_msg,"No records found");
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
	}

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog(c_ServiceName, "S31060", LIBMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		return -1;
  }

	return 1;
}

int fn_prcs_rec(char *sql_rowid)
{
  int i_trnsctn ;
	int i_cnt;
  char c_err_msg[256];
  int i_err[11];
  int i_ferr[11];
	char c_bkubk_flg;
	FBFR32 *ptr_fml_Ibuf = (FBFR32 *)NULL;
	FBFR32 *ptr_fml_Obuf = (FBFR32 *)NULL; 
	char c_xchng_cd[4];
	char c_channel[4];
	long sql_sssn_id = 0;
	long int li_Obuf_len;
	char c_usr_id[7];
	char c_force_flag = 'F';
	char sql_oprn_typ;
	int d_rec_exist = 0;

    fn_userlog ( c_ServiceName,"ROWID IS :%s:",sql_rowid );

	ptr_fml_Ibuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

	if (ptr_fml_Ibuf == NULL)
	{
		fn_errlog(c_ServiceName, "S31065", TPMSG, c_err_msg);
		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
		return -1;
	}

	ptr_fml_Obuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

	if (ptr_fml_Obuf == NULL)
	{
		fn_errlog(c_ServiceName, "S31070", TPMSG, c_err_msg);
		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
		tpfree((char *)ptr_fml_Ibuf);
		return -1;
	}

	EXEC SQL
		SELECT	SBR_MTCH_CLNT_ID,
						SBR_DP_ID,
						SBR_DP_CLNT_ID,
						SBR_STCK_CD,
						SBR_ISIN_NO,
						SBR_BKUBK_QTY,
						SBR_BKUBK_FLG
			INTO	:sql_sbr_mtch_clnt_id,
						:sql_sbr_dp_id,
						:sql_sbr_dp_clnt_id,
						:sql_sbr_stck_cd,
						:sql_sbr_isin_no,
						:sql_sbr_bkubk_qty,
						:c_bkubk_flg
			FROM SBR_SAM_BKUBK_RQST
			WHERE SBR_BKUBK_STATUS = 'N'
			AND		ROWID = :sql_rowid;

	if ( SQLCODE != 0 )
	{
		fn_errlog(c_ServiceName, "S31075", SQLMSG, c_err_msg);
		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
		tpfree((char *)ptr_fml_Ibuf);
		tpfree((char *)ptr_fml_Obuf);
		return -1;
	}

	if (c_bkubk_flg == BLOCK)
	{
		sql_oprn_typ = 'P';
	}
	else if (c_bkubk_flg == UNBLOCK)
	{
		sql_oprn_typ = 'W';
	}

  
	Finit32(ptr_fml_Ibuf, (FLDLEN32) Fsizeof32(ptr_fml_Ibuf));
	Finit32(ptr_fml_Obuf, (FLDLEN32) Fsizeof32(ptr_fml_Obuf));
/*	strcpy(c_xchng_cd,"NFO");*/
	strcpy(c_usr_id, "system");

	fn_userlog(c_ServiceName,"sql_sbr_mtch_clnt_id = :%s:",sql_sbr_mtch_clnt_id);
	fn_userlog(c_ServiceName,"sql_sbr_dp_id = :%s:",sql_sbr_dp_id);
	fn_userlog(c_ServiceName,"sql_sbr_dp_clnt_id = :%s:",sql_sbr_dp_clnt_id);
	fn_userlog(c_ServiceName,"sql_sbr_stck_cd = :%s:",sql_sbr_stck_cd);
	fn_userlog(c_ServiceName,"sql_sbr_isin_no = :%s:",sql_sbr_isin_no);
	fn_userlog(c_ServiceName,"sql_sbr_bkubk_qty = :%d:",sql_sbr_bkubk_qty);
	fn_userlog(c_ServiceName,"c_bkubk_flg = :%c:",c_bkubk_flg);	
	fn_userlog(c_ServiceName,"sql_oprn_typ = :%c:",sql_oprn_typ);	


/***	EXEC SQL
		SELECT DISTINCT DBD_DP_ID, DBD_DP_CLNT_ID
		INTO :sql_dbd_dp_id, :sql_dbd_dp_clnt_id
		FROM DBD_DP_BLCK_DTLS
		WHERE DBD_CLM_MTCH_ACCNT = :sql_sbr_mtch_clnt_id
		AND DBD_STCK_CD = :sql_sbr_stck_cd
		AND DBD_ISIN_NMBR = :sql_sbr_isin_no;

	if ( SQLCODE != 0 )
	{
		fn_errlog(c_ServiceName, "S31080", SQLMSG, c_err_msg);
		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
		return -1;
	}***/

	EXEC SQL
		SELECT COUNT(1)
		INTO :d_rec_exist
		FROM	DBD_DP_BLCK_DTLS
		WHERE DBD_CLM_MTCH_ACCNT = :sql_sbr_mtch_clnt_id
    AND DBD_STCK_CD = :sql_sbr_stck_cd
    AND DBD_ISIN_NMBR = :sql_sbr_isin_no
		AND DBD_DP_ID = :sql_sbr_dp_id
		AND DBD_DP_CLNT_ID = :sql_sbr_dp_clnt_id;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31085", SQLMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
		tpfree((char *)ptr_fml_Ibuf);
		tpfree((char *)ptr_fml_Obuf);
    return -1;
  }

	if(d_rec_exist == 0)
	{
    fn_errlog(c_ServiceName, "S31090", SQLMSG, c_err_msg);
		sprintf(c_err_msg,"No allocation for given parameters");
    sprintf(c_msg,"%s - %s - %s",sql_sbr_mtch_clnt_id,sql_sbr_stck_cd,c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
		tpfree((char *)ptr_fml_Ibuf);
		tpfree((char *)ptr_fml_Obuf);
    return 0;
	}

  fn_userlog(c_ServiceName,"c_force_flag :%c:",c_force_flag);
	strcpy(c_channel,"SYS");

	i_err[0] = Fadd32(ptr_fml_Ibuf,FFO_EBA_MTCH_ACT_NO, (char *)sql_sbr_mtch_clnt_id ,0);
	i_err [1] = Fadd32(ptr_fml_Ibuf,FFO_BK_UBK_FLG, (char *)&c_bkubk_flg,0);
	i_err [2] = Fadd32(ptr_fml_Ibuf,FFO_USR_ID, (char*)c_usr_id,0);
/*	i_err [3] = Fadd32(ptr_fml_Ibuf,FFO_XCHNG_CD, (char*)c_xchng_cd ,0);*/
	i_err [3] = Fadd32(ptr_fml_Ibuf,FFO_STCK_CD, sql_sbr_stck_cd ,0);
	i_err [4] = Fadd32(ptr_fml_Ibuf,FFO_ORD_TOT_QTY, (char *)&sql_sbr_bkubk_qty ,0);
	i_err [5] = Fadd32(ptr_fml_Ibuf,FFO_DPID, (char *)sql_sbr_dp_id ,0);
	i_err [6] = Fadd32(ptr_fml_Ibuf,FFO_DP_CLNT_ID, (char *)sql_sbr_dp_clnt_id ,0);
	i_err [7] = Fadd32(ptr_fml_Ibuf,FFO_CHANNEL, c_channel,0); 
	i_err [8] = Fadd32(ptr_fml_Ibuf,FFO_SSSN_ID, (char*)&sql_sssn_id,0);
	i_err [9] = Fadd32(ptr_fml_Ibuf,FML_PLG_FLG,(char*)&c_force_flag,0);
	i_err [10] = Fadd32(ptr_fml_Ibuf,FFO_OPT_TYP,(char*)&sql_oprn_typ,0);

	for ( i_cnt=0; i_cnt < 11; i_cnt++ )
	{
		if ( i_err[ i_cnt ] == -1 )
		{
			sprintf(c_msg, "ERROR : At FML no :%d:",i_cnt);
			fn_errlog( c_ServiceName,"S31095",Fstrerror32(i_err[i_cnt]),c_err_msg );
			fn_userlog(c_ServiceName,c_msg);
			tpfree((char *)ptr_fml_Ibuf);
			tpfree((char *)ptr_fml_Obuf);
			strcpy( c_err_msg,"Contact System Support" ); /* Ver 1.2 */
			fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); /* Ver 1.2 */
			return -1;
		}
	}

	i_return = tpcall( "SFO_PLC_PLG",(char*)ptr_fml_Ibuf,0,(char**)&ptr_fml_Obuf,&li_Obuf_len,0);
	if( i_return == -1)
  {
		if ( tperrno != TPESVCFAIL )
		{
			fn_errlog ( c_ServiceName, "S31100", TPMSG,c_err_msg);
			fn_userlog(c_ServiceName,"ERROR : %s",c_err_msg);
			tpfree((char *)ptr_fml_Ibuf);
			tpfree((char *)ptr_fml_Obuf);
			fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); /* Ver 1.2 */
		}

		Fget32 ( ptr_fml_Obuf, FFO_ERR_MSG, 0, c_err_msg, 0 );
		sprintf(c_msg,"%s - %s - %s",sql_sbr_mtch_clnt_id,sql_sbr_stck_cd,c_err_msg);
		fn_bat_pst_msg( c_ServiceName, c_msg, c_tag );
		fn_userlog(c_ServiceName,"ERROR : %s",c_err_msg);
    sprintf(c_msg, "ERROR In Block Unblock for :%s: Skipping Order...",sql_sbr_mtch_clnt_id);
		fn_userlog(c_ServiceName,c_msg);
    fn_bat_pst_msg( c_ServiceName,c_msg,c_tag );
		return -1;
	}

    Fget32 ( ptr_fml_Obuf, FFO_ERR_MSG, 0, c_err_msg, 0 );
    sprintf(c_msg,"%s - %s - %s",sql_sbr_mtch_clnt_id,sql_sbr_stck_cd,c_err_msg);
    fn_bat_pst_msg( c_ServiceName, c_msg, c_tag );
		tpfree((char*)ptr_fml_Ibuf);
		tpfree((char*)ptr_fml_Obuf);
}

void fn_upd_status(char c_flg, char *sql_rowid)
{
  i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31105", LIBMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    destroy_bat();
  }

	EXEC SQL 
		UPDATE SBR_SAM_BKUBK_RQST
		SET SBR_BKUBK_STATUS = :c_flg
		WHERE ROWID = :sql_rowid;

	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
	{
		fn_errlog(c_ServiceName, "S31110", SQLMSG, c_err_msg);
		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    destroy_bat();
	}

	  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog(c_ServiceName, "S31115", LIBMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   
    destroy_bat();
  }

}
