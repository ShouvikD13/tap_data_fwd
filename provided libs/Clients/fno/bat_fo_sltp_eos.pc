/************************************************************************************************
* Service name :  BAT_FO_SLTP_EOS																																*
*																																																*
* Description  :  This Batch Program will convert all open cover SLTP orders to market					*
*									in the given pipe.																														*
*																																																*
* Input        :  Exchange Code																																	*
*							 :  Pipe Id																																				*
*              :  Stock Code																																		*
*              :  Execution Mode																																*
*							 : 	Case Type																																			*
*																																																*
* Output      :																																									*
*																																																*
* Log         :   05-Dec-2012 Initial Release  - Navina D.       																*
*																																																*
*             :   1.1			14-Jun-2013		Navina D.																								*
*             :   1.2			09-Jun-2014		Navina D.																								*
*             :   1.3			30-July-2015	Aakash Chavan																						*
*             :   1.4			30-Nov-2015	  Navina D.   																						*
*             :   1.5			25-May-2016	  Navina D.   																						*
*             :   1.6     23-Aug-2016   Bhupendra Malik                                         *
*							:   1.7     21-Nov-2016   Kishor B.																								*
*             :   1.8     07-Sep-2018   Anand Dhopte                                            *
*							:		1.9			03-Dec-2020		Kiran Itkar																							*
*             :   2.0     28-Sep-2021   Mahesh Regulwar                                         *
*             :   2.1     18-Feb-2022   Naveena                                                 * 
*************************************************************************************************
* 1.1				-			Fix to skip positions from Squareoff process which are already                *
*                 picked by cancellation process.																								*
* 1.2       -     Exception EOS                                                                 *
* 1.3				-     CR_ISEC14_64402 Limit Order Type in FPSLTP (Aakash Chavan)										*
* 1.4				-     Skip part executed records from squareoff                 										*
* 1.5       -     Pending cover limit orders to be picked in Exception EOS                      *
* 1.6       -     sys messeage change  (Bhupendra Malik)                                        *
* 1.7       -     Maximum order Quantity Limit in F&O																						*
* 1.8       -     Order Status 'B' and 'X' handling added                                       *
*	1.9				-			Separate EOS for stock & index underlyings in FuturePLUS & FPSL								* 
* 2.0       -     Introduction of Profit Order in FPSL  CR-ISEC14-150750                        *
* 2.1       -     Minor for picking all records in normal EOS cancellation when prft ordr exist */
/************************************************************************************************/

#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <fml_rout.h>
#include <fn_session.h>
#include <string.h>
#include <fn_read_debug_lvl.h>

#define CNCL_SQROFF    	'A'
#define PLC_SQROFF     	'S'
#define CNCL_COVER     	'C'
#define MOD_SQROFF			'M'
#define	TOTAL_FML			20

#define MAX_REC 			 	1
int Z;
#define INIT(x,y)				for(Z=0; Z< y; Z++)     x[Z] =0

EXEC SQL INCLUDE "table/exg_xchng_mstr.h";
EXEC SQL INCLUDE "table/fod_fo_ordr_dtls.h";
EXEC SQL INCLUDE "table/fum_fo_undrlyng_mstr.h";

int i_err[TOTAL_FML];
int i_ferr[TOTAL_FML];

typedef struct	tagsltpeos
{
	char	c_cln_mtch_accnt[11];	
	char	c_ordr_ref[19];	
	long	l_ord_qty;										
	char  c_pipe_id[3];
	char	c_undrlyng[7];	
	char	c_trnsctn_flw;								
	char	c_expry_dt[23];								
	char	c_exrc_typ;										
	char	c_ctgry_indstk;								
											
}struct_sltp_eos;											
																			
struct_sltp_eos	sltp_ordr_array[MAX_REC];

int fn_plc_sqroff ( char    *c_ServiceName, FBFR32  **ptr_fml_Sbuffer, char    *c_err_msg , char c_mode , char c_indstk_typ); /*** c_mode added in Ver 1.2 ***/	/*** c_indstk_typ added in Ver 1.9 ***/
int fn_plc_cancel ( char    *c_ServiceName, FBFR32  **ptr_fml_Sbuffer, char    *c_err_msg , char c_mode , char c_indstk_typ); /*** c_mode added in Ver 1.2 ***/ /*** c_indstk_typ added in Ver 1.9 ***/
int fn_plc_mod	  ( char    *c_ServiceName, FBFR32  **ptr_fml_Sbuffer, char    *c_err_msg );

void BAT_FO_SLTP_EOS ( int argc, char *argv[] )
{
  char 		 c_ServiceName [ 33 ];
  char 		 c_err_msg [ 256 ];
	char     c_casetype;
	char 		 c_msg[256];
	char     c_mode = 'N';	/*** Ver 1.2 ***/
	char     c_indstk_typ = '\0'; /*** Ver 1.9 ***/
	int i_trnsctn;
	int	i_ret_val;

	FBFR32		*ptr_fml_Sbuffer;

  EXEC SQL BEGIN DECLARE SECTION;
   char     c_exg_stts ;
  EXEC SQL END DECLARE SECTION;


  strcpy ( c_ServiceName, argv[0] );
	INITBATDBGLVL(c_ServiceName);

  sprintf ( c_msg, "Batch process %s started", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  if( argc != 8 ) /*** Ver 1.7 changed from 6 to 7 ***/	/*** Ver 1.9 changed from 7 to 8 ***/
  {
		fn_bat_pst_msg ( c_ServiceName, "Invalid Number of Arguments", c_tag );
    sprintf(c_msg,"Usage:bat_fo_sltp_eos <ini> <Exchange Code> <Pipe Id> <Underlying> <CaseType S/C/B/A> <Mode E/N> <Index/Stock I/S/A>\n");  /*** Mode added in Ver 1.2 ***/	/*** Indeex/Stock Added in Ver 1.9 ***/
		/* S- Square off , C- Cancellation, A- Cancellation + SquareOff, M- Modify + SquareOff */
		/* E - Exception mode , N EOS - Normal mode *** Ver 1.2 comment added */
    fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
    return;
  }

	memset(sql_fod_pipe_id,'\0',sizeof(sql_fod_pipe_id));
	memset(sql_fod_xchng_cd,'\0',sizeof(sql_fod_xchng_cd));
	memset(sql_fod_undrlyng,'\0',sizeof(sql_fod_undrlyng));

  strcpy( sql_fod_xchng_cd, argv[2] );
	strcpy( sql_fod_pipe_id, argv[3] );
	strcpy( sql_fod_undrlyng,argv[4] );
	c_casetype = argv[5][0];
	c_mode = argv[6][0]; /*** Ver 1.2 ***/
	c_indstk_typ = argv[7][0];   /*** Ver 1.9 ***/

	rtrim(sql_fod_xchng_cd);
	rtrim(sql_fod_pipe_id);
	rtrim(sql_fod_undrlyng);

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Input Parameters are : ");
		fn_userlog(c_ServiceName,"Exchange Code			:%s:", sql_fod_xchng_cd);
		fn_userlog(c_ServiceName,"Pipe Id						:%s:", sql_fod_pipe_id);
		fn_userlog(c_ServiceName,"Underlying        :%s:", sql_fod_undrlyng);            
		fn_userlog(c_ServiceName,"Case Type					:%c:", c_casetype);     
		fn_userlog(c_ServiceName,"Mode    					:%c:", c_mode);     /*** Ver 1.2 ***/ 
		fn_userlog(c_ServiceName,"Index/Stock 			:%c:", c_indstk_typ);		/*** Ver 1.9 ***/        
	}
	
	if( strcmp(sql_fod_pipe_id,"A") == 0 )
	{
		strcpy ( sql_fod_pipe_id,"%" );
	}
	if( strcmp(sql_fod_undrlyng,"A") == 0)
	{
		strcpy( sql_fod_undrlyng,"%" );
	}
	/*** Added in Ver 1.9 ***/
	if( c_indstk_typ == 'A' )
  {
    c_indstk_typ = '%' ;
  }
	/*** Ended Ver 1.9 ***/

	EXEC SQL
		 SELECT  exg_crrnt_stts,
						 exg_nxt_trd_dt
		 INTO    :c_exg_stts,
						 :sql_exg_nxt_trd_dt
		 FROM    exg_xchng_mstr
		 WHERE   exg_xchng_cd = :sql_fod_xchng_cd
		 AND     exg_mkt_typ  = 'D';

  if( SQLCODE != 0 )
  {
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    fn_errlog( c_ServiceName, "S31005", SQLMSG, c_err_msg );
    return;
  }

  if( c_exg_stts != EXCHANGE_OPEN )
  {
    strcpy ( c_msg, "Exchange should be open for running SLTP futurePLUS EOS Process" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    fn_errlog( c_ServiceName, "B28520", DEFMSG, c_err_msg );
    return;
  }

	SETNULL(sql_exg_nxt_trd_dt);

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Trade Date 			:%s:", sql_exg_nxt_trd_dt.arr);
		fn_userlog(c_ServiceName,"Exchange Status	:%c:", c_exg_stts);
	}

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
     	strcpy ( c_msg, "System error. Contact system support" );
     	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
     	fn_errlog(c_ServiceName, "S31010", LIBMSG, c_err_msg );
     	return ;
  }

  EXEC SQL DELETE TMP_FO_SLTP_EOS_SQR WHERE FOD_XCHNG_CD = :sql_fod_xchng_cd; 

  if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
		fn_userlog(c_ServiceName, "Unable to delete temporary table");
    fn_errlog(c_ServiceName, "S31015", SQLMSG, c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    return;
  }

	fn_userlog( c_ServiceName,":%d: unwanted records cleaned from temporary tbl.", sqlca.sqlerrd[2] );

  EXEC SQL DELETE TMP_FO_SLTP_EOS_CAN WHERE FOD_XCHNG_CD = :sql_fod_xchng_cd; 

  if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
		fn_userlog(c_ServiceName, "Unable to delete temporary table");
    fn_errlog(c_ServiceName, "S31020", SQLMSG, c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    return;
  }

	fn_userlog( c_ServiceName,":%d: unwanted records cleaned from temporary tbl.", sqlca.sqlerrd[2] );

  EXEC SQL DELETE TMP_FO_SLTP_EOS_MOD WHERE FOD_XCHNG_CD = :sql_fod_xchng_cd; 

  if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
		fn_userlog(c_ServiceName, "Unable to delete temporary table");
    fn_errlog(c_ServiceName, "S31025", SQLMSG, c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    return;
  }

	fn_userlog( c_ServiceName,":%d: unwanted records cleaned from temporary tbl.", sqlca.sqlerrd[2] );

	/*** Ver 2.0 starts ***/
	EXEC SQL
     EXECUTE
     BEGIN
      reset_sequence( 'GET_EOSCAN_SEQ');
     END;
     END-EXEC;

    if ( SQLCODE != 0 )
    {
     fn_userlog(c_ServiceName, "Unable to delete temporary table");
     fn_errlog(c_ServiceName, "S31030", SQLMSG, c_err_msg);
     strcpy ( c_msg, "System error. Contact system support" );
     fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);
     fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
     return;
		}

	fn_userlog( c_ServiceName,"Sequence reseted successfully");

	/*** Ver 2.0 ends ***/

 if (c_mode == 'N' ) /*** if condition added not to disable the product during Execpt EOS in Ver 1.2  ***/
 {
	
	/*** Commented in ver 1.9
	EXEC SQL
			 UPDATE mtm_appln_stts
			 SET    mtm_sltp_eos_flg = 'Y',
							mtm_sltp_allwd_stts = 'N',
							mtm_sltp_req = :c_casetype
			 WHERE  mtm_xchng_cd = :sql_fod_xchng_cd
			 AND    mtm_pipe_id LIKE :sql_fod_pipe_id;
	*********/
	
	fn_userlog ( c_ServiceName, "index/stock :%c:",c_indstk_typ);  /*** Added in Ver 1.9 ***/
	
	if (c_indstk_typ == 'I')
	{
		EXEC SQL
   	UPDATE mtm_appln_stts
       SET    mtm_sltp_eos_flg = 'Y',
              mtm_sltp_allwd_stts_i = 'N',
              mtm_sltp_req = :c_casetype
       WHERE  mtm_xchng_cd = :sql_fod_xchng_cd
       AND    mtm_pipe_id LIKE :sql_fod_pipe_id;
	}
	else if (c_indstk_typ == 'S')
	{
		EXEC SQL
    UPDATE mtm_appln_stts
       SET    mtm_sltp_eos_flg_s = 'Y',
              mtm_sltp_allwd_stts_s = 'N',
              mtm_sltp_req_s = :c_casetype
       WHERE  mtm_xchng_cd = :sql_fod_xchng_cd
       AND    mtm_pipe_id LIKE :sql_fod_pipe_id;
	}
	else if (c_indstk_typ == '%')
	{
		EXEC SQL
    UPDATE mtm_appln_stts
       SET    mtm_sltp_eos_flg = 'Y',
              mtm_sltp_allwd_stts_i = 'N',
							mtm_sltp_req = :c_casetype,
							mtm_sltp_eos_flg_s = 'Y',
              mtm_sltp_allwd_stts_s = 'N',
              mtm_sltp_req_s = :c_casetype
       WHERE  mtm_xchng_cd = :sql_fod_xchng_cd
       AND    mtm_pipe_id LIKE :sql_fod_pipe_id;
	}
	else
	{
		fn_userlog(c_ServiceName,"Please enter valid Index/Stock type");
    strcpy(c_msg, "System error. Contact system support" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    return;
	}
			
	if( SQLCODE != 0 )
 	{
     	strcpy ( c_msg, "System error. Contact system support" );
     	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     	fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg );
     	return;
 	} 
 }
 else  if (c_mode == 'E' ) /*** if condition added to set run mode during Execpt EOS in Ver 1.2  ***/
 {
	EXEC SQL
			 UPDATE mtm_appln_stts
			 SET    mtm_sltp_req = :c_casetype,
							mtm_sltp_req_s = :c_casetype			/*** Added in Ver 1.9 ***/
			 WHERE  mtm_xchng_cd = :sql_fod_xchng_cd
			 AND    mtm_pipe_id LIKE :sql_fod_pipe_id;

			
	if( SQLCODE != 0 )
 	{
     	strcpy ( c_msg, "System error. Contact system support" );
     	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     	fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg );
     	return;
 	} 
 }

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
 	{
     	strcpy ( c_msg, "System error. Contact system support" );
     	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     	fn_errlog( c_ServiceName, "S31045",LIBMSG,c_err_msg);
     	return;
 	}

	if((ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32", NULL, 1024)) == NULL)
	{
		fn_errlog(c_ServiceName, "S31050", TPMSG, c_err_msg);
		strcpy(c_msg, "Unable to allocate buffer");
		fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);	
		return;
	}
	switch( c_casetype )
	{
		case	MOD_SQROFF	:
		{
			i_ret_val = fn_plc_mod ( c_ServiceName, &ptr_fml_Sbuffer, c_err_msg );

			if( i_ret_val == -1 )
			{
				strcpy ( c_msg, "System error. Contact system support" );
				fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
				tpfree((char *)ptr_fml_Sbuffer);
				fn_errlog( c_ServiceName, "S31055",LIBMSG,c_err_msg);
				break;
			}
			
			i_ret_val = fn_plc_sqroff ( c_ServiceName, &ptr_fml_Sbuffer, c_err_msg , c_mode , c_indstk_typ); /*** c_mode added in Ver 1.2 ***/ /*** c_indstk_typ added in Ver 1.9 ***/

			break;
		}

		case	CNCL_COVER	:
		case	CNCL_SQROFF	:
		{
			i_ret_val = fn_plc_cancel ( c_ServiceName, &ptr_fml_Sbuffer, c_err_msg, c_mode , c_indstk_typ); /*** c_mode added in Ver 1.2 ***/ /*** c_indstk_typ added in Ver 1.9 ***/

			if( c_casetype != CNCL_SQROFF || i_ret_val == -1 )
			{
				fn_userlog( c_ServiceName, "fn_plc_cancel i_ret_val :%d",i_ret_val);
				break;
			}
		}
		
		case	PLC_SQROFF	:
		{
			i_ret_val = fn_plc_sqroff ( c_ServiceName, &ptr_fml_Sbuffer, c_err_msg, c_mode , c_indstk_typ); /*** c_mode added in Ver 1.2 ***/ /*** c_indstk_typ added in Ver 1.9 ***/

			if( c_casetype != CNCL_SQROFF || i_ret_val == -1 )
			{
				fn_userlog( c_ServiceName, "fn_plc_sqroff i_ret_val :%d",i_ret_val);
			}
			break;
		}

		default :
		{
			i_ret_val = -1;
			strcpy(c_msg, "Invalid Case Type to process for EOS.");
		}
	}

	if( i_ret_val == -1 )
	{
		strcpy ( c_msg, "System error. Contact system support" );
		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		fn_errlog( c_ServiceName, "S31060",LIBMSG,c_err_msg);
		tpfree((char *)ptr_fml_Sbuffer);
		return;
	}

  sprintf ( c_msg, "Batch process %s ended", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  return;
}

int	fn_plc_sqroff ( char *c_ServiceName, FBFR32	**ptr_fml_Sbuffer, char *c_err_msg, char c_mode , char c_indstk_typ) /*** c_mode added in Ver 1.2 ***/	/*** c_indstk_typ added in Ver 1.9 ***/
{
	long	l_sssn_id = 0;
	long int li_dsclsd_qty = 0;
	long int li_stp_lss_tgr_prc = 0;
	long int li_lmt_rt = 0;
	long l_strike_prc;
	long int li_cnt = 0;
  long l_max_allowed_qty = 0 ; /*** Ver 1.7 ***/

	int i_trnsctn;
	int	i_rec_cnt = 0;
	int	i_rows_fetched = 0;
	int	i_bulk_cnt = 0;
	int	i_rowloop = 0;
	int	i_fml_loop;
	int	i_max_rec_per_fetch = MAX_REC;
	int i_ch_val =0;

	char c_msg[256];
	char c_svc_nm[33] = "\0";
	char c_slm_flg;
	char c_ord_typ;
	char c_opt_typ;
	char c_spl_flg;
	char c_prd_typ;
	char c_channel[4];
	char c_alias[9];
	char c_span_flag  = '\0';
	char c_bse_span_flag  = '\0';
	char c_sys_msg[20];

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
     	strcpy ( c_msg, "System error. Contact system support" );
     	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
     	fn_errlog(c_ServiceName, "S31065", LIBMSG, c_err_msg );
     	return -1;
  }

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog( c_ServiceName,"input :%s:%s:%s:%s", sql_exg_nxt_trd_dt.arr, sql_fod_xchng_cd, sql_fod_undrlyng, sql_fod_pipe_id );
		fn_userlog( c_ServiceName,"Finding data for SLTP FP EOS squareoff" );
	}

	if ( c_mode == 'N') /*** if condition added in Ver 1.2 ***/
	{
		EXEC SQL
		INSERT INTO TMP_FO_SLTP_EOS_SQR
		(
			FOD_XCHNG_CD,
			FOD_UNDRLYNG,
			FOD_ORDR_RFRNC,
			FOD_CLM_MTCH_ACCNT,
			FOD_ORDR_TOT_QTY,
			FOD_ORDR_FLW,
			FOD_PIPE_ID,
			FOD_SLTP_ORDR_RFRNC,
			FOD_EXPRY_DT,
			FOD_EXER_TYP,
			FOD_INDSTK,
			FOD_ROWNUM
		)
		SELECT 		SQR.XCHNG_CD,		/*** SELECT clause added in Ver 1.3 ***/
							SQR.UNDRLYNG,
							SQR.ORDR_RFRNC,
							SQR.CLM_MTCH_ACCNT,
							SQR.OPEN_QTY,
							SQR.ORDR_FLW,
							SQR.PIPE_ID,
							SQR.SLTP_ORDR_RFRNC,
							SQR.EXPRY_DT,
							SQR.EXER_TYP,
							SQR.INDSTK,
							ROWNUM
		FROM
		(
		 (

			SELECT	F.FOD_XCHNG_CD		XCHNG_CD,
							F.FOD_UNDRLYNG		UNDRLYNG,
							F.FOD_ORDR_RFRNC	 ORDR_RFRNC,
							F.FOD_CLM_MTCH_ACCNT	 CLM_MTCH_ACCNT,
							PSTN.OPEN_QTY		 OPEN_QTY,
							DECODE( F.FOD_ORDR_FLW, 'B', 'S', 'B' )   ORDR_FLW,
							F.FOD_PIPE_ID		PIPE_ID,
							F.FOD_SLTP_ORDR_RFRNC		 SLTP_ORDR_RFRNC,
							F.FOD_EXPRY_DT	 EXPRY_DT,
							F.FOD_EXER_TYP	 EXER_TYP,
							F.FOD_INDSTK		 INDSTK
							/*** ROWNUM  *** Commented in Ver 1.3 ***/
			FROM 		FOD_FO_ORDR_DTLS F, 
							( SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, 
																								 FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC,
												SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY,
																											 FOD_EXEC_QTY ) ) OPEN_QTY  /*** Profit handled in Ver 2.0 ***/
								FROM   FOD_FO_ORDR_DTLS
								WHERE  FOD_TRD_DT            	  = :sql_exg_nxt_trd_dt
								AND    FOD_XCHNG_CD        		  = :sql_fod_xchng_cd
								AND    TRIM(FOD_UNDRLYNG)	   LIKE :sql_fod_undrlyng
								AND    FOD_PIPE_ID           LIKE :sql_fod_pipe_id
								AND    FOD_PRDCT_TYP            = 'U'
								AND		 FOD_INDSTK						 LIKE	:c_indstk_typ			/*** Ver 1.9 ***/
								GROUP BY 	DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
								HAVING 		SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY,
																												 FOD_EXEC_QTY ) ) >  0 /*** Not equal to is changed to greater than in Ver 1.1 ***/ /*** Profit handled in Ver 2.0 ***/
								 AND 			SUM( DECODE(FOD_ORDR_STTS,'J', 0, 'C', 0,'D',0, 'E', 0, 'X', 0, 'B', 0, 1 ) ) = 0  /*** Part Executed status removed in Ver 1.4 ***/ /*** Ver 1.8 Order Status 'B' added ***/
							) PSTN
			WHERE 	F.FOD_ORDR_RFRNC = PSTN.FRSH_ORDR_RFRNC
		  /*** AND     F.FOD_SLTP_ORDR_RFRNC NOT IN (SELECT FOD_ORDR_RFRNC FROM TMP_FO_SLTP_EOS_CAN)		Commented in Ver 1.1 ***/
			AND     F.FOD_ORDR_RFRNC NOT IN (SELECT FOD_SLTP_ORDR_RFRNC FROM TMP_FO_SLTP_EOS_CAN)					/*** Ver 1.1 ***/
			AND     F.FOD_ORDR_RFRNC NOT IN (SELECT FOD_ORDR_RFRNC FROM TMP_FO_SLTP_EOS_CAN)							/*** Ver 1.2 ***/

	/***** Ver 1.3 Starts ***/
	 )
 	 UNION
   (
      SELECT  F.FOD_XCHNG_CD		XCHNG_CD,	
              F.FOD_UNDRLYNG		UNDRLYNG,
              F.FOD_ORDR_RFRNC	ORDR_RFRNC,
              F.FOD_CLM_MTCH_ACCNT	CLM_MTCH_ACCNT,
              PSTN.OPEN_QTY			OPEN_QTY,
              DECODE ( SIGN(PSTN.OPEN_QTY),-1, F.FOD_ORDR_FLW ,DECODE( F.FOD_ORDR_FLW, 'B', 'S', 'B' ))		ORDR_FLW,
              F.FOD_PIPE_ID			PIPE_ID,
              F.FOD_SLTP_ORDR_RFRNC		SLTP_ORDR_RFRNC,
              F.FOD_EXPRY_DT		EXPRY_DT,
              F.FOD_EXER_TYP		EXER_TYP,
              F.FOD_INDSTK			INDSTK
							/*** ROWNUM  *** Commented in Ver 1.3 ***/
     FROM     FOD_FO_ORDR_DTLS F,
                ( SELECT  DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC,
                       SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY,'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY /*** Profit handled in Ver 2.0 ***/
                       FROM     FOD_FO_ORDR_DTLS
                       WHERE    FOD_TRD_DT  = :sql_exg_nxt_trd_dt
                       AND      FOD_XCHNG_CD = :sql_fod_xchng_cd
                       AND      TRIM(FOD_UNDRLYNG)  LIKE :sql_fod_undrlyng
                       AND      FOD_PIPE_ID  LIKE :sql_fod_pipe_id
                       AND      FOD_PRDCT_TYP = 'U'
											 AND			FOD_INDSTK LIKE :c_indstk_typ     /*** Ver 1.9 ***/
                       GROUP BY DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
                       HAVING   SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY,'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) <>  0 /*** Profit handled in Ver 2.0 ***/
                       AND      SUM( DECODE(FOD_ORDR_STTS,'J', 0, 'C', 0,'D',0,'E',0,'B',0,'X',0, 1 ) ) = 0
             ) PSTN  /*** Ver 1.8 Order Status 'B' and 'X' added ***/
     WHERE   F.FOD_ORDR_RFRNC = PSTN.FRSH_ORDR_RFRNC
     AND     F.FOD_ORDR_RFRNC NOT IN (SELECT FOD_SLTP_ORDR_RFRNC FROM TMP_FO_SLTP_EOS_CAN)
     AND     F.FOD_ORDR_RFRNC NOT IN (SELECT FOD_ORDR_RFRNC FROM TMP_FO_SLTP_EOS_CAN)       
		)
   ) SQR;
	 /**** Ver 1.3 ends ***/

	}
	else if ( c_mode == 'E' ) /*** else loop added in Ver 1.2 ***/
	{
		EXEC SQL
		INSERT INTO TMP_FO_SLTP_EOS_SQR 
		( 
			FOD_XCHNG_CD,
			FOD_UNDRLYNG,
			FOD_ORDR_RFRNC, 
			FOD_CLM_MTCH_ACCNT,
			FOD_ORDR_TOT_QTY,
			FOD_ORDR_FLW, 
			FOD_PIPE_ID,
			FOD_SLTP_ORDR_RFRNC,
			FOD_EXPRY_DT,
			FOD_EXER_TYP,
			FOD_INDSTK,
			FOD_ROWNUM 
		)
		(
			SELECT  F.FOD_XCHNG_CD, 
							F.FOD_UNDRLYNG, 
							F.FOD_ORDR_RFRNC,
							F.FOD_CLM_MTCH_ACCNT,
							PSTN.OPEN_QTY,
							DECODE ( SIGN(PSTN.OPEN_QTY),-1, F.FOD_ORDR_FLW ,DECODE( F.FOD_ORDR_FLW, 'B', 'S', 'B' )),
							F.FOD_PIPE_ID,
							F.FOD_SLTP_ORDR_RFRNC,
							F.FOD_EXPRY_DT,
							F.FOD_EXER_TYP,
							F.FOD_INDSTK,ROWNUM 
		 FROM			FOD_FO_ORDR_DTLS F,
						 ( SELECT	 DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC,
											 SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY /*** Profit handled i
n Ver 2.0 ***/
											 FROM			FOD_FO_ORDR_DTLS
											 WHERE		FOD_TRD_DT  = :sql_exg_nxt_trd_dt 
											 AND			FOD_XCHNG_CD = :sql_fod_xchng_cd
											 AND			TRIM(FOD_UNDRLYNG)  LIKE :sql_fod_undrlyng
											 AND			FOD_PIPE_ID  LIKE :sql_fod_pipe_id 
											 AND			FOD_PRDCT_TYP = 'U'
											 GROUP BY DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
											 HAVING   SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY,'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) !=  0 /*** Profit handled i
n Ver 2.0 ***/
											 AND      SUM( DECODE(FOD_ORDR_STTS,'J', 0, 'C', 0,'D',0,'E',0, 'B', 0, 'X', 0, 1 ) ) = 0
						 ) PSTN /*** Ver 1.8 Order Status 'B' and 'X' added ***/
		 WHERE   F.FOD_ORDR_RFRNC = PSTN.FRSH_ORDR_RFRNC
		 AND     F.FOD_ORDR_RFRNC NOT IN (SELECT FOD_SLTP_ORDR_RFRNC FROM TMP_FO_SLTP_EOS_CAN)
		 AND     F.FOD_ORDR_RFRNC NOT IN (SELECT FOD_ORDR_RFRNC FROM TMP_FO_SLTP_EOS_CAN)					/*** Ver 1.2 ***/
		 );
	}

	if( SQLCODE != 0 )
	{
		fn_errlog(c_ServiceName, "S31070", SQLMSG, c_err_msg);
		strcpy(c_msg, "Unable to insert into temporary table");
		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
		return -1;
	}
	
	i_rec_cnt = sqlca.sqlerrd[2];

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"In squareoff for :%d: records", sqlca.sqlerrd[2] );
	}

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
 	{
     	strcpy ( c_msg, "System error. Contact system support" );
     	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     	fn_errlog( c_ServiceName, "S31075",LIBMSG,c_err_msg);
     	return -1;
 	}

	if( i_rec_cnt == 0 )
	{
		fn_userlog(c_ServiceName, "No records found for square off in SLTP FuturePLUS" );
		return 0;
	}

	/* Place square off order */
	sprintf(c_msg, "Squareoff Request ... " );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  INIT(i_err, TOTAL_FML);
  INIT(i_ferr, TOTAL_FML);

  Finit32(*ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(*ptr_fml_Sbuffer));

	l_sssn_id = 0;
	c_slm_flg=MARKET;
	c_ord_typ=GOOD_TILL_TODAY;
	li_dsclsd_qty = 0;
	li_stp_lss_tgr_prc = 0;
	li_lmt_rt = 0;
	c_opt_typ = '*';
	l_strike_prc = 0;
	c_spl_flg = SYSTEM_SQUAREOFF;
	c_prd_typ = SLTP_FUTUREPLUS;
	strcpy(c_channel,"SYS");
	strcpy(c_alias,"*");
  /*** Ver 1.6 starts **/
  if( c_mode == 'N')
  {
    strcpy(c_sys_msg,"EOS");
  }
  else if(  c_mode == 'E')
  {
    strcpy(c_sys_msg,"EXCPT_EOS");
  }
  /*** Ver 1.6 ends ***/

	i_err[0]  = Fadd32(*ptr_fml_Sbuffer, FFO_USR_ID, (char *)DEF_USR, 0); 
  i_ferr[0] = Ferror32;
  i_err[1]  = Fadd32(*ptr_fml_Sbuffer, FFO_SSSN_ID, (char *)&l_sssn_id, 0);	
  i_ferr[1] = Ferror32;
  i_err[2]  = Fadd32(*ptr_fml_Sbuffer, FFO_LMT_MKT_SL_FLG , (char *)&c_slm_flg, 0); 
  i_ferr[2] = Ferror32;
  i_err[3]  = Fadd32(*ptr_fml_Sbuffer, FFO_ORD_TYP,  (char *)&c_ord_typ, 0);	
  i_ferr[3] = Ferror32;
  i_err[4]  = Fadd32(*ptr_fml_Sbuffer, FFO_XCHNG_CD,  (char *)sql_fod_xchng_cd, 0);
  i_ferr[4] = Ferror32;
  i_err[5]  = Fadd32(*ptr_fml_Sbuffer, FFO_OPT_TYP,  (char *)&c_opt_typ, 0);	
  i_ferr[5] = Ferror32;
  i_err[6]  = Fadd32(*ptr_fml_Sbuffer, FFO_STRK_PRC, (char *)&l_strike_prc, 0);	
  i_ferr[6] = Ferror32;
  i_err[7]  = Fadd32(*ptr_fml_Sbuffer, FFO_PRDCT_TYP, (char *)&c_prd_typ, 0);
  i_ferr[7] = Ferror32;
  i_err[8]  = Fadd32(*ptr_fml_Sbuffer, FFO_CHANNEL, (char *)c_channel, 0);	
  i_ferr[8] = Ferror32;
  i_err[9] = Fadd32(*ptr_fml_Sbuffer, FFO_ALIAS, (char *)&c_alias, 0);	
  i_ferr[9]= Ferror32;
  i_err[10] = Fadd32(*ptr_fml_Sbuffer, FFO_DSCLSD_QTY, (char *)&li_dsclsd_qty, 0);	
  i_ferr[10]= Ferror32;
  i_err[11] = Fadd32(*ptr_fml_Sbuffer, FFO_STP_LSS_TGR, (char *)&li_stp_lss_tgr_prc, 0);	
  i_ferr[11]= Ferror32;
  i_err[12] = Fadd32(*ptr_fml_Sbuffer, FFO_LMT_RT, (char *)&li_lmt_rt, 0);
  i_ferr[12]= Ferror32;
  i_err[13] = Fadd32(*ptr_fml_Sbuffer, FFO_SPL_FLG, (char *)&c_spl_flg, 0);
  i_ferr[13]= Ferror32;
	i_err[14]  = Fadd32(*ptr_fml_Sbuffer, FFO_SYS_MSG, (char *)c_sys_msg, 0);	
  i_ferr[14] = Ferror32;


	for(i_fml_loop = 0; i_fml_loop < 15 ; i_fml_loop++)
  {
    if(i_err[i_fml_loop] == -1)
    {
      fn_userlog(c_ServiceName,"The field number is %d", i_fml_loop);
      fn_errlog(c_ServiceName, "S31080", Fstrerror32(i_ferr[i_fml_loop]), c_err_msg);
      strcpy(c_msg, "Unable to add to buffer");
 			fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    	return -1;
    }
  }
	
	for( i_bulk_cnt=0; i_bulk_cnt<i_rec_cnt; i_bulk_cnt=i_bulk_cnt+i_rows_fetched )
	{
		memset(sltp_ordr_array,'\0',sizeof(sltp_ordr_array));

		/*EXEC ORACLE OPTION (char_map=string);*/

		EXEC SQL
      SELECT	FOD_CLM_MTCH_ACCNT,
							FOD_SLTP_ORDR_RFRNC,
							FOD_ORDR_TOT_QTY,
							FOD_PIPE_ID,
							FOD_UNDRLYNG,
							FOD_ORDR_FLW,
							FOD_EXPRY_DT,
							FOD_EXER_TYP,
							FOD_INDSTK
			INTO		:sltp_ordr_array
			FROM		TMP_FO_SLTP_EOS_SQR
			WHERE		FOD_ROWNUM		> 	:i_bulk_cnt
			AND			FOD_ROWNUM		<=	:i_bulk_cnt + :i_max_rec_per_fetch
			AND			FOD_XCHNG_CD  =   :sql_fod_xchng_cd;

		i_rows_fetched = sqlca.sqlerrd[2];

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"Rows fetched : |%d| |%d|", i_rows_fetched, SQLCODE );
		}

		if( SQLCODE == NO_DATA_FOUND ) 
		{
			fn_userlog(c_ServiceName,"Inside No data found. Records Left :%d:", i_rec_cnt - i_bulk_cnt );
			if( i_rows_fetched == 0 )
				break;
		}
		else if( SQLCODE != 0 )
		{
   		fn_errlog(c_ServiceName, "S31085", SQLMSG, c_err_msg);
   		strcpy(c_msg, "Unable to get records from temporary table");
   		fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);
   		return -1;
		}

	/*** REMOVE ***/
	char c_stattus = '\0';
	EXEC SQL
		SELECT FOD_ORDR_STTS
		INTO :c_stattus
		From FOD_FO_ORDR_DTLS
		where FOD_ORDR_RFRNC = :sltp_ordr_array[i_rowloop].c_ordr_ref;
	fn_userlog(c_ServiceName,"c_stattus = :%c:",c_stattus);
	/*************/

		for( i_rowloop=0; i_rowloop<i_rows_fetched; i_rowloop++ )
		{
	    sprintf(c_msg, "Processing Order No :%s:", sltp_ordr_array[i_rowloop].c_ordr_ref);
	    fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);
	
	  	INIT(i_err, TOTAL_FML);
	  	INIT(i_ferr, TOTAL_FML);

			MEMSET(c_svc_nm);
			c_span_flag = '\0';
			c_bse_span_flag = '\0';
			li_cnt++;

			EXEC SQL
				SELECT NVL(CLM_SPAN_ALLWD,'N'),
							 NVL(CLM_BSESPAN_ALLWD,'N')
				INTO   :c_span_flag,
							 :c_bse_span_flag
				FROM    CLM_CLNT_MSTR
				WHERE   CLM_MTCH_ACCNT = :sltp_ordr_array[i_rowloop].c_cln_mtch_accnt;

			if( SQLCODE != 0 )
			{
				fn_errlog(c_ServiceName, "S31090", SQLMSG, c_err_msg);
				strcpy(c_msg, "Unable to get SPAN flag");
				fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);
				return -1;
			}

			if ( ( c_span_flag == 'Y'    && strcmp(sql_fod_xchng_cd,"NFO") == 0) ||
		       ( c_bse_span_flag =='Y' && strcmp(sql_fod_xchng_cd,"BFO") == 0) 
				 )
			{
				strcpy( c_svc_nm, "SFO_SPN_PLC_ORD");
			}
			else
			{
				strcpy( c_svc_nm, "SFO_FUT_PLC_ORD");
			}
	
			if( DEBUG_MSG_LVL_3)
			{
				fn_userlog( c_ServiceName,"Exchange code is :%s:", sql_fod_xchng_cd );
				fn_userlog( c_ServiceName,"Underlying is :%s:", sltp_ordr_array[i_rowloop].c_undrlyng );
			}
			
			sql_fum_freeze_qty = 0;

  /*** Commented in Ver 1.7
			EXEC SQL
				 SELECT fum_freeze_qty
				 INTO   :sql_fum_freeze_qty
				 FROM   fum_fo_undrlyng_mstr
				 WHERE  fum_xchng_cd  = :sql_fod_xchng_cd
				 AND    fum_prdct_typ = 'F'
				 AND    fum_undrlyng  = :sltp_ordr_array[i_rowloop].c_undrlyng; *** Comment Ends ***/

  /*** Ver 1.7 starts ***/
   EXEC SQL
       SELECT fum_freeze_qty,trunc(fum_freeze_qty/ftq_min_lot_qty) * ftq_min_lot_qty
       INTO   :sql_fum_freeze_qty,
              :l_max_allowed_qty
       FROM   ftq_fo_trd_qt,fum_fo_undrlyng_mstr
       WHERE  fum_xchng_cd  =  ftq_xchng_cd
       AND    fum_prdct_typ =  ftq_prdct_typ
       AND    fum_undrlyng  =  ftq_undrlyng
       AND    ftq_xchng_cd  =  :sql_fod_xchng_cd
       AND    ftq_prdct_typ =  'F'
       AND    ftq_undrlyng  =  :sltp_ordr_array[i_rowloop].c_undrlyng
       AND    ftq_expry_dt  =  :sltp_ordr_array[i_rowloop].c_expry_dt;
  /*** Ver 1.7 ends ***/

			if ( SQLCODE != 0 )
			{
				fn_errlog(c_ServiceName, "S31095", SQLMSG, c_err_msg);
				strcpy(c_msg, "Unable to get Fum Freeze qty");
				fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);
				return -1;
			}
			if( DEBUG_MSG_LVL_3)
      {
				fn_userlog( c_ServiceName,"sql_fum_freeze_qty :%d:", sql_fum_freeze_qty );
        fn_userlog( c_ServiceName,"l_max_allowed_qty is :%ld:", l_max_allowed_qty );  /*** Ver 1.7 ***/
			}

		  if( sltp_ordr_array[i_rowloop].l_ord_qty  > sql_fum_freeze_qty && sql_fum_freeze_qty != 0 )
			{
				/** sltp_ordr_array[i_rowloop].l_ord_qty = sql_fum_freeze_qty; Commented in Ver 1.7 **/
						sltp_ordr_array[i_rowloop].l_ord_qty = l_max_allowed_qty; /*** Changed from sql_fum_freeze_qty to l_max_allowed_qty in Ver 1.7 ***/
			}

			if(DEBUG_MSG_LVL_3)
			{
     		fn_userlog(c_ServiceName,"|Ord Ref :%s|Match Acc :%s|Span Flg :%c|BSE Span Flg :%c|c_svc_nm :%s|li_cnt :%ld| ", sltp_ordr_array[i_rowloop].c_ordr_ref,sltp_ordr_array[i_rowloop].c_cln_mtch_accnt,c_span_flag,c_bse_span_flag,c_svc_nm,li_cnt);
			}

	    i_err[0]  = Fchg32(*ptr_fml_Sbuffer, FFO_EBA_MTCH_ACT_NO, 0, (char *)sltp_ordr_array[i_rowloop].c_cln_mtch_accnt, 0);
	    i_ferr[0] = Ferror32;
	    i_err[1]  = Fchg32(*ptr_fml_Sbuffer, FFO_UNDRLYNG, 0, (char *)sltp_ordr_array[i_rowloop].c_undrlyng, 0);
	    i_ferr[1] = Ferror32;
	    i_err[2]  = Fchg32(*ptr_fml_Sbuffer, FFO_EXPRY_DT, 0, (char *)sltp_ordr_array[i_rowloop].c_expry_dt, 0);
	    i_ferr[2] = Ferror32;
	    i_err[3]  = Fchg32(*ptr_fml_Sbuffer, FFO_EXER_TYP, 0, (char *)&(sltp_ordr_array[i_rowloop].c_exrc_typ), 0);
	    i_ferr[3] = Ferror32;
	    i_err[4]  = Fchg32(*ptr_fml_Sbuffer, FFO_CTGRY_INDSTK, 0, (char *)&(sltp_ordr_array[i_rowloop].c_ctgry_indstk), 0);
	    i_ferr[4] = Ferror32;
	    i_err[5]  = Fchg32(*ptr_fml_Sbuffer, FFO_ORDR_FLW, 0, (char *)&(sltp_ordr_array[i_rowloop].c_trnsctn_flw), 0);
	    i_ferr[5] = Ferror32;
			i_err[5]  = Fchg32(*ptr_fml_Sbuffer, FFO_ORD_TOT_QTY, 0, (char *)&(sltp_ordr_array[i_rowloop].l_ord_qty), 0);
	    i_ferr[5] = Ferror32;
		  i_err[6]  = Fchg32(*ptr_fml_Sbuffer, FFO_SVC_NAME, 0, (char *)c_svc_nm, 0);	
		  i_ferr[6] = Ferror32;
			i_err[7]  = Fchg32(*ptr_fml_Sbuffer, FFO_ORDR_RFRNC, 0, (char *) sltp_ordr_array[i_rowloop].c_ordr_ref, 0);	
		  i_ferr[7] = Ferror32;
	  	
			for(i_fml_loop = 0; i_fml_loop < 8 ; i_fml_loop++)
	  	{
	    	if(i_err[i_fml_loop] == -1)
	    	{
	      	fn_userlog(c_ServiceName,"The field number is %d", i_fml_loop);
	      	fn_errlog(c_ServiceName, "S31100", Fstrerror32(i_ferr[i_fml_loop]), c_err_msg);
	      	strcpy(c_msg, "Unable to add to buffer");
	      	fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);
	    		return -1;
	    	}
	  	}

	    i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                  c_err_msg,
                                  "sfr_bof_fimtm",
                                  li_cnt,
                                  i_rec_cnt );
			if ( i_ch_val == -1 )
			{
      	fn_userlog(c_ServiceName,"Error in fn_pre_prcs_rcrd");
				fn_errlog( c_ServiceName, "S31105", LIBMSG, c_err_msg );
				strcpy ( c_msg, "System error. Contact system support" );
				fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
				return -1;
			}

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Square off------- order ref :%s:", sltp_ordr_array[i_rowloop].c_ordr_ref);
			}

	    if( tpacall( "SFO_ORD_ROUT", (char*)(*ptr_fml_Sbuffer), 0, TPNOTRAN ) == -1 )
	    {
	      fn_errlog(c_ServiceName, "S31110", TPMSG, c_err_msg);
	      strcpy(c_msg, "Unable to read output paramters");
	      fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);
				return -1;
	    } 
		}	

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog( c_ServiceName,"Records Left :%d:", i_rec_cnt - i_bulk_cnt );
			fn_userlog ( c_ServiceName,"Inside Loop : Bulk cnt :%d: Rec Cnt :%d:", i_bulk_cnt, i_rec_cnt );
		}
	}	

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName,"Outside Loop : Bulk cnt :%d: Rec Cnt :%d:", i_bulk_cnt, i_rec_cnt );
	}
	return 0;
}

int	fn_plc_cancel ( char *c_ServiceName, FBFR32	**ptr_fml_Sbuffer, char *c_err_msg, char c_mode , char c_indstk_typ) /*** c_mode added in Ver 1.2 ***/	/*** c_indstk_typ added in Ver 1.9 ***/
{
	long	l_sssn_id = 0;
	long int li_dsclsd_qty = 0;
	long int li_stp_lss_tgr_prc = 0;
	long int li_lmt_rt = 0;
	long l_strike_prc;
	long int li_cnt = 0;

	int i_trnsctn;
	int	i_rec_cnt = 0;
	int	i_rows_fetched = 0;
	int	i_bulk_cnt = 0;
	int	i_rowloop = 0;
	int	i_fml_loop;
	int	i_max_rec_per_fetch = MAX_REC;
	int i_ch_val =0;

	char c_msg[256];
	char c_svc_nm[33] = "\0";
	char c_slm_flg;
	char c_ord_typ;
	char c_opt_typ;
	char c_spl_flg;
	char c_prd_typ;
	char c_channel[4];
	char c_alias[9];
	char c_remarks[50];
	char c_sys_msg[20];
	char c_span_flag  = '\0';
	char c_bse_span_flag  = '\0';

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
     	strcpy ( c_msg, "System error. Contact system support" );
     	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
     	fn_errlog(c_ServiceName, "S31115", LIBMSG, c_err_msg );
     	return -1;
  }

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog( c_ServiceName,"input :%s:%s:%s:%s", sql_exg_nxt_trd_dt.arr, sql_fod_xchng_cd, sql_fod_undrlyng, sql_fod_pipe_id );
		fn_userlog( c_ServiceName,"Finding data for SLTP FP EOS Cancellation" );
	}

	if ( c_mode == 'N' ) /*** if condition added in Ver 1.2 ***/
	{
                /********* Ver 2.0 Starts here *********/ 
   EXEC SQL
    INSERT INTO TMP_FO_SLTP_EOS_CAN
    (
      FOD_XCHNG_CD,
      FOD_UNDRLYNG,
      FOD_ORDR_RFRNC,
      FOD_CLM_MTCH_ACCNT,
      FOD_ORDR_TOT_QTY,
      FOD_ORDR_FLW,
      FOD_PIPE_ID,
      FOD_SLTP_ORDR_RFRNC,
      FOD_EXPRY_DT,
      FOD_EXER_TYP,
      FOD_INDSTK,
      FOD_ROWNUM
    )
    (

      SELECT
              FOD_XCHNG_CD,
              FOD_UNDRLYNG,
              FOD_ORDR_RFRNC,
              FOD_CLM_MTCH_ACCNT,
              (FOD_ORDR_TOT_QTY - FOD_EXEC_QTY),
              FOD_ORDR_FLW,
              FOD_PIPE_ID,
              FOD_SLTP_ORDR_RFRNC,
              FOD_EXPRY_DT,
              FOD_EXER_TYP,
              FOD_INDSTK,
              GET_EOSCAN_SEQ.NEXTVAL 
      FROM    FOD_FO_ORDR_DTLS
      WHERE   FOD_TRD_DT                 = :sql_exg_nxt_trd_dt
      AND     FOD_XCHNG_CD              = :sql_fod_xchng_cd
      AND     TRIM(FOD_UNDRLYNG)     LIKE  :sql_fod_undrlyng
      AND     FOD_PIPE_ID            LIKE :sql_fod_pipe_id
      AND     FOD_PRDCT_TYP             = 'U'
      AND     FOD_FC_FLAG                = 'T'
			AND    FOD_INDSTK              LIKE	:c_indstk_typ     /*** Ver 1.9 ***/
      AND     (FOD_ORDR_TOT_QTY - FOD_EXEC_QTY)!=0
      AND    FOD_ORDR_STTS in ('R','O','P')

    );
		i_rec_cnt =  sqlca.sqlerrd[2]; /*** Ver 2.1 ***/

                            /**** Ver 2.0 Ends Here  ****/                    
  
    EXEC SQL
    INSERT INTO TMP_FO_SLTP_EOS_CAN
    (
      FOD_XCHNG_CD,
      FOD_UNDRLYNG,
      FOD_ORDR_RFRNC,
      FOD_CLM_MTCH_ACCNT,
      FOD_ORDR_TOT_QTY,
      FOD_ORDR_FLW,
      FOD_PIPE_ID,
      FOD_SLTP_ORDR_RFRNC,
      FOD_EXPRY_DT,
      FOD_EXER_TYP,
      FOD_INDSTK,
      FOD_ROWNUM
    )
    (

      SELECT
              FOD_XCHNG_CD,
              FOD_UNDRLYNG,
              FOD_ORDR_RFRNC,
              FOD_CLM_MTCH_ACCNT,
              (FOD_ORDR_TOT_QTY - FOD_EXEC_QTY),
              FOD_ORDR_FLW,
              FOD_PIPE_ID,
              FOD_SLTP_ORDR_RFRNC,
              FOD_EXPRY_DT,
              FOD_EXER_TYP,
              FOD_INDSTK,
              GET_EOSCAN_SEQ.NEXTVAL /*** Changed from ROWNUM to Sequence in Ver 2.0 ***/ 
      FROM    FOD_FO_ORDR_DTLS
      WHERE   FOD_TRD_DT                 = :sql_exg_nxt_trd_dt
      AND     FOD_XCHNG_CD              = :sql_fod_xchng_cd
      AND     TRIM(FOD_UNDRLYNG)     LIKE  :sql_fod_undrlyng
      AND     FOD_PIPE_ID            LIKE :sql_fod_pipe_id
      AND     FOD_PRDCT_TYP             = 'U'
      AND     FOD_INDSTK              LIKE :c_indstk_typ     /*** Ver 1.9 ***/
      AND     (FOD_ORDR_TOT_QTY - FOD_EXEC_QTY)!=0
      AND     FOD_ORDR_STTS in ('R','O','P')
      AND     FOD_SLTP_ORDR_RFRNC NOT IN (select distinct FOD_SLTP_ORDR_RFRNC  from TMP_FO_SLTP_EOS_CAN )  /*** Ver 2.0 ***/
    );
	}
	if (c_mode == 'E') /*** Else loop added in Ver 1.2 ***/
	{
	  EXEC SQL
		 INSERT INTO TMP_FO_SLTP_EOS_CAN
			( FOD_XCHNG_CD,  
				FOD_UNDRLYNG,  
				FOD_ORDR_RFRNC,  
				FOD_CLM_MTCH_ACCNT,
				FOD_ORDR_TOT_QTY,  
				FOD_ORDR_FLW,  
				FOD_PIPE_ID,  
				FOD_SLTP_ORDR_RFRNC,  
				FOD_EXPRY_DT,  
				FOD_EXER_TYP,  
				FOD_INDSTK,  
				FOD_ROWNUM
			)
			SELECT   CAN.FOD_XCHNG_CD, 
							 CAN.FOD_UNDRLYNG, 
							 CAN.FOD_ORDR_RFRNC,
							 CAN.FOD_CLM_MTCH_ACCNT, 
							 CAN.qty, 
							 CAN.FOD_ORDR_FLW, 
							 CAN.FOD_PIPE_ID, 
							 CAN.FOD_SLTP_ORDR_RFRNC, 
							 CAN.FOD_EXPRY_DT,
							 CAN.FOD_EXER_TYP, 
							 CAN.FOD_INDSTK, 
							 ROWNUM
			FROM
			(
			 (	  
				SELECT FOD_XCHNG_CD, 
							 FOD_UNDRLYNG, 
							 FOD_ORDR_RFRNC,
							 FOD_CLM_MTCH_ACCNT, 
							 (FOD_ORDR_TOT_QTY - FOD_EXEC_QTY) qty, 
							 FOD_ORDR_FLW, 
							 FOD_PIPE_ID, 
							 FOD_SLTP_ORDR_RFRNC, 
							 FOD_EXPRY_DT,
							 FOD_EXER_TYP, 
							 FOD_INDSTK
				FROM    FOD_FO_ORDR_DTLS 
				WHERE		FOD_ORDR_STTS in ('O','R','P') 
				AND     FOD_CHANNEL = 'SYS'
				AND			( FOD_ORDR_RFRNC in
									( SELECT	distinct FOD_SLTP_ORDR_RFRNC 
										FROM		FOD_FO_ORDR_DTLS 
										WHERE   FOD_TRD_DT = :sql_exg_nxt_trd_dt
										AND			FOD_XCHNG_CD = :sql_fod_xchng_cd 
										AND			TRIM(FOD_UNDRLYNG)  LIKE :sql_fod_undrlyng 
										AND			FOD_PIPE_ID LIKE :sql_fod_pipe_id 
										AND			FOD_PRDCT_TYP  = 'U'
										AND			FOD_ORDR_STTS in ('D','J','C')
									)
									OR
									FOD_SLTP_ORDR_RFRNC in
									( SELECT	distinct FOD_SLTP_ORDR_RFRNC 
										FROM		FOD_FO_ORDR_DTLS 
										WHERE   FOD_TRD_DT = :sql_exg_nxt_trd_dt
										AND			FOD_XCHNG_CD = :sql_fod_xchng_cd 
										AND			TRIM(FOD_UNDRLYNG)  LIKE :sql_fod_undrlyng 
										AND			FOD_PIPE_ID LIKE :sql_fod_pipe_id 
										AND			FOD_PRDCT_TYP  = 'U'
										AND			FOD_ORDR_STTS in ('D','J','C')
									)
								)
			)
			UNION
			(  
				SELECT FOD_XCHNG_CD, 
							 FOD_UNDRLYNG, 
							 FOD_ORDR_RFRNC,
							 FOD_CLM_MTCH_ACCNT, 
							 (FOD_ORDR_TOT_QTY - FOD_EXEC_QTY) qty, 
							 FOD_ORDR_FLW, 
							 FOD_PIPE_ID, 
							 FOD_SLTP_ORDR_RFRNC, 
							 FOD_EXPRY_DT,
							 FOD_EXER_TYP, 
							 FOD_INDSTK
				FROM    FOD_FO_ORDR_DTLS,
								(
									/*** Commented in Ver 2.0 ***	
									SELECT   DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC,
									SUM( DECODE( FOD_FC_FLAG, 'C', -1 * ( FOD_EXEC_QTY + (nvl(FOD_ORDR_TOT_QTY - (FOD_EXEC_QTY + FOD_CNCL_QTY + FOD_EXPRD_QTY),0)) )
																,FOD_EXEC_QTY  + (nvl(FOD_ORDR_TOT_QTY - (FOD_EXEC_QTY + FOD_CNCL_QTY + FOD_EXPRD_QTY),0))) ) DIFF_QTY
									FROM     FOD_FO_ORDR_DTLS
									WHERE    FOD_TRD_DT  = :sql_exg_nxt_trd_dt
									AND      FOD_XCHNG_CD = :sql_fod_xchng_cd 
									AND			 TRIM(FOD_UNDRLYNG)  LIKE :sql_fod_undrlyng 
									AND			 FOD_PIPE_ID LIKE :sql_fod_pipe_id 
									AND      FOD_PRDCT_TYP = 'U'
									AND      FOD_ORDR_STTS != 'J'
									GROUP BY DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
									HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * ( FOD_EXEC_QTY + (nvl(FOD_ORDR_TOT_QTY - (FOD_EXEC_QTY + FOD_CNCL_QTY + FOD_EXPRD_QTY),0)) )
																				,FOD_EXEC_QTY  + (nvl(FOD_ORDR_TOT_QTY - (FOD_EXEC_QTY + FOD_CNCL_QTY + FOD_EXPRD_QTY),0))) ) !=  0

														OR SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY) ) < 0 *** Ver 1.3***
														OR SUM( DECODE(FOD_ORDR_STTS,'P',0 , 1 )) = 0														 *** Ver 1.3***
														OR SUM( DECODE( FOD_FC_FLAG, 'C', ( DECODE(FOD_LMT_MRKT_SL_FLG,'L', 1, 0) ), 0 ) ) = 1 *** Ver 1.5***
									***/
									/*** Added in Ver 2.0 starts ***/
								  SELECT   DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC
                  FROM     FOD_FO_ORDR_DTLS
                  WHERE    FOD_TRD_DT  = :sql_exg_nxt_trd_dt
                  AND      FOD_XCHNG_CD = :sql_fod_xchng_cd
                  AND      TRIM(FOD_UNDRLYNG)  LIKE :sql_fod_undrlyng
                  AND      FOD_PIPE_ID LIKE :sql_fod_pipe_id
                  AND      FOD_PRDCT_TYP = 'U'
                  AND      FOD_ORDR_STTS != 'J'
                  GROUP BY DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
                  HAVING    ( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * ( FOD_EXEC_QTY + (nvl(FOD_ORDR_TOT_QTY - (FOD_EXEC_QTY + FOD_CNCL_QTY + FOD_EXPRD_QTY),0)) )
																				,'T',0
                                        ,FOD_EXEC_QTY  + (nvl(FOD_ORDR_TOT_QTY - (FOD_EXEC_QTY + FOD_CNCL_QTY + FOD_EXPRD_QTY),0))) ) !=  0
														  AND
															SUM( DECODE (FOD_FC_FLAG, 'T' , 1, 0)) = 0   /*** If Profit ordr does not exist ***/
														)
                            OR SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY) ) < 0 
                            OR SUM( DECODE(FOD_ORDR_STTS,'P',0 , 1 )) = 0                            
                            OR SUM( DECODE( FOD_FC_FLAG, 'C', ( DECODE(FOD_LMT_MRKT_SL_FLG,'L', 1, 0) ), 0 ) ) = 1	
														OR 
														(		
																SUM( DECODE (FOD_FC_FLAG, 'T' , 1, 0)) = 1  /*** If Profit ordr exist ***/
															  AND 
																(
																	SUM( DECODE( FOD_FC_FLAG||FOD_ORDR_STTS, 'CE',1,'CP',1,'TP',1,'TO',1,'TE',1, 0) ) = 2
																	OR
																	SUM( DECODE( FOD_FC_FLAG||FOD_ORDR_STTS, 'TE',1,'TP',1,'CP',1,'CO',1,'CE',1, 0) ) = 2
																)
														)
									/*** Ver 2.0 ends ***/ 
								) QTY_CHK
				WHERE		FOD_ORDR_STTS in ('O','R','P') 
				AND     FOD_CHANNEL != 'SYS'
				AND     QTY_CHK.FRSH_ORDR_RFRNC =   DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC )
			)
		 ) CAN;
	}

	if( SQLCODE != 0 )
	{
		fn_errlog(c_ServiceName, "S31120", SQLMSG, c_err_msg);
		strcpy(c_msg, "Unable to insert into temporary table");
		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
		return -1;
	}
	
	i_rec_cnt = i_rec_cnt + sqlca.sqlerrd[2]; /*** Ver 2.1 i_rec_cnt added ***/

	if(DEBUG_MSG_LVL_0)
	{
		/*** fn_userlog(c_ServiceName,"In cancellation for :%d: records", sqlca.sqlerrd[2] ); *** Ver 2.1 ***/
		fn_userlog(c_ServiceName,"In cancellation for :%d: records", i_rec_cnt ); /*** Ver 2.1 ***/
	}

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
 	{
     	strcpy ( c_msg, "System error. Contact system support" );
     	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     	fn_errlog( c_ServiceName, "S31125",LIBMSG,c_err_msg);
     	return -1;
 	}

	if( i_rec_cnt == 0 )
	{
		fn_userlog(c_ServiceName, "No records found for cancellation in SLTP FuturePLUS" );
		return 0;
	}

	/* Place square off order */
	sprintf(c_msg, "Cancellation Request ... " );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  INIT(i_err, TOTAL_FML);
  INIT(i_ferr, TOTAL_FML);

  Finit32(*ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(*ptr_fml_Sbuffer));

	l_sssn_id = 0;
	strcpy(c_channel,"SYS");
	strcpy(c_alias,"*");
	strcpy(c_remarks,"System placed Cancellation");
  /***  Ver 1.6 Starts  ***/
  if(c_mode == 'E')
  {
    strcpy(c_sys_msg,"EXCPT_EOS");
  }
  else
  {
    strcpy(c_sys_msg,"EOS");
  }
  /*** Ver 1.6 Ends ***/

	i_err[0]  = Fadd32(*ptr_fml_Sbuffer, FFO_USR_ID, (char *)DEF_USR, 0); 
  i_ferr[0] = Ferror32;
  i_err[1]  = Fadd32(*ptr_fml_Sbuffer, FFO_SSSN_ID, (char *)&l_sssn_id, 0);	
  i_ferr[1] = Ferror32;
	i_err[2]  = Fadd32(*ptr_fml_Sbuffer, FFO_SYS_MSG, (char *)c_sys_msg, 0);	
  i_ferr[2] = Ferror32;
  i_err[3]  = Fadd32(*ptr_fml_Sbuffer, FFO_XCHNG_CD,  (char *)sql_fod_xchng_cd, 0);
  i_ferr[3] = Ferror32;
	i_err[4] = Fadd32(*ptr_fml_Sbuffer, FFO_XCHNG_RMRKS, (char *)c_remarks, 0);
  i_ferr[4]= Ferror32;
  i_err[5] = Fadd32(*ptr_fml_Sbuffer, FFO_ALIAS, (char *)&c_alias, 0);	
  i_ferr[5]= Ferror32;
	i_err[6]  = Fadd32(*ptr_fml_Sbuffer, FFO_CHANNEL, (char *)c_channel, 0);	
  i_ferr[6] = Ferror32;


	for(i_fml_loop = 0; i_fml_loop < 7 ; i_fml_loop++)
  {
    if(i_err[i_fml_loop] == -1)
    {
      fn_userlog(c_ServiceName,"The field number is %d", i_fml_loop);
      fn_errlog(c_ServiceName, "S31130", Fstrerror32(i_ferr[i_fml_loop]), c_err_msg);
      strcpy(c_msg, "Unable to add to buffer");
 			fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    	return -1;
    }
  }
	
	for( i_bulk_cnt=0; i_bulk_cnt<i_rec_cnt; i_bulk_cnt=i_bulk_cnt+i_rows_fetched )
	{
		memset(sltp_ordr_array,'\0',sizeof(sltp_ordr_array));

		/*EXEC ORACLE OPTION (char_map=string);*/

		EXEC SQL
      SELECT	FOD_CLM_MTCH_ACCNT,
							FOD_ORDR_RFRNC,
							FOD_ORDR_TOT_QTY,
							FOD_PIPE_ID,
							FOD_UNDRLYNG,
							FOD_ORDR_FLW,
							FOD_EXPRY_DT,
							FOD_EXER_TYP,
							FOD_INDSTK
			INTO		:sltp_ordr_array
			FROM		TMP_FO_SLTP_EOS_CAN
			WHERE		FOD_ROWNUM		> 	:i_bulk_cnt
			AND			FOD_ROWNUM		<=	:i_bulk_cnt + :i_max_rec_per_fetch
			AND			FOD_XCHNG_CD  =   :sql_fod_xchng_cd
			ORDER BY FOD_CLM_MTCH_ACCNT,FOD_ORDR_RFRNC asc;

		i_rows_fetched = sqlca.sqlerrd[2];

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"Rows fetched : |%d| |%d|", i_rows_fetched, SQLCODE );
		}

		if( SQLCODE == NO_DATA_FOUND ) 
		{
			fn_userlog(c_ServiceName,"Inside No data found. Records Left :%d:", i_rec_cnt - i_bulk_cnt );
			if( i_rows_fetched == 0 )
				break;
		}
		else if( SQLCODE != 0 )
		{
   		fn_errlog(c_ServiceName, "S31135", SQLMSG, c_err_msg);
   		strcpy(c_msg, "Unable to get records from temporary table");
   		fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);
   		return -1;
		}

		for( i_rowloop=0; i_rowloop<i_rows_fetched; i_rowloop++ )
		{
	    sprintf(c_msg, "Processing Order No :%s:", sltp_ordr_array[i_rowloop].c_ordr_ref);
	    fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);
	
	  	INIT(i_err, TOTAL_FML);
	  	INIT(i_ferr, TOTAL_FML);

			MEMSET(c_svc_nm);
			c_span_flag = '\0';
			c_bse_span_flag = '\0';
			li_cnt++;

			EXEC SQL
				SELECT NVL(CLM_SPAN_ALLWD,'N'),
							 NVL(CLM_BSESPAN_ALLWD,'N')
				INTO   :c_span_flag,
							 :c_bse_span_flag
				FROM    CLM_CLNT_MSTR
				WHERE   CLM_MTCH_ACCNT = :sltp_ordr_array[i_rowloop].c_cln_mtch_accnt;

			if( SQLCODE != 0 )
			{
				fn_errlog(c_ServiceName, "S31140", SQLMSG, c_err_msg);
				strcpy(c_msg, "Unable to get SPAN flag");
				fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);
				return -1;
			}

			if ( ( c_span_flag == 'Y'    && strcmp(sql_fod_xchng_cd,"NFO") == 0) ||
		       ( c_bse_span_flag =='Y' && strcmp(sql_fod_xchng_cd,"BFO") == 0) 
				 )
			{
				strcpy( c_svc_nm, "SFO_SPN_CANCEL");
			}
			else
			{
				strcpy( c_svc_nm, "SFO_CANCEL_FUT");
			}

			if(DEBUG_MSG_LVL_3)
			{
     		fn_userlog(c_ServiceName,"|Ord Ref :%s|Match Acc :%s|Span Flg :%c|BSE Span Flg :%c|c_svc_nm :%s|li_cnt :%ld| ", sltp_ordr_array[i_rowloop].c_ordr_ref,sltp_ordr_array[i_rowloop].c_cln_mtch_accnt,c_span_flag,c_bse_span_flag,c_svc_nm,li_cnt);
			}

	    i_err[0]  = Fchg32(*ptr_fml_Sbuffer, FFO_EBA_MTCH_ACT_NO, 0, (char *)sltp_ordr_array[i_rowloop].c_cln_mtch_accnt, 0);
	    i_ferr[0] = Ferror32;
	    i_err[1]  = Fchg32(*ptr_fml_Sbuffer, FFO_ORDR_RFRNC, 0, (char *)sltp_ordr_array[i_rowloop].c_ordr_ref, 0);
	    i_ferr[1] = Ferror32;
	    i_err[2]  = Fchg32(*ptr_fml_Sbuffer, FFO_PIPE_ID, 0, (char *)sltp_ordr_array[i_rowloop].c_pipe_id, 0);
	    i_ferr[2] = Ferror32;
			i_err[3]  = Fchg32(*ptr_fml_Sbuffer, FFO_SVC_NAME, 0, (char *)c_svc_nm, 0);	
		  i_ferr[3] = Ferror32;

	  	for(i_fml_loop = 0; i_fml_loop < 4 ; i_fml_loop++)
	  	{
	    	if(i_err[i_fml_loop] == -1)
	    	{
	      	fn_userlog(c_ServiceName,"The field number is %d", i_fml_loop);
	      	fn_errlog(c_ServiceName, "S31145", Fstrerror32(i_ferr[i_fml_loop]), c_err_msg);
	      	strcpy(c_msg, "Unable to add to buffer");
	      	fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);
	    		return -1;
	    	}
	  	}

	    i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                  c_err_msg,
                                  "sfr_bof_fimtm",
                                  li_cnt,
                                  i_rec_cnt );
			if ( i_ch_val == -1 )
			{
      	fn_userlog(c_ServiceName,"Error in fn_pre_prcs_rcrd");
				fn_errlog( c_ServiceName, "S31150", LIBMSG, c_err_msg );
				strcpy ( c_msg, "System error. Contact system support" );
				fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
				return -1;
			}

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog("Cancel order ref :%s:",sltp_ordr_array[i_rowloop].c_ordr_ref);
			}

	    if( tpacall( "SFO_ORD_ROUT", (char*)(*ptr_fml_Sbuffer), 0, TPNOTRAN ) == -1 )
	    {
	      fn_errlog(c_ServiceName, "S31155", TPMSG, c_err_msg);
	      strcpy(c_msg, "Unable to read output paramters");
	      fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);
				return -1;
	    } 
		}	

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog( c_ServiceName,"Records Left :%d:", i_rec_cnt - i_bulk_cnt );
			fn_userlog ( c_ServiceName,"Inside Loop : Bulk cnt :%d: Rec Cnt :%d:", i_bulk_cnt, i_rec_cnt );
		}
	}	

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName,"Outside Loop : Bulk cnt :%d: Rec Cnt :%d:", i_bulk_cnt, i_rec_cnt );
	}
	return 0;
}

int	fn_plc_mod ( char *c_ServiceName, FBFR32	**ptr_fml_Sbuffer, char *c_err_msg )
{
	long	l_sssn_id = 0;
	long int li_dsclsd_qty = 0;
	long int li_stp_lss_tgr_prc = 0;
	long int li_lmt_rt = 0;
	long l_strike_prc;
	long int li_cnt = 0;

	int i_trnsctn;
	int	i_rec_cnt = 0;
	int	i_rows_fetched = 0;
	int	i_bulk_cnt = 0;
	int	i_rowloop = 0;
	int	i_fml_loop;
	int	i_max_rec_per_fetch = MAX_REC;
	int i_ch_val =0;

	char c_msg[256];
	char c_svc_nm[33] = "\0";
	char c_slm_flg;
	char c_ord_typ;
	char c_opt_typ;
	char c_spl_flg;
	char c_prd_typ;
	char c_channel[4];
	char c_alias[9];
	char c_remarks[50];
	char c_span_flag  = '\0';
	char c_bse_span_flag  = '\0';
	char c_sys_msg[20];

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
     	strcpy ( c_msg, "System error. Contact system support" );
     	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
     	fn_errlog(c_ServiceName, "S31160", LIBMSG, c_err_msg );
     	return -1;
  }

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog( c_ServiceName,"input :%s:%s:%s:%s", sql_exg_nxt_trd_dt.arr, sql_fod_xchng_cd, sql_fod_undrlyng, sql_fod_pipe_id );
		fn_userlog( c_ServiceName,"Finding data for SLTP FP EOS Modification" );
	}

	/*** Commented on 21-Jan-2013 for wrong modify qty 
	EXEC SQL
		INSERT INTO TMP_FO_SLTP_EOS
		(
			FOD_XCHNG_CD,
			FOD_UNDRLYNG,
			FOD_ORDR_RFRNC,
			FOD_CLM_MTCH_ACCNT,
			FOD_ORDR_TOT_QTY,
			FOD_ORDR_FLW,
			FOD_PIPE_ID,
			FOD_SLTP_ORDR_RFRNC,
			FOD_EXPRY_DT,
			FOD_EXER_TYP,
			FOD_INDSTK,
			FOD_ROWNUM
		)
		(
			SELECT  
							C.FOD_XCHNG_CD,
							C.FOD_UNDRLYNG,
							C.FOD_ORDR_RFRNC,
							C.FOD_CLM_MTCH_ACCNT,
							U.CVR_XCTD_QTY,
							C.FOD_ORDR_FLW,
							C.FOD_PIPE_ID,
							C.FOD_SLTP_ORDR_RFRNC,
							C.FOD_EXPRY_DT,
							C.FOD_EXER_TYP,
							c.FOD_INDSTK,
							ROWNUM
			FROM    FOD_FO_ORDR_DTLS C, 
							(	SELECT	FOD_CLM_MTCH_ACCNT, 
												FOD_TRD_DT,
												DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) FOD_SLTP_ORDR_RFRNC,
												SUM( DECODE( FOD_FC_FLAG, 	'C', -1 * FOD_EXEC_QTY,
																										FOD_EXEC_QTY ) ) CVR_XCTD_QTY  
								FROM   	FOD_FO_ORDR_DTLS
								WHERE   FOD_TRD_DT                = :sql_exg_nxt_trd_dt
								AND     FOD_XCHNG_CD              = :sql_fod_xchng_cd
								AND     TRIM(FOD_UNDRLYNG)     LIKE :sql_fod_undrlyng
								AND     FOD_PIPE_ID						 LIKE :sql_fod_pipe_id
								AND    	FOD_PRDCT_TYP         		= 'U'
								GROUP BY 	FOD_CLM_MTCH_ACCNT,
													FOD_TRD_DT,
													DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
								HAVING		SUM( DECODE( FOD_FC_FLAG, 'C', DECODE(FOD_ORDR_STTS,'R',1,'Q',1,'O',1,'P', 1, 0), 0 ) ) > 0
																) U
			WHERE   C.FOD_CLM_MTCH_ACCNT   = U.FOD_CLM_MTCH_ACCNT 
			AND     C.FOD_TRD_DT           = U.FOD_TRD_DT
			AND     C.FOD_SLTP_ORDR_RFRNC  = U.FOD_SLTP_ORDR_RFRNC
			AND     C.FOD_ORDR_STTS       IN ('R','Q','O','P')			*	Excluding already closed	*
			AND     C.FOD_CHANNEL					 != 'SYS'
			AND     FOD_ORDR_TOT_QTY     	<> FOD_EXEC_QTY						* Cover orders *
		);
		****/

	EXEC SQL
		INSERT INTO TMP_FO_SLTP_EOS_MOD
		(
			FOD_XCHNG_CD,
			FOD_UNDRLYNG,
			FOD_ORDR_RFRNC,
			FOD_CLM_MTCH_ACCNT,
			FOD_ORDR_TOT_QTY,
			FOD_ORDR_FLW,
			FOD_PIPE_ID,
			FOD_SLTP_ORDR_RFRNC,
			FOD_EXPRY_DT,
			FOD_EXER_TYP,
			FOD_INDSTK,
			FOD_ROWNUM
		)
		(
			SELECT  
							FOD_XCHNG_CD,
							FOD_UNDRLYNG,
							FOD_ORDR_RFRNC,
							FOD_CLM_MTCH_ACCNT,
							FOD_ORDR_TOT_QTY,
							FOD_ORDR_FLW,
							FOD_PIPE_ID,
							FOD_SLTP_ORDR_RFRNC,
							FOD_EXPRY_DT,
							FOD_EXER_TYP,
							FOD_INDSTK,
							ROWNUM
			FROM    FOD_FO_ORDR_DTLS
			WHERE   FOD_PRDCT_TYP       = 'U'
			AND     FOD_TRD_DT          = :sql_exg_nxt_trd_dt
			AND     FOD_XCHNG_CD        = :sql_fod_xchng_cd
			AND     TRIM(FOD_UNDRLYNG)  LIKE :sql_fod_undrlyng
			AND     FOD_PIPE_ID					LIKE :sql_fod_pipe_id
			AND     FOD_FC_FLAG         = 'C'
			AND     FOD_ORDR_STTS       IN ('R','Q','O','P')			/*	Excluding already closed	*/
			AND     FOD_CHANNEL					!= 'SYS'
			AND     FOD_ORDR_TOT_QTY    <> FOD_EXEC_QTY						/* Cover orders */
		);

	if( SQLCODE != 0 )
	{
		fn_errlog(c_ServiceName, "S31165", SQLMSG, c_err_msg);
		strcpy(c_msg, "Unable to insert into temporary table");
		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
		return -1;
	}
	
	i_rec_cnt = sqlca.sqlerrd[2];

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"In Modification for :%d: records", sqlca.sqlerrd[2] );
	}

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
 	{
     	strcpy ( c_msg, "System error. Contact system support" );
     	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     	fn_errlog( c_ServiceName, "S31170",LIBMSG,c_err_msg);
     	return -1;
 	}

	if( i_rec_cnt == 0 )
	{
		fn_userlog(c_ServiceName, "No records found for Modification in SLTP FuturePLUS" );
		return 0;
	}

	/* Place modification Request */
	sprintf(c_msg, "Modification Request ... " );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  INIT(i_err, TOTAL_FML);
  INIT(i_ferr, TOTAL_FML);

  Finit32(*ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(*ptr_fml_Sbuffer));

	l_sssn_id = 0;
	strcpy(c_channel,"SYS");
	strcpy(c_alias,"*");
	c_slm_flg=MARKET;
	c_ord_typ=GOOD_TILL_TODAY;
	li_dsclsd_qty = 0;
	li_stp_lss_tgr_prc = 0;
	li_lmt_rt = 0;
	strcpy(c_sys_msg,"EOS");

	i_err[0]  = Fadd32(*ptr_fml_Sbuffer, FFO_USR_ID, (char *)DEF_USR, 0); 
  i_ferr[0] = Ferror32;
  i_err[1]  = Fadd32(*ptr_fml_Sbuffer, FFO_SSSN_ID, (char *)&l_sssn_id, 0);	
  i_ferr[1] = Ferror32;
	i_err[2] = Fadd32(*ptr_fml_Sbuffer, FFO_ORD_VALID_DT, (char *)sql_exg_nxt_trd_dt.arr, 0);	
	i_ferr[2]= Ferror32;
  i_err[3]  = Fadd32(*ptr_fml_Sbuffer, FFO_XCHNG_CD,  (char *)sql_fod_xchng_cd, 0);
  i_ferr[3] = Ferror32;
	i_err[4] = Fadd32(*ptr_fml_Sbuffer, FFO_DSCLSD_QTY, (char *)&li_dsclsd_qty, 0);	
  i_ferr[4]= Ferror32;
  i_err[5]  = Fadd32(*ptr_fml_Sbuffer, FFO_ORD_TYP,  (char *)&c_ord_typ, 0);	
	i_ferr[5] = Ferror32;
	i_err[6]  = Fadd32(*ptr_fml_Sbuffer, FFO_LMT_MKT_SL_FLG , (char *)&c_slm_flg, 0); 
	i_ferr[6] = Ferror32;
	i_err[7] = Fadd32(*ptr_fml_Sbuffer, FFO_LMT_RT, (char *)&li_lmt_rt, 0);
	i_ferr[7]= Ferror32;
	i_err[8] = Fadd32(*ptr_fml_Sbuffer, FFO_STP_LSS_TGR, (char *)&li_stp_lss_tgr_prc, 0);	
	i_ferr[8]= Ferror32;
	i_err[9] = Fadd32(*ptr_fml_Sbuffer, FFO_MOD_TRD_DT, (char *)sql_exg_nxt_trd_dt.arr, 0);	
	i_ferr[9]= Ferror32;
	i_err[10]  = Fadd32(*ptr_fml_Sbuffer, FFO_SYS_MSG, (char *)c_sys_msg, 0);	
  i_ferr[10] = Ferror32;

	for(i_fml_loop = 0; i_fml_loop < 11 ; i_fml_loop++)
  {
    if(i_err[i_fml_loop] == -1)
    {
      fn_userlog(c_ServiceName,"The field number is %d", i_fml_loop);
      fn_errlog(c_ServiceName, "S31175", Fstrerror32(i_ferr[i_fml_loop]), c_err_msg);
      strcpy(c_msg, "Unable to add to buffer");
 			fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    	return -1;
    }
  }
	
	for( i_bulk_cnt=0; i_bulk_cnt<i_rec_cnt; i_bulk_cnt=i_bulk_cnt+i_rows_fetched )
	{
		memset(sltp_ordr_array,'\0',sizeof(sltp_ordr_array));

		/*EXEC ORACLE OPTION (char_map=string);*/

		EXEC SQL
      SELECT	FOD_CLM_MTCH_ACCNT,
							FOD_ORDR_RFRNC,
							FOD_ORDR_TOT_QTY,
							FOD_PIPE_ID,
							FOD_UNDRLYNG,
							FOD_ORDR_FLW,
							FOD_EXPRY_DT,
							FOD_EXER_TYP,
							FOD_INDSTK
			INTO		:sltp_ordr_array
			FROM		TMP_FO_SLTP_EOS_MOD
			WHERE		FOD_ROWNUM		> 	:i_bulk_cnt
			AND			FOD_ROWNUM		<=	:i_bulk_cnt + :i_max_rec_per_fetch
			AND			FOD_XCHNG_CD  =   :sql_fod_xchng_cd;

		i_rows_fetched = sqlca.sqlerrd[2];

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"Rows fetched : |%d| |%d|", i_rows_fetched, SQLCODE );
		}

		if( SQLCODE == NO_DATA_FOUND ) 
		{
			fn_userlog(c_ServiceName,"Inside No data found. Records Left :%d:", i_rec_cnt - i_bulk_cnt );
			if( i_rows_fetched == 0 )
				break;
		}
		else if( SQLCODE != 0 )
		{
   		fn_errlog(c_ServiceName, "S31180", SQLMSG, c_err_msg);
   		strcpy(c_msg, "Unable to get records from temporary table");
   		fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);
   		return -1;
		}

		for( i_rowloop=0; i_rowloop<i_rows_fetched; i_rowloop++ )
		{
	    sprintf(c_msg, "Processing Order No :%s:", sltp_ordr_array[i_rowloop].c_ordr_ref);
	    fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);
	
	  	INIT(i_err, TOTAL_FML);
	  	INIT(i_ferr, TOTAL_FML);

			MEMSET(c_svc_nm);
			c_span_flag = '\0';
			c_bse_span_flag = '\0';
			li_cnt++;
	
			EXEC SQL
      SELECT NVL(CLM_SPAN_ALLWD,'N'),
						  NVL(CLM_BSESPAN_ALLWD,'N')
			INTO   :c_span_flag,
						 :c_bse_span_flag
			FROM    CLM_CLNT_MSTR
			WHERE   CLM_MTCH_ACCNT = :sltp_ordr_array[i_rowloop].c_cln_mtch_accnt;

			if( SQLCODE != 0 )
			{
				fn_errlog(c_ServiceName, "S31185", SQLMSG, c_err_msg);
				strcpy(c_msg, "Unable to get records from temporary table");
				fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);
				return -1;
			}

			if ( ( c_span_flag == 'Y'    && strcmp(sql_fod_xchng_cd,"NFO") == 0) ||
		       ( c_bse_span_flag =='Y' && strcmp(sql_fod_xchng_cd,"BFO") == 0) 
				 )
			{
				strcpy( c_svc_nm, "SFO_SPN_MOD_ORD");
			}
			else
			{
				strcpy( c_svc_nm, "SFO_PLCMOD_FUT");
			}

			if(DEBUG_MSG_LVL_3)
			{
     		fn_userlog(c_ServiceName,"|Ord Ref :%s|Match Acc :%s|Span Flg :%c|BSE Span Flg :%c|c_svc_nm :%s|li_cnt :%ld| ", sltp_ordr_array[i_rowloop].c_ordr_ref,sltp_ordr_array[i_rowloop].c_cln_mtch_accnt,c_span_flag,c_bse_span_flag,c_svc_nm,li_cnt);
			}

			i_err[0]  = Fchg32(*ptr_fml_Sbuffer, FFO_SVC_NAME, 0, (char *)c_svc_nm, 0);	
		  i_ferr[0] = Ferror32;
	    i_err[1]  = Fchg32(*ptr_fml_Sbuffer, FFO_EBA_MTCH_ACT_NO, 0, (char *)sltp_ordr_array[i_rowloop].c_cln_mtch_accnt, 0);
	    i_ferr[1] = Ferror32;
	    i_err[2]  = Fchg32(*ptr_fml_Sbuffer, FFO_ORDR_RFRNC, 0, (char *)sltp_ordr_array[i_rowloop].c_ordr_ref, 0);
	    i_ferr[2] = Ferror32;
			i_err[3]  = Fchg32(*ptr_fml_Sbuffer, FFO_ORD_TOT_QTY, 0, (char *)&(sltp_ordr_array[i_rowloop].l_ord_qty), 0);
			i_ferr[3] = Ferror32;
	    i_err[4]  = Fchg32(*ptr_fml_Sbuffer, FFO_PIPE_ID, 0, (char *)sltp_ordr_array[i_rowloop].c_pipe_id, 0);
	    i_ferr[4] = Ferror32;
			i_err[5]  = Fchg32(*ptr_fml_Sbuffer, FFO_ORDR_FLW, 0, (char *)&(sltp_ordr_array[i_rowloop].c_trnsctn_flw), 0);
			i_ferr[5] = Ferror32;

	  	for(i_fml_loop = 0; i_fml_loop < 6 ; i_fml_loop++)
	  	{
	    	if(i_err[i_fml_loop] == -1)
	    	{
	      	fn_userlog(c_ServiceName,"The field number is %d", i_fml_loop);
	      	fn_errlog(c_ServiceName, "S31190", Fstrerror32(i_ferr[i_fml_loop]), c_err_msg);
	      	strcpy(c_msg, "Unable to add to buffer");
	      	fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);
	    		return -1;
	    	}
	  	}

	    i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                  c_err_msg,
                                  "sfr_bof_fimtm",
                                  li_cnt,
                                  i_rec_cnt );
			if ( i_ch_val == -1 )
			{
      	fn_userlog(c_ServiceName,"Error in fn_pre_prcs_rcrd");
				fn_errlog( c_ServiceName, "S31195", LIBMSG, c_err_msg );
				strcpy ( c_msg, "System error. Contact system support" );
				fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
				return -1;
			}

	    if( tpacall( "SFO_ORD_ROUT", (char*)(*ptr_fml_Sbuffer), 0, TPNOTRAN ) == -1 )
	    {
	      fn_errlog(c_ServiceName, "S31200", TPMSG, c_err_msg);
	      strcpy(c_msg, "Unable to read output paramters");
	      fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);
				return -1;
	    } 
		}	

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog( c_ServiceName,"Records Left :%d:", i_rec_cnt - i_bulk_cnt );
			fn_userlog ( c_ServiceName,"Inside Loop : Bulk cnt :%d: Rec Cnt :%d:", i_bulk_cnt, i_rec_cnt );
		}
	}	

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName,"Outside Loop : Bulk cnt :%d: Rec Cnt :%d:", i_bulk_cnt, i_rec_cnt );
	}

	return 0;
}

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_FO_SLTP_EOS;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}


int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
  return 0;
}
