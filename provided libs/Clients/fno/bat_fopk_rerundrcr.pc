/***************************************************************************************/
/*  Program           : BAT_FOPK_RERUNDRCR                                           */
/*                                                                                     */
/*  Description       : To Fetch data from Failure Table                         			 */
/*                                                                               		   */
/*  Input Parameters  : BAT_FOPK_RERUNDRCR NFO NFO NA <run date> < run no >          */
/*                                                                               		   */
/*  Change Log        : 1.0   15-Jul-2021 Abhinav Kumbhar | Infotech             			 */
/***************************************************************************************/
/*  1.0    -  New Release                                                        			 */
/***************************************************************************************/

#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <string.h>
#include <userlog.h>
#include <stdlib.h>
#include <fn_read_debug_lvl.h>
#include <fn_pos.h>
#include <sqlca.h>
#include <unistd.h>
#include <fml_rout.h>

int i;
#define INIT(x,y) for(i=0 ;i<y;i++)x[i] = 0

FBFR32 *ptr_fml_Ibuf;
int fn_get_failure_records(char *,char *,char *,char *,char *);

void BAT_FOPK_RERUNDRCR ( int argc, char *argv[] )
{
	long int li_tot_rcrds;
  int i_ch_val;
  long int li_cnt;
  long int li_run_no;
  long int li_blk_cd;
  char c_msg[256];
  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];
  char c_xchng_cd [ 4 ];
  char c_run_dt [ LEN_DATE ];
  char c_clm_mtch_accnt [ 11 ];
  char c_bnk_accnt_nmbr[21];
  char c_bill_no[50];
  char c_tm[ LEN_DATE ];
  char c_trace[12 + 1];
  char c_prdct_cd[4];
  char c_cmd[256];

  char c_trnsctn_typ;
  char c_eba_stts;
	char c_dc_flg;
  char c_bnk_stts;
  char c_stts='\0';
  char c_model_flag = '\0';
	char c_rqst_typ = 'B';

  double d_amt=0.0;
	double d_amt_from_alloc=0.0;
	double d_amt_from_bft=0.0;

	char c_narration[21];
  char c_program_nm[33];
  char c_xchng_cd_tmp[4];
  char c_match_id[11];
  char c_error_txt[256];
  char c_rpt_dt[12];
	char c_remark[20+1];

  MEMSET(c_program_nm);
  MEMSET(c_xchng_cd_tmp);
  MEMSET(c_match_id);
  MEMSET(c_error_txt);
	MEMSET(c_narration);
	MEMSET(c_remark);

	INIT(c_msg,256);
  INIT(c_ServiceName,33);
  INIT(c_err_msg,256);
  INIT(c_xchng_cd,4);
  INIT(c_run_dt,21);
  INIT(c_clm_mtch_accnt,11);
  INIT(c_bnk_accnt_nmbr,21);
  INIT(c_bill_no,50);
  INIT(c_tm,21);
  INIT(c_trace,13);
  INIT(c_prdct_cd,4);
  INIT(c_remark,21);

	strcpy ( c_ServiceName, argv[0] );
		
	INITBATDBGLVL(argv[0]);
		
	sprintf ( c_msg, "Batch process %s started", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	strcpy(c_program_nm,c_ServiceName);
  strcpy(c_xchng_cd_tmp,argv[2]);

  strcpy ( c_msg, "Processing data. Please wait ... " );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	if( argc < 5 )
  {
    fn_bat_pst_msg ( c_ServiceName, "Invalid Number of Arguments", c_tag );
    exit(0);
  }

  strcpy( c_xchng_cd, argv[2] );
  strcpy( c_run_dt, argv[4] );
  strcpy(c_rpt_dt,c_run_dt);
  li_run_no = atoi( argv[5] );
  strcpy( c_prdct_cd, "PK");

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName," Inputs passed are :%s %s %ld :",c_xchng_cd,c_run_dt,li_run_no);
	}

	i_ch_val =  fn_get_failure_records( c_ServiceName,
																			c_err_msg,
																			c_xchng_cd,
																			c_prdct_cd,
																			c_run_dt );
	if ( i_ch_val != 0 )
  {
   fn_errlog( c_ServiceName, "S31005", LIBMSG, c_err_msg);
   strcpy ( c_msg, "System error. Contact system support" );
   fn_bat_pst_msg ( c_ServiceName, "Failed in Fetching Position Data", c_tag );
   return;
  }			

		
	li_tot_rcrds = fn_reccnt_rs ( ptr_fml_Ibuf,
                                c_ServiceName,
                                c_err_msg,
                                FFO_EBA_MTCH_ACT_NO );
		
	if ( li_tot_rcrds == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", LIBMSG, c_err_msg );
    fn_dstry_rs ( ptr_fml_Ibuf );
    strcpy(c_error_txt,"System error. Contact System Support");
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
    return;
  }
		
	strcpy ( c_msg, "Data created." );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  sprintf ( c_msg, "Total records = %ld", li_tot_rcrds );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
	
	for ( li_cnt = 1; li_cnt <= li_tot_rcrds; li_cnt++ )
	{
	   i_ch_val = fn_getnxt_rs ( ptr_fml_Ibuf,
                              c_ServiceName,
                              c_err_msg,
                              21,
											 				FFO_XCHNG_CD, ( char * )c_xchng_cd,NULL,
                              FFO_EBA_MTCH_ACT_NO, ( char * )c_clm_mtch_accnt,NULL,
                              FFO_RUN_NUM, ( char * )&li_run_no,NULL,
                              FFO_TRD_DT, ( char * )c_run_dt,NULL,
                              FFO_BNK_ACT_NO, ( char * )c_bnk_accnt_nmbr,NULL,
                              FFO_BNK_TRN_TYP, ( char * )&c_trnsctn_typ,NULL,
                              FFO_BNK_BLK_CD, ( char * )&li_blk_cd,NULL,
                              FFO_DR_CR_FLG, ( char * )&c_dc_flg,NULL,
                              FFO_PI_PO_AMT, ( char * )&d_amt,NULL,
                              FFO_EBA_STTS, ( char * )&c_eba_stts,NULL,
                              FFO_BNK_STTS, ( char * )&c_bnk_stts ,NULL,
                              FML_SYSTEM_TRACE, ( char * )c_trace ,NULL,
                              FML_TM, ( char * )c_tm,NULL,
                              FFO_STATUS_FLG,( char * )&c_stts,NULL,
                              FFO_UPLD_MTCH_FLG, ( char * )&c_model_flag,NULL,
                              FFO_REMARKS, ( char * )c_remark,NULL,
                              FFO_ERR_MSG, ( char * )c_err_msg,NULL,
                              FFO_NARRATION_ID, ( char * )c_narration,NULL,
															FFO_BILL_NO,( char * )c_bill_no,NULL,
															FFO_PSTN_AMT_BLKD,( char * )&d_amt_from_alloc,NULL,
															FFO_ADDL_AMT_BLKD,( char * )&d_amt_from_bft,NULL
															 );
		
	  if ( i_ch_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31015", LIBMSG, c_err_msg);
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, "Failed in Processing Data", c_tag );
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
      fn_dstry_rs ( ptr_fml_Ibuf );
      return;
    }
	 
	 fn_userlog(c_ServiceName,"Bank Account no. after Fprint32 :[%s]",c_bnk_accnt_nmbr);
	 sprintf ( c_msg, "Processing record %ld of %ld", li_cnt, li_tot_rcrds );
   fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
	
	 i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                  c_err_msg,
                                  "sfr_adm_pipo",
                                  li_cnt,
                                  li_tot_rcrds );

        if ( i_ch_val == -1 )
    {
      fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_Ibuf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      strcpy(c_error_txt,"System error. Contact System Support");
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
      return;
    }
	 if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"*****  ST for ADM Data   *****");
      fn_userlog(c_ServiceName,"Exchange code    :[%s]",c_xchng_cd);
      fn_userlog(c_ServiceName,"Match account    :[%s]",c_clm_mtch_accnt);
      fn_userlog(c_ServiceName,"Run no.          :[%ld]",li_run_no);
      fn_userlog(c_ServiceName,"Run date         :[%s]",c_run_dt);
      fn_userlog(c_ServiceName,"Bank Account no. :[%s]",c_bnk_accnt_nmbr);
      fn_userlog(c_ServiceName,"Transaction Type :[%c]",c_trnsctn_typ);
      fn_userlog(c_ServiceName,"Block code       :[%ld]",li_blk_cd);
      fn_userlog(c_ServiceName,"Debit/Credit Flag:[%c]",c_dc_flg);
      fn_userlog(c_ServiceName,"PIPO Rerun Amount:[%lf]",d_amt);
      fn_userlog(c_ServiceName,"EBA status       :[%c]",c_eba_stts);
      fn_userlog(c_ServiceName,"Bank status      :[%c]",c_bnk_stts);
      fn_userlog(c_ServiceName,"System trace     :[%s]",c_trace);
      fn_userlog(c_ServiceName,"Placed time      :[%s]",c_tm);
      fn_userlog(c_ServiceName,"C_STTS           :[%c]",c_stts);
      fn_userlog(c_ServiceName,"C_MODEL_FLAG     :[%c]",c_model_flag);
      fn_userlog(c_ServiceName,"Remark           :[%s]",c_remark);
      fn_userlog(c_ServiceName,"Error msg        :[%s]",c_err_msg);
      fn_userlog(c_ServiceName,"Narration        :[%s]",c_narration);
      fn_userlog(c_ServiceName,"Bill No.         :[%s]",c_bill_no);
      fn_userlog(c_ServiceName,"*****  END for ADM Data  *****");
    }

    rtrim(c_bill_no);
		i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                  c_err_msg,
                                  "SFO_PK_RERUN",
                                  0,
                                  21,
																	FFO_XCHNG_CD, ( char * )c_xchng_cd,
	        	                      FFO_EBA_MTCH_ACT_NO, ( char * )c_clm_mtch_accnt,
  	        	                    FFO_RUN_NUM, ( char * )&li_run_no,
    	                          	FFO_TRD_DT, ( char * )c_run_dt,
      	      	                  FFO_BNK_ACT_NO, ( char * )c_bnk_accnt_nmbr,
        	      	                FFO_BNK_TRN_TYP, ( char * )&c_trnsctn_typ,
          	      	              FFO_BNK_BLK_CD, ( char * )&li_blk_cd,
            	      	            FFO_DR_CR_FLG, ( char * )&c_dc_flg,
          	          	          FFO_PI_PO_AMT, ( char * )&d_amt,
              		                FFO_EBA_STTS, ( char * )&c_eba_stts,
                  	    	        FFO_BNK_STTS, ( char * )&c_bnk_stts,
        	                	      FML_SYSTEM_TRACE, ( char * )c_trace,
                    	      	    FML_TM, ( char * )c_tm,
                      	      	  FFO_STATUS_FLG,( char * )&c_stts,
                        	      	FFO_UPLD_MTCH_FLG, ( char * )&c_model_flag,
                          		    FFO_REMARKS, ( char * )c_remark,
      	                    	    FFO_ERR_MSG, ( char * )c_err_msg,
                            		  FFO_NARRATION_ID, ( char * )c_narration,
                              		FFO_BILL_NO, ( char * )c_bill_no,
                            		  FFO_PSTN_AMT_BLKD,( char * )&d_amt_from_alloc,
                              		FFO_ADDL_AMT_BLKD,( char * )&d_amt_from_bft );
		
		if ( i_ch_val == -1 )
    {
      fn_errlog( c_ServiceName, "S31025", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_Ibuf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      strcpy(c_error_txt,"System error. Contact System Support");
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
      return;
    }
	
	}/** End Of For Loop **/
	fn_dstry_rs ( ptr_fml_Ibuf );
		
	MEMSET(c_cmd);
  sprintf(c_cmd,"ksh %s/sh_scripts/sfo_fopk_rpt_mlr_rerun.sh %s ",tuxgetenv("HOME"),c_run_dt);
  if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog( c_ServiceName, "sfo_fopk_rpt_mlr_rerun.sh  report mailer run command :%s:",c_cmd);
  }

  system(c_cmd);	

	return;
}

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_FOPK_RERUNDRCR;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}

int fn_get_failure_records(char *c_ServiceName,char *c_err_msg,char *c_xchng_cd,char *c_prdct_cd, char *c_run_dt)
{
	int i_returncode;
	
	EXEC SQL BEGIN DECLARE SECTION;
    char sql_clm_mtch_accnt [ 11 ];
    char sql_xchng_cd [ 4 ];
    long int sql_run_no;
    char sql_run_dt [ LEN_DATE ];
    char sql_bnk_accnt_nmbr [ 21 ];
    char sql_trnsctn_typ;
    char sql_dc_flg;
    char sql_eba_stts;
    char sql_stts;
		char sql_err_msg[ 4 ];
    char sql_timestamp[ 21 ];
    char sql_trace[ 21 ];
    char sql_bnk_stts;
    char sql_model_flag='\0';
    char sql_remark[ 20+1 ];
    char sql_narration[ 20+1 ];
    char sql_bill_no[50];
		int sql_blk_cd;
    double  sql_amt;
		double sql_amt_from_alloc;
		double sql_amt_from_bft;
  EXEC SQL END DECLARE SECTION;

  rtrim(c_prdct_cd);
  
	if (DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "Excahnge code :%s:", c_xchng_cd );
    fn_userlog( c_ServiceName, "Prdct Code11    :%s:",c_prdct_cd);
		fn_userlog(c_ServiceName, "c_run_dt :%s:",c_run_dt);
  }
	
	ptr_fml_Ibuf = NULL;
	
	EXEC SQL
      DECLARE cur_rerun_fet CURSOR FOR
      SELECT  PBM_XCHNG_CD,
              PBM_CLM_MTCH_ACCNT,
              PBM_RUN_NO,
              PBM_RUN_DT,
              PBM_BNK_ACCNT_NMBR,
              PBM_TRNSCTN_TYP,
              NVL(PBM_BLK_CD,0),
              NVL(PBM_DC_FLG,' '),
              PBM_AMT,
              NVL(PBM_STTS,' '),
              NVL(PBM_EBA_STTS,' '),
              NVL(PBM_BNK_STTS,' '),
              NVL(PBM_TRACE,' '),
              NVL(to_char(PBM_TIMESTAMP,'yyyymmddhh24miss'),' '),
              NVL(PBM_ERR_CD,' '),
              NVL(PBM_RMRKS,' '),
              NVL(PBM_NARRATION,' '),
              NVL(PBM_FUND_MODEL_FLG,'N'),
							NVL(PBM_BILL_NO,' '),
              NVL(PBM_AMT_DBFRM_ALLOC,0),
              NVL(PBM_AMT_DBFRM_BFT,0)
      FROM    PBM_PFO_BNK_FLR_MSG,clb_bnk_accts
      WHERE   PBM_CLM_MTCH_ACCNT = clb_clm_mtch_accnt
      AND     PBM_XCHNG_CD = :c_xchng_cd
      AND     PBM_STTS    =  'N'
      AND     trunc(PBM_RUN_DT) = :c_run_dt
      AND     PBM_PRDCT_CD = :c_prdct_cd;
    
    EXEC SQL
      OPEN cur_rerun_fet;
	
		while(1)
    {
      EXEC SQL
        FETCH cur_rerun_fet
        INTO  :sql_xchng_cd,
              :sql_clm_mtch_accnt,
              :sql_run_no,
              :sql_run_dt,
              :sql_bnk_accnt_nmbr,
              :sql_trnsctn_typ,
              :sql_blk_cd,
              :sql_dc_flg,
              :sql_amt,
              :sql_stts,
              :sql_eba_stts,
              :sql_bnk_stts,
              :sql_trace,
              :sql_timestamp,
							:sql_err_msg,
							:sql_remark,
							:sql_narration,
              :sql_model_flag,
 							:sql_bill_no,
							:sql_amt_from_alloc,
							:sql_amt_from_bft	;
       
				if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
        {
          fn_errlog( c_ServiceName, "S31030", SQLMSG, c_err_msg );
          EXEC SQL CLOSE cur_rerun_fet;
          return -1; 
        }
        
				if( SQLCODE == NO_DATA_FOUND )
        {
          break;
        }
			
      rtrim(sql_xchng_cd);
      rtrim(sql_trace);
      rtrim(sql_timestamp);
      rtrim(sql_clm_mtch_accnt);
      rtrim(sql_run_dt);
      rtrim(sql_bnk_accnt_nmbr);
      rtrim(sql_remark);	
			rtrim(sql_narration);
			rtrim(sql_err_msg);
      fn_userlog(c_ServiceName,"Match account    :[%s]",sql_clm_mtch_accnt);
/*********	
		
			fn_userlog(c_ServiceName,"***** FETCH for PK Data   *****");
      fn_userlog(c_ServiceName,"Exchange code    :[%s]",sql_c_xchng_cd);
      fn_userlog(c_ServiceName,"Match account    :[%s]",sql_c_clm_mtch_accnt);
      fn_userlog(c_ServiceName,"Run no.          :[%ld]",sql_li_run_no);
      fn_userlog(c_ServiceName,"Run date         :[%s]",sql_c_run_dt);
      fn_userlog(c_ServiceName,"Bank Account no. :[%s]",sql_c_bnk_accnt_nmbr.arr);
      fn_userlog(c_ServiceName,"Transaction Type :[%c]",sql_c_trnsctn_typ);
      fn_userlog(c_ServiceName,"Block code       :[%ld]",sql_li_blk_cd);
      fn_userlog(c_ServiceName,"Debit/Credit Flag:[%c]",sql_c_dc_flg);
      fn_userlog(c_ServiceName,"PIPO Rerun Amount:[%lf]",sql_d_amt);
      fn_userlog(c_ServiceName,"EBA status       :[%c]",sql_c_eba_stts);
      fn_userlog(c_ServiceName,"Bank status      :[%c]",sql_c_bnk_stts);
      fn_userlog(c_ServiceName,"System trace     :[%s]",sql_c_trace);
      fn_userlog(c_ServiceName,"Placed time      :[%s]",sql_c_tm);
      fn_userlog(c_ServiceName,"C_STTS           :[%c]",sql_c_stts);
      fn_userlog(c_ServiceName,"C_MODEL_FLAG     :[%c]",sql_c_model_flag);
      fn_userlog(c_ServiceName,"Remark           :[%s]",sql_c_remark.arr);
      fn_userlog(c_ServiceName,"Error msg        :[%s]",sql_c_err_msg);
      fn_userlog(c_ServiceName,"Narration        :[%s]",sql_c_narration.arr);
      fn_userlog(c_ServiceName,"Bill No.         :[%s]",sql_c_bill_no.arr);
      fn_userlog(c_ServiceName,"*****  END for PK Data  *****");
	*********/
      rtrim(sql_bill_no);

			i_returncode = fn_pack_vartofml( c_ServiceName,
                                       c_err_msg,
                                       &ptr_fml_Ibuf,
                                       21,
                             FFO_XCHNG_CD, ( char * )sql_xchng_cd,
                             FFO_EBA_MTCH_ACT_NO, ( char * )sql_clm_mtch_accnt,
                             FFO_RUN_NUM, ( char * )&sql_run_no,
                             FFO_TRD_DT, ( char * )sql_run_dt,
                             FFO_BNK_ACT_NO, ( char * )sql_bnk_accnt_nmbr,
                             FFO_BNK_TRN_TYP, ( char * )&sql_trnsctn_typ,
                             FFO_BNK_BLK_CD, ( char * )&sql_blk_cd,
                             FFO_DR_CR_FLG, ( char * )&sql_dc_flg,
                             FFO_PI_PO_AMT, ( char * )&sql_amt,
                             FFO_EBA_STTS, ( char * )&sql_eba_stts,
                             FFO_BNK_STTS, ( char * )&sql_bnk_stts ,
                             FML_SYSTEM_TRACE, ( char * )sql_trace ,
                             FML_TM, ( char * )sql_timestamp,
                             FFO_STATUS_FLG,( char * )&sql_stts,
                             FFO_UPLD_MTCH_FLG, ( char * )&sql_model_flag,
                             FFO_REMARKS, ( char * )sql_remark,
														 FFO_ERR_MSG, ( char * )sql_err_msg,
														 FFO_NARRATION_ID, ( char * )sql_narration,
                             FFO_BILL_NO,(char *)sql_bill_no,
                             FFO_PSTN_AMT_BLKD,( char * )&sql_amt_from_alloc,
                             FFO_ADDL_AMT_BLKD,( char * )&sql_amt_from_bft );

        if( i_returncode == -1 )
        {
          fn_errlog( c_ServiceName, "S31035", LIBMSG, c_err_msg );
          EXEC SQL
            CLOSE cur_rerun_fet;
         return -1; 
        }
		}

		EXEC SQL
      CLOSE cur_rerun_fet;

	return 0;
}
