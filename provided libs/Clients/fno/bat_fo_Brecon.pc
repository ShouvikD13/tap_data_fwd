/********************************************************************************************/
/*	Program									: BAT_FO_BRECON																									*/
/*																																													*/
/*  Input										: <Exchange Code><c_pipe_id>																		*/
/*																																													*/
/*  Output									:																																*/
/*																																													*/
/*  Description             : Reconciliation client program to process certain							*/
/*														unprocessed/unsent responses from exchange during						  */ 
/*												    download process.																						  */
/*																																													*/
/********************************************************************************************/
/*	Ver 1.0		New Realease																																	*/
/*  Ver 1.1 - 15-Oct-2012 -  FNO BSE SPAN Changes [Sachin Birje]                            */
/*  Ver 1.2 - 08-Feb-2013 -  SPAN FuturePLUS handling. (Navina D.)                          */
/********************************************************************************************/

/**** C header ****/
#include <stdio.h>
#include <errno.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

/* Tuxedo Header file */
#include <atmi.h>
#include <userlog.h>
#include <fn_tuxlib.h>

/**** Application header ****/
#include <env.h>
#include <fml_def.h>
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>

#include <fml32.h>
#include <fo.h>
#include <sqlca.h>    
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_log.h>
#include <fn_battmpt.h>
#include <fn_session.h>
#include <fn_fo_bse_convrtn.h>
#include <fo_bse_rcv_lib.h>
/* #include <fo_bse_spn_rcv_lib.h> */
#include <fn_span_lib.h>
#define INIT(x,y) for(i=0 ;i<y;i++)x[i] = 0
#define TOTAL_FML   18
#include <fo_bse_spn_rcv_lib.h>        /*** Ver 1.1 ***/

EXEC SQL INCLUDE  "table/fxd_fo_xchng_dwnld.h";
EXEC SQL INCLUDE  "table/fxd_fo_xchng_trd_dwnld.h";

int fn_bseseq_to_omd( struct st_xchngbook *ptr_st_xchngbook,
                      char *c_ServiceName,
                      char *c_err_msg
                    );

/** Added for NORMAL starts **/

int fn_Bseq_to_omd	(	struct vw_xchngbook *ptr_st_xchngbook,
                  		char *c_ServiceName,
                  		char *c_err_msg
										);

int fn_Bupd_xchngbk	( struct vw_xchngbook *ptr_st_xchngbook,
                    	char *c_ServiceName,
                    	char *c_err_msg
										);
int fn_Bref_to_ord	(	struct vw_orderbook *ptr_st_orderbook,
                  		char *c_ServiceName,
                  		char *c_err_msg
										);
int fn_Bupd_ordrbk	(	struct vw_orderbook *ptr_st_orderbook,
                  		char *c_ServiceName,
                  		char *c_err_msg
										);

/** Added for NORMAL Ends **/

/*
int fn_bref_to_ord	( struct st_orderbook *ptr_st_orderbook,
                    	char *c_ServiceName,
                    	char *c_err_msg
                  	);
*/


int fn_upd_bxchngbk	( struct st_xchngbook *ptr_st_xchngbook,
                    	char *c_ServiceName,
                    	char *c_err_msg
										);

int fn_upd_bordrbk	(	struct st_orderbook *ptr_st_orderbook,
                  		char *c_ServiceName,
                  		char *c_err_msg
										);

int i;

/* Global variables */
char c_pipe_id [ 3 ];

/*** i_exch_reject_status = 9999;  States that request is rejected from Exchange End ****/

void BAT_FO_BRECON ( int argc, char *argv[] )
{ /** Main fn starts **/


  char c_op_typ;
	char c_xchng_cd[4];
	char c_command[40];
	char c_err_msg[256];
	char c_exg_trd_dt[12];
	char c_ServiceName[30];
	char c_rout_str [ 4 ];
	char c_fxb_rqst_typ = '\0'; 
	char c_fxb_lmt_mrkt_sl_flg = '\0';	
	char c_fxb_ordr_type = '\0';
	char c_fxb_plcd_stts = '\0';
	char c_fxb_rms_prcsd_flg = '\0';
	char c_fxb_prcs_flg = '\0';
	char c_fod_lmt_mrkt_sl_flg ='\0';
	char c_fod_ordr_type = '\0';
	char c_fod_ordr_flw = '\0';
	char c_fod_ordr_stts = '\0';
	char c_cancel_acpt_flg;
	char c_part_cancel_flg = '\0';
	char c_mod_acpt_flg = '\0';
	char c_skpord_ref[10 + 1] ;
	char c_msg[256];

	int i_ret_val = 0;
	int i_counter = 0;
	int i_prcsd_cnt = 0;
	int i_lm_prcsd_cnt = 0;
	int i_yyyy = 0;
	int i_dd = 0;   
	int i_mm = 0;   
	int i_hh = 0; 
	int i_mi = 0;   
	int i_ss = 0;    

	varchar c_fxb_ordr_rfrnc[25];
	long l_fxb_ordr_tot_qty = 0;
	long l_fxb_mdfctn_cntr = 0;
	long l_fxb_ordr_sqnc= 0;    
	long l_fxb_ors_msg_typ = 0; 

	varchar c_fod_ordr_rfrnc[25];    
	long l_fod_ordr_tot_qty = 0; 
	long l_fod_exec_qty = 0;     
	long l_fod_cncl_qty = 0;     
	varchar c_fod_ack_nmbr[25];     

	int i_ord_dwld_cnt = 0;
	int i_exch_reject_status =0;
	long l_fxd_exctd_qty = 0;

	varchar c_trd_dt [ 20 + 1 ];
	int i_dwnld_flg ;

	int i_ch_val;
	int i_err[ TOTAL_FML ];
	int i_ferr[ TOTAL_FML ];
	long int li_cnt;

	FBFR32 *ptr_fml_Rbuf;
	FBFR32 *ptr_fml_Sbuf;
	FBFR32 *ptr_fml_Ibuf;
	long    l_recv_buff_len=0;

	MEMSET( c_err_msg );
	MEMSET( c_pipe_id );
	MEMSET( c_xchng_cd );
	MEMSET( c_ServiceName );

	varchar c_lm_fod_ack_nmbr[16] ;    
	varchar c_lm_fod_ordr_rfrnc[25] ;           
	varchar c_lm_fxd_xchng_ack[25]; 
	varchar c_lm_fod_clm_mtch_accnt[15];       
	char c_lm_fod_lmt_mrkt_sl_flg;
	char c_lm_fxd_ord_typ;
	char c_ord_trd_limit_flg = '\0';
	char c_fxd_ord_prcs_flg =  '\0';
	long l_lm_fxd_lmt_rt =0;
	long l_fod_lmt_rt = 0;
	varchar c_fxb_mod_trd_dt[25];
	varchar c_fxb_ack_tm[25];
	varchar c_fod_ord_ack_tm[25];
	int i_trnsctn = 0;
	double d_fxb_jiffy =0;
	long l_fxb_xchng_cncld_qty = 0;
	long l_fxd_ord_seq = 0;

	char c_spn_flg;			    /*** Added for BSE_NORMAL/SPAN Change ***/
	char c_mod_trd_dt[23];  /*** Added for BSE_NORMAL/SPAN Change ***/
	long l_ordr_sqnc = 0;   /*** Added for BSE_NORMAL/SPAN Change ***/
	char c_svc_name[15+1];  /*** Added for BSE_NORMAL/SPAN Change ***/

	struct st_ord_rqst_rply st_ord_rqst_rply_data; /** For Normal order **/
	struct st_kill_min_fill_ordr st_kill_min_fill_ordr_data; /** For Cancellation Order **/
	struct st_stoploss_ord_rply st_stoploss_ord_rply_data; /** For SLTP Order **/
	struct st_tradebook st_i_trdbk; /** For Trade confirmation - In Modification-QUEUED state**/

	/* struct st_orderbook st_i_ordbk; */  /*** Commented for BSE_SPAN Change ***/
	struct vw_orderbook st_i_ordbk;

	/*struct st_xchngbook st_i_xchngbk; */  /*** Commented for BSE_SPAN Change ***/
	struct vw_xchngbook st_i_xchngbk;
  
	strcpy ( c_ServiceName, argv[0] );

	if ( argc != 4  )
	{
		fn_userlog(c_ServiceName,"Invalid Argument-USAGE-bat_fo_Brecon <Exg Code><Exg Code><Pipe id><cancel-flag(optional) >");
		return;
	}

	strcpy ( c_xchng_cd , argv[1] );
	strcpy ( c_pipe_id, argv[3] );
	strcpy ( c_ServiceName, argv[0] );

	if(c_pipe_id[0] == 'A')
	{
	  c_rout_str[0] = c_pipe_id[1];
  	c_rout_str[1] = c_pipe_id[1];
  	c_rout_str[2] = c_pipe_id[1];
  	c_rout_str[3] = '\0';
	}
	else
	{
	  strcpy(c_rout_str,"000");
	}
	fn_userlog(c_ServiceName ,"Routing set to-<%s>",c_rout_str);

	strcpy(c_skpord_ref , "1234567891");
	i_dwnld_flg = DOWNLOAD;

	INITBATDBGLVL(c_ServiceName);

	sprintf ( c_msg, "Batch process <%s> started", argv[0] );

	c_op_typ = QUEUED;
	fn_userlog(c_ServiceName ,"BSE Reco started for pipe<%s> ", c_pipe_id );

	EXEC SQL
			 SELECT to_char ( EXG_NXT_TRD_DT, 'dd-mon-yyyy' )
			 into 	:c_trd_dt
			 FROM 	EXG_XCHNG_MSTR
			 WHERE 	EXG_XCHNG_CD = :c_xchng_cd;

	if ( SQLCODE != 0 )
	{
		fn_errlog(c_ServiceName,"S31005", SQLMSG, c_err_msg);
		fn_userlog(c_ServiceName,"Error- In selecting exchng date-SQLCODE<%ld>", SQLCODE);
		tpterm();
		return;
	}

	SETNULL(c_trd_dt);

	ptr_fml_Sbuf =(FBFR32 *)tpalloc("FML32", NULL, MIN_FML_BUF_LEN);
	if ( ptr_fml_Sbuf == NULL )
	{
		fn_errlog(c_ServiceName,  "S31010", c_err_msg, c_err_msg  );
		fn_userlog(c_ServiceName,"Error- In ptr_fml_Sbuf");
		return;
	}

	ptr_fml_Rbuf =(FBFR32 *)tpalloc("FML32", NULL, MIN_FML_BUF_LEN);
	if ( ptr_fml_Sbuf == NULL )
	{
		fn_errlog(c_ServiceName,  "S31015", c_err_msg, c_err_msg  );
		fn_userlog(c_ServiceName,"Error- In ptr_fml_Rbuf");
		return;
	}

	/********************************************************************************************************
	*** Logic for Market to Limit conversion Starts ****
	** Select data from Order book/Trade Book/Download tables for Change in Limit-Market flag **
	********************************************************************************************************/

  i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );

  if ( i_trnsctn ==  -1 )
  {
    fn_errlog(c_ServiceName,"L31055", LIBMSG, c_err_msg);
    fn_userlog ( c_ServiceName, "Error - in begin tran--1 --lmt-mkt- TEMP " );
    return ;
  }


  EXEC SQL 
		DELETE FROM FXD_FOD_LM_BTMP
		WHERE FXD_FOD_PIPE_ID = :c_pipe_id ; /** Added on 07-Mar-2012 -POST UAT **/

  if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
  {
		 fn_errlog ( c_ServiceName, "S31020", SQLMSG, c_err_msg  );
		 fn_userlog(c_ServiceName ,"Error in deleting from FXD_FOD_LM_BTMP <%ld>", SQLCODE );
		 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		 tpterm();
		 return ;
  }

	
	EXEC SQL
	  INSERT INTO FXD_FOD_LM_BTMP 
			(FXD_FOD_XCHNG_CD,
			 FXD_FOD_PIPE_ID,
			 FOD_ACK_NMBR, 
			 FOD_ORDR_RFRNC,
			 FXD_XCHNG_ACK,
			 FOD_CLM_MTCH_ACCNT,
			 FOD_LMT_MRKT_SL_FLG,
			 FXD_ORD_TYP,
			 FXD_SEQ_NO,
			 FXD_LMT_RT,
			 FXD_ORD_TRD_FLG,
			 FXD_ORD_PRCS_FLG
      )
			(
			 SELECT  	distinct FOD_XCHNG_CD EXG_CD, /** Added on 07-Mar-2012 -POST UAT **/
								FOD_PIPE_ID PIPE_ID, /** Added on 07-Mar-2012 -POST UAT **/
							  nvl(trim(FOD_ACK_NMBR),'*') ORD_ACK, 
								nvl(FOD_ORDR_RFRNC,'*') ORD_REF, 
							  nvl(to_char(OD.FXD_XCHNG_ACK),'0') DW_ACK, 
								nvl(FOD_CLM_MTCH_ACCNT,'*') MTCH_ID, 
								nvl(FOD_LMT_MRKT_SL_FLG,'*') ORD_LIMIT_FLG, 
								nvl(OD.FXD_ORD_TYP,'*') DW_LIMIT_FLG,
								nvl(OD.FXD_SEQ_NO,'0') DW_SEQ_NO,
								nvl(OD.FXD_LMT_RT,'0') DW_LIMIT_RT,
								'O',
								'N'
			 FROM FXD_FO_XCHNG_DWNLD OD, 
			      FOD_FO_ORDR_DTLS 
			 WHERE OD.FXD_PIPE_ID = :c_pipe_id      /** Added on 07-Mar-2012 -POST UAT **/
			 AND   OD.FXD_PIPE_ID = FOD_PIPE_ID   /** Added on 07-Mar-2012 -POST UAT **/
			 AND   trim(FOD_ACK_NMBR) =  trim(OD.FXD_XCHNG_ACK) 
			 AND 	 OD.FXD_ORD_TYP != 'P'
			 AND 	 OD.FXD_ORD_TYP != 'C'
			 AND   FOD_LMT_MRKT_SL_FLG != decode(OD.FXD_ORD_TYP,'G','M','L','L',OD.FXD_ORD_TYP) 
			 UNION
			 SELECT distinct FOD_XCHNG_CD EXG_CD, /** Added on 07-Mar-2012 -POST UAT **/ 
							FOD_PIPE_ID PIPE_ID, /** Added on 07-Mar-2012 -POST UAT **/
							nvl(trim(FOD_ACK_NMBR),'*') ORD_ACK, 
							nvl(FOD_ORDR_RFRNC,'*') ORD_REF, 
							nvl(to_char(TD.FXD_ORD_ACK),'0') DW_ACK,
							nvl(FOD_CLM_MTCH_ACCNT,'*') MTCH_ID, 
							nvl(FOD_LMT_MRKT_SL_FLG,'*') ORD_LIMIT_FLG, 
							nvl(TD.FXD_ORD_TYP,'*') DW_LIMIT_FLG,
							nvl(TD.FXD_ORD_SEQ,'0') DW_SEQ_NO,
							nvl(TD.FXD_EXCTD_RT,'0') DW_LIMIT_RT,
						 'T',
						 'N'
			 FROM FXD_FO_XCHNG_TRD_DWNLD TD, FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS 
			 WHERE TD.FXD_PIPE_ID = :c_pipe_id        /** Added on 07-Mar-2012 -POST UAT **/
			 AND   trim(FOD_ACK_NMBR) =  trim(TD.FXD_ORD_ACK) 
			 AND   to_number(FTD_ORD_ACK_NMBR) = to_number(TD.FXD_ORD_ACK) 
			 AND 	 FTD_XCHNG_TRD_NO = TD.FXD_TRD_NO
			 AND 	 TD.FXD_ORD_TYP != 'P'
			 AND 	 TD.FXD_ORD_TYP != 'C'
			 AND FOD_LMT_MRKT_SL_FLG != decode(TD.FXD_ORD_TYP,'G','M','L','L',TD.FXD_ORD_TYP)
			);

			/*AND TD.FXD_TRD_NO = (SELECT max(FXD_TRD_NO) 
					     FROM FXD_FO_XCHNG_TRD_DWNLD 
					     WHERE trim(TD.FXD_ORD_ACK) = trim(:c_lm_fxd_xchng_ack)
					     AND FXD_ORD_SEQ = :l_fxd_ord_seq)*/			

			/** Added filter for excluding IOC & SLTP orders (FXD_ORD_TYP != 'P' & != 'S' )for LMT-MKT mismatch -23-Dec-2011 **/



  i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);
  if ( i_ch_val == -1 )
  {
    fn_errlog(c_ServiceName,"L31065", LIBMSG, c_err_msg);
    fn_userlog ( c_ServiceName, "Error - in commit tran--mmlt-mkt -FXD_FOD_LM_BTMP table " );
    return ;
  }

	
	/****************************************************************************************************/
	/** Loop Starts to process each record from -LIMIT_MARKET mismatch **/
	/****************************************************************************************************/
	fn_userlog(c_ServiceName ,"FNO-BSE Reco Processing for orders with MKT_LMT mismatch for pipe - :%s:", c_pipe_id );

	while ( 1 )
	{ /* Start for while loop for -LMT_MKT mismatch processing */
		MEMSET( c_lm_fod_ack_nmbr );
		MEMSET( c_lm_fod_ordr_rfrnc );
		MEMSET( c_lm_fxd_xchng_ack );
		MEMSET( c_lm_fod_clm_mtch_accnt );

	  fn_userlog(c_ServiceName ,"In  While ---1 " );

		EXEC SQL 
		  SELECT FOD_ACK_NMBR, 
		         FOD_ORDR_RFRNC,
			 			 FXD_XCHNG_ACK,
			 			 FOD_CLM_MTCH_ACCNT,
			 		   FOD_LMT_MRKT_SL_FLG,
			 			 FXD_ORD_TYP,
			 			 FXD_SEQ_NO,
			 			 FXD_LMT_RT,
						 FXD_ORD_TRD_FLG,
						 FXD_ORD_PRCS_FLG
      INTO  :c_lm_fod_ack_nmbr ,    
						:c_lm_fod_ordr_rfrnc ,           
						:c_lm_fxd_xchng_ack , 
						:c_lm_fod_clm_mtch_accnt,       
						:c_lm_fod_lmt_mrkt_sl_flg,
						:c_lm_fxd_ord_typ,
						:l_fxd_ord_seq,
						:l_lm_fxd_lmt_rt,
						:c_ord_trd_limit_flg,
						:c_fxd_ord_prcs_flg
                    FROM FXD_FOD_LM_BTMP
	    WHERE FXD_ORD_PRCS_FLG = 'N'
	    AND FXD_FOD_XCHNG_CD = :c_xchng_cd
	    AND FXD_FOD_PIPE_ID = :c_pipe_id
		  AND ROWNUM =1;

		  if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
		  {
			 fn_errlog ( c_ServiceName, "S31025", SQLMSG, c_err_msg  );
			 fn_userlog(c_ServiceName ,"Error in select from lmt-tmp table <%ld>", SQLCODE );
			 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			 tpterm();
			 return ;
		  }

		  if ( SQLCODE != 0 )
			{
	  		if(SQLCODE == NO_DATA_FOUND )
	  		{
        
					if(i_lm_prcsd_cnt>0)
					{	 
   		  	 fn_userlog (c_ServiceName,"Reached end of records for lmt-mkt mismatch case - ");		
		  		 break; 
					}
					else
					{	
					 fn_userlog(c_ServiceName,"*************************************************************************");
					 fn_userlog(c_ServiceName,"No data to process - LMT_MKT -mismatch- ---1");
					 fn_userlog(c_ServiceName,"*************************************************************************");
					 break;
				  }

		 		}
	   	  else
	   	  {
				  fn_errlog(c_ServiceName, "S31030",  SQLMSG, c_err_msg);
				  fn_userlog(c_ServiceName,"Error- in initial selection- lmt-mkt -- ");
					tpterm();
					return;
	      }
	    }

			SETLEN( c_lm_fod_ack_nmbr );
	    SETLEN( c_lm_fod_ordr_rfrnc );
		  SETLEN( c_lm_fxd_xchng_ack );
		  SETLEN( c_lm_fod_clm_mtch_accnt );

			SETNULL (c_lm_fod_ack_nmbr);       
			SETNULL (c_lm_fod_ordr_rfrnc);
			SETNULL (c_lm_fxd_xchng_ack);     
			SETNULL (c_lm_fod_clm_mtch_accnt);

			if(DEBUG_MSG_LVL_3)
			{
			fn_userlog(c_ServiceName,"Val of Record no in Limit_MKT Mismatch-processing <%d>", i_lm_prcsd_cnt +1);
			fn_userlog(c_ServiceName,"Val of c_lm_fod_ack_nmbr  in Limit_MKT Mismatch-processing <%s>",c_lm_fod_ack_nmbr.arr );
			fn_userlog(c_ServiceName,"Val of c_lm_fod_ordr_rfrnc  in Limit_MKT Mismatch-processing <%s>", c_lm_fod_ordr_rfrnc.arr);
			fn_userlog(c_ServiceName,"Val of c_lm_fxd_xchng_ack in Limit_MKT Mismatch-processing <%s>", c_lm_fxd_xchng_ack.arr);
			fn_userlog(c_ServiceName,"Val of c_lm_fod_clm_mtch_accnt in Limit_MKT Mismatch-processing <%s>", c_lm_fod_clm_mtch_accnt.arr);
			fn_userlog(c_ServiceName,"Val of c_lm_fod_lmt_mrkt_sl_flg Limit_MKT Mismatch-processing <%c>",c_lm_fod_lmt_mrkt_sl_flg );
			fn_userlog(c_ServiceName,"Val of c_lm_fxd_ord_typ in Limit_MKT Mismatch-processing <%c>", c_lm_fxd_ord_typ);
			fn_userlog(c_ServiceName,"Val of l_fxd_ord_seq in Limit_MKT Mismatch-processing <%ld>", l_fxd_ord_seq);
			fn_userlog(c_ServiceName,"Val of l_lm_fxd_lmt_rt in Limit_MKT Mismatch-processing <%ld>", l_lm_fxd_lmt_rt);
			fn_userlog(c_ServiceName,"Val of c_ord_trd_limit_flg in Limit_MKT Mismatch-processing <%c>", c_ord_trd_limit_flg);
			fn_userlog(c_ServiceName,"Val of c_fxd_ord_prcs_flg in Limit_MKT Mismatch-processing <%c>", c_fxd_ord_prcs_flg);
			}

			MEMSET(st_i_xchngbk);
			MEMSET(st_i_ordbk);

			strcpy ( st_i_xchngbk.c_xchng_cd, c_xchng_cd );
			strcpy ( st_i_xchngbk.c_pipe_id, c_pipe_id );
			strcpy(st_i_xchngbk.c_mod_trd_dt,c_trd_dt.arr);
			st_i_xchngbk.l_ord_seq = l_fxd_ord_seq;
		  if(DEBUG_MSG_LVL_3)
		  {
		    fn_userlog(c_ServiceName,"Sequence Number of exch-Is :%ld:",st_i_xchngbk.l_ord_seq);
		  }

		  st_i_xchngbk.c_oprn_typ = FOR_RCV;

		  i_ch_val = fn_Bseq_to_omd ( &st_i_xchngbk,
											  					c_ServiceName,
																  c_err_msg
					      								);

		  if ( i_ch_val != 0 )
		  {
		    fn_errlog(c_ServiceName,"L31010", LIBMSG, c_err_msg);
		    fn_userlog(c_ServiceName,"Error in call -fn_Bseq_to_omd ");
		    return;
		  }
		  fn_userlog(c_ServiceName,"After -fn_Bseq_to_omd ");


		  strcpy(st_i_ordbk.c_ordr_rfrnc,st_i_xchngbk.c_ordr_rfrnc);

			if(DEBUG_MSG_LVL_3)
			{
			 fn_userlog(c_ServiceName,"Order Reference to process Is :%s:",st_i_ordbk.c_ordr_rfrnc);
			}

		  strcpy(st_i_ordbk.c_rout_crt,c_rout_str);

		  if(DEBUG_MSG_LVL_3)
		  {
		    fn_userlog(c_ServiceName, "Before Call To fn_Bref_to_ord");
		  }

		  st_i_ordbk.c_oprn_typ = FOR_VIEW;

		  /** Updated fn_bref_to_ord to fn_Bref_to_ord for BSE- SPAN/NORMAL change **/
		  i_ch_val = fn_Bref_to_ord ( &st_i_ordbk,
														      c_ServiceName,
					     									  c_err_msg
					    									);

		  if ( i_ch_val != 0)
		  {
		    fn_errlog(c_ServiceName,"L36715", LIBMSG, c_err_msg);
		    fn_userlog(c_ServiceName, "Error in call- SFO_REF_TO_ORD ");
		    return ;
		  }

			strcpy ( st_i_xchngbk.c_ordr_rfrnc, c_lm_fod_ordr_rfrnc.arr );
			strcpy ( st_i_xchngbk.c_xchng_cd, c_xchng_cd );
			strcpy ( st_i_xchngbk.c_pipe_id, c_pipe_id );
			strcpy (st_i_xchngbk.c_valid_dt,st_i_xchngbk.c_mod_trd_dt);
		
			st_i_xchngbk.l_mdfctn_cntr 		= st_i_xchngbk.l_mdfctn_cntr + 1; /** Changed for 0 to +1 for modification issue:  **/
			st_i_xchngbk.c_plcd_stts 	        = ACCEPT;

			if (c_ord_trd_limit_flg == 'O')
			{ 
		  	st_i_xchngbk.c_rms_prcsd_flg	= NOT_PROCESSED;
			}
			if (c_ord_trd_limit_flg == 'T')
			{
		 		st_i_xchngbk.c_rms_prcsd_flg	= PROCESSED;
			}

			st_i_xchngbk.l_ors_msg_typ	= ORS_MOD_ORD_ACPT;
			st_i_xchngbk.l_ord_seq 		= 0; /*l_fxb_ordr_sqnc*/ /** changed to 0 against issue of already processed - 15-Dec-2011**/
			st_i_xchngbk.l_ord_tot_qty    = st_i_ordbk.l_ord_tot_qty; /*l_fxb_ordr_tot_qty */
		
			st_i_xchngbk.l_ord_lmt_rt   	= l_lm_fxd_lmt_rt;
			st_i_xchngbk.l_bit_flg        = 0;
			st_i_xchngbk.c_slm_flg        = 'L';
			st_i_ordbk.l_ord_lmt_rt      = l_lm_fxd_lmt_rt; 
			strcpy(st_i_xchngbk.c_xchng_rmrks,"Converted from Market to limit order");
		


			if(DEBUG_MSG_LVL_3)
 			{
   			fn_userlog(c_ServiceName,"Order Reference in Order-Book Is :%s:",st_i_ordbk.c_ordr_rfrnc);
			fn_userlog(c_ServiceName,"Sequence Number in dwld Is :%ld:",l_fxb_ordr_sqnc);
			fn_userlog(c_ServiceName,"Sequence Number in exg struct Is :%ld:",st_i_xchngbk.l_ord_seq);
 			}

			st_i_xchngbk.l_dwnld_flg = i_dwnld_flg;

	  	if(DEBUG_MSG_LVL_3)
	  	{
	    	fn_userlog(c_ServiceName,"Down Load Flag Is :%ld:",st_i_xchngbk.l_dwnld_flg);
	  	}

	  	if(DEBUG_MSG_LVL_3)
	  	{
	    	fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
	  	}

	  	strcpy(st_i_xchngbk.c_rout_crt,c_rout_str);

			st_i_xchngbk.c_oprn_typ = INSERTION_ON_ORDER_FTE;
	  	if(DEBUG_MSG_LVL_3)
	  	{
	   		fn_userlog(c_ServiceName," st_i_xchngbk.c_ordr_rfrn :%s:",st_i_xchngbk.c_ordr_rfrnc);
	   		fn_userlog(c_ServiceName," st_i_xchngbk.c_xchng_cd  ;%s:",st_i_xchngbk.c_xchng_cd);
	   		fn_userlog(c_ServiceName," st_i_xchngbk.c_pipe_id   :%s:",st_i_xchngbk.c_pipe_id);
	   		fn_userlog(c_ServiceName," st_i_xchngbk.l_mdfctn_cntr :%ld:",st_i_xchngbk.l_mdfctn_cntr);
	   		fn_userlog(c_ServiceName," st_i_xchngbk.c_plcd_stts   :%c:",st_i_xchngbk.c_plcd_stts);
	   		fn_userlog(c_ServiceName," st_i_xchngbk.c_rms_prcsd_flg :%c:",st_i_xchngbk.c_rms_prcsd_flg);
	   		fn_userlog(c_ServiceName," st_i_xchngbk.l_ors_msg_typ :%ld:",st_i_xchngbk.l_ors_msg_typ);
	   		fn_userlog(c_ServiceName," st_i_xchngbk.l_ord_seq :%ld:",st_i_xchngbk.l_ord_seq);
	   		fn_userlog(c_ServiceName," st_i_xchngbk.l_ord_tot_qty :%ld:",st_i_xchngbk.l_ord_tot_qty);
	   		fn_userlog(c_ServiceName," st_i_xchngbk.l_ord_lmt_rt  :%ld:",st_i_xchngbk.l_ord_lmt_rt);
	   		fn_userlog(c_ServiceName," st_i_xchngbk.l_bit_flg   :%ld:",st_i_xchngbk.l_bit_flg);
	   		fn_userlog(c_ServiceName," st_i_xchngbk.c_xchng_rmrks :%s:",st_i_xchngbk.c_xchng_rmrks);
	   		fn_userlog(c_ServiceName," st_i_xchngbk.l_dwnld_flg  :%ld:",st_i_xchngbk.l_dwnld_flg);
	   		fn_userlog(c_ServiceName," st_i_xchngbk.c_mod_trd_dt :%s:",st_i_xchngbk.c_mod_trd_dt);
	   		fn_userlog(c_ServiceName," st_i_xchngbk.c_valid_dt   :%s:",st_i_xchngbk.c_valid_dt);
	   		fn_userlog(c_ServiceName," st_i_xchngbk.c_ack_tm     :%s:",st_i_xchngbk.c_ack_tm);
	   		fn_userlog(c_ServiceName," st_i_xchngbk.d_jiffy      :%lf:",st_i_xchngbk.d_jiffy);
	   		fn_userlog(c_ServiceName," st_i_xchngbk.l_xchng_can_qty :%ld:",st_i_xchngbk.l_xchng_can_qty);   
	  	}
			if(DEBUG_MSG_LVL_3)
	 	  {
	    	fn_userlog(c_ServiceName,"Before Call To fn_upd_bxchngbk");
	  	}


	  	i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );

	  	if ( i_trnsctn ==  -1 )
	  	{
	    	fn_errlog(c_ServiceName,"L31875", LIBMSG, c_err_msg);
	    	fn_userlog ( c_ServiceName, "Error - in begin tran -for -lmt-mkt" );
	    	return ;
	  	}


	  	/** Updated fn_upd_bxchngbk name to fn_Bupd_xchngbk for BSE_SPAN/NORMAL **/
	  	i_ch_val = fn_Bupd_xchngbk	( &st_i_xchngbk,
																		c_ServiceName,
																		c_err_msg
																	);

	 		if( ( i_ch_val != 0) && ( i_ch_val != RECORD_ALREADY_PRCSD ) )
	  	{
	    	fn_errlog(c_ServiceName,"L31025", LIBMSG, c_err_msg);
	    	fn_userlog(c_ServiceName,"ERROR: in  Call To fn_upd_bxchngbk");
	    	fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
	    	return;
	  	}
	  	else if ( i_ch_val == RECORD_ALREADY_PRCSD )
	  	{
	    	fn_userlog ( c_ServiceName, "Record already processed----1" );
	    	fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
	    	break;
	  	}

	  	strcpy( st_i_ordbk.c_xchng_ack,c_lm_fod_ack_nmbr.arr);

	  	if(DEBUG_MSG_LVL_0)
	  	{
	    	fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
	    	fn_userlog(c_ServiceName,"Order Book Exchange Ack Is :%s:",st_i_ordbk.c_xchng_ack);
	  	}

	  	strcpy(st_i_ordbk.c_rout_crt,c_rout_str);

	  	if(DEBUG_MSG_LVL_3)
	  	{
	    	fn_userlog(c_ServiceName,"Before Call To fn_Bupd_ordrbk");
	 	 	}
		
			st_i_ordbk.c_oprn_typ = UPDATION_ON_MRKTTOLMT;

      /** Updated fn_upd_bordrbk to fn_Bupd_ordrbk for SPAN/NORMAL -BSE Change **/
	  	i_ch_val = fn_Bupd_ordrbk ( &st_i_ordbk,
														      c_ServiceName,
				     											c_err_msg
				    										 );

	  	if ( i_ch_val != 0)
	  	{
	    	fn_errlog(c_ServiceName,"L31030", LIBMSG, c_err_msg);
	    	fn_userlog(c_ServiceName,"Error in-Call To fn_Bupd_ordrbk");
	    	fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
	    	return ;
	  	}


	    EXEC SQL 
	  	   UPDATE FXD_FOD_LM_BTMP
	    	 SET FXD_ORD_PRCS_FLG = 'Y'
	     	 WHERE FXD_FOD_XCHNG_CD = :c_xchng_cd /* Added on 07-Mar-2012 -POST UAT */
		 		 AND FXD_FOD_PIPE_ID = :c_pipe_id     /* Added on 07-Mar-2012 -POST UAT */
		 		 AND FOD_ACK_NMBR = :c_lm_fod_ack_nmbr
	     	 AND FOD_ORDR_RFRNC = :c_lm_fod_ordr_rfrnc
	     	 AND FXD_SEQ_NO = :l_fxd_ord_seq
	     	 AND FXD_ORD_PRCS_FLG = 'N';


	    if ( SQLCODE != 0 )
		  {
				fn_userlog(c_ServiceName,"Error While updating lmt-prcs flag <%ld>", SQLCODE);
				fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
		    return;
		  }

	    i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);
	    if ( i_ch_val == -1 )
	    {
	     fn_errlog(c_ServiceName,"L31065", LIBMSG, c_err_msg);
	     fn_userlog ( c_ServiceName, "Error - in commit tran--lmt-mkt " );
	     return ;
	    }

		  /********* Added below part on 20-Jan-2012 for SPAN Starts *********/	
		  /******** Commented below part to exclude SPAN Checks Starts *******/
		  /*******************************************************************Ver 1.1 Uncomment starts **/

			strcpy(c_mod_trd_dt,c_trd_dt.arr);
			l_ordr_sqnc = l_fxd_ord_seq;

			if(DEBUG_MSG_LVL_3)
			{
			  fn_userlog(c_ServiceName,"c_xchng_cd :%s: -lMT-MKT",c_xchng_cd);
			  fn_userlog(c_ServiceName,"c_pipe_id :%s: -lMT-MKT",c_pipe_id);	
			fn_userlog(c_ServiceName,"val of c_mod_trd_dt for FXB Select -lMT-MKT :%s:",c_mod_trd_dt);
			fn_userlog(c_ServiceName,"Val of l_ordr_sqnc for FXB Select -lMT-MKT:%ld:",l_ordr_sqnc);
			}

			EXEC SQL						
				SELECT	NVL(FXB_SPN_FLG,'N')
				INTO		:c_spn_flg
				FROM		FXB_FO_XCHNG_BOOK
				WHERE		FXB_XCHNG_CD		=	:c_xchng_cd
				AND			FXB_PIPE_ID			=	:c_pipe_id
				AND			FXB_ORDR_SQNC		=	:l_ordr_sqnc
				AND			FXB_MOD_TRD_DT	=	:c_mod_trd_dt;

			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
			{
				fn_userlog(c_ServiceName,"Error While Selecting Span Flag.-lMT-MKT");
				if(tpacall("SVC_ENQ_MSG", (char *)ptr_fml_Ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
				{
				  fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
				}
				tpfree ( ( char * )ptr_fml_Ibuf);
				tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );
			}
			/** Ver 1.1 Uncomment ends *******************************************************/
			/******** Commented part to exclude SPAN Checks Ends *******/
			/********* Added part on 20-Jan-2012 for SPAN Ends ****/

	 	  /**********************************************************************************************/
	    /** Added SFO_PRCS_RSP call in case of order level updation before trade in system -START **/
	    /** 28-Dec-2011 - Only in case og c_ord_trd_limit_flg == 'O'-Order and not 'T'-trade **/
	  	/**********************************************************************************************/
	/*************  Commented part to exclude SPAN checks Starts **********************/
	/***********************************************************************************//*** Ver 1.1, comment uncommented **/
		  /*** if (c_ord_trd_limit_flg == 'O' && c_spn_flg == 'S')  - Commented in Ver 1.2 ***/
			if (c_ord_trd_limit_flg == 'O' && c_spn_flg == 'S' &&  st_i_ordbk.c_prd_typ != FUTURE_PLUS)  /*** Ver 1.2 ***/
      { 
 				 strcpy(st_i_xchngbk.c_rout_crt,c_rout_str);
  			 st_i_xchngbk.c_rms_prcsd_flg	= NOT_PROCESSED;
  			 fn_userlog(c_ServiceName,"After setting flag as NOT PROCESSED for- SFO_PRCS_RSP");

 				 ptr_fml_Ibuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

 				 if ( ptr_fml_Ibuf == NULL )
  			 {
   			   fn_errlog( c_ServiceName, "S31035", TPMSG, c_err_msg  );
   				 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  		  	 return ;
  			 }

 				 if(DEBUG_MSG_LVL_3)
				 {
				 fn_userlog(c_ServiceName,"BSE st_i_xchngbk.c_rout_crt Is :%s: for - SFO_PRCS_RSP",st_i_xchngbk.c_rout_crt);
				 fn_userlog(c_ServiceName,"BSE st_i_xchngbk.c_ordr_rfrnc Is :%s: for - SFO_PRCS_RSP",st_i_xchngbk.c_ordr_rfrnc);
 				 fn_userlog(c_ServiceName,"BSE st_i_xchngbk.l_ors_msg_typ Is :%ld: for - SFO_PRCS_RSP",st_i_xchngbk.l_ors_msg_typ);
  			 fn_userlog(c_ServiceName,"BSE st_i_xchngbk.l_mdfctn_cntr Is :%ld: for - SFO_PRCS_RSP",st_i_xchngbk.l_mdfctn_cntr);
  			 fn_userlog(c_ServiceName,"BSE st_i_xchngbk.c_ack_tm Is :%s: for - SFO_PRCS_RSP",st_i_xchngbk.c_ack_tm);
 				 fn_userlog(c_ServiceName,"BSE st_i_xchngbk.c_entry_dt_tm Is :%s: for - SFO_PRCS_RSP",st_i_xchngbk.c_entry_dt_tm);
				 }

 				 i_err [0] = Fadd32(ptr_fml_Ibuf,FFO_ROUT_CRT, (char *)st_i_xchngbk.c_rout_crt,0);
  			 i_ferr[0] = Ferror32;
  			 i_err [1] = Fadd32(ptr_fml_Ibuf,FFO_ORDR_RFRNC, (char *)st_i_xchngbk.c_ordr_rfrnc,0);
 				 i_ferr[1] = Ferror32;
  			 i_err [2] = Fadd32(ptr_fml_Ibuf,FFO_ORS_MSG_TYP, (char *)&st_i_xchngbk.l_ors_msg_typ,0);
			   i_ferr[2] = Ferror32;
  			 i_err [3] = Fadd32(ptr_fml_Ibuf,FFO_MDFCTN_CNTR, (char *)&st_i_xchngbk.l_mdfctn_cntr,0);
				 i_ferr[3] = Ferror32;
			   i_err [4] = Fadd32(ptr_fml_Ibuf,FFO_ACK_TM, (char *)st_i_xchngbk.c_ack_tm,0);
  			 i_ferr[4] = Ferror32;
 			   i_err [5] = Fadd32(ptr_fml_Ibuf,FFO_PREV_ACK_TM, (char *)st_i_xchngbk.c_entry_dt_tm,0);
		     i_ferr[5] = Ferror32;

				 for (i = 0;i < 7 ;i++)
 				 {
    			if(i_err[i] == -1)
    			{
      			fn_userlog( c_ServiceName, "Error in :%d:",i );
      			fn_errlog( c_ServiceName, "S31040", Fstrerror32( i_ferr[i]),c_err_msg );
     				tpfree((char *)ptr_fml_Ibuf);
    				return ;
   				 }
 		 		 }

 				 i_ch_val  = tpacall ( "SFO_PRCS_RSP", (char *)ptr_fml_Ibuf,0, TPNOTRAN|TPNOREPLY);

 				 if ( i_ch_val != 0 )
  			 {
    			fn_errlog(c_ServiceName,"L37640", TPMSG, c_err_msg);
    			fn_userlog( c_ServiceName, "Error in call -SFO_PRCS_RSP for order level updation ");
    			tpfree ( ( char * )ptr_fml_Ibuf);
    			return;
  			 }

      } 
      /*****************************Ver 1.1 Uncommented commented part ends*******************************************/
      /*************  Commented part to exclude SPAN checks Ends **********************/
      /** If condn end -for SFO_PRCS_RSP call in case of Order -limit mkt updation **/      
	    /**********************************************************************************************/
	     /** Added SFO_PRCS_RSP call in case of order level updation before trade in system -END **/
	     /** 28-Dec-2011  **/
	    /**********************************************************************************************/
	    /**********************************************************************************************/
	     /** Added SFO_FUT_ACK/SFO_OPT_ACK call in case of order level updation before trade in system -Start **/
	     /** 23-Jan-2011  **/
	    /**********************************************************************************************/
		 /** if (c_ord_trd_limit_flg == 'O' && c_spn_flg == 'N') **/ /** Added condition of c_spn_flg = 'N' for only NORMAL CASE **/
		 /*** if (c_ord_trd_limit_flg == 'O' && c_spn_flg == 'N' )  ** Removed condition of c_spn_flg = 'N' for only NORMAL CASE **
                                                           ** Ver 1.1 for Normal Customer ***
																													 - Commented in Ver 1.2 ***/
		 if ( (c_ord_trd_limit_flg == 'O' && c_spn_flg == 'N') || (c_ord_trd_limit_flg == 'O' && c_spn_flg == 'S' &&  st_i_ordbk.c_prd_typ == FUTURE_PLUS) )	/*** Ver 1.2 ***/
		 {
				/*** if ( st_i_ordbk.c_prd_typ == FUTURES )	- Commented in Ver 1.2 ***/
				if ( st_i_ordbk.c_prd_typ == FUTURES || st_i_ordbk.c_prd_typ == FUTURE_PLUS )	/*** Ver 1.2 ***/
 			  {
    			strcpy( c_svc_name , "SFO_FUT_ACK" );
    			fn_userlog(c_ServiceName,"For Future Order-call SFO_FUT_ACK to process order ack");
 			  }
  			else
  		  {
    		 strcpy( c_svc_name , "SFO_OPT_ACK" );
    		 fn_userlog(c_ServiceName,"For Option Order-call SFO_OPT_ACK to process order ack");
 			  }

				i_ch_val = fn_acall_svc ( c_ServiceName,
      			                       c_err_msg,
            			                 &st_i_xchngbk,
                  			           "vw_xchngbook",
                        			     sizeof ( st_i_xchngbk ),
              			               TPNOREPLY,
                    			         c_svc_name );
			  if ( i_ch_val != 0 )
 			  {
    			fn_userlog(c_ServiceName,"Error- in <%s> for limit-mkt order proces ", c_svc_name);
    			fn_errlog(c_ServiceName,"L31040", LIBMSG, c_err_msg);
    		  return;
  			}
    		if ( i_ch_val == 0 )
 			  {
    			fn_userlog(c_ServiceName,"After successful call to <%s> in Limit-Mkt case", c_svc_name);
 			  }

		 }
	  /**********************************************************************************************/
	     /** Added SFO_FUT_ACK/SFO_OPT_ACK call in case of order level updation before trade in system -End **/
	     /** 23-Jan-2011  **/
	  /**********************************************************************************************/

		i_lm_prcsd_cnt ++;
	} /* End for while loop for -LMT_MKT mismatch processing */

	
	fn_userlog(c_ServiceName,"End of-BSE Reco-bat_fo_Brecon-for LIMIT-Market mismatch-Processed :%d: records in pipe - :%s:", i_lm_prcsd_cnt, c_pipe_id );	

	/********************************************************************************************************/
				/*** Logic for Market to Limit conversion Ends ****/
	/********************************************************************************************************/

	/********************************************************************************************************/
	/*** Logic to process cancellation requests in Queued state & Trades in Modifications Starts ****/
	/********************************************************************************************************/

  i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );

  if ( i_trnsctn ==  -1 )
  {
    fn_errlog(c_ServiceName,"L31055", LIBMSG, c_err_msg);
    fn_userlog ( c_ServiceName, "Error - in begin tran--1 --QUEUED-TEMP " );
    return ;
  }

  EXEC SQL 
		DELETE FROM FXB_FO_XCHNG_BOOK_BTMP
		WHERE FXB_PIPE_ID =:c_pipe_id; /* Added on 07-Mar-2012 -POST UAT */

			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
	  	{
		  	fn_errlog(c_ServiceName,"S31045", SQLMSG, c_err_msg);
				fn_userlog(c_ServiceName,"Error- In deleting FXB_TEMP -SQLCODE<%ld>", SQLCODE);
				tpterm();
			  return;
			}

	EXEC SQL
	  INSERT INTO FXB_FO_XCHNG_BOOK_BTMP 
			(FXB_XCHNG_CD, /* Added on 07-Mar-2012 -POST UAT */
			FXB_PIPE_ID, 
			FXB_ORDR_RFRNC,
			FXB_MDFCTN_CNTR,
			FXB_ORDR_SQNC,
			FXB_LMT_MRKT_SL_FLG,
			FXB_RQST_TYP,
			FXB_ORDR_TYPE,
			FXB_PLCD_STTS,
			FXB_ORDR_TOT_QTY,
			FXB_RMS_PRCSD_FLG,
			FXB_ORS_MSG_TYP,
			FXB_PRCS_FLG)
	   SELECT    FXB_XCHNG_CD, /* Added on 07-Mar-2012 -POST UAT */
							 FXB_PIPE_ID,  /* Added on 07-Mar-2012 -POST UAT */
		  			   FXB_ORDR_RFRNC,
							 FXB_MDFCTN_CNTR,
							 FXB_ORDR_SQNC,
							 FXB_LMT_MRKT_SL_FLG,
				 			 FXB_RQST_TYP,
							 FXB_ORDR_TYPE,
							 FXB_PLCD_STTS,
							 nvl(FXB_ORDR_TOT_QTY,0),
				 			 nvl(FXB_RMS_PRCSD_FLG,'*'),
				 			 nvl(FXB_ORS_MSG_TYP,'0000'),
							 'N'
			 FROM    FXB_FO_XCHNG_BOOK
			 WHERE   FXB_XCHNG_CD = :c_xchng_cd /* Added on 07-Mar-2012 -POST UAT */
			 AND     FXB_PIPE_ID  = :c_pipe_id
			 AND     trunc(FXB_MOD_TRD_DT) = :c_trd_dt
			 AND     FXB_PLCD_STTS      = decode(FXB_ORDR_TYPE, 'I', 'A', :c_op_typ)
			 UNION
	   SELECT    FXB_XCHNG_CD, /* Added UNION on 09-Apr-2012 to handle manual updates-'M' cases -POST UAT */
							 FXB_PIPE_ID,  /* Added on 07-Mar-2012 -POST UAT */
		  			   FXB_ORDR_RFRNC,
							 FXB_MDFCTN_CNTR,
							 FXB_ORDR_SQNC,
							 FXB_LMT_MRKT_SL_FLG,
				 			 FXB_RQST_TYP,
							 FXB_ORDR_TYPE,
							 FXB_PLCD_STTS,
							 nvl(FXB_ORDR_TOT_QTY,0),
				 			 nvl(FXB_RMS_PRCSD_FLG,'*'),
				 			 nvl(FXB_ORS_MSG_TYP,'0000'),
							 'N'
			 FROM    FXB_FO_XCHNG_BOOK
			 WHERE   FXB_XCHNG_CD = :c_xchng_cd 
			 AND     FXB_PIPE_ID  = :c_pipe_id
			 AND     trunc(FXB_MOD_TRD_DT) = :c_trd_dt
			 AND     FXB_PLCD_STTS      = decode(FXB_ORDR_TYPE, 'I', 'A', 'M');

			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
	  	{
		  	fn_errlog(c_ServiceName,"S31050", SQLMSG, c_err_msg);
				fn_userlog(c_ServiceName,"Error- In inserting into FXB_TEMP -SQLCODE<%ld>", SQLCODE);
				tpterm();
			  return;
			}


   i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);
   if ( i_ch_val == -1 )
   {
    fn_errlog(c_ServiceName,"L31065", LIBMSG, c_err_msg);
    fn_userlog ( c_ServiceName, "Error - in commit fxb--temp table " );
    return ;
   }

	fn_userlog(c_ServiceName ,"FNO-BSE Reco Processing for Queued & IOC trade - orders for pipe - :%s:", c_pipe_id );

	while ( 1  )
	{ /* Start for while loop for -queued order processing */

		 MEMSET( c_fxb_ordr_rfrnc );
		 MEMSET(st_i_trdbk);
		 l_fxb_mdfctn_cntr = 0;

		 EXEC SQL 
			 SELECT  FXB_ORDR_RFRNC,
							 FXB_MDFCTN_CNTR,
							 FXB_ORDR_SQNC,
							 FXB_LMT_MRKT_SL_FLG,
				 			 FXB_RQST_TYP,
							 FXB_ORDR_TYPE,
							 FXB_PLCD_STTS,
							 nvl(FXB_ORDR_TOT_QTY,0),
				 			 nvl(FXB_RMS_PRCSD_FLG,'*'),
				 			 nvl(FXB_ORS_MSG_TYP,'0000'),
							 FXB_PRCS_FLG
			 INTO 	 :c_fxb_ordr_rfrnc,   
			      	 :l_fxb_mdfctn_cntr,  
			      	 :l_fxb_ordr_sqnc,
			      	 :c_fxb_lmt_mrkt_sl_flg,
			      	 :c_fxb_rqst_typ,   
			      	 :c_fxb_ordr_type,
			     		 :c_fxb_plcd_stts,
			    		 :l_fxb_ordr_tot_qty,
			   		   :c_fxb_rms_prcsd_flg,
			  		   :l_fxb_ors_msg_typ,
			  		   :c_fxb_prcs_flg
			 FROM    FXB_FO_XCHNG_BOOK_BTMP
			 WHERE   FXB_XCHNG_CD = :c_xchng_cd /* POST UAT- Added on 07-Mar-2012 */
			 AND 	   FXB_PIPE_ID  = :c_pipe_id
			 AND     FXB_PRCS_FLG  = 'N'
			 AND     ROWNUM =1 
			 ORDER BY FXB_ORDR_RFRNC;
			
		 if ( SQLCODE != 0 )
		 {
	  	 if(SQLCODE == NO_DATA_FOUND )
	  	 {
        	if(i_prcsd_cnt>0)
					{	 
   		  	 fn_userlog (c_ServiceName,"Reached end of records for fxb_queue data");		
		  		 break; 
					}
					else
					{	
					 fn_userlog(c_ServiceName,"*************************************************************************");
					 fn_userlog(c_ServiceName,"No data to process - QUEUED -Records");
					 fn_userlog(c_ServiceName,"*************************************************************************");
					 break;
				  }
		   }
	   	 else
	   	 {
					fn_errlog(c_ServiceName, "S31055",  SQLMSG, c_err_msg);
				  fn_userlog(c_ServiceName,"Error- In fetch -fxb_queue---<%ld>", SQLCODE);
					tpterm();
					return;
	     }
	   }

	   if(DEBUG_MSG_LVL_3)
	   {
	   fn_userlog(c_ServiceName,"Processing record <%d> for fxb_queue", i_prcsd_cnt+1);
	   fn_userlog(c_ServiceName,"Record count selected in fxb_queue <%ld>", sqlca.sqlerrd[2]);
	   }

		 SETNULL ( c_fxb_ordr_rfrnc );

		 if(DEBUG_MSG_LVL_3)
		 {
		  fn_userlog(c_ServiceName, " BSE Reco processing -Record no<%d> ", i_prcsd_cnt +1); 
		  fn_userlog(c_ServiceName, " BSE Reco processing -c_fxb_ordr_rfrnc<%s>", c_fxb_ordr_rfrnc.arr); 
		  fn_userlog(c_ServiceName, " BSE Reco processing -l_fxb_mdfctn_cntr<%ld>", l_fxb_mdfctn_cntr); 
		  fn_userlog(c_ServiceName, " BSE Reco processing -l_fxb_ordr_sqnc<%ld>", l_fxb_ordr_sqnc); 
		  fn_userlog(c_ServiceName, " BSE Reco processing -l_fxb_ordr_tot_qty <%ld>", l_fxb_ordr_tot_qty); 
		  fn_userlog(c_ServiceName, " BSE Reco processing -c_fxb_rqst_typ<%c>", c_fxb_rqst_typ); 
		  fn_userlog(c_ServiceName, " BSE Reco processing -c_fxb_lmt_mrkt_sl_flg<%c>", c_fxb_lmt_mrkt_sl_flg); 
		  fn_userlog(c_ServiceName, " BSE Reco processing -c_fxb_rms_prcsd_flg<%c>", c_fxb_rms_prcsd_flg); 
		  fn_userlog(c_ServiceName, " BSE Reco processing -l_fxb_ors_msg_typ<%ld>", l_fxb_ors_msg_typ); 
		 }

			/********* Added below part for SPAN-NORMAL Starts ****************/	
			/********* Commented part to exclude SPAN Checks Starts ***********/
			/********************************************************Ver 1.1 Uncomment Starts ***/
			strcpy(c_mod_trd_dt,c_trd_dt.arr);
			l_ordr_sqnc = l_fxb_ordr_sqnc;

			fn_userlog(c_ServiceName,"c_xchng_cd for QUEUED-:%s:",c_xchng_cd);
			fn_userlog(c_ServiceName,"c_pipe_id for QUEUED:%s:",c_pipe_id);				
			fn_userlog(c_ServiceName,"val of c_mod_trd_dt for FXB Select -for QUEUED:%s:",c_mod_trd_dt);
			fn_userlog(c_ServiceName,"Val of l_ordr_sqnc for FXB Select -for QUEUED:%ld:",l_ordr_sqnc);

			EXEC SQL						
				SELECT	NVL(FXB_SPN_FLG,'N')
				INTO		:c_spn_flg
				FROM		FXB_FO_XCHNG_BOOK
				WHERE		FXB_XCHNG_CD		=	:c_xchng_cd
				AND			FXB_PIPE_ID			=	:c_pipe_id
				AND			FXB_ORDR_SQNC		=	:l_ordr_sqnc
				AND			FXB_MOD_TRD_DT	=	:c_mod_trd_dt;

			if ( SQLCODE != 0 )
			{
				fn_userlog(c_ServiceName,"Error While Selecting Span Flag-for QUEUED");
				if(tpacall("SVC_ENQ_MSG", (char *)ptr_fml_Ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
				{
				  fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
				}
				tpfree ( ( char * )ptr_fml_Ibuf);
				tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );
			}
			/************************************************************ Ver 1.1 ** Uncommenting Ends  *****/
			/********* Commented part to exclude SPAN Checks Ends ***********/
			/********* Added  part for SPAN-NORMAL Ends ****/


    	if(DEBUG_MSG_LVL_3)
      {
			 fn_userlog(c_ServiceName, " Val of c_fxb_ordr_rfrnc <%s> -", c_fxb_ordr_rfrnc.arr);
			 fn_userlog(c_ServiceName, " Val of l_fxb_mdfctn_cntr <%ld> -", l_fxb_mdfctn_cntr);
			 fn_userlog(c_ServiceName, " Val of l_fxb_ordr_sqnc <%ld> -", l_fxb_ordr_sqnc);
			 fn_userlog(c_ServiceName, " Val of l_fxb_ordr_tot_qty <%ld> -", l_fxb_ordr_tot_qty);
			 fn_userlog(c_ServiceName, " Val of c_fxb_rqst_typ <%c> -", c_fxb_rqst_typ);
			 fn_userlog(c_ServiceName, " Val of c_fxb_lmt_mrkt_sl_flg <%c> -", c_fxb_lmt_mrkt_sl_flg);
			 fn_userlog(c_ServiceName, " Val of c_fxb_ordr_type <%c> -", c_fxb_ordr_type);
			 fn_userlog(c_ServiceName, " Val of c_fxb_plcd_stts <%c> -", c_fxb_plcd_stts);
			 fn_userlog(c_ServiceName, " Val of c_fxb_rms_prcsd_flg <%c> -", c_fxb_rms_prcsd_flg);
  		 fn_userlog(c_ServiceName, " Val of l_fxb_ors_msg_typ <%ld> -", l_fxb_ors_msg_typ);
		 fn_userlog(c_ServiceName, " Val of c_spn_flg <%c> -", c_spn_flg);
		  }
	
			SETLEN(c_fod_ordr_rfrnc);
			SETLEN(c_fxb_ordr_rfrnc);

			EXEC SQL 
    	      SELECT FOD_ORDR_STTS,
		 						   FOD_ORDR_RFRNC, 
								 	 nvl(FOD_ORDR_TOT_QTY,0), 
								 	 nvl(FOD_EXEC_QTY,0),
							   	 nvl(FOD_CNCL_QTY,0),
								 	 trim(nvl(FOD_ACK_NMBR,'NA')),
								 	 decode(FOD_LMT_MRKT_SL_FLG,'M','G','S','P','L','L'),
								 	 FOD_ORDR_TYPE,
							   	 FOD_ORDR_FLW
	    			INTO   :c_fod_ordr_stts,
			       			 :c_fod_ordr_rfrnc, 
							 		 :l_fod_ordr_tot_qty, 
		  					 	 :l_fod_exec_qty, 
		  					 	 :l_fod_cncl_qty,
		  				   	 :c_fod_ack_nmbr,
		  			     	 :c_fod_lmt_mrkt_sl_flg,
					     		 :c_fod_ordr_type,
		  				     :c_fod_ordr_flw
	    			FROM   FOD_FO_ORDR_DTLS
	    			WHERE  FOD_ORDR_RFRNC = :c_fxb_ordr_rfrnc
					  AND    FOD_ORDR_TYPE = :c_fxb_ordr_type
	    			AND    FOD_MDFCTN_CNTR = :l_fxb_mdfctn_cntr
					  AND  	 FOD_ORDR_STTS = decode( FOD_ORDR_STTS , 'C','C','D','D', decode(:c_fxb_ordr_type,'I','P','T','Q') ); 
	    			/* AND  	 FOD_ORDR_STTS = decode(:c_fxb_ordr_type,'I','P','T','Q');  */
						/** Changed last decode to get- IOC cancelled data also in case of already processed **/
					  /* Decode used to process IOC part executed/full cancelled and Normal queued order both*/

			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
	  	{
		  	fn_errlog(c_ServiceName,"S31060", SQLMSG, c_err_msg);
				fn_userlog(c_ServiceName,"Error- In selecting FOD details-SQLCODE<%ld>", SQLCODE);
				tpterm();
			  return;
			}

	    SETNULL(c_fod_ordr_rfrnc);
	    SETNULL(c_fod_ack_nmbr);
      
      if(DEBUG_MSG_LVL_3)
			{
	 			fn_userlog(c_ServiceName, " Val of c_fod_ordr_stts <%c> -", c_fod_ordr_stts);
		  	fn_userlog(c_ServiceName, " Val of c_fod_ordr_rfrnc <%s> -", c_fod_ordr_rfrnc.arr);
				fn_userlog(c_ServiceName, " Val of l_fod_ordr_tot_qty <%ld> -", l_fod_ordr_tot_qty);
				fn_userlog(c_ServiceName, " Val of l_fod_exec_qty <%ld> -", l_fod_exec_qty);
				fn_userlog(c_ServiceName, " Val of l_fod_cncl_qty <%ld> -", l_fod_cncl_qty);
				fn_userlog(c_ServiceName, " Val of c_fod_ack_nmbr <%s> -", c_fod_ack_nmbr.arr);
				fn_userlog(c_ServiceName, " Val of c_fod_lmt_mrkt_sl_flg <%c> -", c_fod_lmt_mrkt_sl_flg);
				fn_userlog(c_ServiceName, " Val of c_fod_ordr_flw <%c> -", c_fod_ordr_flw);
      }

		  if (c_fod_ordr_stts == 'C' || c_fod_ordr_stts == 'D')
		  {
		   fn_userlog(c_ServiceName, "Order status is -Already Cancelled/Part Cancelled- Hence do not Reprocess");
      } 
		  /**** Added below if condition in case of IOC order cancellation not processed **/
		  else  /** Block to process records other than 'C' & 'D' status -Starts **/
      {
			  fn_userlog(c_ServiceName, "Order status is -Not Cancelled- Hence process");

				EXEC SQL
	 				SELECT count(1)
			  	INTO :i_ord_dwld_cnt
	 				FROM  FXD_FO_XCHNG_DWNLD
	 				WHERE FXD_PIPE_ID = :c_pipe_id /** Added POST UAT**/
					AND 	TO_CHAR(FXD_XCHNG_ACK) = trim(:c_fod_ack_nmbr)
	 				AND   FXD_SEQ_NO = (SELECT FXB_ORDR_SQNC from FXB_FO_XCHNG_BOOK 
					WHERE FXB_XCHNG_CD = :c_xchng_cd /* Added POST UAT */
					AND 	FXB_PIPE_ID = :c_pipe_id     /* Added POST UAT */
					AND 	FXB_ORDR_RFRNC = :c_fxb_ordr_rfrnc 
					AND   FXB_MDFCTN_CNTR = decode(:c_fxb_ordr_type , 'I' , :l_fxb_mdfctn_cntr , (:l_fxb_mdfctn_cntr -1) ));
				 /** Decode added for handelling mod counter for IOC **/

			  if ( SQLCODE != 0 )
		    {
				 fn_errlog(c_ServiceName,"S31065", SQLMSG, c_err_msg);
				 fn_userlog(c_ServiceName,"Error- In selecting FXD details-SQLCODE<%ld>", SQLCODE);
				 tpterm();
				 return;
			  }
			  if(DEBUG_MSG_LVL_3)
			  {
			  fn_userlog(c_ServiceName,"Count- In selecting FXD details-<%d>", i_ord_dwld_cnt);
			  }

		  	EXEC SQL 
				    SELECT TO_NUMBER( TO_CHAR(SYSDATE,'YYYY')) - 1900,  
				           TO_NUMBER( TO_CHAR(SYSDATE,'DD')) , 
					   			 TO_NUMBER( TO_CHAR(SYSDATE,'MM')),
					   			 TO_NUMBER( TO_CHAR(SYSDATE,'HH')),
					   			 TO_NUMBER( TO_CHAR(SYSDATE,'MI')),
					   			 TO_NUMBER( TO_CHAR(SYSDATE,'SS'))
				    INTO  :i_yyyy,
					   			:i_dd,
					   			:i_mm,
					   			:i_hh,
					   			:i_mi,
					   			:i_ss
				    FROM  DUAL;

				if ( SQLCODE != 0 )
				{
					fn_errlog(c_ServiceName,"S31070", SQLMSG, c_err_msg);
					fn_userlog(c_ServiceName,"Error- In selecting Date format-SQLCODE<%ld>", SQLCODE);
					tpterm();
					return;
				}

				if(DEBUG_MSG_LVL_5)
				{
				fn_userlog(c_ServiceName,"After setting date variables in exchange format");
				}
	 
			 	if (i_ord_dwld_cnt > 0) 
	 			{
					/** Indicates order pending at Exchange -means cancellation not processed or not reached at exchange */
				  /** So reject the cancellation request **/
	   			c_cancel_acpt_flg = 'N';
	   			i_exch_reject_status = 9999;
	   			fn_userlog(c_ServiceName,"Val of c_cancel_acpt_flg <%c> i_exch_reject_status<%d>-TO_REJECT_CANCELLATION_FULLY", c_cancel_acpt_flg, i_exch_reject_status);
			 	}

				/** 1: Below condition Indicates order cancelled at Exchange -So accept the cancellation request OR **/
	 			/** 2: Below condition Indicates order partly cancelled at Exchange and partly traded -So accept the part cancellation request for pending qty **/
	 		 /** e.g out of 2000 qty - 1000 traded and 1000 cancelled at exchange **/

			  if (i_ord_dwld_cnt == 0) 
        {
			  	 fn_userlog(c_ServiceName, " If - i_ord_dwld_cnt == 0 ");

				   st_ord_rqst_rply_data.ll_ord_id = fn_swap_ulnglng(atoll(c_fod_ack_nmbr.arr));
		 			 st_ord_rqst_rply_data.l_msg_tag1 = fn_swap_long(l_fxb_ordr_sqnc);
		 			 st_ord_rqst_rply_data.c_ord_typ  = c_fxb_lmt_mrkt_sl_flg; /*c_fod_lmt_mrkt_sl_flg*/

					 st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_year = i_yyyy;
					 st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_month = i_mm;
					 st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_day = i_dd;
					 st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_hour = i_hh;
					 st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_min  = i_mi;
					 st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_sec  = i_ss;

		  		 /** To check any pending trade **/
		   		 EXEC SQL
						 SELECT  nvl(sum(FXD_EXCTD_QTY),'0') 
						 INTO    :l_fxd_exctd_qty
		 				 FROM    FXD_FO_XCHNG_TRD_DWNLD
		 				 WHERE   FXD_PIPE_ID = :c_pipe_id  /* Added POST UAT */
						 AND 		 TO_CHAR(FXD_ORD_ACK) = trim(:c_fod_ack_nmbr)
		 				 AND 	   FXD_ORD_SEQ = (SELECT FXB_ORDR_SQNC
																	  from FXB_FO_XCHNG_BOOK 
				  			            				WHERE FXB_XCHNG_CD = :c_xchng_cd  /** Added POST UAT **/
																	  AND FXB_PIPE_ID = :c_pipe_id      /** Added POST UAT **/
																	  AND FXB_ORDR_RFRNC = trim(:c_fxb_ordr_rfrnc) 
				 				    					  		AND FXB_MDFCTN_CNTR =  decode(:c_fxb_ordr_type, 'I', :l_fxb_mdfctn_cntr, decode(:c_fxb_rqst_typ,'C',(:l_fxb_mdfctn_cntr -1), 'M', :l_fxb_mdfctn_cntr )));

			  	 if(DEBUG_MSG_LVL_3)
				 {
				 fn_userlog(c_ServiceName," After calc of executed trade quantity<%ld> -SQLCODE- <%ld>",l_fxd_exctd_qty,  SQLCODE);
				 }

					/** Decode added for handelling mod counter for IOC **/
          /* Here, the logic behind using mod-counter -1 is as follows: */
					/* For IOC- check the modification counter of current seq only sequence of */
					/** for REQ_TYP as 'C' Trade need to be checked against the exchange sequence just before the queued one **/
				  /** i.e. If cancellation/modification is in queue state then check the trade against its previous request from exchange book **/
					/** Also, for REQ_TYP as 'M' modification counter should be taken for the one which is in 'Q' state and not the previous one  **/

		 			 if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)  
			 		 {
			 		  fn_errlog(c_ServiceName,"S31075", SQLMSG, c_err_msg);
			 		  fn_userlog(c_ServiceName, " Error-Checking trade present for given ACK");
					  tpterm();
			 		  return;
					 }

					 if (l_fxd_exctd_qty == 0)    /** To accept the cancellation req as NO Trade & No Order pending- i.e cancellaed at exchange **/
           {  /** If condtn starts - for trade qty == 0 **/
					   c_cancel_acpt_flg = 'Y';
			  		 i_exch_reject_status = 0;
			 			 c_part_cancel_flg = 'N';
				     fn_userlog(c_ServiceName, " Val of c_cancel_acpt_flg <%c> i_exch_reject_status<%d> & c_fxb_rqst_typ <%c>- TO_Accept CURRENT REQUEST", c_cancel_acpt_flg, i_exch_reject_status, c_fxb_rqst_typ);

						 /*************************************************************************/
			       /** Block  Started to Accept cancellation request  **/
					   /*************************************************************************/

						 /***** Different assignment for Cancellation to Accept -Starts *****/ 
					   /* if (c_fxb_rqst_typ == 'C') */
					    if (c_fxb_rqst_typ == 'C' && c_fxb_rqst_typ != 'N') 
             {
		       	   st_ord_rqst_rply_data.c_buysell_flg = c_fod_ordr_flw;
				   	   st_ord_rqst_rply_data.l_amended_qty = l_fxb_ordr_tot_qty;
						 	 st_ord_rqst_rply_data.c_ordr_actn_cd = DEL_LMTMRKT_ORDR;
					   	 st_ord_rqst_rply_data.l_msg_tag1 = fn_swap_long(l_fxb_ordr_sqnc);
					   	 i_exch_reject_status = 0;
						   st_ord_rqst_rply_data.s_rply_cd  = i_exch_reject_status; 

               if(DEBUG_MSG_LVL_5)
               {
						  	 fn_userlog(c_ServiceName, " Val of c_cancel_acpt_flg <%c> i_exch_reject_status<%d>, QTY<%ld> - TO_ACCEPT_FULL_CANCELLATION", c_cancel_acpt_flg, i_exch_reject_status, l_fod_ordr_tot_qty);


			  				 fn_userlog(c_ServiceName,"Val of ll_ord_id in BSE_Reco-DWLD - cancell -accept :%ld:",st_ord_rqst_rply_data.ll_ord_id);
			  			   fn_userlog(c_ServiceName,"Val of l_msg_typ in BSE_Reco-DWLD - cancell -accept :%ld:",st_ord_rqst_rply_data.l_msg_typ);
		   	  		   fn_userlog(c_ServiceName,"Val of l_msg_tag1 in BSE_Reco-DWLD - cancell -accept :%ld:",st_ord_rqst_rply_data.l_msg_tag1);
		   	  		   fn_userlog(c_ServiceName,"Val of c_ord_typ in BSE_Reco-DWLD - cancell -accept :%c:",st_ord_rqst_rply_data.c_ord_typ);
		   	  		   fn_userlog(c_ServiceName,"Val of c_buysell_flgi BSE_Reco-DWLD  cancell -accept :%c:",st_ord_rqst_rply_data.c_buysell_flg);
		   	  		   fn_userlog(c_ServiceName,"Val of l_amended_qty in BSE_Reco-DWLD - cancell -accept :%ld:",st_ord_rqst_rply_data.l_amended_qty);
		   	 				 fn_userlog(c_ServiceName,"Val of l_pending_qty in BSE_Reco-DWLD - cancell -accept :%ld:",st_ord_rqst_rply_data.l_pending_qty);
			  				 fn_userlog(c_ServiceName,"Val of c_ordr_actn_cd in BSE_Reco-DWLD - cancell -accept :%c:",st_ord_rqst_rply_data.c_ordr_actn_cd);
			  				 fn_userlog(c_ServiceName,"Val of s_rply_cd in BSE_Reco-DWLD - cancell -accept :%d:",st_ord_rqst_rply_data.s_rply_cd);
			  				 fn_userlog(c_ServiceName,"Val of yeat in BSE_Reco-DWLD - cancell -accept Y:%d:",st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_year);
			  				 fn_userlog(c_ServiceName,"Val of mnth in BSE_Reco-DWLD - cancell -accept M:%d:",st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_month);
			  				 fn_userlog(c_ServiceName,"Val of day in BSE_Reco-DWLD - cancell -accept D:%d:",st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_day);
			  				 fn_userlog(c_ServiceName,"Val of hr in BSE_Reco-DWLD - cancell -accept H:%d:",st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_hour); 
			  				 fn_userlog(c_ServiceName,"Val of min in BSE_Reco-DWLD - cancell -accept M:%d:",st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_min);  
			  				 fn_userlog(c_ServiceName,"Val of sec in BSE_Reco-DWLD - cancell -accept S:%d:",st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_sec);  
               }
               fn_userlog(c_ServiceName,"Span Flg :%c:",c_spn_flg);  /*** Ver 1.1 ***/

               if( c_spn_flg == 'N')   /*** Ver 1.1 ***/
               {
		   	  	    i_ret_val = fn_bse_ord_confirmation( &st_ord_rqst_rply_data,	
																										c_xchng_cd,
																										c_pipe_id,
																										c_rout_str,	
																										c_trd_dt.arr,
																										c_skpord_ref,
																										i_dwnld_flg,
																										c_ServiceName,
																										c_err_msg );

		      	    if(i_ret_val == -1)
		      		  {
									if ( tpacall("SVC_ENQ_MSG", (char *)ptr_fml_Rbuf,  0, TPNOTRAN|TPNOREPLY) == -1)
									{
			  						fn_userlog(c_ServiceName,"S3990",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
									}
		      		  }
               } /*** Ver 1.1 Starts here ***/
               else if( c_spn_flg == 'S' )
               {
                 i_ret_val = fn_bse_spnord_confirmation( &st_ord_rqst_rply_data,
                                                    c_xchng_cd,
                                                    c_pipe_id,
                                                    c_rout_str,
                                                    c_trd_dt.arr,
                                                    c_skpord_ref,
                                                    i_dwnld_flg,
                                                    c_ServiceName,
                                                    c_err_msg );
                if(i_ret_val == -1)
                {
                  if ( tpacall("SVC_ENQ_MSG", (char *)ptr_fml_Rbuf,  0, TPNOTRAN|TPNOREPLY) == -1)
                  {
                    fn_userlog(c_ServiceName,"S3990",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
                  }
                }      
               }
               else
               {
                 fn_userlog(c_ServiceName,"Invalid Span Flag :%c: for :%s|%s|%s|%ld:",
                                            c_spn_flg,
                                            c_xchng_cd,
                                            c_pipe_id,
                                            c_trd_dt.arr,
                                            l_ordr_sqnc);
               } /*** Ver 1.1 Ends Here ***/ 
		      		 if(i_ret_val == 0)
		      		 {
								fn_userlog(c_ServiceName,"Afetr Successful execution of fn_bse_ord_confirmation for Cancellation -Accept ");
		      		 }

             }
	     
						 /***** Different assignment for Cancellation to Accept - Ends *****/ 
	     if (c_fxb_rqst_typ != 'C')
	     {
	      fn_userlog(c_ServiceName,"This is not a cancellation request- Hence do not process it");
	      fn_userlog(c_ServiceName,"Val of c_fxb_ordr_type <%c>- Not to be processed ", c_fxb_ordr_type);
	     }

						 /*************************************************************************/
			       /** Block Ended to Accept cancellation request  **/
					   /*************************************************************************/

           } /** If condtn ends - for trade qty == 0 **/
	         /*************************************************************************/

			 		 if (l_fxd_exctd_qty > 0)    /** Order is Trdaed at exchange before cancellation request **/
           { /** If condtn Starts - for l_fxd_exctd_qty > 0 **/
				 			if (l_fxd_exctd_qty > 0  && c_fxb_ordr_type != 'I') /** This is only for Normal Order **/
				 			/** && c_fxb_ordr_type != 'T' - commented and condition of 'T' for normal order **/
              { /** If condn for Normal Order Starts **/

				 				st_ord_rqst_rply_data.c_buysell_flg = c_fod_ordr_flw;
				 	  		/** Trade at exchange -- Part execute it and part cancel it**/	
				  			if (l_fxb_ordr_tot_qty - l_fxd_exctd_qty > 0)
            		{
				    			i_exch_reject_status = 0;
				    			c_cancel_acpt_flg = 'Y';
				    			st_ord_rqst_rply_data.l_amended_qty = l_fxd_exctd_qty;
				    			c_part_cancel_flg = 'Y';
				    			fn_userlog(c_ServiceName, " Val of c_cancel_acpt_flg <%c> i_exch_reject_status<%d> - TO_Acceppt Part_CANCELLATION", c_cancel_acpt_flg, i_exch_reject_status);


	    					}

				 				if (l_fxb_ordr_tot_qty - l_fxd_exctd_qty == 0) 
								/** It means fully traded **/
				  			{
				  				c_cancel_acpt_flg = 'N';  /** Indicates dont process cancellation request -as fully traded**/
				  				c_part_cancel_flg = 'N';
						
									/***** Different assignment for Modification Starts *****/ 
								  if (c_fxb_rqst_typ == 'M')
							  	{
									 fn_userlog(c_ServiceName,"To process Order Ack for which modification is in QUEUED state");
					  			 c_mod_acpt_flg = 'Y';
									 st_ord_rqst_rply_data.c_ordr_actn_cd = UPD_LMTMRKT_ORDR;
									 st_ord_rqst_rply_data.l_amended_qty = l_fxb_ordr_tot_qty;  /** Need to confirm - for fxb/fod qty **/
									 i_exch_reject_status = 0;
									 st_ord_rqst_rply_data.s_rply_cd  = i_exch_reject_status; 
									 fn_userlog(c_ServiceName, " Val of c_mod_acpt_flg <%c> i_exch_reject_status<%d>, QTY<%ld> - ACCEPT MODIFICATION", c_mod_acpt_flg, i_exch_reject_status, l_fod_ordr_tot_qty);
									}
									/***** Different assignment for Modification Ends *****/ 

									/***** Different assignment for Cancellation Starts *****/ 
									if (c_fxb_rqst_typ == 'C')
									{
										st_ord_rqst_rply_data.l_amended_qty = l_fod_ordr_tot_qty;
				  					st_ord_rqst_rply_data.c_ordr_actn_cd = DEL_LMTMRKT_ORDR;
				  					i_exch_reject_status = 9999;
				  					st_ord_rqst_rply_data.s_rply_cd  = i_exch_reject_status; 
										fn_userlog(c_ServiceName, " Val of c_cancel_acpt_flg <%c> i_exch_reject_status<%d>, QTY<%ld> - TO_Reject CURRENT REQUEST", c_cancel_acpt_flg, i_exch_reject_status, l_fod_ordr_tot_qty);
									}
									/***** Different assignment for Cancellation Ends *****/ 
				  			}
				 		    else
				  			{
				  				st_ord_rqst_rply_data.l_amended_qty = l_fod_ordr_tot_qty - l_fxd_exctd_qty;
				  				st_ord_rqst_rply_data.c_ordr_actn_cd = DEL_LMTMRKT_ORDR; 
				  				i_exch_reject_status = 0;
				  				st_ord_rqst_rply_data.s_rply_cd  = i_exch_reject_status; 
				  				fn_userlog(c_ServiceName, " Val of c_cancel_acpt_flg <%c> i_exch_reject_status<%d> Qty<%ld>- process pending qty  CANCELLATION", c_cancel_acpt_flg, i_exch_reject_status, (l_fod_ordr_tot_qty - l_fxd_exctd_qty));
				  			}

		 					  /*****************************************************/	
								/** Call Fn to  cancel rest qty now  **/
	
           		  if(DEBUG_MSG_LVL_3)
						 		{
			 			 			fn_userlog(c_ServiceName,"Val of ll_ord_id in BSE_Reco-DWLD - -1 :%ld:",st_ord_rqst_rply_data.ll_ord_id);
			  		 			fn_userlog(c_ServiceName,"Val of l_msg_typ in BSE_Reco-DWLD - -1 :%ld:",st_ord_rqst_rply_data.l_msg_typ);
		   	  	 			fn_userlog(c_ServiceName,"Val of l_msg_tag1 in BSE_Reco-DWLD - -1 :%ld:",st_ord_rqst_rply_data.l_msg_tag1);
		   	  	 			fn_userlog(c_ServiceName,"Val of c_ord_typ in BSE_Reco-DWLD - -1 :%c:",st_ord_rqst_rply_data.c_ord_typ);
		   	  	 			fn_userlog(c_ServiceName,"Val of c_buysell_flg in BSE_Reco-DWLD - -1 :%c:",st_ord_rqst_rply_data.c_buysell_flg);
		   	  	 			fn_userlog(c_ServiceName,"Val of l_amended_qty in BSE_Reco-DWLD - -1 :%ld:",st_ord_rqst_rply_data.l_amended_qty);
		   	  	 		  fn_userlog(c_ServiceName,"Val of l_pending_qty in BSE_Reco-DWLD - -1 :%ld:",st_ord_rqst_rply_data.l_pending_qty);
			  	   			fn_userlog(c_ServiceName,"Val of c_ordr_actn_cd in BSE_Reco-DWLD - -1 :%c:",st_ord_rqst_rply_data.c_ordr_actn_cd);
			  		 			fn_userlog(c_ServiceName,"Val of s_rply_cd in BSE_Reco-DWLD - -1 :%d:",st_ord_rqst_rply_data.s_rply_cd);
			  		 			fn_userlog(c_ServiceName,"Val of yeat in BSE_Reco-DWLD - -1 Y:%d:",st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_year);
			  		 			fn_userlog(c_ServiceName,"Val of mnth in BSE_Reco-DWLD - -1 M:%d:",st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_month);
			  		 			fn_userlog(c_ServiceName,"Val of day in BSE_Reco-DWLD - -1 D:%d:",st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_day);
			  		 			fn_userlog(c_ServiceName,"Val of hr in BSE_Reco-DWLD - -1 H:%d:",st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_hour); 
			  		 			fn_userlog(c_ServiceName,"Val of min in BSE_Reco-DWLD - -1 M:%d:",st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_min);  
			  					 fn_userlog(c_ServiceName,"Val of sec in BSE_Reco-DWLD - -1 S:%d:",st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_sec);  
								}

                if( c_spn_flg == 'N' ) /*** Ver 1.1 ***/
                {
		   	  		   i_ret_val = fn_bse_ord_confirmation( &st_ord_rqst_rply_data,	
																									c_xchng_cd,
																									c_pipe_id,
																									c_rout_str,	
																									c_trd_dt.arr,
																									c_skpord_ref,
																									i_dwnld_flg,
																									c_ServiceName,
																									c_err_msg );

				     		 if(i_ret_val == -1)
		     		 		 {
									if ( tpacall("SVC_ENQ_MSG", (char *)ptr_fml_Rbuf,  0, TPNOTRAN|TPNOREPLY) == -1)
									{
			  						fn_userlog(c_ServiceName,"S3980",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
									}
									fn_userlog(c_ServiceName,"Error -in call fn_bse_ord_confirmation for part cancellation ");
		      			 }
                }
                else if(c_spn_flg == 'S' ) /*** Ver 1.1 Starts Here ***/
                {
                 i_ret_val = fn_bse_spnord_confirmation( &st_ord_rqst_rply_data,
                                                    c_xchng_cd,
                                                    c_pipe_id,
                                                    c_rout_str,
                                                    c_trd_dt.arr,
                                                    c_skpord_ref,
                                                    i_dwnld_flg,
                                                    c_ServiceName,
                                                    c_err_msg );
                 if(i_ret_val == -1)
                 {
                  if ( tpacall("SVC_ENQ_MSG", (char *)ptr_fml_Rbuf,  0, TPNOTRAN|TPNOREPLY) == -1)
                  {
                    fn_userlog(c_ServiceName,"S3980",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
                  }
                  fn_userlog(c_ServiceName,"Error -in call fn_bse_ord_confirmation for part cancellation ");
                 }   
                }
                else
                {
                 fn_userlog(c_ServiceName,"Invalid Span Flag :%c: for :%s|%s|%s|%ld:",
                                            c_spn_flg,
                                            c_xchng_cd,
                                            c_pipe_id,
                                            c_trd_dt.arr,
                                            l_ordr_sqnc);
                } /*** Ver 1.1 Ends Here ***/
	 	      			if(i_ret_val == 0)
		      			{
									fn_userlog(c_ServiceName,"Afetr Successful execution of fn_bse_ord_confirmation for part cancellation ");

		    		  	}

		 						/*****************************************************/	

				  
              }  /** If condn for Normal Order Ends **/
						  /*************************************************************************/
							/** Handelling for IOC part cancellation starts **/
				 			/*************************************************************************/
				 			if (l_fxd_exctd_qty > 0  && c_fxb_ordr_type == 'I') /** This is only for IOC Order **/
              {
				 				SETLEN(sql_fxd_scrip_code);
				 				fn_userlog(c_ServiceName,"Inside IOC processing - part cancellation- To calculate executed qty");


								EXEC SQL 
						 					SELECT  sum(FXD_EXCTD_QTY),
							 								FXD_ORD_TYP,
															FXD_ORD_ACK, 
												 		  FXD_ORD_SEQ
						 					INTO    :sql_fxd_exctd_qty,
						      					  :sql_fxd_ord_typ,
						    					    :sql_fxd_ord_ack,
						       						:sql_fxd_ord_seq
		 				 					FROM  FXD_FO_XCHNG_TRD_DWNLD
		 				 					WHERE 	FXD_PIPE_ID = :c_pipe_id /* Added POST UAT */
											AND 	TO_CHAR(FXD_ORD_ACK) = trim(:c_fod_ack_nmbr)
		 				 					AND 	FXD_ORD_SEQ = (SELECT FXB_ORDR_SQNC 
																					 from FXB_FO_XCHNG_BOOK 
				  	 															 WHERE FXB_XCHNG_CD = :c_xchng_cd /* Added POST UAT */
																					 AND FXB_PIPE_ID = :c_pipe_id /* Added POST UAT */
																					 AND FXB_ORDR_RFRNC = trim(:c_fxb_ordr_rfrnc) 
				 																	 AND FXB_MDFCTN_CNTR =  decode(:c_fxb_ordr_type, 'I', :l_fxb_mdfctn_cntr,(:l_fxb_mdfctn_cntr -1) ))
						 					group by FXD_ORD_TYP, FXD_ORD_ACK, FXD_ORD_SEQ;
           
                if(DEBUG_MSG_LVL_3)
								{
									   fn_userlog(c_ServiceName,"Val of sql_fxd_exctd_qty  BSE_Reco-DWLD-IOC-cancel :%d:",sql_fxd_exctd_qty);
										 fn_userlog(c_ServiceName,"Val of sql_fxd_ord_typ in BSE_Reco-DWLD -IOC-cancel :%c:",sql_fxd_ord_typ);
										 fn_userlog(c_ServiceName,"Val of sql_fxd_ord_ack in BSE_Reco-DWLD -IOC-cancel :%lf:",sql_fxd_ord_ack);
										 fn_userlog(c_ServiceName,"Val of sql_fxd_ord_seq in BSE_Reco-DWLD -IOC-cancel :%lf:",sql_fxd_ord_seq);
								}

								if (SQLCODE != 0)
								{
				  				fn_userlog(c_ServiceName,"Error- In IOC exec qty calc- <%ld>", SQLCODE);
								}


								st_kill_min_fill_ordr_data.l_msg_typ = KILL_MIN_FILL_ORDR;
				 				st_kill_min_fill_ordr_data.ll_ordr_id = fn_swap_ulnglng(atoll(c_fod_ack_nmbr.arr));
				 				st_kill_min_fill_ordr_data.l_killed_qty = fn_swap_long(l_fod_ordr_tot_qty - sql_fxd_exctd_qty);
				 				/*st_kill_min_fill_ordr_data.l_ltid_id = fn_swap_long(sql_fxd_trd_no); */
				 				st_kill_min_fill_ordr_data.l_msg_tag = fn_swap_long(sql_fxd_ord_seq);

							 	fn_userlog(c_ServiceName,"Val of Kill_qty in BSE_Reco-DWLD - IOC- cancel :%ld:",st_kill_min_fill_ordr_data.l_killed_qty);
								fn_userlog(c_ServiceName,"Val of msg_tag in BSE_Reco-DWLD - IOC- cancel :%ld:",st_kill_min_fill_ordr_data.l_msg_tag);


			 				  if ( l_fod_ordr_tot_qty - sql_fxd_exctd_qty > 0 )
			  				{
   			   				fn_userlog(c_ServiceName,"Call To fn_bse_ioc_cancellation in Bat_Reco");
			  
                  if( c_spn_flg == 'N' )     /*** Ver 1.1 ***/
                  {
                   if(DEBUG_MSG_LVL_0)
                   {
                    fn_userlog(c_ServiceName,"Calling fn_bse_ioc_cancellation");
                   } 
			  				   i_ret_val = fn_bse_ioc_cancellation( &st_kill_min_fill_ordr_data,	
																							c_xchng_cd,
																							c_pipe_id,
																							c_rout_str,	
																							c_trd_dt.arr,
																							c_skpord_ref,
																							i_dwnld_flg,
																							c_ServiceName,
																							c_err_msg );
                  }
                  else if(c_spn_flg == 'S' )  /** Ver 1.1 Starts here **/
                  {
                   if(DEBUG_MSG_LVL_0)
                   {
                    fn_userlog(c_ServiceName,"Calling fn_bse_spnioc_cancellation");
                   }
                   i_ret_val = fn_bse_spnioc_cancellation( &st_kill_min_fill_ordr_data,
                                                  c_xchng_cd,
                                                  c_pipe_id,
                                                  c_rout_str,
                                                  c_trd_dt.arr,
                                                  c_skpord_ref,
                                                  i_dwnld_flg,
                                                  c_ServiceName,
                                                  c_err_msg );    
			 
			            }
                  else
                  {
                   fn_userlog(c_ServiceName,"Invalid Span Flag :%c: for :%s|%s|%s|%ld:",
                                            c_spn_flg,
                                            c_xchng_cd,
                                            c_pipe_id,
                                            c_trd_dt.arr,
                                            l_ordr_sqnc);
                  } /*** Ver 1.1 Ends Here ***/ 
		     					if(i_ret_val == -1)
		     					{
										if ( tpacall("SVC_ENQ_MSG", (char *)ptr_fml_Rbuf,  0, TPNOTRAN|TPNOREPLY) == -1)
										{
			  							fn_userlog(c_ServiceName,"S8980",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
										fn_userlog(c_ServiceName,"Error -Call To fn_bse_ioc_cancellation in Bat_Reco");
										}
		    					}
		    				  if(i_ret_val == 0)
		    					{
			 							fn_userlog(c_ServiceName,"After Successful Call To fn_bse_ioc_cancellation in Bat_Reco");

		     					}
		     			  }


              } /** If contn Ends - for IOC cancellation for part traded **/

				 			/*************************************************************************/
							/** Handelling for IOC part cancellation Ends **/
				 			/*************************************************************************/

           }
  				 /** If condtn Ends - for l_fxd_exctd_qty > 0 **/
					 /*************************************************************************/

        } /** End of if - for i_ord_dwld_cnt == 0 **/

	 			/************************************************************************************************/
	 			/***********  Logic to process cancellation requests rejectance -SLTP Starts ***********************************/

				if (c_fxb_ordr_type == 'T' && (i_ord_dwld_cnt > 0 || l_fxd_exctd_qty > 0 ) && c_cancel_acpt_flg == 'N' && i_exch_reject_status == 9999)
				{

	 				MEMSET(st_stoploss_ord_rply_data);
          /* st_stoploss_ord_rply_data.l_msg_typ = ;  */ /* msg_typ will be updated in fn for dwnld*/
         	st_stoploss_ord_rply_data.l_msg_tag =  fn_swap_long(l_fxb_ordr_sqnc);
          st_stoploss_ord_rply_data.s_rply_cd =  i_exch_reject_status; /* 9999 */
          st_stoploss_ord_rply_data.ll_transn_id = fn_swap_ulnglng(atoll(c_fod_ack_nmbr.arr));

				  if(DEBUG_MSG_LVL_3)
          {
					 fn_userlog(c_ServiceName,"Val of l_msg_tag -Cancellation Rejection- SLTP <%ld>", l_fxb_ordr_sqnc);
				   fn_userlog(c_ServiceName,"Val of i_exch_reject_status -Cancellation Rejection- SLTP <%d>", i_exch_reject_status);
					 fn_userlog(c_ServiceName,"Val of c_fod_ack_nmbr -Cancellation Rejection- SLTP <%s>", c_fod_ack_nmbr.arr);
				  }

          st_stoploss_ord_rply_data.st_timestmp_dmyhms.c_year = i_yyyy; 
          st_stoploss_ord_rply_data.st_timestmp_dmyhms.c_month= i_mm;
          st_stoploss_ord_rply_data.st_timestmp_dmyhms.c_day =  i_dd;
          st_stoploss_ord_rply_data.st_timestmp_dmyhms.c_hour = i_hh;
          st_stoploss_ord_rply_data.st_timestmp_dmyhms.c_min  = i_mi;
          st_stoploss_ord_rply_data.st_timestmp_dmyhms.c_sec  = i_ss;

          if( c_spn_flg == 'N' )     /*** Ver 1.1 ***/
          {
           if(DEBUG_MSG_LVL_0)
           {
            fn_userlog(c_ServiceName,"Calling fn_bse_ioc_cancellation");
           }
           i_ret_val =  fn_bsesltp_cnfrmtn(&st_stoploss_ord_rply_data,
                                         c_xchng_cd,
                                         c_pipe_id,
                                         c_rout_str,
                                         c_trd_dt.arr,
                                         c_skpord_ref,
                                         i_dwnld_flg,
                                         c_ServiceName,
                                         c_err_msg );

          }
          else if( c_spn_flg == 'S' ) /*** Ver 1.1 Starts Here ***/
          {
           if(DEBUG_MSG_LVL_0)
           {
            fn_userlog(c_ServiceName,"Calling fn_bse_spnsltp_cnfrmtn");
           }
            i_ret_val =  fn_bse_spnsltp_cnfrmtn(&st_stoploss_ord_rply_data,
                                                 c_xchng_cd,
                                                 c_pipe_id,
                                                 c_rout_str,
                                                 c_trd_dt.arr,
                                                 c_skpord_ref,
                                                 i_dwnld_flg,
                                                 c_ServiceName,
                                                 c_err_msg );
          }
          else
          {
           fn_userlog(c_ServiceName,"Invalid Span Flag :%c: for :%s|%s|%s|%ld:",
                                            c_spn_flg,
                                            c_xchng_cd,
                                            c_pipe_id,
                                            c_trd_dt.arr,
                                            l_ordr_sqnc);
          }/*** Ver 1.1 Ends Here ***/ 
 
		      if(i_ret_val == -1)
		      {
						if ( tpacall("SVC_ENQ_MSG", (char *)ptr_fml_Rbuf,  0, TPNOTRAN|TPNOREPLY) == -1)
						{
			  			fn_userlog(c_ServiceName,"S8130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
						}
		      }
			
				  if(i_ret_val == 0)
				  {
					 fn_userlog(c_ServiceName,"After Successful Call To fn_bse_ord_confirmation-for XCancellation Rejection- SLTP ");
				  }
        }
			  /************************************************************************************************/
	 		  /***********  Logic to process cancellation requests rejectance -SLTP Ends ***********************************/
      } /** Block to process records other than 'C' status -Ends **/


 			i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );

  		if ( i_trnsctn ==  -1 )
  		{
    		fn_errlog(c_ServiceName,"L31055", LIBMSG, c_err_msg);
    		fn_userlog ( c_ServiceName, "Error - in begin tran--1 --UPDATE QUEUED-prcs_flg " );
    		return ;
  		}
	
			EXEC SQL 
	 				UPDATE FXB_FO_XCHNG_BOOK_BTMP
	 				set FXB_PRCS_FLG ='Y'
	 				WHERE  FXB_XCHNG_CD = :c_xchng_cd
					AND FXB_PIPE_ID = :c_pipe_id
					AND FXB_ORDR_RFRNC = :c_fxb_ordr_rfrnc
	 				AND FXB_MDFCTN_CNTR = :l_fxb_mdfctn_cntr
	 				AND FXB_ORDR_SQNC = :l_fxb_ordr_sqnc
	 				AND FXB_PRCS_FLG ='N';


			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
	  	{
		  	fn_errlog(c_ServiceName,"S31080", SQLMSG, c_err_msg);
				fn_userlog(c_ServiceName,"Error- In updating FXB_BTMP for prcs flg -SQLCODE<%ld>", SQLCODE);
				tpterm();
			  return;
			}

      i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);
      if  ( i_ch_val == -1 )
 			{
 		   fn_errlog(c_ServiceName,"L31065", LIBMSG, c_err_msg);
  		 fn_userlog ( c_ServiceName, "Error - in commit fxb---UPDATE QUEUED-prcs_flg " );
   		 return ;
 		  }


	 		i_prcsd_cnt ++;
	 		fn_userlog(c_ServiceName,"Incremented processing record count to <%d>", i_prcsd_cnt +1 );
			/* ###########################     Logic Ends ################################################### */

	} /* End for while loop for -queued order processing */


	fn_userlog(c_ServiceName, " End of- BSE Reco- bat_fo_Brecon- Processed :%d: for queued orders in pipe - :%s:", i_prcsd_cnt, c_pipe_id );	

}  /** Main fn Ends **/

/******************************************************************************/
int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_FO_BRECON;

  if ( argc < 4 )
  {
    fn_userlog ( "bat_fo_Brecon","Usage : %s <Pipe Id> <cancel flag-Optional> ", argv[0] );
   
    return -1;
  }

  return 0;
}
void fn_bat_term (  int argc, char *argv[] )
{
   return ;
}

int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
  return 0;
}

