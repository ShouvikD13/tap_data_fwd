/************************************************************************************/
/*                                                                                  */
/*	Program			  :	BAT_FORCE_WTHDRW                                                */
/*																																									*/
/*	Input 		   	:												  																				*/
/*                  MTCH_ACT_NO                                                     */
/*								  STCK_CD																											    */
/*	Output			  :										  																						*/	
/*                  Integer 1 on success and 0 on failure                           */  
/*                                                                                  */
/*  Description   : To place System bulk withdraw requests for pledged shares	      */
/*  Log           : version 1.0 31-05-2006 Vikash Kumar                             */															
/*                                                                                  */
/*                  Before Running bat_force_wthdrw for first time we need to       */
/*                  manually delete all the records from TBP_TMP_BLK_PLG table      */
/*                  and TFR_TMP_FRC_REV 																						*/
/*								: ver 1.1 IBM migration Ranjit                                    */
/*                : Ver 1.2 Bulk Withdrawal New Requirements ( CRCON38802 )         */ 
/*                : Ver 1.3 Margin Pledge (Tanmay Patel)                            */
/************************************************************************************/
#include "fn_collateral.h"
#include <fn_read_debug_lvl.h>	/* ver 1.1 */
int ii;
#define INIT(x,y)  for(ii=0; ii< y; ii++) x[ii] =0;   /* Initialize  Macro */
#define TOTAL_FML 10
#define BUF_MULTIPLY 1
#define MAX 10

int main (int argc, char* argv[])
{
    /***********************    Declaration of local variables   **********************/ 
    int i,j;
    int i_cnt;

    char c_ServiceName[33];
    char c_channel[4];
    char c_clm_mtch_accnt[11]; 
    char c_stck_cd[7];
    char c_oprn_typ = 'W';
    char c_usr_id[7];
    char c_force_flag = 'F';  /***** This flag is passed to sfo_plc_plg for Forceful Withdraw *****/
    char c_rowid[19];

    char c_err_msg[256];
    char c_msg[256 ];
    char c_tag[32];
    char c_null_msg [18];

    int i_err[TOTAL_FML];
    int i_trnsctn = 0;
    int i_return = 0;
    int i_err_flag = 0;

    long l_tfr_count = 0;
    long l_ctr_tfr = 0;

    long l_acnt_id;
    long l_sssn_id;
		long li_run_no;

    
    long int li_Obuf_len;

    /*******************       Pointer to Input and Output FML Buffer     ********************/
    FBFR32 *ptr_fml_Ibuf = (FBFR32 *)NULL;        /*   Pointer to FML Input Buffer  */ 
    FBFR32 *ptr_fml_Obuf = (FBFR32 *)NULL;        /*   Pointer to FML Output Buffer */   
    /***********************      Declaration of Host variables    ***************************/

    EXEC SQL BEGIN DECLARE SECTION;
    char sql_dp_id[8+1];
    char sql_dp_clnt_id[8+1];
    long sql_qty_plg = 0;
		varchar sql_err_msg[256];
    EXEC SQL END DECLARE SECTION;


   /*********************     Initialise the strings with null characters    *****************/
    NULLCHAR(c_ServiceName);
    NULLCHAR(c_err_msg);
    NULLCHAR(c_tag);
    NULLCHAR(c_msg);


    strcpy( c_ServiceName,"bat_force_wthdrw");
		INITBATDBGLVL(argv[0]);	/* ver 1.1 */
		
		INIT(i_err,TOTAL_FML);
		strcpy(c_null_msg,"\0");

   /*******   Check for number of command line inputs if it is not equal to 6 then error exit *******/
		if(argc != 7) /* Ver 1.2 6 to 7 */
		{
       fn_userlog(c_ServiceName, "Usage: bat_frce_wthdrw <Config File> <Exchange Cd> <Pipe Id>\
<Stock code> <Match Account><Run No>");
       exit(-1);
    }

    strcpy( c_msg, "STAGE 1.0 Starting BAT_FORCE_WTHDRW...");

    /************************          Make entry in Userlog              ***************************/
    fn_userlog( c_ServiceName,c_msg);
    fn_userlog( c_ServiceName,"Input to Batch Program are : ");
    fn_userlog( c_ServiceName,"Config File :%s:",argv[1]);
    fn_userlog( c_ServiceName,"Exchange Code :%s:" ,argv[2]);
    fn_userlog( c_ServiceName,"Pipe Id :%s:"       ,argv[3]);
    fn_userlog( c_ServiceName,"Stock Code :%s:",argv[4]);
    fn_userlog( c_ServiceName,"Match Account :%s:",argv[5]);

    sprintf(c_tag,"%s_%s",c_ServiceName,argv[1]);

    strcpy(c_stck_cd, argv[4]);
    strcpy(c_clm_mtch_accnt, argv[5]);
		li_run_no = atoi( argv[6] );  /* ver 1.2 */

    init_bat(c_ServiceName,argv[2],argv[3]);

   	if(DEBUG_MSG_LVL_3)				/* ver 1.1 */
		{ 
    	fn_userlog(c_ServiceName,"Batch Initialised");
			fn_userlog( c_ServiceName,"Run Number is :%ld:", li_run_no );
   	} 

		sprintf( c_msg,"bat_force_wthdrw for run number :%ld:", li_run_no );

		fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); /* Ver 1.2 */


    /**********  Check if the Client match account is input as A( All ) or * ( All )  ************/ 
    if( strcmp(c_clm_mtch_accnt,"A")==0 || strcmp(c_clm_mtch_accnt,"*")==0 )
    {
        strcpy(c_clm_mtch_accnt,"%"); 
    }

    /**********  Check if the Stock Code is input as A( All ) or * ( All )  ************/ 
    if( strcmp(c_stck_cd,"A")==0 || strcmp(c_stck_cd,"*")==0 )
    {
        strcpy(c_stck_cd,"%");
    }  

    /*****************************      Begin a new Transaction         *******************************/  
    i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
    if ( i_trnsctn == -1 )                         
    {
        fn_errlog( c_ServiceName, "S31005", TPMSG , c_err_msg  );
        fn_userlog(c_ServiceName, "Error in Begin Transaction");
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				strcpy(	c_err_msg,"Contact System Support" ); /* Ver 1.2 */
				fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); /* Ver 1.2 */
        destroy_bat();
    }


    /****** If the Particular stock code is given and Particular Match account is also given ******/

    if( (strcmp(c_stck_cd,"%") != 0) && (strcmp(c_clm_mtch_accnt,"%") != 0) ) 
    {
        EXEC SQL
        INSERT INTO TFR_TMP_FRC_REV
        (
         TFR_CLM_MTCH_ACCNT, 
         TFR_STCK_CD,
         TFR_DP_ID,
         TFR_DP_CLNT_ID,
         TFR_TIFP_QTY,
         TFR_PRCS_FLG,
				 TFR_DATE,
				 TFR_RUN_NO
        )
        (
         SELECT  
         DBD_CLM_MTCH_ACCNT,
         DBD_STCK_CD, 
         DBD_DP_ID, 
         DBD_DP_CLNT_ID,
         /**(DBD_TIFP_QTY-DBD_REV_REQ_QTY),** Ver 1.3 **/  /* Ver 1.2 added DBD_REV_REQ_QTY */
         (DBD_SAM_BLCKD_QTY-DBD_REV_REQ_QTY), /** Ver 1.3 **/ 
         'N',
         trunc(sysdate),                  /* Ver 1.2 */
         :li_run_no                       /* Ver 1.2 */
         FROM   DBD_DP_BLCK_DTLS 
         WHERE DBD_CLM_MTCH_ACCNT = :c_clm_mtch_accnt
         AND DBD_STCK_CD = :c_stck_cd 
         AND DBD_SAM_BLCKD_QTY-DBD_REV_REQ_QTY > 0 /** Ver 1.3 **/ 
         /* AND DBD_TIFP_QTY > 0 
          * AND DBD_REV_REQ_QTY = 0 Ver 1.2 Commented *
				 AND DBD_REV_REQ_QTY != DBD_TIFP_QTY * Ver 1.2 *
         AND DBD_REV_COV_QTY = 0 ** Commented in Ver 1.3 **/ /* So that if it is rerun then the same records are not picked again. */
        );

        if( SQLCODE !=0 )
        {
            fn_errlog( c_ServiceName, "S31010", SQLMSG, c_err_msg  );
            fn_userlog(c_ServiceName, "Error in Inserting in Table: TFR_FRC_REV");
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						strcpy( c_err_msg,"Contact System Support" ); /* Ver 1.2 */
            fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); /* Ver 1.2 */
            destroy_bat();
        }
    }
    else if( (strcmp(c_stck_cd,"%") != 0) && (strcmp(c_clm_mtch_accnt,"%") == 0) )
    {
		/****** If the Particular Stock code is given but Particular Match Account is not given *****/   
        EXEC SQL
        INSERT INTO TFR_TMP_FRC_REV
        (
         TFR_CLM_MTCH_ACCNT,
		  	 TFR_STCK_CD,
         TFR_DP_ID,
         TFR_DP_CLNT_ID,
         TFR_TIFP_QTY,
         TFR_PRCS_FLG,
				 TFR_DATE,
         TFR_RUN_NO
        ) 
        (
         SELECT  
         DBD_CLM_MTCH_ACCNT,
         DBD_STCK_CD,
         DBD_DP_ID, 
         DBD_DP_CLNT_ID,
         /** (DBD_TIFP_QTY-DBD_REV_REQ_QTY), ** Ver 1.3 **/   /* Ver 1.2 added DBD_REV_REQ_QTY */
         (DBD_SAM_BLCKD_QTY-DBD_REV_REQ_QTY), /** Ver 1.3 **/
         'N',                            
         trunc(sysdate),                   /* Ver 1.2 */
         :li_run_no                        /* Ver 1.2 */
         FROM   DBD_DP_BLCK_DTLS 
         WHERE 
         DBD_STCK_CD = :c_stck_cd 
         AND DBD_SAM_BLCKD_QTY - DBD_REV_REQ_QTY > 0 /** Ver 1.3 **/
         /** AND DBD_TIFP_QTY > 0 
          * AND DBD_REV_REQ_QTY = 0 Ver 1.2 Commented *
				 AND DBD_REV_REQ_QTY != DBD_TIFP_QTY * Ver 1.2 *
         AND DBD_REV_COV_QTY = 0 ** Commented in ver 1.3 **/ /* So that if it is rerun then the same records are not picked again. */
        );

        if( SQLCODE !=0 )
        {
            fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg  );
            fn_userlog(c_ServiceName, "Error in Inserting in Table: TMP_FRC_REV");
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						strcpy( c_err_msg,"Contact System Support" ); /* Ver 1.2 */
            fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); /* Ver 1.2 */
            destroy_bat();
        }
    }
    else if( (strcmp(c_stck_cd,"%") == 0) && (strcmp(c_clm_mtch_accnt,"%") != 0) ) 
    {
		/****** If the Particular Stock code is not given but Particular Match Account is given *****/ 
        EXEC SQL
        INSERT INTO TFR_TMP_FRC_REV
        (
         TFR_CLM_MTCH_ACCNT,
         TFR_STCK_CD,
         TFR_DP_ID,
         TFR_DP_CLNT_ID,
         TFR_TIFP_QTY,
         TFR_PRCS_FLG,
				 TFR_DATE,
         TFR_RUN_NO
        )
        (
         SELECT 
         DBD_CLM_MTCH_ACCNT,
         DBD_STCK_CD,
         DBD_DP_ID,
         DBD_DP_CLNT_ID,
         /** (DBD_TIFP_QTY-DBD_REV_REQ_QTY), ** Ver 1.3 **/  /* Ver 1.2 added DBD_REV_REQ_QTY */
         (DBD_SAM_BLCKD_QTY-DBD_REV_REQ_QTY), /** Ver 1.3 **/
         'N',                          
         trunc(sysdate),                  /* Ver 1.2 */
         :li_run_no                       /* Ver 1.2 */
         FROM   DBD_DP_BLCK_DTLS
         WHERE  DBD_CLM_MTCH_ACCNT  = :c_clm_mtch_accnt
         AND DBD_SAM_BLCKD_QTY - DBD_REV_REQ_QTY > 0 /** Ver 1.3 **/
         /* AND DBD_TIFP_QTY > 0 
          * AND DBD_REV_REQ_QTY = 0 Ver 1.2 Commented *
				 AND DBD_REV_REQ_QTY != DBD_TIFP_QTY * Ver 1.2 *
         AND DBD_REV_COV_QTY = 0  ** Commented in Ver 1.3 **/ /* So that if it is rerun then the same records are not picked again. */
        );

        if( SQLCODE !=0 )
        {
            fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg  );
            fn_userlog(c_ServiceName, "Error in Inserting in  Table: TMP_FRC_REV");
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						strcpy( c_err_msg,"Contact System Support" ); /* Ver 1.2 */
            fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); /* Ver 1.2 */
            destroy_bat();
        }
    }
    else if( (strcmp(c_stck_cd,"%") == 0) && (strcmp(c_clm_mtch_accnt,"%") == 0) ) 
    {
 		/****** If the Particular Stock is not given and Particular Match Account is also not given ****/
        EXEC SQL
        INSERT INTO TFR_TMP_FRC_REV
        (
         TFR_CLM_MTCH_ACCNT,
         TFR_STCK_CD,
         TFR_DP_ID,
         TFR_DP_CLNT_ID,
         TFR_TIFP_QTY,
         TFR_PRCS_FLG,
				 TFR_DATE,
				 TFR_RUN_NO
        ) 
        (
         SELECT 
         DBD_CLM_MTCH_ACCNT,
         DBD_STCK_CD,
         DBD_DP_ID,
         DBD_DP_CLNT_ID,
         /** (DBD_TIFP_QTY-DBD_REV_REQ_QTY), ** Ver 1.3 **/ /* Ver 1.2 added DBD_REV_REQ_QTY */
         (DBD_SAM_BLCKD_QTY-DBD_REV_REQ_QTY), /** Ver 1.3 **/
         'N',                            
				 trunc(sysdate),                 /* Ver 1.2 */
				 :li_run_no                      /* Ver 1.2 */
         FROM   DBD_DP_BLCK_DTLS
         WHERE DBD_SAM_BLCKD_QTY - DBD_REV_REQ_QTY > 0 /** Ver 1.3 **/    
         /* WHERE  DBD_TIFP_QTY > 0 
         * AND    DBD_REV_REQ_QTY = 0 Ver 1.2 Commented *
				 AND DBD_REV_REQ_QTY != DBD_TIFP_QTY * Ver 1.2 *
         AND    DBD_REV_COV_QTY = 0 * Commented in Ver 1.3 **//* So that if it is rerun then the same records are not picked again. */
        ); 

        if( SQLCODE !=0 )
        {
            fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg  );
            fn_userlog(c_ServiceName, "Error in Inserting Record in  Table TFR_TMP_FRC_REV");
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						strcpy( c_err_msg,"Contact System Support" ); /* Ver 1.2 */
            fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); /* Ver 1.2 */
            destroy_bat();
        } 
    }
		else
		{
        fn_errlog( c_ServiceName, "S31030", "", c_err_msg  );
        fn_userlog(c_ServiceName, "Error in Input");
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				strcpy( c_err_msg,"Error in Input" ); /* Ver 1.2 */
        fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); /* Ver 1.2 */
        destroy_bat();
		}
    /********************     Count rows Inserted in TFR_TMP_FRC_REV       ************************/
    l_tfr_count = 0;   

    EXEC SQL
    SELECT COUNT(*) 
		INTO :l_tfr_count
    FROM TFR_TMP_FRC_REV     
    WHERE TFR_PRCS_FLG = 'N'; 

    if( SQLCODE !=0 )
    {
         fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg  );
         fn_userlog(c_ServiceName, "Error in Counting records of Table TFR_TMP_FRC_REV");
         fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				 strcpy( c_err_msg,"Contact System Support" ); /* Ver 1.2 */
         fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); /* Ver 1.2 */
         destroy_bat();
    }
    /****** If there are no records inserted in TFR_TMP_FRC_REV destroy batch *******/  
    if (l_tfr_count == 0)
    {
        strcpy(c_err_msg,"No Data To Process ....");
        fn_userlog(c_ServiceName,c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				strcpy( c_err_msg,"No Data To Process ...." ); /* Ver 1.2 */
        fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); /* Ver 1.2 */
        destroy_bat();
    }

    fn_userlog(c_ServiceName,"Total records in TFR table to be processd : %ld ", l_tfr_count);

   /****** A Log Table of TFR_TMP_FRC_REV is maintained for BULK_PLEDGE ******/ 

   /*********    Commit the Transaction in case of error abort transaction and destroy batch ********/
    if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 ) 
    {
        fn_errlog( c_ServiceName, "S31040",TPMSG ,c_err_msg);
        fn_userlog(c_ServiceName, "Error in Commiting Transaction : %s ","TFL_FRC_REV_LOG");
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				strcpy( c_err_msg,"Contact System Support" ); /* Ver 1.2 */
        fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); /* Ver 1.2 */
        destroy_bat();
    }

		/****************          Allocate Memory to input and output buffer              *****************/
		/****************   If error in allocation write in error log and destroy batch    *****************/

 		ptr_fml_Ibuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN * 2);

 		if (ptr_fml_Ibuf == NULL)
 		{
      fn_errlog(c_ServiceName, "S31045", TPMSG, c_err_msg);
      fn_userlog(c_ServiceName, "Error in alloc ptr_fml_Ibuf ");
			strcpy( c_err_msg,"Contact System Support" ); /* Ver 1.2 */
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); /* Ver 1.2 */
      destroy_bat();
 		}

 		ptr_fml_Obuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

 		if (ptr_fml_Obuf == NULL)
 		{
      fn_errlog(c_ServiceName, "S31050", TPMSG, c_err_msg);
      fn_userlog(c_ServiceName, "Error in alloc ptr_fml_Obuf ");
      tpfree((char *)ptr_fml_Ibuf);
			strcpy( c_err_msg,"Contact System Support" ); /* Ver 1.2 */
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); /* Ver 1.2 */
      destroy_bat();
 		}

    for( l_ctr_tfr = 0; l_ctr_tfr < l_tfr_count; l_ctr_tfr++ )
    {
       /*********    Fetch one by one record from TFR_TMP_FRC_REV table into corresponding variables   *********/ 
       fn_userlog(c_ServiceName,"Fetching Record no : %ld of TFR_TMP_FRC_REV",l_ctr_tfr + 1);

       EXEC SQL
       SELECT TFR_CLM_MTCH_ACCNT, 
              TFR_STCK_CD, 
              TFR_DP_ID, 
              TFR_DP_CLNT_ID,
              TFR_TIFP_QTY,
              rowid
       INTO   :c_clm_mtch_accnt, 
              :c_stck_cd,
              :sql_dp_id,
              :sql_dp_clnt_id,
              :sql_qty_plg,
              :c_rowid
       FROM   TFR_TMP_FRC_REV
       WHERE  TFR_PRCS_FLG = 'N'
       AND    ROWNUM < 2;

       if( SQLCODE !=0 )
       {
           fn_errlog( c_ServiceName, "S31055",TPMSG ,c_err_msg);
           fn_userlog(c_ServiceName, "Error in Fetching Record : %s ","TFR_TMP_FRC_REV");
					 strcpy( c_err_msg,"Contact System Support" ); /* Ver 1.2 */
           fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); /* Ver 1.2 */
           destroy_bat();
       }

       fn_userlog( c_ServiceName, "Match Account :%s:"   ,c_clm_mtch_accnt);
       fn_userlog( c_ServiceName, "Dp Id :%s:"           ,sql_dp_id       );
       fn_userlog( c_ServiceName, "Dp Client Id :%s:"    ,sql_dp_clnt_id  );
       fn_userlog( c_ServiceName, "Stock code :%s:"      ,c_stck_cd       );
       fn_userlog( c_ServiceName, "Withdrawn Qty  :%ld:" ,sql_qty_plg     );

       /**************************          Initialize Input and Output Buffer        *********************/

       Finit32(ptr_fml_Ibuf, (FLDLEN32) Fsizeof32(ptr_fml_Ibuf));
       Finit32(ptr_fml_Obuf, (FLDLEN32) Fsizeof32(ptr_fml_Obuf));

       strcpy(c_channel, "SYS");
       strcpy(c_usr_id, "system");
       l_sssn_id = 0;

       /*************  Add the input to be passed to SFO_PLC_PLG service in Input Buffer  ************/ 

			 i_err [0] = Fadd32(ptr_fml_Ibuf,FFO_USR_ID        ,c_usr_id ,0);
			 i_err [1] = Fadd32(ptr_fml_Ibuf,FFO_EBA_MTCH_ACT_NO        ,c_clm_mtch_accnt ,0);
			 i_err [2] = Fadd32(ptr_fml_Ibuf,FFO_SSSN_ID        ,(char*)&l_sssn_id,0);
			 i_err [3] = Fadd32(ptr_fml_Ibuf,FFO_OPT_TYP       ,(char*)&c_oprn_typ ,0);
			 i_err [4] = Fadd32(ptr_fml_Ibuf,FFO_STCK_CD        ,c_stck_cd ,0);
			 i_err [5] = Fadd32(ptr_fml_Ibuf,FFO_DP_CLNT_ID     ,sql_dp_clnt_id ,0);
			 i_err [6] = Fadd32(ptr_fml_Ibuf,FFO_DPID           ,sql_dp_id ,0);
			 i_err [7] = Fadd32(ptr_fml_Ibuf,FFO_ORD_TOT_QTY  ,(char*)&sql_qty_plg ,0);
			 i_err [8] = Fadd32(ptr_fml_Ibuf,FFO_CHANNEL        ,c_channel,0);
       i_err [9] = Fadd32(ptr_fml_Ibuf,FML_PLG_FLG        ,(char*)&c_force_flag,0);

       /********  Check if there is any error in adding to Input buffer if any then free Input    *********/
       /********                       and Output Buffer and Destroy Batch                        *********/ 

			 for ( i_cnt=0; i_cnt < MAX; i_cnt++ )
			 {
			  	if ( i_err[ i_cnt ] == -1 )
			  	{
		    		sprintf(c_msg, "ERROR : At FML no :%d:",i_cnt);
			  		fn_errlog( c_ServiceName,"S31060",Fstrerror32(i_err[i_cnt]),c_err_msg );
			  		fn_userlog(c_ServiceName,c_msg);
		 			  tpfree((char *)ptr_fml_Ibuf);
		 			  tpfree((char *)ptr_fml_Obuf);
						strcpy( c_err_msg,"Contact System Support" ); /* Ver 1.2 */
            fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); /* Ver 1.2 */
			  		destroy_bat();
			  	}
			 }
					
		 	i_return = tpcall( "SFO_PLC_PLG",(char*)ptr_fml_Ibuf,0,(char**)&ptr_fml_Obuf,&li_Obuf_len,0); 
		 	if( i_return == -1)
		 	{
          fn_userlog(c_ServiceName, "Error in Service Call to SFO_PLC_PLG :");
          /* fn_errlog(c_ServiceName, "S31065", TPMSG, c_err_msg); Ver 1.2 Comment */
				
					/* Ver 1.2 Begins */	

					memset(c_err_msg,0,sizeof(c_err_msg));
					memset(sql_err_msg.arr,0,sizeof(sql_err_msg.arr));
		
				  if( Fget32( ptr_fml_Obuf, FFO_ERR_MSG, 0,c_err_msg, 0 ) == -1 )
          {
              fn_errlog(c_ServiceName,"S31070",Fstrerror32(Ferror32),c_msg);
          }

					strcat( c_err_msg , c_clm_mtch_accnt );


          fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
          fn_userlog(c_ServiceName,c_err_msg);	

					strcpy(sql_err_msg.arr,c_err_msg);
					SETLEN(sql_err_msg);

					/* Ver 1.2 Ends */

					i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

					if ( i_trnsctn == -1 )
					{
							fn_userlog(c_ServiceName, "Error in Begining Transaction :");
							fn_errlog( c_ServiceName, "S31075", TPMSG , c_err_msg  );
							tpfree((char *)ptr_fml_Ibuf);
							tpfree((char *)ptr_fml_Obuf);
							strcpy( c_err_msg,"Contact System Support" ); /* Ver 1.2 */
              fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); /* Ver 1.2 */
							destroy_bat();
					}

          EXEC SQL
          UPDATE TFR_TMP_FRC_REV
          SET    TFR_PRCS_FLG = 'F',
								 TFR_ERR_DESC = :sql_err_msg   /* Ver 1.2 addition */
          WHERE  rowid = :c_rowid;

          if( SQLCODE !=0 )
          {
              fn_errlog( c_ServiceName, "S31080", SQLMSG, c_err_msg  );
              fn_userlog(c_ServiceName, "Error in Updating Process Flag to Fail in Table : %s ","TFR_TMP_FRC_REV");
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		 			    tpfree((char *)ptr_fml_Ibuf);
		 			    tpfree((char *)ptr_fml_Obuf);
							strcpy( c_err_msg,"Contact System Support" ); /* Ver 1.2 */
              fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); /* Ver 1.2 */
		 		      destroy_bat();	
          }
          
          if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
          {
              fn_errlog( c_ServiceName, "S31085",TPMSG ,c_err_msg);
              fn_userlog(c_ServiceName, "Error in Commiting Transaction for Table : %s ","TFR_TMP_FRC_REV");
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		 			    tpfree((char *)ptr_fml_Ibuf);
		 			    tpfree((char *)ptr_fml_Obuf);
							strcpy( c_err_msg,"Contact System Support" ); /* Ver 1.2 */
              fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); /* Ver 1.2 */
		 		      destroy_bat();	
          }
      		fn_userlog(c_ServiceName,"Failed for Match- Stck :%s:%s: ",c_clm_mtch_accnt,c_stck_cd);
          continue;
      }
      i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

      if ( i_trnsctn == -1 )
      {
          fn_userlog(c_ServiceName, "Error in Begining Transaction :");
          fn_errlog( c_ServiceName, "S31090", TPMSG , c_err_msg  );
          tpfree((char *)ptr_fml_Ibuf);
          tpfree((char *)ptr_fml_Obuf);
					strcpy( c_err_msg,"Contact System Support" ); /* Ver 1.2 */
          fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); /* Ver 1.2 */
          destroy_bat();
      }
			/*********************** Update TFR_TMP_FRC_REV to 'Y' **********************/
      EXEC SQL
      UPDATE TFR_TMP_FRC_REV
      SET    TFR_PRCS_FLG = 'Y'
      WHERE  rowid = :c_rowid;

      if( SQLCODE !=0 )
      {
          fn_errlog( c_ServiceName, "S31095", SQLMSG, c_err_msg  );
          fn_userlog(c_ServiceName, "Error in Updating Process Flag to Yes in Table : %s ","TFR_TMP_FRC_REV");
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpfree((char *)ptr_fml_Ibuf);
          tpfree((char *)ptr_fml_Obuf);
					strcpy( c_err_msg,"Contact System Support" ); /* Ver 1.2 */
          fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); /* Ver 1.2 */
          destroy_bat(); 
      }

			fn_userlog(c_ServiceName, " Updated Process Flag in TFR_TMP_FRC_REV now going to commit ");

      EXEC SQL
      INSERT INTO TBP_TMP_BLK_PLG 
      (
       TBP_CLM_MTCH_ACCNT,
       TBP_STCK_CD,
       TBP_DP_ID,
       TBP_DP_CLNT_ID,
       TBP_TIFP_QTY,
		   TBP_PRCS_FLG
      )
      (
       SELECT 
       TFR_CLM_MTCH_ACCNT,
       TFR_STCK_CD,
       TFR_DP_ID,
       TFR_DP_CLNT_ID,
       TFR_TIFP_QTY,
		   'N'
       FROM TFR_TMP_FRC_REV 
       WHERE ROWID = :c_rowid
      );

      if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
      {
          fn_errlog( c_ServiceName, "S31100",TPMSG ,c_err_msg);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpfree((char *)ptr_fml_Ibuf);
          tpfree((char *)ptr_fml_Obuf);
					strcpy( c_err_msg,"Contact System Support" ); /* Ver 1.2 */
          fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); /* Ver 1.2 */
          destroy_bat(); 
      }

      fn_userlog(c_ServiceName,"Succesful for Match-Stck :%s:%s: ",c_clm_mtch_accnt,c_stck_cd);
      
    }/**End of For loop**/

    /**********    Updated Successfully, means Successful completion of the Program    *************/
    /************         Free the Input and Output Buffer and Destroy the Batch        **************/

    fn_userlog(c_ServiceName, "ALL DONE ");

    tpfree ( ( char * ) ptr_fml_Ibuf );
    tpfree ( ( char * ) ptr_fml_Obuf );
		strcpy( c_err_msg,"All Done" ); /* Ver 1.2 */
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); /* Ver 1.2 */
    destroy_bat();
}
