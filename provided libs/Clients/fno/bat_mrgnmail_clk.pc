/*******************************************************************************/
/*   Service       : bat_mrgnmail_clk.pc 		                                   */
/*                                                                             */
/*   Purpose       : Bulk upload of FNO Margin Details to click database tables*/
/*                                                                             */
/*   Input Param   : For date                                                  */
/*                                                                             */
/*   Output        : Success/Failure                                           */
/*                                                                             */
/*   Author        : Sandeep |  Infotech                                       */
/*                                                                             */
/*   Date          : 15-01-2009                                                */
/*                                                                             */
/*   Version       : 1.0      Release                                          */
/*                 : 1.1      CRCON44062 (ADM) Changes            Sachin Birje */
/*								 : 1.2	02-02-2012	CR-ISEC14-22552		Sandeep Patil					 */
/*								 : 1.3	04-04-2012	BSE-NSE Combined mrgn stmnt		Sandip		 */
/*                 : 1.4  21-03-2014  FDR Module Changes           Sachin Birje*/
/*                 : 1.5  19-Sep-2016 Margin reporting with Eod Mtm Bhupendra Malik                     */
/*                 : 1.6  24-Jul-2017 Margin statement changes for  Equity Allocation -  Tanmay Patel   */
/*                 : 1.7  12-Jan-2018 Margin statement Rerun   -  Tanmay Patel                          */
/*                 : 1.8  13-Jan-2018 FDR Amount Changes       -  Tanmay Patel                          */
/*                 : 1.9  26-Feb-2018 T Day changes for Margin Statement Generation   -  Tanmay Patel   */
/*                 : 2.0  25-Jun-2018 Margin Statement Changes from Exchange          -  Tanmay Patel   */ 
/*                 : 2.1  21-Feb-2022 Timeout increasedd                              -  Sandip Tambe   */ 
/********************************************************************************************************/
#include <stdio.h>     
#include <stdlib.h>   
#include <sqlca.h>   
#include <atmi.h>   
#include <fml32.h>
#include <Usysflds.h> 
#include <fml_def.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fml_rout.h>
#include <fn_ddr.h>
#include <eba.h>
#include <string.h>
#include <fn_read_debug_lvl.h>

#define MAX_REC 2000
#define LOCAL_TRAN_TIMEOUT 1800   /** Ver 2.1 changed to 1800 from 600 **/

FBFR32    *ptr_fml_Sbuffer;
FBFR32    *ptr_fml_Rbuffer;

long  l_bufferlength;
int	  i_rows_fetched;
long  li_len_tobuf;
int   i_count_fmd;
int   i_seq_num;
int   i_count_fdr;  /** Ver 1.4 **/
int   i_count_dbd;  /** Ver 1.5 **/
int   i_cnt = 0;       /** Ver 1.7 **/
char  c_ServiceName[33];
char	c_trd_dt[12];
char  c_xchng_cd[4] = {'\0'};
char  c_msg[256];
char  c_errmsg [ 256 ];

int   i_max_rec_per_fetch = MAX_REC;
int   i_ret_val;
int		i_ch_val;
int		i_err[10];
int   i_mode;

struct fno_mrgn_dtls
{
  char   sql_fmd_clm_mtch_accnt[20+1];
  char   sql_fmd_clnt_nm[50+1];
  char   sql_fmd_email_id1[100+1];
  char   sql_fmd_email_id2[100+1];
  char   sql_fmd_trd_dt [24+1];
  double sql_fmd_plg_amt;
  double sql_fmd_pl_amt;
  double sql_fmd_ttl_amt;
  char   sql_fmd_prvtrd_dt[24+1];
  double sql_fmd_prvplg_amt;
  double sql_fmd_prvpl_amt;
  double sql_fmd_prvttl_amt;
  double sql_fmd_alctd_amt;
  double sql_fmd_bft_amt;
  double sql_fmd_prvalctd_amt;
  double sql_fmd_prvbft_amt;
  double sql_fmd_opt_mrgn;
  double sql_fmd_fut_mrgn;
  double sql_fmd_prvopt_mrgn;
  double sql_fmd_prvfut_mrgn;
  double sql_fmd_outstndng;
  double sql_fmd_prv_outstndng;
  double sql_fmd_payio;
  double sql_fmd_prv_payio;
  char   sql_fmd_prcsng_tm [24+1];
  long   l_fmd_rcrd_id;
	long	 l_fmd_seq_no;
  char   sql_fmd_filename[50+1];  
	char	 sql_fmd_doc_typ[4+1];
  double sql_fmd_prvisec_mrgn_amt;          /*** Ver 1.1 ***/
  double sql_fmd_isec_mrgn_amt;             /*** Ver 1.1 ***/
	double sql_fmd_exch_mrgn;						/***  Ver 1.2 ***/
	double sql_fmd_exch_total_mrgn;			/***	Ver	1.2	***/
	double sql_fmd_exch_expsr;					/***  Ver 1.2 ***/
	double sql_fmd_exch_shrt_fll;				/***  Ver 1.2 ***/
	double sql_fmd_isec_reqmnt;					/***  Ver 1.2 ***/
	double sql_bse_fmd_exch_mrgn;						/***  Ver 1.3 ***/
	double sql_bse_fmd_exch_total_mrgn;			/***	Ver	1.3	***/
	double sql_bse_fmd_exch_expsr;					/***  Ver 1.3 ***/
	double sql_bse_fmd_exch_shrt_fll;				/***  Ver 1.3 ***/
  double sql_bse_fmd_payio;								/***  Ver 1.3 ***/
  double sql_bse_fmd_opt_mrgn;						/***  Ver 1.3 ***/
  double sql_bse_fmd_fut_mrgn;						/***  Ver 1.3 ***/
  double sql_bse_fmd_outstndng;						/***  Ver 1.3 ***/
  double sql_bse_fmd_pl_amt;							/***  Ver 1.3 ***/
  double sql_fmd_fdr_amt;                 /***  Ver 1.4 ***/
	double sql_fmd_nwb_amt;                 /***  Ver 1.5 ***/
	double sql_fmd_eq_plg_amt;              /***  Ver 1.5 ***/
	double sql_fmd_tot_coll_amt;            /***  Ver 1.5 ***/
  double sql_fmd_eq_nse_plg_amt;          /***  Ver 1.6 ***/ 
  double sql_fmd_eq_bse_plg_amt;          /***  Ver 1.6 ***/
  double sql_fmd_eq_free_plg_amt;         /***  Ver 1.6 ***/
  double sql_fmd_exch_del_mrgn;           /** Ver 2.0 **/
  double sql_fmd_mtm_loss;                /** Ver 2.0 **/
  double sql_fmd_bse_exch_del_mrgn;       /** Ver 2.0 **/
  double sql_fmd_bse_mtm_loss;            /** Ver 2.0 **/
  double sql_fmd_exch_prmum;              /** Ver 2.0 **/
};

/**** Ver 1.4 Starts Here *****/
struct fno_fdr_dtls 
{
 char   sql_fdr_mtch_accnt[10+1];
 char   sql_fdr_fd_no[30];
 double sql_fdr_fd_amt;
 char   sql_fdr_fd_mat_date[24+1];
 long   l_fdr_rcrd_id;
 char   sql_fdr_trd_dt[24+1];
 char   sql_fdr_identfr[2+1];  /*** Ver 1.8 ***/
};

/**** Ver 1.4 Ends Here ******/

/***** Ver 1.5 Starts ********/
struct fno_dbd_dp_blck_dtls_dump
{
	char   sql_clm_mtch_aacnt[10+1];
	char	 sql_dbd_dp_id[9];
	char   sql_dbd_dp_clnt_id[9];
	char   sql_dbd_isin_nmbr[13];
	char   sql_dbd_stck_cd[7];
	long   l_dbd_sam_blckd_qty;
	double   l_dbd_plg_rt;
	double l_dbd_haircut;
	double   l_dbd_mkt_value;
	double   l_dbd_plg_value;
	char   sql_dbd_trd_dt[12];
	long   l_dbd_record_id;
};
/********** Ver 1.5 Ends *******/

int fn_pplt_fmd(void);
int fn_ins_log_hdr(void);
int fn_upld_tmp(void);

int fn_pplt_fdr(void);   /** Ver 1.4 **/
int fn_upld_fdrtmp(void);   /** Ver 1.4 **/

int fn_pplt_dbd(void);  /*** Ver 1.5 ***/
int fn_upld_dbdtmp(void); /*** Ver 1.5 ***/

void BAT_MRGNMAIL_CLK (int argc, char* argv[] )
{


	int   i_trnsctn = 0;

	strcpy(c_ServiceName, "bat_mrgnmail_clk");

	sprintf ( c_msg, "Batch process %s started", argv[0] );
	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	if(argc != 5)
	{
		sprintf(c_msg,"Usage: %s <NFO> <NFO> <NA> <TRD_DT>",argv[0]);
		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		fn_userlog (c_ServiceName,"Usage : <bat_mrgnmail_clk> <NFO> <NFO> <NA> <TRD_DT>");
		return;
	}


	INITBATDBGLVL(argv[0]);
	strcpy(c_trd_dt,argv[4]);

	EXEC SQL
		TRUNCATE	TABLE tmp_fno_mrgn_dtls;
	
	if(SQLCODE != 0)
	{
		fn_errlog(c_ServiceName, "S31005", SQLMSG, c_errmsg );
    return ;
  }

  /*** Ver 1.4 Starts Here ***/
  EXEC SQL
    TRUNCATE  TABLE TMP_FD_RCPT_MSTR;

  if(SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31010", SQLMSG, c_errmsg );
    return ;
  }
  
  /*** Ver 1.4 Ends here ****/
  /*** Ver 1.5 Starts *****/
	 EXEC SQL
		 TRUNCATE TABLE TMP_DBD_DP_BLCK_DTLS_DUMP;

	 if(SQLCODE != 0)
   {
     fn_errlog(c_ServiceName, "S31015", SQLMSG, c_errmsg );
     return ;
   }
	 /********* Ver 1.5 Ends *********/
	
	/** i_trnsctn = fn_begintran( c_ServiceName, c_errmsg ); ** Commented for Ver 1.5 **/
	i_trnsctn = tpbegin(LOCAL_TRAN_TIMEOUT, 0);		/** Added for Ver 1.5 **/
	if ( i_trnsctn == -1 )
	{
		fn_errlog(c_ServiceName,"S31020",LIBMSG,c_errmsg);
		return;
	}

	i_ret_val = fn_upld_tmp();

  if(i_ret_val == -1)
	{
		fn_errlog(c_ServiceName, "S31025",SQLMSG, c_errmsg);
		fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
		return;
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Data In The Temporary Table Uploaded Successfully");
	}

  /**** Ver 1.4 Starts Here *****/
 
  i_ret_val = fn_upld_fdrtmp();

  if(i_ret_val == -1)
  {
    fn_errlog(c_ServiceName, "S31030",SQLMSG, c_errmsg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    return;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Data In The Temporary Table Uploaded Successfully");
  }

  /**** Ver 1.4 Ends Here *****/

	/***** Ver 1.5 Starts ***********/

	i_ret_val = fn_upld_dbdtmp();

	if(i_ret_val == -1)
	{
		fn_errlog(c_ServiceName, "S31035",SQLMSG, c_errmsg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    return;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Data In The Temporary Table Uploaded Successfully");
  }

	/******** Ver 1.5 Ends ***************/

	/** if ( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 ) ** Commented for Ver 1.5 **/
	if ( tpcommit(0) == -1 ) /** Ver 1.5 **/
	{
		fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
		fn_errlog(c_ServiceName, "S31040", TPMSG, c_errmsg );
    return;
	}

	ptr_fml_Rbuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
	if (ptr_fml_Rbuffer == NULL)
  {
    fn_errlog(c_ServiceName, "S31045", TPMSG, c_errmsg);
    fn_userlog(c_ServiceName,"Click Upload:Unable to Allocate Receive Memory ..");
    return ;
  }

	/** i_trnsctn = fn_begintran( c_ServiceName, c_errmsg ); ** Commented for Ver 1.5 **/
	i_trnsctn = tpbegin(LOCAL_TRAN_TIMEOUT, 0);
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName,"S31050",LIBMSG,c_errmsg);
		fn_dstry_rs ( ptr_fml_Rbuffer );
    return;
  }
	
	i_ret_val = fn_pplt_fmd(); 

	if(i_ret_val == -1)
  {
    fn_errlog(c_ServiceName, "S31055",SQLMSG, c_errmsg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
		fn_dstry_rs (ptr_fml_Sbuffer );
    fn_dstry_rs ( ptr_fml_Rbuffer );
    return;
  }

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"After Successful Call To Function fn_pplt_fmd");
  }

		/*********** Ver 1.5 Starts ***********/
	i_ret_val = fn_pplt_dbd();

  if(i_ret_val == -1)
  {
    fn_errlog(c_ServiceName, "S31060",SQLMSG, c_errmsg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    fn_dstry_rs (ptr_fml_Sbuffer );
    fn_dstry_rs ( ptr_fml_Rbuffer );
    return;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"After Successful Call To Function fn_pplt_dbd");
  }
	/************** Ver 1.5 Ends *********/


  if(i_count_fmd > 0)
	{
		i_ret_val =  fn_ins_log_hdr();
		
		if(i_ret_val == -1)
    {
			fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      fn_userlog(c_ServiceName,"Failed to upload FMD");
      fn_dstry_rs ( ptr_fml_Sbuffer );
      fn_dstry_rs ( ptr_fml_Rbuffer );
      return ;
    }
	}

  /**** Ver 1.4 Starts Here ****/
  i_ret_val = fn_pplt_fdr();

  if(i_ret_val == -1)
  {
    fn_errlog(c_ServiceName, "S31065",SQLMSG, c_errmsg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    fn_dstry_rs (ptr_fml_Sbuffer );
    fn_dstry_rs ( ptr_fml_Rbuffer );
    return;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"After Successful Call To Function fn_pplt_fdr");
  }

  /**** Ver 1.4 Ends Here *****/



	/** if ( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 ) ** Commented for Ver 1.5 **/
	if ( tpcommit(0) == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    fn_errlog(c_ServiceName, "S31070", TPMSG, c_errmsg );
		fn_dstry_rs ( ptr_fml_Sbuffer );
    fn_dstry_rs ( ptr_fml_Rbuffer );
    return;
  }

	fn_dstry_rs( ptr_fml_Rbuffer);
  return ;
}

int fn_upld_tmp(void)
{

	EXEC	SQL
		EXECUTE	
			BEGIN
				RESET_SEQUENCE('SEQ_FNOMRGN_RECNO');
			END;
	END-EXEC;

	if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in sequence number resetting");
      fn_errlog(c_ServiceName,"S31075",SQLMSG,c_errmsg);
      return -1;
  }

/******
	EXEC  SQL
    EXECUTE
      BEGIN
          RESET_SEQUENCE('SEQ_FNOMRGN_NMBR');
      END;
  END-EXEC;

  if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in sequence number resetting");
      fn_errlog(c_ServiceName,"S31080",SQLMSG, c_errmsg);
      return -1;
  }
	***********************/

	EXEC SQL
		SELECT	SEQ_FNOMRGN_NMBR.NEXTVAL
		INTO		:i_seq_num
		FROM    dual;

	if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in sequence number resetting");
      fn_errlog(c_ServiceName,"S31085",SQLMSG, c_errmsg);
      return -1;
  }
	fn_userlog(c_ServiceName,"Sequence Number Is :%d:",i_seq_num);
  fn_userlog(c_ServiceName,"uploading in FMD..........");

	EXEC SQL
		INSERT INTO
			tmp_fno_mrgn_dtls
				( FMD_CLM_MTCH_ACCNT	,	
					FMD_CLNT_NM					,
					FMD_MAIL_ID1				,
					FMD_MAIL_ID2				,
					FMD_TRD_DT					,
					FMD_PLG_AMT					,
					FMD_PL_AMT					,
					FMD_TTL_AMT					,
					FMD_PRVTRD_DT				,
					FMD_PRVPLG_AMT			,
					FMD_PRVPL_AMT				,
					FMD_PRVTTL_AMT			,
					FMD_ALCTD_AMT				,
					FMD_BFT_AMT					,
					FMD_PRVALCTD_AMT		,
					FMD_PRVBFT_AMT			,
					FMD_OPT_MRGN				,
					FMD_FUT_MRGN				,
					FMD_PRVOPT_MRGN			,
					FMD_PRVFUT_MRGN			,
					FMD_OUTSTNDNG				,
					FMD_PRV_OUTSTNDNG		,
					FMD_PAYIO						,
					FMD_PRV_PAYIO				,
					FMD_PRCSNG_TM				,
					FMD_RECORD_ID				,
					FMD_FILE_NM					,
					FMD_DOC_TYP					,
					FMD_SEQ_NO          ,
          FMD_PRVISEC_MRGN_AMT,        /*** Ver 1.1 ***/
          FMD_ISEC_MRGN_AMT,          /*** Ver 1.1 ***/
					FMD_EXCH_MRGN,						/***  Ver 1.2 ***/
					FMD_EXCH_PRMUM,						/***  Ver 1.2 ***/
					FMD_EXCH_TOTAL_MRGN,			/***	Ver	1.2	***/
					FMD_EXCH_EXPSR,						/***  Ver 1.2 ***/
					FMD_EXCH_SHRT_FLL,				/***  Ver 1.2 ***/
					FMD_ISEC_REQMNT,					/***  Ver 1.2 ***/
					FMD_BSE_PL_AMT,						/***  Ver 1.3 ***/
					FMD_BSE_PAYIO,						/***  Ver 1.3 ***/
					FMD_BSE_OUTSTNDNG,				/***  Ver 1.3 ***/
					FMD_BSE_OPT_MRGN,					/***  Ver 1.3 ***/
					FMD_BSE_FUT_MRGN,					/***  Ver 1.3 ***/
					FMD_BSE_EXCH_MRGN,				/***  Ver 1.3 ***/
					FMD_BSE_EXCH_PRMUM,				/***  Ver 1.3 ***/
					FMD_BSE_EXCH_TOTAL_MRGN,	/***  Ver 1.3 ***/
					FMD_BSE_EXCH_EXPSR,				/***  Ver 1.3 ***/
          FMD_FDR_AMT,              /***  Ver 1.4 ***/
					FMD_NWB_AMT,              /***  Ver 1.5 ***/
					FMD_EQ_PLG_AMT,           /***  Ver 1.5 ***/
					FMD_TOT_COLL_AMT,          /***  Ver 1.5 ***/
          FMD_EQ_NSE_PLG_AMT,        /***  Ver 1.6 ***/                        
          FMD_EQ_BSE_PLG_AMT,        /***  Ver 1.6 ***/                         
          FMD_EQ_FREE_PLG_AMT,       /***  Ver 1.6 ***/
          FMD_EXCH_DEL_MRGN,         /** Ver 2.0 **/
          FMD_MTM_LOSS,              /** Ver 2.0 **/
          FMD_BSE_EXCH_DEL_MRGN,     /** Ver 2.0 **/
          FMD_BSE_MTM_LOSS           /** Ver 2.0 **/	
				)
				(
      		SELECT FMD_CLM_MTCH_ACCNT,
         			   FMD_CLNT_NM,
             		 USR_EMAIL_ADDRSS,
             		 NVL(USR_EMAIL_ADDRSS2,' '),
            		 FMD_TRD_DT,
             		 NVL(FMD_PLG_AMT,0),
             		 NVL(FMD_PL_AMT,0),
             		 NVL(FMD_TTL_AMT,0),
            		 FMD_PRVTRD_DT,
            		 NVL(FMD_PRVPLG_AMT,0),
            		 NVL(FMD_PRVPL_AMT,0),
            		 NVL(FMD_PRVTTL_AMT,0),
            		 NVL(FMD_ALCTD_AMT,0),
            		 NVL(FMD_BFT_AMT,0),
            		 NVL(FMD_PRVALCTD_AMT,0),
             		 NVL(FMD_PRVBFT_AMT,0),
             		 NVL(FMD_OPT_MRGN,0),
             		 NVL(FMD_FUT_MRGN,0),
             		 NVL(FMD_PRVOPT_MRGN,0),
            		 NVL(FMD_PRVFUT_MRGN,0),
            		 NVL(FMD_OUTSTNDNG,0),
            		 NVL(FMD_PRV_OUTSTNDNG,0),
            		 NVL(FMD_PAYIO,0),
            		 NVL(FMD_PRV_PAYIO,0),
            		 NVL(to_char(FMD_PRCSNG_TM,'dd-Mon-yyyy hh24:mi:ss'),'sysdate'),
            		 SEQ_FNOMRGN_RECNO.NEXTVAL,
            		 FMD_CLM_MTCH_ACCNT ||'_'||'mrgndtls'||'_'|| TO_CHAR(FMD_TRD_DT,'dd-Mon-yyyy'),
							 	 'MGN',
	    					 :i_seq_num,
                 NVL(FMD_PRVISEC_MRGN_AMT,0),          /*** Ver 1.1 ***/
                 NVL(FMD_ISEC_MRGN_AMT,0),            /*** Ver 1.1 ***/
								 NVL(FMD_EXCH_MRGN,0),				/***  Ver 1.2 ***/
								 NVL(FMD_EXCH_PRMUM,0),				/***  Ver 1.2 ***/
								 NVL(FMD_EXCH_TOTAL_MRGN,0),	/***  Ver 1.2 ***/
								 NVL(FMD_EXCH_EXPSR,0),				/***  Ver 1.2 ***/
								 NVL(FMD_EXCH_SHRT_FLL,0),		/***  Ver 1.2 ***/
								 NVL(FMD_ISEC_REQMNT,0),				/***  Ver 1.2 ***/
			      	   NVL( FMD_BSE_PL_AMT, 0 ),           /***  Ver 1.3 ***/
      			  	 NVL( FMD_BSE_PAYIO, 0 ),            /***  Ver 1.3 ***/
          			 NVL(	FMD_BSE_OUTSTNDNG, 0 ),        /***  Ver 1.3 ***/
          			 NVL(	FMD_BSE_OPT_MRGN, 0 ),         /***  Ver 1.3 ***/
          			 NVL(	FMD_BSE_FUT_MRGN, 0 ),         /***  Ver 1.3 ***/
          			 NVL(	FMD_BSE_EXCH_MRGN, 0 ),        /***  Ver 1.3 ***/
          			 NVL(	FMD_BSE_EXCH_PRMUM, 0 ),       /***  Ver 1.3 ***/
          			 NVL(	FMD_BSE_EXCH_TOTAL_MRGN, 0 ),  /***  Ver 1.3 ***/
          			 NVL(	FMD_BSE_EXCH_EXPSR, 0 ),       /***  Ver 1.3 ***/
                 NVL( FMD_FDR_AMT, 0),                /***  Ver 1.4 ***/
								 NVL( FMD_NWB_AMT, 0),                /***  Ver 1.5 ***/
								 NVL( FMD_EQ_PLG_AMT, 0),             /***  Ver 1.5 ***/
								 NVL( FMD_TOT_COLL_AMT, 0),           /***  Ver 1.5 ***/
                 NVL( FMD_EQ_NSE_PLG_AMT,0),          /***  Ver 1.6 ***/
                 NVL( FMD_EQ_BSE_PLG_AMT,0),          /***  Ver 1.6 ***/
                 NVL( FMD_EQ_FREE_PLG_AMT,0),         /***  Ver 1.6 ***/
                 NVL( FMD_EXCH_DEL_MRGN,0),           /** Ver 2.0 **/
                 NVL( FMD_MTM_LOSS,0),                /** Ver 2.0 **/
                 NVL( FMD_BSE_EXCH_DEL_MRGN,0),       /** Ver 2.0 **/
                 NVL( FMD_BSE_MTM_LOSS,0)             /** Ver 2.0 **/
					FROM 	FMD_FO_MRGN_DTLS,USR_USER_MASTER,UAC_USR_ACCNTS
					WHERE FMD_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
        	AND   USR_USR_ID 	= UAC_USR_ID
        	AND   FMD_TRD_DT	= :c_trd_dt
				);

		if(SQLCODE != 0)
  	{
      fn_userlog(c_ServiceName,"Error in FMD Upload");
      fn_errlog(c_ServiceName,"S31090",SQLMSG, c_errmsg);
      return -1;
  	}

	i_count_fmd = sqlca.sqlerrd[2];

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Total NO. Of Records = [%d]",i_count_fmd);
	}

}

int fn_pplt_fmd()
{
	int  i_counter;
	int i_count ;
	char c_ins_flg;
	unsigned char *c_msg_cbuf;
  struct fno_mrgn_dtls  fmd_mrgn_dtls_arr[MAX_REC];

	l_bufferlength = Fneeded32(1, sizeof(fmd_mrgn_dtls_arr));
	ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);
	
	if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Error in Allocating buffer FMD");
    fn_errlog(c_ServiceName, "S31095", TPMSG, c_errmsg);
    return(-1);
  }

	c_ins_flg = 'M';

	
	for ( i_count=0;i_count < i_count_fmd;i_count += i_max_rec_per_fetch )
	{
		MEMSET(fmd_mrgn_dtls_arr);
		
		EXEC ORACLE OPTION (char_map=string);
		
		EXEC SQL
			SELECT
				FMD_CLM_MTCH_ACCNT	,
				FMD_CLNT_NM					,
				FMD_MAIL_ID1				,
				FMD_MAIL_ID2				,
				FMD_TRD_DT					,
				FMD_PLG_AMT					,
				FMD_PL_AMT					,
				FMD_TTL_AMT					,
				FMD_PRVTRD_DT				,
				FMD_PRVPLG_AMT			,
				FMD_PRVPL_AMT				,
				FMD_PRVTTL_AMT			,
				FMD_ALCTD_AMT				,
				FMD_BFT_AMT					,
				FMD_PRVALCTD_AMT		,
				FMD_PRVBFT_AMT			,
				FMD_OPT_MRGN				,
				FMD_FUT_MRGN				,
				FMD_PRVOPT_MRGN			,
				FMD_PRVFUT_MRGN			,
				FMD_OUTSTNDNG				,
				FMD_PRV_OUTSTNDNG		,
				FMD_PAYIO						,
				FMD_PRV_PAYIO				,
				FMD_PRCSNG_TM				,
				FMD_RECORD_ID				,
				FMD_SEQ_NO					,
				FMD_FILE_NM					,
				FMD_DOC_TYP					,
        FMD_PRVISEC_MRGN_AMT,           /*** Ver 1.1 ***/
        FMD_ISEC_MRGN_AMT,              /*** Ver 1.1 ***/
				/*FMD_EXCH_MRGN + FMD_EXCH_PRMUM,	***  Ver 1.2 *** Ver 1.3 Comment**/
				FMD_EXCH_MRGN  ,	/***  Ver 1.3 ***/
				FMD_EXCH_TOTAL_MRGN,						/***	Ver	1.2	***/
				FMD_EXCH_EXPSR,									/***  Ver 1.2 ***/
				FMD_EXCH_SHRT_FLL,			  			/***  Ver 1.2 ***/
				FMD_ISEC_REQMNT,									/***  Ver 1.2 ***/
				FMD_BSE_PL_AMT,           /***  Ver 1.3 ***/
        FMD_BSE_PAYIO,            /***  Ver 1.3 ***/
        FMD_BSE_OUTSTNDNG,        /***  Ver 1.3 ***/
        FMD_BSE_OPT_MRGN,         /***  Ver 1.3 ***/
        FMD_BSE_FUT_MRGN,         /***  Ver 1.3 ***/
        FMD_BSE_EXCH_MRGN,        /***  Ver 1.3 ***/
        FMD_BSE_EXCH_PRMUM,       /***  Ver 1.3 ***/
        FMD_BSE_EXCH_TOTAL_MRGN,  /***  Ver 1.3 ***/
        FMD_BSE_EXCH_EXPSR,        /***  Ver 1.3 ***/
        FMD_FDR_AMT,                /*** Ver 1.4 ***/
				FMD_NWB_AMT,               /***  Ver 1.5 ***/
				FMD_EQ_PLG_AMT,            /***  Ver 1.5 ***/
				FMD_TOT_COLL_AMT,           /***  Ver 1.5 ***/
        FMD_EQ_NSE_PLG_AMT,         /***  Ver 1.6 ***/
        FMD_EQ_BSE_PLG_AMT,         /***  Ver 1.6 ***/
        FMD_EQ_FREE_PLG_AMT,        /***  Ver 1.6 ***/
        FMD_EXCH_PRMUM,             /** Ver 2.0 **/
        FMD_EXCH_DEL_MRGN,          /** Ver 2.0 **/
        FMD_MTM_LOSS,               /** Ver 2.0 **/
        FMD_BSE_EXCH_DEL_MRGN,      /** Ver 2.0 **/
        FMD_BSE_MTM_LOSS            /** Ver 2.0 **/ 
			INTO
				:fmd_mrgn_dtls_arr
			FROM	TMP_FNO_MRGN_DTLS
			WHERE	FMD_RECORD_ID >= :i_count + 1
			AND		FMD_RECORD_ID <= :i_count + :i_max_rec_per_fetch;

		if( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
    {
			fn_userlog(c_ServiceName,"bat_mrgnmail_clk :%d:",SQLCODE);
			fn_userlog(c_ServiceName,"Count Here Is :%d:",sqlca.sqlerrd[2]);
    	if( SQLCODE == 1403)
      {
        if (sqlca.sqlerrd[2] == 0)
          break;
      }
      else
      {
        fn_userlog(c_ServiceName,"Data select for FMD failed");
        fn_errlog(c_ServiceName, "S31100", SQLMSG, c_errmsg);
        return (-1);
      }
    }

	 i_rows_fetched = (i_count + i_max_rec_per_fetch > i_count_fmd)? i_count_fmd%i_max_rec_per_fetch : i_max_rec_per_fetch;


	 if(DEBUG_MSG_LVL_3)
   {
     fn_userlog(c_ServiceName,"bat_mrgnmail_clk : Rows fetched : |%d| |%d|", i_rows_fetched, SQLCODE );
   }
	
	 Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
   Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));
	
	 MEMSET(c_msg_cbuf);

	 c_msg_cbuf = (unsigned char *)fmd_mrgn_dtls_arr;

	 l_bufferlength =  sizeof(fmd_mrgn_dtls_arr);
		
	 i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
	 i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
	 i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&i_rows_fetched,0);
	 i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);
   

	 for(i_counter = 0;i_counter < 4;i_counter++)
   {
   		if(i_err[i_counter] == -1)
      {
        fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
        fn_errlog(c_ServiceName, "S31105", FMLMSG, c_errmsg);
        return(-1);
      }
    }

	i_ch_val = tpcall("SFO_MGNCLK_UPLD", (char *)ptr_fml_Sbuffer, 0,(char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);

		if (i_ch_val == -1)
		{
			fn_userlog(c_ServiceName,"Error in calling service SFO_MGNCLK_UPLD");
			if(TPCODE != TPESVCFAIL)
			{
				fn_errlog(c_ServiceName, "S31110", TPMSG, c_errmsg);
			}
			else
			{
				Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
				fn_errlog(c_ServiceName, "S31115", c_errmsg, c_errmsg);
			}
			return(-1);
		}
	}
	
	fn_dstry_rs( ptr_fml_Sbuffer);
	return (0);

}

int fn_ins_log_hdr()
{
	int  i_counter;
	char c_ins_flg;
	char c_xchng_cd[4] = { "NFO" };
	
	ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
	
	if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Unable to allocate send buffer ");
    fn_errlog(c_ServiceName, "S31120", TPMSG, c_errmsg);
    return(-1);
  }

	c_ins_flg = 'E';

	i_err[0] = Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);
	i_err[1] = Fadd32(ptr_fml_Sbuffer,FML_XCHNG_CD,(char *)c_xchng_cd,0);
	i_err[2] = Fadd32(ptr_fml_Sbuffer,FML_TRD_DT,(char *)c_trd_dt,0);
	i_err[3] = Fadd32(ptr_fml_Sbuffer,FML_TRN_NO,(char *)&i_seq_num,0);

	fn_userlog(c_ServiceName,"Here Sequence NO. Is :%d:",i_seq_num);
	
	for(i_counter =0 ;i_counter<=3;i_counter++)
	{
		if(i_err[i_counter] == -1)
		{
			fn_errlog(c_ServiceName, "S31125", FMLMSG, c_errmsg);
			fn_userlog(c_ServiceName,"Value of i =[%d]",i_counter);
			return (-1);
		}
	}

	i_ch_val = tpcall("SFO_MGNCLK_UPLD", (char *)ptr_fml_Sbuffer, 0,(char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);
	if (i_ch_val == -1)
	{
		fn_userlog(c_ServiceName,"Error in calling service for INS_LOG_HDR");
		if(TPCODE != TPESVCFAIL)
		{
			fn_errlog(c_ServiceName, "S31130", TPMSG, c_errmsg);
		}
		else
		{
			Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
			fn_errlog(c_ServiceName, "S31135", c_errmsg, c_errmsg);
		}

		return(-1);
	}

	fn_dstry_rs( ptr_fml_Sbuffer);
	return (0);
}

/**** Ver 1.4 Starts Here ****/
int fn_upld_fdrtmp(void)
{

  EXEC  SQL
    EXECUTE
      BEGIN
        RESET_SEQUENCE('SEQ_FNOFDR_RECNO');
      END;
  END-EXEC;

  if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in sequence number resetting");
      fn_errlog(c_ServiceName,"S31140",SQLMSG,c_errmsg);
      return -1;
  }

  fn_userlog(c_ServiceName,"uploading in FDR..........");

  EXEC SQL
    INSERT INTO TMP_FD_RCPT_MSTR 
                ( FDR_MTCH_ACCNT, 
                  FDR_FD_NO,
                  FDR_FD_AMT,
                  FDR_FD_MAT_DATE,
                  FDR_RECORD_ID,
                  FDR_TRD_DT,
                  FDR_IDENTFR  /***  added in Ver 1.8 ***/
                )
                (
                  SELECT
                  FFM_MTCH_ACCNT,   
                  FFM_FD_NO,
                  FFM_QUAL_FD_AMNT,
                  FFM_FD_MAT_DATE,
                  SEQ_FNOFDR_RECNO.NEXTVAL,
                  :c_trd_dt,
                  decode(substr(FFM_FD_NO,1,2),'IN','MF','FD') /***  added in Ver 1.8 ***/
                  FROM FFM_FO_FDR_MSTR,tmp_fno_mrgn_dtls
                  WHERE FFM_FD_STTS='A'
                    AND FFM_MTCH_ACCNT = FMD_CLM_MTCH_ACCNT
                    AND FMD_TRD_DT = :c_trd_dt
                );    
  if(SQLCODE != 0)
  {
    fn_userlog(c_ServiceName,"Error in FMD Upload");
    fn_errlog(c_ServiceName,"S31145",SQLMSG, c_errmsg);
    return -1;
  }

  i_count_fdr = sqlca.sqlerrd[2];

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Total NO. Of Records = [%d]",i_count_fdr);
  }


}

int fn_pplt_fdr()
{
  int  i_counter;
  int i_count ;
  char c_ins_flg;
  unsigned char *c_msg_cbuf;
  struct fno_fdr_dtls  fno_fdr_dtls_arr[MAX_REC];

  l_bufferlength = Fneeded32(1, sizeof(fno_fdr_dtls_arr));
  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);

  if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Error in Allocating buffer Fdr");
    fn_errlog(c_ServiceName, "S31150", TPMSG, c_errmsg);
    return(-1);
  }

  c_ins_flg = 'F';


  for ( i_count=0;i_count < i_count_fmd;i_count += i_max_rec_per_fetch )
  {
    MEMSET(fno_fdr_dtls_arr);

    EXEC ORACLE OPTION (char_map=string);

    EXEC SQL
      SELECT FDR_MTCH_ACCNT,
             FDR_FD_NO,
             FDR_FD_AMT,
             FDR_FD_MAT_DATE,
             FDR_RECORD_ID,
             FDR_TRD_DT,
             FDR_IDENTFR  /***  added in Ver 1.8 ***/
       INTO
             :fno_fdr_dtls_arr
      FROM  TMP_FD_RCPT_MSTR 
      WHERE FDR_RECORD_ID >= :i_count + 1
      AND   FDR_RECORD_ID <= :i_count + :i_max_rec_per_fetch; 

    if( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
    {
      fn_userlog(c_ServiceName,"bat_mrgnmail_clk :%d:",SQLCODE);
      fn_userlog(c_ServiceName,"Count Here Is :%d:",sqlca.sqlerrd[2]);
      if( SQLCODE == 1403)
      {
        if (sqlca.sqlerrd[2] == 0)
          break;
      }
      else
      {
        fn_userlog(c_ServiceName,"Data select for FDR Failed"); 
        fn_errlog(c_ServiceName, "S31155", SQLMSG, c_errmsg);
        return (-1);
      }
    }

   i_rows_fetched = (i_count + i_max_rec_per_fetch > i_count_fdr)? i_count_fdr%i_max_rec_per_fetch : i_max_rec_per_fetch;


   if(DEBUG_MSG_LVL_3)
   {
     fn_userlog(c_ServiceName,"bat_mrgnmail_clk : Rows fetched : |%d| |%d|", i_rows_fetched, SQLCODE );
   }

   Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
   Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

   MEMSET(c_msg_cbuf);

   c_msg_cbuf = (unsigned char *)fno_fdr_dtls_arr;

   l_bufferlength =  sizeof(fno_fdr_dtls_arr);

   i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
   i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
   i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&i_rows_fetched,0);
   i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);


   for(i_counter = 0;i_counter < 4;i_counter++)
   {
      if(i_err[i_counter] == -1)
      {
        fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
        fn_errlog(c_ServiceName, "S31160", FMLMSG, c_errmsg);
        return(-1);
      }
    }

  i_ch_val = tpcall("SFO_MGNCLK_UPLD", (char *)ptr_fml_Sbuffer, 0,(char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);

    if (i_ch_val == -1)
    {
      fn_userlog(c_ServiceName,"Error in calling service SFO_MGNCLK_UPLD");
      if(TPCODE != TPESVCFAIL)
      {
        fn_errlog(c_ServiceName, "S31165", TPMSG, c_errmsg);
      }
      else
      {
        Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
        fn_errlog(c_ServiceName, "S31170", c_errmsg, c_errmsg);
      }
      return(-1);
    }
  }

  fn_dstry_rs( ptr_fml_Sbuffer);
  return (0);

}
/**** Ver 1.4 Ends Here ****/

/***** Ver 1.5 Starts *******/

int fn_upld_dbdtmp(void)
{

	  EXEC  SQL
    EXECUTE
      BEGIN
        RESET_SEQUENCE('SEQ_FNODBD_RECNO');
      END;
  END-EXEC;

  if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in sequence number resetting");
      fn_errlog(c_ServiceName,"S31175",SQLMSG,c_errmsg);
      return -1;
  }

/*****   Ver 1.7 Start  *****/

  EXEC SQL
    SELECT COUNT(1) 
    INTO   :i_cnt 
    FROM   DUAL 
    WHERE  :c_trd_dt = (SELECT  MAX(fbc_trd_dt)
             						FROM    fbc_fo_brnch_cal
                        WHERE   fbc_trd_dt  < (SELECT  GREATEST(exg_nxt_trd_dt,exg_tmp_trd_dt)
                                               FROM    exg_xchng_mstr
                                               WHERE   exg_xchng_cd = 'NFO'));  /*** Where condition changed in Ver 1.9 ***/

         		/***				WHERE   fbc_trd_dt < trunc(sysdate)); *** Commented in Ver 1.9 ***/

  if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in sequence number resetting");
      fn_errlog(c_ServiceName,"S31180",SQLMSG,c_errmsg);
      return -1;
  }
 /*****  Ver 1.7 Ends  *****/

  if( i_cnt == 1)  /*** If condition added in Ver 1.7 ***/
  {
   fn_userlog(c_ServiceName,"uploading in DBD..........");
  
  EXEC SQL
    INSERT INTO TMP_DBD_DP_BLCK_DTLS_DUMP
                ( 
									DBD_CLM_MTCH_ACCNT,		
									DBD_DP_ID,	    
									DBD_DP_CLNT_ID,     
									DBD_ISIN_NMBR,      
									DBD_STCK_CD,        
									DBD_SAM_BLCKD_QTY,  
									DBD_PLG_RT,
                  DBD_HAIRCUT,
									DBD_MKT_VALUE,
                  DBD_PLG_VALUE,
                  DBD_TRD_DT,
 									DBD_RECORD_ID
                )
                (
                  SELECT
									DBD_CLM_MTCH_ACCNT,	        
									DBD_DP_ID,	    
									DBD_DP_CLNT_ID,     
									DBD_ISIN_NMBR,      
									DBD_STCK_CD,        
									DBD_SAM_BLCKD_QTY,  
									DBD_PLG_RT,		
									DBD_HAIRCUT,		
									DBD_MKT_VALUE,
									DBD_PLG_VALUE,
									DBD_TRD_DT,         
									SEQ_FNODBD_RECNO.NEXTVAL
                  FROM DBD_DP_BLCK_DTLS_DUMP
                  WHERE DBD_TRD_DT=:c_trd_dt
                 );    
   if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
   {
     fn_userlog(c_ServiceName,"Error in DBD Upload");
     fn_errlog(c_ServiceName,"S31185",SQLMSG, c_errmsg);
     return -1;
   }
  }
/*******   Ver 1.7  Starts  *******/
  else if(i_cnt == 0)
  {
   fn_userlog(c_ServiceName,"uploading in DBD from DBD_HSTRY..........");

  EXEC SQL
    INSERT INTO TMP_DBD_DP_BLCK_DTLS_DUMP
                (
                  DBD_CLM_MTCH_ACCNT,
                  DBD_DP_ID,
                  DBD_DP_CLNT_ID,
                  DBD_ISIN_NMBR,
                  DBD_STCK_CD,
                  DBD_SAM_BLCKD_QTY,
                  DBD_PLG_RT,
                  DBD_HAIRCUT,
                  DBD_MKT_VALUE,
                  DBD_PLG_VALUE,
                  DBD_TRD_DT,
                  DBD_RECORD_ID
                )
                (
                  SELECT
                  DBD_CLM_MTCH_ACCNT,
                  DBD_DP_ID,
                  DBD_DP_CLNT_ID,
                  DBD_ISIN_NMBR,
                  DBD_STCK_CD,
                  DBD_SAM_BLCKD_QTY,
                  DBD_PLG_RT,
                  DBD_HAIRCUT,
                  DBD_MKT_VALUE,
                  DBD_PLG_VALUE,
                  DBD_TRD_DT,
                  SEQ_FNODBD_RECNO.NEXTVAL
                  FROM  DBD_DP_BLCK_DTLS_DUMP_HSTRY
                  WHERE DBD_TRD_DT =:c_trd_dt
                 );
   if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
   {
     fn_userlog(c_ServiceName,"Error in DBD Upload");
     fn_errlog(c_ServiceName,"S31190",SQLMSG, c_errmsg);
     return -1;
   }
  }
/*******  Ver 1.7 Ends *******/
  i_count_dbd = sqlca.sqlerrd[2];

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Total NO. Of Records = [%d]",i_count_dbd);
  }
}

int fn_pplt_dbd()
{
  int  i_counter;
  int  i_count ;
  char c_ins_flg;
  unsigned char *c_msg_cbuf;
  struct fno_dbd_dp_blck_dtls_dump  fno_dbd_dp_blck_dtls_dump_arr[MAX_REC];

  l_bufferlength = Fneeded32(1, sizeof(fno_dbd_dp_blck_dtls_dump_arr));
  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);

  if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Error in Allocating buffer Fdr");
    fn_errlog(c_ServiceName, "S31195", TPMSG, c_errmsg);
    return(-1);
  }

  c_ins_flg = 'C';


  for ( i_count=0;i_count < i_count_dbd;i_count += i_max_rec_per_fetch )
  {
    MEMSET(fno_dbd_dp_blck_dtls_dump_arr);

    EXEC ORACLE OPTION (char_map=string);

    EXEC SQL
      SELECT  DBD_CLM_MTCH_ACCNT,
						  DBD_DP_ID,
							DBD_DP_CLNT_ID,
							DBD_ISIN_NMBR,
							DBD_STCK_CD,
							DBD_SAM_BLCKD_QTY,
							DBD_PLG_RT,
							DBD_HAIRCUT,
							DBD_MKT_VALUE,
							DBD_PLG_VALUE,
							DBD_TRD_DT,
							DBD_RECORD_ID
       INTO
             :fno_dbd_dp_blck_dtls_dump_arr
      FROM   TMP_DBD_DP_BLCK_DTLS_DUMP 
      WHERE DBD_RECORD_ID >= :i_count + 1
      AND   DBD_RECORD_ID <= :i_count + :i_max_rec_per_fetch; 

    if( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
    {
      fn_userlog(c_ServiceName,"bat_mrgnmail_clk :%d:",SQLCODE);
      fn_userlog(c_ServiceName,"Count Here Is :%d:",sqlca.sqlerrd[2]);
      if( SQLCODE == 1403)
      {
        if (sqlca.sqlerrd[2] == 0)
          break;
      }
      else
      {
        fn_userlog(c_ServiceName,"Data select for DBD Failed"); 
        fn_errlog(c_ServiceName, "S31200", SQLMSG, c_errmsg);
        return (-1);
      }
    }

   i_rows_fetched = (i_count + i_max_rec_per_fetch > i_count_dbd)? i_count_dbd%i_max_rec_per_fetch : i_max_rec_per_fetch;


   if(DEBUG_MSG_LVL_3)
   {
     fn_userlog(c_ServiceName,"bat_mrgnmail_clk : Rows fetched : |%d| |%d|", i_rows_fetched, SQLCODE );
   }

   Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
   Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

   MEMSET(c_msg_cbuf);

   c_msg_cbuf = (unsigned char *)fno_dbd_dp_blck_dtls_dump_arr;

   l_bufferlength =  sizeof(fno_dbd_dp_blck_dtls_dump_arr);

   i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
   i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
   i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&i_rows_fetched,0);
   i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);


   for(i_counter = 0;i_counter < 4;i_counter++)
   {
      if(i_err[i_counter] == -1)
      {
        fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
        fn_errlog(c_ServiceName, "S31205", FMLMSG, c_errmsg);
        return(-1);
      }
    }

  i_ch_val = tpcall("SFO_MGNCLK_UPLD", (char *)ptr_fml_Sbuffer, 0,(char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);

    if (i_ch_val == -1)
    {
      fn_userlog(c_ServiceName,"Error in calling service SFO_MGNCLK_UPLD");
      if(TPCODE != TPESVCFAIL)
      {
        fn_errlog(c_ServiceName, "S31210", TPMSG, c_errmsg);
      }
      else
      {
        Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
        fn_errlog(c_ServiceName, "S31215", c_errmsg, c_errmsg);
      }
      return(-1);
    }
  }

  fn_dstry_rs( ptr_fml_Sbuffer);
  return (0);

}

/********* Ver 1.5 Ends ***************/

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_MRGNMAIL_CLK;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}

int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
  return 0;
}

