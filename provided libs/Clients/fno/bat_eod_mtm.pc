/*** ver 1.1 IBM Migration Changes sandeep ***/
/*** ver 1.2 AUDIT TABLE INSERT added sandip[18-May-2012] ****/
/*** ver 1.3 Optimization of Process - Nitin Save[07-Sep-2012] ****/
/*** Ver 1.4 Game Simulator Automation *****/
/*** Ver 1.5 Automation of tag shifting - Mrinal[11-Oct-2017] ****/
/*** Ver 1.6 CR-ISEC10-156987_MarginShotfall_Communication - Tanmay Patel{27-Jul-2021] ****/
/*** Ver 1.7 CR-ISEC14-165712_Disable_OPTCNTRCT_EOSBUYSELL - Nikhil Soni {07-Feb-2021} ****/

#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <errno.h>      /*** Ver 1.5 ***/
#include <string.h>			/*** Ver 1.1 ***/
#include <stdlib.h>		  /*** Ver 1.1 ***/	
#include <fml_rout.h>	  /*** Ver 1.1 ***/
#include <fn_read_debug_lvl.h>      /*** Ver 1.1 ***/
#include <sqlca.h>									/*** Ver 1.2 ***/
#include <fn_pos.h>   /** Ver 1.4 ***/
#include <unistd.h>   /*** Ver 1.5 ***/

/*** void fn_upd_audittab ( char,char * , char * );			*** Ver 1.2 ** Ver 1.4 Commented ****/
/*** Added in ver 1.5 ***/
int fn_allw_sprd_nfo(char *c_ServiceName,
                   char *c_err_msg,
                   char *c_trd_dt,
                   char *c_xchng_cd);

int fn_rmv_sprd_nfo(char *c_ServiceName,
                   char *c_err_msg,
                   char *c_trd_dt,
                   char *c_xchng_cd);
int fn_adhoc_chg_sprd_nfo(char *c_ServiceName,
                   char *c_err_msg,
                   char *c_trd_dt,
                   char *c_xchng_cd);
int fn_exp_day_upd_nfo(char *c_ServiceName,
                   char *c_err_msg,
                   char *c_trd_dt,
                   char *c_xchng_cd);

int fn_allw_sprd_bfo(char *c_ServiceName,
                   char *c_err_msg,
                   char *c_trd_dt,
                   char *c_xchng_cd);

int fn_rmv_sprd_bfo(char *c_ServiceName,
                   char *c_err_msg,
                   char *c_trd_dt,
                   char *c_xchng_cd);

int fn_adhoc_chg_sprd_bfo(char *c_ServiceName,
                   char *c_err_msg,
                   char *c_trd_dt,
                   char *c_xchng_cd);
int fn_exp_day_upd_bfo(char *c_ServiceName,
                   char *c_err_msg,
                   char *c_trd_dt,
                   char *c_xchng_cd);

int fn_position_backup(char *c_ServiceName,
									 char *c_xchng_cd,
                   char *c_err_msg);

/*** Add ended in ver 1.5 ***/
void BAT_EOD_MTM ( int argc, char *argv[] )
{
	long int li_tot_rcrds;
  int i_ch_val;
  long int li_cnt;
  long int l_report_no;
  char c_msg[256];
	FBFR32 *ptr_fml_buf;
  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];

  char c_xchng_cd [ 4 ];
  char c_exp_dt [ LEN_DATE ];
  char c_trd_dt [ LEN_DATE ];
  char c_cln_mtch_accnt [ 11 ];
  char c_undrlyng [ 7 ];
  char c_rout_crt [ 4 ];
  char c_prd_typ;
  char c_exrc_typ;
  char c_cntrct_tag;
  char c_ind_stk;
  char c_run_mode= 'N'; /** Ver 1.6 **/

	int     i_trnsctn;						/* ver 1.2 */
	char    c_flg = 'F';          /* ver 1.2 */

	/*** Ver 1.5 Starts ***/
	char c_rprt_mail_cmd[250];
	char c_expry_day_flg = '\0';
	
	int	i_pnding_eodmtm_cnt = 0;
	int	i_sprd_bft_allw_cnt = 0;
	int i_cd = -1;

	FBFR32 *ptr_fml_tobuf;
	
	long int li_sprd_chg_cnt = 0;
	long int li_len_tobuf;
	long l_ret_val;
	/*** Ver 1.5 Ends ***/
 
  /**** Ver 1.4 Starts ****/
  char c_program_nm[33];
  char c_xchng_cd_tmp[4];
  char c_match_id[11];
  char c_error_txt[256];
 
  MEMSET(c_program_nm);
  MEMSET(c_xchng_cd_tmp);
  MEMSET(c_match_id);
  MEMSET(c_error_txt);
   
  /**** Ver 1.4 Ends ***/
   
	MEMSET(c_rprt_mail_cmd);					/*** Ver 1.5 ***/
  strcpy ( c_ServiceName, argv[0] );

	INITBATDBGLVL(argv[0]);     /*** Ver 1.1 ***/

	sprintf ( c_msg, "Batch process %s started", argv[0] );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	strcpy ( c_msg, "Creating data. Please wait ... " );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  /*** Ver 1.4 ***/
  strcpy(c_program_nm,c_ServiceName);
  strcpy(c_xchng_cd_tmp,argv[2]);

  /** Ver 1.4 *****/

  if( argc < 6 )
  {
    fn_bat_pst_msg ( c_ServiceName, "Invalid Number of Arguments", c_tag );
   /* exit(0); */			/** Ver 1.2 comment **/
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.4 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.4 ***/
	 return;						/** Ver 1.2 ***/
  }
  

  strcpy( c_xchng_cd, argv[2] );
  strcpy( c_trd_dt, argv[4] );
  l_report_no = atoi ( argv[5] );

  /** Ver 1.6 Starts **/

  if( argc == 7 )
  {
    c_run_mode = argv[6][0];

    fn_userlog(c_ServiceName,"c_run_mode :%c:",c_run_mode);
  }  

  /** Ver 1.6 Ends **/
   


  fn_init_ddr_pop ( "NA", "NA", "NA" );

	/** Ver 1.2 Starts *****/
  i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31005", LIBMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    strcpy(c_error_txt,"System error. Contact System Support");   /*** Ver 1.4 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /*** Ver 1.4 ***/
    return;
  }

  EXEC SQL 
        INSERT INTO audit_prog_runstts
                (
                    APR_PROG_NAME,
                    APR_TIME,
                    APR_SUCC_FLG,
										APR_TRD_DT,
                    APR_XCHNG_CD
                 )
          VALUES (
                    :c_ServiceName,
                    sysdate,
                    'N',
										:c_trd_dt,
                    :c_xchng_cd
                  );

  if( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31010", SQLMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy(c_error_txt,"System error. Contact System Support");   /*** Ver 1.4 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /*** Ver 1.4 ***/
    return;
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
     fn_errlog(c_ServiceName, "S31015", LIBMSG, c_err_msg);
     fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     strcpy(c_error_txt,"System error. Contact System Support");   /*** Ver 1.4 ***/
     fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /*** Ver 1.4 ***/
     return;
  }
	/** Ver 1.2 ENDS *****/

	ptr_fml_buf = fn_create_rs ( c_ServiceName,
                               c_err_msg,
                               "SFO_GT_EODMTMRC",
                               TPNOTIME,
															 1,
                               FFO_XCHNG_CD, ( char * )c_xchng_cd);
	if ( ptr_fml_buf == NULL )
	{
		fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg );
		fn_upd_audittab(c_ServiceName,c_ServiceName,c_flg ,c_xchng_cd ,c_trd_dt ); 				/*** Ver 1.2 ***//** Ver 1.4 **/
    strcpy(c_error_txt,"System error. Contact System Support");   /*** Ver 1.4 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /*** Ver 1.4 ***/ 
		return;
	}

	li_tot_rcrds = fn_reccnt_rs ( ptr_fml_buf,
                                c_ServiceName,
                                c_err_msg,
                                FFO_EBA_MTCH_ACT_NO );
	if ( li_tot_rcrds == -1 )
	{
		fn_errlog( c_ServiceName, "S31025", LIBMSG, c_err_msg );
		fn_dstry_rs ( ptr_fml_buf );
		fn_upd_audittab(c_ServiceName,c_ServiceName,c_flg,c_xchng_cd , c_trd_dt); 				/*** Ver 1.2 ***//** Ver 1.4 **/ 
    strcpy(c_error_txt,"System error. Contact System Support");   /*** Ver 1.4 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /*** Ver 1.4 ***/
		return;
	}

	strcpy ( c_msg, "Data created." );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  sprintf ( c_msg, "Total records = %ld", li_tot_rcrds );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  for ( li_cnt=1; li_cnt<=li_tot_rcrds; li_cnt++ )
  {
		i_ch_val = fn_getnxt_rs ( ptr_fml_buf,
                              c_ServiceName,
                              c_err_msg,
															8,
															FFO_EBA_MTCH_ACT_NO,( char *)c_cln_mtch_accnt,NULL,
															FFO_XCHNG_CD,( char * )c_xchng_cd, NULL,
															FFO_PRDCT_TYP,( char * )&c_prd_typ, NULL,
															FFO_UNDRLYNG,( char * )c_undrlyng, NULL,
															FFO_EXPRY_DT,( char * )c_exp_dt, NULL,
															FFO_EXER_TYP,( char * )&c_exrc_typ, NULL,
															FFO_CNTRCT_TAG,( char * )&c_cntrct_tag, NULL,
															FFO_CTGRY_INDSTK,( char * )&c_ind_stk, NULL );

		if ( i_ch_val != 0 )
		{
			fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg );
			fn_dstry_rs ( ptr_fml_buf );
  		strcpy ( c_msg, "System error. Contact system support" );
  		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			fn_upd_audittab(c_ServiceName,c_ServiceName,c_flg,c_xchng_cd , c_trd_dt);		/*** Ver 1.2 ***/ /*** Ver 1.4 **/
      strcpy(c_error_txt,"System error. Contact System Support");   /*** Ver 1.4 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /*** Ver 1.4 ***/
			return;
		}
    
		if(li_cnt % 100 == 1)
		{
			sprintf ( c_msg, "Processing record %ld of %ld", li_cnt, li_tot_rcrds );
 			fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		}

    i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                  c_err_msg,
                                  "sfr_beod_prcs",  /** Replaced from old server-sfr_beod_gtdt in Ver 1.3 **/
                                  li_cnt,
                                  li_tot_rcrds );
    if ( i_ch_val == -1 )
    {
			fn_errlog( c_ServiceName, "S31035", LIBMSG, c_err_msg );
			fn_dstry_rs ( ptr_fml_buf );
  		strcpy ( c_msg, "System error. Contact system support" );
  		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			fn_upd_audittab(c_ServiceName,c_ServiceName,c_flg,c_xchng_cd , c_trd_dt); 				/*** Ver 1.2 ***//** Ver 1.4 **/
      strcpy(c_error_txt,"System error. Contact System Support");   /*** Ver 1.4 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /*** Ver 1.4 ***/
			return;
    }

    fn_cpy_ddr ( c_rout_crt ) ;

    i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                  c_err_msg,
                                  "SFO_PRCS_EODMTM",
                                  0,
                                  14,  /** Change from 13 to 14 in Ver 1.6 **/
																	FFO_EBA_MTCH_ACT_NO,( char *)c_cln_mtch_accnt,
																	FFO_XCHNG_CD,( char * )c_xchng_cd,
																	FFO_PRDCT_TYP,( char * )&c_prd_typ,
																	FFO_UNDRLYNG,( char * )c_undrlyng,
																	FFO_EXPRY_DT,( char * )c_exp_dt,
																	FFO_EXER_TYP,( char * )&c_exrc_typ,
																	FFO_CNTRCT_TAG,( char * )&c_cntrct_tag,
																	FFO_CTGRY_INDSTK,( char * )&c_ind_stk, 
                               		FFO_TRD_DT, (char * )c_trd_dt,
                                  FFO_RUN_NUM, ( char * )&l_report_no,
                               		FFO_ROUT_CRT, (char * )c_rout_crt,
                                  FFO_BAT_TAG, ( char * )c_tag,
                                  FFO_REC_NO, ( char * )&li_cnt, 
                                  FFO_IS_FLG, ( char * )&c_run_mode );   /** Ver 1.6 **/
    if ( i_ch_val == -1 )
    {
			fn_errlog( c_ServiceName, "S31040", LIBMSG, c_err_msg );
			fn_dstry_rs ( ptr_fml_buf );
  		strcpy ( c_msg, "System error. Contact system support" );
  		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			fn_upd_audittab(c_ServiceName,c_ServiceName,c_flg,c_xchng_cd , c_trd_dt); 	/*** Ver 1.2 ***/ /*** Ver 1.4 ***/
      strcpy(c_error_txt,"System error., Contact System Support");   /*** Ver 1.4 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /*** Ver 1.4 ***/
			return;
		}
	}
	/*** Ver 1.5 Starts ***/
	if(li_tot_rcrds > 0)
	{
		fn_userlog(c_ServiceName,"TPGETRPLY 111 for SFO_PRCS_EODMTM");
		fn_userlog(c_ServiceName,"***** i_cd = :%d:",i_cd);
		ptr_fml_tobuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
  	if (ptr_fml_tobuf == NULL)
  	{
			fn_errlog(c_ServiceName, "S31045",FMLMSG, c_err_msg);
    	return;
  	}
		
		fn_userlog(c_ServiceName,"TPGETRPLY 222 for SFO_PRCS_EODMTM");
		/* i_ch_val = tpgetrply( &i_cd, (char **)&ptr_fml_tobuf, &li_len_tobuf, TPNOTIME|TPGETANY); */
		i_ch_val = tpgetrply( &i_cd, (char **)&ptr_fml_tobuf, &li_len_tobuf, TPGETANY);
		if (i_ch_val == -1)
		{
			fn_userlog(c_ServiceName,"Error received while getting response from SFO_PRCS_EODMTM");
			sprintf ( c_msg, "Error received while getting response for process eodmtm...");
 			fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			if ( tperrno != TPESVCFAIL )
			{	
				fn_userlog(c_ServiceName,"Error received 111 while getting response from SFO_PRCS_EODMTM");
				fn_errlog(c_ServiceName, "S31050",TPMSG, c_err_msg);
				l_ret_val = SYSTEM_ERROR;
			}
			else
			{
				fn_userlog(c_ServiceName,"Error received 222 while getting response from SFO_PRCS_EODMTM");
				l_ret_val  = tpurcode;
			}
			tpfree ( ( char * ) ptr_fml_tobuf );
			return ;
		}
		fn_userlog(c_ServiceName,"TPGETRPLY 333 for SFO_PRCS_EODMTM");
		sprintf ( c_msg, "After response received for process eodmtm...");
 		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
	}
	/*** Ver 1.5 Ends ***/

	fn_dstry_rs ( ptr_fml_buf );
	/** ver 1.2 Starts ***/

  if ( c_run_mode == 'N' )  /** If condition added in Ver 1.6 **/
  {

	c_flg='P';
	fn_upd_audittab(c_ServiceName,c_ServiceName,c_flg,c_xchng_cd , c_trd_dt);  /*** Ver 1.4 extra input added ***/

	/** Ver 1.2 Ends ***/
	sprintf ( c_msg, "Batch process %s ended and Auto_spread will be started if needed", argv[0] );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
	/*** Ver 1.5 Starts ***/
	EXEC SQL
    SELECT  COUNT(*)
    INTO  :li_sprd_chg_cnt
    FROM  FUM_FO_UNDRLYNG_MSTR
    WHERE TO_DATE(FUM_SPRD_CHNG_DT,'DD-MON-YYYY') = TO_DATE(TO_DATE(:c_trd_dt,'DD-MON-YYYY'))
    AND FUM_XCHNG_CD = :c_xchng_cd
    AND FUM_PRDCT_TYP = 'F';
  if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog(c_ServiceName, "S31055",SQLMSG, c_err_msg);
  	strcpy ( c_msg, "Pls check, Error in finding li_sprd_chg_cnt... " );
  	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    fn_userlog(c_ServiceName,"Pls check, Error in finding li_sprd_chg_cnt");
    return;
  }
  if(li_sprd_chg_cnt > 0)
  {
		fn_userlog(c_ServiceName,"li_sprd_chg_cnt : |%d|",li_sprd_chg_cnt);
		EXEC SQL
			SELECT  count(*)
			INTO    :i_pnding_eodmtm_cnt
			FROM    FFP_FO_FUTURES_PSTN,FTQ_FO_TRD_QT
			WHERE   (NVL(FFP_EODMTM_DT,(sysdate+1)) != to_date(:c_trd_dt,'DD-Mon-yyyy')
			OR       FTQ_CLS_PRC != (FFP_MTM_OPN_VAL / FFP_OPNPSTN_QTY))
			AND    FFP_OPNPSTN_QTY    != 0
			AND    FFP_OPNPSTN_FLW    != 'N'
			AND    FFP_XCHNG_CD    = FTQ_XCHNG_CD
			AND    FFP_PRDCT_TYP   = FTQ_PRDCT_TYP
			AND    FFP_INDSTK      = FTQ_INDSTK
			AND    FFP_UNDRLYNG    = FTQ_UNDRLYNG
			AND    FFP_EXPRY_DT    = FTQ_EXPRY_DT
			AND    FFP_EXER_TYP    = FTQ_EXER_TYP
			AND    FTQ_XCHNG_CD = :c_xchng_cd
			AND    FTQ_PRDCT_TYP = 'F';
		if( SQLCODE != 0)
  	{
    	fn_errlog(c_ServiceName, "S31060",SQLMSG, c_err_msg);
			strcpy ( c_msg, "Error in finding i_pnding_eodmtm_cnt.. Contact system support" );
    	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    	fn_userlog(c_ServiceName,"Pls check, Error in finding i_pnding_eodmtm_cnt");
    	return;
  	}
		fn_userlog( c_ServiceName, "i_pnding_eodmtm_cnt:|%d|",i_pnding_eodmtm_cnt);
		if(i_pnding_eodmtm_cnt == 0)
		{
      
      i_ch_val = fn_position_backup(c_ServiceName,c_xchng_cd,c_err_msg);
      if( i_ch_val != 0)
      {
        fn_errlog(c_ServiceName, "S31065",SQLMSG, c_err_msg);
        strcpy ( c_msg, "Error in Taking Backup Before Split....Contact system support" );
        fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
        fn_userlog(c_ServiceName,"Pls check, Error in finding i_pnding_eodmtm_cnt");
        return;
      } 


			EXEC SQL
				SELECT	count(*)
				INTO	:i_sprd_bft_allw_cnt
				FROM	FUM_FO_UNDRLYNG_MSTR
				WHERE	NVL(FUM_SPRD_ALLWD_FLG,'*') = 'Y'
				AND	TO_DATE(FUM_SPRD_CHNG_DT,'DD-MON-YYYY') = TO_DATE(TO_DATE(:c_trd_dt,'DD-MON-YYYY'))
				AND	FUM_XCHNG_CD = :c_xchng_cd
				AND	FUM_PRDCT_TYP = 'F';
			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
			{
		  	fn_errlog(c_ServiceName, "S31070",SQLMSG, c_err_msg);
				strcpy ( c_msg, "Error in finding Spread change count for flag Y. Contact system support" );
      	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		  	fn_userlog(c_ServiceName,"Pls check, Error in finding li_sprd_chg_cnt");
		  	return;
			}
			if(i_sprd_bft_allw_cnt > 0)
			{
				fn_userlog( c_ServiceName, "Before c_sprd_bft_allw_flg = Y ");
    		if(strcmp(c_xchng_cd,"NFO") == 0)
      	{
        	fn_userlog(c_ServiceName,"calling fn_allw_sprd_nfo....");
        	i_ch_val = fn_allw_sprd_nfo(c_ServiceName,
                                        c_err_msg,
                                        c_trd_dt,
                                        c_xchng_cd);
        	if ( i_ch_val != 0)
        	{
          	fn_errlog(c_ServiceName, "S31075", LIBMSG, c_err_msg);
						strcpy ( c_msg, "System error in AUTO_SPREAD. Contact system support" );
        		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
          	fn_userlog(c_ServiceName,"Pls check, Error in calling fn_allw_sprd_nfo");
          	return;
        	}
      	}
      	else if(strcmp(c_xchng_cd,"BFO") == 0)
      	{
        	fn_userlog(c_ServiceName,"calling fn_allw_sprd_bfo....");
        	i_ch_val = fn_allw_sprd_bfo(c_ServiceName,
                                        c_err_msg,
                                        c_trd_dt,
                                        c_xchng_cd);
        	if ( i_ch_val != 0)
        	{
          	fn_errlog(c_ServiceName, "S31080", LIBMSG, c_err_msg);
            strcpy ( c_msg, "System error in AUTO_SPREAD. Contact system support" );
            fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
          	fn_userlog(c_ServiceName,"Pls check, Error in calling fn_allw_sprd_bfo");
          	return;
        	}
      	}
      	else
      	{
        	fn_errlog(c_ServiceName, "S31085", LIBMSG, c_err_msg);
					strcpy ( c_msg, "Invalid Exchange code,Please check.." );
          fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
        	fn_userlog(c_ServiceName,"Error : Invalid Exchange code,Please check ");
        	return;
      	}
      	fn_userlog( c_ServiceName, "After c_sprd_bft_allw_flg = Y ");
			}		/** c_sprd_bft_allw_flg = Y **/
			EXEC SQL
    		SELECT  count(*)
    		INTO  :i_sprd_bft_allw_cnt
    		FROM  FUM_FO_UNDRLYNG_MSTR
    		WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'N'
    		AND TO_DATE(FUM_SPRD_CHNG_DT,'DD-MON-YYYY') = TO_DATE(TO_DATE(:c_trd_dt,'DD-MON-YYYY'))
    		AND FUM_XCHNG_CD = :c_xchng_cd
    		AND FUM_PRDCT_TYP = 'F';
    	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    	{
      	fn_errlog(c_ServiceName, "S31090",SQLMSG, c_err_msg);
        strcpy ( c_msg, "Error in finding Spread change count for flag N. Contact system support" );
        fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      	fn_userlog(c_ServiceName,"Pls check, Error in finding li_sprd_chg_cnt");
      	return;
    	}
    	if(i_sprd_bft_allw_cnt > 0)
    	{
				fn_userlog( c_ServiceName, "Before c_sprd_bft_allw_flg = N ");
      	if(strcmp(c_xchng_cd,"NFO") == 0)
      	{
        	fn_userlog(c_ServiceName,"calling fn_rmv_sprd_nfo....");
        	i_ch_val = fn_rmv_sprd_nfo(c_ServiceName,
                                        c_err_msg,
                                        c_trd_dt,
                                        c_xchng_cd);
        	if ( i_ch_val != 0)
        	{
          	fn_errlog(c_ServiceName, "S31095", LIBMSG, c_err_msg);
            strcpy ( c_msg, "System error in AUTO_SPREAD. Contact system support" );
            fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
          	fn_userlog(c_ServiceName,"Pls check, Error in calling fn_rmv_sprd_nfo");
          	return;
        	}
      	}
      	else if(strcmp(c_xchng_cd,"BFO") == 0)
      	{
        	fn_userlog(c_ServiceName,"calling fn_rmv_sprd_bfo....");
        	i_ch_val = fn_rmv_sprd_bfo(c_ServiceName,
                                        c_err_msg,
                                        c_trd_dt,
                                        c_xchng_cd);
        	if ( i_ch_val != 0)
        	{
          	fn_errlog(c_ServiceName, "S31100", LIBMSG, c_err_msg);
            strcpy ( c_msg, "System error in AUTO_SPREAD. Contact system support" );
            fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
          	fn_userlog(c_ServiceName,"Pls check, Error in calling fn_rmv_sprd_bfo");
          	return;
        	}
      	}
      	else
      	{
        	fn_errlog(c_ServiceName, "S31105", LIBMSG, c_err_msg);
					strcpy ( c_msg, "Invalid Exchange code,Please check.." );
          fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
        	fn_userlog(c_ServiceName,"Error : Invalid Exchange code,Please check ");
        	return;
      	}
      	fn_userlog( c_ServiceName, "After c_sprd_bft_allw_flg = N ");
    	}			/** c_sprd_bft_allw_flg = N **/
			EXEC SQL
    		SELECT  count(*)
    		INTO  :i_sprd_bft_allw_cnt
    		FROM  FUM_FO_UNDRLYNG_MSTR
    		WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'A'
    		AND TO_DATE(FUM_SPRD_CHNG_DT,'DD-MON-YYYY') = TO_DATE(TO_DATE(:c_trd_dt,'DD-MON-YYYY'))
    		AND FUM_XCHNG_CD = :c_xchng_cd
    		AND FUM_PRDCT_TYP = 'F';
    	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    	{
      	fn_errlog(c_ServiceName, "S31110",SQLMSG, c_err_msg);
				strcpy ( c_msg, "Error in finding Spread change count for flag A. Contact system support" );
				fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      	fn_userlog(c_ServiceName,"Pls check, Error in finding li_sprd_chg_cnt");
      	return;
    	}
    	if(i_sprd_bft_allw_cnt > 0)
    	{
				fn_userlog( c_ServiceName, "Before c_sprd_bft_allw_flg = A ");
      	if(strcmp(c_xchng_cd,"NFO") == 0)
      	{
        	fn_userlog(c_ServiceName,"calling fn_adhoc_chg_sprd_nfo....");
        	i_ch_val = fn_adhoc_chg_sprd_nfo(c_ServiceName,
                                        c_err_msg,
                                        c_trd_dt,
                                        c_xchng_cd);
        	if ( i_ch_val != 0)
        	{
          	fn_errlog(c_ServiceName, "S31115", LIBMSG, c_err_msg);
						strcpy ( c_msg, "System error in AUTO_SPREAD. Contact system support" );
						fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
          	fn_userlog(c_ServiceName,"Pls check, Error in calling fn_adhoc_chg_sprd_nfo");
          	return;
        	}
      	}
      	else if(strcmp(c_xchng_cd,"BFO") == 0)
      	{
        	fn_userlog(c_ServiceName,"calling fn_adhoc_chg_sprd_bfo....");
        	i_ch_val = fn_adhoc_chg_sprd_bfo(c_ServiceName,
                                        c_err_msg,
                                        c_trd_dt,
                                        c_xchng_cd);
        	if ( i_ch_val != 0)
        	{
						fn_errlog(c_ServiceName, "S31120", LIBMSG, c_err_msg);
            strcpy ( c_msg, "System error in AUTO_SPREAD. Contact system support" );
            fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
          	fn_userlog(c_ServiceName,"Pls check, Error in calling fn_adhoc_chg_sprd_bfo");
          	return;
        	}
      	}
      	else
      	{
        	fn_errlog(c_ServiceName, "S31125", LIBMSG, c_err_msg);
					strcpy ( c_msg, "Invalid Exchange code,Please check.." );
					fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
        	fn_userlog(c_ServiceName,"Error : Invalid Exchange code,Please check ");
        	return;
      	}
      	fn_userlog( c_ServiceName, "After c_sprd_bft_allw_flg = A ");
    	}			/** c_sprd_bft_allw_flg = A **/
		}
		else
		{
			fn_userlog(c_ServiceName,"***** Pls check error ,There is pending records for EOD_MTM found *****");
			strcpy ( c_msg, "There is pending records for EOD_MTM, AUTO_SPREAD Can not starts. Please check.." );
			fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			return;
		}
		
		sprintf(c_rprt_mail_cmd, "nohup ksh tag_shift_report.sh '%s' '%s' &",c_xchng_cd,c_trd_dt);
		fn_userlog( c_ServiceName, "Mail send command :%s:",c_rprt_mail_cmd);
		system(c_rprt_mail_cmd);
		strcpy ( c_msg, "Spread Function on Spread change day is successfully called" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
	}
	else
	{
		fn_userlog(c_ServiceName,"li_sprd_chg_cnt : |%d|",li_sprd_chg_cnt);
		fn_userlog(c_ServiceName,"No need to run Batch process for contract split today");
		strcpy ( c_msg, "No need to call Auto spread on non-Spread change day." );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
	}				/** c_sprd_bft_allw_flg = Z **/
	fn_userlog(c_ServiceName,"****** Checking If Today is Expiry Day *****");
	EXEC SQL
		select  'E'
		into  :c_expry_day_flg
		from  dual
		where to_date(:c_trd_dt ,'DD-Mon-yyyy') = (select  max(FTQ_EXPRY_DT)
						       from    FTQ_FO_TRD_QT
						  WHERE   to_char(FTQ_EXPRY_DT,'Mon-YYYY') =to_char(to_date(:c_trd_dt,'dd-Mon-yyyy'),'Mon-YYYY')
						  AND     trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY')
						  AND     FTQ_PRDCT_TYP = 'F'
						  AND     FTQ_XCHNG_CD = :c_xchng_cd);
	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
	{
		fn_errlog(c_ServiceName, "S31130",SQLMSG, c_err_msg);
		strcpy ( c_msg, "Pls check, Error in finding c_expry_day_flg .." );
		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		fn_userlog(c_ServiceName,"Pls check, Error in finding c_expry_day_flg");
		return;
	}
	
	if(c_expry_day_flg == 'E')
	{
    i_ch_val = fn_position_backup(c_ServiceName,c_xchng_cd,c_err_msg);
    if( i_ch_val != 0)
    {
      fn_errlog(c_ServiceName, "S31135",SQLMSG, c_err_msg);
      strcpy ( c_msg, "Error in Taking Backup before Exp dt Update....Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      fn_userlog(c_ServiceName,"Pls check, Error inside Exp day Update..");
      return;
    }
		fn_userlog( c_ServiceName, "Calling Function for Expiry Day Update");
		if(strcmp(c_xchng_cd,"NFO") == 0)
		{
			i_ch_val = fn_exp_day_upd_nfo(c_ServiceName,c_err_msg,c_trd_dt,c_xchng_cd);
			if ( i_ch_val != 0)
			{
				fn_errlog(c_ServiceName, "S31140", LIBMSG, c_err_msg);
				strcpy ( c_msg, "System error in calling fn_exp_day_upd_nfo. Contact system support" );
    		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
				fn_userlog(c_ServiceName,"Pls check, Error in calling fn_exp_day_upd_nfo");
				return;
			}
		}
		else if(strcmp(c_xchng_cd,"BFO") == 0)
		{
			i_ch_val = fn_exp_day_upd_bfo(c_ServiceName,c_err_msg,c_trd_dt,c_xchng_cd);
			if ( i_ch_val != 0)
			{
				fn_errlog(c_ServiceName, "S31145", LIBMSG, c_err_msg);
        strcpy ( c_msg, "System error in calling fn_exp_day_upd_bfo. Contact system support" );
        fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
				fn_userlog(c_ServiceName,"Pls check, Error in calling fn_exp_day_upd_bfo");
				return;
			}
		}
		else
		{
			strcpy ( c_msg, "Error : Invalid Exchange code,Please check.." );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			fn_userlog(c_ServiceName,"Error : Invalid Exchange code,Please check ");
			return;
		}
		fn_userlog( c_ServiceName, "After Calling Function for update tag on Expiry day.");
		strcpy ( c_msg, "Function for update tag on Expiry day is successfully called." );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
	}
	else
	{
		strcpy ( c_msg, "No need to call function for update tag on non-Expiry day." );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		fn_userlog( c_ServiceName, "Not Calling Function for Expiry Day Update as today is not an expiry day.Bye");
	}

  } /** Ver 1.6 **/
	/*** Ver 1.5 Ends ***/
  /** Ver 1.6 Starts **/
  else if ( c_run_mode != 'N' )
  {

    c_flg='Z';
    fn_upd_audittab(c_ServiceName,c_ServiceName,c_flg,c_xchng_cd , c_trd_dt);

  }
  /** Ver 1.6 Ends **/

  return;
}
	/**** Ver 1.2 Starts ****/

/**** Ver 1.4 **** Linked to library ***
void fn_upd_audittab ( char c_flg ,char* c_xchng_cd , char *c_trd_dt)
{
  char    c_err_msg[256];
  char    c_ServiceName[33];
  char    c_tag[32];

  int     i_trnsctn;

  strcpy ( c_ServiceName, "bat_eod_mtm" );
  sprintf(c_tag,"%s_%s",c_ServiceName, c_xchng_cd);

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31150",LIBMSG,c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
		return;
  }
	
	fn_userlog(c_ServiceName, "Val of Exg Cd=<%s>, c_flg<%c>, trd_dt<%s>", c_xchng_cd, c_flg, c_trd_dt);

  EXEC SQL
    UPDATE audit_prog_runstts
    SET    apr_succ_flg = :c_flg
    WHERE  apr_prog_name = :c_ServiceName
		AND    apr_trd_dt = :c_trd_dt
		AND 	 apr_xchng_cd = :c_xchng_cd
    AND    apr_time = ( SELECT max(apr_time)
                        FROM   audit_prog_runstts
                        where  apr_prog_name = :c_ServiceName
												AND   apr_xchng_cd = :c_xchng_cd  ); 

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31155", SQLMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		return;
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog(c_ServiceName, "S31160", LIBMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		return;
  }
}
	*** Ver 1.2 Ends *** Commented in Ver 1.4 ****/

int fn_bat_init ( int argc, char *argv[] ) 
{
	fn_userlog("bat_eod_mtm","inside INIT ");
	fn_var = BAT_EOD_MTM;
	return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
	return 0;
}
/*** ver 1.5 Starts ***/
int fn_allw_sprd_nfo(char *c_ServiceName,
                   char *c_err_msg,
                   char *c_trd_dt,
                   char *c_xchng_cd)
{
  int   i_trnsctn;
  int   i_splt_failed = 0;
  int   i_nosprd_cnt = 0;
  int   i_ret_val;
  int   i;
  char  c_tag[32];
  char  c_command[250];
  char  c_cur_exp_dt [ LEN_DATE ];
  char  c_far_exp_dt [ LEN_DATE ];
	
	MEMSET(c_command);
  MEMSET(c_cur_exp_dt);
  MEMSET(c_far_exp_dt);
  rtrim(c_trd_dt);

	fn_userlog( c_ServiceName, "Inside fn_allw_sprd_nfo for Stage 1.1");
	EXEC SQL
    select  max(FTQ_EXPRY_DT)
    into  :c_cur_exp_dt
    from  FTQ_FO_TRD_QT
    WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY') =to_char(to_date (:c_trd_dt, 'dd-Mon-yyyy' ),'Mon-YYYY')
    AND FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY');

  if( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31165",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check, Error in finding c_cur_exp_dt");
    return -1;
  }
	EXEC SQL
    select  max(FTQ_EXPRY_DT)
   	into  :c_far_exp_dt
    from  FTQ_FO_TRD_QT
    WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY')=to_char(add_months(to_date(:c_trd_dt,'dd-Mon-yyyy'),2),'Mon-YYYY')
    AND FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY');

  if( SQLCODE != 0)
  {
     fn_errlog(c_ServiceName, "S31170",SQLMSG, c_err_msg);
     fn_userlog(c_ServiceName,"Pls check, Error in finding c_far_exp_dt");
     return -1;
  }
	rtrim(c_cur_exp_dt);
	rtrim(c_far_exp_dt);
	i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
	if ( i_trnsctn == -1 )
	{
		fn_errlog(c_ServiceName, "S31175",SQLMSG, c_err_msg);
		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
		return -1;
	}	
	fn_userlog( c_ServiceName, "**** Updating Near Month Tag B to D and E to D ****");
	EXEC SQL
		update  FTQ_FO_TRD_QT
    set FTQ_CNTRCT_TAG = 'D'
    where FTQ_EXPRY_DT = :c_cur_exp_dt
    And FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND FTQ_CNTRCT_TAG in ('B','E')
		AND	FTQ_UNDRLYNG in (select FUM_UNDRLYNG
                           FROM  FUM_FO_UNDRLYNG_MSTR
                           WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'Y'
                           AND   FUM_XCHNG_CD = :c_xchng_cd
                           AND   FUM_PRDCT_TYP = 'F'
                           AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));
	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
	{
      fn_errlog(c_ServiceName, "S31180",SQLMSG, c_err_msg);
      fn_userlog(c_ServiceName,"Pls check,error in Update Near Month Tag B to D and E to D");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
	}
	if ( fn_committran(c_ServiceName,i_trnsctn,c_err_msg) == -1)
  {
      fn_errlog(c_ServiceName, "S31185",SQLMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
  }
	fn_userlog(c_ServiceName,"calling bat_cnt_splt for tag B to D");
	sprintf(c_command, "bat_cnt_splt %s %s NA %s B D AUT_SPLT Y %s",c_xchng_cd,c_xchng_cd,c_cur_exp_dt,c_trd_dt);
	fn_userlog( c_ServiceName, "command is:%s:",c_command );
	i_ret_val = system(c_command);
	if( i_ret_val != 0 )
  {
      fn_errlog(c_ServiceName, "S31190",UNXMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      fn_userlog(c_ServiceName,"Error calling bat_cnt_splt Process-Contact system support");
      return -1;
  }
	fn_userlog( c_ServiceName, "Inside fn_allw_sprd_nfo for Stage 1.2");

  EXEC SQL
    select  count(*)
    into  :i_splt_failed
    from  FFP_FO_FUTURES_PSTN
    where FFP_EXPRY_DT = :c_cur_exp_dt
    And FFP_PRDCT_TYP = 'F'
    AND FFP_XCHNG_CD = :c_xchng_cd
    AND FFP_CNTRCT_TAG = 'B'
		AND	FFP_UNDRLYNG in (select FUM_UNDRLYNG
                         FROM  FUM_FO_UNDRLYNG_MSTR
                         WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'Y'
                         AND   FUM_XCHNG_CD = :c_xchng_cd
                         AND   FUM_PRDCT_TYP = 'F'
                         AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));

  if ( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31195",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Querry Failed, Contact System Support");
    return -1;
  }
  fn_userlog(c_ServiceName,"i_splt_failed :%d:",i_splt_failed);
  if(i_splt_failed  > 0)
  {
    fn_errlog(c_ServiceName, "S31200", LIBMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check, spread failed contract found for B-->D");
    return -1;
  }
  fn_userlog(c_ServiceName,"successful called command is :%s:",c_command );
		
	fn_userlog( c_ServiceName, "Inside fn_allw_sprd_nfo for Stage 2.1");
  fn_userlog(c_ServiceName,"***** calling bat_cnt_splt for tag E to D *****");
  sprintf(c_command, "bat_cnt_splt %s %s NA %s E D AUT_SPLT Y %s",c_xchng_cd,c_xchng_cd,c_cur_exp_dt,c_trd_dt);
  fn_userlog( c_ServiceName, "command is:%s:",c_command );
  i_ret_val = system(c_command);
  if( i_ret_val != 0 )
  {
    fn_errlog(c_ServiceName, "S31205",UNXMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_userlog(c_ServiceName,"Error calling bat_cnt_splt Process-Contact system support");
    return -1;
  }
	fn_userlog( c_ServiceName, "Inside fn_allw_sprd_nfo for Stage 2.2");

  EXEC SQL
    select  count(*)
    into  :i_splt_failed
    from  FFP_FO_FUTURES_PSTN
    where FFP_EXPRY_DT = :c_cur_exp_dt
    And FFP_PRDCT_TYP = 'F'
    AND FFP_XCHNG_CD = :c_xchng_cd
    AND FFP_CNTRCT_TAG = 'E'
    AND FFP_UNDRLYNG in (select FUM_UNDRLYNG
                         FROM  FUM_FO_UNDRLYNG_MSTR
                         WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'Y'
                         AND   FUM_XCHNG_CD = :c_xchng_cd
                         AND   FUM_PRDCT_TYP = 'F'
                         AND   FUM_SPRD_CHNG_DT = TO_DATE(TO_DATE(:c_trd_dt,'DD-MON-YYYY')));

  if ( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31210",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Querry Failed, Contact System Support");
    return -1;
  }
  fn_userlog(c_ServiceName,"i_splt_failed :%d:",i_splt_failed);
  if(i_splt_failed  > 0)
  {
    fn_errlog(c_ServiceName, "S31215", LIBMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check, spread failed contract found for E-->D");
    return -1;
  }
  fn_userlog(c_ServiceName,"successful called command is :%s:",c_command );
	fn_userlog( c_ServiceName, "Inside fn_allw_sprd_nfo for Stage 3.1");
  fn_userlog( c_ServiceName, "**** Updating Far Month Tag C to B ****");
	i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
      fn_errlog(c_ServiceName, "S31220",SQLMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      return -1;
  }
  EXEC SQL
    update  FTQ_FO_TRD_QT
    set FTQ_CNTRCT_TAG = 'B'
    where FTQ_EXPRY_DT = :c_far_exp_dt
    And FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND FTQ_CNTRCT_TAG = 'C'
    AND FTQ_UNDRLYNG in (select FUM_UNDRLYNG
                           FROM  FUM_FO_UNDRLYNG_MSTR
                           WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'Y'
                           AND   FUM_XCHNG_CD = :c_xchng_cd
                           AND   FUM_PRDCT_TYP = 'F'
                           AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));
  if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog(c_ServiceName, "S31225",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check,error in Update Far Month Tag C to B");
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }
  if ( fn_committran(c_ServiceName,i_trnsctn,c_err_msg) == -1)
  {
    fn_errlog(c_ServiceName, "S31230",SQLMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }
	fn_userlog( c_ServiceName, "Inside fn_allw_sprd_nfo for Stage 3.2");
  fn_userlog(c_ServiceName,"calling bat_cnt_splt for tag C to B");
  sprintf(c_command, "bat_cnt_splt %s %s NA %s C B AUT_SPLT Y %s",c_xchng_cd,c_xchng_cd,c_far_exp_dt,c_trd_dt);
  fn_userlog( c_ServiceName, "command is:%s:",c_command );
  i_ret_val = system(c_command);
  if( i_ret_val != 0 )
  {
    fn_errlog(c_ServiceName, "S31235",UNXMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_userlog(c_ServiceName,"Error calling bat_cnt_splt Process-Contact system support");
    return -1;
  }

	fn_userlog( c_ServiceName, "Inside fn_allw_sprd_nfo for Stage 3.3");
  EXEC SQL
    select  count(*)
    into  :i_splt_failed
    from  FFP_FO_FUTURES_PSTN
    where FFP_EXPRY_DT = :c_far_exp_dt
    And FFP_PRDCT_TYP = 'F'
    AND FFP_XCHNG_CD = :c_xchng_cd
    AND FFP_CNTRCT_TAG = 'C'
    AND FFP_UNDRLYNG in (select FUM_UNDRLYNG
                         FROM  FUM_FO_UNDRLYNG_MSTR
                         WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'Y'
                         AND   FUM_XCHNG_CD = :c_xchng_cd
                         AND   FUM_PRDCT_TYP = 'F'
                         AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));

  if ( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31240",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Querry Failed, Contact System Support");
    return -1;
  }
  fn_userlog(c_ServiceName,"i_splt_failed :%d:",i_splt_failed);
  if(i_splt_failed  > 0)
  {
      fn_errlog(c_ServiceName, "S31245", LIBMSG, c_err_msg);
      fn_userlog(c_ServiceName,"Pls check, spread failed contract found for C-->B");
      return -1;
  }
  fn_userlog(c_ServiceName,"successful called command is :%s:",c_command );
  return 0;
	
}
int fn_rmv_sprd_nfo(char *c_ServiceName,
                   char *c_err_msg,
                   char *c_trd_dt,
                   char *c_xchng_cd)
{
  int   i_trnsctn;
  int   i_splt_failed = 0;
  int   i_nosprd_cnt = 0;
  int   i_ret_val;
  int   i;
  char  c_tag[32];
  char  c_command[250];
  char  c_cur_exp_dt [ LEN_DATE ];
  char  c_mid_exp_dt [ LEN_DATE ];
  char  c_far_exp_dt [ LEN_DATE ];

  MEMSET(c_command);
  MEMSET(c_cur_exp_dt);
  MEMSET(c_mid_exp_dt);
  MEMSET(c_far_exp_dt);
  rtrim(c_trd_dt);

	fn_userlog( c_ServiceName, "Inside fn_rmv_sprd_nfo for Stage 1");
  EXEC SQL
    select  max(FTQ_EXPRY_DT)
    into  :c_cur_exp_dt
    from  FTQ_FO_TRD_QT
    WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY') =to_char(to_date (:c_trd_dt, 'dd-Mon-yyyy' ),'Mon-YYYY')
    AND FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY');

  if( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31250",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check, Error in finding c_cur_exp_dt");
    return -1;
  }

  EXEC SQL
    select  max(FTQ_EXPRY_DT)
    into  :c_mid_exp_dt
    from  FTQ_FO_TRD_QT
    WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY')=to_char(add_months(to_date(:c_trd_dt,'dd-Mon-yyyy'),1),'Mon-YYYY')
    AND FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY');

  if( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31255",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check, Error in finding c_mid_exp_dt");
    return -1;
  }

  EXEC SQL
    select  max(FTQ_EXPRY_DT)
    into  :c_far_exp_dt
    from  FTQ_FO_TRD_QT
    WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY')=to_char(add_months(to_date(:c_trd_dt,'dd-Mon-yyyy'),2),'Mon-YYYY')
    AND FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY');

  if( SQLCODE != 0)
  {
     fn_errlog(c_ServiceName, "S31260",SQLMSG, c_err_msg);
     fn_userlog(c_ServiceName,"Pls check, Error in finding c_far_exp_dt");
     return -1;
  }

	rtrim(c_cur_exp_dt);
  rtrim(c_mid_exp_dt);
	rtrim(c_far_exp_dt);
	fn_userlog( c_ServiceName, "Inside fn_rmv_sprd_nfo for Stage 2.1");
	i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31265",SQLMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    return -1;
  }
  fn_userlog( c_ServiceName, "**** Updating Near Month Tag B to D and E to D ****");
  EXEC SQL
    update  FTQ_FO_TRD_QT
    set FTQ_CNTRCT_TAG = 'D'
    where FTQ_EXPRY_DT = :c_cur_exp_dt
    And FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND FTQ_CNTRCT_TAG in ('B','E')
    AND FTQ_UNDRLYNG in (select FUM_UNDRLYNG
                           FROM  FUM_FO_UNDRLYNG_MSTR
                           WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'N'
                           AND   FUM_XCHNG_CD = :c_xchng_cd
                           AND   FUM_PRDCT_TYP = 'F'
                           AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));
  if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
      fn_errlog(c_ServiceName, "S31270",SQLMSG, c_err_msg);
      fn_userlog(c_ServiceName,"Pls check,error in Update Near Month Tag B to D and E to D");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
  }
  if ( fn_committran(c_ServiceName,i_trnsctn,c_err_msg) == -1)
  {
      fn_errlog(c_ServiceName, "S31275",SQLMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
  }
	fn_userlog( c_ServiceName, "Inside fn_rmv_sprd_nfo for Stage 2.2");
	fn_userlog(c_ServiceName,"calling bat_cnt_splt for tag B to D");
	sprintf(c_command, "bat_cnt_splt %s %s NA %s B D AUT_SPLT N %s",c_xchng_cd,c_xchng_cd,c_cur_exp_dt,c_trd_dt);
	fn_userlog( c_ServiceName, "command is:%s:",c_command );
  i_ret_val = system(c_command);
  if( i_ret_val != 0 )
  {
      fn_errlog(c_ServiceName, "S31280",UNXMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      fn_userlog(c_ServiceName,"Error calling bat_cnt_splt Process-Contact system support");
      return -1;
  }
  fn_userlog( c_ServiceName, "Inside fn_allw_sprd_nfo for Stage 2.3");

  EXEC SQL
    select  count(*)
    into  :i_splt_failed
    from  FFP_FO_FUTURES_PSTN
    where FFP_EXPRY_DT = :c_cur_exp_dt
    And FFP_PRDCT_TYP = 'F'
    AND FFP_XCHNG_CD = :c_xchng_cd
    AND FFP_CNTRCT_TAG = 'B'
    AND FFP_UNDRLYNG in (select FUM_UNDRLYNG
                         FROM  FUM_FO_UNDRLYNG_MSTR
                         WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'N'
                         AND   FUM_XCHNG_CD = :c_xchng_cd
                         AND   FUM_PRDCT_TYP = 'F'
                         AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));

  if ( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31285",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Querry Failed, Contact System Support");
    return -1;
  }
  fn_userlog(c_ServiceName,"i_splt_failed :%d:",i_splt_failed);
  if(i_splt_failed  > 0)
  {
    fn_errlog(c_ServiceName, "S31290", LIBMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check, spread failed contract found for B-->D");
    return -1;
  }
  fn_userlog(c_ServiceName,"successful called command is :%s:",c_command );

  fn_userlog( c_ServiceName, "Inside fn_allw_sprd_nfo for Stage 3.1");
  fn_userlog(c_ServiceName,"***** calling bat_cnt_splt for tag E to D *****");
	sprintf(c_command, "bat_cnt_splt %s %s NA %s E D AUT_SPLT N %s",c_xchng_cd,c_xchng_cd,c_cur_exp_dt,c_trd_dt);
	fn_userlog( c_ServiceName, "command is:%s:",c_command );
  i_ret_val = system(c_command);
  if( i_ret_val != 0 )
  {
    fn_errlog(c_ServiceName, "S31295",UNXMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_userlog(c_ServiceName,"Error calling bat_cnt_splt Process-Contact system support");
    return -1;
  }
  fn_userlog( c_ServiceName, "Inside fn_allw_sprd_nfo for Stage 3.2");

  EXEC SQL
    select  count(*)
    into  :i_splt_failed
    from  FFP_FO_FUTURES_PSTN
    where FFP_EXPRY_DT = :c_cur_exp_dt
    And FFP_PRDCT_TYP = 'F'
    AND FFP_XCHNG_CD = :c_xchng_cd
    AND FFP_CNTRCT_TAG = 'E'
    AND FFP_UNDRLYNG in (select FUM_UNDRLYNG
                         FROM  FUM_FO_UNDRLYNG_MSTR
                         WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'N'
                         AND   FUM_XCHNG_CD = :c_xchng_cd
                         AND   FUM_PRDCT_TYP = 'F'
                         AND   FUM_SPRD_CHNG_DT = TO_DATE(TO_DATE(:c_trd_dt,'DD-MON-YYYY')));

  if ( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31300",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Querry Failed, Contact System Support");
    return -1;
  }
  fn_userlog(c_ServiceName,"i_splt_failed :%d:",i_splt_failed);
	if(i_splt_failed  > 0)
  {
    fn_errlog(c_ServiceName, "S31305", LIBMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check, spread failed contract found for E-->D");
    return -1;
  }
  fn_userlog(c_ServiceName,"successful called command is :%s:",c_command );
	fn_userlog( c_ServiceName, "Inside fn_allw_sprd_nfo for Stage 4.1");
  fn_userlog( c_ServiceName, "**** Updating Mid Month Tag B to E ****");
	i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
	if ( i_trnsctn == -1 )
  {
      fn_errlog(c_ServiceName, "S31310",SQLMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      return -1;
  }
  EXEC SQL
     update  FTQ_FO_TRD_QT
     set FTQ_CNTRCT_TAG = 'E'
     where FTQ_EXPRY_DT = :c_mid_exp_dt
     And FTQ_PRDCT_TYP = 'F'
     AND FTQ_XCHNG_CD = :c_xchng_cd
     AND FTQ_CNTRCT_TAG = 'B'
     AND FTQ_UNDRLYNG in (select FUM_UNDRLYNG
                            FROM  FUM_FO_UNDRLYNG_MSTR
                            WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'N'
                            AND   FUM_XCHNG_CD = :c_xchng_cd
                            AND   FUM_PRDCT_TYP = 'F'
                            AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));
  if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
        fn_errlog(c_ServiceName, "S31315",SQLMSG, c_err_msg);
        fn_userlog(c_ServiceName,"Pls check,error in Update Mid Month Tag B to E ");
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
  }
	if ( fn_committran(c_ServiceName,i_trnsctn,c_err_msg) == -1)
  {
        fn_errlog(c_ServiceName, "S31320",SQLMSG, c_err_msg);
        fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
  }
	fn_userlog( c_ServiceName, "Inside fn_rmv_sprd_nfo for Stage 4.2");
  fn_userlog(c_ServiceName,"calling bat_cnt_splt for tag B to E");
  sprintf(c_command, "bat_cnt_splt %s %s NA %s B E AUT_SPLT N %s",c_xchng_cd,c_xchng_cd,c_mid_exp_dt,c_trd_dt);
  fn_userlog( c_ServiceName, "command is:%s:",c_command );
  i_ret_val = system(c_command);
  if( i_ret_val != 0 )
  {
      fn_errlog(c_ServiceName, "S31325",UNXMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      fn_userlog(c_ServiceName,"Error calling bat_cnt_splt Process-Contact system support");
      return -1;
  }
	
	fn_userlog( c_ServiceName, "Inside fn_rmv_sprd_nfo for Stage 4.3");
	EXEC SQL
     select  count(*)
     into  :i_splt_failed
     from  FFP_FO_FUTURES_PSTN
     where FFP_EXPRY_DT = :c_mid_exp_dt
     And FFP_PRDCT_TYP = 'F'
     AND FFP_XCHNG_CD = :c_xchng_cd
     AND FFP_CNTRCT_TAG = 'B'
     AND FFP_UNDRLYNG in (select FUM_UNDRLYNG
                          FROM  FUM_FO_UNDRLYNG_MSTR
                          WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'N'
                          AND   FUM_XCHNG_CD = :c_xchng_cd
                          AND   FUM_PRDCT_TYP = 'F'
                          AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));

  if ( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31330",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Querry Failed, Contact System Support");
    return -1;
  }
  fn_userlog(c_ServiceName,"i_splt_failed :%d:",i_splt_failed);
  if(i_splt_failed  > 0)
  {
      fn_errlog(c_ServiceName, "S31335", LIBMSG, c_err_msg);
      fn_userlog(c_ServiceName,"Pls check, spread failed contract found for B-->E");
      return -1;
  }
  fn_userlog(c_ServiceName,"successful called command is :%s:",c_command );
	fn_userlog( c_ServiceName, "Inside fn_rmv_sprd_nfo for Stage 5.1");
	fn_userlog( c_ServiceName, "**** Updating Far Month Tag C to B ****");
  i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
      fn_errlog(c_ServiceName, "S31340",SQLMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      return -1;
  }
  EXEC SQL
    update  FTQ_FO_TRD_QT
    set FTQ_CNTRCT_TAG = 'B'
    where FTQ_EXPRY_DT = :c_far_exp_dt
    And FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND FTQ_CNTRCT_TAG = 'C'
    AND FTQ_UNDRLYNG in (select FUM_UNDRLYNG
                           FROM  FUM_FO_UNDRLYNG_MSTR
                           WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'N'
                           AND   FUM_XCHNG_CD = :c_xchng_cd
                           AND   FUM_PRDCT_TYP = 'F'
                           AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));
  if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog(c_ServiceName, "S31345",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check,error in Update Far Month Tag C to B");
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }
  if ( fn_committran(c_ServiceName,i_trnsctn,c_err_msg) == -1)
  {
    fn_errlog(c_ServiceName, "S31350",SQLMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }
	fn_userlog( c_ServiceName, "Inside fn_allw_sprd_nfo for Stage 5.2");
	fn_userlog(c_ServiceName,"calling bat_cnt_splt for tag C to B");
  sprintf(c_command, "bat_cnt_splt %s %s NA %s C B AUT_SPLT N %s",c_xchng_cd,c_xchng_cd,c_far_exp_dt,c_trd_dt);
	fn_userlog( c_ServiceName, "command is:%s:",c_command );
  i_ret_val = system(c_command);
  if( i_ret_val != 0 )
  {
    fn_errlog(c_ServiceName, "S31355",UNXMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_userlog(c_ServiceName,"Error calling bat_cnt_splt Process-Contact system support");
    return -1;
  }

  fn_userlog( c_ServiceName, "Inside fn_allw_sprd_nfo for Stage 5.3");
	
  EXEC SQL
    select  count(*)
    into  :i_splt_failed
    from  FFP_FO_FUTURES_PSTN
    where FFP_EXPRY_DT = :c_far_exp_dt
    And FFP_PRDCT_TYP = 'F'
    AND FFP_XCHNG_CD = :c_xchng_cd
    AND FFP_CNTRCT_TAG = 'C'
    AND FFP_UNDRLYNG in (select FUM_UNDRLYNG
                         FROM  FUM_FO_UNDRLYNG_MSTR
                         WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'N'
                         AND   FUM_XCHNG_CD = :c_xchng_cd
                         AND   FUM_PRDCT_TYP = 'F'
                         AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));

  if ( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31360",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Querry Failed, Contact System Support");
    return -1;
  }
  fn_userlog(c_ServiceName,"i_splt_failed :%d:",i_splt_failed);
	if(i_splt_failed  > 0)
  {
      fn_errlog(c_ServiceName, "S31365", LIBMSG, c_err_msg);
      fn_userlog(c_ServiceName,"Pls check, spread failed contract found for C-->B");
      return -1;
  }
  fn_userlog(c_ServiceName,"successful called command is :%s:",c_command );
  return 0;
}

int fn_adhoc_chg_sprd_nfo(char *c_ServiceName,
                   char *c_err_msg,
                   char *c_trd_dt,
                   char *c_xchng_cd)
{
  int   i_trnsctn;
  int   i_splt_failed = 0;
  int   i_nosprd_cnt = 0;
  int   i_ret_val;
  int   i;
  char  c_tag[32];
  char  c_command[250];
  char  c_cur_exp_dt [ LEN_DATE ];

  MEMSET(c_command);
	MEMSET(c_cur_exp_dt);
	
  rtrim(c_trd_dt);

	fn_userlog( c_ServiceName, "Inside fn_adhoc_chg_sprd_nfo for Stage 1");

  EXEC SQL
    select  max(FTQ_EXPRY_DT)
    into  :c_cur_exp_dt
    from  FTQ_FO_TRD_QT
    WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY') =to_char(to_date (:c_trd_dt, 'dd-Mon-yyyy' ),'Mon-YYYY')
    AND FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY');

  if( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31370",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check, Error in finding c_cur_exp_dt");
    return -1;
  }
  rtrim(c_cur_exp_dt);
	fn_userlog( c_ServiceName, "Inside fn_adhoc_chg_sprd_nfo for Stage 2.1");
	i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
	if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31375",SQLMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    return -1;
  }
  fn_userlog( c_ServiceName, "**** Updating cur Month Tag B to E for adhoc spread removal ****");
  EXEC SQL
    update  FTQ_FO_TRD_QT
    set FTQ_CNTRCT_TAG = 'E'
    where FTQ_EXPRY_DT = :c_cur_exp_dt
    And FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND FTQ_CNTRCT_TAG = 'B'
    AND FTQ_UNDRLYNG in (select FUM_UNDRLYNG
                           FROM  FUM_FO_UNDRLYNG_MSTR
                           WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'A'
                           AND   FUM_XCHNG_CD = :c_xchng_cd
                           AND   FUM_PRDCT_TYP = 'F'
                           AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));
  if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog(c_ServiceName, "S31380",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check,error in Update Near Month Tag B to E");
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }
  if ( fn_committran(c_ServiceName,i_trnsctn,c_err_msg) == -1)
  {
    fn_errlog(c_ServiceName, "S31385",SQLMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }
	fn_userlog( c_ServiceName, "Inside fn_adhoc_chg_sprd_nfo for Stage 2.2");
  fn_userlog(c_ServiceName,"calling bat_cnt_splt for tag B to E for adhoc spread removal");
	sprintf(c_command, "bat_cnt_splt %s %s NA %s B E AUT_SPLT A %s",c_xchng_cd,c_xchng_cd,c_cur_exp_dt,c_trd_dt);
  fn_userlog( c_ServiceName, "command is:%s:",c_command );
  i_ret_val = system(c_command);
  if( i_ret_val != 0 )
  {
    fn_errlog(c_ServiceName, "S31390",UNXMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_userlog(c_ServiceName,"Error calling bat_cnt_splt Process-Contact system support");
    return -1;
  }

	fn_userlog( c_ServiceName, "Inside fn_adhoc_chg_sprd_nfo for Stage 2.3");
  EXEC SQL
    select  count(*)
    into  :i_splt_failed
    from  FFP_FO_FUTURES_PSTN
    where FFP_EXPRY_DT = :c_cur_exp_dt
    And FFP_PRDCT_TYP = 'F'
    AND FFP_XCHNG_CD = :c_xchng_cd
    AND FFP_CNTRCT_TAG = 'B'
    AND FFP_UNDRLYNG in (select FUM_UNDRLYNG
                         FROM  FUM_FO_UNDRLYNG_MSTR
                         WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'A'
                         AND   FUM_XCHNG_CD = :c_xchng_cd
                         AND   FUM_PRDCT_TYP = 'F'
                         AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));

  if ( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31395",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Querry Failed, Contact System Support");
    return -1;
  }
  fn_userlog(c_ServiceName,"i_splt_failed :%d:",i_splt_failed);
	if(i_splt_failed  > 0)
  {
    fn_errlog(c_ServiceName, "S31400", LIBMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check, spread failed contract found for B-->E");
    return -1;
  }
  fn_userlog(c_ServiceName,"successful called command is :%s:",c_command );
  return 0;
}

int fn_allw_sprd_bfo(char *c_ServiceName,
                   char *c_err_msg,
                   char *c_trd_dt,
                   char *c_xchng_cd)
{
  int   i_trnsctn;
  int   i_splt_failed = 0;
  int   i_nosprd_cnt = 0;
  int   i_ret_val;
  int   i;
  char  c_tag[32];
  char  c_command[250];
  char  c_cur_exp_dt [ LEN_DATE ];
  char  c_far_exp_dt [ LEN_DATE ];

  MEMSET(c_command);
  MEMSET(c_cur_exp_dt);
  MEMSET(c_far_exp_dt);
  rtrim(c_trd_dt);

  fn_userlog(c_ServiceName,"Inside fn_allw_sprd_bfo for Stage 1");
  EXEC SQL
    select  max(FTQ_EXPRY_DT)
    into  :c_cur_exp_dt
    from  FTQ_FO_TRD_QT
    WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY') =to_char(to_date (:c_trd_dt, 'dd-Mon-yyyy' ),'Mon-YYYY')
    AND FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY');

  if( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31405",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check, Error in finding c_cur_exp_dt");
    return -1;
  }

  EXEC SQL
    select  max(FTQ_EXPRY_DT)
    into  :c_far_exp_dt
    from  FTQ_FO_TRD_QT
    WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY')=to_char(add_months(to_date(:c_trd_dt,'dd-Mon-yyyy'),2),'Mon-YYYY')
    AND FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY');

  if( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31410",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check, Error in finding c_far_exp_dt");
    return -1;
  }
  rtrim(c_cur_exp_dt);
  rtrim(c_far_exp_dt);
  fn_userlog(c_ServiceName,"Inside fn_allw_sprd_bfo for Stage 2.1");
  i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31415",SQLMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    return -1;
  }
  fn_userlog( c_ServiceName, "**** Updating Near Month Tag J to D and E to D ****");
  EXEC SQL
    update  FTQ_FO_TRD_QT
    set FTQ_CNTRCT_TAG = 'D'
    where FTQ_EXPRY_DT = :c_cur_exp_dt
    And FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND FTQ_CNTRCT_TAG in ('J','E')
    AND FTQ_UNDRLYNG in (select FUM_UNDRLYNG
                           FROM  FUM_FO_UNDRLYNG_MSTR
                           WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'Y'
                           AND   FUM_XCHNG_CD = :c_xchng_cd
                           AND   FUM_PRDCT_TYP = 'F'
                           AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));
  if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
      fn_errlog(c_ServiceName, "S31420",SQLMSG, c_err_msg);
      fn_userlog(c_ServiceName,"Pls check,error in Update Near Month Tag J to D and E to D");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
  }
  if ( fn_committran(c_ServiceName,i_trnsctn,c_err_msg) == -1)
  {
      fn_errlog(c_ServiceName, "S31425",SQLMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
 	}
	fn_userlog(c_ServiceName,"Inside fn_allw_sprd_bfo for Stage 2.2");
  fn_userlog(c_ServiceName,"calling bat_cnt_splt for tag J to D");
  sprintf(c_command, "bat_cnt_splt %s %s NA %s J D AUT_SPLT Y %s",c_xchng_cd,c_xchng_cd,c_cur_exp_dt,c_trd_dt);
  fn_userlog( c_ServiceName, "command is:%s:",c_command );
  i_ret_val = system(c_command);
  if( i_ret_val != 0 )
  {
      fn_errlog(c_ServiceName, "S31430",UNXMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      fn_userlog(c_ServiceName,"Error calling bat_cnt_splt Process-Contact system support");
      return -1;
  }
  fn_userlog( c_ServiceName, "Inside fn_allw_sprd_bfo for Stage 2.3");

  EXEC SQL
    select  count(*)
    into  :i_splt_failed
    from  FFP_FO_FUTURES_PSTN
    where FFP_EXPRY_DT = :c_cur_exp_dt
    And FFP_PRDCT_TYP = 'F'
    AND FFP_XCHNG_CD = :c_xchng_cd
    AND FFP_CNTRCT_TAG = 'J'
    AND FFP_UNDRLYNG in (select FUM_UNDRLYNG
                         FROM  FUM_FO_UNDRLYNG_MSTR
                         WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'Y'
                         AND   FUM_XCHNG_CD = :c_xchng_cd
                         AND   FUM_PRDCT_TYP = 'F'
                         AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));

  if ( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31435",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Querry Failed, Contact System Support");
    return -1;
  }
  fn_userlog(c_ServiceName,"i_splt_failed :%d:",i_splt_failed);
  if(i_splt_failed  > 0)
  {
    fn_errlog(c_ServiceName, "S31440", LIBMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check, spread failed contract found for J-->D");
    return -1;
  }
  fn_userlog(c_ServiceName,"successful called command is :%s:",c_command );

  fn_userlog( c_ServiceName, "Inside fn_allw_sprd_bfo for Stage 3.1");
  fn_userlog(c_ServiceName,"***** calling bat_cnt_splt for tag E to D *****");
  sprintf(c_command, "bat_cnt_splt %s %s NA %s E D AUT_SPLT Y %s",c_xchng_cd,c_xchng_cd,c_cur_exp_dt,c_trd_dt);
  fn_userlog( c_ServiceName, "command is:%s:",c_command );
  i_ret_val = system(c_command);
  if( i_ret_val != 0 )
  {
    fn_errlog(c_ServiceName, "S31445",UNXMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_userlog(c_ServiceName,"Error calling bat_cnt_splt Process-Contact system support");
    return -1;
  }
  fn_userlog( c_ServiceName, "Inside fn_allw_sprd_bfo for Stage 3.2");

  EXEC SQL
    select  count(*)
    into  :i_splt_failed
    from  FFP_FO_FUTURES_PSTN
    where FFP_EXPRY_DT = :c_cur_exp_dt
    And FFP_PRDCT_TYP = 'F'
    AND FFP_XCHNG_CD = :c_xchng_cd
    AND FFP_CNTRCT_TAG = 'E'
    AND FFP_UNDRLYNG in (select FUM_UNDRLYNG
                         FROM  FUM_FO_UNDRLYNG_MSTR
                         WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'Y'
                         AND   FUM_XCHNG_CD = :c_xchng_cd
                         AND   FUM_PRDCT_TYP = 'F'
                         AND   FUM_SPRD_CHNG_DT = TO_DATE(TO_DATE(:c_trd_dt,'DD-MON-YYYY')));

  if ( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31450",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Querry Failed, Contact System Support");
    return -1;
  }
  fn_userlog(c_ServiceName,"i_splt_failed :%d:",i_splt_failed);
  if(i_splt_failed  > 0)
  {
    fn_errlog(c_ServiceName, "S31455", LIBMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check, spread failed contract found for E->D");
    return -1;
  }
  fn_userlog(c_ServiceName,"successful called command is :%s:",c_command );
  fn_userlog( c_ServiceName, "Inside fn_allw_sprd_bfo for Stage 4.1");
	i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
 	if ( i_trnsctn == -1 )
 	{
   	fn_errlog(c_ServiceName, "S31460",SQLMSG, c_err_msg);
   	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
   	return -1;
	}
  fn_userlog( c_ServiceName, "**** Updating Far Month Tag L to J ****");
  EXEC SQL
    update  FTQ_FO_TRD_QT
    set FTQ_CNTRCT_TAG = 'J'
    where FTQ_EXPRY_DT = :c_far_exp_dt
    And FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND FTQ_CNTRCT_TAG = 'L'
    AND FTQ_UNDRLYNG in (select FUM_UNDRLYNG
                           FROM  FUM_FO_UNDRLYNG_MSTR
                           WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'Y'
                           AND   FUM_XCHNG_CD = :c_xchng_cd
                           AND   FUM_PRDCT_TYP = 'F'
                           AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));
  if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog(c_ServiceName, "S31465",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check,error in Update Far Month Tag L to J");
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }
  if ( fn_committran(c_ServiceName,i_trnsctn,c_err_msg) == -1)
  {
    fn_errlog(c_ServiceName, "S31470",SQLMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }
  fn_userlog( c_ServiceName, "Inside fn_allw_sprd_bfo for Stage 4.2");
  fn_userlog(c_ServiceName,"calling bat_cnt_splt for tag L to J");
  sprintf(c_command, "bat_cnt_splt %s %s NA %s L J AUT_SPLT Y %s",c_xchng_cd,c_xchng_cd,c_far_exp_dt,c_trd_dt);
  fn_userlog( c_ServiceName, "command is:%s:",c_command );
  i_ret_val = system(c_command);
  if( i_ret_val != 0 )
  {
    fn_errlog(c_ServiceName, "S31475",UNXMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_userlog(c_ServiceName,"Error calling bat_cnt_splt Process-Contact system support");
    return -1;
  }

  fn_userlog( c_ServiceName, "Inside fn_allw_sprd_bfo for Stage 4.3");
  EXEC SQL
    select  count(*)
    into  :i_splt_failed
    from  FFP_FO_FUTURES_PSTN
    where FFP_EXPRY_DT = :c_far_exp_dt
    And FFP_PRDCT_TYP = 'F'
    AND FFP_XCHNG_CD = :c_xchng_cd
    AND FFP_CNTRCT_TAG = 'L'
    AND FFP_UNDRLYNG in (select FUM_UNDRLYNG
                         FROM  FUM_FO_UNDRLYNG_MSTR
                         WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'Y'
                         AND   FUM_XCHNG_CD = :c_xchng_cd
                         AND   FUM_PRDCT_TYP = 'F'
                         AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));
  if ( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31480",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Querry Failed, Contact System Support");
    return -1;
  }
  fn_userlog(c_ServiceName,"i_splt_failed :%d:",i_splt_failed);
 	if(i_splt_failed  > 0)
 	{
   	fn_errlog(c_ServiceName, "S31485", LIBMSG, c_err_msg);
   	fn_userlog(c_ServiceName,"Pls check, spread failed contract found for L-->J");
   	return -1;
 	}
 	fn_userlog(c_ServiceName,"successful called command is :%s:",c_command );
 	return 0;
}

int fn_rmv_sprd_bfo(char *c_ServiceName,
                   char *c_err_msg,
                   char *c_trd_dt,
                   char *c_xchng_cd)
{
  int   i_trnsctn;
  int   i_splt_failed = 0;
  int   i_nosprd_cnt = 0;
  int   i_ret_val;
  int   i;
  char  c_tag[32];
  char  c_command[250];
  char  c_cur_exp_dt [ LEN_DATE ];
  char  c_mid_exp_dt [ LEN_DATE ];
  char  c_far_exp_dt [ LEN_DATE ];

  MEMSET(c_command);
  MEMSET(c_cur_exp_dt);
  MEMSET(c_mid_exp_dt);
  MEMSET(c_far_exp_dt);
  rtrim(c_trd_dt);

  fn_userlog( c_ServiceName, "Inside fn_rmv_sprd_bfo for Stage 1");
  EXEC SQL
    select  max(FTQ_EXPRY_DT)
    into  :c_cur_exp_dt
    from  FTQ_FO_TRD_QT
    WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY') =to_char(to_date (:c_trd_dt, 'dd-Mon-yyyy' ),'Mon-YYYY')
    AND FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY');

  if( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31490",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check, Error in finding c_cur_exp_dt");
    return -1;
  }

  EXEC SQL
    select  max(FTQ_EXPRY_DT)
    into  :c_mid_exp_dt
    from  FTQ_FO_TRD_QT
    WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY')=to_char(add_months(to_date(:c_trd_dt,'dd-Mon-yyyy'),1),'Mon-YYYY')
    AND FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY');

  if( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31495",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check, Error in finding c_mid_exp_dt");
    return -1;
  }

  EXEC SQL
    select  max(FTQ_EXPRY_DT)
    into  :c_far_exp_dt
    from  FTQ_FO_TRD_QT
    WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY')=to_char(add_months(to_date(:c_trd_dt,'dd-Mon-yyyy'),2),'Mon-YYYY')
    AND FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY');

  if( SQLCODE != 0)
  {
     fn_errlog(c_ServiceName, "S31500",SQLMSG, c_err_msg);
     fn_userlog(c_ServiceName,"Pls check, Error in finding c_far_exp_dt");
     return -1;
  }

  rtrim(c_cur_exp_dt);
  rtrim(c_mid_exp_dt);
  rtrim(c_far_exp_dt);
	fn_userlog( c_ServiceName, "Inside fn_rmv_sprd_nfo for Stage 2.1");
	i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31505",SQLMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    return -1;
  }
  fn_userlog( c_ServiceName, "**** Updating Near Month Tag J to D and E to D ****");
  EXEC SQL
    update  FTQ_FO_TRD_QT
    set FTQ_CNTRCT_TAG = 'D'
    where FTQ_EXPRY_DT = :c_cur_exp_dt
    And FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND FTQ_CNTRCT_TAG in ('J','E')
    AND FTQ_UNDRLYNG in (select FUM_UNDRLYNG
                           FROM  FUM_FO_UNDRLYNG_MSTR
                           WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'N'
                           AND   FUM_XCHNG_CD = :c_xchng_cd
                           AND   FUM_PRDCT_TYP = 'F'
                           AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));
  if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
      fn_errlog(c_ServiceName, "S31510",SQLMSG, c_err_msg);
      fn_userlog(c_ServiceName,"Pls check,error in Update Near Month Tag B to D and E to D");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
  }
  if ( fn_committran(c_ServiceName,i_trnsctn,c_err_msg) == -1)
  {
      fn_errlog(c_ServiceName, "S31515",SQLMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
  }
  fn_userlog( c_ServiceName, "Inside fn_rmv_sprd_nfo for Stage 2.2");
  fn_userlog(c_ServiceName,"calling bat_cnt_splt for tag J to D");
  sprintf(c_command, "bat_cnt_splt %s %s NA %s J D AUT_SPLT N %s",c_xchng_cd,c_xchng_cd,c_cur_exp_dt,c_trd_dt);
  fn_userlog( c_ServiceName, "command is:%s:",c_command );
  i_ret_val = system(c_command);
  if( i_ret_val != 0 )
  {
      fn_errlog(c_ServiceName, "S31520",UNXMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      fn_userlog(c_ServiceName,"Error calling bat_cnt_splt Process-Contact system support");
      return -1;
  }
  fn_userlog( c_ServiceName, "Inside fn_allw_sprd_nfo for Stage 2.3");

  EXEC SQL
    select  count(*)
    into  :i_splt_failed
    from  FFP_FO_FUTURES_PSTN
    where FFP_EXPRY_DT = :c_cur_exp_dt
    And FFP_PRDCT_TYP = 'F'
    AND FFP_XCHNG_CD = :c_xchng_cd
    AND FFP_CNTRCT_TAG = 'J'
    AND FFP_UNDRLYNG in (select FUM_UNDRLYNG
                         FROM  FUM_FO_UNDRLYNG_MSTR
                         WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'N'
                         AND   FUM_XCHNG_CD = :c_xchng_cd
                         AND   FUM_PRDCT_TYP = 'F'
                         AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));

  if ( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31525",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Querry Failed, Contact System Support");
    return -1;
  }
  fn_userlog(c_ServiceName,"i_splt_failed :%d:",i_splt_failed);
  if(i_splt_failed  > 0)
  {
    fn_errlog(c_ServiceName, "S31530", LIBMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check, spread failed contract found for J-->D"); 
		return -1; 
	} 
	fn_userlog(c_ServiceName,"successful called command is :%s:",c_command );
	fn_userlog( c_ServiceName, "Inside fn_allw_sprd_nfo for Stage 3.1");
  fn_userlog(c_ServiceName,"***** calling bat_cnt_splt for tag E to D *****");
  sprintf(c_command, "bat_cnt_splt %s %s NA %s E D AUT_SPLT N %s",c_xchng_cd,c_xchng_cd,c_cur_exp_dt,c_trd_dt);
  fn_userlog( c_ServiceName, "command is:%s:",c_command );
  i_ret_val = system(c_command);
  if( i_ret_val != 0 )
  {
    fn_errlog(c_ServiceName, "S31535",UNXMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_userlog(c_ServiceName,"Error calling bat_cnt_splt Process-Contact system support");
    return -1;
  }
  fn_userlog( c_ServiceName, "Inside fn_allw_sprd_nfo for Stage 3.2");

  EXEC SQL
    select  count(*)
    into  :i_splt_failed
    from  FFP_FO_FUTURES_PSTN
    where FFP_EXPRY_DT = :c_cur_exp_dt
    And FFP_PRDCT_TYP = 'F'
    AND FFP_XCHNG_CD = :c_xchng_cd
    AND FFP_CNTRCT_TAG = 'E'
    AND FFP_UNDRLYNG in (select FUM_UNDRLYNG
                         FROM  FUM_FO_UNDRLYNG_MSTR
                         WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'N'
                         AND   FUM_XCHNG_CD = :c_xchng_cd
                         AND   FUM_PRDCT_TYP = 'F'
                         AND   FUM_SPRD_CHNG_DT = TO_DATE(TO_DATE(:c_trd_dt,'DD-MON-YYYY')));
	
	if ( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31540",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Querry Failed, Contact System Support");
    return -1;
  }
  fn_userlog(c_ServiceName,"i_splt_failed :%d:",i_splt_failed);
  if(i_splt_failed  > 0)
  {
    fn_errlog(c_ServiceName, "S31545", LIBMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check, spread failed contract found for E-->D");
    return -1;
  }
  fn_userlog(c_ServiceName,"successful called command is :%s:",c_command );
  fn_userlog( c_ServiceName, "Inside fn_allw_sprd_nfo for Stage 4.1");
  fn_userlog( c_ServiceName, "**** Updating Mid Month Tag J to E ****");
  i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31550",SQLMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    return -1;
  }
  fn_userlog( c_ServiceName, "**** Updating mid Month Tag J to E ****");
  EXEC SQL
    update  FTQ_FO_TRD_QT
    set FTQ_CNTRCT_TAG = 'E'
    where FTQ_EXPRY_DT = :c_mid_exp_dt
    And FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND FTQ_CNTRCT_TAG = 'J'
    AND FTQ_UNDRLYNG in (select FUM_UNDRLYNG
                           FROM  FUM_FO_UNDRLYNG_MSTR
                           WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'N'
                           AND   FUM_XCHNG_CD = :c_xchng_cd
                           AND   FUM_PRDCT_TYP = 'F'
                           AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));
  if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog(c_ServiceName, "S31555",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check,error in Update Mid Month Tag J to E ");
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }
  if ( fn_committran(c_ServiceName,i_trnsctn,c_err_msg) == -1)
  {
    fn_errlog(c_ServiceName, "S31560",SQLMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }
  fn_userlog( c_ServiceName, "Inside fn_rmv_sprd_bfo for Stage 3.2");
  fn_userlog(c_ServiceName,"calling bat_cnt_splt for tag J to E");
  sprintf(c_command, "bat_cnt_splt %s %s NA %s J E AUT_SPLT N %s",c_xchng_cd,c_xchng_cd,c_mid_exp_dt,c_trd_dt);
  fn_userlog( c_ServiceName, "command is:%s:",c_command );
  i_ret_val = system(c_command);
  if( i_ret_val != 0 )
  {
    fn_errlog(c_ServiceName, "S31565",UNXMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_userlog(c_ServiceName,"Error calling bat_cnt_splt Process-Contact system support");
    return -1;
  }

  fn_userlog( c_ServiceName, "Inside fn_rmv_sprd_bfo for Stage 3.3");
  EXEC SQL
    select  count(*)
    into  :i_splt_failed
    from  FFP_FO_FUTURES_PSTN
    where FFP_EXPRY_DT = :c_mid_exp_dt
    And FFP_PRDCT_TYP = 'F'
    AND FFP_XCHNG_CD = :c_xchng_cd
    AND FFP_CNTRCT_TAG = 'J'
    AND FFP_UNDRLYNG in (select FUM_UNDRLYNG
                         FROM  FUM_FO_UNDRLYNG_MSTR
                         WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'N'
                         AND   FUM_XCHNG_CD = :c_xchng_cd
                         AND   FUM_PRDCT_TYP = 'F'
                         AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));

  if ( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31570",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Querry Failed, Contact System Support");
    return -1;
  }
  fn_userlog(c_ServiceName,"i_splt_failed :%d:",i_splt_failed);
  if(i_splt_failed  > 0)
  {
    fn_errlog(c_ServiceName, "S31575", LIBMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check, spread failed contract found for J-->E");
    return -1;
  }
  fn_userlog(c_ServiceName,"successful called command is :%s:",c_command );
	fn_userlog( c_ServiceName, "Inside fn_rmv_sprd_nfo for Stage 5.1");
  fn_userlog( c_ServiceName, "**** Updating Far Month Tag L to J ****");
  i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
      fn_errlog(c_ServiceName, "S31580",SQLMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      return -1;
  }
  EXEC SQL
    update  FTQ_FO_TRD_QT
    set FTQ_CNTRCT_TAG = 'J'
    where FTQ_EXPRY_DT = :c_far_exp_dt
    And FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND FTQ_CNTRCT_TAG = 'L'
    AND FTQ_UNDRLYNG in (select FUM_UNDRLYNG
                           FROM  FUM_FO_UNDRLYNG_MSTR
                           WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'N'
                           AND   FUM_XCHNG_CD = :c_xchng_cd
                           AND   FUM_PRDCT_TYP = 'F'
                           AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));
  if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog(c_ServiceName, "S31585",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check,error in Update Far Month Tag L to J");
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }
  if ( fn_committran(c_ServiceName,i_trnsctn,c_err_msg) == -1)
  {
    fn_errlog(c_ServiceName, "S31590",SQLMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }
	fn_userlog( c_ServiceName, "Inside fn_allw_sprd_nfo for Stage 5.2");
  fn_userlog(c_ServiceName,"calling bat_cnt_splt for tag L to J");
  sprintf(c_command, "bat_cnt_splt %s %s NA %s L J AUT_SPLT N %s",c_xchng_cd,c_xchng_cd,c_far_exp_dt,c_trd_dt);
  fn_userlog( c_ServiceName, "command is:%s:",c_command );
  i_ret_val = system(c_command);
  if( i_ret_val != 0 )
  {
    fn_errlog(c_ServiceName, "S31595",UNXMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_userlog(c_ServiceName,"Error calling bat_cnt_splt Process-Contact system support");
    return -1;
  }

  fn_userlog( c_ServiceName, "Inside fn_allw_sprd_nfo for Stage 5.3");

  EXEC SQL
    select  count(*)
    into  :i_splt_failed
    from  FFP_FO_FUTURES_PSTN
    where FFP_EXPRY_DT = :c_far_exp_dt
    And FFP_PRDCT_TYP = 'F'
    AND FFP_XCHNG_CD = :c_xchng_cd
    AND FFP_CNTRCT_TAG = 'L'
    AND FFP_UNDRLYNG in (select FUM_UNDRLYNG
                         FROM  FUM_FO_UNDRLYNG_MSTR
                         WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'N'
                         AND   FUM_XCHNG_CD = :c_xchng_cd
                         AND   FUM_PRDCT_TYP = 'F'
                         AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));
	if ( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31600",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Querry Failed, Contact System Support");
    return -1;
  }
  fn_userlog(c_ServiceName,"i_splt_failed :%d:",i_splt_failed);
  if(i_splt_failed  > 0)
  {
      fn_errlog(c_ServiceName, "S31605", LIBMSG, c_err_msg);
      fn_userlog(c_ServiceName,"Pls check, spread failed contract found for L-->J");
      return -1;
  }
  fn_userlog(c_ServiceName,"successful called command is :%s:",c_command );
  return 0;
}

int fn_adhoc_chg_sprd_bfo(char *c_ServiceName,
                   char *c_err_msg,
                   char *c_trd_dt,
                   char *c_xchng_cd)
{

  int   i_trnsctn;
  int   i_splt_failed = 0;
  int   i_nosprd_cnt = 0;
  int   i_ret_val;
  int   i;
  char  c_tag[32];
  char  c_command[250];
  char  c_cur_exp_dt [ LEN_DATE ];

  MEMSET(c_command);
  MEMSET(c_cur_exp_dt);
  rtrim(c_trd_dt);

  fn_userlog( c_ServiceName, "Inside fn_adhoc_chg_sprd_bfo for Stage 1");

  EXEC SQL
    select  max(FTQ_EXPRY_DT)
    into  :c_cur_exp_dt
    from  FTQ_FO_TRD_QT
    WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY') =to_char(to_date (:c_trd_dt, 'dd-Mon-yyyy' ),'Mon-YYYY')
    AND FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY');

  if( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31610",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check, Error in finding c_cur_exp_dt");
    return -1;
  }
  rtrim(c_cur_exp_dt);
  fn_userlog( c_ServiceName, "Inside fn_adhoc_chg_sprd_bfo for Stage 3.1");
  i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31615",SQLMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    return -1;
  }
  fn_userlog( c_ServiceName, "**** Updating cur Month Tag J to E for adhoc spread removal ****");
  EXEC SQL
    update  FTQ_FO_TRD_QT
    set FTQ_CNTRCT_TAG = 'E'
    where FTQ_EXPRY_DT = :c_cur_exp_dt
    And FTQ_PRDCT_TYP = 'F'
    AND FTQ_XCHNG_CD = :c_xchng_cd
    AND FTQ_CNTRCT_TAG = 'J'
    AND FTQ_UNDRLYNG in (select FUM_UNDRLYNG
                           FROM  FUM_FO_UNDRLYNG_MSTR
                           WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'A'
                           AND   FUM_XCHNG_CD = :c_xchng_cd
                           AND   FUM_PRDCT_TYP = 'F'
                           AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));
  if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog(c_ServiceName, "S31620",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check,error in Update Near Month Tag B to E");
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }
  if ( fn_committran(c_ServiceName,i_trnsctn,c_err_msg) == -1)
  {
    fn_errlog(c_ServiceName, "S31625",SQLMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }
  fn_userlog( c_ServiceName, "Inside fn_adhoc_chg_sprd_bfo for Stage 3.2");
  fn_userlog(c_ServiceName,"calling bat_cnt_splt for tag J to E for adhoc spread removal");
  sprintf(c_command, "bat_cnt_splt %s %s NA %s J E AUT_SPLT A %s",c_xchng_cd,c_xchng_cd,c_cur_exp_dt,c_trd_dt);
  fn_userlog( c_ServiceName, "command is:%s:",c_command );
  i_ret_val = system(c_command);
  if( i_ret_val != 0 )
  {
    fn_errlog(c_ServiceName, "S31630",UNXMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_userlog(c_ServiceName,"Error calling bat_cnt_splt Process-Contact system support");
    return -1;
  }

  fn_userlog( c_ServiceName, "Inside fn_adhoc_chg_sprd_bfo for Stage 3.3");
  EXEC SQL
    select  count(*)
    into  :i_splt_failed
    from  FFP_FO_FUTURES_PSTN
    where FFP_EXPRY_DT = :c_cur_exp_dt
    And FFP_PRDCT_TYP = 'F'
    AND FFP_XCHNG_CD = :c_xchng_cd
    AND FFP_CNTRCT_TAG = 'J'
    AND FFP_UNDRLYNG in (select FUM_UNDRLYNG
                         FROM  FUM_FO_UNDRLYNG_MSTR
                         WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = 'A'
                         AND   FUM_XCHNG_CD = :c_xchng_cd
                         AND   FUM_PRDCT_TYP = 'F'
                         AND   FUM_SPRD_CHNG_DT = TO_DATE(:c_trd_dt,'DD-MON-YYYY'));

  if ( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31635",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Querry Failed, Contact System Support");
    return -1;
  }
  fn_userlog(c_ServiceName,"i_splt_failed :%d:",i_splt_failed);
  if(i_splt_failed  > 0)
  {
    fn_errlog(c_ServiceName, "S31640", LIBMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check, spread failed contract found for J-->E");
    return -1;
  }
  fn_userlog(c_ServiceName,"successful called command is :%s:",c_command );
  return 0;
}
int fn_exp_day_upd_nfo(char *c_ServiceName,
                   char *c_err_msg,
                   char *c_trd_dt,
                   char *c_xchng_cd)
{
	int   i_pnding_eodmtm_cnt = 0;
	int   i_trnsctn;
  int   i_ret_val;
  int   i;
  char  c_tag[32];

	rtrim(c_trd_dt);
	
	fn_userlog( c_ServiceName, "Inside fn_exp_day_upd_nfo for Stage 1");
  EXEC SQL
    SELECT  count(*)
    INTO    :i_pnding_eodmtm_cnt
    FROM    FFP_FO_FUTURES_PSTN,FTQ_FO_TRD_QT
    WHERE   (NVL(FFP_EODMTM_DT, (SYSDATE +1)) != to_date(:c_trd_dt,'DD-Mon-yyyy')
    OR       FTQ_CLS_PRC != (FFP_MTM_OPN_VAL / FFP_OPNPSTN_QTY))
    AND    FFP_OPNPSTN_QTY    != 0
    AND    FFP_OPNPSTN_FLW    != 'N'
    AND    FFP_XCHNG_CD    = FTQ_XCHNG_CD
    AND    FFP_PRDCT_TYP   = FTQ_PRDCT_TYP
    AND    FFP_INDSTK      = FTQ_INDSTK
    AND    FFP_UNDRLYNG    = FTQ_UNDRLYNG
    AND    FFP_EXPRY_DT    = FTQ_EXPRY_DT
    AND    FFP_EXER_TYP    = FTQ_EXER_TYP
    AND    FTQ_XCHNG_CD = :c_xchng_cd
    AND    FTQ_PRDCT_TYP = 'F';

  if( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31645",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check, Error in finding i_pnding_eodmtm_cnt");
    return -1;
  }
  fn_userlog( c_ServiceName, "i_pnding_eodmtm_cnt:|%d|",i_pnding_eodmtm_cnt);
  if(i_pnding_eodmtm_cnt == 0)
  {
		fn_userlog( c_ServiceName, "Inside fn_exp_day_upd_nfo for Stage 2");
		fn_userlog( c_ServiceName, "Shifting New Month Tag NULL to C");
		i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
		if ( i_trnsctn == -1 )
		{
			fn_errlog(c_ServiceName, "S31650",SQLMSG, c_err_msg);
			fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
			return -1;
		}
		EXEC SQL
			update  FTQ_FO_TRD_QT
			set FTQ_CNTRCT_TAG = 'C',
			FTQ_FP_CNTRCT_TAG = 'Z'
			where FTQ_EXPRY_DT = (select max(FTQ_EXPRY_DT)
			from FTQ_FO_TRD_QT
			WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY') =to_char(add_months(to_date(:c_trd_dt,'dd-Mon-yyyy'),3),'Mon-YYYY')
			AND FTQ_PRDCT_TYP = 'F'
			AND FTQ_XCHNG_CD = :c_xchng_cd
			AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY'))
			And FTQ_PRDCT_TYP = 'F'
			AND FTQ_XCHNG_CD = :c_xchng_cd;

		if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
		{
			fn_errlog(c_ServiceName, "S31655",SQLMSG, c_err_msg);
			fn_userlog(c_ServiceName,"Pls check,error in Updating New Month Tag NULL to C");
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			return -1;
		}
		if ( SQLCODE == NO_DATA_FOUND)
		{
			fn_userlog(c_ServiceName,"Alert || No Far Month Contracts found || RUN Process after contract download");
		}

    /**** First Update Current month FuturePlus Contract tag to W at contract level, position level ***/
		EXEC SQL
			update  FTQ_FO_TRD_QT
			set FTQ_FP_CNTRCT_TAG = 'W'
			where FTQ_EXPRY_DT = (select max(FTQ_EXPRY_DT)
						from FTQ_FO_TRD_QT
						WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY') =to_char(to_date(:c_trd_dt,'dd-Mon-yyyy'),'Mon-YYYY')
						AND FTQ_XCHNG_CD = :c_xchng_cd
						AND FTQ_PRDCT_TYP = 'F'
						AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY'))
			And FTQ_PRDCT_TYP = 'F'
			AND FTQ_XCHNG_CD = :c_xchng_cd;
		if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
		{
			fn_errlog(c_ServiceName, "S31660",SQLMSG, c_err_msg);
			fn_userlog(c_ServiceName,"Pls check,error in Updating Fut Plus Tag W");
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			return -1;
		}

		fn_userlog(c_ServiceName,"Updating Fut Plus Tag W in FFP_FO_FUTURES_PSTN");
    EXEC SQL
      UPDATE FFP_FO_FUTURES_PSTN
         SET FFP_CNTRCT_TAG='W'
        WHERE FFP_XCHNG_CD=:c_xchng_cd
          AND FFP_PRDCT_TYP='P'
          AND FFP_OPNPSTN_FLW='N'
					AND FFP_CNTRCT_TAG='X'
          AND FFP_EXPRY_DT = (select max(FTQ_EXPRY_DT)
            from FTQ_FO_TRD_QT
            WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY') =to_char(to_date(:c_trd_dt,'dd-Mon-yyyy'),'Mon-YYYY')
            AND FTQ_XCHNG_CD = :c_xchng_cd
            AND FTQ_PRDCT_TYP = 'F'
            AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY'));
    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog(c_ServiceName, "S31665",SQLMSG, c_err_msg);
      fn_userlog(c_ServiceName,"Pls check,error in Updating Fut Plus Tag W");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }

		fn_userlog(c_ServiceName,"Updating Fut Plus Tag W in FUP_FUT_UNDRLYNG_PSTN");
    EXEC SQL
      UPDATE FUP_FUT_UNDRLYNG_PSTN
         SET FUP_CNTRCT_TAG='W'
       WHERE FUP_XCHNG_CD=:c_xchng_cd
         AND FUP_PRDCT_TYP='P'
         AND FUP_UOPNPSTN_FLW='N'
         AND FUP_CNTRCT_TAG='X';
    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog(c_ServiceName, "S31670",SQLMSG, c_err_msg);
      fn_userlog(c_ServiceName,"Pls check,error in Updating Fut Plus Tag W");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }
 
     
    /*** Second: Update new contrag Y to X of mid contracts, positions for futureplus ***/

		EXEC SQL
			update  FTQ_FO_TRD_QT
			set FTQ_FP_CNTRCT_TAG = 'X'
			where FTQ_EXPRY_DT = (select max(FTQ_EXPRY_DT)
							from FTQ_FO_TRD_QT
							WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY') =to_char(add_months(to_date(:c_trd_dt,'dd-Mon-yyyy'),1),'Mon-YYYY')
							AND FTQ_PRDCT_TYP = 'F'
							AND FTQ_XCHNG_CD = :c_xchng_cd
							AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY'))
			And FTQ_PRDCT_TYP = 'F'
			AND FTQ_XCHNG_CD = :c_xchng_cd;
		if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
		{
			fn_errlog(c_ServiceName, "S31675",SQLMSG, c_err_msg);
			fn_userlog(c_ServiceName,"Pls check,error in Updating Fut Plus Tag X");
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			return -1;
		}

    EXEC SQL
      UPDATE FFP_FO_FUTURES_PSTN
         SET FFP_CNTRCT_TAG='X'
        WHERE FFP_XCHNG_CD=:c_xchng_cd
          AND FFP_PRDCT_TYP='P'
          AND FFP_OPNPSTN_FLW='N'
          AND FFP_CNTRCT_TAG='Y'
          AND FFP_EXPRY_DT = (select max(FTQ_EXPRY_DT)
            from FTQ_FO_TRD_QT
            WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY') =to_char(add_months(to_date(:c_trd_dt,'dd-Mon-yyyy'),1),'Mon-YYYY')
            AND FTQ_XCHNG_CD = :c_xchng_cd
            AND FTQ_PRDCT_TYP = 'F'
            AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY'));
    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog(c_ServiceName, "S31680",SQLMSG, c_err_msg);
      fn_userlog(c_ServiceName,"Pls check,error in Updating Fut Plus Tag W");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }

    EXEC SQL
      UPDATE FUP_FUT_UNDRLYNG_PSTN
         SET FUP_CNTRCT_TAG='X'
       WHERE FUP_XCHNG_CD=:c_xchng_cd
         AND FUP_PRDCT_TYP='P'
         AND FUP_UOPNPSTN_FLW='N'
         AND FUP_CNTRCT_TAG='Y';
    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog(c_ServiceName, "S31685",SQLMSG, c_err_msg);
      fn_userlog(c_ServiceName,"Pls check,error in Updating Fut Plus Tag W");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }


		EXEC SQL
			update  FTQ_FO_TRD_QT
			set FTQ_FP_CNTRCT_TAG = 'Y'
			where FTQ_EXPRY_DT = (select max(FTQ_EXPRY_DT)
							from FTQ_FO_TRD_QT
							WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY') =to_char(add_months(to_date(:c_trd_dt,'dd-Mon-yyyy'),2),'Mon-YYYY')
							AND FTQ_XCHNG_CD = :c_xchng_cd
							AND FTQ_PRDCT_TYP = 'F'
							AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY'))
			And FTQ_PRDCT_TYP = 'F'
			AND FTQ_XCHNG_CD = :c_xchng_cd;
		if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
		{
			fn_errlog(c_ServiceName, "S31690",SQLMSG, c_err_msg);
			fn_userlog(c_ServiceName,"Pls check,error in Updating Fut Plus Tag Y");
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			return -1;
		}


    EXEC SQL
      UPDATE FFP_FO_FUTURES_PSTN
         SET FFP_CNTRCT_TAG='Y'
        WHERE FFP_XCHNG_CD=:c_xchng_cd
          AND FFP_PRDCT_TYP='P'
          AND FFP_OPNPSTN_FLW='N'
          AND FFP_CNTRCT_TAG='Z'
          AND FFP_EXPRY_DT = (select max(FTQ_EXPRY_DT)
            from FTQ_FO_TRD_QT
            WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY') =to_char(add_months(to_date(:c_trd_dt,'dd-Mon-yyyy'),2),'Mon-YYYY')
            AND FTQ_XCHNG_CD = :c_xchng_cd
            AND FTQ_PRDCT_TYP = 'F'
            AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY'));
    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog(c_ServiceName, "S31695",SQLMSG, c_err_msg);
      fn_userlog(c_ServiceName,"Pls check,error in Updating Fut Plus Tag W");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }

    EXEC SQL
      UPDATE FUP_FUT_UNDRLYNG_PSTN
         SET FUP_CNTRCT_TAG='Y'
       WHERE FUP_XCHNG_CD=:c_xchng_cd
         AND FUP_PRDCT_TYP='P'
         AND FUP_UOPNPSTN_FLW='N'
         AND FUP_CNTRCT_TAG='Z';
    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog(c_ServiceName, "S31700",SQLMSG, c_err_msg);
      fn_userlog(c_ServiceName,"Pls check,error in Updating Fut Plus Tag W");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }

		if ( fn_committran(c_ServiceName,i_trnsctn,c_err_msg) == -1)
		{
			fn_errlog(c_ServiceName, "S31705",SQLMSG, c_err_msg);
			fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			return -1;
		}
		fn_userlog( c_ServiceName, "fn_cntrct_splt_nfo for expiry Completed");
	}
  else
  {
    fn_userlog(c_ServiceName,"Pls check,i_pnding_eodmtm_cnt found");
    return -1;
  }
	fn_userlog(c_ServiceName,"Successfully completed fn_exp_day_upd_nfo");
	return 0;
}

int fn_exp_day_upd_bfo(char *c_ServiceName,
                   char *c_err_msg,
                   char *c_trd_dt,
                   char *c_xchng_cd)
{
  int   i_pnding_eodmtm_cnt = 0;
  int   i_trnsctn;
  int   i_ret_val;
  int   i;
  char  c_tag[32];

  rtrim(c_trd_dt);

  fn_userlog( c_ServiceName, "Inside fn_exp_day_upd_bfo for Stage 1");
  EXEC SQL
    SELECT  count(*)
    INTO    :i_pnding_eodmtm_cnt
    FROM    FFP_FO_FUTURES_PSTN,FTQ_FO_TRD_QT
    WHERE   (NVL(FFP_EODMTM_DT,(sysdate+1)) != to_date(:c_trd_dt,'DD-Mon-yyyy')
    OR       FTQ_CLS_PRC != (FFP_MTM_OPN_VAL / FFP_OPNPSTN_QTY))
    AND    FFP_OPNPSTN_QTY    != 0
    AND    FFP_OPNPSTN_FLW    != 'N'
    AND    FFP_XCHNG_CD    = FTQ_XCHNG_CD
    AND    FFP_PRDCT_TYP   = FTQ_PRDCT_TYP
    AND    FFP_INDSTK      = FTQ_INDSTK
    AND    FFP_UNDRLYNG    = FTQ_UNDRLYNG
    AND    FFP_EXPRY_DT    = FTQ_EXPRY_DT
    AND    FFP_EXER_TYP    = FTQ_EXER_TYP
    AND    FTQ_XCHNG_CD = :c_xchng_cd
    AND    FTQ_PRDCT_TYP = 'F';


  if( SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31710",SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Pls check, Error in finding i_pnding_eodmtm_cnt");
    return -1;
  }
  fn_userlog( c_ServiceName, "i_pnding_eodmtm_cnt:|%d|",i_pnding_eodmtm_cnt);
  if(i_pnding_eodmtm_cnt == 0)
  {
    fn_userlog( c_ServiceName, "Inside fn_exp_day_upd_bfo for Stage 2");
    i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
    if ( i_trnsctn == -1 )
    {
      fn_errlog(c_ServiceName, "S31715",SQLMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      return -1;
    }
    fn_userlog( c_ServiceName, "Shifting New Month Tag NULL to C");
    EXEC SQL
      update  FTQ_FO_TRD_QT
      set FTQ_CNTRCT_TAG = 'L',
      FTQ_FP_CNTRCT_TAG = 'N'
      where FTQ_EXPRY_DT = (select max(FTQ_EXPRY_DT)
      from FTQ_FO_TRD_QT
      WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY') =to_char(add_months(to_date(:c_trd_dt,'dd-Mon-yyyy'),3),'Mon-YYYY')
      AND FTQ_PRDCT_TYP = 'F'
      AND FTQ_XCHNG_CD = :c_xchng_cd
      AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY'))
      And FTQ_PRDCT_TYP = 'F'
      AND FTQ_XCHNG_CD = :c_xchng_cd;

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog(c_ServiceName, "S31720",SQLMSG, c_err_msg);
      fn_userlog(c_ServiceName,"Pls check,error in Updating New Month Tag NULL to C");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }
    if ( SQLCODE == NO_DATA_FOUND)
    {
      fn_userlog(c_ServiceName,"Alert || No Far Month Contracts found || RUN Process after contract download");
    }
    EXEC SQL
      update  FTQ_FO_TRD_QT
      set FTQ_FP_CNTRCT_TAG = 'N'
      where FTQ_EXPRY_DT = (select max(FTQ_EXPRY_DT)
            from FTQ_FO_TRD_QT
            WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY') =to_char(to_date(:c_trd_dt,'dd-Mon-yyyy'),'Mon-YYYY')
            AND FTQ_XCHNG_CD = :c_xchng_cd
            AND FTQ_PRDCT_TYP = 'F'
            AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY'))
      And FTQ_PRDCT_TYP = 'F'
      AND FTQ_XCHNG_CD = :c_xchng_cd;
    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog(c_ServiceName, "S31725",SQLMSG, c_err_msg);
      fn_userlog(c_ServiceName,"Pls check,error in Updating Fut Plus Tag W");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }
    EXEC SQL
      update  FTQ_FO_TRD_QT
      set FTQ_FP_CNTRCT_TAG = 'N'
      where FTQ_EXPRY_DT = (select max(FTQ_EXPRY_DT)
              from FTQ_FO_TRD_QT
              WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY') =to_char(add_months(to_date(:c_trd_dt,'dd-Mon-yyyy'),1),'Mon-YYYY')
              AND FTQ_PRDCT_TYP = 'F'
              AND FTQ_XCHNG_CD = :c_xchng_cd
              AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY'))
      And FTQ_PRDCT_TYP = 'F'
      AND FTQ_XCHNG_CD = :c_xchng_cd;
    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog(c_ServiceName, "S31730",SQLMSG, c_err_msg);
      fn_userlog(c_ServiceName,"Pls check,error in Updating Fut Plus Tag X");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }

    EXEC SQL
      update  FTQ_FO_TRD_QT
      set FTQ_FP_CNTRCT_TAG = 'N'
      where FTQ_EXPRY_DT = (select max(FTQ_EXPRY_DT)
              from FTQ_FO_TRD_QT
              WHERE to_char(FTQ_EXPRY_DT,'Mon-YYYY') =to_char(add_months(to_date(:c_trd_dt,'dd-Mon-yyyy'),2),'Mon-YYYY')
              AND FTQ_XCHNG_CD = :c_xchng_cd
              AND FTQ_PRDCT_TYP = 'F'
              AND trim(FTQ_UNDRLYNG) = DECODE(:c_xchng_cd,'BFO','BSESEN','NIFTY'))
      And FTQ_PRDCT_TYP = 'F'
      AND FTQ_XCHNG_CD = :c_xchng_cd;
    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog(c_ServiceName, "S31735",SQLMSG, c_err_msg);
      fn_userlog(c_ServiceName,"Pls check,error in Updating Fut Plus Tag Y");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }

    if ( fn_committran(c_ServiceName,i_trnsctn,c_err_msg) == -1)
    {
      fn_errlog(c_ServiceName, "S31740",SQLMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }
    fn_userlog( c_ServiceName, "fn_cntrct_splt_nfo for expiry Completed");
  }
	else
  {
    fn_userlog(c_ServiceName,"Pls check,i_pnding_eodmtm_cnt found");
    return -i;
  }
  fn_userlog(c_ServiceName,"Successfully completed fn_exp_day_upd_bfo");
  return 0;
}
/*** ver 1.5 Ends ***/

int fn_position_backup(char *c_ServiceName,
									 char *c_xchng_cd,
                   char *c_err_msg)
{

int i_trnsctn=0;

    fn_userlog( c_ServiceName, "Taking Position Backup...");
  i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31745", LIBMSG, c_err_msg);
    strcpy(c_err_msg,"System error. Contact System Support");
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    return -1;
  }
  
  EXEC SQL
    INSERT INTO FFP_FO_FUTURES_PSTN_SPLT
                ( FFP_CLM_MTCH_ACCNT,
									FFP_XCHNG_CD,
									FFP_PRDCT_TYP,
									FFP_INDSTK,
									FFP_UNDRLYNG,
									FFP_EXPRY_DT,
									FFP_EXER_TYP,
									FFP_CNTRCT_TAG,
									FFP_IBUY_QTY,
									FFP_IBUY_ORD_VAL,
									FFP_ISELL_QTY,
									FFP_ISELL_ORD_VAL,
									FFP_EXBUY_QTY,
									FFP_EXBUY_ORD_VAL,
									FFP_EXSELL_QTY,
									FFP_EXSELL_ORD_VAL,
									FFP_BUY_EXCTD_QTY,
									FFP_SELL_EXCTD_QTY,
									FFP_OPNPSTN_FLW,
									FFP_OPNPSTN_QTY,
									FFP_OPNPSTN_VAL,
									FFP_MTM_OPN_VAL,
									FFP_IMTM_OPN_VAL,
									FFP_TRG_PRC,
									FFP_MIN_TRG_PRC,
									FFP_EODMTM_DT,
                  FFP_INSERT_DT
                )
                ( SELECT FFP_CLM_MTCH_ACCNT,
                  FFP_XCHNG_CD,
                  FFP_PRDCT_TYP,
                  FFP_INDSTK,
                  FFP_UNDRLYNG,
                  FFP_EXPRY_DT,
                  FFP_EXER_TYP,
                  FFP_CNTRCT_TAG,
                  FFP_IBUY_QTY,
                  FFP_IBUY_ORD_VAL,
                  FFP_ISELL_QTY,
                  FFP_ISELL_ORD_VAL,
                  FFP_EXBUY_QTY,
                  FFP_EXBUY_ORD_VAL,
                  FFP_EXSELL_QTY,
                  FFP_EXSELL_ORD_VAL,
                  FFP_BUY_EXCTD_QTY,
                  FFP_SELL_EXCTD_QTY,
                  FFP_OPNPSTN_FLW,
                  FFP_OPNPSTN_QTY,
                  FFP_OPNPSTN_VAL,
                  FFP_MTM_OPN_VAL,
                  FFP_IMTM_OPN_VAL,
                  FFP_TRG_PRC,
                  FFP_MIN_TRG_PRC,
                  FFP_EODMTM_DT,
                  SYSDATE
               FROM FFP_FO_FUTURES_PSTN
							 WHERE FFP_XCHNG_CD = :c_xchng_cd
               );

   if( SQLCODE != 0 )
   {
      fn_errlog(c_ServiceName, "S31750",SQLMSG, c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   
      return -1;
   }

   EXEC SQL
     INSERT INTO FUP_FUT_UNDRLYNG_PSTN_SPLT
                 ( 	
                  										FUP_CLM_MTCH_ACCNT,
										FUP_XCHNG_CD,
										FUP_PRDCT_TYP,
										FUP_INDSTK,
										FUP_UNDRLYNG,
										FUP_CNTRCT_TAG,
										FUP_UIBUY_QTY,
										FUP_UIBUY_VAL,
										FUP_UISELL_QTY,
										FUP_UISELL_VAL,
										FUP_UEXBUY_QTY,
										FUP_UEXBUY_VAL,
										FUP_UEXSELL_QTY,
										FUP_UEXSELL_VAL,
										FUP_UBUY_EXCTD_QTY,
										FUP_USELL_EXCTD_QTY,
										FUP_UOPNPSTN_FLW,
										FUP_UOPNPSTN_QTY,
										FUP_UOPNPSTN_VAL,
										FUP_UMTM_OPN_VAL,
										FUP_UORDR_MRGN,
										FUP_UEXCTD_MRGN,
										FUP_USPREAD_MRGN,
										FUP_USPREAD_PNL,
										FUP_ADD_MRGN_VAL,
										FUP_UTRD_MRGN,
										FUP_MTM_FLG,
										FUP_TRD_DT,
										FUP_UMIN_TRD_MRGN,
                    FUP_INSERT_DT
                )
                (
                   SELECT 										FUP_CLM_MTCH_ACCNT,
										FUP_XCHNG_CD,
										FUP_PRDCT_TYP,
										FUP_INDSTK,
										FUP_UNDRLYNG,
										FUP_CNTRCT_TAG,
										FUP_UIBUY_QTY,
										FUP_UIBUY_VAL,
										FUP_UISELL_QTY,
										FUP_UISELL_VAL,
										FUP_UEXBUY_QTY,
										FUP_UEXBUY_VAL,
										FUP_UEXSELL_QTY,
										FUP_UEXSELL_VAL,
										FUP_UBUY_EXCTD_QTY,
										FUP_USELL_EXCTD_QTY,
										FUP_UOPNPSTN_FLW,
										FUP_UOPNPSTN_QTY,
										FUP_UOPNPSTN_VAL,
										FUP_UMTM_OPN_VAL,
										FUP_UORDR_MRGN,
										FUP_UEXCTD_MRGN,
										FUP_USPREAD_MRGN,
										FUP_USPREAD_PNL,
										FUP_ADD_MRGN_VAL,
										FUP_UTRD_MRGN,
										FUP_MTM_FLG,
										FUP_TRD_DT,
										FUP_UMIN_TRD_MRGN,
                    SYSDATE
                    FROM FUP_FUT_UNDRLYNG_PSTN 
							 			WHERE FUP_XCHNG_CD = :c_xchng_cd
               );
  

  if( SQLCODE != 0 )
  {
     fn_errlog(c_ServiceName, "S31755",SQLMSG, c_err_msg);
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     return -1;
  }


  EXEC SQL
    INSERT INTO FTQ_FO_TRD_QT_SPLT
                ( 									FTQ_XCHNG_CD,
									FTQ_PRDCT_TYP,
									FTQ_INDSTK,
									FTQ_UNDRLYNG,
									FTQ_EXPRY_DT,
									FTQ_EXER_TYP,
									FTQ_OPT_TYP,
									FTQ_STRK_PRC,
									FTQ_CLS_PRC,
									FTQ_OPN_PRC,
									FTQ_HGH_PRC,
									FTQ_LOW_PRC,
									FTQ_PRVS_CLS_PRC,
									FTQ_CHNG_PRVS_CLS,
									FTQ_INDCTR,
									FTQ_HGH_PRC_RNG,
									FTQ_LOW_PRC_RNG,
									FTQ_TOT_QTY_TRDD,
									FTQ_TOT_VAL_TRDD,
									FTQ_LST_TRD_PRC,
									FTQ_LST_TRD_TM,
									FTQ_LST_TRD_QTY,
									FTQ_AVRG_TRD_PRC,
									FTQ_BST1_BID_PRC,
									FTQ_BST1_BID_QTY,
									FTQ_BST2_BID_PRC,
									FTQ_BST2_BID_QTY,
									FTQ_BST3_BID_PRC,
									FTQ_BST3_BID_QTY,
									FTQ_BST4_BID_PRC,
									FTQ_BST4_BID_QTY,
									FTQ_BST5_BID_PRC,
									FTQ_BST5_BID_QTY,
									FTQ_BST1_OFFR_PRC,
									FTQ_BST1_OFFR_QTY,
									FTQ_BST2_OFFR_PRC,
									FTQ_BST2_OFFR_QTY,
									FTQ_BST3_OFFR_PRC,
									FTQ_BST3_OFFR_QTY,
									FTQ_BST4_OFFR_PRC,
									FTQ_BST4_OFFR_QTY,
									FTQ_BST5_OFFR_PRC,
									FTQ_BST5_OFFR_QTY,
									FTQ_TOT_BID_QTY,
									FTQ_TOT_OFFR_QTY,
									FTQ_PRMTD_TO_TRD,
									FTQ_STTS,
									FTQ_MIN_LOT_QTY,
									FTQ_BOARD_LOT_QTY,
									FTQ_TCK_SZ,
									FTQ_RCRD_DT,
									FTQ_ND_STRT_DT,
									FTQ_ND_END_DT,
									FTQ_BK_CLS_STRT_DT,
									FTQ_BK_CLS_END_DT,
									FTQ_SETL_SETLMNT_NO,
									FTQ_CRNT_OI,
									FTQ_CHNG_OI,
									FTQ_OI_INDCTR,
									FTQ_OI_HIGH,
									FTQ_OI_LOW,
									FTQ_BASE_PRC,
									FTQ_BASE_PRC_UPD_DT,
									FTQ_CLS_OI,
									FTQ_CLS_IV,
									FTQ_CLS_TRD_QTY,
									FTQ_ROLL_OVER,
									FTQ_RLVR_PER,
									FTQ_RLVR_OPN_CNTRCTS,
									FTQ_ATS_CLS_PRC,
									FTQ_HGH_TRD_EXEC_RNG,
									FTQ_LOW_TRD_EXEC_RNG,
									FTQ_MULTPLR,
									FTQ_ACT_STTS,
									FTQ_QT_TRDNG_FLG,
									FTQ_TOKEN_NO,
									FTQ_CA_LVL,
									FTQ_CLS_PRC_DT,
									FTQ_CNTRCT_TAG,
									FTQ_FP_CNTRCT_TAG,
									FTQ_MRKT_TYP,
									FTQ_FP_QT_TRDNG_FLG,
									FTQ_DS_QT_TRDNG_FLG,
									FTQ_SLTP_FP_QT_TRDNG_FLG,
									FTQ_ROLLOVER_FLAG,
									FTQ_NRML_SERIES_CD,
									FTQ_SPRD_SERIES_CD,
									FTQ_SPRD_TOKEN_NO,
									FTQ_EBA_CNTRCT_ID,
									FTQ_TOKEN_UPD_DT,
									FTQ_TRAIL_FLG,
									FTQ_SETLMNT_FLG,
									FTQ_DLVRY_POS_ALLWD,
									FTQ_OPLOW_PRICEDIFF,
									FTQ_OPHIGH_PRICEDIFF,
									FTQ_ELIGIBILITY,
									FTQ_EXPRY_DT2,
									FTQ_SPD_TOKEN2,
									FTQ_ROLLOVER_SPRD_ALLWD_FLG,
                  FTQ_INSERT_DT,
                  FTQ_BUY_ALLWD,   /*** Ver 1.7 ***/ 
                  FTQ_SELL_ALLWD   /*** Ver 1.7  ***/
                 )
                 (SELECT 									FTQ_XCHNG_CD,
									FTQ_PRDCT_TYP,
									FTQ_INDSTK,
									FTQ_UNDRLYNG,
									FTQ_EXPRY_DT,
									FTQ_EXER_TYP,
									FTQ_OPT_TYP,
									FTQ_STRK_PRC,
									FTQ_CLS_PRC,
									FTQ_OPN_PRC,
									FTQ_HGH_PRC,
									FTQ_LOW_PRC,
									FTQ_PRVS_CLS_PRC,
									FTQ_CHNG_PRVS_CLS,
									FTQ_INDCTR,
									FTQ_HGH_PRC_RNG,
									FTQ_LOW_PRC_RNG,
									FTQ_TOT_QTY_TRDD,
									FTQ_TOT_VAL_TRDD,
									FTQ_LST_TRD_PRC,
									FTQ_LST_TRD_TM,
									FTQ_LST_TRD_QTY,
									FTQ_AVRG_TRD_PRC,
									FTQ_BST1_BID_PRC,
									FTQ_BST1_BID_QTY,
									FTQ_BST2_BID_PRC,
									FTQ_BST2_BID_QTY,
									FTQ_BST3_BID_PRC,
									FTQ_BST3_BID_QTY,
									FTQ_BST4_BID_PRC,
									FTQ_BST4_BID_QTY,
									FTQ_BST5_BID_PRC,
									FTQ_BST5_BID_QTY,
									FTQ_BST1_OFFR_PRC,
									FTQ_BST1_OFFR_QTY,
									FTQ_BST2_OFFR_PRC,
									FTQ_BST2_OFFR_QTY,
									FTQ_BST3_OFFR_PRC,
									FTQ_BST3_OFFR_QTY,
									FTQ_BST4_OFFR_PRC,
									FTQ_BST4_OFFR_QTY,
									FTQ_BST5_OFFR_PRC,
									FTQ_BST5_OFFR_QTY,
									FTQ_TOT_BID_QTY,
									FTQ_TOT_OFFR_QTY,
									FTQ_PRMTD_TO_TRD,
									FTQ_STTS,
									FTQ_MIN_LOT_QTY,
									FTQ_BOARD_LOT_QTY,
									FTQ_TCK_SZ,
									FTQ_RCRD_DT,
									FTQ_ND_STRT_DT,
									FTQ_ND_END_DT,
									FTQ_BK_CLS_STRT_DT,
									FTQ_BK_CLS_END_DT,
									FTQ_SETL_SETLMNT_NO,
									FTQ_CRNT_OI,
									FTQ_CHNG_OI,
									FTQ_OI_INDCTR,
									FTQ_OI_HIGH,
									FTQ_OI_LOW,
									FTQ_BASE_PRC,
									FTQ_BASE_PRC_UPD_DT,
									FTQ_CLS_OI,
									FTQ_CLS_IV,
									FTQ_CLS_TRD_QTY,
									FTQ_ROLL_OVER,
									FTQ_RLVR_PER,
									FTQ_RLVR_OPN_CNTRCTS,
									FTQ_ATS_CLS_PRC,
									FTQ_HGH_TRD_EXEC_RNG,
									FTQ_LOW_TRD_EXEC_RNG,
									FTQ_MULTPLR,
									FTQ_ACT_STTS,
									FTQ_QT_TRDNG_FLG,
									FTQ_TOKEN_NO,
									FTQ_CA_LVL,
									FTQ_CLS_PRC_DT,
									FTQ_CNTRCT_TAG,
									FTQ_FP_CNTRCT_TAG,
									FTQ_MRKT_TYP,
									FTQ_FP_QT_TRDNG_FLG,
									FTQ_DS_QT_TRDNG_FLG,
									FTQ_SLTP_FP_QT_TRDNG_FLG,
									FTQ_ROLLOVER_FLAG,
									FTQ_NRML_SERIES_CD,
									FTQ_SPRD_SERIES_CD,
									FTQ_SPRD_TOKEN_NO,
									FTQ_EBA_CNTRCT_ID,
									FTQ_TOKEN_UPD_DT,
									FTQ_TRAIL_FLG,
									FTQ_SETLMNT_FLG,
									FTQ_DLVRY_POS_ALLWD,
									FTQ_OPLOW_PRICEDIFF,
									FTQ_OPHIGH_PRICEDIFF,
									FTQ_ELIGIBILITY,
									FTQ_EXPRY_DT2,
									FTQ_SPD_TOKEN2,
									FTQ_ROLLOVER_SPRD_ALLWD_FLG,
                  SYSDATE,
                  FTQ_BUY_ALLWD,   /*** Ver 1.7 ***/            
                  FTQ_SELL_ALLWD  /*** Ver 1.7 ***/
                 FROM FTQ_FO_TRD_QT
							 	 WHERE FTQ_XCHNG_CD = :c_xchng_cd
                );
  

  if( SQLCODE != 0 )
  {
     fn_errlog(c_ServiceName, "S31760",SQLMSG, c_err_msg);
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     return -1;
  }


  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog(c_ServiceName, "S31765", LIBMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }

 return 0;
}

