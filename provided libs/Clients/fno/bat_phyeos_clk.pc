 
/**************************************************************************************/
/*   Service       : BAT_PHYEOS_CLK.pc                                                */
/*                                                                                    */
/*   Purpose       : This bat file fetch the data of thos who has open position       */
/*									 contract which are going to expire on expiry date and store this */
/*									 data in to click db tables.                                      */ 
/*                                                                                    */
/*   Input Param   :                                                                  */
/*                                                                                    */
/*   Output        :                                                                  */
/*                                                                                    */
/*   Author        :                                                                  */
/*                                                                                    */
/*   Date          : 07-07-2021                                                       */
/*                                                                                    */
/*   Version       : 1.0  New Release                                                 */
/**************************************************************************************/ 

   #include <stdio.h>
   #include <stdlib.h>
   #include <sqlca.h>
   #include <atmi.h>
   #include <fml32.h>
   #include <Usysflds.h>
   #include <fml_def.h>
   #include <fn_log.h>
   #include <fn_tuxlib.h>
   #include <fn_battmpt.h>
   #include <fml_rout.h>
   #include <fn_ddr.h>
   #include <eba.h>
   #include <string.h>
	 #include <fn_env.h>
   #include <fn_read_debug_lvl.h>
   
   #define MAX_REC_MLRS 1000 
   #define MAX_REC_POSML 4    /*** ver 1.1 ***/
	 #define MAX_REC_DTLS 2
   #define LOCAL_TRAN_TIMEOUT 600
   
   FBFR32    *ptr_fml_Sbuffer;
   FBFR32    *ptr_fml_Rbuffer;
   FBFR32    *ptr_fml_Sendbuffer;   


   long  l_bufferlength=0;
   int   i_rows_fetched=0;
   long  li_len_tobuf=0;
   int   i_count_fpd=0;
   int   i_count_fpm=0;
	 int   i_count_posm=0;   /*** added in ver 1.1 ***/
   int   i_count_exist=0;
   int   i_seq_num = 0;
   int   i_seq_no = 0;  
   int   i_cnt = 0;
   int   i_counter=0;;
   char  c_clm_mtch_accnt[11];
   char  c_ServiceName[33];
   char  c_trd_dt[12];
   char  c_xchng_cd[4] = {'\0'};
   char  c_msg[256];
   char  c_errmsg [ 256 ];

   char  c_fut_eos_tm[20];
   char  c_opt_eos_tm[20];
	 char  c_fut_ctff_tm[10];
	 char  c_opt_ctff_tm[10];
   char  c_fut_eos_dt[12];
   char  c_opt_eos_dt[12];
   char  c_expry_dt[12];
   
   
   int   i_max_rec_per_fetch = MAX_REC_MLRS;
   int   i_ret_val=0;
   int   i_ch_val=0;
   int   i_err[11];
  
   
   struct fo_phyeos_dtls{
      char   c_fpd_prdct_typ[1+1];
      char   c_fpd_eos_tm[20+1];
      char   c_fpd_eos_dt[12+1];
      char   c_fpd_insrt_dt[12+1];                    
      char   c_fpd_xchng_cd[3+1];
		  char   c_fpd_ctff_tm[10+1];	
    };


    struct fo_mailer_dtls
    {
      char   c_fpm_clm_mtch_accnt[10+1];
      char   c_fpm_clnt_id[8+1];
      char   c_fpm_clnt_nm[100+1];
      char   c_fpm_email_id1[100+1];                    
      long   l_fpm_rcrd_id;
			long    l_fpm_seq_no;
      char   c_fpm_xchng_cd[3+1];
			char   c_fpm_insrt_dt[12+1];
			char   c_fpm_doc_typ[8+1];
    };
 
	/*** 1.1 ver    added  ***/
		struct fo_mailpos_dtls
		{	
			char   c_fpm_clm_mtch_accnt[10+1];
			char   c_fpm_xchng_cd[3+1];
			char   c_fpm_prdct_typ[1+1];
			char   c_fpm_cntrct_desc[150+1];
			char   c_expry_dt[12+1];
			char   c_opnpstn_flw[1+1];
			long   l_opnpstn_qty;
			char   c_fpm_insrt_dt[12+1];
		};
   
    int fn_upld_data(void);
    int fn_pplt_fpd(void);
    int fn_pplt_fpm(void);
		int fn_pplt_posm(void);
    int fn_ins_log_hdr(void);
   
void BAT_PHYEOS_CLK (int argc, char* argv[] )
{

   	  int   i_trnsctn = 0;
			char c_INIFileName[256];
      MEMSET(c_INIFileName); 
      char c_paramToRead[20];
      MEMSET( c_paramToRead );
      char *ptr;
  
  	  strcpy(c_ServiceName, "bat_phyeos_clk");
 			strcpy(c_paramToRead,argv[0] );
 
  	  sprintf ( c_msg, "Batch process %s started", argv[0] );
  	  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  
      if(argc != 8)
      {
        sprintf(c_msg,"Usage: %s <NFO> <NFO> <NA> <TRD_DT>",argv[0]);
  	    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  	    fn_userlog (c_ServiceName,"Usage : <bat_phyeos_clk> <NFO> <NFO> <NA> <TRD_DT>");
  	    return;
      }
  
  
  	 INITBATDBGLVL(argv[0]);
  	 strcpy(c_trd_dt,argv[4]);
	   strcpy(c_fut_eos_dt,argv[5]);
	   strcpy(c_opt_eos_dt,argv[6]);
	   strcpy(c_expry_dt,argv[7]);

		fn_userlog (c_ServiceName,"After Copy Arguments...");
		
		sprintf(c_INIFileName, "%s/%s", getenv("BIN"), "NFO.ini");
		if( fn_init_prcs_spc ( c_ServiceName,c_INIFileName,c_paramToRead ) == -1 )
		{
			fn_userlog(c_ServiceName,"Unable to read PIPE_LIST from ini File");
			return;
		}
			
		ptr = (char *)fn_get_prcs_spc(c_ServiceName,"FUT_EOS_TM");
		strcpy(c_fut_eos_tm,ptr);
		if( ptr == NULL )
		{
			fn_userlog(c_ServiceName,"Null in ptr");
		}
		ptr = (char *)fn_get_prcs_spc(c_ServiceName,"OPT_EOS_TM");
		strcpy(c_opt_eos_tm,ptr);
		ptr = (char *)fn_get_prcs_spc(c_ServiceName,"FUT_CUTOFF_TM");
		strcpy(c_fut_ctff_tm,ptr);
		ptr = (char *)fn_get_prcs_spc(c_ServiceName,"OPT_CUTOFF_TM"); 
		strcpy(c_opt_ctff_tm,ptr);


		fn_userlog (c_ServiceName,"After EOS and CUTOFF time fetched from NFO.ini for FUT and OPT.....");
		fn_userlog (c_ServiceName,"%s, %s, %s, %s ",c_fut_eos_tm,c_opt_eos_tm,c_fut_ctff_tm,c_opt_ctff_tm);
		
	 EXEC SQL
          TRUNCATE  TABLE FPD_FO_PHYEOS_DTLS;
	
	 if(SQLCODE != 0)
 	 {
  	  fn_errlog(c_ServiceName, "S31005", SQLMSG, c_errmsg );
  	  return ;
  	}
   fn_userlog (c_ServiceName,"After Table_1 truncate...");

	 EXEC SQL
          TRUNCATE TABLE FPM_FO_PHYEOS_MAILER;

	  if(SQLCODE != 0)
  	{
  	  fn_errlog(c_ServiceName, "S31010", SQLMSG, c_errmsg );
  	  return ;
  	}
		fn_userlog (c_ServiceName,"After Table_2 truncate...");

		EXEC SQL
          TRUNCATE TABLE FPM_FO_PHYEOS_MAILPOSDTLS;

    if(SQLCODE != 0)
    {
      fn_errlog(c_ServiceName, "S31015", SQLMSG, c_errmsg );
      return ;
    }
	  fn_userlog (c_ServiceName,"After Table_3 truncate...");
	
  	i_trnsctn = tpbegin(LOCAL_TRAN_TIMEOUT, 0);

  	if ( i_trnsctn == -1 )
  	{
  	  fn_errlog(c_ServiceName,"S31020",LIBMSG,c_errmsg);
  	  return;
  	}
  
   	i_ret_val = fn_upld_data();
   
   	if(i_ret_val == -1)
  	{
  	  fn_errlog(c_ServiceName, "S31025",SQLMSG, c_errmsg);
  	  fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
  	  return;
  	}
 		
		fn_userlog (c_ServiceName,"fn_upld_data() function executed sucessfully ");		
		 
  	if(DEBUG_MSG_LVL_3)
  	{
  	  fn_userlog(c_ServiceName,"Data In The Temporary Table Uploaded Successfully");
  	}

  	if ( tpcommit(0) == -1 )
  	{
  	  fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
  	  fn_errlog(c_ServiceName, "S31030", TPMSG, c_errmsg );
 	 		return;
  	}
			
		fn_userlog(c_ServiceName, "First Transaction committed ...");	
	
		ptr_fml_Rbuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
    if (ptr_fml_Rbuffer == NULL)
    {
      fn_errlog(c_ServiceName, "S31035", TPMSG, c_errmsg);
      fn_userlog(c_ServiceName,"Click Upload:Unable to Allocate Receive Memory ..");
      return ;
    }
		
		if(i_count_fpm > 0 && i_count_fpd >0 && i_count_posm > 0)
    {
		  i_trnsctn = tpbegin(LOCAL_TRAN_TIMEOUT, 0);

    	if ( i_trnsctn == -1 )
    	{
      	fn_errlog(c_ServiceName,"S31040",LIBMSG,c_errmsg);
      	fn_dstry_rs ( ptr_fml_Rbuffer );
      	return;
    	}
			
      fn_userlog(c_ServiceName, "Second Transaction started ...");
			
    	i_ret_val = fn_pplt_fpd();

    	if(i_ret_val == -1)
    	{
      	fn_errlog(c_ServiceName, "S31045",LIBMSG, c_errmsg);
      	fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      	fn_dstry_rs (ptr_fml_Sbuffer );
      	fn_dstry_rs ( ptr_fml_Rbuffer );
      	return;
    	}
      
			
			 fn_userlog(c_ServiceName,"After Successful Call To Function fn_pplt_fpd");

    	if(DEBUG_MSG_LVL_3)
    	{
      	fn_userlog(c_ServiceName,"After Successful Call To Function fn_pplt_fpd");
    	}
      
			i_ret_val = fn_pplt_fpm();

      if(i_ret_val == -1)
      {
        fn_errlog(c_ServiceName, "S31050",LIBMSG, c_errmsg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        fn_dstry_rs (ptr_fml_Sbuffer );
        fn_dstry_rs ( ptr_fml_Rbuffer );
        return;
      }
				
			fn_userlog(c_ServiceName,"After Successful Call To Function fn_pplt_fpm");

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"After Successful Call To Function fn_pplt_fpm");
      }
			
			
			i_ret_val = fn_pplt_posm();

      if(i_ret_val == -1)
      {
        fn_errlog(c_ServiceName, "S31055",LIBMSG, c_errmsg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        fn_dstry_rs (ptr_fml_Sbuffer );
        fn_dstry_rs ( ptr_fml_Rbuffer );
        return;
      }

      fn_userlog(c_ServiceName,"After Successful Call To Function fn_pplt_posm()");

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"After Successful Call To Function fn_pplt_posm()");
      }
	
			fn_userlog(c_ServiceName,"Calling fn_ins_log_hdr() function....");

		 	i_ret_val =  fn_ins_log_hdr(); 

    	if(i_ret_val == -1)
    	{
      		fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      		fn_userlog(c_ServiceName,"Failed to upload INS_LOG_HDR");
      		fn_dstry_rs ( ptr_fml_Sbuffer );
      		fn_dstry_rs ( ptr_fml_Rbuffer );
      		return ;
    	}
		
			fn_userlog(c_ServiceName,"fn_ins_log_hdr() function executed successfully....");
			
			fn_userlog(c_ServiceName,"Before Commit Transaction...");
	
			if ( tpcommit(0) == -1 )
      {
  	     fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
				 fn_userlog(c_ServiceName,"Transaction Aborted...");
    	   fn_errlog(c_ServiceName, "S31060", TPMSG, c_errmsg );
         fn_dstry_rs ( ptr_fml_Sbuffer );
         fn_dstry_rs ( ptr_fml_Rbuffer );
         return;
      }
			fn_userlog(c_ServiceName,"Second  Transaction Committed...");	
  	}	

 }


  int fn_upld_data(void)
  {
	     EXEC  SQL
    	    EXECUTE
       		BEGIN
                   RESET_SEQUENCE('SEQ_NFOMLRS_RECNO');     
      		END;
  	  END-EXEC;
			
			EXEC  SQL
          EXECUTE
          BEGIN
                   RESET_SEQUENCE('SEQ_NFOMLRS_RECNO_1');
          END;
      END-EXEC;		

  	  if(SQLCODE != 0)
  	  {
          fn_userlog(c_ServiceName,"Error in sequence number resetting");
          fn_errlog(c_ServiceName,"S31065",SQLMSG,c_errmsg);
          return -1;
  	  } 

	    fn_userlog(c_ServiceName,"before uploading ..........");



    EXEC SQL
			INSERT INTO 
		    FPD_FO_PHYEOS_DTLS
				(
					FPD_PRODUCT_TYP,
					FPD_EOS_TIME,
					FPD_EOS_DT,
					FPD_INSERT_DT,
					FPD_XCHNG_CD,
					FPD_CUTOFF_TIME
				)
			VALUES
				(
					'F',
				  :c_fut_eos_tm,
					:c_fut_eos_dt,
					:c_trd_dt,
					'NFO',
					:c_fut_ctff_tm
				);	
					 
		
	  	if(SQLCODE != 0)
    	{
      	  fn_userlog(c_ServiceName,"Error in FMD Upload");
        	fn_errlog(c_ServiceName,"S31070",SQLMSG, c_errmsg);
      		return -1;
    	}
			
			fn_userlog(c_ServiceName,"Future table values %s %s %s : NFO",
  	      c_fut_eos_tm,
          c_fut_eos_dt,
          c_trd_dt);


		EXEC SQL
			INSERT INTO
        FPD_FO_PHYEOS_DTLS
        (
          FPD_PRODUCT_TYP,
          FPD_EOS_TIME,
          FPD_EOS_DT,
          FPD_INSERT_DT,
          FPD_XCHNG_CD,
					FPD_CUTOFF_TIME
        )
      VALUES
        (
          'O',
          :c_opt_eos_tm,
          :c_opt_eos_dt,
          :c_trd_dt,
          'NFO',
					:c_opt_ctff_tm
        );


      if(SQLCODE != 0)
      {
          fn_userlog(c_ServiceName,"Error in FMD Upload");
          fn_errlog(c_ServiceName,"S31075",SQLMSG, c_errmsg);
          return -1;
      }		
	
  		i_count_fpd = 2; 


		
   		EXEC SQL
			INSERT INTO 
			FPM_FO_PHYEOS_MAILER
			(
 			    FPM_CLM_MTCH_ACCNT,
				  FPM_USR_ID,
					FPM_USR_NM,
 					FPM_EMAIL_ID1,
 					FPM_RECD_ID,
 					FPM_SEQ_NO,
 					FPM_XCHNG_CD,
 					FPM_INSERT_DT,
 					FPM_DOC_TYPE
			)
			(
				SELECT MATCH_ID,
	      			UAC_USR_ID,
	      			USR_USR_NM,
	      			USR_EMAIL_ADDRSS,
	      			SEQ_NFOMLRS_RECNO.NEXTVAL,
	      			1,
	      			'NFO',
	      			:c_trd_dt,
	      			'FNOEOSM'
				FROM
						(
             SELECT FFP_CLM_MTCH_ACCNT  MATCH_ID                 
              FROM   FFP_FO_FUTURES_PSTN,FTQ_FO_TRD_QT
              WHERE  FFP_UNDRLYNG  = FTQ_UNDRLYNG
              AND    FFP_PRDCT_TYP = FTQ_PRDCT_TYP
              AND    FFP_XCHNG_CD  = FTQ_XCHNG_CD
              AND    FFP_EXPRY_DT  = FTQ_EXPRY_DT
              AND    FFP_XCHNG_CD  = 'NFO'
              AND    FFP_PRDCT_TYP ='F'
              AND    FFP_EXPRY_DT  = :c_expry_dt
              AND    FFP_OPNPSTN_FLW != 'N'
              AND    FTQ_SETLMNT_FLG  = 'P'
 /*             AND    TRIM(FTQ_UNDRLYNG) LIKE  :c_undrlyng  */
              UNION
              SELECT FCP_CLM_MTCH_ACCNT  MATCH_ID
              FROM   FCP_FO_SPN_CNTRCT_PSTN,FTQ_FO_TRD_QT
              WHERE  FCP_UNDRLYNG  = FTQ_UNDRLYNG
              AND    FCP_PRDCT_TYP = FTQ_PRDCT_TYP
              AND    FCP_XCHNG_CD  = FTQ_XCHNG_CD
              AND    FCP_EXPRY_DT  = FTQ_EXPRY_DT
              AND    FCP_OPT_TYP   = FTQ_OPT_TYP
              AND    FCP_STRK_PRC  = FTQ_STRK_PRC
              AND    FCP_XCHNG_CD  = 'NFO'
              AND    FCP_PRDCT_TYP IN ('F','O')
              AND    FCP_EXPRY_DT  = :c_expry_dt
              AND    FCP_OPNPSTN_FLW != 'N'
              AND    FTQ_SETLMNT_FLG  = 'P'
 /*             AND    TRIM(FTQ_UNDRLYNG) LIKE :c_undrlyng    */
              UNION
          SELECT FOP_CLM_MTCH_ACCNT MATCH_ID
       FROM   FOP_FO_OPTIONS_PSTN,FTQ_FO_TRD_QT
       WHERE  FOP_UNDRLYNG  = FTQ_UNDRLYNG
       AND    FOP_PRDCT_TYP = FTQ_PRDCT_TYP
       AND    FOP_XCHNG_CD  = FTQ_XCHNG_CD
       AND    FOP_EXPRY_DT  = FTQ_EXPRY_DT
       AND    FOP_STRK_PRC  = FTQ_STRK_PRC
       AND    FOP_OPT_TYP   = FTQ_OPT_TYP   
       AND    FOP_XCHNG_CD  = 'NFO'
       AND    FOP_PRDCT_TYP = 'O'
       AND    FOP_EXPRY_DT  = :c_expry_dt
       AND    FOP_OPNPSTN_FLW != 'N'
       AND    FTQ_SETLMNT_FLG  = 'P'
 /*    AND    TRIM(FTQ_UNDRLYNG) LIKE :c_undrlyng    */
				) A, USR_USER_MASTER,UAC_USR_ACCNTS
				WHERE A.MATCH_ID =  UAC_CLM_MTCH_ACCNT
				AND   USR_USR_ID = UAC_USR_ID
		);

				if(SQLCODE != 0)
    		{
      		fn_userlog(c_ServiceName,"Error in FMD Upload");
      		fn_errlog(c_ServiceName,"S31080",SQLMSG, c_errmsg);
      		return -1;
    		}

 				i_count_fpm = sqlca.sqlerrd[2];

  		  if(DEBUG_MSG_LVL_3)
 			  {
   		 	  fn_userlog(c_ServiceName,"Total NO. Of Records = [%d]",i_count_fpm);
 			  }
   			  fn_userlog(c_ServiceName,"Total NO. Of Records = [%d]",i_count_fpm);
		
   	  fn_userlog(c_ServiceName,"After data uploaded in Mailers.........");

			EXEC SQL
    INSERT INTO
    FPM_FO_PHYEOS_MAILPOSDTLS
      (
          FPM_CLM_MTCH_ACCNT,
          FPM_XCHNG_CD,
          FPM_PRDCT_TYP,
          FPM_CONTRCT_DESC,
          FPM_EXPRY_DT,
          FPM_OPNPSTN_FLW,
          FPM_OPNPSTN_QTY,
          FPM_RECRD_ID,
          FPM_INSERT_DT
       )
       (
        SELECT mtch_accnt,
              xchng_cd,
              prdct_typ,
        decode(prdct_typ,'F',concat(concat(concat(concat(decode(prdct_typ,'F','FUT','O','OPT'),'-'),trim(undlyng)),'-'),TO_CHAR(expry_dt)),
       'O',concat(concat(concat(concat(concat(concat(concat(concat(decode(prdct_typ,'F','FUT','O','OPT'),'-'),trim(undlyng)),'-'),TO_CHAR(expry_dt)),'-'),
	TO_CHAR(strk_prc)),'-'),
       decode(opt_typ,'C','CE','P','PE'))) as cntrct_desc,
              expry_dt,
              opnpstn_flw,
              ABS(opnpstn_qty),
							SEQ_NFOMLRS_RECNO_1.NEXTVAL,
							:c_trd_dt   
        FROM
            (
         SELECT FFP_CLM_MTCH_ACCNT  mtch_accnt,
          FFP_XCHNG_CD xchng_cd,
          FFP_PRDCT_TYP prdct_typ,
          FFP_EXPRY_DT  expry_dt,
          FFP_OPNPSTN_FLW opnpstn_flw,
          FFP_OPNPSTN_QTY opnpstn_qty,
          FFP_UNDRLYNG  undlyng,
          '*' opt_typ,
          0   strk_prc
              FROM   FFP_FO_FUTURES_PSTN,FTQ_FO_TRD_QT
              WHERE  FFP_UNDRLYNG  = FTQ_UNDRLYNG
              AND    FFP_PRDCT_TYP = FTQ_PRDCT_TYP
              AND    FFP_XCHNG_CD  = FTQ_XCHNG_CD
              AND    FFP_EXPRY_DT  = FTQ_EXPRY_DT
              AND    FFP_XCHNG_CD  = 'NFO'
              AND    FFP_PRDCT_TYP ='F'
              AND    FFP_EXPRY_DT  = :c_expry_dt 
              AND    FFP_OPNPSTN_FLW != 'N'
              AND    FTQ_SETLMNT_FLG  = 'P'
              UNION
              SELECT FCP_CLM_MTCH_ACCNT mtch_accnt,
         FCP_XCHNG_CD xchng_cd,
         FCP_PRDCT_TYP prdct_typ,
         FCP_EXPRY_DT expry_dt,
         FCP_OPNPSTN_FLW opnpstn_flw,
         FCP_OPNPSTN_QTY opnpstn_qty,
         FCP_UNDRLYNG  undlyng ,
         FCP_OPT_TYP opt_typ,
         FCP_STRK_PRC strk_prc
              FROM   FCP_FO_SPN_CNTRCT_PSTN,FTQ_FO_TRD_QT
              WHERE  FCP_UNDRLYNG  = FTQ_UNDRLYNG
              AND    FCP_PRDCT_TYP = FTQ_PRDCT_TYP
              AND    FCP_XCHNG_CD  = FTQ_XCHNG_CD
              AND    FCP_EXPRY_DT  = FTQ_EXPRY_DT
              AND    FCP_OPT_TYP = FTQ_OPT_TYP
              AND    FCP_STRK_PRC = FTQ_STRK_PRC
              AND    FCP_XCHNG_CD  = 'NFO'
              AND    FCP_PRDCT_TYP IN ('F','O')
              AND    FCP_EXPRY_DT  = :c_expry_dt 
              AND    FCP_OPNPSTN_FLW != 'N'
              AND    FTQ_SETLMNT_FLG  = 'P'
              UNION
          SELECT FOP_CLM_MTCH_ACCNT mtch_accnt,
     FOP_XCHNG_CD xchng_cd,
     FOP_PRDCT_TYP prdct_typ,
     FOP_EXPRY_DT expry_dt,
     FOP_OPNPSTN_FLW opnpstn_flw,
     FOP_OPNPSTN_QTY opnpstn_qty,
     FOP_UNDRLYNG  undlyng,
     FOP_OPT_TYP opt_typ,
     FOP_STRK_PRC strk_prc
       FROM   FOP_FO_OPTIONS_PSTN,FTQ_FO_TRD_QT
       WHERE  FOP_UNDRLYNG  = FTQ_UNDRLYNG
       AND    FOP_PRDCT_TYP = FTQ_PRDCT_TYP
       AND    FOP_XCHNG_CD  = FTQ_XCHNG_CD
       AND    FOP_EXPRY_DT  = FTQ_EXPRY_DT
       AND    FOP_STRK_PRC  = FTQ_STRK_PRC
       AND    FOP_OPT_TYP   = FTQ_OPT_TYP
       AND    FOP_XCHNG_CD  = 'NFO'
       AND    FOP_PRDCT_TYP = 'O'
       AND    FOP_EXPRY_DT  = :c_expry_dt 
       AND    FOP_OPNPSTN_FLW != 'N'
       AND    FTQ_SETLMNT_FLG  = 'P'
   ) A, USR_USER_MASTER,UAC_USR_ACCNTS
        WHERE A.mtch_accnt =  UAC_CLM_MTCH_ACCNT
        AND   USR_USR_ID = UAC_USR_ID
    );
	
		if(SQLCODE != 0)
        {
          fn_userlog(c_ServiceName,"Error in MAILPOSDTLS Upload");
          fn_errlog(c_ServiceName,"S31085",SQLMSG, c_errmsg);
          return -1;
        }

        i_count_posm = sqlca.sqlerrd[2];

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Total NO. Of Records = [%d]",i_count_posm);
        }
          fn_userlog(c_ServiceName,"Total NO. Of Records = [%d]",i_count_posm);

      fn_userlog(c_ServiceName,"After contracts data insert in MAILPOSDTLS........."); 
		
		
	}


  int fn_pplt_fpd(void)
  {
  	  int  i_counter;
  	  int i_count ;
  	  char c_ins_flg;
  	  unsigned char *c_msg_cbuf;
  	  struct fo_phyeos_dtls  fo_phyeos_dtls_arr[MAX_REC_DTLS];      

  	  l_bufferlength = Fneeded32(1, sizeof(fo_phyeos_dtls_arr));
   	  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);

  	  if (ptr_fml_Sbuffer == NULL)
   	  {
    	    fn_userlog(c_ServiceName,"Error in Allocating buffer FPD");
    	    fn_errlog(c_ServiceName, "S31090", TPMSG, c_errmsg);
    	    return(-1);
   	  }

		   c_ins_flg = 'D';

       MEMSET(fo_phyeos_dtls_arr);

	     EXEC ORACLE OPTION (char_map=string);

	     EXEC SQL
	      SELECT
	      FPD_PRODUCT_TYP,
	      FPD_EOS_TIME,
	      FPD_EOS_DT,
 	      FPD_INSERT_DT,
  	    FPD_XCHNG_CD,
				FPD_CUTOFF_TIME   
	      INTO
	        :fo_phyeos_dtls_arr
	      FROM  FPD_FO_PHYEOS_DTLS;


	    if( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
	    {
	      fn_userlog(c_ServiceName,"bat_codmrgnmail_clk :%d:",SQLCODE);
	      fn_userlog(c_ServiceName,"Count Here Is :%d:",sqlca.sqlerrd[2]);

	        fn_userlog(c_ServiceName,"Data select failed");
	        fn_errlog(c_ServiceName, "S31095", SQLMSG, c_errmsg);
	        return (-1);
	    }

	   i_rows_fetched = sqlca.sqlerrd[2];
		
		fn_userlog(c_ServiceName,"Data Fetched from  FPD_FO_PHYEOS_DTLS Table to send service.. ");
	
	   if(DEBUG_MSG_LVL_3)
	   {
	     fn_userlog(c_ServiceName," Rows fetched : |%d| |%d|", i_rows_fetched, SQLCODE );
	   }

			fn_userlog(c_ServiceName," Rows fetched : |%d| |%d|", i_rows_fetched, SQLCODE );

	   Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
	   Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));
	
	   MEMSET(c_msg_cbuf);

	   c_msg_cbuf = (unsigned char *)fo_phyeos_dtls_arr;

	   l_bufferlength =  sizeof(fo_phyeos_dtls_arr);

	   i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
	   i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
	   i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&i_rows_fetched,0);
	   i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);


	   for(i_counter = 0;i_counter < 4;i_counter++)
	   {
	      if(i_err[i_counter] == -1)
	      {
	        fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
	        fn_errlog(c_ServiceName, "S31100", FMLMSG, c_errmsg);
	        return(-1);
	      }
	    }
			
			fn_userlog(c_ServiceName,"Data bind successfully in the buffer...");
			fn_userlog(c_ServiceName,"Before calling SCX_PHYEOS_UPL service");

 	   i_ch_val = tpcall("SFO_PHYEOS_UPL", (char *)ptr_fml_Sbuffer, 0,(char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);
  
	    if (i_ch_val == -1)
	    {
	      fn_userlog(c_ServiceName,"Error in calling service SFO_PHYEOS_UPL");
	      if(TPCODE != TPESVCFAIL)
	      {
	        fn_errlog(c_ServiceName, "S31105", TPMSG, c_errmsg);
	      }
	      else
	      {
	        Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
	        fn_errlog(c_ServiceName, "S31110", c_errmsg, c_errmsg);
	      }
	      return(-1);
	    }
	  

	  fn_dstry_rs( ptr_fml_Sbuffer);
	  return (0);

	}	


int fn_pplt_fpm(void)
{
	fn_userlog(c_ServiceName,"Inside fn_pplt_fpm() function...");
	
  int i_counter;
  int i_count;
  char c_ins_flg;
  unsigned char *c_msg_cbuf;
	struct fo_mailer_dtls   fo_phyeos_mlrs_arr[MAX_REC_MLRS];
	

  l_bufferlength = Fneeded32(1, sizeof(fo_phyeos_mlrs_arr));
  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);

  if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Error in Allocating buffer FPM");
    fn_errlog(c_ServiceName, "S31115", TPMSG, c_errmsg);
    return(-1);
  }


  c_ins_flg = 'M';


  for ( i_count=0;i_count < i_count_fpm;i_count += i_max_rec_per_fetch )
  {
    MEMSET(fo_phyeos_mlrs_arr);

    EXEC ORACLE OPTION (char_map=string);

    EXEC SQL
    SELECT FPM_CLM_MTCH_ACCNT,
      FPM_USR_ID,
      FPM_USR_NM,
      FPM_EMAIL_ID1,
      FPM_RECD_ID,
      FPM_SEQ_NO,        
      FPM_XCHNG_CD,
      FPM_INSERT_DT,
      FPM_DOC_TYPE
      INTO 
         :fo_phyeos_mlrs_arr
      FROM FPM_FO_PHYEOS_MAILER 
      WHERE FPM_RECD_ID >= :i_count + 1                        
      AND FPM_RECD_ID <= :i_count + :i_max_rec_per_fetch;    

  
 if( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
    {
      fn_userlog(c_ServiceName,"bat_codmrgnmail_clk :%d:",SQLCODE);
      fn_userlog(c_ServiceName,"Count Here Is :%d:",sqlca.sqlerrd[2]);
      if( SQLCODE == 1403)
      {
				fn_userlog(c_ServiceName,"Data not found");
        if(sqlca.sqlerrd[2] == 0)
				{
				fn_userlog(c_ServiceName,"Records Processed by query %d .............",sqlca.sqlerrd[2]);
        break;
				}
      }
      else
      {
        fn_userlog(c_ServiceName,"Data select for FPM failed");
        fn_errlog(c_ServiceName, "S31120", SQLMSG, c_errmsg);
        return (-1);
      }
    }

		fn_userlog(c_ServiceName,"FPM Count Here Is :%d:",sqlca.sqlerrd[2]);    
 		fn_userlog(c_ServiceName,"Content of Structure insert date %s",fo_phyeos_mlrs_arr->c_fpm_insrt_dt);   

   i_rows_fetched = (i_count + i_max_rec_per_fetch > i_count_fpm)? i_count_fpm%i_max_rec_per_fetch : i_max_rec_per_fetch;

	 fn_userlog(c_ServiceName," Rows fetched : |%d| |%d|", i_rows_fetched, SQLCODE );
	
   if(DEBUG_MSG_LVL_3)
   {
     fn_userlog(c_ServiceName," Rows fetched : |%d| |%d|", i_rows_fetched, SQLCODE );
   }

	
   Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
   Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

   MEMSET(c_msg_cbuf);

   c_msg_cbuf = (unsigned char *)fo_phyeos_mlrs_arr;

   l_bufferlength =  sizeof(fo_phyeos_mlrs_arr);

   i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
   i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
   i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&i_rows_fetched,0);
   i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);


   for(i_counter = 0;i_counter < 4;i_counter++)
   {
      if(i_err[i_counter] == -1)
      {
        fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
        fn_errlog(c_ServiceName, "S31125", FMLMSG, c_errmsg);
        return(-1);
      }
    }


   i_ch_val = tpcall("SFO_PHYEOS_UPL", (char *)ptr_fml_Sbuffer, 0,(char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);  

    if (i_ch_val == -1)
    {
      fn_userlog(c_ServiceName,"Error in calling service SFO_PHYEOS_UPL");
      if(TPCODE != TPESVCFAIL)
      {
        fn_errlog(c_ServiceName, "S31130", TPMSG, c_errmsg);
      }
      else
      {
        Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
        fn_errlog(c_ServiceName, "S31135", c_errmsg, c_errmsg);
      }
      return(-1);
    }
 	}
		
		fn_dstry_rs( ptr_fml_Sbuffer);
    return (0);
}


int fn_pplt_posm(void)
{
  int  i_counter;
  int i_count;
  char c_ins_flg;
  unsigned char *c_msg_cbuf;
  struct fo_mailpos_dtls fo_phyeos_mlpos_arr[MAX_REC_MLRS];


  l_bufferlength = Fneeded32(1, sizeof(fo_phyeos_mlpos_arr));
  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);

  if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Error in Allocating buffer MailPosDtls");
    fn_errlog(c_ServiceName, "S31140", TPMSG, c_errmsg);
    return(-1);
  }


  c_ins_flg = 'C';
 

  fn_userlog(c_ServiceName,"%d records are in the MAILPOSDTLS table",i_count_posm);
	fn_userlog(c_ServiceName,"i_nax_rec_per_fetch :%d AND c_ins_flg :%c",i_max_rec_per_fetch,c_ins_flg);

	

  for ( i_count=0;i_count < i_count_posm;i_count += i_max_rec_per_fetch )
  {
    	MEMSET(fo_phyeos_mlpos_arr);

    	EXEC ORACLE OPTION (char_map=string);

      EXEC SQL
	    SELECT
      		FPM_CLM_MTCH_ACCNT,
          FPM_XCHNG_CD,
	  			FPM_PRDCT_TYP,
	 				FPM_CONTRCT_DESC,
	  			FPM_EXPRY_DT,  
	  			FPM_OPNPSTN_FLW,
	  			FPM_OPNPSTN_QTY, 
	  			FPM_INSERT_DT
       INTO
        	:fo_phyeos_mlpos_arr
      	  FROM FPM_FO_PHYEOS_MAILPOSDTLS 
      		WHERE FPM_RECRD_ID >= :i_count + 1
      		AND   FPM_RECRD_ID <= :i_count + :i_max_rec_per_fetch;

      fn_userlog(c_ServiceName,"Count Here Is :%d:",sqlca.sqlerrd[2]);

    	if( SQLCODE != 0 && SQLCODE != -1405 ) 
    	{
      		fn_userlog(c_ServiceName,"bat_phyeos_clk :%d:",SQLCODE);
      		fn_userlog(c_ServiceName,"Count Here Is :%d:",sqlca.sqlerrd[2]);
      		if( SQLCODE == 1403)
      		{
        		if (sqlca.sqlerrd[2] == 0)
          		break;
      		}
      		else
      		{
        		fn_userlog(c_ServiceName,"Data select for MAILPOSDTLS failed");
        		fn_errlog(c_ServiceName, "S31145", SQLMSG, c_errmsg);
        		return (-1);
      		}
   	 }



  	i_rows_fetched = (i_count + i_max_rec_per_fetch > i_count_posm)? i_count_posm%i_max_rec_per_fetch : i_max_rec_per_fetch;

   	fn_userlog(c_ServiceName," Rows fetched : |%d| |%d|", i_rows_fetched, SQLCODE );

   	if(DEBUG_MSG_LVL_3)
   	{
     		fn_userlog(c_ServiceName," Rows fetched : |%d| |%d|", i_rows_fetched, SQLCODE );
   	}

   	Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
   	Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

   	MEMSET(c_msg_cbuf);

   	c_msg_cbuf = (unsigned char *)fo_phyeos_mlpos_arr;

   	l_bufferlength =  sizeof(fo_phyeos_mlpos_arr);

   	i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
   	i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
   	i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&i_rows_fetched,0);
   	i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);


   	for(i_counter = 0;i_counter < 4;i_counter++)
   	{
      		if(i_err[i_counter] == -1)
      		{
        		fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
        		fn_errlog(c_ServiceName, "S31150", FMLMSG, c_errmsg);
        		return(-1);
      		}
    	}


   	i_ch_val = tpcall("SFO_PHYEOS_UPL", (char *)ptr_fml_Sbuffer, 0,(char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);

    	if (i_ch_val == -1)
    	{
      		fn_userlog(c_ServiceName,"Error in calling service SFO_PHYEOS_UPL");
      		if(TPCODE != TPESVCFAIL)
      		{
        		fn_errlog(c_ServiceName, "S31155", TPMSG, c_errmsg);
      		}
      		else
      		{
        		Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
        		fn_errlog(c_ServiceName, "S31160", c_errmsg, c_errmsg);
      		}
      		return(-1);
    	}
	/*** forloop end ***/
   }

     fn_dstry_rs( ptr_fml_Sbuffer);
     return (0);
 }


int fn_ins_log_hdr(void)
{
  int  i_counter;
  char c_ins_flg;
  char c_xchng_cd[4] = { "" };

	fn_userlog(c_ServiceName," In The fn_ins_log_hdr(void) Function..");

  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Unable to allocate send buffer ");
    fn_errlog(c_ServiceName, "S31165", TPMSG, c_errmsg);
    return(-1);
  }

  c_ins_flg = 'E';

  i_err[0] = Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);
  i_err[1] = Fadd32(ptr_fml_Sbuffer,FML_XCHNG_CD,(char *)c_xchng_cd,0);
  i_err[2] = Fadd32(ptr_fml_Sbuffer,FML_TRD_DT,(char *)c_trd_dt,0);
  i_err[3] = Fadd32(ptr_fml_Sbuffer,FML_TRN_NO,(char *)&i_seq_no,0); 


  for(i_counter =0 ;i_counter<=3;i_counter++) 
  {
    if(i_err[i_counter] == -1)
    {
      fn_errlog(c_ServiceName, "S31170", FMLMSG, c_errmsg);
      fn_userlog(c_ServiceName,"Value of i =[%d]",i_counter);
      return (-1);
    }
  }

	fn_userlog(c_ServiceName,"Data bind Successfully in the FML buffer ...");
	fn_userlog(c_ServiceName,"calling SCX_PHYEOS_UPL service....");
 
   i_ch_val = tpcall("SFO_PHYEOS_UPL", (char *)ptr_fml_Sbuffer, 0,(char **)&ptr_fml_Rbuffer, &li_len_tobuf,0);
  
if (i_ch_val == -1)
  {
    fn_userlog(c_ServiceName,"Error in calling service for INS_LOG_HDR");
    if(TPCODE != TPESVCFAIL)
    {
      fn_errlog(c_ServiceName, "S31175", TPMSG, c_errmsg);
    }
    else
    {
      Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
      fn_errlog(c_ServiceName, "S31180", c_errmsg, c_errmsg);
    }

    return(-1);
  }

  fn_dstry_rs( ptr_fml_Sbuffer);
  return (0);
}

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_PHYEOS_CLK;
  return 0;
}
  
void fn_bat_term ( int argc, char *argv[] )
{
  return;
}
  
int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
  return 0;
}
  
	
	
	
