/**********************************************************************************/
/*			File Name 	: cln_fobse_brdclnt.pc																				*/
/*																																								*/
/*			Input 			: Pipe id [A1]																								*/
/*			Output			:																															*/
/*			Description : This is a client program which deques the broadcast messages*/ 
/*										from the broadcast Queue and depending on the message type 	*/
/*										calls the appropriate Libry functions to update underlynig 	*/
/*										Tables 																										 	*/
/**********************************************************************************/
/*																																								*/
/* Log : Ver	1.1	03-June-2013 Market Picture (2020) Handling Introduced	Sandeep */
/**********************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>
/*------------------------*/
#include <atmi.h>
#include <fml32.h>
#include <fml_def.h>
#include <fml_rout.h>
/*---------------------------*/
#include <fn_log.h>
#include <sqlca.h>
#include <fo_fml_def.h>
#include <fn_read_debug_lvl.h>
#include <fn_fobse_bcast.h>
#include<fn_nw_to_host_format.h>
#include <ud_fobse_socket.h>
#include <fn_battmpt.h>
#include <fo.h>
#include <fn_env.h>
#include <fn_fil_log.h>
#include <fn_ddr.h>
#include <fn_tuxlib.h>
#include <fn_signal.h>
#include <fo_exch_msgs.h>
#include <fn_imlmsgs_fno.h>

#define QUE_EMPTY 1
void fn_sgnl_usr2(int i_sig_no);
int i_exit_stts;
char    *ptr_carray_data;
int  i_brdprcs_exit_stts;

void 	fn_keep_listening(char * ,char * );
int 	fn_prcs_data(char * , struct st_bcast_actual_packet * ,long , char *);
char 	c_qspace_name[10];
char 	c_q_name[10];
char 	c_pipe_id [ 2+1 ];
char 	c_xchng_cd[3+1];
long  l_msg_typ;
int   i_err;
int   i_ferr;

void CLN_FOBSE_BRDCLNT(int argc ,char *argv[])
{
	char c_ServiceName [33];
  char c_errmsg [256];
  char *ptr_c_tmp;
	int  i_ret_val;
  char *ptr_c_temp ;
  char  c_filename[256];
	int i_count =0;
	strcpy(c_ServiceName, argv[0]);
	strcpy(c_pipe_id ,argv[3]);
	strcpy (c_xchng_cd, "BFO");				
	EXEC SQL INCLUDE "table/exg_xchng_mstr.h";
	
	INITBATDBGLVL(argv[0]);

	memset(c_qspace_name,'\0',sizeof(c_qspace_name));
	ptr_c_temp = (char *)fn_get_prcs_spc ( c_ServiceName ,"BRDQSPACE_NAME");
  if ( ptr_c_temp == NULL )
  {
    fn_errlog(c_ServiceName, "S31005", LIBMSG,   c_errmsg );
    fn_userlog ( c_ServiceName , "Error : Unable to get QSPACE_NAME from the config file");
    return ;
  }
  else
  {
    strcpy( c_qspace_name , ptr_c_temp );
  }

  fn_userlog(c_ServiceName,"Qspace Name is :%s:", c_qspace_name);
	memset(c_q_name,'\0',sizeof(c_q_name));
	ptr_c_temp = (char *)fn_get_prcs_spc (c_ServiceName , "BRDQ_NAME");
  if ( ptr_c_temp == NULL )
  {
    fn_userlog (c_ServiceName,"Error :Unable to get Q_NAME from the config file ");
    fn_errlog(c_ServiceName, "S31010", LIBMSG,c_errmsg );
	  return ;
  }
  else
  {
     strcpy( c_q_name , ptr_c_temp );
  }
	fn_userlog(c_ServiceName ,"Queue Name is :%s:", c_q_name);

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Before fn_keep_listening function ");
	}
	
	fn_keep_listening( c_ServiceName, c_errmsg );

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"After  fn_keep_listening function ");
	}	

	fn_userlog(c_ServiceName ," Broadcast clinet comming down ");
	return;

}
int fn_bat_init(int argc, char *argv[])
{
  int  i_ch_val ;
  int  i_loop;

  char c_ServiceName [ 33 ];
  char c_pipe_id [ 5+1 ];
  char c_err_msg[256];
  char *ptr_c_tmp;
  char c_fileName[256];
	char c_brd_port[10];
  strcpy( c_ServiceName, "cln_fobse_brdclnt" );


  if( argc != 4)
  {
    fn_userlog(c_ServiceName,
    "Usage - cln_fobse_brdclnt <Exchange qualifier> <Exchange code> <pipe_id>");
    return ( -1 );
  }

  fn_sck_init();

  if ( fn_set_sgn_hnd ( SIGUSR2, fn_sgnl_usr2, c_ServiceName, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "S31015", LIBMSG, c_err_msg );
    return -1;
  }

  fn_var = CLN_FOBSE_BRDCLNT;

  return ( 0 );
}
void fn_bat_term(int argc,
                 char *argv[] )
{
  char c_err_msg[256];
  char c_ServiceName[256];
  int i_ret_val;

  strcpy(c_ServiceName,argv[0]);
	fn_userlog(c_ServiceName," in BAT TERM function of %s:",c_ServiceName);
  return;
}
int fn_prcs_trg(char *c_ServiceName,
                 int i_trg_typ)
{
  return ( 0 );
}
void fn_sgnl_usr2(int i_sig_no)
{
  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog("cln_fobse_brdclnt","CLN_FOBSE_BRDCLNT SIGUSER2 exit");
  }
  i_exit_stts = EXIT;
  return;
}

void fn_keep_listening(char *c_ServiceName ,char *c_errmsg)
{
  FBFR32  *Qbuffer;
	TPQCTL qctl;
  char    c_bcast_data[MAX_BCAST_PACKET_LEN];
  char    c_bcast_data_without_hdr[MAX_BCAST_DATA_LEN];
  double  d_buf_cnt;
  long    l_bcast_data_without_hdr_len;
  long    l_bcast_data_actual_len;
  int     i_ch_val;
  int     i_buf_len;
	int 		i_tran_id;

	short s_cur_session;	
	struct  st_time_brd  st_var_time_brd;
	struct st_sssn_chng_brd  st_var_sssn_continuous_brd;
	struct st_bcast_packet   st_var_bcast_buffer;
	struct st_bcast_actual_packet  st_var_data_buffer;

	i_exit_stts = DONT_EXIT;

	fn_userlog(c_ServiceName ,"Inside Keep_listening ");
	Qbuffer = (FBFR32*)tpalloc("FML32",NULL,MAX_BCAST_PACKET_LEN);

  if(Qbuffer == NULL)
  {
      fn_userlog(c_ServiceName,"Allocation of memory failure for Qbuffer ");
      fn_errlog(c_ServiceName,"S31020",TPMSG,c_errmsg);
      return;
  }
  ptr_carray_data = tpalloc (  "CARRAY", NULL, MAX_BCAST_PACKET_LEN );

  if ( ptr_carray_data == NULL )
  {
    fn_userlog(c_ServiceName ,"Error while allocating ptr_carray_data." );
    fn_errlog ( c_ServiceName, "S31025", FMLMSG, c_errmsg );
    return ;
  }

  while ( i_exit_stts == DONT_EXIT )
  {
    i_buf_len = sizeof( c_bcast_data );

		i_tran_id = fn_begintran ( c_ServiceName, c_errmsg );
    if ( i_tran_id == -1 )
    {
    	fn_errlog(c_ServiceName, "S31030", LIBMSG, c_errmsg );
    	Fadd32( Qbuffer, FFO_ERR_MSG, c_errmsg, 0 );
    	tpfree((char *)Qbuffer);
    	break;
    }
		qctl.flags = TPNOFLAGS;
	
	  if(tpdequeue(c_qspace_name, c_q_name,(TPQCTL *)&qctl,(char **)&Qbuffer,&i_buf_len ,0)== - 1)
    {
      if(qctl.diagnostic != QMENOMSG)
      {
        fn_errlog(c_ServiceName,"S31035",TPMSG,c_errmsg);
      }
      if(qctl.diagnostic == QMENOMSG)
      {
        i_ch_val = QUE_EMPTY;

				if(DEBUG_MSG_LVL_4)
          fn_userlog(c_ServiceName ,"i_ch_val is QUE_EMPTY" );

        fn_aborttran(c_ServiceName,i_tran_id,c_errmsg);

				usleep(100000);	/* sleep of 1000000 microseconds(1 Sec) added to following Queue error */
												/*TMQUEUE.10240086.1.0: gtrid x0 x4f792a37 x3409d: Q_CAT:1472: ERROR: xa_st													art() - no more tran table entries (max = 20 ) **/
        continue;
      }
		  else
      {
        tpfree((char *)Qbuffer);
        fn_aborttran(c_ServiceName,i_tran_id,c_errmsg);
        break;
      }
		}
		i_tran_id = fn_committran(c_ServiceName ,i_tran_id , c_errmsg);

		if(i_tran_id == -1 )
		{
			fn_errlog(c_ServiceName,"S31040",TPMSG , c_errmsg);
      fn_aborttran(c_ServiceName,i_tran_id,c_errmsg);
			tpfree((char *) Qbuffer);
			break ;
		}

	  i_err = Fget32(Qbuffer,FML_SBUF,0,(char*)c_bcast_data,(unsigned long *)&i_buf_len);
    i_ferr = Ferror32;

    if( i_err == -1 )
    {
      fn_errlog(c_ServiceName,  "S31045", Fstrerror32(i_ferr),c_errmsg);
      tpfree ( ( char * ) Qbuffer );
      break;
    }

    memset ( &st_var_bcast_buffer, '\0', sizeof ( struct st_bcast_packet ) );
    memcpy ( &st_var_bcast_buffer, c_bcast_data, i_buf_len );
    st_var_bcast_buffer.li_data_msg_len = fn_swap_long ( st_var_bcast_buffer.li_data_msg_len );
    l_bcast_data_without_hdr_len = ntohl ( st_var_bcast_buffer.li_data_msg_len );
    l_bcast_data_actual_len = i_buf_len-LEN_SLOT_NO-LEN_BCAST_MSG;

    MEMSET(c_bcast_data_without_hdr);
    memcpy ( c_bcast_data_without_hdr , st_var_bcast_buffer.c_msg_data, l_bcast_data_actual_len );

		memset(&st_var_data_buffer ,'\0', sizeof(struct st_bcast_actual_packet));
    memcpy ( &st_var_data_buffer, st_var_bcast_buffer.c_msg_data, l_bcast_data_actual_len );

    st_var_data_buffer.li_msg_type = fn_swap_long ( st_var_data_buffer.li_msg_type );
    l_msg_typ =ntohl( st_var_data_buffer.li_msg_type);
		
    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog (c_ServiceName , "Message Type is :%ld:", l_msg_typ);
    }
    i_ch_val =fn_prcs_data(c_ServiceName,
                           &st_var_data_buffer,
                           l_bcast_data_actual_len,
                           c_errmsg
                          );

    if ( i_ch_val == EXIT )
    {
      fn_userlog (c_ServiceName,"Error in processing the Message Type :%ld: Msg Len :%ld:",l_msg_typ,l_bcast_data_actual_len );
      i_brdprcs_exit_stts = EXIT;
    }
	}	
}
/**************************************************************
    fn_prcs_data() : function to process the broadcast message*
                     according to message type                *
**************************************************************/
int fn_prcs_data (  char   *c_ServiceName,
										struct st_bcast_actual_packet *st_data_buffer,
                    long   l_bcast_data_len,
                    char   *c_errmsg )
{
	int i_count;
  struct  st_time_brd  st_var_time_brd;
  struct st_sssn_chng_brd   st_var_sssn_continuous_brd;
  struct st_sssn_chng_brd   *ptr_var_sssn;
  struct  st_news_brd st_var_news_brd;
  struct st_mkt_picture_dtls ptr_st_mkt_pic_dtls;
  struct st_mrkt_pctr_dtls	ptr_mrkt_dtls;					/***	Ver	1.1	***/
	struct st_opn_intrst_brd ptr_st_opn_intrst_dtls;
	struct st_open_price_brd st_var_opn_prc_brd;
	struct st_cls_price_brd  st_var_cls_prc_brd;
 	struct st_sensex_dtl_brd ptr_st_sensex_dtl_brd;
	struct st_all_indx_dtl_brd ptr_st_all_indices;
	struct st_trd_lmt_exceed ptr_st_lmt_exceed; /** handling done in SFO_BRCV_CLNT **/ 
  int i_ch_val;

	fn_userlog(c_ServiceName,"Processing for message :%ld:",l_msg_typ);
  switch(l_msg_typ)
  {
    case  BCAST_MRKT_CHNG:

          fn_userlog(c_ServiceName ,"Inside Session Change[2002] broadcast ");

          memset ( &st_var_sssn_continuous_brd, '\0', sizeof ( struct st_sssn_chng_brd ) );
          memcpy((char*)&st_var_sssn_continuous_brd,(char *)st_data_buffer,sizeof(struct st_sssn_chng_brd) );
          fn_cnvt_to_hfmt_swap_sssn_chng_brd(&st_var_sssn_continuous_brd);
          ptr_var_sssn = &st_var_sssn_continuous_brd;

          i_ch_val = fn_brdmkt_stts_chng ( ptr_var_sssn ,
                                           c_xchng_cd,
                                           c_ServiceName,
                                           c_errmsg
                                          );
          if ( i_ch_val == -1 )
          {
             i_brdprcs_exit_stts = EXIT;
          }

             break;

    case BCAST_TIME_MSG:

          fn_userlog(c_ServiceName ,"Inside Time[2001] broadcast ");
          memset ( &st_var_time_brd, '\0', sizeof ( struct st_time_brd) );
          memcpy ( (char *)&st_var_time_brd, (char * )st_data_buffer,sizeof(struct st_time_brd) );
          fn_cnvt_to_hfmt_swap_time_brd ( &st_var_time_brd );
          fn_userlog(c_ServiceName ," Currenet Time Hours   :%d:",st_var_time_brd.si_hrs);
          fn_userlog(c_ServiceName ," Currenet Time Minutes :%d:",st_var_time_brd.si_mins);
          fn_userlog(c_ServiceName ," Currenet Time Seconds :%d:",st_var_time_brd.si_scnds);
          fn_userlog(c_ServiceName ," Currenet Time MSeconds:%d:",st_var_time_brd.si_mlscnds);

          i_ch_val = fn_upd_time_diff (&st_var_time_brd ,c_ServiceName,c_xchng_cd, c_errmsg);
					if(i_ch_val)
					{
						fn_userlog(c_ServiceName,"Failed in Updating Time difference in XCHNG_MSTR");
					}
          break;

    case BCAST_TOUCHLINE_MSG:

          fn_userlog(c_ServiceName ,"Inside Touchline[2005] broadcast ");
          break;

    case BCAST_NEWS_MSG:

          fn_userlog(c_ServiceName ,"Inside NEWS [2004]broadcast ");
          memset ( &st_var_news_brd, '\0', sizeof ( struct st_news_brd));
          memcpy ( (char *)&st_var_news_brd, (char *)st_data_buffer,sizeof(struct st_news_brd) );
          fn_cnvt_to_hfmt_swap_upd_msg_brd ( &st_var_news_brd );
          fn_upd_msg_brd(c_ServiceName ,st_var_news_brd,c_errmsg);

          break;

    case BCAST_OPN_PRC_MSG:

          fn_userlog(c_ServiceName ,"Inside OPEN Price [2013 ]broadcast ");
          memset ( &st_var_opn_prc_brd, '\0', sizeof ( struct st_open_price_brd));
					memcpy((char *)&st_var_opn_prc_brd ,(char *)st_data_buffer,sizeof(struct st_open_price_brd));
					fn_cnvt_to_hfmt_swap_opn_prc_brd (&st_var_opn_prc_brd);
					i_ch_val =fn_upd_opn_price(c_ServiceName,c_xchng_cd,&st_var_opn_prc_brd , c_errmsg );
					fn_userlog(c_ServiceName,"After updating opening price in FTQ ");
          break;

    case BCAST_CLS_PRC_MSG :

          fn_userlog(c_ServiceName ,"Inside CLOSE Price [2014 ]broadcast ");
          memset ( &st_var_cls_prc_brd, '\0', sizeof ( struct st_cls_price_brd));
					memcpy((char *)&st_var_cls_prc_brd ,(char *)st_data_buffer,sizeof(struct st_cls_price_brd));
					fn_cnvt_to_hfmt_swap_cls_prc_brd (&st_var_cls_prc_brd);
					fn_upd_cls_price(c_ServiceName,c_xchng_cd ,&st_var_cls_prc_brd , c_errmsg );
					fn_userlog(c_ServiceName,"After updating closing price in FTQ ");
          break;

    case BCAST_AUCTN_SSSN_CHNG :

          fn_userlog(c_ServiceName ,"Inside Auction Session Change [2003]broadcast-Not handled ");
          break;

    case BCAST_MRKT_MSG:

          fn_userlog(c_ServiceName ,"Inside MARKET MESSAGE [2007] broadcast ");
          memset(&ptr_st_mkt_pic_dtls ,'\0' ,sizeof(struct st_mkt_picture_dtls));
          memcpy((char*)&ptr_st_mkt_pic_dtls,(char *)st_data_buffer,sizeof(struct st_mkt_picture_dtls
));
          fn_cnvt_to_hfmt_swap_upd_mkt_info_dtls(&ptr_st_mkt_pic_dtls);
          fn_userlog(c_ServiceName , " No of Records :%d:",ptr_st_mkt_pic_dtls.si_no_recs);
          i_ch_val = fn_stock_status_chg(&ptr_st_mkt_pic_dtls,
                                         c_xchng_cd,
                                         c_ServiceName,
                                         c_errmsg
                                         );
          if ( i_ch_val == -1 )
          {
             fn_errlog(c_ServiceName ,"S31050",LIBMSG,c_errmsg);
             fn_userlog(c_ServiceName , " Failed in updating Stock Status ");
             i_brdprcs_exit_stts = EXIT;
          }

          break;

		case BCAST_MRKT_PCTR_MSG:			/***	Ver	1.1	***/

			fn_userlog(c_ServiceName,"Inside Market Picturre Msg ( 2020 ).");

			memset(&ptr_mrkt_dtls,'\0' ,sizeof(struct st_mrkt_pctr_dtls));
			memcpy((char*)&ptr_mrkt_dtls,(char *)st_data_buffer,sizeof(struct st_mrkt_pctr_dtls));
			fn_cnvt_to_hfmt_swap_mrkt_pctr(&ptr_mrkt_dtls);

      fn_userlog(c_ServiceName ," No of Records :%d:",ptr_mrkt_dtls.si_no_of_rcrds);

			i_ch_val = fn_mrkt_pctr_dtls	(	&ptr_mrkt_dtls,
                                   		c_xchng_cd,
                                      c_ServiceName,
                                      c_errmsg
                                    );
     	if ( i_ch_val == -1 )
     	{
      	fn_errlog(c_ServiceName ,"S31055",LIBMSG,c_errmsg);
        fn_userlog(c_ServiceName , " Failed in updating Stock Status ");
        i_brdprcs_exit_stts = EXIT;
      }

		break ;

/***********************************************************************************************/
/* As spot price is selected from LTQ which gets updated during the Equity Broadcast 					 */
/* Processing same is decided not to handle the SENSEX and All Indices Broadcast Messages			 */
/* In Case If LTQ is not getting updated for other than BSESENSEX indices all indices handling */
/* needs to be carried out as per the requiremnet 																						 */
/***********************************************************************************************/

    case BCAST_SEN_DTLS :

          fn_userlog(c_ServiceName ,"Inside Sensex Details[2011] broadcast ");
          break;

    case BCAST_ALL_DTLS :
          fn_userlog(c_ServiceName ,"Inside All Indices Details [2012]broadcast ");
          break;

    case BCAST_OPN_INTRST_MSG :

          fn_userlog(c_ServiceName ,"Inside Open Interest [2015]broadcast ");
					memset(&ptr_st_opn_intrst_dtls ,'\0' ,sizeof(struct st_opn_intrst_brd));
					memcpy((char*)&ptr_st_opn_intrst_dtls,(char*)st_data_buffer,sizeof(struct st_opn_intrst_brd));

					fn_cnvt_to_hfmt_swap_opn_intrst_brd(&ptr_st_opn_intrst_dtls);	

					i_ch_val = fn_upd_opn_interest(&ptr_st_opn_intrst_dtls,
																				 c_xchng_cd,
																				 c_ServiceName,
																				 c_errmsg);

          break;
    case BCAST_VAR_PRCNT_MSG :
 
         fn_userlog(c_ServiceName ,"Inside Variable Percent[2016] Broadcast");
          break;

    case BCAST_AUC_MKT_PIC_MSG :
          fn_userlog(c_ServiceName ,"Inside Auct Picture [2017] Broadcast");
          break;

    case BCAST_TRDR_LIMIT_EXCEED :
 
         fn_userlog(c_ServiceName , " Trader LIMIT EXCEEDED Broadcast[25100] ");
				 memset(&ptr_st_lmt_exceed ,'\0',sizeof(struct st_trd_lmt_exceed));
				 memcpy((char *)&ptr_st_lmt_exceed,(char*)st_data_buffer,sizeof(struct st_trd_lmt_exceed));
				 fn_cnvt_to_hfmt_swap_trd_limit(&ptr_st_lmt_exceed);
				 i_ch_val = fn_trd_limit_exceed(&ptr_st_lmt_exceed,
																					c_xchng_cd,
																					c_ServiceName,
																					c_errmsg);	
					break;
    default:

          fn_userlog (c_ServiceName,"Message Type is :%ld: which is not handled",l_msg_typ);
          break;
     }
  return 1;
}
