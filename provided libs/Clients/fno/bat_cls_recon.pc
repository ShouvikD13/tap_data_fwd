
/*** ver 1.2 Match-State query change Samip M - 11-Sep-2014 ***/
/*** ver 1.3 queries change Samip M - 28-Sep-2015 ***/
/*** ver 1.4 queries change Samip M - 01-Oct-2015 ***/
/*** ver 1.5 queries reverted Samip M - 08-Oct-2015 ***/
/*** ver 1.6 queries changed Samip M - 28-Oct-2015 ***/
/*** ver 1.7 querie for State changed Sandip T - 22-Jan-2016 ***/
/*** ver 1.8 queries changed Tanmay Patel -18-Aug-2017 ***/
/*** ver 1.9 query changed Tanmay Patel - 09-Oct-2017 ***/
/*** ver 2.0 Add Query     Tanmay Patel - 14-Nov-2018 ***/
/*** ver 2.1 query changed Tanmay Patel - 19-Aug-2019 ***/
/*** ver 2.2 query changed Tanmay Patel - 03-Jan-2020 ***/

#include <string.h>			/*** Ver 1.1 ***/	
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fml_def.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <fml_rout.h>			/*** Ver 1.1 ***/	
#include <fn_read_debug_lvl.h>      /*** Ver 1.1 ***/
/***#include <fn_fo_atg.h> ***/
#include <sqlca.h>
#include <stdlib.h>

#define TOTAL_FML 6
#define MAX_FETCH 1000
#define MATCH_RECON 0
#define SCHM_RECON 1
#define STATE_RECON 2
#define MRGN_RECON 3     /*** Ver 2.0 ***/
#define TOTAL_RECON 4    /*** Ver 2.0  chnage from 3 to 4 ***/ 

  int     i_err[TOTAL_FML];
  int     i_ferr[TOTAL_FML];
  FILE *fpfile;
  FILE *fpfile1;
  char c_file_path[256];
  char c_file_path1[256];

  char 		c_ServiceName [ 33 ];
  char 		c_err_msg [ 256 ];
int prcs_recon ( int );

void BAT_CLS_RECON ( int argc, char *argv[] )
{
  TPINIT  *ptr_tpinfo;
	long 		int li_tot_rcrds;
  int 		i_ch_val;
  long int li_cnt;
  char 		c_msg[256];
	FBFR32 *ptr_fml_buf;

	char  	c_usr_id[8];
  long  	l_session_id;
	char  	c_ixchng_cd [21];	
  char  	c_trd_dt[12];
  char  	c_trade_dt[12];
	char		c_dwld_typ[2];
  long 		l_script_id;
  char 		c_instrmnt_typ[9];
  char 		c_symbol[12];
  char 		c_expry_dt[12];
  char 		c_opt_typ[3];
  double 	d_strike_prc = 0.00;
  long 		l_strike_prc = 0;
  long    l_token_no=0;       /*** Ver 1.2 ***/
	long    l_ca_lvl;							/*** Ver 1.1 ***/
	long		l_close_price;		
	char 		c_xchng_cd[4];
	char 		c_rout_crt[4];
	char 		c_mtch_accnt[11];
	int i_fml_occur;
	int i_occur_loop;
  long    l_buf_len;
  long    l_carr_buf_len;

  int     i_recds_per_occur;
  int     i_recds_per_rqst;
  char    *ptr_car_rbuf;
  int     i_fget_loop;
  int     i_trnsctn;
	int i_recon;
	int i_ret_val;
/**	char c_mtch_arr[MAX_FETCH][11];
	char c_schm1_arr[MAX_FETCH][51];
	char c_schm2_arr[MAX_FETCH][51];
	char c_schm3_arr[MAX_FETCH][51];
	char c_state_arr[MAX_FETCH][51];***/
/***
	int i;
  int tot_fetch = 0;
  int rec_fetch = 0;
  int curr_row = 0;
  int prev_row = 0;
  char c_command[100];**/
/***
  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor  sys_cursor;
  EXEC SQL END DECLARE SECTION;
***/

/**  struct fno_annx_dtls_ea   st_var_anxr_dtls_ea[MAX_REC]; **/

  strcpy ( c_ServiceName, argv[0] );

	INITBATDBGLVL(argv[0]);     /*** Ver 1.1 ***/

	sprintf ( c_msg, "Batch process %s started", argv[0] );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	strcpy(c_usr_id,"system"); /**/
	strcpy ( c_msg, "Creating data. Please wait ... " );


 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  l_session_id = 0; 
  if( fn_create_pipe() == -1)
  {
    printf ( "Unable to create pipe." );
    return;
  }

  /* Allocate space to typed buffer pointer */
  ptr_tpinfo = ( TPINIT * ) tpalloc ( "TPINIT", NULL, TPINITNEED ( 0 ) );
  if ( ptr_tpinfo == NULL )
  {
    fn_bat_pst_msg ( c_ServiceName, "System Error : contact system support", c_tag );
    fn_errlog ( c_ServiceName, "S31005", TPMSG, c_err_msg );
    return;
  }

  /* Check if ORA_GRP group is present in the system */
  if ( tuxgetenv( "ORA_GRP" ) == NULL )
  {
    fn_bat_pst_msg ( c_ServiceName, "System Error : contact system support", c_tag );
    fn_errlog ( c_ServiceName, "S31010", TPMSG, c_err_msg );
    tpfree ( ( char * ) ptr_tpinfo );
    return;
  }

  /* Prepare the values */
  strcpy ( ptr_tpinfo->passwd, "\0" );
  strcpy ( ptr_tpinfo->cltname, "\0" );
  strcpy ( ptr_tpinfo->grpname, tuxgetenv( "ORA_GRP" ) );
  strcpy ( ptr_tpinfo->usrname, c_ServiceName );
  ptr_tpinfo->flags = 0;

  /* Join the system application */
  if ( tpinit( (TPINIT *) ptr_tpinfo ) == -1 )
  {
    fn_bat_pst_msg ( c_ServiceName, "System Error : contact system support", c_tag );
    fn_errlog ( c_ServiceName, "S31015", TPMSG, c_err_msg );
    tpfree ( (char *) ptr_tpinfo );
    return;
  }
  /* Free the space allocated to typed buffer pointer */
  tpfree ( (char *) ptr_tpinfo );

  /* Open the Resource Manager */
  if ( tpopen() == -1 )
  {
    fn_bat_pst_msg ( c_ServiceName, "System Error : contact system support", c_tag );
    fn_errlog ( c_ServiceName, "S31020", TPMSG, c_err_msg );
    tpterm ( );
    return;
  }
	ptr_fml_buf = fn_create_rs ( c_ServiceName,
                               c_err_msg,
                               "SFO_CLASS_RECO",
                               TPNOTIME,
															 0);
	

	if ( ptr_fml_buf == NULL )
	{
		fn_errlog( c_ServiceName, "S31025", LIBMSG, c_err_msg );
  	strcpy ( c_msg, "Failed to Create the records");
  	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		return;
	}


	for ( i_recon=0;i_recon < TOTAL_RECON;i_recon++)
	{
		fn_userlog( c_ServiceName	,"Inside recon %d",i_recon);
		switch(i_recon)
		{
			case MATCH_RECON :
  			strcpy(c_file_path,tuxgetenv("TEMP"));
  			strcat(c_file_path,"/icis_match.txt");
				i_ret_val = prcs_recon(MATCH_RECON);
				break;

			case SCHM_RECON :
  			strcpy(c_file_path,tuxgetenv("TEMP"));
  			/**strcpy(c_file_path1,tuxgetenv("TEMP"));**/
  			strcat(c_file_path,"/icis_match_schm.txt");
  			/**strcat(c_file_path1,"/icis_match_state.txt"); **/
				i_ret_val = prcs_recon(SCHM_RECON);
				break;

			case STATE_RECON :
  			strcpy(c_file_path,tuxgetenv("TEMP"));
  			strcat(c_file_path,"/icis_match_state.txt");
				i_ret_val = prcs_recon(STATE_RECON);
/**				fn_userlog( c_ServiceName ,"State file handled in Scheme");**/
				break;

      case MRGN_RECON :
         strcpy(c_file_path,tuxgetenv("TEMP"));
         strcat(c_file_path,"/icis_mrgn.txt");
         i_ret_val = prcs_recon(MRGN_RECON);
         break;
	
			default :
				fn_userlog( c_ServiceName ,"Inavlid Request type");
				i_ret_val = -1;
				break;
				
		}

    if ( i_ret_val == -1 )
    {
      fn_userlog( c_ServiceName, "Error in the called function with sqlcode" );
			return;
    }
	}

/**********
  strcpy(c_file_path,tuxgetenv("TEMP"));
  strcat(c_file_path,"/icis_match.txt");
  fpfile = (FILE*)fopen(c_file_path,"w");

    if(fpfile==NULL)
    {
      fn_userlog(c_ServiceName,"File opening failed-Path=%s", c_file_path);
      fn_errlog(c_ServiceName, "S31030","File Opening Failed",c_err_msg);
      return;
    }

  EXEC SQL ALLOCATE :sys_cursor;

  EXEC SQL  EXECUTE
  	BEGIN
			OPEN :sys_cursor FOR
				Select iai.iai_match_account_no
  			From iai_info_account_info iai
				Where iai.iai_match_account_no is not Null
				and iai_eba_upload_flg = 'Y';
		END;
	END-EXEC;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg  );
    EXEC SQL FREE :sys_cursor;
    return;
  }

	for (;;)
	{
		MEMSET(c_mtch_arr);
    EXEC SQL FETCH :sys_cursor
			INTO :c_mtch_arr;

      if ( sqlca.sqlerrd[2] == 0 )
      {
				fn_userlog(c_ServiceName, "Inside No data");
        break;
      }
    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
     ** if ( SQLCODE == NO_DATA_FOUND )**
      if ( sqlca.sqlerrd[2] == 0 )
      {
				fn_userlog(c_ServiceName, "Inside No data");
        break;
      }
      else
      {
        fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg  );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        return;
      }
    }

		fn_userlog(c_ServiceName,"Record Count :%d:",sqlca.sqlerrd[2]);
    curr_row = sqlca.sqlerrd[2] - prev_row;
    prev_row = sqlca.sqlerrd[2];

		fn_userlog(c_ServiceName,"curr_row :%d:",curr_row);
		fn_userlog(c_ServiceName,"prev_row :%d:",prev_row);

    if(curr_row == 0)
    break;

    if(sqlca.sqlcode < 0)
    {
      fn_userlog(c_ServiceName,"Error in Fetching from cursor");
      fn_userlog(c_ServiceName,"%s",sqlca.sqlerrm.sqlerrmc);
      fn_userlog(c_ServiceName,"%d",sqlca.sqlcode);
			return;
    }

		for(i=0;i<curr_row;i++)
		{
**				fn_userlog(c_ServiceName,"%s",c_mtch_arr[i]);**
		    fprintf(fpfile,"%s",c_mtch_arr[i]);	
		    fprintf(fpfile,"\n");	
		}
    tot_fetch += curr_row;

		fn_userlog(c_ServiceName,"tot_fetch :%d:",tot_fetch);

    if(curr_row < MAX_FETCH)
    break;

    if(tot_fetch == MAX_FETCH)
    continue;

	}
		fn_userlog(c_ServiceName,"tot_fetch :%d:",tot_fetch);

	EXEC SQL CLOSE :sys_cursor;
	fclose(fpfile);

    sprintf( c_command, "sort -o %s %s", c_file_path, c_file_path );
    fn_userlog(c_ServiceName, "Before sort :%s:",c_command);
    system(c_command);
		fn_userlog(c_ServiceName, "After sort");
		
***************/

	sprintf ( c_msg, "Batch process %s ended", argv[0] );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  return;
}

int prcs_recon ( int i_rqst )
{
 /** char c_mtch_arr[MAX_FETCH][11];
  char c_schm1_arr[MAX_FETCH][51];
  char c_schm2_arr[MAX_FETCH][51];
  char c_schm3_arr[MAX_FETCH][51];
  char c_state_arr[MAX_FETCH][51];**/

	int i;
  int tot_fetch = 0;
  int rec_fetch = 0;
  int curr_row = 0;
  int prev_row = 0;
  char c_command[100];
  char c_command1[100];

  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor  sys_cursor;
		varchar	v_mtch_oth_arr[MAX_FETCH][10];
  	varchar c_mtch_arr[MAX_FETCH][11];
  	varchar c_schm1_arr[MAX_FETCH][51];
  	varchar c_schm2_arr[MAX_FETCH][51];
  	varchar c_schm3_arr[MAX_FETCH][51];
  	varchar c_state_arr[MAX_FETCH][51];
    double  d_amount_arr[MAX_FETCH];  /*** Ver 2.0 ***/

  EXEC SQL END DECLARE SECTION;

  MEMSET( c_command );
  MEMSET( c_command1 );
  fpfile = (FILE*)fopen(c_file_path,"w");

    if(fpfile==NULL)
    {
      fn_userlog(c_ServiceName,"File opening failed-Path=%s", c_file_path);
      fn_errlog(c_ServiceName, "S31045","File Opening Failed",c_err_msg);
      return -1;
    }

/**	if ( i_rqst == SCHM_RECON )
	{
  	fpfile1 = (FILE*)fopen(c_file_path1,"w");

    if(fpfile1==NULL)
    {
      fn_userlog(c_ServiceName,"File opening failed-Path=%s", c_file_path1);
      fn_errlog(c_ServiceName, "S31050","File Opening Failed",c_err_msg);
      return -1;
    }
	}**/

  EXEC SQL ALLOCATE :sys_cursor;

 	if(i_rqst == MATCH_RECON)
 	{
  	EXEC SQL  EXECUTE
  	BEGIN
			OPEN :sys_cursor FOR
         SELECT IAI.IAI_MATCH_ACCOUNT_NO
         FROM   IAI_INFO_ACCOUNT_INFO IAI
         WHERE  IAI.IAI_MATCH_ACCOUNT_NO IS NOT NULl
         AND    IAI.IAI_MATCH_ACCOUNT_STATUS = 35
				 AND 		IAI.IAI_EBA_UPLOAD_DT IS NOT NULL ; /*** Added in Ver 2.2  ***/

			/*** Commented for Ver 1.3 *****/	/** Uncommented for Ver 1.5 ***/
       /*** Commeneted in Ver 2.2 ***
				Select iai.iai_match_account_no
  			From iai_info_account_info iai
				Where iai.iai_match_account_no is not Null
        AND   NVL(iai.IAI_BNK_ACCOUNT_FLAG,'*') <> 'P'; ***/ /*** Added in Ver 2.1 ***/

				/*** and iai_eba_upload_flg = 'Y'; *** Commented for Ver 1.9 ***/
				/*** Ver 1.3 ***/

				/*** Commented for Ver 1.5 ****
				** Added for Ver 1.3 ****
				SELECT IAI.IAI_MATCH_ACCOUNT_NO
				FROM IAI_INFO_ACCOUNT_INFO IAI,
				UAC_USR_ACCNTS        UAC,
				ICD_INFO_CLIENT_DTLS  ICD
				WHERE IAI.IAI_MATCH_ACCOUNT_NO = UAC.UAC_CLM_MTCH_ACCNT
				AND IAI.IAI_SERIAL_NO = ICD.ICD_SERIAL_NO
				AND IAI.IAI_MATCH_ACCOUNT_NO IS NOT NULL
				** AND (UAC.UAC_ACT_DEACT_FLG <> 'S' OR ICD.ICD_INWARD_STATUS <> 'I') ** Commented for Ver 1.4 **
				AND (UAC.UAC_ACT_DEACT_FLG <> 'S' AND ICD.ICD_INWARD_STATUS <> 'I')	** Ver 1.4 **
				AND IAI_EBA_UPLOAD_FLG = 'Y';
				*** Ver 1.3 ***
				**** Ver 1.5 ***/
		END;
		END-EXEC;
 	}

 	if( i_rqst == SCHM_RECON )
	{
    /****EXEC SQL  EXECUTE
    BEGIN
      OPEN :sys_cursor FOR
				SELECT distinct IAI.IAI_MATCH_ACCOUNT_NO MATCH_ACCOUNT,
				INSD.INSD_EQ_SCHEMECODE INSD_EQ_SCHEMECODE,
				INSD.INSD_FNO_SCHEMECODE INSD_FNO_SCHEMECODE,
				INSD.INSD_CDX_SCHEMECODE INSD_CDX_SCHEMECODE,
				ism.ism_state_desc
				from ICD_INFO_CLIENT_DTLS ICD, IAI_INFO_ACCOUNT_INFO IAI,IAD_INFO_ADDRESS_DTLS IAD,
				INSD_INFO_NTST_SCHEME_DTLS INSD,ism_info_state_master ISM,
				imsm_info_match_scheme_master imsm_EQ,
				imsm_info_match_scheme_master imsm_FNO,
				imsm_info_match_scheme_master imsm_CDX
				where icd.icd_clnt_cd = iai.iai_match_account_no
				and iai.iai_match_account_no = insd.insd_match_account_no
				and icd.icd_serial_no = iai.iai_serial_no
				and iai.iai_serial_no = iad.iad_serial_no
				and iad.iad_serial_no = insd.insd_serial_no
				AND iad.iad_state_cd = ISM.Ism_State_Cd
				and insd.insd_eq_schemecode= imsm_EQ.imsm_schemecode
				and insd.insd_fno_schemecode = imsm_FNO.imsm_schemecode
				and insd.insd_cdx_schemecode = imsm_CDX.imsm_schemecode
				and IAD.IAD_ADDRESS_TYPE = 'APPLICANT_CORR'
				and imsm_EQ.imsm_active_flag= 'Y'
				and imsm_FNO.Imsm_Active_Flag = 'Y'
				and imsm_CDx.Imsm_Active_Flag = 'Y'
				and ism.ism_active_flag = 'Y';
    END;
    END-EXEC;****/

/*****    EXEC SQL  EXECUTE
    BEGIN
      OPEN :sys_cursor FOR
				SELECT INSD.INSD_MATCH_ACCOUNT_NO MATCH_ACCOUNT, 
				INSD.INSD_EQ_SCHEMECODE INSD_EQ_SCHEMECODE,
				INSD.INSD_FNO_SCHEMECODE INSD_FNO_SCHEMECODE,
				INSD_CDX_SCHEMECODE INSD_CDX_SCHEMECODE
				FROM INSD_INFO_NTST_SCHEME_DTLS INSD,IAI_INFO_ACCOUNT_INFO IAI
				WHERE
				INSD.INSD_SERIAL_NO=IAI.IAI_SERIAL_NO
				AND IAI.IAI_MATCH_ACCOUNT_STATUS=35
				AND IAI.IAI_EBA_UPLOAD_FLG='Y';
    END;
    END-EXEC;	********* Commented as new query provided ***/


    EXEC SQL  EXECUTE
    BEGIN
      OPEN :sys_cursor FOR
				SELECT INSD.INSD_MATCH_ACCOUNT_NO MATCH_ACCOUNT,
				INSD.INSD_EQ_SCHEMECODE INSD_EQ_SCHEMECODE,
				INSD.INSD_FNO_SCHEMECODE INSD_FNO_SCHEMECODE,
				INSD_CDX_SCHEMECODE INSD_CDX_SCHEMECODE
				FROM INSD_INFO_NTST_SCHEME_DTLS INSD,IAI_INFO_ACCOUNT_INFO IAI  
				WHERE 
				INSD.INSD_SERIAL_NO=IAI.IAI_SERIAL_NO
				AND INSD.INSD_MATCH_ACCOUNT_NO=IAI.IAI_MATCH_ACCOUNT_NO
				AND IAI.IAI_MATCH_ACCOUNT_STATUS=35 
				AND IAI.IAI_EBA_UPLOAD_FLG='Y';
    END;
    END-EXEC;

	}	

 	if( i_rqst == STATE_RECON )
	{
    /***EXEC SQL  EXECUTE
    BEGIN
      OPEN :sys_cursor FOR
				Select iai.iai_match_account_no, iad.iad_state_cd
				from
				iad_info_address_dtls iad, iai_info_account_info iai
				where iai.iai_serial_no=iad.iad_serial_no
				and iad.iad_address_type='APPLICANT_CORR';
    END;
    END-EXEC;***/

		/*** Commented for Ver 1.3 ****/	/**** Uncommented for Ver 1.5 ****/
		/*** Commented for Ver 1.6 ****
		EXEC SQL  EXECUTE
    BEGIN
      OPEN :sys_cursor FOR
				SELECT IAI.IAI_MATCH_ACCOUNT_NO MATCH_ACCOUNT, 
				ISM.ISM_STATE_DESC STATE_DESC
				FROM IAD_INFO_ADDRESS_DTLS IAD,
				ISM_INFO_STATE_MASTER ISM,IAI_INFO_ACCOUNT_INFO IAI
				WHERE IAD.IAD_STATE_CD = ISM.ISM_STATE_CD
				AND IAI.IAI_SERIAL_NO=IAD.IAD_SERIAL_NO
				AND IAD.IAD_ADDRESS_TYPE = 'APPLICANT_CORR'
				AND IAI.IAI_MATCH_ACCOUNT_STATUS=35
				AND IAI.IAI_EBA_UPLOAD_FLG='Y'
				AND ISM.ISM_ACTIVE_FLAG='Y';				*** Added for Ver 1.2 ****
    END;
    END-EXEC;
		********** Ver 1.6 *****/

		/*** Added for Ver 1.6 ****/
		EXEC SQL  EXECUTE
    BEGIN
     OPEN :sys_cursor FOR
     SELECT IAI.IAI_MATCH_ACCOUNT_NO MATCH_ACCOUNT,
        ISM.ISM_STATE_DESC STATE_DESC,ICD.ICD_PAN_NO,ICD.ICD_SERIAL_NO
        FROM IAD_INFO_ADDRESS_DTLS IAD,
        ISM_INFO_STATE_MASTER ISM,
        IAI_INFO_ACCOUNT_INFO IAI,
        ICD_INFO_CLIENT_DTLS ICD
        WHERE IAD.IAD_STATE_CD = ISM.ISM_STATE_CD
        AND IAI.IAI_SERIAL_NO=IAD.IAD_SERIAL_NO 
        AND IAD.IAD_ADDRESS_TYPE = 'APPLICANT_CORR'
        AND IAD.IAD_SERIAL_NO=ICD.ICD_SERIAL_NO
        AND IAI.IAI_MATCH_ACCOUNT_STATUS=35
        /*AND IAI.IAI_EBA_UPLOAD_FLG='Y'					/*** Ver 1.7 comment **/
        AND ISM.ISM_ACTIVE_FLAG='Y';
  /*****      AND LENGTH(ICD.ICD_PAN_NO)>0
              AND ICD.ICD_PAN_NO IS NOT NULL;    Ver 1.8 comment  ******/
    END;
    END-EXEC;
		/*** Ver 1.6 ***/

		/********* Ver 1.3 ***/

		/*** Commented for Ver 1.5 ****
		** Added for Ver 1.3 ****

		EXEC SQL  EXECUTE
    BEGIN
      OPEN :sys_cursor FOR
		SELECT IAI.IAI_MATCH_ACCOUNT_NO MATCH_ACCOUNT,
					 ISM.ISM_STATE_DESC       STATE_DESC
			FROM IAD_INFO_ADDRESS_DTLS IAD,
					 ISM_INFO_STATE_MASTER ISM,
					 IAI_INFO_ACCOUNT_INFO IAI,
					 UAC_USR_ACCNTS        UAC,
					 ICD_INFO_CLIENT_DTLS  ICD
		 WHERE IAI.IAI_MATCH_ACCOUNT_NO = UAC.UAC_CLM_MTCH_ACCNT
			 AND IAI.IAI_SERIAL_NO = ICD.ICD_SERIAL_NO
			 ** AND (UAC.UAC_ACT_DEACT_FLG <> 'S' OR ICD.ICD_INWARD_STATUS <> 'I') ** Commented for Ver 1.4 **
			 AND (UAC.UAC_ACT_DEACT_FLG <> 'S' AND ICD.ICD_INWARD_STATUS <> 'I')	** Ver 1.4 **
			 AND IAD.IAD_STATE_CD = ISM.ISM_STATE_CD
			 AND IAI.IAI_SERIAL_NO = IAD.IAD_SERIAL_NO
			 AND IAD.IAD_ADDRESS_TYPE = 'APPLICANT_CORR'
			 AND IAI.IAI_MATCH_ACCOUNT_STATUS = 35
			 AND IAI.IAI_EBA_UPLOAD_FLG = 'Y';
    END;
    END-EXEC;
		** Ver 1.3 **
		**** Ver 1.5 ***/


  }
/*****  Ver 2.0 Starts *****/
  if( i_rqst ==  MRGN_RECON )
  {
    EXEC SQL  EXECUTE
    BEGIN
     OPEN :sys_cursor FOR 
     SELECT FAB_CLM_MTCH_ACCNT Match_Account,
            FAB_ISEC_MRGN_AMT/100 ISEC_Margin_Amount_NSE
     FROM   FAB_FO_ALC_BFT_SMRY
     WHERE  FAB_ISEC_MRGN_AMT is not null
     AND    (FAB_ISEC_MRGN_AMT !=0 )
		 ORDER BY FAB_CLM_MTCH_ACCNT;

    END;
    END-EXEC;
  }
/***** Ver 2.0 Ends *****/

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31055", SQLMSG, c_err_msg  );
    EXEC SQL FREE :sys_cursor;
    return -1;
  }

	for (;;)
	{
		MEMSET(c_mtch_arr);
		MEMSET(c_schm1_arr);
		MEMSET(c_schm2_arr);
		MEMSET(c_schm3_arr);
		MEMSET(c_state_arr);

		if ( i_rqst == MATCH_RECON )
		{
    	EXEC SQL FETCH :sys_cursor
				INTO :c_mtch_arr;
		}

		if ( i_rqst == SCHM_RECON )
		{
      EXEC SQL FETCH :sys_cursor
        INTO 	:c_mtch_arr,
							:c_schm1_arr,
							:c_schm2_arr,
							:c_schm3_arr;
		/**					:c_state_arr;	***/
		}
		
		if ( i_rqst == STATE_RECON )
		{
      EXEC SQL FETCH :sys_cursor
        INTO 	:c_mtch_arr,
							:c_state_arr;
		}
    /*** Ver 2.0 Starts ***/
    if ( i_rqst == MRGN_RECON )
    { 
       EXEC SQL FETCH :sys_cursor
        INTO :c_mtch_arr,
             :d_amount_arr;
    } 
    /*** Ver 2.0 Ends ***/
    for(i=0;i<MAX_FETCH;i++)
		{
		SETLEN(c_mtch_arr[i]);
		SETLEN(c_schm1_arr[i]);
		SETLEN(c_schm2_arr[i]);
		SETLEN(c_schm3_arr[i]);
		SETLEN(c_state_arr[i]);

		SETNULL(c_mtch_arr[i]);
		SETNULL(c_schm1_arr[i]);
		SETNULL(c_schm2_arr[i]);
		SETNULL(c_schm3_arr[i]);
		SETNULL(c_state_arr[i]);
		}

      if ( sqlca.sqlerrd[2] == 0 )
      {
				fn_userlog(c_ServiceName, "Inside No data");
        break;
      }
    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
     /** if ( SQLCODE == NO_DATA_FOUND )**/
      if ( sqlca.sqlerrd[2] == 0 )
      {
				fn_userlog(c_ServiceName, "Inside No data");
        break;
      }
      else
      {
        fn_errlog( c_ServiceName, "S31060", SQLMSG, c_err_msg  );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        return -1;
      }
    }

    curr_row = sqlca.sqlerrd[2] - prev_row;
    prev_row = sqlca.sqlerrd[2];

		/**fn_userlog(c_ServiceName,"curr_row :%d:",curr_row);
		fn_userlog(c_ServiceName,"prev_row :%d:",prev_row);**/

    if(curr_row == 0)
    break;

    if(sqlca.sqlcode < 0)
    {
      fn_userlog(c_ServiceName,"Error in Fetching from cursor");
      fn_userlog(c_ServiceName,"%s",sqlca.sqlerrm.sqlerrmc);
      fn_userlog(c_ServiceName,"%d",sqlca.sqlcode);
			return -1;
    }

		for(i=0;i<curr_row;i++)
		{
/**				fn_userlog(c_ServiceName,"%s",c_mtch_arr[i]);**/

			if(i_rqst == MATCH_RECON)
			{
		    fprintf(fpfile,"%s",c_mtch_arr[i].arr);	
			}
      if(i_rqst == SCHM_RECON)
			{
        fprintf(fpfile,"%s|",c_mtch_arr[i].arr);
				fprintf(fpfile,"%s|","EQ");
        fprintf(fpfile,"%s",c_schm1_arr[i].arr);
		    fprintf(fpfile,"\n");	
        fprintf(fpfile,"%s|",c_mtch_arr[i].arr);
				fprintf(fpfile,"%s|","FO");
        fprintf(fpfile,"%s",c_schm2_arr[i].arr);
		    fprintf(fpfile,"\n");	
        fprintf(fpfile,"%s|",c_mtch_arr[i].arr);
				fprintf(fpfile,"%s|","NX");
        fprintf(fpfile,"%s",c_schm3_arr[i].arr);
      /**  fprintf(fpfile1,"%s|",c_mtch_arr[i].arr);
        fprintf(fpfile1,"%s",c_state_arr[i].arr);
		    fprintf(fpfile1,"\n");	**/
			}
      if(i_rqst == STATE_RECON)
			{
        fprintf(fpfile,"%s|",c_mtch_arr[i].arr);
        fprintf(fpfile,"%s",c_state_arr[i].arr);
			}
      /*** Ver 2.0 Starts ***/
      if(i_rqst == MRGN_RECON)
      {
        fprintf(fpfile,"%s,",c_mtch_arr[i].arr);
        fprintf(fpfile,"%lf",d_amount_arr[i]);
      }
      /*** ver 2.0 Ends ***/

		    fprintf(fpfile,"\n");	
		}
    tot_fetch += curr_row;

/**		fn_userlog(c_ServiceName,"tot_fetch :%d:",tot_fetch); **/

    if(curr_row < MAX_FETCH)
    break;

    if(tot_fetch == MAX_FETCH)
    continue;

	}

		fn_userlog(c_ServiceName,"tot_fetch :%d:",tot_fetch); 
	EXEC SQL CLOSE :sys_cursor;
	fclose(fpfile);

/**  if ( i_rqst == SCHM_RECON )
	{
	  fclose(fpfile1);
    sprintf( c_command1, "sort -o %s %s", c_file_path1, c_file_path1 );
    fn_userlog(c_ServiceName, "Before sort :%s:",c_command1);
    system(c_command1);
    fn_userlog(c_ServiceName, "After sort");
	}***/

    sprintf( c_command, "sort -o %s %s", c_file_path, c_file_path );
    fn_userlog(c_ServiceName, "Before sort :%s:",c_command);
    system(c_command);
		fn_userlog(c_ServiceName, "After sort");

		return 0;

}


int fn_bat_init ( int argc, char *argv[] ) 
{
	fn_var = BAT_CLS_RECON;
	return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
	return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
	return 0;
}
