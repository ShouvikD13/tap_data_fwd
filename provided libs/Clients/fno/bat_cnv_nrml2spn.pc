/******************************************************************************************************************/
/*    Program               : BAT_CNV_NRML2SPN                                        														*/
/*                                                                                   															*/
/*    Input                 : Exchange_code                                          															*/
/*                          : Trade_date                                             															*/
/*                          : Match_Acc                                              															*/
/*                          : Underlying                                             															*/
/*                          : Contract_Tag                                           															*/
/*                                                                                   															*/
/*    Output                :                                                        															*/
/*                                         															                                          */
/*    Description           : This batch program transfers input customers from Normal Margining Syetem To SPAN. 	*/
/*                                                                                   															*/
/*    Log                   : 1.0   06-Jul-2011																																		*/
/*													:	1.1		14-May-2012																																		*/
/*													:	1.2		28-May-2012																																		*/
/*                          : 1.3   19-Jun-2012																																		*/
/*                          : 1.4   25-Jun-2012                                                                   */
/*                          : 1.5   04-Jul-2012                                                                   */
/*                          : 1.6   12-Jul-2012                                                                   */
/*                          : 1.7   17-Jul-2012                                                                   */
/*													:	1.8   02-Aug-2012																																		*/
/*													:	1.9   30-Nov-2012																																		*/
/*													:	2.0   07-Sep-2014																																		*/
/*													:	2.1   14-Feb-2019																																		*/
/*                          : 2.2   25-Mar-2019																																		*/
/*                          : 2.3   11-Jun-2020																																		*/
/******************************************************************************************************************/
/*    1.0 - New release                                                              															*/
/*    1.1 - Changes for Reports      Mahesh                                                                       */
/*    1.2 - T & C Changes			Sandeep Patil																																				*/
/*		1.3 - Front end option for mapping of clients to SPAN RMS (Navina) - 19-Jun-2012														*/
/*    1.4 - Revert changes made in Ver 1.2 & TNC bug fix  (Navina)	- 25-Jun-2012                                 */
/*    1.5 - Conversion can posible in Closed market status only   - Mahesh Shinde                     						*/ 
/*    1.6 - Bug fix for ver 1.5 (Coversion should allow in closed market status) - Mahesh Shinde 									*/ 
/*    1.7 - Error message handeling	-  Mahesh Shinde 																															*/ 
/*		1.8	-	TNC Changes Applied Again.	Sandeep Patil																															*/
/*		1.9	-	FNO BSE Changes          .	Sandip Tambe																															*/
/*		2.0	-	View to FML Changes      .	Sachin Birje																															*/
/*		2.1	-	Error msg changes        .	Navina D.   																															*/
/*    2.2 - Anytime cnversion rqst SPAN to Non SPAN & vice versa with existing online cnversion - Suchita Dabir   */
/*    2.3 - TPELIMIT fix - Navina D.                                                                              */
/******************************************************************************************************************/

#include <sqlca.h>
#include <string.h>
#include <stdlib.h>  
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fml_def.h>
#include <fo_fml_def.h>
#include <fml_rout.h>
/** #include <fo_view_def.h> ** Ver 2.0 **/
#include <fn_ddr.h>
#include <fn_log.h>
#include <fn_read_debug_lvl.h>    
#include <ifa_app_hdr.h> /*** ver 2.2 ***/

EXEC SQL INCLUDE "table/lsm_lck_sms_msg_mstr.h"; /*** Ver 2.2 ***/

#define NRML_TO_SPAN 1
#define SPAN_TO_NRML 2
#define OFFLINE_REQ  3   /*** Ver 2.2 ***/

#define MYMSG_AND_NOTFCN  'G' /*** Ver 2.2 ***/

void print_qry(char * str, int i_cnt,char * c_ServiceName);

int fn_upd_spn_flg (	char *c_match_str ,
											int  i_oprn_typ,
											char *c_ServiceName,
											char *c_xchng_cd,						/*** ver 1.9 ***/
                      char *c_cnvrsion_mode,    /*** ver 2.2 ***/ 
											int   i_mode              /*** ver 2.2 ***/
									 );										

int fn_show_my_msg	( char *c_ServiceName,
                      char *c_spn_mtch_accnt,
											int  sql_lsm_sms_id,
											int  i_oprn_typ,
											char *c_xchng_cd,
											int i_mode);			/*** Ver 2.2 ***/

char c_err_msg[256];
char c_msg[256];
char c_spn_mtch_accnt[11];

void BAT_CNV_NRML2SPN( int argc, char* argv[])
{

 	char c_ServiceName[33];
  char c_xchng_cd[4];
  char c_trd_dt[ LEN_DATE ];
  char c_prd_typ;
  char c_match_str [ 400 ];
	char c_mtch_accnt [11];
	char c_match_accnt [11];
  char c_undrlyng [ 7 ];
  char c_indstk;
  char c_cntrct_tag;
  /*** char c_spl_flg='S'; Commented in Ver 2.2 ***/
  char c_rout_str [ 4 ];
  char c_svc_name [ 33 ];
  char c_user_id[9];
  char c_channel[4];
	char c_drcr_flg;
	char c_xchng_stts;
  char c_cnvrsion_mode[8] = "\0"; /*** ver 2.2 ***/
  strcpy ( c_cnvrsion_mode,"OFFLINE" ); /*** ver 2.2 Batch never gets called in Online Mode ***/
  char c_spl_flg = '\0'; /*** ver 2.2 ***/
	int i_mode = 0; /*** Ver 2.2 ***/
	int i_pending_qty = 0 ; /*** Ver 2.2 ***/

	varchar select_stmt[500];

  int i_trnsctn;
  int i_ip_len;
  int i_op_len;
  int i_returncode;
  int i_ch_val;
	int i_rtrn = 0;
	int i = 0;
	int j = 0;
	int i_opn_pstn_exist = 0; /*** Ver 2.2 ***/
	int i_mrgnining_typ = 0;  /*** Ver 2.2 ***/
  int i_counter = 0; /***Ver 2.3 ***/

  long int li_tot_rcrds = 0; /*** initialized in Ver 2.3 ***/
  long l_sssn_id;
	long l_strlen;

	strcpy( c_ServiceName, argv[0] );

  INITBATDBGLVL(argv[0]);     

  if( argc < 6 )
  {
    /*** fn_userlog(c_ServiceName,"Usage: < Batch Name > <INI> <Exchange Code> <NA> < Run Mode > < Match Account / NONE > ", argv[0] ); *** Commented In ver 2.2 ***/
    fn_userlog(c_ServiceName,"Usage: < Batch Name > <INI> <Exchange Code> <NA> < Run Mode > < Match Account / NONE > < HouseKeep/Cron >"); /*** ver 2.2 One more parameter added in order to ensure if the batch program is called from housekeep or Cron ***/
    return;
  }

  sprintf ( c_msg, "Batch Process %s Started", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  strcpy( c_xchng_cd, argv[2] );
	strcpy(c_user_id,"system");
  strcpy(c_channel,"SYS");
	c_spl_flg = argv[6][0]; /*** ver 2.2 ***/
  l_sssn_id = 0;
	i_mode = atoi (argv[4]); /*** Ver 2.2 ***/
	/*** Ver 1.5 Conversion can posible in Closed market status only ***/
	
	EXEC SQL
    SELECT  EXG_CRRNT_STTS
    INTO    :c_xchng_stts
    FROM    EXG_XCHNG_MSTR
    WHERE   EXG_XCHNG_CD  = :c_xchng_cd;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName,"S31005", SQLMSG, c_err_msg);
    return;
  }

  /*** ver 2.2 starts ***/
  if( c_spl_flg == 'K' )
  {
     fn_userlog(c_ServiceName,"The Batch Is Called From HouseKeep");
  }
  else if( c_spl_flg == 'A')
  {
     fn_userlog( c_ServiceName,"The Batch Is Called In Cron to process offline customer conversion requests");
  }
  else
  {
     fn_userlog(c_ServiceName,"The Batch Is Called From BackOffice");
  }
  /*** ver 2.2 ends ***/
	
	/**	if ( c_xchng_stts == EXCHANGE_CLOSE ) *** Commented in ver 1.6 **/

	if ( c_xchng_stts != EXCHANGE_CLOSE && c_spl_flg != 'K' )			/** Added in ver 1.6 **/ /*** Ver 2.2 c_spl_flg added to skip Closed market check ***/
  {
		/*** Commented in ver 1.7
    fn_userlog(c_ServiceName,"Run Conversion Process With Exchange Status As Closed");
    fn_bat_pst_msg ( c_ServiceName,"Run Conversion Process With Exchange Status As Closed",c_tag );
		******************************/
	  /*** Commented in Ver 2.1 ***
    fn_userlog(c_ServiceName,"This facility is available when market is under 'Closed' status. Please view Buy/Sell order entry page to refer market status and try again later.");							** Ver 1.7 **
    fn_bat_pst_msg ( c_ServiceName,"This facility is available when market is under 'Closed' status. Please view Buy/Sell order entry page to refer market status and try again later.",c_tag );** Ver 1.7 **
		***/

		/*** Added in Ver 2.1 ***/
    fn_userlog(c_ServiceName,"This facility is available after the completion of end of day process.");	
    fn_bat_pst_msg ( c_ServiceName,"This facility is available after the completion of end of day process.",c_tag );
		/*** Ver 2.1 ends ***/

    return;
  }

	/*** Ver 1.5 Ends ***/

/******************************* Commented in ver 1.5 
	EXEC SQL
		SELECT	EXG_CRRNT_STTS
		INTO		:c_xchng_stts
    FROM    EXG_XCHNG_MSTR
    WHERE   EXG_XCHNG_CD  = :c_xchng_cd;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName,"S31010", SQLMSG, c_err_msg);
    return;
  }

****commented Temporarily by Shailesh	*********
**** Ver 1.1 Uncomment by Mahesh **************
	if ( c_xchng_stts == EXCHANGE_OPEN )
  {
    fn_userlog(c_ServiceName,"Can't Run Conversion Process With Exchange Status As Open");
    fn_bat_pst_msg ( c_ServiceName,"Can't Run Conversion Process With Exchange Status As Open",c_tag );
    return;
  }
************************************************/

	EXEC SQL
		SELECT	PAR_FO_DRCR_FLG
		INTO		:c_drcr_flg
		FROM		PAR_SYSTM_PRMTR;

	if ( SQLCODE != 0 )
	{
		fn_userlog(c_ServiceName,"NRML2SPAN -	Error While Selecting DRCR Flag.");
		fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg );
    return;
	}

	fn_userlog(c_ServiceName,"NRML2SPAN - Exchange Code Is :%s:",c_xchng_cd);
	fn_userlog(c_ServiceName,"NRML2SPAN - User ID Is :%s:",c_user_id);
	fn_userlog(c_ServiceName,"NRML2SPAN - Channel Is :%s:",c_channel);
	fn_userlog(c_ServiceName,"NRML2SPAN - Debit / Credit Flag Is :%c:",c_drcr_flg);



	if ( atoi (argv[4]) == NRML_TO_SPAN )
	{

		strcpy(c_match_str,(char *)argv[5]);

		fn_userlog(c_ServiceName,"NRML2SPAN - Inside Case NRML_TO_SPAN.");

		if (strcmp(c_match_str,"'ALL'") == 0 )
  	{
    	fn_userlog(c_ServiceName,"Converion Process Match String Passed As ALL.");
    	sprintf ( c_msg, "Incorrect Match Account Is Passed As I/P :%s:.",c_match_str );
    	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    	return ;
  	}


		if ( strcmp	(c_match_str,"NONE") == 0 )
		{
			fn_userlog(c_ServiceName,"NRML2SPAN - Inside Case NONE.");

			sprintf ( c_msg, "NORMAL To SPAN Conversion For ALL Match Account Option Is Currently Disabled.", argv[0] );
			fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			return ;
			
			/***************	Following Code is commented as ALL option for conversion is disabled

			strcpy((char *)select_stmt.arr,"SELECT FFP_CLM_MTCH_ACCNT FROM FFP_FO_FUTURES_PSTN WHERE FFP_OPNPSTN_QTY !=  0" );
			strcat((char *)select_stmt.arr," UNION ");
			strcat((char *)select_stmt.arr,"SELECT FOP_CLM_MTCH_ACCNT FROM FOP_FO_OPTIONS_PSTN WHERE (FOP_UEXCTD_MRGN != 0 OR FOP_OPNPSTN_QTY > 0)");

			***************************/
		}
		else
		{

			fn_userlog(c_ServiceName,"NRML_TO_SPAN I/P c_match_str Is :%s:",c_match_str);

			i_rtrn = fn_upd_spn_flg	(	c_match_str,
																NRML_TO_SPAN,
																c_ServiceName,
																c_xchng_cd,				/** Ver 1.9 **/
                                c_cnvrsion_mode, /*** ver 2.2 ***/
																i_mode					/*** ver 2.2 ***/	
															); 

			if ( i_rtrn == 2 )
			{
				fn_userlog(c_ServiceName,"NRML2SPAN - Match Account :%s: Is Already Mapped Under SPAN.",c_match_accnt);
        sprintf ( c_msg, "Match Account :%s: Is Already Mapped Under SPAN",c_spn_mtch_accnt, argv[0] );
        fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			}

			strcpy((char *)select_stmt.arr,"SELECT FFP_CLM_MTCH_ACCNT FROM FFP_FO_FUTURES_PSTN WHERE FFP_OPNPSTN_QTY != 0");		
			strcat((char *)select_stmt.arr,"AND FFP_CLM_MTCH_ACCNT IN (");
			strcat((char *)select_stmt.arr, c_match_str);
      strcat((char *)select_stmt.arr, ") AND FFP_XCHNG_CD ='");			/*** Ver 1.9 **/
      strcat((char *)select_stmt.arr,c_xchng_cd);										/*** Ver 1.9 **/
			strcat((char *)select_stmt.arr, "'");												/*** Ver 1.9 ***/
			strcat((char *)select_stmt.arr," UNION ");
			strcat((char *)select_stmt.arr,"SELECT FOP_CLM_MTCH_ACCNT FROM FOP_FO_OPTIONS_PSTN WHERE (FOP_UEXCTD_MRGN != 0 OR FOP_OPNPSTN_QTY > 0)");
			strcat((char *)select_stmt.arr," AND FOP_CLM_MTCH_ACCNT IN (");
			strcat((char *)select_stmt.arr,c_match_str);
      strcat((char *)select_stmt.arr, ") AND FOP_XCHNG_CD ='");			/*** Ver 1.9 **/
      strcat((char *)select_stmt.arr,c_xchng_cd);										/*** Ver 1.9 **/
    	strcat((char *)select_stmt.arr, "'");												/*** Ver 1.9  ' added***/

		}

		li_tot_rcrds	=	sqlca.sqlerrd[2];

		fn_userlog(c_ServiceName,"NRML2SPAN - Total No. Of Records :%ld:",li_tot_rcrds);

		select_stmt.len = strlen((char *)select_stmt.arr);

 	 	print_qry((char*)select_stmt.arr,select_stmt.len,c_ServiceName);


		EXEC SQL PREPARE sql_stmt FROM :select_stmt;

  	if(SQLCODE != 0)
  	{
    	fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg );
			fn_userlog(c_ServiceName,"Failed While Preparing Statement.");
			return;
  	}

	
  	EXEC SQL DECLARE nrml_cursor CURSOR FOR sql_stmt;

 	 	EXEC SQL OPEN nrml_cursor ;

  	if(SQLCODE != 0)
  	{
    	fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg );
    	return ;
  	}

		fn_cpy_ddr(c_rout_str);

		for ( ;	;	)
		{

			EXEC SQL
				FETCH	 nrml_cursor
				INTO	:c_mtch_accnt;

			if ( SQLCODE != 0 )
    	{
				if ( SQLCODE == NO_DATA_FOUND )
				{
					fn_userlog(c_ServiceName,"NRML2SPAN	-	NO_DATA_FOUND.");
					break;
				}

      	fn_errlog(c_ServiceName, "S31030",SQLMSG, c_err_msg );
      	fn_userlog(c_ServiceName,"Failed To Fetch Match Accounts.");
      	EXEC SQL CLOSE nrml_cursor;
      	return;
    	}

			fn_userlog(c_ServiceName,"NRML2SPAN - c_mtch_accnt Is :%s:",c_mtch_accnt);
			fn_userlog(c_ServiceName,"NRML2SPAN -	c_rout_str Is :%s:",c_rout_str);

			i_returncode	=	fn_acall_svc_fml	(	c_ServiceName,
																					c_err_msg,
																					"SFO_CNV_NRM2SPN",
																					0,
																					6,
																					FFO_USR_ID,(char *)c_user_id,
																					FFO_SSSN_ID,(char *)&l_sssn_id,
																					FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt,
																					FFO_DR_CR_FLG,(char *)&c_drcr_flg,
																					FFO_ROUT_CRT,(char *)c_rout_str,
																					FFO_XCHNG_CD,(char *)c_xchng_cd
																				);

			if ( i_returncode !=	0	)
			{
				fn_errlog(c_ServiceName, "S31035",SQLMSG, c_err_msg );
  			fn_userlog(c_ServiceName,"Failed To Fetch Match Accounts.");
  			EXEC SQL CLOSE nrml_cursor;
  			return;
			}

		}

		fn_userlog(c_ServiceName,"After Successful Complition of Process.");

		EXEC SQL CLOSE nrml_cursor;  
	}
	else if(atoi (argv[4]) == SPAN_TO_NRML )
	{
		fn_userlog(c_ServiceName,"NRML2SPAN - Inside Case SPAN_TO_NRML.");

    strcpy(c_match_str,(char *)argv[5]);

		if (strcmp(c_match_str,"'ALL'") == 0 )
		{
			fn_userlog(c_ServiceName,"Converion Process Match String Passed As ALL.");
			sprintf ( c_msg, "Incorrect Match Account Is Passed As I/P :%s:.",c_match_str );
    	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    	return ;
		}	 

    if ( strcmp (c_match_str,"NONE") == 0 )
    {
      fn_userlog(c_ServiceName,"SPAN2NRML - Inside Case NONE.");

			sprintf ( c_msg, "SPAN To NORMAL Conversion For ALL Match Account Option Is Currently Disabled.", argv[0] );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return ;

			/***************  Following Code is commented as ALL option for conversion is disabled

			strcpy((char *)select_stmt.arr,"SELECT DISTINCT FUS_CLM_MTCH_ACCNT FROM FUS_FO_UNDRLYNG_SPN_PSTN WHERE (FUS_INITIAL_MRGN != 0 OR FUS_UOPNPSTN_VAL != 0)" );
		
			*************************************************************/
    }
    else
    {
      fn_userlog(c_ServiceName,"SPN2NRML c_match_str Is :%s:",c_match_str);

			 i_rtrn = fn_upd_spn_flg ( c_match_str,
                                SPAN_TO_NRML,
                                c_ServiceName,
																c_xchng_cd,				/*** Ver 1.9 ***/
                                c_cnvrsion_mode, /*** ver 2.2 ***/
																i_mode					/*** ver 2.2 ***/
                              );

      if ( i_rtrn == 2 )
      {
        fn_userlog(c_ServiceName,"NRML2SPAN - Match Account :%s: Is Already Mapped To Normal .",c_match_accnt);
        sprintf ( c_msg, "Match Account Is Already Mapped Under NORMAL", argv[0] );
        fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

      }
			
			strcpy((char *)select_stmt.arr,"SELECT DISTINCT FUS_CLM_MTCH_ACCNT FROM FUS_FO_UNDRLYNG_SPN_PSTN  WHERE (FUS_INITIAL_MRGN != 0 OR FUS_UOPNPSTN_VAL != 0)");
      strcat((char *)select_stmt.arr," AND FUS_CLM_MTCH_ACCNT IN (");
      strcat((char *)select_stmt.arr, c_match_str);
      strcat((char *)select_stmt.arr,")");
			strcat((char *)select_stmt.arr," AND FUS_XCHNG_CD ='");		/*** Ver 1.9 ***/
			strcat((char *)select_stmt.arr,c_xchng_cd);								/*** Ver 1.9 ***/
      strcat((char *)select_stmt.arr,"'");											/*** Ver 1.9 ***/

    }

    li_tot_rcrds  = sqlca.sqlerrd[2];

    fn_userlog(c_ServiceName,"SPAN2NRML - Total No. Of Records :%ld:",li_tot_rcrds);

    select_stmt.len = strlen((char *)select_stmt.arr);

    print_qry((char*)select_stmt.arr,select_stmt.len,c_ServiceName);

    EXEC SQL PREPARE sql_stmt FROM :select_stmt;

		if(SQLCODE != 0)
    {
      fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg );
      fn_userlog(c_ServiceName,"Failed While Preparing Statement.");
      return;
    }


    EXEC SQL DECLARE span_cursor CURSOR FOR sql_stmt;

    EXEC SQL OPEN span_cursor ;

    if(SQLCODE != 0)
    {
      fn_errlog( c_ServiceName, "S31045", SQLMSG, c_err_msg );
      return ;
    }

    fn_cpy_ddr(c_rout_str);

    for ( ; ; )
    {

      EXEC SQL
        FETCH  span_cursor
        INTO  :c_mtch_accnt;

      if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          fn_userlog(c_ServiceName,"SPAN2NRML - NO_DATA_FOUND.");
          break;
        }

        fn_errlog(c_ServiceName, "S31050",SQLMSG, c_err_msg );
        fn_userlog(c_ServiceName,"Failed To Fetch Match Accounts.");
        EXEC SQL CLOSE span_cursor;
        return;
      }

      fn_userlog(c_ServiceName,"SPAN2NRML - c_mtch_accnt Is :%s:",c_mtch_accnt);
      fn_userlog(c_ServiceName,"SPAN2NRML - c_rout_str Is :%s:",c_rout_str);

			i_returncode  = fn_acall_svc_fml  ( c_ServiceName,
                                          c_err_msg,
                                          "SFO_CNV_SPN2NRM",
                                          0,
                                          6,
                                          FFO_USR_ID,(char *)c_user_id,
                                          FFO_SSSN_ID,(char *)&l_sssn_id,
                                          FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt,
                                          FFO_ROUT_CRT,(char *)c_rout_str,
                                          FFO_DR_CR_FLG,(char *)&c_drcr_flg,
                                          FFO_XCHNG_CD,(char *)c_xchng_cd
                                        );

      if ( i_returncode !=  0 )
      {
        fn_errlog(c_ServiceName, "S31055",LIBMSG, c_err_msg );
        fn_userlog(c_ServiceName,"Failed To Call SFO_CNV_SPN2NRML .");
        EXEC SQL CLOSE span_cursor;
        return;
      }

    }

    fn_userlog(c_ServiceName,"After Successful Complition of Process.");
    EXEC SQL CLOSE span_cursor;
	}
	else if ( atoi (argv[4]) == OFFLINE_REQ ) /*** Ver 2.2 loop added ***/
  {
		/*** Ver 2.3 starts ***/
		EXEC SQL
		SELECT count(0)
		INTO   :li_tot_rcrds
		FROM   FSC_SPNNRML_CNV
		WHERE  FSC_CNVRSN_TIME >=  (SELECT to_date(MAX(FBC_TRD_DT) || ' 09:15:00','DD-Mon-YYYY HH24:Mi:SS')
																	FROM	FBC_FO_BRNCH_CAL 
																	WHERE	FBC_XCHNG_CD=:c_xchng_cd 
																	AND		FBC_TRD_DT < (SELECT EXG_NXT_TRD_DT FROM EXG_XCHNG_MSTR WHERE EXG_XCHNG_CD = :c_xchng_cd) 									
																	AND		FBC_GRP_ID=1 
																	AND		FBC_BRANCH='0004' 																
															 )
		AND  FSC_XCHNG_CD = :c_xchng_cd
	  AND  FSC_MODE = 'OFFLINE'
		AND  FSC_CNVRSN_RMRKS in ('Request for NORMAL To SPAN conversion','Request for SPAN To NORMAL conversion')
		AND  FSC_CNVRSN_STTS in ('PENDING','FAIL');

		if( SQLCODE != 0 )
		{
			fn_errlog( c_ServiceName, "S31060", SQLMSG, c_err_msg );
			return;
		}
    
    fn_userlog(c_ServiceName,"CONVERSION - Total No. Of Records :%ld:",li_tot_rcrds); 
	 /*** Ver 2.3 ends ***/

   EXEC SQL
    DECLARE cur_get_offline_req CURSOR FOR
    SELECT FSC_CLM_MTCH_ACCNT,
           decode(FSC_MARGINING_TYP,'Non SPAN (Existing I-Sec) Margining',1,'SPAN Based Margining',2)
    FROM   FSC_SPNNRML_CNV
    WHERE  FSC_CNVRSN_TIME >=  (SELECT to_date(MAX(FBC_TRD_DT) || ' 09:15:00','DD-Mon-YYYY HH24:Mi:SS')
                                  FROM  FBC_FO_BRNCH_CAL
                                  WHERE FBC_XCHNG_CD=:c_xchng_cd
                                  AND   FBC_TRD_DT < (SELECT EXG_NXT_TRD_DT FROM EXG_XCHNG_MSTR WHERE EXG_XCHNG_CD = :c_xchng_cd)
                                  AND   FBC_GRP_ID=1
                                  AND   FBC_BRANCH='0004'
                               )
    AND  FSC_XCHNG_CD = :c_xchng_cd
    AND  FSC_MODE = 'OFFLINE'
    AND  FSC_CNVRSN_RMRKS in ('Request for NORMAL To SPAN conversion','Request for SPAN To NORMAL conversion')
    AND  FSC_CNVRSN_STTS in ('PENDING','FAIL');

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31065", SQLMSG, c_err_msg );
      return;
    }

		EXEC SQL
			OPEN cur_get_offline_req;

		if(SQLCODE !=0 )
		{
			fn_errlog( c_ServiceName, "S31070", SQLMSG, c_err_msg );
			return;
		}
		
	 while(1)
	 {
		 EXEC SQL
			FETCH cur_get_offline_req
			INTO :c_mtch_accnt,
					 :i_mrgnining_typ;

		if ( SQLCODE != 0 )
		{
			if ( SQLCODE == NO_DATA_FOUND )
			{
				fn_userlog(c_ServiceName,"NO_DATA_FOUND.");
				break;
			}

			fn_errlog(c_ServiceName, "S31075",SQLMSG, c_err_msg );
			EXEC SQL CLOSE cur_get_offline_req;
			return;
		}

		i_counter++; /*** Ver 2.3 ***/

		fn_userlog(c_ServiceName,"OFFLINE REQ I/P c_mtch_accnt Is :%s: Counter:%d:",c_mtch_accnt,i_counter); /*** Ver 2.3 ***/
		fn_userlog(c_ServiceName,"OFFLINE REQ I/P i_mrgnining_typ Is :%d:",i_mrgnining_typ);

			fn_cpy_ddr(c_rout_str);

      /*** Ver 2.3 Start ***/
			if (i_mrgnining_typ == NRML_TO_SPAN)
			{
      	i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                    c_err_msg,
                                    "sfr_cnv_nrm2spn",
                                    i_counter,
                                    li_tot_rcrds);
			}
			else if (i_mrgnining_typ == SPAN_TO_NRML)
			{
       i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                    c_err_msg,
                                    "sfr_cnv_spn2nrm",
                                    i_counter,
                                    li_tot_rcrds);	
			}
      if(i_ch_val == -1)
      {
        fn_userlog(c_ServiceName, "[MatchAcnt-%s] fn_pre_prcs_rcrd failed",c_mtch_accnt);
        fn_errlog ( c_ServiceName, "S31080", LIBMSG, c_err_msg ); 
        continue;
      }

      /*** Ver 2.3  Ends ***/

			if (i_mrgnining_typ == NRML_TO_SPAN)
			{
				i_returncode  = fn_acall_svc_fml  ( c_ServiceName,
																						c_err_msg,
																						"SFO_CNV_NRM2SPN",
																						0,
																						7,
																						FFO_USR_ID,(char *)c_user_id,
																						FFO_SSSN_ID,(char *)&l_sssn_id,
																						FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt,
																						FFO_DR_CR_FLG,(char *)&c_drcr_flg,
																						FFO_ROUT_CRT,(char *)c_rout_str,
																						FFO_XCHNG_CD,(char *)c_xchng_cd,
																						FFO_SPL_FLG,(char *)&c_spl_flg );    

			}
			else if (i_mrgnining_typ == SPAN_TO_NRML)
			{
				i_returncode  = fn_acall_svc_fml  ( c_ServiceName,
																						c_err_msg,
																						"SFO_CNV_SPN2NRM",
																						0,
																						7,
																						FFO_USR_ID,(char *)c_user_id,
																						FFO_SSSN_ID,(char *)&l_sssn_id,
																						FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt,
																						FFO_ROUT_CRT,(char *)c_rout_str,
																						FFO_DR_CR_FLG,(char *)&c_drcr_flg,
																						FFO_XCHNG_CD,(char *)c_xchng_cd,
																						FFO_SPL_FLG,(char *)&c_spl_flg
																					);
			}

			if ( i_returncode !=	0	)
			{
				fn_errlog(c_ServiceName, "S31085",SQLMSG, c_err_msg );
				fn_userlog(c_ServiceName,"Failed To Fetch Match Accounts.");
				EXEC SQL CLOSE cur_get_offline_req;
				return;
			}
	}
	fn_userlog(c_ServiceName,"After Successful Complition of Process.");
	EXEC SQL CLOSE cur_get_offline_req;
 } 
	return;
}


int fn_upd_spn_flg ( char *c_match_str ,
                     int  i_oprn_typ,
                     char *c_ServiceName,
										 char *c_xchng_cd,				/*** ver 1.9 ***/
                     char *c_cnvrsion_mode,    /*** ver 2.2 ***/
										 int  i_mode							 /*** ver 2.2 ***/	
                   )
{
	char c_spn_flg;
	char c_cnvrsn_rmrks[256];
	char c_status[10];						/*** Ver 1.1 ***/
	char c_mrgn_typ[200];					/*** Ver 1.3 ***/
	char c_cnvrsn_src[8];					/*** Ver 1.3 ***/
	char c_nrm_flg;								/*** Ver 1.4 change introduced on 02Jul2012 ***/
	char c_bse_spn_flg;						/*** Ver 1.9 ***/

	int	i	=	0;
	int	j	=	0;
	int i_fut_prsnt	=	0;
	int i_opt_prsnt	=	0;
	int i_fus_prsnt	=	0;
  int i_trnsctn	=	0;
	long l_strlen;
  int i_returncode = 0; /*** Ver 2.2 ***/
	int i_lsm_sms_id = 0;			/*** Ver 2.2 ***/

	l_strlen  = strlen(c_match_str);

  MEMSET(c_spn_mtch_accnt);
	MEMSET(c_cnvrsn_rmrks);

	fn_userlog(c_ServiceName,"Inside Function fn_upd_spn_flg.");
	fn_userlog(c_ServiceName,"Inside Function Match String Is :%s:",c_match_str);

  while ( i < l_strlen )
	{
		i_fut_prsnt	=	0;
		i_fus_prsnt	=	0;
		i_opt_prsnt	=	0;

  	if ( c_match_str [i] != '\'' && c_match_str [i] != ',' )
    {
      c_spn_mtch_accnt[j]  = c_match_str[i];
      j ++;

      if ( j == 11 )
      {
        c_spn_mtch_accnt[10] = '\0';
      }
    }

    if ( c_match_str [i] == ',')
    {
			if ( i_oprn_typ == NRML_TO_SPAN )
			{
				fn_userlog(c_ServiceName,"Inside NRML_TO_SPAN Case Match Account Is ;%s:",c_spn_mtch_accnt);

				EXEC SQL
					SELECT	count(*)
					INTO		:i_fut_prsnt
					FROM		FFP_FO_FUTURES_PSTN
					WHERE		FFP_CLM_MTCH_ACCNT 	   =	:c_spn_mtch_accnt
					AND     FFP_XCHNG_CD           = :c_xchng_cd					/*** Ver 1.9 ***/
					AND		(	FFP_OPNPSTN_QTY				!=	0
					OR			FFP_IBUY_QTY					!= 	0	
					OR			FFP_ISELL_QTY					!=	0
					OR			FFP_EXBUY_QTY					!=	0
					OR			FFP_EXSELL_QTY				!=	0	);

				if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
        {
          fn_userlog( c_ServiceName, "Failed To Get Future Records For Match Account :%s:",c_spn_mtch_accnt);
          fn_errlog( c_ServiceName, "S31090",SQLMSG, c_err_msg );
        }

				if ( SQLCODE == NO_DATA_FOUND )
				{
					fn_userlog(c_ServiceName,"Inside Future NO_DATA_FOUND.");
					i_fut_prsnt	=	0;
				}

				EXEC SQL	
					SELECT  count(*)
					INTO		:i_opt_prsnt
					FROM		FOP_FO_OPTIONS_PSTN
					WHERE		FOP_CLM_MTCH_ACCNT	 =	:c_spn_mtch_accnt
					AND     FOP_XCHNG_CD         =  :c_xchng_cd 			/*** Ver 1.9 ***/
					AND			( FOP_UEXCTD_MRGN		!= 	0
				/***	OR				FOP_OPNPSTN_QTY > 0		Commented in ver 1.1	***/
					OR        FOP_OPNPSTN_QTY 	!=  0		/*** Added in ver 1.1 ***/
					OR				FOP_IBUY_QTY			!=	0 				
					OR				FOP_ISELL_QTY			!=	0
					OR				FOP_EXBUY_QTY			!=	0
					OR				FOP_EXSELL_QTY		!=	0	);


				if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
        {
          fn_userlog( c_ServiceName, "Failed To Get Option Records For Match Account :%s:",c_spn_mtch_accnt);
          fn_errlog( c_ServiceName, "S31095",SQLMSG, c_err_msg );
        }

				if ( SQLCODE == NO_DATA_FOUND )
        {
          fn_userlog(c_ServiceName,"Inside option NO_DATA_FOUND.");
          i_opt_prsnt = 0;
        }
					
				if ( i_fut_prsnt == 0 && i_opt_prsnt == 0 )
				{
					EXEC SQL
						SELECT	NVL(CLM_SPAN_ALLWD,'N'),
										NVL(CLM_BSESPAN_ALLWD,'N')				/*** Ver 1.9 ***/
						INTO		:c_spn_flg,
										:c_bse_spn_flg										/*** Ver 1.9 ***/
						FROM		CLM_CLNT_MSTR
						WHERE		CLM_MTCH_ACCNT	=	:c_spn_mtch_accnt;

					if ( SQLCODE != 0 )		
					{
						fn_userlog( c_ServiceName, "Failed To Update SPAN Flag For Match Account :%s:",c_spn_mtch_accnt);
         		fn_errlog( c_ServiceName, "S31100",SQLMSG, c_err_msg );
					}

					/*** Ver 1.4 change introduced on 02Jul2012 starts here ***/
					EXEC SQL
						SELECT	USR_FNO_ACCPT_FLG
						INTO		:c_nrm_flg
						FROM		USR_USER_MASTER
						WHERE   USR_USR_ID  = (		SELECT  UAC_USR_ID
																			FROM    UAC_USR_ACCNTS
																			WHERE   UAC_CLM_MTCH_ACCNT  = :c_spn_mtch_accnt
																	);

					if ( SQLCODE != 0 )		
					{
						fn_userlog( c_ServiceName, "Failed To select USR flag For Match Account :%s:",c_spn_mtch_accnt);
         		fn_errlog( c_ServiceName, "S31105",SQLMSG, c_err_msg );
					}
					/*** Ver 1.4 change introduced on 02Jul2012  Ends here ***/

					 /**** Ver 1.1 ****/
          MEMSET(c_cnvrsn_rmrks);
          MEMSET(c_status);
				  MEMSET(c_mrgn_typ);				/*** Ver 1.3 ***/
          MEMSET(c_cnvrsn_src);			/*** Ver 1.3 ***/

          i_trnsctn= fn_begintran( c_ServiceName, c_err_msg );

          if ( i_trnsctn == -1 )
          {
            fn_errlog ( c_ServiceName, "S31110", LIBMSG, c_err_msg );
            return -1;
          }
					/*** Ver 1.1 End ***/

					/*** Ver 1.4 change introduced on 02Jul2012 starts here ***/
					if ( c_nrm_flg == 'N' || c_nrm_flg	==	'V')			/***	Ver	1.8	V Flag Handling Added	***/
					{
						fn_userlog(c_ServiceName,"NRML2SPAN - Match Account :%s: Cant convert as Normal TNC not accepted.",c_spn_mtch_accnt);
						strcpy  ( c_cnvrsn_rmrks, "Cant convert as Normal TNC not accepted.");
            strcpy  ( c_status, "FAIL"); 
						strcpy	( c_mrgn_typ,"Non SPAN (Existing I-Sec) Margining");
						strcpy	( c_cnvrsn_src, "OFF");
						sprintf ( c_msg, "Match Account :%s: Cant convert as Normal TNC not accepted.",c_spn_mtch_accnt);
						i_lsm_sms_id = 140; /*** Ver 2.2 ***/
            fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

					}
					else
					{
					/*** Ver 1.4 change introduced on 02Jul2012  Ends here ***/

							/*** if ( c_spn_flg == 'Y' )		Ver 1.4 change introduced on 02Jul2012 ***/
						/*	if ( (c_spn_flg == 'Y') || (c_spn_flg == 'Z') )	*** Ver 1.4 change introduced on 02Jul2012 ***/			/**** ver 1.9 comment ***/
							if (((c_spn_flg == 'Y') ||(c_spn_flg == 'Z'))&& strcmp(c_xchng_cd,"NFO")==0 )/** ver 1.9 **/	
							{
								fn_userlog(c_ServiceName,"NRML2SPAN - Match Account :%s: Is Already Mapped Under SPAN.",c_spn_mtch_accnt);
								strcpy  ( c_cnvrsn_rmrks, "NORMAL To SPAN : Match Account Is Already Mapped Under SPAN.");/** Ver 1.1 **/
								strcpy  ( c_status, "FAIL");  /** Ver 1.1 **/
								strcpy	( c_mrgn_typ,"SPAN Based Margining");	/*** Ver 1.3 ***/
								strcpy	( c_cnvrsn_src, "OFF");		/*** Ver 1.3 ***		Ver 1.4  ***/
								sprintf ( c_msg, "Match Account :%s: Is Already Mapped Under SPAN.",c_spn_mtch_accnt);
								i_lsm_sms_id = 135; /*** Ver 2.2 ***/
								fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
							}
						/**	else if ( c_spn_flg	==	'N'	)   **** Ver 1.9 comment ***/
							else if ( c_spn_flg	==	'N'	 && strcmp(c_xchng_cd,"NFO")== 0 )	/*** Ver 1.9 ***/
							{
								/***** Commented in Ver 1.1 
								i_trnsctn= fn_begintran( c_ServiceName, c_err_msg );

								if ( i_trnsctn == -1 )
								{
									fn_errlog ( c_ServiceName, "S31115", LIBMSG, c_err_msg );
									return -1;
								}
								************************************************************/


								/***	Commented In Ver 1.8 For Common TNC Changes

								***		***	Commented In Ver	1.2			Uncomment in Ver 1.4 starts here ***

								EXEC SQL
									UPDATE  CLM_CLNT_MSTR
									SET     CLM_SPAN_ALLWD  = 'Z'
									WHERE   CLM_MTCH_ACCNT  = :c_spn_mtch_accnt;

								if ( SQLCODE != 0 )
								{
									strcpy  ( c_cnvrsn_rmrks," Failed To Update SPAN Flag For Match Account "); ** ver 1.1 **
									strcpy  ( c_status, "FAIL");  ** Ver 1.1 **
									fn_userlog( c_ServiceName, "Failed To Update SPAN Flag For Match Account :%s:",c_spn_mtch_accnt);
									fn_errlog( c_ServiceName, "S31120",SQLMSG, c_err_msg );
								}

								************************/

								/*************************			Ver 1.4 Ends here***/

								
								
								/***	Ver	1.2	***			Commented in Ver 1.4 starts here ***/

								/***	Uncommented In Ver 1.8 For Common TNC Changes	***/

								 EXEC SQL
									UPDATE  CLM_CLNT_MSTR
									SET     CLM_SPAN_ALLWD  = 'Y'
									WHERE   CLM_MTCH_ACCNT  = :c_spn_mtch_accnt;

								if ( SQLCODE != 0 )
								{
									strcpy  ( c_cnvrsn_rmrks," Failed To Update SPAN Flag For Match Account "); 
									strcpy  ( c_status, "FAIL");
									fn_userlog( c_ServiceName, "Failed To Update SPAN Flag For Match Account :%s:",c_spn_mtch_accnt);
									fn_errlog( c_ServiceName, "S31125",SQLMSG, c_err_msg );
								}

							/***	Ver	1.2	Ends	***		Ver 1.4 Ends here ***/
			
								sprintf ( c_msg, "NORMAL To SPAN Conversion For Match Account :%s: .",c_spn_mtch_accnt);
								fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

								strcpy  ( c_status, "SUCCESS");  /** Ver 1.1 **/
								strcpy  (c_cnvrsn_rmrks ,"NORMAL To SPAN Conversion For Match Account Successful.");
								strcpy	( c_mrgn_typ,"SPAN Based Margining");	/*** Ver 1.3 ***/
								strcpy	( c_cnvrsn_src, "OFF");		/*** Ver 1.3 *** Ver 1.4  ***/
								i_lsm_sms_id = 130; /*** Ver 2.2 ***/

								/****** Commented in ver 1.1 					
								MEMSET(c_cnvrsn_rmrks);

								strcpy(c_cnvrsn_rmrks,"NORMAL To SPAN.");
								**********************************************/
							} /*** ver 1.1 **/
							/*** Ver 1.9 starts ***/
						  else if( c_bse_spn_flg =='Y' && strcmp(c_xchng_cd,"BFO")== 0 )
							{
								fn_userlog(c_ServiceName,"NRML2SPAN - Match Account :%s: Is Already Mapped Under SPAN.",c_spn_mtch_accnt);
								strcpy  ( c_cnvrsn_rmrks, "NORMAL To SPAN : Match Account Is Already Mapped Under SPAN.");
								strcpy  ( c_status, "FAIL");
								strcpy	( c_mrgn_typ,"SPAN Based Margining");	
								strcpy	( c_cnvrsn_src, "OFF");		
								sprintf ( c_msg, "Match Account :%s: Is Already Mapped Under SPAN.",c_spn_mtch_accnt);
								i_lsm_sms_id = 135; /*** Ver 2.2 ***/
								fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
							}
						  else if( c_bse_spn_flg =='N' && strcmp(c_xchng_cd,"BFO")== 0 )
							{
								 EXEC SQL
									UPDATE  CLM_CLNT_MSTR
									SET     CLM_BSESPAN_ALLWD  = 'Y'
									WHERE   CLM_MTCH_ACCNT  = :c_spn_mtch_accnt;

								if ( SQLCODE != 0 )
								{
									strcpy  ( c_cnvrsn_rmrks," Failed To Update BSE SPAN Flag For Match Account "); 
									strcpy  ( c_status, "FAIL");
									fn_userlog( c_ServiceName, "Failed To Update BSE SPAN Flag For Match Account :%s:",c_spn_mtch_accnt);
									fn_errlog( c_ServiceName, "S31130",SQLMSG, c_err_msg );
									sprintf ( c_msg, "NORMAL To SPAN Conversion For Match Account :%s: .",c_spn_mtch_accnt);
									fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

									strcpy (c_status, "SUCCESS");  /** Ver 1.1 **/
									strcpy (c_cnvrsn_rmrks,"NORMAL To SPAN Conversion For Match Account Successful.");
									strcpy (c_mrgn_typ,"SPAN Based Margining");
									strcpy (c_cnvrsn_src, "OFF");
									i_lsm_sms_id = 137; /*** Ver 2.2 ***/
								}
							}	/** Ver 1.9 ends ***/
					
					  }		/*** Ver 1.4 change introduced on 02Jul2012 ***/

            rtrim(c_cnvrsn_rmrks);
            rtrim(c_status);        /*** Ver 1.1 ***/

            EXEC SQL
              INSERT INTO FSC_SPNNRML_CNV
              ( FSC_CLM_MTCH_ACCNT,
                FSC_CNVRSN_TIME,
                FSC_CNVRSN_RMRKS,
                FSC_CNVRSN_STTS,         /*** Ver 1.1 ***/
								FSC_MARGINING_TYP,			 /*** Ver 1.3 ***/
								FSC_CNVRSN_SRC,					 /*** Ver 1.3 ***/
								FSC_XCHNG_CD						 /*** Ver 1.9 ***/
              )
            VALUES
              ( :c_spn_mtch_accnt,
                SYSDATE,
                :c_cnvrsn_rmrks,
		            :c_status,              /*** Ver 1.1 ***/
								:c_mrgn_typ,						/*** Ver 1.3 ***/
								:c_cnvrsn_src,					/*** Ver 1.3 ***/
								:c_xchng_cd							 /*** Ver 1.9 ***/
              );

            if ( SQLCODE != 0 )
            {
              fn_userlog( c_ServiceName, "Failed To Insert Into Log Table For Match Account :%s:",c_spn_mtch_accnt);
              fn_errlog( c_ServiceName, "S31135",SQLMSG, c_err_msg );
							return -1; /*** Ver 2.2 ***/
            }

						/*** Ver 2.2 starts ***/
						i_returncode = fn_show_my_msg(c_ServiceName,c_spn_mtch_accnt,i_lsm_sms_id,i_oprn_typ,c_xchng_cd,i_mode);	
						if (i_returncode != 0)
						{
							fn_userlog( c_ServiceName, "Failed To Insert Into Log Table For Match Account :%s:",c_spn_mtch_accnt);
							fn_errlog( c_ServiceName, "S31140",LIBMSG, c_err_msg );
							return -1;
						}
						/*** Ver 2.2 ends ***/

						if ( fn_committran( c_ServiceName, i_trnsctn,c_err_msg ) == -1 )
						{
							fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
							fn_errlog ( c_ServiceName, "S31145", LIBMSG, c_err_msg );
							return -1;
						}
				}
			}	
			else if ( i_oprn_typ	==	SPAN_TO_NRML	)
			{
        fn_userlog(c_ServiceName,"Inside SPAN_TO_NRML Case Match Account Is ;%s:",c_spn_mtch_accnt);

				/************ Commented in Ver 1.1 

				EXEC SQL
					SELECT	count(*)
					INTO	 	:i_fus_prsnt
					FROM   	FUS_FO_UNDRLYNG_SPN_PSTN
					WHERE		FUS_CLM_MTCH_ACCNT	=	:c_spn_mtch_accnt
					AND			( FUS_INITIAL_MRGN	!=	0
					OR				FUS_UOPNPSTN_VAL	!=  0 );		
				**********************************************/
				/**** Added In ver 1.1 *****/
		
			 EXEC SQL
          SELECT  count(*)
          INTO    :i_fus_prsnt
          FROM		FCP_FO_SPN_CNTRCT_PSTN
					WHERE 	FCP_CLM_MTCH_ACCNT	 = :c_spn_mtch_accnt
					AND     FCP_XCHNG_CD = :c_xchng_cd								/*** Ver 1.9 ***/
					AND     ( FCP_IBUY_QTY    <> 0 
								 OR FCP_ISELL_QTY   <> 0 
								 OR FCP_EXBUY_QTY   <> 0 
								 OR FCP_EXSELL_QTY  <> 0 
								 OR FCP_OPNPSTN_QTY <> 0 
								 OR FCP_OPT_PREMIUM <> 0 );

				/************************ Ver 1.1 **************************/
			
				if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
        {
					fn_userlog( c_ServiceName, "Failed To Get Open Position For Match Account :%s:",c_spn_mtch_accnt);
          fn_errlog( c_ServiceName, "S31150",SQLMSG, c_err_msg );
        }

        if ( SQLCODE == NO_DATA_FOUND )
				{
					fn_userlog(c_ServiceName,"Inside SPAN NO_DATA_FOUND.");
        	i_fus_prsnt = 0;
        }

				if ( i_fus_prsnt == 0 )
				{
				 	EXEC SQL
          	SELECT  NVL(CLM_SPAN_ALLWD,'N'),
										NVL(CLM_BSESPAN_ALLWD,'N')			/**** Ver 1.9 ***/
          	INTO    :c_spn_flg,
										:c_bse_spn_flg									/**** Ver 1.9 ***/
          	FROM    CLM_CLNT_MSTR
          	WHERE   CLM_MTCH_ACCNT  = :c_spn_mtch_accnt;

        	if ( SQLCODE != 0 )
        	{
          	fn_userlog( c_ServiceName, "Failed To Update SPAN Flag For Match Account :%s:",c_spn_mtch_accnt);
          	fn_errlog( c_ServiceName, "S31155",SQLMSG, c_err_msg );
        	}

					 /*** Ver 1.1 starts  ****/

           MEMSET(c_cnvrsn_rmrks);
           MEMSET(c_status);
 				   MEMSET(c_mrgn_typ);				/*** Ver 1.3 ***/
           MEMSET(c_cnvrsn_src);			/*** Ver 1.3 ***/

           i_trnsctn= fn_begintran( c_ServiceName, c_err_msg );

           if ( i_trnsctn == -1 )
           {
             fn_errlog ( c_ServiceName, "S31160", LIBMSG, c_err_msg );
             return -1;
           }
           /*** Ver 1.1 Ends  ***/

					/*** Ver 1.4 change introduced on 02Jul2012 starts here ***/
				/*	if (  c_spn_flg == 'Z' )  *** ver 1.9 comment ***/
					if (  c_spn_flg == 'Z' && strcmp(c_xchng_cd,"NFO")== 0 )		/**** Ver 1.9 ***/
					{
						fn_userlog(c_ServiceName,"NRML2SPAN - Match Account :%s: Cant convert as SPAN TNC not accepted.",c_spn_mtch_accnt);
						strcpy  ( c_cnvrsn_rmrks, "Cant convert as SPAN TNC not accepted.");
            strcpy  ( c_status, "FAIL"); 
						strcpy	( c_mrgn_typ,"SPAN Based Margining");
						strcpy	( c_cnvrsn_src, "OFF");
						sprintf ( c_msg, "Match Account :%s: Cant convert as SPAN TNC not accepted.",c_spn_mtch_accnt);
						i_lsm_sms_id = 140; /*** Ver 2.2 ***/
			      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
					}
					else
					{
					/*** Ver 1.4 change introduced on 02Jul2012 Ends here ***/

					/*	if ( c_spn_flg == 'N' )  **** Ver 1.9 comment ***/
						if ( ( c_spn_flg == 'N' 	 && strcmp(c_xchng_cd,"NFO")== 0 ) ||
							   ( c_bse_spn_flg == 'N' && strcmp(c_xchng_cd,"BFO") == 0)
							 )	/*** Ver 1.9 ***/
						{
							fn_userlog(c_ServiceName,"NRML2SPAN - Match Account :%s: Is Already Mapped To Normal.",c_spn_mtch_accnt);
							strcpy  ( c_cnvrsn_rmrks, "SPAN TO NORMAL :Match Account Is Already Mapped Under NORMAL.");/** Ver 1.1 **/
							strcpy  ( c_status, "FAIL");  /** Ver 1.1 **/ 
							strcpy	( c_mrgn_typ,"Non SPAN (Existing I-Sec) Margining");	/*** Ver 1.3 ***/
							strcpy	( c_cnvrsn_src, "OFF");														/*** Ver 1.3 ***		Ver 1.4  ***/
							sprintf ( c_msg, "Match Account :%s: Is Already Mapped To Normal.",c_spn_mtch_accnt);
							i_lsm_sms_id = 136; /*** Ver 2.2 ***/
							fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
						}
					/**	else if ( c_spn_flg ==  'Y' )			*** Ver 1.9 comment ***/
						else if ( c_spn_flg ==  'Y' && strcmp(c_xchng_cd,"NFO")== 0 )		/*** Ver 1.9 ***/
						{
							 /**** Commented in ver 1.1
							i_trnsctn= fn_begintran( c_ServiceName, c_err_msg );

							if ( i_trnsctn == -1 )
							{
								fn_errlog ( c_ServiceName, "S31165", LIBMSG, c_err_msg );
								return -1;
							}
							**********************************************/


							EXEC SQL 
								UPDATE  CLM_CLNT_MSTR
								SET			CLM_SPAN_ALLWD	=	'N'
								WHERE		CLM_MTCH_ACCNT	=	:c_spn_mtch_accnt;

							if ( SQLCODE != 0 )
							{
								strcpy  ( c_cnvrsn_rmrks," Failed To Update Normal Flag For Match Account "); /** ver 1.1 **/
								strcpy  ( c_status, "FAIL");  /** Ver 1.1 **/
								fn_userlog( c_ServiceName, "Failed To Update Normal Flag For Match Account :%s:",c_spn_mtch_accnt);
								fn_errlog( c_ServiceName, "S31170",SQLMSG, c_err_msg );
							}

							
							/***	Commented In Ver	1.8
							***	Commented In Ver	1.2		Uncomment in Ver 1.4 starts here  ***

							EXEC SQL
								UPDATE  USR_USER_MASTER
								SET     USR_FNO_ACCPT_FLG   = 'N'
								WHERE   USR_USR_ID          = ( SELECT  UAC_USR_ID
																								FROM    UAC_USR_ACCNTS
																								WHERE   UAC_CLM_MTCH_ACCNT  = :c_spn_mtch_accnt
																							);

							if ( SQLCODE != 0 )
							{
								strcpy  ( c_cnvrsn_rmrks," Failed To Update Normal Flag For Match Account "); ** ver 1.1 **
								strcpy  ( c_status, "FAIL");  ** Ver 1.1 **
								fn_userlog( c_ServiceName, "Failed To Update FNO Flag For Match Account :%s:",c_spn_mtch_accnt);
								fn_errlog( c_ServiceName, "S31175",SQLMSG, c_err_msg );
							}

							*************************************	Ver 1.4 Ends here  ***

							*************************/
							
							strcpy  ( c_status, "SUCCESS");  /** Ver 1.1 **/
							strcpy  (c_cnvrsn_rmrks ,"SPAN To NORMAL. Conversion For Match Account Successful.");
							strcpy	( c_mrgn_typ,"Non SPAN (Existing I-Sec) Margining");	/*** Ver 1.3 ***/
							strcpy	( c_cnvrsn_src, "OFF");														/*** Ver 1.3 ***	Ver 1.4  ***/
							i_lsm_sms_id = 138; /*** Ver 2.2 ***/
						}
						else if ( c_bse_spn_flg ==  'Y' && strcmp(c_xchng_cd,"BFO")== 0 )	/** Ver 1.9 starts */
						{
							EXEC SQL 
								UPDATE  CLM_CLNT_MSTR
								SET			CLM_BSESPAN_ALLWD	=	'N'
								WHERE		CLM_MTCH_ACCNT	=	:c_spn_mtch_accnt;

							if ( SQLCODE != 0 )
							{
								strcpy  ( c_cnvrsn_rmrks," Failed To Update BSE Normal Flag For Match Account ");
								strcpy  ( c_status, "FAIL");  /** Ver 1.1 **/
								fn_userlog( c_ServiceName, "Failed To Update BSE  Normal Flag For Match Account :%s:",c_spn_mtch_accnt);
								fn_errlog( c_ServiceName, "S31180",SQLMSG, c_err_msg );
							}
							
							strcpy  ( c_status, "SUCCESS"); 
							strcpy  (c_cnvrsn_rmrks ,"BSE SPAN To NORMAL. Conversion For Match Account Successful.");
							strcpy	( c_mrgn_typ,"Non SPAN (Existing I-Sec) Margining");
							strcpy	( c_cnvrsn_src, "OFF");
							i_lsm_sms_id = 139; /*** Ver 2.2 ***/
						}	/** Ver 1.9 Ends ***/
							/****
							MEMSET(c_cnvrsn_rmrks);

							strcpy(c_cnvrsn_rmrks,"SPAN To NORMAL.");
							*************  Commented in ver 1.1 *********/
					}		/*** Ver 1.4 change introduced on 02Jul2012 ***/

	 					rtrim(c_cnvrsn_rmrks);
            rtrim(c_status);        /*** Ver 1.1 ***/

  					EXEC SQL
    					INSERT INTO FSC_SPNNRML_CNV
              ( FSC_CLM_MTCH_ACCNT,
                FSC_CNVRSN_TIME,
                FSC_CNVRSN_RMRKS,
                FSC_CNVRSN_STTS,         /*** Ver 1.1 ***/
								FSC_MARGINING_TYP,			 /*** Ver 1.3 ***/
								FSC_CNVRSN_SRC,					 /*** Ver 1.3 ***/
								FSC_XCHNG_CD						 /*** Ver 1.9 ***/
              )
            VALUES
              ( :c_spn_mtch_accnt,
                SYSDATE,
                :c_cnvrsn_rmrks,
                :c_status,                /*** Ver 1.1 ***/
								:c_mrgn_typ,							/*** Ver 1.3 ***/
								:c_cnvrsn_src,						/*** Ver 1.3 ***/
								:c_xchng_cd								/*** Ver 1.9 ***/
              );

						if ( SQLCODE != 0 )
            {
              fn_userlog( c_ServiceName, "Failed To Insert Into Log Table For Match Account :%s:",c_spn_mtch_accnt);
              fn_errlog( c_ServiceName, "S31185",SQLMSG, c_err_msg );
							return -1; /*** Ver 2.2 ***/
            }

						/*** Ver 2.2 starts ***/
						i_returncode = fn_show_my_msg(c_ServiceName,c_spn_mtch_accnt,i_lsm_sms_id,i_oprn_typ,c_xchng_cd,i_mode);	
						if (i_returncode != 0)
						{
							fn_userlog( c_ServiceName, "Failed To Insert Into Log Table For Match Account :%s:",c_spn_mtch_accnt);
							fn_errlog( c_ServiceName, "S31190",LIBMSG, c_err_msg );
							return -1;
						}
						/*** Ver 2.2 ends ***/

						if ( fn_committran( c_ServiceName, i_trnsctn,c_err_msg ) == -1 )
						{
							fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
							fn_errlog ( c_ServiceName, "S31195", LIBMSG, c_err_msg );
							return -1;
						}
				}
  	
				sprintf ( c_msg, "SPAN To NORMAL Conversion For Match Account :%s: .",c_spn_mtch_accnt);
        fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

    	}

   		MEMSET(c_spn_mtch_accnt);
    	j = 0;
		}

    i++;

		if ( i ==	l_strlen	)
		{
			c_spn_mtch_accnt [ j - 1] =	c_spn_mtch_accnt [ j - 1 ] ;

			if ( i_oprn_typ == NRML_TO_SPAN )
      {
        fn_userlog(c_ServiceName,"Inside NRML_TO_SPAN Case Last Match Account Is ;%s:",c_spn_mtch_accnt);
	
				/*******************	Commented In ver 1.1
				EXEC SQL
          SELECT  count(*)
          INTO    :i_fut_prsnt
          FROM    FFP_FO_FUTURES_PSTN
          WHERE   FFP_CLM_MTCH_ACCNT  = :c_spn_mtch_accnt
          AND     FFP_OPNPSTN_QTY     !=  0;
				*************************************************/
				/**** Added In ver 1.1	****/
			
				EXEC SQL
          SELECT  count(*)
          INTO    :i_fut_prsnt
          FROM    FFP_FO_FUTURES_PSTN
          WHERE   FFP_CLM_MTCH_ACCNT     =  :c_spn_mtch_accnt
					AND			FFP_XCHNG_CD 					 =  :c_xchng_cd					/*** Ver 1.9 ***/
          AND   ( FFP_OPNPSTN_QTY       !=  0
          OR      FFP_IBUY_QTY          !=  0
          OR      FFP_ISELL_QTY         !=  0
          OR      FFP_EXBUY_QTY         !=  0
          OR      FFP_EXSELL_QTY        !=  0 );

				/**** Ver 1.1	***/		

        if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
        {
          fn_userlog( c_ServiceName, "Failed To Update SPAN Flag For Match Account :%s:",c_spn_mtch_accnt);
          fn_errlog( c_ServiceName, "S31200",SQLMSG, c_err_msg );
        }

        if ( SQLCODE == NO_DATA_FOUND )
        {
          fn_userlog(c_ServiceName,"Inside Future NO_DATA_FOUND.");
          i_fut_prsnt = 0;
        }

				/*******************  Commented In ver 1.1
        EXEC SQL
          SELECT  count(*)
          INTO    :i_opt_prsnt
          FROM    FOP_FO_OPTIONS_PSTN
          WHERE   FOP_CLM_MTCH_ACCNT  = :c_spn_mtch_accnt
          AND     ( FOP_UEXCTD_MRGN   != 0
        ***  OR        FOP_OPNPSTN_QTY > 0 	** Commented in ver 1.1 ***
					OR        FOP_OPNPSTN_QTY   !=  0);	 ** Added in ver 1.1    ***			
				*************************************************/
				/**** Added In ver 1.1  ****/

				EXEC SQL
          SELECT  count(*)
          INTO    :i_opt_prsnt
          FROM    FOP_FO_OPTIONS_PSTN
          WHERE   FOP_CLM_MTCH_ACCNT   =  :c_spn_mtch_accnt
					AND			FOP_XCHNG_CD 				= :c_xchng_cd				/*** Ver 1.9 ***/
          AND     ( FOP_UEXCTD_MRGN   !=  0
          OR        FOP_OPNPSTN_QTY   !=  0  
          OR        FOP_IBUY_QTY      !=  0
          OR        FOP_ISELL_QTY     !=  0
          OR        FOP_EXBUY_QTY     !=  0
          OR        FOP_EXSELL_QTY    !=  0 );
				/**** Ver 1.1 ***/

        if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
        {
          fn_userlog( c_ServiceName, "Failed To Update SPAN Flag For Match Account :%s:",c_spn_mtch_accnt);
          fn_errlog( c_ServiceName, "S31205",SQLMSG, c_err_msg );
        }

        if ( SQLCODE == NO_DATA_FOUND )
        {
          fn_userlog(c_ServiceName,"Inside option NO_DATA_FOUND.");
          i_opt_prsnt = 0;
        }

				if ( i_fut_prsnt == 0 && i_opt_prsnt == 0 )
				{
        	EXEC SQL
          	SELECT  NVL(CLM_SPAN_ALLWD,'N'),
										NVL(CLM_BSESPAN_ALLWD,'N')				/*** Ver 1.9 ***/
          	INTO    :c_spn_flg,
										:c_bse_spn_flg										/*** Ver 1.9 ***/
          	FROM    CLM_CLNT_MSTR
          	WHERE   CLM_MTCH_ACCNT  = :c_spn_mtch_accnt;

        	if ( SQLCODE != 0 )
        	{
          	fn_userlog( c_ServiceName, "Failed To Update SPAN Flag For Match Account :%s:",c_spn_mtch_accnt);
          	fn_errlog( c_ServiceName, "S31210",SQLMSG, c_err_msg );
        	}

					/*** Ver 1.4 change introduced on 02Jul2012 starts here ***/
					EXEC SQL
						SELECT	USR_FNO_ACCPT_FLG
						INTO		:c_nrm_flg
						FROM		USR_USER_MASTER
						WHERE   USR_USR_ID  = (		SELECT  UAC_USR_ID
																			FROM    UAC_USR_ACCNTS
																			WHERE   UAC_CLM_MTCH_ACCNT  = :c_spn_mtch_accnt
																	);

					if ( SQLCODE != 0 )		
					{
						fn_userlog( c_ServiceName, "Failed To select USR flag For Match Account :%s:",c_spn_mtch_accnt);
         		fn_errlog( c_ServiceName, "S31215",SQLMSG, c_err_msg );
					}
					/*** Ver 1.4 change introduced on 02Jul2012  Ends here ***/


				  /**** Ver 1.1 ****/
          MEMSET(c_cnvrsn_rmrks);
          MEMSET(c_status);
 				  MEMSET(c_mrgn_typ);				/*** Ver 1.3 ***/
          MEMSET(c_cnvrsn_src);			/*** Ver 1.3 ***/

          i_trnsctn= fn_begintran( c_ServiceName, c_err_msg );

          if ( i_trnsctn == -1 )
          {
            fn_errlog ( c_ServiceName, "S31220", LIBMSG, c_err_msg );
            return -1;
          }
					/*** Ver 1.1 ***/

					/*** Ver 1.4 change introduced on 02Jul2012 starts here ***/
					if ( c_nrm_flg == 'N'	||	c_nrm_flg	==	'V')			/***	Added In Ver	1.8	***/
					{
						fn_userlog(c_ServiceName,"NRML2SPAN - Match Account :%s: Cant convert as Normal TNC not accepted.",c_spn_mtch_accnt);
						strcpy  ( c_cnvrsn_rmrks, "Cant convert as Normal TNC not accepted.");
            strcpy  ( c_status, "FAIL"); 
						strcpy	( c_mrgn_typ,"Non SPAN (Existing I-Sec) Margining");
						strcpy	( c_cnvrsn_src, "OFF");		
						sprintf ( c_msg, "Match Account :%s: Cant convert as Normal TNC not accepted.",c_spn_mtch_accnt);
            i_lsm_sms_id = 140; /*** Ver 2.2 ***/
            fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

					}
					else
					{
					/*** Ver 1.4 change introduced on 02Jul2012  Ends here ***/

						/*** if ( c_spn_flg == 'Y' )	Ver 1.4 change introduced on 02Jul2012 ***/
					/*	if ( (c_spn_flg == 'Y') || (c_spn_flg == 'Z') )	*** Ver 1.4 change introduced on 02Jul2012 ***/		/*** Ver 1.9 comment ****/
						if ((( (c_spn_flg == 'Y') || (c_spn_flg == 'Z')) && strcmp(c_xchng_cd,"NFO") == 0) ||
								( c_bse_spn_flg == 'Y'  && strcmp(c_xchng_cd,"BFO") == 0 )	
							 )	/*** Ver 1.9 ***/
						{
							fn_userlog(c_ServiceName,"NRML2SPAN - Match Account :%s: Is Already Mapped Under SPAN.",c_spn_mtch_accnt);
							strcpy  ( c_cnvrsn_rmrks, "NORMAL To SPAN : Match Account Is Already Mapped Under SPAN.");/** Ver 1.1 **/
							strcpy  ( c_status, "FAIL");  /** Ver 1.1 **/
							strcpy	( c_mrgn_typ,"SPAN Based Margining");	/*** Ver 1.3 ***/
							strcpy	( c_cnvrsn_src, "OFF");						/*** Ver 1.3 ***		Ver 1.4  ***/
							sprintf ( c_msg, "Match Account :%s: Is Already Mapped Under SPAN.",c_spn_mtch_accnt);
              i_lsm_sms_id = 135; /*** Ver 2.2 ***/
							fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
							/*** return 2;	**Ver 1.1**/
						}
					/**	else if ( c_spn_flg ==  'N' ) *** Ver 1.9 comment ***/
						else if ( c_spn_flg ==  'N' && strcmp(c_xchng_cd,"NFO") == 0  )		/** Ver 1.9 **/
						{
							/**** Commented in ver 1.1		
							i_trnsctn= fn_begintran( c_ServiceName, c_err_msg );

							if ( i_trnsctn == -1 )
							{
								fn_errlog ( c_ServiceName, "S31225", LIBMSG, c_err_msg );
								return -1;
							}
							**********************************************/

							/***	Commented In Ver	1.8 For Common TNC Changes

							***	Commented In Ver	1.2		Uncomment in Ver 1.4 starts here ***

							EXEC SQL
								UPDATE  CLM_CLNT_MSTR
								SET     CLM_SPAN_ALLWD  = 'Z'
								WHERE   CLM_MTCH_ACCNT  = :c_spn_mtch_accnt;

							if ( SQLCODE != 0 )
							{
								strcpy  ( c_cnvrsn_rmrks," Failed To Update SPAN Flag For Match Account "); ** ver 1.1 **
								strcpy  ( c_status, "FAIL");  ** Ver 1.1 **
								fn_userlog( c_ServiceName, "Failed To Update SPAN Flag For Match Account :%s:",c_spn_mtch_accnt);
								fn_errlog( c_ServiceName, "S31230",SQLMSG, c_err_msg );
							}

							****************************	Ver 1.4 Ends here ***

							**********************/

							/***	Ver	1.2	Starts	***		Commented in Ver 1.4 starts here ***/

							
							EXEC SQL																															/***	Uncommented In Ver 1.8	***/
								UPDATE  CLM_CLNT_MSTR
								SET     CLM_SPAN_ALLWD  = 'Y'
								WHERE   CLM_MTCH_ACCNT  = :c_spn_mtch_accnt;

							if ( SQLCODE != 0 )
							{
								strcpy  ( c_cnvrsn_rmrks," Failed To Update SPAN Flag For Match Account "); 
								strcpy  ( c_status, "FAIL"); 
								fn_userlog( c_ServiceName, "Failed To Update SPAN Flag For Match Account :%s:",c_spn_mtch_accnt);
								fn_errlog( c_ServiceName, "S31235",SQLMSG, c_err_msg );
							}

							/***	Ver	1.2	Ends	***  Ver 1.4 Endss here ***/

							/******Commented in ver 1.1

							if ( fn_committran( c_ServiceName, i_trnsctn,c_err_msg ) == -1 )
							{
								fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
								fn_errlog ( c_ServiceName, "S31240", LIBMSG, c_err_msg );
								return -1;
							}
							**********************************************/

							sprintf ( c_msg, "Match Account :%s: Is Mapped Under SPAN.",c_spn_mtch_accnt);
							fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
							strcpy  ( c_status, "SUCCESS");  /** Ver 1.1 **/
							strcpy  ( c_cnvrsn_rmrks,"Match Account Is Mapped Under SPAN Successfully.");
							strcpy	( c_mrgn_typ,"SPAN Based Margining");	/*** Ver 1.3 ***/
							strcpy	( c_cnvrsn_src, "OFF");						/*** Ver 1.3 ***	Ver 1.4  ***/
              i_lsm_sms_id = 130; /*** Ver 2.2 ***/
						}
						else if ( c_bse_spn_flg ==  'N' && strcmp(c_xchng_cd,"BFO") == 0  )/** Ver 1.9 Starts**/
						{
							EXEC SQL
								UPDATE  CLM_CLNT_MSTR
								SET     CLM_BSESPAN_ALLWD  = 'Y'
								WHERE   CLM_MTCH_ACCNT  = :c_spn_mtch_accnt;

							if ( SQLCODE != 0 )
							{
								strcpy  ( c_cnvrsn_rmrks," Failed To Update BSE SPAN Flag For Match Account "); 
								strcpy  ( c_status, "FAIL"); 
								fn_userlog( c_ServiceName, "Failed To Update BSE SPAN Flag For Match Account :%s:",c_spn_mtch_accnt);
								fn_errlog( c_ServiceName, "S31245",SQLMSG, c_err_msg );
							}
							sprintf ( c_msg, "Match Account :%s: Is Mapped Under BSE SPAN.",c_spn_mtch_accnt);
							fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
							strcpy  ( c_status, "SUCCESS");
							strcpy  ( c_cnvrsn_rmrks,"Match Account Is Mapped Under BSE  SPAN Successfully.");
							strcpy	( c_mrgn_typ,"SPAN Based Margining");	
							strcpy	( c_cnvrsn_src, "OFF");
              i_lsm_sms_id = 137; /*** Ver 2.2 ***/
						}			/**** ver 1.9 Ends ***/	
						/**** Added In Version 1.1 *****/
					}		/*** Ver 1.4 change introduced on 02Jul2012 ***/

					rtrim(c_cnvrsn_rmrks);
          rtrim(c_status);     

            EXEC SQL
              INSERT INTO FSC_SPNNRML_CNV
              ( FSC_CLM_MTCH_ACCNT,
                FSC_CNVRSN_TIME,
                FSC_CNVRSN_RMRKS,
                FSC_CNVRSN_STTS,
								FSC_MARGINING_TYP,			 /*** Ver 1.3 ***/
								FSC_CNVRSN_SRC,					 /*** Ver 1.3 ***/
								FSC_XCHNG_CD						 /*** Ver 1.9 ***/
              )
            VALUES
              ( :c_spn_mtch_accnt,
                SYSDATE,
                :c_cnvrsn_rmrks,
                :c_status,
								:c_mrgn_typ,						/*** Ver 1.3 ***/
								:c_cnvrsn_src,					/*** Ver 1.3 ***/
								:c_xchng_cd							/*** Ver 1.9 ***/
              );

            if ( SQLCODE != 0 )
            {
              fn_userlog( c_ServiceName, "Failed To Insert Into Log Table For Match Account :%s:",c_spn_mtch_accnt);
              fn_errlog( c_ServiceName, "S31250",SQLMSG, c_err_msg );
							return -1; /*** Ver 2.2 ***/
            }

						/*** Ver 2.2 starts ***/
						i_returncode = fn_show_my_msg(c_ServiceName,c_spn_mtch_accnt,i_lsm_sms_id,i_oprn_typ,c_xchng_cd,i_mode);	
						if (i_returncode != 0)
						{
							fn_userlog( c_ServiceName, "Failed To Insert Into Log Table For Match Account :%s:",c_spn_mtch_accnt);
							fn_errlog( c_ServiceName, "S31255",LIBMSG, c_err_msg );
							return -1;
						}
						/*** Ver 2.2 ends ***/

            if ( fn_committran( c_ServiceName, i_trnsctn,c_err_msg ) == -1 )
            {
              fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
              fn_errlog ( c_ServiceName, "S31260", LIBMSG, c_err_msg );
              return -1;
            }	
      	}
			}
			else if ( i_oprn_typ  ==  SPAN_TO_NRML  )
      {
        fn_userlog(c_ServiceName,"Inside SPAN_TO_NRML Case Last Match Account Is ;%s:",c_spn_mtch_accnt);
				
				/********** Commented in ver 1.1		
				EXEC SQL
          SELECT  count(*)
          INTO    :i_fus_prsnt
          FROM    FUS_FO_UNDRLYNG_SPN_PSTN
          WHERE   FUS_CLM_MTCH_ACCNT  = :c_spn_mtch_accnt
          AND     ( FUS_INITIAL_MRGN  !=  0
          OR        FUS_UOPNPSTN_VAL  !=  0 );
				********************************************/
				/**** Added In ver 1.1 *****/

       EXEC SQL
          SELECT  count(*)
          INTO    :i_fus_prsnt
          FROM    FCP_FO_SPN_CNTRCT_PSTN
          WHERE   FCP_CLM_MTCH_ACCNT   = :c_spn_mtch_accnt
					AND				FCP_XCHNG_CD         = :c_xchng_cd				/*** Ver 1.9 ***/
          AND     ( FCP_IBUY_QTY    <> 0
                 OR FCP_ISELL_QTY   <> 0
                 OR FCP_EXBUY_QTY   <> 0
                 OR FCP_EXSELL_QTY  <> 0
                 OR FCP_OPNPSTN_QTY <> 0
                 OR FCP_OPT_PREMIUM <> 0 );

        /************************ Ver 1.1 **************************/
        
				if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
        {
          fn_userlog( c_ServiceName, "Failed To Get Open Position For Match Account :%s:",c_spn_mtch_accnt);
          fn_errlog( c_ServiceName, "S31265",SQLMSG, c_err_msg );
        }

        if ( SQLCODE == NO_DATA_FOUND )
        {
          fn_userlog(c_ServiceName,"Inside SPAN NO_DATA_FOUND.");
          i_fus_prsnt = 0;
        }

				if ( i_fus_prsnt	==	0	)	
				{
        	EXEC SQL
          	SELECT  NVL(CLM_SPAN_ALLWD,'N'),
										NVL(CLM_BSESPAN_ALLWD,'N')			/*** Ver 1.9 ***/
          	INTO    :c_spn_flg,
										:c_bse_spn_flg									/*** Ver 1.9 ***/
          	FROM    CLM_CLNT_MSTR
          	WHERE   CLM_MTCH_ACCNT  = :c_spn_mtch_accnt;

        	if ( SQLCODE != 0 )
        	{
          	fn_userlog( c_ServiceName, "Failed To Update SPAN Flag For Match Account :%s:",c_spn_mtch_accnt);
          	fn_errlog( c_ServiceName, "S31270",SQLMSG, c_err_msg );
        	}
					
					/*** Ver 1.1 starts  ****/

           MEMSET(c_cnvrsn_rmrks);
           MEMSET(c_status);
				   MEMSET(c_mrgn_typ);				/*** Ver 1.3 ***/
           MEMSET(c_cnvrsn_src);			/*** Ver 1.3 ***/

           i_trnsctn= fn_begintran( c_ServiceName, c_err_msg );

           if ( i_trnsctn == -1 )
           {
             fn_errlog ( c_ServiceName, "S31275", LIBMSG, c_err_msg );
             return -1;
           }
           /*** Ver 1.1 Ends  ***/

					/*** Ver 1.4 change introduced on 02Jul2012 starts here ***/
				/**	if (  c_spn_flg == 'Z' )		*** ver 1.9 comment **/
					if (  c_spn_flg == 'Z' && strcmp(c_xchng_cd,"NFO") == 0 )		/*** ver 1.9 **/
					{
						fn_userlog(c_ServiceName,"NRML2SPAN - Match Account :%s: Cant convert as SPAN TNC not accepted.",c_spn_mtch_accnt);
						strcpy  ( c_cnvrsn_rmrks, "Cant convert as SPAN TNC not accepted.");
            strcpy  ( c_status, "FAIL"); 
						strcpy	( c_mrgn_typ,"SPAN Based Margining");
						strcpy	( c_cnvrsn_src, "OFF");		
						sprintf ( c_msg, "Match Account :%s: Cant convert as SPAN TNC not accepted.",c_spn_mtch_accnt);
            i_lsm_sms_id = 140; /*** Ver 2.2 ***/
			      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
					}
					else
					{
					/*** Ver 1.4 change introduced on 02Jul2012 Ends here ***/

					/**	if ( c_spn_flg == 'N' )			*** Ver 1.9 comment **/
						if ( ( c_spn_flg == 'N' && strcmp(c_xchng_cd,"NFO") == 0 		 )	||
								 ( c_bse_spn_flg == 'N' && strcmp(c_xchng_cd,"BFO") == 0 )
							  )		/*** ver 1.9 **/
						{
							fn_userlog(c_ServiceName,"NRML2SPAN - Match Account :%s: Is Already Mapped To Normal.",c_spn_mtch_accnt);
							strcpy  ( c_cnvrsn_rmrks, "SPAN TO NORMAL :Match Account Is Already Mapped Under NORMAL.");/** Ver 1.1 **/
							strcpy  ( c_status, "FAIL");  /** Ver 1.1 **/
							strcpy	( c_mrgn_typ,"Non SPAN (Existing I-Sec) Margining");	/*** Ver 1.3 ***/
							strcpy	( c_cnvrsn_src, "OFF");														/*** Ver 1.3 ***	Ver 1.4  ***/
							sprintf ( c_msg, "Match Account :%s: Is Already Mapped To NORMAL .",c_spn_mtch_accnt);
              i_lsm_sms_id = 136; /*** Ver 2.2 ***/
							fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
							/** return 2;		Ver 1.1 ****/
						}
					/**	else if ( c_spn_flg ==  'Y' )		*** Ver 1.9 comment ***/
						else if ( c_spn_flg ==  'Y' && strcmp(c_xchng_cd,"NFO") == 0 ) /*** ver 1.9 **/
						{
							 /**** Commented in ver 1.1
							i_trnsctn= fn_begintran( c_ServiceName, c_err_msg );

							if ( i_trnsctn == -1 )
							{
								fn_errlog ( c_ServiceName, "S31280", LIBMSG, c_err_msg );
								return -1;
							}
							**********************************************/


							EXEC SQL
								UPDATE  CLM_CLNT_MSTR
								SET     CLM_SPAN_ALLWD  = 'N'
								WHERE   CLM_MTCH_ACCNT  = :c_spn_mtch_accnt;

							if ( SQLCODE != 0 )
							{
								strcpy  ( c_cnvrsn_rmrks," Failed To Update Normal Flag For Match Account "); /** ver 1.1 **/
								strcpy  ( c_status, "FAIL");  /** Ver 1.1 **/
								fn_userlog( c_ServiceName, "Failed To Update Normal Flag For Match Account :%s:",c_spn_mtch_accnt);
								fn_errlog( c_ServiceName, "S31285",SQLMSG, c_err_msg );
							}

							/***	Commented In Ver 1.8

							***	Commented In Ver	1.2		Uncomment in Ver 1.4 starts here ***

							EXEC SQL
								UPDATE  USR_USER_MASTER
								SET     USR_FNO_ACCPT_FLG   = 'N'
								WHERE   USR_USR_ID          = ( SELECT  UAC_USR_ID
																								FROM    UAC_USR_ACCNTS
																								WHERE   UAC_CLM_MTCH_ACCNT  = :c_spn_mtch_accnt
																							);

							if ( SQLCODE != 0 )
							{
								strcpy  ( c_cnvrsn_rmrks," Failed To Update Normal Flag For Match Account "); ** ver 1.1 **
								strcpy  ( c_status, "FAIL");  ** Ver 1.1 **
								fn_userlog( c_ServiceName, "Failed To Update FNO Flag For Match Account :%s:",c_spn_mtch_accnt);
								fn_errlog( c_ServiceName, "S31290",SQLMSG, c_err_msg );
							}

							*******************************	 Ver 1.4 Ends here ***

							*******************************/

							/********* Commented In ver 1.1 
							if ( fn_committran( c_ServiceName, i_trnsctn,c_err_msg ) == -1 )
							{
								fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
								fn_errlog ( c_ServiceName, "S31295", LIBMSG, c_err_msg );
								return -1;
							}
							***************************************************************/

							strcpy  ( c_status, "SUCCESS");  /** Ver 1.1 **/
							strcpy  (c_cnvrsn_rmrks ,"SPAN To NORMAL. Conversion For Match Account Successful.");
							strcpy	( c_mrgn_typ,"Non SPAN (Existing I-Sec) Margining");	/*** Ver 1.3 ***/
							strcpy	( c_cnvrsn_src, "OFF");														/*** Ver 1.3 ***	Ver 1.4  ***/
							sprintf ( c_msg, "Match Account :%s: Is Mapped To NORMAL.",c_spn_mtch_accnt);
              i_lsm_sms_id = 138; /*** Ver 2.2 ***/
							fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

						}
						else if ( c_bse_spn_flg ==  'Y' && strcmp(c_xchng_cd,"BFO") == 0 ) /* ver 1.9 starts */
						{
							EXEC SQL
								UPDATE  CLM_CLNT_MSTR
								SET     CLM_BSESPAN_ALLWD  = 'N'
								WHERE   CLM_MTCH_ACCNT  = :c_spn_mtch_accnt;

							if ( SQLCODE != 0 )
							{
								strcpy  ( c_cnvrsn_rmrks," Failed To Update Normal Flag For Match Account ");
								strcpy  ( c_status, "FAIL"); 
								fn_userlog( c_ServiceName, "Failed To Update Normal Flag For Match Account :%s:",
																						c_spn_mtch_accnt);
								fn_errlog( c_ServiceName, "S31300",SQLMSG, c_err_msg );
							}
							strcpy ( c_status, "SUCCESS");
							strcpy (c_cnvrsn_rmrks ,"BSE SPAN To NORMAL. Conversion For Match Account Successful.");
							strcpy ( c_mrgn_typ,"Non SPAN (Existing I-Sec) Margining");
							strcpy ( c_cnvrsn_src, "OFF");
							sprintf ( c_msg, "Match Account :%s: Is Mapped To NORMAL.",c_spn_mtch_accnt);
              i_lsm_sms_id = 139; /*** Ver 2.2 ***/
							fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
						}	/* ver 1.9 Ends */
							/*** Added In ver 1.1 ****/
					}	/*** Ver 1.4 change introduced on 02Jul2012 ***/
						rtrim(c_cnvrsn_rmrks);
            rtrim(c_status);     

            EXEC SQL
              INSERT INTO FSC_SPNNRML_CNV
              ( FSC_CLM_MTCH_ACCNT,
                FSC_CNVRSN_TIME,
                FSC_CNVRSN_RMRKS,
                FSC_CNVRSN_STTS,
								FSC_MARGINING_TYP,			 /*** Ver 1.3 ***/
								FSC_CNVRSN_SRC,					 /*** Ver 1.3 ***/
								FSC_XCHNG_CD						 /*** Ver 1.9 ***/
              )
            VALUES
              ( :c_spn_mtch_accnt,
                SYSDATE,
                :c_cnvrsn_rmrks,
                :c_status,
								:c_mrgn_typ,						/*** Ver 1.3 ***/
								:c_cnvrsn_src,					/*** Ver 1.3 ***/
								:c_xchng_cd							/*** ver 1.9 ***/
              );

            if ( SQLCODE != 0 )
            {
              fn_userlog( c_ServiceName, "Failed To Insert Into Log Table For Match Account :%s:",c_spn_mtch_accnt);
              fn_errlog( c_ServiceName, "S31305",SQLMSG, c_err_msg );
							return -1; /*** Ver 2.2 ***/
            }

						/*** Ver 2.2 starts ***/
						i_returncode = fn_show_my_msg(c_ServiceName,c_spn_mtch_accnt,i_lsm_sms_id,i_oprn_typ,c_xchng_cd,i_mode);	
						if (i_returncode != 0)
						{
							fn_userlog( c_ServiceName, "Failed To Insert Into Log Table For Match Account :%s:",c_spn_mtch_accnt);
							fn_errlog( c_ServiceName, "S31310",LIBMSG, c_err_msg );
							return -1;
						}
						/*** Ver 2.2 ends ***/

            if ( fn_committran( c_ServiceName, i_trnsctn,c_err_msg ) == -1 )
            {
              fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
              fn_errlog ( c_ServiceName, "S31315", LIBMSG, c_err_msg );
              return -1;
            }
						/**** Ver 1.1 ****/
      	}
				sprintf ( c_msg, "SPAN To NORMAL Conversion For Match Account :%s: .",c_spn_mtch_accnt);
        fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );		
			}

			MEMSET(c_spn_mtch_accnt);
			j	=	0;

		}

	}

	return 0;

}

/*** Ver 2.2 starts ***/
int fn_show_my_msg	( char *c_ServiceName,
                      char *c_spn_mtch_accnt,
											int  sql_lsm_sms_id,
											int i_oprn_typ,
											char *c_xchng_cd,
											int i_mode)	
{
    int i_trnsctn = 0;
		char c_usr_id[0] = "\0";

		FBFR32  *ptr_fml_Sbuffer;

		strcpy(c_usr_id,"system");

		ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
    if(ptr_fml_Sbuffer == NULL)
    {
      fn_errlog( c_ServiceName, "S31320",LIBMSG, c_err_msg );
			return -1;
    }

    if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog(c_ServiceName," Inside Function fn_show_my_msg ");
      fn_userlog(c_ServiceName," c_ServiceName    |%s|",c_ServiceName);
      fn_userlog(c_ServiceName," c_spn_mtch_accnt |%s|",c_spn_mtch_accnt);
    }

    i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
    if ( i_trnsctn == -1 )
    {
       fn_errlog ( c_ServiceName, "S31325", LIBMSG, c_err_msg );
			 tpfree((char *)ptr_fml_Sbuffer);
       return -1;
    }

		if (sql_lsm_sms_id != 0)
	  {
			EXEC SQL
				SELECT LSM_MSG_TXT 
				INTO   :sql_lsm_msg_txt
				FROM   LSM_LCK_SMS_MSG_MSTR
				WHERE  LSM_SMS_ID = :sql_lsm_sms_id;

			if( SQLCODE != 0 )
			{
				 fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
				 fn_errlog( c_ServiceName, "S31330",SQLMSG, c_err_msg );
				 tpfree((char *)ptr_fml_Sbuffer);
				 return -1;		
			}

			SETNULL(sql_lsm_msg_txt);

			if( Fadd32(ptr_fml_Sbuffer,FML_SYS_MSG,(char *)sql_lsm_msg_txt.arr,0) == -1 )
			{
				 fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
				 fn_errlog( c_ServiceName, "S31335",LIBMSG, c_err_msg );
				 tpfree((char *)ptr_fml_Sbuffer);
				 return -1;		
			}

			if(fn_snd_mymsg_sms_notfcn(c_ServiceName,
																&ptr_fml_Sbuffer,
																c_usr_id,
																DEF_SSSN,
																c_spn_mtch_accnt,
																"CONV",
																MYMSG_AND_NOTFCN,
																c_err_msg) != 0)
			{
				 fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
				 fn_errlog( c_ServiceName, "S31340",LIBMSG, c_err_msg );
				 tpfree((char *)ptr_fml_Sbuffer);
				 return -1;	
			}
		}

    if ( fn_committran( c_ServiceName, i_trnsctn,c_err_msg ) == -1 )
    {
       fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
       fn_errlog ( c_ServiceName, "S31345", LIBMSG, c_err_msg );
			 tpfree((char *)ptr_fml_Sbuffer);
       return -1;
    }
		tpfree((char *)ptr_fml_Sbuffer);
    return 0;
}
/*** Ver 2.2 ends ***/

void print_qry(char * str, int i_cnt,char * c_ServiceName)
{
  int idx;
  char c_tmp_str1[100];

  MEMSET(c_tmp_str1);

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Printing query");
  }

  for (idx = 0;idx < i_cnt; idx += 60)
  {
    strncpy(c_tmp_str1,str + idx,60);

    if( DEBUG_MSG_LVL_0 )
    {
      fn_userlog(c_ServiceName,"%s",c_tmp_str1);
    }
  }

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Finished printing query");
  }
}

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_CNV_NRML2SPN;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}

