/***********************************************************************************/
/*Service       : bat_nrifno_schm.pc																							 */
/*																																								 */
/*Input Param   : Exchange Code																										 */
/*																																								 */
/*Output        :  success/failure																								 */
/*																																								 */
/*Author        : Shamili/Sandip        																					 */
/*																																								 */
/*Date          : 26-12-2012																											 */
/***********************************************************************************/
/* Versions			:																																	 */
/*          1.0 : Initial Release																									 */
/*          1.1 : NSM FLAG CHANGES																								 */
/*          1.2 : Scheme Description Change from NRIFNO to ANRIFNO								 */	
/*          1.3 : Migration of RI to NRI                                           */
/*          1.4 : Optimization Change (01-Feb-2022) 															 */
/***********************************************************************************/

#include <stdio.h>      /* C Header File                */
#include <stdlib.h>     /* C Header File                */
#include <string.h>     /* C Header File  					    */
#include <sqlca.h>      /* Oracle header file           */
#include <atmi.h>       /* TUXEDO Header File           */
#include <userlog.h>    /* TUXEDO Header File           */
#include <fn_log.h>     /* TUXEDO Header File           */
#include <fn_tuxlib.h>  /* TUXEDO Header File           */
#include <fo.h>         /* TUXEDO Header File           */
#include <fn_battmpt.h>   /* TUXEDO Field Definitions  		*/
#include <fn_read_debug_lvl.h>
#include <fn_collateral.h> 

EXEC SQL INCLUDE "table/fsd_fnonri_scheme_dtls.h";
EXEC SQL INCLUDE "table/nsm_nri_scheme_mstr.h";
EXEC SQL INCLUDE "table/uac_usr_accnts.h";


void BAT_NRIFNO_SCHM( int argc, char *argv[])
{

	char c_msg[1000]={'\0'};
	char c_tag[1000]={'\0'};
	char c_ServiceName[33]={'\0'};
	char c_err_msg[256]={'\0'};
	char c_user_id[9]={'\0'};
	char c_fut_mtch_id[11]={'\0'};
	char c_opt_mtch_id[11]={'\0'};
	char c_mtch_id[11]={'\0'};
	char c_frm_dt[12]={'\0'};
	char c_to_dt[12]={'\0'};
	char c_flag='\0';
	char c_option='\0';
	char c_success_flg ='\0';

	int  i_nri_cnt=0;
	int  i_skip_nri_cnt=0;
	int  i_zero_turn_cnt=0;
	int  i_trnsctn;
	int  i_count_fut=0;
	int  i_count_opt=0;
	long  l_rec_count=0;
	double d_fut_turnover=0;
	double d_opt_turnover=0;
	double d_fut_t=0;
	double d_opt_t=0;

	EXEC SQL  BEGIN DECLARE SECTION;
	char    c_mf_perm_comm_cd[2];
	char    c_mf_curr_comm_cd[2];
	char    c_mf_val_ind      = {'\0'};
	char    c_mf_val_dt[2]		= {'\0'};
	char    c_ntstcode[2]     = {'\0'};
	char    c_match_type[2]   = {'\0'};
	char    c_eqschme_cd[2] 	= {'\0'};
	char    c_entered_by[2]   = {'\0'};
	char    c_modified_by[7]  = "EBAWEB";
	char    c_add_edit_flg    = '\0';
	char    c_extended_dt[2]  = {'\0'};
	char    c_currency_flag   = '\0';
	char    c_scheme[21]			= {'\0'};
	char    c_prev_scheme[21] = {'\0'};
	char    c_def_scheme[21]  = {'\0'};
	varchar	c_error_msg[1000] = {'\0'}; 
	char 		sql_fsd_usr_id[9] = {'\0'};
	char 		sql_fsd_mtch_id[11]={'\0'};
	varchar sql_nsm_mtch_scheme_cd[21];
	long 		l_serial_no= 0;
  EXEC SQL  END   DECLARE SECTION;
	
	strcpy(c_ServiceName,argv[0]);

  INITBATDBGLVL(argv[0]);

	sprintf( c_tag,"%s%s",c_ServiceName,"_NFO");
  fn_userlog (c_ServiceName,"======================Started Batch - %s===============",argv[0]);
  sprintf(c_msg,"Batch process %s is started",argv[0]);
  fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);	

	if (argc != 7)
  {
		fn_userlog (c_ServiceName,"Usage: bat_nrifno_schm <ini> <Exchange_cd><NA> <From date> <To date> <Flag A/B>\n"); 
    printf("Usage: bat_nrifno_schm <From date> <To date> <Flag A/B>\n");
    printf("Flag A : Run program to populate the schemes in EBA \n");
    printf("Flag B : Run program to populate the scheme in Match & ICIS\n");
    exit(0);
  }

  strcpy(c_frm_dt,argv[4]);
  strcpy(c_to_dt,argv[5]);
  c_option = argv[6][0];

	if(DEBUG_MSG_LVL_3){
  	fn_userlog( c_ServiceName,"Config File :%s:"   ,argv[1]);
  	fn_userlog( c_ServiceName,"Exchange Code :%s:" ,argv[2]);
  	fn_userlog( c_ServiceName,"Pipe Id :%s:"       ,argv[3]);
  	fn_userlog( c_ServiceName,"From date :%s:"     ,c_frm_dt);
  	fn_userlog( c_ServiceName,"To Date :%s:"       ,c_to_dt);
  	fn_userlog( c_ServiceName,"Flag :%c:"        	 ,c_option);
	}


  if(c_option == 'A')
	{

		if(DEBUG_MSG_LVL_0){
		fn_userlog(c_ServiceName,"bat_nrifno_schm:calculating new scheme from :%s: to :%s:",c_frm_dt,c_to_dt);}
		sprintf(c_msg,"calculating new scheme from :%s: to :%s:",c_frm_dt,c_to_dt);
  	fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);	


		i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
    if ( i_trnsctn == -1 )
    {
       fn_errlog(c_ServiceName, "S31005", DEFMSG, c_err_msg );
       strcpy ( c_msg, "System error. Contact system support" );
       fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
       return ;
    }

		EXEC SQL
			DELETE FROM FSD_FNONRI_SCHEME_DTLS
      WHERE FSD_FROM_DT = :c_frm_dt
      AND   FSD_TO_DT   = :c_to_dt;

		if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
		{
       fn_errlog(c_ServiceName,"S31010",SQLMSG,c_err_msg);
       strcpy ( c_msg, "System error. Contact system support" );
       fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
       fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       return;
		}

		if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    {
       fn_errlog(c_ServiceName,"S31015",DEFMSG,c_err_msg);
       strcpy ( c_msg, "System error. Contact system support" );
       fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
       fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       return;
    }

		i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
		if ( i_trnsctn == -1 )
		{
			 fn_errlog(c_ServiceName, "S31020", DEFMSG, c_err_msg );
			 strcpy ( c_msg, "System error. Contact system support" );
			 fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			 return ;
		}

		/******** writing cursor for fut  *************/

		EXEC SQL
				DECLARE cur_fut CURSOR FOR
			/**** Commented in Ver 1.3 ****
				SELECT  distinct uac_usr_id,
								uac_clm_mtch_accnt,
								NVL((sum((FTD_STRK_PRC+FTD_EXCTD_QTY)*FTD_EXCTD_RT)/100),0) turnover 
			 FROM 		ftd_fo_trd_dtls_hstry,uac_usr_accnts
			 WHERE 		TRUNC(FTD_TRD_DT) >= to_date(:c_frm_dt,'DD-Mon-YYYY')
			 AND 			trunc(FTD_TRD_DT) <= to_date(:c_to_dt,'DD-Mon-YYYY') 
			 AND 			FTD_CLM_MTCH_ACCNT = uac_clm_mtch_accnt
			 AND 			(FTD_CLM_MTCH_ACCNT like '651%' or FTD_CLM_MTCH_ACCNT like '751%')
			 AND 			FTD_PRDCT_TYP in ( 'F','P')
			 GROUP BY uac_usr_id, uac_clm_mtch_accnt; ****/
			 /**** Ver 1.3 Starts *****/
				SELECT  /*+ parallel(20) */distinct uac_usr_id,					/** ver 1.4 **/
								uac_clm_mtch_accnt,
								NVL((sum((FTD_STRK_PRC+FTD_EXCTD_QTY)*FTD_EXCTD_RT)/100),0) turnover 
			 FROM 		ftd_fo_trd_dtls_hstry,uac_usr_accnts,IAI_INFO_ACCOUNT_INFO
			 WHERE 		TRUNC(FTD_TRD_DT) >= to_date(:c_frm_dt,'DD-Mon-YYYY')
			 AND 			trunc(FTD_TRD_DT) <= to_date(:c_to_dt,'DD-Mon-YYYY') 
			 AND 			FTD_CLM_MTCH_ACCNT = uac_clm_mtch_accnt
			 AND     IAI_TYPE in ('NRO_NON_PINS','NRE_NON_PINS')
			 AND     IAI_MATCH_ACCOUNT_NO =FTD_CLM_MTCH_ACCNT
			 AND 			FTD_PRDCT_TYP in ( 'F','P')
			 GROUP BY uac_usr_id, uac_clm_mtch_accnt;

		/********* writing cursor for option **************/

		EXEC SQL
				DECLARE cur_opt CURSOR FOR
				/*** Commented in Ver 1.3 ***
				SELECT  distinct uac_usr_id,
							  uac_clm_mtch_accnt,
							  NVL((sum(FTD_EXCTD_QTY * FTD_EXCTD_RT)/100),0) turnover  **Only Premium considerd * 
				FROM 	  ftd_fo_trd_dtls_hstry,uac_usr_accnts
				WHERE 	TRUNC(FTD_TRD_DT) >= to_date(:c_frm_dt,'DD-Mon-YYYY')
				AND 		trunc(FTD_TRD_DT) <= to_date(:c_to_dt,'DD-Mon-YYYY') 
				AND 		FTD_CLM_MTCH_ACCNT = uac_clm_mtch_accnt
				AND 		(FTD_CLM_MTCH_ACCNT like '651%' or FTD_CLM_MTCH_ACCNT like '751%')
				AND 		FTD_PRDCT_TYP = 'O' 
				GROUP BY uac_usr_id, uac_clm_mtch_accnt ;  ****/  

				/**** Ver 1.3 Starts ****/
				SELECT  /*+ parallel(20) */ distinct uac_usr_id, /** ver 1.4 parallel used **/
							  uac_clm_mtch_accnt,
							  NVL((sum(FTD_EXCTD_QTY * FTD_EXCTD_RT)/100),0) turnover
				FROM 	  ftd_fo_trd_dtls_hstry,uac_usr_accnts,IAI_INFO_ACCOUNT_INFO
				WHERE 	TRUNC(FTD_TRD_DT) >= to_date(:c_frm_dt,'DD-Mon-YYYY')
				AND 		trunc(FTD_TRD_DT) <= to_date(:c_to_dt,'DD-Mon-YYYY') 
				AND 		FTD_CLM_MTCH_ACCNT = uac_clm_mtch_accnt
				AND     IAI_TYPE in ('NRO_NON_PINS','NRE_NON_PINS')
				AND     IAI_MATCH_ACCOUNT_NO =FTD_CLM_MTCH_ACCNT
				AND 		FTD_PRDCT_TYP = 'O'
				GROUP BY uac_usr_id, uac_clm_mtch_accnt ;
				/**** Ver 1.3 Ends ****/

			/********* Fetching values from both the cursors *********/
			
			EXEC SQL OPEN cur_fut;	

			if( SQLCODE != 0 )
      {
				fn_errlog ( c_ServiceName,"S31025", SQLMSG, c_err_msg );
				EXEC SQL CLOSE cur_fut;
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_bat_pst_msg ( c_ServiceName, "System error ocured..exiting..",c_tag);
				return;
      }

			EXEC SQL OPEN cur_opt;	
		
			if( SQLCODE != 0 )
      {

        fn_errlog ( c_ServiceName, "S31030", SQLMSG, c_err_msg );
        EXEC SQL CLOSE cur_opt;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_bat_pst_msg ( c_ServiceName, "System error ocured..exiting..",c_tag);
        return;
      }


		 while(1)
		 {

			 if(DEBUG_MSG_LVL_3){
			 fn_userlog(c_ServiceName,"i_count_fut:%d:",i_count_fut);}

			 MEMSET(c_user_id);
			 MEMSET(c_fut_mtch_id);
			 d_fut_turnover = 0;
 
			 EXEC SQL	
						FETCH cur_fut
			 			INTO :c_user_id,
								 :c_fut_mtch_id,
								 :d_fut_turnover;

			 	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
       	{
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          fn_errlog(c_ServiceName,"S31035",SQLMSG,c_err_msg);
          EXEC SQL CLOSE cur_fut;
          fn_bat_pst_msg ( c_ServiceName, "Error in selecting record from fut table ",c_tag);
          return;
        }	
			  if(SQLCODE == NO_DATA_FOUND)
        {
          fn_userlog(c_ServiceName,"Inside NO_DATA_FOUND");
          break;
        }

			  EXEC SQL
			      INSERT INTO FSD_FNONRI_SCHEME_DTLS 
						(
								FSD_USR_ID,
								FSD_MTCH_ID,
								FSD_FUT_TURNOVER,
								FSD_FROM_DT,
								FSD_TO_DT,
								FSD_SCHEME_FLAG,				
								FSD_RUN_DT								
						)
						VALUES
						(
								:c_user_id,
								:c_fut_mtch_id,
								:d_fut_turnover,
								:c_frm_dt,
								:c_to_dt,
							  'N',
								sysdate									
						);

			 if ( SQLCODE != 0 ) 
       {
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          fn_errlog(c_ServiceName,"S31040",SQLMSG,c_err_msg);
          EXEC SQL CLOSE cur_fut;
          fn_bat_pst_msg ( c_ServiceName, "Error in inserting record in fut table ",c_tag);
          return;
       }
			 i_count_fut ++;

		 }	/***** End of while for cur_fut ****/

		 while(1)
		 {

			 if(DEBUG_MSG_LVL_3){
			 fn_userlog(c_ServiceName,"i_count_opt:%d:",i_count_opt);}
			 MEMSET(c_user_id);
			 MEMSET(c_opt_mtch_id);
			 d_opt_turnover=0;

			 EXEC SQL
            FETCH cur_opt
       INTO :c_user_id,
						:c_opt_mtch_id,
            :d_opt_turnover;

       if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
       {
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          fn_errlog(c_ServiceName,"S31045",SQLMSG,c_err_msg);
          fn_bat_pst_msg ( c_ServiceName, "Error in selecting record from fut table ",c_tag);
          EXEC SQL CLOSE cur_opt;
          return;
       }
			 if(SQLCODE == NO_DATA_FOUND)
       {
					fn_userlog(c_ServiceName,"Inside NO_DATA_FOUND");
          break;
       }

			 if(DEBUG_MSG_LVL_3){
			 fn_userlog(c_ServiceName,"Option Turnover for match %s: is :%f:",c_user_id,d_opt_turnover);}

			 EXEC SQL
						UPDATE FSD_FNONRI_SCHEME_DTLS 
						SET 	 FSD_OPT_TURNOVER = :d_opt_turnover 
						WHERE  FSD_USR_ID = :c_user_id
						AND		 FSD_MTCH_ID = :c_opt_mtch_id 
						AND		 FSD_FROM_DT = :c_frm_dt
						AND		 FSD_TO_DT = :c_to_dt;

			 if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
       {
          EXEC SQL CLOSE cur_opt;
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          fn_errlog(c_ServiceName,"S31050",SQLMSG,c_err_msg);
          fn_bat_pst_msg ( c_ServiceName, "Error CONTACT SYSTEM SUPPORT",c_tag);
          return;
       }

			 if(SQLCODE == NO_DATA_FOUND)
			 {

					EXEC SQL
					 		INSERT INTO FSD_FNONRI_SCHEME_DTLS 
							(
								FSD_USR_ID,
								FSD_MTCH_ID,
								FSD_OPT_TURNOVER,
								FSD_FROM_DT,
								FSD_TO_DT,
								FSD_SCHEME_FLAG,
								FSD_RUN_DT									
							)
							VALUES
							(
								 :c_user_id,
								 :c_opt_mtch_id,
								 :d_opt_turnover,
								 :c_frm_dt,
								 :c_to_dt,
								 'N',
								 sysdate									
							);

					if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
          {
									EXEC SQL CLOSE cur_opt;
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									fn_errlog(c_ServiceName,"S31055",SQLMSG,c_err_msg);
									fn_bat_pst_msg ( c_ServiceName, "  ",c_tag);
									return;
          }
			 }
				i_count_opt++;

		 }/***** End of while for cur_opt ****/

		 /************* Selecting scheme from nsm *************/

			EXEC SQL
				SELECT COUNT(*) 
				INTO 		:i_nri_cnt
				FROM 	 FSD_FNONRI_SCHEME_DTLS 
				WHERE  FSD_FROM_DT = :c_frm_dt
				AND	   FSD_TO_DT   = :c_to_dt
				AND	   FSD_SCHEME_FLAG = 'N';
		 if(SQLCODE != 0)
		 {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog(c_ServiceName,"S31060",SQLMSG,c_err_msg);
        fn_bat_pst_msg ( c_ServiceName, "Error in selecting FUTURE record.",c_tag);
        return;
		 }
		 		
			if(DEBUG_MSG_LVL_3){
		  fn_userlog(c_ServiceName,"Eligible NRI customers for the month :%d:",i_nri_cnt); } 
			
			EXEC SQL
				DECLARE cur_mtch_list CURSOR FOR
				SELECT FSD_USR_ID,
							 FSD_MTCH_ID,
							 nvl(FSD_FUT_TURNOVER,0),
							 nvl(FSD_OPT_TURNOVER,0)
				FROM 	 FSD_FNONRI_SCHEME_DTLS 
				WHERE  FSD_FROM_DT = :c_frm_dt
				AND    FSD_TO_DT   = :c_to_dt
        AND    FSD_SCHEME_FLAG = 'N';

			EXEC SQL OPEN cur_mtch_list;

			if ( SQLCODE != 0 )
      {
        EXEC SQL CLOSE cur_mtch_list;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog(c_ServiceName,"S31065",SQLMSG,c_err_msg);
        fn_bat_pst_msg ( c_ServiceName, "Error in selecting record",c_tag);
        return;
      }

			while(1)
			{
			 MEMSET(c_user_id);
			 MEMSET(c_mtch_id);
			 d_fut_t=0;
			 d_opt_t=0;

				EXEC SQL
					FETCH cur_mtch_list
					INTO  :c_user_id,
								:c_mtch_id,
								:d_fut_t,
								:d_opt_t;

				if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
				{
					EXEC SQL CLOSE cur_mtch_list;
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					fn_errlog(c_ServiceName,"S31070",SQLMSG,c_err_msg);
					fn_bat_pst_msg ( c_ServiceName,"Error in selecting record from temp table",c_tag);
					return;
				}
				if (SQLCODE == NO_DATA_FOUND)
				{
					fn_userlog(c_ServiceName,"Inside NO_DATA_FOUND");
					break;
				}
									
				EXEC SQL
					DELETE from FSD_FNONRI_SCHEME_DTLS
					WHERE FSD_MTCH_ID in (  
					SELECT INSD_MATCH_ACCOUNT_NO 
					FROM insd_info_ntst_scheme_dtls
					WHERE INSD_MATCH_ACCOUNT_NO = :c_mtch_id
					AND	 INSD_FNO_SCHEMECODE is not null
					AND   INSD_FNO_SCHEMECODE not in ( select NSM_MTCH_SCHEME_CD from
																									  NSM_NRI_SCHEME_MSTR where
																										NSM_SCHEME_DESC like '%NRIFNO%'		/** Ver 1.2 %added **/
																										AND NSM_PRODUCT_FLAG='F' /** Ver 1.1 **/
																						)
																					 )
					AND  FSD_FROM_DT =:c_frm_dt
					AND  FSD_TO_DT   =:c_to_dt;

				if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
				{
					EXEC SQL CLOSE cur_mtch_list;
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					fn_errlog(c_ServiceName,"S31075",SQLMSG,c_err_msg);
					fn_bat_pst_msg (c_ServiceName,"Error CONTACT SYSTEM SUPPORT",c_tag);
					return;
				}
				if(DEBUG_MSG_LVL_3){
					fn_userlog(c_ServiceName,"c_mtch_id  :%s:",c_mtch_id);
					fn_userlog(c_ServiceName,"Fut Turnover :%lf:",d_fut_t);
					fn_userlog(c_ServiceName,"Opt Turnover :%lf:",d_opt_t);
				}
				MEMSET(c_scheme); 

				EXEC SQL
					SELECT NSM_MTCH_SCHEME_CD  
					INTO 	 :c_scheme
					FROM 	 NSM_NRI_SCHEME_MSTR
					WHERE  :d_fut_t between NSM_FUTMIN_TRNOVR AND NSM_FUTMAX_TRNOVR
					AND    :d_opt_t between NSM_OPTMIN_TRNOVR AND NSM_OPTMAX_TRNOVR
					AND		 NSM_NRI_CATAGORY = 'NON-HNI'
					AND 	 NSM_PRODUCT_FLAG='F';						/** Ver 1.1 **/	

				if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND)
				{
					EXEC SQL CLOSE cur_mtch_list;
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					fn_errlog(c_ServiceName,"S31080",SQLMSG,c_err_msg);
					fn_bat_pst_msg ( c_ServiceName, "Error in selecting from scheme table ",c_tag);
					return;
				}
				else if(SQLCODE == NO_DATA_FOUND)
				{
					fn_userlog(c_ServiceName,"No Matching Scheme found for :%s:",c_mtch_id);
					sprintf(c_msg,"No Matching Scheme found for :%s:",c_mtch_id);
					fn_userlog(c_ServiceName,"c_msg is :%s:",c_msg);
					fn_bat_pst_msg ( c_ServiceName,c_msg,c_tag);
				}

				MEMSET(c_prev_scheme);

				EXEC SQL
					SELECT nvl(INSD_FNO_SCHEMECODE,'*')
					INTO 	 :c_prev_scheme
					FROM 	 insd_info_ntst_scheme_dtls
					WHERE  INSD_MATCH_ACCOUNT_NO = :c_mtch_id; 
								
				if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
				{
					EXEC SQL CLOSE cur_mtch_list;
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					fn_errlog(c_ServiceName,"S31085",SQLMSG,c_err_msg);
					fn_bat_pst_msg ( c_ServiceName, "Error in selecting record from future table ",c_tag);
					return;
				}

				if(DEBUG_MSG_LVL_3){	
					fn_userlog(c_ServiceName,"c_user_id :%s:",c_user_id);
					fn_userlog(c_ServiceName,"c_scheme :%s:",c_scheme);
					fn_userlog(c_ServiceName,"c_prev_scheme :%s:",c_prev_scheme);
					fn_userlog(c_ServiceName,"c_frm_dt :%s:",c_frm_dt);
					fn_userlog(c_ServiceName,"c_to_dt :%s:",c_to_dt);
				}
				if( strcmp(c_prev_scheme,c_scheme) == 0 )
				{
					fn_userlog(c_ServiceName,"Previos and New schemes are same not applying the scheme");
					sprintf(c_msg,"Previous:%s: and New :%s: schemes are same for match:%s:",c_prev_scheme,c_scheme,c_mtch_id);
					fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);

					EXEC SQL
						UPDATE FSD_FNONRI_SCHEME_DTLS
						SET 	 FSD_SCHEME_FLAG ='S'		
						WHERE	 FSD_USR_ID = :c_user_id
						AND    FSD_FROM_DT = :c_frm_dt
						AND    FSD_TO_DT = :c_to_dt
						AND    FSD_SCHEME_FLAG = 'N';		 

					if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND)
					{
						EXEC SQL CLOSE cur_mtch_list;
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						fn_errlog(c_ServiceName,"S31090",SQLMSG,c_err_msg);
						fn_bat_pst_msg ( c_ServiceName, "Error in updating scheme. Contact SYSTEM SUPPORT",c_tag);
						return;
			  	}	
					i_skip_nri_cnt++;
				}
				else
				{
					EXEC SQL
						UPDATE FSD_FNONRI_SCHEME_DTLS
						SET 	 FSD_SCHEME = :c_scheme,
									 FSD_PREV_SCHEME = :c_prev_scheme
						WHERE	 FSD_USR_ID = :c_user_id
						AND    FSD_FROM_DT = :c_frm_dt
						AND    FSD_TO_DT = :c_to_dt
						AND    FSD_SCHEME_FLAG = 'N';		 

			
					if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND)
					{
						EXEC SQL CLOSE cur_mtch_list;
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						fn_errlog(c_ServiceName,"S31095",SQLMSG,c_err_msg);
						fn_bat_pst_msg ( c_ServiceName, "Error in updating scheme. Contact SYSTEM SUPPORT",c_tag);
						return;
			  	}	
					else if(SQLCODE == NO_DATA_FOUND)
					{
						fn_userlog(c_ServiceName,"Match id :%s: is not in NRI scheme",c_mtch_id);
						sprintf(c_msg,"Match id :%s: is not in NRI scheme",c_mtch_id);
						fn_bat_pst_msg ( c_ServiceName,c_msg,c_tag);
						i_skip_nri_cnt++;
					}
				}
			}

		 MEMSET(c_def_scheme); 
		 if(DEBUG_MSG_LVL_3){
		 fn_userlog(c_ServiceName,"Now Finding Default scheme for Zero Turnover for the month");}

		 EXEC SQL
			    SELECT NSM_MTCH_SCHEME_CD
          INTO   :c_def_scheme
          FROM   NSM_NRI_SCHEME_MSTR
          WHERE  0 between NSM_FUTMIN_TRNOVR and NSM_FUTMAX_TRNOVR 
					AND 	 0 between NSM_OPTMIN_TRNOVR AND    NSM_OPTMAX_TRNOVR
          AND    NSM_MIN_TRNOVR =  0
          AND    NSM_MAX_TRNOVR = 0
          AND    NSM_NRI_CATAGORY = 'NON-HNI'
					AND    NSM_PRODUCT_FLAG='F';            /** Ver 1.1 **/

		 if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
		 {
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_errlog(c_ServiceName,"S31100",SQLMSG,c_err_msg);
				fn_bat_pst_msg ( c_ServiceName, "No Defult Scheme found for Zero turnover ",c_tag);
				return;
		 }

		 if(DEBUG_MSG_LVL_3){
			fn_userlog(c_ServiceName,"Default scheme for Zero Turnover for the month :%s:",c_def_scheme);}

		 EXEC SQL
				INSERT INTO  FSD_FNONRI_SCHEME_DTLS 
							 ( FSD_USR_ID,
								 FSD_MTCH_ID,
								 FSD_FUT_TURNOVER,
								 FSD_OPT_TURNOVER,
								 FSD_FROM_DT,
								 FSD_TO_DT,
								 FSD_SCHEME,
								 FSD_PREV_SCHEME,
								 FSD_SCHEME_FLAG,
								 FSD_RUN_DT
							  )
							  (
								 SELECT /*+ parallel(20) */ UAC_USR_ID,			/** Ver 1.4 Parallel used **/
							 	 				INSD_MATCH_ACCOUNT_NO,
							 	 				0,
							 	 				0,
							 	 				:c_frm_dt,
							 	 				:c_to_dt,
							 	 				rtrim(:c_def_scheme),
							 	 				rtrim(INSD_FNO_SCHEMECODE),
							 					'N',
												sysdate
						/**		FROM 	INSD_INFO_NTST_SCHEME_DTLS,UAC_USR_ACCNTS   Commented in Ver 1.3 **/
									FROM	INSD_INFO_NTST_SCHEME_DTLS,UAC_USR_ACCNTS,IAI_INFO_ACCOUNT_INFO /*** IAI_INFO_ACCOUNT_INFO Added in Ver 1.3 **/
									WHERE INSD_MATCH_ACCOUNT_NO= UAC_CLM_MTCH_ACCNT
					/**			AND   (INSD_MATCH_ACCOUNT_NO like '651%' or INSD_MATCH_ACCOUNT_NO like '751%') Commented in Ver 1.3 **/
							/*** Added in Ver 1.3 Starts **/	
									AND     IAI_TYPE in ('NRO_NON_PINS','NRE_NON_PINS')
									AND	IAI_MATCH_ACCOUNT_NO =INSD_MATCH_ACCOUNT_NO  /*** Ver 1.3 Ends ***/
																		AND 	INSD_MATCH_ACCOUNT_NO not in
																				( SELECT distinct FTD_CLM_MTCH_ACCNT
																					FROM 	 FTD_FO_TRD_DTLS_HSTRY
																					WHERE  trunc(FTD_TRD_DT) between :c_frm_dt and :c_to_dt
																				 )
									AND 	INSD_FNO_SCHEMECODE like '%NRIFNO%'								/** Ver 1.2 %added **/
									AND   INSD_FNO_SCHEMECODE <>rtrim(:c_def_scheme) 
														/**To select only those accnts which are not in Zero turnover scheme**/
							 );

			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					fn_errlog(c_ServiceName,"S31105",SQLMSG,c_err_msg);
					fn_bat_pst_msg ( c_ServiceName, "  ",c_tag);
					return;
      }
			if(SQLCODE == NO_DATA_FOUND )
			{
					fn_userlog(c_ServiceName,"There is no any customer who is under low brokerage scheme and have Zero turnover between :%s: and :%s:",c_frm_dt,c_to_dt);
			}

			i_zero_turn_cnt = i_zero_turn_cnt + sqlca.sqlerrd[2];

			sprintf(c_msg,"Customers with turnover > Zero =:%d:",i_nri_cnt);
      fn_bat_pst_msg ( c_ServiceName,c_msg,c_tag);

			sprintf(c_msg,"Customers with zero turnover =:%d:",i_zero_turn_cnt);
      fn_bat_pst_msg ( c_ServiceName,c_msg,c_tag);

			sprintf(c_msg,"No of customers skipped =:%d:",i_skip_nri_cnt);
      fn_bat_pst_msg ( c_ServiceName,c_msg,c_tag);

			sprintf(c_msg,"Actual no of customers to be processed =:%d:",(i_nri_cnt +i_zero_turn_cnt - i_skip_nri_cnt));
      fn_bat_pst_msg ( c_ServiceName,c_msg,c_tag);

			if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
			{
					EXEC SQL CLOSE cur_mtch_list;
					fn_errlog(c_ServiceName,"S31110",LIBMSG,c_err_msg);
					strcpy ( c_msg, "System error. Contact system support" );
					fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					return;
			}

			EXEC SQL CLOSE cur_mtch_list;
	}
	else if(c_option == 'B')
	{

		 if(DEBUG_MSG_LVL_0) {
		 fn_userlog(c_ServiceName,"bat_nrifno_schm:Called for update of scheme to match and ICIS from :%s: to :%s:",c_frm_dt, c_to_dt);
		 }
		sprintf(c_msg,"Called for update of scheme to match and ICIS from :%s: to :%s:",c_frm_dt, c_to_dt);
  	fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);	

		while(1)
		{
			memset(sql_fsd_scheme.arr,'\0',sizeof(sql_fsd_scheme));
			EXEC SQL
        SELECT  FSD_USR_ID,
								FSD_MTCH_ID,
								trim(FSD_SCHEME)
        INTO    :sql_fsd_usr_id,
                :sql_fsd_mtch_id,
                :sql_fsd_scheme
        FROM  	fsd_fnonri_scheme_dtls
        WHERE 	fsd_from_dt = :c_frm_dt
        AND   	fsd_to_dt  = :c_to_dt
        AND   	FSD_SCHEME_FLAG = 'N'
        AND   	rownum <2;

      if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
      {
        errlog(c_ServiceName, "S31115", SQLMSG, DEF_USR, DEF_SSSN, c_err_msg);
        strcpy(c_msg,"System Error. Contact System Support");
        fn_bat_pst_msg( c_ServiceName, c_err_msg, c_tag );
        return;
      }
			else if (SQLCODE == NO_DATA_FOUND)
      {
				fn_userlog(c_ServiceName,"Inside NO_DATA or All records processed");
        break;
			}	

			i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

      if ( i_trnsctn == -1 )
      {
        strcpy ( c_msg, "System error. Contact system support" );
        fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
        fn_errlog(c_ServiceName, "S31120", LIBMSG, c_err_msg );
        return ;
      }
			/*******  Call icis stored proc ****/

			MEMSET(c_error_msg);
      c_success_flg = '\0';
      MEMSET(c_mf_perm_comm_cd);
      MEMSET(c_mf_curr_comm_cd);
      MEMSET(c_mf_val_dt);
				
			if(DEBUG_MSG_LVL_3){
				fn_userlog(c_ServiceName,"New Scheme code to be applied:%s:",sql_fsd_scheme.arr);
				fn_userlog(c_ServiceName,"page name :%s:",c_ServiceName);
				fn_userlog(c_ServiceName,"User id:%s:",sql_fsd_usr_id);
				fn_userlog(c_ServiceName,"Match Account :%s:",sql_fsd_mtch_id);
				fn_userlog(c_ServiceName,"Modified by is system :%s:",c_modified_by);
			}

      EXEC SQL
       EXECUTE
           BEGIN
						  SP_INSD_INFO_NTST_SCHEME_EBA	
              (
                :c_ntstcode,                          /*  null                         **/
                :c_match_type,                        /*  null                         **/
								:c_eqschme_cd,											  /*  null												 **/
                :sql_fsd_scheme,              				/*  New Scheme code to be applied */
                :c_ServiceName,                       /*  page name                     */
                :l_serial_no,                         /*  null                          */
                :sql_fsd_mtch_id,                     /*  Match Account                **/
                :c_entered_by,                        /*  null                         **/
                :c_modified_by ,                      /*  Modified by is system        **/
                :c_add_edit_flg,                      /*  null                          */
                :c_extended_dt,                       /*  null                          */
                :c_mf_perm_comm_cd,                   /*  null                          */
                :c_mf_curr_comm_cd,                   /*  null                          */
                :c_mf_val_ind,                        /*  null                          */
                :c_mf_val_dt,                         /*  null                          */
                :c_success_flg,
                :c_error_msg,
								:c_currency_flag											/*	null													*/
              );
            END;
          END-EXEC;


		if(SQLCODE !=0 && SQLCODE != NULL_RETURN)
    {
			errlog(c_ServiceName, "S31125", SQLMSG, DEF_USR, DEF_SSSN, c_err_msg);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); 
			strcpy(c_msg,"System Error. Contact System Support");
			fn_bat_pst_msg( c_ServiceName, c_err_msg, c_tag );
      return;
    }
		if(DEBUG_MSG_LVL_0){
      fn_userlog(c_ServiceName,"c_success_flg :%c: for match :%s:",c_success_flg,sql_fsd_mtch_id);}


    if(c_success_flg != 'Y')
		{
			 fn_userlog(c_ServiceName,"ICIS stored procedure failed for match:%s:",sql_fsd_mtch_id);
			 fn_userlog(c_ServiceName,"Error from SP is :%s:",c_error_msg.arr);
			 sprintf(c_msg,":%s: for :%s:",c_error_msg.arr,sql_fsd_mtch_id);
       fn_bat_pst_msg( c_ServiceName, c_msg, c_tag );

		}

		EXEC SQL
      UPDATE 	fsd_fnonri_scheme_dtls 
      SET   	fsd_scheme_flag = decode(:c_success_flg,'Y','P','F') 
      WHERE 	fsd_usr_id   = :sql_fsd_usr_id
			AND			FSD_MTCH_ID = :sql_fsd_mtch_id			
      AND   	fsd_from_dt    = :c_frm_dt
      AND   	fsd_to_dt     = :c_to_dt
      AND   	fsd_scheme_flag = 'N';
		
      if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        errlog(c_ServiceName, "S31130", SQLMSG, DEF_USR, DEF_SSSN, c_err_msg);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); 
        strcpy(c_msg,"System error. Contact System support");
        fn_bat_pst_msg( c_ServiceName, c_msg, c_tag );
        return;
      }
			if(SQLCODE == NO_DATA_FOUND )
			{
				fn_userlog(c_ServiceName,"No data found for :%s:",sql_fsd_mtch_id);
			}

		 if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
     {
        fn_errlog(c_ServiceName,"S31135",LIBMSG,c_err_msg);
        strcpy ( c_msg, "System error. Contact system support" );
        fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return;	
     }
		 if(c_success_flg == 'Y')
		 {
			sprintf(c_msg, "BAT_NRIFNO_SCHM : Successfully processed for User [%s] with  scheme [%s] "
                      ,sql_fsd_mtch_id,sql_fsd_scheme.arr);
      fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
      l_rec_count++;
		 }
		}

		sprintf(c_msg, "Total No. of records processed :%ld:",l_rec_count);
  	fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
	}
  strcpy(c_msg, "NRIFNO_SCHM_MAP : Completed. Exiting...");
  fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
  return;	
}


int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_NRIFNO_SCHM;
	fn_userlog ("bat_nrifno_schm","Usage: bat_nrifno_schm <ini> <Exchange_cd><NA> <From date> <To date> <Flag A/B>\n"); 
	fn_userlog("bat_nrifno_schm","Inside fn_bat_init");   
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}

int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
  return 0;
}
