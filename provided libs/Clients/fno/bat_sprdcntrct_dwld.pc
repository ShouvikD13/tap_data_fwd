/******************************************************************************/
/*  Program           : BAT_SPRDCNTRCT_DWLD                                   */
/*                                                                            */
/*  Input             : spd_contract.txt file                                 */
/*                                                                            */
/*  Output            : Success / Failure                                     */
/*                                                                            */
/*  Version           : 1.0        Release(Suchita Dabir)                     */
/******************************************************************************/


#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fml_def.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <string.h>
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>
#include <stdio.h> 
#include <string.h> 
#include <time.h> 
#include <stdlib.h>
#include <fn_scklib_iml.h>
#include <unistd.h>

void fn_chk_batch_status(char *c_ServiceName, char *c_err_msg );

void BAT_SPRDCNTRCT_DWLD ( int argc, char *argv[] )
{
    char c_ServiceName [ 33 ];
    char c_err_msg [ 256 ]; 

    char c_seg_indicator[ 6+1 ]; 
    char c_version_number[ 5+1 ];

    time_t timer;
    struct tm* tm_info;
    char *path_ebalog;
		long l_rec_no = 0;
    int i_exception_record = 0;
  
	  char day[ 3 ];
    char month[ 3 ];
    char year[ 15 ];	

    char c_Segment_Indicator [ 6 ];
		char c_Version_Number [ 5 ];

    long l_Token1  = 0;
		long l_Token2  = 0;

    char c_InstrumentName1 [ 6+1 ]; 
		char c_Symbol1 [ 20+1 ];
    char c_underlyng [20] = "\0";
		char c_Series1 [ 2+1 ];   
		long l_ExpiryDate1 = 0; 
  
    long l_StrikePrice1 = 0;
    double d_StrikePrice1 = 0;

	  char c_OptionType1 [ 2+1 ]; 
    char c_fum_flag1 = '\0';
    char c_ftq_flag1 = '\0';
    char c_ftq_flag2 = '\0';
 
    long l_CALevel1 = 0;

	  char c_InstrumentName2 [ 6+1 ];
	  char c_Symbol2 [ 20+1 ];
	  char c_Series2  [ 2+1 ];

    long l_ExpiryDate2 = 0;
  	long l_StrikePrice2 = 0;
    
    long int li_tot_rcrds;
    long int li_cnt;
    char c_OptionType2 [ 2+1 ];

		long l_CALevel2 = 0;
    long l_ReferencePrice = 0;
    long l_DayLowPriceDiffRange  = 0;
    long l_DayHighPriceDiffRange  = 0;
    long l_OpLowPriceDiffRange  = 0;
    long l_OpHighPriceDiffRange  = 0;
    long l_BoardLotQuantity1  = 0;
    long l_MinimumLotQuantity1  = 0;
    long l_TickSize1  = 0;
    
    long l_BoardLotQuantity2  = 0;
    long l_MinimumLotQuantity2 = 0;
    long l_TickSize2 = 0;

    char c_Eligibility [ 1+1 ];
    char c_DeleteFlag  [ 2 ]; 
    char c_DelFlag [ 2 ]; 
    char c_ctgry_indstk= '\0';
    char c_exrc_typ = '\0';
    char c_opt_typ = '\0';
 
    char c_msg[256] = "\0";
    char c_command[350];
    MEMSET(c_command);
 
    FILE *ptr_sprdcntct_file; 
    char c_file_name[ 256 ]; 
    int i_len = 0;
    int i_trnsctn = 0;
    char c_data[ 1024+1 ];
    char *c_temp_data; 
    int i_ch_val = 0; 
    char c_trd_dt[12]="\0"; 
    char c_Token1[ 20 ];  
    char c_Token2[ 20 ]; 
    char c_TempExpiryDate11[ 30 ];
    char c_ExpiryDate1[ 30 ];  
    char c_StrikePrice1[ 20 ];
    char c_CALevel1[ 20 ];
    char c_TempExpiryDate22[ 30 ];
    char c_ExpiryDate2[ 30 ];
    char c_StrikePrice2[ 20 ];
    char c_CALevel2[ 20 ];
    char c_ReferencePrice[ 20 ];
    char c_DayLowPriceDiffRange[ 20 ]; 
    char c_DayHighPriceDiffRange[ 20 ];
    char c_OpLowPriceDiffRange[ 20 ]; 
    char c_OpHighPriceDiffRange[ 20 ];
    char c_BoardLotQuantity1[ 20 ];  
    char c_MinimumLotQuantity1[ 20 ]; 
    char c_TickSize1[ 20 ]; 
    char c_BoardLotQuantity2[ 20 ];  
    char c_MinimumLotQuantity2[ 20 ]; 
    char c_TickSize2[ 20 ]; 
    char c_IsSprdBatFlg = 'Y';
    char c_prcsd_flg = '\0';
    char c_ixchng_cd [21];
    char c_rout_crt[4];
    int i_row_cnt = 0;
    int i_cn=0;
    strcpy ( c_ServiceName, argv[ 0 ] );
    INITDBGLVL( c_ServiceName );  

    sprintf ( c_msg, "Batch process %s started", argv[ 0 ] );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

    strcpy(c_trd_dt, argv[4] );
    /******* Compute the path of file ********/
    time( &timer );
    tm_info = localtime( &timer );
    strcpy( c_ixchng_cd, argv[2] );

    strftime(day, 3, "%d", tm_info);
    strftime(month, 3, "%m", tm_info);
    strftime(year, 5, "%Y", tm_info);

    strcat( year,month );
    strcat( year,day );

    path_ebalog = ( char * )getenv("EBALOG_PATH");

    if ( path_ebalog == NULL )
    {
       fn_errlog( c_ServiceName, "S31005", LIBMSG, c_err_msg );
       strcpy( c_msg, "System error. Contact system support" );
       fn_chk_batch_status(c_ServiceName,c_msg);
       fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    }

    sprintf( c_file_name, "%s/%s/fno/%s",path_ebalog,year,"spd_contract.txt" );

    if (DEBUG_MSG_LVL_0)
    {
     fn_userlog( c_ServiceName,"Path of the file is :%s:",c_file_name ); 
    }

    /*** opens the file in read mode ***/    
    if((ptr_sprdcntct_file = fopen(c_file_name,"r")) == NULL )
    {
   		fn_errlog( c_ServiceName, "S31010", LIBMSG, c_err_msg );
      strcpy( c_msg, "File can not be opened. Contact system support" );
      fn_chk_batch_status(c_ServiceName,c_msg);
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }

    /*** Ignoring the header part ********/ 
    fgets( c_data, 1024, ptr_sprdcntct_file );
    if(c_data == NULL)
    {
      fn_errlog( c_ServiceName, "S31015", LIBMSG, c_err_msg );
      strcpy( c_msg, "System error occured. Contact system support" );
      fn_chk_batch_status(c_ServiceName,c_msg);
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }

    /*** Start transaction *******/   
    i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
    if( i_trnsctn == -1 )
    {
      fn_errlog(c_ServiceName, "S31020", LIBMSG, c_err_msg);
      strcpy( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      fn_chk_batch_status(c_ServiceName,c_msg);
      fclose( ptr_sprdcntct_file );
      return;
    }

    /***** Insert all the spread records in log table ********/ 
    EXEC SQL
    INSERT INTO FSL_FO_SPRDCNTRCT_LOG
    (
    FSL_XCHNG_CD ,
    FSL_PRDCT_TYP,
		FSL_EXPIRYDATE1,
		FSL_EXPIRYDATE2,
 		FSL_UNDERLYNG,
    FSL_PREV_RWS_ALLWD_FLG,
		FSL_RWS_ALLWD_FLG,
		FSL_MODIFTY_TIME ,
		FSL_MODIFY_BY,
    FSL_REMARKS 
    )
    SELECT FTQ_XCHNG_CD,
           FTQ_PRDCT_TYP,
           FTQ_EXPRY_DT,
           FTQ_EXPRY_DT2,
           FTQ_UNDRLYNG,
           FTQ_ROLLOVER_SPRD_ALLWD_FLG,
           'N',
           SYSDATE,
           'SPREAD CNTRCT DWLD',
           'Contract disabled'
     FROM   FTQ_FO_TRD_QT
     WHERE  FTQ_XCHNG_CD = 'NFO'
       AND  FTQ_PRDCT_TYP = 'S';

    if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog(c_ServiceName, "S31025", SQLMSG,c_err_msg);
      strcpy( c_msg, "System error. Contact system support" );
      fn_chk_batch_status(c_ServiceName,c_msg);
      return;
    }

    /*** Update all existing contracts as spread with rollover not allowed ***/
    EXEC SQL
         UPDATE FTQ_FO_TRD_QT
            SET FTQ_ROLLOVER_SPRD_ALLWD_FLG = 'N' 
          WHERE FTQ_XCHNG_CD = 'NFO' 
            AND FTQ_PRDCT_TYP = 'S';

    if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog(c_ServiceName, "S31030", SQLMSG,c_err_msg);
       strcpy( c_msg, "System error. Contact system support" ); 
      fn_chk_batch_status(c_ServiceName,c_msg);
      return;
    }

    /*** Update all existing contracts as spread with rollover not allowed at underlying level ***/
   EXEC SQL
        UPDATE FUM_FO_UNDRLYNG_MSTR
           SET FUM_ROLLOVER_SPRD_ALLWD_FLG = 'N'
         WHERE FUM_PRDCT_TYP = 'F'
           AND FUM_XCHNG_CD  = 'NFO';

    if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog(c_ServiceName, "S31035", SQLMSG,c_err_msg);
             strcpy( c_msg, "System error. Contact system support" );
      fn_chk_batch_status(c_ServiceName,c_msg);
      return;
    }

    /*** File Reading Logic ***/
    while( feof( ptr_sprdcntct_file )== 0 )
    {
         MEMSET( c_Token1 );
         MEMSET( c_Token2 );
         MEMSET( c_TempExpiryDate11 );
         MEMSET( c_StrikePrice1 );
         MEMSET( c_CALevel1 );
         MEMSET( c_TempExpiryDate22 );
         MEMSET( c_StrikePrice2 );
         MEMSET( c_CALevel2 );
         MEMSET( c_ReferencePrice );
         MEMSET( c_DayLowPriceDiffRange );
         MEMSET( c_DayHighPriceDiffRange );
         MEMSET( c_OpLowPriceDiffRange );
         MEMSET( c_OpHighPriceDiffRange );
         MEMSET( c_BoardLotQuantity1 );
         MEMSET( c_MinimumLotQuantity1 );
         MEMSET( c_TickSize1 );
         MEMSET( c_BoardLotQuantity2 );
         MEMSET( c_MinimumLotQuantity2 );
         MEMSET( c_TickSize2 );   
         MEMSET( c_ExpiryDate1 );       
         MEMSET( c_ExpiryDate2 ); 
         MEMSET( c_InstrumentName1 );
         MEMSET( c_Symbol1 );
         MEMSET( c_Series1 );
         MEMSET( c_OptionType1 ) ;
         MEMSET( c_InstrumentName2 ) ;
         MEMSET( c_Symbol2 );
         MEMSET( c_Series2  );
         MEMSET( c_OptionType2 );
         MEMSET( c_Eligibility );
         MEMSET( c_DeleteFlag  );
         MEMSET( c_DelFlag  );       
         MEMSET( c_underlyng );
         MEMSET (c_seg_indicator);
         MEMSET (c_version_number);
       
         l_Token1  = 0;
         l_Token2  = 0;
         l_ExpiryDate1 = 0;
         l_StrikePrice1 = 0;
         d_StrikePrice1 = 0;
         l_CALevel1 = 0; 
         l_ExpiryDate2 = 0;
         l_StrikePrice2 = 0;
         l_CALevel2 = 0;
         l_ReferencePrice = 0;
         l_DayLowPriceDiffRange  = 0;
         l_DayHighPriceDiffRange  = 0;
         l_OpLowPriceDiffRange  = 0;
         l_OpHighPriceDiffRange  = 0;
         l_BoardLotQuantity1  = 0;
         l_MinimumLotQuantity1  = 0;
         l_TickSize1  = 0;
         l_BoardLotQuantity2  = 0;
         l_MinimumLotQuantity2 = 0;
         l_TickSize2 = 0;
         c_prcsd_flg = 'N';
  c_ctgry_indstk= '\0';       
 c_exrc_typ = '\0';          
 c_opt_typ = '\0';           
 c_fum_flag1 = '\0';         
 c_ftq_flag1 = '\0';         
 c_ftq_flag2 = '\0';         
 i_exception_record = 0;
      
         /*** reads a line from ptr_sprdcntct_file and stores it into the string pointed by c_data  ***/
         fgets( c_data, 1024, ptr_sprdcntct_file );
         
          if( c_data == NULL )
          {
             fclose( ptr_sprdcntct_file );
          }

          /*** check if it's end of file ***/
          if( feof( ptr_sprdcntct_file ) != 0 )
          {
              break;
          }
          
          i_len = strlen(c_data);
          /** fn_userlog( c_ServiceName,"Length of the row :%d:",i_len); **/
         
          /*** returns pointer to duplicate string which is copy of c_data **/ 
          c_temp_data = strdup(c_data);
          
          strcpy( c_Token1, strsep(&c_temp_data,"|") );
          strcpy( c_Token2, strsep(&c_temp_data,"|") ); 
          strcpy( c_InstrumentName1 , strsep(&c_temp_data,"|") );
          strcpy( c_Symbol1 ,strsep(&c_temp_data,"|") );
          strcpy( c_Series1,strsep(&c_temp_data,"|") );
          strcpy( c_TempExpiryDate11,strsep(&c_temp_data,"|") );
          strcpy( c_StrikePrice1,strsep(&c_temp_data,"|") );
          strcpy( c_OptionType1,strsep(&c_temp_data,"|") );
          strcpy( c_CALevel1,strsep(&c_temp_data,"|") );
          strcpy( c_InstrumentName2,strsep(&c_temp_data,"|") );
          strcpy( c_Symbol2,strsep(&c_temp_data,"|") );
          strcpy( c_Series2,strsep(&c_temp_data,"|") );
          strcpy( c_TempExpiryDate22,strsep(&c_temp_data,"|") );
          strcpy( c_StrikePrice2,strsep(&c_temp_data,"|") );
          strcpy( c_OptionType2,strsep(&c_temp_data,"|") );
          strcpy( c_CALevel2,strsep(&c_temp_data,"|") );
          strcpy( c_ReferencePrice,strsep(&c_temp_data,"|") );
          strcpy( c_DayLowPriceDiffRange,strsep(&c_temp_data,"|") );
          strcpy( c_DayHighPriceDiffRange,strsep(&c_temp_data,"|") );
          strcpy( c_OpLowPriceDiffRange,strsep(&c_temp_data,"|") );
          strcpy( c_OpHighPriceDiffRange,strsep(&c_temp_data,"|") );
          strcpy( c_BoardLotQuantity1,strsep(&c_temp_data,"|") );
          strcpy( c_MinimumLotQuantity1,strsep(&c_temp_data,"|") );
          strcpy( c_TickSize1,strsep(&c_temp_data,"|") );
          strcpy( c_BoardLotQuantity2,strsep(&c_temp_data,"|") );
          strcpy( c_MinimumLotQuantity2,strsep(&c_temp_data,"|") );
          strcpy( c_TickSize2,strsep(&c_temp_data,"|") );
          strcpy( c_Eligibility,strsep(&c_temp_data,"|") );
          strcpy( c_DeleteFlag,strsep(&c_temp_data,"|") );
         
          strncpy( c_DelFlag,c_DeleteFlag,1);
          c_DelFlag[1] = '\0';

    if (DEBUG_MSG_LVL_0)
    {
           fn_userlog(c_ServiceName," *****************c_seg_indicator :%s:",c_seg_indicator);
           fn_userlog(c_ServiceName," c_version_number :%s:",c_version_number);
           fn_userlog(c_ServiceName," c_Token1 :%s:", c_Token1 );
           fn_userlog(c_ServiceName," c_Token2 :%s:", c_Token2 );
           fn_userlog(c_ServiceName," c_InstrumentName1  :%s:",  c_InstrumentName1);
           fn_userlog(c_ServiceName," c_Symbol1  :%s:",  c_Symbol1);
           fn_userlog(c_ServiceName," c_Series1 :%s:", c_Series1 );
           fn_userlog(c_ServiceName," c_ExpiryDate11 :%s:",c_TempExpiryDate11  );
           fn_userlog(c_ServiceName," c_StrikePrice1 :%s:",c_StrikePrice1  );
           fn_userlog(c_ServiceName," c_OptionType1 :%s:",c_OptionType1  );
           fn_userlog(c_ServiceName," c_CALevel1 :%s:",c_CALevel1  );
           fn_userlog(c_ServiceName," c_InstrumentName2 :%s:",c_InstrumentName2  );
           fn_userlog(c_ServiceName," c_Symbol2 :%s:",c_Symbol2  );
           fn_userlog(c_ServiceName," c_Series2 :%s:",c_Series2  );
           fn_userlog(c_ServiceName," c_ExpiryDate2 :%s:",c_TempExpiryDate22  );
           fn_userlog(c_ServiceName," c_StrikePrice2 :%s:",c_StrikePrice2  );
           fn_userlog(c_ServiceName," c_OptionType2 :%s:",  c_OptionType2);
           fn_userlog(c_ServiceName," c_CALevel2 :%s:",c_CALevel2  );
           fn_userlog(c_ServiceName," c_ReferencePrice :%s:", c_ReferencePrice );
           fn_userlog(c_ServiceName," c_DayLowPriceDiffRange :%s:",  c_DayLowPriceDiffRange);
           fn_userlog(c_ServiceName," c_DayHighPriceDiffRange :%s:",  c_DayHighPriceDiffRange);
           fn_userlog(c_ServiceName," c_OpLowPriceDiffRange :%s:", c_OpLowPriceDiffRange );
           fn_userlog(c_ServiceName," c_OpHighPriceDiffRange :%s:", c_OpHighPriceDiffRange );
           fn_userlog(c_ServiceName," c_BoardLotQuantity1 :%s:", c_BoardLotQuantity1 );
           fn_userlog(c_ServiceName," c_MinimumLotQuantity1 :%s:", c_MinimumLotQuantity1 );
           fn_userlog(c_ServiceName," c_TickSize1 :%s:", c_TickSize1 );
           fn_userlog(c_ServiceName," c_BoardLotQuantity2 :%s:", c_BoardLotQuantity2 );
           fn_userlog(c_ServiceName," c_MinimumLotQuantity2 :%s:", c_MinimumLotQuantity2 );
           fn_userlog(c_ServiceName," c_TickSize2 :%s:",  c_TickSize2);
           fn_userlog(c_ServiceName," c_Eligibility :%s:", c_Eligibility );
           fn_userlog(c_ServiceName," c_DeleteFlag :%s: len :%d:",c_DelFlag,strlen(c_DelFlag)); 
 }

          l_Token1  = atol( c_Token1 );
          l_Token2  = atol( c_Token2 );
          l_ExpiryDate1 = atol( c_TempExpiryDate11 );
          l_StrikePrice1 = atol( c_StrikePrice1 );
          d_StrikePrice1 = atof( c_StrikePrice1 );
          l_CALevel1 = atol(  c_CALevel1 );
          l_ExpiryDate2 = atol( c_TempExpiryDate22  );
          l_StrikePrice2 = atol( c_StrikePrice2 );
          l_CALevel2 = atol( c_CALevel2 );
          l_ReferencePrice = atol( c_ReferencePrice );
          l_DayLowPriceDiffRange  = atol( c_DayLowPriceDiffRange );
          l_DayHighPriceDiffRange  = atol( c_DayHighPriceDiffRange );
          l_OpLowPriceDiffRange  = atol( c_OpLowPriceDiffRange );
          l_OpHighPriceDiffRange  = atol( c_OpHighPriceDiffRange );
          l_BoardLotQuantity1  = atol( c_BoardLotQuantity1 );
          l_MinimumLotQuantity1  = atol( c_MinimumLotQuantity1 );
          l_TickSize1  = atol( c_TickSize1 );
          l_BoardLotQuantity2  = atol( c_BoardLotQuantity2 );
          l_MinimumLotQuantity2 = atol( c_MinimumLotQuantity2 );
          l_TickSize2 = atol( c_TickSize2 ); 
        
 
     /**  fn_userlog( c_ServiceName,"l_Token1 :%ld:",l_Token1 );
          fn_userlog( c_ServiceName,"l_Token2 :%ld:",l_Token2 ); ***/
          MEMSET( c_TempExpiryDate11 );
          MEMSET( c_TempExpiryDate22 ); 
          fn_long_to_timearr(c_TempExpiryDate11,l_ExpiryDate1);
          fn_long_to_timearr(c_TempExpiryDate22,l_ExpiryDate2);
         if(DEBUG_MSG_LVL_0)
         {
          fn_userlog( c_ServiceName,"c_ExpiryDate11---> fn_long_to_timearr :%s:",c_TempExpiryDate11);
          fn_userlog(c_ServiceName,"  c_Symbol1  :%s:",  c_Symbol1); 
         }

         EXEC SQL
              SELECT rtrim(SEM_STCK_CD)
              INTO   :c_underlyng
              FROM   SEM_STCK_MAP 
              WHERE  SEM_MAP_VL = :c_Symbol1
                AND  SEM_ENTTY  = 3; 

         if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
         {
             fn_errlog ( c_ServiceName, "S31040", SQLMSG, c_err_msg);
             fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       strcpy( c_msg, "System error. Contact system support" );
             fn_chk_batch_status(c_ServiceName,c_msg);
             return;
         }
         else if ( SQLCODE == NO_DATA_FOUND )
         {
            sprintf(c_msg,"Spread Contract Download failed for:%s: as SEM Mapping not Present",c_Symbol1);
            fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag ); 
         }         

         EXEC SQL
         SELECT to_char(to_timestamp(:c_TempExpiryDate11,'dd-Mon-yyyy HH24:MI:SS'),'dd-Mon-yyyy'),
                to_char(to_timestamp(:c_TempExpiryDate22,'dd-Mon-yyyy HH24:MI:SS'),'dd-Mon-yyyy') 
         into   :c_ExpiryDate1,
                :c_ExpiryDate2
         FROM   DUAL;

         if ( SQLCODE != 0)
         {
             fn_errlog ( c_ServiceName, "S31045", SQLMSG, c_err_msg);
             return;
         }
           
         rtrim(c_ExpiryDate1);
         rtrim(c_ExpiryDate2);

         if(DEBUG_MSG_LVL_0)
         {
         fn_userlog( c_ServiceName,"c_ExpiryDate1---> ORACLE Q ANS :%s:--:%s:",c_ExpiryDate1,c_ExpiryDate2);  
         fn_userlog( c_ServiceName,"option type ----------> :%s:",c_OptionType1); 
         }

         c_ctgry_indstk = c_InstrumentName1[3];
         if( c_InstrumentName1[0] == 'F' )
         {
          c_opt_typ = '*';
          c_exrc_typ = 'E';
         }      
         else
         {
           if(DEBUG_MSG_LVL_0)
           { 
             fn_userlog( c_ServiceName," plz check prdct typ :%s:",c_InstrumentName1);
           }
         } 

        EXEC SQL
         SELECT 1
          INTO :i_exception_record
                       FROM   FRM_FO_RSPRDEXEPTN_MSTR
                       WHERE  FRM_UNDRLYNG  =  :c_underlyng
                       AND    FRM_EXPRY_DT  = to_date(:c_ExpiryDate1,'DD-Mon-yyyy')
                       AND    FRM_EXPRY_DT2 = to_date(:c_ExpiryDate2,'DD-Mon-yyyy')
                       AND    FRM_INDSTK    = :c_ctgry_indstk; 
 
   if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
   {
        fn_errlog( c_ServiceName, "S31050", SQLMSG, c_err_msg );
        continue;
   }
 
  if( i_exception_record == 1 )
  {
        fn_userlog( c_ServiceName,"EXCEPTION MASTER SKIPPING c_underlyng :%s:",c_underlyng);
        continue;
  }

 
        EXEC SQL
        SELECT  A.FUM_QT_TRDNG_FLG,B.FTQ_QT_TRDNG_FLG INTO :c_fum_flag1,:c_ftq_flag1
          FROM  FUM_FO_UNDRLYNG_MSTR A,FTQ_FO_TRD_QT B
          WHERE FUM_XCHNG_CD  = FTQ_XCHNG_CD
          AND   FUM_PRDCT_TYP = FTQ_PRDCT_TYP
          AND   FUM_PRDCT_TYP = 'F'
          AND   FUM_UNDRLYNG  = FTQ_UNDRLYNG
          AND   FTQ_TOKEN_NO  = :l_Token1;

   if( SQLCODE != 0 )
   {
        fn_userlog( c_ServiceName,"c_fum_flag1,c_ftq_flag1");
        fn_errlog( c_ServiceName, "S31055", SQLMSG, c_err_msg ); 
        continue;
   }

   EXEC SQL
        SELECT FTQ_QT_TRDNG_FLG INTO :c_ftq_flag2
        FROM   FTQ_FO_TRD_QT
        WHERE  FTQ_XCHNG_CD = 'NFO'
          AND  FTQ_PRDCT_TYP = 'F'
          AND  FTQ_UNDRLYNG = :c_underlyng
          AND  FTQ_TOKEN_NO = :l_Token2;

   if( SQLCODE != 0 )
   {
         fn_userlog( c_ServiceName,"c_ftq_flag2");
         fn_errlog( c_ServiceName, "S31060", SQLMSG, c_err_msg );
         continue;
   }

    if (DEBUG_MSG_LVL_0)
    {
        fn_userlog( c_ServiceName,"------------------------Ended-----------------------");
        fn_userlog(c_ServiceName," *** :%c: *** ",c_fum_flag1);
        fn_userlog(c_ServiceName," *** :%c: *** ",c_ftq_flag1);
        fn_userlog(c_ServiceName," *** :%c: *** ",c_ftq_flag2);
    }
    rtrim(c_underlyng);

    if( c_fum_flag1 == 'T' && c_ftq_flag1 == 'T' && c_ftq_flag2 == 'T')
    {
         strcpy( c_Eligibility,"Y" );
    }
    else
    {
         strcpy( c_Eligibility,"N" );
    }

    if (DEBUG_MSG_LVL_0)
    {
      fn_userlog( c_ServiceName," c_Eligibility :%s:",c_Eligibility);
    }

    EXEC SQL
    UPDATE FTQ_FO_TRD_QT
       SET FTQ_CA_LVL          =  :l_CALevel1,
           FTQ_BASE_PRC        =  :l_ReferencePrice,
           FTQ_LOW_PRC_RNG     =  :l_DayLowPriceDiffRange,
           FTQ_HGH_PRC_RNG     =  :l_DayHighPriceDiffRange,
           FTQ_OPLOW_PRICEDIFF =  :l_OpLowPriceDiffRange,
           FTQ_OPHIGH_PRICEDIFF=  :l_OpHighPriceDiffRange,
           FTQ_BOARD_LOT_QTY   =  :l_BoardLotQuantity1,
           FTQ_MIN_LOT_QTY     =  :l_MinimumLotQuantity1,
           FTQ_TCK_SZ          =  :l_TickSize1,
           FTQ_ROLLOVER_SPRD_ALLWD_FLG = :c_Eligibility
   WHERE   FTQ_SPRD_TOKEN_NO   = :l_Token1;

   if( SQLCODE != 0 )
   {
        if ( SQLCODE == NO_DATA_FOUND )
        {
             EXEC SQL
                  INSERT INTO FTQ_FO_TRD_QT
                  (
                         FTQ_SPRD_TOKEN_NO,
                         FTQ_SPD_TOKEN2,
                         FTQ_INDSTK,
                         FTQ_UNDRLYNG,
                         FTQ_EXER_TYP,
                         FTQ_EXPRY_DT,
                         FTQ_EXPRY_DT2,
                         FTQ_STRK_PRC,
                         FTQ_OPT_TYP,
                         FTQ_CA_LVL,
                         FTQ_BASE_PRC,
                         FTQ_LOW_PRC_RNG,
                         FTQ_HGH_PRC_RNG,
                         FTQ_OPLOW_PRICEDIFF,
                         FTQ_OPHIGH_PRICEDIFF,
                         FTQ_BOARD_LOT_QTY,
                         FTQ_MIN_LOT_QTY,
                         FTQ_TCK_SZ,
                         FTQ_XCHNG_CD,
                         FTQ_PRDCT_TYP,
                         FTQ_ROLLOVER_SPRD_ALLWD_FLG
                 )
                 VALUES
                 (
                         :l_Token1,
                         :l_Token2,
                         :c_ctgry_indstk,
                         :c_underlyng,
                         :c_exrc_typ,
                         to_date(:c_ExpiryDate1,'DD-Mon-yyyy'),
                         to_date(:c_ExpiryDate2,'DD-Mon-yyyy'),
                         decode(:l_StrikePrice1,-1,0,:l_StrikePrice1),
                         :c_opt_typ,
                         :l_CALevel1,
                         :l_ReferencePrice,
                         :l_DayLowPriceDiffRange,
                         :l_DayHighPriceDiffRange,
                         :l_OpLowPriceDiffRange ,
                         :l_OpHighPriceDiffRange,
                         :l_BoardLotQuantity1,
                         :l_MinimumLotQuantity1,
                         :l_TickSize1,
                         'NFO',
                         'S',
                         :c_Eligibility
                );
               if ( SQLCODE != 0 )
               {
                    fn_userlog( c_ServiceName,"DATA INSERTION FAILED ERROR IN INSERT");
                    fn_userlog( c_ServiceName,"1 :%ld: 2 :%ld: 3 :%c: 4 :%s: 5 :%c: 6. :%s: 7. :%s: 8. :%ld:",l_Token1,l_Token2,c_ctgry_indstk,c_underlyng,c_exrc_typ,c_ExpiryDate1,c_ExpiryDate2,l_StrikePrice1);
                    fn_userlog( c_ServiceName,"opt typ :%c: :%ld: :%ld:",c_opt_typ,l_CALevel1,l_ReferencePrice);
                    fn_userlog( c_ServiceName,":%ld: :%ld: :%ld: :%ld: :%ld: :%ld :%ld:",l_DayLowPriceDiffRange,l_DayHighPriceDiffRange,l_OpLowPriceDiffRange,l_OpHighPriceDiffRange,l_BoardLotQuantity1,l_MinimumLotQuantity1,l_TickSize1);   
                    fn_errlog( c_ServiceName, "S31065", SQLMSG, c_err_msg );
                    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
                    continue;
               }
       }
       else 
       {
                    fn_userlog( c_ServiceName,"DATA UPDATION FAILED");
                    fn_errlog( c_ServiceName, "S31070", SQLMSG, c_err_msg );
                    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
                    continue;
       } 
   }
   EXEC SQL
        UPDATE FUM_FO_UNDRLYNG_MSTR
           SET FUM_ROLLOVER_SPRD_ALLWD_FLG = decode( :c_Eligibility,'N',FUM_ROLLOVER_SPRD_ALLWD_FLG,:c_Eligibility ) 
         WHERE FUM_PRDCT_TYP = 'F'
           AND FUM_XCHNG_CD  = 'NFO'
           AND FUM_UNDRLYNG  = :c_underlyng;

          if ( SQLCODE != 0 )
          {
              fn_userlog( c_ServiceName,"DATA UPDATION FAILED ERROR IN UPDATE");
              fn_errlog( c_ServiceName, "S31075", SQLMSG, c_err_msg );
              strcpy( c_msg, "System error. Contact system support" );
              fn_chk_batch_status(c_ServiceName,c_msg);
              fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
              return;
          } 
 
    } /*** End of while loop ***/
  
    if(DEBUG_MSG_LVL_0)
    { 
      fn_userlog( c_ServiceName,"ALl records are added successfully" );
    }

    fclose( ptr_sprdcntct_file );

    fn_bat_pst_msg ( c_ServiceName, "Data retieved from spread contract file....", c_tag );

    EXEC SQL
    INSERT INTO FSL_FO_SPRDCNTRCT_LOG
    (
    FSL_XCHNG_CD ,
    FSL_PRDCT_TYP,
    FSL_EXPIRYDATE1,
    FSL_EXPIRYDATE2,
    FSL_UNDERLYNG,
    FSL_PREV_RWS_ALLWD_FLG,
    FSL_RWS_ALLWD_FLG,
    FSL_MODIFTY_TIME ,
    FSL_MODIFY_BY,
    FSL_REMARKS
    )
    SELECT FTQ_XCHNG_CD,
           FTQ_PRDCT_TYP,
           FTQ_EXPRY_DT,
           FTQ_EXPRY_DT2,
           FTQ_UNDRLYNG,
           'N',
           FTQ_ROLLOVER_SPRD_ALLWD_FLG,
           SYSDATE,
           'SPREAD CNTRCT DWLD',
           'Contract enabled'
     FROM   FTQ_FO_TRD_QT
     WHERE  FTQ_XCHNG_CD = 'NFO'
       AND  FTQ_PRDCT_TYP = 'S';
 
   if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
   {  
              fn_userlog( c_ServiceName,"POST LOG TABLE DATA INSERTION FAILED.");
              fn_errlog( c_ServiceName, "S31080", SQLMSG, c_err_msg );
              strcpy( c_msg, "System error. Contact system support" );
              fn_chk_batch_status(c_ServiceName,c_msg);
              fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
              return;
   }
 
    if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    {
      fn_errlog(c_ServiceName, "S31085", LIBMSG, c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      strcpy( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      fn_chk_batch_status(c_ServiceName,c_msg); 
      fclose(ptr_sprdcntct_file);
      return;
     }
     
     sprintf(c_command,"ksh $HOME/sh_scripts/fo_enabled_spread_cntrcts_mailer.sh '%s' '%s' ",c_ServiceName,c_trd_dt);
     system(c_command);
     sprintf ( c_msg, "Batch process %s ended", argv[0] );
     fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
 
}

void fn_chk_batch_status(char *c_ServiceName, char *c_err_msg )
{
  char c_command[350];
  MEMSET(c_command);
  if(DEBUG_MSG_LVL_0)
  {
     fn_userlog( c_ServiceName ,"Inside fn_chk_batch_status Before sprintf :%s: and :%s: and len of service name is :%d: and err msg :%d:  ",c_ServiceName,c_err_msg,strlen(c_ServiceName),strlen(c_err_msg));
  }
  sprintf(c_command,"ksh $HOME/sh_scripts/fo_batch_failure_status.sh '%s' '%s'",c_ServiceName,c_err_msg);
  fn_userlog( c_ServiceName ," Inside fn_chk_batch_status c_command is :%s:",c_command );
  system(c_command);
}


int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_SPRDCNTRCT_DWLD;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}

int fn_prcs_trg ( char *c_pgm_nm , int i_trg_typ )
{
  return 0;
}
  
