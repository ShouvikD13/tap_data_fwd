/****************************************************************/
/*  Program     : BAT_CANCEL_EXPSRE										   	  	  */
/*                                                              */ 
/*  Description : This batch cancels all fresh exposure of      */ 
/*                customers marked under SquareOff Mode         */
/*                                                              */
/*  Log         : Ver 1.0   30-Jul-2018  Anand Dhopte           */
/****************************************************************/


#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>

#include <fo.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_battmpt.h>
#include <fn_env.h>
#include <fn_tuxlib.h>
#include <fn_log.h>    
#include <fn_read_debug_lvl.h>
#include <fn_val_ord.h>

void BAT_CANCEL_EXPSRE ( int argc, char *argv[] )
{

 FBFR32 *ptr_fml_Ibuf;

 char c_ServiceName[18];
 char c_fod_ordr_rfrnc[19];
 char c_fod_undrlyng[7];
 char c_fod_expry_dt[12];
 char c_fod_xchng_cd[4];
 char c_srvc_nm[15];
 char c_usr_id[9];
 char c_clm_mtch_accnt[11];
 char c_cmd[60];       
 char c_exg_nxt_trd_dt[12];
 char c_remarks[27];
 char c_xchng_cd[4];  
 
 char c_fod_prdct_typ= '\0';
 char c_fod_opt_typ  = '\0';
 char c_fod_exer_typ = '\0';
 char c_fod_spn_flg  = '\0';  
 char c_fod_ordr_flw = '\0';
 char c_clm_sqrfmd_stts = 'Y';
 char c_ordr_stts = 'R';
 char c_ordr_type = 'V';
 char c_clm_spn_flg = '\0';

 int i_returncode = 0; 
 
 long l_fod_strk_prc = 0;
 long l_fod_ordr_tot_qty = 0;  
 long l_old_ord_qty = 0;
 long l_sssn_id = 0;

 varchar c_err_msg[256];	 
 
 struct vw_err_msg st_err_msg;
 struct vw_contract st_cntrct;

 MEMSET(st_err_msg);
 MEMSET(st_cntrct);
 MEMSET(c_exg_nxt_trd_dt);
 MEMSET(c_clm_mtch_accnt);
 MEMSET(c_fod_ordr_rfrnc);
 MEMSET(c_fod_xchng_cd);
 MEMSET(c_fod_undrlyng);
 MEMSET(c_fod_expry_dt);

 strcpy(c_ServiceName,argv[0]);
 strcpy(c_usr_id,"system");
 strcpy(c_remarks,"System Placed Cancellation");

 INITBATDBGLVL(c_ServiceName); 

 strcpy(c_xchng_cd,argv[2]);
 
 if(DEBUG_MSG_LVL_3)
 {
  fn_userlog(c_ServiceName,"Exchange Code Is :%s:",c_xchng_cd);
 }

 EXEC SQL
	 SELECT GREATEST(EXG_NXT_TRD_DT, EXG_TMP_TRD_DT)
		 INTO	:c_exg_nxt_trd_dt
     FROM EXG_XCHNG_MSTR
		WHERE EXG_XCHNG_CD = :c_xchng_cd;
 
  if( SQLCODE != 0 )
   {
    fn_errlog( c_ServiceName, "S31005", SQLMSG, c_err_msg.arr );
    return;
   }

 
 /* Fetching all match ids of customers marked under SquareOff mode */ 
 if(DEBUG_MSG_LVL_3)
 {    
  fn_userlog(c_ServiceName,"SquareOff Mode Flag Is  :%c:",c_clm_sqrfmd_stts);
 }

  EXEC SQL
  DECLARE cur_sqroffmode_match_acc CURSOR FOR
	SELECT CLM_MTCH_ACCNT,
         DECODE(:c_xchng_cd,'NFO',NVL(CLM_SPAN_ALLWD,'N'),'BFO',NVL(CLM_BSESPAN_ALLWD,'N')) 
   FROM CLM_CLNT_MSTR
  WHERE CLM_SQRFMD_STTS = :c_clm_sqrfmd_stts;

  EXEC SQL OPEN cur_sqroffmode_match_acc;

    if( SQLCODE != 0 )
     {
      fn_errlog( c_ServiceName, "S31010", SQLMSG, c_err_msg.arr );
      return;
     } 

    while(1)
    {

     MEMSET(c_clm_mtch_accnt);  
     c_clm_spn_flg = '\0';

      EXEC SQL
        FETCH cur_sqroffmode_match_acc 
        INTO  :c_clm_mtch_accnt,
              :c_clm_spn_flg ;

       if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
        {
          fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg.arr );
          EXEC SQL CLOSE cur_sqroffmode_match_acc;
          return;
        }

       if( SQLCODE == NO_DATA_FOUND )
        {
          fn_userlog(c_ServiceName,"Inside All records fetched or No data found block for Match Account");
          EXEC SQL CLOSE cur_sqroffmode_match_acc;
          break;
        }
  
     /* Fetching order details of all pending orders for respective match ids */ 
  
   if(DEBUG_MSG_LVL_3)
   {  
    fn_userlog(c_ServiceName,"Match Account Is   :%s:",c_clm_mtch_accnt);
    fn_userlog(c_ServiceName,"Next Trade Date Is :%s:",c_exg_nxt_trd_dt);
    fn_userlog(c_ServiceName,"Order Status  Is   :%c:",c_ordr_stts);
    fn_userlog(c_ServiceName,"Order Type Is      :%c:",c_ordr_type);
   }
 
     EXEC SQL
      DECLARE cur_ordr_dtls CURSOR FOR 
       SELECT FOD_ORDR_RFRNC,
              FOD_XCHNG_CD,
      				FOD_UNDRLYNG,
       				FOD_PRDCT_TYP,
       				FOD_EXPRY_DT,
       				FOD_OPT_TYP,
       				FOD_EXER_TYP,
       				FOD_STRK_PRC,
      				FOD_SPN_FLG,
      				FOD_ORDR_FLW
				 FROM FOD_FO_ORDR_DTLS
			  WHERE FOD_CLM_MTCH_ACCNT = :c_clm_mtch_accnt
          AND FOD_ORDR_STTS = :c_ordr_stts 
					AND FOD_TRD_DT = :c_exg_nxt_trd_dt
          AND FOD_ORDR_TYPE != :c_ordr_type;
     
 
      EXEC SQL OPEN cur_ordr_dtls;
   
      if( SQLCODE != 0 )
       {
        fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg.arr );
        EXEC SQL CLOSE cur_sqroffmode_match_acc;
        return;
       }


       while (1)
       {
    
         MEMSET(c_fod_ordr_rfrnc);
			   MEMSET(c_fod_xchng_cd);
			   MEMSET(c_fod_undrlyng);
         MEMSET(c_fod_expry_dt);
         MEMSET(c_srvc_nm);
         c_fod_prdct_typ = '\0';
         c_fod_opt_typ   = '\0';
         c_fod_exer_typ  = '\0';
         l_fod_strk_prc = 0;
         c_fod_spn_flg = 'N';
         c_fod_ordr_flw = '\0';

         EXEC SQL 
					  FETCH cur_ordr_dtls
             INTO :c_fod_ordr_rfrnc,
                  :c_fod_xchng_cd,
                  :c_fod_undrlyng,
                  :c_fod_prdct_typ,
              		:c_fod_expry_dt,
              		:c_fod_opt_typ,
              		:c_fod_exer_typ,
              		:l_fod_strk_prc,
              		:c_fod_spn_flg,
              		:c_fod_ordr_flw ;

        			 if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
        			  {
          			 fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg.arr );
          			 EXEC SQL CLOSE cur_ordr_dtls;
          			 EXEC SQL CLOSE cur_sqroffmode_match_acc; 
          			 return;
        				}

          		 if( SQLCODE == NO_DATA_FOUND )
        				{
                 fn_userlog(c_ServiceName,"Inside All records fetched or No data found block for Order Details");               
                 EXEC SQL CLOSE cur_ordr_dtls;
          			 break;
        				}    

      		st_cntrct.c_prd_typ = c_fod_prdct_typ;
					st_cntrct.c_opt_typ = c_fod_opt_typ;
					st_cntrct.c_exrc_typ = c_fod_exer_typ;
					st_cntrct.l_strike_prc = l_fod_strk_prc;
					strcpy(st_cntrct.c_xchng_cd,c_fod_xchng_cd);
					strcpy(st_cntrct.c_undrlyng,c_fod_undrlyng);
					strcpy(st_cntrct.c_expry_dt,c_fod_expry_dt);

    
         if(DEBUG_MSG_LVL_3)
         {  
          fn_userlog(c_ServiceName,"st_cntrct.c_prd_typ :%c:", st_cntrct.c_prd_typ); 
          fn_userlog(c_ServiceName,"st_cntrct.c_opt_typ :%c:", st_cntrct.c_opt_typ); 
          fn_userlog(c_ServiceName,"st_cntrct.c_exrc_typ :%c:", st_cntrct.c_exrc_typ);
          fn_userlog(c_ServiceName,"st_cntrct.l_strike_prc :%ld:", st_cntrct.l_strike_prc); 
          fn_userlog(c_ServiceName,"st_cntrct.c_xchng_cd :%s:", st_cntrct.c_xchng_cd);
          fn_userlog(c_ServiceName,"st_cntrct.c_undrlyng :%s:", st_cntrct.c_undrlyng);
          fn_userlog(c_ServiceName,"st_cntrct.c_expry_dt :%s:", st_cntrct.c_expry_dt);
          fn_userlog(c_ServiceName,"c_clm_spn_flg :%c:", c_clm_spn_flg);
          fn_userlog(c_ServiceName,"c_fod_ordr_flw :%c:", c_fod_ordr_flw);
          fn_userlog(c_ServiceName,"l_fod_ordr_tot_qty :%ld:", l_fod_ordr_tot_qty);
          fn_userlog(c_ServiceName,"l_old_ord_qty :%ld:", l_old_ord_qty);
         }

 		     i_returncode = fn_disallow_frsh_expsre(c_ServiceName,
    		                                         c_clm_mtch_accnt,
        		                                     c_clm_spn_flg,
            		                                 c_fod_ordr_flw, 
                		                             l_fod_ordr_tot_qty,
                    		                         l_old_ord_qty,
                        		                     &st_cntrct,
                            		                 &st_err_msg );

 		  		if (i_returncode == -2)
   				{
              
        		 if ( c_clm_spn_flg == 'Y' && c_fod_prdct_typ != 'P' )
          		{
           		 strcpy(c_srvc_nm,"SFO_SPN_CANCEL");
          		}
         		  else if  ( c_fod_prdct_typ == 'F' || c_fod_prdct_typ == 'P' )
          		 {
           	  	strcpy(c_srvc_nm,"SFO_CANCEL_FUT");
          		 }
         	    else if (c_fod_prdct_typ == 'O')
               {
                strcpy(c_srvc_nm,"SFO_CANCEL_OPT");
               }
         			else
          		 {
             	  fn_userlog(c_ServiceName,"Invalid Product Type :%c:",c_fod_prdct_typ);
                EXEC SQL CLOSE cur_ordr_dtls;  
             	  break; 
          		 }

  			/* Calling service to cancel order */

      if(DEBUG_MSG_LVL_3)
       { 
        fn_userlog(c_ServiceName,"User Id :%s:",c_usr_id);
        fn_userlog(c_ServiceName,"Session Id :%ld:",l_sssn_id);
        fn_userlog(c_ServiceName,"Match Account :%s:",c_clm_mtch_accnt);
        fn_userlog(c_ServiceName,"Exchange Code :%s:",c_fod_xchng_cd);
        fn_userlog(c_ServiceName,"Order Reference :%s:",c_fod_ordr_rfrnc);
        fn_userlog(c_ServiceName,"Service :%s:",c_srvc_nm);
       }

 		  	i_returncode = fn_call_svc_fml ( c_ServiceName,
    			                                c_err_msg.arr,  
        			                            c_srvc_nm,
            			                        0,
              	  		                    6,
                	    		                0,
                  	      		            FFO_USR_ID, ( char * )c_usr_id,
      		          	                    FFO_SSSN_ID, ( char * )&l_sssn_id,
          		        	                  FFO_EBA_MTCH_ACT_NO, ( char * )c_clm_mtch_accnt,
              		      	                FFO_XCHNG_CD, ( char * )c_fod_xchng_cd,
                  		    	              FFO_ORDR_RFRNC, ( char * )c_fod_ordr_rfrnc,
                                          FFO_XCHNG_RMRKS, (char *)c_remarks);

 		   		if ( i_returncode != SUCC_BFR )
  		  	{
    		   fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg.arr  ); 
    			 EXEC SQL CLOSE cur_ordr_dtls;
         	 EXEC SQL CLOSE cur_sqroffmode_match_acc; 
    		 	 return;
  		  	}
          else
          {
            fn_userlog(c_ServiceName,"Order :%s: cancelled successfully... ",c_fod_ordr_rfrnc); 
          }
		   }
       else if (i_returncode == -1)
       {
         fn_errlog( c_ServiceName, "S31035", LIBMSG, c_err_msg.arr  );
         EXEC SQL CLOSE cur_ordr_dtls;
         EXEC SQL CLOSE cur_sqroffmode_match_acc;
         MEMSET(c_cmd);
         sprintf(c_cmd,"ksh $HOME/sh_scripts/fo_cancel_expsre_err_mail.sh");
         system(c_cmd);
         return; 
       }
       else
       {
         fn_userlog(c_ServiceName,"Order :%s: not to be cancelled... ",c_fod_ordr_rfrnc);   
       }

      } /* End of Order Details Fetch Loop */

    } /* End of Match Account Fetch Loop */


  fn_userlog(c_ServiceName," BAT_CANCEL_EXPSRE Completed Successfully ");
  return;
}

int fn_bat_init ( int argc, char *argv[] )
{

  fn_var = BAT_CANCEL_EXPSRE; 
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  char c_msg[256];

  sprintf ( c_msg, "Batch process %s ended", argv[0] ); fn_bat_pst_msg (  argv[0], c_msg, c_tag );
  return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}
	
