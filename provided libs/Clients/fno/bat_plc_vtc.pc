
/******************************************************************************************************
* Program Name : BAT_PLC_VTC                                                                          *
* 							 																																											*
* Description  : This program places the VTC Future Square off orders against the VTC expired orders  *
*  																																																		*
* Inputs       : Exchange Code 																																				*
*                Trade Date 																																					*
*                Run Mode																																							*
* 																																																		*
* Output       : It calls the service to place the VTC Square off Orders                              *
* 																																																		*
* Log          : 21-Nov-2013 Initial Release - Sachin Birje                                           *
**************************************************************************************************** *
* Ver 1.1 : 31-Jan-2017: Change for Enabling overnight Limit orders | Vishal Borhade                  *
* Ver 1.2 : 19-May-2017: Changes in VTC rerun case | Sachin Birje.                        						*		
* Ver 1.3 : 2-Nov_2017 : Stop VTC feature | Tanmay Patel                                              *
******************************************************************************************************/

/** Header Files ***/

#include <stdio.h>
#include <stdlib.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <fml_rout.h>
#include <fn_session.h>
#include <string.h>
#include <fn_read_debug_lvl.h>
#include <fn_pos.h>

EXEC SQL INCLUDE "table/exg_xchng_mstr.h";
EXEC SQL INCLUDE "table/fod_fo_ordr_dtls.h";
EXEC SQL INCLUDE "table/clm_clnt_mstr.h";
EXEC SQL INCLUDE "table/uac_usr_accnts.h";

int fn_audit_pgm(char* c_ServiceName,
                 char* c_trade_date,
                 char* c_xchng_cd,
                 char* c_err_msg
                );

void BAT_PLC_VTC(int argc, char *argv[] )
{
  char     c_ServiceName [ 33 ];
  char     c_err_msg [ 256 ];
  char     c_msg[256];
  char     c_xchng_cd[3+1];
  char     c_trade_date[12];
  char     c_input_date[12];
  char     c_run_mode='\0';
  char     c_spn_flg='\0';
  char     c_bse_flg='\0';
  char     c_channel[5];
  char     svc_name[33];
  char     c_flg_chk='\0';
  char     c_flg='F';
  char     c_command[256];
  char     c_clm_mtch_acc[11];

  int  i_trnsctn;
  int  i_ret_val;
  int  i_tot_ord=0;
  int  i_err[30];
  int  i_ferr[30];
  int  i_loop=0;
  int  i_count=0;
  int  i_ch_val=0;
  int  i_rjctd=0;                   
  int  i_match=0;                  
  int  i_func_ret=0;              
  int  i_exit_flg=0;             
  int  i_row_cnt=0;
  int  i=0;
  int  i_total_ord=0;
  int  i_tot_ord_cnt=0;

  long l_session_id=0;
  long l_bufferlength=0;
  long l_recv_buf_len=0;
  long li_seq_num=0;
  long l_ord_plcd=0;
  long l_record_count=0;
  long li_cnt=0;
 
  FBFR32    *ptr_fml_Sbuffer;
  FBFR32    *ptr_fml_temp_buffer;
  ptr_fml_temp_buffer = (FBFR32 *)NULL;

  EXEC SQL BEGIN DECLARE SECTION;
   char     c_exg_stts ;
   varchar v_ord_usr[15+1];
  EXEC SQL END DECLARE SECTION;


  strcpy ( c_ServiceName, argv[0] );
  INITBATDBGLVL(c_ServiceName);

  sprintf ( c_msg, "Batch process %s started", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );


  if( argc != 6 )
  {
    fn_bat_pst_msg ( c_ServiceName, "Invalid Number of Arguments", c_tag );
    sprintf(c_msg,"Usage:bat_plc_vtc <ini> <Exchange Code> <Trade Date> <F/R>\n");
    /* S- Square off , C- Cancellation, A- Cancellation + SquareOff, M- Modify + SquareOff */
    fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
    return;
  }

  MEMSET(c_xchng_cd);
  MEMSET(c_trade_date);
  MEMSET(c_input_date);
  MEMSET(v_ord_usr);

  c_run_mode ='\0';

  strcpy( c_xchng_cd, argv[2] );
  strcpy( c_input_date,argv[4] );
  c_run_mode = argv[5][0];

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Input Parameters are : ");
    fn_userlog(c_ServiceName,"Exchange Code     :%s:", c_xchng_cd);
    fn_userlog(c_ServiceName,"Input Trade Date        :%s:", c_input_date);
    fn_userlog(c_ServiceName,"Run Mode          :%c:", c_run_mode);
  }
 
  if(c_run_mode== 'F')
  {
    fn_userlog(c_ServiceName,"Running the process in Fresh Mode...");
    strcpy(c_msg,"Running the process in Fresh Mode...");
    fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
  }
  else if(c_run_mode== 'R')
  {
    fn_userlog(c_ServiceName,"Running the process in Rerun Mode...");
    fn_bat_pst_msg ( c_ServiceName, "Invalid Number of Arguments", c_tag );
    strcpy(c_msg,"Running the process in Rerun Mode...");
    fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
  } 
  else
  {
    fn_userlog(c_ServiceName,"Invalid Run Mode ...");
    fn_bat_pst_msg ( c_ServiceName, "Invalid Number of Arguments", c_tag );
    strcpy(c_msg,"Invalid Run Mode...");
    fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
    return;
  }

  ptr_fml_Sbuffer = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
  if(ptr_fml_Sbuffer == NULL)
  {
    fn_errlog( c_ServiceName, "S31005", TPMSG, c_err_msg  );
    fn_bat_pst_msg(c_ServiceName,"System error ..exiting",c_tag);
    return ;
  }

  EXEC SQL
    SELECT max(FBC_TRD_DT)
      INTO :c_trade_date
      FROM FBC_FO_BRNCH_CAL
     WHERE FBC_TRD_DT < to_date(:c_input_date,'dd-Mon-yyyy')
       AND FBC_XCHNG_CD = :c_xchng_cd; 
  if( SQLCODE != 0 )
  {
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    fn_errlog( c_ServiceName, "S31010", SQLMSG, c_err_msg );
    tpfree( (char *)ptr_fml_Sbuffer);
    return;
  }  
 
  EXEC SQL
   SELECT  exg_crrnt_stts,
           to_char( GREATEST(exg_nxt_trd_dt,exg_tmp_trd_dt), 'DD-Mon-YYYY' ),
           nvl(exg_tmp_mkt_stts,'X'),
           exg_tmp_trd_dt
   INTO    :sql_exg_crrnt_stts,
           :sql_exg_nxt_trd_dt,
           :sql_exg_tmp_mkt_stts,
           :sql_exg_tmp_trd_dt
   FROM    exg_xchng_mstr
   WHERE   exg_xchng_cd = :c_xchng_cd
   AND     exg_mkt_typ  = 'D';
   
  if( SQLCODE != 0 )
  {
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg );
    tpfree( (char *)ptr_fml_Sbuffer);
    return;
  }

  SETNULL(sql_exg_nxt_trd_dt);
  fn_userlog(c_ServiceName,"sql_exg_nxt_trd_dt :%s:",sql_exg_nxt_trd_dt.arr);

  if(( sql_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY && sql_exg_tmp_mkt_stts == EXCHANGE_OPEN ) ||
     ( sql_exg_crrnt_stts == EXCHANGE_CLOSE && sql_exg_tmp_mkt_stts == EXCHANGE_UNDER_EXPIRY)
    )
  {
    fn_userlog(c_ServiceName,"Placing the VTC Future Square off orders ...");  
  }  
  else
  {
    strcpy ( c_msg, "Exchange should be in closed or in Overnight state for running the VTC Future Square off order Placement !" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    fn_errlog( c_ServiceName, "Exchange should be in closed or in Overnight state for running the VTC Future Square off order Placement", DEFMSG, c_err_msg );
    tpfree( (char *)ptr_fml_Sbuffer);
    return;
  }

	  i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

  	if ( i_trnsctn == -1 )
  	{
    	fn_errlog(c_ServiceName, "S31020", LIBMSG, c_err_msg);
    	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    	return ;
  	}


  EXEC SQL
         DELETE FROM TMP_FOVTC_ORDR_DTLS where FOD_XCHNG_CD=:c_xchng_cd;

  if(SQLCODE != 0 && SQLCODE !=NO_DATA_FOUND)
  {
    fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpfree( (char *)ptr_fml_Sbuffer);
    return;
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_errlog( c_ServiceName, "S31030",LIBMSG,c_err_msg);
    tpfree( (char *)ptr_fml_Sbuffer);
    return;
  }


  i_ret_val = fn_audit_pgm(c_ServiceName,
                           c_trade_date,
                           c_xchng_cd,
                           c_err_msg
                          );
  if( i_ret_val != 0 )
  { 
    fn_errlog( c_ServiceName, "S31035", LIBMSG, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    tpfree( (char *)ptr_fml_Sbuffer);
    return;
  }

  i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31040", LIBMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    return ;
  }


  if( c_run_mode== 'F' ) 
  {
    fn_userlog(c_ServiceName,"Inside Fresh Run");

    EXEC SQL
     INSERT INTO TMP_FOVTC_ORDR_DTLS
                 (  FOD_CLM_MTCH_ACCNT,
										FOD_CLNT_CTGRY,
										FOD_ORDR_RFRNC,
										FOD_PIPE_ID,
										FOD_XCHNG_CD,
										FOD_PRDCT_TYP,
										FOD_INDSTK,
										FOD_UNDRLYNG,
										FOD_EXPRY_DT,
										FOD_EXER_TYP,
										FOD_OPT_TYP,
										FOD_STRK_PRC,
										FOD_ORDR_FLW,
										FOD_LMT_MRKT_SL_FLG,
										FOD_DSCLSD_QTY,
										FOD_ORDR_TOT_QTY,
										FOD_LMT_RT,
										FOD_STP_LSS_TGR,
										FOD_ORDR_TYPE,
										FOD_ORDR_VALID_DT,
										FOD_TRD_DT,
										FOD_ORDR_STTS,
										FOD_EXEC_QTY,
										FOD_CNCL_QTY,
										FOD_EXPRD_QTY,
										FOD_MDFCTN_CNTR,
										FOD_SLTP_ORDR_RFRNC,
                    FOD_SPN_FLG,
                    FOD_USR_ID,
                    FOD_PACK_FLG
                 )
                 (SELECT
                    FOD_CLM_MTCH_ACCNT,
                    FOD_CLNT_CTGRY,
                    FOD_ORDR_RFRNC,
                    FOD_PIPE_ID,
                    FOD_XCHNG_CD,
                    FOD_PRDCT_TYP,
                    FOD_INDSTK,
                    FOD_UNDRLYNG,
                    FOD_EXPRY_DT,
                    FOD_EXER_TYP,
                    FOD_OPT_TYP,
                    FOD_STRK_PRC,
                    FOD_ORDR_FLW,
                    FOD_LMT_MRKT_SL_FLG,
                    FOD_DSCLSD_QTY,
                    FOD_ORDR_TOT_QTY,
                    FOD_LMT_RT,
                    FOD_STP_LSS_TGR,
                    FOD_ORDR_TYPE,
                    FOD_ORDR_VALID_DT,
                    FOD_TRD_DT,
                    FOD_ORDR_STTS,
                    FOD_EXEC_QTY,
                    FOD_CNCL_QTY,
                    FOD_EXPRD_QTY,
                    FOD_MDFCTN_CNTR,
                    FOD_SLTP_ORDR_RFRNC,
                    FOD_SPN_FLG,
                    FOD_USR_ID,
                    'N'
                FROM  FOD_FO_ORDR_DTLS A
                WHERE A.FOD_TRD_DT  = :c_trade_date 
                AND   A.FOD_XCHNG_CD = :c_xchng_cd
                AND   A.FOD_ORDR_TYPE='V'
                AND   A.FOD_PRDCT_TYP ='F'
                AND   NVL(A.FOD_FC_FLAG,'N') !='Y'   /*** Ver 1.3 ***/
                AND   A.FOD_ORDR_STTS in ('X','B')
                AND   A.FOD_SLTP_ORDR_RFRNC IS NOT NULL
                AND   A.FOD_EXPRD_QTY > 0
                AND   A.FOD_ORDR_VALID_DT >= :sql_exg_nxt_trd_dt
                AND   A.FOD_SLTP_ORDR_RFRNC not in    /** Do not consider already placed orders ***/ 
                      (
                       select FOD_SLTP_ORDR_RFRNC
                       FROM FOD_FO_ORDR_DTLS B,FXB_FO_XCHNG_BOOK
                      WHERE B.FOD_SLTP_ORDR_RFRNC = A.FOD_SLTP_ORDR_RFRNC
                        AND   B.FOD_TRD_DT = :sql_exg_nxt_trd_dt
                        AND   B.FOD_XCHNG_CD=A.FOD_XCHNG_CD 
                        AND   B.FOD_XCHNG_CD = :c_xchng_cd
                        AND   B.FOD_CLM_MTCH_ACCNT = A.FOD_CLM_MTCH_ACCNT
                        AND   B.FOD_ORDR_RFRNC = FXB_ORDR_RFRNC
                        AND   B.FOD_XCHNG_CD = FXB_XCHNG_CD
                        AND   B.FOD_MDFCTN_CNTR = FXB_MDFCTN_CNTR
                       /*** Commented in Ver 1.2 **** AND   ( B.FOD_ORDR_STTS !='J' *****************
                         OR ( B.FOD_ORDR_STTS ='J' AND FXB_XCHNG_RMRKS !='Resource not available')) ***** 
                       ****** Ver 1.2 Ends Here *******/
                      )
							/*** Added for Ver 1.1 ****/
              UNION
								SELECT
                    FOD_CLM_MTCH_ACCNT,
                    FOD_CLNT_CTGRY,
                    FOD_ORDR_RFRNC,
                    FOD_PIPE_ID,
                    FOD_XCHNG_CD,
                    FOD_PRDCT_TYP,
                    FOD_INDSTK,
                    FOD_UNDRLYNG,
                    FOD_EXPRY_DT,
                    FOD_EXER_TYP,
                    FOD_OPT_TYP,
                    FOD_STRK_PRC,
                    FOD_ORDR_FLW,
                    FOD_LMT_MRKT_SL_FLG,
                    FOD_DSCLSD_QTY,
                    FOD_ORDR_TOT_QTY,
                    FOD_LMT_RT,
                    FOD_STP_LSS_TGR,
                    FOD_ORDR_TYPE,
                    FOD_ORDR_VALID_DT,
                    FOD_TRD_DT,
                    FOD_ORDR_STTS,
                    FOD_EXEC_QTY,
                    FOD_CNCL_QTY,
                    FOD_ORDR_TOT_QTY - NVL(FOD_EXEC_QTY,0) - NVL(FOD_CNCL_QTY,0),
                    FOD_MDFCTN_CNTR,
                    FOD_SLTP_ORDR_RFRNC,
                    FOD_SPN_FLG,
                    FOD_USR_ID,
                    'N'
                FROM  FOD_FO_ORDR_DTLS A, FXB_FO_XCHNG_BOOK
                WHERE A.FOD_TRD_DT  = :c_trade_date
                AND   A.FOD_XCHNG_CD = :c_xchng_cd
                AND   A.FOD_ORDR_TYPE = 'V'
                AND   A.FOD_PRDCT_TYP = 'F'
                AND   A.FOD_ORDR_STTS = 'J'
                AND   NVL(A.FOD_FC_FLAG,'N') !='Y'   /*** Ver 1.3 ***/
                AND   A.FOD_SLTP_ORDR_RFRNC IS NOT NULL
                AND   A.FOD_ORDR_VALID_DT >= :sql_exg_nxt_trd_dt
                AND   A.FOD_ORDR_RFRNC = FXB_ORDR_RFRNC
                AND   A.FOD_XCHNG_CD = FXB_XCHNG_CD
                AND   A.FOD_MDFCTN_CNTR = FXB_MDFCTN_CNTR
								AND		(FXB_XCHNG_RMRKS like '%Your order is outside the price range%'
											OR FXB_XCHNG_RMRKS like '%Your order is outside the specified price range%'
											OR FXB_XCHNG_RMRKS like '%Price entered by you  is beyond the price range permitted by exchange%'
											OR FXB_XCHNG_RMRKS like '%The order price is out of the days price range%')
                AND   A.FOD_SLTP_ORDR_RFRNC not in    /** Do not consider already placed orders ***/ 
                      (
                       select FOD_SLTP_ORDR_RFRNC
                       FROM FOD_FO_ORDR_DTLS B,FXB_FO_XCHNG_BOOK
                      WHERE B.FOD_SLTP_ORDR_RFRNC = A.FOD_SLTP_ORDR_RFRNC
                        AND   B.FOD_TRD_DT = :sql_exg_nxt_trd_dt
                        AND   B.FOD_XCHNG_CD=A.FOD_XCHNG_CD 
                        AND   B.FOD_XCHNG_CD = :c_xchng_cd
                        AND   B.FOD_CLM_MTCH_ACCNT = A.FOD_CLM_MTCH_ACCNT
                        AND   B.FOD_ORDR_RFRNC = FXB_ORDR_RFRNC
                        AND   B.FOD_XCHNG_CD = FXB_XCHNG_CD
                        AND   B.FOD_MDFCTN_CNTR = FXB_MDFCTN_CNTR
                      )
								/*** End of Ver 1.1 **/
								); 
  }
  else if( c_run_mode== 'R' )
  {
    fn_userlog(c_ServiceName,"Inside ReRun");
    EXEC SQL
     INSERT INTO TMP_FOVTC_ORDR_DTLS
                 (  FOD_CLM_MTCH_ACCNT,
                    FOD_CLNT_CTGRY,
                    FOD_ORDR_RFRNC,
                    FOD_PIPE_ID,
                    FOD_XCHNG_CD,
                    FOD_PRDCT_TYP,
                    FOD_INDSTK,
                    FOD_UNDRLYNG,
                    FOD_EXPRY_DT,
                    FOD_EXER_TYP,
                    FOD_OPT_TYP,
                    FOD_STRK_PRC,
                    FOD_ORDR_FLW,
                    FOD_LMT_MRKT_SL_FLG,
                    FOD_DSCLSD_QTY,
                    FOD_ORDR_TOT_QTY,
                    FOD_LMT_RT,
                    FOD_STP_LSS_TGR,
                    FOD_ORDR_TYPE,
                    FOD_ORDR_VALID_DT,
                    FOD_TRD_DT,
                    FOD_ORDR_STTS,
                    FOD_EXEC_QTY,
                    FOD_CNCL_QTY,
                    FOD_EXPRD_QTY,
                    FOD_MDFCTN_CNTR,
                    FOD_SLTP_ORDR_RFRNC,
                    FOD_SPN_FLG,
                    FOD_USR_ID,
                    FOD_PACK_FLG
                 )
                 (
                  /****** Commented in ver 1.2 *****************
                  SELECT
                    FOD_CLM_MTCH_ACCNT,
                    FOD_CLNT_CTGRY,
                    FOD_ORDR_RFRNC,
                    FOD_PIPE_ID,
                    FOD_XCHNG_CD,
                    FOD_PRDCT_TYP,
                    FOD_INDSTK,
                    FOD_UNDRLYNG,
                    FOD_EXPRY_DT,
                    FOD_EXER_TYP,
                    FOD_OPT_TYP,
                    FOD_STRK_PRC,
                    FOD_ORDR_FLW,
                    FOD_LMT_MRKT_SL_FLG,
                    FOD_DSCLSD_QTY,
                    FOD_ORDR_TOT_QTY,
                    FOD_LMT_RT,
                    FOD_STP_LSS_TGR,
                    FOD_ORDR_TYPE,
                    FOD_ORDR_VALID_DT,
                    FOD_TRD_DT,
                    FOD_ORDR_STTS,
                    FOD_EXEC_QTY,
                    FOD_CNCL_QTY,
                    FOD_ORDR_TOT_QTY,
                    FOD_MDFCTN_CNTR,
                    FOD_SLTP_ORDR_RFRNC,
                    FOD_SPN_FLG,
                    FOD_USR_ID,
                    'N'
                  FROM  FOD_FO_ORDR_DTLS
                  WHERE FOD_TRD_DT  = :sql_exg_nxt_trd_dt
                  AND   FOD_XCHNG_CD = :c_xchng_cd 
                  AND   FOD_ORDR_TYPE='V'
                  AND   FOD_PRDCT_TYP ='F'
                  AND   FOD_ORDR_STTS ='J'
                  AND   FOD_CHANNEL ='SYS'
                  AND   FOD_SLTP_ORDR_RFRNC IS NOT NULL
                  AND   FOD_ORDR_VALID_DT >= :sql_exg_nxt_trd_dt
                  AND EXISTS (SELECT 1                   *** Consider rejected orders which are resource not available **
                            FROM  FXB_FO_XCHNG_BOOK
                            WHERE FXB_ORDR_RFRNC = FOD_ORDR_RFRNC
                            AND   FXB_MDFCTN_CNTR = 1
                            AND   FXB_XCHNG_RMRKS = 'Resource not available')
                *************** UNION **************** Ver 1.2 ***************/
                  SELECT 
                    FOD_CLM_MTCH_ACCNT,
                    FOD_CLNT_CTGRY,
                    FOD_ORDR_RFRNC,
                    FOD_PIPE_ID,
                    FOD_XCHNG_CD,
                    FOD_PRDCT_TYP,
                    FOD_INDSTK,
                    FOD_UNDRLYNG,
                    FOD_EXPRY_DT,
                    FOD_EXER_TYP,
                    FOD_OPT_TYP,
                    FOD_STRK_PRC,
                    FOD_ORDR_FLW,
                    FOD_LMT_MRKT_SL_FLG,
                    FOD_DSCLSD_QTY,
                    FOD_ORDR_TOT_QTY,
                    FOD_LMT_RT,
                    FOD_STP_LSS_TGR,
                    FOD_ORDR_TYPE,
                    FOD_ORDR_VALID_DT,
                    FOD_TRD_DT,
                    FOD_ORDR_STTS,
                    FOD_EXEC_QTY,
                    FOD_CNCL_QTY,
                    FOD_EXPRD_QTY,
                    FOD_MDFCTN_CNTR,
                    FOD_SLTP_ORDR_RFRNC,
                    FOD_SPN_FLG,
                    FOD_USR_ID,
                    'N'
                FROM  FOD_FO_ORDR_DTLS A
               WHERE FOD_TRD_DT  =:c_trade_date
                 AND   FOD_XCHNG_CD = :c_xchng_cd
                 AND   FOD_ORDR_TYPE='V'
                 AND   FOD_PRDCT_TYP ='F'
                 AND   FOD_ORDR_STTS in ('X','B')
                 AND   FOD_SLTP_ORDR_RFRNC IS NOT NULL
                 AND   FOD_EXPRD_QTY > 0
                 AND   NVL(A.FOD_FC_FLAG,'N') !='Y'   /*** Ver 1.3 ***/
                 AND   FOD_ORDR_VALID_DT >=:sql_exg_nxt_trd_dt 
                 AND   FOD_SLTP_ORDR_RFRNC not in   /** Do not consider already placed orders **/
                       (
                        select FOD_SLTP_ORDR_RFRNC
                        FROM FOD_FO_ORDR_DTLS B,FXB_FO_XCHNG_BOOK
                        WHERE B.FOD_SLTP_ORDR_RFRNC = A.FOD_SLTP_ORDR_RFRNC
                        AND   B.FOD_XCHNG_CD = A.FOD_XCHNG_CD
                        AND   B.FOD_XCHNG_CD = :c_xchng_cd  
                        AND   B.FOD_TRD_DT =:sql_exg_nxt_trd_dt 
                        AND   B.FOD_CLM_MTCH_ACCNT = A.FOD_CLM_MTCH_ACCNT
                        AND   B.FOD_ORDR_RFRNC = FXB_ORDR_RFRNC
                        AND   B.FOD_XCHNG_CD = FXB_XCHNG_CD
                        AND   B.FOD_MDFCTN_CNTR = FXB_MDFCTN_CNTR
                        /*** Ver 1.2 *** AND   ( B.FOD_ORDR_STTS !='J' **************
                               OR ( B.FOD_ORDR_STTS ='J' AND FXB_XCHNG_RMRKS !='Resource not available')) ***
                        ****** Commented in Ver 1.2 ****/ 
                        /***** Ver 1.2 Starts Here *************/
                        AND   B.FOD_ORDR_STTS in ('R','J')
                        AND   FXB_XCHNG_RMRKS != 'Resource not available'
                        /***** ver 1.2 Ends here ***************/
                       )   
               );
  }  

  if( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31045", SQLMSG, c_err_msg);
    strcpy(c_msg, "Unable to insert into temporary table");
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    fn_upd_audittab(c_ServiceName, c_ServiceName, c_flg, c_xchng_cd, c_trade_date );
    tpfree( (char *)ptr_fml_Sbuffer);
    return;
  }

  i_row_cnt = sqlca.sqlerrd[2];
  i_tot_ord = i_row_cnt;

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"i_row_cnt :%d:",i_row_cnt);
  }

  if(i_row_cnt == 0)
  {
    sprintf(c_msg, "Processed records is 0");
    fn_bat_pst_msg( c_ServiceName, c_msg, c_tag );
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_errlog( c_ServiceName, "S31050",LIBMSG,c_err_msg);
    fn_upd_audittab(c_ServiceName, c_ServiceName, c_flg, c_xchng_cd, c_trade_date );
    tpfree( (char *)ptr_fml_Sbuffer);
    return;
  }

  if( i_row_cnt  >  0 ) 
  {

    li_cnt=0;
    l_record_count=0;

    EXEC SQL
    SELECT COUNT(distinct FOD_CLM_MTCH_ACCNT)
      INTO :l_record_count
      FROM TMP_FOVTC_ORDR_DTLS
     WHERE FOD_XCHNG_CD=:c_xchng_cd;

    if(SQLCODE != 0)
    {
      fn_errlog(c_ServiceName, "S31055", SQLMSG, c_err_msg);
      strcpy(c_msg, "System Error, Contact System Support !");
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      tpfree( (char *)ptr_fml_Sbuffer);
      fn_upd_audittab(c_ServiceName, c_ServiceName, c_flg, c_xchng_cd, c_trade_date );
      return;
    }
    
    EXEC SQL
      DECLARE cur_vtc_usr CURSOR FOR
      SELECT FOD_CLM_MTCH_ACCNT,
             FOD_XCHNG_CD,
             count(FOD_ORDR_RFRNC)
        FROM TMP_FOVTC_ORDR_DTLS
       WHERE FOD_XCHNG_CD=:c_xchng_cd 
       GROUP BY FOD_CLM_MTCH_ACCNT,FOD_XCHNG_CD
       ORDER BY 2 DESC;

    EXEC SQL OPEN cur_vtc_usr;   

    if(SQLCODE != 0)
    {
      fn_errlog(c_ServiceName, "S31060", SQLMSG, c_err_msg);
      strcpy(c_msg, "System Error, Contact System Support !");
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      tpfree( (char *)ptr_fml_Sbuffer);
      fn_upd_audittab(c_ServiceName, c_ServiceName, c_flg, c_xchng_cd, c_trade_date );
      return;
    }
  
    while(1)
    {
       MEMSET(c_clm_mtch_acc);
       i_tot_ord_cnt = 0;
 
       EXEC SQL
          FETCH cur_vtc_usr
          INTO :c_clm_mtch_acc,
               :c_xchng_cd,
               :i_tot_ord_cnt;

       if(SQLCODE != 0)
       {
         if(SQLCODE == NO_DATA_FOUND)
         {
           fn_userlog(c_ServiceName, "Inside NO_DATA_FOUND : while selecting User Id and total ord count.");
           EXEC SQL CLOSE cur_vtc_usr;
           break;
         }
         else
         {
           fn_errlog(c_ServiceName, "S31065", SQLMSG, c_err_msg);
      		 strcpy(c_msg, "System Error, Contact System Support !");
      		 fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      		 tpfree( (char *)ptr_fml_Sbuffer);
      		 fn_upd_audittab(c_ServiceName, c_ServiceName, c_flg, c_xchng_cd, c_trade_date );
      		 return;
         } 
       }

       rtrim(c_clm_mtch_acc);
       li_cnt ++;  
         fn_userlog(c_ServiceName,"Match ID selected:%s:, TOtal orders(i_tot_ord_cnt):%d:",c_clm_mtch_acc,i_tot_ord_cnt)
;
       i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                  c_err_msg,
                                  "sfr_adm_pipo",
                                  li_cnt,
                                  l_record_count);

      if(i_ch_val == -1)
      {
        fn_errlog(c_ServiceName, "S31070", LIBMSG, c_err_msg);
        strcpy(c_msg, "System Error, Contact System Support !");
        fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
        tpfree( (char *)ptr_fml_Sbuffer);
        EXEC SQL CLOSE cur_vtc_usr; 
        fn_upd_audittab(c_ServiceName, c_ServiceName, c_flg, c_xchng_cd, c_trade_date );
        return;
      }

      i_err[0] = Fchg32(ptr_fml_Sbuffer,FFO_EBA_MTCH_ACT_NO,0,(char *)c_clm_mtch_acc,0) ;
      i_ferr[0] = Ferror32;
      i_err[1] = Fchg32(ptr_fml_Sbuffer,FFO_MST_ACT_CNTRCT_CNT,0,(char *)&i_tot_ord_cnt,0) ;
      i_ferr[1] = Ferror32;
      i_err[2] = Fchg32(ptr_fml_Sbuffer,FFO_XCHNG_CD,0,(char *)c_xchng_cd,0) ;
      i_ferr[2] = Ferror32;
      for(i_loop=0;i_loop<=2;i_loop++)
      {
       if(i_err[i_loop] == -1)
       {
         fn_userlog(c_ServiceName,"Error in Fadd for i [%d]",i_loop);
         fn_errlog( c_ServiceName, "S31075", FMLMSG, c_err_msg  );
         fn_bat_pst_msg(c_ServiceName,"system error occured..exiting",c_tag);
         tpfree( (char *)ptr_fml_Sbuffer);
         EXEC SQL CLOSE cur_vtc_usr; 
         fn_upd_audittab(c_ServiceName, c_ServiceName, c_flg, c_xchng_cd, c_trade_date );
         return;
       }
      }

      if(tpacall("SFO_PLC_VTC",(char *)ptr_fml_Sbuffer,0,TPNOTIME|TPNOTRAN) == -1)
      {
        fn_errlog(c_ServiceName, "S31080", TPMSG, c_err_msg);
        strcpy(c_msg, "System Error, Contact System Support !");
        fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
        tpfree( (char *)ptr_fml_Sbuffer);
        EXEC SQL CLOSE cur_vtc_usr;
        fn_upd_audittab(c_ServiceName, c_ServiceName, c_flg, c_xchng_cd, c_trade_date );
        return;
      }

    } /** End Of while **/
 
  }
 
  EXEC SQL
    SELECT  apr_succ_flg
    INTO    :c_flg_chk
    FROM audit_prog_runstts
    WHERE  apr_prog_name = :c_ServiceName
    AND    apr_trd_dt =:c_trade_date
    AND    apr_xchng_cd = :c_xchng_cd
    AND    apr_time = ( SELECT max(apr_time)
                        FROM   audit_prog_runstts
                        where  apr_prog_name = :c_ServiceName
                        AND   apr_xchng_cd = :c_xchng_cd  );

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31085", SQLMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_upd_audittab(c_ServiceName, c_ServiceName, c_flg, c_xchng_cd, c_trade_date );
    return;
  }

  if (c_flg_chk != 'F')
  {
    c_flg='P';
    fn_upd_audittab(c_ServiceName, c_ServiceName, c_flg, c_xchng_cd, c_trade_date);
  } 

  sprintf(c_msg,"For order date :%s: Total number of VTC orders :%d:",sql_exg_nxt_trd_dt.arr,i_tot_ord);
  fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);

  sprintf(c_msg,"Process completed Successfully.");  
  fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);

  MEMSET(c_command);

  sprintf(c_command,"ksh %s/sh_scripts/fo_vtc_process_mail.sh &",tuxgetenv("HOME"));
 
  system(c_command); 

  tpfree( (char *)ptr_fml_Sbuffer);
 
  return ;

}

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_PLC_VTC;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}

int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
  return 0;
}

int fn_audit_pgm(char* c_ServiceName,
                 char* c_trade_date, 
                 char* c_xchng_cd,
                 char* c_err_msg
                )
{
  int i_trnsctn=0;


  i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31090", LIBMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    return -1;
  }

  EXEC SQL
        INSERT INTO audit_prog_runstts
                 (
                    APR_PROG_NAME,
                    APR_TIME,
                    APR_SUCC_FLG,
                    APR_TRD_DT,
                    APR_XCHNG_CD
                 )
          VALUES (
                    :c_ServiceName,
                    sysdate,
                    'N',
                    :c_trade_date,
                    :c_xchng_cd
                  );

  if( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31095", SQLMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog(c_ServiceName, "S31100", LIBMSG, c_err_msg);
    fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }
return 0;
}
 
