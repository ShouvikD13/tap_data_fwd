/*******************************************************************************************************/
/*   Service       : bat_focnt_click.pc																				 					               */
/*                                                                             					               */
/*   Purpose       : Bulk upload of FNO contract notes to click database tables					               */
/*                                                                             					               */
/*                                                                             					               */
/*   Input Param   : For date                                                  					               */
/*                                                                             					               */
/*   Output        : Success/Failure																					 					               */
/*                                                                             					               */
/*   Author        : ICICI Infotech                                            					               */
/*                                                                             					               */
/*   Date          : 24-03-2008                                                					               */
/*                                                                             					               */
/*   Version       :  1.0      Release                                         					               */
/*								 :	1.1		   Shamili : Addition of extra charges             					               */ 
/*                 :  1.2      Diwakar : Get PAN NO from ICIS                  					               */
/*                 :  1.3      Diwakar : Parameter for mail send option        					               */
/*                 :  1.4      Diwakar : ATG changes                           					               */
/*								 :  1.5 		 Umesh   : Changes for CRARE28117 (April 2009)	 				                 */	
/*                 :  1.6      Navina  : BSE ORS Changes (10-Feb-2012)         					               */
/*                 :  1.7      Diwakar : 26-Mar-2012 Physical Statement CR-ISEC0318209 	               */
/*								 : 	1.8			 Pradnya : 22-Jun-2012 Bug fix for Pin code			 					               */
/*								 : 	1.9			 Sandip :  25-Jun-2012 NO_DATA_FOUND Handling for					               */
/*																				 temp table insert[ FAD]             					               */
/*								 : 	2.0			 Sachin :  20-Jan-2014 Contract Note Changes     					               */
/*                                       for RMS System Square off             					               */
/*								 :  2.1			 Vishnu	: 11-Mar-2014 BSE ACK Changes						 					               */
/*								 :  2.2			 Sandip	: 30-Jul-2014 CR-ISEC27-53835 CN Format changes		               */
/*								 :  2.3			 Sandip	: 03-Jun-2015 RCR-ISEC03-63562 Name changes				               */
/*								 :  2.4			 Diwakar: 02-Jul-2015 TEMP changes												               */
/*								 :  2.5			 Sandip/Samip: 11-Nov-2016 CNT Address changes   					               */
/*								 :  2.6			 Sandip: 14-Mar-2017 No obligation case handling 					               */
/*								 :  2.7			 Sandip: 23-Jun-2017 GST Changes                 					               */
/*                 :  2.8      Tanmay P : 07-Mar-2018 Handling ContractNote Dummy Email                */
/*								 :  2.9			 Mrinal Kishore : Tagging of physically settled contract	               */
/*                 :  3.0      Anuj Pancholi: 10-Jul-2019 Handling Truncate for simultaneous Batch run */ 
/*                 :  3.1      Sandip T: 14-Dec-2021 CR-ISEC03-161468-Changes in CN & othr deliverables*/ 
/*******************************************************************************************************/
#include <stdio.h>      /* C Header File                */
#include <stdlib.h>     /* C Header File                */
#include <sqlca.h>      /* Oracle header file           */
#include <atmi.h>       /* TUXEDO Header File           */
#include <fml32.h>      /* TUXEDO Header File           */
#include <Usysflds.h>   /* TUXEDO Field Definitions     */
#include <fml_def.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fml_rout.h>
#include <fn_ddr.h>
#include <eba.h>
#include <string.h>
#include <fn_read_debug_lvl.h>
#include <fo_fml_def.h>

/*#define MEMSET(A) memset(&A,'\0',sizeof(A));  */
#define MAX_REC 1000

FBFR32    *ptr_fml_Sbuffer;
FBFR32    *ptr_fml_Rbuffer;

FBFR32    *ptr_Sbuf; /** Ver 3.1 **/
FBFR32    *ptr_Rbuf; /** Ver 3.1 **/

long    l_bufferlength;
long    li_len_tobuf;
long    l_rows_fetched;

long		l_count_fcm;
long		l_count_fcd;
long		l_count_fad;

int     i_max_rec_per_fetch = MAX_REC;
int     i_ch_val;
int     i_ret_val;
int     i_err[10];
int 		i_mode;					/* Ver 1.3 **/

char    c_ServiceName[33];
char    c_errmsg[256];
char    c_xchng_cd[4] = {'\0'};
char    c_for_date[25] = {'\0'};
char    c_event[256];				/** Ver 1.5*/

struct fno_cntrct_mstr
{
		char		sql_fcm_usr_mtch_accno[20+1];
		char		sql_fcm_excng_cd[3+1];
		char		sql_fcm_cntrct_nmbr[50+1];
		char		sql_fcm_cntrct_dt[24+1];
		char		c_fcm_cntrct_flg;
		long		l_fcm_record_id;
		char		sql_fcm_filename[50+1];
		char		sql_fcm_usr_nm[150+1];
		char		sql_fcm_addr1[100+1];			/** Ver 1.1*/
		char		sql_fcm_addr2[100+1];			 /** Ver 1.1*/
		char		sql_fcm_addr3[100+1];			 /** Ver 1.1*/
		char		sql_fcm_addr4[100+1];			  /** Ver 1.1*/
		char		sql_fcm_ucc_cd[25+1];
		char		sql_fcm_trd_cd[20+1];
		char		sql_fcm_pan_no[50+1];
		char		sql_fcm_tel_no[50+1];
		char		sql_fcm_email_id1[100+1];
		char		sql_fcm_email_id2[100+1];
		double	d_fcm_total;
		double	d_fcm_stt;
		double	d_fcm_trns_chrg;        /** Ver 1.1*/
		double  d_fcm_stmp_duty;        /** Ver 1.1*/
		double  d_fcm_sebi_srv_tx;      /** Ver 1.1*/
		char    sql_fcm_deal_off_aval_flg;				/** Ver 1.5*/
    char    sql_fcm_deal_off_addr1[300+1];		/** Ver 1.5*/	/** Length changed from 100 to 300 for Ver 2.5 **/
    char    sql_fcm_deal_off_addr2[300+1];		/** Ver 1.5*/ /** Length changed from 100 to 300 for Ver 2.5 **/
    char    sql_fcm_deal_off_city[30+1];			/** Ver 1.5*/
    char    sql_fcm_deal_off_zip[20+1];				/** Ver 1.5*/
    char    sql_fcm_deal_off_state[30+1];			/** Ver 1.5*/
    char    sql_fcm_deal_off_cntry[30+1];			/** Ver 1.5*/
    char    sql_fcm_deal_off_phone[30+1];			/** Ver 1.5*/
		char    sql_fcm_deal_off_fax[30+1];				/** Ver 1.5*/
		char    sql_fcm_mobile[15+1];		      		/** Ver 1.7*/
		double  d_fcm_net_pay_amnt;								/** Ver 2.2*/
		double  d_fcm_src_tx;											/** Ver 2.2*/
		double  d_fcm_brkrg_igst;									/** Ver 2.7*/
		double  d_fcm_brkrg_cgst;									/** Ver 2.7*/
		double  d_fcm_brkrg_sgst;									/** Ver 2.7*/
		double  d_fcm_brkrg_ugst;									/** Ver 2.7*/
		double  d_fcm_net_tot;										/** Ver 2.2*/
		double  d_fcm_tot_brkg;										/** Ver 2.2*/
		double  d_fcm_pipo_obl;										/** Ver 2.2*/
		char    sql_fcm_prncpl_buis_state_cd[2+1];		/** Ver 2.7*/
		char    sql_fcm_prncpl_buis_brnch_cd[10+1];		/** Ver 2.7*/
		char    sql_fcm_cust_gst_st_cd[2+1];		 /** Ver 2.7*/
		char    sql_fcm_isec_gstin[20+1];		    /** Ver 2.7*/
		char    sql_fcm_cust_gstin[20+1];		    /** Ver 2.7*/
		double  d_fcm_igst_prcnt;									/** Ver 2.7*/
		double  d_fcm_cgst_prcnt;									/** Ver 2.7*/
		double  d_fcm_sgst_prcnt;									/** Ver 2.7*/
		double  d_fcm_ugst_prcnt;									/** Ver 2.7*/
		double  d_fcm_trn_tx_igst;								/** Ver 2.7*/
		double  d_fcm_trn_tx_cgst;								/** Ver 2.7*/
		double  d_fcm_trn_tx_sgst;								/** Ver 2.7*/
		double  d_fcm_trn_tx_ugst;								/** Ver 2.7*/
		double  d_fcm_total_igst;								/** Ver 2.7*/
		double  d_fcm_total_cgst;								/** Ver 2.7*/
		double  d_fcm_total_sgst;								/** Ver 2.7*/
		double  d_fcm_total_ugst;								/** Ver 2.7*/
};

struct fno_cntrct_dtls
{
		char		sql_fcd_cntrct_nmbr[50+1];
		char		sql_fcd_usr_mtch_accno[20+1];
		char		sql_fcd_cntrct_dt[24+1];
		long		l_fcd_record_id;
		char		sql_fcd_ordr_ref[19+1];  /* Ver 2.1 Increased size from 17 to 20 */
		char		sql_fcd_ordr_tm[25+1];
		char		sql_fcd_trd_ref[15+1];
		char		sql_fcd_trd_tm[10+1];
		char		c_fcd_trd_flw;
		double	d_fcd_prc;
		long		l_fcd_qty;
		double	d_fcd_brkg;
		double	d_fcd_src_tx;
		double	d_fcd_stt;
		double	d_fcd_strk_prc;
		double	d_fcd_cntrct_amt;
		char		sql_fcd_cntrct_specs[150+1];
		double	d_fcd_amt_instt;
		double	d_fcd_total;
    char	 	sql_fcd_xchng_cd[3+1];		/** Ver 1.4*/
		char    sql_fcd_series_cd[23+1];	/** Ver 1.6 bse **/
		double  sql_fcd_mkt_lot;					/** Ver 1.6 bse **/
		double  sql_fcd_no_of_cntrcts;		/** Ver 1.6 bse **/
		double  sql_fcd_brkrg_per_cntrct;	 /** Ver 1.6 bse **/
		double	d_fcd_total_igst;				/** Ver 2.7*/
		double	d_fcd_total_cgst;				/** Ver 2.7*/
		double	d_fcd_total_sgst;				/** Ver 2.7*/
		double	d_fcd_total_ugst;				/** Ver 2.7*/
		double	d_fcd_cs_prc;						/** Ver 3.1 **/
};

struct fno_annx_dtls
{
		char		sql_fad_cntrct_nmbr[50+1];
		char		sql_fad_mtch_accnt[20+1];
		char		sql_fad_cntrct_dt[24+1];
		long		l_fad_record_id;
		char		sql_fad_undrlyng[150+1];
		char		sql_fad_exp_dt[24+1];
		double	d_fad_fut_sell;
		double	d_fad_fut_stt;
		double	d_fad_opt_sell;
		double	d_fad_opt_stt;
		double	d_fad_tot_stt;
		char		sql_fad_xchng_cd[3+1];		/** Ver 1.4*/
};

int fn_populate_fcm(void);
int fn_populate_fcd(void);
int fn_populate_fad(void);
int fn_ins_log_hdr(void);

int fn_upld_tmp(void); 


EXEC SQL BEGIN DECLARE SECTION;   /** ver 2.5 **/
	varchar v_sql_string[15000]; 	
EXEC SQL END DECLARE SECTION;

void BAT_FOCNT_CLICK (int argc, char* argv[] )
{

	long		l_err_cd = 0;
	int			i_cnt = 0;	/** Ver 2.5 **/
  int i_runindictr = 0; /** Ver 3.0 **/
	char   c_exchng_cd[4] = {'\0'};	/** Ver 3.1 **/
  int    i_no_rec =0;   /** Ver 3.1 **/	
  long l_recvbuff;   /** Ver 3.1 **/	
  strcpy(c_ServiceName, "bat_focnt_click");

/*********** Ver 1.3 **********
	if(argc != 5)
  {
    printf("USAGE <bat_focnt_click> <NFO> <NFO> <NA> <date>");
		return ;
  }
*********** Ver 1.3 ends ******/

/********* Ver 1.3 ***********/
	if(argc == 6)
  {
    i_mode = atol(argv[5]);
  }
  else if(argc != 5)
  {
    /*** printf("USAGE <bat_focnt_click> <NFO> <NFO> <NA> <date> <Mode (1-5) optional>"); Commented in Ver 1.6 ***/
		printf("USAGE <bat_focnt_click> <NFO/BFO> <NFO/BFO> <NA> <date> <Mode (1-5) optional>");		/*** Ver 1.6 ***/
    return ;
  }
  else
  {
    i_mode =1;
  }
/****** Ver 1.3 ends ********/
		
	INITBATDBGLVL(argv[0]);

	strcpy(c_for_date,argv[4]);	

	strcpy ( c_tag, "bat_focnt_click_" );
	strcat ( c_tag, argv[1]);
	/*** strcpy (c_xchng_cd,"NA");	***	Commented in Ver 1.6 ***/
	strcpy (c_xchng_cd,argv[2]);			/*** Ver 1.6 ***/
 
  /** Ver 3.0 starts  **/
  EXEC SQL
      SELECT count(1)
      INTO  :i_runindictr
      from BPS_BTCH_PGM_STTS
      WHERE BPS_STTS = 'R'
      AND   BPS_PGM_NAME = :c_ServiceName;

  if(SQLCODE != 0 )
  {
    strcpy(c_errmsg,"Query returns too many rows.");
    fn_errlog(c_ServiceName, "S31005", SQLMSG, c_errmsg );
    sprintf(c_event,"System error-contact sys.support");
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
    return;
  }
  fn_userlog(c_ServiceName,"i_runindictr value is %d",i_runindictr);

  if(i_runindictr > 1)
  {
    fn_errlog(c_ServiceName, "S31010", TPMSG, c_errmsg );
    if( strcmp(c_xchng_cd,"NFO") == 0 )
    {
     sprintf(c_event,"Please check process might be already running for BFO");
    }
    else if(strcmp(c_xchng_cd,"BFO") == 0 ) 
    {
     sprintf(c_event,"Please check process might be already running for NFO"); 
    }
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
    return;
  }

  /** Ver 3.0 ends **/
	/** Ver 3.1 Starts **/
	if(strcmp(c_xchng_cd,"NFO") == 0 )
	{
		strcpy (c_exchng_cd,"NSE");	
	}
	else if (strcmp(c_xchng_cd,"BFO") == 0 )
	{
		strcpy (c_exchng_cd,"BSE");	
	}
	else
	{
		fn_userlog(c_ServiceName,"Invalid exchange code");	
		return;
	}
	/** ver 3.1 Ends **/
 /** Ver 2.5 starts here **/
	i_cnt = 0;

	EXEC SQL
		SELECT  count(*)
		INTO    :i_cnt
		FROM    PRD_PGM_RUN_DTLS
		WHERE   PRD_PGM_NAME      = 'bat_ers_adrs_pop'
		AND     TRUNC(PRD_TRD_DT) = :c_for_date;

	if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
	{
		fn_errlog(c_ServiceName, "S31015", SQLMSG, c_errmsg );
		sprintf(c_event,"System error-contact sys.support");
		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
		return;
	}

	if( i_cnt < 1)
	{
		strcpy(c_errmsg,"ERS Address population process not run.");
		fn_errlog(c_ServiceName, "S31020",TPMSG, c_errmsg);
		sprintf(c_event,"System error-contact sys.support");
		sprintf(c_event,"ERS Address population process not run.");
		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
		return;
	}

	/** Ver 2.5 ends here **/

	sprintf(c_event,"bat_focnt_click : started processing ");				/** Ver 1.5*/
  fn_bat_pst_msg(c_ServiceName,c_event,c_tag);										/** Ver 1.5*/


  EXEC SQL TRUNCATE TABLE TMP_FCM_CNTRCT_MSTR;

  if(SQLCODE != 0 )	
  {
    fn_errlog(c_ServiceName, "S31025", SQLMSG, c_errmsg );
    return ;
  }

  EXEC SQL TRUNCATE TABLE TMP_FCD_CNTRCT_DTLS; 

  if(SQLCODE != 0)	
  {
    fn_errlog(c_ServiceName, "S31030", SQLMSG, c_errmsg );
    return ; 
  }

  EXEC SQL TRUNCATE TABLE TMP_FAD_ANNX_DTLS;

  if(SQLCODE != 0 )			
  {
    fn_errlog(c_ServiceName, "S31035", SQLMSG, c_errmsg );
    return ;
  }
	/** Ver 3.1 to starts **/
  EXEC SQL TRUNCATE TABLE FCC_FO_CNTRCT_CLSPRC;     /* table where Closing price is download from class based on PS03 file **/

  if(SQLCODE != 0 )	
  {
    fn_errlog(c_ServiceName, "S31025", SQLMSG, c_errmsg );
    return ;
  }

   ptr_Sbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
    if (ptr_Sbuf == NULL)
    {
      fn_errlog(c_ServiceName,"S31040",TPMSG,c_errmsg);
      sprintf(c_event,"Buffer Allocation failure for CLS PRC download - Contact Support");
      fn_bat_pst_msg(c_ServiceName,c_event,c_tag);                     
      return ;
    }

    ptr_Rbuf= (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
    if (ptr_Rbuf== NULL)
    {
      fn_errlog(c_ServiceName, "S31045", TPMSG,c_errmsg);
      sprintf(c_event,"Buffer Allocation failure for CLS PRC download - Contact Support");
      fn_bat_pst_msg(c_ServiceName,c_event,c_tag);                     
      return ;
    }
		i_cnt=0;
    i_err[0]=Fadd32(ptr_Sbuf,FFO_XCHNG_CD,(char *)c_exchng_cd,0);
    i_err[1]=Fadd32(ptr_Sbuf,FFO_TRD_DT,(char *)c_for_date,0);
    for(i_cnt = 0;i_cnt < 2;i_cnt++)
    {
      if(i_err[i_cnt] == -1)
      {
        fn_errlog(c_ServiceName, "S31135", FMLMSG, c_errmsg);
        fn_userlog(c_ServiceName,"Error in CLS_PRC Fadd i_counter :%d:",i_cnt);
      	tpfree((char*)ptr_Rbuf);
      	tpfree((char*)ptr_Sbuf);
        sprintf(c_event,"System Error - Contact Support");      
        fn_bat_pst_msg(c_ServiceName,c_event,c_tag);          
        return;
      }
    }

    i_ch_val = tpcall("SFO_GET_CLSPRC", (char *)ptr_Sbuf, 0,
                       (char **)&ptr_Rbuf, &l_recvbuff, TPNOTIME);
    if (i_ch_val == -1)
    {
      fn_userlog(c_ServiceName,"Error in calling service for Closing Price Download");
      sprintf(c_event,"System Error - Contact Support");      
      fn_bat_pst_msg(c_ServiceName,c_event,c_tag);            
      if(TPCODE != TPESVCFAIL)
      {
        fn_errlog(c_ServiceName, "S31140", TPMSG, c_errmsg);
      }
      else
      {
          Fget32(ptr_Rbuf,FML_ERR_MSG,0,c_errmsg,0);
          fn_errlog(c_ServiceName, "S31145", c_errmsg, c_errmsg);
      }
      tpfree((char*)ptr_Rbuf);
      tpfree((char*)ptr_Sbuf);
      return;
    }
		Fget32(ptr_Rbuf, FML_QTY,0,(char *)&i_no_rec, 0);
		fn_userlog(c_ServiceName,"Total records doanloaded for Cls Price :%d:",i_no_rec);
	/** Ver 3.1 Ends **/

	if ( tpbegin( 0, 0 ) == -1 )
  {
    fn_errlog(c_ServiceName, "S31040", TPMSG, c_errmsg );
    return ;
  }

 	i_ret_val = fn_upld_tmp();

	if(i_ret_val == -1)
	{
		fn_errlog(c_ServiceName, "S31045",SQLMSG, c_errmsg);
		tpabort(0);
    return ;
	}

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Data upload to temp table completed");
  }
	  sprintf(c_event,"Data upload to temp table completed");					/** Ver 1.5*/
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);										/** Ver 1.5*/

  if ( tpcommit(0) == -1 )
  {
    tpabort(0);
    fn_errlog(c_ServiceName, "S31050", TPMSG, c_errmsg );
    return;
  }

	ptr_fml_Rbuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
  if (ptr_fml_Rbuffer == NULL)
  {
    fn_errlog(c_ServiceName, "S31055", TPMSG, c_errmsg);
    fn_userlog(c_ServiceName,"Click Upload:Unable to Allocate Receive Memory ..");
		sprintf(c_event,"System Error - Contact Support");					/** Ver 1.5*/
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);																	/** Ver 1.5*/
    return ;
  }

	if ( tpbegin( 0, 0 ) == -1 )
  {
    fn_errlog(c_ServiceName, "S31060", TPMSG, c_errmsg );
    fn_dstry_rs ( ptr_fml_Rbuffer );
    return ;
  }

	i_ret_val = fn_populate_fcm();

  if(i_ret_val == -1)
  {
    tpabort ( 0 );
    fn_userlog(c_ServiceName,"Failed to populate FCM");
		sprintf(c_event,"System Error - Contact Support");					/** Ver 1.5*/
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);				/** Ver 1.5*/
    fn_dstry_rs (ptr_fml_Sbuffer );
    fn_dstry_rs ( ptr_fml_Rbuffer );
    return ;

  }

	i_ret_val = fn_populate_fcd();

  if(i_ret_val == -1)
  {
    tpabort ( 0 );
    fn_userlog(c_ServiceName,"Failed to populate FCD");
		sprintf(c_event,"System Error - Contact Support");					/** Ver 1.5*/
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);				/** Ver 1.5*/
    fn_dstry_rs (  ptr_fml_Sbuffer );
    fn_dstry_rs (  ptr_fml_Rbuffer );
    return ;

  }

	i_ret_val = fn_populate_fad();

  if(i_ret_val == -1)
  {
    tpabort ( 0 );
    fn_userlog(c_ServiceName,"Failed to populate FAD");
		sprintf(c_event,"System Error - Contact Support");					/** Ver 1.5*/
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);				/** Ver 1.5*/
    fn_dstry_rs ( ptr_fml_Sbuffer );
    fn_dstry_rs ( ptr_fml_Rbuffer );
    return ;

  }
	
	if(l_count_fcm > 0)
	{
		i_ret_val = fn_ins_log_hdr();

		if(i_ret_val == -1)
		{
			tpabort ( 0 );
			fn_userlog(c_ServiceName,"Failed to update LOG HEADER");
			sprintf(c_event,"System Error - Contact Support");						/** Ver 1.5*/
      fn_bat_pst_msg(c_ServiceName,c_event,c_tag);							/** Ver 1.5*/	
			fn_dstry_rs ( ptr_fml_Sbuffer );
			fn_dstry_rs ( ptr_fml_Rbuffer );
			return ;
		}
	}

	if ( tpcommit(0) == -1 )
  {
    tpabort(0);
    fn_errlog(c_ServiceName, "S31065", TPMSG,c_errmsg );
    fn_dstry_rs ( ptr_fml_Sbuffer );
    fn_dstry_rs ( ptr_fml_Rbuffer );
    return ;
  }

  sprintf(c_event,"bat_focnt_click : processing ended");       /** Ver 1.5*/
  fn_bat_pst_msg(c_ServiceName,c_event,c_tag);                    /** Ver 1.5*/

  fn_dstry_rs( ptr_fml_Rbuffer);
  return ;
	
}


int fn_upld_tmp(void)
{
	EXEC  SQL
    EXECUTE
      BEGIN
          RESET_SEQUENCE('SEQ_CLKFNO_RECNO');
      END;
  END-EXEC;

  if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in sequence number resetting");
			sprintf(c_event,"System Error - Contact Support");						/** Ver 1.5*/
      fn_bat_pst_msg(c_ServiceName,c_event,c_tag);											/** Ver 1.5*/
      fn_errlog(c_ServiceName,"S31070",SQLMSG,c_errmsg);
			return -1;
  }	

	EXEC  SQL
    EXECUTE
      BEGIN
          RESET_SEQUENCE('SEQ_CLKFNO_NMBR');
      END;
  END-EXEC;

  if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in sequence number resetting");
			sprintf(c_event,"System Error - Contact Support");					/** Ver 1.5*/
      fn_bat_pst_msg(c_ServiceName,c_event,c_tag);										/** Ver 1.5*/
      fn_errlog(c_ServiceName,"S31075",SQLMSG, c_errmsg);
			return -1;
  }	

	fn_userlog(c_ServiceName,"uploading in FCM..........");

	EXEC SQL
		INSERT INTO 
			TMP_FCM_CNTRCT_MSTR
				(	FCM_USR_MTCH_ACCNO ,
					FCM_EXCNG_CD       ,
					FCM_CNTRCT_NMBR    ,
					FCM_CNTRCT_DT      ,
					FCM_CNTRCT_FLG     ,
					FCM_RECORD_ID      ,
					FCM_FILENAME			 ,
					FCM_USR_NM         ,
					FCM_ADDR1          ,
					FCM_ADDR2          ,
					FCM_ADDR3          ,
					FCM_ADDR4          ,
					FCM_UCC_CD         ,
					FCM_TRD_CD         ,
					FCM_PAN_NO         ,
					FCM_TEL_NO         ,
					FCM_EMAIL_ID1      ,
					FCM_EMAIL_ID2      ,
					FCM_TOTAL          ,
					FCM_STT            ,																		
				  FCM_TRNS_CHRG			 ,																		/*1.1*/	
					FCM_STMP_DUTY			 ,																		/*1.1*/
					FCM_SEBI_SRV_TX		 ,																		/*1.1*/
					FCM_SEQ_NO         ,
					FCM_TRUNC_DT       ,
				  fcm_deal_off_aval_flg,								/** Ver 1.5*/
          fcm_deal_off_addr1,										/** Ver 1.5*/
          fcm_deal_off_addr2,										/** Ver 1.5*/
          fcm_deal_off_city,										/** Ver 1.5*/
          fcm_deal_off_zip,											/** Ver 1.5*/
          fcm_deal_off_state,										/** Ver 1.5*/
          fcm_deal_off_cntry,										/** Ver 1.5*/
          fcm_deal_off_phone,										/** Ver 1.5*/
					fcm_deal_off_fax,											/** Ver 1.5*/
          FCM_MOBILE,                            /** Ver 1.7*/
					FCM_NET_PAY_AMNT,											/** Ver 2.2 */
					FCM_SRC_TX,														/** Ver 2.2 */
					FCM_BRKRG_IGST,												/** Ver 2.7 */
					FCM_BRKRG_CGST,												/** Ver 2.7 */
					FCM_BRKRG_SGST,												/** Ver 2.7 */
					FCM_BRKRG_UGST,												/** Ver 2.7*/
					FCM_NET_TOT ,											/** Ver 2.2 */
					FCM_TOT_BRKG,										/** Ver 2.2 */
					FCM_PIPO_OBL,										/** Ver 2.2 */
					FCM_PRNCPL_BUIS_STATE_CD,							/** Ver 2.7 **/
					FCM_PRNCPL_BUIS_BRNCH_CD,             /** Ver 2.7 **/
					FCM_CUST_GST_ST_CD,										/** Ver 2.7 **/
					FCM_ISEC_GSTIN,												/** Ver 2.7 **/
					FCM_CUST_GSTIN,												/** Ver 2.7 **/
					FCM_IGST_PRCNT,												/** Ver 2.7 **/
					FCM_CGST_PRCNT,												/** Ver 2.7 **/
					FCM_SGST_PRCNT,												/** Ver 2.7 **/
					FCM_UGST_PRCNT,												/** Ver 2.7 **/
					FCM_TRN_IGST,													/** Ver 2.7 **/
					FCM_TRN_CGST,													/** Ver 2.7 **/
					FCM_TRN_SGST,													/** Ver 2.7 **/
					FCM_TRN_UGST,													/** Ver 2.7 **/
					FCM_TOTAL_IGST,													/** Ver 2.7 **/
					FCM_TOTAL_CGST,													/** Ver 2.7 **/
					FCM_TOTAL_SGST,													/** Ver 2.7 **/
					FCM_TOTAL_UGST													/** Ver 2.7 **/
				)
				(
					SELECT
							FCM_USR_MTCH_ACCNO,
              FCM_EXCNG_CD,
              FCM_CNTRCT_NMBR,
              FCM_CNTRCT_DT,
              FCM_CNTRCT_FLG,
              SEQ_CLKFNO_RECNO.NEXTVAL,
						/**TO_CHAR(FCM_CNTRCT_DT,'yyyymmdd')||'_NFO_'||REPLACE(SUBSTR(FCM_CNTRCT_NMBR,1,11),'/','_')||SUBSTR(FCM_CNTRCT_NMBR,13), *************** commented Ver 1.7 **/
              /* DEAL_OFF_ZIP */ IAD_PIN || '_' || substr(FCM_USR_MTCH_ACCNO,1,3) || lpad(IAI_SERIAL_NO,10,'0') || '_' || to_char(FCM_CNTRCT_DT,'YYYYMMDD') || '_' || SEQ_CLKFNO_RECNO.CURRVAL || '_' || :c_xchng_cd , /** Ver 1.7 _NFO replaced with variable due to fno bse changes**/ /* IAD_PIN added inseted of DEAL_OFF_ZIP in ver 1.8 */
              FCM_USR_NM,
              ADD_LN1,
              ADD_LN2,
              ADD_LN3,
              ADD_LN4,
              FCM_UCC_CD,
							FCM_USR_MTCH_ACCNO,
              IID_NO,																	/*1.2 changed from FCM_PAN_NO to IID_NO */
              FCM_TEL_NO,
      /***    USR_EMAIL_ADDRSS,
              USR_EMAIL_ADDRSS2,  *** Commented in Ver 2.8 ***/
              IPD_EMAIL,         /** Ver 2.8 **/
              null,							 /** Ver 2.8 **/
              SUM_FCD_STT,
              ROUND_FCD_STT	,
							SUM_FCD_TRNS,																					/*1.1*/
							SUM_FCD_STMP_DUTY,																		/*1.1*/
							SUM_SEBI_SRV_TX,																						/*1.1*/	
							SEQ_CLKFNO_NMBR.NEXTVAL,
							TRUNC(FCM_CNTRCT_DT),
						  deal_off_aval_flg,						/** Ver 1.5*/
              deal_off_addr1,								/** Ver 1.5*/
              deal_off_addr2,								/** Ver 1.5*/
              deal_off_city,								/** Ver 1.5*/
              deal_off_zip,									/** Ver 1.5*/
              deal_off_state,								/** Ver 1.5*/
              deal_off_cntry,								/** Ver 1.5*/
              deal_off_phone,								/** Ver 1.5*/
							NULL,													/** Ver 1.5*/
							IAD_MOBILE,                    /** Ver 1.7*/
							FCM_NET_PAY_AMNT,							 /** Ver 2.2 **/
							SUM_FCD_SRC_TX,								/** Ver 2.2 **/
							SUM_FCD_BRKRG_IGST,						/** Ver 2.7 **/
							SUM_FCD_BRKRG_CGST,						/** Ver 2.7 **/
							SUM_FCD_BRKRG_SGST,						/** Ver 2.7 **/
							SUM_FCD_BRKRG_UGST,						/** Ver 2.7 **/
							(	FCM_NET_PAY_AMNT 	- 
							 			(	SUM_FCD_STMP_DUTY + 
											SUM_SEBI_SRV_TX 	+ 
											SUM_FCD_TRNS 			+ 
											ROUND_FCD_STT			+ 
											SUM_FCD_SRC_TX    +			/** Ver 2.7 **/
											SUM_FCD_TOTAL_IGST+			/** Ver 2.7 **/
											SUM_FCD_TOTAL_CGST+			/** Ver 2.7 **/
											SUM_FCD_TOTAL_SGST+			/** Ver 2.7 **/
											SUM_FCD_TOTAL_UGST			/** Ver 2.7 **/
										)
							)  FCM_NET_TOT,		/** Ver 2.2 **/ 
							SUM_FCD_BRKG ,  										/** Ver 2.2 **/
							(	FCM_NET_PAY_AMNT -
									(	SUM_FCD_STMP_DUTY + 
										SUM_SEBI_SRV_TX 	+ 
										SUM_FCD_TRNS 			+ 
										ROUND_FCD_STT			+ 
										SUM_FCD_SRC_TX		+
										SUM_FCD_TOTAL_IGST+			/** Ver 2.7 **/
										SUM_FCD_TOTAL_CGST+			/** Ver 2.7 **/
										SUM_FCD_TOTAL_SGST+			/** Ver 2.7 **/
										SUM_FCD_TOTAL_UGST			/** Ver 2.7 **/
									)
							) - SUM_FCD_BRKG   PAYIO_OBL,	/** Ver 2.2 **/
							nvl(FCM_PRNCPL_BUIS_STATE_CD,' '),			/* Ver 2.7 */
							nvl(FCM_PRNCPL_BUIS_BRNCH_CD,' '),		/* Ver 2.7 **/
							nvl(FCM_CUST_GST_ST_CD,' '),						/* Ver 2.7 **/
							nvl(FCM_ISEC_GSTIN,' '),								/* Ver 2.7 **/
							nvl(FCM_CUST_GSTIN,' '),								/* Ver 2.7 **/
							FCM_IGST_PRCNT,								/** Ver 2.7 **/
							FCM_CGST_PRCNT,								/** Ver 2.7 **/
							FCM_SGST_PRCNT,								/** Ver 2.7 **/
							FCM_UGST_PRCNT,								/** Ver 2.7 **/
							SUM_FCD_TRN_IGST,							/** Ver 2.7 **/
							SUM_FCD_TRN_CGST,							/** Ver 2.7 **/
							SUM_FCD_TRN_SGST,							/** Ver 2.7 **/
							SUM_FCD_TRN_UGST,							/** Ver 2.7 **/
							SUM_FCD_TOTAL_IGST,													/** Ver 2.7 **/
							SUM_FCD_TOTAL_CGST,													/** Ver 2.7 **/
							SUM_FCD_TOTAL_SGST,													/** Ver 2.7 **/
							SUM_FCD_TOTAL_UGST													/** Ver 2.7 **/
					FROM
					(
						SELECT
							FCM_USR_MTCH_ACCNO,
							FCM_EXCNG_CD,
							FCM_CNTRCT_NMBR,
							nvl(FCM_CNTRCT_DT,sysdate) FCM_CNTRCT_DT,
							nvl(FCM_CNTRCT_FLG,'D') FCM_CNTRCT_FLG,				/** ver 2.6 blank space changed to D **/
							nvl(IPD_FIRST_NAME,' ')||' '||nvl(IPD_MIDDLE_NAME,' ')||' '|| nvl(IPD_LAST_NAME,' ') "FCM_USR_NM",/** 2.3 Name changes */
						/**********************
							FCM_ADD_LN1,
							FCM_ADD_LN2,
							FCM_ADD_LN3,
							FCM_ADD_LN4,
						*********** Commented Ver 1.1 ***/
							IAD_ADDRESS_1 || ' ' || IAD_ADDRESS_2 ADD_LN1,			/*1.1*/
							IAD_ADDRESS_3 || ' ' || IAD_ADDRESS_4 ADD_LN2,			/*1.1*/
							IAD_CITY_CD   || ' ' || IAD_PIN  ADD_LN3,						/*1.1*/
							IAD_STATE_CD  || ' ' || IAD_COUNTRY_CD ADD_LN4,			/*1.1*/
							FCM_UCC_CD,
					  /***	FCM_PAN_NO, ** Ver 1.2 ***/
							IID_NO,						/* 1.2 Get pan from ICIS */
							FCM_TEL_NO,
			/***		USR_EMAIL_ADDRSS,
							USR_EMAIL_ADDRSS2,  ** Commented in Ver 2.8 ***/
              IPD_EMAIL,         /** Ver 2.8 **/
							null,							 /** Ver 2.8 **/
              /*NVL(SUM(FCD_STT),0.0000) SUM_FCD_STT,
							NVL(ROUND(SUM(FCD_STT)),0.0000) ROUND_FCD_STT,       ** ver 3.1 comment **/
              ROUND(NVL(SUM(FCD_STT),0.0000),2) SUM_FCD_STT,														/** Ver 3.1 **/
							ROUND(NVL(SUM(FCD_STT),0.0000),2) ROUND_FCD_STT,									/** Ver 3.1 **/
							ROUND(NVL(SUM(FCD_TRAN_CHRG),0.0000),2) SUM_FCD_TRNS,				  				/*1.1*/
							ROUND(NVL(SUM(FCD_STAMP_DUTY),0.0000),2) SUM_FCD_STMP_DUTY,						/*1.1*/
							ROUND(NVL(SUM(FCD_SEBI_TT),0.0000),2) SUM_SEBI_SRV_TX,									/*1.1*/
							decode(CLM_BP_ID,NULL,'N','Y') deal_off_aval_flg,									/** Ver 1.5*/
              BBM_OFF_CORR_ADD1 deal_off_addr1,																	/** Ver 1.5*/
              BBM_OFF_CORR_ADD2 || ' ' || BBM_OFF_CORR_ADD3 deal_off_addr2,			/** Ver 1.5*/
              BBM_OFF_CORR_CITY deal_off_city,																	/** Ver 1.5*/
              BBM_OFF_CORR_ZIP_CD deal_off_zip,																	/** Ver 1.5*/
              BBM_OFF_CORR_STATE deal_off_state,																/** Ver 1.5*/
              BBM_OFF_CORR_CNTRY deal_off_cntry,																/** Ver 1.5*/
              nvl(BBM_OFF_CORR_TELNO,BBM_MBL_NMBRS) deal_off_phone,							/** Ver 1.5*/
							IAI_SERIAL_NO,                                                    /** Ver 1.7*/
							IAD_MOBILE,                                                       /** Ver 1.7*/
							IAD_PIN,																													/** Ver 1.8*/
							(nvl(FCM_NET_PAY_AMNT,0) * -1) FCM_NET_PAY_AMNT ,									/** Ver 2.2 **//** ver 2.6 nvl added **/
							ROUND(NVL(SUM(FCD_SRC_TX),0.0000),2) SUM_FCD_SRC_TX,							/** Ver 2.2 **/
							ROUND(NVL(SUM(FCD_BRKRG_IGST),0.0000),2) SUM_FCD_BRKRG_IGST,			/** ver 2.7 GST fileds added ***/
							ROUND(NVL(SUM(FCD_BRKRG_CGST),0.0000),2) SUM_FCD_BRKRG_CGST,			/** ver 2.7 GST fileds added ***/
							ROUND(NVL(SUM(FCD_BRKRG_SGST),0.0000),2) SUM_FCD_BRKRG_SGST,			/** ver 2.7 GST fileds added ***/
							ROUND(NVL(SUM(FCD_BRKRG_UGST),0.0000),2) SUM_FCD_BRKRG_UGST,			/** ver 2.7 GST fileds added ***/
							ROUND(NVL(SUM(FCD_BRKG),0.0000),2) SUM_FCD_BRKG,									/** Ver 2.2 **/
							FCM_PRNCPL_BUIS_STATE_CD,																					/* Ver 2.7 **/
						 	FCM_PRNCPL_BUIS_BRNCH_CD,																					/* Ver 2.7 **/
							FCM_CUST_GST_ST_CD,																								/* Ver 2.7 **/
							FCM_ISEC_GSTIN,																										/* Ver 2.7 **/
							FCM_CUST_GSTIN,																										/* Ver 2.7 **/
							FCM_IGST_PRCNT,																										/** Ver 2.7 **/
							FCM_CGST_PRCNT,																										/** Ver 2.7 **/
							FCM_SGST_PRCNT,																										/** Ver 2.7 **/
							FCM_UGST_PRCNT,																										/** Ver 2.7 **/
							NVL(ROUND(SUM(FCD_TOTAL_IGST),2)-ROUND(SUM(FCD_BRKRG_IGST),2),0.0000) SUM_FCD_TRN_IGST, /** ver 2.7 GST fileds added **/
							NVL(ROUND(SUM(FCD_TOTAL_CGST),2)-ROUND(SUM(FCD_BRKRG_CGST),2),0.0000) SUM_FCD_TRN_CGST, /** ver 2.7 GST fileds added **/
							NVL(ROUND(SUM(FCD_TOTAL_SGST),2)-ROUND(SUM(FCD_BRKRG_SGST),2),0.0000) SUM_FCD_TRN_SGST, /** ver 2.7 GST fileds added **/
							NVL(ROUND(SUM(FCD_TOTAL_UGST),2)-ROUND(SUM(FCD_BRKRG_UGST),2),0.0000) SUM_FCD_TRN_UGST, /** ver 2.7 GST fileds added **/
							ROUND(NVL(SUM(FCD_TOTAL_IGST),0.0000),2) SUM_FCD_TOTAL_IGST, /** ver 2.7 GST fileds added **/
							ROUND(NVL(SUM(FCD_TOTAL_CGST),0.0000),2) SUM_FCD_TOTAL_CGST, /** ver 2.7 GST fileds added **/
							ROUND(NVL(SUM(FCD_TOTAL_SGST),0.0000),2) SUM_FCD_TOTAL_SGST, /** ver 2.7 GST fileds added **/
							ROUND(NVL(SUM(FCD_TOTAL_UGST),0.0000),2) SUM_FCD_TOTAL_UGST /** ver 2.7 GST fileds added **/
						/**FROM FNO_CNTRCT_MSTR, FNO_CNTRCT_DTLS, USR_USER_MASTER,UAC_USR_ACCNTS**/
						FROM FNO_CNTRCT_MSTR,FNO_CNTRCT_DTLS,
            /**  USR_USER_MASTER,UAC_USR_ACCNTSI,  ** Ver 2.8 ***/
                 IAD_INFO_ADDRESS_DTLS,IAI_INFO_ACCOUNT_INFO,
									IID_INFO_IDENTIFICATION_DTLS,					 /*1.2*/ 
									CLM_CLNT_MSTR, BP_BRKR_MSTR,					/** Ver 1.5*/
									IPD_INFO_PERSONAL_DTLS									/** 2.3 Name Changes **/																		
						WHERE FCM_CNTRCT_NMBR 		= FCD_CNTRCT_NMBR
							AND FCM_EXCNG_CD				= decode(:c_xchng_cd,'NFO','NSE','BFO','BSE')			/*** Ver 1.6 ***/
    /***  		AND FCM_USR_MTCH_ACCNO 	= UAC_CLM_MTCH_ACCNT   ***
							AND UAC_USR_ID 					= USR_USR_ID    ***  Ver 2.8   ***/
							AND	TRUNC(FCM_CNTRCT_DT)=	:c_for_date
							AND IAI_MATCH_ACCOUNT_NO  = FCM_USR_MTCH_ACCNO
							AND IAI_SERIAL_NO         = IAD_SERIAL_NO
							AND IAD_SERIAL_NO					= IID_SERIAL_NO																/*1.2*/
							AND IID_SERIAL_NO					= IPD_SERIAL_NO																/* 2.3 Name Changes*/
							AND IPD_TYPE							= 'APPLICANT'																	/* 2.3 Name Changes*/
							AND IAD_ADDRESS_TYPE      = 'APPLICANT_CORR'
							AND IID_TYPE							= 'PAN'																				/*1.2*/
							and CLM_MTCH_ACCNT        = FCM_USR_MTCH_ACCNO						/** Ver 1.5*/
              and CLM_BP_ID             = BBM_BP_ID (+)									/** Ver 1.5*/
						GROUP BY
							FCM_USR_MTCH_ACCNO,
							FCM_EXCNG_CD,
							FCM_CNTRCT_NMBR,
							FCM_CNTRCT_DT,
							FCM_CNTRCT_FLG,
							/* FCM_USR_NM,							** 2.3 Name Change comment **/
							nvl(IPD_FIRST_NAME,' ')||' '||nvl(IPD_MIDDLE_NAME,' ') ||' '||nvl(IPD_LAST_NAME,' '),	/** 2.3 Name Change **/
						/***************** Commented in 1.1
							FCM_ADD_LN1,
							FCM_ADD_LN2,
							FCM_ADD_LN3,
							FCM_ADD_LN4,
						*****************/
							IAD_ADDRESS_1,			/*1.1*/
              IAD_ADDRESS_2,			/*1.1*/
              IAD_ADDRESS_3,			/*1.1*/
              IAD_ADDRESS_4,			/*1.1*/
              IAD_CITY_CD,				/*1.1*/
              IAD_PIN,						/*1.1*/
              IAD_STATE_CD,				/*1.1*/
              IAD_COUNTRY_CD,			/*1.1*/
							FCM_UCC_CD,
							IID_NO,													/*1.2 changed from FCM_PAN_NO to IID_NO */
							FCM_TEL_NO,
			/*** 		USR_EMAIL_ADDRSS,
							USR_EMAIL_ADDRSS2,  **** Ver 2.8 ***/
              IPD_EMAIL,            /** Ver 2.8 **/
							CLM_BP_ID,
              BBM_OFF_CORR_ADD1,							/** Ver 1.5*/
					    BBM_OFF_CORR_ADD2,							/** Ver 1.5*/
              BBM_OFF_CORR_ADD3,							/** Ver 1.5*/
              BBM_OFF_CORR_CITY,							/** Ver 1.5*/
              BBM_OFF_CORR_ZIP_CD,						/** Ver 1.5*/
              BBM_OFF_CORR_STATE,							/** Ver 1.5*/
              BBM_OFF_CORR_CNTRY,							/** Ver 1.5*/
              BBM_OFF_CORR_TELNO,							/** Ver 1.5*/
					  	BBM_MBL_NMBRS,									/** Ver 1.5*/
							IAI_SERIAL_NO,                  /** Ver 1.7*/
              IAD_MOBILE,                     /** Ver 1.7*/
							FCM_NET_PAY_AMNT,								/** Ver 2.2 **/
						  FCM_PRNCPL_BUIS_STATE_CD,				/* Ver 2.7 **/
							FCM_PRNCPL_BUIS_BRNCH_CD,				 /* Ver 2.7 **/
							FCM_CUST_GST_ST_CD,						 /* Ver 2.7 **/
							FCM_ISEC_GSTIN,								 /* Ver 2.7 **/
							FCM_CUST_GSTIN,								 /* Ver 2.7 **/
							FCM_IGST_PRCNT,								  /** Ver 2.7 **/	
							FCM_CGST_PRCNT,									 /** Ver 2.7 **/
							FCM_SGST_PRCNT,									 /** Ver 2.7 **/
							FCM_UGST_PRCNT									 /** Ver 2.7 **/
					)
				);

	if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in FCM Upload");
			sprintf(c_event,"System Error - Contact Support");					/** Ver 1.5*/
      fn_bat_pst_msg(c_ServiceName,c_event,c_tag);		/** Ver 1.5*/
      fn_errlog(c_ServiceName,"S31080",SQLMSG, c_errmsg);
      return -1;
  }

	l_count_fcm =	sqlca.sqlerrd[2];
	
	fn_userlog(c_ServiceName,"l_count_fcm = [%d]",l_count_fcm);
	/** ver 2.5 Starts ***/
	MEMSET( v_sql_string );
	sprintf(v_sql_string.arr,"MERGE INTO TMP_FCM_CNTRCT_MSTR FCM \
	USING (SELECT EAD_MTCH_ACCNT,EAD_XCHNG_CD,EAD_DESK_ADDR1,EAD_DESK_ADDR2 \
					,EAD_DESK_CITY,EAD_DESK_ZIP,EAD_DESK_STATE,EAD_DESK_CNTRY,EAD_DESK_PHONE,EAD_DESK_FAX \
				FROM EAD_ERS_ADRS_DTLS where EAD_XCHNG_CD = '%s') EAD \
				ON (FCM.FCM_USR_MTCH_ACCNO = EAD.EAD_MTCH_ACCNT \
				AND FCM.FCM_EXCNG_CD = DECODE(EAD.EAD_XCHNG_CD,'NFO','NSE','BFO','BSE',EAD.EAD_XCHNG_CD) \
				AND trunc(FCM.FCM_CNTRCT_DT)= '%s' ) \
				WHEN MATCHED THEN  \
				UPDATE SET FCM_DEAL_OFF_AVAL_FLG = 'Y', \
				FCM_DEAL_OFF_ADDR1 = EAD_DESK_ADDR1, \
				FCM_DEAL_OFF_ADDR2 = EAD_DESK_ADDR2, \
				FCM_DEAL_OFF_CITY = EAD_DESK_CITY, \
				FCM_DEAL_OFF_ZIP = EAD_DESK_ZIP, \
				FCM_DEAL_OFF_STATE = EAD_DESK_STATE, \
				FCM_DEAL_OFF_CNTRY = EAD_DESK_CNTRY, \
				FCM_DEAL_OFF_PHONE = EAD_DESK_PHONE, \
				FCM_DEAL_OFF_FAX = EAD_DESK_FAX",c_xchng_cd,c_for_date);

  SETLEN( v_sql_string );

  EXEC SQL PREPARE sql_stmt FROM :v_sql_string;

  if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in FCM prepare Merge");
			sprintf(c_event,"System Error - Contact Support");
      fn_bat_pst_msg(c_ServiceName,c_event,c_tag);		
      fn_errlog(c_ServiceName,"S31085",SQLMSG, c_errmsg);
      return -1;
  }

  EXEC SQL EXECUTE sql_stmt;

  if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in FCM Execute Merge");
			sprintf(c_event,"System Error - Contact Support");
      fn_bat_pst_msg(c_ServiceName,c_event,c_tag);		
      fn_errlog(c_ServiceName,"S31090",SQLMSG, c_errmsg);
      return -1;
  }

  fn_userlog(c_ServiceName,"Number of rows merged are = [%d]",sqlca.sqlerrd[2]);		
	/** Ver 2..5 Ends  ***/
	fn_userlog(c_ServiceName,"uploading in FCD..........");

	
  EXEC  SQL
    EXECUTE
      BEGIN
          RESET_SEQUENCE('SEQ_CLKFNO_NMBR');
      END;
  END-EXEC;

  if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in sequence number resetting");
			sprintf(c_event,"System Error - Contact Support");						/** Ver 1.5*/
      fn_bat_pst_msg(c_ServiceName,c_event,c_tag);											/** Ver 1.5*/
      fn_errlog(c_ServiceName,"S31095",SQLMSG, c_errmsg);
      return -1;
  }

	EXEC SQL
		INSERT INTO TMP_FCD_CNTRCT_DTLS
			(	FCD_CNTRCT_NMBR,
				FCD_USR_MTCH_ACCNO,
				FCD_CNTRCT_DT,
				FCD_RECORD_ID,
				FCD_ORDR_REF,
				FCD_ORDR_TM,
				FCD_TRD_REF,
				FCD_TRD_TM,
				FCD_TRD_FLW,
				FCD_PRC,
				FCD_QTY,
				FCD_BRKG,
				FCD_SRC_TX,
				FCD_STT,
				FCD_STRK_PRC,
				FCD_CNTRCT_AMT,
				FCD_CNTRCT_SPECS,
				FCD_AMT_INSTT,
				FCD_TOTAL,
				FCD_SEQ_NO,
				FCD_TRUNC_DT,
				FCD_XCHNG_CD,						/* Ver 1.4 */
				FCD_SERIES_CD,				 /** Ver 1.6 BSE **/
				FCD_MKT_LOT,					 /** Ver 1.6 BSE **/
				FCD_NO_OF_CNTRCTS,		 /** Ver 1.6 BSE **/
				FCD_BRKRG_PER_CNTRCT,	 /** Ver 1.6 BSE **/
				FCD_TOTAL_IGST,				/** Ver 2.7 **//** total GST from class is passed to click **/
			  FCD_TOTAL_CGST,				/** Ver 2.7 **/
				FCD_TOTAL_SGST,				/** Ver 2.7 **/
				FCD_TOTAL_UGST,				/** Ver 2.7 **/
				FCD_CLS_PRC						/** Ver 3.1 **/
			)
			(
				SELECT 
					FCM.FCM_CNTRCT_NMBR,
					FCM.FCM_USR_MTCH_ACCNO,
					FCM.FCM_CNTRCT_DT,
					-1,	
					FCD_ORDR_REF,
					nvl (to_char(FCD_ORD_DT_TM,'dd-mm-yyyy hh24:mi:ss'),'NA') ORDER_DATE,		
					FCD_TRD_REF,
					NVL (TO_CHAR(FCD_TRD_DT,'HH24:MI:SS'),'sysdate') TRADE_TM,
					nvl(FCD_TRD_FLW,' '),
					nvl(FCD_PRC,0.0000),	
					nvl(FCD_QTY,0),
					nvl(FCD_BRKG,0.0000),
					FCD_SRC_TX,
					nvl(FCD_STT,0.0000),	
					nvl(FCD_STRK_PRC,0.0000),
					nvl(FCD_CNTRCT_AMT,0.0000),
					/** FCD_CNTRCT_SPECS, *** Ver 2.0 ***/
					/** DECODE(NVL(FCD_SQ_FLG,'N'),'Y','#'||FCD_CNTRCT_SPECS,FCD_CNTRCT_SPECS),  * Ver 2.0 **Ver 2.9 */
          DECODE(NVL(FCD_SQ_FLG,'N'),'Y','#'||FCD_CNTRCT_SPECS,'P','@'||FCD_CNTRCT_SPECS,'B','~'||FCD_CNTRCT_SPECS,FCD_CNTRCT_SPECS),/* Ver 2.9 */
					nvl(FCD_AMT_INSTT,0),
					nvl(FCD_TOTAL,0),
					SEQ_CLKFNO_NMBR.NEXTVAL,
					TRUNC(FCM.FCM_CNTRCT_DT),
					FCM.FCM_EXCNG_CD,						/* Ver 1.4*/
					FCD_SERIES_CD,         /** Ver 1.6 BSE **/
        	FCD_MKT_LOT,           /** Ver 1.6 BSE **/
        	FCD_NO_OF_CNTRCTS,     /** Ver 1.6 BSE **/
        	FCD_BRKRG_PER_CNTRCT,   /** Ver 1.6 BSE **/
					FCD_TOTAL_IGST,					/** Ver 2.7 **/
					FCD_TOTAL_CGST,					/** Ver 2.7 **/
					FCD_TOTAL_SGST,					/** Ver 2.7 **/
					FCD_TOTAL_UGST,					/** Ver 2.7 **/
					FCC_CLS_PRC FCD_CLS_PRC				/** Ver 3.1 **/
				FROM 	FNO_CNTRCT_MSTR FCM, 
							FNO_CNTRCT_DTLS,TMP_FCM_CNTRCT_MSTR TMP,
							FCC_FO_CNTRCT_CLSPRC,		 /** Ver 3.1 **/	
							SEM_STCK_MAP					 /** Ver 3.1 **/
				WHERE FCM.FCM_EXCNG_CD = decode(:c_xchng_cd,'NFO','NSE','BFO','BSE')		/*** Ver 1.6 ***/
				AND   FCM.FCM_CNTRCT_NMBR 		= FCD_CNTRCT_NMBR	
				AND		TMP.FCM_CNTRCT_NMBR = FCM.FCM_CNTRCT_NMBR
				AND 	TRUNC(FCM.FCM_CNTRCT_DT)= :c_for_date
				AND 	TRUNC(FCM.FCM_CNTRCT_DT)= to_date(FCC_TRADE_DATE,'dd-mm-yyyy')		/** Ver 3.1 **/
				AND   SEM_ENTTY=3																												/** Ver 3.1 **/
				AND   to_date(FCC_EXPIRY_DATE,'dd-mm-yyyy')=FCD_EXPR_DT									/** Ver 3.1 **/
				AND   FCD_CNTRCT_SYMBL=SEM_MAP_VL																				/** Ver 3.1 **/
				AND   FCD_CNTRCT_SYMBL=trim(FCC_SYMBOL)																	/** Ver 3.1 **/
				AND   substr(FCD_CNTRCT_INST_TYP,0,1) =substr(FCC_INSTRUMENT_TYPE,0,1)	/** Ver 3.1 **/
				AND   decode(FCD_CNTRCT_OPTN_TYP,'CE','C','PE','P','*')=decode(FCC_OPTION_TYPE,'CE','C','PE','P','*')	/** Ver 3.1 **/
				AND   FCD_STRK_PRC = FCC_STRIKEPRICE																		/** Ver 3.1 **/
			);


	if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in FCD Upload");
			sprintf(c_event,"System Error - Contact Support");						/** Ver 1.5*/
      fn_bat_pst_msg(c_ServiceName,c_event,c_tag);			/** Ver 1.5*/
      fn_errlog(c_ServiceName,"S31100",SQLMSG, c_errmsg);
      return -1;
  }

  l_count_fcd = sqlca.sqlerrd[2];

  fn_userlog(c_ServiceName,"l_count_fcd = [%d]",l_count_fcd);

  fn_userlog(c_ServiceName,"uploading in FAD..........");

	

	EXEC  SQL
    EXECUTE
      BEGIN
          RESET_SEQUENCE('SEQ_CLKFNO_NMBR');
      END;
  END-EXEC;

  if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in sequence number resetting");
			sprintf(c_event,"System Error - Contact Support");						/** Ver 1.5*/
      fn_bat_pst_msg(c_ServiceName,c_event,c_tag);											/** Ver 1.5*/
      fn_errlog(c_ServiceName,"S31105",SQLMSG, c_errmsg);
      return -1;
  }

	EXEC SQL
		INSERT INTO TMP_FAD_ANNX_DTLS
			(	FAD_CNTRCT_NMBR,
				FAD_MTCH_ACCNT,
				FAD_CNTRCT_DT,
				FAD_RECORD_ID,
				FAD_UNDRLYNG,
				FAD_EXP_DT,
				FAD_FUT_SELL,
				FAD_FUT_STT,
				FAD_OPT_SELL,
				FAD_OPT_STT,
				FAD_TOT_STT,
				FAD_SEQ_NO,
				FAD_TRUNC_DT,
				FAD_XCHNG_CD				/*Ver 1.4*/
			)
			(
			SELECT
				FCM_CNTRCT_NMBR,
				FCM_USR_MTCH_ACCNO,
				FCM_CNTRCT_DT,
				-1,
				FCD_CNTRCT_SPECS,
				FCD_EXPR_DT,
				SUM_FUT_SELL,
				SUM_FUT_STT,
				SUM_OPT_SELL,
				SUM_OPT_STT,
				SUM_TOT_STT,
				SEQ_CLKFNO_NMBR.NEXTVAL,
        TRUNC(FCM_CNTRCT_DT),
				FCM_EXCNG_CD					/* Ver 1.4*/	
			FROM
				(
					SELECT 
						FCM.FCM_CNTRCT_NMBR ,
						FCM.FCM_USR_MTCH_ACCNO,
						FCM.FCM_CNTRCT_DT,
						/** FCD_CNTRCT_SPECS, ** Ver 2.0 ***/
            /** DECODE(NVL(FCD_SQ_FLG,'N'),'Y','#'||FCD_CNTRCT_SPECS,FCD_CNTRCT_SPECS) FCD_CNTRCT_SPECS,  ** Ver 2.0 *** Ver 2.9 **/
          	DECODE(NVL(FCD_SQ_FLG,'N'),'Y','#'||FCD_CNTRCT_SPECS,'P','@'||FCD_CNTRCT_SPECS,'B','~'||FCD_CNTRCT_SPECS,FCD_CNTRCT_SPECS) FCD_CNTRCT_SPECS,/* Ver 2.9 */
						nvl(FCD_EXPR_DT,sysdate) FCD_EXPR_DT,
						SUM(DECODE(RTRIM(FCD_CNTRCT_OPTN_TYP),'F',FCD_PRC*FCD_QTY,0)) SUM_FUT_SELL,
						SUM(DECODE(RTRIM(FCD_CNTRCT_OPTN_TYP),'F',FCD_STT,0))	SUM_FUT_STT,
						SUM(DECODE(RTRIM(FCD_CNTRCT_OPTN_TYP),'F',0,FCD_PRC*FCD_QTY)) SUM_OPT_SELL,
						SUM(DECODE(RTRIM(FCD_CNTRCT_OPTN_TYP),'F',0,FCD_STT)) SUM_OPT_STT,
						SUM(FCD_STT) SUM_TOT_STT,
						FCM.FCM_EXCNG_CD							/*Ver 1.4*/
				 	FROM 	FNO_CNTRCT_MSTR FCM, 
								FNO_CNTRCT_DTLS,TMP_FCM_CNTRCT_MSTR TMP
				 	WHERE FCM.FCM_EXCNG_CD = decode(:c_xchng_cd,'NFO','NSE','BFO','BSE')			/*** Ver 1.6 ***/
					AND   FCM.FCM_CNTRCT_NMBR 			= FCD_CNTRCT_NMBR
        	AND   TMP.FCM_CNTRCT_NMBR = FCM.FCM_CNTRCT_NMBR
					AND   FCD_TRD_FLW						=	'S'
				 	AND   TRUNC(FCM.FCM_CNTRCT_DT)	= :c_for_date
				 	GROUP BY 
						FCM.FCM_CNTRCT_NMBR,
						FCM.FCM_USR_MTCH_ACCNO,
						FCM.FCM_CNTRCT_DT,
						/** FCD_CNTRCT_SPECS, ** Ver 2.0 **/
            /** DECODE(NVL(FCD_SQ_FLG,'N'),'Y','#'||FCD_CNTRCT_SPECS,FCD_CNTRCT_SPECS), * Ver 2.0 **Ver 2.9 */
          	DECODE(NVL(FCD_SQ_FLG,'N'),'Y','#'||FCD_CNTRCT_SPECS,'P','@'||FCD_CNTRCT_SPECS,'B','~'||FCD_CNTRCT_SPECS,FCD_CNTRCT_SPECS),/* Ver 2.9 */
						FCD_EXPR_DT,
						FCD_CNTRCT_OPTN_TYP,
						FCM.FCM_EXCNG_CD							/*Ver 1.4*/
				)

			);

	if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )				/** Ver 1.9 NO_DATA_FOUND Added ***/
  {
      fn_userlog(c_ServiceName,"Error in FCD Upload");
			sprintf(c_event,"System Error - Contact Support");							/** Ver 1.5*/
      fn_bat_pst_msg(c_ServiceName,c_event,c_tag);				/** Ver 1.5*/
      fn_errlog(c_ServiceName,"S31110",SQLMSG,c_errmsg);
      return -1;
  }

  l_count_fad = sqlca.sqlerrd[2];

  fn_userlog(c_ServiceName,"l_count_fad = [%d]",l_count_fad);

	fn_userlog(c_ServiceName,"updating record number in FCD");
	
	EXEC SQL
		UPDATE TMP_FCD_CNTRCT_DTLS A
		SET FCD_RECORD_ID = (SELECT FCM_RECORD_ID FROM TMP_FCM_CNTRCT_MSTR B
													WHERE B.FCM_CNTRCT_NMBR = A.FCD_CNTRCT_NMBR
													AND		B.FCM_TRUNC_DT		= :c_for_date
												)
		WHERE FCD_TRUNC_DT = :c_for_date ;
	
	if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in FCD record number update");
			sprintf(c_event,"System Error - Contact Support");						/** Ver 1.5*/
      fn_bat_pst_msg(c_ServiceName,c_event,c_tag);										/** Ver 1.5*/
      fn_errlog(c_ServiceName,"S31115",SQLMSG, c_errmsg);
      return -1;
  }

	fn_userlog(c_ServiceName,"updating record number in FAD");
	
  if(l_count_fad != 0)																			/*** Ver 1.9 If condition added*/
	{	
		EXEC SQL
    	UPDATE TMP_FAD_ANNX_DTLS A
    	SET FAD_RECORD_ID = (SELECT FCM_RECORD_ID FROM TMP_FCM_CNTRCT_MSTR B
      	                    WHERE B.FCM_CNTRCT_NMBR = A.FAD_CNTRCT_NMBR
        	                  AND   B.FCM_TRUNC_DT    = :c_for_date
          	              )
    	WHERE FAD_TRUNC_DT = :c_for_date ;

  	if(SQLCODE != 0)
  	{
    	  fn_userlog(c_ServiceName,"Error in FCD record number update");
				sprintf(c_event,"System Error - Contact Support");						/** Ver 1.5*/
     	  fn_bat_pst_msg(c_ServiceName,c_event,c_tag);										/** Ver 1.5*/
      	fn_errlog(c_ServiceName,"S31120",SQLMSG,c_errmsg);
      	return -1;
  	}
	}																															

}


int fn_populate_fcm()
{

int  i_counter;
long l_count =1;
char c_ins_flg;
unsigned char *c_msg_cbuf;
struct fno_cntrct_mstr fcm_cntrct_mstr_arr[MAX_REC];

  l_bufferlength = Fneeded32(1, sizeof(fcm_cntrct_mstr_arr));
  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);
  if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Error in Allocating buffer FCM");
		sprintf(c_event,"System Error - Contact Support");					/** Ver 1.5*/
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);								/** Ver 1.5*/
    fn_errlog(c_ServiceName, "S31125", TPMSG, c_errmsg);
    return(-1);
  }

  c_ins_flg = 'A';  /* Insert into FCM **/

	for ( l_count=0;l_count < l_count_fcm;l_count += i_max_rec_per_fetch )
  {
    MEMSET(fcm_cntrct_mstr_arr);

    EXEC ORACLE OPTION (char_map=string);

    EXEC SQL
      SELECT
				FCM_USR_MTCH_ACCNO,
				FCM_EXCNG_CD,
				FCM_CNTRCT_NMBR,
				FCM_CNTRCT_DT,
				FCM_CNTRCT_FLG,
				FCM_RECORD_ID,
				FCM_FILENAME,
				FCM_USR_NM,
				FCM_ADDR1,
				FCM_ADDR2,
				FCM_ADDR3,
				FCM_ADDR4,
				FCM_UCC_CD,
				FCM_TRD_CD,
				FCM_PAN_NO,
				FCM_TEL_NO,
				FCM_EMAIL_ID1,
				FCM_EMAIL_ID2,
				FCM_TOTAL,
				FCM_STT,
				nvl(FCM_TRNS_CHRG,0),             /**Ver 1.1**/
        nvl(FCM_STMP_DUTY,0),             /**Ver 1.1**/
        nvl(FCM_SEBI_SRV_TX,0),            /**Ver 1.1**/
				fcm_deal_off_aval_flg,						/** Ver 1.5*/
        fcm_deal_off_addr1,								/** Ver 1.5*/
        fcm_deal_off_addr2,								/** Ver 1.5*/
        fcm_deal_off_city,								/** Ver 1.5*/
        fcm_deal_off_zip,									/** Ver 1.5*/
        fcm_deal_off_state,								/** Ver 1.5*/
        fcm_deal_off_cntry,								/** Ver 1.5*/
        fcm_deal_off_phone,								/** Ver 1.5*/
				fcm_deal_off_fax,									/** Ver 1.5*/
				FCM_MOBILE,									      /** Ver 1.7*/
				FCM_NET_PAY_AMNT,									/** Ver 2.2*/
				FCM_SRC_TX,												/** Ver 2.2*/
				FCM_BRKRG_IGST,										/** Ver 2.7*/
				FCM_BRKRG_CGST,										/** Ver 2.7*/
				FCM_BRKRG_SGST,										/** Ver 2.7*/
				FCM_BRKRG_UGST,										/** Ver 2.7*/
				FCM_NET_TOT,											/** Ver 2.2*/
				FCM_PIPO_OBL,											/** Ver 2.2*/
				FCM_TOT_BRKG,											/** Ver 2.2*/
				nvl(FCM_PRNCPL_BUIS_STATE_CD,' '),					/* Ver 2.7*/
				nvl(FCM_PRNCPL_BUIS_BRNCH_CD,' '),					/* Ver 2.7*/
				nvl(FCM_CUST_GST_ST_CD,' '),								/* Ver 2.7*/
				nvl(FCM_ISEC_GSTIN,' '),										/* Ver 2.7*/
				nvl(FCM_CUST_GSTIN,' '),										/* Ver 2.7*/
				FCM_IGST_PRCNT,										/** Ver 2.7*/
				FCM_CGST_PRCNT,										/** Ver 2.7*/
				FCM_SGST_PRCNT,										/** Ver 2.7*/
				FCM_UGST_PRCNT,										/** Ver 2.7*/
				FCM_TRN_IGST,											/** Ver 2.7*/
				FCM_TRN_CGST,											/** Ver 2.7*/
				FCM_TRN_SGST,											/** Ver 2.7*/
				FCM_TRN_UGST,											/** Ver 2.7*/
				FCM_TOTAL_IGST,											/** Ver 2.7*/
				FCM_TOTAL_CGST,											/** Ver 2.7*/
				FCM_TOTAL_SGST,											/** Ver 2.7*/
				FCM_TOTAL_UGST											/** Ver 2.7*/
			INTO
				:fcm_cntrct_mstr_arr	
			FROM
				TMP_FCM_CNTRCT_MSTR
			WHERE FCM_SEQ_NO >= :l_count + 1
			AND		FCM_SEQ_NO <= :l_count + :i_max_rec_per_fetch;

		if( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
    {
      if( SQLCODE == 1403)
      {
        if (sqlca.sqlerrd[2] == 0)
          break;
      }
      else
      {
        fn_userlog(c_ServiceName,"Data select for FCM failed");
				sprintf(c_event,"System Error - Contact Support");						/** Ver 1.5*/
        fn_bat_pst_msg(c_ServiceName,c_event,c_tag);							/** Ver 1.5*/
        fn_errlog(c_ServiceName, "S31130", SQLMSG, c_errmsg);
        return (-1);
      }
    }

		l_rows_fetched = (l_count + i_max_rec_per_fetch > l_count_fcm)? l_count_fcm%i_max_rec_per_fetch : i_max_rec_per_fetch;

		if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"bat_focnt_click : Rows fetched : |%d| |%d|", l_rows_fetched, SQLCODE );
		
    }	
	

		Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
    Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

		MEMSET(c_msg_cbuf);

    c_msg_cbuf = (unsigned char *)fcm_cntrct_mstr_arr;

		l_bufferlength =  sizeof(fcm_cntrct_mstr_arr);
	
		i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
    i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
    i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&l_rows_fetched,0);
    i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);

    for(i_counter = 0;i_counter < 4;i_counter++)
    {
      if(i_err[i_counter] == -1)
      {
        fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
				sprintf(c_event,"System Error - Contact Support");					/** Ver 1.5*/
        fn_bat_pst_msg(c_ServiceName,c_event,c_tag);												/** Ver 1.5*/
        fn_errlog(c_ServiceName, "S31135", FMLMSG, c_errmsg);
        return(-1);
      }
    }

    i_ch_val = tpcall("SFO_CLICK_UPLD", (char *)ptr_fml_Sbuffer, 0,
                       (char **)&ptr_fml_Rbuffer, &li_len_tobuf, TPNOTIME);
    if (i_ch_val == -1)
    {
      fn_userlog(c_ServiceName,"Error in calling service for FCM");
			sprintf(c_event,"System Error - Contact Support");					/** Ver 1.5*/
      fn_bat_pst_msg(c_ServiceName,c_event,c_tag);									/** Ver 1.5*/
			if(TPCODE != TPESVCFAIL)
      {
        fn_errlog(c_ServiceName, "S31140", TPMSG, c_errmsg);
      }
      else
      {
          Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
          fn_errlog(c_ServiceName, "S31145", c_errmsg, c_errmsg);
      }
      return(-1);
    }

  }

  fn_dstry_rs( ptr_fml_Sbuffer);
  return (0);

} 


int fn_populate_fcd()
{

int  i_counter;
long l_count =1;
char c_ins_flg;
unsigned char *c_msg_cbuf;
struct fno_cntrct_dtls fcd_cntrct_dtls_arr[MAX_REC];

  l_bufferlength = Fneeded32(1, sizeof(fcd_cntrct_dtls_arr));
  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);
  if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Error in Allocating buffer FCD");
		sprintf(c_event,"System Error - Contact Support");					/** Ver 1.5*/
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);								/** Ver 1.5*/
    fn_errlog(c_ServiceName, "S31150", TPMSG, c_errmsg);
    return(-1);
  }

  c_ins_flg = 'B';  /* Insert into FCD **/

  for ( l_count=0;l_count < l_count_fcd;l_count += i_max_rec_per_fetch )
  {
    MEMSET(fcd_cntrct_dtls_arr);

    EXEC ORACLE OPTION (char_map=string);

    EXEC SQL
      SELECT
				FCD_CNTRCT_NMBR,
				FCD_USR_MTCH_ACCNO,
				FCD_CNTRCT_DT,
				FCD_RECORD_ID,
				to_char(FCD_ORDR_REF),
				FCD_ORDR_TM,
				to_char(FCD_TRD_REF),
				FCD_TRD_TM,
				FCD_TRD_FLW,
				FCD_PRC,
				FCD_QTY,
				FCD_BRKG,
				FCD_SRC_TX,
				FCD_STT,
				FCD_STRK_PRC,
				FCD_CNTRCT_AMT,
				FCD_CNTRCT_SPECS,
				FCD_AMT_INSTT,
				FCD_TOTAL,
				FCD_XCHNG_CD,				/*Ver 1.4*/
				FCD_SERIES_CD,			/** Ver 1.6 BSE **/
				FCD_MKT_LOT,				/** Ver 1.6 BSE **/
				FCD_NO_OF_CNTRCTS,	/** Ver 1.6 BSE **/
				FCD_BRKRG_PER_CNTRCT, /** Ver 1.6 BSE **/
				FCD_TOTAL_IGST,			/** Ver 2.7 **/
				FCD_TOTAL_CGST,			/** Ver 2.7 **/
				FCD_TOTAL_SGST,			/** Ver 2.7 **/
				FCD_TOTAL_UGST, 		/** Ver 2.7 **/
				FCD_CLS_PRC					/** Ver 3.1 **/
			INTO
        :fcd_cntrct_dtls_arr
      FROM
        TMP_FCD_CNTRCT_DTLS
      WHERE FCD_SEQ_NO >= :l_count + 1
      AND   FCD_SEQ_NO <= :l_count + :i_max_rec_per_fetch;

    if( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
    {
      if( SQLCODE == 1403)
      {
        if (sqlca.sqlerrd[2] == 0)
          break;
      }
      else
      {
        fn_userlog(c_ServiceName,"Data select for FCD failed");
				sprintf(c_event,"System Error - Contact Support");						/** Ver 1.5*/
        fn_bat_pst_msg(c_ServiceName,c_event,c_tag);							/** Ver 1.5*/
        fn_errlog(c_ServiceName, "S31155", SQLMSG, c_errmsg);
        return (-1);
      }
    }

    l_rows_fetched = (l_count + i_max_rec_per_fetch > l_count_fcd)? l_count_fcd%i_max_rec_per_fetch : i_max_rec_per_fetch;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"bat_focnt_click : Rows fetched : |%d| |%d|", l_rows_fetched, SQLCODE );
    }


		Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
    Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

    MEMSET(c_msg_cbuf);

    c_msg_cbuf = (unsigned char *)fcd_cntrct_dtls_arr;

    l_bufferlength =  sizeof(fcd_cntrct_dtls_arr);

    i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
    i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
    i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&l_rows_fetched,0);
    i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);

    for(i_counter = 0;i_counter < 4;i_counter++)
    {
      if(i_err[i_counter] == -1)
      {
        fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
				sprintf(c_event,"System Error - Contact Support");						/** Ver 1.5*/
    		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);													/** Ver 1.5*/
        fn_errlog(c_ServiceName, "S31160", FMLMSG, c_errmsg);
        return(-1);
      }
    }

    i_ch_val = tpcall("SFO_CLICK_UPLD", (char *)ptr_fml_Sbuffer, 0,
                       (char **)&ptr_fml_Rbuffer, &li_len_tobuf, TPNOTIME);
    if (i_ch_val == -1)
    {
      fn_userlog(c_ServiceName,"Error in calling service for FCD");
			sprintf(c_event,"System Error - Contact Support");						/** Ver 1.5*/
    	fn_bat_pst_msg(c_ServiceName,c_event,c_tag);										/** Ver 1.5*/
			if(TPCODE != TPESVCFAIL)
      {
        fn_errlog(c_ServiceName, "S31165", TPMSG, c_errmsg);
      }
      else
      {
          Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
          fn_errlog(c_ServiceName, "S31170", c_errmsg, c_errmsg);
      }
      return(-1);
    }

  }

  fn_dstry_rs( ptr_fml_Sbuffer);
  return (0);

}

int fn_populate_fad()
{

int  i_counter;
long l_count =1;
char c_ins_flg;
unsigned char *c_msg_cbuf;
struct fno_annx_dtls fad_annx_dtls_arr[MAX_REC];

  l_bufferlength = Fneeded32(1, sizeof(fad_annx_dtls_arr));
  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);
  if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Error in Allocating buffer FAD");
		sprintf(c_event,"System Error - Contact Support");						/** Ver 1.5*/
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);									/** Ver 1.5*/
    fn_errlog(c_ServiceName, "S31175", TPMSG, c_errmsg);
    return(-1);
  }

  c_ins_flg = 'C';  /* Insert into FAD **/

  for ( l_count=0;l_count < l_count_fad;l_count += i_max_rec_per_fetch )
  {
    MEMSET(fad_annx_dtls_arr);

    EXEC ORACLE OPTION (char_map=string);

    EXEC SQL
      SELECT
				FAD_CNTRCT_NMBR,
				FAD_MTCH_ACCNT,
				FAD_CNTRCT_DT,
				FAD_RECORD_ID,
				FAD_UNDRLYNG,
				FAD_EXP_DT,
				FAD_FUT_SELL,
				FAD_FUT_STT,
				FAD_OPT_SELL,
				FAD_OPT_STT,
				FAD_TOT_STT,
				FAD_XCHNG_CD			/*Ver 1.4*/
			INTO
        :fad_annx_dtls_arr
      FROM
        TMP_FAD_ANNX_DTLS
      WHERE FAD_SEQ_NO >= :l_count + 1
      AND   FAD_SEQ_NO <= :l_count + :i_max_rec_per_fetch;

    if( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
    {
      if( SQLCODE == 1403)
      {
        if (sqlca.sqlerrd[2] == 0)
          break;
      }
      else
      {
        fn_userlog(c_ServiceName,"Data select for FAD failed");
				sprintf(c_event,"System Error - Contact Support");						/** Ver 1.5*/
    		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);							/** Ver 1.5*/
        fn_errlog(c_ServiceName, "S31180", SQLMSG, c_errmsg);
        return (-1);
      }
    }

    l_rows_fetched = (l_count + i_max_rec_per_fetch > l_count_fad)? l_count_fad%i_max_rec_per_fetch : i_max_rec_per_fetch;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"bat_focnt_click : Rows fetched : |%d| |%d|", l_rows_fetched, SQLCODE );
    }


		Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
    Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

    MEMSET(c_msg_cbuf);

    c_msg_cbuf = (unsigned char *)fad_annx_dtls_arr;

    l_bufferlength =  sizeof(fad_annx_dtls_arr);

    i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
    i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
    i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&l_rows_fetched,0);
    i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);

    for(i_counter = 0;i_counter < 4;i_counter++)
    {
      if(i_err[i_counter] == -1)
      {
        fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
				sprintf(c_event,"System Error - Contact Support");						/** Ver 1.5*/
    		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);													/** Ver 1.5*/
        fn_errlog(c_ServiceName, "S31185", FMLMSG, c_errmsg);
        return(-1);
      }
    }

    i_ch_val = tpcall("SFO_CLICK_UPLD", (char *)ptr_fml_Sbuffer, 0,
                       (char **)&ptr_fml_Rbuffer, &li_len_tobuf, TPNOTIME);
    if (i_ch_val == -1)
    {
      fn_userlog(c_ServiceName,"Error in calling service for FAD");
			sprintf(c_event,"System Error - Contact Support");					/** Ver 1.5*/
    	fn_bat_pst_msg(c_ServiceName,c_event,c_tag);									/** Ver 1.5*/
			if(TPCODE != TPESVCFAIL)
      {
        fn_errlog(c_ServiceName, "S31190", TPMSG, c_errmsg);
      }
      else
      {
          Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
          fn_errlog(c_ServiceName, "S31195", c_errmsg, c_errmsg);
      }
      return(-1);
    }

  }

  fn_dstry_rs( ptr_fml_Sbuffer);
  return (0);

}

int fn_ins_log_hdr()
{
	int  i_counter;
	char c_ins_flg;
/*	char c_xchng_cd[4] = { "NFO" };*/ /*** Insert NFO in click table MAIL_LOG_HEADER for both NSE & BSE, Comment added in Ver 1.6 ***/

	ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
		
	if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Unable to allocate send buffer ");
		sprintf(c_event,"System Error - Contact Support");						/** Ver 1.5*/
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);									/** Ver 1.5*/
    fn_errlog(c_ServiceName, "S31200", TPMSG, c_errmsg);
    return(-1);
  }
	
	c_ins_flg = 'E';

	i_err[0] = Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);
  i_err[1] = Fadd32(ptr_fml_Sbuffer,FML_XCHNG_CD,(char *)c_xchng_cd,0);
  i_err[2] = Fadd32(ptr_fml_Sbuffer,FML_TRD_DT,(char *)c_for_date,0);
	i_err[3] = Fadd32(ptr_fml_Sbuffer,FML_TRN_NO,(char *)&i_mode,0);			/* Ver 1.3 */

	for(i_counter =0 ;i_counter<=3;i_counter++)
  {
    if(i_err[i_counter] == -1)
    {
			fn_errlog(c_ServiceName, "S31205", FMLMSG, c_errmsg);
			fn_userlog(c_ServiceName,"Value of i =[%d]",i_counter);
			sprintf(c_event,"Value of i =[%d]",i_counter);
    	fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
      return (-1);
		}
	}

	i_ch_val = tpcall("SFO_CLICK_UPLD", (char *)ptr_fml_Sbuffer, 0,
                       (char **)&ptr_fml_Rbuffer, &li_len_tobuf, TPNOTIME);
  if (i_ch_val == -1)
  {
    fn_userlog(c_ServiceName,"Error in calling service for INS_LOG_HDR");
		sprintf(c_event,"System Error - Contact Support");						/** Ver 1.5*/
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);														/** Ver 1.5*/
    if(TPCODE != TPESVCFAIL)
    {
      fn_errlog(c_ServiceName, "S31210", TPMSG, c_errmsg);
    }
    else
    {
      Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
      fn_errlog(c_ServiceName, "S31215", c_errmsg, c_errmsg);
    }
    return(-1);
  }

	fn_dstry_rs( ptr_fml_Sbuffer);
  return (0);

}

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_FOCNT_CLICK;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}

int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
  return 0;
}

