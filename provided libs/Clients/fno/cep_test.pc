/***************************************************************************
* Service name :  CEP_TEST																				 *
*                                                                          *
* Description  :  This Batch Program Received the position data triggered  *
*                 by CEP for Intraday MTM processing                       *
*                                                                          *
* Input        :  Exchange Code                                            *
*                 Exchange Next Date                                       *
*                                                                          *
* Output      :                                                            *
*                                                                          *
*																																				   *
* Log         : Ver 1.0  23-Dec-2013 - Vishnu/Tanmay W			  		         *
* Log         : Ver 1.1  02-Aug-2016 - Tanmay W			  						         *
* Log         : Ver 1.2  23-Sep-2022 - Sachin Birje 						         *
* Log         : Ver 1.3  23-Sep-2022 - Sachin Birje 						         *
*																																					 * 
****************************************************************************
* Log Ver 1.1 :       AUTOMTM MAILER CHANGES(03-Aug-2016)									 *
* Log Ver 1.2 :       Flash Trade Changes                     						 *
* Log Ver 1.3 :       Minor Changes to consider order status  						 *
***************************************************************************/
/**** C header ****/
#include <stdio.h>
#include <sys/socket.h>

/**** Tuxedo header ****/
#include <atmi.h>
#include <sqlca.h>
#include <fml32.h>
#include <Usysflds.h>
#include <unistd.h>

#include<errno.h>
#include <fo_view_def.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fo.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fn_scklib_tap.h>
#include <fn_read_debug_lvl.h>
#include <fn_signal.h>

/* Process specific header  */
#include <fn_env.h>
#include <fn_log.h>
#include <fn_ddr.h>
#include <signal.h>

#include <string.h>
#include <stdlib.h>
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>

#define DELIMITER '~'
#define MAX_SCK_MSG   1024
#define SCK_MSG_LENGTH   5

#define FLASH_ORDER 'F'  /** Ver 1.2 **/

int fn_read_inifile(void);
int fn_send ( int  i_fd, char *ptr_c_stm, int  *ptr_i_sz);
void  fn_sigusr2_hnd(int);
int   fn_rcv_sck_msg(int, char*);
void  fn_snd_stp_mail(char *, char*);

char  c_ServiceName[33];
char  c_errmsg[256];
char  c_xchng_cd[4];
char  c_inpt_xchng_cd[4];
char  c_pipe_id[3];
char  c_cep_ip[20];
char  c_trg_name[30];
char  c_trg_message[30];
char  c_trg_got ='N';
char  c_filter[20];
char  c_mtm_sck_msg[1024];
char* strptr;

int i = 0;
int   i_cep_port = 0;
int   i_sleep_time = 0;
int   i_exit_stts = 0;
int   i_exit_status;
int   i_exp_cnt;

char c_filter2[32];
long  li_prcs_trd_hnd=0;

void CEP_TEST(int argc, char *argv[] )
{
	FBFR32 *ptr_fml_Ibuf;

	int   i_mtm_sck_id = 0;
  int   i_record_len = 0;
  int   i_ret_val = 0;
  int   i_returncode = 0;
  int   i_rec_exists = 0;
  /** int 	i_err[20]; ** Ver 1.1 **/
  /** int 	i_ferr[20]; ** Ver 1.1 **/
  int 	i_err[25];      /** Ver 1.1 **/
  int 	i_ferr[25];			/** Ver 1.1 **/
	int 	i_ch_val = 0;

	char c_pstn_typ = '\0';   /** Ver 1.1 **/
  char  c_record_str[100] = {0};
	char c_clm_mtch_acnt[10+1];
	char c_xchng_cd_CEP[4];
	char c_cntrct_desc[50];
	char c_fmd_rowid[30];
	char  c_err_msg[256];
	char c_sem_map_vl[30];
	char c_ltq_dt[12 + 1];
	char c_undrlyng[7];
	char c_tmp_undrlyng[7];
	char c_imtm_remarks[50];
	char c_svc_name[20];
	char c_expry_dt[12];
  char c_ord_ref[19];
	
	char c_ord_flw = '\0';
	char c_stts = '\0';
	char c_sqroff_mode;
	char c_prd_typ;
	char c_indstk;
	char c_cntrct_tag;
	char c_tag[2];
	char c_prc_flg;
	char c_exer_typ;
	char c_opt_typ;
  char c_ordr_stts='\0';  /** Ver 1.2 **/
  char c_call_type='\0';  /** Ver 1.2 **/
  char c_ord_src_flg='\0';  /** Ver 1.2 **/
 
	long l_strk_prc;
	long li_cnt;
	long l_fmd_sequence = 0;
  long l_act_typ=0;
  long l_lmt_rt =0;
  long l_trgr_rt=0;
	long l_min_trgr_rt= 0; 

	double d_trgr_rt;
	double d_ltq_rt;  
	double d_lmt_rt= 0.0;
	double d_trg_prc = 0.0;


  TPINIT    *ptr_st_tpinfo;
  INITBATDBGLVL("CEP_TEST");
  strcpy(c_ServiceName,"CEP_TEST");

	/*** Set the signal handler for signal SIGUSR2 ***/
  ptr_fml_Ibuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  if ( ptr_fml_Ibuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31005", TPMSG, c_err_msg  );
    return; 
  }

	if( fn_read_inifile() == -1)
  {
    fn_userlog(c_ServiceName," - Error while reading ini file.");
    fn_errlog(c_ServiceName, "S31010", LIBMSG, c_errmsg);
    tpfree((char*)ptr_fml_Ibuf);
		return;
  }

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,":%s: Starts successfully.",c_ServiceName);
    fn_userlog(c_ServiceName,"Input parametrs:");
    fn_userlog(c_ServiceName,"Parameters from ini file:");
    fn_userlog(c_ServiceName,"CEP IP address :%s:",c_cep_ip);
    fn_userlog(c_ServiceName,"CEP Port :%d:",i_cep_port);
    fn_userlog(c_ServiceName,"Sleep time :%d",i_sleep_time);
  }

	i_returncode = fn_crt_clnt_sck ( c_cep_ip,
                               i_cep_port,
                               &i_mtm_sck_id,
                               c_ServiceName ,
                               c_err_msg );
	if ( i_returncode == -1 )
  {
    fn_errlog(c_ServiceName,"S31015", LIBMSG, c_err_msg);
    tpfree((char*)ptr_fml_Ibuf);
    return  ;
  }

	fn_userlog(c_ServiceName,"Socket creation sucess ");

	i_exit_stts = DONT_EXIT;
  c_trg_got = 'N';

  while(i_exit_stts == DONT_EXIT)
  {
	  MEMSET(c_mtm_sck_msg);

		i_returncode = fn_rcv_sck_msg (i_mtm_sck_id, c_mtm_sck_msg);
		if ( i_returncode == -1 )
  	{
     	fn_userlog(c_ServiceName,"MTM RCVCLT : msg received from socket is not proper.");
      fn_userlog(c_ServiceName,"Wrong str:%s:", c_mtm_sck_msg);
      fn_errlog(c_ServiceName, "S31020", DEFMSG, c_err_msg);
      fn_close_sck(i_mtm_sck_id,c_ServiceName,c_err_msg);
      tpfree((char*)ptr_fml_Ibuf);
      return;	
  	}

		strptr = strchr(c_mtm_sck_msg, '$');
		if(strptr != NULL)
    {
      *strptr = '\0';
    }
    else
    {
      fn_userlog(c_ServiceName,"MTM RCVCLT : msg received from socket is not proper.");
      fn_userlog(c_ServiceName,"Wrong str:%s:", c_mtm_sck_msg);
      fn_errlog(c_ServiceName, "S31025", DEFMSG, c_err_msg);
      fn_close_sck(i_mtm_sck_id,c_ServiceName,c_err_msg);
      tpfree((char*)ptr_fml_Ibuf);
      return;  
    }

		fn_userlog(c_ServiceName,"c_mtm_sck_msg:%s",c_mtm_sck_msg);

	}
	return;
}
int fn_bat_init(int argc, char *argv[])
{
  int  i_ch_val ;
  int  i_loop;
  int  i_msgq_typ;

  char c_ServiceName [ 33 ];
  char c_pipe_id [ 5+1 ];
  char c_err_msg[256];
  char *ptr_c_tmp;
  char c_fileName[256];

  strcpy( c_ServiceName, "CEP_TEST" );

	MEMSET(c_xchng_cd);
  strcpy(c_xchng_cd,argv[2]);

  if( argc != 5)
  {
    fn_userlog(c_ServiceName,
    "Usage - CEP_TEST <Exchange qualifier> <Exchange code> <pipe_id> ");
		fn_snd_stp_mail(c_ServiceName,argv[2]);
    return ( -1 );
  }

  MEMSET(c_filter2);
  strcpy( c_filter2, "FFO_FILTER=='NA'"); 

  fn_userlog(c_ServiceName," c_filter2 :%s:, c_xchng_cd :%s:",c_filter2,c_xchng_cd);

  li_prcs_trd_hnd =  tpsubscribe ( "TRG_STOP_FOMTM_RCVCLNT",
                                       (char *)c_filter2,
                                       (TPEVCTL *)NULL,
                                       0);
  if ( li_prcs_trd_hnd == -1 )
  {
     fn_errlog( c_ServiceName, "S31030",LIBMSG,c_err_msg);
     fn_snd_stp_mail(c_ServiceName,c_xchng_cd);
     return -1;
  }

  fn_var = CEP_TEST;
  return ( 0 );
}
int fn_read_inifile()
{
  int i_ch_val;
  char c_FileName[256];
  char c_sleep_time[4];
  char *ptr_c_tmp;

  MEMSET(c_FileName);
  MEMSET(c_errmsg);

	/** Get CEP IP Address. **/

  ptr_c_tmp = (char *)fn_get_prcs_spc(c_ServiceName, "MTM_TEMP_IP" );

  if ( ptr_c_tmp == NULL )
  {
    fn_errlog(c_ServiceName, "S31035", LIBMSG, c_errmsg);
    return -1;
  }
  else
  {
    strcpy(c_cep_ip, ptr_c_tmp );
  }

  /** Get CEP Port Number. **/
  if( strcmp(c_xchng_cd,"NFO") == 0 )
  {
    ptr_c_tmp = (char *)fn_get_prcs_spc(c_ServiceName, "MTM_TRCV_PRT" );
  }

  if ( ptr_c_tmp == NULL )
  {
    fn_errlog(c_ServiceName, "S31040", LIBMSG, c_errmsg);
    return -1;
  }
  i_cep_port  = atoi(ptr_c_tmp);


  return 0;
}
int fn_send ( int  i_fd,
              char *ptr_c_stm,
              int  *ptr_i_sz)
{
  int  i_res;
  char *ptr_c_temp_stm;
  int  i_written;
  int  i_left;

  i_res = 100;

  ptr_c_temp_stm = ptr_c_stm;
  i_written = 0;
  i_left = *ptr_i_sz;

  while (i_left > 0)
  {
    if ((i_written = write(i_fd, ptr_c_temp_stm, i_left)) <= 0)
    {
      if (errno == EINTR)
      {
        i_written = 0;
      }
      else
      {
        i_res = -1;
        *ptr_i_sz = *ptr_i_sz - i_left;
        return(i_res);
      }
    }
    i_left = i_left - i_written;
    ptr_c_temp_stm = ptr_c_temp_stm + i_written;
  }

  *ptr_i_sz = *ptr_i_sz - i_left;
  return (i_res);
}
void fn_sigusr2_hnd(int i_signal_no)
{

  fn_userlog(c_ServiceName,"MTM RCV CLNT process stopped:Caught signal |%d|", i_signal_no);
  i_exit_status = EXIT;
}
int fn_rcv_sck_msg(int i_sck_id, char* c_msg)
{
  char  c_sck_msg[MAX_SCK_MSG];
  int   i_msg_size;
  char  c_msg_length[SCK_MSG_LENGTH];
	  char  c_err_msg[256];

  MEMSET(c_sck_msg);

  i_msg_size = SCK_MSG_LENGTH;      /** Length will be present in this 4 byte **/

	if(  fn_readn (i_sck_id,c_msg_length,i_msg_size,0,c_ServiceName,c_err_msg) == -1 ) 
	{
		fn_errlog(c_ServiceName, "S31045", UNXMSG, c_err_msg);
    return -1;
	}

  c_msg_length[SCK_MSG_LENGTH - 1] = '\0';
  sscanf(c_msg_length, "%d", &i_msg_size);

  i_msg_size = i_msg_size+1;
		
	if(  fn_readn (i_sck_id,c_sck_msg,i_msg_size,0,c_ServiceName,c_err_msg) == -1 )
  {
		fn_errlog(c_ServiceName, "S31050", UNXMSG, c_err_msg);
    return -1;
  }

  c_sck_msg[i_msg_size] = '\0';
  memcpy(c_msg, c_sck_msg, i_msg_size);

  return 0;
}
void fn_bat_term(int argc,
                 char *argv[] )
{
  return;
}
int fn_prcs_trg(char *c_ServiceName,
                 int i_trg_typ)
{
  if ( strcmp ( c_trg_msg, "TRG_STOP_FOMTM_RCVCLNT" ) == 0 )
  {
    fn_userlog(c_ServiceName,"inside fn_prcs_trg TRG_STOP_FOMTM_RCVCLNT ");

    i_exit_stts=EXIT;
  }
  return ( 0 );
 
}
void fn_snd_stp_mail(char* c_ServiceName, char* c_xchng_cd)
{
	printf("cep_test");
}
