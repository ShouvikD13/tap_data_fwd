/******************************************************************************/
/*  Program           : bat_fo_rej.pc 	                                      */
/*                                                                            */
/*  Description       : This Program rejects all the orders in given status 	*/
/*											and pipe.																							*/
/*  Log               : 1.0   01-Jun-2007  Sandeep|Infotech                   */	
/*										: 1.1   23-Oct-2007	 Sandeep|Infotech										*/
/*									  : 1.2		13-Jun-2008	 Sandeep|Infotech										*/
/*										:	1.3		11-May-2010	 Sandeep|Infotech										*/ 
/*										:	1.4		16-Aug-2011  Swati B|Infotech										*/ 
/*                    : 1.5   08-Feb-2013  Navina D|Infotech									*/ 
/******************************************************************************/
/*  1.0    -  New Release                                                     */
/*  1.1    -  IBM Migration Changes																						*/
/*	1.2		 -  FP Changes																											*/
/*	1.3		 -  NNF Download Changes (Stream No)																*/
/*	1.4		 -  SPAN Changes                                                    */
/*  1.5    -  SPAN FuturePLUS handling.                                       */
/******************************************************************************/
 
/* Header Files */

#include<sqlca.h>
#include<atmi.h>
#include <string.h>			/*** Ver 1.1 ***/
#include <stdlib.h>			/*** Ver 1.1 ***/
#include<fo.h>
#include<fml32.h>
#include<fn_log.h>
#include<fn_tuxlib.h>
#include<fn_battmpt.h>
#include<fml_def.h>
#include<fo_fml_def.h>
#include<fn_ddr.h>
#include<fo_view_def.h>
#include <fn_read_debug_lvl.h>			/*** Ver 1.1 ***/
#include <fml_rout.h>               /*** Ver 1.4 ***/

int fn_upd_flg(char *,char,char *);

struct vw_err_msg st_err_msg;

void BAT_FO_REJ ( int argc, char *argv[])
{
	char c_msg[256];
	char c_svc_name[18];
	char c_ServiceName[33];
	char c_err_msg[256];
	char c_xchng_cd [4];
	char trd_dt[LEN_DATE];
	char c_pipe_id[3];
	char c_ordr_stts;
  char c_plcd_stts;
  char c_trd_dt[12];
	char c_ordr_rfrnc[19];
	char c_ordr_rfrnc_flg;
	char c_rej_flg;
	char c_tmp_rej_flg;
	int i_trnsctn;
	int  i_ch_val;
  int i_ip_len;
  int i_op_len;
  long l_cnt;
	long l_rec_cnt=0;
	char c_prd_typ;
	char c_req_typ;
	char c_span_flg = 'N';        /*** Ver 1.4 ***/

	EXEC SQL INCLUDE "table/fxb_fo_xchng_book.h";
  EXEC SQL INCLUDE "table/fod_fo_ordr_dtls.h";
	EXEC SQL INCLUDE "table/tmp_fo_rej.h";
	EXEC SQL BEGIN DECLARE SECTION;
	struct vw_xchngbook   st_xchngbook;
	struct vw_orderbook   st_orderbook;
	EXEC SQL END DECLARE SECTION;
	struct vw_err_msg st_err_msg;

	strcpy(c_ServiceName,argv[0]);

	INITBATDBGLVL(argv[0]);			 /*** Ver 1.1 ***/

	sprintf(c_msg,"Batch process %s is started",argv[0]);
	fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);

	if(argc<7)
	{
 		fn_userlog(c_ServiceName,"In argc < 7 ");
    sprintf(c_msg,"Usage:bat_fo_rej <Exchange Code> <Pipe ID> <Trade\
                           Date> <Order_Status R/Q/F> <Ord_Ref_Flg Y/N)");
    fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
    exit(0);
  }

	c_ordr_rfrnc_flg = argv[6][0];

	if (DEBUG_MSG_LVL_3)			 /*** Ver 1.1 ***/
	{
		fn_userlog(c_ServiceName,"c_ordr_rfrnc_flg:%c",c_ordr_rfrnc_flg);
	}

  if(c_ordr_rfrnc_flg=='N')
	{
		if (DEBUG_MSG_LVL_3)			 /*** Ver 1.1 ***/
		{
	  	fn_userlog(c_ServiceName,"Exchange code is :%s:",argv[2]);
    	fn_userlog(c_ServiceName,"Pipe ID is :%s:",argv[3]);
    	fn_userlog(c_ServiceName,"Trade Date :%s:",argv[4]);
    	fn_userlog(c_ServiceName,"Order Status is :%s:",argv[5]);
			fn_userlog(c_ServiceName,"This is the changed code");
	  }	

		if(argc!=7 )
		{
		  fn_userlog(c_ServiceName,"In argc !=7 ");
		  sprintf(c_msg,"Usage:bat_fo_rej <Exchange Code> <Pipe ID> <Trade\
                           Date> <Order_Status R/Q/F> <Ord_Ref_Flg Y/N)");
		  fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
			exit(0);
		}

	}
	else
	{
	  if(argc!=8)
		{
			fn_userlog(c_ServiceName,"In argc else!=8");
		  sprintf(c_msg,"Usage:bat_fo_rej <Exchange Code> <Pipe ID> <Trade\
                        Date> <Order_Status R/Q/F> <Ord_Ref_Flg Y/N) <Order Reference");
		  fn_bat_pst_msg  (c_ServiceName,c_msg,c_tag);
      exit(0);
		}


		if (DEBUG_MSG_LVL_3)			 /*** Ver 1.1 ***/
		{
   		fn_userlog(c_ServiceName,"In argc else");
   		fn_userlog(c_ServiceName,"Exchange code is :%s:",argv[2]);
   		fn_userlog(c_ServiceName,"Pipe ID is :%s:",argv[3]);
   		fn_userlog(c_ServiceName,"Trade Date :%s:",argv[4]);
   		fn_userlog(c_ServiceName,"Order Status is :%s:",argv[5]);
   		fn_userlog(c_ServiceName,"Order Reference is :%s:", argv[7]);
		}

	 strcpy(c_ordr_rfrnc,argv[7]);

	}

	strcpy(c_xchng_cd,argv[2]);
	strcpy(c_pipe_id,argv[3]);
	strcpy(c_trd_dt,argv[4]);
	c_ordr_stts = argv[5][0];

	fn_init_ddr_pop(argv[3],TRADING_SECTION , COMMON);

	EXEC SQL
	TRUNCATE table tmp_fo_rej;

	if(SQLCODE!=0)
	{
		fn_errlog(c_ServiceName,"S31005",LIBMSG,c_err_msg);
		strcpy ( c_msg, "Could Not delete from tmp table" );
		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		return;
	}
	
	

	i_trnsctn= fn_begintran( c_ServiceName, c_err_msg );

	if ( i_trnsctn == -1 )
	{
		fn_errlog ( c_ServiceName, "S31010", LIBMSG, c_err_msg );
		strcpy ( st_err_msg.c_err_msg, c_err_msg );
		return;
	}

	switch(c_ordr_stts)
	{
		case 'R':
		case 'Q':
	  case 'M':


		 c_plcd_stts = c_ordr_stts;
		 if(c_ordr_rfrnc_flg=='N')
		 {

					EXEC SQL 
						INSERT INTO tmp_fo_rej
					 (SELECT 		xb.fxb_ordr_rfrnc,
						  			 	fxb_mdfctn_cntr,
									 	  fxb_rqst_typ,
									    fod_undrlyng,
									    fod_prdct_typ,
									    fod_ordr_stts,
									    fxb_rqst_tm,
										  decode(fxb_rqst_typ,'N',5304,'M',5307,'C',5310),
											'N',
											nvl(fod_spn_flg,'N')                              /*** Ver 1.4 ***/
						FROM  		fxb_fo_xchng_book xb,fod_fo_ordr_dtls fo
					  WHERE			xb.fxb_ordr_rfrnc = fo.fod_ordr_rfrnc
					  AND 			fxb_pipe_id=:c_pipe_id
					  AND 			fxb_plcd_stts=:c_plcd_stts
					  AND 			fod_ordr_stts not in ('J','F')
					  AND 			(fxb_rms_prcsd_flg !='P'or fxb_rms_prcsd_flg is NULL)  
					  AND 			trunc(fod_trd_dt)   =to_date(:c_trd_dt,'dd-Mon-yyyy')
					  AND 		  fod_xchng_cd        = :c_xchng_cd                /*** Ver 1.4 ***/	
						);
      }
      else
      {
				EXEC SQL 
					INSERT INTO tmp_fo_rej
				 (SELECT		xb.fxb_ordr_rfrnc,
									  fxb_mdfctn_cntr,
									 	fxb_rqst_typ,
									  fod_undrlyng,
									  fod_prdct_typ,
									  fod_ordr_stts,
									  fxb_rqst_tm,
										decode(xb.fxb_rqst_typ,'N',5304,'M',5307,'C',5310),
										'N',
										nvl(fod_spn_flg,'N')                                /*** Ver 1.4 ***/    
					FROM		  fxb_fo_xchng_book xb, fod_fo_ordr_dtls fo
				 	WHERE 		xb.fxb_ordr_rfrnc=fo.fod_ordr_rfrnc
					AND 			fxb_pipe_id=:c_pipe_id
					AND 			fxb_plcd_stts=:c_plcd_stts
					AND 			xb.fxb_ordr_rfrnc=:c_ordr_rfrnc
					AND 			fod_ordr_stts not in ('J','F')
					AND 			(fxb_rms_prcsd_flg !='P'or fxb_rms_prcsd_flg is NULL)
					AND 			trunc(fod_trd_dt)=to_date(:c_trd_dt,'dd-Mon-yyyy')
					AND 		  fod_xchng_cd        = :c_xchng_cd                /*** Ver 1.4 ***/	
					);

			 
			}
		break;

		case 'F':
	 		if(c_ordr_rfrnc_flg=='N')
		 	{
				EXEC SQL 
					INSERT INTO tmp_fo_rej
          (SELECT	xb.fxb_ordr_rfrnc,
                  fxb_mdfctn_cntr,
                  fxb_rqst_typ,
                  fod_undrlyng,
                  fod_prdct_typ,
                  fod_ordr_stts,
                  fxb_rqst_tm,
									decode(fxb_rqst_typ,'N',5304,'M',5307,'C',5310),
									'N',
									nvl(fod_spn_flg,'N')                                /*** Ver 1.4 ***/
					FROM  	fxb_fo_xchng_book xb,fod_fo_ordr_dtls fo
          WHERE 	xb.fxb_ordr_rfrnc=fo.fod_ordr_rfrnc
          AND 		fxb_pipe_id=:c_pipe_id
          AND 		fxb_plcd_stts='Q'
          AND 		fod_ordr_stts='F'
          AND 		(fxb_rms_prcsd_flg !='P'or fxb_rms_prcsd_flg is NULL)
          AND 		trunc(fod_trd_dt)=to_date(:c_trd_dt,'dd-Mon-yyyy')
					AND 		fod_xchng_cd        = :c_xchng_cd                /*** Ver 1.4 ***/	
					);
      }
			else
    	{
				EXEC SQL
					INSERT INTO tmp_fo_rej
          (SELECT	xb.fxb_ordr_rfrnc,
                  fxb_mdfctn_cntr,
                  fxb_rqst_typ,
                  fod_undrlyng,
                  fod_prdct_typ,
                  fod_ordr_stts,
                  fxb_rqst_tm,
									decode(fxb_rqst_typ,'N',5304,'M',5307,'C',5310),
									'N',
									nvl(fod_spn_flg,'N')                             /*** Ver 1.4 ***/
					FROM  		fxb_fo_xchng_book xb, fod_fo_ordr_dtls fo
          WHERE 		xb.fxb_ordr_rfrnc=fo.fod_ordr_rfrnc
          AND 			fxb_pipe_id=:c_pipe_id
          AND 			fxb_plcd_stts='Q'
          AND 			xb.fxb_ordr_rfrnc=:c_ordr_rfrnc
          AND 			fod_ordr_stts='F'
          AND 			(fxb_rms_prcsd_flg !='P'or fxb_rms_prcsd_flg is NULL)
          AND 			trunc(fod_trd_dt)   =to_date(:c_trd_dt,'dd-Mon-yyyy')
					AND 			fod_xchng_cd        = :c_xchng_cd                /*** Ver 1.4 ***/	
				 );
      }
     break;

     default:
		 	strcpy(st_err_msg.c_err_msg,"Invalid Operation Type");
		  fn_errlog(c_ServiceName,"S31015",DEFMSG,st_err_msg.c_err_msg);
		  return;
   }


	if ( fn_committran( c_ServiceName, i_trnsctn,c_err_msg ) == -1 )
  {
		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    fn_errlog ( c_ServiceName, "S31020", LIBMSG, c_err_msg );
    return;
  }


	l_rec_cnt=sqlca.sqlerrd[2];

	if (DEBUG_MSG_LVL_3)			 /*** Ver 1.1 ***/
	{
		fn_userlog(c_ServiceName,"The number of Records to be Processed:%ld",l_rec_cnt);
	}	

	sprintf(c_msg,"Total No. Of Records To Be Processed :%ld:",l_rec_cnt);
	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	for (l_cnt=0;l_cnt<=l_rec_cnt;l_cnt++)	
  {

		EXEC SQL 
			SELECT	tmp_ordr_rfrnc,
							tmp_mdfctn_cntr,
							tmp_rqst_typ,
							tmp_undrlyng,
							tmp_prdct_typ,
							tmp_ordr_stts,
							to_char(tmp_rqst_tm,'dd-Mon-yyyy hh24:mi:ss'),
							tmp_ors_msg,
							tmp_rej_flg,
							tmp_span_flg
			INTO		:st_xchngbook.c_ordr_rfrnc,
							:st_xchngbook.l_mdfctn_cntr,
							:st_xchngbook.c_req_typ,
							:st_orderbook.c_undrlyng,
							:st_orderbook.c_prd_typ,
							:st_orderbook.c_ordr_stts,
							:st_xchngbook.c_rqst_tm,
							:st_xchngbook.l_ors_msg_typ,
							:c_rej_flg,
							:c_span_flg
			FROM		tmp_fo_rej
			WHERE		tmp_rej_flg='N' 
			AND			rownum < 2; 
			

		if(( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
   	{
  		fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg  );
     	return;
   	}

	  if ( SQLCODE == NO_DATA_FOUND )
  	{
			fn_userlog(c_ServiceName,"no data found");
    	break;
  	}

    strcpy(st_xchngbook.c_ack_tm,st_xchngbook.c_rqst_tm);
    strcpy(st_xchngbook.c_entry_dt_tm,st_xchngbook.c_rqst_tm);
    rtrim(st_xchngbook.c_rqst_tm);
    rtrim(st_xchngbook.c_ack_tm);
    rtrim(st_xchngbook.c_entry_dt_tm);
    st_xchngbook.c_rms_prcsd_flg=NOT_PROCESSED;
		st_xchngbook.l_bit_flg	=	99	;			/***	Ver	1.3	***/

		if (DEBUG_MSG_LVL_3)			 /*** Ver 1.1 ***/
		{
			fn_userlog(c_ServiceName,"The Order Reference is :%s:",st_xchngbook.c_ordr_rfrnc);
    	fn_userlog(c_ServiceName,"The Modification Counter is :%d:",st_xchngbook.l_mdfctn_cntr); /** Ver 1.1 **/
    	fn_userlog(c_ServiceName,"The Request Type is :%c:",st_xchngbook.c_req_typ);
    	fn_userlog(c_ServiceName,"The Underlying is  :%s:",st_orderbook.c_undrlyng);
    	fn_userlog(c_ServiceName,"The Product Type is :%c:",st_orderbook.c_prd_typ);
    	fn_userlog(c_ServiceName,"The Order Status is :%c:",st_orderbook.c_ordr_stts);
			fn_userlog(c_ServiceName,"The Request Time is :%s:",st_xchngbook.c_rqst_tm);
			fn_userlog(c_ServiceName,"The ORS Message Type is :%d:",st_xchngbook.l_ors_msg_typ);	/** Ver 1.1 **/
			fn_userlog(c_ServiceName,"The Ack Time is :%s:",st_xchngbook.c_ack_tm);
			fn_userlog(c_ServiceName,"The Stream No. :%ld:",st_xchngbook.l_bit_flg);
			fn_userlog(c_ServiceName,"The  Span Flag IS :%c:",c_span_flg);
		}

	 	i_ip_len = sizeof ( struct vw_xchngbook);
    i_op_len = sizeof ( struct vw_xchngbook);

		/*** if( c_span_flg == 'S')                                                ** Ver 1.4 **  - Commented in ver 1.5 ***/
		if( c_span_flg == 'S' && st_orderbook.c_prd_typ != FUTURE_PLUS )	/*** Ver 1.5 ***/
    {
      fn_userlog(c_ServiceName, " Inside SPAN Customer ");
			i_ch_val = fn_call_svc_fml ( c_ServiceName,
                                       c_err_msg,
                                       "SFO_PRCS_RSP",
                                       0,
                                       6,
                                       0,
                                       FFO_ROUT_CRT, (char *)st_xchngbook.c_rout_crt,/** need this***/   
                                       FFO_ORDR_RFRNC, (char *)st_xchngbook.c_ordr_rfrnc,
                                       FFO_ORS_MSG_TYP, (char *)&st_xchngbook.l_ors_msg_typ,
                                       FFO_MDFCTN_CNTR, (char *)&st_xchngbook.l_mdfctn_cntr,
                                       FFO_ACK_TM, (char *)st_xchngbook.c_ack_tm,
                                       FFO_PREV_ACK_TM, (char *)st_xchngbook.c_entry_dt_tm
                                     );

		  if ( i_ch_val !=0)
     {
      fn_userlog(c_ServiceName,"The record %ld failed in Fut/Opt ack:%s|%d|%s|%c|%c:",
                                l_cnt,st_xchngbook.c_ordr_rfrnc,st_xchngbook.l_mdfctn_cntr,
                                st_orderbook.c_undrlyng, st_orderbook.c_prd_typ); /** Ver 1.1 **/
      fn_errlog ( c_ServiceName, "S31030", LIBMSG, c_err_msg );
      c_tmp_rej_flg='X';
        if((fn_upd_flg(c_ServiceName,c_tmp_rej_flg,st_xchngbook.c_ordr_rfrnc)==-1))
        {
         fn_userlog(c_ServiceName,"Failed in Update Flag In Process Response For SPAN Customer");
         return;
        }
      continue;
     }
		}
		else
		{
			
		 fn_userlog(c_ServiceName, " Inside Normal Customer ");
		
		 if(st_orderbook.c_prd_typ==FUTURES  || st_orderbook.c_prd_typ==FUTURE_PLUS)		/*** Ver 1.2 ***/
		  {
			 strcpy(c_svc_name, "SFO_FUT_ACK");
		  }
		 else
		  {
			 strcpy(c_svc_name,"SFO_OPT_ACK");
		  }

     fn_cpy_ddr(st_xchngbook.c_rout_crt);

     i_ch_val=fn_call_svc(c_ServiceName,
											 	 st_err_msg.c_err_msg,
											   &st_xchngbook,
											   &st_xchngbook,
											   "vw_xchngbook",
											   "vw_xchngbook",
											   i_ip_len,
											   i_op_len,
											   0,
											   c_svc_name);
		 if ( i_ch_val !=0)
  	 {
	  	fn_userlog(c_ServiceName,"The record %ld failed in Fut/Opt ack:%s|%d|%s|%c|%c:",
																l_cnt,st_xchngbook.c_ordr_rfrnc,st_xchngbook.l_mdfctn_cntr,
													      st_orderbook.c_undrlyng, st_orderbook.c_prd_typ); /** Ver 1.1 **/
    	fn_errlog ( c_ServiceName, "S31035", LIBMSG, c_err_msg );
			c_tmp_rej_flg='X';
		  	if((fn_upd_flg(c_ServiceName,c_tmp_rej_flg,st_xchngbook.c_ordr_rfrnc)==-1))
    	  {
      	 fn_userlog(c_ServiceName,"Failed in Update Flag In Fut/Opt Ack");
      	 return;
      	}
			continue;
  	 }
		} /** End of Normal Customer **/

		i_trnsctn= fn_begintran( c_ServiceName, c_err_msg );

    if ( i_trnsctn == -1 )
    {
      fn_errlog ( c_ServiceName, "S31040", LIBMSG, c_err_msg );
      strcpy ( st_err_msg.c_err_msg, c_err_msg );
      return;
    }

    st_xchngbook.c_plcd_stts=REJECT;
    st_xchngbook.d_jiffy=0;
    st_xchngbook.l_dwnld_flg=20;
		st_xchngbook.c_oprn_typ=UPDATION_ON_EXCHANGE_RESPONSE;
    strcpy(st_xchngbook.c_xchng_rmrks,"..Reject");
    c_tmp_rej_flg='Y';
		
		if(i_ch_val == 0)
		{
			st_xchngbook.c_rms_prcsd_flg = 'P';
		}	
		if (DEBUG_MSG_LVL_3)			 /*** Ver 1.1 ***/
		{
    	fn_userlog(c_ServiceName,"The Modification Counter is :%d:",st_xchngbook.l_mdfctn_cntr); /** Ver 1.1 **/
    	fn_userlog(c_ServiceName,"The Request Type is :%c:",st_xchngbook.c_req_typ);
    	fn_userlog(c_ServiceName,"The Order Status is :%c:",st_orderbook.c_ordr_stts);
    	fn_userlog(c_ServiceName,"The Request Time is :%s:",st_xchngbook.c_rqst_tm);
    	fn_userlog(c_ServiceName,"The ORS Message Type is :%d:",st_xchngbook.l_ors_msg_typ); /** Ver 1.1 **/
    	fn_userlog(c_ServiceName,"The Placed Status is  :%c:",st_xchngbook.c_plcd_stts);
    	fn_userlog(c_ServiceName,"The RMS Processed Flag is :%c:",st_xchngbook.c_rms_prcsd_flg);
    	fn_userlog(c_ServiceName,"The Operation Type is :%c:",st_xchngbook.c_oprn_typ);
    	fn_userlog(c_ServiceName,"Jiffy :%lf:",st_xchngbook.d_jiffy);
    	fn_userlog(c_ServiceName,"The Ack Time is :%s:",st_xchngbook.c_ack_tm);
    	fn_userlog(c_ServiceName,"The Download Flag is :%d:",st_xchngbook.l_dwnld_flg); /** Ver 1.1 **/
    }

		i_ch_val=fn_call_svc(c_ServiceName,
                         st_err_msg.c_err_msg,
                         &st_xchngbook,
                         &st_xchngbook,
                         "vw_xchngbook",
                         "vw_xchngbook",
                         i_ip_len,
                         i_op_len,
                         0,
                         "SFO_UPD_XCHNGBK");

    if(i_ch_val!=SUCC_BFR)
    {
     fn_userlog(c_ServiceName,"The record %ld failed in updating xchng book:%s|%d|%s|%c|%c:",l_cnt,
		st_xchngbook.c_ordr_rfrnc,st_xchngbook.l_mdfctn_cntr,st_orderbook.c_undrlyng,st_orderbook.c_prd_typ); /** Ver 1.1 **/
      fn_errlog(c_ServiceName,"S31045",LIBMSG,c_err_msg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      continue;
    }


    if ( fn_committran( c_ServiceName, i_trnsctn,c_err_msg ) == -1 )
    {
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      fn_errlog ( c_ServiceName, "S31050", LIBMSG, c_err_msg );
      return;
    } 

		if((fn_upd_flg(c_ServiceName,c_tmp_rej_flg,st_xchngbook.c_ordr_rfrnc)==-1))
    {
    	fn_userlog(c_ServiceName,"Failed While Updating Flag");
			return;
    }

		if (DEBUG_MSG_LVL_3)			 /*** Ver 1.1 ***/
		{
		 	fn_userlog(c_ServiceName,"After Calling SFO_UPD_XCHNGBK");
    	fn_userlog(c_ServiceName,"The Placed Status is :%c:",st_xchngbook.c_plcd_stts);
    	fn_userlog(c_ServiceName,"The RMS Processed Flag is :%c:",st_xchngbook.c_rms_prcsd_flg);
		}

	}

		if (DEBUG_MSG_LVL_3)			 /*** Ver 1.1 ***/
		{
  		fn_userlog(c_ServiceName,"Successfully Completed");
		}

		sprintf ( c_msg, "Batch process %s ended", argv[0] );
  	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

		return;
}



int fn_upd_flg(char *c_ServiceName,char c_tmp_rej_flg,char * c_ordr_rfrnc)
{
	char c_err_msg[256];
	int  i_trnsctn;

	i_trnsctn= fn_begintran( c_ServiceName, c_err_msg );

	if ( i_trnsctn == -1 )
  {
 		fn_errlog ( c_ServiceName, "S31055", LIBMSG, c_err_msg );
    return -1;
	}

	EXEC SQL
	UPDATE tmp_fo_rej
  SET tmp_rej_flg=:c_tmp_rej_flg
  WHERE tmp_ordr_rfrnc=:c_ordr_rfrnc;


	if(SQLCODE != 0)
  {
  	fn_errlog(c_ServiceName, "S31060", SQLMSG,c_err_msg);
    fn_userlog(c_ServiceName,"Failed To Update Flag Function ");
    fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
    return -1;
  }
	
	if ( fn_committran( c_ServiceName, i_trnsctn,c_err_msg ) == -1 )
  {
		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
   	fn_errlog ( c_ServiceName, "S31065", LIBMSG, c_err_msg );
    return -1;
  }

	return 0;

}



int fn_bat_init ( int argc, char *argv[] )
{
 	fn_var = BAT_FO_REJ;
 	return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
 	return;
}


int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
 	return 0;
}
