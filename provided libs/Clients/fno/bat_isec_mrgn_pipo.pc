/*******************************************************************************
*  Program           : bat_isec_mrgn_pipo.pc                                   *
*                                                                              *
*  Description       : To compute ISEC margin amount for clients	      			 *  
*                                                                              *
*  Input Parameters  : Pgm_NM NFO NFO NA <trade date>	<run no>	       			   *
*                                                                              *
*  Change Log        : 1.0   09-May-2011  Nitin Save|Infotech                  *
*  									 : 1.1   03-Feb-2012  Swati A.B	|Infotech                  *
*  									 : 1.2   08-May-2012  Nitin Save|Infotech                  *
*                    : 1.3   03-Sep-2012  Nitin Save|Infotech                  *
*                    : 1.4   09-Sep-2014  Sachin Birje|Infotech                *
*                    : 1.5   26-Nov-2015  Sachin Birje|Infotech                *
*                    : 1.6   26-Jul-2018  Tanmay Patel|Infotech                * 
*                    : 1.7   31-May-2019  Anuj Pancholi |Infotech              *
*                    : 1.8   23-Dec-2020  Akash B       | Infotech             *
*                    : 1.9   01-Oct-2021  Sachin Birje  | Infotech             *
*										 : 2.0	 22-Feb-2022	Ravindra Panda| ISEC								 *
********************************************************************************
*  1.0    -  New Release                                                       *
*  1.1    -  SPAN Changes 																										 *
*  1.2    -  BSE- ADM Changes 																								 *
*  1.3    -  Backoffice-Optimization-CR-ISEC29-33718                           *
*  1.4    -  VIew to FML Changes                                               *
*  1.5    -  ADM Rerun process changes                                         *
*  1.6    -  Margin Statement Changes from Exchange                            *   
*  1.7    -  Deposit Model changes                                             * 
*  1.8    -  NEO Pricing phase 2                                               * 
*  1.9    -  IDFC CR Changes                                                   *
*  2.0    -  Validation added to check PEAK MARGIN process status              * 
*******************************************************************************/

/* Header Files */
#include <stdio.h>
#include <string.h>
#include <sqlca.h>
#include <stdlib.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fn_ddr.h>
#include <string.h>
#include <stdlib.h>
#include <fml_rout.h>
#include <unistd.h>   /*** Ver 1.5 ***/
/** #include<fo_view_def.h> ** Ver 1.4 **/

#include <fn_read_debug_lvl.h>

void fn_abort( void );

EXEC SQL BEGIN DECLARE SECTION;
  int 	i_trnsctn=0;
  char c_pgm_run_stts;
  int  i_cnt_adm_rec = 0;
  int  i_cnt_eod_mtm = 0;
  int  i_cnt_spn_eod_mtm = 0;  /*** Ver 1.1 ***/
  varchar c_pgm_nm[20];
  int i_mtm_success_flag = 0;      /* Added in Ver 1.2 */
  int i_mtm_span_success_flag = 0; /* Added in Ver 1.2 */
	int i_peak_mrgn_success_flag = 0; /** Ver 2.0 **/ 

EXEC SQL END DECLARE SECTION;

void BAT_ISEC_MRGN_PIPO ( int argc, char *argv[] )
{
  long int li_tot_rcrds;
  int i_ch_val;
  long int li_cnt;
  long int li_run_no;
  char c_msg[256];
	FBFR32 *ptr_fml_buf;
  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];
  char c_xchng_cd [ 4 ];
  char c_trd_dt [ LEN_DATE ];
  char c_cln_mtch_accnt [ 11 ];
	char c_rout_str[4];
	char c_path = 'B';
  char c_event[256];
  char c_command[60];
  char c_xchng_cd_tmp[3];

  int i_mtm_success_flag = 0; /* Added in Ver 1.2 */
 
  /** Ver 1.7 Starts **/
  char c_payin_pool_acc_nse[20];
  char c_payout_pool_acc_nse[20];
  char c_payin_pool_acc_bse[20];
  char c_payout_pool_acc_bse[20];
  char c_main_nse_payin_ac[20];
  char c_main_nse_payout_ac[20]; 
  char c_blk_deposit_flg='\0'; /** Model flag **/
  char c_bank_nm[11]; /** Ver 1.9 **/

  MEMSET(c_payin_pool_acc_nse);
  MEMSET(c_payout_pool_acc_nse);
  MEMSET(c_payin_pool_acc_bse);
  MEMSET(c_payout_pool_acc_bse);
  MEMSET(c_main_nse_payin_ac);
  MEMSET(c_main_nse_payout_ac);
  MEMSET(c_bank_nm); /** Ver 1.9 **/

 /** Ver 1.7 Ends **/

  strcpy ( c_ServiceName, argv[0] );
  rtrim(c_ServiceName);   /*** Ver 1.6 ***/

  INITBATDBGLVL(argv[0]);

  /* Program will run commonly for BSE & NSE with reading parameters from NFO.ini */
  /* For Exchange code NA will be provided from input as this code run commonly for NSE & BSE */
  if( argc < 6 )  /** Ver 1.9 changed to 6 from 5 **/
  {
    fn_bat_pst_msg ( c_ServiceName, "Invalid Number of Arguments", c_tag );
    /*** Commented in Ver 1.2 ****/
    /* fn_userlog (c_ServiceName,"Usage:%s NFO NFO NA <trade date>	<run no>",argv[0]); */
     fn_userlog (c_ServiceName,"Usage:%s NFO NA NA <trade date>  <run no>",argv[0]); /* Changed in Ver 1.2 */
     exit(0);
  }

  /* strcpy( c_xchng_cd, argv[2] ); */  /** Commented in Ver 1.2 **/
  strcpy( c_xchng_cd, "NA" );           /** Changed in Ver 1.2 **/ 
  strcpy( c_trd_dt, argv[4] );
  li_run_no = atoi( argv[5] );
  strcpy( c_bank_nm, argv[6] ); /** Ver 1.9 **/ 

  /** To check EOD_MTM program run for both BSE & NSE for the given date  **/
	strcpy ( c_msg, "Checking whether EOD_MTM program run for the given date" );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
	fn_userlog(c_ServiceName,"Checking whether EOD_MTM  program run for the given date<%s>", c_trd_dt);

  /************** Commented part Start for Ver 1.2 **************
  EXEC SQL
      SELECT  count(1)
      INTO    :i_cnt_eod_mtm
      FROM    FER_FUT_EODMTM_REP
      WHERE   FER_TRD_DT = :c_trd_dt;

  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog(c_ServiceName, "S31005", SQLMSG, c_err_msg);
    sprintf(c_event, "Error in checking run of EOD MTM program in a day");
    fn_bat_pst_msg( c_ServiceName, c_event, c_tag );
    return;
  }

  if(i_cnt_eod_mtm == 0)
  {
    fn_errlog(c_ServiceName, "S31010", SQLMSG, c_err_msg);
    sprintf(c_event, "Batch process- EOD MTM is not yet run for today<%s>-Please process EOD MTM first", c_trd_dt);
    fn_bat_pst_msg( c_ServiceName, c_event, c_tag );
    return;
  }
  ************** Commented part End for Ver 1.2 **************/
  /*** Ver 1.2 Starts  ***/

  EXEC SQL 
      SELECT   1
      INTO     :i_mtm_success_flag
      FROM     DUAL
      WHERE    EXISTS (SELECT APR_XCHNG_CD 
										   FROM AUDIT_PROG_RUNSTTS
                       WHERE APR_PROG_NAME = 'bat_eod_mtm'
											 and trunc(APR_TRD_DT) = :c_trd_dt
										   and APR_SUCC_FLG = 'P'
											 and APR_XCHNG_CD ='NFO')
		  AND 		 EXISTS (SELECT APR_XCHNG_CD 
                       FROM AUDIT_PROG_RUNSTTS
                       WHERE APR_PROG_NAME ='bat_eod_mtm'
											 AND trunc(APR_TRD_DT) = :c_trd_dt
										   AND APR_SUCC_FLG = 'P'
									     AND APR_XCHNG_CD ='BFO');

  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog(c_ServiceName, "S31015", SQLMSG, c_err_msg);
    sprintf(c_event, "Error in checking run of EOD MTM program in a day");
    fn_bat_pst_msg( c_ServiceName, c_event, c_tag );
    return;
  }
  else if ( SQLCODE == NO_DATA_FOUND )
  {
    i_mtm_success_flag = 0;
  }

  if(i_mtm_success_flag != 1)
  {
    fn_errlog(c_ServiceName, "S31020", SQLMSG, c_err_msg);
    sprintf(c_event,"EOD MTM is not successfully completed for BSE or NSE for<%s>-Please process EOD MTM first", c_trd_dt);
    fn_bat_pst_msg( c_ServiceName, c_event, c_tag );
    return;
  }

  /*** Ver 1.2 Ends ****/

	/*** Ver 2.0 starts here ***/

	EXEC SQL
      SELECT   1
      INTO     :i_peak_mrgn_success_flag
      FROM     DUAL
      WHERE    EXISTS (SELECT APR_XCHNG_CD
                       FROM AUDIT_PROG_RUNSTTS
                       WHERE APR_PROG_NAME = 'bat_fopk_drcr'
                       and trunc(APR_TRD_DT) = :c_trd_dt
                       and APR_SUCC_FLG = 'P'
                       and APR_XCHNG_CD ='NFO');

  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog(c_ServiceName, "S31025", SQLMSG, c_err_msg);
    sprintf(c_event, "Error in checking run of PEAK MARGIN: bat_fopk_drcr program in a day");
    fn_bat_pst_msg( c_ServiceName, c_event, c_tag );
    return;
  }
  else if ( SQLCODE == NO_DATA_FOUND )
  {
    i_peak_mrgn_success_flag = 0;
  }
	
	if(i_peak_mrgn_success_flag!= 1)
  {
    fn_errlog(c_ServiceName, "S31030", SQLMSG, c_err_msg);
    sprintf(c_event,"bat_fopk_drcr is not successfully completed for BSE or NSE for<%s>-Please process bat_fopk_drcr first", c_trd_dt);
    fn_bat_pst_msg( c_ServiceName, c_event, c_tag );
    return;
  }	

	/*** Ver 2.0 ends here ***/

	/*** Commented by Shailesh..to be enabled once SPAN is streamlined and we have open positions daily 
		Ver 1.1 Starts ***
		
	** To check whether EOD_MTM program run for the given date or not **
  strcpy ( c_msg, "Checking whether SPAN EOD_MTM program run for the given date" );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  fn_userlog(c_ServiceName,"Checking whether SPAN EOD_MTM  program run for the given date<%s>", c_trd_dt);

  EXEC SQL
      SELECT  count(1)
      INTO    :i_cnt_spn_eod_mtm
      FROM   	SER_SPN_EODMTM_REP 
      WHERE   SER_TRD_DT = :c_trd_dt;

  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog(c_ServiceName, "S31035", SQLMSG, c_err_msg);
    sprintf(c_event, "Error in checking run of EOD MTM program in a day");
    fn_bat_pst_msg( c_ServiceName, c_event, c_tag );
    return;
  }

  if(i_cnt_spn_eod_mtm == 0)
  {
    fn_errlog(c_ServiceName, "S31040", SQLMSG, c_err_msg);
    sprintf(c_event, "Batch process- SPAN EOD MTM is not yet run for today<%s>-Please process EOD MTM first", c_trd_dt);
    fn_bat_pst_msg( c_ServiceName, c_event, c_tag );
    return;
  }
	
	*** Ver 1.1 Ends   ***/	

  /** To check whether batch program already run for the given date **/

  /***** Commented below check on 29-Jul-11 to allow multiple runs of pgm for unprocessed recs ****/
	/**********************************************************************************
	strcpy ( c_msg, "Checking whether batch program already run for the given date" );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
	fn_userlog(c_ServiceName,"Checking whether batch program already run for the given date");
  
  EXEC SQL
      SELECT  count(1)
      INTO    :i_cnt_adm_rec
      FROM    AMC_ADM_MRGN_CALC
      WHERE   trunc(AMC_TRD_DT) = :c_trd_dt
			AND			AMC_BATCH_SITE_IND = 'B';

  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog(c_ServiceName, "S31045", SQLMSG, c_err_msg);
    sprintf(c_event, "Error in checking run of batch program in a day");
    fn_bat_pst_msg( c_ServiceName, c_event, c_tag );
    return;
  }

  if(i_cnt_adm_rec != 0)
  {
    fn_errlog(c_ServiceName, "S31050", SQLMSG, c_err_msg);
    sprintf(c_event, "Batch process- bat_isec_mrgn_pipo already run for today<%s>-Please process process Rerun", c_trd_dt);
    fn_bat_pst_msg( c_ServiceName, c_event, c_tag );
    return;
  }
	**************************************************************************************/
  

  /** To check whether EOD MTM program is in running state **/
  /** Commented below part for Ver 1.2 Starts **/
  /************
	
	strcpy ( c_msg, "Checking for completion of bat_eod_mtm process ... " );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
	fn_userlog(c_ServiceName,"Checking for completion of bat_eod_mtm process first ");

	MEMSET(c_pgm_nm);
	strcpy ( c_pgm_nm.arr, "bat_eod_mtm" );
	SETLEN(c_pgm_nm); 

	fn_userlog(c_ServiceName,"val of c_pgm_nm <%s> ", c_pgm_nm.arr);
	fn_userlog(c_ServiceName,"val of c_xchng_cd <%s> ", c_xchng_cd); 

  EXEC SQL
      SELECT  bps_stts
      INTO    :c_pgm_run_stts
      FROM    bps_btch_pgm_stts
      WHERE   bps_pgm_name = 'bat_eod_mtm'
			AND			bps_xchng_cd = :c_xchng_cd 
			AND 		bps_pipe_id = 'NA'; 

  if(SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31055", SQLMSG, c_err_msg);
    sprintf(c_event, "Error in checking status of eod_mtm run");
    fn_bat_pst_msg( c_ServiceName, c_event, c_tag );
    return;
  }

	if(c_pgm_run_stts == 'R' ) 
  {
  	 fn_userlog(c_ServiceName, "bat_eod_mtm is in running mode --hence exit ");
     fn_errlog(c_ServiceName, "S31060", SQLMSG, c_err_msg);
	   sprintf(c_err_msg,"bat_eod_mtm is in running mode");
 	   fn_bat_pst_msg ( c_ServiceName, c_err_msg, c_tag );
	   return;
  }
  ************/
  /** Commented part for Ver 1.2 Ends **/


  /*** Ver 1.2 Starts for SPAN  ***/
  EXEC SQL 
      SELECT   1
      INTO     :i_mtm_span_success_flag
      FROM     DUAL
      WHERE    EXISTS (SELECT APR_XCHNG_CD 
										   FROM AUDIT_PROG_RUNSTTS
                       WHERE APR_PROG_NAME = 'bat_span_eodmtm'
											 and trunc(APR_TRD_DT) = :c_trd_dt
										   and APR_SUCC_FLG = 'P'
											 and APR_XCHNG_CD ='NFO')
		  /***
		  AND 		 EXISTS (SELECT APR_XCHNG_CD 
                       FROM AUDIT_PROG_RUNSTTS
                       WHERE APR_PROG_NAME ='bat_span_eodmtm'
											 AND trunc(APR_TRD_DT) = :c_trd_dt
										   AND APR_SUCC_FLG = 'P'
									     AND APR_XCHNG_CD ='BFO')
									     ***/;


  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog(c_ServiceName, "S31065", SQLMSG, c_err_msg);
    sprintf(c_event, "Error in checking run of EOD MTM -SPAN program in a day");
    fn_bat_pst_msg( c_ServiceName, c_event, c_tag );
    return;
  }
  else if ( SQLCODE == NO_DATA_FOUND )
  {
    i_mtm_span_success_flag = 0;
  }

  if(i_mtm_span_success_flag != 1)
  {
    fn_errlog(c_ServiceName, "S31070", SQLMSG, c_err_msg);
    sprintf(c_event,"EOD MTM-SPAN is not successfully completed for BSE or NSE for<%s>-Process SPAN-EOD MTM first",c_trd_dt);
    fn_bat_pst_msg( c_ServiceName, c_event, c_tag );
    return;
  }


  /*** Ver 1.2 Ends for SPAN ****/


	/*** Commented by Shailesh..to be enabled once SPAN is streamlined and we have open positions daily
	
	*** Ver 1.1 Starts ***

	strcpy ( c_msg, "Checking for completion of bat_span_eodmtm process ... " );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  fn_userlog(c_ServiceName,"Checking for completion of bat_span_eodmtm process first ");

  MEMSET(c_pgm_nm);
  strcpy ( c_pgm_nm.arr, "bat_span_eodmtm" );
  SETLEN(c_pgm_nm);

  fn_userlog(c_ServiceName,"val of c_pgm_nm <%s> ", c_pgm_nm.arr);
  fn_userlog(c_ServiceName,"val of c_xchng_cd <%s> ", c_xchng_cd);

  EXEC SQL
      SELECT  bps_stts
      INTO    :c_pgm_run_stts
      FROM    bps_btch_pgm_stts
      WHERE   bps_pgm_name = 'bat_span_eodmtm'
      AND     bps_xchng_cd = :c_xchng_cd
      AND     bps_pipe_id = 'NA';

  if(SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31075", SQLMSG, c_err_msg);
    sprintf(c_event, "Error in checking status of SPAN eod_mtm run");
    fn_bat_pst_msg( c_ServiceName, c_event, c_tag );
    return;

  }

	if(c_pgm_run_stts == 'R' )
  {
     fn_userlog(c_ServiceName, "bat_span_eodmtm is in running mode --hence exit ");
     fn_errlog(c_ServiceName, "S31080", SQLMSG, c_err_msg);
     sprintf(c_err_msg,"bat_eod_mtm is in running mode");
     fn_bat_pst_msg ( c_ServiceName, c_err_msg, c_tag );
     return;

  }

	*** Ver 1.1 Ends   ***/

	sprintf ( c_msg, "Batch process <%s> for ADM  started", argv[0] );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	/*** For Service routing ***/
	fn_init_ddr_pop("NA", "NA", "NA");

	strcpy ( c_msg, "Creating data for ADM processing.. Please wait ... " );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
	


	ptr_fml_buf = fn_create_rs ( c_ServiceName,
                               c_err_msg,
                               "SFO_GT_ADMDTLS",
                               TPNOTIME,
                               3,  /*** Ver 1.9 **/
			       								   FFO_XCHNG_CD, ( char * )c_xchng_cd,
                               FFO_TRD_DT, (char * )c_trd_dt,
                               FFO_QUEUE_NAME, (char * )c_bank_nm);


	if ( ptr_fml_buf == NULL )
	{
		fn_errlog( c_ServiceName, "S31085", LIBMSG, c_err_msg );
		return;
	}

	li_tot_rcrds = fn_reccnt_rs ( ptr_fml_buf,
                                c_ServiceName,
                                c_err_msg,
                                FFO_EBA_MTCH_ACT_NO );
	if ( li_tot_rcrds == -1 )
	{
		fn_errlog( c_ServiceName, "S31090", LIBMSG, c_err_msg );
		fn_dstry_rs ( ptr_fml_buf );
		return;
	}

  /** Ver 1.7 Starts **/

    EXEC SQL
      SELECT  FSP_ISECPAYIN_ACC,
              FSP_ISECPAYOUT_ACC,
              FSP_BSE_ISECPAYIN_ACC,
              FSP_BSE_ISECPAYOUT_ACC,
              FSP_PAYIN_ACC,
              FSP_PAYOUT_ACC
      INTO    :c_payin_pool_acc_nse,
              :c_payout_pool_acc_nse,
              :c_payin_pool_acc_bse,
              :c_payout_pool_acc_bse,
              :c_main_nse_payin_ac,
              :c_main_nse_payout_ac
      FROM    FSP_FO_SYSTM_PRMTR;

  if(SQLCODE != 0)
   {
    fn_errlog(c_ServiceName, "S31095", SQLMSG, c_err_msg);
    sprintf(c_event, "Error in checking status of SPAN eod_mtm run");
    fn_bat_pst_msg( c_ServiceName, c_event, c_tag );
    return;
   }
  
  /** Ver 1.7 Ends **/

	strcpy ( c_msg, "Data created for ADM processing." );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  sprintf ( c_msg, "Total records to process for ADM= %ld", li_tot_rcrds );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  for ( li_cnt=1; li_cnt<=li_tot_rcrds; li_cnt++ )
  {
		i_ch_val = fn_getnxt_rs ( ptr_fml_buf,
                              c_ServiceName,
                              c_err_msg,
                              3,
			      						      FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL,
                              FFO_TRD_DT, (char * )c_trd_dt, NULL,
			      								  FFO_EBA_MTCH_ACT_NO ,(char *)c_cln_mtch_accnt, NULL);


		if ( i_ch_val != 0 )
		{
			fn_errlog( c_ServiceName, "S31100", LIBMSG, c_err_msg );
			fn_dstry_rs ( ptr_fml_buf );
  		strcpy ( c_msg, "System error. Contact system support" );
  		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			return;
		}

		sprintf(c_msg,"Processing record %ld of %ld for match :%s: in ADM Processing", li_cnt, li_tot_rcrds,c_cln_mtch_accnt);
 		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

    /*********     Commented below    in Ver 1.3    ***********/
    /**********************************************************
		i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                  c_err_msg,
                                  "sfr_beod_gtdt",
                                  li_cnt,
                                  li_tot_rcrds );
    *************************************************************/
    i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                  c_err_msg,
                                  "sfr_adm_pipo",          /*** Changed Server name in Ver 1.3  **/
                                  li_cnt,
                                  li_tot_rcrds );
		

		if ( i_ch_val == -1 )
    {
			fn_errlog( c_ServiceName, "S31105", LIBMSG, c_err_msg );
			fn_dstry_rs ( ptr_fml_buf );
  		strcpy ( c_msg, "System error. Contact system support" );
  		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			return;
    }

		fn_cpy_ddr(c_rout_str);

		fn_userlog(c_ServiceName,"Before calling SFO_ADM_PIPO for :%s: in ADM Processing with source flag <%c>",c_cln_mtch_accnt,c_path );

    i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                  c_err_msg,
                                  "SFO_ADM_PIPO",
                                  0,
                                  15, /** Changed from 8 to 14 Ver 1.7  **/ /** Ver 1.9 15 **/
				  										    FFO_XCHNG_CD, ( char * )c_xchng_cd,
                                  FFO_TRD_DT, (char * )c_trd_dt,
				  												FFO_EBA_MTCH_ACT_NO ,(char *)c_cln_mtch_accnt,
				  												FFO_RUN_NUM ,(char *)&li_run_no,
                                  FFO_BAT_TAG, ( char * )c_tag,
                                  FFO_REC_NO, ( char * )&li_cnt,
				  												FFO_ROUT_CRT, (char*) c_rout_str,
				  												FFO_SOURCE_FLG, (char*) &c_path,
                                  FFO_STRIKE1, (char*)c_payin_pool_acc_nse,  /** Ver 1.7 **/
                                  FFO_STRIKE2, (char*)c_payout_pool_acc_nse, /** Ver 1.7 **/
                                  FFO_STRIKE3, (char*)c_payin_pool_acc_bse,  /** Ver 1.7 **/
                                  FFO_STRIKE4, (char*)c_payout_pool_acc_bse, /** Ver 1.7 **/
                                  FFO_LOW_PT, (char*)c_main_nse_payin_ac,    /** Ver 1.7 **/
                                  FFO_HIGH_PT, (char*)c_main_nse_payout_ac,  /** Ver 1.7 **/
                                  FFO_QUEUE_NAME, (char*)c_bank_nm);  /** Ver 1.9 **/


    if ( i_ch_val == -1 )
    {
			fn_errlog( c_ServiceName, "S31110", LIBMSG, c_err_msg );
			fn_dstry_rs ( ptr_fml_buf );
  		strcpy ( c_msg, "System error. Contact system support" );
  		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			return;
		}

		fn_userlog(c_ServiceName,"After calling SFO_ADM_PIPO for :%s:",c_cln_mtch_accnt);
  }


	fn_dstry_rs ( ptr_fml_buf );
 
  /***  Ver 1.6 Starts ***/
  i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    fn_errlog( c_ServiceName, "S31115", LIBMSG, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    return;
  }

   fn_userlog(c_ServiceName,"Inserting in APR Table.");
 
   EXEC SQL
   INSERT INTO audit_prog_runstts
             (
               APR_PROG_NAME,
               APR_TIME,
               APR_SUCC_FLG,
               APR_TRD_DT,
               APR_XCHNG_CD
              )
       VALUES (
               :c_ServiceName,
               sysdate,
               'P',
               :c_trd_dt,
               :c_xchng_cd
              );
   if(SQLCODE != 0)
   {
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     fn_errlog(c_ServiceName, "S31120", SQLMSG, c_err_msg);
     sprintf(c_event, "Error in inserting data in APR.");
     fn_bat_pst_msg( c_ServiceName, c_event, c_tag );
     return;
   }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_errlog( c_ServiceName, "S31125", LIBMSG, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    return;
  }

  /***  Ver 1.6 Ends ***/

	sprintf ( c_msg, "Batch process %s ended for ADM processing", argv[0] );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  /*** Ver 1.5 Starts here ******/
  sleep(5);
  MEMSET(c_xchng_cd_tmp);
  MEMSET(c_command); 
  strcpy(c_xchng_cd_tmp,"NFO");
  strcpy(c_command, "bat_rerun_adm_pipo NFO ");
  strcat(c_command,  c_xchng_cd_tmp);
  strcat(c_command,  " NA ");
  strcat(c_command,  c_trd_dt);
  strcat(c_command,  " ");
  strcat(c_command,  argv[5]);
  strcat(c_command,  " ");

  fn_userlog(c_ServiceName,"Before Calling |%s|",c_command) ;
  system(c_command) ;
  fn_userlog(c_ServiceName,"After Calling |%s|",c_command) ;

  /*** Ver 1.5 Ends Here ****/  

  /**** Ver 1.8 Starts here ******/

  sleep(5);
  MEMSET(c_command); 
  strcpy(c_command, "bat_fo_sam_intrst NFO NFO NA ");
  strcat(c_command, c_trd_dt);
 
  fn_userlog(c_ServiceName,"Before calling :%s:",c_command);
  system(c_command) ;
  fn_userlog(c_ServiceName,"After calling :%s:",c_command); 
 
  /**** Ver 1.8 Ends here ********/

  return;
}

int fn_bat_init ( int argc, char *argv[] ) 
{
	fn_var = BAT_ISEC_MRGN_PIPO;
	return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
	return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
	return 0;
}

void fn_abort()
{
	fn_userlog ("BAT_ISEC_MRGN_PIPO","Abort BAT_ISEC_MRGN_PIPO processing");
	tpclose();
	tpterm ();
}

