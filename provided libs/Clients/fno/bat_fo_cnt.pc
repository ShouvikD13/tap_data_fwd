/*******************************************************************************/
/*   Service       : bat_fo_cnt.pc                                             */
/*                                                                             */
/*   Purpose       : To generate fno contract notes in xml format which POSTX  */
/*                   will convert into a pdf document.                         */
/*                                                                             */
/*                                                                             */
/*   Input Param   : For date                                                  */
/*                   Exchange Code                                             */
/*                                                                             */
/*   Output        : Success/Failure                                           */
/*                                                                             */
/*   Author        : ICICI Infotech                                            */
/*                                                                             */
/*   Date          : 23-05-2007                                                */
/*                                                                             */
/*   Version       :  1.0      Release     By Vidyayini Krish                  */
/*	 	22-Jan-2008	 :  1.1			 Bug Removal by Vasant  												 */
/*    29-Feb-2008  :  1.2      Changes for Click from Postx                    */
/*   07-Feb-2008   :  1.3      IBM Changes by Vidyayini Krish                  */
/*														 and  debug level changes by Shamili Dalvi.      */ 
/*    28-Feb-2012  :  1.4      BSE Changes 								                     */
/*******************************************************************************/
#include <stdio.h>      /* C Header File                */
#include <stdlib.h>     /* C Header File                */
#include <sqlca.h>      /* Oracle header file           */
#include <atmi.h>       /* TUXEDO Header File           */
#include <fml32.h>      /* TUXEDO Header File           */
#include <time.h>
#include <string.h>
#include <fn_battmpt.h>
#include <fn_tuxlib.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fn_log.h>
#include <fo.h>
#include <fn_env.h>
#include <fn_ddr.h>
#include <fn_log.h> /* Ver 1.3 */
#define __EXTENSIONS__
#include <fn_read_debug_lvl.h>     /* 1.3 Debug level Changes */

#define MEMSET(A) memset(&A,'\0',sizeof(A))

FILE *file_ptr;
FILE *file_ptr_data;
FILE *fp_tmp;

void BAT_FO_CNT( int argc, char *argv[] )
{
  char    c_ServiceName[33];
	char    c_msg[300];
  char    c_event_msg[256];
	char    c_file_path[256];
  char    c_clm_mtch_accnt[12];
	char    c_FULL_PATH[256];
	char    c_jobfile_name[100];		
	char    c_exchng_cd[4];
  char    c_file[256];
  char    c_usr_nm[31];
  char    c_email_addrss[100];
  char    c_date_string[50];
  char    c_date_trd[20];
  char    c_date[20];
  char    c_trd_dt[20];
  char    c_errmsg[256];
  char    c_cntrct_no[50];
  char    c_userid[20];
  char    c_user_name[51];
  char    c_addr_ln1[51];
  char    c_addr_ln2[51];
  char    c_ucc_cd[30];
  char    c_pan_no[20];
  char    c_cntrct_num[50];
  char    c_contract_number[50];
  char    c_trade_dt[20];
  char    c_trd_flw;
  char    c_ordr_no[20];
  char    c_ordr_tm[30];
  char    c_trd_no[20];
  char    c_trd_tm[30];
  char    c_stck_nm[100];
  char    c_prd_typ;
  char    c_tele_num[45];
  char    c_addr_ln3[51];
  char    c_addr_ln4[51];
  char    c_err_msg[100];
  char    c_pipe[3];
  char    *token;
  char    c_trd_flw_arr;
  char    *lasts;
	char    c_cnt_wth_dt[100];
  char    c_contract[50];
  char    c_exp_dt[20];
  char    c_fo_flg[5];
  char    c_ser_tax[10];
  char    trans_cnt_note_xml[200];
  char    c_shs_scrp_path[100];
  char    c_DIR_CNT[5];
  char    c_dir_no[9];
	char    c_opn_typ = 'F';

	double  d_fut_stt = 0.0;
  double  d_opt_stt = 0.0;
  double  d_fut_sll = 0.0;
  double  d_opt_sll = 0.0;
  double  d_annx_tot = 0.0;
  double  d_grss_rt_per_sec = 0.0;
  double  d_tot = 0.0;
  double  d_brk_tot = 0.0;
  double  d_ser_tax = 0.0;
  double  d_tot_amt = 0.0;
  double  d_sec_tran_tax = 0.0;
	double  d_sell_sum_tot = 0.0;
  double  d_sell_sum_brk = 0.0;
  double  d_sell_ser_tax = 0.0;
  double  d_sell_net_amt = 0.0;
	double  d_buy_sum_tot = 0.0;
  double  d_buy_sum_brk = 0.0;
  double  d_buy_ser_tax = 0.0;
	double  d_buy_net_amt = 0.0;


	long    l_qty = 0;
	long    li_session_id = 0;
  long    l_recvbuff = 0;

	int     i_returncode = 0;
  int     i_count_ctm = 0;
  int     i_rcrd_cnt = 0;
  int     i_err[100];
  int     i_rcrd_no = 0;
  /** int     i_ret_val = 0; commented as of no use **/
  int     i = 0;
  int     j = 0;
  int     k = 0;
  int     i_cur = 0;
  int     i_no_of_trade = 0;
  int     i_no_of_bs_trades = 0;
  int     i_no_of_buy = 0;
  int     i_no_of_sell = 0;
  int     i_count_stck = 0;
  int     i_sec_tran_tax = 0;
  int     i_dec_part = 0;
  int     i_fut_cnt = 0;
  int     i_opt_cnt = 0;
  int     DIR_CNT = 10;
  int     i_file_cnt[DIR_CNT];
  int     i_cnt = 0;
  int     i_ex_cnt = 0;
  int     i_tot_jobdata_cnt = 0;
  int     i_tmp_job_cnt = 0;

	time_t  time_stmp;	
	

  FBFR32  *ptr_Sbuf;     /* Pointer to FML send buffer    */
  FBFR32  *ptr_Rbuf;     /* Pointer to FML receive buffer */

	MEMSET(c_ServiceName);
	MEMSET(c_msg);

  printf("STARTING FNO CONTRACT");
  INITBATDBGLVL(argv[0]);    /** Added in Ver. 1.3 **/

  strcpy(c_ServiceName, "bat_fo_cnt");
  sprintf(c_msg,"%s",argv[0]);
  fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);	 

  if(argc != 5)
  {
    fn_userlog(c_ServiceName, "Usage: bat_fo_cnt_xml <Config File> <Exchange Cd> <Pipe Id><Trade Date>");
    return;
  }

  strcpy( c_msg, "STAGE 1.0 Starting BAT_FO_CNT_XML...");
  fn_userlog(c_ServiceName,"STAGE 1.0 Starting BAT_FO_CNT_XML...");

  MEMSET(c_exchng_cd);
  MEMSET(c_usr_nm);
  MEMSET(c_email_addrss);
  MEMSET(c_date_string);
  MEMSET(c_date_trd);
  MEMSET(c_date);
  MEMSET(c_trd_dt);
  MEMSET(c_cntrct_no);
  MEMSET(c_userid);
  MEMSET(c_user_name);
  MEMSET(c_addr_ln1);
  MEMSET(c_addr_ln2);
  MEMSET(c_ucc_cd);
  MEMSET(c_pan_no);
  MEMSET(c_cntrct_num);
  MEMSET(c_contract_number);
  MEMSET(c_trade_dt);
  MEMSET(c_tele_num);
  MEMSET(c_addr_ln3);
  MEMSET(c_addr_ln4);
  MEMSET(c_pipe);
  MEMSET(c_fo_flg);
  MEMSET(c_ser_tax);	

  strcpy(c_exchng_cd,argv[2]);
  strcpy(c_pipe,argv[3]);
  rtrim(c_pipe);
  rtrim(c_exchng_cd);
  strcpy(c_trd_dt,argv[4]);
  rtrim(c_trd_dt);

  fn_userlog(c_ServiceName,"Exchange Code is :%s:",c_exchng_cd);
  fn_userlog(c_ServiceName,"Pipe is :%s:",c_pipe);
  fn_userlog(c_ServiceName,"Trade Date is :%s:",c_trd_dt);
 

  /*   ALLOCATING BUFFERS     */

  ptr_Sbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
  if (ptr_Sbuf == NULL)
  {
    fn_errlog( c_ServiceName, "S31005", TPMSG, c_err_msg  );
    fn_userlog(c_ServiceName, "Error Allocating Send Buffer ");
    fn_destroy_pipe();
    tpclose();
    tpterm();
		return;
    /* exit(1); */
  }

  ptr_Rbuf= (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
  if (ptr_Rbuf== NULL)
  {
    fn_errlog( c_ServiceName, "S31010", TPMSG, c_err_msg  );
    fn_userlog(c_ServiceName, "Error Allocating Receive Buffer ");
    fn_bat_pst_msg( c_ServiceName, c_event_msg, c_tag );
    tpfree((char *)ptr_Sbuf);
    fn_destroy_pipe();
    tpclose();
    tpterm();
    return;
  }

	if(DEBUG_MSG_LVL_3){
  fn_userlog(c_ServiceName,"After Buffer Allocation");	

  /*   GENERATING THE PATH , FILE NAMES & NUMBER OF FILES  */

  fn_userlog(c_ServiceName,"TRADE DATE IS :%s:",c_trd_dt);
  fn_userlog(c_ServiceName,"EXCHANGE CODE IS :%s:",c_exchng_cd);
	}

  EXEC SQL
     SELECT COUNT(*),
            to_char(to_date(:c_trd_dt,'dd-Mon-YYYY'),'ddMonYYYY'),
            to_char(to_date(:c_trd_dt,'dd-Mon-YYYY'),'YYYYMMDD'),
            trim(to_char(to_date(:c_trd_dt,'dd-Mon-YYYY'),'MONTH'))||' '||to_char(to_date(:c_trd_dt,'dd-Mon-YYYY'),'DD,YYYY')
     INTO   :i_count_ctm,
            :c_date,
            :c_date_trd,
            :c_date_string
     FROM   fno_cntrct_mstr
     WHERE  trunc(fcm_cntrct_dt) = :c_trd_dt
    /* AND    fcm_excng_cd = 'NSE';				***** Ver 1.4 **/  
     AND    fcm_excng_cd = decode(:c_exchng_cd,'NFO','NSE','BSE');			/*** Ver 1.4 **/  

	SQLCODE = 0;

  if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg  );
    strcpy(c_event_msg,"Error:Contact System Support.");
    fn_bat_pst_msg(c_ServiceName,c_event_msg,c_tag);
    tpfree((char *)ptr_Sbuf);
    tpfree((char *)ptr_Rbuf);
    fn_destroy_pipe();
    tpclose();
    tpterm();
    return;
  } 	

	for(i = 0;i < DIR_CNT;i++)
  {
    i_file_cnt[i] = 0;
  }

	rtrim(c_date);
	rtrim(c_date_trd);
	rtrim(c_date_string);

  MEMSET(c_file_path);
  strcpy(c_file_path,tuxgetenv("POSTX_HOME"));
  strcpy(c_DIR_CNT,tuxgetenv("POSTX_SRVR"));
  DIR_CNT = atoi(c_DIR_CNT);
	if(DEBUG_MSG_LVL_3){
  fn_userlog(c_ServiceName,"DIR_CNT is :%d:",DIR_CNT);
	}
  MEMSET(c_jobfile_name);
  strcpy(c_jobfile_name,"ContractNote");
  strcat(c_jobfile_name,c_date);
  strcat(c_jobfile_name,c_exchng_cd);
  MEMSET(c_FULL_PATH);
  sprintf(c_FULL_PATH,"%s/%s",c_file_path,c_date_trd);
  rtrim(c_FULL_PATH);
	if(DEBUG_MSG_LVL_3){
  fn_userlog("FULL PATH IS :%s:",c_FULL_PATH);
	}

  if ((fp_tmp=fopen(c_FULL_PATH, "r")) == NULL)
  {
    fn_userlog(c_ServiceName,"CREATING....DATE.");
    MEMSET(c_file_path);
    sprintf(c_file_path,"mkdir -m 0777 %s",c_FULL_PATH);
    system(c_file_path);
  }
  else
  {
    fclose(fp_tmp);
  }

  sprintf(c_FULL_PATH,"%s/%s",c_FULL_PATH,c_exchng_cd);
  rtrim(c_FULL_PATH);
	if(DEBUG_MSG_LVL_3){
  fn_userlog(c_ServiceName,"FULL PATH IS :%s:",c_FULL_PATH); /* Ver 1.3 c_ServiceName added */
	}

  if ((fp_tmp=fopen(c_FULL_PATH, "r")) == NULL)
  {
    fn_userlog(c_ServiceName,"CREATING...EXH_CD.."); /* Ver 1.3 userlog to fn_userlog */
    MEMSET(c_file_path);
    sprintf(c_file_path,"mkdir -m 0777 %s",c_FULL_PATH);
    system(c_file_path);
  }
  else
  {
    fclose(fp_tmp);
  }
  fn_userlog(c_ServiceName,"Total number of records in Contract Master are :%d:",i_count_ctm);

  for(i = 0; i < DIR_CNT ; i++)
  {
    i_file_cnt[i] = i_count_ctm/DIR_CNT;
  }

  if((i_count_ctm%DIR_CNT) != 0)
  {
    i_ex_cnt = i_count_ctm%DIR_CNT;
  }

  for(i=0; i< i_ex_cnt; i++ )
  {
    i_file_cnt[i] = i_file_cnt[i] +1;
  }

  for(i = 0; i < DIR_CNT ; i++)
  {
    fn_userlog(c_ServiceName," VALUE PRINT :%d:",i_file_cnt[1]);
  }

  i_tot_jobdata_cnt = DIR_CNT;

	fn_userlog(c_ServiceName,"Total number of JOB_DATA files are :%d:",i_tot_jobdata_cnt);

  /*  GETTING THE MATCH ACCOUNT OF CTM INTO A CURSOR  */

  EXEC SQL
       DECLARE jobdata_cur CURSOR FOR
       SELECT fcm_usr_mtch_accno,
              fcm_cntrct_nmbr
       FROM   fno_cntrct_mstr
       WHERE  trunc(fcm_cntrct_dt) = :c_trd_dt
       /*AND    fcm_excng_cd = 'NSE';	********* Ver 1.4 ***/
       AND    fcm_excng_cd = decode(:c_exchng_cd,'NFO','NSE','BSE') ;					/** Ver 1.4 ***/

  if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg  );
    strcpy(c_event_msg,"Error:Contact System Support.");
    fn_bat_pst_msg(c_ServiceName,c_event_msg,c_tag);
    tpfree((char *)ptr_Sbuf);
    tpfree((char *)ptr_Rbuf);
    fn_destroy_pipe();
    tpclose();
    tpterm();
    return;
  }

  EXEC SQL
       OPEN jobdata_cur;

  if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg  );
    strcpy(c_event_msg,"Error:Contact System Support.");
    fn_bat_pst_msg(c_ServiceName,c_event_msg,c_tag);
    tpfree((char *)ptr_Sbuf);
    tpfree((char *)ptr_Rbuf);
    fn_destroy_pipe();
    tpclose();
    tpterm();
    return;
  }

  file_ptr_data = NULL;

  /* GENERATING JOB DATA FILES  */

  while(1)
  {

     MEMSET(c_clm_mtch_accnt);
     i_cnt++;

     EXEC SQL
          FETCH   jobdata_cur
          INTO    :c_clm_mtch_accnt,
                 :c_cntrct_no;

     if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
     {
       fn_errlog( c_ServiceName, "S31030", SQLMSG, c_err_msg  );
       strcpy(c_event_msg,"Error:Contact System Support.");
       fn_bat_pst_msg(c_ServiceName,c_event_msg,c_tag);
			 EXEC SQL CLOSE jobdata_cur; /** Added in ver. 1.1 **/
       tpfree((char *)ptr_Sbuf);
       tpfree((char *)ptr_Rbuf);
       fn_destroy_pipe();
       tpclose();
       tpterm();
       return;
     }
     if(SQLCODE == NO_DATA_FOUND)
     {

       EXEC SQL
            CLOSE jobdata_cur;

       fn_userlog(c_ServiceName,"Writing to LAST file completed.");
       if(file_ptr_data != NULL)
       {
         /** Closing Job record details of last file, if any open.**/
         fprintf(file_ptr_data,"\n</JOB>");
         fclose(file_ptr_data);
         file_ptr_data = NULL;
       }

			 /**i_ret_val = 0;Ver. 1.1 : commented as of no use **/
       break;
     }

     rtrim(c_clm_mtch_accnt);
     rtrim(c_cntrct_no);

		 if(DEBUG_MSG_LVL_3){
     fn_userlog(c_ServiceName,"MATCH ACCOUNT IS :%s:",c_clm_mtch_accnt);
		 }

     if(file_ptr_data == NULL) /** If file is not open **/
     {

			 if(DEBUG_MSG_LVL_3){
       fn_userlog(c_ServiceName,"INSIDE NEW FILE CREATION ");
			 }

       i_rcrd_cnt++;
       MEMSET(c_dir_no);
       MEMSET(c_file_path);
       sprintf(c_dir_no,"CNT_%d",i_rcrd_cnt);
       rtrim(c_dir_no);
       sprintf(c_file_path,"%s/%s",c_FULL_PATH,c_dir_no);
       rtrim(c_file_path);

			 if(DEBUG_MSG_LVL_3){
       fn_userlog(c_ServiceName,"FULL PATH IS :%s:",c_file_path);
			 }

       if ((fp_tmp=fopen(c_file_path, "r")) == NULL)
       {

				if(DEBUG_MSG_LVL_3){
         fn_userlog(c_ServiceName,"CREATING....CNT_.");
			  }
         sprintf(c_file_path,"mkdir -m 0777 %s/%s",c_FULL_PATH,c_dir_no);
         system(c_file_path);
       }
       else
       {
         fclose(fp_tmp);
       }
			 MEMSET(c_file);
       sprintf(c_file,"/%s/%s/%s_%d.xml",c_FULL_PATH,c_dir_no,c_jobfile_name,i_rcrd_cnt);
       rtrim(c_file);
       fn_userlog(c_ServiceName,"FILE NAME IS :%s:",c_file); /* Ver 1.3 userlog to fn_userlog */
       file_ptr_data = fopen(c_file,"w");

       if(file_ptr_data == NULL)
       {

				 if(DEBUG_MSG_LVL_3){
         fn_userlog(c_ServiceName,"FILE COULD NOT BE CREATED ");
				 }
         strcpy(c_event_msg,"Error:Contact System Support.");
         fn_bat_pst_msg(c_ServiceName,c_event_msg,c_tag);
				 EXEC SQL CLOSE jobdata_cur;/** Added in Ver. 1.1 **/
         tpfree((char *)ptr_Sbuf);
         tpfree((char *)ptr_Rbuf);
         fn_destroy_pipe();
         tpclose();
         tpterm();
         return;
       }

			 if(DEBUG_MSG_LVL_3){
       fn_userlog(c_ServiceName," RECORD_COUNT PRINT :%d:",i_rcrd_cnt);
       fn_userlog(c_ServiceName," FILE COUNT PRINT :%d:", i_file_cnt[i_rcrd_cnt - 1]);
			 }

       fprintf(file_ptr_data,"<JOB>\n<JOB_START>\
                        \n<JOB_ID>%s_%d</JOB_ID>\
                        \n<RECORD_COUNT>%d</RECORD_COUNT>\
                        \n<DATA_FILE_COUNT>1</DATA_FILE_COUNT>\
                        \n<DATA_FILE_NUMBER>1</DATA_FILE_NUMBER>\n</JOB_START>\n",
                        c_jobfile_name,i_rcrd_cnt,i_file_cnt[i_rcrd_cnt - 1]);
     }
		 
		 if(DEBUG_MSG_LVL_3){
     fn_userlog(c_ServiceName,"Opened NEW file :%s:",c_file);
     }

     EXEC SQL
          SELECT    REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(usr_usr_nm,'&','&amp;'),'<','&lt;'),'>','&gt;'),'"','&quot;'),'''','&apos;'),
										REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(usr_email_addrss,'&','&amp;'),'<','&lt;'),'>','&gt;'),'"','&quot;'),'''','&apos;')
          INTO      :c_usr_nm,
                    :c_email_addrss
          FROM      usr_user_master, uac_usr_accnts
          WHERE     usr_usr_id = uac_usr_id
          AND       uac_clm_mtch_accnt = :c_clm_mtch_accnt;


     if(SQLCODE != 0)
     {
        fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg  );
        strcpy(c_event_msg,"Error:Contact System Support.");
        fn_bat_pst_msg(c_ServiceName,c_event_msg,c_tag);
				EXEC SQL CLOSE jobdata_cur;/** Added in Ver. 1.1 **/
        tpfree((char *)ptr_Sbuf);
        tpfree((char *)ptr_Rbuf);
        fn_destroy_pipe();
        tpclose();
        tpterm();
				return;
     } 


	  rtrim(c_usr_nm);
     rtrim(c_email_addrss);

     if(strcmp(c_email_addrss,"") == 0)
    {
      strcpy(c_email_addrss," ");
    }

    if(strcmp(c_usr_nm,"") == 0)
    {
      strcpy(c_usr_nm," ");
    }

if(DEBUG_MSG_LVL_3){
    fn_userlog(c_ServiceName,"E-MAIL :%s:",c_email_addrss); /* Ver 1.3 userlog to fn_userlog */
    fn_userlog(c_ServiceName,"USER NAME :%s:",c_usr_nm); /* Ver 1.3 userlog to fn_userlog */
}

     /* To Convert the '/' in contract note number to '_' for generating the file name */

     strcpy(c_cntrct_num,c_cntrct_no);
     memset(&c_contract_number,'\0',sizeof(c_contract_number));
     if ((token = strtok_r(c_cntrct_num, "/", &lasts)) != NULL)
     {
       sprintf(c_contract_number,"%s_", token);
       while ((token = strtok_r(NULL, "/", &lasts)) != NULL)
       {
         strcat(c_contract_number,token);
       }
     }


	   /* if(i_rcrd_no <= i_file_cnt[i_rcrd_cnt - 1])
     i_rcrd_no = i_rcrd_no++; Ver 1.2 */
		 i_rcrd_no = i_rcrd_no + 1;

     fprintf(file_ptr_data,"<JOB_DATA>\n<RECORD_ID>%d</RECORD_ID> \
                      \n<userInfo>\n<email>%s</email>\n",i_rcrd_no,c_email_addrss);
     fprintf(file_ptr_data,"<pass>%s</pass>\n",c_clm_mtch_accnt);
     fprintf(file_ptr_data,"<filename>%s_%s_%s</filename>\n",c_date_trd,c_exchng_cd,c_contract_number);
     fprintf(file_ptr_data,"<customerName>%s</customerName>\n",c_usr_nm);
     fprintf(file_ptr_data,"<accountno>%s</accountno>\n",c_clm_mtch_accnt);
     fprintf(file_ptr_data,"<orderplacedon>%s</orderplacedon>\n",c_date_string);
     fprintf(file_ptr_data,"</userInfo>\n");
     fprintf(file_ptr_data,"</JOB_DATA>\n");

     if(DEBUG_MSG_LVL_3){
     fn_userlog(c_ServiceName,"TOTAL NUMBER OF RECORDS IS :%d:",i_rcrd_no); /* Ver 1.3 userlog to fn_userlog */
     fn_userlog(c_ServiceName,"I_CNT is :%d:",i_cnt); /* Ver 1.3 userlog to fn_userlog */
     fn_userlog(c_ServiceName,"I_FILE_CNT is :%d:",i_file_cnt[i_tmp_job_cnt]); /* Ver 1.3 userlog to fn_userlog */
     fn_userlog(c_ServiceName,"VALUE IS :%d:", i_cnt%i_file_cnt[i_tmp_job_cnt]); /* Ver 1.3 userlog to fn_userlog */
     }

     if(i_cnt%i_file_cnt[i_tmp_job_cnt] == 0)
     {
        fprintf(file_ptr_data,"\n</JOB>");
        fclose(file_ptr_data);
        file_ptr_data = NULL;
        i_cnt = 0;
        i_tmp_job_cnt = i_tmp_job_cnt + 1;
     }

     strcpy(c_userid,"system");
     i_no_of_trade = 0;

     rtrim(c_usr_nm);

		 if(DEBUG_MSG_LVL_3){
     fn_userlog(c_ServiceName,"MATCH ACCOUNT IS :%s:",c_clm_mtch_accnt);
		 }

     memset(&c_usr_nm,'\0',sizeof(c_usr_nm));

	   i_fut_cnt = 0;
     i_opt_cnt = 0;

     Finit32(ptr_Sbuf, (FLDLEN32) Fsizeof32(ptr_Sbuf));

     i_returncode = fn_pack_vartofml( c_ServiceName,
                                      c_err_msg,
                                      &ptr_Sbuf,
                                      5,
                                      FFO_USR_ID, ( char * )c_userid,
                                      FFO_SSSN_ID, ( char * )&li_session_id,
                                      FFO_EBA_MTCH_ACT_NO, ( char * )c_clm_mtch_accnt,
                                      FFO_NARRATION_ID, ( char * )c_cntrct_no,
                                      FFO_PRDCT_TYP, (char * )&c_opn_typ );

     if( i_returncode == -1 )
     {
       fn_errlog( c_ServiceName, "S31040", LIBMSG, c_err_msg );
			 EXEC SQL CLOSE jobdata_cur;/** Added in Ver. 1.1 **/
       tpfree((char *)ptr_Sbuf);
       tpfree((char *)ptr_Rbuf);
       fn_destroy_pipe();
       tpclose();
       tpterm();
       return;
     }

     i_returncode =tpcall("SFO_US_DLS_XML",(char*)ptr_Sbuf,0,(char**)&ptr_Rbuf,&l_recvbuff,TPNOTRAN|TPNOTIME);

		 if (i_returncode == -1)
     {
       if (TPCODE != TPESVCFAIL)
       {
         fn_errlog( c_ServiceName, "S31045", LIBMSG, c_err_msg  );
         strcpy(c_event_msg,"Error:Contact System Support.");
         fn_bat_pst_msg(c_ServiceName,c_event_msg,c_tag);
				 EXEC SQL CLOSE jobdata_cur;/** Added in Ver. 1.1 **/
         tpfree((char *)ptr_Sbuf);
         tpfree((char *)ptr_Rbuf);
         fn_destroy_pipe();
         tpclose();
         tpterm();
         return;
       }
       else
       {
         i_returncode = Fget32(ptr_Rbuf, FFO_ERR_MSG, 0, c_event_msg, 0);
         if (i_returncode == -1)
         {
           fn_errlog( c_ServiceName, "S31050", LIBMSG, c_err_msg  );
           strcpy(c_event_msg,"Error:Contact System Support.");
           fn_bat_pst_msg(c_ServiceName,c_event_msg,c_tag);
					 EXEC SQL CLOSE jobdata_cur;/** Added in Ver. 1.1 **/
           tpfree((char *)ptr_Sbuf);
           tpfree((char *)ptr_Rbuf);
           fn_destroy_pipe();
           tpclose();
           tpterm();
           return;
         }
       }
     }

		 i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                         c_err_msg,
                                         ptr_Rbuf,
                                         9,
                                         FFO_IP_VIEW_NM, ( char * )c_user_name, NULL,
                                         FFO_INDX_CD, ( char * )c_addr_ln1, NULL,
                                         FFO_UNDRLYNG, ( char * )c_addr_ln2, NULL,
                                         FFO_UND_PRC_TM, ( char * )c_addr_ln3, NULL,
                                         FFO_OP_VIEW_NM, ( char * )c_addr_ln4, NULL,
                                         FFO_SERIES, ( char * )c_pan_no, NULL,
                                         FFO_OI_INDCTR, ( char * )c_tele_num, NULL,
                                         FFO_RCRD_DT, (char * )c_trade_dt, NULL,
                                         FFO_CTCL_ID, (char * )c_ucc_cd, NULL );
     if( i_returncode != 0 )
     {
       fn_errlog( c_ServiceName, "S31055", LIBMSG , c_err_msg );
       Fadd32( ptr_Rbuf, FFO_ERR_MSG, c_err_msg, 0 );
       fn_errlog( c_ServiceName, "S31060", LIBMSG, c_err_msg  );
       strcpy(c_event_msg,"Error:Contact System Support.");
       fn_bat_pst_msg(c_ServiceName,c_event_msg,c_tag);
			 EXEC SQL CLOSE jobdata_cur;/** Added in Ver. 1.1 **/
       tpfree((char *)ptr_Sbuf);
       tpfree((char *)ptr_Rbuf);
       fn_destroy_pipe();
       tpclose();
       tpterm();
       return;
     }

     rtrim(c_user_name);
     rtrim(c_addr_ln1);
     rtrim(c_addr_ln2);
     rtrim(c_addr_ln3);
     rtrim(c_addr_ln4);
     rtrim(c_tele_num);
		 rtrim(c_pan_no);
		 rtrim(c_trade_dt);
		 rtrim(c_ucc_cd);

		 if(DEBUG_MSG_LVL_3){
		 fn_userlog(c_ServiceName,"Address Line 1 is :%s:",c_addr_ln1);
     fn_userlog(c_ServiceName,"Address Line 2 is :%s:",c_addr_ln2);
     fn_userlog(c_ServiceName,"Address Line 3 is :%s:",c_addr_ln3);
     fn_userlog(c_ServiceName,"Address Line 4 is :%s:",c_addr_ln4);
     fn_userlog(c_ServiceName,"Pan Number is :%s:",c_pan_no);
     fn_userlog(c_ServiceName,"Telephone Number is :%s:",c_tele_num);
     fn_userlog(c_ServiceName,"Trade date is :%s:",c_trade_dt);
     fn_userlog(c_ServiceName,"UCC code is :%s:",c_ucc_cd);
		 }

     /* To Convert the '/' in contract note number to '_' for generating the file name */

     strcpy(c_cntrct_num,c_cntrct_no);
     memset(&c_contract_number,'\0',sizeof(c_contract_number));
     if ((token = strtok_r(c_cntrct_num, "/", &lasts)) != NULL)
     {
       sprintf(c_contract_number,"%s_", token);
       while ((token = strtok_r(NULL, "/", &lasts)) != NULL)
       {
         strcat(c_contract_number,token);
       }
     }


     file_ptr = NULL;

     MEMSET(c_file);
     sprintf(c_file,"/%s/%s/%s_%s_%s.xml",c_FULL_PATH,c_dir_no,c_date_trd,c_exchng_cd,c_contract_number);
     rtrim(c_file);
     fn_userlog(c_ServiceName,"FILE NAME IS :%s:",c_file); /* Ver 1.3 userlog to fn_userlog */
     file_ptr = fopen(c_file,"w");

		 if(file_ptr == NULL)
     {
       fn_userlog(c_ServiceName,"FILE COULD NOT BE CREATED "); /* Ver 1.3 userlog to fn_userlog */
       errlog(c_ServiceName, "S31065", SQLMSG, DEF_USR, DEF_SSSN, c_errmsg);
       strcpy(c_event_msg,"Error:Contact System Support.");
       fn_bat_pst_msg(c_ServiceName,c_event_msg,c_tag);
			 EXEC SQL CLOSE jobdata_cur;/** Added in Ver. 1.1 **/
			 tpfree((char *)ptr_Sbuf);
       tpfree((char *)ptr_Rbuf);	
			 fn_destroy_pipe();
       tpclose();
       tpterm();
       /** i_ret_val = 1; Ver. 1.1 as of no use **/
       return;
     }

     fprintf(file_ptr,"<STATEMENT>\
                     \n<userDetails>\
                     \n<UserName>%s</UserName>\
                     \n<UserAdd1>%s</UserAdd1>\
                     \n<UserAdd2>%s</UserAdd2>\
                     \n<UserCity>%s</UserCity>\
                     \n<UserZip>%s</UserZip>\
                     \n<UserState></UserState>\
                     \n<UserCountry></UserCountry>\
                     \n<UniqueClientCode>%s</UniqueClientCode>\
                     \n<TradingCode>%s</TradingCode>\
                     \n<PanNo>%s</PanNo>\
                     \n<ContractNoteNo>%s</ContractNoteNo>\
                     \n<TradeDate>%s</TradeDate>\
                     \n<SettlementDate>%s</SettlementDate>\
                     \n<TelephoneNo>%s</TelephoneNo>\
                     \n<ClientMapIn></ClientMapIn>\
                     \n</userDetails>\n",c_user_name,c_addr_ln1,c_addr_ln2,c_addr_ln3,c_addr_ln4,c_ucc_cd,c_clm_mtch_accnt,c_pan_no,c_cntrct_no,c_trade_dt,c_trade_dt,c_tele_num);

     fn_userlog(c_ServiceName,"CONTRACT NUMBER IS :%s:",c_cntrct_no); /* Ver 1.3 userlog to fn_userlog */

		 EXEC SQL
           DECLARE TRADE_FLW CURSOR FOR
           SELECT count(*),fcd_trd_flw
           FROM   fno_cntrct_dtls
           WHERE  fcd_cntrct_nmbr =  :c_cntrct_no
           AND    fcd_trd_flw in ('B','S')
           GROUP BY fcd_trd_flw;

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      errlog(c_ServiceName, "S31070", SQLMSG, DEF_USR, DEF_SSSN, c_errmsg);
      strcpy(c_event_msg,"Error:Contact System Support.");
      fn_bat_pst_msg(c_ServiceName,c_event_msg,c_tag);
			EXEC SQL CLOSE jobdata_cur;/** Added in Ver. 1.1 **/
			tpfree((char *)ptr_Sbuf);
      tpfree((char *)ptr_Rbuf);
      fn_destroy_pipe();
      tpclose();
      tpterm();
      /**i_ret_val = 1; Ver. 1.1 as of no use **/
      return;
    }

    EXEC SQL OPEN TRADE_FLW;

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      errlog(c_ServiceName, "S31075", SQLMSG, DEF_USR, DEF_SSSN, c_errmsg);
      strcpy(c_event_msg,"Error:Contact System Support.");
      fn_bat_pst_msg(c_ServiceName,c_event_msg,c_tag);
			EXEC SQL CLOSE jobdata_cur;/** Added in Ver. 1.1 **/
			tpfree((char *)ptr_Sbuf);
      tpfree((char *)ptr_Rbuf);
      fn_destroy_pipe();
      tpclose();
      tpterm();
      /** i_ret_val = 1; Ver. 1.1 as of no use **/
      return;
    }

	  i_cur = 0;
    i_no_of_buy = 0;
    i_no_of_sell = 0;
    while(i_cur < 2)
    {

      i_no_of_bs_trades = 0;
      c_trd_flw_arr = 'N';

      EXEC SQL FETCH TRADE_FLW INTO :i_no_of_bs_trades,
                                    :c_trd_flw_arr;

      if(c_trd_flw_arr == 'B' && i_cur == 0)
      {
        i_no_of_buy = i_no_of_bs_trades;
      }
      if(c_trd_flw_arr == 'S' && i_cur == 0)
      {
        fn_userlog(c_ServiceName,"We have only sell records"); /* Ver 1.3 userlog to fn_userlog */
        i_no_of_sell = i_no_of_bs_trades;
        break;
      }
      if(c_trd_flw_arr == 'S' && i_cur == 1)
      {
        fn_userlog(c_ServiceName,"We have both buy and sell records"); /* Ver 1.3 userlog to fn_userlog */
        i_no_of_sell = i_no_of_bs_trades;
      }

      i_cur++;

    }

		if(DEBUG_MSG_LVL_3){
    fn_userlog(c_ServiceName,"TOTAL NUMBER OF BUY RECORDS :%d:",i_no_of_buy);
		}

	  d_buy_sum_tot = 0.0;
    d_buy_sum_brk = 0.0;
    d_buy_ser_tax = 0.0;
    d_buy_net_amt = 0.0;

    fprintf(file_ptr,"<Transaction>\n");

    fn_userlog(c_ServiceName,"WROTE TRANSACTION BUY"); /* Ver 1.3 userlog to fn_userlog */

    for(i = 0; i< i_no_of_buy; i++)
    {

			if(DEBUG_MSG_LVL_3){
      fn_userlog(c_ServiceName,"INSIDE FOR LOOP OF BUY ");
			}

      d_brk_tot = 0.0;

      memset(&c_trd_tm,'\0',sizeof(c_trd_tm));
      memset(&c_ordr_no,'\0',sizeof(c_ordr_no));
      memset(&c_ordr_tm,'\0',sizeof(c_ordr_tm));
      memset(&c_trd_no,'\0',sizeof(c_trd_no));
      memset(&c_stck_nm,'\0',sizeof(c_stck_nm));

      i_err[0]  = Fget32(ptr_Rbuf,FFO_TRD_FLW,i,(char*)&c_trd_flw,0);
      i_err[1]  = Fget32(ptr_Rbuf,FFO_SPRD_ORD_REF,i,(char*)c_ordr_no,0);
      i_err[2]  = Fget32(ptr_Rbuf,FFO_ORD_DT,i,(char*)c_ordr_tm,0);
      i_err[3]  = Fget32(ptr_Rbuf,FFO_TRD_RFRNC,i,(char*)c_trd_no,0);
      i_err[4]  = Fget32(ptr_Rbuf,FFO_TRD_DT,i,(char*)c_trd_tm,0);
      i_err[5]  = Fget32(ptr_Rbuf,FFO_SYMBOL,i,(char*)c_stck_nm,0);
      i_err[6]  = Fget32(ptr_Rbuf,FFO_LST_TRD_QTY,i,(char*)&l_qty,0);
      i_err[7]  = Fget32(ptr_Rbuf,FFO_CLS_PRC,i,(char*)&d_grss_rt_per_sec,0);
      i_err[8]  = Fget32(ptr_Rbuf,FFO_OLD_EFF_RT,i,(char*)&d_tot,0);
      i_err[9]  = Fget32(ptr_Rbuf,FFO_BO_AMT_BLKD,i,(char*)&d_brk_tot,0);
      i_err[10] = Fget32(ptr_Rbuf,FFO_MTCH_CNTCT_KEY,i,(char*)c_ser_tax,0);
      i_err[11] = Fget32(ptr_Rbuf,FFO_BAL_AMT,i,(char*)&d_tot_amt,0);

		  for(k=0; k<=11; k++)
      {
        if(i_err[k] == -1)
        {
          fn_errlog( c_ServiceName, "S31080", FMLMSG, c_err_msg  );
          strcpy(c_event_msg,"Error:Contact System Support.");
          fn_bat_pst_msg(c_ServiceName,c_event_msg,c_tag);
					EXEC SQL CLOSE jobdata_cur;/** Added in Ver. 1.1 **/
					EXEC SQL CLOSE TRADE_FLW;/** Added in Ver. 1.1 **/
          tpfree((char *)ptr_Sbuf);
          tpfree((char *)ptr_Rbuf);
          fn_destroy_pipe();
          tpclose();
          tpterm();
          return;
        }

      }

			if(DEBUG_MSG_LVL_3){
      fn_userlog(c_ServiceName,"AFTER DOING AN FGET FOR BUY"); /* Ver 1.3 userlog to fn_userlog */

      fn_userlog(c_ServiceName,"AFTER FGET IN FOR LOOP FOR BUY"); /* Ver 1.3 userlog to fn_userlog */
			}

			if(DEBUG_MSG_LVL_3){
      fn_userlog(c_ServiceName," BROKERAGE IS :%lf:",d_brk_tot);
			}

		  EXEC SQL
           SELECT REPLACE(REPLACE(REPLACE(REPLACE(:c_stck_nm,'&','&amp;'),'<','&lt;'),'"','&quot;'),'''','&apos;')
           INTO :c_addr_ln1
           FROM DUAL;

      if(SQLCODE != 0)
      {
         fn_errlog( c_ServiceName, "S31085", SQLMSG, c_err_msg  );
         strcpy(c_event_msg,"Error:Contact System Support.");
         fn_bat_pst_msg(c_ServiceName,c_event_msg,c_tag);
				 EXEC SQL CLOSE jobdata_cur;/** Added in Ver. 1.1 **/
				 EXEC SQL CLOSE TRADE_FLW;/** Added in Ver. 1.1 **/
         tpfree((char *)ptr_Sbuf);
         tpfree((char *)ptr_Rbuf);
         fn_destroy_pipe();
         tpclose();
         tpterm();
         return;
			}
     

      rtrim(c_ser_tax);
      sscanf((char *)c_ser_tax, "%lf", &d_ser_tax);

			if(DEBUG_MSG_LVL_3){
      fn_userlog(c_ServiceName," SERVICE TAX IS :%lf:",d_ser_tax);
			}

      rtrim(c_ordr_no);
      rtrim(c_ordr_tm);
      rtrim(c_trd_no);
      rtrim(c_trd_tm);
      rtrim(c_stck_nm);

			if(DEBUG_MSG_LVL_3){
      fn_userlog(c_ServiceName,"TRADE TIME IS :%s:",c_trd_tm);
			}

		  fprintf(file_ptr,"<record>\
                      \n<record_Flow>%c</record_Flow>\
                      \n<OrderNo>%s</OrderNo>\
                      \n<OrderTime>%s</OrderTime>\
                      \n<TradeNo>%s</TradeNo>\
                      \n<TradeTime>%s</TradeTime>\
                      \n<Security>%s</Security>\
                      \n<Quantity>%ld</Quantity>\
                      \n<GrossRatePerSecurity>%0.2lf</GrossRatePerSecurity>\
                      \n<Total>%0.2lf</Total>\
                      \n<BrokerageTotal>%0.2lf</BrokerageTotal>\
                      \n<ServiceTax>%0.2lf</ServiceTax>\
                      \n<TotalAmount>%0.2lf</TotalAmount>\
                      \n</record>\n",c_trd_flw,c_ordr_no,c_ordr_tm,c_trd_no,c_trd_tm,c_stck_nm,l_qty,d_grss_rt_per_sec,d_tot,d_brk_tot,d_ser_tax,d_tot_amt);

      d_buy_sum_tot = d_buy_sum_tot + d_tot;
      d_buy_sum_brk = d_buy_sum_brk + d_brk_tot;
      d_buy_ser_tax = d_buy_ser_tax + d_ser_tax;
      d_buy_net_amt = d_buy_net_amt + d_tot_amt;


			if(DEBUG_MSG_LVL_3){
      fn_userlog(c_ServiceName,"AFTER WRITING THE DETAILS OF FBUY IN FOR LOOP ");
			}
    }
/*
		fprintf(file_ptr,"<record>\
                     \n<record_Flow>BS</record_Flow>\
                     \n<OrderNo></OrderNo>\
                     \n<OrderTime></OrderTime>\
                     \n<TradeNo></TradeNo>\
                     \n<TradeTime></TradeTime>\
                     \n<Security></Security>\
                     \n<Quantity></Quantity>\
                     \n<GrossRatePerSecurity></GrossRatePerSecurity>\
                     \n<Total>%0.2lf</Total>\
                     \n<BrokerageTotal>%0.2lf</BrokerageTotal>\
                     \n<ServiceTax>%0.4lf</ServiceTax>\
                     \n<TotalAmount>%0.2lf</TotalAmount>\
                     \n</record>\n",d_buy_sum_tot,d_buy_sum_brk,d_buy_ser_tax,d_buy_net_amt); */

    d_sell_sum_tot = 0.0;
    d_sell_sum_brk = 0.0;
    d_sell_ser_tax = 0.0;
    d_sell_net_amt = 0.0;


    j = i_no_of_buy;

		if(DEBUG_MSG_LVL_3){
    fn_userlog(c_ServiceName,"NUMBER OF SELL RECORDS IS :%d:",i_no_of_sell);
		}

	  for(i = 0; i < i_no_of_sell; i++) /* Gets the details of all orders and trades */
    {

			if(DEBUG_MSG_LVL_3){
      fn_userlog(c_ServiceName,"INSIDE SELL LOOP");
			}

      memset(&c_trd_tm,'\0',sizeof(c_trd_tm));
      memset(&c_ordr_no,'\0',sizeof(c_ordr_no));
      memset(&c_ordr_tm,'\0',sizeof(c_ordr_tm));
      memset(&c_trd_no,'\0',sizeof(c_trd_no));
      memset(&c_stck_nm,'\0',sizeof(c_stck_nm));

      i_err[0]  = Fget32(ptr_Rbuf,FFO_TRD_FLW,j,(char*)&c_trd_flw,0);
      i_err[1]  = Fget32(ptr_Rbuf,FFO_SPRD_ORD_REF,j,(char*)c_ordr_no,0);
      i_err[2]  = Fget32(ptr_Rbuf,FFO_ORD_DT,j,(char*)c_ordr_tm,0);
      i_err[3]  = Fget32(ptr_Rbuf,FFO_TRD_RFRNC,j,(char*)c_trd_no,0);
      i_err[4]  = Fget32(ptr_Rbuf,FFO_TRD_DT,j,(char*)c_trd_tm,0);
      i_err[5]  = Fget32(ptr_Rbuf,FFO_SYMBOL,j,(char*)c_stck_nm,0);
      i_err[6]  = Fget32(ptr_Rbuf,FFO_LST_TRD_QTY,j,(char*)&l_qty,0);
      i_err[7]  = Fget32(ptr_Rbuf,FFO_CLS_PRC,j,(char*)&d_grss_rt_per_sec,0);
      i_err[8]  = Fget32(ptr_Rbuf,FFO_OLD_EFF_RT,j,(char*)&d_tot,0);
      i_err[9]  = Fget32(ptr_Rbuf,FFO_BO_AMT_BLKD,j,(char*)&d_brk_tot,0);
      i_err[10] = Fget32(ptr_Rbuf,FFO_MTCH_CNTCT_KEY,j,(char*)c_ser_tax,0);
      i_err[11] = Fget32(ptr_Rbuf,FFO_BAL_AMT,j,(char*)&d_tot_amt,0);

		  for(k=0; k<=11; k++)
      {
        if(i_err[k] == -1)
        {
          fn_errlog( c_ServiceName, "S31090", TPMSG, c_err_msg  );
          strcpy(c_event_msg,"Error:Contact System Support");
          fn_userlog(c_ServiceName,"Error at Field Number :%d:",k);
          fn_bat_pst_msg(c_ServiceName,c_event_msg,c_tag);
					EXEC SQL CLOSE jobdata_cur;/** Added in Ver. 1.1 **/
					EXEC SQL CLOSE TRADE_FLW;/** Added in Ver. 1.1 **/
          tpfree((char *)ptr_Sbuf);
          tpfree((char *)ptr_Rbuf);
          fn_destroy_pipe();
          tpclose();
          tpterm();
          return;
        }

     }
      rtrim(c_ordr_no);
      rtrim(c_ordr_tm);
      rtrim(c_trd_no);
      rtrim(c_trd_tm);
      rtrim(c_stck_nm);
      rtrim(c_ser_tax);

			if(DEBUG_MSG_LVL_3){
      fn_userlog(c_ServiceName," BROKERAGE IS :%lf:",d_brk_tot);
			}

      sscanf((char *)c_ser_tax, "%lf", &d_ser_tax);

			if(DEBUG_MSG_LVL_3){
      fn_userlog(c_ServiceName," SERVICE TAX IS :%lf:",d_ser_tax);
			}

		  fprintf(file_ptr,"<record>\
                    \n<record_Flow>%c</record_Flow>\
                    \n<OrderNo>%s</OrderNo>\
                    \n<OrderTime>%s</OrderTime>\
                    \n<TradeNo>%s</TradeNo>\
                    \n<TradeTime>%s</TradeTime>\
                    \n<Security>%s</Security>\
                    \n<Quantity>%ld</Quantity>\
                    \n<GrossRatePerSecurity>%0.2lf</GrossRatePerSecurity>\
                    \n<Total>%0.2lf</Total>\
                    \n<BrokerageTotal>%0.2lf</BrokerageTotal>\
                    \n<ServiceTax>%0.2lf</ServiceTax>\
                    \n<TotalAmount>%0.2lf</TotalAmount>\
                    \n</record>\n",c_trd_flw,c_ordr_no,c_ordr_tm,c_trd_no,c_trd_tm,c_stck_nm,l_qty,d_grss_rt_per_sec,d_tot,d_brk_tot,d_ser_tax,d_tot_amt);

      d_sell_sum_tot = d_sell_sum_tot + d_tot;
      d_sell_sum_brk = d_sell_sum_brk + d_brk_tot;
      d_sell_ser_tax = d_sell_ser_tax + d_ser_tax;
      d_sell_net_amt = d_sell_net_amt + d_tot_amt;

			if(DEBUG_MSG_LVL_3){
      fn_userlog(c_ServiceName,"AFTER WRITING SELL RECORDS TO FILE");
			}

      j = j + 1;

    }

/*
	  fprintf(file_ptr,"<record>\
                      \n<record_Flow>SS</record_Flow>\
                      \n<OrderNo></OrderNo>\
                      \n<OrderTime></OrderTime>\
                      \n<TradeNo></TradeNo>\
                      \n<TradeTime></TradeTime>\
                      \n<Security></Security>\
                      \n<Quantity></Quantity>\
                      \n<GrossRatePerSecurity></GrossRatePerSecurity>\
                      \n<Total>%0.2lf</Total>\
                      \n<BrokerageTotal>%0.2lf</BrokerageTotal>\
                      \n<ServiceTax>%0.4lf</ServiceTax>\
                      \n<TotalAmount>%0.2lf</TotalAmount>\
                      \n</record>\n",d_sell_sum_tot,d_sell_sum_brk,d_sell_ser_tax,d_sell_net_amt);	 */

    fprintf(file_ptr,"</Transaction>\n");

    /* END OF BUY SELL TRANSACTION */

    d_sec_tran_tax = 0.0;
    d_fut_stt = 0.0;
    d_opt_stt = 0.0;
    d_annx_tot = 0.0;

    i_count_stck = Foccur32(ptr_Rbuf, FFO_FRWD_TM);

		if(DEBUG_MSG_LVL_3){
    fn_userlog(c_ServiceName," COUNT OF EXPRY DATE IS :%d:",i_count_stck);
		}

	  for(i = 0; i< i_count_stck; i++)
    {

      d_fut_stt = 0.0;
      d_opt_stt = 0.0;

      i_err[0]  = Fget32(ptr_Rbuf,FFO_MIN_MRGN_PRCNT,i,(char*)&d_fut_stt,0);
      i_err[1]  = Fget32(ptr_Rbuf,FFO_OI_LOW,i,(char*)&d_opt_stt,0);

			if(DEBUG_MSG_LVL_3){
      fn_userlog(c_ServiceName," FUTURE STT :%lf:",d_fut_stt);
      fn_userlog(c_ServiceName," OPTION STT :%lf:",d_opt_stt);
			}

      d_sec_tran_tax  = d_sec_tran_tax + d_fut_stt + d_opt_stt;  /* CHECK ROUNDING HERE */

    }

		if(DEBUG_MSG_LVL_3){
    fn_userlog(c_ServiceName,"USER DATE IS :%s:",c_trd_dt);
		}

    fprintf(file_ptr,"\n<UserBrokerageDetails>");

    i_dec_part = (int)(d_sec_tran_tax *100.00)%100;
    if(i_dec_part >= 50)
    {
      i_sec_tran_tax = (int)(d_sec_tran_tax) +1;
    }
    else
    {
      i_sec_tran_tax = (int)(d_sec_tran_tax);
    }
    d_sec_tran_tax = (double)(i_sec_tran_tax);

    fprintf(file_ptr,"\n<SecurityTransactionTax>%0.2lf</SecurityTransactionTax>",d_sec_tran_tax);
    fprintf(file_ptr,"\n<UserDate>%s</UserDate>",c_trd_dt);
    fprintf(file_ptr,"\n</UserBrokerageDetails>\n");


    fprintf(file_ptr,"\n<Annexture>");

	  /* fprintf(file_ptr,"\n<record>"); */

		if(DEBUG_MSG_LVL_3){
    fn_userlog(c_ServiceName,"TRADE FLOW IS :%c:",c_trd_flw);
		}

    for(i = 0; i < i_count_stck; i++)
    {

      memset(&c_cnt_wth_dt,'\0',sizeof(c_cnt_wth_dt));

      i_err[12] = Fget32(ptr_Rbuf,FFO_FRWD_TM,i,(char*)c_cnt_wth_dt,0);

      rtrim(c_cnt_wth_dt);

      memset(&c_contract,'\0',sizeof(c_contract));
      memset(&token,'\0',sizeof(token));
      memset(&c_exp_dt,'\0',sizeof(c_exp_dt));

		  if(DEBUG_MSG_LVL_3){	
      fn_userlog(c_ServiceName,"After MEMSET");
      fn_userlog(c_ServiceName,"CONTRACT WITH EXPIRY DATE IS :%s:",c_cnt_wth_dt);
      fn_userlog(c_ServiceName,"Value of 'i' is :%d:",i);
			}

      if ((token = strtok_r(c_cnt_wth_dt, ",", &lasts)) != NULL)
      {
        sprintf(c_contract,"%s", token);

				if(DEBUG_MSG_LVL_3){
        fn_userlog(c_ServiceName,"TOKEN is :%s:",token);
				}

        while ((token = strtok_r(NULL, ",", &lasts)) != NULL)
        {
          sprintf(c_exp_dt,token);
					if(DEBUG_MSG_LVL_3){
          fn_userlog(c_ServiceName,"TOKEN 2 is :%s:",token);
					}
        }
      }

			if(DEBUG_MSG_LVL_3){
      fn_userlog(c_ServiceName,"BEFORE WRITING TO FILE ANNEXURE R DETAILS");
			}
			
		  EXEC SQL
      SELECT REPLACE(REPLACE(REPLACE(REPLACE(:c_contract,'&','&amp;'),'<','&lt;'),'"','&quot;'),'''','&apos;')
             INTO   :c_contract
             FROM DUAL;
      fprintf(file_ptr,"\n<record>");
      fprintf(file_ptr,"\n<Annexure_type>R</Annexure_type>");
      fprintf(file_ptr,"\n<AnnexSrNo>%d</AnnexSrNo>",i+1);
      fprintf(file_ptr,"\n<AnnexureSecurity>%s</AnnexureSecurity>",c_contract);
      fprintf(file_ptr,"\n<ExpiryDate>%s</ExpiryDate>",c_exp_dt);

      i_err[13] = Fget32(ptr_Rbuf,FFO_QUEUE_NAME,i,(char*)c_fo_flg,0);

			if(DEBUG_MSG_LVL_3){
      fn_userlog(c_ServiceName,"FO FLAG IS :%s:",c_fo_flg);
			}

      rtrim(c_fo_flg);


      if(strcmp(c_fo_flg,"F") == 0)
      {

				if(DEBUG_MSG_LVL_3){
        fn_userlog(c_ServiceName,"FUT_CNT IS :%d:",i_fut_cnt);
				}

        i_err[14] = Fget32(ptr_Rbuf,FFO_JIFFY,i_fut_cnt,(char*)&d_fut_sll,0);
        i_err[15] = Fget32(ptr_Rbuf,FFO_MIN_MRGN_PRCNT,i_fut_cnt,(char*)&d_fut_stt,0);

        fprintf(file_ptr,"\n<FuturesSell>%0.2lf</FuturesSell>",d_fut_sll);
        fprintf(file_ptr,"\n<FuturesSTT>%0.2lf</FuturesSTT>",d_fut_stt);
        fprintf(file_ptr,"\n<OptionSell>0.00</OptionSell>");
        fprintf(file_ptr,"\n<OptionSTT>0.00</OptionSTT>");
        fprintf(file_ptr,"\n<TotalSTT>%0.2lf</TotalSTT>",d_fut_stt);
        fprintf(file_ptr,"\n<AnnexureTotal></AnnexureTotal>");
        fprintf(file_ptr,"\n<AnnexureSecurityTransactionTax></AnnexureSecurityTransactionTax>");
				fprintf(file_ptr,"\n</record>");

        i_fut_cnt = i_fut_cnt + 1;
        d_annx_tot = d_annx_tot + d_fut_stt;

      }
		  else
      {
				if(DEBUG_MSG_LVL_3){
        fn_userlog(c_ServiceName,"OPT_CNT IS :%d:",i_opt_cnt);
				}

        i_err[14] = Fget32(ptr_Rbuf,FFO_OI_HIGH,i_opt_cnt,(char*)&d_opt_sll,0);
        i_err[15] = Fget32(ptr_Rbuf,FFO_OI_LOW,i_opt_cnt,(char*)&d_opt_stt,0);

        fprintf(file_ptr,"\n<FuturesSell>0.00</FuturesSell>");
        fprintf(file_ptr,"\n<FuturesSTT>0.00</FuturesSTT>");
        fprintf(file_ptr,"\n<OptionSell>%0.2lf</OptionSell>",d_opt_sll);
        fprintf(file_ptr,"\n<OptionSTT>%0.2lf</OptionSTT>",d_opt_stt);
        fprintf(file_ptr,"\n<TotalSTT>%0.2lf</TotalSTT>",d_opt_stt);
        fprintf(file_ptr,"\n<AnnexureTotal></AnnexureTotal>");
        fprintf(file_ptr,"\n<AnnexureSecurityTransactionTax></AnnexureSecurityTransactionTax>");
				fprintf(file_ptr,"\n</record>");

        i_opt_cnt = i_opt_cnt  + 1;
        d_annx_tot = d_annx_tot + d_opt_stt;

      }

    }

    /* fprintf(file_ptr,"\n</record>"); */

    fprintf(file_ptr,"\n<record>");
    fprintf(file_ptr,"\n<Annexure_type>T</Annexure_type>");
    fprintf(file_ptr,"\n<AnnexSrNo></AnnexSrNo>");
    fprintf(file_ptr,"\n<AnnexureSecurity></AnnexureSecurity>");
    fprintf(file_ptr,"\n<ExpiryDate></ExpiryDate>");
    fprintf(file_ptr,"\n<FuturesSell></FuturesSell>");
    fprintf(file_ptr,"\n<FuturesSTT></FuturesSTT>");
    fprintf(file_ptr,"\n<OptionSell></OptionSell>");
    fprintf(file_ptr,"\n<OptionSTT></OptionSTT>");
    fprintf(file_ptr,"\n<TotalSTT></TotalSTT>");
    fprintf(file_ptr,"\n<AnnexureTotal>%0.2lf</AnnexureTotal>",d_annx_tot);
		
		i_dec_part = (int)(d_annx_tot *100.00)%100;
    if(i_dec_part >= 50)
    {
      i_sec_tran_tax = (int)(d_annx_tot) +1;
    }
    else
    {
      i_sec_tran_tax = (int)(d_annx_tot);
    }
    d_annx_tot = (double)(i_sec_tran_tax);


    fprintf(file_ptr,"\n<AnnexureSecurityTransactionTax>%0.2lf</AnnexureSecurityTransactionTax>",d_annx_tot);
    fprintf(file_ptr,"\n</record>");

    fprintf(file_ptr,"\n</Annexture>");

    fprintf(file_ptr,"\n</STATEMENT>");
    fclose(file_ptr);

  }

  MEMSET(c_shs_scrp_path);
  MEMSET(trans_cnt_note_xml);
  strcpy(c_shs_scrp_path,tuxgetenv("POSTX_HOME"));
  sprintf(trans_cnt_note_xml,"ksh %s/cnt_xml_trnsfr.sh %s %s",c_shs_scrp_path,c_date_trd,c_exchng_cd);
  rtrim(trans_cnt_note_xml);
  system(trans_cnt_note_xml);
	
	/** Following added in Ver. 1.1 **/
	EXEC SQL CLOSE jobdata_cur;
	EXEC SQL CLOSE TRADE_FLW;
	tpfree((char *)ptr_Sbuf);
  tpfree((char *)ptr_Rbuf);
														     			 		
}
int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_FO_CNT;
  return 0;
}
void fn_bat_term ( int argc, char *argv[] )
{
  return;
}
int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
  return 0;
}
