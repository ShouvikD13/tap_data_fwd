/********************************************************************************************************/
/*  Program             : BAT_SPAN_IMTM																																	*/
/*  Log                 : 1.0     19-Apr-2011     																											*/
/*  										: 1.1     09-Oct-2012     																											*/
/*  										: 1.2     26-Feb-2015     																											*/
/********************************************************************************************************/
/*  1.0   -   New Release                                                                               */
/*  1.1   -   Server changed for pre-process 																						Mahesh Shinde		*/
/*  1.2   -   Processing record count printing  																				Sachin Birje 		*/
/*  1.3   -   Removed market validation for type 1 MTM process for CR-ISEC14-174038.		Edwin Thomas		*/
/********************************************************************************************************/

/** IMTM Report logic  have not been applied yet to the Batch Program **/

#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <string.h>   
#include <stdlib.h>  
#include <fml_rout.h> 
#include <fn_read_debug_lvl.h>  

void BAT_MARK_SPSTN( int argc, char *argv[] )
{
  int i_ch_val;
  int i_trnsctn;
  int i_cnt=0;

  long int li_cnt;
	long int li_tot_rcrds;
  long int l_report_no  = 0;
  char c_rqst_typ;
  char c_indstk;
  char c_exg_extnd_stts;  
	char c_req_type;
  char c_msg[256];
  char c_ServiceName [ 33 ];
  char c_svc_name [ 33 ];
  char c_err_msg [ 256 ];
  char c_und_str [ 400 ];
  char c_match_str [ 400 ];
  char c_clm_mtch_acnt [ 11 ];
  char c_undrlyng [ 7 ];
  char c_imtm_remarks [ 256 ];
  char c_rout_str [ 4 ];
  char c_run_mode[2];

  FBFR32 *ptr_fml_buf;

  EXEC SQL BEGIN DECLARE SECTION;

    char  c_exg_stts ;
    char c_xchng_cd [ 4 ];
  EXEC SQL END DECLARE SECTION;

  strcpy ( c_ServiceName, argv[0] );

  INITBATDBGLVL(argv[0]);

  sprintf ( c_msg, "Batch process %s started", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  strcpy ( c_msg, "Creating data. Please wait ... " );

	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	if ( argc < 5	)
	{
		fn_bat_pst_msg ( c_ServiceName, "Invalid Number of Arguments", c_tag );
    exit(0);
	}

	strcpy( c_xchng_cd, argv[2] );

  fn_userlog(c_ServiceName,"Exchange Code :%s:",c_xchng_cd);

	strcpy(c_run_mode, argv[4]);

  fn_userlog(c_ServiceName,"The Run Mode :%s:",c_run_mode);

	l_report_no = atoi ( argv[5] );
	
  fn_userlog(c_ServiceName,"The Report Number Is :%ld:",l_report_no);

	if ( atoi(argv[4]) == RUN_SPAN_IMTM_IM || atoi(argv[4]) == RUN_SPAN_IMTM_PNL || atoi(argv[4]) == RUN_SPAN_IMTM_IMPNL )
	{
		EXEC SQL
      SELECT  EXG_CRRNT_STTS,
              EXG_EXTND_MRKT_STTS   
      INTO    :c_exg_stts,
              :c_exg_extnd_stts    
      FROM    EXG_XCHNG_MSTR
      WHERE   EXG_XCHNG_CD = :c_xchng_cd
      AND     EXG_MKT_TYP  = 'D';

    if( SQLCODE != 0 )
    {
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      fn_errlog( c_ServiceName, "S31005", SQLMSG, c_err_msg );
      return;
    }

		if( atoi(argv[4]) != RUN_SPAN_IMTM_IM ) /* removed market status validation for type 1 mtm process in Ver 1.3 */
		{
			if ( c_exg_stts	!= EXCHANGE_OPEN ) 
			{
				if ( c_exg_extnd_stts	!=	EXCHANGE_OPEN	)
				{
					strcpy ( c_msg, "Exchange should be open for running MTM" );
					fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
					fn_errlog( c_ServiceName, "B28520",DEFMSG,c_err_msg);
					return ;
				}
				else if( strcmp(c_und_str,"\'NIFTY\'") != 0 )
				{
					strcpy ( c_msg, "During Extend Market Hours MTM Can Be Run Only For NIFTY");
					fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
					return ;
				}
			}
		}

		if( argc > 6 )     
		{
			strcpy( c_und_str, (char *)argv[6] );   
			c_rqst_typ = MARK_FOR_UNDRLYNG;
			fn_userlog(c_ServiceName,"c_und_str is :%s:",c_und_str);
			ptr_fml_buf = fn_create_rs (  c_ServiceName,
																		c_err_msg,
																		"SFO_GT_SIMTM",
																		TPNOTIME,
																		4,       
																		FFO_XCHNG_CD, ( char * )c_xchng_cd,
																		FFO_RQST_TYP, (char *)&c_rqst_typ,
																		FFO_UNDRLYNG, (char *)c_und_str,
																		FFO_EBA_MTCH_ACT_NO, (char *)c_clm_mtch_acnt, NULL);
																		
		}
		else
		{
			c_rqst_typ = MARK_ALL_PSTN;
			ptr_fml_buf = fn_create_rs (  c_ServiceName,
																		c_err_msg,
																		"SFO_GT_SIMTM",
																		TPNOTIME,
																		3, 
																		FFO_XCHNG_CD, ( char * )c_xchng_cd,
																		FFO_RQST_TYP, (char *)&c_rqst_typ,
                                    FFO_EBA_MTCH_ACT_NO, (char *)c_clm_mtch_acnt, NULL);
		}
	}
	else if ( atoi (argv[4]) == CREATE_MTM_REPORT_DATA )
	{
		fn_userlog(c_ServiceName,"To be desined Later");
	}

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
     strcpy ( c_msg, "System error. Contact system support" );
     fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
     fn_errlog(c_ServiceName, "S31010", LIBMSG, c_err_msg );
     return ;
  }

  fn_userlog ( c_ServiceName,"Inserting data to SIR_SPN_IMTM_REP.");

  EXEC SQL
     INSERT INTO SIR_SPN_IMTM_REP
     (
       SIR_REPORT_NO,
       SIR_XCHNG_CD,
       SIR_RPRT_TM_STMP
     )
     VALUES
     (
       :l_report_no,
       :c_xchng_cd,
       sysdate
     );

  if ( SQLCODE != 0 )
  {
     strcpy ( c_msg, "System error. Contact system support" );
     fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
     fn_errlog(c_ServiceName, "S31015", SQLMSG, c_err_msg );
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     return;
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
     strcpy ( c_msg, "System error. Contact system support" );
     fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
     fn_errlog( c_ServiceName, "S31020",LIBMSG,c_err_msg);
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     return;
  }

	if ( ptr_fml_buf == NULL )
  {
    fn_errlog( c_ServiceName, "S31025", LIBMSG, c_err_msg );
    return;
  }

  li_tot_rcrds = fn_reccnt_rs ( ptr_fml_buf,
                                c_ServiceName,
                                c_err_msg,
                                FFO_EBA_MTCH_ACT_NO);
  if ( li_tot_rcrds == -1 )
  {
    fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg );
    fn_dstry_rs ( ptr_fml_buf );
    return;
  }

  strcpy ( c_msg, "Data created." );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  sprintf ( c_msg, "Total records = %ld", li_tot_rcrds );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  for ( li_cnt=1; li_cnt<=li_tot_rcrds; li_cnt++ )
  {
    i_ch_val = fn_getnxt_rs ( ptr_fml_buf,
                              c_ServiceName,
                              c_err_msg,
                              4,
                              FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL,
                              FFO_EBA_MTCH_ACT_NO, ( char * )c_clm_mtch_acnt, NULL,
                              FFO_UNDRLYNG, ( char * )c_undrlyng, NULL,
                              FFO_CTGRY_INDSTK, ( char * )&c_indstk, NULL);
    if ( i_ch_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31035", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_buf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }

    if( li_cnt % 500 == 0 )  /** Ver 1.2, added in if condition **/
    {
      sprintf ( c_msg, "Processing record %ld of %ld", li_cnt, li_tot_rcrds );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    }

    i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                  c_err_msg,
                              /**    "sfr_bof_fimtm",	**Same server will be used in SPAN Commented in ver 1.1 **/
																	"sfr_mark_simtm",			/*** Added in ver 1.1 ***/	
                                  li_cnt,
                                  li_tot_rcrds );
    if ( i_ch_val == -1 )
    {
      fn_errlog( c_ServiceName, "S31040", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_buf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }

		if ( atoi(argv[4]) == RUN_SPAN_IMTM_IM || atoi(argv[4]) == RUN_SPAN_IMTM_PNL || atoi(argv[4]) == RUN_SPAN_IMTM_IMPNL )
    {

      /** call to SFO_ORD_ROUT is done to get the Pipe id for   **/
      /** creating the DDR string in the service SFO_MARK_SIMTM **/

      strcpy( c_imtm_remarks,"POSITION ENTERING MTM");
      strcpy( c_svc_name,"SFO_MARK_SIMTM");
			c_req_type = 'M';
/*************************************************************************************************************************/
/*sfo_ord_rout call is replaced directly with sfo_mark_simtm to shift enitre load on tux4 to tux2											   */
/*This cud be done coz sfo_mark_simtm is stand alone process and does not require any order placement or cancellation    */
/*************************************************************************************************************************/

/*      i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                    c_err_msg,
                                    "SFO_ORD_ROUT",
                                    0,
                                    9,
                                  FFO_XCHNG_CD, ( char * )c_xchng_cd,
                                  FFO_EBA_MTCH_ACT_NO,(char *)c_clm_mtch_acnt,
                                  FFO_UNDRLYNG, ( char * )c_undrlyng,
                                  FFO_CTGRY_INDSTK, ( char * )&c_indstk,
                                  FFO_IMTM_RMRKS, ( char * )c_imtm_remarks,
                                  FFO_SVC_NAME, (char*) c_svc_name,
																	FFO_OPERATION_TYP,(char *)c_run_mode,
                                  FFO_BAT_TAG, ( char * )c_tag,
                                  FFO_REC_NO, ( char * )&li_cnt);		*/

        i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                    c_err_msg,
                                    "SFO_MARK_SIMTM",
                                    0,
                                    10,
                                  FFO_XCHNG_CD, ( char * )c_xchng_cd,
                                  FFO_EBA_MTCH_ACT_NO,(char *)c_clm_mtch_acnt,
                                  FFO_UNDRLYNG, ( char * )c_undrlyng,
                                  FFO_CTGRY_INDSTK, ( char * )&c_indstk,
                                  FFO_IMTM_RMRKS, ( char * )c_imtm_remarks,
																	FFO_OPERATION_TYP,(char *)c_run_mode,
                                  FFO_BAT_TAG, ( char * )c_tag,
                                  FFO_REC_NO, ( char * )&li_cnt,
                                  FFO_RUN_NUM, ( char * )&l_report_no,
																	FFO_REQ_TYP, ( char * )&c_req_type);
    }
    else if ( atoi (argv[4]) == CREATE_MTM_REPORT_DATA )
    {
			fn_userlog(c_ServiceName,"Logic to be decided later");
		}

    if ( i_ch_val == -1 )
    {
      fn_errlog( c_ServiceName, "S31045", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_buf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }
  }
  /*** Ver 1.2 Starts here ***/
  sprintf ( c_msg, "Processing record %ld of %ld", (li_cnt-1), li_tot_rcrds );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  /*** Ver 1.2 Ends here ****/

  fn_dstry_rs ( ptr_fml_buf );

  sprintf ( c_msg, "Batch process %s ended", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  return;

}

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_MARK_SPSTN;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}


int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}
