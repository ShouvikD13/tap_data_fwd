/*************************************************************************/
/* Service name : BAT_SQOFF_PANAD		                                     */
/*                                                                       */
/* Input        :                                                        */
/*                                                                       */
/* Output       :                                                        */
/*                                                                       */
/* Log          :  29-Mar-2022  Initial Release - Shailesh							 */
/* Log          :  12-May-2023  Minor changes   - Dipin                  */ 
/*************************************************************************/
/* Ver 1.0  - This batch is written to one time square off FNO clients	 */ 
/*						positions not having PAN and AAdhar linked				         */
/* Ver 1.1  - [RQ:2088] Backend Utility for squaring off open positions  */
/*************************************************************************/
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <fml_rout.h>
#include <fn_session.h>
#include <string.h>
#include <fn_read_debug_lvl.h>
#include <stdlib.h>       

	FBFR32   *ptr_fml_buf;

int fn_get_sqofford_rs( char* c_ServiceName,
                        char* c_err_msg,
                        char* c_flag,        
                        char* c_xchng_cd,
                        char * c_prcs_flg,    /** ver 1.1 **/
                        char * c_trd_dt);     /** ver 1.1 **/

void BAT_SQOFF_PANAD( int argc, char *argv[] )
{
  char     c_ServiceName [50];
  char     c_msg [256];
  char     c_err_msg [256];
  char     c_xchng_cd  [4];
  char     c_undrlyng  [256];     
  char     c_expry_dt [12];
  char     c_rout_str  [4];
  char     c_svc_name [30];
  char     c_run_mod[4] = "\0";   
  char     c_exist  = 'P';       
  char     c_tmp_undrlyng[ 100 ] = "\0";  
  char     c_prdct_typ;
  char     c_exg_stts;
  char     c_cntrct_tag;
  char     c_opt_typ = '*';
  char     c_path[50];        
  char     c_command[350];   
  int      i_ch_val;
  int      i_trnsctn;
  int      i_exist = 0;
  int      i_ucount = 0;    
  long     l_strike_prc = 0;

  char c_trd_dt[12]; /** ver 1.1 **/ 
  char c_prcs_flg[2]; /** ver 1.1 **/
  char c_fco_remarks[150]={'\0'}; /** ver 1.1 **/ 

  long int li_cnt;
  long int li_tot_rcrds;
  char*    token;          

  MEMSET(c_ServiceName);
  MEMSET(c_msg);
  MEMSET(c_err_msg);
  MEMSET(c_xchng_cd);
  MEMSET(c_undrlyng);
  MEMSET(c_expry_dt);
  MEMSET(c_rout_str);
  MEMSET(c_svc_name);
  MEMSET(c_run_mod);
  MEMSET(c_tmp_undrlyng);
  MEMSET(c_prcs_flg); /** ver 1.1 **/
  MEMSET(c_fco_remarks); /** ver 1.1 **/

  EXEC SQL INCLUDE "table/ffp_fo_futures_pstn.h";

  strcpy ( c_ServiceName, argv[0] );
  INITBATDBGLVL(c_ServiceName);


  sprintf ( c_msg, "Batch process %s started", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  strcpy( c_xchng_cd, argv[2] );
  rtrim(c_xchng_cd);
 
  strcpy(c_prcs_flg,argv[4]); /**ver 1.1 **/
  rtrim(c_prcs_flg);          /** ver 1.1 **/ 
  strcpy(c_trd_dt,argv[5]);  /** ver 1.1 **/
  rtrim(c_trd_dt);           /** ver 1.1 **/
  
  if (DEBUG_MSG_LVL_0) 
   {
    fn_userlog( c_ServiceName,"c_xchng_cd :%s:",c_xchng_cd);
    fn_userlog( c_ServiceName,"c_prcs_flg :%s:",c_prcs_flg); /** ver 1.1 **/
    fn_userlog( c_ServiceName,"c_trd_dt :%s:",c_trd_dt); /** ver 1.1 **/
   }

    EXEC SQL
    SELECT  exg_crrnt_stts
    INTO    :c_exg_stts
    FROM    exg_xchng_mstr
    WHERE   exg_xchng_cd = :c_xchng_cd
    AND     exg_mkt_typ  = 'D';

	  if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31005", SQLMSG, c_err_msg );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }

    if( c_exg_stts != EXCHANGE_OPEN )
    {
	  	fn_errlog( c_ServiceName, "B28520", DEFMSG, c_err_msg );
      strcpy ( c_msg, "Exchange should be open for running Physical Settlement SquareOff" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }

  strcpy ( c_msg, "Creating data. Please wait ... " );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  i_ch_val = fn_get_sqofford_rs(  c_ServiceName,
                                  c_err_msg,
                                  &c_exist,   
                                  c_xchng_cd,
                                  c_prcs_flg,    /** ver 1.1 **/
                                  c_trd_dt);     /** ver 1.1 **/
  if ( i_ch_val != 0 )
  {
    fn_errlog( c_ServiceName, "S31010", LIBMSG, c_err_msg );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    return;
  }
  fn_userlog ( c_ServiceName,"Remarks S :%s:",c_fco_remarks);   /**ver 1.1 */
  li_tot_rcrds = fn_reccnt_rs ( ptr_fml_buf,
                                c_ServiceName,
                                c_err_msg,
                                FFO_EBA_MTCH_ACT_NO);

  if ( li_tot_rcrds == -1 )
  {
    fn_errlog( c_ServiceName, "S31015", LIBMSG, c_err_msg );
    fn_dstry_rs ( ptr_fml_buf );
    return;
  }

  strcpy ( c_msg, "Data created." );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  sprintf ( c_msg, "Total records = %ld", li_tot_rcrds );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  for ( li_cnt=1; li_cnt<=li_tot_rcrds; li_cnt++ )
  {
    i_ch_val = fn_getnxt_rs ( ptr_fml_buf,
                              c_ServiceName,
                              c_err_msg,
                              11,                        /** ver 1.1 10->11 **/
                              FFO_XCHNG_CD, ( char * )sql_ffp_xchng_cd,NULL,
                              FFO_EBA_MTCH_ACT_NO, ( char * )sql_ffp_clm_mtch_accnt,NULL,
                              FFO_PRDCT_TYP, ( char * )&sql_ffp_prdct_typ,NULL,
                              FFO_UNDRLYNG, ( char * )sql_ffp_undrlyng,NULL,
                              FFO_CTGRY_INDSTK, ( char * )&sql_ffp_indstk,NULL,
                              FFO_EXPRY_DT, (char * )sql_ffp_expry_dt.arr,NULL,
                              FFO_STRK_PRC,( char * )&l_strike_prc,NULL,
                              FFO_OPT_TYP,( char * )&c_opt_typ,NULL,
                              FFO_OPNPSTN_FLW, ( char * )&sql_ffp_opnpstn_flw,NULL,
                              FFO_OPNPSTN_QTY, ( char * )&sql_ffp_opnpstn_qty,NULL,
                              FFO_REMARKS, ( char * )c_fco_remarks,NULL);  /** ver 1.1**/
    if ( i_ch_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_buf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }

    fn_userlog ( c_ServiceName,"Remarks IS :%s:",c_fco_remarks );   /*ver 1.1 */       
		rtrim(sql_ffp_clm_mtch_accnt);
    rtrim(sql_ffp_xchng_cd);
    rtrim(sql_ffp_undrlyng);
    SETLEN(sql_ffp_expry_dt);
    rtrim(c_fco_remarks);   /**ver 1.1 **/

    sprintf ( c_msg, "Processing record %ld of %ld", li_cnt, li_tot_rcrds );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

    i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                  c_err_msg,
                                  "sfr_pfs_cmb_qt",
                                  li_cnt,
                                  li_tot_rcrds );

    if ( i_ch_val == -1 )
    {
      fn_errlog( c_ServiceName, "S31025", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_buf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }
 
    strcpy( c_svc_name,"SFO_PRCS_PANAD");
    fn_cpy_ddr( c_rout_str );
    fn_userlog ( c_ServiceName,"ROUT STRING IS :%s:",c_rout_str );

    i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                  c_err_msg,
                                  "SFO_ORD_ROUT",
                                  0,
                                  15,              /** ver 1.1   14->15 **/
                                  FFO_XCHNG_CD, ( char * )sql_ffp_xchng_cd,
                                  FFO_EBA_MTCH_ACT_NO, ( char * )sql_ffp_clm_mtch_accnt,
                                  FFO_PRDCT_TYP, ( char * )&sql_ffp_prdct_typ,
                                  FFO_UNDRLYNG, ( char * )sql_ffp_undrlyng,
                                  FFO_CTGRY_INDSTK, ( char * )&sql_ffp_indstk,
                                  FFO_SVC_NAME, (char*)c_svc_name,
                                  FFO_BAT_TAG, ( char * )c_tag,
                                  FFO_REC_NO, ( char * )&li_cnt,
			                            FFO_EXPRY_DT, (char * )sql_ffp_expry_dt.arr,
                                  FFO_OPNPSTN_FLW, ( char * )&sql_ffp_opnpstn_flw,
                                  FFO_OPNPSTN_QTY, ( char * )&sql_ffp_opnpstn_qty,
                                  FFO_STRK_PRC,( char * )&l_strike_prc,
                                  FFO_OPT_TYP,( char * )&c_opt_typ,
                                  FFO_ROUT_CRT, ( char *)c_rout_str,
                                  FFO_REMARKS, (char *) c_fco_remarks ); /** ver 1.1 **/ 

    if ( i_ch_val == -1 )
    {
      fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_buf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }
     fn_userlog ( c_ServiceName,"Remarks IS :%s:",c_fco_remarks );   /*ver 1.1 */ 
  }

  fn_dstry_rs ( ptr_fml_buf );

  sprintf ( c_msg, "Batch process %s ended", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

return;
} 


int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_SQOFF_PANAD;

  if(argc != 6) /** ver 1.1 5->6 **/
  {
    fn_userlog( argv[0],"Usage - %s <configuration file> <Exchange code> <pipe_id> <process_flg> <trade_date> ",argv[0]);
    fn_bat_pst_msg ( argv[0], "Invalid number of arguments", c_tag );
    fn_userlog ( argv[0], "Invalid number of arguments" );
     return -1;
  }

  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  fn_userlog ( argv[0], "BAT_SQOFF_PANAD  ended" );
  return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}


int fn_get_sqofford_rs( char * c_ServiceName,
                        char * c_err_msg,
                        char* c_flag,    
                        char * c_xchng_cd,
                        char *c_prcs_flg,     /** ver 1.1 **/
                        char *c_trd_dt)       /** ver 1.1 **/
{

  int   i_counter = 0;
  int   i_returncode;
  char  c_cntrct_tag;
  char  c_opt_typ ='*';
  long  l_strike_prc = 0;
  int   i_exceptn_exist=0; 					 	
  char  c_fco_remarks1[150]; /**Ver 1.1 **/
  EXEC SQL INCLUDE "table/ffp_fo_futures_pstn.h";

	EXEC SQL BEGIN DECLARE SECTION;
  sql_cursor  sys_cursor;
  EXEC SQL END DECLARE SECTION;

	Finit32(ptr_fml_buf,MIN_FML_BUF_LEN);

  if (DEBUG_MSG_LVL_0)  
   {
    fn_userlog( c_ServiceName,"c_xchng_cd :%s:",c_xchng_cd);
    fn_userlog( c_ServiceName,"c_prcs_flg :%s:",c_prcs_flg);     /** ver 1.1 **/ 
    fn_userlog( c_ServiceName,"c_trd_dt :%s:",c_trd_dt);         /** ver 1.1 **/
   }

  EXEC SQL ALLOCATE :sys_cursor;

                                                           /** ver 1.1 starts **/
    if(c_prcs_flg[0]=='P')
    {
      if (DEBUG_MSG_LVL_3)
      {
        fn_userlog( c_ServiceName, " Inside PAN user ");
      }
                                                            /** ver 1.1 ends **/ 
     EXEC SQL EXECUTE
      BEGIN
       OPEN :sys_cursor FOR
       SELECT FFP_CLM_MTCH_ACCNT match,
              FFP_XCHNG_CD       xchng_cd,
              FFP_PRDCT_TYP      prdct_typ,
              FFP_INDSTK         indstk,
              FFP_UNDRLYNG       undrlyng,
              FFP_EXPRY_DT       expry_dt,
              ABS(FFP_OPNPSTN_QTY)  opnpstn_qty,
              0     strk_price,
              '*'   opt_type,
              decode(FFP_OPNPSTN_FLW,'B','S','B')  opnpstn_flw,
              FPA_REMARKS   remarks              /** ver 1.1 **/
       FROM   FFP_FO_FUTURES_PSTN,FPA_FNO_PAN_AADHAR
       WHERE  FFP_CLM_MTCH_ACCNT  = FPA_CLM_MTCH_ACCNT
       AND    FFP_XCHNG_CD  = :c_xchng_cd
       AND    FPA_TRD_DT =:c_trd_dt  /** Ver 1.1 **/
       AND    FFP_PRDCT_TYP IN ('F','O')
       AND    FFP_OPNPSTN_FLW != 'N'
       UNION ALL
       SELECT FCP_CLM_MTCH_ACCNT match,
              FCP_XCHNG_CD       xchng_cd,
              FCP_PRDCT_TYP      prdct_typ,
              FCP_INDSTK         indstk,
              FCP_UNDRLYNG       undrlyng,
              FCP_EXPRY_DT       expry_dt,
              ABS(FCP_OPNPSTN_QTY)  opnpstn_qty,
              NVL(FCP_STRK_PRC,0)   strk_price,
              NVL(FCP_OPT_TYP,'*')  opt_type,
              decode(FCP_OPNPSTN_FLW,'B','S','B') opnpstn_flw, 
              FPA_REMARKS   remarks                 /** ver 1.1 **/
       FROM   FCP_FO_SPN_CNTRCT_PSTN,FPA_FNO_PAN_AADHAR
       WHERE  FCP_CLM_MTCH_ACCNT  = FPA_CLM_MTCH_ACCNT
       AND    FCP_XCHNG_CD =:c_xchng_cd   /** Ver 1.1 **/
       AND    FPA_TRD_DT =:c_trd_dt       /** Ver 1.1 **/
       AND    FCP_PRDCT_TYP IN ('F','O')
       AND    FCP_OPNPSTN_FLW != 'N'
     UNION ALL
       SELECT FOP_CLM_MTCH_ACCNT match,
              FOP_XCHNG_CD       xchng_cd,
              FOP_PRDCT_TYP      prdct_typ,
              FOP_INDSTK         indstk,
              FOP_UNDRLYNG       undrlyng,
              FOP_EXPRY_DT       expry_dt,
              ABS(FOP_OPNPSTN_QTY) opnpstn_qty,
              FOP_STRK_PRC       strk_price,
              FOP_OPT_TYP        opt_type,
              decode(FOP_OPNPSTN_FLW,'B','S','B') opnpstn_flw,
              FPA_REMARKS   remarks                 /** ver 1.1 **/
       FROM   FOP_FO_OPTIONS_PSTN,FPA_FNO_PAN_AADHAR
       WHERE  FOP_CLM_MTCH_ACCNT  = FPA_CLM_MTCH_ACCNT
       AND    FOP_XCHNG_CD =:c_xchng_cd /** Ver 1.1 **/
       AND    FPA_TRD_DT =:c_trd_dt     /** Ver 1.1 **/
       AND    FOP_PRDCT_TYP IN ('F','O')
       AND    FOP_OPNPSTN_FLW != 'N';
      END;
     END-EXEC;
 }                                                                  /** ver 1.1 starts **/
 else if(c_prcs_flg[0]=='C')
 { 
   if (DEBUG_MSG_LVL_3)
   {
     fn_userlog( c_ServiceName, " Inside Other Contract users");
   }
   EXEC SQL EXECUTE
      BEGIN
       OPEN :sys_cursor FOR
            SELECT   FFP_CLM_MTCH_ACCNT match,
              FFP_XCHNG_CD       xchng_cd,
              FFP_PRDCT_TYP      prdct_typ,
              FFP_INDSTK         indstk,
              FFP_UNDRLYNG       undrlyng,
              FFP_EXPRY_DT       expry_dt,
              ABS(FFP_OPNPSTN_QTY)  opnpstn_qty,
              0     strk_price,
              '*'   opt_type,
              decode(FFP_OPNPSTN_FLW,'B','S','B')  opnpstn_flw,
              FCO_REMARKS        remarks
       FROM   FFP_FO_FUTURES_PSTN,FCO_FO_CANSQ_ORDPSTN
       WHERE  FFP_CLM_MTCH_ACCNT  = FCO_CLM_MTCH_ACCNT
       AND    FFP_XCHNG_CD  = FCO_XCHNG_CD
       AND    FFP_XCHNG_CD  = :c_xchng_cd
       AND    FCO_TRD_DT =:c_trd_dt
       AND    FFP_PRDCT_TYP IN ('F','O')
       AND    FFP_PRDCT_TYP = FCO_PRDCT_TYP
       AND    FFP_INDSTK    = FCO_INDSTK
       AND    FFP_UNDRLYNG  = FCO_UNDRLYNG 
       AND    FFP_OPNPSTN_FLW != 'N'
       AND    FFP_EXPRY_DT  = FCO_EXPRY_DT
     UNION ALL
       SELECT FCP_CLM_MTCH_ACCNT match,
              FCP_XCHNG_CD       xchng_cd,
              FCP_PRDCT_TYP      prdct_typ,
              FCP_INDSTK         indstk,
              FCP_UNDRLYNG       undrlyng,
              FCP_EXPRY_DT       expry_dt,
              ABS(FCP_OPNPSTN_QTY)  opnpstn_qty,
              NVL(FCP_STRK_PRC,0)   strk_price,
              NVL(FCP_OPT_TYP,'*')  opt_type,
              decode(FCP_OPNPSTN_FLW,'B','S','B') opnpstn_flw,
              FCO_REMARKS  remarks
       FROM   FCP_FO_SPN_CNTRCT_PSTN,FCO_FO_CANSQ_ORDPSTN
       WHERE  FCP_CLM_MTCH_ACCNT  = FCO_CLM_MTCH_ACCNT
       AND    FCP_XCHNG_CD        = FCO_XCHNG_CD
       AND    FCP_PRDCT_TYP       = FCO_PRDCT_TYP
       AND    FCP_INDSTK          = FCO_INDSTK
       AND    FCP_UNDRLYNG        = FCO_UNDRLYNG                 
       AND    FCP_XCHNG_CD =:c_xchng_cd   /** Ver 1.1 **/
       AND    FCO_TRD_DT =:c_trd_dt       /** Ver 1.1 **/  
       AND    FCP_PRDCT_TYP IN ('F','O')
       AND    FCP_OPNPSTN_FLW != 'N'
       AND    FCP_EXPRY_DT = FCO_EXPRY_DT 
       AND    FCP_STRK_PRC = FCO_STRK_PRC
       AND    FCP_OPT_TYP  = FCO_OPT_TYP
     UNION ALL
       SELECT FOP_CLM_MTCH_ACCNT match,
              FOP_XCHNG_CD       xchng_cd,
              FOP_PRDCT_TYP      prdct_typ,
              FOP_INDSTK         indstk,
              FOP_UNDRLYNG       undrlyng,
              FOP_EXPRY_DT       expry_dt,
              ABS(FOP_OPNPSTN_QTY) opnpstn_qty,
              FOP_STRK_PRC       strk_price,
              FOP_OPT_TYP        opt_type,
              decode(FOP_OPNPSTN_FLW,'B','S','B') opnpstn_flw,
              FCO_REMARKS        remarks
       FROM   FOP_FO_OPTIONS_PSTN,FCO_FO_CANSQ_ORDPSTN
       WHERE  FOP_CLM_MTCH_ACCNT  = FCO_CLM_MTCH_ACCNT 
       AND    FOP_XCHNG_CD        = FCO_XCHNG_CD
       AND    FOP_PRDCT_TYP       = FCO_PRDCT_TYP
       AND    FOP_INDSTK          = FCO_INDSTK
       AND    FOP_UNDRLYNG        = FCO_UNDRLYNG  
       AND    FOP_XCHNG_CD =:c_xchng_cd   /** Ver 1.1 **/
       AND    FCO_TRD_DT =:c_trd_dt       /** Ver 1.1 **/ 
       AND    FOP_PRDCT_TYP IN ('F','O')
       AND    FOP_OPNPSTN_FLW != 'N'
       AND    FOP_EXPRY_DT =  FCO_EXPRY_DT
       AND    FOP_STRK_PRC =  FCO_STRK_PRC
       AND    FOP_OPT_TYP  =  FCO_OPT_TYP;
      END;
     END-EXEC;   
 }
 else
 {
    fn_userlog(c_ServiceName,"Invalid Product Type");
    fn_errlog(c_ServiceName,"S31035","Invalid Product Type",c_err_msg);
    return FAILURE;
 } 
                                                                  /** ver 1.1 ends **/ 
 if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg );
    EXEC SQL CLOSE :sys_cursor;
    EXEC SQL FREE  :sys_cursor;
/*  tpfree((char *)ptr_fml_buf);*/
    return FAILURE;
  }
  
  while(1)
  {
    MEMSET(sql_ffp_clm_mtch_accnt);
    MEMSET(sql_ffp_xchng_cd);
    MEMSET(sql_ffp_undrlyng);
    MEMSET(sql_ffp_expry_dt.arr);
    MEMSET(c_fco_remarks1);  /**ver 1.1 **/
    i_exceptn_exist=0;   

    EXEC SQL
    FETCH :sys_cursor
    into  :sql_ffp_clm_mtch_accnt,
          :sql_ffp_xchng_cd,
          :sql_ffp_prdct_typ,
          :sql_ffp_indstk,
          :sql_ffp_undrlyng,
          :sql_ffp_expry_dt,
          :sql_ffp_opnpstn_qty,
          :l_strike_prc,
          :c_opt_typ,
          :sql_ffp_opnpstn_flw,
          :c_fco_remarks1;        /** ver 1.1 **/

    if(SQLCODE != 0)
    {
      if(SQLCODE == NO_DATA_FOUND)
      {
        fn_userlog( c_ServiceName,"Inside Break");

        if( i_counter == 0 )
        {
          *c_flag = 'N';
        }
        

        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE  :sys_cursor;
        break;
      }

      fn_errlog( c_ServiceName, "S31045",SQLMSG, c_err_msg );
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE  :sys_cursor;
			if( i_counter != 0 )
			{
      	tpfree((char *)ptr_fml_buf);
			}
      return FAILURE;
    }

		i_counter = 1;


    rtrim(sql_ffp_undrlyng); 

    if (DEBUG_MSG_LVL_5)
    {  
    fn_userlog( c_ServiceName,"sql_ffp_clm_mtch_accnt :%s:",sql_ffp_clm_mtch_accnt);
    fn_userlog( c_ServiceName,"sql_ffp_xchng_cd :%s:", sql_ffp_xchng_cd);
		fn_userlog( c_ServiceName,"sql_ffp_prdct_typ :%c:", sql_ffp_prdct_typ);
		fn_userlog( c_ServiceName,"sql_ffp_undrlyng :%s:", sql_ffp_undrlyng);
		fn_userlog( c_ServiceName,"sql_ffp_indstk :%c:", sql_ffp_indstk);
		fn_userlog( c_ServiceName,"sql_ffp_expry_dt :%s:", sql_ffp_expry_dt.arr);
		fn_userlog( c_ServiceName,"l_strike_prc :%ld", l_strike_prc);
		fn_userlog( c_ServiceName,"c_opt_typ :%c:", c_opt_typ);
		fn_userlog( c_ServiceName,"sql_ffp_opnpstn_flw :%c:", sql_ffp_opnpstn_flw);
		fn_userlog( c_ServiceName,"sql_ffp_opnpstn_qty :%ld:", sql_ffp_opnpstn_qty);
    fn_userlog( c_ServiceName,"c_fco_remarks :%s:",c_fco_remarks1);      /** ver 1.1**/
   } 


   fn_userlog(c_ServiceName,"sql_ffp_prdct_typ :%c",sql_ffp_prdct_typ);

   fn_userlog ( c_ServiceName,"Remarks IS :%s:",c_fco_remarks1 );   /*ver 1.1 */ 
    i_returncode = fn_pack_vartofml (c_ServiceName,
                                     c_err_msg,
                                     &ptr_fml_buf,
                                     11,        /** ver 1.1 10->11 **/
                                     FFO_XCHNG_CD, ( char * )sql_ffp_xchng_cd,
                                     FFO_EBA_MTCH_ACT_NO, ( char * )sql_ffp_clm_mtch_accnt,
                                     FFO_PRDCT_TYP, ( char * )&sql_ffp_prdct_typ,
                                     FFO_UNDRLYNG, ( char * )sql_ffp_undrlyng,
                                     FFO_CTGRY_INDSTK, ( char * )&sql_ffp_indstk,
                                     FFO_EXPRY_DT, (char * )sql_ffp_expry_dt.arr,
                                     FFO_STRK_PRC,( char * )&l_strike_prc,
                                     FFO_OPT_TYP,( char * )&c_opt_typ,
                                     FFO_OPNPSTN_FLW, ( char * )&sql_ffp_opnpstn_flw,
                                     FFO_OPNPSTN_QTY, ( char * )&sql_ffp_opnpstn_qty,
                                     FFO_REMARKS, (char *)c_fco_remarks1);   /** ver 1.1 **/
                                       
    if( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31050",LIBMSG, c_err_msg );
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE  :sys_cursor;
      tpfree((char *)ptr_fml_buf);
      return FAILURE;
    }
   fn_userlog ( c_ServiceName,"Remarks IS :%s:",c_fco_remarks1 );   /*ver 1.1 */
  }
  return SUCCESS;
}
