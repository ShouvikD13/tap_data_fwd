/*******************************************************************************
*  Program           : bat_fno_enable_sebi.pc                                  *
*                                                                              *
*  Description       : Check and process for accounts older than 6 months      *  
*                      as per SEBI requirement                                 *
*									      																											 *
*  Input Parameters  :							      																		 *
*                                                                              *
*  Change Log        : 1.0   01-Jul-2011  Nitin Save|Infotech                  *
*                    : 1.1   10-Nov-2011  Sandip Tambe|Infotech                *
*                    : 1.2   08-Feb-2012  Nitin Save|Infotech                  *
*                    : 1.3   03-Feb-2014  Sandip Tambe| Infotech               *
*                    : 1.4   21-May-2014  Sachin Birje| Infotech               *
*                    : 1.5   07-Sep-2014  Sachin Birje| Infotech               *
*                    : 1.6   27-Nov-2015  Sandip Tambe| Infotech               *
*                    : 1.7   15-Dec-2015  Sandip Tambe| Infotech               *
*                    : 1.9   21-Sep-2016  Sandip Tambe| Infotech               *
*                    : TOL   23-Aug-2023  Agam                                 *
********************************************************************************
*  1.0    -  New Release                                                       *
*  1.1    -  Calling Parameter Change[caller : null to "BAT_ACTV_ACCT_E"       *
*                                    and to_be_enable : null to 'Y'] and 			 *
*																			Daily run -Used seq no            			 *
*  1.2    -  ADH act-deact flag updated same as exists in UAC                  *
*            pledge allowed flag is updated to 'Y' for FNO enabled clients     *
*  1.3    -  ADH Insert statement changes due to extra column in ADH           *
*  1.4    -  Changes For error returned by store procedure ( Sachin Birje )    *
*  1.5    -  View to FML CHanges ( Sachin Birje )                              *
*  1.6    -  Transction time ST                                          			 *
*  1.7    -  Tran Time and Demat holding check CR changes (Sandip Tambe )			 *
*  1.9    -  Server name change(Sandip Tambe)                            			 *
*  2.0    -  CR-ISEC03-156532 (Sanjeet Pawar)                                  * 
*  TOL    -  Tux on Linux (Agam)                                               * 
*******************************************************************************/

/* Header Files */

#include<sqlca.h>
#include<atmi.h>
#include <string.h>
#include <stdlib.h>
#include<fo.h>
#include<fml32.h>
#include<fn_log.h>
#include<fn_tuxlib.h>
#include<fn_battmpt.h>
#include<fml_def.h>
#include<fo_fml_def.h>
#include<fn_ddr.h>
/*** #include<fo_view_def.h> ** Ver 1.5 **/
#include <fn_read_debug_lvl.h>
#include <time.h>
#include <sys/time.h>      /* Added in Ver TOL */

#define DEFLOG3 if (DEBUG_MSG_LVL_3)
#define DEFLOG5 if (DEBUG_MSG_LVL_5)
#define SQL_ROW_COUNT sqlca.sqlerrd[2]
#define STR_TRIM(x) x[strlen(x)]='\0' 
#define MASTER_COMMIT_INTERVAL 1000
#define TRAN_TIME 1200  /** ver 1.6 **/

EXEC SQL BEGIN DECLARE SECTION;

char c_ServiceName[256]={0};
char c_msg[256]={0};
char c_err_msg[256]={0};

char c_master_mode;
char c_run_for;
char c_run_mode;    
int  i_trnsctn=0;
long l_master_counter=0;
long l_master_loop_counter=0;
long l_row_count=0;					/*** ver 1.7 ***/

long l_start_seq_nbr=0;
long l_end_seq_nbr=0; 
char c_rout_str[4];

EXEC SQL  END  DECLARE SECTION;

void fn_gettime(void);
char c_time[12];

char *trim(char *str);
int fn_process_client(char * i_mtch_acnt_id ,double l_seq_nbr,char * i_usr_id, char c_fno_validation_flag, char c_fdt_uac_act_flg );  /** Added c_fdt_uac_act_flg in Ver 1.2 **/
/******************************************************************************/

void BAT_FNO_ENABLE_SEBI ( int argc, char *argv[])
{
  char c_svc_name[18]={0};
  char c_trd_date[21]={0};

  char c_xchng_cd[4]={'\0'};
  int i_returncode = 0;
  char c_rec_over;		
  int i_rec_counter = 1;				/** Ver 1.7 initialzed to 1 **/

  EXEC SQL  BEGIN  DECLARE SECTION;
	long l_l_seq_nbr=0;
	varchar c_usr_id[11];
	varchar c_mtch_acnt_id[11]={0};
	char c_fdt_uac_act_flg;
	char c_fno_validation_flag='N';			/** ver 1.7 **/
	char c_uac_fno_allwd='N';  					/*** ver 1.7 ***/
	char c_success_flg;
	char c_error_msg[200];

  EXEC SQL  END  DECLARE SECTION;

  strcpy(c_ServiceName,argv[0]);
  sprintf(c_tag,"%s_na",argv[0]);


  INITBATDBGLVL(argv[0]);

  fn_userlog (c_ServiceName,"====================================================");
  sprintf(c_msg,"Batch process %s is started",argv[0]);
  fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
  fn_userlog (c_ServiceName,"Batch process %s is started",argv[0]);

  /*need to validate the params passed*/
  if ( argc < 6) 
  {
    fn_userlog (c_ServiceName,"Invalid Arguments passed %d",argc);
    fn_userlog (c_ServiceName,"Usage:%s NFO NFO NA <Run Mode-D/O><Master Mode-R/S><Seq_Start><Seq_End>",argv[0]);
    /**** here Run-D/O  => D: Daily Run and O:One time run for Bulk Update ***/
    /**** here Mode-R/S => R: Real Mode and S:Simulation mode-In simulation mode no updates on UAC/ADH ***/
		fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);    
    return;
  }

  fn_userlog(c_ServiceName,"Parameter:<%s><%s><%s><%s><%c><%c><%ld><%ld>",argv[0],argv[1],argv[2],argv[3],argv[4][0],argv[5][0],argv[6],argv[7]);

  c_run_mode=argv[4][0];     
  c_master_mode=argv[5][0];     
  l_start_seq_nbr=atol(argv[6]);    
  l_end_seq_nbr  =atol(argv[7]);    
		
  fn_userlog (c_ServiceName,"Arguments passed <%c> ",c_master_mode);
  fn_userlog (c_ServiceName,"SEQ START-<%ld> and END-<%ld> ",l_start_seq_nbr,l_end_seq_nbr );

	MEMSET(c_usr_id);
	MEMSET(c_mtch_acnt_id);

	/*********************************************************************************/
	if (c_run_mode == 'D')
	{
	 /**i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );				*** Ver 1.7 comment **/

		i_trnsctn = tpbegin(TRAN_TIME,0);  
	  if ( i_trnsctn == -1 )
	  {
	    fn_userlog (c_ServiceName,"Failed in initial begin transaction for daily loop");
	   	fn_errlog ( c_ServiceName, "S31005", TPMSG, c_err_msg  );
	   	return ;
	  }
		EXEC SQL
				ALTER SESSION ENABLE PARALLEL DML;							/** ver 2.0 as per Oracle ACS suggestion **/

	  EXEC SQL 
				UPDATE /*+ parallel(20) */ FDT_FNO_DISABLE_TRACK_SEBI
				SET  	 FDT_PRCS_FLG = 'F'
				WHERE  FDT_PRCS_FLG ='N';

		if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
		{
			fn_errlog ( c_ServiceName, "S31010", SQLMSG, c_err_msg  );
			fn_userlog (c_ServiceName,"Failed in initial daily update");
			/**fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );  **/
			tpabort ( 0 ); 
			return ;
		}
		EXEC SQL
				INSERT /*+ parallel(20) */ INTO FDT_FNO_DISABLE_TRACK_SEBI				/** ver 2.0 Parallel Used **/
        SELECT /*+ parallel(20) */	SEQ_DISBL_FNO_NMBR.NEXTVAL, 
								UAC_USR_ID USR_ID ,
								UAC_CLM_MTCH_ACCNT MTCH_ACCNT , 
								'' ,
								UAC_FNO_ALLWD,
               case when months_between(SYSDATE,nvl(IAI_BNK_ACCOUNT_OPEN_DT,sysdate)) < 6 then 'D'
										when months_between(SYSDATE,nvl(IAI_BNK_ACCOUNT_OPEN_DT,sysdate)) >= 6 then 'Z'
							 end,0.00,0.00,0.00,0.00,0.00,
							 case when months_between(SYSDATE,nvl(IAI_BNK_ACCOUNT_OPEN_DT,sysdate)) < 6 then
												 'Manual Updation -6 month/Demat SEBI check -Daily Updation to D'
										when  months_between(SYSDATE,nvl(IAI_BNK_ACCOUNT_OPEN_DT,sysdate)) >= 6 then
               						'Manual Updation -6 month SEBI check -Daily Updation to Z'
							 end, SYSDATE,'','','N', 
							 UAC_ACT_DEACT_FLG
        FROM UAC_USR_ACCNTS  , IAI_INFO_ACCOUNT_INFO
				where IAI_MATCH_ACCOUNT_NO =  UAC_CLM_MTCH_ACCNT
				AND   UAC_ACT_DEACT_FLG != 'S'
				AND   UAC_ACT_DEACT_FLG != 'C'
				AND   UAC_FNO_ALLWD in ('N','X','D')
				AND   UAC_EQUITY_ALLWD ='Y'
				AND   UAC_CLM_MTCH_ACCNT NOT LIKE '65%'
				AND   UAC_CLM_MTCH_ACCNT NOT LIKE '750%'
				AND   IAI_BNK_ACCOUNT_OPEN_DT is not null; /** ver 1.7 Query reformatting **
			*where UAC_CLM_MTCH_ACCNT in
        (
						(  SELECT UAC_CLM_MTCH_ACCNT mtch_act
		  				 FROM  UAC_USR_ACCNTS 
		  				 WHERE UAC_ACT_DEACT_FLG != 'S' 
		  				 AND   UAC_ACT_DEACT_FLG != 'C'
		  				 AND   UAC_FNO_ALLWD in ('N' , 'X')	
							 AND   UAC_EQUITY_ALLWD ='Y' 									** Ver 1.1 **
               AND   UAC_CLM_MTCH_ACCNT NOT LIKE '65%'
               AND   UAC_CLM_MTCH_ACCNT NOT LIKE '750%'
	          )
	      	  MINUS
	       			SELECT DISTINCT IAI_MATCH_ACCOUNT_NO MTCH_ACT
	       		  FROM IAI_INFO_ACCOUNT_INFO 
	       			WHERE months_between(SYSDATE,IAI_BNK_ACCOUNT_OPEN_DT) < 6
	 			); Ver 1.7 comment ***/

		if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
		{
			fn_errlog ( c_ServiceName, "S31015", SQLMSG, c_err_msg  );
			fn_userlog (c_ServiceName,"Failed in daily insert");
			/**fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );  *** ver 1.7 **/
			tpabort ( 0 );/** ver 1.7 **/
			return ;
		}
		l_row_count=sqlca.sqlerrd[2];				/*** ver 1.7 ***/
   	fn_userlog (c_ServiceName,"No of Records Inserted into FDT_SEBI table for daily process <%ld> ", sqlca.sqlerrd[2]);
	 /***** Ver 2.0 Starts ****/
   EXEC SQL
        UPDATE FDT_FNO_DISABLE_TRACK_SEBI
        SET    FDT_PRCS_FLG = 'F'
        WHERE  FDT_PRCS_FLG ='N'
				AND    trunc(FDT_PRCS_DATE)=trunc(sysdate)
				AND    FDT_MATCH_ACNT in (
               select /*+ parallel(20) */ CLM_MTCH_ACCNT 
               from   CLM_CLNT_MSTR clm,BP_BRKR_MSTR bpm
               where  clm.CLM_BP_ID = bpm.BBM_BP_ID 
							 and    FDT_MATCH_ACNT=clm.clm_mtch_accnt
               and    bpm.BBM_FNO_ALLWD = 'N' );
 

    if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog ( c_ServiceName, "S31020", SQLMSG, c_err_msg  );
      fn_userlog (c_ServiceName,"Failed in initial daily update");
      tpabort ( 0 );
      return ;
    }
    l_row_count=sqlca.sqlerrd[2];       
    fn_userlog (c_ServiceName,"No of Records FDT_SEBI table updated  <%ld> ", sqlca.sqlerrd[2]);
    /** Ver 2.0 ends ***/	
		/**if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )		** Ver 1.7 comment **/
		if ( tpcommit(0) == -1 	) 		/*** Ver 1.7 ***/
		{
	    fn_userlog (c_ServiceName,"Failed in initial commit transaction for daily loop- ");
	  	fn_errlog ( c_ServiceName, "S31025", SQLMSG, c_err_msg);
	  	return ;
		}

		/** Ver 1.1 start ***/
		EXEC SQL
  			SELECT  /*+ parallel(20) */ min(FDT_SEQ_ID), max(FDT_SEQ_ID)			/** Ver 2.0 Parallel used **/
  			INTO  :l_start_seq_nbr, :l_end_seq_nbr
  			FROM  FDT_FNO_DISABLE_TRACK_SEBI
  			WHERE   FDT_PRCS_FLG ='N';

		if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
		{
  		fn_errlog ( c_ServiceName, "S31030", SQLMSG, c_err_msg  );
  		fn_userlog (c_ServiceName,"Failed in daily-seq no selection ");
  		/*fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); ** Ver 1.6 comment **/
  		return ;
		}
		
		fn_userlog (c_ServiceName,"Val of l_start_seq_nbr<%ld> & l_end_seq_nbr<%ld>-Daily-Run", l_start_seq_nbr, l_end_seq_nbr);

		/** Ver 1.1 end ***/
	}
	/*********************************************************************************/

	while (1)  /* Outermost while loop while-1*/
	{
		l_master_loop_counter++; 
		
	  /*i_trnsctn = fn_begintran( c_ServiceName, c_err_msg ); *** ver 1.6 comment **
		i_trnsctn = tpbegin(TRAN_TIME,0);  ** Ver 1.6 **
	  if ( i_trnsctn == -1 )
	  {
	    fn_userlog (c_ServiceName,"Failed in initial begin transaction ");
	   	fn_errlog ( c_ServiceName, "S31035", TPMSG, c_err_msg  );
	   	return ;
	  }
		***/	
		/*--------------------------------------------------------------------------------*/
	  while (1) /* Start of MAIN while -- while-2*/
		{
			l_master_counter ++ ;

		/************************************************************************************/
			if (c_run_mode == 'D')
			{
				/**Ver 1.1 **/
				c_uac_fno_allwd='N';

				EXEC SQL
  					SELECT    FDT_SEQ_ID, FDT_USR_ID, FDT_MATCH_ACNT , FDT_UAC_ACTDEACT_FLG,FDT_UAC_FNO_ALLWD		
  					INTO      :l_l_seq_nbr, :c_usr_id,:c_mtch_acnt_id, :c_fdt_uac_act_flg,:c_uac_fno_allwd
  					FROM      FDT_FNO_DISABLE_TRACK_SEBI
  					WHERE     FDT_PRCS_FLG ='N'
  					AND       FDT_SEQ_ID between :l_start_seq_nbr and :l_end_seq_nbr 
  					AND       ROWNUM = 1
  					ORDER BY  FDT_SEQ_ID;					/** Ver 1.7 existing fno flag fetched**/
	
		 		if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
			  {
		    	fn_errlog ( c_ServiceName, "S31040", SQLMSG, c_err_msg  );
		    	/*fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); ** VER 1.6 comment **/
					/*tpabort ( 0 ); ** ver 1.6 **/
		    	return ;
		 		}

			}
		/************************************************************************************/
			if (c_run_mode == 'O')
			{
				EXEC SQL
			 		SELECT 		FDT_SEQ_ID, FDT_USR_ID, FDT_MATCH_ACNT , FDT_UAC_ACTDEACT_FLG,FDT_UAC_FNO_ALLWD
			 		INTO 			:l_l_seq_nbr, :c_usr_id,:c_mtch_acnt_id, :c_fdt_uac_act_flg,:c_uac_fno_allwd
			 		FROM 			FDT_FNO_DISABLE_TRACK_SEBI
					WHERE 		FDT_PRCS_FLG ='N'
					AND 			FDT_SEQ_ID between :l_start_seq_nbr and :l_end_seq_nbr
					AND 			ROWNUM = 1
					ORDER BY  FDT_SEQ_ID;
	
		 		if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
			  {
		    	fn_errlog ( c_ServiceName, "S31045", SQLMSG, c_err_msg  );
		    	/*fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); **Ver 1.6 comment **/
					/*tpabort ( 0 ); ** ver 1.6 **/
		    	return ;
		 		}
			}	
	  /************************************************************************************/

			SETNULL(c_usr_id);
			SETNULL(c_mtch_acnt_id);
		
			if (SQLCODE == NO_DATA_FOUND) 
			{
				if(i_rec_counter>1)
				{ 
					fn_userlog (c_ServiceName," End of data in FDT_SEBI- Total Records processed <%ld>", l_master_counter -1);
					c_rec_over = 'Y';
					break;
				}
				else
				{
					fn_userlog (c_ServiceName,"Error- No records found during fetching from FDT_FNO_DISABLE_TRACK_SEBI ");		
					fn_errlog ( c_ServiceName, "S31050", SQLMSG, c_err_msg  );
					/*fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); ** Ver 1.6 comment **/
					/*tpabort ( 0 ); ** ver 1.6 **/
					return ;
				}
			}
			/** ver 1.7  process call starts **/


		 i_trnsctn = tpbegin(TRAN_TIME,0);
    	if ( i_trnsctn == -1 )
    	{
      	fn_userlog (c_ServiceName,"Failed in initial begin transaction ");
      	fn_errlog ( c_ServiceName, "S31055", TPMSG, c_err_msg  );
      	return ;
    	}

			EXEC SQL
          UPDATE    FDT_FNO_DISABLE_TRACK_SEBI
          SET       FDT_PRCS_FLG='P'
          WHERE     FDT_MATCH_ACNT = :c_mtch_acnt_id
          AND       FDT_SEQ_ID = :l_l_seq_nbr;

      if ( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31060", SQLMSG, c_err_msg  );
        tpabort ( 0 ); 
        return ;
      }

   	if( tpcommit(0) == -1 )
    	{
      	fn_userlog (c_ServiceName,"Failed in loop commit transaction at LOOP-<%ld> ", l_master_loop_counter);
      	fn_errlog ( c_ServiceName, "S31065", SQLMSG, c_err_msg);
      	return ;
    	}
	
			c_run_for='S';	
			sprintf(c_msg,"Processing record %ld of %ld for match :%s:", i_rec_counter, l_row_count,c_mtch_acnt_id.arr);

    	i_returncode = fn_pre_prcs_rcrd ( c_ServiceName,
                                  c_err_msg,
                                  /*"sfr_prcs_prtfl",				*** Ver 1.9 comment **/
                                  "sfr_plg_revln1",					/** ver 1.9 ***/
                                  i_rec_counter,
                                  l_row_count );
    	if ( i_returncode == -1 )
    	{
      	fn_errlog( c_ServiceName, "S31070", LIBMSG, c_err_msg );
				return;
    	}
    	fn_cpy_ddr(c_rout_str);
			strcpy(c_xchng_cd,"NFO");

    	i_returncode = fn_acall_svc_fml ( c_ServiceName,
                                      c_err_msg,
                                      "SFO_PRCS_PRPD",
                                      0,
                                      8,
																			FFO_ORD_TYP,(char *)&c_run_for, 
																			FFO_XCHNG_CD,(char *) c_xchng_cd,
																			FFO_SEQ_NUM,(char *)&l_l_seq_nbr,
                                      FFO_EBA_MTCH_ACT_NO ,(char *)c_mtch_acnt_id.arr,
                                      FFO_USR_ID, (char *) c_usr_id.arr,
                                      FFO_STATUS_FLG , (char *) &c_fdt_uac_act_flg,
                                      FFO_CNTRCT_TAG, ( char *)&c_uac_fno_allwd,
                                      FFO_OPT_TYP,(char *)&c_master_mode);
    	if ( i_returncode == -1 )
    	{
      	fn_errlog( c_ServiceName, "S31075", LIBMSG, c_err_msg );
				return;
    	}
			/*** Ver 1.7 comment starts ****	
			EXEC SQL
					UPDATE 		FDT_FNO_DISABLE_TRACK_SEBI
					SET 			FDT_PRCS_FLG='P'
					WHERE			FDT_MATCH_ACNT = :c_mtch_acnt_id
					AND 		  FDT_SEQ_ID = :l_l_seq_nbr;
		
			if ( SQLCODE != 0 )
			{
			  fn_errlog ( c_ServiceName, "S31080", SQLMSG, c_err_msg  );
			  *fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); ** ver 1.6 Comment **
				tpabort ( 0 ); ** ver 1.6 **
			  return ;
			}
	 		
		 	if (DEBUG_MSG_LVL_3)
			{
			  fn_userlog(c_ServiceName,"Calling SP_FNO_CDX_VALIDATIONS procedure for userid:<%s> match id:<%s>  Act-Deact Flag<%c> SeqNo<%ld>", c_usr_id.arr ,c_mtch_acnt_id.arr, c_fdt_uac_act_flg, l_l_seq_nbr);
		  }
			c_fno_validation_flag='N'; ** Ver 1.7 **
			EXEC SQL
			    EXECUTE
					    BEGIN
					    SP_FNO_CDX_VALIDATIONS
					    (
					      :c_mtch_acnt_id,
					      'BAT_ACTV_ACCT_E',	**Ver 1.1 **
					      'Y',   							**Ver 1.1 **
					      'FNO',
					      :c_fno_validation_flag,
					      :c_success_flg,
					      :c_error_msg,
                :c_ServiceName,  ** Ver 1.4 **
                :c_ServiceName   ** Ver 1.4 **
					     );
					     END;
					     END-EXEC; 											


			if (DEBUG_MSG_LVL_3)
			{
				fn_userlog (c_ServiceName,"Val of c_mtch_acnt_id<%s> c_success_flg<%c> after procedure execution", c_mtch_acnt_id.arr, c_success_flg);
			 	fn_userlog (c_ServiceName,"Val of c_fno_validation_flag<%c> c_error_msg<%s> after procedure execution", c_fno_validation_flag, c_error_msg);
			}

			if ( c_success_flg =='N' || c_success_flg =='F')  ** Ver 1.4 ***, c_success_flg =='F' added **
			{
		    ** fn_userlog(c_ServiceName,"Procedure failure returned flag as N for <%s>", c_mtch_acnt_id.arr); ** ver 1.4 **
        fn_userlog(c_ServiceName,"Procedure failure returned flag as %c for <%s>",c_success_flg,c_mtch_acnt_id.arr); ** ver 1.4 **
			}
 
			
			if ((c_fno_validation_flag =='Y' || c_fno_validation_flag =='Z' || c_fno_validation_flag =='D' ) && (c_master_mode  == 'R' ))		**Ver 1.7 D flag check added **
			{
			  if(c_uac_fno_allwd != c_fno_validation_flag )	** V er 1.7 if added to skip flags are same before and after SP **
				{
		  	 fn_userlog(c_ServiceName,"Before Update -FNO_ALLOWED_flag of proc <%c> for <%s><%s>",c_fno_validation_flag, c_mtch_acnt_id.arr, c_usr_id.arr);
		

				 * i_returncode = fn_process_client(c_mtch_acnt_id.arr,l_l_seq_nbr, c_usr_id.arr, c_fno_validation_flag); *
				 ** Added c_fdt_uac_act_flg in function call -in Ver 1.2 **
				 i_returncode = fn_process_client(c_mtch_acnt_id.arr,l_l_seq_nbr, c_usr_id.arr, c_fno_validation_flag, c_fdt_uac_act_flg); * Ver -1.2 *

				 if (i_returncode != 0)
				 {
			 	   fn_userlog(c_ServiceName,"Error in fn_process_client for match id:<%s> ",c_mtch_acnt_id.arr);
				   strcpy ( c_err_msg, "System error. Contact system support - Error in Calling fn_process_client" );
					 fn_errlog ( c_ServiceName, "S31085", c_err_msg, c_err_msg  );
					 ****************  Added below part to continue next rec processing  *****************

						 EXEC SQL
								UPDATE 		FDT_FNO_DISABLE_TRACK_SEBI
								SET 			FDT_PRCS_FLG='F'
								WHERE			FDT_MATCH_ACNT = :c_mtch_acnt_id
								AND 		  FDT_SEQ_ID = :l_l_seq_nbr;
		
			  		 if ( SQLCODE != 0 )
			 			 {
			    	  fn_errlog ( c_ServiceName, "S31090", SQLMSG, c_err_msg  );
			    		*fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); **
							tpabort ( 0 ); ** ver 1.6 **
			    	  return ;
			 		 	 }
			  
						 if (DEBUG_MSG_LVL_3)
						 {
						  fn_userlog (c_ServiceName,"After updating fdt_prcs_flg to F to continue process");
						 }

						 continue;

						*********  End of part to continue next rec processing **********************

				 }

				 if (DEBUG_MSG_LVL_3)
				 {
					fn_userlog (c_ServiceName,"After function fn_process_client to update <%s>", c_mtch_acnt_id);
				 }
				}
				else
				{
					fn_userlog(c_ServiceName,"Old and New FNO Flag for :%s: are same hence continue",c_mtch_acnt_id.arr);
				}	** ver 1.7 ***
			}
			if ( c_fno_validation_flag =='N')
			{
			  fn_userlog (c_ServiceName,"Procedure returned FNO_ALLOWED_flag as N for <%s>", c_mtch_acnt_id.arr);
			}
			 *** Ver 1.7 comment Ends ***/
			i_rec_counter++;
			if(i_rec_counter == l_row_count ) /*** ver 1.7 ***/
			{
				break;
			}
			
			/**if ( (l_master_counter % MASTER_COMMIT_INTERVAL) == 0 )	break; Ver 1.7 coment ****/			  
    } /* End of inner MAIN while -- while-2 */ 

		if (DEBUG_MSG_LVL_3)
		{
		 fn_userlog (c_ServiceName,"After internal commit interval...");
		}
		/*-------------------------------------------------------------------------------*/
	
		/**if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 ) ** ver 1.6 comment **
		if( tpcommit(0) == -1 )
		{
	    fn_userlog (c_ServiceName,"Failed in loop commit transaction at LOOP-<%ld> ", l_master_loop_counter);
	  	fn_errlog ( c_ServiceName, "S31095", SQLMSG, c_err_msg);
	  	return ;
		}
		****/	
	  if (c_rec_over == 'Y') 
		{
	    fn_userlog (c_ServiceName," Breaking out of final loop");
			break;
		}
				
	}	/* End of the outer while -- while-1*/
	/*--------------------------------------------------------------------------------*/

  sprintf(c_msg,"Batch process %s completed",argv[0]);
  fn_userlog (c_ServiceName,"Batch process %s completed",argv[0]);
  fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
  fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
  
  return ;

}
/******************************************************************************/

	int fn_bat_init ( int argc, char *argv[] )
	{
	  fn_var = BAT_FNO_ENABLE_SEBI;
  	return 0;
	}
 
	void fn_bat_term ( int argc, char *argv[] )
	{
 	 return;
	} 
 
	int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
	{
 	 return 0;
	}

/******************************************************************************/

	/* int fn_process_client(i_mtch_acnt_id , l_seq_nbr, i_usr_id, c_fno_validation_flag) */
	/** Added c_fdt_uac_act_flg in Ver 1.2 **/
/*** Ver 1.7 commented unused Funtion moved to sfo_prcs_prpd service ****/
	int fn_process_client(i_mtch_acnt_id , l_seq_nbr, i_usr_id, c_fno_validation_flag, c_fdt_uac_act_flg) 
	
	EXEC SQL BEGIN DECLARE SECTION;
	char  *  i_mtch_acnt_id;
	double  l_seq_nbr;
	char *  i_usr_id;
	char    c_fno_validation_flag;
	char    c_fdt_uac_act_flg; /** Added in Ver 1.2 **/
	EXEC SQL END   DECLARE SECTION;
	{
				long val=0;

				if (DEBUG_MSG_LVL_3)
				{
  		 		fn_userlog (c_ServiceName,"Check n update |%s||%s||%c| ", i_usr_id,i_mtch_acnt_id,c_fno_validation_flag );
		  	}
  
  
				EXEC SQL
						 INSERT INTO FDT_FNO_DISABLE_TRACK
						 SELECT FDT_SEQ_ID,
										FDT_USR_ID,
										FDT_MATCH_ACNT,
										'',
										FDT_UAC_FNO_ALLWD,
									        :c_fno_validation_flag, /** Changed from 'Z' to variable - Ver 1.2 **/
										FDT_PLG_AMT,
										FDT_EQ_AMT,
										FDT_FO_AMT,
										FDT_MF_AMT,
										FDT_CR_AMT,
										FDT_COMMENT,
										FDT_PRCS_DATE,
										'',
										'',
									  'Y' 
						 FROM FDT_FNO_DISABLE_TRACK_SEBI
						 WHERE FDT_MATCH_ACNT = :i_mtch_acnt_id
						 AND FDT_SEQ_ID = :l_seq_nbr
						 AND FDT_USR_ID = :i_usr_id
						 AND FDT_PRCS_FLG='P';

			  if ( SQLCODE != 0 )
			  {
			    fn_userlog (c_ServiceName," Failed in Inserting into FDT from Temp");
			    fn_errlog  (c_ServiceName, "S31100", SQLMSG, c_err_msg  );
			  	return (-1);
			  }

				if (DEBUG_MSG_LVL_3)
				{
  		 		fn_userlog (c_ServiceName,"Record inserted from temp to FDT: <%ld> <%s> <%ld>", 
									 		  sqlca.sqlerrd[2], i_usr_id, l_seq_nbr);
		  	}

			 	EXEC SQL
						 UPDATE 	FDT_FNO_DISABLE_TRACK_SEBI
						 SET 			FDT_PRCS_FLG='Y'
						 WHERE		FDT_MATCH_ACNT = :i_mtch_acnt_id
						 AND 		  FDT_SEQ_ID = :l_seq_nbr
						 AND  FDT_USR_ID = :i_usr_id
						 AND 			FDT_PRCS_FLG='P';
	
		  	if ( SQLCODE != 0 )
		  	{
			  	fn_errlog  (c_ServiceName, "S31105", SQLMSG, c_err_msg  );
					return (-1);
		  	}

  			EXEC SQL
	  					UPDATE UAC_USR_ACCNTS
	  					SET 	 UAC_FNO_ALLWD = :c_fno_validation_flag,
										 UAC_LST_UPDT_DATE=sysdate
	  					WHERE  UAC_CLM_MTCH_ACCNT = :i_mtch_acnt_id;
	
	  	  if ( SQLCODE != 0 )
	  	  {
	   	   fn_errlog ( c_ServiceName, "S31110", SQLMSG, c_err_msg  );
	   	   return (-1);
	  	  }

   			
			  /** Ver 1.2 Starts **/
			  if (
						(strncmp(i_mtch_acnt_id,"750",3)== 0) || (strncmp(i_mtch_acnt_id,"751",3)== 0) || 
				 		(strncmp(i_mtch_acnt_id,"650",3)== 0)	|| (strncmp(i_mtch_acnt_id,"651",3)== 0)  
           )
 		  	{
		      	EXEC SQL
		      		UPDATE clm_clnt_mstr                                              
		      		SET    clm_clnt_lvl      = '1',                                   
			     	 			 	 clm_plg_allwd_flg = 'N'                                   
		      		WHERE  clm_mtch_accnt    = :i_mtch_acnt_id;

						if ( SQLCODE != 0 )
						{
			 		 		fn_errlog ( c_ServiceName, "S31115", SQLMSG, c_err_msg  );
			 		 		return (-1);
						}
	 	    }
		   	 /** Ver 1.2 Ends **/
		    else
		    {

			    EXEC SQL
      				UPDATE  CLM_CLNT_MSTR
      				SET     CLM_CLNT_LVL = '1',
				              CLM_PLG_ALLWD_FLG = 'Y'  /** Added in Ver 1.2 **/ 
      				WHERE   CLM_MTCH_ACCNT = :i_mtch_acnt_id;

          if ( SQLCODE != 0 )
          {
         	 fn_errlog ( c_ServiceName, "S31120", SQLMSG, c_err_msg  );
         	 return (-1);
          }
	      }
	 				/** ver 1.7 remark changed **/ 
  			EXEC SQL
	 					 INSERT INTO ADH_ACT_DEACT_HSTRY
						 (
							ADH_USR_ID,
							ADH_CLM_MTCH_ACCNT,
							ADH_ACT_DEACT_FLG,
							ADH_ACT_DEACT_DT,
							ADH_ACT_DEACT_SRC,
							ADH_RMRKS,
							ADH_UPGRD_FLG
						 )										/** Ver 1.3 columns used in insert **/
	 					 VALUES
					  (:i_usr_id ,:i_mtch_acnt_id , :c_fdt_uac_act_flg, SYSDATE, 'FNO_SEBI_TIME', 
			 				decode(:c_fno_validation_flag,'Z','FNO/CDX enabled linked Bank account more than 6 months old','D','FNO/CDX enabled linked Bank account less than 6 months old','Y','SEBI FNO Allowd'), 'N' );
							/** Changed act_flag while inserting ADH from 'A' to variable c_fdt_uac_act_flg - Ver 1.2 **/
			
 	 			if ( SQLCODE != 0 )
 	 			{
    			fn_errlog ( c_ServiceName, "S31125", SQLMSG, c_err_msg  );
		      return (-1);
 	 			}

     	  return (0);
  }
/******************************************************************************/

	char *trim(char *str)
	{
  
  	int i;
  	for (i=0;i<strlen(str);i++)
    if (str[i]==' ') str[i]='\0';

  	return(str);
	}

void fn_gettime()
{
   int i_mili_sec = 0;
   struct timeval tv;
   struct timezone tz;
   struct tm *tm;

   gettimeofday(&tv, &tz);
   tm=localtime(&tv.tv_sec);
   i_mili_sec= tv.tv_usec/1000;
   sprintf(c_time,"%d:%d:%d:%d",tm->tm_hour, tm->tm_min, tm->tm_sec, i_mili_sec);

   return;
}

/*******************************************************************************
	END OF CODE
*******************************************************************************/
