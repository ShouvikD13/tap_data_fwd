/*******************************************************************************
*  Program           : bat_fut_inct.pc                                         *
*                                                                              *
*  Description       :                                                         *  
*                                                                              *
*  Input Parameters  :      1. M       Month  - Only M in frontend             *
*                           2. 1..12   Month Number of year                    *
*                           3. 2009    Year                                    *
*                                                                              *
*  Change Log        : 1.0   02-Dec-2009  Venture M|Infotech                   *
*                    : 1.1   07-Apr-2010  Venture M|Infotech                   *
*                    : 1.2   29-sep-2010  Nitin   S|Infotech                   *
*										 : 1.3	 11-Apr-2011  Shamili D/Sandip T|Infotech					 *
*										 : 1.4	 20-Oct-2011  Shamili D|Infotech		        			 *
*										 : 1.5	 09-Jan-2012  Shamili D|Infotech		        			 *
*										 : 1.6	 31-Jul-2012  Sandip 	T|Infotech		        			 *
*										 : 1.7 	 04-Sep-2012 	Vishnu	N|Infotech									 *
*										 : 1.8 	 08-Oct-2013 	Navina  D|Infotech									 *
*										 : 1.9 	 09-Sep-2014 	Samip 	M|Infotech									 *
*										 : 2.0 	 09-Oct-2014 	Sandip  TInfotech 									 *
*										 : 2.1 	 12-Aug-2015 	Sandip  TInfotech 									 *
*										 : 2.2 	 20-Apr-2016 	Sandip  TInfotech 									 *
*                    : 2.3   24-Jul-2017  Afzal   TInfotech
*                    : TOL   05-Sep-2023  Agam    |Infotech
********************************************************************************
*  1.0    -  New Release                                                       *
*  1.2    -  To exclude brokerage in close out cases                           * 
*	 1.3		-  Using min lot size for calculation																 * 
*	 1.4		-	 Excluding Rs.20 in incentive calculation.												 *
*	 1.5		-	 Excluding prepaide brokerage in incentive calculation.						 *
*	 1.6		-	 Excluding Rs.25 in incentive calculation.												 *
*	 1.7		-	 Change to include / exclude customers mapped to the schemes			 *
*						 and based on eligibility																					 *
*  1.8    -  Including the SLTP FuturePLUS turnover for incentive calculations *
*  1.9    -  View to FML changes																							 *
*  2.0    -  CR-ISEC14-55222_I_Gain_Profit_Pricing_Model											 *
*  2.1    -  Bullet Pricing Scheme Changes              											 *
*  2.2    -  CR-ISEC04-78141- Excluding Trades with 50 Rs brokerage 					 *
*  2.3    -  GST Incentive Changes                                             *
*  TOL    -  Tux on Linux                                                      *
*******************************************************************************/

/* Header Files */

#include<sqlca.h>
#include<atmi.h>
#include <string.h>
#include <stdlib.h>
#include<fo.h>
#include<fml32.h>
#include<fn_log.h>
#include<fn_tuxlib.h>
#include<fn_battmpt.h>
#include<fml_def.h>
#include<fo_fml_def.h>
#include<fn_ddr.h>
/** #include<fo_view_def.h> **/	/** Ver 1.9 **/
#include <fn_read_debug_lvl.h>
#include <fn_inctv_ltst_gst_per.h> /** Addded in Ver 2.3 ***/

#define DEFLOG5 if (DEBUG_MSG_LVL_5)
#define DEFLOG if (DEBUG_MSG_LVL_3)
#define SQL_ROW_COUNT sqlca.sqlerrd[2]
#define STR_TRIM(x) x[strlen(x)]='\0' 

int fn_calc_dates(char , int , int  );

int fn_create_tmp_smry_table(void);

int fn_process_tmp_smry_table(void);

int fn_load_global_data(void);

int fn_validate_clnt_ctgy(void);

int fn_validate_rerun(void);

void fn_print_date_time(void);

/*int fn_update_corporate_action_effect(void); */				/** 1.3 **/

int fn_update_sqroff_dtls (void);

char *trim(char *str);

void fn_display_data(void);

void fn_exclud_prepaid_brk(void);												/** 1.5 **/

int fn_include_exclude_schm(void); 										/** 1.7 **/
                   
 
/*----------------------------------------------------------------------------*/

EXEC SQL BEGIN DECLARE SECTION;
 

struct st_gst_per st_ptr_gst_per;   /**** Added in Ver 2.3 ****/
 
char c_g_qtr_mth_ind='0';
int  i_g_qtr_mth_no=0;
int  i_g_year=0;

char c_g_start_date[23]={0};
char c_g_end_date[23]={0}; 

char c_ServiceName[33]={0};
//char c_err_msg[500]={0};
char c_err_msg[256]={0};  /* Added in Ver TOL */

double d_g_normal_percentage=0.00;

/*** double d_g_svc_tax_percentage=0.00; ***Commented in Ver 2.3***/

double d_net_inct_amnt=0.00;   /*** Added in Ver 2.3 ***/

char c_msg[256]={0};

char c_mtch_accnt_no[11]; /***  Added in Ver 2.3 ***/ 


typedef struct __undrlyng_list
{
	char undrlyng[7];
	long mkt_lot;
	long mkt_lot_new;
	char actn_dt[23];
} str_undrlyng_list;



EXEC SQL  END  DECLARE SECTION;

/*----------------------------------------------------------------------------*/

/******************************************************************************/

void BAT_FUT_INCT ( int argc, char *argv[])
{
  EXEC SQL BEGIN DECLARE SECTION;

  char c_svc_name[18]={0};
  char c_trd_date[21]={0};
  char c_err_msg[256]={0};  
  char c_xchng_cd[4]={0};
	varchar c_schm_cd[50]={0}; /** Ver 1.7 **/

  

  EXEC SQL  END  DECLARE SECTION;

  MEMSET(c_mtch_accnt_no);  /***  Added in Ver 2.3 ***/ 

  strcpy(c_ServiceName,argv[0]);
  sprintf(c_tag,"%s_na",argv[0]);

  INITBATDBGLVL(argv[0]);

  sprintf(c_msg,"Batch process %s is started",argv[0]);
  fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);   /* Renamed fn_bat_pst_msg to fn_bat_pst_msg_fno in Ver TOL */
  fn_userlog (c_ServiceName,"Batch process %s is started",argv[0]);

  /*need to validate the params passed*/

  if ( argc != 7 )
  {
    fn_userlog (c_ServiceName,"Invalid Arguments passed %d",argc);
    fn_userlog (c_ServiceName,"Usage:%s NFO NFO NA <M> <Month (1..12 )> <Year> ",argv[0]);
		fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);    
    return;
  }
  else
  {
    c_g_qtr_mth_ind=argv[4][0];
    i_g_qtr_mth_no=atoi(argv[5]);
    i_g_year=atoi(argv[6]);
    
    fn_userlog (c_ServiceName,"Arguments passed %c %d %d",
                c_g_qtr_mth_ind,
                i_g_qtr_mth_no,
                i_g_year          );
  }

  if ( fn_calc_dates( c_g_qtr_mth_ind,  i_g_qtr_mth_no ,  i_g_year)  )
	{
  	fn_userlog (c_ServiceName,"Failed to calculate the dates ");
  	fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
	  sprintf(c_msg,"Failed to calculate the dates ");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag); 	
		return;
	}
	else
	{
	  sprintf(c_msg,"Calculate the dates ");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag); 	
	}

  /*need to validate that calc has not happened in past for given date range.*/ 
	if (fn_validate_rerun() )
	{
  	fn_userlog (c_ServiceName,"Failed in rerun validation. ");
  	fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
  	sprintf(c_msg,"Failed in rerun validation. ");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
		return;
	}
	else
	{
	  sprintf(c_msg,"Rerun validation completed ");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag); 	
	}

  sprintf(c_msg,"Processing ... please wait .... ");
  fn_userlog (c_ServiceName,"Processing ... please wait .... ");
  fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
  
  if ( fn_load_global_data() )
	{
  	fn_userlog (c_ServiceName,"Failed in loading global data. ");
  	fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
  	sprintf(c_msg,"Failed in loading global data. ");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
		return;
	}
	else
	{
	  sprintf(c_msg,"Loaded global data ");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag); 	
	}

	if( fn_create_tmp_smry_table() )
	{
  	fn_userlog (c_ServiceName,"Failed in FIS table creation. ");
  	fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
  	sprintf(c_msg,"Failed in FIS table creation. ");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
		return;
	}
	else
	{
	  sprintf(c_msg,"FIS table creation completed ");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag); 	
	}

	/* Ver 1.7 Starts */
	
	/*** Checking Whether future Incentive is defined for all scheme code ***/
	
	MEMSET(c_schm_cd);

	EXEC SQL
  SELECT  IMSM_SCHEMECODE
  INTO    :c_schm_cd
  FROM  INSD_INFO_NTST_SCHEME_DTLS,IMSM_INFO_MATCH_SCHEME_MASTER,TMP_FUT_INC_SMRY
  WHERE INSD_MATCH_ACCOUNT_NO=FIS_MATCH_ACNT
  AND   INSD_FNO_SCHEMECODE = IMSM_SCHEMECODE
  AND   IMSM_FUT_INC  IS NULL
  AND   ROWNUM < 2  ;

  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog ( c_ServiceName, "S31005", SQLMSG, c_err_msg  );
		fn_userlog (c_ServiceName,"Failed while checking future incentive flag ");
    fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
    sprintf(c_msg,"Failed  while checking future incentive flag");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
    return;
  }
  else if(SQLCODE == 0 ) 
  {
		SETNULL(c_schm_cd);

		EXEC SQL
    DELETE FROM TMP_FUT_INC_SMRY;

  	if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  	{
    	fn_errlog ( c_ServiceName, "S31010", SQLMSG, c_err_msg  );
    	return;
  	}

		fn_userlog (c_ServiceName,"Incentive flag not defined for Scheme :%s:",c_schm_cd.arr);
		fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
    sprintf(c_msg,"Incentive flag not defined for Scheme :%s:",c_schm_cd.arr);
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
		return;
  }

	if ( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Incentive flag check completed.. " );
  } 

	/* Ver 1.7 Ends */

	/*** Commented for Ver 1.3 ***/

	/* if ( fn_update_corporate_action_effect() )
	{
  	fn_userlog (c_ServiceName,"Failed in updating Corporate Action effect. ");
  	fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
  	sprintf(c_msg,"Failed in updating Corporate Action effect. ");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
		return;
	}
	else
	{
	  sprintf(c_msg,"Updated Corporate Action details ");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag); 	
	}*/

  if ( fn_update_sqroff_dtls() )
	{
  	fn_userlog (c_ServiceName,"Failed in updating squareoff details. ");
  	fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
  	sprintf(c_msg,"Failed in updating squareoff details. ");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
		return;
	}
	else
	{
	  sprintf(c_msg,"Updated squareoff details ");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag); 	
	}

	if ( fn_process_tmp_smry_table() )
	{
  	fn_userlog (c_ServiceName,"Failed in TMP FIS table processing. ");
  	fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
  	sprintf(c_msg,"Failed in TMP FIS table processing.  ");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
		return;
	}
	else
	{
	  sprintf(c_msg,"TMP FIS table processing completed ");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag); 	
	}
	
	/*** Ver 1.7 Starts ***/
	
	if(	fn_include_exclude_schm()	)
	{
		fn_userlog (c_ServiceName,"Failed while marking eligibilty");
		fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
		sprintf(c_msg,"Failed in marking eligibilty");
		fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
    return;
	}

	/*** Ver 1.7 Ends ***/
			 
  /*need to validate the client categories*/  
  
	if ( fn_validate_clnt_ctgy() )
	{
  	fn_userlog (c_ServiceName,"Failed in setting clients category filter. ");
  	fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
  	sprintf(c_msg,"Failed in setting clients category filter. ");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
		return;
	}
	else
	{
	  sprintf(c_msg,"Client category filter applied ");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag); 	
	} 
	
	DEFLOG5
	fn_display_data();

  sprintf(c_msg,"Batch process %s completed",argv[0]);
  fn_userlog (c_ServiceName,"Batch process %s completed",argv[0]);
  fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
  fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
  
  return ;
}

/******************************************************************************/
 
int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_FUT_INCT;
  return 0;
}
 
void fn_bat_term ( int argc, char *argv[] )
{
  return;
} 
 
int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
  return 0;
}

/******************************************************************************/

int fn_calc_dates( c_qtr_mth_ind,  i_qtr_mth_no ,  i_year)
EXEC SQL BEGIN DECLARE SECTION;
char c_qtr_mth_ind;
int i_qtr_mth_no ;
int i_year;
EXEC SQL END   DECLARE SECTION;
{
  fn_userlog (c_ServiceName,"fn_calc_dates %c %d %d ",c_qtr_mth_ind,i_qtr_mth_no,i_year);

	if (c_qtr_mth_ind == 'M')
  {
  	if ( (i_qtr_mth_no > 0)  && (i_qtr_mth_no < 13 ) )
  	{
    EXEC SQL 
      SELECT 
      '01-' || TO_CHAR ( TO_DATE(:i_qtr_mth_no,'MM') , 'Mon' ) ||'-'||:i_year
			INTO :c_g_start_date
      FROM    dual;
		 
    if ( SQLCODE != 0 )
		  {
		    fn_errlog ( c_ServiceName, "S31015", SQLMSG, c_err_msg  );
		    return (-1);
		  }
		  
		  EXEC SQL
		  SELECT LAST_DAY(:c_g_start_date)
			INTO :c_g_end_date
			FROM DUAL;
		  if ( SQLCODE != 0 )
		  {
		    fn_errlog ( c_ServiceName, "S31020", SQLMSG, c_err_msg  );
		    return (-1);
		  }
		}
		else
		{
			fn_userlog (c_ServiceName,"Invalid  Month passed. |%d|",i_qtr_mth_no);
    	return (-1);
		}
  }
  else
  {
    fn_userlog (c_ServiceName,"Invalid Month indicator passed. |%c|",c_qtr_mth_ind);
    return (-1);
  }

  fn_userlog (c_ServiceName,"fn_calc_dates start date %s ",c_g_start_date);
  fn_userlog (c_ServiceName,"fn_calc_dates  end  date %s ",c_g_end_date);
  
  return (0);
}

/******************************************************************************/

int fn_create_tmp_smry_table()
{

	EXEC SQL BEGIN DECLARE SECTION;
	long l_l_row_count=0;
	EXEC SQL END   DECLARE SECTION;

	fn_print_date_time();
	fn_userlog (c_ServiceName,"+ - CLEANUP TMP_FUT_INC_SMRY ");
	
	fn_print_date_time();
	EXEC SQL
		DELETE FROM TMP_FUT_INC_SMRY;

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31025", SQLMSG, c_err_msg  );
    return (-1);
  }

	fn_print_date_time();	
	fn_userlog (c_ServiceName,"I - Inserting into table TMP_FUT_INC_SMRY ");
	fn_userlog (c_ServiceName,"I - c_g_start_date:%s:",c_g_start_date);
	fn_userlog (c_ServiceName,"I - c_g_end_date:%s:",c_g_end_date);


	/************* Ver 1.3  fcm is removed and ftd min lot size is used ***********/
	
	EXEC SQL
	INSERT INTO TMP_FUT_INC_SMRY 
	(
	FIS_MATCH_ACNT ,
	FIS_FROM_DT    ,
	FIS_TO_DT      ,
	FIS_TURNOVER   ,
	FIS_FUT_BRKRG  ,
	FIS_DISP_FLAG  ,
	FIS_PRCS_FLAG
	)
	(
			select  FTD_CLM_MTCH_ACCNT , 
							:c_g_start_date, 
							:c_g_end_date, 
							SUM(TURNOVER), 
							SUM (FTD_BRKG) , 
							'Y' , 
							'N' 
			FROM 
			(
				(
					(
						SELECT ftd_clm_mtch_accnt, 
									 ftd_eba_trd_ref, 
									 (ftd_exctd_qty * ftd_exctd_rt) TURNOVER ,
									 ftd_brkg 
						FROM
						ftd_fo_trd_dtls_hstry 
						WHERE 
						trunc(ftd_trd_dt) BETWEEN :c_g_start_date and :c_g_end_date
						AND ftd_prdct_typ in('F','P','U')  /*** product type 'U' added in Ver 1.8 ***/
						AND ftd_brkg IS NOT NULL 
						AND ftd_brkg != 0
						AND	ftd_min_lot_size != 0					/**1.3**/
						AND ftd_min_lot_size is not null	/**1.3**/
						AND nvl(ftd_brkg_type,'N') = 'N'  /** Ver 2.1 **/
						/*AND	nvl((ftd_brkg /( ftd_exctd_qty / ftd_min_lot_size) ),0)<>1500 **1.3**//**1.4**/
						AND	(nvl((ftd_brkg / ( ftd_exctd_qty / ftd_min_lot_size) ),0) not in ( 1500,2000,2500,5000)) /**1.4**/ /*** Ver 1.6 Added Rs 25 **/ /** Ver 2.2 50 added**/
						/*AND  FTD_ORDR_RFRNC not in
										( 
											Select distinct iod_ordr_rfrnc 
											from  iod_igain_ordr_dtls_hstry
											where trunc(iod_ordr_dt) between :c_g_start_date and :c_g_end_date
										) 				** Ver 2.0 **/ /*** Ver 2.1 comment **/
					)
				  UNION ALL
				  (
				 
						SELECT ccd_usr_mtch_accno , 
									 ccd_clsoutnote_nmbr , 
									 (ccd_cntrct_amt*100) , 
									 (ccd_brkg *100)
						FROM   ccd_cntrct_clsout_dtls
						WHERE
						/**(ccd_brkg / ccd_nmbr_cntrcts) != 15    ***/							/**1.4**/
						((ccd_brkg / ccd_nmbr_cntrcts) not in( 15,20,25,50))  /**1.4**//** Ver 1.6 Added Rs 25 **//* ver 2.2 50 added**/ 
							 AND ccd_brkg != 0       /*** Added for Ver 1.2 ***/
						 AND ccd_clsout_dt-1  between  :c_g_start_date and :c_g_end_date 
					)
				)
			 	MINUS
				(
					(
						SELECT DISTINCT ftd_clm_mtch_accnt, 
									 ftd_eba_trd_ref , 
									 ( ftd_exctd_qty * ftd_exctd_rt ) TURNOVER ,
									 ftd_brkg
						FROM ftd_fo_trd_dtls_hstry
						/*fcm_fo_cntrct_mstr_union */					/** 1.3 **/
						WHERE					
						ftd_prdct_typ in ('F','P','U') /*** product type 'U' added in Ver 1.8 ***/ 
						AND	trunc(ftd_trd_dt) BETWEEN :c_g_start_date AND :c_g_end_date
						/*AND ( ftd_brkg/(ftd_exctd_qty/ftd_min_lot_size)=1500 ) */	/**1.4 **/ 
						AND (( ftd_brkg/(ftd_exctd_qty/ftd_min_lot_size)=1500 ) 
						OR  ( ftd_brkg/(ftd_exctd_qty/ftd_min_lot_size)=2500 ) 		/**1.6**/
						OR  ( ftd_brkg/(ftd_exctd_qty/ftd_min_lot_size)=5000 ) 		/**2.2**/
						OR  ( ftd_brkg/(ftd_exctd_qty/ftd_min_lot_size)=2000 ) )		/**1.4**/
						AND	ftd_min_lot_size != 0						/** 1.3 **/
						AND ftd_min_lot_size is not null	  /** 1.3 **/

						/*AND	FTD_UNDRLYNG = FCM_UNDRLYNG 	
						AND FCM_PRDCT_TYP = 'F' 					
						AND FTD_EXPRY_DT = FCM_EXPRY_DT		
						AND ( FTD_BRKG/(FTD_EXCTD_QTY/FCM_LOT_SZ)=1500 ) */					/** 1.3 **/					
					)
			  )
		)temp
		GROUP BY FTD_CLM_MTCH_ACCNT
	);
	
  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31030", SQLMSG, c_err_msg);
    return (-1);
  }
  
	if (SQL_ROW_COUNT == 0)
	{
		fn_userlog (c_ServiceName," Nothing to process. Exiting !!! " );
		return(-1);
	}
	  
	fn_userlog (c_ServiceName," Row count %d ", SQL_ROW_COUNT );
	fn_print_date_time();


	/********* Excluding records which are under prepaid brpkerage scheme ****/    /**1.5 **/

 /** fn_exclud_prepaid_brk();                  commented in Ver 1.7 ***/
	
	
	DEFLOG5  
  fn_display_data();

  return 0;
}

/******************************************************************************/

int fn_process_tmp_smry_table()
{

	fn_print_date_time();
	fn_userlog (c_ServiceName,"II - Updating Percentage based on Turnover ");

  EXEC SQL
  UPDATE  TMP_FUT_INC_SMRY
  SET FIS_PRCNTG = 
  (SELECT NVL((ISD_INCENT_PER/100),0.00) from INC_SLAB_DTLS     /* Taking in percenatge value and not actual */
	WHERE ISD_SCHM_NO = 3
		AND FIS_TURNOVER >= ISD_TURN_FROM*100
	  AND FIS_TURNOVER <= ISD_TURN_TO*100								/*** Ver 1.3 Changed from < to <= ******/
	  AND ISD_INCENT_PER is not null
  );
  
  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31035", SQLMSG, c_err_msg  );
    return (-1);
  }

	fn_userlog (c_ServiceName," Row count %d ", SQL_ROW_COUNT );

  EXEC SQL
  UPDATE  TMP_FUT_INC_SMRY
  SET FIS_PRCNTG = 0
	WHERE FIS_PRCNTG is null;
  
  if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
    fn_errlog ( c_ServiceName, "S31040", SQLMSG, c_err_msg  );
    return (-1);
  }

	fn_userlog (c_ServiceName," Row count %d ", SQL_ROW_COUNT );
	fn_print_date_time();
	fn_userlog (c_ServiceName,"III - Updating Offline Brokerage ");

	/* Upfront brokerage selected below will be in Rupees */

  EXEC SQL
  UPDATE  TMP_FUT_INC_SMRY
  SET FIS_OFFLINE_BRKRG =
  (	SELECT nvl( SUM(MDC_AMT1*100) ,0)
		FROM	MDC_MISC_DR_CR
		WHERE	MDC_CLM_MTCH_ACCNT=FIS_MATCH_ACNT
		/*AND MDC_PRDCT_TYP   ='FRF' */						/** Ver 1.3 **/
			AND MDC_DR_CR_FLG	='C'
			AND (MDC_FROM_DT)	>= :c_g_start_date
			AND (MDC_TO_DT)		<= :c_g_end_date
			AND	MDC_PRDCT_TYP in ( SELECT IAT_ADHOC_TYPE from IAT_INCENTIVE_ADHOC_TYPE where
      IAT_INCENT_NO = (select ITM_INCENT_NO from ITM_INC_TYPE_MSTR where ITM_PRDCT_TYP = 'DER'))
			/** 1.3 **/ 
	); 

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31045", SQLMSG, c_err_msg  );
    return (-1);
  }

	fn_userlog (c_ServiceName," Row count %d ", SQL_ROW_COUNT );
	fn_print_date_time();
	fn_userlog (c_ServiceName,"IV - Updating Normal Brokerage ");

  EXEC SQL
  UPDATE  TMP_FUT_INC_SMRY
	SET FIS_NRML_BRKRG =                                    
	  (	FIS_TURNOVER  * :d_g_normal_percentage / 100 );
		  
  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31050", SQLMSG, c_err_msg  );
    return (-1);
  }

	fn_userlog (c_ServiceName," Row count %d ", SQL_ROW_COUNT );
	fn_print_date_time();
	fn_userlog (c_ServiceName,"V - Updating Upfront Brokerage ");

  EXEC SQL  
  UPDATE  TMP_FUT_INC_SMRY
	SET FIS_UPFRONT_BRKRG = ( (FIS_NRML_BRKRG - FIS_FUT_BRKRG ) + FIS_OFFLINE_BRKRG )
	WHERE (FIS_NRML_BRKRG - FIS_FUT_BRKRG ) > 0;

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31055", SQLMSG, c_err_msg  );
    return (-1);
  }
  
	fn_userlog (c_ServiceName," Row count (RB >0) %d ", SQL_ROW_COUNT );
	
	EXEC SQL  
  UPDATE  TMP_FUT_INC_SMRY
	SET FIS_UPFRONT_BRKRG =  FIS_OFFLINE_BRKRG 
	WHERE (FIS_NRML_BRKRG - FIS_FUT_BRKRG ) <= 0;

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog (c_ServiceName, "S31060", SQLMSG, c_err_msg);
    return (-1);
  }

	/*Percentage needs to be setup before this calc is done - DONE*/ 

	fn_userlog (c_ServiceName," Row count (RB<=0) %d ", SQL_ROW_COUNT );
	fn_print_date_time();
	fn_userlog (c_ServiceName,"VI - Updating Incentive Amount ");

  EXEC SQL
	UPDATE  TMP_FUT_INC_SMRY
	SET FIS_INCNT_AMT = (FIS_TURNOVER/100) * NVL(FIS_PRCNTG,0);  /* Getting incentive amount in Rupees */
	
  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31065", SQLMSG, c_err_msg  );
    return (-1);
  }

	fn_userlog (c_ServiceName," Row count %d ", SQL_ROW_COUNT );
	fn_print_date_time();
	fn_userlog (c_ServiceName,"VII - Updating Net Incentive Amount ");

  EXEC SQL
  UPDATE  TMP_FUT_INC_SMRY
	SET FIS_NET_INCNT_AMT = FIS_INCNT_AMT - (FIS_UPFRONT_BRKRG /100); /* Converting brokerage into Rupee only at this stage */
	
  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31070", SQLMSG, c_err_msg  );
    return (-1);
  }

	fn_userlog (c_ServiceName," Row count %d ", SQL_ROW_COUNT );
	fn_print_date_time();
	fn_userlog (c_ServiceName,"VIII - Updating Incentive Refund  Amount ");

 /** Cmmented in Ver 2.3 
  EXEC SQL
  UPDATE  TMP_FUT_INC_SMRY
  SET     FIS_INCNT_REFUND_AMT = FIS_NET_INCNT_AMT + 
											( FIS_NET_INCNT_AMT *	 ( :d_g_svc_tax_percentage )/100 ),
	 FIS_INCNT_DATE=SYSDATE;

	if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31075", SQLMSG, c_err_msg  );
    return (-1);
  }
 *****/

  /*** Ver 2.3 Starts****/ 
          

   EXEC SQL
    DECLARE inct_cursor CURSOR FOR        
            SELECT FIS_MATCH_ACNT,
	                 FIS_NET_INCNT_AMT
						FROM   TMP_FUT_INC_SMRY;
                   
 
 if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31080", SQLMSG, c_err_msg  );
     return (-1);
  } 

 EXEC SQL OPEN inct_cursor;

  for ( ; ; )
  {
   
   MEMSET(c_mtch_accnt_no);
   d_net_inct_amnt =0.00;
  
      EXEC SQL 
               FETCH inct_cursor
					     INTO  :c_mtch_accnt_no, 													
										 :d_net_inct_amnt;
	 
         
 	
    if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        break;
      }
      else
      {
        fn_errlog( c_ServiceName, "S31085", SQLMSG, c_err_msg  );
        EXEC SQL CLOSE inct_cursor;
        return (-1);
      }
    }
   
/** if( fn_inctv_ltst_gst_per ( c_ServiceName, c_mtch_accnt_no, d_net_inct_amnt, &st_ptr_gst_per, c_err_msg) != (-1) )   **/
if( fn_inctv_ltst_gst_per ( c_ServiceName, c_mtch_accnt_no, d_net_inct_amnt, c_g_start_date, c_g_end_date, &st_ptr_gst_per, c_err_msg) != (-1) )  
  {

		if ( DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"c_mtch_accnt_no   :%s:",c_mtch_accnt_no);
			fn_userlog(c_ServiceName,"d_net_inct_amnt :%lf:",d_net_inct_amnt);
			fn_userlog(c_ServiceName,"st_ptr_gst_per.d_cgst_amt :%lf:",st_ptr_gst_per.d_cgst_amt);
			fn_userlog(c_ServiceName,"st_ptr_gst_per.d_sgst_amt :%lf:",st_ptr_gst_per.d_sgst_amt);
			fn_userlog(c_ServiceName,"st_ptr_gst_per.d_ugst_amt :%lf:",st_ptr_gst_per.d_ugst_amt);
			fn_userlog(c_ServiceName,"st_ptr_gst_per.d_igst_amt :%lf:",st_ptr_gst_per.d_igst_amt);
			fn_userlog(c_ServiceName,"st_ptr_gst_per.d_gst_amt  :%lf:",st_ptr_gst_per.d_gst_amt);
			fn_userlog(c_ServiceName,"c_gst_isec_state_cd :%s:",st_ptr_gst_per.c_gst_isec_state_cd);
			fn_userlog(c_ServiceName,"c_gst_cust_state_cd :%s:",st_ptr_gst_per.c_gst_cust_state_cd);
		}
    EXEC SQL
		 UPDATE TMP_FUT_INC_SMRY 
       SET  FIS_CGST_AMT = :st_ptr_gst_per.d_cgst_amt,
            FIS_SGST_AMT = :st_ptr_gst_per.d_sgst_amt,
					  FIS_UGST_AMT = :st_ptr_gst_per.d_ugst_amt,
            FIS_IGST_AMT = :st_ptr_gst_per.d_igst_amt,
						FIS_TOT_GST_AMT= :st_ptr_gst_per.d_gst_amt,
						FIS_ISEC_STATE_CD=:st_ptr_gst_per.c_gst_isec_state_cd,
						FIS_CUST_STATE_CD=:st_ptr_gst_per.c_gst_cust_state_cd,
            FIS_INCNT_REFUND_AMT = FIS_NET_INCNT_AMT + :st_ptr_gst_per.d_gst_amt,
	 					FIS_INCNT_DATE=SYSDATE
      WHERE FIS_MATCH_ACNT = :c_mtch_accnt_no;
 
 if ( SQLCODE != 0 )
   {
    fn_errlog ( c_ServiceName, "S31090", SQLMSG, c_err_msg  );
     EXEC SQL CLOSE inct_cursor; 
     return (-1);
   }
  }
 else 
  {
     fn_errlog ( c_ServiceName, "S31095", SQLMSG, c_err_msg  );
     EXEC SQL CLOSE inct_cursor;
     return (-1);
  } 
 	        
 }


/**** Ver 2.3 Ends *****/
	fn_userlog (c_ServiceName," Row count %d ", SQL_ROW_COUNT );
	fn_print_date_time();
	
  return 0;
}

/******************************************************************************/

int fn_load_global_data()
{

	fn_print_date_time();
	fn_userlog (c_ServiceName," Loading Global Data ...  ");

	EXEC SQL
		SELECT IPM_PARAM_VALUE
		INTO :d_g_normal_percentage 
		FROM INC_PARAM_MSTR
		WHERE IPM_PARAM='FNO_FUT_NRML_BRKG';
		
	if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31100", SQLMSG, c_err_msg  );
    return (-1);
  }

/*** Commented Ver 2.3	
	EXEC SQL 
		SELECT IPM_PARAM_VALUE 
		INTO :d_g_svc_tax_percentage
		FROM INC_PARAM_MSTR WHERE IPM_PARAM='SERVICE_TAX';

	if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31105", SQLMSG, c_err_msg  );
    return (-1);
  }
******/

	fn_userlog (c_ServiceName," Normal Brokerage Percent |%lf| ",d_g_normal_percentage);
/**** 	fn_userlog (c_ServiceName," Service Tax Percent  |%lf| ",d_g_svc_tax_percentage); **Commented in Ver 2.3***/
	
	/********* Commented for ver 1.3 ****/

	/*EXEC SQL 
		DELETE FROM fcm_fo_cntrct_mstr_union;
	
	if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31110", SQLMSG, c_err_msg  );
  }  
	

	EXEC SQL 
		DELETE FROM tmp_ftd_dscrd_trds;
	
	if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31115", SQLMSG, c_err_msg  );
  }

  
  EXEC SQL 
		INSERT INTO fcm_fo_cntrct_mstr_union
			SELECT *	FROM fcm_fo_cntrct_mstr		WHERE FCM_PRDCT_TYP = 'F'	;
				
	if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31120", SQLMSG, c_err_msg  );
    return (-1);
  }

  EXEC SQL
		INSERT INTO fcm_fo_cntrct_mstr_union
			SELECT  
			FCM_EBA_CNTRCT_ID,
			FCM_XCHNG_CD,
			FCM_PRDCT_TYP,
			FCM_INDSTK,
			FCM_UNDRLYNG,
			FCM_EXPRY_DT,
			FCM_EXER_TYP,
			FCM_OPT_TYP,
			FCM_STRK_PRC,
			FCM_LOT_SZ,
			FCM_MULTPLR,
			FCM_ACT_STTS,
			FCM_QT_TRDNG_FLG,
			FCM_TCK_SZ,
			FCM_TOKEN_NO,
			FCM_CA_LVL,
			FCM_CLS_PRC,
			FCM_CLS_PRC_DT,
			FCM_CNTRCT_TAG,
			'P',
			FCM_MRKT_TYP,
			FCM_FP_QT_TRDNG_FLG,
			'N'
			FROM fcm_fo_cntrct_mstr_hstr
			WHERE fcm_expry_dt between to_date(:c_g_start_date) - 124 and to_date(:c_g_start_date)+124
			AND FCM_PRDCT_TYP = 'F';
				
	if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31125", SQLMSG, c_err_msg  );
    return (-1);
  }

 
   EXEC SQL
  	INSERT INTO tmp_ftd_dscrd_trds
  				SELECT DISTINCT FTD_EBA_TRD_REF 
						FROM ftd_fo_trd_dtls_hstry,fcm_fo_cntrct_mstr_union
						WHERE					
						TRUNC(FTD_TRD_DT) BETWEEN :c_g_start_date AND :c_g_end_date
						AND	FTD_UNDRLYNG = FCM_UNDRLYNG 
						AND FCM_PRDCT_TYP = 'F'
						AND ftd_prdct_typ in('F','P')
						AND FTD_EXPRY_DT = FCM_EXPRY_DT
						AND (( FTD_BRKG/(FTD_EXCTD_QTY/FCM_LOT_SZ)=1500);  



	if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31130", SQLMSG, c_err_msg  );
    return (-1);
  }*/

	/************** 1.3 ends **********************/
  
  return 0;
}
/******************************************************************************/
 
int fn_validate_rerun()
{

  EXEC SQL BEGIN DECLARE SECTION;
  long l_l_past_count=0;
  int  i_l_date_flag=0;
  EXEC SQL END   DECLARE SECTION;

	EXEC SQL
	SELECT (SYSDATE - to_date(:c_g_end_date))
	INTO :i_l_date_flag
	FROM DUAL;

	if ( ( SQLCODE != 0 )  && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31135", SQLMSG, c_err_msg  );
    return (-1);
  }

  if (i_l_date_flag < 0)
  {
		fn_userlog (c_ServiceName,"Not processing in future ");
  	sprintf(c_msg,"Why are you giving customers incentive for future date ??? ");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
		return (-1);
	}

	EXEC SQL
	SELECT
	count(rowid)
	INTO :l_l_past_count
	FROM 	
	FIS_FUT_INC_SMRY
	WHERE 
	:c_g_start_date   = FIS_FROM_DT
	AND :c_g_end_date = FIS_TO_DT
	AND FIS_DISP_FLAG = 'Y'
	AND FIS_PRCS_FLAG = 'Y';
	/*  This flag will be set to Y for displaying on the screen  */ 
	
	if ( ( SQLCODE != 0 )  && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31140", SQLMSG, c_err_msg  );
    return (-1);
  }
  
  if (l_l_past_count == 0)
  {
		fn_userlog (c_ServiceName," Month not processed in past. |%ld|. Proceed ",l_l_past_count);
	}
	else
	{	
		fn_userlog (c_ServiceName," Month already processed. |%ld|. Abort ... ",l_l_past_count);
		return (-1);
	}
/*
	EXEC SQL
	SELECT
	count(rowid)
	INTO :l_l_past_count
	FROM 	
	TMP_FUT_INC_SMRY
	WHERE 
	:c_g_start_date   = FIS_FROM_DT
	AND :c_g_end_date = FIS_TO_DT
	AND FIS_DISP_FLAG = 'Y';
	
	if ( ( SQLCODE != 0 )  && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31145", SQLMSG, c_err_msg  );
    return (-1);
  }
  
  if (l_l_past_count > 0 )
  {	
		fn_userlog (c_ServiceName," Period already calculated |%ld|. Pls check  ... ",l_l_past_count);
		return (-1);
	}
	else
	{	
		fn_userlog (c_ServiceName," Month not pre-calculated  |%ld|. Proceed ",l_l_past_count);
	} 
		
	Rohit wants to run the process many times and each time he expects the 
	temporary table to get deleted and then filled. 
	He doesn't want the same in case of Permanent table. 
	
	*/
		
  return (0);
}

/******************************************************************************/

int fn_validate_clnt_ctgy()
{

	fn_print_date_time();
	fn_userlog (c_ServiceName," Discarding clients of invalid categories ");

	EXEC SQL
	DELETE 
	FROM TMP_FUT_INC_SMRY
	WHERE FIS_MATCH_ACNT IN
	(
		SELECT CLM_MTCH_ACCNT
				from 
				CLM_CLNT_MSTR
				WHERE
				CLM_CLNT_CTGRY_ID not in (1,6,7,9,10)
	);
	 

	if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31150", SQLMSG, c_err_msg  );
    return (-1);  
	}

	fn_userlog (c_ServiceName," Row count %d ", SQL_ROW_COUNT );
	fn_print_date_time();
	fn_userlog (c_ServiceName,"\t\t ... done ");

	return 0;
}


/***** Commneted for Ver 1.3 **/

/*int fn_update_corporate_action_effect()
{

	fn_print_date_time();
	fn_userlog (c_ServiceName," Updating Corporate Action Effect ");

  EXEC SQL BEGIN DECLARE SECTION;
	char c_l_fcm_undrlyng[12] , c_l_fcm_actn_dt[23] , c_l_ccm_expry_dt_old [23];
	long l_l_ccm_market_lot_old=0;
  EXEC SQL END   DECLARE SECTION;

  EXEC SQL BEGIN DECLARE SECTION;
	str_undrlyng_list * l_str_undrlyng_list=NULL;
	long l_l_undrlnyg_count=0; 
	long i=0;
	char c_l_undrlyng[7]={0};
	char c_l_mtch_acnt_id[11]={0};
	char c_l_ftd_ordr_rfrnc[19]={0};
	long l_l_ftd_exctd_qty , l_l_ftd_exctd_rt , l_l_ftd_brkg;
	double d_factor=0;
	long l_l_boolen_flag=0, l_factor1=0,l_factor2=0;
	
  EXEC SQL END   DECLARE SECTION;
 
*  
    Ver 1.1 This table is not used any longer
  EXEC SQL
  	TRUNCATE table TMP_FUT_INC_CORP_ACT_DTLS;

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31155", SQLMSG, c_err_msg  );
    return -1;
  }
*
	
  EXEC SQL
		SELECT count( DISTINCT FCM_UNDRLYNG)
		INTO : l_l_undrlnyg_count
		FROM
		CCM_CORP_CNTRCT_MSTR , 
		FCM_FO_CORP_MSTR
		WHERE
		CCM_SYMBOL_OLD = FCM_UNDRLYNG
		AND FCM_ACTN_DT BETWEEN :c_g_start_date AND :c_g_end_date;
		
  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31160", SQLMSG, c_err_msg  );
    return -1;
  }

  if (l_l_undrlnyg_count == 0)
  {
      fn_userlog(c_ServiceName,"No records to process. Exiting !!! ");
      return 0;
  }
  
  if ( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Allocating : %ld",l_l_undrlnyg_count);  
  }
    
  l_str_undrlyng_list = calloc(sizeof ( str_undrlyng_list ),l_l_undrlnyg_count );

  if ( l_str_undrlyng_list ==  NULL )
  {
    fn_errlog ( c_ServiceName, "S31165", LIBMSG, c_err_msg );
    return ( -1 );
  }

  EXEC SQL
  DECLARE UNDRLYNG_LIST CURSOR FOR
    SELECT  
		DISTINCT FCM_UNDRLYNG,
						 CCM_MARKET_LOT_OLD,
						 CCM_MARKET_LOT_NEW,
						 FCM_ACTN_DT
	FROM
	CCM_CORP_CNTRCT_MSTR , FCM_FO_CORP_MSTR
	WHERE
	CCM_SYMBOL_OLD = FCM_UNDRLYNG
	AND FCM_ACTN_DT BETWEEN :c_g_start_date AND :c_g_end_date
	AND CCM_PRDCT_TYP_OLD='F'	
	AND CCM_EXPRY_DT_OLD > :c_g_start_date;
  
  EXEC SQL OPEN UNDRLYNG_LIST;
  
  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31170", SQLMSG, c_err_msg  );
    sprintf(c_err_msg,"Cursor creation failed with  :%s  ",sqlca.sqlerrm.sqlerrmc);
    fn_userlog(c_ServiceName,c_err_msg);

    return (-1);
  }

  EXEC SQL
  FOR :l_l_undrlnyg_count
  FETCH UNDRLYNG_LIST
  INTO :l_str_undrlyng_list;

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31175", SQLMSG, c_err_msg  );
    sprintf(c_err_msg,"Fetching failed with  :%s  ",sqlca.sqlerrm.sqlerrmc);
    fn_userlog(c_ServiceName,c_err_msg);

    return (-1);
  }

	DEFLOG
  {
    for(i=0;i<l_l_undrlnyg_count;i++)
          fn_userlog(c_ServiceName,"DEBUG --- UNDRLYNG  : |%s|",l_str_undrlyng_list[i].undrlyng);
  }
  
  EXEC SQL CLOSE UNDRLYNG_LIST;

	long l_l_undr_loop ;
	
	for (l_l_undr_loop=0; l_l_undr_loop < l_l_undrlnyg_count ; l_l_undr_loop ++)  
	{

		fn_userlog(c_ServiceName,"Processing  UNDRLYNG : %s",l_str_undrlyng_list[l_l_undr_loop].undrlyng);
		DEFLOG fn_userlog(c_ServiceName,"\t\t LOT SIZE OLD : %ld  NEW : %ld",l_str_undrlyng_list[l_l_undr_loop].mkt_lot,
		l_str_undrlyng_list[l_l_undr_loop].mkt_lot_new);

		* --------------------------------------------------------------------------------*

		EXEC SQL
		  DECLARE MTCH_LIST CURSOR FOR
			SELECT DISTINCT
			FTD_CLM_MTCH_ACCNT , FTD_EBA_TRD_REF , abs(FTD_EXCTD_QTY) , FTD_EXCTD_RT , nvl(FTD_BRKG,0)
			FROM
			FTD_FO_TRD_DTLS_HSTRY
			WHERE
			FTD_UNDRLYNG=:l_str_undrlyng_list[l_l_undr_loop].undrlyng
			AND trunc(FTD_TRD_DT) <= :l_str_undrlyng_list[l_l_undr_loop].actn_dt
			AND trunc(FTD_TRD_DT) >= :c_g_start_date
			AND ftd_brkg is not null
			AND ftd_brkg != 0;

		EXEC SQL
			OPEN MTCH_LIST;

	  if ( SQLCODE != 0 )
	  {
	    fn_errlog ( c_ServiceName, "S31180", SQLMSG, c_err_msg  );
	    sprintf(c_err_msg,"Cursor creation failed with  :%s  ",sqlca.sqlerrm.sqlerrmc);
	    fn_userlog(c_ServiceName,c_err_msg);
	    return (-1);
	  }

	  while (1)
		{
		  EXEC SQL
		  FETCH MTCH_LIST
		  INTO :c_l_mtch_acnt_id,:c_l_ftd_ordr_rfrnc,:l_l_ftd_exctd_qty,:l_l_ftd_exctd_rt,:l_l_ftd_brkg;

		  if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
		  {
		    fn_errlog ( c_ServiceName, "S31185", SQLMSG, c_err_msg  );
		    return (-1);
		  }

		  if (SQLCODE == NO_DATA_FOUND) break;

			fn_userlog(c_ServiceName,"Processing MATCH  : %s REF=%s ",c_l_mtch_acnt_id,c_l_ftd_ordr_rfrnc);
			DEFLOG fn_userlog(c_ServiceName," COVER BKRG:%ld  RES : %ld ",  l_l_ftd_brkg , 
							(	(l_l_ftd_brkg * l_str_undrlyng_list[l_l_undr_loop].mkt_lot ) / l_l_ftd_exctd_qty ) );

			l_l_boolen_flag = 0;
			
			EXEC SQL
				SELECT 1 
				INTO :l_l_boolen_flag
				FROM  tmp_ftd_dscrd_trds
				WHERE ftd_eba_trd_ref = :c_l_ftd_ordr_rfrnc;

			if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
			{
				fn_errlog ( c_ServiceName, "S31190", SQLMSG, c_err_msg  );
				return (-1);
			}

			l_factor1=((l_l_ftd_brkg * l_str_undrlyng_list[l_l_undr_loop].mkt_lot )     / l_l_ftd_exctd_qty );
			l_factor2=((l_l_ftd_brkg * l_str_undrlyng_list[l_l_undr_loop].mkt_lot_new ) / l_l_ftd_exctd_qty );			

			DEFLOG fn_userlog(c_ServiceName,"\t\t\t FLAG:%ld\tFACT1-%ld\tFACT2-%ld",l_l_boolen_flag, l_factor1, l_factor2);

			if ( ( l_l_boolen_flag == 0 ) && ( l_factor1 == 1500 )) 
			{
				 fn_userlog(c_ServiceName,"--------- %s Cover trade. Subtract %ld ", 
				 						c_l_ftd_ordr_rfrnc,(l_l_ftd_exctd_rt * l_l_ftd_exctd_qty ));
			
	       EXEC SQL
	       	UPDATE TMP_FUT_INC_SMRY
	       	SET
					 	FIS_TURNOVER = FIS_TURNOVER  - abs(:l_l_ftd_exctd_rt * :l_l_ftd_exctd_qty ),
	      		FIS_FUT_BRKRG= FIS_FUT_BRKRG - :l_l_ftd_brkg
	        WHERE FIS_MATCH_ACNT=:c_l_mtch_acnt_id;      		
	
	        if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
	        {
	          fn_errlog ( c_ServiceName, "S31195", SQLMSG, c_err_msg  );
	          return (-1);
	        }

	       EXEC SQL
	       	UPDATE TMP_FUT_INC_SMRY
	       	SET
					 	FIS_SQ_TURNOVER = FIS_SQ_TURNOVER  + abs(:l_l_ftd_exctd_rt * :l_l_ftd_exctd_qty ),
	      		FIS_SQ_FUT_BRKRG= FIS_SQ_FUT_BRKRG + :l_l_ftd_brkg
	        WHERE FIS_MATCH_ACNT=:c_l_mtch_acnt_id;      		
	
	        if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
	        {
	          fn_errlog ( c_ServiceName, "S31200", SQLMSG, c_err_msg  );
	          return (-1);
	        }
			}

			if ( ( l_l_boolen_flag == 1 ) && (  l_factor1 != 1500 )) 
			{

				 fn_userlog(c_ServiceName,"+++++++++ Non Cover trade. %s  Add %ld ", 
				 						c_l_ftd_ordr_rfrnc,
										(l_l_ftd_exctd_rt * l_l_ftd_exctd_qty ));
			
	       EXEC SQL
	       	UPDATE TMP_FUT_INC_SMRY
	       	SET
					 	FIS_TURNOVER = FIS_TURNOVER  + abs(:l_l_ftd_exctd_rt * :l_l_ftd_exctd_qty ),
	      		FIS_FUT_BRKRG= FIS_FUT_BRKRG + :l_l_ftd_brkg
	        WHERE FIS_MATCH_ACNT=:c_l_mtch_acnt_id;      		
	
	        if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
	        {
	          fn_errlog ( c_ServiceName, "S31205", SQLMSG, c_err_msg  );
	          return (-1);
	        }
	        
	       EXEC SQL
	       	UPDATE TMP_FUT_INC_SMRY
	       	SET
					 	FIS_SQ_TURNOVER = FIS_SQ_TURNOVER  - abs(:l_l_ftd_exctd_rt * :l_l_ftd_exctd_qty ),
	      		FIS_SQ_FUT_BRKRG= FIS_SQ_FUT_BRKRG - :l_l_ftd_brkg
	        WHERE FIS_MATCH_ACNT=:c_l_mtch_acnt_id;      		
	
	        if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
	        {
	          fn_errlog ( c_ServiceName, "S31210", SQLMSG, c_err_msg  );
	          return (-1);
	        }
			}		
			
		} *End of While . Inner Loop* 

		EXEC SQL 
			CLOSE MTCH_LIST;

    *--------------------------------------------------------------------------------*	
	} * End of Undrlying loop*
	
  
	return 0; 
}*/

/******************************************************************************/
int fn_update_sqroff_dtls (void)
{
  EXEC SQL BEGIN DECLARE SECTION;
  char c_l_mtch_acnt_id[30];
  double d_l_sqoff_turnover =0 , d_l_sqoff_brkg=0;
  double d_lf_sqoff_turnover =0 , d_lf_sqoff_brkg=0;
  EXEC SQL END   DECLARE SECTION;

  fn_userlog(c_ServiceName,"I-B - Updating squareoff details.");
  
  DEFLOG5
  fn_display_data();
			
	EXEC SQL
	  DECLARE FIS_MTCH_LIST CURSOR FOR
		SELECT DISTINCT FIS_MATCH_ACNT
		FROM
		TMP_FUT_INC_SMRY;
	  
	EXEC SQL
		OPEN FIS_MTCH_LIST;

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31215", SQLMSG, c_err_msg  );
    sprintf(c_err_msg,"Cursor creation failed with  :%s  ",sqlca.sqlerrm.sqlerrmc);
    fn_userlog(c_ServiceName,c_err_msg);
    return (-1);
  }
  
  while (1)
  {
  
  	d_l_sqoff_turnover =0  ; d_l_sqoff_brkg  =0;   
   	d_lf_sqoff_turnover =0 ; d_lf_sqoff_brkg =0;
		  
		EXEC SQL
    FETCH FIS_MTCH_LIST
    INTO :c_l_mtch_acnt_id;

    if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog ( c_ServiceName, "S31220", SQLMSG, c_err_msg  );
      return (-1);
    }
    if (SQLCODE == NO_DATA_FOUND ) break; 
		   
    trim(c_l_mtch_acnt_id);
    fn_userlog(c_ServiceName,"Processing mtch_acnt_id %s.", c_l_mtch_acnt_id);    
    

		/***commented for Ver 1.3 ***/

	  /*EXEC SQL  
			select NVL ( SUM ( ( FTD_EXCTD_QTY * FTD_EXCTD_RT ) ) , 0 ) TURNOVER 
			,NVL ( SUM ( FTD_BRKG ) , 0 )
			INTO :d_l_sqoff_turnover , :d_l_sqoff_brkg
			from
			ftd_fo_trd_dtls_hstry,fcm_fo_cntrct_mstr_union
			where
			trunc(FTD_TRD_DT) between :c_g_start_date and :c_g_end_date
			AND FCM_UNDRLYNG = FTD_UNDRLYNG
			and Ftd_EXPRY_DT = FCM_EXPRY_DT			
			and FCM_PRDCT_TYP = 'F'
			and ftd_prdct_typ in('F','P')
			and FTD_EXPRY_DT = FCM_EXPRY_DT
			and ( FTD_BRKG/(FTD_EXCTD_QTY/FCM_LOT_SZ)=1500)
			AND FTD_CLM_MTCH_ACCNT=:c_l_mtch_acnt_id;
		*/ 

		/****** New Querry for Ver 1.3 **/

		EXEC SQL
      select NVL ( SUM ( ( FTD_EXCTD_QTY * FTD_EXCTD_RT ) ) , 0 ) TURNOVER
      ,NVL ( SUM ( FTD_BRKG ) , 0 )
      INTO :d_l_sqoff_turnover , :d_l_sqoff_brkg
      from
      ftd_fo_trd_dtls_hstry
      where
      trunc(FTD_TRD_DT) between :c_g_start_date and :c_g_end_date
      and FTD_PRDCT_TYP in('F','P','U') /*** product type 'U' added in Ver 1.8 ***/
      /*and  ((FTD_BRKG / ( FTD_EXCTD_QTY / FTD_MIN_LOT_SIZE) ) = 1500 */	/**1.4 **/
      and  ((FTD_BRKG / ( FTD_EXCTD_QTY / FTD_MIN_LOT_SIZE) ) = 1500
			OR   (FTD_BRKG / ( FTD_EXCTD_QTY / FTD_MIN_LOT_SIZE) ) = 2500     /**1.6 **/
			OR   (FTD_BRKG / ( FTD_EXCTD_QTY / FTD_MIN_LOT_SIZE) ) = 5000     /**2.2 **/
			OR   (FTD_BRKG / ( FTD_EXCTD_QTY / FTD_MIN_LOT_SIZE) ) = 2000     /**1.4 **/
      OR   FTD_BRKG = 0 )
			AND  FTD_MIN_LOT_SIZE != 0
      AND  FTD_MIN_LOT_SIZE IS NOT NULL
      AND  FTD_CLM_MTCH_ACCNT=:c_l_mtch_acnt_id	
			AND  nvl(FTD_BRKG_TYPE,'N') ='N';																	/** Ver 2.1 **/
			/*AND  FTD_ORDR_RFRNC not in
										( 
											Select distinct iod_ordr_rfrnc 
											from  iod_igain_ordr_dtls_hstry
											where trunc(iod_ordr_dt) between :c_g_start_date and :c_g_end_date
										); 				** Ver 2.0 **/ /** Ver 2.1 comment **/
		
    
    if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog ( c_ServiceName, "S31225", SQLMSG, c_err_msg  );
      return (-1);
    }

	  EXEC SQL
			SELECT 
						NVL(SUM(NVL(CCD_CNTRCT_AMT,0)*100),0) , 
						NVL(SUM(NVL(CCD_BRKG,0)*100),0)
			INTO   :d_lf_sqoff_turnover ,:d_lf_sqoff_brkg			
			FROM   CCD_CNTRCT_CLSOUT_DTLS
			WHERE
			/*((CCD_BRKG / CCD_NMBR_CNTRCTS) = 15 OR CCD_BRKG =0)  ** Ver 1.2 **/  /**1.4**/
			((CCD_BRKG / CCD_NMBR_CNTRCTS) = 15 OR
			 (CCD_BRKG / CCD_NMBR_CNTRCTS) = 20 OR 
			 (CCD_BRKG / CCD_NMBR_CNTRCTS) = 25 OR							/*** Ver 1.6 ***/ 
			 (CCD_BRKG / CCD_NMBR_CNTRCTS) = 50 OR							/*** Ver 2.2 ***/ 
				CCD_BRKG =0)  /** Ver 1.4 **/
			AND CCD_CLSOUT_DT-1  BETWEEN  :c_g_start_date AND :c_g_end_date 
			AND CCD_USR_MTCH_ACCNO = :c_l_mtch_acnt_id;

    if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog ( c_ServiceName, "S31230", SQLMSG, c_err_msg  );
      return (-1);
    }
    
		DEFLOG
    fn_userlog(c_ServiceName,"SQUAREOFF[adding]  (Turnover %lf) (Brokerage %lf).", 
							 d_l_sqoff_turnover,
							 d_l_sqoff_brkg);

		DEFLOG
    fn_userlog(c_ServiceName,"CLS SQUAREOFF[adding]  (Turnover %lf) (Brokerage %lf).", 
							 d_lf_sqoff_turnover,
							 d_lf_sqoff_brkg);
    
    
		if ( ( d_l_sqoff_turnover + d_lf_sqoff_turnover + d_l_sqoff_brkg + d_lf_sqoff_brkg ) > 0 )
		{
			/* Ver 1.1 if condition added for speeding up */		
			
			EXEC SQL
	    UPDATE TMP_FUT_INC_SMRY
	    SET 
				FIS_SQ_TURNOVER  = FIS_SQ_TURNOVER   + :d_l_sqoff_turnover + :d_lf_sqoff_turnover,
	    	FIS_SQ_FUT_BRKRG = FIS_SQ_FUT_BRKRG  + :d_l_sqoff_brkg     + :d_lf_sqoff_brkg    
			WHERE FIS_MATCH_ACNT=:c_l_mtch_acnt_id;
	
	    if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
	    {
	      fn_errlog ( c_ServiceName, "S31235", SQLMSG, c_err_msg  );
	      return (-1);
	    }
    }
	}
  
  EXEC SQL
    CLOSE FIS_MTCH_LIST;

	return (0);  
}


/*************************** Ver 1.5 Starts ********************************/

void fn_exclud_prepaid_brk(void)
{

  fn_userlog(c_ServiceName,"Excluding records which are under prepaid brokerage scheme");


  EXEC SQL
       DELETE from TMP_FUT_INC_SMRY 
       WHERE FIS_MATCH_ACNT in
       (
       SELECT  distinct BUA_MATCH_ACC
       FROM BUA_BRK_UTIL_AUDIT,TMP_FUT_INC_SMRY
       WHERE 
			 BUA_MATCH_ACC = FIS_MATCH_ACNT  and
			 BUA_AMT_REDUC_DT between :c_g_start_date AND :c_g_end_date

       );

  if ( SQLCODE != 0  &&  SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog ( c_ServiceName, "S31240", SQLMSG, c_err_msg  );
    return ;
  }


  fn_userlog (c_ServiceName," Row count  for Prepaid brokerage%d ", SQL_ROW_COUNT );


}

/*************************** Ver 1.5 Ends ********************************/


void fn_display_data(void)
{


  EXEC SQL BEGIN DECLARE SECTION;
  char c_l_mtch_acnt_id[30];
  double d_l_turnover =0 ;
  EXEC SQL END   DECLARE SECTION;

  fn_userlog(c_ServiceName,"DEBUG - Display details.");
  fn_userlog(c_ServiceName,"=======================================================");
			
	EXEC SQL
	  DECLARE TMP_FIS_MTCH_LIST CURSOR FOR
		SELECT FIS_MATCH_ACNT, FIS_TURNOVER
		FROM
		tmp_fut_inc_smry;
	  
	EXEC SQL
		OPEN TMP_FIS_MTCH_LIST;

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31245", SQLMSG, c_err_msg  );
    sprintf(c_err_msg,"Cursor creation failed with  :%s  ",sqlca.sqlerrm.sqlerrmc);
    fn_userlog(c_ServiceName,c_err_msg);
    return ;
  }
  
  while (1)
  {
	  
		EXEC SQL
    FETCH TMP_FIS_MTCH_LIST
    INTO :c_l_mtch_acnt_id,:d_l_turnover;
    
    if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog ( c_ServiceName, "S31250", SQLMSG, c_err_msg  );
      return ;
    }
    if (SQLCODE == NO_DATA_FOUND ) break;
    
    trim(c_l_mtch_acnt_id);
    
    fn_userlog(c_ServiceName," MATCH %s - TURNOVER %lf", c_l_mtch_acnt_id,d_l_turnover );
  }
  

  EXEC SQL
    CLOSE TMP_FIS_MTCH_LIST;
    
}

void fn_print_date_time()
{
  EXEC SQL BEGIN DECLARE SECTION;
  char c_date_time[30];
  EXEC SQL END   DECLARE SECTION;
  
  EXEC SQL
  SELECT
  to_char(SYSDATE , 'dd-Mon-yyyy--hh24:mi:ss')
  INTO :c_date_time
  from dual;

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31255", SQLMSG, c_err_msg  );
    return ;
  }
  
  trim(c_date_time);
  fn_userlog (c_ServiceName," ----------------  Time : %s  ---------------- ",c_date_time);  
}


char *trim(char *str)
{
  
  int i;
  for (i=0;i<strlen(str);i++)
    if (str[i]==' ')
		 str[i]='\0';
 
 return(str);
}

/******************************** Ver 1.7 Starts ******************************/

int fn_include_exclude_schm()
{

  fn_userlog(c_ServiceName,"Updating TMP_FUT_INC_SMRY table");

  EXEC SQL
  UPDATE TMP_FUT_INC_SMRY
  SET FIS_SCHM_ELG_FLG =( 
	                    		SELECT IMSM_FUT_INC  
                       		FROM   INSD_INFO_NTST_SCHEME_DTLS,IMSM_INFO_MATCH_SCHEME_MASTER
                       		WHERE  INSD_FNO_SCHEMECODE = IMSM_SCHEMECODE
                       		AND    INSD_MATCH_ACCOUNT_NO = TMP_FUT_INC_SMRY.FIS_MATCH_ACNT
												 ),
  FIS_EXEP_ELG_FLG =		(
									  		  SELECT decode(count(1),'1','Y','N') 
                     		  FROM   ESM_EXEPTION_ELGBLTY_MSTR
                     			WHERE ESM_MTCH_ACC = TMP_FUT_INC_SMRY.FIS_MATCH_ACNT
                     			AND   ESM_FUT_INC = 'Y'
                     			AND   ESM_ACTIVE = 'Y'
										 		)
  WHERE FIS_FROM_DT = :c_g_start_date
  AND   FIS_TO_DT = :c_g_end_date;


  if (SQLCODE != 0)
  {
    fn_errlog ( c_ServiceName, "S31260", SQLMSG, c_err_msg  );
    return(-1);
  }

	EXEC SQL
	UPDATE TMP_FUT_INC_SMRY
	SET FIS_FINAL_ELG_FLG=DECODE(FIS_SCHM_ELG_FLG,'Y','Y',(decode(FIS_EXEP_ELG_FLG,'Y','Y','N'))),
 			FIS_FINAL_INC_AMT=DECODE((DECODE(FIS_SCHM_ELG_FLG,'Y','Y',FIS_EXEP_ELG_FLG)),'Y',FIS_INCNT_REFUND_AMT,0)
	WHERE FIS_FROM_DT = :c_g_start_date
	AND   FIS_TO_DT = :c_g_end_date;

	if (SQLCODE != 0)
  {
    fn_errlog ( c_ServiceName, "S31265", SQLMSG, c_err_msg  );
    return(-1);
  }

  fn_userlog (c_ServiceName," Total records updated %d ", SQL_ROW_COUNT );

	return (0);
}


/*****************************  Ver 1.7 Ends  *********************************/


/******************************************************************************/
/*                                END OF CODE                                 */
/******************************************************************************/

 
