/*   Service       : bat_cocnt_click.pc                                                          * 
*                                                                                                *
*   Purpose       : Bulk upload of Close Out contract notes to click database                    *
*   tables                                                                                       *
*                                                                                                *
*   Input Param   : For date                                                                     *
*                                                                                                *
*   Output        : Success/Failure                                                              *
*                                                                                                * 
*   Author        : ICICI Infotech                                                               *
*                                                                                                *
*   Date          : 30 Jun 2009                                                                  *
*                                                                                                *
*   Version       :  1.0      Release                                                            *
*                 :  1.1.     BSE ORS   (Navina D.)                                              *
*                 :  1.2 27-Mar-2012 Physical Statement CR-ISEC0318209(DS)                       *
*                 :  1.3 03-Jun-2015 CN Name Change CR-ISEC03-63562(Sandip T.)                   *
*                 :  1.4 28-Jun-2017 GST CHanges (sandip Tambe )                                 *
*                 :  1.5 06-Mar-2018 Handling ContractNote Dummy Email (Tanmay P)                *
*                 :  1.6 10-Jul-2019 Handling Truncate for simultaneous Batch run(Anuj Pancholi) *  
*************************************************************************************************/

#include <stdio.h>                            /* C Header File                */
#include <stdlib.h>                           /* C Header File                */
#include <sqlca.h>                            /* Oracle header file           */
#include <atmi.h>                             /* TUXEDO Header File           */
#include <fml32.h>                            /* TUXEDO Header File           */
#include <Usysflds.h>                         /* TUXEDO Field Definitions     */
#include <fml_def.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fml_rout.h>
#include <fn_ddr.h>
#include <eba.h>
#include <string.h>
#include <fn_read_debug_lvl.h>

#define MAX_REC 100

FBFR32  *ptr_fml_Sbuffer;
FBFR32  *ptr_fml_Rbuffer;

long    l_bufferlength;
long    li_len_tobuf;
long    l_rows_fetched;

long    l_count_ccm;
long    l_count_ccd;
long    l_count_cad;

int     i_max_rec_per_fetch = MAX_REC;
int     i_ch_val;
int     i_ret_val;
int     i_err[10];

char    c_ServiceName[33];
char    c_errmsg[256];
char    c_xchng_cd[4]  = {'\0'};
char    c_exchng_cd[4]  = {'\0'};	/*** Ver 1.1 **/
char    c_for_date[25] = {'\0'};
unsigned char *c_msg_cbuf;

char    c_event[256];  /** Ver 1.6 **/

typedef struct  _co_clsout_mstr
{
  char     sql_ccm_usr_mtch_accno[20+1];       
  char     sql_ccm_excng_cd[3+1];              
  char     sql_ccm_clsoutnote_nmbr[50+1];      
  char     sql_ccm_sttlmnt_dt[22+1];           
  char     sql_ccm_clsout_dt[22+1];            
  char     sql_ccm_clsout_typ;                 
  long     sql_ccm_record_id;                  
  char     sql_ccm_filename[50+1];    
  char     sql_ccm_name[100+1];         
  char     sql_ccm_add_ln1[100+1];             
  char     sql_ccm_add_ln2[100+1];             
  char     sql_ccm_add_ln3[100+1];             
  char     sql_ccm_add_ln4[100+1];             
  char     sql_ccm_pan_no[50+1];               
  char     sql_ccm_tel_no[50+1];               
  char     sql_ccm_email_id1[100+1];           
  char     sql_ccm_email_id2[100+1];           
  char     sql_ccm_msg[50+1];                  
  double   sql_ccm_amount;                     
  double   sql_ccm_total;   
	double   sql_ccm_ttl_brkg;                                                      
	double   sql_ccm_trnv_chrg;                                                     
	double   sql_ccm_trsn_chrg;                                                     
	double   sql_ccm_ttl_stamp_duty;  	                   
  long     sql_ccm_seq_no;                     
  char     sql_ccm_trunc_dt[22+1];             
  char     sql_ccm_mobile[15+1];      /* Ver 1.2 */
  char     sql_ccm_prncpl_buis_state_cd[2+1];  /** Ver 1.4*/
  char     sql_ccm_prncpl_buis_brnch_cd[10+1]; /** Ver 1.4*/
  char     sql_ccm_cust_gst_st_cd[2+1];        /** Ver 1.4*/
  char     sql_ccm_isec_gstin[20+1];           /** Ver 1.4*/
  char     sql_ccm_cust_gstin[20+1];           /** Ver 1.4*/
  double   sql_ccm_igst_prcnt;                   /** Ver 1.4 **/
  double   sql_ccm_cgst_prcnt;                   /** Ver 1.4 **/
  double   sql_ccm_sgst_prcnt;                   /** Ver 1.4 **/
  double   sql_ccm_ugst_prcnt;                   /** Ver 1.4 **/
  double   sql_ccm_brkrg_igst;                   /** Ver 1.4 **/
  double   sql_ccm_brkrg_cgst;                   /** Ver 1.4 **/
  double   sql_ccm_brkrg_sgst;                   /** Ver 1.4 **/
  double   sql_ccm_brkrg_ugst;                   /** Ver 1.4 **/
  double   sql_ccm_trn_igst;                     /** Ver 1.4 **/
  double   sql_ccm_trn_cgst;                     /** Ver 1.4 **/
  double   sql_ccm_trn_sgst;                     /** Ver 1.4 **/
  double   sql_ccm_trn_ugst;                     /** Ver 1.4 **/
  double   sql_ccm_total_igst;                   /** Ver 1.4 **/
  double   sql_ccm_total_cgst;                   /** Ver 1.4 **/
  double   sql_ccm_total_sgst;                   /** Ver 1.4 **/
  double   sql_ccm_total_ugst;                   /** Ver 1.4 **/
} co_clsout_mstr;

typedef struct _co_clsout_dtls
{
  char     sql_ccd_clsoutnote_nmbr[50+1];      
  char     sql_ccd_usr_mtch_accno[20+1];       
  char     sql_ccd_cntrct_code[150+1];         
  double   sql_ccd_cntrct_amt;                 
  char     sql_ccd_clsout_dt[22+1];            
  long     sql_ccd_record_id;                  
  int      sql_ccd_mrkt_lot;                   
  char     sql_ccd_trd_flw;                    
  int      sql_ccd_qty;                        
  double   sql_ccd_prc;                        
  double   sql_ccd_brkg;                       
  double   sql_ccd_src_tx;                     
  double   sql_ccd_cess;                       
  double   sql_ccd_stt;                        
  long     sql_ccd_seq_no;     
  long     sql_ccd_no_cntr;                 
  double   sql_ccd_sebi_tt; 
  double   sql_ccd_total_amt;  
  char     sql_ccd_trunc_dt[22+1];             
  char     sql_ccd_xchng_cd[3+1];              
  double   sql_ccd_total_igst;                   /** Ver 1.4 **/
  double   sql_ccd_total_cgst;                   /** Ver 1.4 **/
  double   sql_ccd_total_sgst;                   /** Ver 1.4 **/
  double   sql_ccd_total_ugst;                   /** Ver 1.4 **/

} co_clsout_dtls;

typedef struct _co_annx_dtls
{
  char     sql_cad_clsoutnote_nmbr[50+1];      
  char     sql_cad_mtch_accnt[20+1];           
  char     sql_cad_sttlmnt_dt[22+1];           
  long     sql_cad_record_id;                  
  char     sql_cad_cntrct_code[100+1];         
  double   sql_cad_stt;                        
  double   sql_cad_tot_stt;                   
  long     sql_cad_seq_no;                     
  char     sql_cad_trunc_dt[22+1];             
} co_annx_dtls;

int fn_populate_ccm(void);
int fn_populate_ccd(void);
int fn_populate_cad(void);

int fn_upld_tmp(void);
int fn_ins_log_hdr(void);
int i_mode;

void BAT_COCNT_CLICK (int argc, char* argv[] )
{
  int i_runindictr =0;      /** Ver 1.6 **/  
  long l_err_cd = 0;

  strcpy(c_ServiceName, "bat_cocnt_click");

  if(argc == 6)
  {
    i_mode = atol(argv[5]);
  }
  else if(argc != 5)
  {
    /*** printf("USAGE <bat_cocnt_click> <NFO> <NFO> <NA> <date> ");  *** Commented in Ver 1.1 ***/
		printf("USAGE <bat_cocnt_click> <NFO/BFO> <NFO/BFO> <NA> <date> ");		/*** Ver 1.1 ***/
    return ;
  }
  else
  {
    i_mode =1;
  }
    
  INITBATDBGLVL(argv[0]);

  strcpy(c_for_date,argv[4]); 

  strcpy ( c_tag, "bat_cocnt_click" );
  /*** strcpy (c_xchng_cd,"NA");   *** Commented in Ver 1.1 ***/
	 strcpy (c_xchng_cd,argv[2]);		/*** Ver 1.1 ***/
	 strcpy (c_exchng_cd,argv[2]);		/*** Ver 1.1 ***/

 /** Ver 1.6 starts  **/
  EXEC SQL
      SELECT COUNT(1)
      INTO  :i_runindictr
      from BPS_BTCH_PGM_STTS
      WHERE BPS_STTS = 'R'
      AND   BPS_PGM_NAME = :c_ServiceName;

  if(SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31005", SQLMSG, c_errmsg );
    sprintf(c_event,"System error-contact sys.support");
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
    return ;
  }

  fn_userlog(c_ServiceName,"i_runindictr value is %d",i_runindictr);

   if(i_runindictr > 1)
   {
     if( strcmp(c_xchng_cd,"NFO") == 0 )
     {
      sprintf(c_event,"Please check process might be already running for BFO");
     }
     else if(strcmp(c_xchng_cd,"BFO") == 0 )
     {
      sprintf(c_event,"Please check process might be already running for NFO");
     }
     fn_bat_pst_msg(c_ServiceName,c_event,c_tag); 
     return ;
   }

  /** Ver 1.6 ends **/

  fn_userlog(c_ServiceName,"bat_cocnt_click : started processing ");

  EXEC SQL TRUNCATE TABLE TMP_CCM_CLSOUT_MSTR ;

  if(SQLCODE != 0 )	
  {
    fn_errlog(c_ServiceName, "S31010", SQLMSG, c_errmsg );
    return ;
  }

  EXEC SQL TRUNCATE TABLE TMP_CCD_CLSOUT_DTLS;	

  if(SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31015", SQLMSG, c_errmsg );
    return ; 
  }

  EXEC SQL TRUNCATE TABLE TMP_CAD_CLSOUT_ANNX_DTLS;

  if(SQLCODE != 0 )	
  {
    fn_errlog(c_ServiceName, "S31020", SQLMSG, c_errmsg );
    return ;
  }

  if ( tpbegin( 0, 0 ) == -1 )
  {
    fn_errlog(c_ServiceName, "S31025", TPMSG, c_errmsg );
    return ;
  }

  i_ret_val = fn_upld_tmp();

  if (i_ret_val == -1)
  {
    fn_errlog(c_ServiceName, "S31030",SQLMSG, c_errmsg);
    tpabort(0);
    return ;
  }

  if (DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Data upload to temp table completed");
  }

  if ( tpcommit(0) == -1 )
  {
    tpabort(0);
    fn_errlog(c_ServiceName, "S31035", FMLMSG, c_errmsg );
    return;
  }

  ptr_fml_Rbuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
  if (ptr_fml_Rbuffer == NULL)
  {
    fn_errlog(c_ServiceName, "S31040", TPMSG, c_errmsg);
    fn_userlog(c_ServiceName,"Click Upload:Unable to Allocate Receive Memory ..");
    return ;
  }

  if ( tpbegin( 0, 0 ) == -1 )
  {
    fn_errlog(c_ServiceName, "S31045", TPMSG, c_errmsg );
    fn_dstry_rs ( ptr_fml_Rbuffer );
    return ;
  }

  i_ret_val = fn_populate_ccm();

  if(i_ret_val == -1)
  {
    tpabort ( 0 );
    fn_userlog(c_ServiceName,"Failed to upload CCM");
    fn_dstry_rs (ptr_fml_Sbuffer );
    fn_dstry_rs ( ptr_fml_Rbuffer );
    return ;
  }

  i_ret_val = fn_populate_ccd();

  if(i_ret_val == -1)
  {
    tpabort ( 0 );
    fn_userlog(c_ServiceName,"Failed to upload CCD");
    fn_dstry_rs (  ptr_fml_Sbuffer );
    fn_dstry_rs (  ptr_fml_Rbuffer );
    return ;
  }

  i_ret_val = fn_populate_cad();

  if(i_ret_val == -1)
  {
    tpabort ( 0 );
    fn_userlog(c_ServiceName,"Failed to upload CAD");
    fn_dstry_rs ( ptr_fml_Sbuffer );
    fn_dstry_rs ( ptr_fml_Rbuffer );
    return ;
  }

  if(l_count_ccm > 0)
  {
    i_ret_val = fn_ins_log_hdr();

    if(i_ret_val == -1)
    {
      tpabort ( 0 );
      fn_userlog(c_ServiceName,"Failed to insert LOG HDR");
      fn_dstry_rs ( ptr_fml_Sbuffer );
      fn_dstry_rs ( ptr_fml_Rbuffer );
      return ;
    }
  }

  if ( tpcommit(0) == -1 )
  {
    tpabort(0);
    fn_errlog(c_ServiceName, "S31050", FMLMSG,c_errmsg );
    fn_dstry_rs ( ptr_fml_Sbuffer );
    fn_dstry_rs ( ptr_fml_Rbuffer );
    return ;
  }

  fn_dstry_rs( ptr_fml_Rbuffer);
  return ;
  
}


int fn_upld_tmp(void)
{

  EXEC  SQL
    EXECUTE
      BEGIN
          RESET_SEQUENCE('SEQ_CLKCO_RECNO');
      END;
  END-EXEC;

  if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in sequence number resetting SEQ_CLKCO_RECNO");
      fn_errlog(c_ServiceName,"S31055",SQLMSG,c_errmsg);
      return -1;
  } 

  EXEC  SQL
    EXECUTE
      BEGIN
          RESET_SEQUENCE('SEQ_CLKCO_NMBR');
      END;
  END-EXEC;

  if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in sequence number resetting SEQ_CLKCO_NMBR");
      fn_errlog(c_ServiceName,"S31060",SQLMSG, c_errmsg);
      return -1;
  } 

  fn_userlog(c_ServiceName,"uploading in CCM..........");

  EXEC SQL
    INSERT INTO TMP_CCM_CLSOUT_MSTR
    (
      CCM_USR_MTCH_ACCNO  ,
      CCM_EXCNG_CD        ,
      CCM_CLSOUTNOTE_NMBR ,
      CCM_STTLMNT_DT      ,
      CCM_CLSOUT_DT       ,
      CCM_CLSOUT_TYP      ,
      CCM_RECORD_ID       ,
      CCM_FILENAME        ,
      CCM_NAME            ,
      CCM_ADD_LN1         ,
      CCM_ADD_LN2         ,
      CCM_ADD_LN3         ,
      CCM_ADD_LN4         ,
      CCM_PAN_NO          ,
      CCM_TEL_NO          ,
      CCM_EMAIL_ID1       ,
      CCM_EMAIL_ID2       ,
      CCM_MSG             ,
      CCM_AMOUNT          ,
      CCM_TOTAL           ,
      CCM_TTL_BRKG        ,
      CCM_TRNV_CHRG       ,
      CCM_TRSN_CHRG       ,
      CCM_TTL_STAMP_DUTY  ,
      CCM_SEQ_NO          ,
      CCM_TRUNC_DT        ,
      CCM_MOBILE,                /** Ver 1.2 */
		  ccm_prncpl_buis_state_cd,     /** Ver 1.4 **/
      ccm_prncpl_buis_brnch_cd,     /** Ver 1.4 **/
      ccm_cust_st_cd,               /** Ver 1.4 **/
      ccm_isec_gstin,               /** Ver 1.4 **/
      ccm_cust_gstin,               /** Ver 1.4 **/
      ccm_igst_prcnt,               /** Ver 1.4 **/
      ccm_cgst_prcnt,               /** Ver 1.4 **/
      ccm_sgst_prcnt,               /** Ver 1.4 **/
      ccm_ugst_prcnt,               /** Ver 1.4 **/
      ccm_brkrg_igst,               /** Ver 1.4 **/
      ccm_brkrg_cgst,               /** Ver 1.4 **/
      ccm_brkrg_sgst,               /** Ver 1.4 **/
      ccm_brkrg_ugst,               /** Ver 1.4 **/
      ccm_trn_igst,                 /** Ver 1.4 **/
      ccm_trn_cgst,                 /** Ver 1.4 **/
      ccm_trn_sgst,                 /** Ver 1.4 **/
      ccm_trn_ugst,                   /** Ver 1.4 **/
      ccm_total_igst,               /** Ver 1.4 **/
      ccm_total_cgst,               /** Ver 1.4 **/
      ccm_total_sgst,               /** Ver 1.4 **/
      ccm_total_ugst              /** Ver 1.4 **/
    )
    (
    SELECT
      CCM_USR_MTCH_ACCNO  ,
      CCM_EXCNG_CD        ,
      CCM_CLSOUTNOTE_NMBR ,
      CCM_STTLMNT_DT      ,       
      CCM_CLSOUT_DT       ,
      CCD_CLSOUT_TYP      ,
      SEQ_CLKCO_RECNO.NEXTVAL,
      /**'FNOCLS_' || TO_CHAR(CCM_STTLMNT_DT,'yyyymmdd') *******************
       ** || '_'  || REPLACE(SUBSTR(CCM_CLSOUTNOTE_NMBR,1,20),'/','_') ||***
       **SUBSTR(CCM_CLSOUTNOTE_NMBR,18) || '_'  || SEQ_CLKCO_RECNO.CURRVAL,*** commented in 1.2 */
			IAD_PIN || '_' || substr(CCM_USR_MTCH_ACCNO,1,3) || lpad(IAI_SERIAL_NO,10,'0') || '_' ||
                      to_char(CCM_STTLMNT_DT,'YYYYMMDD') || '_' || SEQ_CLKCO_RECNO.CURRVAL || '_' || decode(:c_xchng_cd,'BFO','BFOCLS','FNOCLS')  ,	/* Ver 1.2 */
      F_NAME, 
      ADD_LN1,
      ADD_LN2,
      ADD_LN3,
      ADD_LN4,
      CCM_PAN_NO,
      CCM_TEL_NO,
/**   USR_EMAIL_ADDRSS,
      USR_EMAIL_ADDRSS2,  ***   Commented in Ver 1.5 ***/
      IPD_EMAIL,          /** Ver 1.5 **/
      null,								/** Ver 1.5 **/
      DECODE(SIGN(CCM_TOTAL_AMOUNT), -1 ,'Receivable from you','Payable to you'),
      CCM_TOTAL_AMOUNT,
      CCD_AMOUNT,
      CCD_TTL_BRKG,
      CCD_TRNV_CHRG,
      CCM_TRSN_CHRG,
      CCM_TTL_STAMP_DUTY,
      SEQ_CLKCO_NMBR.NEXTVAL,
      CCM_STTLMNT_DT,
      IAD_MOBILE,               /** Ver 1.2 */
      ccm_prncpl_buis_state_cd,  /** Ver 1.4 **/
      ccm_prncpl_buis_brnch_cd,  /** ver 1.4 **/
      ccm_cust_st_cd,     /** Ver 1.4 **/
      ccm_isec_gstin,     /** Ver 1.4 **/
      ccm_cust_gstin,     /** Ver 1.4 **/
      ccm_igst_prcnt,     /** Ver 1.4 **/
      ccm_cgst_prcnt,     /** Ver 1.4 **/
      ccm_sgst_prcnt,     /** Ver 1.4 **/
      ccm_ugst_prcnt,     /** Ver 1.4 **/
      ccm_brkrg_igst,     /** Ver 1.4 **/
      ccm_brkrg_cgst,     /** Ver 1.4 **/
      ccm_brkrg_sgst,     /** Ver 1.4 **/
      ccm_brkrg_ugst,     /** Ver 1.4 **/
      ccm_trn_igst,       /** Ver 1.4 **/
      ccm_trn_cgst,       /** Ver 1.4 **/
      ccm_trn_sgst,       /** Ver 1.4 **/
      ccm_trn_ugst,       /** Ver 1.4 **/
      ccm_total_igst,     /** Ver 1.4 **/
      ccm_total_cgst,     /** Ver 1.4 **/
      ccm_total_sgst,     /** Ver 1.4 **/
      ccm_total_ugst      /** Ver 1.4 **/
    FROM 
      (
        SELECT 
          CCM_USR_MTCH_ACCNO  ,
          CCM_EXCNG_CD        ,
          CCM_STTLMNT_DT      ,       
          CCM_CLSOUTNOTE_NMBR ,
          CCD_CLSOUT_TYP      ,
          nvl(IPD_FIRST_NAME,' ')||' '||nvl(IPD_MIDDLE_NAME,' ')||' '||nvl(IPD_LAST_NAME,' ') F_NAME, /** 1.3 middle name added **/
          IAD_ADDRESS_1 || ' ' || IAD_ADDRESS_2 ADD_LN1,
          IAD_ADDRESS_3 || ' ' || IAD_ADDRESS_4 ADD_LN2,
          IAD_CITY_CD   || ' ' || IAD_PIN  ADD_LN3,
          IAD_STATE_CD  || ' ' || IAD_COUNTRY_CD ADD_LN4,
          CCM_PAN_NO,
          CCM_TEL_NO,
 /**      USR_EMAIL_ADDRSS,
          USR_EMAIL_ADDRSS2,  ** Commented in Ver 1.5 **/
          IPD_EMAIL,          /** Ver 1.5 **/
          null,								/** Ver 1.5 **/
          CCM_TOTAL_AMOUNT,
          SUM(CCD_AMOUNT) AS CCD_AMOUNT,
          SUM(CCD_BRKG) AS CCD_TTL_BRKG,
          SUM(CCD_SEBI_TT) AS CCD_TRNV_CHRG,
          SUM(CCD_TRAN_CHRG) AS CCM_TRSN_CHRG,
          SUM(CCD_STAMP_DUTY) AS CCM_TTL_STAMP_DUTY,          
          CCM_CLSOUT_DT,
					IAD_PIN,							  /** Ver 1.2 */
					IAI_SERIAL_NO,					/** Ver 1.2 */
					IAD_MOBILE,	     				/** Ver 1.2 */
        	ccm_prncpl_buis_state_cd,                 /** ver 1.4 **/
        	ccm_prncpl_buis_brnch_cd,                 /** ver 1.4 **/
        	ccm_cust_st_cd,                           /** ver 1.4 **/
        	ccm_isec_gstin,                           /** ver 1.4 **/
        	ccm_cust_gstin,                           /** ver 1.4 **/
        	ccm_igst_prcnt,                           /** ver 1.4 **/
        	ccm_cgst_prcnt,                           /** ver 1.4 **/
        	ccm_sgst_prcnt,                           /** ver 1.4 **/
        	ccm_ugst_prcnt,                           /** ver 1.4 **/
        	ROUND(sum(ccd_brkrg_igst),2) ccm_brkrg_igst,                            /** ver 1.4 **/
        	round(sum(ccd_brkrg_cgst),2) ccm_brkrg_cgst,                            /** ver 1.4 **/
        	round(sum(ccd_brkrg_sgst),2) ccm_brkrg_sgst,                            /** ver 1.4 **/
        	round(sum(ccd_brkrg_ugst),2) ccm_brkrg_ugst,                            /** ver 1.4 **/
        	nvl(round(sum(ccd_total_igst),2)-round(sum(ccd_brkrg_igst),2),0.0000) ccm_trn_igst,       /** ver 1.4 **/
        	nvl(round(sum(ccd_total_cgst),2)-round(sum(ccd_brkrg_cgst),2),0.0000) ccm_trn_cgst,       /** ver 1.4 **/
        	nvl(round(sum(ccd_total_sgst),2)-round(sum(ccd_brkrg_sgst),2),0.0000) ccm_trn_sgst,       /** ver 1.4 **/
        	nvl(round(sum(ccd_total_ugst),2)-round(sum(ccd_brkrg_ugst),2),0.0000) ccm_trn_ugst,       /** ver 1.4 **/
        	round(sum(ccd_total_igst),2)    ccm_total_igst,                         /** ver 1.4 **/
        	round(sum(ccd_total_cgst),2)    ccm_total_cgst,                         /** ver 1.4 **/
        	round(sum(ccd_total_sgst),2)    ccm_total_sgst,                         /** ver 1.4 **/
        	round(sum(ccd_total_ugst),2)    ccm_total_ugst                          /** ver 1.4 **/
        FROM
          CCM_CNTRCT_CLSOUT_MSTR,
          CCD_CNTRCT_CLSOUT_DTLS,        
   /**    USR_USER_MASTER,         **   Ver 1.5 **/
          IPD_INFO_PERSONAL_DTLS,
   /**    UAC_USR_ACCNTS,          **   Ver 1.5 **/
          IAD_INFO_ADDRESS_DTLS,
          IAI_INFO_ACCOUNT_INFO
        WHERE  CCM_EXCNG_CD = :c_xchng_cd  /*** Ver 1.1 ***/
				AND CCM_CLSOUTNOTE_NMBR =       CCD_CLSOUTNOTE_NMBR
  /**   AND CCM_USR_MTCH_ACCNO    =       UAC_CLM_MTCH_ACCNT
        AND UAC_USR_ID            =       USR_USR_ID          **  Commented in Ver 1.5 ***/
        AND TRUNC(CCM_STTLMNT_DT)  =       :c_for_date
        AND IAI_MATCH_ACCOUNT_NO  =       CCM_USR_MTCH_ACCNO
        AND IAI_SERIAL_NO         =       IAD_SERIAL_NO
        AND IAI_SERIAL_NO         =       IPD_SERIAL_NO
        AND IPD_TYPE              =       'APPLICANT'
        AND IAD_ADDRESS_TYPE      =       'APPLICANT_CORR'
        GROUP BY  
          CCM_USR_MTCH_ACCNO,
          CCM_EXCNG_CD,
          CCM_CLSOUTNOTE_NMBR,
          CCM_STTLMNT_DT,
          CCM_CLSOUT_DT,
          CCD_CLSOUT_TYP,         
          IPD_TITLE,
          /*nvl(IPD_FIRST_NAME,' '),
          nvl(IPD_LAST_NAME,' '),		/** ver 1.3 comment **/
					nvl(IPD_FIRST_NAME,' ') ||' '||nvl(IPD_MIDDLE_NAME,' ') ||' '||nvl(IPD_LAST_NAME,' '),   /** Ver 1.3 **/
          IAD_ADDRESS_1,
          IAD_ADDRESS_2,
          IAD_ADDRESS_3,
          IAD_ADDRESS_4,
          IAD_CITY_CD,
          IAD_PIN,
          IAD_STATE_CD,
          IAD_COUNTRY_CD,
          CCM_PAN_NO,
          CCM_TEL_NO,
   /**    USR_EMAIL_ADDRSS,
          USR_EMAIL_ADDRSS2,    Commented in  ** Ver 1.5 **/
          IPD_EMAIL,              /** Ver 1.5 **/
          CCM_TOTAL_AMOUNT,
					IAI_SERIAL_NO,					/** Ver 1.2 */
          IAD_MOBILE,              /** Ver 1.2 */
        	ccm_prncpl_buis_state_cd,     /** Ver 1.4 **/
        	ccm_prncpl_buis_brnch_cd,     /** Ver 1.4 **/
        	ccm_isec_gstin,               /** Ver 1.4 **/
        	ccm_cust_gstin,               /** Ver 1.4 **/
        	ccm_cust_st_cd,               /** Ver 1.4 **/
        	ccm_igst_prcnt,               /** Ver 1.4 **/
        	ccm_cgst_prcnt,               /** Ver 1.4 **/
        	ccm_sgst_prcnt,               /** Ver 1.4 **/
        	ccm_ugst_prcnt                /** Ver 1.4 **/

      )
    );

  if ( SQLCODE != 0 )
  {
      fn_userlog(c_ServiceName,"Error in CCM Upload");
      fn_errlog(c_ServiceName,"S31065",SQLMSG, c_errmsg);
      return -1;
  }

  l_count_ccm = sqlca.sqlerrd[2];
  
  fn_userlog(c_ServiceName,"l_count_ccm = [%d]",l_count_ccm);

  fn_userlog(c_ServiceName,"uploading in CCD..........");

  EXEC  SQL
    EXECUTE
      BEGIN
          RESET_SEQUENCE('SEQ_CLKCO_NMBR');
      END;
  END-EXEC;

  if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in sequence number resetting");
      fn_errlog(c_ServiceName,"S31070",SQLMSG, c_errmsg);
      return -1;
  }

  EXEC SQL
    INSERT INTO TMP_CCD_CLSOUT_DTLS
    (
      CCD_CLSOUTNOTE_NMBR,
      CCD_USR_MTCH_ACCNO ,
      CCD_CNTRCT_CODE    ,
      CCD_CNTRCT_AMT     ,
      CCD_CLSOUT_DT      ,
      CCD_RECORD_ID      ,
      CCD_MRKT_LOT       ,
      CCD_TRD_FLW        ,
      CCD_QTY            ,
      CCD_PRC            ,
      CCD_BRKG           ,
      CCD_SRC_TX         ,
      CCD_CESS           ,
      CCD_STT            ,
      CCD_SEQ_NO         ,
      CCD_NO_CNTR        ,
      CCD_SEBI_TT        ,
      CCD_TOTAL_AMT      ,
      CCD_TRUNC_DT       ,
      CCD_XCHNG_CD  		 ,
      CCD_TOTAL_IGST		 ,       /** Ver 1.4 **/
      CCD_TOTAL_CGST		 ,       /** Ver 1.4 **/
      CCD_TOTAL_SGST		 ,       /** Ver 1.4 **/
      CCD_TOTAL_UGST        		 /** Ver 1.4 **/
    )
    (
      SELECT
      CCD_CLSOUTNOTE_NMBR,
      CCD_USR_MTCH_ACCNO,
      CCD_CNTRCT_CODE ||'-'||CCM_STTLMNT_DT ,
      CCD_CNTRCT_AMT,
      CCM_STTLMNT_DT,
      -1,
      CCD_MRKT_LOT,
      CCD_ORDR_FLW,
      CCD_QTY*CCD_MRKT_LOT,
      CCD_PRC,
      CCD_BRKG,
      CCD_SRC_TX,
      CCD_CESS,
      CCD_STT,
      SEQ_CLKCO_NMBR.NEXTVAL ,
      CCD_QTY,
      CCD_SEBI_TT,
      DECODE ( CCD_ORDR_FLW ,
								'B',(CCD_MRKT_LOT*CCD_QTY*CCD_PRC)+CCD_BRKG+CCD_SRC_TX,
								'S',(CCD_MRKT_LOT*CCD_QTY*CCD_PRC)-CCD_BRKG-CCD_SRC_TX
						 ),
			CCM_STTLMNT_DT,				
      /*SYSDATE AS TODAY_DATE,*/
      CCM_EXCNG_CD,
      CCD_TOTAL_IGST,       /** Ver 1.4 **/
      CCD_TOTAL_CGST,       /** Ver 1.4 **/
      CCD_TOTAL_SGST,       /** Ver 1.4 **/
      CCD_TOTAL_UGST        /** Ver 1.4 **/
      FROM  CCM_CNTRCT_CLSOUT_MSTR, 
            CCD_CNTRCT_CLSOUT_DTLS
      WHERE CCM_EXCNG_CD = :c_xchng_cd  /*** Ver 1.1 ***/
						AND CCM_CLSOUTNOTE_NMBR        = CCD_CLSOUTNOTE_NMBR
            AND TRUNC(CCM_STTLMNT_DT)  = :c_for_date
    );

  if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in CCD Upload");
      fn_errlog(c_ServiceName,"S31075",SQLMSG, c_errmsg);
      return -1;
  }

  l_count_ccd = sqlca.sqlerrd[2];

  fn_userlog(c_ServiceName,"l_count_ccd = [%d]",l_count_ccd);

  fn_userlog(c_ServiceName,"uploading in CAD..........");
  

  EXEC  SQL
    EXECUTE
      BEGIN
          RESET_SEQUENCE('SEQ_CLKCO_NMBR');
      END;
  END-EXEC;

  if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in sequence number resetting");
      fn_errlog(c_ServiceName,"S31080",SQLMSG, c_errmsg);
      return -1;
  }

  EXEC SQL
    INSERT INTO TMP_CAD_CLSOUT_ANNX_DTLS
    (
      CAD_CLSOUTNOTE_NMBR ,
      CAD_MTCH_ACCNT      ,
      CAD_STTLMNT_DT      ,
      CAD_RECORD_ID       ,
      CAD_CNTRCT_CODE     ,
      CAD_STT             ,
      CAD_TOT_STT         ,
      CAD_SEQ_NO          ,
      CAD_TRUNC_DT        
    )
    (
      SELECT
        ccd_clsoutnote_nmbr,
        ccd_usr_mtch_accno,
        ccm_sttlmnt_dt,
        -1,
        ccd_cntrct_code,
        ccd_tot_stt,
        ccd_tot_stt,
        seq_clkco_nmbr.nextval,
        ccm_sttlmnt_dt
      FROM
      (
      SELECT
        ccd_clsoutnote_nmbr,
        ccd_usr_mtch_accno,
        ccm_sttlmnt_dt,
        -1,
        ccd_cntrct_code,
        sum (ccd_stt) as ccd_tot_stt 
      FROM 
        ccm_cntrct_clsout_mstr,
        ccd_cntrct_clsout_dtls
      WHERE ccm_excng_cd = :c_xchng_cd  /*** Ver 1.1 ***/
      AND  ccd_clsoutnote_nmbr     = ccm_clsoutnote_nmbr
      AND trunc(CCM_STTLMNT_DT)    = :c_for_date
      GROUP BY ccd_clsoutnote_nmbr, ccd_usr_mtch_accno, 
      ccm_sttlmnt_dt, ccd_cntrct_code, ccm_clsout_dt
      )    
    );

  if (SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in CAD Upload");
      fn_errlog(c_ServiceName,"S31085",SQLMSG,c_errmsg);
      return -1;
  }

  l_count_cad = sqlca.sqlerrd[2];

  fn_userlog(c_ServiceName,"l_count_cad = [%d]",l_count_cad);
  
  if (l_count_ccd == 0)
  {
      fn_userlog(c_ServiceName,"No records to update. Exiting ... ");
      return (0);
	}
  
	fn_userlog(c_ServiceName,"updating record id in CCD");
  
  /*Need to add code here that will update the record id.*/

  fn_userlog(c_ServiceName,"## CCD %s",c_for_date);

  EXEC SQL
    UPDATE tmp_ccd_clsout_dtls A
    SET CCD_RECORD_ID = (SELECT DISTINCT ccm_record_id from tmp_ccm_clsout_mstr b     
                          WHERE b.ccm_clsoutnote_nmbr = a.ccd_clsoutnote_nmbr
                          AND   b.CCM_TRUNC_DT    =    :c_for_date             
                        )
    WHERE CCD_TRUNC_DT = :c_for_date ;
  
  if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in CCD record id update");
      fn_errlog(c_ServiceName,"S31090",SQLMSG, c_errmsg);
      return -1;
  }
 
  fn_userlog(c_ServiceName,"updating record id in CAD");
  
  /*Need to add code here that will update the record id.*/
    
   EXEC SQL
    UPDATE tmp_cad_clsout_annx_dtls A
    SET CAD_RECORD_ID = (SELECT ccm_record_id from tmp_ccm_clsout_mstr b      
                          WHERE b.ccm_clsoutnote_nmbr = a.cad_clsoutnote_nmbr 
                          AND   b.CCM_TRUNC_DT    = :c_for_date              
                        )
    WHERE CAD_TRUNC_DT = :c_for_date ;

  if (SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in CCD record id update");
      fn_errlog(c_ServiceName,"S31095",SQLMSG,c_errmsg);
      return -1;
  }  

  fn_userlog(c_ServiceName,"updating total amount in CCM");
  
	EXEC SQL
    UPDATE TMP_CCM_CLSOUT_MSTR  
    SET CCM_TOTAL = (SELECT SUM(CCD_TOTAL_AMT) from tmp_ccd_clsout_dtls      
                          WHERE ccd_clsoutnote_nmbr = ccm_clsoutnote_nmbr 
                          AND   ccd_trunc_dt    = :c_for_date              
                        )
    WHERE CCM_TRUNC_DT = :c_for_date ;

  if (SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in CCM Total amount update");
      fn_errlog(c_ServiceName,"S31100",SQLMSG,c_errmsg);
      return -1;
  }  


  fn_userlog(c_ServiceName,"## Function TEMP UPLD Completed");
  
  return 0;
}


int fn_populate_ccm()
{

int  i_counter;
long l_count =1;
char c_ins_flg;
co_clsout_mstr ccm_clsout_mstr_arr[MAX_REC];

  l_bufferlength = Fneeded32(1, sizeof(ccm_clsout_mstr_arr));
  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);
  if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Error in Allocating buffer CCM");
    fn_errlog(c_ServiceName, "S31105", TPMSG, c_errmsg);
    return(-1);
  }

  c_ins_flg = 'A';  /* Insert into FCM **/

  for ( l_count=0;l_count < l_count_ccm;l_count += i_max_rec_per_fetch )
  {
    MEMSET(ccm_clsout_mstr_arr);

    EXEC ORACLE OPTION (char_map=string);

    EXEC SQL
      SELECT
        ccm_usr_mtch_accno ,
        ccm_excng_cd       ,
        ccm_clsoutnote_nmbr,
        ccm_sttlmnt_dt     ,
        ccm_clsout_dt      ,
        ccm_clsout_typ     ,
        ccm_record_id      ,
        ccm_filename       ,
        ccm_name           ,
        ccm_add_ln1        ,
        ccm_add_ln2        ,
        ccm_add_ln3        ,
        ccm_add_ln4        ,
        ccm_pan_no         ,
        ccm_tel_no         ,
        ccm_email_id1      ,
        ccm_email_id2      ,
        ccm_msg            ,
        ccm_amount         ,
        ccm_total          ,
        ccm_ttl_brkg       ,        
        ccm_trnv_chrg      ,       
        ccm_trsn_chrg      ,       
        ccm_ttl_stamp_duty ,
        ccm_seq_no         ,
        ccm_trunc_dt       ,
				ccm_mobile,               /** Ver 1.2 */
      	ccm_prncpl_buis_state_cd,     /** Ver 1.4 **/
      	ccm_prncpl_buis_brnch_cd,     /** Ver 1.4 **/
      	ccm_cust_st_cd,               /** Ver 1.4 **/
      	ccm_isec_gstin,               /** Ver 1.4 **/
      	ccm_cust_gstin,               /** Ver 1.4 **/
      	ccm_igst_prcnt,               /** Ver 1.4 **/
      	ccm_cgst_prcnt,               /** Ver 1.4 **/
      	ccm_sgst_prcnt,               /** Ver 1.4 **/
      	ccm_ugst_prcnt,               /** Ver 1.4 **/
      	ccm_brkrg_igst,               /** Ver 1.4 **/
      	ccm_brkrg_cgst,               /** Ver 1.4 **/
      	ccm_brkrg_sgst,               /** Ver 1.4 **/
      	ccm_brkrg_ugst,               /** Ver 1.4 **/
      	ccm_trn_igst,                 /** Ver 1.4 **/
      	ccm_trn_cgst,                 /** Ver 1.4 **/
      	ccm_trn_sgst,                 /** Ver 1.4 **/
      	ccm_trn_ugst,                 /** Ver 1.4 **/
      	ccm_total_igst,               /** Ver 1.4 **/
      	ccm_total_cgst,               /** Ver 1.4 **/
      	ccm_total_sgst,               /** Ver 1.4 **/
      	ccm_total_ugst                /** Ver 1.4 **/
      INTO
        :ccm_clsout_mstr_arr  
      FROM
        TMP_CCM_CLSOUT_MSTR
      WHERE CCM_SEQ_NO >= :l_count + 1
      AND   CCM_SEQ_NO <= :l_count + :i_max_rec_per_fetch;

    if( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
    {
      if( SQLCODE == 1403)
      {
        if (sqlca.sqlerrd[2] == 0)
          break;
      }
      else
      {
        fn_userlog(c_ServiceName,"Data select for CCM failed");
        fn_errlog(c_ServiceName, "S31110", SQLMSG, c_errmsg);
        return (-1);
      }
    }

    l_rows_fetched = (l_count + i_max_rec_per_fetch > l_count_ccm)? l_count_ccm%i_max_rec_per_fetch : i_max_rec_per_fetch;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"bat_cocnt_click : Rows fetched : |%d| |%d|", l_rows_fetched, SQLCODE );
    } 

    Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
    Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

    MEMSET(c_msg_cbuf);

    c_msg_cbuf = (unsigned char *)ccm_clsout_mstr_arr;

    l_bufferlength =  sizeof(ccm_clsout_mstr_arr);
  
    i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0        );
    i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
    i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&l_rows_fetched,0);
    i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0      );

    for (i_counter = 0;i_counter < 4;i_counter++)
    {
      if(i_err[i_counter] == -1)
      {
        fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
        fn_errlog(c_ServiceName, "S31115", FMLMSG, c_errmsg);
        return (-1);
      }
    }

    i_ch_val = tpcall("SFO_COCLK_UPLD", (char *)ptr_fml_Sbuffer, 0,
                       (char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);
    if (i_ch_val == -1)
    {
      fn_userlog(c_ServiceName,"Error in calling service for CCM");
      if(TPCODE != TPESVCFAIL)
      {
        fn_errlog(c_ServiceName, "S31120", TPMSG, c_errmsg);
      }
      else
      {
          Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
          fn_errlog(c_ServiceName, "S31125", c_errmsg, c_errmsg);
      }
      return(-1);
    }
  }

  fn_dstry_rs( ptr_fml_Sbuffer);
  return (0);
}


int fn_populate_ccd()
{

int  i_counter;
long l_count =1;
char c_ins_flg;
co_clsout_dtls ccd_co_clsout_dtls_arr[MAX_REC];

  l_bufferlength = Fneeded32(1, sizeof(ccd_co_clsout_dtls_arr));
  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);
  if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Error in Allocating buffer CCD");
    fn_errlog(c_ServiceName, "S31130", TPMSG, c_errmsg);
    return(-1);
  }

  c_ins_flg = 'B';  /* Insert into CCD **/

  for ( l_count=0;l_count < l_count_ccd;l_count += i_max_rec_per_fetch )
  {
    MEMSET(ccd_co_clsout_dtls_arr);

    EXEC ORACLE OPTION (char_map=string);

    EXEC SQL
      SELECT
       ccd_clsoutnote_nmbr,
       ccd_usr_mtch_accno ,
       ccd_cntrct_code    ,
       ccd_cntrct_amt     ,
       ccd_clsout_dt      ,
       ccd_record_id      ,
       ccd_mrkt_lot       ,
       ccd_trd_flw        ,
       ccd_qty            ,
       ccd_prc            ,
       ccd_brkg           ,
       ccd_src_tx         ,
       ccd_cess           ,
       ccd_stt            ,
       ccd_seq_no         ,
       ccd_no_cntr        , 
       ccd_sebi_tt        ,
			 ccd_total_amt			,       
       ccd_trunc_dt       ,
       ccd_xchng_cd       ,
			 ccd_total_igst     ,				/** Ver 1.4 **/
			 ccd_total_cgst     ,				/** Ver 1.4 **/
			 ccd_total_sgst     ,				/** Ver 1.4 **/
			 ccd_total_ugst    					/** Ver 1.4 **/ 
      INTO
        :ccd_co_clsout_dtls_arr
      FROM
            TMP_CCD_CLSOUT_DTLS
      WHERE CCD_SEQ_NO >= :l_count + 1
      AND   CCD_SEQ_NO <= :l_count + :i_max_rec_per_fetch;

    if ( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
    {
      if( SQLCODE == 1403)
      {
        if (sqlca.sqlerrd[2] == 0)
          break;
      }
      else
      {
        fn_userlog(c_ServiceName,"Data select for CCD failed");
        fn_errlog(c_ServiceName, "S31135", SQLMSG, c_errmsg);
        return (-1);
      }
    }

    l_rows_fetched = (l_count + i_max_rec_per_fetch > l_count_ccd)? l_count_ccd%i_max_rec_per_fetch : i_max_rec_per_fetch;

    if (DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"bat_cocnt_click : Rows fetched : |%d| |%d|", l_rows_fetched, SQLCODE );
    }

    Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
    Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

    MEMSET(c_msg_cbuf);

    c_msg_cbuf = (unsigned char *)ccd_co_clsout_dtls_arr;

    l_bufferlength =  sizeof(ccd_co_clsout_dtls_arr);

    i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
    i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
    i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&l_rows_fetched,0);
    i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);

    for (i_counter = 0;i_counter < 4;i_counter++)
    {
      if(i_err[i_counter] == -1)
      {
        fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
        fn_errlog(c_ServiceName, "S31140", FMLMSG, c_errmsg);
        return(-1);
      }
    }

    i_ch_val = tpcall("SFO_COCLK_UPLD", (char *)ptr_fml_Sbuffer, 0,
                       (char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);
    if (i_ch_val == -1)
    {
      fn_userlog(c_ServiceName,"Error in calling service for CCD");
      if(TPCODE != TPESVCFAIL)
      {
        fn_errlog(c_ServiceName, "S31145", TPMSG, c_errmsg);
      }
      else
      {
          Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
          fn_errlog(c_ServiceName, "S31150", c_errmsg, c_errmsg);
      }
      return(-1);
    }
  }

  fn_dstry_rs( ptr_fml_Sbuffer);
  fn_userlog(c_ServiceName,"bat_cocnt_click : Execution Completed ");
  return (0);

}

int fn_populate_cad()
{

int  i_counter;
long l_count =1;
char c_ins_flg;
co_annx_dtls co_clsout_annx_dtls_arr[MAX_REC];

  l_bufferlength = Fneeded32(1, sizeof(co_clsout_annx_dtls_arr));
  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);
  if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Error in Allocating buffer CAD");
    fn_errlog(c_ServiceName, "S31155", TPMSG, c_errmsg);
    return(-1);
  }

  c_ins_flg = 'C';  /* Insert into CAD **/

  for ( l_count=0;l_count < l_count_cad;l_count += i_max_rec_per_fetch )
  {
    MEMSET(co_clsout_annx_dtls_arr);

    EXEC ORACLE OPTION (char_map=string);

    EXEC SQL
      SELECT
        cad_clsoutnote_nmbr,
        cad_mtch_accnt     ,
        cad_sttlmnt_dt     ,
        cad_record_id      ,
        cad_cntrct_code   ,
        cad_stt            ,
        cad_tot_stt        ,
        cad_seq_no         ,
        cad_trunc_dt       
      INTO
        :co_clsout_annx_dtls_arr
      FROM
        TMP_CAD_CLSOUT_ANNX_DTLS
      WHERE CAD_SEQ_NO >= :l_count + 1
      AND   CAD_SEQ_NO <= :l_count + :i_max_rec_per_fetch;
        
    if ( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
    {
      if( SQLCODE == 1403)
      {
        /** No data found **/ 
        if (sqlca.sqlerrd[2] == 0)
          break;
      }
      else
      {
        fn_userlog( c_ServiceName,"Data select for CAD failed");
        fn_errlog ( c_ServiceName, "S31160", SQLMSG, c_errmsg );
        return (-1);
      }
    }

    l_rows_fetched = (l_count + i_max_rec_per_fetch > l_count_cad)? l_count_cad%i_max_rec_per_fetch : i_max_rec_per_fetch;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"bat_cocnt_click : Rows fetched : |%d| |%d|", l_rows_fetched, SQLCODE );
    }

    Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
    Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

    MEMSET(c_msg_cbuf);

    c_msg_cbuf = (unsigned char *)co_clsout_annx_dtls_arr;

    l_bufferlength =  sizeof(co_clsout_annx_dtls_arr);

    i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
    i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
    i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&l_rows_fetched,0);
    i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);

    for(i_counter = 0;i_counter < 4;i_counter++)
    {
      if(i_err[i_counter] == -1)
      {
        fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
        fn_errlog(c_ServiceName, "S31165", FMLMSG, c_errmsg);
        return(-1);
      }
    }

    i_ch_val = tpcall("SFO_COCLK_UPLD", (char *)ptr_fml_Sbuffer, 0,
                       (char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);
    if (i_ch_val == -1)
    {
      fn_userlog(c_ServiceName,"Error in calling service for CAD");
      if(TPCODE != TPESVCFAIL)
      {
        fn_errlog(c_ServiceName, "S31170", TPMSG, c_errmsg);
      }
      else
      {
          Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
          fn_errlog(c_ServiceName, "S31175", c_errmsg, c_errmsg);
      }
      return(-1);
    }

  }

  fn_dstry_rs( ptr_fml_Sbuffer);
  return 0;

}

int fn_ins_log_hdr()
{
  int  i_counter;
  char c_ins_flg;
 /* char c_xchng_cd[4] = { "COC" };		**** Ver 1.1 Comment **/
  char c_xchng_cd[7] = { '\0' };			/*** Ver 1.1 ***/

	if(strcmp(c_exchng_cd,"BFO")== 0)
	{
		strcpy(c_xchng_cd,"BFOCLS");
		fn_userlog(c_ServiceName,"DOC TYPE for LOG HEADER is :%s:",c_xchng_cd);
	}
	else
	{
		strcpy(c_xchng_cd,"FNOCLS");
		fn_userlog(c_ServiceName,"DOC TYPE for LOG HEADER is :%s:",c_xchng_cd);
	}
  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Unable to allocate send buffer ");
    fn_errlog(c_ServiceName, "S31180", TPMSG, c_errmsg);
    return(-1);
  }

  c_ins_flg = 'E';

  i_err[0] = Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);
  i_err[1] = Fadd32(ptr_fml_Sbuffer,FML_XCHNG_CD,(char *)c_xchng_cd,0);
  i_err[2] = Fadd32(ptr_fml_Sbuffer,FML_TRD_DT,(char *)c_for_date,0);
  i_err[3] = Fadd32(ptr_fml_Sbuffer,FML_TRN_NO,(char *)&i_mode,0);

  for(i_counter =0 ;i_counter<=3;i_counter++)
  {
    if(i_err[i_counter] == -1)
    {
      fn_errlog(c_ServiceName, "S31185", FMLMSG, c_errmsg);
      fn_userlog(c_ServiceName,"Value of i =[%d]",i_counter);
      return (-1);
    }
  }

  i_ch_val = tpcall("SFO_COCLK_UPLD", (char *)ptr_fml_Sbuffer, 0,
                       (char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);
  if (i_ch_val == -1)
  {
    fn_userlog(c_ServiceName,"Error in calling service for INS_LOG_HDR");
    if (TPCODE != TPESVCFAIL)
    {
      fn_errlog(c_ServiceName, "S31190", TPMSG, c_errmsg);
    }
    else
    {
      Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
      fn_errlog(c_ServiceName, "S31195", c_errmsg, c_errmsg);
    }
    return(-1);
  }
  
  fn_userlog(c_ServiceName,"============== BATCH PROCESS COMPLETE===============");
  
  fn_dstry_rs( ptr_fml_Sbuffer);
  return (0);

}

int fn_bat_init ( int argc, char *argv[] )
{
 fn_var = BAT_COCNT_CLICK;
 return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}

int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
  return 0;
}
