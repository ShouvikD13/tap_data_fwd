/********************************************************************************************************/
/*  Program             : BAT_RPT_SIMTM.PC                                                              */
/*                                                                                                      */
/*  Log                 : 1.0     23-Aug-2011      																											*/
/*  Log                 : 1.1     12-Jul-2012      																											*/
/*  Log                 : 1.2     26-Feb-2015      																											*/
/********************************************************************************************************/
/*  1.0   -   New Release                                                                               */
/*  1.1   -   Bug Fix																																										*/
/*  1.2   -   Record Processing count posting                                                           */ 
/********************************************************************************************************/

#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <string.h>
#include <stdlib.h>
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>

void BAT_RPT_SIMTM ( int argc, char *argv[] )
{
	int i_ch_val;
  int i_trnsctn;
  int i_cnt=0;

  long int li_cnt = 0;
  long int li_tot_rcrds = 0;
	long int l_report_no  = 0;
	char c_req_type = 'R';
  char c_rqst_typ;
  char c_indstk;
  char c_exg_extnd_stts;
  char c_msg[256];
  char c_ServiceName [ 33 ];
  char c_svc_name [ 33 ];
  char c_err_msg [ 256 ];
  char c_und_str [ 400 ];
  char c_match_str [ 400 ];
  char c_clm_mtch_acnt [ 11 ];
  char c_undrlyng [ 7 ];
  char c_imtm_remarks [ 256 ];
  char c_rout_str [ 4 ];
  char c_run_mode[4];
  char  c_exg_stts ;
  char c_xchng_cd [ 4 ];
	char c_cntrct_tag;

  FBFR32 *ptr_fml_buf;
  
	strcpy ( c_ServiceName, argv[0] );

  INITBATDBGLVL(argv[0]);
	fn_userlog ( c_ServiceName, " The %s Batch started ",argv[0] );
  sprintf ( c_msg, "Batch process %s started", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  strcpy ( c_msg, "Creating data. Please wait ... " );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
	
	if ( argc < 6 )
  {
    fn_userlog ( c_ServiceName,"Args :- NFO NFO NA PNL/MIPNL ReportNumber Underlying(Optional)");
		fn_bat_pst_msg ( c_ServiceName, "Invalid Number of Arguments", c_tag );
    exit(0);
  }
  
	strcpy( c_xchng_cd, argv[2] );
	strcpy( c_run_mode, argv[4] );

  fn_userlog ( c_ServiceName,"The Run Mode :%s:",c_run_mode );
  fn_userlog ( c_ServiceName,"Exchange Code :%s:",c_xchng_cd);

 	l_report_no = atoi ( argv[5] );           
  
	if( argc > 6 )                           
  {
     strcpy( c_und_str, (char *)argv[6] );
     c_rqst_typ = MARK_FOR_UNDRLYNG;

     fn_userlog ( c_ServiceName, "c_und_str is :%s:",c_und_str );

     ptr_fml_buf = fn_create_rs (  c_ServiceName,
                                   c_err_msg,
                                   "SFO_GT_SIMTM",
                                   TPNOTIME,
                                   3,
                                   FFO_XCHNG_CD, ( char * )c_xchng_cd,
                                   FFO_RQST_TYP, (char *)&c_rqst_typ,
                                   FFO_UNDRLYNG, (char *)c_und_str);
  }
  else
  {
     c_rqst_typ = MARK_ALL_PSTN;

     ptr_fml_buf = fn_create_rs (  c_ServiceName,
                                   c_err_msg,
                                   "SFO_GT_SIMTM",
                                   TPNOTIME,
                                   2,
                                   FFO_XCHNG_CD, ( char * )c_xchng_cd,
                                   FFO_RQST_TYP, (char *)&c_rqst_typ);
  }
	
	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  
	if ( i_trnsctn == -1 )
  {
     strcpy ( c_msg, "System error. Contact system support" );
     fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
     fn_errlog(c_ServiceName, "S31005", LIBMSG, c_err_msg );
     return ;
  }

	fn_userlog ( c_ServiceName,"Inserting data to SIR_SPN_IMTM_REP.");

  EXEC SQL
     INSERT INTO SIR_SPN_IMTM_REP
     (
       SIR_REPORT_NO,
       SIR_XCHNG_CD,
       SIR_RPRT_TM_STMP
     )
     VALUES
     (
       :l_report_no,
       :c_xchng_cd,
       sysdate
     );

  if ( SQLCODE != 0 )
  {
     strcpy ( c_msg, "System error. Contact system support" );
     fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
     fn_errlog(c_ServiceName, "S31010", SQLMSG, c_err_msg );
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     return;
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
     strcpy ( c_msg, "System error. Contact system support" );
     fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
     fn_errlog( c_ServiceName, "S31015",LIBMSG,c_err_msg);
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     return;
  }

	if ( ptr_fml_buf == NULL )
  {
     fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg );
     return;
  } 

	fn_userlog ( c_ServiceName," Calling function for record count. ");	

  li_tot_rcrds = fn_reccnt_rs ( ptr_fml_buf,
                                c_ServiceName,
                                c_err_msg,
                                FFO_EBA_MTCH_ACT_NO);
  if ( li_tot_rcrds == -1 )
  {
     fn_errlog( c_ServiceName, "S31025", LIBMSG, c_err_msg );
     fn_dstry_rs ( ptr_fml_buf );
     return;
  }

  strcpy ( c_msg, "Data created." );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  sprintf ( c_msg, "Total records = %ld", li_tot_rcrds );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );	
 
	for ( li_cnt=1; li_cnt<=li_tot_rcrds; li_cnt++ )
  {
		fn_userlog ( c_ServiceName," In for loop processing record |%d|",li_cnt );

    i_ch_val = fn_getnxt_rs ( ptr_fml_buf,
                              c_ServiceName,
                              c_err_msg,
                              4,
                              FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL,
                              FFO_EBA_MTCH_ACT_NO, ( char * )c_clm_mtch_acnt, NULL,
                              FFO_UNDRLYNG, ( char * )c_undrlyng, NULL,
                              FFO_CTGRY_INDSTK, ( char * )&c_indstk, NULL);

 	                /*             FFO_CNTRCT_TAG, ( char * )&c_cntrct_tag, NULL);*/
    
		if ( i_ch_val != 0 )
  	{
    	fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg );
     	fn_dstry_rs ( ptr_fml_buf );
     	strcpy ( c_msg, "System error. Contact system support" );
     	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
     	return;
  	}
	
    if( li_cnt % 500 == 0 )  /** Ver 1.2, Added in if condition **/
    {
 	    sprintf ( c_msg, "Processing record %ld of %ld", li_cnt, li_tot_rcrds );
  	  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    }

  	/*
		i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
    	                            c_err_msg,
      	                          "sfr_bof_fimtm",
        	                        li_cnt,
          	                      li_tot_rcrds );
  	if ( i_ch_val == -1 )
  	{
    	 fn_errlog( c_ServiceName, "S31035", LIBMSG, c_err_msg );
     	 fn_dstry_rs ( ptr_fml_buf );
    	 strcpy ( c_msg, "System error. Contact system support" );
     	 fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
     	 return;
  	}
		*/
		/*** Ver 1.1 Starts ***/
		i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                  c_err_msg,
                                  "sfr_mark_simtm",
                                  li_cnt,
                                  li_tot_rcrds );
    if ( i_ch_val == -1 )
    {
       fn_errlog( c_ServiceName, "S31040", LIBMSG, c_err_msg );
       fn_dstry_rs ( ptr_fml_buf );
       strcpy ( c_msg, "System error. Contact system support" );
       fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
       return;
    }
		/*** Ver 1.1 Ends   ***/
		

		fn_cpy_ddr(c_rout_str);

		fn_userlog ( c_ServiceName," Calling service SFO_MARK_SIMTM ");

    i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                  c_err_msg,
                                  "SFO_MARK_SIMTM",
                                  0,
                                  10,
                                  FFO_XCHNG_CD, ( char * )c_xchng_cd,
                                  FFO_EBA_MTCH_ACT_NO,(char *)c_clm_mtch_acnt,
                                  FFO_UNDRLYNG, ( char * )c_undrlyng,
                                  FFO_CTGRY_INDSTK, ( char * )&c_indstk,
                                  FFO_IMTM_RMRKS, ( char * )c_imtm_remarks,
                                  FFO_OPERATION_TYP,(char *)c_run_mode,
                                  FFO_BAT_TAG, ( char * )c_tag,
                                  FFO_REC_NO, ( char * )&li_cnt,
																  FFO_RUN_NUM, ( char * )&l_report_no,
																	FFO_REQ_TYP, ( char * )&c_req_type);	
		
		if ( i_ch_val == -1 )
    {
      fn_errlog( c_ServiceName, "S31045", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_buf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }

	}  /****   END of FOR LOOP  ******/

  /*** Ver 1.2 Starts Here ***/ 
  sprintf ( c_msg, "Processing record %ld of %ld", li_cnt - 1, li_tot_rcrds );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  /*** ver 1.2 Ends here ***/

	fn_dstry_rs ( ptr_fml_buf );

  sprintf ( c_msg, "Batch process %s ended", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  return;
}

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_RPT_SIMTM;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}

int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
  return 0;
}

