/*    Program               : bat_sms_alrt                                           */
/*                                                                                   */
/*                                                                                   */
/*    Output                :                                                        */
/*                                                                                   */
/*    Description           : This batch program is sending sms to the call-n-trade  */
/*                            users of the equity and fno.                           */
/*                                                                                   */
/*    Log                   : 1.0   21-Jun-2007 Sandeep Patil/ Kunal Jadav           */
/*    Log                   : 1.1   12-Nov-2007 Kunal Jadav                          */
/*    Log                   :1.2    01-Jan-2008 Ranjit                               */
/*    Log                   : 1.3   20-Jun-2008 Sandeep                              */
/*    Log                   : 1.4   06-Aug-2008 Rohit                                */
/*    Log                   : 1.5   06-Feb-2011 Shamili                              */
/*		Log										:	1.6		06-Jun-2011	Akshay Thorat												 */
/*		Log										:	1.7		09-Jul-2013	Bhushan Sonwane											 */
/*		Log										:	1.8		09-Sep-2014	Samip M															 */
/*************************************************************************************/
/* 1.0 -    New Release                                                              */
/* 1.1 -    History Change                                                           */
/* 1.2 -    IBM Migtaion                                                             */
/* 1.3 - Future Plus Changes                                                         */
/* 1.4 - CRCSN19514 :Removed all socket interfaces .Called service svc_snd_smsalrt.c */
/*          for socket connection and received mobile no and sms status and update   */
/*          status in sms_alrt_dtls table accordingly.                               */
/* 1.5 - Change in SMS message for more convinience of customer.										 */
/* 1.6 - Changes to check the mobile number is valid or not.										  	 */
/* 1.7 - Changes for NO DATA FOUND handling and bug fixing.													 */
/* 1.8 - View to FML changes																												 */
/*************************************************************************************/

#include <stdio.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <Usysflds.h>
/*#include <sys/types.h>  */  /* Ver 1.4 */
/*#include <sys/socket.h>  */  /* Ver 1.4 */
/*#include <netinet/in.h>  */   /* Ver 1.4 */
/** #include <fo_view_def.h> **/	/** Ver 1.8 **/
#include <fml_def.h>/* Ver 1.4 */
/*#include <fo.h> *//* Ver 1.4 */
#include <fn_battmpt.h>
#include <fn_tuxlib.h>
#include <fn_log.h>
#include <netdb.h>
#include <string.h> /* ver 1.2 */
/*#include <time.h>* ver 1.2 */  /* Ver 1.4 */
/*#include <ud_sck.h>* ver 1.2 */   /* Ver 1.4 */
/*#include <fn_scklib.h>  * ver 1.2 */   /* Ver 1.4 */
#include <fn_read_debug_lvl.h>/* ver 1.2 */
#include <sms.h>  /* Ver 1.4 */


/*#define MAXSTR 256  */  /* Ver 1.4 */
/*#define BUFSIZE 1000** Commented in ver 1.2 **/
#define BUFRSIZE     1000 /** ver 1.2 */  /* Ver 1.4 */
/*#define PORT   6000  */  /* Ver 1.4 */
/*#define HOSTNAME "172.16.32.138"   */  /* Ver 1.4 */
/* #define HOSTNAME "10.16.59.143"	for testing in dev */
/*#define HOUR  10  */  /* Ver 1.4 */
/*#define MINS  100   */ /* Ver 1.4 */
#define NULL_VALUE_FOUND -1405
/* Ver 1.4 hard coded values of formated string */ 
#define DEPT "WEBTRADE"
#define APPLC "TRDALERT"

#define TOTAL_FML 5   /* Ver 1.4 */

FBFR32  *ptr_Sbuf;     /* Pointer to FML input buffer    */  /* Ver 1.4 */
FBFR32  *ptr_Rbuf;     /* Pointer to FML output buffer   */  /* Ver 1.4 */

/*int fn_crt_sms_eq( struct vw_orderbook* ,  char*); 
int fn_crt_sms_fno( struct vw_orderbook* , char*); */   /*  Ver 1.4 structure declarn changed */

int fn_crt_sms_eq( struct st_sms*,  char*);
int fn_crt_sms_fno( struct st_sms*,  char*); 

/*int fn_crt_sms_frmt( char*, char*, char* );  */   /* Ver 1.4 */

/*int i_test = 0;  */  /* Ver 1.4 */

struct st_sms        /*  Declaration of structure*/
{
  char c_ordr_rfrnc[19];
  char c_prd_typ;
  char c_undrlyng[7];
  char c_expry_dt[23];
  char c_exrc_typ;
  char c_opt_typ;
  long l_strike_prc;
  long l_ord_tot_qty;
  char c_trd_dt[23];
  char c_ordr_stts;
  long l_exctd_qty;
  long l_can_qty;
  long l_exprd_qty;
  char c_mbl_no[30];
};
struct st_sms  st_array[MAX_BATCH_SIZE];


void BAT_SMS_ALRT( int argc, char* argv[] )
{

  EXEC SQL INCLUDE "table/sms_alrt_dtls.h"; /* Ver 1.4 */


  int i_row_count = 0; /* Ver 1.4 for no of count received for called service*/
  int i_tot_rec = 0;  /* Ver 1.4 */
  int i_ch_val;    /* Ver 1.4   */
  int i_trnsctn;
  int i_fetched;		/*  Ver 1.4 */
  int i_received;   /* Ver 1.4 */
  int i_fmlcount;				/* Ver 1.4 */
  int i_rows_insert = 0;    /*  Ver 1.4 */
 	/*int numbytes; */   /* Ver 1.4 */
  int i_returncode;
  /* int portNumber;*/	 /* Ver 1.4 */
  /* int sockfd;  */			/* Ver 1.4 */
 	/* int i_tmH;    */   /* Ver 1.4 */
  /* int i_tmM;   */   /* Ver 1.4 */
 	/*short int ind_var; */  /* Ver 1.4 No need nw */

	/*time_t time_stmp; */  /* Ver 1.4 */

  char c_flag;  /* For received flag */
	char c_finflag; /* for  updation */

  char c_errmsg[256];
  char c_ServiceName[33];
  char c_err_msg[256];
  char smsbuf[BUFRSIZE];
 	/*char smsstring[BUFRSIZE];*/  /* Ver 1.4 */
 	/*char con_msg[40] = "CON^`!XML^`!ICICIBANK#END#"; */  /* Ver 1.4 */
 	/*char ext_msg[40] = "EXT^`!CLOSE the Message#END#";*/   /* Ver 1.4 */
  char sms_msg[BUFRSIZE];
  char msgbuf[BUFRSIZE];
	/*char c_tmH[3]; */  /*  Ver 1.4 */
	/*char c_tmM[3]; */   /*  Ver 1.4 */
	/*char c_spl_flg; */  /* Ver 1.4 */
  char c_trd_dt[12];
  char c_exg_trd_dt[12];
  char c_deptnm[9];  /* Ver 1.4 */
  char c_appcn[9];    /* Ver 1.4 */
  char c_rembl_no[30];  /* Ver 1.4 */  /* for getting Mobile no from  called service */
  long    l_Sbufferlength;         /* Ver 1.4 */
  long    l_recv_buff_len;  /* Ver 1.4 */
  long    l_send_buff_len;   /* Ver 1.4 */



/*struct sockaddr_in serv_addr;*/  /* Ver 1.4 */


/*EXEC SQL BEGIN DECLARE SECTION; 
    *struct vw_orderbook st_orderbook; 
*varchar c_mbl_no[30];  *  * Now in structure *
  EXEC SQL END DECLARE SECTION;  */  /* Ver 1.4 */


 /* Initialize the error array */   /* Ver 1.4 */
  int  i_err[TOTAL_FML];
  int  i_ferr[TOTAL_FML];

  INITBATDBGLVL(argv[0]);		/* ver 1.2 */

  INIT(i_err,TOTAL_FML);  /* Ver 1.4 */
  INIT(i_ferr,TOTAL_FML);  /*  Ver 1.4 */ 


  strcpy( c_ServiceName, "BAT_SMS_ALRT" );
  strcpy( c_deptnm ,DEPT);		/* Ver 1.4 */
  strcpy( c_appcn ,APPLC);			/* Ver 1.4 */


	fn_userlog(c_ServiceName,"11111");

  if( argc != 5 )
  {
    fn_userlog( c_ServiceName, "Usage: bat_sms_alrt <ini> <Exchange_code> <NA> <trd_dt: dd-Mon-yyyy>");     
    return;
  }

  strcpy( c_trd_dt, argv[4] );


 /*********** Calculating size for allocation of  Sbuffer ***************/
  l_Sbufferlength = Fneeded32(1,sizeof(smsbuf)        +
                               /* sizeof(c_mbl_no.arr)*/
                                    30                +
                                sizeof(c_deptnm)      +
                                sizeof(c_appcn)
                              );
  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName, "l_Sbufferlength is |%ld|",l_Sbufferlength);
  }
  /************************************************************************
    * Allocate buffer for calling secondary service  SVC_SND_SMSALRT  *
    ************************************************************************/

  ptr_Sbuf =(FBFR32*)tpalloc("FML32",NULL,l_Sbufferlength*50 + 200);
  if (ptr_Sbuf == NULL)
  {
    fn_errlog( c_ServiceName, "S31005", TPMSG, c_err_msg  );
    fn_userlog(c_ServiceName, "Error Allocating Send Buffer ");
    fn_destroy_pipe();
    tpclose();
    tpterm();
    return;
  }

  ptr_Rbuf= (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
  if (ptr_Rbuf== NULL)
  {
    fn_errlog( c_ServiceName, "S31010", TPMSG, c_err_msg  );
    fn_userlog(c_ServiceName, "Error Allocating Receive Buffer ");
    tpfree((char *)ptr_Sbuf);
    fn_destroy_pipe();
    tpclose();
    tpterm();
    return;
  }

/*portNumber = PORT;	  *//* Ver 1.4 */

  EXEC SQL
  SELECT to_char( exg_nxt_trd_dt, 'dd-Mon-yyyy')
  INTO   :c_exg_trd_dt
  FROM   exg_xchng_mstr
  WHERE  exg_xchng_cd = 'NFO';

  if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31015",SQLMSG, c_err_msg);
    tpfree((char *)ptr_Sbuf);  /* Ver 1.4 */
    tpfree((char *)ptr_Rbuf);  /* Ver 1.4 */
    return;
  } 

  c_exg_trd_dt[11] = '\0';


	fn_userlog(c_ServiceName,"c_exg_trd_dt :%s:",c_exg_trd_dt);


  /* Ver 1.4 All socket interfaces are handled in called service  comment starts here*/

/* Socket creation *

	if( fn_crt_clnt_sck( HOSTNAME, portNumber, &sockfd, c_ServiceName, c_err_msg ) == -1)
	{
		fn_errlog(c_ServiceName,"S31020", LIBMSG, c_err_msg);
    return;
  }

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "Created the client socket successfully");
	}

* Writing connection message *

	if( fn_writen( sockfd, con_msg, strlen(con_msg), c_ServiceName, c_err_msg) == -1)
	{
		fn_errlog(c_ServiceName,"S31025", LIBMSG, c_err_msg);	
		fn_close( sockfd );
		return;
	}

if(DEBUG_MSG_LVL_3)
{
fn_userlog( c_ServiceName, "Sending the connection message");
}

* Reading for acknowledgement *

strcpy( msgbuf,"");
numbytes = read( sockfd, (void *)msgbuf, BUFRSIZE);
  if( numbytes == -1)
  {
    fn_errlog(c_ServiceName, "S31030", LIBMSG, c_err_msg);
    fn_userlog(c_ServiceName,"Read: error");
    return;
  }
msgbuf[strlen(msgbuf)] = '\0';

* Check for acknowledgment for connection *

if( strncmp( msgbuf, "CON!0^`!",8) != 0 )
if( strncmp( msgbuf, "CON!0",5) != 0 )	for testing in dev *
{
    fn_userlog(c_ServiceName,"Error in connection");
return;
}
if(DEBUG_MSG_LVL_3)
{
  fn_userlog(c_ServiceName,"Connection to the server is done");
}

* Checking the system time *
time_stmp = time(NULL);
strftime(c_tmH, 3, "%H", localtime(&time_stmp));
i_tmH = atoi(c_tmH);

if(DEBUG_MSG_LVL_3)
{
fn_userlog( c_ServiceName, "TIME: %d",i_tmH);
fn_userlog( c_ServiceName, "Trade Date: |%s|", c_trd_dt);
}

* The time should be greater than or equal to TIME. *
if(i_tmH < HOUR)
{
  fn_userlog(c_ServiceName, "The time should be greater than or equal to 6pm");
  fn_close(sockfd);
  return;
}
*/  /* comment ends Ver 1.4 */	

/* GET FNO and EQ call-n-trade orders */

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31035", LIBMSG, c_err_msg);
    fn_userlog(c_ServiceName, "Error while beginning the transaction");
    tpfree((char *)ptr_Sbuf);  /* Ver 1.4 */
    tpfree((char *)ptr_Rbuf);   /* ver 1.4 */
    return;
  }

 if( strcmp ( c_trd_dt, c_exg_trd_dt ) == 0 )
 {


	fn_userlog(c_ServiceName," trade date");

  EXEC SQL
    INSERT INTO sms_alrt_dtls  (
    SELECT fod_ordr_rfrnc,
           fod_prdct_typ,
           fod_undrlyng,
           fod_expry_dt,
           fod_exer_typ,
           fod_opt_typ,
           fod_strk_prc,
           fod_ordr_tot_qty,
           fod_trd_dt,
           fod_ordr_stts,
           fod_exec_qty,
           fod_cncl_qty,
           fod_exprd_qty,
           usr_mbl_nmbrs,
           'N',
           sysdate
    FROM   fod_fo_ordr_dtls, usr_user_master, uac_usr_accnts
    WHERE  fod_clm_mtch_accnt = uac_clm_mtch_accnt
    AND    usr_usr_id = uac_usr_id
    AND    fod_channel like  'CN%'
    AND    fod_lmt_mrkt_sl_flg = 'L'
    AND    fod_ordr_stts in ('O','E','J','P','C', 'X' ) 
    AND     (fod_ordr_rfrnc,fod_ordr_stts) not in ( select sms_ordr_rfrnc,sms_ordr_stts from sms_alrt_dtls where sms_trd_dt = to_date( :c_trd_dt, 'dd-Mon-yyyy' ) )
    union all
    SELECT  ord_ordr_rfrnc,
            '*',
            ord_stck_cd,
            to_date('01-Jan-1000','dd-mon-yyyy'),
            '*',
            '*',
            0,
            ord_ordr_qty,
            ord_trd_dt,
            ord_ordr_stts,
            ord_exctd_qty,
            0,
            0,
            usr_mbl_nmbrs,
            'N',
            sysdate
    FROM    ord_ordr_dtls, usr_user_master, uac_usr_accnts
    WHERE   ord_clm_mtch_accnt = uac_clm_mtch_accnt
    AND     usr_usr_id = uac_usr_id
    AND     ord_channel like 'CN%'  
    AND     ord_prdct_typ ='C'
    AND     ord_lmt_mrkt_flg = 'L' 	
    AND     ord_ordr_stts in ('O','E','J','P','C', 'X' ) 
    AND     ord_trd_dt = to_date ( :c_trd_dt, 'dd-Mon-yyyy' )
    AND     (ord_ordr_rfrnc,ord_ordr_stts) not in ( select sms_ordr_rfrnc,sms_ordr_stts from sms_alrt_dtls where sms_trd_dt = to_date( :c_trd_dt, 'dd-Mon-yyyy') )
);

  if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31040",SQLMSG, c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
   /*fn_close(sockfd); */  /* Ver 1.4 */
    tpfree((char *)ptr_Sbuf); /* ver 1.4 */
    tpfree((char *)ptr_Rbuf); /* ver 1.4 */
    return;
  }

 }	

/*** 1.1	starts ***/
/* For any previous trade date would be picked up from the history table */
 else
 {
	fn_userlog(c_ServiceName," previous trade date");

   EXEC SQL
    INSERT INTO sms_alrt_dtls  (
    SELECT  fod_ordr_rfrnc,
            fod_prdct_typ,
            fod_undrlyng,
            fod_expry_dt,
            fod_exer_typ,
            fod_opt_typ,
            fod_strk_prc,
            fod_ordr_tot_qty,
            fod_trd_dt,
            fod_ordr_stts,
            fod_exec_qty,
            fod_cncl_qty,
            fod_exprd_qty,
            usr_mbl_nmbrs,
            'N',
            sysdate
    FROM    fod_fo_ordr_dtls_hstry, usr_user_master, uac_usr_accnts
    WHERE   fod_clm_mtch_accnt = uac_clm_mtch_accnt
    AND     usr_usr_id = uac_usr_id
    AND     fod_channel like  'CN%'
    AND     fod_lmt_mrkt_sl_flg = 'L'
    AND     fod_ordr_stts in ('O','E','J','P','C', 'X' )
		AND			fod_trd_dt = to_date( :c_trd_dt, 'dd-Mon-yyyy' )
    AND     (fod_ordr_rfrnc,fod_ordr_stts) not in ( select sms_ordr_rfrnc,sms_ordr_stts from sms_alrt_dtls where sms_trd_dt
= to_date( :c_trd_dt, 'dd-Mon-yyyy' ) )
    union all
    SELECT  ord_ordr_rfrnc,
            '*',
            ord_stck_cd,
            to_date('01-Jan-1000','dd-mon-yyyy'),
            '*',
            '*',
            0,
            ord_ordr_qty,
            ord_trd_dt,
            ord_ordr_stts,
            ord_exctd_qty,
            0,
            0,
            usr_mbl_nmbrs,
            'N',
            sysdate
    FROM    ord_ordr_dtls, usr_user_master, uac_usr_accnts
    WHERE   ord_clm_mtch_accnt = uac_clm_mtch_accnt
    AND     usr_usr_id = uac_usr_id
    AND     ord_channel like 'CN%'
    AND     ord_prdct_typ ='C'
    AND     ord_lmt_mrkt_flg = 'L'
    AND     ord_ordr_stts in ('O','E','J','P','C', 'X' )
    AND     ord_trd_dt = to_date ( :c_trd_dt, 'dd-Mon-yyyy' )
    AND     (ord_ordr_rfrnc,ord_ordr_stts) not in ( select sms_ordr_rfrnc,sms_ordr_stts from sms_alrt_dtls where sms_trd_dt
= to_date( :c_trd_dt, 'dd-Mon-yyyy') )
                     );

   if( SQLCODE != 0 )
   {
     fn_errlog( c_ServiceName, "S31045",SQLMSG, c_err_msg);
     fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
     /*fn_close(sockfd); */ /* Ver 1.4 */
		 tpfree((char *)ptr_Sbuf); /* ver 1.4 */
     tpfree((char *)ptr_Rbuf); /* ver 1.4 */
     return;
   }

 	}  /* else loop ends */

		/* Added in ver 1.4 */


  EXEC SQL
    UPDATE  SMS_ALRT_DTLS
    SET  sms_spl_flg = 'Y', sms_prcsd_tm = sysdate
    WHERE (sms_mbl_nmbrs is NULL
    OR    sms_mbl_nmbrs in ('*','-'))
    AND   sms_trd_dt = to_date(:c_trd_dt,'dd-Mon-yyyy');

  /*if( SQLCODE != 0) */											
  if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )					/***1.5 **/
  {
     fn_errlog( c_ServiceName, "S31050", SQLMSG, c_err_msg);
		 fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg ); 
     fn_userlog( c_ServiceName, "Error while updating Invalid mobile Nos");
     tpfree((char *)ptr_Sbuf); /* ver 1.4 */
     tpfree((char *)ptr_Rbuf); /* ver 1.4 */
     return;
  }
	
	if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
	{
   	fn_errlog(c_ServiceName, "S31055", SQLMSG, c_err_msg);
   	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		/*fn_close(sockfd); */  /* Ver 1.4 */
		tpfree((char *)ptr_Sbuf); /* ver 1.4 */
    tpfree((char *)ptr_Rbuf); /* ver 1.4 */
   	return;
	}
	/*** 1.1 Ends ***/

	/* Sending SMS to the user from the sms table in batch of 50 */ 
	while (1)   
  {

		EXEC ORACLE OPTION (CHAR_MAP=STRING);  
		EXEC SQL
			SELECT  sms_ordr_rfrnc,
            sms_prdct_typ,
            sms_undrlyng,
            sms_expry_dt,
            sms_exer_typ,
            sms_opt_typ,
            sms_strk_prc,
            sms_ordr_tot_qty,
            to_char( sms_trd_dt, 'dd/mm/yyyy'),
            sms_ordr_stts,
            sms_exec_qty,
            sms_cncl_qty,
            sms_exprd_qty,
            sms_mbl_nmbrs
		/*INTO		:st_orderbook.c_ordr_rfrnc,
						:st_orderbook.c_prd_typ,
						:st_orderbook.c_undrlyng,
						:st_orderbook.c_expry_dt,
						:st_orderbook.c_exrc_typ,
						:st_orderbook.c_opt_typ,
						:st_orderbook.l_strike_prc,
						:st_orderbook.l_ord_tot_qty,
						:st_orderbook.c_trd_dt,
						:st_orderbook.c_ordr_stts,
						:st_orderbook.l_exctd_qty,
						:st_orderbook.l_can_qty,
						:st_orderbook.l_exprd_qty,
						:c_mbl_no   */  /* Ver 1.4 */
			INTO	:st_array	
		FROM    SMS_ALRT_DTLS   
		WHERE 	sms_trd_dt = to_date(:c_trd_dt,'dd-Mon-yyyy')			/* 1.1 trade_date check */
		AND     sms_spl_flg = 'N'
		AND			not exists (SELECT 1 FROM IMN_INVLID_MBL_NOS where sms_mbl_nmbrs = IMN_MOB_NO)   /* Added for ver 1.6  */ 
		AND 		rownum <51;
		/*AND     rownum <= 1;   */  /* Ver 1.4 */

		if ( SQLCODE != 0  )  
   	{
     	/*if ( SQLCODE == NO_DATA_FOUND )  */  /* ver 1.4 */
			if( SQLCODE == NO_DATA_FOUND && sqlca.sqlerrd[2] == 0 ) 
     	{
       	fn_userlog(c_ServiceName,"All records Done - No data Found");
        /*  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); */   /* Ver 1.4 */
				tpfree((char *)ptr_Sbuf); /* ver 1.4 */
    		tpfree((char *)ptr_Rbuf); /* ver 1.4 */
       	break;
     	}
     	else if(SQLCODE!= NO_DATA_FOUND)
     	{
       	fn_errlog( c_ServiceName, "S31060", SQLMSG, c_err_msg  );
				/*fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg ); */  /* ver 1.4 */
				/*fn_close(sockfd); */  /* Ver 1.4 */
				tpfree((char *)ptr_Sbuf); /* ver 1.4 */
    		tpfree((char *)ptr_Rbuf); /* ver 1.4 */
				return;
     	}
   	}
		
	/*	c_mbl_no.arr[c_mbl_no.len] = '\0';
		rtrim((char*)c_mbl_no.arr);  */

	  i_rows_insert = ((sqlca.sqlerrd[2]%MAX_BATCH_SIZE == 0)? MAX_BATCH_SIZE :(sqlca.sqlerrd[2]));
		
		i_tot_rec += i_rows_insert;			/* total no of records */
	
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName, "Total records are : %d",i_tot_rec);
		}

		for(i_fetched =0;i_fetched <i_rows_insert;i_fetched ++)
		{

	/*	fn_userlog( c_ServiceName,"The fetched values: |%s|%d|%c|%d|", st_orderbook[i_fetched].c_undrlyng, st_orderbook[i_fetched].l_strike_prc,st_orderbook[i_fetched].c_ordr_stts, st_orderbook[i_fetched].l_exctd_qty);  */  /* struct changed nw */
			fn_userlog( c_ServiceName,"The fetched values: |%s|%d|%c|%d|",st_array[i_fetched].c_undrlyng,st_array[i_fetched].l_strike_prc,st_array[i_fetched].c_ordr_stts,st_array[i_fetched].l_exctd_qty);

		if( st_array[i_fetched].c_prd_typ =='F' ||st_array[i_fetched].c_prd_typ =='P' || st_array[i_fetched].c_prd_typ =='O') /*Ver 1.3*/	
		{
		/*	if( fn_crt_sms_fno( &st_orderbook[i_fetched], smsbuf) != 0) */
			if( fn_crt_sms_fno( &st_array[i_fetched], smsbuf) != 0)
			{
				fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
				/*fn_close(sockfd); */  /* Ver 1.4 */
				tpfree((char *)ptr_Sbuf); /* ver 1.4 */
        tpfree((char *)ptr_Rbuf); /* ver 1.4 */
        return;
      }
		}
		else
		{
			/*if( fn_crt_sms_eq( &st_orderbook[i_fetched], smsbuf) != 0) */
			if( fn_crt_sms_eq( &st_array[i_fetched], smsbuf) != 0)
			{
				fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
				tpfree((char *)ptr_Sbuf); /* ver 1.4 */
        tpfree((char *)ptr_Rbuf); /* ver 1.4 */
				/*fn_close(sockfd); */  /* Ver 1.4 */
        return;
			} 
		}
		if(DEBUG_MSG_LVL_3)
		{
			/*fn_userlog(c_ServiceName,"Loop %d times",i_fetched); */ /* testing */
			fn_userlog(c_ServiceName,"Dept:[%s]",c_deptnm);
			fn_userlog(c_ServiceName,"APPLN:[%s]",c_appcn);
			fn_userlog(c_ServiceName,"MObile No:[%s]",st_array[i_fetched].c_mbl_no);
			fn_userlog(c_ServiceName,"Smsbuf:[%s]",smsbuf);
		}

			
		 i_err[0]=Fadd32(ptr_Sbuf,FML_ORD_DP_ID,(char *)c_deptnm,0);
		 i_ferr[0] = Ferror32;
		 i_err[1]=Fadd32(ptr_Sbuf,FML_ARD_APPLCTN_RFRNC,(char *)c_appcn,0);
		 i_ferr[1] = Ferror32;
		 i_err[2]=Fadd32(ptr_Sbuf,FML_USR_MBL_NMBRS,(char *)st_array[i_fetched].c_mbl_no,0);
		 i_ferr[2] = Ferror32;
		 i_err[3]=Fadd32(ptr_Sbuf,FML_SYS_MSG,(char *)smsbuf,0);
		 i_ferr[3] = Ferror32;


		 for(i_fmlcount =0; i_fmlcount<=3 ;i_fmlcount++)
		 {
		 	if (i_err[i_fmlcount] == -1 )
			{
			  fn_userlog(c_ServiceName,"value of i_fmlcount is :%d:",i_fmlcount);
				fn_errlog( c_ServiceName, "S31065", Fstrerror32(i_ferr[i_fmlcount]),c_err_msg);
				tpfree((char *)ptr_Sbuf);
				tpfree((char *)ptr_Rbuf);
				return;
			}
		 }

		}  /* for ends */


/*   Invalid Mobile Handled above 
		if( (ind_var == -1) || (strncmp(c_mbl_no.arr,"*",1) == 0) || (strncmp(c_mbl_no.arr,"-",1) == 0) )	
    {
    	fn_userlog(c_ServiceName,"Mobile number not found for ordr_ref: %s",st_orderbook[i_fetched].c_ordr_rfrnc);
      fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );

			i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  		if( i_trnsctn == -1 )
  		{
    		fn_errlog(c_ServiceName, "S31070", LIBMSG, c_err_msg);
    		fn_userlog(c_ServiceName, "Error while beginning the transaction");
				tpfree((char *)ptr_Sbuf); * ver 1.4 *
        tpfree((char *)ptr_Rbuf); * ver 1.4 *	
    		return;
  		}
		

      EXEC SQL
      UPDATE  sms_alrt_dtls
      SET     sms_spl_flg = 'Y', sms_prcsd_tm = sysdate
      WHERE   sms_ordr_rfrnc = :st_orderbook.c_ordr_rfrnc
      AND     sms_ordr_stts = :st_orderbook.c_ordr_stts;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31075", SQLMSG, c_err_msg);
        fn_userlog( c_ServiceName, "The order updation failed for order_ref: %s", st_orderbook.c_ordr_rfrnc);
				tpfree((char *)ptr_Sbuf); * ver 1.4 *
        tpfree((char *)ptr_Rbuf); * ver 1.4 *
        return;
      }

			if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  		{
    		fn_errlog(c_ServiceName, "S31080", SQLMSG, c_err_msg);
    		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpfree((char *)ptr_Sbuf); * ver 1.4 *
        tpfree((char *)ptr_Rbuf); * ver 1.4 *
    		*fn_close(sockfd); *  * ver 1.4 *
  		}
      continue;
    }
*/


		if(DEBUG_MSG_LVL_3)
		{
      fn_userlog(c_ServiceName,"Record Number |%ld|",i_tot_rec);
		}
		/************************************************************************/
    /* Calling service SVC_SND_SMSALRT																			*/
	  /************************************************************************/

		if(DEBUG_MSG_LVL_3){
  	 fn_userlog(c_ServiceName,"Calling SVC_SND_SMSALRT.........");	
		}


		i_returncode = tpcall("SVC_SND_SMSALRT",(char *)ptr_Sbuf,0,(char **)&ptr_Rbuf,&l_recv_buff_len,TPNOTRAN);
		fn_userlog(c_ServiceName,"i_returncode is |%d|",i_returncode);
		if (i_returncode == -1)
    {

    	if (TPCODE != TPESVCFAIL)
      {
				fn_userlog(c_ServiceName,"Error while calling service");
				fn_errlog(c_ServiceName,"S31085", TPMSG, c_err_msg);
			} 
			else
			{
				fn_userlog(c_ServiceName,"Service failed");
				fn_errlog(c_ServiceName,"S31090", TPMSG, c_err_msg);
				i_returncode = Fget32(ptr_Rbuf,FML_ERR_MSG,0,c_errmsg,0);
				if (i_returncode == -1)
        {
				 	fn_errlog(c_ServiceName,"S31095",FMLMSG, c_err_msg  );
				}	
			}
			tpfree((char *)ptr_Sbuf);
			tpfree((char *)ptr_Rbuf);
      return;
		}
			
	 /************************************************************************/
   /* Retrieving data from the Receive buffer of SVC_SND_SMSALRT service 			 */
	 /************************************************************************/

	 i_row_count=Foccur32((FBFR32 *)ptr_Rbuf,FML_USR_MBL_NMBRS);
	 if(DEBUG_MSG_LVL_3)
	 {
	  	fn_userlog(c_ServiceName,"Total records received from SVC_SND_SMSALRT are |%d|",i_row_count);
	 }
  
	 i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );
   if( i_trnsctn == -1 )
   {
     fn_errlog(c_ServiceName, "S31100", LIBMSG, c_err_msg);
     fn_userlog(c_ServiceName, "Error while beginning the transaction", c_errmsg);
     tpfree((char *)ptr_Sbuf); /* ver 1.4 */
     tpfree((char *)ptr_Rbuf); /* ver 1.4 */
     /*fn_close(sockfd); */  /* Ver 1.4 */
     return;
   }

	 for (i_received=0;i_received <i_row_count ;i_received++)
	 {

	  	MEMSET(c_rembl_no);	
			if(Fget32(ptr_Rbuf,FML_USR_MBL_NMBRS,i_received,(char*)c_rembl_no,0) == -1)
			{
				fn_userlog(c_ServiceName,"Unable to get %d th mobile no",i_row_count);
				fn_errlog( c_ServiceName, "S31105", FMLMSG, c_err_msg  );
				continue;
			}
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Mobile no :%s: order ref  received :%s:",c_rembl_no,st_array[i_received].c_ordr_rfrnc);					}
			if(Fget32(ptr_Rbuf,FML_ANSWR_FLAG,i_received,(char *)&c_flag,0) == -1)
			{
			 fn_userlog(c_ServiceName,"Unable to get %d th status",i_row_count);
			 fn_errlog( c_ServiceName, "S31110", FMLMSG, c_err_msg  );
			 continue;
			}
			if(c_flag == 'S')
			{
				c_finflag = 'Y';
			}
			else
			{
			  c_finflag = 'F';	
			}
					
			if(DEBUG_MSG_LVL_3)
			{
			 fn_userlog(c_ServiceName,"Status received is :%c",c_finflag);		 
			}
			EXEC SQL
       UPDATE  sms_alrt_dtls
       SET     sms_spl_flg = :c_finflag
       WHERE   sms_ordr_rfrnc =:st_array[i_received].c_ordr_rfrnc
			 AND 		SMS_MBL_NMBRS =:c_rembl_no;
				
			if ( SQLCODE != 0 )
      {
       	fn_errlog( c_ServiceName, "S31115", SQLMSG, c_err_msg);
       	fn_userlog( c_ServiceName, "The order updation failed for order_ref: %s", st_array[i_received].c_ordr_rfrnc);
      }
		}  /* For loop ends */

		if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    {
       fn_errlog(c_ServiceName, "S31120", SQLMSG, c_err_msg);
       fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       tpfree((char *)ptr_Sbuf);  /* Ver 1.4 */
       tpfree((char *)ptr_Rbuf);  /* Ver 1.4 */
     }
		Finit32(ptr_Sbuf,(FLDLEN32) Fsizeof32(ptr_Sbuf));
   	Finit32(ptr_Rbuf,(FLDLEN32) Fsizeof32(ptr_Rbuf));
		MEMSET(st_array);
    MEMSET(smsbuf);
	
	} /* End of while loop */


} /* End of main */
			
			


		/*fn_crt_sms_frmt( smsbuf,(char*) c_mbl_no.arr, smsstring); */  /* Ver 1.4 handled in called service*/
		/* Ver 1.4 comment starts here */
/*
		strcpy(sms_msg,"");
    strcpy(sms_msg,"MSG^`!");
    strcat(sms_msg,smsstring);
    strcat(sms_msg,"#END#");

		if( fn_writen( sockfd, sms_msg, strlen(sms_msg), c_ServiceName, c_err_msg) == -1)
  	{
   		fn_errlog(c_ServiceName,"S31125", LIBMSG, c_err_msg);
			fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      continue;
  	}

		if(DEBUG_MSG_LVL_3)
  	{
			fn_userlog( c_ServiceName, "Sending the message to the server");	
		}

		strcpy(msgbuf,"");
	  numbytes = read(sockfd,msgbuf,BUFRSIZE);
    if( numbytes == -1)
    {
      fn_errlog(c_ServiceName, "S31130", LIBMSG, c_err_msg);
      fn_userlog(c_ServiceName,"Error in receiving the message");
      fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      continue;
    }

    msgbuf[strlen(msgbuf)]='\0';

  	if(strncmp(msgbuf,"ACK!MSGSTATUS=FALSE",18)==0)
   	{
			fn_userlog(c_ServiceName,"Received message status: FALSE.");

			EXEC SQL
			UPDATE	sms_alrt_dtls
			SET			sms_spl_flg = 'F'
			WHERE		sms_ordr_rfrnc = :st_orderbook.c_ordr_rfrnc
			AND			sms_ordr_stts = :st_orderbook.c_ordr_stts;

			if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31135", SQLMSG, c_err_msg);
        fn_userlog( c_ServiceName, "The order updation failed for order_ref: %s", st_orderbook.c_ordr_rfrnc);
        return;
      }

      if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
      {
        fn_errlog(c_ServiceName, "S31140", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_close(sockfd);
        return;
      }
      continue;
		}
		else if( (strncmp(msgbuf,"ACK!1",5)==0) || (strncmp(msgbuf,"ACK!MSGSTATUS=TRUE",18)==0) )
    {

  		EXEC SQL
      UPDATE  sms_alrt_dtls
      SET     sms_spl_flg = 'Y', sms_prcsd_tm = sysdate
      WHERE   sms_ordr_rfrnc = :st_orderbook.c_ordr_rfrnc
      AND     sms_ordr_stts = :st_orderbook.c_ordr_stts;
		
		  if ( SQLCODE != 0 )
   		{
				fn_errlog( c_ServiceName, "S31145", SQLMSG, c_err_msg);
				fn_userlog( c_ServiceName, "The order updation failed for order_ref: %s", st_orderbook.c_ordr_rfrnc);
			 	fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
				continue; 
			}
    }
		else	
		{
      fn_userlog(c_ServiceName,"Received message : |%s|",msgbuf);

      EXEC SQL
      UPDATE  sms_alrt_dtls
      SET     sms_spl_flg = 'F'
      WHERE   sms_ordr_rfrnc = :st_orderbook.c_ordr_rfrnc
      AND     sms_ordr_stts = :st_orderbook.c_ordr_stts;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31150", SQLMSG, c_err_msg);
        fn_userlog( c_ServiceName, "The order updation failed for order_ref: %s", st_orderbook.c_ordr_rfrnc);
        return;
      }

      if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
      {
        fn_errlog(c_ServiceName, "S31155", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_close(sockfd);
        return;
      }
      continue;
    }

 		if( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 )
 		{
     	fn_errlog(c_ServiceName, "S31160", SQLMSG, c_err_msg);
     	fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
 		}    
*	  while end *

	* fn_close(sockfd);  * Ver 1.4 comment end here*/ 

/*  Ver 1.4  Handled in called service */
/*int fn_close(int sockfd)
{
	char ext_msg[40] = "EXT^`!CLOSE the Message#END#";	
	char c_ServiceName[33] = "BAT_SMS_ALRT";
	char c_err_msg[256];
	char msgbuf[BUFRSIZE];
	int numbytes;

	if( fn_writen( sockfd, ext_msg, strlen(ext_msg), c_ServiceName, c_err_msg) == -1)
  {
  	fn_errlog(c_ServiceName,"S31165", LIBMSG, c_err_msg);
	 	return 0;		* ver 1.2 return; changed to return 0;  **
  }

	strcpy( msgbuf,"");
	numbytes = read(sockfd,msgbuf,BUFRSIZE);
  if( numbytes == -1)
  {
    fn_errlog(c_ServiceName, "L31065", LIBMSG, c_err_msg);
  }	
  msgbuf[strlen(msgbuf)]='\0';

	if(strncmp(msgbuf,"EXT!",4)==0)
  {
  	fn_userlog(c_ServiceName,"Closing the socket");
  }
  else
  {
  	fn_userlog(c_ServiceName,"Unable to get exit message confirmation");
  }
	if( close(sockfd)== -1)
  {
    fn_errlog(c_ServiceName, "S31170", LIBMSG, c_err_msg);
		fn_userlog(c_ServiceName, "Unable to close the socket");
  }	
	return 0;
} */

/* Ver 1.4  Handled in called service */
/*int fn_crt_sms_frmt( char* smsstr , char* mblno, char* smsstring )
{
	sprintf( smsstring, "<DEPT>WEBTRADE</DEPT><APPID>TRDALERT</APPID><MOBILE>%s</MOBILE><DEPTMSGID>%d</DEPTMSGID><MESSAGE>%s</MESSAGE><NODELIVERYTIMEFROM></NODELIVERYTIMEFROM><NODELIVERYTIMETO></NODELIVERYTIMETO><REMARKS></REMARKS>", mblno,i_test, smsstr);	
	return 0;
}  */

/*int fn_crt_sms_eq( struct vw_orderbook *st_orderbook, char *smsstr)  */  /* structure changed nw ver 1.4 */
 int fn_crt_sms_eq( struct st_sms *st_orderbook, char *smsstr)
 {
  char c_ordr_stts[20];
  char c_prdct_typ[4];
  char c_ServiceName[33] = "BAT_SMS_ALRT";
  char c_err_msg[256];
	char c_trd_flw;			    /**1.5 **/
	char c_ordr_flw[4];			/**1.5 **/
  long l_exctd_qty;
  double d_exctd_rt;
  double d_ord_lmt_rt =0.0;		/**1.5 **/


  if ((st_orderbook->c_ordr_stts == 'E') || (st_orderbook->c_ordr_stts =='P') )
  {
   EXEC SQL
   SELECT round(avg(nvl(trd_exctd_rt,0)),2),	
          sum(nvl(trd_exctd_qty,0)),
					trd_trd_flw
   INTO   :d_exctd_rt,
          :l_exctd_qty,
					:c_trd_flw
   FROM   TRD_TRD_DTLS
   WHERE  trd_ordr_rfrnc = :st_orderbook->c_ordr_rfrnc
	 group by trd_trd_flw;	/** 1.5 **/

  if( SQLCODE != 0 && SQLCODE != -1405 && SQLCODE != NO_DATA_FOUND ) /** Ver 1.7 ** NO_DATA_FOUND Added ***/
  {
    fn_errlog(c_ServiceName, "S31175", SQLMSG, c_err_msg);
    return -1;
  }

	if(c_trd_flw == 'S') /**1.5**/
	{
			strcpy(c_ordr_flw,"sell");
	}
	else if(c_trd_flw == 'B')
	{
		strcpy(c_ordr_flw,"buy");	
			
	}	

  sprintf( smsstr, "Your %s order dated %s of %s for %ld shares has been executed at an average price of Rs.%.2lf.",c_ordr_flw,st_orderbook->c_trd_dt, st_orderbook->c_undrlyng, l_exctd_qty, d_exctd_rt);

		if(DEBUG_MSG_LVL_3){
		fn_userlog(c_ServiceName,"%s",smsstr);}

  }
  else
  {
   if ( st_orderbook->c_ordr_stts == 'J' )
   {
     strcpy(c_ordr_stts,"rejected");
   }
   else if (  st_orderbook->c_ordr_stts == 'C' )
   {
      strcpy(c_ordr_stts,"cancelled");
   }
   else if(st_orderbook->c_ordr_stts == 'O' )
   {
      strcpy(c_ordr_stts,"ordered");

   }
   else
   {
      strcpy(c_ordr_stts,"expired");
   }

	
	 /*** 1.5 Starts ****/

	 EXEC SQL
   SELECT ord_ordr_flw ,
					ord_lmt_rt
   INTO   :c_trd_flw,
					:d_ord_lmt_rt
   FROM   ord_ordr_dtls 
   WHERE  ord_ordr_rfrnc = :st_orderbook->c_ordr_rfrnc;

  if( SQLCODE != 0 && SQLCODE != -1405 && SQLCODE != NO_DATA_FOUND )  /** Ver 1.7 ** NO_DATA_FOUND Added ***/ 
  {
    fn_errlog(c_ServiceName, "S31180", SQLMSG, c_err_msg);
    return -1;
  }

  if(c_trd_flw == 'S') 
  {
      strcpy(c_ordr_flw,"sell");
  }
  else if(c_trd_flw == 'B')
  {
    strcpy(c_ordr_flw,"buy");

  }

	/*** 1.5 Ends ****/


  sprintf( smsstr, "Your %s order dated %s of %s for %ld shares at Rs.%.2lf has been %s.",c_ordr_flw,st_orderbook->c_trd_dt, st_orderbook->c_undrlyng,st_orderbook->l_ord_tot_qty,d_ord_lmt_rt,c_ordr_stts);

	if(DEBUG_MSG_LVL_3){
	fn_userlog(c_ServiceName,"%s",smsstr);}

 }
 return 0;

}

/*int fn_crt_sms_fno(struct  vw_orderbook *st_orderbook, char* smsstr) */  /* structure changed nw ver 1.4*/
 int fn_crt_sms_fno(struct   st_sms *st_orderbook, char* smsstr)
 {
  char c_ordr_stts[20];
  char c_prdct_typ[5];
  char c_ServiceName[33] = "BAT_SMS_ALRT";
  char c_err_msg[256];
	char c_trd_flw;         /**1.5 **/
  char c_ordr_flw[4];     /**1.5 **/
  long l_exctd_qty;
	long l_ord_lmt_rt;      /**1.5 **/
  double d_exctd_rt;
	double d_ord_lmt_rt =0.0;      /** Ver 1.7 **/


  if( st_orderbook->c_prd_typ == 'F' || st_orderbook->c_prd_typ == 'P')		/*** Ver 1.3 ***/
  {
   strcpy(c_prdct_typ,"FUT");
   if ((st_orderbook->c_ordr_stts == 'E')  || (st_orderbook->c_ordr_stts == 'P') || (st_orderbook->c_ordr_stts == 'D'))
   {

     EXEC SQL
     SELECT  round(avg(nvl(ftd_exctd_rt/100,0)),2),
      sum(nvl(ftd_exctd_qty,0)),
			ftd_trd_flw									 /*1.5*/	
      INTO    :d_exctd_rt,
              :l_exctd_qty,
							:c_trd_flw
     FROM    FTD_FO_TRD_DTLS
     WHERE   ftd_ordr_rfrnc = :st_orderbook->c_ordr_rfrnc
		 GROUP BY ftd_trd_flw;				 /* 1.5 */ 

     if( SQLCODE != 0 && SQLCODE != NULL_VALUE_FOUND && SQLCODE != NO_DATA_FOUND )  /** Ver 1.7 ** NO_DATA_FOUND Added ***/ 
     {
       fn_errlog(c_ServiceName, "S31185", SQLMSG, c_err_msg);
       return -1;
     }
 /*** 1.1 Starts ***/	
 /* For any previous trade date pick up record from the history table */
   if( SQLCODE == NULL_VALUE_FOUND )
   {
    EXEC SQL
      SELECT  round(avg(nvl(ftd_exctd_rt/100,0)),2),
              sum(nvl(ftd_exctd_qty,0)),
							ftd_trd_flw						/*1.5*/
      INTO    :d_exctd_rt,
              :l_exctd_qty,
							:c_trd_flw	
      FROM    FTD_FO_TRD_DTLS_HSTRY
      WHERE   ftd_ordr_rfrnc = :st_orderbook->c_ordr_rfrnc
			GROUP BY ftd_trd_flw;				/*1.5 */

   if( SQLCODE != 0 )
   {
     fn_errlog(c_ServiceName, "S31190", SQLMSG, c_err_msg);
     return -1;
   }
  }
 /*** 1.1 Ends ***/

	/*** 1.5 Starts ***/

	if(c_trd_flw == 'S') 
  {
      strcpy(c_ordr_flw,"sell");
  }
  else if(c_trd_flw == 'B')
  {
    strcpy(c_ordr_flw,"buy");

  }

        sprintf(smsstr,"Your %s order dated %s of %s-%s-%s for %ld quantity has been executed at an average price of Rs.%.2lf.",c_ordr_flw,st_orderbook->c_trd_dt,c_prdct_typ,st_orderbook->c_undrlyng, st_orderbook->c_expry_dt, l_exctd_qty, d_exctd_rt);  

				if(DEBUG_MSG_LVL_3){
				fn_userlog(c_ServiceName,"%s",smsstr);}

   }
   else
	 {

 		if ( st_orderbook->c_ordr_stts == 'J' )
    {
     l_exctd_qty = st_orderbook->l_ord_tot_qty;
     strcpy(c_ordr_stts,"rejected");
    }
   else if (  st_orderbook->c_ordr_stts == 'C' )
   {

    l_exctd_qty = st_orderbook->l_can_qty;
    strcpy(c_ordr_stts,"cancelled");
   }
   else if(st_orderbook->c_ordr_stts == 'O')
   {
     l_exctd_qty = st_orderbook->l_ord_tot_qty;
     strcpy(c_ordr_stts,"ordered");
   }
   else
   {
    l_exctd_qty = st_orderbook->l_ord_tot_qty;
    strcpy(c_ordr_stts,"expired");
   }

	 /** 1.5 Starts **/

		EXEC SQL
    SELECT  fod_ordr_flw,
						fod_lmt_rt	
    INTO    :c_trd_flw,
						:l_ord_lmt_rt
    FROM    fod_fo_ordr_dtls 
    WHERE   fod_ordr_rfrnc = :st_orderbook->c_ordr_rfrnc;

    if( SQLCODE != 0 && SQLCODE != NULL_VALUE_FOUND && SQLCODE != NO_DATA_FOUND )  /** Ver 1.7 ** NO_DATA_FOUND Added ***/
    {
       fn_errlog(c_ServiceName, "S31195", SQLMSG, c_err_msg);
       return -1;
    }

		if( SQLCODE == NULL_VALUE_FOUND )
    {
    	EXEC SQL
			SELECT  fod_ordr_flw,
							fod_lmt_rt
      INTO    :c_trd_flw,
							:l_ord_lmt_rt
      FROM    fod_fo_ordr_dtls_hstry
      WHERE   fod_ordr_rfrnc = :st_orderbook->c_ordr_rfrnc;

      if( SQLCODE != 0 )
      {
						 fn_errlog(c_ServiceName, "S31200", SQLMSG, c_err_msg);
						 return -1;
			}
    }

	 if(c_trd_flw == 'S')
	 {
				strcpy(c_ordr_flw,"sell");	
	 }
	 else if(c_trd_flw == 'B')
	 {

				strcpy(c_ordr_flw,"buy");
	 }

	d_ord_lmt_rt	=	(double)l_ord_lmt_rt/100 ; /*** Ver 1.7 ***/

   sprintf(smsstr,"Your %s order dated %s of %s-%s-%s for %ld quantity at Rs.%.2lf has been %s.",c_ordr_flw,st_orderbook->c_trd_dt,c_prdct_typ,st_orderbook->c_undrlyng, st_orderbook->c_expry_dt, l_exctd_qty, d_ord_lmt_rt, c_ordr_stts); /*** Ver 1.7 ** l_ord_lmt_rt changed to d_ord_lmt_rt ***/

	if(DEBUG_MSG_LVL_3){
	fn_userlog(c_ServiceName,"%s",smsstr);}


  }
 }
 else
 {
 strcpy(c_prdct_typ,"OPT");

 st_orderbook->l_strike_prc = st_orderbook->l_strike_prc/100;

   if ((st_orderbook->c_ordr_stts == 'E' ) || (st_orderbook->c_ordr_stts == 'P') || (st_orderbook->c_ordr_stts == 'D'))
   {
    EXEC SQL
    SELECT  round(avg(nvl(ftd_exctd_rt/100,0)),2),
            sum(nvl(ftd_exctd_qty,0)),
						ftd_trd_flw							/** 1.5 **/
    INTO    :d_exctd_rt,
            :l_exctd_qty,
						:c_trd_flw
    FROM    FTD_FO_TRD_DTLS
    WHERE   ftd_ordr_rfrnc = :st_orderbook->c_ordr_rfrnc
		GROUP BY ftd_trd_flw;					 /** 1.5 **/

      if( SQLCODE != 0 && SQLCODE != NULL_VALUE_FOUND && SQLCODE != NO_DATA_FOUND )  /** Ver 1.7 ** NO_DATA_FOUND Added ***/
      {
        fn_errlog(c_ServiceName, "S31205", SQLMSG, c_err_msg);
        return -1;
      }

/*** 1.1 Starts ***/
      /* For any previous trade date pick up record from the history table */
    if( SQLCODE == NULL_VALUE_FOUND )
    {
      EXEC SQL
      SELECT  round(avg(nvl(ftd_exctd_rt/100,0)),2),
      /*sum(nvl(ftd_exctd_qty,0)) */
              nvl(sum(ftd_exctd_qty),0),  /* Ver 1.4 */
							ftd_trd_flw								 /** 1.5 **/
      INTO    :d_exctd_rt,
              :l_exctd_qty,
							:c_trd_flw
      FROM    FTD_FO_TRD_DTLS_HSTRY
      WHERE   ftd_ordr_rfrnc = :st_orderbook->c_ordr_rfrnc
			GROUP BY ftd_trd_flw;							/** 1.5 **/

     if( SQLCODE != 0 )
     {
      fn_errlog(c_ServiceName, "S31210", SQLMSG, c_err_msg);
      return -1;
     }
   }
   /*** 1.1 Ends ***/

		if(c_trd_flw == 'S')
		{

				strcpy(c_ordr_flw,"sell");

		}
		else if(c_trd_flw == 'B')
		{

				strcpy(c_ordr_flw,"buy");

		}

   sprintf(smsstr,"Your %s order dated %s of %s-%s-%s-%.2ld-%c%c for %ld quantity has been executed at an average price of Rs.%.2lf.",c_ordr_flw,st_orderbook->c_trd_dt,c_prdct_typ,st_orderbook->c_undrlyng, st_orderbook->c_expry_dt, st_orderbook->l_strike_prc,st_orderbook->c_opt_typ,st_orderbook->c_exrc_typ, l_exctd_qty, d_exctd_rt);

		if(DEBUG_MSG_LVL_3){
		fn_userlog(c_ServiceName,"%s",smsstr);}

    }
    else
    {
     if ( st_orderbook->c_ordr_stts == 'J' )
     {
         l_exctd_qty = st_orderbook->l_ord_tot_qty;
         strcpy(c_ordr_stts,"rejected");
     }
     else if (  st_orderbook->c_ordr_stts == 'C' )
     {
         l_exctd_qty = st_orderbook->l_can_qty;
         strcpy(c_ordr_stts,"cancelled");
     }
     else if(st_orderbook->c_ordr_stts == 'O' )
     {
       l_exctd_qty = st_orderbook->l_ord_tot_qty;
        strcpy(c_ordr_stts,"ordered");
     }
     else 
     {
        l_exctd_qty = st_orderbook->l_ord_tot_qty;
        strcpy(c_ordr_stts,"expired");
     }

		 /** 1.5 Starts **/

		EXEC SQL
    SELECT  fod_ordr_flw,
						fod_lmt_rt
    INTO    :c_trd_flw,
						:l_ord_lmt_rt
    FROM    fod_fo_ordr_dtls
    WHERE   fod_ordr_rfrnc = :st_orderbook->c_ordr_rfrnc;

    if( SQLCODE != 0 && SQLCODE != NULL_VALUE_FOUND && SQLCODE != NO_DATA_FOUND )  /** Ver 1.7 ** NO_DATA_FOUND Added ***/ 
    {
       fn_errlog(c_ServiceName, "S31215", SQLMSG, c_err_msg);
       return -1;
    }

		if( SQLCODE == NULL_VALUE_FOUND )
    {
      EXEC SQL
      SELECT  fod_ordr_flw,
							fod_lmt_rt
      INTO    :c_trd_flw,
							:l_ord_lmt_rt
      FROM    fod_fo_ordr_dtls_hstry
      WHERE   fod_ordr_rfrnc = :st_orderbook->c_ordr_rfrnc;

      if( SQLCODE != 0 )
      {
             fn_errlog(c_ServiceName, "S31220", SQLMSG, c_err_msg);
             return -1;
      }
    }

    if(c_trd_flw == 'S')
    {
        strcpy(c_ordr_flw,"sell");
    }
    else if(c_trd_flw == 'B')
    {

        strcpy(c_ordr_flw,"buy");
    }
	
		d_ord_lmt_rt = (double)l_ord_lmt_rt/100 ;   /*** Ver 1.7 ***/

     sprintf(smsstr,"Your %s order dated %s of %s-%s-%s-%.2ld-%c%c for %ld quantity at Rs.%.2lf has been %s.",c_ordr_flw,st_orderbook->c_trd_dt,c_prdct_typ,st_orderbook->c_undrlyng, st_orderbook->c_expry_dt, st_orderbook->l_strike_prc,st_orderbook->c_opt_typ,st_orderbook->c_exrc_typ, l_exctd_qty, d_ord_lmt_rt,c_ordr_stts);  /*** Ver 1.7 ** l_ord_lmt_rt changed to d_ord_lmt_rt ***/

		if(DEBUG_MSG_LVL_3){
		fn_userlog(c_ServiceName,"%s",smsstr);}

   }
 }

return 0;
}

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_SMS_ALRT;
  return 0;
} 

void fn_bat_term ( int argc, char *argv[] )
{
  return;
} 

int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
  return 0;
}  
