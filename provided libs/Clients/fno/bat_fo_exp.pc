/************************************************************************/
/*							ORDER_SPECIFIC_EXPIRY			-		O													*/
/*							BATCH_EXPIRY							-		X													*/
/*							UNDRLYNG_EXPRY						-		U													*/
/*			Log			: 1.2 28-Oct-2002		Infotech|Mohit											*/
/*							  1.3 06-Feb-2004   Infotech(SR)												*/
/*							  1.4 02-Feb-2007   Infotech|Vikash				  						*/
/*								1.5 25-Apr-2008   Infotech|Sandeep										*/
/*								1.6	21-Jul-2010		Infotech|Sandeep										*/
/*								1.7	21-Jul-2010		Infotech|Sandeep			              */
/*                1.8 18-jul-2011   Infotech|Mahesh       							*/
/*                1.9 26-Feb-2013   Infotech|Mahesh		                  */ 
/*                2.0 08-Feb-2013   Infotech|Navina D.    							*/
/*                2.1 10-Jul-2018   Infotech|Anand Dhopte               */
/************************************************************************/
/* 1.2 : DT Broadcast																										*/
/* 1.3 : Changes for DL Ver 1.1																					*/
/* 1.4 : Changes for DL Revamp, Broadcast messages commented						*/
/* 1.5 : IBM Migration Changes																					*/
/* 1.6 : Temp Expiry (Expiry of M status orders with input type T)			*/
/* 1.7 : Time Bound Expiry Handling.																		*/
/* 1.8 : Changes for SPAN                                               */
/* 1.9 : Game Back Office Automation                                    */
/* 2.0 : SPAN FuturePLUS handling.                                      */
/* 2.1 : Stream No based expiry changes                                 */ 
/************************************************************************/
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <stdlib.h>
#include <string.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fml_def.h>
#include <fml_rout.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <fn_read_debug_lvl.h>    /*** Ver 1.5  ***/
/*************  Commented in ver 1.4 **********
*********Changes for 1.2***********************
#include <fn_env.h>
#include <fn_shm.h>
#include <eba_tgw.h>
#include <fn_msgq.h>
** #define FILE_NAME "TGW.ini" commented in ver 1.4 **
char c_filter [ 256 ];
Char c_filter_dt [ 256 ];
*********Changes for 1.2 ends******************
**************  End of Comment in ver 1.4 ****/ 
#include <fn_pos.h>       /*** Ver 1.9 ***/ 

#define SPAN 'S'         /*** 1.8 ***/
#define  EXPIRY  'X'
#define  TEMP_EXPIRY  'T' /*1.6*/
void fn_exit( char *c_ServiceName, char* c_err_msg, char c_mem_flg );

void BAT_FO_EXP ( int argc, char *argv[] ) 
{ 
	EXEC SQL INCLUDE "table/exg_xchng_mstr.h";

	EXEC SQL BEGIN DECLARE SECTION;
    char   c_trd_dt[11 + 1];
		char 	 c_tm_bnd [21] ;			/***	Ver	1.7	***/
		char   c_spn_allwd;        /*** Ver 1.8 ***/
  EXEC SQL END DECLARE SECTION;

	long int li_tot_rcrds;
  int i_ch_val;
  long int li_cnt;
	int  i_dategreater=0;
  char c_msg[256];
	FBFR32 *ptr_fml_buf;
  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];
  char c_undrlyng [ 7 ];					/**1.1**/
  char c_type ;										/**1.1**/
	char c_ordr_stts;			/***	Ver	1.7	***/

	char c_xchng_cd [ 4 ];
  char c_cln_mtch_accnt [ 11 ];
	char c_prd_typ;
	char c_pipe_id [ 3 ]; 
	char c_ordr_rfrnc [ 19 ];	
	char c_rout_crt [ 4 ];
	char c_inp_dt[21];			/***	Ver	1.7	***/
	char c_rqst_typ;
	long l_mdfctn_cntr;
	long l_ord_tot_qty;
	long l_lmt_rt;
	int 	i;
  long l_stream_no = 0; /*** Ver 2.1 ***/

/******** Commented in ver 1.4 ****************
*********Changes for 1.2 **********************
  int     ipc_key;            * V1.2 *
  char    c_pgm_name[33];     * V1.2 *
  char    c_FileName[256];    * V1.2 *
  char    *ptr;               * V1.2 *
*********Changes for 1.2 ends******************
******** ver 1.4 Comment ends ****************/

  /**** Ver 1.9 ****/
  char c_program_nm[33];
  char c_xchng_cd_tmp[4];
  char c_match_id[11];
  char c_error_txt[256];

  MEMSET(c_program_nm);
  MEMSET(c_xchng_cd_tmp);
  MEMSET(c_match_id);
  MEMSET(c_error_txt);

  /**** Ver 1.9 ***/

  strcpy ( c_ServiceName, argv[0] );

	INITBATDBGLVL(argv[0]);     /*** Ver 1.5 ***/

	sprintf ( c_msg, "Batch process %s started", argv[0] );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	strcpy ( c_msg, "Creating data. Please wait ... " );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	if( argc < 6 )
	{
		fn_bat_pst_msg ( c_ServiceName, "Invalid Number of Arguments", c_tag );
		exit(0);
	}

  /*** Ver 1.9 ***/
  strcpy(c_program_nm,c_ServiceName);
  strcpy(c_xchng_cd_tmp,argv[2]);

  /** Ver 1.9 ends *****/

	strcpy( c_xchng_cd, argv[2] );
	strcpy( c_trd_dt, argv[4] );

	strcpy( sql_exg_xchng_cd,c_xchng_cd);

	/*******************/
  /*****1.1 starts****/
	/*******************/
 
	c_type =  argv[5][0] ;
  if( c_type == 'O' )
  {
    strcpy( c_ordr_rfrnc, (char *)argv[6] );
    strcpy( c_undrlyng, "*" );
    strcpy( c_tm_bnd, "*" );
    c_rqst_typ = ORDER_SPECIFIC_EXPIRY;
  }
  else if(c_type == 'X' )
  {
    strcpy( c_ordr_rfrnc, "*" );
    strcpy( c_undrlyng, "*" );
    strcpy( c_tm_bnd, "*" );
    c_rqst_typ = BATCH_EXPIRY;
  }
  else if(c_type == 'U' )
  {
    strcpy( c_undrlyng, (char *)argv[6]);
    strcpy( c_ordr_rfrnc, "*" );
    strcpy( c_tm_bnd, "*" );
    c_rqst_typ = UNDRLYNG_EXPRY;
  }
  else if(c_type == 'G' )
  {
    strcpy( c_ordr_rfrnc, "*" );
    strcpy( c_undrlyng, "*" );
    strcpy( c_tm_bnd, "*" );
    c_rqst_typ = GTD_EXPRY;
  }
  /******1.1 ends*****/
	/* 1.6 Start */
  else if(c_type == 'T' )
  {
    strcpy( c_ordr_rfrnc, "*" );
    strcpy( c_undrlyng, "*" );
    strcpy( c_tm_bnd, "*" );
    c_rqst_typ = TEMP_EXPIRY;
  }
	/* 1.6 End */

	else if(c_type == 'C' )			/***	Ver	1.7	***/
  {
		MEMSET(c_tm_bnd);
    strcpy( c_ordr_rfrnc, "*" );
    strcpy( c_undrlyng, "*" );
    c_rqst_typ = CLSOUT_EXPIRY ;
    strcpy(c_inp_dt,argv[6]);
    
		strcat(c_tm_bnd,c_trd_dt);
		strcat(c_tm_bnd," ");
		strcat(c_tm_bnd,c_inp_dt);
		fn_userlog(c_ServiceName,"Time Bound Expiry Check ");
		fn_userlog(c_ServiceName,"Requset Type Is :%c:",c_type);
		fn_userlog(c_ServiceName,"Input date Is :%s:",c_trd_dt);
		fn_userlog(c_ServiceName,"Input date Is :%s:",c_inp_dt);
		fn_userlog(c_ServiceName,"Input date Is :%s:",c_tm_bnd);
  }
  /*** Ver 2.1 Starts ***/
  else if(c_type == 'S' )
  {
   MEMSET(c_tm_bnd);
   strcpy( c_ordr_rfrnc, "*" );
   strcpy( c_undrlyng, "*" );
   c_rqst_typ = 'S';
   l_stream_no = atol(argv[7]);
   strcpy(c_inp_dt,argv[6]);

   strcat(c_tm_bnd,c_trd_dt);
   strcat(c_tm_bnd," ");
   strcat(c_tm_bnd,c_inp_dt);
   fn_userlog(c_ServiceName,"Stream No Based Expiry Check ");
   fn_userlog(c_ServiceName,"Requset Type Is :%c:",c_type);
   fn_userlog(c_ServiceName,"Stream No Is :%ld:",l_stream_no);
   fn_userlog(c_ServiceName,"Input date Is :%s:",c_trd_dt);
   fn_userlog(c_ServiceName,"Input date Is :%s:",c_inp_dt);
   fn_userlog(c_ServiceName,"Input date Is :%s:",c_tm_bnd);
  }
  /*** Ver 2.1 Ends ***/
	fn_userlog(c_ServiceName,"Requset Type Is :%c:",c_type);

  /*** Usage for Stream No based expiry (req_typ == 'S')      ***
   *** "bat_fo_exp NFO NFO NA DD-Mon-YYYY S HH:MI:SS Stream_No" ***/

	if ( c_type == CLSOUT_EXPIRY )  
	{
		if( argc < 7 )
  	{
			fn_userlog(c_ServiceName,"With Request Type CLSOUT_EXPIRY U Must Enter Time");
    	fn_bat_pst_msg ( c_ServiceName, "Invalid Number of Arguments", c_tag );
      strcpy(c_error_txt,"With Request Type CLSOUT_EXPIRY U Must Enter Time");   /*** Ver 1.9 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /*** Ver 1.9 ***/
    	exit(0);
  	}

	}
  /*** Ver 2.1 Starts ***/
  
  if ( c_type == 'S' )
  {
    if( argc < 8 )
    {
      fn_userlog(c_ServiceName,"With Request Type 'S' U Must Enter Stream No");
      fn_bat_pst_msg ( c_ServiceName, "Invalid Number of Arguments", c_tag );
      strcpy(c_error_txt,"With Request Type 'S' U Must Enter Stream No"); 
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
      exit(0);
    }
  }

  /*** Ver 2.1 Ends ***/
	else if ( c_type != CLSOUT_EXPIRY && c_type != ORDER_SPECIFIC_EXPIRY && c_type != UNDRLYNG_EXPRY ) 
	{
		if( argc > 6 )
    {
      fn_userlog(c_ServiceName,"U Can't Run Expiry With Time Without Request Type CLSOUT_EXPIRY"); 
      fn_bat_pst_msg ( c_ServiceName, "Invalid Number of Arguments", c_tag );
      strcpy(c_error_txt,"U Can't Run Expiry With Time Without Request Type CLSOUT_EXPIRY");   /*** Ver 1.9 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /*** Ver 1.9 ***/  
      exit(0);
    }
    /*** Ver 2.1 Starts ***/
    if( argc > 7 && c_type != 'S' ) /*** c_type 'S' added in Ver 2.1 ***/
    {
      fn_userlog(c_ServiceName,"U Can't Run Expiry With Stream No Without Request Type Stream No Expiry(S)");
      fn_bat_pst_msg ( c_ServiceName, "Invalid Number of Arguments", c_tag );
      strcpy(c_error_txt,"U Can't Run Expiry With Time Without Request Type Stream No Expiry(S)");  
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); 
      exit(0);
    }
    /*** Ver 2.1 Ends ***/

	}

/*************************************
  fn_init_ddr_pop ( "NA", "NA", "NA" );
*************************************/

  EXEC SQL
    SELECT  EXG_CRRNT_STTS,
            EXG_NXT_TRD_DT
    INTO    :sql_exg_crrnt_stts,
            :sql_exg_nxt_trd_dt
    FROM    EXG_XCHNG_MSTR
    WHERE   EXG_XCHNG_CD = :sql_exg_xchng_cd;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName,"S31005",SQLMSG,c_err_msg);
    fn_exit ( c_ServiceName, "Unable to fetch exchange status ",'N');
    strcpy(c_error_txt,"Unable to fetch exchange status");   /*** Ver 1.9 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /*** Ver 1.9 ***/
	  return;
  }

  if ( sql_exg_crrnt_stts != EXPIRY  && c_rqst_typ != 'S') /*** c_rqst_typ 'S' added in Ver 2.1 ***/
  {
    fn_exit ( c_ServiceName, "Exchange not in Expiry mode - contact system support",'N');
    strcpy(c_error_txt,"Exchange not in Expiry mode - contact system support");   /*** Ver 1.9 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /*** Ver 1.9 ***/
		return;
  }
  
  i_dategreater = 0;
  
	EXEC SQL
    SELECT  1
    INTO    :i_dategreater
    FROM    dual
    WHERE   to_date( :sql_exg_nxt_trd_dt ,'DD-Mon-YYYY') >= to_date( :c_trd_dt, 'DD-Mon-YYYY' );

  if ( (SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog(c_ServiceName,"S31010",SQLMSG,c_err_msg);
    fn_exit ( c_ServiceName, "Unable to compare date ",'N');
    strcpy(c_error_txt,"Unable to compare date");   /*** Ver 1.9 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /*** Ver 1.9 ***/
	  return;
  }
  
  if ( i_dategreater == 1 && c_rqst_typ != CLSOUT_EXPIRY && c_rqst_typ != TEMP_EXPIRY && c_rqst_typ != 'S' ) /*1.7 check to be skipped for temp exp */ /* Stream Expiry check added in Ver 2.1 */
  {
		fn_userlog(c_ServiceName,"Inside Date Check");
    fn_exit ( c_ServiceName, "Next trade date cannot be <= to current trd dt",'N');
    strcpy(c_error_txt,"Next trade date cannot be <= to current trd dt");   /*** Ver 1.9 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /*** Ver 1.9 ***/
		return;
  }

	ptr_fml_buf = fn_create_rs ( c_ServiceName,
                               c_err_msg,
                               "SFO_GET_EXPREC",
                               TPNOTIME,
															 7,									/**1.1**/ /** changed to 7 from 6 in Ver 2.1 **/  
															 FFO_XCHNG_CD, ( char * )c_xchng_cd, 
                               FFO_TRD_DT, (char * )c_trd_dt, 
															 FFO_ORDR_RFRNC, (char *)c_ordr_rfrnc,
															 FFO_UNDRLYNG, (char *)c_undrlyng,					/**1.1**/
															 FFO_RQST_TYP, (char *)&c_rqst_typ,
															 FFO_TM_STMP, (char *)c_tm_bnd,         /***  Ver 1.7 ***/
                               FFO_DPM_NO, (char *)&l_stream_no);     /***  Ver 2.1 ***/
	if ( ptr_fml_buf == NULL )
	{
		fn_errlog( c_ServiceName, "S31015", LIBMSG, c_err_msg );
    strcpy(c_error_txt,"System error. Contact System Support");   /*** Ver 1.9 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /*** Ver 1.9 ***/
		return;
	}

	li_tot_rcrds = fn_reccnt_rs ( ptr_fml_buf,
                                c_ServiceName,
                                c_err_msg,
																FFO_ORDR_RFRNC );
	if ( li_tot_rcrds == -1 )
	{
		fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg );
		fn_dstry_rs ( ptr_fml_buf );
    strcpy(c_error_txt,"System error. Contact System Support");   /*** Ver 1.9 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /*** Ver 1.9 ***/ 
		return;
	}

	strcpy ( c_msg, "Data created." );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  sprintf ( c_msg, "Total records = %ld", li_tot_rcrds );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  /*** Commented in ver 1.4

  *************************************************************************************
  *********************************DT Broadcast Start**********************************
  *************************************************************************************
  ********* Get IPC KEY from ini file V1.2 ************
    strcpy ( c_filter_dt, "FML_EVENT == 'T3'");  *** V1.2 ***
    sprintf(c_FileName, "%s/%s", getenv("BIN"), FILE_NAME);
    fn_init_prcs_spc ( c_ServiceName,c_FileName,"cln_snd_tgw_F1"); ***Added T3 in Ver 1.3***
    ptr = (char *)fn_get_prcs_spc(c_ServiceName,"MSSG_QUE");
    ipc_key = atoi(ptr);
    fn_userlog(c_ServiceName,"IPC key got is %d ",ipc_key);
    strcpy(c_pgm_name, "cln_snd_tgw");
  *************************************************************************************
  *********************************DT Broadcast End************************************
  *************************************************************************************
 
  ****  End of ver 1.4 ***/

  for ( li_cnt=1; li_cnt<=li_tot_rcrds; li_cnt++ )
  {
		i_ch_val = fn_getnxt_rs ( ptr_fml_buf,
                              c_ServiceName,
                              c_err_msg,
															9,				/***	Ver	1.7	Changed From 7 To 8	***/
                              FFO_PIPE_ID, ( char * )c_pipe_id, NULL,
                              FFO_PRDCT_TYP, ( char * )&c_prd_typ, NULL,
															FFO_MDFCTN_CNTR, ( char * )&l_mdfctn_cntr, NULL,
                              FFO_ORDR_RFRNC, ( char * )c_ordr_rfrnc, NULL,
															FFO_ORD_TOT_QTY, ( char * )&l_ord_tot_qty, NULL,
															FFO_LMT_RT, ( char * )&l_lmt_rt, NULL,
															FFO_EBA_MTCH_ACT_NO, ( char * )c_cln_mtch_accnt, NULL,
															FFO_ORDR_STTS, ( char *)&c_ordr_stts, NULL,			/***	Ver	1.7	***/
															FFO_SPL_FLG,(char *)&c_spn_allwd,NULL);         /***  Ver 1.8 ***/
		if ( i_ch_val != 0 )
		{
			fn_errlog( c_ServiceName, "S31025", LIBMSG, c_err_msg );
			fn_dstry_rs ( ptr_fml_buf );
  		strcpy ( c_msg, "System error. Contact system support" );
  		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      strcpy(c_error_txt,"System error. Contact System Support");   /*** Ver 1.9 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /*** Ver 1.9 ***/ 
			return;
		}

		if(li_cnt % 100 == 1)
		{
			sprintf ( c_msg, "Processing record %ld of %ld", li_cnt, li_tot_rcrds );
 			fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		}

    i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                  c_err_msg,
                                  "sfr_beod_gtdt",
                                  li_cnt,
                                  li_tot_rcrds );
    if ( i_ch_val == -1 )
    {
			fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg );
			fn_dstry_rs ( ptr_fml_buf );
  		strcpy ( c_msg, "System error. Contact system support" );
  		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      strcpy(c_error_txt,"System error. Contact System Support");   /*** Ver 1.9 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /*** Ver 1.9 ***/
			return;
    }

/***************************************
    fn_cpy_ddr ( c_rout_crt ) ;
***************************************/
		
		 /*******Ver 1.8 ********/

  fn_userlog(c_ServiceName,"SPAN Allowed Flag Is :%c:",c_spn_allwd);

 	/*** if (c_spn_allwd == SPAN) - Commented in Ver 2.0 ***/
	if (c_spn_allwd == SPAN && c_prd_typ != FUTURE_PLUS)	/*** Ver 2.0 ***/
	{
		 i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                  c_err_msg,
                                  "SFO_SPN_PRC_EXP",
                                  0,
                                  11, 
                                  FFO_XCHNG_CD, ( char * )c_xchng_cd,
                                  FFO_PRDCT_TYP, ( char * )&c_prd_typ,
                                  FFO_ORDR_RFRNC, ( char * )c_ordr_rfrnc,
                                  FFO_MDFCTN_CNTR, ( char * )&l_mdfctn_cntr,
                                  FFO_PIPE_ID, ( char * )c_pipe_id,
                                  FFO_ORD_TOT_QTY, ( char * )&l_ord_tot_qty,
                                  FFO_LMT_RT, ( char * )&l_lmt_rt,
                                  FFO_BAT_TAG, ( char * )c_tag,
                                  FFO_REC_NO, ( char * )&li_cnt,
                                  FFO_EBA_MTCH_ACT_NO, ( char * )c_cln_mtch_accnt,
                                  FFO_ORDR_STTS, ( char *)&c_ordr_stts);   

    if ( i_ch_val == -1 )
    {
      fn_errlog( c_ServiceName, "S31035", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_buf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      strcpy(c_error_txt,"System error. Contact System Support");   /*** Ver 1.9 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /*** Ver 1.9 ***/
      return;
    }	
	}
	else
	{	
    i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                  c_err_msg,
                                  "SFO_PRCS_EXPREC",
                                  0,
																	11,			/***	Ver	1.7	Changed From 10 To 11 ***/
																	FFO_XCHNG_CD, ( char * )c_xchng_cd,
                              		FFO_PRDCT_TYP, ( char * )&c_prd_typ,
                              		FFO_ORDR_RFRNC, ( char * )c_ordr_rfrnc,
																	FFO_MDFCTN_CNTR, ( char * )&l_mdfctn_cntr,
                              		FFO_PIPE_ID, ( char * )c_pipe_id,
																	FFO_ORD_TOT_QTY, ( char * )&l_ord_tot_qty,
																	FFO_LMT_RT, ( char * )&l_lmt_rt,
																	FFO_BAT_TAG, ( char * )c_tag,
																	FFO_REC_NO, ( char * )&li_cnt,
															/*  FFO_IPC_KEY, ( char * )&ipc_key,  ver 1.4 */
																	FFO_EBA_MTCH_ACT_NO, ( char * )c_cln_mtch_accnt,
																	FFO_ORDR_STTS, ( char *)&c_ordr_stts);			/***	Ver	1.7	***/
																	
    if ( i_ch_val == -1 )
    {
			fn_errlog( c_ServiceName, "S31040", LIBMSG, c_err_msg );
			fn_dstry_rs ( ptr_fml_buf );
  		strcpy ( c_msg, "System error. Contact system support" );
  		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      strcpy(c_error_txt,"System error. Contact System Support");   /*** Ver 1.9 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /*** Ver 1.9 ***/
			return;
		}
	 } /******End Ver 1.8 ********/
  }/* End of For loop */

	fn_dstry_rs ( ptr_fml_buf );

	sprintf ( c_msg, "Batch process %s ended", argv[0] );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  return;
}

void fn_exit( char *c_ServiceName, char* c_err_msg, char c_mem_flg )
{
    fn_bat_pst_msg ( c_ServiceName, c_err_msg, c_tag );
    if( c_mem_flg == 'Y' )
    {
      tpabort(0);
    }
    return;
}

int fn_bat_init ( int argc, char *argv[] ) 
{
	fn_var = BAT_FO_EXP;
	return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
	return;
}

int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
	return 0;
}
