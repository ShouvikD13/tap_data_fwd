/*******************************************************************************/
/*   Service       : bat_gst_invoice_clck.pc                                       */
/*                                                                             */
/*   Purpose       : Bulk upload of FNO Margin Details to click database tables*/
/*                                                                             */
/*   Input Param   : For date                                                  */
/*                                                                             */
/*   Output        : Success/Failure                                           */
/*                                                                             */
/*   Author        : Bhupendra Malik |  Infotech                               */
/*                                                                             */
/*   Date          : 23-06-2017                                                */
/*                                                                             */
/*   Version       : 1.0      Release                                          */
/*	 Version			 : 1.1      GST_INVOICE_CLICK Mailer Changes								 */
/*	 Version			 : 1.2      Invoice upload to click based on trade date for  */
/*                            CNTRCT and CECNTR products & Provision of OTDBTR */        
/*   09-Oct-2020   : 1.3      CR-ISEC03-134027 Changes in GST invoice to 			 */
/*														incorporate IRN and QR code(Sandip T)						 */
/*	 Version			 : 1.4      Minor Changes CR -Transaction Time chnage			 	 */
/*******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <Usysflds.h>
#include <fml_def.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fml_rout.h>
#include <fn_ddr.h>
#include <string.h>
#include <eba.h>
#include <fn_read_debug_lvl.h>
#define TRAN_TIME 1000			/** Ver 1.4 500 -> 1000**/

#define SQLROWCOUNT  sqlca.sqlerrd[2]

char  c_ServiceName[33];
char  c_errmsg [ 256 ];

void fn_gst_invoice_click_mailer(char *c_prduct_cd, char *c_upd_status, long *l_count, char *c_date);  /*** Ver 1.1 ***/

void BAT_GST_INVOICE_CLCK (int argc, char* argv[] )
{
	
	int   i_trnsctn = 0;
	int   i_err[3];
	char  c_msg[256];
	char  c_prduct_cd[7];
  char  c_date[12];

	int   i_pr_stts=1;
	int   i_mode=1;
	/*** Ver 1.1 Starts here ***/
	char  stts_F = 'F';		
  char  stts_S = 'S';		
	long 	l_count = 0;
	/*** Ver 1.1 Ends ***/

	MEMSET (c_date);
	MEMSET(c_prduct_cd);
	strcpy(c_ServiceName, "bat_gst_invoice_clck");

	sprintf ( c_msg, "Batch process %s started", argv[0] );
	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
	
	strcpy(c_date,argv[4]);
	strcpy(c_prduct_cd,argv[5]);
	
	fn_userlog(c_ServiceName,"Invoice Upload For  :%s:",c_prduct_cd);
	fn_userlog(c_ServiceName,"Invoice Upload Date :%s:",c_date);

	if (argc != 6)
	{
		sprintf(c_msg,"Usage: %s <NFO> <NFO> <NA> <TRADE DATE> <PRDUCT CD> ",argv[0]);
		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		fn_userlog (c_ServiceName,"Usage : <bat_temp_clck> <NFO> <NFO> <NA> <TRADE DATE> <PRDUCT CD> ");
		fn_gst_invoice_click_mailer(c_prduct_cd, &stts_F, &l_count,c_date);  /*** Ver 1.1 ***/
		return;
	}

	INITBATDBGLVL(argv[0]);

	if ( strcmp(c_prduct_cd,"CNTRCT") == 0 )
	{
		EXEC  SQL
			EXECUTE
				BEGIN
					RESET_SEQUENCE('SEQ_CONTR_TAX_CLK');
				END;
		END-EXEC;

		if(SQLCODE != 0)
		{
			fn_errlog(c_ServiceName,"S31005",SQLMSG,c_errmsg);
			fn_userlog(c_ServiceName,"Unable to reset Sequence - Contact system support");
			fn_gst_invoice_click_mailer(c_prduct_cd, &stts_F, &l_count,c_date);  /*** Ver 1.1 ***/
			return;
		}
	}
  else if ( strcmp(c_prduct_cd,"CECNTR") == 0)
  {
    EXEC  SQL
      EXECUTE
        BEGIN
          RESET_SEQUENCE('SEQ_OTHR_CECNTR_CLK');
      END;
    END-EXEC;

    if(SQLCODE != 0)
    {
      fn_errlog(c_ServiceName,"S31010",SQLMSG,c_errmsg);
      fn_userlog(c_ServiceName,"Unable to reset Sequence - Contact system support");
			fn_gst_invoice_click_mailer(c_prduct_cd, &stts_F, &l_count, c_date);  /*** Ver 1.1 ***/
      return;
    }
  }
	else if ( strcmp(c_prduct_cd,"CRMEMO") == 0)
	{
		EXEC  SQL
    	EXECUTE
      	BEGIN
        	RESET_SEQUENCE('SEQ_CRDT_MEMO_CLK');
     	END;
    END-EXEC;
 
	 	if(SQLCODE != 0)
  	{
    	fn_errlog(c_ServiceName,"S31015",SQLMSG,c_errmsg);
    	fn_userlog(c_ServiceName,"Unable to reset Sequence - Contact system support");
			fn_gst_invoice_click_mailer(c_prduct_cd, &stts_F, &l_count, c_date);  /*** Ver 1.1 ***/
    	return;
  	}
	}
	else if ( strcmp(c_prduct_cd,"CRNOTE") == 0)
	{
		EXEC  SQL
    	EXECUTE
      	BEGIN
        	RESET_SEQUENCE('SEQ_CRDT_NOTE_CLK');
      END;
    END-EXEC;

  	if(SQLCODE != 0)
  	{
    	fn_errlog(c_ServiceName,"S31020",SQLMSG,c_errmsg);
    	fn_userlog(c_ServiceName,"Unable to reset Sequence - Contact system support");
			fn_gst_invoice_click_mailer(c_prduct_cd, &stts_F, &l_count, c_date);  /*** Ver 1.1 ***/
    	return;
  	}
	}
	else if ( strcmp(c_prduct_cd,"RCVCHR") == 0)
	{
		EXEC  SQL
    	EXECUTE
      	BEGIN
        	RESET_SEQUENCE('SEQ_RCPT_VCHR_CLK');
      	END;
   	END-EXEC;

  	if(SQLCODE != 0)
  	{
   		fn_errlog(c_ServiceName,"S31025",SQLMSG,c_errmsg);
    	fn_userlog(c_ServiceName,"Unable to reset Sequence - Contact system support");
			fn_gst_invoice_click_mailer(c_prduct_cd, &stts_F, &l_count, c_date);  /*** Ver 1.1 ***/
    	return;
  	}
	}
	else if ( strcmp(c_prduct_cd,"PYVCHR") == 0)
	{
		EXEC  SQL
    	EXECUTE
      	BEGIN
        	RESET_SEQUENCE('SEQ_PMNT_VCHR_CLK');
      END;
    END-EXEC;

  	if(SQLCODE != 0)
  	{
    	fn_errlog(c_ServiceName,"S31030",SQLMSG,c_errmsg);
    	fn_userlog(c_ServiceName,"Unable to reset Sequence - Contact system support");
			fn_gst_invoice_click_mailer(c_prduct_cd, &stts_F, &l_count,c_date);  /*** Ver 1.1 ***/
    	return;
  	}
	}
	else if ( strcmp(c_prduct_cd,"OTHRDB") == 0 )
	{
		EXEC  SQL
    	EXECUTE
      	BEGIN
        	RESET_SEQUENCE('SEQ_OTHR_DBIT_CLK');
      END;
    END-EXEC;

  	if(SQLCODE != 0)
  	{
    	fn_errlog(c_ServiceName,"S31035",SQLMSG,c_errmsg);
    	fn_userlog(c_ServiceName,"Unable to reset Sequence - Contact system support");
			fn_gst_invoice_click_mailer(c_prduct_cd, &stts_F, &l_count,c_date);  /*** Ver 1.1 ***/
    	return;
  	}
 	}
  /*** Ver 1.2 Starts here ***********/
  else if ( strcmp(c_prduct_cd,"OTDBTR") == 0 )
  {
    EXEC  SQL
      EXECUTE
        BEGIN
          RESET_SEQUENCE('SEQ_OTDBTR_CLK');
      END;
    END-EXEC;

    if(SQLCODE != 0)
    {
      fn_errlog(c_ServiceName,"S31040",SQLMSG,c_errmsg);
      fn_userlog(c_ServiceName,"Unable to reset Sequence - Contact system support");
      fn_gst_invoice_click_mailer(c_prduct_cd, &stts_F, &l_count,c_date);  /*** Ver 1.1 ***/
      return;
    }
  }  /** Ver 1.2 Ends Here ***/ 
	else
	{
		fn_errlog(c_ServiceName,"S31045",LIBMSG,c_errmsg);
		fn_userlog(c_ServiceName,"incorrect procduct type - Contact system support");
		fn_gst_invoice_click_mailer(c_prduct_cd, &stts_F, &l_count,c_date);  /*** Ver 1.1 ***/
		return;
	}	

  i_trnsctn = tpbegin(TRAN_TIME,0);
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName,"S31050",LIBMSG,c_errmsg);
    fn_userlog(c_ServiceName,"Unable to start transaction - Contact system support");
		fn_gst_invoice_click_mailer(c_prduct_cd, &stts_F, &l_count,c_date);  /*** Ver 1.1 ***/
    return;
  }	
	EXEC SQL DELETE FROM TEMP_INM_INVOICE_NMBR_MSTR WHERE INM_PRODUCT_CD=:c_prduct_cd;

	if( SQLCODE != 0 && SQLCODE !=NO_DATA_FOUND)
	{
		fn_errlog(c_ServiceName,"S31055",SQLMSG,c_errmsg);
		fn_userlog(c_ServiceName,"Unable to truncate temp table - Contact system support");
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		fn_gst_invoice_click_mailer(c_prduct_cd, &stts_F, &l_count,c_date);  /*** Ver 1.1 ***/
		return;
	}

	EXEC SQL
		INSERT INTO TEMP_INM_INVOICE_NMBR_MSTR
    (
        INM_REC_NO,
        INM_INV_NO,
        INM_INV_DT,
        INM_MATCH_ACCT,
        INM_PRODUCT_CD,
        INM_CUST_GSTN_NO,
        INM_CUST_NAME,
        INM_CLNT_TYPE,
        INM_CUST_ADDR,
        INM_CUST_STATE,
        INM_CUST_CONTRY,
        INM_CUST_STATE_CD,
        INM_ISEC_STATE_CD,
        INM_ISEC_BRANCH_CD,
        INM_ISEC_GSTN_NO,
        INM_HSN_CODE,
        INM_SERVICE_DESC,
        INM_TOTAL_BRKG,
        INM_TOTAL_SEBI_CHRGS,
        INM_TOTAL_TRNSCTN_CHRGS,
        INM_TOTAL_CGST,
        INM_TOTAL_SGST,
        INM_TOTAL_UGST,
        INM_TOTAL_IGST,
        INM_TOTAL_INV_VAL,
        INM_CGST_PRCNT,
        INM_SGST_PRCNT,
        INM_UGST_PRCNT,
        INM_IGST_PRCNT,
        INM_CRDT_NOTE_NMBR,
        INM_SUB_PRODUCT_CD,
        INM_SUB_PRODUCT_DESC,
        INM_TRADE_DT,
        INM_ORGNL_INV_NO,
        INM_ORGNL_INV_DT,
        INM_NET_TOTAL_CHRGS,
        INM_TOTAL_INV_VAL_INWORDS
      )
     (
      SELECT
        DECODE(INM_PRODUCT_CD,'CNTRCT',SEQ_CONTR_TAX_CLK.NEXTVAL,
															'CECNTR',SEQ_OTHR_CECNTR_CLK.NEXTVAL,
                              'CRMEMO',SEQ_CRDT_MEMO_CLK.NEXTVAL,
                              'CRNOTE',SEQ_CRDT_NOTE_CLK.NEXTVAL,
                              'RCVCHR',SEQ_RCPT_VCHR_CLK.NEXTVAL,
                              'PYVCHR',SEQ_PMNT_VCHR_CLK.NEXTVAL,
                              'OTHRDB',SEQ_OTHR_DBIT_CLK.NEXTVAL,
                              'OTDBTR',SEQ_OTDBTR_CLK.NEXTVAL,0),  /** ver 1.2 OTDBTR added ***/
        INM_INV_NO,
        INM_INV_DT,
        INM_MATCH_ACCT,
        INM_PRODUCT_CD,
        INM_CUST_GSTN_NO,
        INM_CUST_NAME,
        INM_CLNT_TYPE,
        INM_CUST_ADDR,
        INM_CUST_STATE,
        INM_CUST_CONTRY,
        DECODE(INM_CUST_STATE_CD,'AP','27','NR','27',INM_CUST_STATE_CD),
        INM_ISEC_STATE_CD,
        INM_ISEC_BRANCH_CD,
        INM_ISEC_GSTN_NO,
        INM_HSN_CODE,
        INM_SERVICE_DESC,
        INM_TOTAL_BRKG,
        INM_TOTAL_SEBI_CHRGS,
        INM_TOTAL_TRNSCTN_CHRGS,
        NVL(INM_TOTAL_CGST,0),    /** Ver 1.2, NVL added **/
        NVL(INM_TOTAL_SGST,0),    /** Ver 1.2, NVL added **/
        NVL(INM_TOTAL_UGST,0),    /** Ver 1.2, NVL added **/
        NVL(INM_TOTAL_IGST,0),    /** Ver 1.2, NVL added **/
        /*INM_TOTAL_INV_VAL,			/** Ver 1.3 comment **/
				case when :c_prduct_cd in ('CNTRCT','CECNTR') then
        					(INM_NET_TOTAL_CHRGS+INM_TOTAL_INV_VAL)
						else INM_TOTAL_INV_VAL
				end,	/** Ver 1.3 **/
        NVL(INM_CGST_PRCNT,0),    /** Ver 1.2, NVL added **/
        NVL(INM_SGST_PRCNT,0),    /** Ver 1.2, NVL added **/
        NVL(INM_UGST_PRCNT,0),    /** Ver 1.2, NVL added **/
        NVL(INM_IGST_PRCNT,0),    /** Ver 1.2, NVL added **/
        INM_CRDT_NOTE_NMBR,
        INM_SUB_PRODUCT_CD,
        INM_SUB_PRODUCT_DESC,
        INM_TRADE_DT,
        INM_ORGNL_INV_NO,
        INM_ORGNL_INV_DT,
        INM_NET_TOTAL_CHRGS,
        /*AMT_IN_WORDS(INM_TOTAL_INV_VAL)					** Ver 1.3 comment **/
        case when :c_prduct_cd in ('CNTRCT','CECNTR') then 
							AMT_IN_WORDS(INM_NET_TOTAL_CHRGS+INM_TOTAL_INV_VAL)
						 else
							AMT_IN_WORDS(INM_TOTAL_INV_VAL)
				end																				/** Ver 1.3 **/	
   FROM INM_INVOICE_NMBR_MSTR
  /*** WHERE INM_INV_DT=:c_date *** ver 1.2 ***/
       WHERE (  /*** Ver 1.2 Starts Here ***/
              (:c_prduct_cd IN ('CNTRCT','CECNTR') AND INM_TRADE_DT = :c_date) OR
              (:c_prduct_cd NOT IN ('CNTRCT','CECNTR') AND INM_INV_DT = :c_date) 
             )  /*** Ver 1.2 Ends Here ***/
	AND 	INM_PRODUCT_CD=:c_prduct_cd  
  ); 
	
	if( SQLCODE != 0)
	{
		fn_errlog(c_ServiceName,"S31060",SQLMSG,c_errmsg);
		fn_userlog(c_ServiceName,"Unable to insert into temp table- Contact system support");
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); 
		fn_gst_invoice_click_mailer(c_prduct_cd, &stts_F, &l_count,c_date);  /*** Ver 1.1 ***/
		return;
	}

	i_trnsctn =  tpcommit(0);

  if ( i_trnsctn  == -1 )
  {
    fn_errlog(c_ServiceName,"S31065",SQLMSG,c_errmsg);
    fn_userlog(c_ServiceName,"Unable to commit transaction- Contact system support");
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		fn_gst_invoice_click_mailer(c_prduct_cd, &stts_F, &l_count,c_date);  /*** Ver 1.1 ***/
    return;
  }

	EXEC SQL
		INSERT INTO INM_INVOICE_NMBR_MSTRCLK@CLICKDB
    (
				INM_REC_NO,
     		INM_INV_NO,
        INM_INV_DT,
        INM_MATCH_ACCT,
        INM_PRODUCT_CD,
        INM_CUST_GSTN_NO,
        INM_CUST_NAME,
        INM_CLNT_TYPE,
        INM_CUST_ADDR,
        INM_CUST_STATE,
        INM_CUST_CONTRY,
        INM_CUST_STATE_CD,
        INM_ISEC_STATE_CD,
        INM_ISEC_BRANCH_CD,
        INM_ISEC_GSTN_NO,
        INM_HSN_CODE,
        INM_SERVICE_DESC,
        INM_TOTAL_BRKG,
        INM_TOTAL_SEBI_CHRGS,
        INM_TOTAL_TRNSCTN_CHRGS,
        INM_TOTAL_CGST,
        INM_TOTAL_SGST,
        INM_TOTAL_UGST,
        INM_TOTAL_IGST,
        INM_TOTAL_INV_VAL,
        INM_CGST_PRCNT,
        INM_SGST_PRCNT,
        INM_UGST_PRCNT,
        INM_IGST_PRCNT,
        INM_CRDT_NOTE_NMBR,
        INM_SUB_PRODUCT_CD,
        INM_SUB_PRODUCT_DESC,
        INM_TRADE_DT,
        INM_ORGNL_INV_NO,
        INM_ORGNL_INV_DT,
        INM_NET_TOTAL_CHRGS,
        INM_TOTAL_INV_VAL_INWORDS
      )
     (
      SELECT
				INM_REC_NO,
        INM_INV_NO,
        INM_INV_DT,
        INM_MATCH_ACCT,
        INM_PRODUCT_CD,
        INM_CUST_GSTN_NO,
        INM_CUST_NAME,
        INM_CLNT_TYPE,
        INM_CUST_ADDR,
        INM_CUST_STATE,
        INM_CUST_CONTRY,
        INM_CUST_STATE_CD,
        INM_ISEC_STATE_CD,
        INM_ISEC_BRANCH_CD,
        INM_ISEC_GSTN_NO,
        INM_HSN_CODE,
        INM_SERVICE_DESC,
        INM_TOTAL_BRKG,
        INM_TOTAL_SEBI_CHRGS,
        INM_TOTAL_TRNSCTN_CHRGS,
        INM_TOTAL_CGST,
        INM_TOTAL_SGST,
        INM_TOTAL_UGST,
        INM_TOTAL_IGST,
        INM_TOTAL_INV_VAL,
        INM_CGST_PRCNT,
        INM_SGST_PRCNT,
        INM_UGST_PRCNT,
        INM_IGST_PRCNT,
        INM_CRDT_NOTE_NMBR,
        INM_SUB_PRODUCT_CD,
        INM_SUB_PRODUCT_DESC,
        INM_TRADE_DT,
        INM_ORGNL_INV_NO,
        INM_ORGNL_INV_DT,
        INM_NET_TOTAL_CHRGS,
        INM_TOTAL_INV_VAL_INWORDS
   FROM TEMP_INM_INVOICE_NMBR_MSTR
  /*** WHERE INM_INV_DT=:c_date *** Ver 1.2 ***/
   WHERE (  /*** Ver 1.2 Starts Here ***/
           (:c_prduct_cd IN ('CNTRCT','CECNTR') AND INM_TRADE_DT = :c_date) OR
           (:c_prduct_cd NOT IN ('CNTRCT','CECNTR') AND INM_INV_DT = :c_date)
          )  /*** Ver 1.2 Ends Here ***/ 
	AND   INM_PRODUCT_CD=:c_prduct_cd
  );
  if ( (SQLCODE !=0 ) && ( SQLCODE != NO_DATA_FOUND ))
  {
		fn_errlog(c_ServiceName,"S31070",SQLMSG,c_errmsg);
		fn_userlog(c_ServiceName,"Unable to insert into clickdb - Contact System support");
	  EXEC SQL ROLLBACK;	
		fn_gst_invoice_click_mailer(c_prduct_cd, &stts_F, &l_count,c_date);  /*** Ver 1.1 ***/
    return;
  }

  fn_userlog(c_ServiceName," No Records Inserted in INM_INVOICE_NMBR_MSTRCLK :%ld:",SQLROWCOUNT);

	l_count = SQLROWCOUNT;  /*** Ver 1.1 ***/

	if ( (strcmp(c_prduct_cd,"CNTRCT") == 0) || (strcmp(c_prduct_cd,"CECNTR") == 0) )
	{ 
		EXEC SQL
			INSERT INTO IND_INVOICE_NMBR_DTLSCLK@CLICKDB
  		(	
					IND_INV_NO,
					IND_MATCH_ACCT,
					IND_TRADE_DATE,
					IND_EXCNG_CD,
					IND_XCHNG_SGMNT_CD,
					IND_TRN_FLW,
					IND_PARTICULARS,
					IND_CNTRCT_NOTE_NMBR,
					IND_BRKG_AMT,
					IND_TRNSCTN_CHRGS,
					IND_SEBI_CHRGS,
					IND_TOTAL_CHRGS,
					IND_CGST_AMT,
					IND_SGST_AMT,
					IND_UGST_AMT,
					IND_IGST_AMT,
					IND_NET_AMT
	   		) 
	    	(
	 			SELECT 
					IND_INV_NO,
					IND_MATCH_ACCT,
					IND_TRADE_DATE,
					IND_EXCNG_CD,
					IND_XCHNG_SGMNT_CD,
					IND_TRN_FLW,
					IND_PARTICULARS,
					IND_CNTRCT_NOTE_NMBR,
					IND_BRKG_AMT,
					IND_TRNSCTN_CHRGS,
					IND_SEBI_CHRGS,
					IND_TOTAL_CHRGS,
					IND_CGST_AMT,
					IND_SGST_AMT,
					IND_UGST_AMT,
					IND_IGST_AMT,
					/*IND_NET_AMT								** Ver 1.3 comment **/
					case when :c_prduct_cd IN ('CNTRCT','CECNTR') then
								(IND_TOTAL_CHRGS+IND_NET_AMT)
								else IND_NET_AMT
					end				/** Ver 1.3 **/
		FROM  IND_INVOICE_NMBR_DTLS,TEMP_INM_INVOICE_NMBR_MSTR
    WHERE IND_INV_NO =  INM_INV_NO 
		AND   INM_PRODUCT_CD = :c_prduct_cd
		 /*** AND INM_INV_DT =:c_date *** ver 1.2 ***/
    AND   (  /*** Ver 1.2 Starts Here ***/
           (:c_prduct_cd IN ('CNTRCT','CECNTR') AND INM_TRADE_DT = :c_date) OR
           (:c_prduct_cd NOT IN ('CNTRCT','CECNTR') AND INM_INV_DT = :c_date)
          )  /*** Ver 1.2 Ends Here ***/ 
		);
	
		if ( ( SQLCODE !=0 ) && ( SQLCODE != NO_DATA_FOUND ))
		{
			l_count = 0;		/*** Ver 1.1 ***/
			fn_errlog(c_ServiceName,"S31075",SQLMSG,c_errmsg);
			fn_userlog(c_ServiceName,"System error - Contact System support");
		  EXEC SQL ROLLBACK;	
			fn_gst_invoice_click_mailer(c_prduct_cd, &stts_F, &l_count,c_date);  /*** Ver 1.1 ***/              
			return;
		}
    fn_userlog(c_ServiceName," No Records Inserted in IND_INVOICE_NMBR_DTLSCLK :%ld:",SQLROWCOUNT); 
	}

	EXEC SQL
		INSERT INTO
        MAIL_LOG_HEADER@CLICKDB
        (
          DOC_TYPE,
          STMTDT,
          SEQ_NO,
          PR_STATUS
        )
        VALUES
        (
          :c_prduct_cd,
          :c_date,
          :i_mode,
          :i_pr_stts
         );
		if (SQLCODE !=0 ) 
		{
			l_count = 0;    /*** Ver 1.1 ***/
			fn_errlog(c_ServiceName,"S31080",SQLMSG,c_errmsg);
			fn_userlog(c_ServiceName,"System error - Contact System support");
		  EXEC SQL ROLLBACK;	
			fn_gst_invoice_click_mailer(c_prduct_cd, &stts_F, &l_count,c_date);  /*** Ver 1.1 ***/              
			return;
		}
	  fn_userlog(c_ServiceName," No Records Inserted in MAIL_LOG_HEADER :%ld:",SQLROWCOUNT);	
		EXEC SQL COMMIT;
		if(SQLCODE != 0)
		{
			l_count = 0;    /*** Ver 1.1 ***/
			fn_errlog(c_ServiceName,"S31085",SQLMSG,c_errmsg);
			fn_gst_invoice_click_mailer(c_prduct_cd, &stts_F, &l_count,c_date);  /*** Ver 1.1 ***/	
			return;
		}	
	fn_gst_invoice_click_mailer(c_prduct_cd, &stts_S, &l_count, c_date);  /*** Ver 1.1 ***/
	fn_userlog(c_ServiceName,"Test Condition 3 ************");
	return; 
}

int fn_bat_init ( int argc, char *argv[] )
  {
    fn_var = BAT_GST_INVOICE_CLCK;
    return 0;
  }

void fn_bat_term ( int argc, char *argv[] )
  {
    return;
  }

int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
  {
    return 0;
  }

/*** Ver 1.1 Starts here ***/
void fn_gst_invoice_click_mailer(char *c_prduct_cd, char *c_upd_status, long *l_count, char *c_date)
{
  char c_command[500] = {'\0'};

  rtrim(c_prduct_cd);
  rtrim(c_upd_status);
	rtrim(c_date);
  fn_userlog("BAT_GST_INVOICE_CLCK","Product code is :%s:",c_prduct_cd);
	fn_userlog("BAT_GST_INVOICE_CLCK","Invoice_Date:%s:",c_date);

  sprintf( c_command,"ksh $HOME/sh_scripts/gst_invoice_clck_mis.sh '%s' '%c' '%ld' '%s'",c_prduct_cd, *c_upd_status,*l_count, c_date);
  system(c_command);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog("BAT_GST_INVOICE_CLCK","System End");
  }

}
/*** Ver 1.1 Ends ***/
