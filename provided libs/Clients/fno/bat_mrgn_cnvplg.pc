/******************************************************************************/
/*  Program           : BAT_MRGN_CNVPLG                                       */
/*                                                                            */
/*  Input             : <bat_mrgn_cnvplg>												                */
/*                                                                            */
/*  Output            :  Integer 1 on sucess and 0 on fail                    */
/*                                                                            */
/*  Description       :  This bat process take Standard  inputs		  			    */
/*                                                                            */
/* This batch process update PTD_PLG_TIFP_DTLS table												  */
/*  										                                                      */
/*                                                                            */
/*  Log               : 1.0   13-Jul-2020   Infotech|Samip M									*/
/******************************************************************************/
/*   1.0  -  New release                                                      */
/******************************************************************************/

#include "fn_collateral.h"
#include <fn_read_debug_lvl.h>
#define	WITHDRAW	'W'
#define	PLG	'P'
#define	INV	'I'

EXEC SQL INCLUDE "table/tpd_ptd_tbl.h";

int main (int argc , char* argv[])
{
		int		i_trnsctn;
		int		i_count;
		int		flag =0, i=0;
		int   count=0;
		int   i_haircut=0;
		int   i_counter = 0;
    int   i_dp_flg=0;

		char	c_plg_rev_typ;

 		char  c_channel[4];
		char  c_bpid[9];
		char	c_clm_mtch_accnt[11];
		char	c_dp_id[9];
		char	c_dp_clnt_id[9];
		char	c_isin_no[13];
		char	c_stck_cd[7];
		char	c_ServiceName [ 33 ];
		char	c_err_msg[256];
		char  c_msg[256+1];
		char	c_ordr_no[19];
		char	C_iwtl_dp_accnt[18];
		char 	ch_tm[25];
		char	c_rmrks[256];
  	/**	char	c_dpm_no[10 +1];  --commented for ver 1.5  **/
		char  c_dpm_no[14 +1]; /** ver 1.5 **/
		char	c_pod_ref_no[18 +1];
		char	c_tifp_run_dt[22];
		char	c_agree_nmbr[40 + 1];
		char	c_iwtl_dp_accnt[17+1];
    char  c_cdsl_iwtl_dp_accnt[18]; /* Added Ver 1.6 */
		char	c_ordr_dt[22];
		char  c_tag[32];
    varchar c_usr_id[7];

		long	l_ordr_qty;
		long  l_plg_req_qty;
		long  l_tifp_qty;
		long  l_rev_req_qty;
		long  l_inv_req_qty;
		long	l_free_qty;
		long	l_plg_vs_wd_qty;	
		long	l_rqst_qty;
		long	l_plg_req_qty_chng;
		long	l_tifp_qty_chng;
		long	l_rev_req_qty_chng;
		long	l_inv_req_qty_chng;
		long  l_pod_qty;
		long  l_rev_cov_qty;
		long  l_inv_cov_qty;

 		double d_ordr_val =0;
 		double d_conf_qty =0;
 		double d_rjct_qty =0;

 		FBFR32 *ptr_fml_Ibuf1;
  	FBFR32 *ptr_fml_Obuf1;

		int l_pod_cnt = 0;
		int l_plg_cnt = 0;
		int i_ptd_cnt = 0;
		varchar sql_execn_dt[13];
		char c_plg_typ;
		char c_operation_typ;
		int  i_err[11];
		long l_ip_len = 0;
		int i_returncode = 0;
		int j = 0;
		int i_cutoff_exist = 0;
		

		NULLCHAR(c_ServiceName);
		NULLCHAR(c_tag);
		NULLCHAR(c_clm_mtch_accnt);
		NULLCHAR(c_stck_cd);

		strcpy(c_ServiceName ,"bat_mrgn_cnvplg");

		INITBATDBGLVL(argv[0]);			/*** Ver 1.3 ***/

		if(argc != 8)
		{
				fn_userlog(c_ServiceName, "Usage: bat_mrgn_cnvplg <Config File> <Exchange Cd> \
				<Pipe Id> <MatchAccount> <stock code> < Pledge Type> <Operation Type>");
				exit(-1);
		}

		strcpy( c_msg, "STAGE 1.0 Starting BAT_MRGN_CNVPLG...");
		fn_userlog( c_ServiceName,c_msg);
		fn_userlog( c_ServiceName,"config File :%s:"   ,argv[1]);
		fn_userlog( c_ServiceName,"Exchange Code :%s:" ,argv[2]);
		fn_userlog( c_ServiceName,"Pipe Id :%s:"       ,argv[3]);

		sprintf(c_tag,"%s_%s",c_ServiceName,argv[1]);

		init_bat(c_ServiceName,argv[2],argv[3]);

		if (DEBUG_MSG_LVL_3)			/*** Ver 1.3  ***/
		{
			fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
		}

		if ( (strcmp(argv[4],"A") == 0) || (strcmp(argv[4],"*") == 0) )
				strcpy(c_clm_mtch_accnt,"%");
		else
				strcpy(c_clm_mtch_accnt,argv[4]);

		if( (strcmp(argv[5],"A") == 0) || (strcmp(argv[5],"*") == 0) )
				strcpy(c_stck_cd,"%");
		else
				strcpy(c_stck_cd,argv[5]);

		/** if( (strcmp(argv[6],"A") == 0) || (strcmp(argv[6],"*") == 0) )
				c_plg_rev_typ = '%';
		else ***/

		c_plg_rev_typ = (char) argv[6][0];

    if ( c_plg_rev_typ == 'P')
        c_plg_typ = 'P';
    else if ( c_plg_rev_typ == 'R')
        c_plg_typ = 'W';
    else if ( c_plg_rev_typ = 'I')
        c_plg_typ = 'I';
    else
    {
          strcpy(c_err_msg,"Invalid Pledge Type must be P,R or I");
          fn_userlog(c_ServiceName,c_err_msg );
          destroy_bat();
    }

		c_operation_typ = (char) argv[7][0];


		if(c_operation_typ!='R' && c_operation_typ != 'C')
		{
          strcpy(c_err_msg,"Invalid Operation Type must be R or C");
          fn_userlog(c_ServiceName,c_err_msg );
          destroy_bat();
		}

		if (DEBUG_MSG_LVL_3)			/*** Ver 1.3  ***/
		{ 
			fn_userlog( c_ServiceName,"Match Account :%s:" ,c_clm_mtch_accnt);
			fn_userlog( c_ServiceName,"Stock Code :%s"     ,c_stck_cd);
			fn_userlog( c_ServiceName,"Pledge Type :%c:"   ,c_plg_rev_typ);
			fn_userlog( c_ServiceName,"Pledge Type :%c:"   ,c_plg_typ);
		}

		ptr_fml_Ibuf1 = (FBFR32 *)NULL;
  	ptr_fml_Obuf1 = (FBFR32 *)NULL;

		fn_userlog(c_ServiceName,"Parameter passed c_operation_typ :%c: and c_plg_rev_typ :%c:",c_operation_typ,c_plg_rev_typ);

  	ptr_fml_Ibuf1 = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  	if ( ptr_fml_Ibuf1 == NULL )
  	{
				fn_errlog( c_ServiceName, "S31005", TPMSG , c_err_msg  );
				fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
				destroy_bat();
  	}

  	ptr_fml_Obuf1 = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  	if ( ptr_fml_Obuf1 == NULL )
  	{
				fn_errlog( c_ServiceName, "S31010", TPMSG , c_err_msg  );
				fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
				destroy_bat();
  	}

		/***
		i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

		if ( i_trnsctn == -1 )
		{
				fn_errlog( c_ServiceName, "S31015", TPMSG , c_err_msg  );
				fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
				destroy_bat();
		}
		***/

    MEMSET (sql_execn_dt);

		/*** Commented for Cutoff ****
		EXEC SQL
			SELECT TO_CHAR(SYSDATE)
			INTO :sql_execn_dt
			FROM DUAL;

		*** Cutoff ***/

  	EXEC SQL
    	SELECT COUNT(1)
    	INTO :i_cutoff_exist
    	FROM PPP_PAR_PLG_PRMTR
    	WHERE NVL(PPP_CUT_OFF_TIME,24) <= TO_CHAR(SYSDATE,'HH24');

   	if(SQLCODE != 0)
   	{
      fn_errlog(c_ServiceName, "S31020", SQLMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      destroy_bat();
    }

  	if(i_cutoff_exist == 0)
  	{

    	EXEC SQL
      	SELECT TO_CHAR(SYSDATE,'DD-Mon-YYYY')
      	INTO  :sql_execn_dt
      	FROM  DUAL;

  	}
  	else
  	{
    	EXEC SQL
      	SELECT TO_CHAR(MIN(SPD_TRD_FRM_DT),'DD-Mon-YYYY')
      	INTO  :sql_execn_dt
      	FROM SPD_STTLMNT_PRCS_DTLS
      	WHERE SPD_TRD_FRM_DT>TRUNC(SYSDATE)
      	AND SPD_XCHNG_CD='BSE';
  	}

   	if(SQLCODE != 0)
   	{
      fn_errlog(c_ServiceName, "S31025", SQLMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      destroy_bat();
    }

    SETLEN(sql_execn_dt);
    SETNULL(sql_execn_dt);

		switch(c_operation_typ)
		{
			case 'R':

			fn_userlog(c_ServiceName,"Inside the flow of Request");
			/** if(c_plg_rev_typ == 'P')
			{ **/

				fn_userlog(c_ServiceName,"Pledge Type for Request :%c:",c_plg_rev_typ);
			
				EXEC SQL
					SELECT COUNT(1)
					INTO :l_pod_cnt
					FROM POD_PLG_ORDR_DTLS_CNV
          WHERE 
          POD_PLG_REV_TYP = :c_plg_typ
          AND POD_ORDR_STTS = 'R'
					AND POD_ORDR_QTY - NVL(POD_PRCSD_QTY,0) > 0;

    	 	if(SQLCODE != 0)
    	 	{
        	fn_errlog(c_ServiceName, "S31030", SQLMSG, c_err_msg);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	destroy_bat();
    	 	}

			 	if( l_pod_cnt== 0)
			 	{
					fn_userlog(c_ServiceName,"No record found for Pledge Request");
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          destroy_bat();
				}

				i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

				if ( i_trnsctn == -1 )
				{
					fn_errlog( c_ServiceName, "S31035", TPMSG , c_err_msg  );
					fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
					destroy_bat();
				}

				EXEC SQL
					DELETE FROM TPD_PTD_TBL;

    	 	if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    	 	{
        	fn_errlog(c_ServiceName, "S31040", SQLMSG, c_err_msg);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	destroy_bat();
    	 	}

				EXEC SQL
					INSERT INTO TPD_PTD_TBL
											(TMP_CLM_MTCH_ACCNT,
											TMP_STCK_CD,
											TMP_TIFP_QTY,
											TMP_PLG_REV_TYP,
											TMP_ISIN_NMBR,
											TMP_DP_ID,
											TMP_DP_CLNT_ID,
											TMP_POD_REF_NO,
											TMP_TIFP_RUN_DT)
											SELECT
											POD_CLNT_MTCH_ACCNT,
											POD_STCK_CD,
											POD_ORDR_QTY,
											POD_PLG_REV_TYP,
											POD_ISIN_NO,
											POD_DP_ACCNT,
											POD_DP_CLNT_ACCNT,
											POD_ORDR_NO,
											POD_ORDR_DT
											FROM POD_PLG_ORDR_DTLS_CNV
											WHERE
          						POD_PLG_REV_TYP = :c_plg_typ
          						AND POD_ORDR_STTS = 'R'
          						AND POD_ORDR_QTY - NVL(POD_PRCSD_QTY,0) > 0;

    	 	if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    	 	{
        	fn_errlog(c_ServiceName, "S31045", SQLMSG, c_err_msg);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	destroy_bat();
    	 	}

				if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
				{
					fn_errlog( c_ServiceName, "S31050",TPMSG ,c_err_msg);
					fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					destroy_bat();
				}

				EXEC SQL
					SELECT COUNT(1) 
					INTO :l_plg_cnt
					FROM TPD_PTD_TBL;

    	 	if(SQLCODE != 0)
    	 	{
        	fn_errlog(c_ServiceName, "S31055", SQLMSG, c_err_msg);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        	destroy_bat();
    	 	}

				if(l_plg_cnt == 0)
				{
					fn_userlog(c_ServiceName,"No records to Pledge");
        	destroy_bat();
				}

				for(i=1;i<=l_plg_cnt;i++)
				{

       		Finit32(ptr_fml_Ibuf1, (FLDLEN32) Fsizeof32(ptr_fml_Ibuf1));
        	Finit32(ptr_fml_Obuf1, (FLDLEN32) Fsizeof32(ptr_fml_Obuf1));

					i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

					if ( i_trnsctn == -1 )
					{
						fn_errlog( c_ServiceName, "S31060", TPMSG , c_err_msg  );
						fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
						destroy_bat();
					}

					MEMSET(sql_tmp_stck_cd);
					MEMSET(sql_tmp_plg_rev_typ);
					MEMSET(sql_tmp_isin_nmbr);
					MEMSET(sql_tmp_dp_id);
					MEMSET(sql_tmp_dp_clnt_id);
					MEMSET(sql_tmp_pod_ref_no);
					MEMSET(sql_tmp_tifp_run_dt);
					MEMSET(sql_tmp_clm_mtch_accnt);
					sql_tmp_tifp_qty = 0;

					EXEC SQL
						SELECT 	TMP_CLM_MTCH_ACCNT,
										TMP_STCK_CD,
										TMP_TIFP_QTY,
										TMP_PLG_REV_TYP,
										TMP_ISIN_NMBR,
										TMP_DP_ID,
										TMP_DP_CLNT_ID,
										TMP_POD_REF_NO,
										TMP_TIFP_RUN_DT
						INTO
										:sql_tmp_clm_mtch_accnt,
										:sql_tmp_stck_cd,
										:sql_tmp_tifp_qty,
										:sql_tmp_plg_rev_typ,
										:sql_tmp_isin_nmbr,
										:sql_tmp_dp_id,
										:sql_tmp_dp_clnt_id,
										:sql_tmp_pod_ref_no,
										:sql_tmp_tifp_run_dt
						FROM		TPD_PTD_TBL
						WHERE		ROWNUM < 2;

    	 		if(SQLCODE != 0)
    	 		{
        		fn_errlog(c_ServiceName, "S31065", SQLMSG, c_err_msg);
        		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        		destroy_bat();
					}

					EXEC SQL
						DELETE FROM TPD_PTD_TBL
						WHERE ROWNUM < 2;

    	 		if(SQLCODE != 0)
    	 		{
        		fn_errlog(c_ServiceName, "S31070", SQLMSG, c_err_msg);
        		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        		destroy_bat();
					}
	
					if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
					{
						fn_errlog( c_ServiceName, "S31075",TPMSG ,c_err_msg);
						fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						destroy_bat();
					}

          strcpy(c_usr_id.arr,"system");
          SETLEN(c_usr_id);
          SETNULL(c_usr_id);

					fn_userlog(c_ServiceName,"Processing Record No :%d:",i);
					fn_userlog(c_ServiceName,"Value of sql_tmp_clm_mtch_accnt :%s:",sql_tmp_clm_mtch_accnt);
					fn_userlog(c_ServiceName,"Value of sql_tmp_dp_id :%s:",sql_tmp_dp_id);
					fn_userlog(c_ServiceName,"Value of sql_tmp_dp_clnt_id :%s:",sql_tmp_dp_clnt_id);
					fn_userlog(c_ServiceName,"Value of sql_tmp_stck_cd :%s:",sql_tmp_stck_cd);
					fn_userlog(c_ServiceName,"Value of sql_tmp_pod_ref_no :%s:",sql_tmp_pod_ref_no.arr);
					fn_userlog(c_ServiceName,"Value of sql_execn_dt :%s:",sql_execn_dt.arr);
					fn_userlog(c_ServiceName,"Value of c_operation_typ :%c:",c_operation_typ);
					fn_userlog(c_ServiceName,"Value of sql_tmp_plg_rev_typ :%c:",sql_tmp_plg_rev_typ);

    			i_err [0] = Fadd32(ptr_fml_Ibuf1,FFO_EBA_MTCH_ACT_NO, (char *)sql_tmp_clm_mtch_accnt,0);
    			i_err [1] = Fadd32(ptr_fml_Ibuf1,FFO_DPID, (char *)sql_tmp_dp_id ,0);
    			i_err [2] = Fadd32(ptr_fml_Ibuf1,FFO_DP_CLNT_ID, (char *)sql_tmp_dp_clnt_id ,0);
    			i_err [3] = Fadd32(ptr_fml_Ibuf1,FFO_STCK_CD, sql_tmp_stck_cd ,0);
    			i_err [4] = Fadd32(ptr_fml_Ibuf1,FFO_TIFP_QTY, (char *)&sql_tmp_tifp_qty,0);
    			i_err [5] = Fadd32(ptr_fml_Ibuf1,FFO_SPRD_ORD_REF, sql_tmp_pod_ref_no.arr,0);
    			i_err [6] = Fadd32(ptr_fml_Ibuf1,FFO_OPERATION_TYP, (char *)&c_operation_typ,0);
    			i_err [7] = Fadd32(ptr_fml_Ibuf1,FFO_PLG_TYP, (char *)&sql_tmp_plg_rev_typ,0);
    			i_err [8] = Fadd32(ptr_fml_Ibuf1,FFO_EXECN_DT, sql_execn_dt.arr,0);
          i_err [9] = Fadd32(ptr_fml_Ibuf1,FFO_ISIN_NMBR,sql_tmp_isin_nmbr,0);
          i_err [10]= Fadd32(ptr_fml_Ibuf1,FFO_USR_ID,(char *)c_usr_id.arr,0);
    			for ( j=0; j < 11; j++ ) /***Ver 3.5 replace 1 with 0***/
    			{
      			if ( i_err[ j ] == -1 )
      			{
							fn_errlog( c_ServiceName, "S31080",TPMSG ,c_err_msg);
							fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
							destroy_bat();
      			}
    			}

   				i_returncode = tpcall( "SFO_MRGN_CNVPLG",
                      					(char*)ptr_fml_Ibuf1,
                      					0,
                      					(char**)&ptr_fml_Obuf1,
                      					&l_ip_len,0);

      		if( i_returncode == -1)
      		{
        		if ( tperrno != TPESVCFAIL )
        		{
            	fn_errlog ( c_ServiceName, "S31085", TPMSG,c_err_msg);
							fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
							destroy_bat();
        		}
      		}

				}

		

			/** }
			if(c_plg_rev_typ == 'W')
			{
			}
			if(c_plg_rev_typ == 'I')
			{
			} ***/

			break;

			case 'C':

			fn_userlog(c_ServiceName,"Inside the flow of Request");
			fn_userlog(c_ServiceName,"Pledge Type for Confirmation :%c:",c_plg_typ);

			if(c_plg_typ == 'P')
			{

				EXEC SQL
					SELECT COUNT(1)
					INTO :i_ptd_cnt
					FROM PTD_TIFP_DTLS_CNV
        	WHERE PTD_PLG_REV_TYP='P'
        	AND PTD_TIFP_STTS = 'P'
        	AND PTD_LEG_NO = 'L1';

    	 		if(SQLCODE != 0)
    	 		{
        		fn_errlog(c_ServiceName, "S31090", SQLMSG, c_err_msg);
        		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        		destroy_bat();
					}
			}

			if(c_plg_typ == 'W')
			{

				EXEC SQL
					SELECT COUNT(1)
					INTO :i_ptd_cnt
					FROM PTD_TIFP_DTLS_CNV
        	WHERE PTD_PLG_REV_TYP='W'
        	AND PTD_TIFP_STTS = 'P'
        	AND PTD_LEG_NO = 'W1';

    	 		if(SQLCODE != 0)
    	 		{
        		fn_errlog(c_ServiceName, "S31095", SQLMSG, c_err_msg);
        		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        		destroy_bat();
					}
			}

			if(c_plg_typ == 'I')
			{

				EXEC SQL
					SELECT COUNT(1)
					INTO :i_ptd_cnt
					FROM PTD_TIFP_DTLS_CNV
        	WHERE PTD_PLG_REV_TYP='I'
        	AND PTD_TIFP_STTS = 'P'
        	AND PTD_LEG_NO = 'I1';

    	 		if(SQLCODE != 0)
    	 		{
        		fn_errlog(c_ServiceName, "S31100", SQLMSG, c_err_msg);
        		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        		destroy_bat();
					}
			}

			if(i_ptd_cnt == 0)
			{
					fn_userlog(c_ServiceName,"No records for confirmation for type :%c:",c_plg_typ);
					destroy_bat();
			}

			fn_userlog(c_ServiceName,"Calling SFO_MRGN_PLG");

   		i_err [0] = Fadd32(ptr_fml_Ibuf1,FFO_OPERATION_TYP, (char *)&c_operation_typ,0);
   		i_err [1] = Fadd32(ptr_fml_Ibuf1,FFO_PLG_TYP, (char *)&c_plg_typ,0);
      i_err [2] = Fadd32(ptr_fml_Ibuf1,FFO_EXECN_DT,(char *)sql_execn_dt.arr,0);

      for ( j=0; j < 3; j++ ) /***Ver 3.5 replace 1 with 0***/
      {
         if ( i_err[ j ] == -1 )
         {
            fn_errlog( c_ServiceName, "S31105",TPMSG ,c_err_msg);
            fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
            destroy_bat();
         }
       }

       i_returncode = tpcall( "SFO_MRGN_CNVPLG",
                              (char*)ptr_fml_Ibuf1,
                              0,
                              (char**)&ptr_fml_Obuf1,
                              &l_ip_len,0);

       if( i_returncode == -1)
       {
          if ( tperrno != TPESVCFAIL )
          {
              fn_errlog ( c_ServiceName, "S31110", TPMSG,c_err_msg);
              fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
              destroy_bat();
          }
        }

			break;

			default:
			break;
		}

		fn_userlog(c_ServiceName," ALL DONE ");
		fn_bat_pst_msg(c_ServiceName," ALL DONE ",c_tag);

		destroy_bat();
}


void fn_bat_term (  int argc, char *argv[])
{
   return ;
}
