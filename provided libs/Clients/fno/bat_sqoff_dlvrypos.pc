/*************************************************************************/
/* Service name : BAT_SQOFF_DLVRYPOS                                     */
/*                                                                       */
/* Description  : This Batch Program                                     */
/*                                                                       */
/* Input        :                                                        */
/*                                                                       */
/* Output       :                                                        */
/*                                                                       */
/* Log          :  06-Jun-2018  Initial Release - Tanmay Patel           */
/*              :  16-Aug-2018  Ver 1.1         - Tanmay Patel           */
/*              :  07-Jan-2018  Ver 1.2         - Tanmay Patel           */
/*              :  15-Apr-2021  Ver 1.3         - Akash B                */
/*              :  08-jun-2021  Ver 1.4         - Abhinav Kumbhar        */
/*              :  10-Feb-2022  Ver 1.5         - Ravindra Panda         */
/*************************************************************************/
/* Ver 1.1  - Physical Sttlement                                         */
/* Ver 1.2  - Add Mailer                                                 */
/* Ver 1.3  - FNO Physical settlement Exception                          */
/* Ver 1.4  - Physical Delivery for Stock Derivatives                    */
/* Ver 1.5  - CR-ISEC14-165712_Disable_OPTCNTRCT_EOSBUYSELL              */
/*************************************************************************/
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <fml_rout.h>
#include <fn_session.h>
#include <string.h>
#include <fn_read_debug_lvl.h>
#include <stdlib.h>       /*** Ver 1.2 ***/

FBFR32   *ptr_fml_buf;

int fn_get_sqofford_rs( char* c_ServiceName,
                        char* c_err_msg,
                        char* c_flag,         /*** Ver 1.1 ***/
												char c_buysell_flg,  /*** Ver 1.5 ***/
                        char* c_xchng_cd,
                        char  c_prdct_typ,
                        char* c_undrlyng,
                        char* c_expry_dt );

void BAT_SQOFF_DLVRYPOS ( int argc, char *argv[] )
{
  char     c_ServiceName [50];
  char     c_msg [256];
  char     c_err_msg [256];
  char     c_xchng_cd  [4];
  char     c_undrlyng  [256];     /***  Change from 7 to 256 in  Ver 1.1 ***/
  char     c_expry_dt [12];
  char     c_rout_str  [4];
  char     c_svc_name [30];
  char     c_run_mod[4] = "\0";   /** Ver 1.1 **/
  char     c_exist  = 'P';        /** Ver 1.1 **/
  char     c_tmp_undrlyng[ 100 ] = "\0";  /*** Ver 1.1 ***/
  char     c_prdct_typ;
  char     c_exg_stts;
  char     c_cntrct_tag;
  char     c_opt_typ = '*';
  char     c_path[50];        /*** Ver 1.2 ***/
  char     c_command[350];    /*** Ver 1.2 ***/
	char     c_buysell_flg = '\0';  /*** Ver 1.5 ***/  /** Will have values B : Buy, S : Sell and & : Both **/

  int      i_ch_val;
  int      i_trnsctn;
  int      i_exist = 0;
  int      i_ucount = 0;      /*** Ver 1.1 ***/
  long     l_strike_prc = 0;
  
 long int li_cnt;
  long int li_tot_rcrds;
  char*    token;                 /** Ver 1.1 **/

/*** Ver 1.1 ***/
  MEMSET(c_ServiceName);
  MEMSET(c_msg);
  MEMSET(c_err_msg);
  MEMSET(c_xchng_cd);
  MEMSET(c_undrlyng);
  MEMSET(c_expry_dt);
  MEMSET(c_rout_str);
  MEMSET(c_svc_name);
  MEMSET(c_run_mod);
  MEMSET(c_tmp_undrlyng);

 /**** VER 1.1 ****/
  EXEC SQL INCLUDE "table/ffp_fo_futures_pstn.h";

  strcpy ( c_ServiceName, argv[0] );
  INITBATDBGLVL(c_ServiceName);


  sprintf ( c_msg, "Batch process %s started", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  strcpy( c_xchng_cd, argv[2] );
  c_prdct_typ = argv[4][0];
  strcpy( c_undrlyng, argv[5] );
  strcpy( c_expry_dt, argv[6] );
  rtrim(c_xchng_cd);
  rtrim(c_undrlyng);
  rtrim(c_expry_dt);

  if (DEBUG_MSG_LVL_0) /** 3 **/        
   {
    fn_userlog( c_ServiceName,"c_xchng_cd :%s:",c_xchng_cd);
    fn_userlog( c_ServiceName,"c_prdct_typ :%c:",c_prdct_typ);
    fn_userlog( c_ServiceName,"c_undrlyng :%s:",c_undrlyng);
    fn_userlog( c_ServiceName,"c_expry_dt :%s:",c_expry_dt);  
   }

  if( c_prdct_typ != 'F' && c_prdct_typ != 'O' )
  {
	 fn_errlog( c_ServiceName, "S31005","Invalid Product Type", c_err_msg );
   strcpy ( c_msg, "Invalid Product Type" );
   fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
   return;  
  }

	/*** Added in Ver 1.5 ***/

	if( c_prdct_typ == 'O')
	{
		if(argc != 8)
  	{
    	fn_userlog( c_ServiceName,"Additional argument required as input for OPTIONs. ");
			fn_errlog( c_ServiceName, "S31010","Invalid Product Type", c_err_msg );
    	fn_bat_pst_msg ( c_ServiceName, "Invalid number of arguments", c_tag );
    	return ;
  	}
		c_buysell_flg = argv[7][0];
    fn_userlog( c_ServiceName,"c_buysell_flg :%c:",c_buysell_flg);
   
    if( c_buysell_flg == 'A' )
    {
      c_buysell_flg = '%'; 
    }
	}

   fn_userlog( c_ServiceName,"c_buysell_flg :%c:",c_buysell_flg);

	/*** Ver 1.5 ends here ***/	

  if ( c_prdct_typ == 'F' )   /*** IF condition added in ver 1.1 ***/
  { 
    EXEC SQL
    SELECT  exg_crrnt_stts
    INTO    :c_exg_stts
    FROM    exg_xchng_mstr
    WHERE   exg_xchng_cd = :c_xchng_cd
    AND     exg_mkt_typ  = 'D';

	  if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }

    if( c_exg_stts != EXCHANGE_OPEN )
    {
	  	fn_errlog( c_ServiceName, "B28520", DEFMSG, c_err_msg );
      strcpy ( c_msg, "Exchange should be open for running Physical Settlement SquareOff" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }
  }

  if (strcmp(c_undrlyng ,"ALL") == 0 )
  {
    MEMSET(c_undrlyng);       /*** Ver 1.1 ***/
    strcpy(c_undrlyng,"%");
    strcpy(c_run_mod,"ALL");  /*** Ver 1.1 ***/
  }
  else
  {
   /*******   Commented in Ver 1.1 ********
    EXEC SQL
      SELECT COUNT(1)
      INTO  :i_exist
      FROM FUM_FO_UNDRLYNG_MSTR
      WHERE FUM_XCHNG_CD =:c_xchng_cd
      AND   FUM_PRDCT_TYP =:c_prdct_typ
      AND   FUM_UNDRLYNG  =:c_undrlyng
      AND   FUM_SETLMNT_FLG = 'P';
   ****************************************/

  /***** Ver 1.1 Starts *****/

    strcpy(c_tmp_undrlyng,c_undrlyng);
    rtrim(c_tmp_undrlyng);

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"c_tmp_undrlyng :%s:",c_tmp_undrlyng);
    }

    token = strtok( c_tmp_undrlyng,",");

    while (token != NULL)
    {
      token = strtok(NULL, ",");
      i_ucount++;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Total Underlyings - i_ucount  :%d:",i_ucount);
    }

    if( i_ucount > 12 )
    {
      fn_userlog( c_ServiceName,"Maximum 12 underlying can be passed in Multiple underlying mode.");
      strcpy ( c_msg, "Maximum 12 underlying can be passed in Multiple underlying mode." );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }

    strcpy(c_run_mod,"UND");

    EXEC SQL
      SELECT COUNT(1)
      INTO  :i_exist
      FROM  FTQ_FO_TRD_QT
      WHERE FTQ_XCHNG_CD  = :c_xchng_cd
      AND   FTQ_PRDCT_TYP = :c_prdct_typ
      AND   FTQ_EXPRY_DT  = :c_expry_dt
      AND   FTQ_SETLMNT_FLG = 'P'
      AND   TRIM(FTQ_UNDRLYNG)  IN( SELECT REGEXP_SUBSTR(:c_undrlyng,'[^,]+',1,ROWNUM)
                                    FROM   DUAL
                                    CONNECT BY REGEXP_SUBSTR(:c_undrlyng,'[^,]+',1,ROWNUM) IS NOT NULL);
  /***** Ver 1.1 Ends   *****/  
    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }

    if( i_exist <= 0)
    {
      fn_userlog( c_ServiceName,"The Underlying chosen for Square off is not marked for Physical Settlement. Please choose correct underlying to run the process");
			strcpy ( c_msg, "The Underlying chosen for Square off is not marked for Physical Settlement. Please choose correct underlying to run the process" ); 
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }
  }

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
    if ( i_trnsctn == -1 )
  {
      fn_errlog(c_ServiceName, "S31025", LIBMSG, c_err_msg );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
  }

  /**************    Commented in Ver 1.1    ***************
	EXEC SQL
       UPDATE FTQ_FO_TRD_QT
       SET    FTQ_DLVRY_POS_ALLWD = 'N'
       WHERE  FTQ_XCHNG_CD  =:c_xchng_cd
       AND    FTQ_EXPRY_DT  = :c_expry_dt
       AND    FTQ_PRDCT_TYP = :c_prdct_typ
       AND    FTQ_UNDRLYNG IN ( SELECT DISTINCT FUM_UNDRLYNG
                                FROM FUM_FO_UNDRLYNG_MSTR
                                WHERE FUM_XCHNG_CD =:c_xchng_cd
                                AND   FUM_PRDCT_TYP =:c_prdct_typ
                                AND   TRIM(FUM_UNDRLYNG)  LIKE :c_undrlyng
                                AND   FUM_SETLMNT_FLG = 'P');

  if( SQLCODE != 0 )
  {
      fn_errlog( c_ServiceName, "S31030", SQLMSG, c_err_msg );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return;
  }
  ****************   Ver 1.1 comment Ends   *****************/

  /*******   Ver 1.1 Starts   *******/
  if ( strcmp(c_undrlyng,"%") == 0 )
  {

		if ( c_prdct_typ == 'F' )     /*** If condition added in Ver 1.5 ***/
		{
    	EXEC SQL
      UPDATE  FTQ_FO_TRD_QT
      SET     FTQ_DLVRY_POS_ALLWD  = 'N'
      WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
      AND     FTQ_EXPRY_DT  = :c_expry_dt
      AND     FTQ_PRDCT_TYP = :c_prdct_typ
      AND     TRIM(FTQ_UNDRLYNG)  LIKE :c_undrlyng
      AND     FTQ_SETLMNT_FLG = 'P';
		}
		/*** Added in Ver 1.5 ***/
		else if ( c_prdct_typ == 'O' )
		{
			EXEC SQL
      UPDATE  FTQ_FO_TRD_QT
      SET     FTQ_DLVRY_POS_ALLWD  = 'N',
							FTQ_BUY_ALLWD = DECODE ( :c_buysell_flg,'B','N','%','N',FTQ_BUY_ALLWD),
							FTQ_SELL_ALLWD = DECODE ( :c_buysell_flg,'S','N','%','N',FTQ_SELL_ALLWD)
      WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
      AND     FTQ_EXPRY_DT  = :c_expry_dt
      AND     FTQ_PRDCT_TYP = :c_prdct_typ
      AND     TRIM(FTQ_UNDRLYNG)  LIKE :c_undrlyng
      AND     FTQ_SETLMNT_FLG = 'P';
    }
		/*** Ver 1.5 ends here ***/

   	if( SQLCODE != 0 )
   	{
      fn_errlog( c_ServiceName, "S41125", SQLMSG, c_err_msg );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return;
    }

   EXEC SQL
    INSERT INTO FPS_FO_PHYCAL_SETLMNTEOSLOG
    (
      FPS_XCHNG_CD,
      FPS_PRDCT_TYP,
      FPS_UNDRLYNG,
      FPS_EXPRY_DT,
      FPS_RUN_MODE,
      FPS_INSRT_DT,
			FPS_BUY_ALLWD,  /*** ver 1.5 ***/
      FPS_SELL_ALLWD  /*** ver 1.5 ***/
    )
    (
      SELECT DISTINCT FTQ_XCHNG_CD,
                      FTQ_PRDCT_TYP,
                      FTQ_UNDRLYNG,
                      FTQ_EXPRY_DT,
                      :c_run_mod,
                      sysdate,
											FTQ_BUY_ALLWD,    /*** ver 1.5 ***/
            					FTQ_SELL_ALLWD    /*** ver 1.5 ***/
      FROM   FTQ_FO_TRD_QT
      WHERE  FTQ_XCHNG_CD  = :c_xchng_cd
      AND    FTQ_EXPRY_DT  = :c_expry_dt
      AND    FTQ_PRDCT_TYP = :c_prdct_typ
      AND    TRIM(FTQ_UNDRLYNG)  LIKE :c_undrlyng
      AND    FTQ_SETLMNT_FLG = 'P'
    );

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S41025", SQLMSG, c_err_msg );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return;
    }
  }
  else
  {
		if ( c_prdct_typ == 'F' )     /*** IF condition added in Ver 1.5 ***/
		{
    	EXEC SQL
      UPDATE  FTQ_FO_TRD_QT
      SET     FTQ_DLVRY_POS_ALLWD  = 'N'
      WHERE   FTQ_XCHNG_CD  =:c_xchng_cd
      AND     FTQ_EXPRY_DT  =:c_expry_dt
      AND     FTQ_PRDCT_TYP =:c_prdct_typ
      AND     FTQ_SETLMNT_FLG = 'P'
      AND     TRIM(FTQ_UNDRLYNG) IN  (SELECT REGEXP_SUBSTR(:c_undrlyng,'[^,]+',1,ROWNUM)
                                      FROM   DUAL
                                      CONNECT BY REGEXP_SUBSTR(:c_undrlyng,'[^,]+',1,ROWNUM) IS NOT NULL);
		}
	
		/*** Added in Ver 1.5 ***/
		else if ( c_prdct_typ == 'O' )
		{
			EXEC SQL
      UPDATE  FTQ_FO_TRD_QT
      SET     FTQ_DLVRY_POS_ALLWD  = 'N',
							FTQ_BUY_ALLWD = DECODE ( :c_buysell_flg,'B','N','%','N',FTQ_BUY_ALLWD),
              FTQ_SELL_ALLWD = DECODE ( :c_buysell_flg,'S','N','%','N',FTQ_SELL_ALLWD)
      WHERE   FTQ_XCHNG_CD  =:c_xchng_cd
      AND     FTQ_EXPRY_DT  =:c_expry_dt
      AND     FTQ_PRDCT_TYP =:c_prdct_typ
      AND     FTQ_SETLMNT_FLG = 'P'
      AND     TRIM(FTQ_UNDRLYNG) IN  (SELECT REGEXP_SUBSTR(:c_undrlyng,'[^,]+',1,ROWNUM)
                                      FROM   DUAL
                                      CONNECT BY REGEXP_SUBSTR(:c_undrlyng,'[^,]+',1,ROWNUM) IS NOT NULL);
		}
		/*** Ver 1.5 ends here ***/
	
    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S41021", SQLMSG, c_err_msg );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return;
    }

    EXEC SQL
    INSERT INTO FPS_FO_PHYCAL_SETLMNTEOSLOG
    (
      FPS_XCHNG_CD,
      FPS_PRDCT_TYP,
      FPS_UNDRLYNG,
      FPS_EXPRY_DT,
      FPS_RUN_MODE,
      FPS_INSRT_DT,
			FPS_BUY_ALLWD,  /*** ver 1.5 ***/
      FPS_SELL_ALLWD  /*** ver 1.5 ***/
    )
    (
      SELECT DISTINCT  FTQ_XCHNG_CD,
                       FTQ_PRDCT_TYP,
                       FTQ_UNDRLYNG,
                       FTQ_EXPRY_DT,
                       :c_run_mod,
                       sysdate,
											 FTQ_BUY_ALLWD, /*** ver 1.5 ***/
             					 FTQ_SELL_ALLWD /*** ver 1.5 ***/
      FROM   FTQ_FO_TRD_QT
      WHERE  FTQ_XCHNG_CD  = :c_xchng_cd
      AND    FTQ_EXPRY_DT  = :c_expry_dt
      AND    FTQ_PRDCT_TYP = :c_prdct_typ
      AND    FTQ_SETLMNT_FLG = 'P'
      AND    TRIM(FTQ_UNDRLYNG) IN  (SELECT REGEXP_SUBSTR(:c_undrlyng,'[^,]+',1,ROWNUM)
                                     FROM   DUAL
                                     CONNECT BY REGEXP_SUBSTR(:c_undrlyng,'[^,]+',1,ROWNUM) IS NOT NULL)
    );

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S41025", SQLMSG, c_err_msg );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return;
    }
  }
  /*******  Ver 1.1 Ends     *******/ 

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
      fn_errlog( c_ServiceName, "S31035",LIBMSG,c_err_msg);
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return;
  }

  /*****   Ver 1.1 Starts *****/
/******** Commentd *********
  if ( c_prdct_typ == 'O' )
  {
    fn_userlog( c_ServiceName,"---No Other process for Option---");
    strcpy ( c_msg, "No Other process for Option"); 
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    return;   
  } 
****************************/
  /*****   Ver 1.1 Ends   *****/


  strcpy ( c_msg, "Creating data. Please wait ... " );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  i_ch_val = fn_get_sqofford_rs(  c_ServiceName,
                                  c_err_msg,
                                  &c_exist,     /** Ver 1.1 **/
																	c_buysell_flg,  /*** Ver 1.5 ***/ 
                                  c_xchng_cd,
                                  c_prdct_typ,
                                  c_undrlyng,
                                  c_expry_dt );


  /*****   if ( i_ch_val != 0 || ptr_fml_buf == NULL )  ****** commented in Ver 1.1 ******/
  if ( i_ch_val != 0 )
  {
    fn_errlog( c_ServiceName, "S31040", LIBMSG, c_err_msg );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    return;
  }
  /*** Ver 1.1 Starts ***/

/***********
  if ( i_ch_val == 0 && c_exist == 'N' )
  {
    fn_userlog( c_ServiceName,"----No record exist---");
    strcpy ( c_msg, "No record exist");
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    return;
  }
************/



  /*** Ver 1.1 Ends ***/
  li_tot_rcrds = fn_reccnt_rs ( ptr_fml_buf,
                                c_ServiceName,
                                c_err_msg,
                                FFO_EBA_MTCH_ACT_NO);

  if ( li_tot_rcrds == -1 )
  {
    fn_errlog( c_ServiceName, "S31045", LIBMSG, c_err_msg );
    fn_dstry_rs ( ptr_fml_buf );
    return;
  }

  strcpy ( c_msg, "Data created." );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  sprintf ( c_msg, "Total records = %ld", li_tot_rcrds );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  for ( li_cnt=1; li_cnt<=li_tot_rcrds; li_cnt++ )
  {
    i_ch_val = fn_getnxt_rs ( ptr_fml_buf,
                              c_ServiceName,
                              c_err_msg,
                              10,
                              FFO_XCHNG_CD, ( char * )sql_ffp_xchng_cd,NULL,
                              FFO_EBA_MTCH_ACT_NO, ( char * )sql_ffp_clm_mtch_accnt,NULL,
                              FFO_PRDCT_TYP, ( char * )&sql_ffp_prdct_typ,NULL,
                              FFO_UNDRLYNG, ( char * )sql_ffp_undrlyng,NULL,
                              FFO_CTGRY_INDSTK, ( char * )&sql_ffp_indstk,NULL,
                              FFO_EXPRY_DT, (char * )sql_ffp_expry_dt.arr,NULL,
                              FFO_STRK_PRC,( char * )&l_strike_prc,NULL,
                              FFO_OPT_TYP,( char * )&c_opt_typ,NULL,
                              FFO_OPNPSTN_FLW, ( char * )&sql_ffp_opnpstn_flw,NULL,
                              FFO_OPNPSTN_QTY, ( char * )&sql_ffp_opnpstn_qty,NULL);
    if ( i_ch_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31050", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_buf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }

		rtrim(sql_ffp_clm_mtch_accnt);
    rtrim(sql_ffp_xchng_cd);
    rtrim(sql_ffp_undrlyng);
    SETLEN(sql_ffp_expry_dt);

    sprintf ( c_msg, "Processing record %ld of %ld", li_cnt, li_tot_rcrds );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

    i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                  c_err_msg,
                                  "sfr_pfs_cmb_qt",
                                  li_cnt,
                                  li_tot_rcrds );

    if ( i_ch_val == -1 )
    {
      fn_errlog( c_ServiceName, "S31055", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_buf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }
 
    strcpy( c_svc_name,"SFO_PRCS_DLVRSQ");
    fn_cpy_ddr( c_rout_str );
    fn_userlog ( c_ServiceName,"ROUT STRING IS :%s:",c_rout_str );

    i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                  c_err_msg,
                                  "SFO_ORD_ROUT",
                                  0,
                                  14,
                                  FFO_XCHNG_CD, ( char * )sql_ffp_xchng_cd,
                                  FFO_EBA_MTCH_ACT_NO, ( char * )sql_ffp_clm_mtch_accnt,
                                  FFO_PRDCT_TYP, ( char * )&sql_ffp_prdct_typ,
                                  FFO_UNDRLYNG, ( char * )sql_ffp_undrlyng,
                                  FFO_CTGRY_INDSTK, ( char * )&sql_ffp_indstk,
                                  FFO_SVC_NAME, (char*)c_svc_name,
                                  FFO_BAT_TAG, ( char * )c_tag,
                                  FFO_REC_NO, ( char * )&li_cnt,
			                            FFO_EXPRY_DT, (char * )sql_ffp_expry_dt.arr,
                                  FFO_OPNPSTN_FLW, ( char * )&sql_ffp_opnpstn_flw,
                                  FFO_OPNPSTN_QTY, ( char * )&sql_ffp_opnpstn_qty,
                                  FFO_STRK_PRC,( char * )&l_strike_prc,
                                  FFO_OPT_TYP,( char * )&c_opt_typ,
                                  FFO_ROUT_CRT, ( char *)c_rout_str); 

    if ( i_ch_val == -1 )
    {
      fn_errlog( c_ServiceName, "S31060", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_buf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }
  }

  fn_dstry_rs ( ptr_fml_buf );

  /*** Ver 1.2 Starts ***/
  sprintf ( c_msg, "Mailer Starts......", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  strcpy(c_path, tuxgetenv("HOME"));
  strcat(c_path, "/sh_scripts");

  sprintf(c_command,"nohup ksh %s/physical_settlment_EOS_MIS.sh &",c_path);
  fn_userlog(c_ServiceName,"Command:%s:",c_command);
  system(c_command);
 
  /*** Ver 1.2 Ends  ***/

  sprintf ( c_msg, "Batch process %s ended", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

return;
} 


int fn_bat_init ( int argc, char *argv[] )
{
  char c_m[20]="\0";
  fn_var = BAT_SQOFF_DLVRYPOS;
    sprintf ( c_m,"c_m :%d:",argc);
/*  if(argc != 7) */
  if(( argv[4][0] == 'F' && argc != 7 ) || ( argv[4][0] == 'O' && argc != 8 ) )
  {
    fn_userlog( argv[0],"Usage - %s <configuration file> <Exchange code> <pipe_id><product type><Underlying/All> <Expiry date> ",argv[0]);
    fn_bat_pst_msg ( argv[0], "Invalid number of arguments", c_tag );
    fn_userlog ( argv[0], "Invalid number of arguments" );
     return -1;
  }

  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  fn_userlog ( argv[0], "BAT_SQOFF_DLVRYPOS  ended" );
  return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}


int fn_get_sqofford_rs( char * c_ServiceName,
                        char * c_err_msg,
                        char* c_flag,       /** Ver 1.1 **/
												char c_buysell_flg,  /*** Ver 1.5 ***/
                        char * c_xchng_cd,
                        char   c_prdct_typ, 
                        char * c_undrlyng,
                        char * c_expry_dt )
{

  int   i_counter = 0;
  int   i_returncode;
  char  c_cntrct_tag;
  char  c_opt_typ ='*';
  long  l_strike_prc = 0;
  int   i_exceptn_exist=0; 					 	/** Ver 1.3 **/


  EXEC SQL INCLUDE "table/ffp_fo_futures_pstn.h";

	EXEC SQL BEGIN DECLARE SECTION;
  sql_cursor  sys_cursor;
  EXEC SQL END DECLARE SECTION;

	Finit32(ptr_fml_buf,MIN_FML_BUF_LEN);
/*  ptr_fml_buf = (FBFR32 *)tpalloc("FML32", NULL, MIN_FML_BUF_LEN * 5);

  if(ptr_fml_buf == NULL)
  {
     fn_errlog( c_ServiceName, "S31065", FMLMSG, c_err_msg );
     return FAILURE;
  }*/

  if (DEBUG_MSG_LVL_0)  /** 3 **/
   {
    fn_userlog( c_ServiceName,"c_xchng_cd :%s:",c_xchng_cd);
    fn_userlog( c_ServiceName,"c_undrlyng :%s:",c_undrlyng);
    fn_userlog( c_ServiceName,"c_prdct_typ :%c:",c_prdct_typ);
    fn_userlog( c_ServiceName,"c_expry_dt :%s:",c_expry_dt);
   }

   fn_userlog( c_ServiceName,"c_buysell_flg :%c:",c_buysell_flg);

  EXEC SQL ALLOCATE :sys_cursor;

  if ( c_prdct_typ =='F')
  {
  /*****************   Commented in Ver 1.1   ******************
   EXEC SQL EXECUTE
    BEGIN
     OPEN :sys_cursor FOR
     SELECT FFP_CLM_MTCH_ACCNT match,
            FFP_XCHNG_CD       xchng_cd,
            FFP_PRDCT_TYP      prdct_typ,
            FFP_INDSTK         indstk,
            FFP_UNDRLYNG       undrlyng,
            FFP_EXPRY_DT       expry_dt,
            ABS(FFP_OPNPSTN_QTY)  opnpstn_qty,
            0     strk_price,
            '*'   opt_type, 
           decode(FFP_OPNPSTN_FLW,'B','S','B')  opnpstn_flw
     FROM   FFP_FO_FUTURES_PSTN,FUM_FO_UNDRLYNG_MSTR
     WHERE  FFP_UNDRLYNG  = FUM_UNDRLYNG
     AND    FFP_PRDCT_TYP = FUM_PRDCT_TYP
     AND    FFP_XCHNG_CD  = FUM_XCHNG_CD
     AND    FFP_XCHNG_CD  = :c_xchng_cd
     AND    FFP_PRDCT_TYP = :c_prdct_typ
     AND    FFP_EXPRY_DT  = :c_expry_dt
     AND    FFP_OPNPSTN_FLW != 'N'
     AND    FUM_SETLMNT_FLG  = 'P'
     AND    TRIM(FUM_UNDRLYNG) LIKE :c_undrlyng
     UNION ALL
     SELECT FCP_CLM_MTCH_ACCNT match,
            FCP_XCHNG_CD       xchng_cd,
            FCP_PRDCT_TYP      prdct_typ,
            FCP_INDSTK         indstk,
            FCP_UNDRLYNG       undrlyng,
            FCP_EXPRY_DT       expry_dt,
            ABS(FCP_OPNPSTN_QTY)  opnpstn_qty,
            NVL(FCP_STRK_PRC,0)   strk_price,
            NVL(FCP_OPT_TYP,'*')  opt_type,         
            decode(FCP_OPNPSTN_FLW,'B','S','B') opnpstn_flw
     FROM   FCP_FO_SPN_CNTRCT_PSTN,FUM_FO_UNDRLYNG_MSTR
     WHERE  FCP_UNDRLYNG  = FUM_UNDRLYNG
     AND    FCP_PRDCT_TYP = FUM_PRDCT_TYP
     AND    FCP_XCHNG_CD  = FUM_XCHNG_CD
     AND    FCP_XCHNG_CD  = :c_xchng_cd
     AND    FCP_PRDCT_TYP = :c_prdct_typ 
     AND    FCP_EXPRY_DT  = :c_expry_dt
     AND    FCP_OPNPSTN_FLW != 'N'
     AND    FUM_SETLMNT_FLG  = 'P' 
     AND    TRIM(FUM_UNDRLYNG) LIKE :c_undrlyng
    END;
   END-EXEC;
   *****************   Comment Ends in Ver 1.1   ****************/ 

   /***********  Ver 1.1 Starts ***********/
   if ( strcmp(c_undrlyng,"%") == 0 )
   {
     EXEC SQL EXECUTE
      BEGIN
       OPEN :sys_cursor FOR
       SELECT FFP_CLM_MTCH_ACCNT match,
              FFP_XCHNG_CD       xchng_cd,
              FFP_PRDCT_TYP      prdct_typ,
              FFP_INDSTK         indstk,
              FFP_UNDRLYNG       undrlyng,
              FFP_EXPRY_DT       expry_dt,
              ABS(FFP_OPNPSTN_QTY)  opnpstn_qty,
              0     strk_price,
              '*'   opt_type,
              decode(FFP_OPNPSTN_FLW,'B','S','B')  opnpstn_flw
       FROM   FFP_FO_FUTURES_PSTN,FTQ_FO_TRD_QT
       WHERE  FFP_UNDRLYNG  = FTQ_UNDRLYNG
       AND    FFP_PRDCT_TYP = FTQ_PRDCT_TYP
       AND    FFP_XCHNG_CD  = FTQ_XCHNG_CD
       AND    FFP_EXPRY_DT  = FTQ_EXPRY_DT
       AND    FFP_XCHNG_CD  = :c_xchng_cd
       AND    FFP_PRDCT_TYP = :c_prdct_typ
       AND    FFP_EXPRY_DT  = :c_expry_dt
       AND    FFP_OPNPSTN_FLW != 'N'
       AND    FTQ_SETLMNT_FLG  = 'P'
       AND    TRIM(FTQ_UNDRLYNG) LIKE :c_undrlyng
       AND    NVL(FFP_DLVRY_MODE_FLAG,'N') != 'Y'           /*** Ver 1.4 ***/
       AND    NVL(FFP_DLVRY_OBLGAMT_BLCKD,0) = 0            /*** Ver 1.4 ***/
       AND    NVL(FFP_DLVRY_QTY_BLCKD,0) = 0                /*** Ver 1.4 ***/
       UNION ALL
       SELECT FCP_CLM_MTCH_ACCNT match,
              FCP_XCHNG_CD       xchng_cd,
              FCP_PRDCT_TYP      prdct_typ,
              FCP_INDSTK         indstk,
              FCP_UNDRLYNG       undrlyng,
              FCP_EXPRY_DT       expry_dt,
              ABS(FCP_OPNPSTN_QTY)  opnpstn_qty,
              NVL(FCP_STRK_PRC,0)   strk_price,
              NVL(FCP_OPT_TYP,'*')  opt_type,
              decode(FCP_OPNPSTN_FLW,'B','S','B') opnpstn_flw
       FROM   FCP_FO_SPN_CNTRCT_PSTN,FTQ_FO_TRD_QT
       WHERE  FCP_UNDRLYNG  = FTQ_UNDRLYNG
       AND    FCP_PRDCT_TYP = FTQ_PRDCT_TYP
       AND    FCP_XCHNG_CD  = FTQ_XCHNG_CD
       AND    FCP_EXPRY_DT  = FTQ_EXPRY_DT
       AND    FCP_XCHNG_CD  = :c_xchng_cd
       AND    FCP_PRDCT_TYP = :c_prdct_typ
       AND    FCP_EXPRY_DT  = :c_expry_dt
       AND    FCP_OPNPSTN_FLW != 'N'
       AND    FTQ_SETLMNT_FLG  = 'P'
       AND    TRIM(FTQ_UNDRLYNG) LIKE :c_undrlyng
       AND    NVL(FCP_DLVRY_MODE_FLAG,'N')   != 'Y'           /*** Ver 1.4 ***/
       AND    NVL(FCP_DLVRY_OBLGAMT_BLCKD,0)  = 0             /*** Ver 1.4 ***/
       AND    NVL(FCP_DLVRY_QTY_BLCKD,0)      = 0 ;           /*** Ver 1.4 ***/
      END;
     END-EXEC;
   }
   else
   {
     EXEC SQL EXECUTE
      BEGIN
       OPEN :sys_cursor FOR
       SELECT FFP_CLM_MTCH_ACCNT match,
              FFP_XCHNG_CD       xchng_cd,
              FFP_PRDCT_TYP      prdct_typ,
              FFP_INDSTK         indstk,
              FFP_UNDRLYNG       undrlyng,
              FFP_EXPRY_DT       expry_dt,
              ABS(FFP_OPNPSTN_QTY)  opnpstn_qty,
              0     strk_price,
              '*'   opt_type,
              decode(FFP_OPNPSTN_FLW,'B','S','B')  opnpstn_flw
       FROM   FFP_FO_FUTURES_PSTN,FTQ_FO_TRD_QT
       WHERE  FFP_UNDRLYNG  = FTQ_UNDRLYNG
       AND    FFP_PRDCT_TYP = FTQ_PRDCT_TYP
       AND    FFP_XCHNG_CD  = FTQ_XCHNG_CD
       AND    FFP_EXPRY_DT  = FTQ_EXPRY_DT
       AND    FFP_XCHNG_CD  = :c_xchng_cd
       AND    FFP_PRDCT_TYP = :c_prdct_typ
       AND    FFP_EXPRY_DT  = :c_expry_dt
       AND    FFP_OPNPSTN_FLW != 'N'
       AND    FTQ_SETLMNT_FLG  = 'P'
       AND    NVL(FFP_DLVRY_MODE_FLAG,'N') != 'Y'           /*** Ver 1.4 ***/
       AND    NVL(FFP_DLVRY_OBLGAMT_BLCKD,0) = 0            /*** Ver 1.4 ***/
       AND    NVL(FFP_DLVRY_QTY_BLCKD,0) = 0                /*** Ver 1.4 ***/
       AND    TRIM(FTQ_UNDRLYNG) IN (SELECT REGEXP_SUBSTR(:c_undrlyng,'[^,]+',1,ROWNUM)
                                     FROM   DUAL
                                     CONNECT BY REGEXP_SUBSTR(:c_undrlyng,'[^,]+',1,ROWNUM) IS NOT NULL)
       UNION ALL
       SELECT FCP_CLM_MTCH_ACCNT match,
              FCP_XCHNG_CD       xchng_cd,
              FCP_PRDCT_TYP      prdct_typ,
              FCP_INDSTK         indstk,
              FCP_UNDRLYNG       undrlyng,
              FCP_EXPRY_DT       expry_dt,
              ABS(FCP_OPNPSTN_QTY)  opnpstn_qty,
              NVL(FCP_STRK_PRC,0)   strk_price,
              NVL(FCP_OPT_TYP,'*')  opt_type,
              decode(FCP_OPNPSTN_FLW,'B','S','B') opnpstn_flw
       FROM   FCP_FO_SPN_CNTRCT_PSTN,FTQ_FO_TRD_QT
       WHERE  FCP_UNDRLYNG  = FTQ_UNDRLYNG
       AND    FCP_PRDCT_TYP = FTQ_PRDCT_TYP
       AND    FCP_XCHNG_CD  = FTQ_XCHNG_CD
       AND    FCP_EXPRY_DT  = FTQ_EXPRY_DT
       AND    FCP_XCHNG_CD  = :c_xchng_cd
       AND    FCP_PRDCT_TYP = :c_prdct_typ
       AND    FCP_EXPRY_DT  = :c_expry_dt
       AND    FCP_OPNPSTN_FLW != 'N'
       AND    FTQ_SETLMNT_FLG  = 'P'
       AND    NVL(FCP_DLVRY_MODE_FLAG,'N')   != 'Y'           /*** Ver 1.4 ***/
       AND    NVL(FCP_DLVRY_OBLGAMT_BLCKD,0)  = 0             /*** Ver 1.4 ***/
       AND    NVL(FCP_DLVRY_QTY_BLCKD,0)      = 0             /*** Ver 1.4 ***/
       AND    TRIM(FTQ_UNDRLYNG)  IN (SELECT REGEXP_SUBSTR(:c_undrlyng,'[^,]+',1,ROWNUM)
                                      FROM   DUAL
                                      CONNECT BY REGEXP_SUBSTR(:c_undrlyng,'[^,]+',1,ROWNUM) IS NOT NULL);
      END;
     END-EXEC;
   }
   /***********  Ver 1.1 Ends ***********/
  }
  else if( c_prdct_typ =='O') 
  {
   /***************   Commented in Ver 1.1  *****************
   EXEC SQL EXECUTE
    BEGIN
     OPEN :sys_cursor FOR
     SELECT FCP_CLM_MTCH_ACCNT match,
            FCP_XCHNG_CD       xchng_cd,
            FCP_PRDCT_TYP      prdct_typ,
            FCP_INDSTK         indstk,
            FCP_UNDRLYNG       undrlyng,
            FCP_EXPRY_DT       expry_dt,
            ABS(FCP_OPNPSTN_QTY)  opnpstn_qty,
            NVL(FCP_STRK_PRC,0)   strk_price,
            NVL(FCP_OPT_TYP,'*')  opt_type,
            decode(FCP_OPNPSTN_FLW,'B','S','B') opnpstn_flw
     FROM   FCP_FO_SPN_CNTRCT_PSTN,FUM_FO_UNDRLYNG_MSTR   
     WHERE  FCP_UNDRLYNG  = FUM_UNDRLYNG
     AND    FCP_PRDCT_TYP = FUM_PRDCT_TYP
     AND    FCP_XCHNG_CD  = FUM_XCHNG_CD
     AND    FCP_XCHNG_CD  = :c_xchng_cd
     AND    FCP_PRDCT_TYP = :c_prdct_typ 
     AND    FCP_EXPRY_DT = :c_expry_dt
     AND    FCP_OPNPSTN_FLW != 'N'
     AND    FUM_SETLMNT_FLG = 'P';
     AND    TRIM(FUM_UNDRLYNG) LIKE :c_undrlyng
     UNION ALL
     SELECT FOP_CLM_MTCH_ACCNT match,
            FOP_XCHNG_CD       xchng_cd,
            FOP_PRDCT_TYP      prdct_typ,
            FOP_INDSTK         indstk,
            FOP_UNDRLYNG       undrlyng,
            FOP_EXPRY_DT       expry_dt,
            ABS(FOP_OPNPSTN_QTY) opnpstn_qty,
            FOP_STRK_PRC       strk_price,
            FOP_OPT_TYP        opt_type,
            decode(FOP_OPNPSTN_FLW,'B','S','B') opnpstn_flw
     FROM   FOP_FO_OPTIONS_PSTN,FUM_FO_UNDRLYNG_MSTR
     WHERE  FOP_UNDRLYNG  = FUM_UNDRLYNG
     AND    FOP_PRDCT_TYP = FUM_PRDCT_TYP
     AND    FOP_XCHNG_CD  = FUM_XCHNG_CD
     AND    FOP_XCHNG_CD  = :c_xchng_cd
     AND    FOP_PRDCT_TYP = :c_prdct_typ
     AND    FOP_EXPRY_DT = :c_expry_dt
     AND    FOP_OPNPSTN_FLW != 'N'
     AND    FUM_SETLMNT_FLG  = 'P'
     AND    TRIM(FUM_UNDRLYNG) LIKE :c_undrlyng
    END;
   END-EXEC;
  ******************   Ver 1.1 comment Ends *****************/ 

  /***********  Ver 1.1 Strats  ***********/
   if ( strcmp(c_undrlyng,"%") == 0 )
   {
     EXEC SQL EXECUTE
      BEGIN
       OPEN :sys_cursor FOR
	     SELECT FCP_CLM_MTCH_ACCNT match,
              FCP_XCHNG_CD       xchng_cd,
              FCP_PRDCT_TYP      prdct_typ,
              FCP_INDSTK         indstk,
              FCP_UNDRLYNG       undrlyng,
              FCP_EXPRY_DT       expry_dt,
              ABS(FCP_OPNPSTN_QTY)  opnpstn_qty,
              NVL(FCP_STRK_PRC,0)   strk_price,
              NVL(FCP_OPT_TYP,'*')  opt_type,
              decode(FCP_OPNPSTN_FLW,'B','S','B') opnpstn_flw
       FROM   FCP_FO_SPN_CNTRCT_PSTN,FTQ_FO_TRD_QT 
       WHERE  FCP_UNDRLYNG  = FTQ_UNDRLYNG
       AND    FCP_PRDCT_TYP = FTQ_PRDCT_TYP
       AND    FCP_XCHNG_CD  = FTQ_XCHNG_CD
       AND    FCP_EXPRY_DT  = FTQ_EXPRY_DT
       AND    FCP_STRK_PRC  = FTQ_STRK_PRC
       AND    FCP_OPT_TYP   = FTQ_OPT_TYP      /** Ver 1.2 **/
       AND    FCP_XCHNG_CD  = :c_xchng_cd
       AND    FCP_PRDCT_TYP = :c_prdct_typ
       AND    FCP_EXPRY_DT  = :c_expry_dt
			 AND    FCP_OPNPSTN_FLW != 'N'
       AND    FCP_OPNPSTN_FLW like :c_buysell_flg             /*** Ver 1.5 ***/ 
       AND    FTQ_SETLMNT_FLG  = 'P'
       AND    NVL(FCP_DLVRY_MODE_FLAG,'N')   != 'Y'           /*** Ver 1.4 ***/
       AND    NVL(FCP_DLVRY_OBLGAMT_BLCKD,0)  = 0             /*** Ver 1.4 ***/
       AND    NVL(FCP_DLVRY_QTY_BLCKD,0)      = 0             /*** Ver 1.4 ***/
       AND    TRIM(FTQ_UNDRLYNG) LIKE :c_undrlyng
       UNION ALL
       SELECT FOP_CLM_MTCH_ACCNT match,
              FOP_XCHNG_CD       xchng_cd,
              FOP_PRDCT_TYP      prdct_typ,
              FOP_INDSTK         indstk,
              FOP_UNDRLYNG       undrlyng,
              FOP_EXPRY_DT       expry_dt,
              ABS(FOP_OPNPSTN_QTY) opnpstn_qty,
              FOP_STRK_PRC       strk_price,
              FOP_OPT_TYP        opt_type,
              decode(FOP_OPNPSTN_FLW,'B','S','B') opnpstn_flw
       FROM   FOP_FO_OPTIONS_PSTN,FTQ_FO_TRD_QT
       WHERE  FOP_UNDRLYNG  = FTQ_UNDRLYNG
       AND    FOP_PRDCT_TYP = FTQ_PRDCT_TYP
       AND    FOP_XCHNG_CD  = FTQ_XCHNG_CD
       AND    FOP_EXPRY_DT  = FTQ_EXPRY_DT
       AND    FOP_STRK_PRC  = FTQ_STRK_PRC
       AND    FOP_OPT_TYP   = FTQ_OPT_TYP     /** Ver 1.2 **/
       AND    FOP_XCHNG_CD  = :c_xchng_cd
       AND    FOP_PRDCT_TYP = :c_prdct_typ
       AND    FOP_EXPRY_DT  = :c_expry_dt
			 AND    FOP_OPNPSTN_FLW != 'N'
       AND    FOP_OPNPSTN_FLW like :c_buysell_flg             /*** Ver 1.5 ***/ 
       AND    FTQ_SETLMNT_FLG  = 'P'
			 AND    NVL(FOP_DLVRY_MODE_FLAG,'N') != 'Y'             /*** Ver 1.4 ***/
			 AND    NVL(FOP_DLVRY_OBLGAMT_BLCKD,0) = 0              /*** Ver 1.4 ***/
			 AND    NVL(FOP_DLVRY_QTY_BLCKD,0) = 0		              /*** Ver 1.4 ***/
       AND    TRIM(FTQ_UNDRLYNG) LIKE :c_undrlyng;
      END;
     END-EXEC;
   }
   else
   {
     EXEC SQL EXECUTE
      BEGIN
       OPEN :sys_cursor FOR
       SELECT FCP_CLM_MTCH_ACCNT match,
              FCP_XCHNG_CD       xchng_cd,
              FCP_PRDCT_TYP      prdct_typ,
              FCP_INDSTK         indstk,
              FCP_UNDRLYNG       undrlyng,
              FCP_EXPRY_DT       expry_dt,
              ABS(FCP_OPNPSTN_QTY)  opnpstn_qty,
              NVL(FCP_STRK_PRC,0)   strk_price,
              NVL(FCP_OPT_TYP,'*')  opt_type,
              decode(FCP_OPNPSTN_FLW,'B','S','B') opnpstn_flw
       FROM   FCP_FO_SPN_CNTRCT_PSTN,FTQ_FO_TRD_QT
       WHERE  FCP_UNDRLYNG  = FTQ_UNDRLYNG
       AND    FCP_PRDCT_TYP = FTQ_PRDCT_TYP
       AND    FCP_XCHNG_CD  = FTQ_XCHNG_CD
       AND    FCP_EXPRY_DT  = FTQ_EXPRY_DT
       AND    FCP_STRK_PRC  = FTQ_STRK_PRC
       AND    FCP_OPT_TYP   = FTQ_OPT_TYP     /** Ver 1.2 **/
       AND    FCP_XCHNG_CD  = :c_xchng_cd
       AND    FCP_PRDCT_TYP = :c_prdct_typ
       AND    FCP_EXPRY_DT  = :c_expry_dt
			 AND    FCP_OPNPSTN_FLW != 'N'
       AND    FCP_OPNPSTN_FLW  like :c_buysell_flg            /*** Ver 1.5 ***/ 
       AND    FTQ_SETLMNT_FLG  = 'P'
       AND    NVL(FCP_DLVRY_MODE_FLAG,'N')   != 'Y'           /*** Ver 1.4 ***/
       AND    NVL(FCP_DLVRY_OBLGAMT_BLCKD,0)  = 0             /*** Ver 1.4 ***/
       AND    NVL(FCP_DLVRY_QTY_BLCKD,0)      = 0             /*** Ver 1.4 ***/
       AND    TRIM(FTQ_UNDRLYNG)   IN (SELECT REGEXP_SUBSTR(:c_undrlyng,'[^,]+',1,ROWNUM)
                                       FROM   DUAL
                                       CONNECT BY REGEXP_SUBSTR(:c_undrlyng,'[^,]+',1,ROWNUM) IS NOT NULL)
       UNION ALL
       SELECT FOP_CLM_MTCH_ACCNT match,
              FOP_XCHNG_CD       xchng_cd,
              FOP_PRDCT_TYP      prdct_typ,
              FOP_INDSTK         indstk,
              FOP_UNDRLYNG       undrlyng,
              FOP_EXPRY_DT       expry_dt,
              ABS(FOP_OPNPSTN_QTY) opnpstn_qty,
              FOP_STRK_PRC       strk_price,
              FOP_OPT_TYP        opt_type,
              decode(FOP_OPNPSTN_FLW,'B','S','B') opnpstn_flw
       FROM   FOP_FO_OPTIONS_PSTN,FTQ_FO_TRD_QT
       WHERE  FOP_UNDRLYNG  = FTQ_UNDRLYNG
       AND    FOP_PRDCT_TYP = FTQ_PRDCT_TYP
       AND    FOP_XCHNG_CD  = FTQ_XCHNG_CD
       AND    FOP_EXPRY_DT  = FTQ_EXPRY_DT
       AND    FOP_STRK_PRC  = FTQ_STRK_PRC
       AND    FOP_OPT_TYP   = FTQ_OPT_TYP      /** Ver 1.2 **/      
       AND    FOP_XCHNG_CD  = :c_xchng_cd
       AND    FOP_PRDCT_TYP = :c_prdct_typ
       AND    FOP_EXPRY_DT  = :c_expry_dt
			 AND    FOP_OPNPSTN_FLW != 'N'
       AND    FOP_OPNPSTN_FLW  like :c_buysell_flg            /*** Ver 1.5 ***/ 
       AND    FTQ_SETLMNT_FLG  = 'P'
       AND    NVL(FOP_DLVRY_MODE_FLAG,'N') != 'Y'             /*** Ver 1.4 ***/
       AND    NVL(FOP_DLVRY_OBLGAMT_BLCKD,0) = 0              /*** Ver 1.4 ***/
       AND    NVL(FOP_DLVRY_QTY_BLCKD,0) = 0                  /*** Ver 1.4 ***/
       AND    TRIM(FTQ_UNDRLYNG)   IN (SELECT REGEXP_SUBSTR(:c_undrlyng,'[^,]+',1,ROWNUM)
                                       FROM   DUAL
                                       CONNECT BY REGEXP_SUBSTR(:c_undrlyng,'[^,]+',1,ROWNUM) IS NOT NULL);
      END;
     END-EXEC;
   }
  /***********  Ver 1.1 Ends    ***********/ 
  }

  if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31070", SQLMSG, c_err_msg );
    EXEC SQL CLOSE :sys_cursor;
    EXEC SQL FREE  :sys_cursor;
/*    tpfree((char *)ptr_fml_buf);*/
    return FAILURE;
  }
  
  while(1)
  {
    MEMSET(sql_ffp_clm_mtch_accnt);
    MEMSET(sql_ffp_xchng_cd);
    MEMSET(sql_ffp_undrlyng);
    MEMSET(sql_ffp_expry_dt.arr);
    i_exceptn_exist=0;   /*** Ver 1.3 ***/

    EXEC SQL
    FETCH :sys_cursor
    into  :sql_ffp_clm_mtch_accnt,
          :sql_ffp_xchng_cd,
          :sql_ffp_prdct_typ,
          :sql_ffp_indstk,
          :sql_ffp_undrlyng,
          :sql_ffp_expry_dt,
          :sql_ffp_opnpstn_qty,
          :l_strike_prc,
          :c_opt_typ,
          :sql_ffp_opnpstn_flw;

    if(SQLCODE != 0)
    {
      if(SQLCODE == NO_DATA_FOUND)
      {
        fn_userlog( c_ServiceName,"Inside Break");

        /*** Ver 1.1 Starts ***/
        if( i_counter == 0 )
        {
          *c_flag = 'N';
        }
        /*** Ver 1.1 Ends ***/

        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE  :sys_cursor;
        break;
      }

      fn_errlog( c_ServiceName, "S31075",SQLMSG, c_err_msg );
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE  :sys_cursor;
			if( i_counter != 0 )
			{
      	tpfree((char *)ptr_fml_buf);
			}
      return FAILURE;
    }

		i_counter = 1;


    rtrim(sql_ffp_undrlyng); /** Ver 1.3 **/

    if (DEBUG_MSG_LVL_5)
    {  
    fn_userlog( c_ServiceName,"sql_ffp_clm_mtch_accnt :%s:",sql_ffp_clm_mtch_accnt);
    fn_userlog( c_ServiceName,"sql_ffp_xchng_cd :%s:", sql_ffp_xchng_cd);
		fn_userlog( c_ServiceName,"sql_ffp_prdct_typ :%c:", sql_ffp_prdct_typ);
		fn_userlog( c_ServiceName,"sql_ffp_undrlyng :%s:", sql_ffp_undrlyng);
		fn_userlog( c_ServiceName,"sql_ffp_indstk :%c:", sql_ffp_indstk);
		fn_userlog( c_ServiceName,"sql_ffp_expry_dt :%s:", sql_ffp_expry_dt.arr);
		fn_userlog( c_ServiceName,"l_strike_prc :%ld", l_strike_prc);
		fn_userlog( c_ServiceName,"c_opt_typ :%c:", c_opt_typ);
		fn_userlog( c_ServiceName,"sql_ffp_opnpstn_flw :%c:", sql_ffp_opnpstn_flw);
		fn_userlog( c_ServiceName,"sql_ffp_opnpstn_qty :%ld:", sql_ffp_opnpstn_qty);
   } 

   /***** Ver 1.3 ******/

   fn_userlog(c_ServiceName,"sql_ffp_prdct_typ :%c",sql_ffp_prdct_typ);

   if ( sql_ffp_prdct_typ == 'F')
   {
    fn_userlog(c_ServiceName,"Inside future");
 
    EXEC SQL
    SELECT COUNT(*)
    into :i_exceptn_exist
    FROM FPE_FO_PHYEOS_EXCPTNMSTR
    where TRIM(FPE_MTCH_ACCNT)=:sql_ffp_clm_mtch_accnt
    and TRIM(FPE_XCHNG_CD)=:sql_ffp_xchng_cd
    and FPE_PRDCT_TYP=:sql_ffp_prdct_typ
    and TRIM(FPE_UNDRLYNG)=:sql_ffp_undrlyng
    and FPE_EXPRY_DT=:sql_ffp_expry_dt
    and FPE_ACTV_FLG='A'
    and trunc(FPE_UPLD_TM)=trunc(sysdate);

     if(SQLCODE != 0)
     {
      fn_errlog( c_ServiceName, "S31080",SQLMSG, c_err_msg );
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE  :sys_cursor;
      tpfree((char *)ptr_fml_buf);
      return FAILURE;
     }
   }

   if ( sql_ffp_prdct_typ == 'O' )
   {
    fn_userlog(c_ServiceName,"Inside option");

    EXEC SQL
    SELECT COUNT(*)
    into :i_exceptn_exist
    FROM FPE_FO_PHYEOS_EXCPTNMSTR
    where TRIM(FPE_MTCH_ACCNT)=:sql_ffp_clm_mtch_accnt
    and TRIM(FPE_XCHNG_CD)=:sql_ffp_xchng_cd
    and FPE_PRDCT_TYP=:sql_ffp_prdct_typ
    and TRIM(FPE_UNDRLYNG)=:sql_ffp_undrlyng
    and FPE_EXPRY_DT=:sql_ffp_expry_dt
    and FPE_OPT_TYP=:c_opt_typ
    and FPE_STRK_PRC=:l_strike_prc
    and FPE_ACTV_FLG='A'
    and trunc(FPE_UPLD_TM)=trunc(sysdate);

     if(SQLCODE != 0)
     {
      fn_errlog( c_ServiceName, "S31085",SQLMSG, c_err_msg );
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE  :sys_cursor;
      tpfree((char *)ptr_fml_buf);
      return FAILURE;
     }
   }

    fn_userlog(c_ServiceName,"i_exceptn_exist :%d:",i_exceptn_exist);

    if ( i_exceptn_exist > 0 )
    {
     fn_userlog(c_ServiceName,"Skipping record - Exception exist for  :%s-%s-%c",sql_ffp_clm_mtch_accnt,sql_ffp_undrlyng,sql_ffp_prdct_typ);
     continue;
    }

    /***** Ver 1.3 ******/
    
    i_returncode = fn_pack_vartofml (c_ServiceName,
                                     c_err_msg,
                                     &ptr_fml_buf,
                                     10,
                                     FFO_XCHNG_CD, ( char * )sql_ffp_xchng_cd,
                                     FFO_EBA_MTCH_ACT_NO, ( char * )sql_ffp_clm_mtch_accnt,
                                     FFO_PRDCT_TYP, ( char * )&sql_ffp_prdct_typ,
                                     FFO_UNDRLYNG, ( char * )sql_ffp_undrlyng,
                                     FFO_CTGRY_INDSTK, ( char * )&sql_ffp_indstk,
                                     FFO_EXPRY_DT, (char * )sql_ffp_expry_dt.arr,
                                     FFO_STRK_PRC,( char * )&l_strike_prc,
                                     FFO_OPT_TYP,( char * )&c_opt_typ,
                                     FFO_OPNPSTN_FLW, ( char * )&sql_ffp_opnpstn_flw,
                                     FFO_OPNPSTN_QTY, ( char * )&sql_ffp_opnpstn_qty);
                                       
    if( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31090",LIBMSG, c_err_msg );
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE  :sys_cursor;
      tpfree((char *)ptr_fml_buf);
      return FAILURE;
    }

  }
  return SUCCESS;
}
