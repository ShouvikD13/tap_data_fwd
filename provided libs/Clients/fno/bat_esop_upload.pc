/************************************************************************************/
/*  Program     : BAT_ESOP_UPLOAD                                                   */
/*                                                                                  */
/*  Description : Run Mode   - L - Bulk Upload for loan creation                    */
/*                           - S - SAM Match Stock Haircut Master                   */
/*                           - E - Non-ICICI Demat Loans                            */
/*                                                                                  */
/*                                                                                  */
/*  Log         : Ver 1.0 Sanjeet Pawar (22-Mar-2021)                               */
/*                    1.1 Akash B - ESOP MTM Automation ( 06-Jun-2021)              */
/*                    1.2 Shraddha Karande 22-Jun-2022 (Chola ESOP)                 */
/*                    1.3 Sanjeet Pawar 27-Jan-2022 (bulk update changes)           */ 
/************************************************************************************/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fml_def.h>
#include <fn_read_debug_lvl.h>
#include <fn_battmpt.h>
#include<fn_tuxlib.h>
#include<fn_log.h>
#include <fn_env.h>
#include <fo.h>
#include <unistd.h>
#define SQLROWCOUNT  sqlca.sqlerrd[2]

void BAT_ESOP_UPLOAD(int argc,char *argv[])
{
 FBFR32 *ptr_fml_Ibuf;
 FBFR32 *ptr_fml_Obuf;
 char c_errmsg[256];
 char c_ServiceName[18];
 char c_srvc_nm[14];
 char c_mod='O';
 char c_elm_upd_flg='N';
 char c_run_dt[12];
 char c_command[350];
 char c_rqst_typ='\0';
 char c_xchng_cd[4];
 char c_cln_mtch_accnt[11];
 char c_loan_ref[21];
 char c_stock_cd[7];
 char c_dp_id[9];
 char c_dp_clnt_id[9];
 char c_stock_isin[13];
 char c_expiry_dt[12];
 char c_loan_disb_dt[12];
 char c_schm_cd[11];
 char c_clnt_typ='\0';
 char c_exp_dt[12];
 char c_rmrks[101];
 char c_active_flg='\0';
 char c_file_name[50];
 char c_list_flg='\0';
 char c_stck_nm[31];
 /*char c_loan_cheque_no[7]; commented in ver 1.2*/
 char c_loan_cheque_no[21]; /*added in ver 1.2*/
 char c_pld_req_allwd='\0'; 
 char c_loan_typ='\0'; /** Ver 1.1 **/
 char c_loan_financer='\0';    /*ver 1.2*/
  
 long l_exp_qty;
 long l_lckd_qty;
 long l_plg_qty;
 long l_unplg_qty;
 long l_blk_for_sale;
 long li_len_tobuf=0;
 long l_run_no=0;
 long int li_tot_rcrds=0;
 
 int i_returncode;
 int i_trnsctn;

 double d_loan_amt=0;
 double d_elm_mul=0.0;
 double d_im_buff_mrgn=0.0;
 double d_im_mrgn=0.0;
 double d_mm_buf_mrgn=0.0;
 double d_mm_mrgn=0.0;
 double d_min_mm_mrgn=0.0;
 double d_min_im_mrgn=0.0;
 
  
 ptr_fml_Ibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

 strcpy(c_ServiceName,argv[0]);
 INITBATDBGLVL(argv[0]);
 fn_userlog( c_ServiceName, "Batch process %s started", argv[0] );
 MEMSET(c_run_dt);
 MEMSET(c_errmsg);

 if ( argc < 7 )
  {
    fn_userlog("bat_esop_upload","Arg count :%d:",argc);
    fn_userlog(c_ServiceName,"Usage : %s <Tag> <Exchange Code> <Pipe id> <Mode>  <trd_date> <Run no>", argv[0] );
    return;
  }
 strcpy(c_run_dt,argv[5]);
 c_rqst_typ=argv[4][0];
 sscanf( argv[6] ,"%ld", &l_run_no );
 fn_userlog(c_ServiceName,"Run number :%ld:",l_run_no);
 fn_userlog(c_ServiceName,"c_rqst_typ :%c:",c_rqst_typ);

 if(c_rqst_typ=='L')
  {
  
 EXEC SQL
  DECLARE cur_tmp_loan_mstr 
  CURSOR FOR 
  select ETM_CLM_MTCH_ACCNT,
         ETM_LOAN_REF,
         ETM_DP_ID,          
         ETM_DP_CLNT_ID,
         ETM_STCK_CD,
         ETM_STCK_ISIN,
         ETM_ESOP_LOAN_AMT,
         ETM_LOAN_DISB_DT,
         ETM_EXP_QTY,
         ETM_SCHM_CD,
         ETM_EXPRY_DT,
         ETM_REMARKS,
         ETM_ACTIVE_FLG,
         ETM_LCKD_QTY,
         ETM_PLG_QTY,
         ETM_UNPLEDGE_REQ_QTY,
         ETM_PLG_REQ_ALLWD,
         ETM_BLOCK_FOR_SALE,
         ETM_CLNT_TYPE,
         ETM_SAP_CODE,
         trim(to_char(ETM_LOAN_CHEQUE_NO)),
         ETM_STCK_NM,
         ETM_LIST_FLG,
         ETM_LOAN_TYPE, /** Ver 1.1 **/
         ETM_LOAN_FINANCER /*ver 1.2*/
  from   ETM_ESOP_TEMP_LOAN_MSTR
  where  trunc(ETM_GNRTN_DT)     =:c_run_dt
  and    ETM_RUN_NO              =:l_run_no;

  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
     fn_errlog( c_ServiceName, "S31005", SQLMSG, c_errmsg );
     EXEC SQL CLOSE cur_tmp_loan_mstr; 
     return;
  }
  fn_userlog(c_ServiceName,"records fetch into cursor");


  EXEC SQL OPEN cur_tmp_loan_mstr;

  if( SQLCODE != 0 )
  {
      fn_errlog( c_ServiceName, "S31010", SQLMSG, c_errmsg );
      EXEC SQL CLOSE cur_tmp_loan_mstr;
      return;
  }
  li_tot_rcrds=0;
  while(1)
  {
  MEMSET(c_cln_mtch_accnt);
  MEMSET(c_loan_ref);
  MEMSET(c_stock_cd);
  MEMSET(c_dp_id);
  MEMSET(c_dp_clnt_id);
  MEMSET(c_stock_isin);
  MEMSET(c_expiry_dt);
  MEMSET(c_loan_disb_dt);
  MEMSET(c_schm_cd);
  MEMSET(c_rmrks);
  MEMSET(c_exp_dt);
  MEMSET(c_file_name);
  c_clnt_typ='\0';
  c_active_flg='\0';
  MEMSET(c_stck_nm);
  c_list_flg='\0'; 
  c_pld_req_allwd='\0';
  d_loan_amt=0.0;
  l_lckd_qty=0; 
  l_plg_qty=0;
  l_unplg_qty=0;
  l_blk_for_sale=0; 
  c_loan_typ='\0'; /** Ver 1.1 **/
  c_loan_financer='\0';/*ver 1.2*/
  
        EXEC SQL
        FETCH cur_tmp_loan_mstr 
        INTO :c_cln_mtch_accnt,
        :c_loan_ref,
        :c_dp_id,   
        :c_dp_clnt_id,
        :c_stock_cd,
        :c_stock_isin,
        :d_loan_amt,
        :c_loan_disb_dt,
        :l_exp_qty,
        :c_schm_cd,
        :c_exp_dt,
        :c_rmrks,
        :c_active_flg,
        :l_lckd_qty,
        :l_plg_qty,
        :l_unplg_qty,
        :c_pld_req_allwd,
        :l_blk_for_sale,
        :c_clnt_typ,
        :c_file_name,
        :c_loan_cheque_no,
        :c_stck_nm,
        :c_list_flg,
        :c_loan_typ,
        :c_loan_financer;/*ver 1.4*/
     
  if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
      fn_errlog( c_ServiceName, "S31015", SQLMSG, c_errmsg  );
      EXEC SQL CLOSE cur_tmp_loan_mstr;
      return;
  }
  if(SQLCODE == NO_DATA_FOUND )
  {
      fn_userlog(c_ServiceName,"No more records to process for tmp loan master");
      EXEC SQL CLOSE cur_tmp_loan_mstr;
      break;
  }
  rtrim(c_loan_ref);
  rtrim(c_cln_mtch_accnt);
  rtrim(c_dp_id);
  rtrim(c_dp_clnt_id);
  rtrim(c_stock_cd);
  rtrim(c_stock_isin);
  rtrim(c_loan_disb_dt);
  rtrim(c_schm_cd);
  rtrim(c_exp_dt);
  rtrim(c_rmrks);
  rtrim(c_stck_nm);
  rtrim(c_file_name);
  c_elm_upd_flg='N';
  fn_userlog(c_ServiceName,"Match account=:%s:",c_cln_mtch_accnt);
  fn_userlog(c_ServiceName,"Loan Reference=:%s:",c_loan_ref);
  fn_userlog(c_ServiceName,"Dp Id=:%s:",c_dp_id);
  fn_userlog(c_ServiceName,"Client id=:%s:",c_dp_clnt_id);
  fn_userlog(c_ServiceName,"Stock Code=:%s:",c_stock_cd);
  fn_userlog(c_ServiceName,"Stock Isin=:%s:",c_stock_isin);
  fn_userlog(c_ServiceName,"Loan amount=:%lf:",d_loan_amt);
  fn_userlog(c_ServiceName,"Loan issue date=:%s:",c_loan_disb_dt);
  fn_userlog(c_ServiceName,"Expected qty=:%ld:",l_exp_qty);
  fn_userlog(c_ServiceName,"Intreset scheme code=:%s:",c_schm_cd);
  fn_userlog(c_ServiceName,"Expire Date=:%s:",c_exp_dt);
  fn_userlog(c_ServiceName,"Remarks=:%s:",c_rmrks);
  fn_userlog(c_ServiceName,"Active/Close Flag=:%c:",c_active_flg);
  fn_userlog(c_ServiceName,"Locked Qty=:%ld:",l_lckd_qty); 
  fn_userlog(c_ServiceName,"Pledge qty=:%ld:",l_plg_qty);
  fn_userlog(c_ServiceName,"Unpledge qty=:%ld:",l_unplg_qty);
  fn_userlog(c_ServiceName,"Pledge request allowed=:%c:",c_pld_req_allwd);
  fn_userlog(c_ServiceName,"Block for sale=:%ld:",l_blk_for_sale);
  fn_userlog(c_ServiceName,"Client Type=:%c:",c_clnt_typ);
  fn_userlog(c_ServiceName,"SAP cade=:%s:",c_file_name);
  fn_userlog(c_ServiceName,"lOAN cheque no=:%s:",c_loan_cheque_no);
  fn_userlog(c_ServiceName,"Stock name=:%s:",c_stck_nm);
  fn_userlog(c_ServiceName,"List Flag=:%c:",c_list_flg);
  fn_userlog(c_ServiceName,"Eml Upload Flag=:%c:",c_elm_upd_flg);
  fn_userlog(c_ServiceName,"Loan type :%c:",c_loan_typ);  /** Ver 1.1 **/
  fn_userlog(c_ServiceName,"Loan Financer :%c:",c_loan_financer);/* ver 1.2*/

  Finit32(ptr_fml_Ibuf, (FLDLEN32) Fsizeof32(ptr_fml_Ibuf));
  Finit32(ptr_fml_Obuf, (FLDLEN32) Fsizeof32(ptr_fml_Obuf));  
     /****************** call SVC_ESOP_UPDT ********************/
  strcpy(c_srvc_nm,"SVC_ESOP_UPDT");
  fn_userlog(c_ServiceName,"Calling SVC_ESOP_UPDT to compute latest values");

  i_returncode = fn_call_svc_fml ( c_ServiceName,
                                   c_errmsg,
                                   c_srvc_nm,
                                   0,
                                   27,  /** Changed from 25 to 26 in Ver 1.1 **//*changed to 27 in ver 1.2*/
                                   0,
                                   FML_SUB_MOD_FLG, (char *)&c_mod,
                                   FML_MATCH_ACCOUNT_NO, (char *)c_cln_mtch_accnt,
                                   FML_ARD_CLNT_DP_ID, (char *)c_dp_id,
                                   FML_DP_ACCOUNT_NO, (char *)c_dp_clnt_id,
                                   FML_STCK_CD, (char *)c_stock_cd,
                                   FML_ISIN_NMBR, (char *)c_stock_isin,
                                   FML_DELIVERY_VAL, (char *)&d_loan_amt,
                                   FML_USR_DT_BRTH, (char *)c_loan_disb_dt,
                                   FML_QTY, (char *)&l_exp_qty,
                                   FML_SCHM_ID, (char *)c_schm_cd,
                                   FML_EXPIRY_DATE, (char *)c_exp_dt,
                                   FML_ARD_APPLCTN_RMRKS, (char *)c_rmrks,
                                   FML_GAME_REG_FLG, (char *)&c_active_flg,
                                   FML_TRNSCTN_QTY, (char *)&l_lckd_qty,
                                   FML_QTY_HLD, (char *)&l_plg_qty,
                                   FML_OTRNSCTN_QTY, (char *)&l_unplg_qty,
                                   FML_FRM_ALLWD, (char *)&c_pld_req_allwd,
                                   FML_LTQ_BST2_BID_QTY, (char *)&l_blk_for_sale,
                                   FML_UPDATE_SUCCESS, (char *)&c_clnt_typ,
                                   FML_FILE_NAME, (char *)c_file_name,
                                   FML_MKT_MSG, (char *)c_loan_cheque_no,
                                   FML_STTLMNT_DT, (char *)c_stck_nm,
                                   FML_QT_TRDNG, (char *)&c_list_flg,
                                   FML_O_ENG_ORD_NO, (char *)c_loan_ref,
                                   FML_PRTFLO_EXISTS, (char *)&c_elm_upd_flg,
                                   FML_SQ_FLG , (char *)&c_loan_typ, /** Ver 1.1 **/
                                   FML_TYP_OF_USR , (char *)&c_loan_financer   /*ver 1.2*/ 
                                   ); 

  if ( i_returncode != SUCC_BFR )
  {
    fn_errlog( c_ServiceName, "S31020", LIBMSG, c_errmsg );
    sprintf( c_command, "ksh %s/sh_scripts/esop_elm_loan_mst_status.sh %s %ld",tuxgetenv("HOME"),c_run_dt,l_run_no);
    system(c_command);
    fn_userlog(c_ServiceName, "Mail sent");
    return;
  } 
  li_tot_rcrds++;
  }
  sprintf( c_command, "ksh %s/sh_scripts/esop_elm_loan_mst_status.sh %s %ld",tuxgetenv("HOME"),c_run_dt,l_run_no);
  system(c_command);
  fn_userlog(c_ServiceName, "Mail sent"); 
  fn_userlog(c_ServiceName,"Total no of records process=:%d:",li_tot_rcrds); 
  } 
  else if(c_rqst_typ=='S')
  {
    fn_userlog(c_ServiceName,"S mode call");
    i_trnsctn= fn_begintran( c_ServiceName, c_errmsg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog ( c_ServiceName, "S31025", LIBMSG, c_errmsg );
    return ;
  }
  EXEC SQL
  DECLARE cur_tmp_haircut_mstr
  CURSOR FOR
  select CTM_CLM_MTCH_ACCNT,
         CTM_STCK_CD,
         CTM_ELM_MULTPLYR, 
         CTM_IM_BUFFER_MRGN,
         CTM_INIT_MRGN,
         CTM_MM_BUFFER_MRGN,
         CTM_MIN_MRGN,
         CTM_MIN_MAINT_MRGN,
         CTM_MIN_INIT_MRGN 
   from  CTM_CLNT_TEMPHAIRCUT_MSTR
   where trunc(CTM_GNRTN_DT) =:c_run_dt
   and   CTM_RUN_NO          =:l_run_no;
  
  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
     fn_errlog( c_ServiceName, "S31030", SQLMSG, c_errmsg );
     EXEC SQL CLOSE cur_tmp_haircut_mstr;
     tpabort(0);
     sprintf( c_command, "ksh %s/sh_scripts/tmp_haircut_mstr.sh %s %ld",tuxgetenv("HOME"),c_run_dt,l_run_no);
     system(c_command);
     fn_userlog(c_ServiceName, "Mail sent");
     return;
  }
  fn_userlog(c_ServiceName,"records fetch into cursor");


  EXEC SQL OPEN cur_tmp_haircut_mstr;

  if( SQLCODE != 0 )
  {
      fn_errlog( c_ServiceName, "S31035", SQLMSG, c_errmsg );
      EXEC SQL CLOSE cur_tmp_haircut_mstr;
      tpabort(0);
      sprintf( c_command, "ksh %s/sh_scripts/tmp_haircut_mstr.sh %s %ld",tuxgetenv("HOME"),c_run_dt,l_run_no);
      system(c_command);
      fn_userlog(c_ServiceName, "Mail sent");
      return;
  }
  li_tot_rcrds=0; 
  while(1)
  {
  MEMSET(c_cln_mtch_accnt);
  MEMSET(c_stock_cd);
  d_elm_mul=0.0;
  d_im_buff_mrgn=0.0;
  d_im_mrgn=0.0;
  d_mm_buf_mrgn=0.0;
  d_mm_mrgn=0.0;
  d_min_mm_mrgn=0.0;
  d_min_im_mrgn=0.0;  
  EXEC SQL
  FETCH cur_tmp_haircut_mstr 
  INTO       :c_cln_mtch_accnt,
             :c_stock_cd,
             :d_elm_mul,
             :d_im_buff_mrgn,
             :d_im_mrgn,
             :d_mm_buf_mrgn,
             :d_mm_mrgn,
             :d_min_mm_mrgn,
             :d_min_im_mrgn;  
  
  if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
      fn_errlog( c_ServiceName, "S31040", SQLMSG, c_errmsg  );
      EXEC SQL CLOSE cur_tmp_haircut_mstr;
      tpabort(0);
      sprintf( c_command, "ksh %s/sh_scripts/tmp_haircut_mstr.sh %s %ld",tuxgetenv("HOME"),c_run_dt,l_run_no);
      system(c_command);
      fn_userlog(c_ServiceName, "Mail sent");
      return;
  }
  if(SQLCODE == NO_DATA_FOUND )
  {
      fn_userlog(c_ServiceName,"No more records to process for ctm_client_haircut_master");
      EXEC SQL CLOSE cur_tmp_haircut_mstr;
      break;
  }
  rtrim(c_cln_mtch_accnt);
  rtrim(c_stock_cd);
  
  fn_userlog(c_ServiceName,"Match account=:%s:",c_cln_mtch_accnt);
  fn_userlog(c_ServiceName,"Stock Code=:%s:",c_stock_cd);
  fn_userlog(c_ServiceName,"ELM multiplier=:%lf:",d_elm_mul);
  fn_userlog(c_ServiceName,"IM Buffer Margin=:%lf:",d_im_buff_mrgn);
  fn_userlog(c_ServiceName,"Initial Margin =:%lf:",d_im_mrgn);
  fn_userlog(c_ServiceName,"MM Buffer margin =:%lf:",d_mm_buf_mrgn);
  fn_userlog(c_ServiceName,"MM margin=:%lf:",d_mm_mrgn);
  fn_userlog(c_ServiceName,"Min MM nargin=:%lf:",d_min_mm_mrgn);
  fn_userlog(c_ServiceName,"Min IM margin=:%lf:",d_min_im_mrgn);
   
  EXEC SQL
  update CHM_CLNT_HAIRCUT_MSTR
  set    CHM_ELM_MULTPLYR   =:d_elm_mul,
         CHM_IM_BUFFER_MRGN =:d_im_buff_mrgn,
         CHM_INIT_MRGN      =:d_im_mrgn,
         CHM_MM_BUFFER_MRGN =:d_mm_buf_mrgn,
         CHM_MIN_MRGN       =:d_mm_mrgn,
         CHM_MIN_MAINT_MRGN =:d_min_mm_mrgn,
         CHM_MIN_INIT_MRGN  =:d_min_im_mrgn
  where  CHM_CLM_MTCH_ACCNT =:c_cln_mtch_accnt
  and    CHM_STCK_CD        =:c_stock_cd; 
   
  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
     fn_errlog( c_ServiceName, "S31045", SQLMSG, c_errmsg );
     EXEC SQL CLOSE cur_tmp_haircut_mstr;
     tpabort(0);
     sprintf( c_command, "ksh %s/sh_scripts/tmp_haircut_mstr.sh %s %ld",tuxgetenv("HOME"),c_run_dt,l_run_no);
     system(c_command);
     fn_userlog(c_ServiceName, "Mail sent");
     return;
  }
  fn_userlog (c_ServiceName, "Record update for CHM_CLNT_HAIRCUT_MSTR  : <%ld> for :%s-%s:", SQLROWCOUNT,c_cln_mtch_accnt,c_stock_cd);
  if(SQLCODE == NO_DATA_FOUND )
  {
     fn_userlog(c_ServiceName,"Now inserting records in CHM_CLNT_HAIRCUT_MSTR"); 
     EXEC SQL
     INSERT INTO CHM_CLNT_HAIRCUT_MSTR
     ( CHM_CLM_MTCH_ACCNT,
       CHM_STCK_CD,
       CHM_ELM_MULTPLYR,
       CHM_IM_BUFFER_MRGN,
       CHM_INIT_MRGN,
       CHM_MM_BUFFER_MRGN,
       CHM_MIN_MRGN,
       CHM_MIN_MAINT_MRGN,
       CHM_MIN_INIT_MRGN
     )
    values
    (
    :c_cln_mtch_accnt,
    :c_stock_cd,
    :d_elm_mul,
    :d_im_buff_mrgn,
    :d_im_mrgn,
    :d_mm_buf_mrgn,
    :d_mm_mrgn,
    :d_min_mm_mrgn,
    :d_min_im_mrgn
    );
  if ( SQLCODE != 0 )
  {
      fn_userlog(c_ServiceName,"Error while inserting into CHM_CLNT_HAIRCUT_MSTR table .. ");
      fn_errlog(c_ServiceName, "S31050", SQLMSG, c_errmsg );
      EXEC SQL CLOSE cur_tmp_haircut_mstr;
      tpabort(0);
      sprintf( c_command, "ksh %s/sh_scripts/tmp_haircut_mstr.sh %s %ld",tuxgetenv("HOME"),c_run_dt,l_run_no);
      system(c_command);
      fn_userlog(c_ServiceName, "Mail sent");
      return;
  }

  fn_userlog(c_ServiceName,"%ld-records inserted  into CHM_CLNT_HAIRCUT_MSTr for :%s-%s:", SQLROWCOUNT,c_cln_mtch_accnt,c_stock_cd);

  }
   
   EXEC SQL
   update CTM_CLNT_TEMPHAIRCUT_MSTR 
   set    CTM_STATUS_FLG     = 'Y'
   where  CTM_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
   and    CTM_STCK_CD        = :c_stock_cd
   and    trunc(CTM_GNRTN_DT) =:c_run_dt
   and    CTM_RUN_NO          =:l_run_no; 
  
  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
     fn_errlog( c_ServiceName, "S31055", SQLMSG, c_errmsg );
     EXEC SQL CLOSE cur_tmp_haircut_mstr;
     tpabort(0);
     sprintf( c_command, "ksh %s/sh_scripts/tmp_haircut_mstr.sh %s %ld",tuxgetenv("HOME"),c_run_dt,l_run_no);
     system(c_command);
     fn_userlog(c_ServiceName, "Mail sent");
     return;
  } 
    li_tot_rcrds++;
  } /** end of while loop **/
  if (fn_committran( c_ServiceName,i_trnsctn, c_errmsg ) == -1 )
  {
     tpabort (0);        
     fn_errlog(c_ServiceName,"S31060",LIBMSG,c_errmsg);
     fn_userlog(c_ServiceName,"Error in commiting trans");
     return;
  }
  
  sprintf( c_command, "ksh %s/sh_scripts/tmp_haircut_mstr.sh %s %ld",tuxgetenv("HOME"),c_run_dt,l_run_no);
  system(c_command);
  fn_userlog(c_ServiceName, "Mail sent"); 
  fn_userlog(c_ServiceName,"total no of records=:%d:",li_tot_rcrds);
  }    
  else if(c_rqst_typ == 'E')
  {
  fn_userlog(c_ServiceName,"E mode call");
  i_trnsctn= fn_begintran( c_ServiceName, c_errmsg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog ( c_ServiceName, "S31065", LIBMSG, c_errmsg );
    return ;
  }
  EXEC SQL
  DECLARE cur_nonisec_dtls  
  Cursor for
  select END_MATCH_ACC,
         END_LOAN_REF,
         END_PLG_QTY,
         END_EXP_QTY
  from   END_ESOP_NONISEC_DETAILS
  where  trunc(END_GNRTN_DT) = :c_run_dt
  and    END_RUN_NO          = :l_run_no;

  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
     fn_errlog( c_ServiceName, "S31070", SQLMSG, c_errmsg );
     EXEC SQL CLOSE cur_nonisec_dtls; 
     tpabort(0);
     sprintf( c_command, "ksh %s/sh_scripts/esop_non_isec_dtls.sh %s %ld",tuxgetenv("HOME"),c_run_dt,l_run_no);
     system(c_command);
     fn_userlog(c_ServiceName, "Mail sent");
     return;
  }
  fn_userlog(c_ServiceName,"records fetch into cursor");


  EXEC SQL OPEN cur_nonisec_dtls;

  if( SQLCODE != 0 )
  {
      fn_errlog( c_ServiceName, "S31075", SQLMSG, c_errmsg );
      EXEC SQL CLOSE cur_nonisec_dtls;
      tpabort(0);
      sprintf( c_command, "ksh %s/sh_scripts/esop_non_isec_dtls.sh %s %ld",tuxgetenv("HOME"),c_run_dt,l_run_no);
      system(c_command);
      fn_userlog(c_ServiceName, "Mail sent");
      return;
  }
  li_tot_rcrds=0;
  while(1)
  {
  MEMSET(c_cln_mtch_accnt);
  MEMSET(c_loan_ref);
  l_plg_qty=0;
  l_exp_qty=0;
  EXEC SQL
  FETCH cur_nonisec_dtls 
  INTO  :c_cln_mtch_accnt,
        :c_loan_ref,
        :l_plg_qty,
        :l_exp_qty;

  if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
      fn_errlog( c_ServiceName, "S31080", SQLMSG, c_errmsg  );
      EXEC SQL CLOSE cur_nonisec_dtls;
      tpabort(0);
      sprintf( c_command, "ksh %s/sh_scripts/esop_non_isec_dtls.sh %s %ld",tuxgetenv("HOME"),c_run_dt,l_run_no);
      system(c_command);
      fn_userlog(c_ServiceName, "Mail sent");
      return;
  }
  if(SQLCODE == NO_DATA_FOUND )
  {
      fn_userlog(c_ServiceName,"No more records to process for END_ESOP_NONISEC_DETAILS");
      EXEC SQL CLOSE cur_nonisec_dtls;
      break;
  }   
  rtrim(c_loan_ref);
  rtrim(c_cln_mtch_accnt); 
  fn_userlog(c_ServiceName,"Match account=:%s:",c_cln_mtch_accnt);
  fn_userlog(c_ServiceName,"Loan Reference=:%s:",c_loan_ref);
  fn_userlog(c_ServiceName,"Pledge Qty=:%ld:",l_plg_qty);
  fn_userlog(c_ServiceName,"Expected Qty=:%ld:",l_exp_qty);
  EXEC SQL
  update ELM_ESOP_LOAN_MSTR 
  set    ELM_PLG_QTY         =:l_plg_qty,
         ELM_EXP_QTY         =:l_exp_qty
  where  ELM_CLM_MTCH_ACCNT  =:c_cln_mtch_accnt
  and    ELM_LOAN_REF        =:c_loan_ref;

  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
     fn_errlog( c_ServiceName, "S31085", SQLMSG, c_errmsg );
     EXEC SQL CLOSE cur_tmp_haircut_mstr;
     tpabort(0);
     sprintf( c_command, "ksh %s/sh_scripts/esop_non_isec_dtls.sh %s %ld",tuxgetenv("HOME"),c_run_dt,l_run_no);
     system(c_command);
     fn_userlog(c_ServiceName, "Mail sent"); 
     return;
  }   
  fn_userlog(c_ServiceName,"Records update succesfully");
  EXEC SQL
  update END_ESOP_NONISEC_DETAILS
  set    END_STATUS_FLG = 'Y'
  where  END_MATCH_ACC  = :c_cln_mtch_accnt
  and    END_LOAN_REF   = :c_loan_ref
  and    trunc(END_GNRTN_DT) = :c_run_dt
  and    END_RUN_NO          = :l_run_no;
  
  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
     fn_errlog( c_ServiceName, "S31090", SQLMSG, c_errmsg );
     EXEC SQL CLOSE cur_tmp_haircut_mstr;
     tpabort(0);
     sprintf( c_command, "ksh %s/sh_scripts/esop_non_isec_dtls.sh %s %ld",tuxgetenv("HOME"),c_run_dt,l_run_no);
     system(c_command);
     fn_userlog(c_ServiceName, "Mail sent");
     return;
  } 
  li_tot_rcrds++;
  }    /** end of while loop **/
  if (fn_committran( c_ServiceName,i_trnsctn, c_errmsg ) == -1 )
  {
    tpabort ( 0 );          
    fn_errlog(c_ServiceName,"S31095",LIBMSG,c_errmsg);
    fn_userlog(c_ServiceName,"Error in commiting trans");
    return ;
  } 
  fn_userlog(c_ServiceName,"No of records process for esop_nonisec_details=:%d:",li_tot_rcrds);
  sprintf( c_command, "ksh %s/sh_scripts/esop_non_isec_dtls.sh %s %ld",tuxgetenv("HOME"),c_run_dt,l_run_no);
  system(c_command);
  fn_userlog(c_ServiceName, "Mail sent");
  }

  else if(c_rqst_typ=='U')   /** Ver 1.3 starts **/
  {
  fn_userlog(c_ServiceName,"update mode call");
    i_trnsctn= fn_begintran( c_ServiceName, c_errmsg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog ( c_ServiceName, "S31100", LIBMSG, c_errmsg );
    return ;
  }
   EXEC SQL
  DECLARE cur_tmp_loan_mstr_upd
  CURSOR FOR
  select ETM_CLM_MTCH_ACCNT,
         ETM_LOAN_REF,
         ETM_LOAN_TYPE /** Ver 1.1 **/
  from   ETM_ESOP_TEMP_LOAN_MSTR
  where  trunc(ETM_GNRTN_DT)     =:c_run_dt
  and    ETM_RUN_NO              =:l_run_no;
  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
     fn_errlog( c_ServiceName, "S31105", SQLMSG, c_errmsg );
     EXEC SQL CLOSE cur_tmp_loan_mstr_upd;
     return;
  }
  fn_userlog(c_ServiceName,"records fetch into cursor");
  EXEC SQL OPEN cur_tmp_loan_mstr_upd;

  if( SQLCODE != 0 )
  {
       fn_errlog( c_ServiceName, "S31110", SQLMSG, c_errmsg );
      EXEC SQL CLOSE cur_nonisec_dtls;
      tpabort(0);
      return;
  }
  li_tot_rcrds=0;
  while(1)
  {
  MEMSET(c_cln_mtch_accnt);
  MEMSET(c_loan_ref);
  c_loan_typ='\0'; /** Ver 1.1 **/

        EXEC SQL
        FETCH cur_tmp_loan_mstr_upd
        INTO :c_cln_mtch_accnt,
        :c_loan_ref,
        :c_loan_typ;

  if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
      fn_errlog( c_ServiceName, "S31115", SQLMSG, c_errmsg  );
      EXEC SQL CLOSE cur_tmp_loan_mstr_upd;
      return;
  }
  if(SQLCODE == NO_DATA_FOUND )
  {
      fn_userlog(c_ServiceName,"No more records to process bulk upload loan type");
      EXEC SQL CLOSE cur_tmp_loan_mstr_upd;
      break;
  }
  rtrim(c_loan_ref);
  rtrim(c_cln_mtch_accnt);
  fn_userlog(c_ServiceName,"Match account=:%s:",c_cln_mtch_accnt);
  fn_userlog(c_ServiceName,"Loan Reference=:%s:",c_loan_ref);
  fn_userlog(c_ServiceName,"Loan type :%c:",c_loan_typ);
  EXEC SQL
  update ELM_ESOP_LOAN_MSTR
  SET    ELM_LOAN_TYP = :c_loan_typ
  WHERE  ELM_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
  AND    ELM_LOAN_REF       = :c_loan_ref;

  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
     fn_errlog( c_ServiceName, "S31120", SQLMSG, c_errmsg );
     EXEC SQL CLOSE cur_tmp_loan_mstr_upd;
     return;
  }
  if(SQLCODE == NO_DATA_FOUND )
  {
      fn_userlog(c_ServiceName,"match id |%s| is not present in esop_loan_master to update loan type",c_cln_mtch_accnt);
      continue;
  }
  li_tot_rcrds++;
  } /** end of while loop **/

  if (fn_committran( c_ServiceName,i_trnsctn, c_errmsg ) == -1 )
  {
     tpabort (0);
     fn_errlog(c_ServiceName,"S31125",LIBMSG,c_errmsg);
     fn_userlog(c_ServiceName,"Error in commiting trans");
     return;
  }
 fn_userlog(c_ServiceName,"total no of records updated=:%d:",li_tot_rcrds);
  }    /** Ver 1.3 end **/

  else 
  { 
  fn_userlog(c_ServiceName,"pls check the input mode");
  }
  }

int fn_bat_init(int argc,char *argv[])
{
  fn_var=BAT_ESOP_UPLOAD;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  char c_msg[256];
  sprintf ( c_msg, "Batch process %s ended", argv[0] );
  fn_bat_pst_msg (  argv[0], c_msg, c_tag );
  return;
}


int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}

