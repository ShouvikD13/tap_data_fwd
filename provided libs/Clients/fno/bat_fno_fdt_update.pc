/*******************************************************************************
*  Program           : bat_fno_fdt_update.pc                                   *
*                                                                              *
*  Description       : One time run for FDT Insert/update                      *  
*                                                                              *
*                                                                              *
*  Change Log        : 1.0   08-Sep-2010  Nitin S  |   Infotech	               *
*											 1.1	 09-Sep-2014	Samip M	 |	 infotech								 *
********************************************************************************
*  1.0    -  New Release						                                           *                   
*  1.1    -  View to FML changes						                                   *
*******************************************************************************/

/* Header Files */

#include<sqlca.h>
#include<atmi.h>
#include <string.h>
#include <stdlib.h>
#include<fo.h>
#include<fml32.h>
#include<fn_log.h>
#include<fn_tuxlib.h>
#include<fn_battmpt.h>
#include<fml_def.h>
#include<fo_fml_def.h>
#include<fn_ddr.h>
/** #include<fo_view_def.h> **/	/** Ver 1.1 **/
#include <fn_read_debug_lvl.h>


#define SQL_ROW_COUNT sqlca.sqlerrd[2]
#define STR_TRIM(x) x[strlen(x)]='\0' 
#define MASTER_COMMIT_INTERVAL 1000  

/*----------------------------------------------------------------------------*/

EXEC SQL BEGIN DECLARE SECTION;

char c_ServiceName[256]={0};
char c_msg[256]={0};
char c_err_msg[256]={0};

char c_master_mode;
char c_load_data_flag;
char c_error_code;
int  i_trnsctn=0;
long l_master_counter=0;
long l_master_loop_counter=0;
long l_tmp_cnt=0;

long l_start_seq_nbr=0;
long l_end_seq_nbr=0;
 
EXEC SQL  END  DECLARE SECTION;

/*----------------------------------------------------------------------------*/

int fn_cstms_deact_enable(void);
int fn_cstms_deact_disable(void);
int fn_notloop_closure(void);

int fn_process_client(char * i_mtch_acnt_id ,double l_seq_nbr,char * i_usr_id, int i_fno_to_be_allwd);

void fn_print_date_time(void);
char *trim(char *str);

/******************************************************************************/

void BAT_FNO_FDT_UPDATE ( int argc, char *argv[])
{
  EXEC SQL BEGIN DECLARE SECTION;

  char c_svc_name[18]={0};
  char c_trd_date[21]={0};

  char c_xchng_cd[4]={0};

	long l_l_seq_nbr=0;
	varchar c_usr_id[11];
	varchar c_mtch_acnt_id[11]={0};

	int i_fno_to_be_allwd;
	
	double d_amount=0.00;

  EXEC SQL  END  DECLARE SECTION;

  strcpy(c_ServiceName,argv[0]);
  sprintf(c_tag,"%s_na",argv[0]);
  c_error_code='N';

  INITBATDBGLVL(argv[0]);

  fn_userlog (c_ServiceName,"====================================================");
  sprintf(c_msg,"Batch process %s is started",argv[0]);
  fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
  fn_userlog (c_ServiceName,"Batch process %s is started",argv[0]);
	fn_print_date_time();
	
  /*need to validate the params passed*/
  if ( argc != 7 )
  {
    fn_userlog (c_ServiceName,"Invalid Arguments passed %d",argc);
    fn_userlog (c_ServiceName,"Usage:%s NFO NFO NA <Mode-R/S><Seq_Start><Seq_End>",argv[0]);
		fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);    
    return;
  }
  else
  {
    c_master_mode=argv[4][0];    
    
    if  ( (c_master_mode != 'R') && (c_master_mode != 'S' ) )
    {
    	fn_userlog (c_ServiceName,"Invalid Arguments passed %d",argc);
    	fn_userlog (c_ServiceName,"Mode must be R or S - Real or Simulation");
    	return;
		}
		
		/* c_load_data_flag=argv[5][0];  */
		/* load data or not load data */
  /*  if  ( (c_load_data_flag != 'L') && (c_load_data_flag != 'N' ) )
    {
    	fn_userlog (c_ServiceName,"Invalid Arguments passed %d",argc);
    	fn_userlog (c_ServiceName,"load Mode must be L  or N - R:First time insert in FDT_TEMP and N: No Insert");
    	return;
		}		
  */
		l_start_seq_nbr=atol(argv[5]);   
		l_end_seq_nbr=atol(argv[6]);
		
    fn_userlog (c_ServiceName,"Arguments passed %c ",c_master_mode);
    fn_userlog (c_ServiceName,"SEQ START |%ld| END |%ld| ",l_start_seq_nbr,l_end_seq_nbr );
  }



/***********************   Commented the call to fn_cstms_deact_enable function Start***************/

/*
	if ( c_load_data_flag == 'L')
	{
				
		if ( fn_cstms_deact_enable() != 0 )
		{
			fn_errlog ( c_ServiceName, "S31005", SQLMSG, c_err_msg  );
			return ;
		}
	
	}
*/
/***********************   Commented the call to fn_cstms_deact_enable function End ***************/

	MEMSET(c_usr_id);
	MEMSET(c_mtch_acnt_id);


	while (1)  /* Outer while loop */
	{
		l_master_loop_counter++;
		
	  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
	  if ( i_trnsctn == -1 )
	  {
	      fn_userlog (c_ServiceName,"Failed in initial begin transaction ");
	    	fn_errlog ( c_ServiceName, "S31010", TPMSG, c_err_msg  );
	    	return ;
	  }
	
			/*--------------------------------------------------------------------------------*/
	  	while (1) /* Start of MAIN while */
			{
				l_master_counter ++ ;
				c_error_code='N';
				
			  EXEC SQL
			  	SELECT 		FDT_SEQ_ID, FDT_USR_ID, FDT_MATCH_ACNT, FDT_FNO_ALLWD
			  	INTO 			:l_l_seq_nbr, :c_usr_id,:c_mtch_acnt_id,:i_fno_to_be_allwd
			  	FROM 			FDT_FNO_DISABLE_TRACK_TEMP
					WHERE 		FDT_PRCS_FLG ='N'
					AND 			ROWNUM = 1
					AND 			FDT_SEQ_ID between :l_start_seq_nbr and :l_end_seq_nbr
					ORDER BY  FDT_SEQ_ID;

			  if (DEBUG_MSG_LVL_3)
			  {
   		     fn_userlog (c_ServiceName," Records Selected from Temp table <%ld> ", sqlca.sqlerrd[2]);
      		 fn_userlog (c_ServiceName," Records Value <%ld><%s><%s><%d> ", l_l_seq_nbr, c_usr_id.arr,
                       c_mtch_acnt_id.arr, i_fno_to_be_allwd );
			  }
		
			  if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
			  {
			    fn_errlog ( c_ServiceName, "S31015", SQLMSG, c_err_msg  );
			    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			    return ;
			  }

			  SETNULL(c_usr_id);
			  SETNULL(c_mtch_acnt_id);
		
			  if (SQLCODE == NO_DATA_FOUND) 
				{
		      fn_userlog (c_ServiceName," End of data in FDT_TEMP");
					break;
				}
		
		 		if (DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"==== Selected  %ld-<%s>:<%s>   FNO-%d =========", 
										l_l_seq_nbr,c_usr_id.arr ,c_mtch_acnt_id.arr,i_fno_to_be_allwd);
				}
		
				EXEC SQL
					UPDATE 		FDT_FNO_DISABLE_TRACK_TEMP
					SET 			FDT_PRCS_FLG='P'
					WHERE			FDT_MATCH_ACNT = :c_mtch_acnt_id
					AND 		  FDT_SEQ_ID = :l_l_seq_nbr;
		
			  if ( SQLCODE != 0 )
			  {
			    fn_errlog ( c_ServiceName, "S31020", SQLMSG, c_err_msg  );
			    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			    return ;
			  }
			  
				if (DEBUG_MSG_LVL_3)
				{
				 fn_print_date_time(); 
				}
		 		
		 		
		 		if (c_master_mode  == 'R' ) 
		 		{       
				  fn_userlog(c_ServiceName,"Calling Update/Insert process for user id: <%s> match id : <%s> ",
                     c_usr_id.arr ,c_mtch_acnt_id.arr);
					
					fn_process_client(c_mtch_acnt_id.arr,l_l_seq_nbr, c_usr_id.arr, i_fno_to_be_allwd);
				}
				else
				{
					fn_userlog(c_ServiceName,"In simulation mode- No update");
					
				}

			  
				if ( (l_master_counter % MASTER_COMMIT_INTERVAL) == 0 )	break;
					  
			} /* End of inner MAIN while */ 
	
		/*-------------------------------------------------------------------------------*/
	
		if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
		{
	    fn_userlog (c_ServiceName,"Failed in loop commit transaction |LOOP|-|%ld| ", l_master_loop_counter);
	  	fn_errlog ( c_ServiceName, "S31025", SQLMSG, c_err_msg);
	  	return ;
		}
	
	  if (SQLCODE == NO_DATA_FOUND) 
		{
	    fn_userlog (c_ServiceName," Breaking out of final loop");
			break;
		}
				
	}	/* End of the outer while */
	/*--------------------------------------------------------------------------------*/




  sprintf(c_msg,"Batch process %s completed",argv[0]);
  fn_userlog (c_ServiceName,"Batch process %s completed",argv[0]);
  fn_print_date_time();
  fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
  fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
  
  return ;

}
/******************************************************************************/


	int fn_bat_init ( int argc, char *argv[] )
	{
	  fn_var = BAT_FNO_FDT_UPDATE;
  	return 0;
	}
 
	void fn_bat_term ( int argc, char *argv[] )
	{
 	 return;
	} 
 
	int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
	{
 	 return 0;
	}


  int fn_cstms_deact_enable()
  {

 		  fn_userlog (c_ServiceName,"-------Loading Cst which were Deactive but FNO Allowed----");
			
  		i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
 	
 		  if ( i_trnsctn == -1 )
  		{
   	    fn_userlog (c_ServiceName,"Failed in FDT create begin transaction ");
   		 	fn_errlog ( c_ServiceName, "S31030", SQLMSG, c_err_msg  );
    	  return (-1);
 		  }



 		 /*************************************************************************
       EXEC SQL 
					INSERT INTO
  				FDT_FNO_DISABLE_TRACK_TEMP
					SELECT SEQ_DISBL_FNO_NMBR.NEXTVAL, USR_ID , MTCH_ACCNT , '' ,UAC_FNO_ALLWD, 
	        			 '1',0.00,0.00,0.00,0.00,0.00, 
								 'Manual entry -Skip Financial document check- One Time Bulk Updation to X', SYSDATE,'','','N'
		  		FROM
					(     
		 		 			( SELECT UAC_USR_ID USR_ID, UAC_CLM_MTCH_ACCNT  MTCH_ACCNT, UAC_FNO_ALLWD UAC_FNO_ALLWD
		  	 				FROM  UAC_USR_ACCNTS
		  	 				WHERE UAC_ACT_DEACT_FLG != 'C' 
		  	 				AND   UAC_ACT_DEACT_FLG != 'S'
		  	 				AND   UAC_FNO_ALLWD = 'Y'
		  	 				AND 	 trunc(UAC_LST_UPDT_DATE) < '25-Jun-2010' 
			 					AND 	 UAC_CLM_MTCH_ACCNT NOT LIKE '65%'
			 	 				AND 	 UAC_CLM_MTCH_ACCNT NOT LIKE '750%'
		     			)
         			minus
		     			(
		     				SELECT distinct FDT_USR_ID USR_ID, FDT_MATCH_ACNT MTCH_ACCNT, FDT_UAC_FNO_ALLWD UAC_FNO_ALLWD
		  	 				FROM FDT_FNO_DISABLE_TRACK
		   	 			)
	    		)
					;  

 		  	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
				{
     		 fn_userlog (c_ServiceName,"Failed in  FDT Insert commit transaction ");
    		 fn_errlog ( c_ServiceName, "S31035", SQLMSG, c_err_msg  );
      	 return (-1);
		}

	    		
				********************************************************************************/
				/*    Changed above query for using backup UAC table *************/

 	  return (0);

  }
/******************************************************************/



	int fn_process_client(i_mtch_acnt_id , l_seq_nbr, i_usr_id, i_fno_to_be_allwd)
	
	EXEC SQL BEGIN DECLARE SECTION;
	char  *  i_mtch_acnt_id;
	double  l_seq_nbr;
	char *  i_usr_id;
	int     i_fno_to_be_allwd;
	EXEC SQL END   DECLARE SECTION;
	{
			long val=0;

			EXEC SQL BEGIN DECLARE SECTION;
			char    c_l_flag='U';
			char		c_l_comment[500]={'\0'};
			EXEC SQL END   DECLARE SECTION;

			if (DEBUG_MSG_LVL_3)
			{
  		 fn_userlog (c_ServiceName,"Check n update *|%s|* *|%s|** |%d| ", i_usr_id, i_mtch_acnt_id, i_fno_to_be_allwd );
		  }
  
  
  		if( i_fno_to_be_allwd == 1)
  		{
			                fn_userlog (c_ServiceName," Case 1 insert");
					EXEC SQL
							 INSERT INTO FDT_FNO_DISABLE_TRACK
							 SELECT FDT_SEQ_ID,
											FDT_USR_ID,
											FDT_MATCH_ACNT,
											'',
											FDT_UAC_FNO_ALLWD,
										  'M',
											FDT_PLG_AMT,
											FDT_EQ_AMT,
											FDT_FO_AMT,
											FDT_MF_AMT,
											FDT_CR_AMT,
											FDT_COMMENT,
											FDT_PRCS_DATE,
											'',
											'',
										  'Y' 
							 FROM FDT_FNO_DISABLE_TRACK_TEMP
							 WHERE FDT_USR_ID = :i_usr_id
							 AND FDT_MATCH_ACNT = :i_mtch_acnt_id
							 AND FDT_SEQ_ID = :l_seq_nbr
							 AND FDT_PRCS_FLG='P';

			    if ( SQLCODE != 0 )
			    {
			      fn_userlog (c_ServiceName," Failed in Inserting into FDT from Temp");
			      fn_errlog  (c_ServiceName, "S31040", SQLMSG, c_err_msg  );
			    	return (-1);
			    }

				  if (DEBUG_MSG_LVL_3)
					{
  		 			fn_userlog (c_ServiceName,"Record inserted from temp to FDT: <%ld> <%s> <%ld>", 
									 		  sqlca.sqlerrd[2], i_usr_id, l_seq_nbr);
		  		}


				 	EXEC SQL
							 UPDATE 	FDT_FNO_DISABLE_TRACK_TEMP
							 SET 			FDT_PRCS_FLG='Y'
							 WHERE		FDT_USR_ID = :i_usr_id
							 AND		FDT_MATCH_ACNT = :i_mtch_acnt_id
							 AND 		  FDT_SEQ_ID = :l_seq_nbr
							 AND 			FDT_PRCS_FLG='P';
		
			  	if ( SQLCODE != 0 )
			  	{
			    	fn_errlog ( c_ServiceName, "S31045", SQLMSG, c_err_msg  );
				  	fn_errlog  (c_ServiceName, "S31050", SQLMSG, c_err_msg  );
						return (-1);
			  	}



  			  EXEC SQL
	  						UPDATE UAC_USR_ACCNTS
	  						SET 	 UAC_FNO_ALLWD = 'X'
	  						WHERE  UAC_CLM_MTCH_ACCNT = :i_mtch_acnt_id;
		
		  	  if ( SQLCODE != 0 )
		  	  {
		   	   fn_errlog ( c_ServiceName, "S31055", SQLMSG, c_err_msg  );
		   	   return (-1);
		  	  }

	 				EXEC SQL
								UPDATE USR_USER_MASTER
								SET		 USR_FNO_ACCPT_FLG ='N', USR_ACCPT_DT =SYSDATE
								WHERE  USR_USR_ID = :i_usr_id;
			
	  			if ( SQLCODE != 0 )
	  			{
	    			fn_errlog ( c_ServiceName, "S31060", SQLMSG, c_err_msg  );
	   				return (-1);
	  			}
		 
					/***** Column names added for Ver 1.1 ****/ 
	  			EXEC SQL
		 					 INSERT INTO ADH_ACT_DEACT_HSTRY
								(ADH_USR_ID,
								ADH_CLM_MTCH_ACCNT,
								ADH_ACT_DEACT_FLG,
								ADH_ACT_DEACT_DT,
								ADH_ACT_DEACT_SRC,
								ADH_RMRKS,
								ADH_UPGRD_FLG)
		 					 VALUES
	  					 (:i_usr_id ,:i_mtch_acnt_id , 'D', SYSDATE, 'FNO_COMPLIANCE', 
				 				'FNO disabled  - SEBI Circular Number MIRSD/SE/CIR19/2009 One Time Bulk Updation to X' , 'N' );
				
	 	 			if ( SQLCODE != 0 )
	 	 			{
	    			fn_errlog ( c_ServiceName, "S31065", SQLMSG, c_err_msg  );
			      return (-1);
	 	 			}


      }


	  return (0);
  }





/******************************************************************************/


	char *trim(char *str)
	{
  
  	int i;
  	for (i=0;i<strlen(str);i++)
    if (str[i]==' ') str[i]='\0';

  	return(str);
	}

	void fn_print_date_time()
	{
  	EXEC SQL BEGIN DECLARE SECTION;
  	char c_date_time[30];
  	EXEC SQL END   DECLARE SECTION;
  
  	EXEC SQL
  	SELECT
  	to_char(SYSDATE , 'dd-Mon-yyyy--hh24:mi:ss')
  	INTO :c_date_time
  	from dual;

 	  if ( SQLCODE != 0 )
  	{
    	fn_errlog ( c_ServiceName, "S31070", SQLMSG, c_err_msg  );
    	return ;
  	}
  
  	trim(c_date_time);
  	fn_userlog (c_ServiceName," ----  Time : %s  ---- ",c_date_time);  
	}

/*******************************************************************************
	END OF CODE
*******************************************************************************/
