/************************************************************************************/
/** Program Name : bat_insdr_dtls.pc                                                */
/**                                                                                 */
/** Description  : This program will run on daily basis. This will dump the         */ 
/**                employee transaction details in product FNO,EQ,MF,IPO,BONDS,FD   */
/**                in to insider report table                                       */
/**                                                                                 */
/** Ver 1.0      : Sachin Birje                                                     */
/** Ver 1.1      : Sachin Birje | Position Status Update change                     */
/** Ver 1.2      : Sachin Birje/sandip | ISIN no,Mail trigger on Process fail change*/
/** Ver 1.3      : Sandip |   Sungard Insider Report                  							*/
/** Ver 1.4      : Sandip |MF ISIN handling for SUNGARD(19-Jan-2016)                */
/** Ver 1.5      : Sandip/Sachin |Relatiive Match Id ,															*/						
/**																multiple comp sftp sharing changes (21-Feb-2016)  */
/** Ver 1.6      : Bhagyashri | Changes for delete flag in                          */
/**                                MF_PRT_TRANS CR-ISEC37-76602 (26-Apr-2016)       */
/** Ver 1.7      : Sandip |CR-ISEC04-80376 Sovereign Gold Bond trades 17-May-2016   */
/**                        CR-ISEC04-82649 Exclusion of zero holdings 17-May-2016   */
/** Ver 1.8      : Sandip |CR-ISEC04-78949 Millennium SFTP            17-May-2016   */
/** Ver 1.9      : Sandip |CR-ISEC04-84765 Addition of Expiry trades  03-Oct-2016   */
/** Ver 2.0      : Kishor |CR-ISEC14-89669 S&P insider report sftp    10-Jan-2017   */
/** Ver 2.1      : Sandip |CR-ISEC14-94139 Macquarie insider sftp     09-May-2017   */
/** Ver 2.2      : Sandip | CR-ISEC14-94138 Sovrgein GB tran date     22-May-2017   */
/** Ver 2.3      : Sandip | CR-ISEC14-95459/60/61 GS/CRSU/ENY sftp EVARE 12-May-2017*/
/** Ver 2.4      : Samip M|GST Changes                                29-Jun-2017   */
/** Ver 2.5      : Varadraj G | IPO Query Optimization               08-12-2017     */  
/** Ver 2.6      : Samip M | Transaction time change               		24-02-2018    */  
/** Ver 2.7      : Sandip T| Transaction time change               		22-Mar-2018   */
/** Ver 2.8      : Varadraj G | Seperation of query for IPO and BOND  13-Apr-2018   */  
/** Ver 2.9      : Sandip T  | fno portfolio table changed in pos report 26-Jul-2018*/ 
/** Ver 3.0      : Varadraj G |Position data generation for corporations 16-Oct-2018*/
/** Ver 3.1      : Varadraj G | Trade,Position and account data generation for      */
/*                              corporate BNY                                       */   
/** Ver 3.2      : Varadraj G |Issue type handling in case of IPO                   */
/** Ver 3.3      : Varadraj G |MF ISIN no modification for Other corporates         */ 
/**              : 31-Jan-2019                                                      */ 
/** Ver 3.4      : Tanmay Patel |CR-ISEC04-126618  AQR SFTP             27-Aug-2019 */
/** Ver 3.5      : Rajesh Shinde |CR-ISEC10-127556 IBANK FD             08-Jan-2019 */
/** Ver 3.6      : Tanmay Patel  | GMO & MORNINGSTAR SFTP               21-Jan-2020 */
/** Ver 3.7      : Sandip Tambe  | CR_ISEC04_134247 BAIN Cap            13-Mar-2020 */
/** Ver 3.8      : Sanjeet Pawar | CR-ISEC04-136353 Bloomberg (BLPC)    11-May-2020 */
/** Ver 3.9      : Saurabh Patil | CR-ISEC04-139249 SSBT                30-jul-2020 */ 
/** Ver 4.0      : Mahesh R      | CR-ISEC04-139245 FIL SFTP            30-jul-2020 */
/** Ver 4.1      : Sanjeet Pawar | CR-ISEC04-139247 FD and Bond         01-Sep-2020 */ 
/** Ver 4.2      : Sandip Tambe  | CR-ISEC04-143929 Populating Quantity 						*/
/*																									for_SGBBOND 				02-Nov-2020**/
/** Ver 4.3      : Sanjeet Pawar | CR-ISEC04-146724 FIL Report sharing 13-Jan-2021 **/                       
/*                                                  through auto mailer             */
/*  Ver 4.4      : zubin         | Minor changes for gold bonds 20-may-21           */
/*  Ver 4.5      : Sanjeet Pawar | CR-ISEC04-154272 SFTP Insider Report  Existing   */
/*                                                  NSER and NSFS                   */
/*  Ver 4.6      : Sanjeet Pawar | CR-ISEC04-151875 Deloitte Report sharing through */ 
/*                                                  SFTP                22-Apr-2021 */ 
/*  Ver 4.7      : Tanmay Patel  | CR-ISEC04-151543 Modification in ISIN logic for  */
/*                                                  MF scheme           23-Apr-2021 */ 
/*  Ver 4.8      : Sanjeet Pawar | CR-ISEC04-157054 SFTP Insider Report changes     */
/*                                 CR-ISEC04-157051 for Invesco and Ares Management */
/*  Ver 4.9      : Sanjeet Pawar | CR-ISEC04-159824 TVPL STAR COMPLIANCE SFTP       */
/*                               | CR-ISEC04-159825 FTIklin Star Compliance        */
/*                               | CR-ISEC04-158826 Nasdaq Sunguard Sftp            */
/*  Ver 5.0      : Sanjeet Pawar | CR-ISEC04-165383 MML Investors Sftp              */
/*  Ver 5.1      : Sanjeet Pawar | CR-ISEC04-167309 Apollo SFTP CHANGES             */
/*  ver 5.2      : Sanjeet Pawar | CR-ISEC04-167061 ARCE SFTP CHANGES               */
/*  ver 5.3      : Sandip Tambe | CR_ISEC04_172177_INSDR_REP_T1_settlment           */
/*  Ver 5.4      : Sandip Tambe  |CR_ISEC04_169860 NCAP,NFIX,NFIN mailer to sftp Sung*/
/*  Ver 5.5      : Viraj Yadav   | CR-ISEC04-172038 M&G  Corporate Service to sftp   */
/*  ver 5.6      : Akshay        | CR-ISEC04-175511 Citadel Enterprise Americas LLC  */
/*  Ver 5.7      : Akshay        | CR-ISEC04-178208_TD_Bank_Group_Insider            */
/*  Ver 5.8      : Akshay        | CR_ISEC04_181556_TA_Associates_Management_Insider */ 
/*	Ver 5.9			 : Viraj Yadav   | Spira_863_MLIC_SFTP_file_transfer								 */
/*************************************************************************************/
 
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fml_mf.h>
#include <fn_ddr.h>
#include <string.h>		
#include <fml_rout.h> 
#include <stdlib.h>	
#include <fn_read_debug_lvl.h>	

# define SQLROWCOUNT  sqlca.sqlerrd[2]
/*#define TRAN_TIME 600		** Ver 2.6 ***/			/** Ver 2.7 **comment **/
#define TRAN_TIME 1200	/** Ver 2.7 ***/

/*** Only for Sungard and GSC Companies Insider Data **/
int fo_sng_gsc_empdata(char *c_ServiceName,
                       char *c_errmsg,
                       char *c_cmpny,
                       char *c_trd_dt
                       );

int fo_sungard_empdata(char *c_ServiceName,
                       char *c_errmsg,
                       char *c_cmpny,
                       char *c_trd_dt
                       ); /** Ver 1.3 **/
/*** BOA & All other Companies insider Data ***/
int fo_othr_cmpny_empdata(char *c_ServiceName,
                       char *c_errmsg,
                       char *c_trd_dt
                       );
int fn_othrs_pos_report(char *c_ServiceName,
                        char *c_errmsg,
                        char *c_trd_dt,
                        char *c_comp_cd
                       ); /*** Added in ver 3.0 ***/

void BAT_INSDR_DTLS( int argc, char *argv[] )
{
	long int li_tot_rcrds;
  int i_ch_val;
  int i_trnsctn;
  char c_trd_dt[12];
  char c_ServiceName[33];
  char c_errmsg[256];
  char c_cmpny_nm[10];
  char c_command[512]; /** Ver 1.2 **/
  char c_pos_dtls_flg='\0'; /*** Ver 3.0 ***/
  char c_comp_cd[10];  /*** Ver 3.0 ***/
  varchar c_file_name[100];
  strcpy ( c_ServiceName, argv[0] );

	INITBATDBGLVL(argv[0]);	

	fn_userlog ( c_ServiceName, "Batch process %s started", argv[0] );
  MEMSET(c_trd_dt);
  MEMSET(c_errmsg);
  MEMSET(c_command);  /** Ver 1.2 **/
 
  /*** For Service routing ***/
  fn_init_ddr_pop("NA", "NA", "NA");

  MEMSET(c_cmpny_nm);

  strcpy(c_cmpny_nm,argv[4]);

  if ( argc < 6 )
  {
    fn_userlog("bat_insdr_dtls","Arg count :%d:",argc);
    fn_userlog ( "bat_insdr_dtls",
   "Usage : %s <Tag> <Exchange Code> <Pipe id> <SUNG/GSC/MILL/OTHRS> Mode(N-normal/S-Specific)", argv[0] );
    /** Ver 1.2 Starts here **/
    sprintf( c_command, "ksh fo_mail_process_stts.sh %s %s %S ",c_ServiceName,argv[2],argv[3]);
    system(c_command);
    /** Ver 1.2 ends here **/
    return; 
  }

  if( argv[5][0] == 'N' )  /** Run Mode **/
  {
   EXEC SQL
    SELECT MAX(fbc_trd_dt)
    INTO   :c_trd_dt
    FROM   fbc_fo_brnch_cal
    WHERE  fbc_trd_dt < ( SELECT exg_nxt_trd_dt from exg_xchng_mstr where EXG_XCHNG_CD='NFO');
   if(SQLCODE != 0 )
   {
     fn_userlog(c_ServiceName,"Failed To Get Current Trade Date");
     fn_errlog( c_ServiceName, "S31005",SQLMSG, c_errmsg);
     /** Ver 1.2 Starts here **/
    sprintf( c_command, "ksh fo_mail_process_stts.sh %s %s %S ",c_ServiceName,argv[2],argv[3]);
    system(c_command);
    /** Ver 1.2 ends here **/
     return; 
   }
  }
  else
  {
   strcpy(c_trd_dt,argv[6]);
  }
 
  fn_userlog(c_ServiceName,"Extracting Report for :%s:",c_trd_dt);


  if( ( strcmp(c_cmpny_nm,"SUNG") == 0 ) ||
			( strcmp(c_cmpny_nm,"MILL")== 0 )	 ||						/** ver 1.8 **/
			( strcmp(c_cmpny_nm,"SPG")== 0 )	 ||						/** ver 2.0 **/
			( strcmp(c_cmpny_nm,"MACQ")== 0 )  ||						/** ver 2.1 **/
      ( strcmp(c_cmpny_nm,"BNY")== 0 )   ||           /** ver 3.1 **/
      ( strcmp(c_cmpny_nm,"AQR")== 0 )   ||           /** Ver 3.4 **/
      ( strcmp(c_cmpny_nm,"GMO")== 0 )   ||           /** Ver 3.6 **/
      ( strcmp(c_cmpny_nm,"MORN") == 0 ) ||           /** Ver 3.6 **/
      ( strcmp(c_cmpny_nm,"BAIN") == 0 ) ||           /** Ver 3.7 **/ 
      ( strcmp(c_cmpny_nm,"BLPC") == 0 ) ||           /** Ver 3.8 **/
      ( strcmp(c_cmpny_nm,"SSBT") == 0 ) ||           /** Ver 3.9 **/
     /** ( strcmp(c_cmpny_nm,"FIL") == 0 )  **/       /** Ver 4.0 **/ /** ver 4.3 fil comment**/
      ( strcmp(c_cmpny_nm,"NSER") == 0 ) ||           /** Ver 4.5 NSER and NSFS added **/ 
      ( strcmp(c_cmpny_nm,"NSFS") == 0 ) ||
       ( strcmp(c_cmpny_nm,"ARES") == 0 ) ||      /** Ver 4.8  Ares added **/
      ( strcmp(c_cmpny_nm,"INV") == 0 )   ||       /** Ver 4.8 INV added **/ 
      ( strcmp(c_cmpny_nm,"TVPL") == 0 )  ||       /** Ver 4.9 TVPL,FTI,NASD **/
      ( strcmp(c_cmpny_nm,"FTI") == 0 )  ||
      ( strcmp(c_cmpny_nm,"NASD") == 0 ) ||
      ( strcmp(c_cmpny_nm,"MMLI") == 0 ) ||            /** Ver 5.0 MMLI added **/ 
      ( strcmp(c_cmpny_nm,"ARCE") == 0 ) ||              /** Ver 5.2 Arce added **/ 
      ( strcmp(c_cmpny_nm,"AGMI") == 0 ) ||              /** Ver 5.1 AGMI added **/ 
      ( strcmp(c_cmpny_nm,"NCAP") == 0 ) ||              /** Ver 5.4 NCAP added **/ 
      ( strcmp(c_cmpny_nm,"NFIN") == 0 ) ||              /** Ver 5.4 NFIN added **/ 
      ( strcmp(c_cmpny_nm,"NFIX") == 0 ) ||              /** Ver 5.4 NFIX added **/
      ( strcmp(c_cmpny_nm,"MGCS") == 0 ) ||                 /** Ver 5.5 MGCS added **/
      ( strcmp(c_cmpny_nm,"CEAL") == 0 ) ||                 /** ver 5.6 CEAL added **/
      ( strcmp(c_cmpny_nm,"TDBG") == 0 ) ||                 /** ver 5.7 TDBG added **/
      ( strcmp(c_cmpny_nm,"TAML") == 0 ) ||                 /** ver 5.8 TAML Added **/ 
			( strcmp(c_cmpny_nm,"MLIC") == 0 )									 	/** Ver 5.9 MLIC added **/
   ) /*** Ver 1.3 ***/                                   


   { 

     i_ch_val = fo_sungard_empdata(c_ServiceName,
                                   c_errmsg,
                                   /*"SUNG",		*** Ver 1.5 comment ***/
		    													 c_cmpny_nm,  /** Ver 1.5 **/
                                   c_trd_dt
                                   );
     if( i_ch_val != 0 )
     {
       fn_userlog(c_ServiceName,"fo_sungard_empdata Failed");	/** Ver 2.9 Userlog changed **/
       fn_errlog( c_ServiceName, "S31010",LIBMSG, c_errmsg);
       /** Ver 1.2 Starts here **/
       sprintf( c_command, "ksh fo_mail_process_stts.sh %s %s %S ",c_ServiceName,argv[2],argv[3]);
       system(c_command);
      /** Ver 1.2 ends here **/
       return;
     }
	  fn_userlog(c_ServiceName,"Data Generetion completed for :%s:",c_cmpny_nm);
   }

  /*else if( strcmp(c_cmpny_nm,"GSC") == 0 )
  {
   i_ch_val = fo_sng_gsc_empdata(c_ServiceName,
                                 c_errmsg,
                                 "GSC",
                                 c_trd_dt
                                 );
   if( i_ch_val  != 0 )
   {
    fn_userlog(c_ServiceName,"fo_sng_gsc_empdata Failed");
    fn_errlog( c_ServiceName, "S31015",LIBMSG, c_errmsg);
    ** Ver 1.2 Starts here **
    sprintf( c_command, "ksh fo_mail_process_stts.sh %s %s %S ",c_ServiceName,argv[2],argv[3]);
    system(c_command);
    ** Ver 1.2 ends here **
    return;
   }
  } *** Ver 2.3 comment ****/
  else if( strcmp(c_cmpny_nm,"OTHRS") == 0 )
  {

   i_ch_val = fo_othr_cmpny_empdata(c_ServiceName,
                                    c_errmsg,
                                    c_trd_dt
                                    );
   if( i_ch_val != 0 )
   {
    fn_userlog(c_ServiceName,"fo_sng_gsc_empdata Failed");
    fn_errlog( c_ServiceName, "S31020",LIBMSG, c_errmsg);
    /** Ver 1.2 Starts here **/
    sprintf( c_command, "ksh fo_mail_process_stts.sh %s %s %S ",c_ServiceName,argv[2],argv[3]);
    system(c_command);
    /** Ver 1.2 ends here **/
    return;
   }
  /*** Ver  3.0 starts ***/

   i_trnsctn= fn_begintran( c_ServiceName, c_errmsg );
   if ( i_trnsctn == -1 )
   {
    fn_errlog ( c_ServiceName, "S31025", LIBMSG, c_errmsg );
    return ;
   }
   EXEC SQL
    DECLARE cur_iom_data CURSOR FOR
    SELECT IOM_ORGANIZATION_CODE,
           case when IOM_PSTN_FRQNCY ='M' and to_char(to_date(:c_trd_dt,'dd-Mon-yyyy'),'DD')='01' then 'Y' 
                when IOM_PSTN_FRQNCY ='W' and to_char(to_date(:c_trd_dt,'dd-Mon-yyyy'),'Dy')='Mon' then 'Y'
                when IOM_PSTN_FRQNCY ='F' and to_char(to_date(:c_trd_dt,'dd-Mon-yyyy'),'DD')='16' then 'Y'
                when IOM_PSTN_FRQNCY ='D'  then 'Y'
           else 'N' end
    FROM   IOM_INFO_ORGANIZATION_MSTR 
    WHERE  nvl(IOM_PSTN_FRQNCY,'N') <> 'N'; 
  
    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
     fn_errlog( c_ServiceName, "S31030", SQLMSG, c_errmsg );
     return;
    }

	EXEC SQL OPEN cur_iom_data;

	if( SQLCODE != 0 )
  {
   fn_errlog( c_ServiceName, "S31035", SQLMSG, c_errmsg );
   EXEC SQL CLOSE cur_iom_data;
	 return;
  }

	while(1)
	{
    MEMSET(c_comp_cd);
    MEMSET(c_pos_dtls_flg);
		EXEC SQL
				FETCH cur_iom_data
        INTO  :c_comp_cd,
              :c_pos_dtls_flg;
	
    if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
     fn_errlog( c_ServiceName, "S31040", SQLMSG, c_errmsg  );
     EXEC SQL CLOSE cur_iom_data;
     return;
    }
    if(SQLCODE == NO_DATA_FOUND )
    {
     EXEC SQL CLOSE cur_iom_data;
     break;
    }	
		 fn_userlog( c_ServiceName, "Posional data fetching starts in case of ORG :%s:",c_comp_cd);
   
   if(c_pos_dtls_flg == 'Y')
   {
   i_ch_val= fn_othrs_pos_report(c_ServiceName,c_errmsg,c_trd_dt,c_comp_cd);
		 
   if( i_ch_val != 0 && i_ch_val != -2)
   {
    fn_userlog(c_ServiceName,"fn_othrs_pos_report Failed");
    fn_errlog( c_ServiceName, "S31045",LIBMSG, c_errmsg);
    return;
   }
   else if(i_ch_val == -2)
   {
    continue;
   }
   }
	}
  
  if (fn_committran( c_ServiceName,i_trnsctn, c_errmsg ) == -1 )
  {
   fn_errlog ( c_ServiceName, "S31050", LIBMSG, c_errmsg );
   return ;
  }	 	
	  
  /*** Ver 3.0 Ends *****/ 
  }
  else
  {
   fn_userlog(c_ServiceName,"Invalid Company Name");
   
  }
return;

}
/** Ver 1.3 start **/
int fo_sungard_empdata(char *c_ServiceName,
                       char *c_errmsg,
                       char *c_cmpny,
                       char *c_trd_dt
                       )
{
	int i_trnsctn;
  long l_count=0;

  fn_userlog(c_ServiceName,"Tanmay Data insert for :%s:",c_cmpny);
	fn_userlog(c_ServiceName,"Inside fo_sungard_empdata");
  EXEC SQL
    SELECT count(rowid)
      INTO :l_count
      FROM EPR_EMP_PSTN_RPT
     WHERE trunc(EPR_RPT_DT) = :c_trd_dt
		 AND   trim(EPR_CORP_NAME)= :c_cmpny;  /*** 'SUNG' *** Ver 1.5 variable used **/
  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_userlog(c_ServiceName,"Failed To Get Current position Data");
    fn_errlog( c_ServiceName, "S31055",SQLMSG, c_errmsg);
    return -1;
  }
	if(l_count > 0 )
	{
		fn_userlog(c_ServiceName,"Exiting as Position data present in Isider table for :%s:",c_trd_dt);
    return -1;
	}

	l_count =0;

  EXEC SQL
    SELECT count(rowid)
      INTO :l_count
      FROM ETR_EMP_TRANS_RPT
     WHERE trunc(etr_rpt_dt) = :c_trd_dt
		 AND   trim(ETR_CORP_NAME)=:c_cmpny;  /*** 'SUNG' *** Ver 1.5 variable used **/

  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_userlog(c_ServiceName,"Failed To Get Current Trade Date");
		fn_userlog(c_ServiceName,"Error Masg:%s:",SQLMSG);
    fn_errlog( c_ServiceName, "S31060",SQLMSG, c_errmsg);
    return -1;
  }
	if(l_count > 0 )
	{
		fn_userlog(c_ServiceName,"Exiting as Trade data present in Isider table for :%s:",c_trd_dt);
    return -1;
	}
   i_trnsctn= fn_begintran( c_ServiceName, c_errmsg );

   if ( i_trnsctn == -1 )
   {
    fn_errlog ( c_ServiceName, "S31065", LIBMSG, c_errmsg );
    return -1; 
   }
	
	fn_userlog(c_ServiceName,"Now inserting EQ Position data");
	
	EXEC SQL
		insert into EPR_EMP_PSTN_RPT
								(
									EPR_CORP_NAME,
									EPR_PRD_CD,
									EPR_RPT_DT,
									EPR_MTCH_ACCNT,
									EPR_BRKR_NAME,
									EPR_SEC_ID,
									EPR_CUSIP_ID,
									EPR_TRD_QTY,
									EPR_SEDOL_ID,
									EPR_ISIN_NO,
									EPR_EXG_MRKT_ID,
									EPR_SEC_DESC,
									EPR_OPT_SYMBL,
									EPR_OPT_CD,
									EPR_EXPRY_DT,
									EPR_STRK_PRC
								)
						select
  								trim(:c_cmpny) CORP_NAME,
  								'EQ' PRDCT,
									:c_trd_dt,
        					UPS_CLM_MTCH_ACCNT ACCOUNT_NO,
        					'ICICI Securities Ltd.' BROKER_NAME,
        					decode(UPS_XCHNG_CD,'NSE',SEM_DTLS.NSESYM ,'BSE',SEM_DTLS.BSECD )  SYMBOL,
        					null CUSIP,
        					UPS_QTY_HLD OPEN_QTY,
        					null SEDOL,
        					SEM_DTLS.ISIN  ISIN,
        					null CORP_SEC_ID,
        					STK_STCK_NM SEC_NAME,
        					null OPTION_SYMBOL,
       						null SEC_INDCTOR,
        					null EXPIRY_DATE,
        					null STRK_PRC
						from UPS_PRTFLO_SMMRY , STK_STK_MSTR,
    								(	select  distinct ITE_MTCH_ACCNT
     									from    ITE_INSD_TRD_EMP_MSTR
     									where   ITE_CMPY_ID= :c_cmpny  /*** 'SUNG' *** Ver 1.5 variable used **/
											AND    ITE_AUTHRZTN_FLG='Y'
    								) ,
    								(SELECT   SEM_STCK_CD,
                              MAX (CASE
                                      WHEN SEM_ENTTY = '1'
                                         THEN SEM_MAP_VL
                                   END
                                  ) NSESYM,
                              MAX (CASE
                                      WHEN SEM_ENTTY = '2'
                                         THEN SEM_MAP_VL
                                   END
                                  ) BSECD,
                              MAX (CASE
                                      WHEN SEM_ENTTY = '10'
                                         THEN SEM_MAP_VL
                                   END
                                  ) ISIN
                         FROM SEM_STCK_MAP
                     	GROUP BY SEM_STCK_CD
    								 ) SEM_DTLS
						where UPS_CLM_MTCH_ACCNT  = ITE_MTCH_ACCNT
						and SEM_STCK_CD = UPS_STCK_CD
						and STK_STCK_CD=UPS_STCK_CD
						and UPS_QTY_HLD <> 0;				/** Ver 1.7 **/
    if(SQLCODE != 0)
	{
      fn_errlog(c_ServiceName,"S31070",SQLMSG,c_errmsg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg); 
      return -1; 
	}
	fn_userlog(c_ServiceName,"Now inserting FNO Position data");
	EXEC SQL
		insert into EPR_EMP_PSTN_RPT
								(
									EPR_CORP_NAME,
									EPR_PRD_CD,
									EPR_RPT_DT,
									EPR_MTCH_ACCNT,
									EPR_BRKR_NAME,
									EPR_SEC_ID,
									EPR_CUSIP_ID,
									EPR_TRD_QTY,
									EPR_SEDOL_ID,
									EPR_ISIN_NO,
									EPR_SEC_DESC,
									EPR_OPT_SYMBL,
									EPR_OPT_CD,
									EPR_EXPRY_DT,
									EPR_STRK_PRC
								)
								(
								select 
									 trim(:c_cmpny) CORP_NAME,
									 'FNO' PRDCT,
									 :c_trd_dt,
									 PCP_CLM_MTCH_ACCNT ACCNT_NO,
									 'ICICI Securities Ltd.' BROKER_NAME,
									 decode(PCP_XCHNG_CD,'NFO',SEM_DTLS.NSESYM ,'BFO',SEM_DTLS.BSECD )  SYMBOL,
										null CUSIP ,
									PCP_OPNPSTN_QTY POS_QTY,
									null SEDOL ,
									SEM_DTLS.ISIN ISIN,
									STK_STCK_NM SEC_NAME,
        					decode(pcp_prdct_typ,'O',decode(PCP_XCHNG_CD,'NFO',SEM_DTLS.NSESYM ,'BFO',SEM_DTLS.BSECD),null) OPT_SYMBOL,
        					decode(pcp_prdct_typ,'O',pcp_opt_typ,'I',pcp_opt_typ,null) OPT_CD,
       					 	PCP_EXPRY_DT  EXPRY_DT,
        					decode(pcp_prdct_typ,'O',PCP_STRK_PRC,'I',PCP_STRK_PRC,null) STRK_PRC
        					/*from PCP_PRTFL_CNTRCT_PSTN, STK_STK_MSTR,			*** Ver 2.9 **/
        					from PCP_PRTFL_CNTRCT_PRDCT, STK_STK_MSTR,			/** ver 2.9 **/
    							(select  distinct ITE_MTCH_ACCNT
     								from    ITE_INSD_TRD_EMP_MSTR
     								where   ITE_CMPY_ID=:c_cmpny  /*** 'SUNG' *** Ver 1.5 variable used **//* test trim removed **/
										AND     ITE_AUTHRZTN_FLG='Y'
    							) ,
    							(SELECT   SEM_STCK_CD,
                              MAX (CASE
                                      WHEN SEM_ENTTY = '1'
                                         THEN SEM_MAP_VL
                                   END
                                  ) NSESYM,
                              MAX (CASE
                                      WHEN SEM_ENTTY = '14'
                                         THEN SEM_MAP_VL
                                   END
                                  ) BSECD,
                              MAX (CASE
                                      WHEN SEM_ENTTY = '10'
                                         THEN SEM_MAP_VL
                                   END
                                  ) ISIN
                         FROM SEM_STCK_MAP
                     GROUP BY SEM_STCK_CD
    							) SEM_DTLS
								 where PCP_CLM_MTCH_ACCNT  = ITE_MTCH_ACCNT
								 and SEM_STCK_CD = PCP_UNDRLYNG
								 and STK_STCK_CD=PCP_UNDRLYNG
								 and PCP_OPNPSTN_QTY > 0				/** ver 1.7 **/
							UNION ALL
								select
									trim(:c_cmpny) CORP_NAME,
									'FNO' PRDCT,
									:c_trd_dt,
									PCP_CLM_MTCH_ACCNT ACCNT_NO,
									'ICICI Securities Ltd.' BROKER_NAME,
									decode(PCP_XCHNG_CD,'NFO',SEM_DTLS.NSESYM ,'BFO',SEM_DTLS.BSECD )  SYMBOL,
									null CUSIP ,
									PCP_OPNPSTN_QTY POS_QTY,
									null SEDOL ,
									SEM_DTLS.ISIN ISIN,
									STK_STCK_NM SEC_NAME,
        					decode(pcp_prdct_typ,'O',decode(PCP_XCHNG_CD,'NFO',SEM_DTLS.NSESYM ,'BFO',SEM_DTLS.BSECD),null) OPT_SYMBOL,
        					decode(pcp_prdct_typ,'O',pcp_opt_typ,'I',pcp_opt_typ,null) OPT_CD,
       					 	PCP_EXPRY_DT EXPRY_DT,
        					decode(pcp_prdct_typ,'O',PCP_STRK_PRC,'I',PCP_STRK_PRC,null) STRK_PRC
        				/*from PCP_PRTFL_CNTRCT_PSTN_HSTRY, STK_STK_MSTR, ** ver 2.9 comment**/
        				from PCP_PRTFL_CNTRCT_PRDCT_HSTRY, STK_STK_MSTR,		/** Ver 2.9 **/
    							(	select  distinct ITE_MTCH_ACCNT
     								from    ITE_INSD_TRD_EMP_MSTR
     								where   ITE_CMPY_ID=:c_cmpny  /*** 'SUNG' *** Ver 1.5 variable used **/ /* test trim removed */
										AND     ITE_AUTHRZTN_FLG='Y'
    							) ,
    							( SELECT   SEM_STCK_CD,
                              MAX (CASE
                                      WHEN SEM_ENTTY = '1'
                                         THEN SEM_MAP_VL
                                   END
                                  ) NSESYM,
                              MAX (CASE
                                      WHEN SEM_ENTTY = '14'
                                         THEN SEM_MAP_VL
                                   END
                                  ) BSECD,
                              MAX (CASE
                                      WHEN SEM_ENTTY = '10'
                                         THEN SEM_MAP_VL
                                   END
                                  ) ISIN
                         	FROM SEM_STCK_MAP
                     			GROUP BY SEM_STCK_CD
    							) SEM_DTLS
									where PCP_CLM_MTCH_ACCNT  = ITE_MTCH_ACCNT
									and SEM_STCK_CD = PCP_UNDRLYNG
									and STK_STCK_CD=PCP_UNDRLYNG
								  and PCP_OPNPSTN_QTY > 0				/** ver 1.7 **/
								) ;
	if(SQLCODE != 0 )
	{
      fn_errlog(c_ServiceName,"S31075",SQLMSG,c_errmsg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg); 
      return -1; 
	}
	fn_userlog(c_ServiceName,"Now inserting MF Position data");
	EXEC SQL
	insert into EPR_EMP_PSTN_RPT
	(
		EPR_CORP_NAME,
		EPR_PRD_CD,
		EPR_RPT_DT,
		EPR_MTCH_ACCNT,
		EPR_BRKR_NAME,
		EPR_SEC_ID,
		EPR_CUSIP_ID,
		EPR_TRD_QTY,
		EPR_SEDOL_ID,
		EPR_ISIN_NO,
		EPR_EXG_MRKT_ID,
		EPR_SEC_DESC,
		EPR_OPT_SYMBL,
		EPR_OPT_CD,
		EPR_EXPRY_DT,
		EPR_STRK_PRC
	)
	select  trim(:c_cmpny) CORP_NAME,
	'MF' PRDCT,
	:c_trd_dt,
	ACCOUNT_NO,
	BROKER,
	MF_SYMBOL1,
	CUSIP,
	SUM(DECODE(TRANS_CD, 'P',  TRADE_DT_QTY,
	      'SI', TRADE_DT_QTY,
	      'SO', TRADE_DT_QTY * -1,
	      'DR', TRADE_DT_QTY,
	      'TI', TRADE_DT_QTY,
	      'TO', TRADE_DT_QTY * -1,
	      'R',  TRADE_DT_QTY * -1))  HOLDING,
	SEDOL,ISIN,CORP_SEC_ID,MF_SYMBOL2,OPT_SYMBOL,SEC_INDCTOR,EXPRY_DT,strk_prc 
	from (
				select  MF_TRANS_MATCH_ACC ACCOUNT_NO,
		 						'ICICI Securities Ltd.' BROKER,
								 MF_SCH_COMP_CD MF_SYMBOL1, 
								null  CUSIP,
		 						MF_TRANS_QTY TRADE_DT_QTY,
		 						MF_TRANS_CD TRANS_CD,
		 						null  SEDOL,
								/*decode(nvl(MF_TRANS_DIV_REINV_FLG,'N'),'N',nvl(FND_ISIN,'NA'),'R',nvl(REINVST_ISIN,'NA'),nvl(FND_ISIN,'NA')) ISIN, ** Ver 1.4 comment **/
/** 	CASE when upper(MF_SCH_TYPE)= 'GROWTH' 
     	 then FND_ISIN
     	 when upper(MF_SCH_TYPE)= 'DIVIDEND' 
     	 then case when decode(nvl(MF_TRANS_DIV_REINV_FLG,'X'),'Y','Y','N','N','R','Y','D','N','P','N','Z','N','G','N') = 'Y'
	       				 then REINVST_ISIN
	       				 when decode(nvl(MF_TRANS_DIV_REINV_FLG,'X'),'Y','Y','N','N','R','Y','D','N','P','N','Z','N','G','N') = 'N'
                 then PAYOUT_ISIN
	       				 ELSE FND_ISIN
	  				end 
	END ISIN, ** Ver 1.4 ** Commented in Ver 4.7 **/
  CASE when upper(MF_SCH_TYPE)= 'GROWTH'
       then SCH_ISIN
       when upper(MF_SCH_TYPE)= 'DIVIDEND'
       then case when decode(nvl(MF_TRANS_DIV_REINV_FLG,'X'),'Y','Y','N','N','R','Y','D','N','P','N','Z','N','G','N') = 'Y'
                 then ISIN_DR
                 when decode(nvl(MF_TRANS_DIV_REINV_FLG,'X'),'Y','Y','N','N','R','Y','D','N','P','N','Z','N','G','N') = 'N'
                 then SCH_ISIN 
                 ELSE SCH_ISIN
            end
  END ISIN, /** Ver 4.7  **/
		 						NULL  CORP_SEC_ID,
								MF_SYMBOL MF_SYMBOL2,
		 						null OPT_SYMBOL,
		 						null SEC_INDCTOR,
		 						null EXPRY_DT,
		 						null strk_prc
	 				from  mf_prt_trans,
								( select  MF_SCH_TYPE,				/** ver 1.4 **/
													substr(MF_SCH_DESC,1,40) MF_SYMBOL,
													MF_SCH_CD,
													MF_SCH_COMP_CD,
													nvl(MF_SCH_CLOSE_FLG,'N') MF_SCH_CLOSE_FLG,
                          NVL(MF_SCH_ISIN,'NA') SCH_ISIN,   /** Ver 4.7 **/ 
                          NVL(MF_SCH_ISIN_DR,'NA') ISIN_DR  /** Vre 4.7 **/
										from  MF_SCHEME_MASTER
								) A,
							  (SELECT MF_NAV_COMP_CD,MF_NAV_SCH_CD,nvl(MF_NAV_AMFI_CD,'NA') AMFI_CD,nvl(MF_NAV_FUNDISIN,'NA') FND_ISIN,nvl(MF_NAV_ISIN_PAYOUT,'NA') PAYOUT_ISIN,nvl(MF_NAV_ISIN_REINVEST,'NA') REINVST_ISIN from MF_NAVS )
	 				where MF_TRANS_MATCH_ACC in (
																				select  distinct ITE_MTCH_ACCNT
																				from    ITE_INSD_TRD_EMP_MSTR
																				where   ITE_CMPY_ID=:c_cmpny /*** 'SUNG' *** Ver 1.5 variable used **//* trim rem**/
																			  AND     ITE_AUTHRZTN_FLG='Y'
				     													)
					AND  MF_SCH_CD = MF_TRANS_SCH_CD
					AND  MF_SCH_COMP_CD = MF_TRANS_COMP_CD
					AND  MF_NAV_COMP_CD = MF_TRANS_COMP_CD
					AND  MF_NAV_SCH_CD = MF_TRANS_SCH_CD
					AND  MF_TRANS_DELETE_FLG <> 'Y'         /**** Ver 1.6 ****/
					AND  MF_SCH_CD = MF_NAV_SCH_CD
					AND  MF_SCH_COMP_CD =  MF_NAV_COMP_CD
					/** AND  MF_SCH_CLOSE_FLG ='Y' *** commented in ver 3.1 ***/
          /** and  decode(:c_cmpny,'BNY','Y',MF_SCH_CLOSE_FLG) ='Y' *** Added in ver 3.1 *** **commented in Ver 3.4 **/
					and  MF_TRANS_QTY <> 0									/** Ver 1.7 **/ 
       ) group by ACCOUNT_NO,BROKER,MF_SYMBOL1,MF_SYMBOL2,CUSIP,SEDOL,ISIN,CORP_SEC_ID,OPT_SYMBOL,SEC_INDCTOR,EXPRY_DT,strk_prc having
	SUM(DECODE(TRANS_CD, 'P',  TRADE_DT_QTY,
	      'SI', TRADE_DT_QTY,
	      'SO', TRADE_DT_QTY * -1,
	      'DR', TRADE_DT_QTY,
	      'TI', TRADE_DT_QTY,
	      'TO', TRADE_DT_QTY * -1,
	      'R',  TRADE_DT_QTY * -1))  <>0;					/*** Ver 1.7 added **/
	if(SQLCODE != 0 )
	{
      fn_errlog(c_ServiceName,"S31080",SQLMSG,c_errmsg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg); 
      return -1; 
	}
	fn_userlog(c_ServiceName,"Now inserting CDX Position data");
	EXEC SQL
	insert into EPR_EMP_PSTN_RPT
	(
		EPR_CORP_NAME,
		EPR_PRD_CD,
		EPR_RPT_DT,
		EPR_MTCH_ACCNT,
		EPR_BRKR_NAME,
		EPR_SEC_ID,
		EPR_CUSIP_ID,
		EPR_SEDOL_ID,
		EPR_TRD_QTY,
		EPR_ISIN_NO,
		EPR_EXG_MRKT_ID,
		EPR_SEC_DESC,
		EPR_OPT_SYMBL,
		EPR_OPT_CD,
		EPR_EXPRY_DT,
		EPR_STRK_PRC
	)
	(select  trim(:c_cmpny)  CORP_NAME,
					'CDX' PRDCT,
					:c_trd_dt,
					CFP_CLM_MTCH_ACCNT ACCOUNT_NO,
          'ICICI Securities Ltd.' BRKR_NAME,
          CFP_UNDRLYNG SYMBOL,
          null CUSIP,
					null SEDOL,
          abs(CFP_OPNPSTN_QTY)*CCM_MULTPLR OPEN_QTY, /** Multiply with CCM_MULTPLR in Ver 3.4 **/
          null ISIN,
          null CORP_SEC_ID,
          CFP_UNDRLYNG SECURITY_NAME ,
          CFP_UNDRLYNG OPT_SYMBOL,
          null OPTN_CD,
          CFP_EXPRY_DT EXPRY_DATE,
          null STRKPRC
	from CFP_CDX_FUT_PSTN,CCM_CDX_CNTRCT_MSTR, /*** CCM added in Ver 3.4 ***/
	( select distinct ITE_MTCH_ACCNT
  	from ITE_INSD_TRD_EMP_MSTR
  	where ITE_CMPY_ID=:c_cmpny  /*** 'SUNG' *** Ver 1.5 variable used **/ /** test trim removed **/
		AND     ITE_AUTHRZTN_FLG='Y'
	)
	where CFP_CLM_MTCH_ACCNT = ITE_MTCH_ACCNT
	and   abs(CFP_OPNPSTN_QTY) > 0 /*** ver 1.7 **/
  and   CFP_XCHNG_CD  = CCM_XCHNG_CD  /** Ver 3.4 **/
  and   CFP_UNDRLYNG  = CCM_UNDRLYNG  /** Ver 3.4 **/
  and   CFP_PRDCT_TYP = CCM_PRDCT_TYP /** Ver 3.4 **/
  and   CFP_EXPRY_DT  = CCM_EXPRY_DT  /** Ver 3.4 **/
  and   CFP_EXER_TYP  = CCM_EXER_TYP  /** Ver 3.4 **/
  and   CCM_MULTPLR is not null       /** Ver 3.4 **/
	UNION
		select  trim(:c_cmpny) CORP_NAME,
						'CDX' PRDCT,
						 :c_trd_dt,
						 ITE_MTCH_ACCNT ACCOUNT_NO,
						 'ICICI Securities Ltd.' BRKR_NAME,
						COP_UNDRLYNG SYMBOL,
						null CUSIP,
						null SEDOL,
						abs(COP_OPNPSTN_QTY)*CCM_MULTPLR OPEN_QTY,  /** Multiply with CCM_MULTPLR in Ver 3.4 **/
						null ISIN,
						null CORP_SEC_ID,
						COP_UNDRLYNG SECURITY_NAME,
						COP_UNDRLYNG OPT_SYMBOL,
						COP_OPT_TYP OPTN_CD,
						COP_EXPRY_DT EXPRY_DATE,
						COP_STRK_PRC/10000000 STRKPRC
	 from COP_CDX_OPTIONS_PSTN ,CCM_CDX_CNTRCT_MSTR, /*** CCM added in Ver 3.4 ***/
  ( select distinct ITE_MTCH_ACCNT
    from ITE_INSD_TRD_EMP_MSTR
    where ITE_CMPY_ID=:c_cmpny  /*** 'SUNG' *** Ver 1.5 variable used **/ /** test trim removed **/
    AND     ITE_AUTHRZTN_FLG='Y'
  )
	where COP_CLM_MTCH_ACCNT = ITE_MTCH_ACCNT
	and   abs(COP_OPNPSTN_QTY) > 0 /*** ver 1.7 **/
  and   COP_XCHNG_CD  = CCM_XCHNG_CD  /** Ver 3.4 **/
  and   COP_UNDRLYNG  = CCM_UNDRLYNG  /** Ver 3.4 **/
  and   COP_PRDCT_TYP = CCM_PRDCT_TYP /** Ver 3.4 **/
  and   COP_EXPRY_DT  = CCM_EXPRY_DT  /** Ver 3.4 **/
  and   COP_EXER_TYP  = CCM_EXER_TYP  /** Ver 3.4 **/
  and   COP_OPT_TYP   = CCM_OPT_TYP   /** Ver 3.4 **/
  and   COP_STRK_PRC  = CCM_STRK_PRC  /** Ver 3.4 **/
  and   CCM_MULTPLR is not null       /** Ver 3.4 **/
	) ;		

	if(SQLCODE != 0 )
	{
     fn_errlog(c_ServiceName,"S31085",SQLMSG,c_errmsg);
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg); 
     return -1; 
	}
	fn_userlog(c_ServiceName,"Now inserting BOND Position data");
	EXEC SQL
	insert into EPR_EMP_PSTN_RPT
	(
		EPR_CORP_NAME,
		EPR_PRD_CD,
		EPR_RPT_DT,
		EPR_MTCH_ACCNT,
		EPR_BRKR_NAME,
		EPR_SEC_ID,
		EPR_CUSIP_ID,
		EPR_SEDOL_ID,
		EPR_ISIN_NO,
		EPR_SEC_DESC,
		EPR_TRD_QTY,
		EPR_OPT_SYMBL,
		EPR_OPT_CD,
		EPR_EXPRY_DT,
		EPR_STRK_PRC
	)
	SELECT trim(:c_cmpny) CORP_NAME,
				 'BOND' PRDCT,	
					:c_trd_dt, 
       	 FPS_CLM_MTCH_ACCNT ACCOUNT_NO,
       	 'ICICI Securities Ltd.' BROKER_CD,
       	 nvl(SEM_DTLS.BND_SYMB,'NULL') SYMBOL ,
       	 null CUSIP,
       	 null SEDOL,
         nvl(SEM_DTLS.ISIN,null) ISIN , 
       	 FSM_STCK_NM SEC_NAME,
			 	 ROUND(NVL(FPS_QTY_HLD,0),2) QTY_HOLD,
				 null OPT_SYMBOL,
				 null EXP_DATE,
				 null OPTN_CD,
				 null STRK_PRC
   FROM  FPS_FI_PRTFLO_SMRY,
         FPD_FI_PRTFLO_DTLS,
         FSM_FI_SECURITY_MSTR,
         FCM_FI_CTGRY_MSTR,
				(SELECT   SEM_STCK_CD,
	     						MAX (CASE
	     											WHEN SEM_ENTTY = '1'
	     											THEN SEM_MAP_VL
	     									END
											) NSESYM,
	     						MAX (CASE
	     											WHEN SEM_ENTTY = '14'
	     											THEN SEM_MAP_VL
	     									END
											) BSECD,
	     						MAX (CASE
	     											WHEN SEM_ENTTY = '10'
	     											THEN SEM_MAP_VL
	     									END
											)ISIN,
	     						MAX (CASE
	     											WHEN SEM_ENTTY = '6'
	     											THEN SEM_MAP_VL
	     									END
	     								) BND_SYMB
	      FROM SEM_STCK_MAP
		     GROUP BY SEM_STCK_CD
	     ) SEM_DTLS,
			(	select distinct ITE_MTCH_ACCNT 
				from ITE_INSD_TRD_EMP_MSTR 
				where ITE_CMPY_ID=:c_cmpny  /*** 'SUNG' *** Ver 1.5 variable used **/
			 AND     ITE_AUTHRZTN_FLG='Y' )
   WHERE  FPS_CLM_MTCH_ACCNT = ITE_MTCH_ACCNT 
   AND     FPD_CLM_MTCH_ACCNT= FPS_CLM_MTCH_ACCNT
   AND     FPD_USR_ID        = FPS_USR_ID
   AND     FPD_SCRTY_CD      = FPS_SCRTY_CD
	 AND  	 FSM_STCK_CD 			 = FPS_SCRTY_CD
	 AND     FSM_STCK_MAPCD 	 = SEM_STCK_CD
   AND     FCM_CTGRY_NO      = FSM_CTGRY
   AND     NVL(FPD_DELETE_FLG, 'N')  <> 'Y'
	 AND     ROUND(NVL(FPS_QTY_HLD,0),2) <> 0					/*** ver 1.7 ***/
	 GROUP BY FPS_CLM_MTCH_ACCNT,SEM_DTLS.BND_SYMB,SEM_DTLS.ISIN,FSM_STCK_MAPCD,FSM_STCK_NM,FPS_QTY_HLD;
	 if(SQLCODE != 0 )
	 {
     fn_errlog(c_ServiceName,"S31090",SQLMSG,c_errmsg);
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg); 
     return -1; 
	 }
		fn_userlog(c_ServiceName,"Now inserting FD position details for :%s:",c_cmpny); 
	EXEC SQL
	insert into EPR_EMP_PSTN_RPT
	(
		EPR_CORP_NAME,
		EPR_PRD_CD,
		EPR_RPT_DT,
		EPR_MTCH_ACCNT,
		EPR_BRKR_NAME,
		EPR_SEC_ID,
		EPR_CUSIP_ID,
		EPR_TRD_QTY,
		EPR_SEDOL_ID,
		EPR_ISIN_NO,
		EPR_EXG_MRKT_ID,
		EPR_SEC_DESC,
		EPR_OPT_SYMBL,
		EPR_OPT_CD,
		EPR_EXPRY_DT,
		EPR_STRK_PRC
	)
	SELECT trim(:c_cmpny) CORP_NAME,
				 'FD' PRDCT,	
					:c_trd_dt, 
				  FT_TRANS_MATCH_ACC_NO MATCH,
				  'ICICI Securities Ltd.' BROKER_CD,
					/*FT_TRANS_SCH_CD ||'-' || FOM_DESC SEC_ID, *** Ver 3.1 **/
					FT_TRANS_SCH_CD ||'-' ||substr(FIM_NAME,0,90) SEC_ID,							/** Ver 3.1 **/
					null CUSIP,
					FT_TRANS_TRN_AMT  TRAN_QTY,
					null SEDOL,
					null ISIN_NO,
					'FD' CORP_SEC_ID,
					RTRIM(FSM_DESC) SEC_DEC,
					null OPT_SYMBOL,
					null OPT_CD,
					null EXPRY_DT,
					null STRK_PRC
 FROM    FD_PRT_TRANS,
         FD_ISSUER_MASTER,
         FD_SCHEME_MASTER,
         FD_OPTION_MASTER,
				 OVP_ONE_VIEW_PRT_LVL1,
				 OVP_ONE_VIEW_PRT_LVL2,
         ( 	select  distinct ITE_MTCH_ACCNT
         		from    ITE_INSD_TRD_EMP_MSTR
        	 	/*where   ITE_CMPY_ID=trim(:c_cmpny)  *** 'SUNG' *** Ver 1.5 variable used **/ /** ver 3.1 comment **/
        	 	where   ITE_CMPY_ID=:c_cmpny				/** Ver 3.1 trim removed **/
						AND     ITE_AUTHRZTN_FLG='Y'
         )
	WHERE   FT_TRANS_MATCH_ACC_NO = ITE_MTCH_ACCNT
	AND     FIM_ISS_CD= FT_TRANS_ISS_CD
	AND     FSM_SCH_CD  = FT_TRANS_SCH_CD
	AND     FSM_ISS_CD  = FT_TRANS_ISS_CD
	AND     FT_TRANS_OPT_CD = FOM_OPT_CD
	AND     FT_TRANS_SCH_CD = FOM_SCH_CD
	AND     FT_TRANS_ISS_CD = FOM_ISS_CD
	AND     OVP_LVL1_CD = FIM_OVP_LVL1_CD
	AND     OVP_LVL2_CD = FIM_OVP_LVL2_CD
	GROUP BY FT_TRANS_MATCH_ACC_NO,FT_TRANS_SCH_CD,substr(FIM_NAME,0,90),RTRIM(FSM_DESC), OVP_LVL1_DESC||'-'||OVP_LVL2_DESC,FT_TRANS_PROD_ID,FT_TRANS_OPT_CD,FIM_NAME,FT_TRANS_ISS_CD,FT_TRANS_FDR_NO,DECODE(FIM_PRDCT_DISP_FLG,'F', 'Corporate FD', 'B', 'GOI Bond', 'I', 'ICICI Bank FD') ,TRIM(FIM_NAME),TRIM(FSM_DESC),FT_TRANS_TRN_AMT ,nvl(TO_CHAR(FT_TRANS_MAT_DATE,'DD/MM/YYYY'),' ') ,FT_TRANS_MAT_AMT ,DECODE(SIGN(FT_TRANS_MAT_DATE-TRUNC(SYSDATE)),-1,0,DECODE(FOM_INT_FREQ,'C', FT_TRANS_TRN_AMT*POWER((1 + (NVL(FT_TRANS_INT_RT,FOM_INT_RATE)/100)/FOM_FREQ_VAL),(((TRUNC(SYSDATE)-TRUNC(FT_TRANS_VALUE_DT))/365)*FOM_FREQ_VAL)), FT_TRANS_TRN_AMT)),NVL(FT_TRANS_INT_RT,0.0),FOM_INT_RATE
	HAVING  SUM(decode(rtrim( FT_TRANS_TRN_TYPE),'P',FT_TRANS_TRN_AMT,'R',FT_TRANS_TRN_AMT*-1)) > 0;
                                                                     /* ICICI Bank FD added in Ver 3.5 */

	if(SQLCODE != 0 )
	{
     fn_errlog(c_ServiceName,"S31095",SQLMSG,c_errmsg);
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg); 
     return -1; 
	}
	 fn_userlog(c_ServiceName,"Inserted %d records for FD Position",sqlca.sqlerrd[2]);
												
	 fn_userlog(c_ServiceName,"Now inserting EQ trade details for :%s:",c_cmpny);

	EXEC SQL
	 Insert into ETR_EMP_TRANS_RPT
		(
		etr_corp_name,
		etr_prd_cd,
		etr_rpt_dt,
		etr_mtch_accnt,
		etr_sec_id,
		ETR_ISIN_NO,
		etr_cusip_id,
		etr_sedol_id,
		etr_sec_type,
		ETR_STK_NM,
		etr_trd_flw,
		etr_trd_dt,
		etr_trd_settl_dt,
		etr_trd_qty,
		etr_sec_trd_prc,
		etr_trd_val,
		etr_commission,
		etr_trd_net_val,
		etr_sec_fees,
		etr_othr_fees,
		etr_othr_fees2,
		etr_othr_fees3,
		etr_trd_exec_no,
		etr_currncy_cd,
		ETR_OPT_SYMBL,
		ETR_OPT_EXPRY_DT,
		ETR_OPTION_CD,
		ETR_OPT_STRK_PRC
	)
	select  
		trim(:c_cmpny) CORP_NAME,
		'EQ' PRDCT_CD,
		:c_trd_dt RPRT_DATE,
		TRD_CLM_MTCH_ACCNT ACCOUNT_NO,
		decode(TRD_XCHNG_CD,'NSE',SEM_DTLS.NSESYM,'BSE',SEM_DTLS.BSECD) Symbol,
		SEM_DTLS.ISIN ISIN,
		null CUSIP,
		null SEDOL,
		null SEC_TYPE,
		STK_STCK_NM     SEC_NAME,
		TRD_TRD_FLW TRD_TRAN_TYPE,
		TRD_TRD_DT TRADE_DATE,
 		SPD.SETTLMNT_DT,
		TRD_EXCTD_QTY TRADE_QTY,
		TRD_EXCTD_RT TRATE_PRICE,
		TRD_TRD_VL TRADE_PRINCIPAL_AMNT,
		nvl(TRD_BRKRG_VL,0) COMMISSION,
		TRD_NET_VL TRADE_NET_VAL,
		nvl(TRD_SEBI_CHRG_VAL,0) + nvl(TRD_STT,0) SEC_FEES,
		/*nvl(TRD_STMP_DUTY,0) SEC_FEES, **/
		nvl(TRD_TRNX_CHRG,0) OTHR_FEES,
		nvl(TRD_STMP_DUTY,0) OTHR_FEES2,
		0 OTHR_FEES3,
		TRD_TRD_REF TRADE_NO,
		'INR' CURRNCY_CD,
		null OPT_SYMBOL,
		null OPT_EXPRY,
		null SEC_INDCTOR,
		 null STRK_PRC
	from trd_trd_dtls,STK_STK_MSTR,
			 (select  distinct ITE_MTCH_ACCNT
			from                    ITE_INSD_TRD_EMP_MSTR
			where   ITE_CMPY_ID=:c_cmpny  /*** 'SUNG' *** Ver 1.5 variable used **/ /** test trim removed **/
			AND     ITE_AUTHRZTN_FLG='Y' 
	) ,
	(SELECT   SEM_STCK_CD,
		  MAX ( CASE
				WHEN SEM_ENTTY = '1'
				THEN SEM_MAP_VL
			END
		      ) NSESYM,
		  MAX (CASE
				WHEN SEM_ENTTY = '2'
				THEN SEM_MAP_VL
			END
		      ) BSECD,
		  MAX (CASE
				WHEN SEM_ENTTY = '10'
				THEN SEM_MAP_VL
			END
		      ) ISIN
	 FROM SEM_STCK_MAP
	 GROUP BY SEM_STCK_CD
	) SEM_DTLS,
	(	select	distinct SPD_DEMAT_PYIN_DT SETTLMNT_DT ,  SPD_SGMNT_CD,SPD_XCHNG_CD			/** Ver 5.3 segment added **/
		from	SPD_STTLMNT_PRCS_DTLS
		where	trunc(SPD_TRD_FRM_DT)=:c_trd_dt
		and  	trunc(SPD_TRD_TO_DT)=:c_trd_dt
	) SPD 
	where TRD_CLM_MTCH_ACCNT = ITE_MTCH_ACCNT
	AND  SEM_STCK_CD = TRD_STCK_CD
	AND   STK_STCK_CD = SEM_STCK_CD
	AND   SPD_SGMNT_CD=TRD_XCHNG_SGMNT_CD     /** Ver 5.3 **/
	/*AND   TRD_XCHNG_CD = SPD.SPD_XCHNG_CD(+)** Ver 5.3 comment **/
	AND   TRD_XCHNG_CD = SPD.SPD_XCHNG_CD   /** Ver 5.3 **/
	and trunc(TRD_TRD_DT)=:c_trd_dt;
	if(SQLCODE != 0 )
	{
     fn_errlog(c_ServiceName,"S31100",SQLMSG,c_errmsg);
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg); 
     return -1; 
	}
	fn_userlog(c_ServiceName,"Now inserting FNO trade details for :%s:",c_cmpny);

	EXEC SQL
	insert into ETR_EMP_TRANS_RPT
	(
		etr_corp_name,
		etr_prd_cd,
		etr_rpt_dt,
		etr_mtch_accnt,
		ETR_ISIN_NO,
		etr_sec_id,
		etr_cusip_id,
		etr_sedol_id,
		etr_sec_type,
		ETR_STK_NM,
		etr_trd_flw,
		etr_trd_dt,
		etr_trd_settl_dt,
		etr_trd_qty,
		etr_sec_trd_prc,
		etr_trd_val,
		etr_commission,
		etr_trd_net_val,
		etr_sec_fees,
		etr_othr_fees,
		etr_othr_fees2,
		etr_othr_fees3,
		etr_trd_exec_no,
		etr_currncy_cd,
		ETR_OPT_SYMBL,
		ETR_OPT_EXPRY_DT,
		ETR_OPTION_CD,
		ETR_OPT_STRK_PRC
	)
	select  
		trim(:c_cmpny) CORP_NAME,
		'FNO' PRDCT_CD,
		 :c_trd_dt RPRT_DATE,
     FTD_CLM_MTCH_ACCNT ACCOUNT_NO,
		 SEM_DTLS.ISIN isin_no,
     decode(ftd_xchng_cd,'NFO',NSESYM,'BFO',BSECD) SEC_IDENTIFIER,
		 null CUSIP,
     null SEDOL,
		 null SEC_TYPE,
     STK_STCK_NM SEC_DESC,
     FTD_TRD_FLW TRADE_TYPE_IND,
     FTD_TRD_DT TRADE_DATE ,
		 FBC.SETTLMNT_DT SETT_DATE,
		 FTD_EXCTD_QTY TRADE_QTY,
     FTD_EXCTD_RT/100 TRADE_PRC ,
     ((FTD_EXCTD_QTY)*(FTD_EXCTD_RT+FTD_STRK_PRC))/100 PRIN_AMOUNT,
     (nvl(FTD_BRKG,0) +nvl(FTD_SRC_TX,0)+NVL(FTD_BRKRG_IGST,0) + NVL(FTD_BRKRG_CGST,0) + NVL(FTD_BRKRG_SGST,0) + NVL(FTD_BRKRG_UGST,0))/100 COMMISN,				/** GST added for Ver 2.4 **/
     FTD_TRD_NET_VAL/100 NET_VAL,
		 (nvl(FTD_SEBI_TT,0) + nvl(ftd_stt,0))/100  SECURITY_FEES,
		 (FTD_TRAN_CHRG)/100 OTHR_FEES,
		 (nvl(FTD_STAMP_DUTY,0) + nvl(FTD_OTHER_CHRG,0))/100 OTHR_FEES2,
	   0 OTHR_FEES3,
		 FTD_XCHNG_TRD_NO TRADE_NO,
     'INR' CURRENCY,		
		 FTD_UNDRLYNG FTD_OPT_SYMBOL,
		 FTD_EXPRY_DT OPTION_EXPRY,
		 FTD_OPT_TYP  OPTION_CODE,
		 FTD_STRK_PRC/100 STRK_PRC
    from ftd_fo_trd_dtls,fod_fo_ordr_dtls,
	    (SELECT   SEM_STCK_CD,
	      MAX ( CASE
		WHEN SEM_ENTTY = '1'
		THEN SEM_MAP_VL
	      END
		  ) NSESYM,
	      MAX (CASE
		WHEN SEM_ENTTY = '2'
		THEN SEM_MAP_VL
	      END
		  ) BSECD,
	      MAX (CASE
		WHEN SEM_ENTTY = '10'
		THEN SEM_MAP_VL
	      END
		  ) ISIN
	   FROM SEM_STCK_MAP
	   GROUP BY SEM_STCK_CD
	  ) SEM_DTLS, (select  distinct ITE_MTCH_ACCNT
	      from     ITE_INSD_TRD_EMP_MSTR
	      where   ITE_CMPY_ID=:c_cmpny  /*** 'SUNG' *** Ver 1.5 variable used **/ /** test trim removed **/
				AND     ITE_AUTHRZTN_FLG='Y' 
	  ),STK_STK_MSTR,
	(	select	distinct FBC_EXG_PYIN_DT SETTLMNT_DT ,FBC_XCHNG_CD
		from	FBC_FO_BRNCH_CAL
		where	trunc(FBC_TRD_DT)=:c_trd_dt
		and  	FBC_GRP_ID = '1'
	) FBC 
  where FTD_ORDR_RFRNC = fod_ordr_rfrnc
  and ftd_clm_mtch_accnt= fod_clm_mtch_accnt
  and trunc(ftd_trd_dt)= fod_trd_dt
  and FTD_CLM_MTCH_ACCNT = ITE_MTCH_ACCNT
  AND SEM_STCK_CD = FTD_UNDRLYNG
  AND STK_STCK_CD = SEM_STCK_CD
  AND FTD_XCHNG_CD = FBC.FBC_XCHNG_CD(+)
  and trunc(FTD_TRD_DT)=:c_trd_dt 
	UNION 
	SELECT 	trim(:c_cmpny) CORP_NAME,
		'FNO' PRDCT_CD,
		 :c_trd_dt RPRT_DATE,
     FTD_CLM_MTCH_ACCNT ACCOUNT_NO,
		 SEM_DTLS.ISIN isin_no,
     decode(ftd_xchng_cd,'NFO',NSESYM,'BFO',BSECD) SEC_IDENTIFIER,
		 null CUSIP,
     null SEDOL,
		 null SEC_TYPE,
     STK_STCK_NM SEC_DESC,
     FTD_TRD_FLW TRADE_TYPE_IND,
     FTD_TRD_DT TRADE_DATE ,
		 FBC.SETTLMNT_DT SETT_DATE,
		 FTD_EXCTD_QTY TRADE_QTY,
     FTD_EXCTD_RT/100 TRADE_PRC ,
     ((FTD_EXCTD_QTY)*(FTD_EXCTD_RT+FTD_STRK_PRC))/100 PRIN_AMOUNT,
     (nvl(FTD_BRKG,0) +nvl(FTD_SRC_TX,0)+NVL(FTD_BRKRG_IGST,0) + NVL(FTD_BRKRG_CGST,0) + NVL(FTD_BRKRG_SGST,0) + NVL(FTD_BRKRG_UGST,0))/100 COMMISN,	/** GST Added for Ver 2.4 **/        
     FTD_TRD_NET_VAL/100 NET_VAL,
		 (nvl(FTD_SEBI_TT,0) + nvl(ftd_stt,0))/100  SECURITY_FEES,
		 (FTD_TRAN_CHRG)/100 OTHR_FEES,
		 (nvl(FTD_STAMP_DUTY,0) + nvl(FTD_OTHER_CHRG,0))/100 OTHR_FEES2,
     /*(FTD_BRKG +FTD_SRC_TX )/100 COMMISN,
     FTD_TRD_NET_VAL/100 NET_VAL,
		 (FTD_SEBI_TT/100 ) SECURITY_FEES,
		 (FTD_TRAN_CHRG+FTD_STAMP_DUTY+FTD_OTHER_CHRG)/100 OTHR_FEES,
		 0 OTHR_FEES2, */
	   0 OTHR_FEES3,
		 FTD_XCHNG_TRD_NO TRADE_NO,
     'INR' CURRENCY,		
		 FTD_UNDRLYNG FTD_OPT_SYMBOL,
		 FTD_EXPRY_DT OPTION_EXPRY,
		 FTD_OPT_TYP  OPTION_CODE,
		 FTD_STRK_PRC/100 STRK_PRC
    from ftd_fo_trd_dtls_hstry,fod_fo_ordr_dtls_hstry,
	    (SELECT   SEM_STCK_CD,
	      MAX ( CASE
		WHEN SEM_ENTTY = '1'
		THEN SEM_MAP_VL
	      END
		  ) NSESYM,
	      MAX (CASE
		WHEN SEM_ENTTY = '2'
		THEN SEM_MAP_VL
	      END
		  ) BSECD,
	      MAX (CASE
		WHEN SEM_ENTTY = '10'
		THEN SEM_MAP_VL
	      END
		  ) ISIN
	   FROM SEM_STCK_MAP
	   GROUP BY SEM_STCK_CD
	  ) SEM_DTLS, (select  distinct ITE_MTCH_ACCNT
	      from     ITE_INSD_TRD_EMP_MSTR
	      where   ITE_CMPY_ID=:c_cmpny  /*** 'SUNG' *** Ver 1.5 variable used **/
				AND     ITE_AUTHRZTN_FLG='Y' 
	  ),STK_STK_MSTR,
	(	select	distinct FBC_EXG_PYIN_DT SETTLMNT_DT ,FBC_XCHNG_CD
		from	FBC_FO_BRNCH_CAL
		where	trunc(FBC_TRD_DT)=:c_trd_dt
		and  	FBC_GRP_ID = '1'
	) FBC 
  where FTD_ORDR_RFRNC = fod_ordr_rfrnc
  and ftd_clm_mtch_accnt= fod_clm_mtch_accnt
  and trunc(ftd_trd_dt)= fod_trd_dt
  and FTD_CLM_MTCH_ACCNT = ITE_MTCH_ACCNT
  AND SEM_STCK_CD = FTD_UNDRLYNG
  AND STK_STCK_CD = SEM_STCK_CD
  AND FTD_XCHNG_CD = FBC.FBC_XCHNG_CD(+)
  and trunc(FTD_TRD_DT)=:c_trd_dt;

	if(SQLCODE != 0 )
	{
     fn_errlog(c_ServiceName,"S31105",SQLMSG,c_errmsg);
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg); 
     return -1; 
	}
	fn_userlog(c_ServiceName,"Inserted :%d: records for FNO TRD_DAA",sqlca.sqlerrd[2]);
	fn_userlog(c_ServiceName,"Now inserting CDX trade details for :%s:",c_cmpny);

	EXEC SQL
	insert into ETR_EMP_TRANS_RPT
	(
		etr_corp_name,
		etr_prd_cd,
		etr_rpt_dt,
		etr_mtch_accnt,
		ETR_ISIN_NO,
		etr_sec_id,
		etr_cusip_id,
		etr_sedol_id,
		etr_sec_type,
		ETR_STK_NM,
		etr_trd_flw,
		etr_trd_dt,
		etr_trd_settl_dt,
		etr_trd_qty,
		etr_sec_trd_prc,
		etr_trd_val,
		etr_commission,
		etr_trd_net_val,
		etr_sec_fees,
		etr_othr_fees,
		etr_othr_fees2,
		etr_othr_fees3,
		etr_trd_exec_no,
		etr_currncy_cd,
		ETR_OPT_SYMBL,
		ETR_OPT_EXPRY_DT,
		ETR_OPTION_CD,
		ETR_OPT_STRK_PRC
  ) 
	select trim(:c_cmpny) CORP_NAME,
				 'CDX' PRDCT_CD,
				 :c_trd_dt RPRT_DATE,
				 CTD_CLM_MTCH_ACCNT ACCOUNT_NO,
				 null ISIN_NO,
				 CTD_UNDRLYNG sec_id,
				 null cusip,
				 null sedol,
				 null SEC_TYP,
				 CXU_UND_NM  SECRTY_NAME,
				 CTD_TRD_FLW TRANS_TYPE,
				 CTD_TRD_DT TRD_DATE,
				 decode(A.CTD_TRD_FLW,'B',CSM.SETTLMNT_DT1,CSM.SETTLMNT_DT2) SETTLMENT_DATE ,
			 	CTD_EXCTD_QTY*CCM_MULTPLR TRD_QTY, /** Multiply with CCM_MULTPLR in Ver 3.4 **/
				CTD_EXCTD_RT TRD_PRICE,
				(CTD_EXCTD_QTY *CCM_MULTPLR*CTD_EXCTD_RT ) PRINCIPAL_AMNT, /** Multiply with CCM_MULTPLR in Ver 3.4 **/
				CTD_BRKG+CTD_SRC_TX+ nvl(CTD_CGST_AMT,0) + nvl(CTD_SGST_AMT,0) + nvl(CTD_UGST_AMT,0) + nvl(CTD_IGST_AMT,0) COMMISSION,	/** GST Added for Ver 2.4 **/
				CTD_TRD_NET_VAL TRD_NET_VAL,
				(CTD_SEBI_TT + CTD_STT ) SEC_FEES,
				CTD_TRAN_CHRG OTHR_FEES,
				CTD_STAMP_DUTY+CTD_OTHER_CHRG OTHR_FEES2,
				0 OTHR_FEES3,
				CTD_XCHNG_TRD_NO TRADE_ID,
				'INR' CURRENCY_CD,
				CTD_UNDRLYNG OPT_SYMBOL,
				CTD_EXPRY_DT EXPRY_DT,
				CTD_OPT_TYP OPTION_CD,
				CTD_STRK_PRC/10000000 STRK_PRC
	FROM CTD_CDX_TRD_DTLS A,CXU_CDX_XCHNG_UND B,CCM_CDX_CNTRCT_MSTR,   /** CCM Table added in Ver 3.4 **/ 
	(	select	distinct CSM_CLN_PAYIN_DT SETTLMNT_DT1 ,CSM_CLN_PAYOUT_DT SETTLMNT_DT2,CSM_XCHNG_CD
		from	CSM_CDX_STTLMNT_MSTR
		where	trunc(CSM_TRD_DT) = :c_trd_dt
	) CSM ,
	(	SELECT distinct ITE_MTCH_ACCNT
	 	FROM            ITE_INSD_TRD_EMP_MSTR
		WHERE		ITE_CMPY_ID=:c_cmpny  /*** 'SUNG' *** Ver 1.5 variable used **/ /** test trim removed **/
		AND    ITE_AUTHRZTN_FLG='Y'
	)
	where trunc(CTD_TRD_DT)=:c_trd_dt
	and B.CXU_XCHNG_CD	= A.CTD_XCHNG_CD
	and B.CXU_XCHNG_CD	= CSM.CSM_XCHNG_CD
	and B.CXU_UNDRLYNG	= A.CTD_UNDRLYNG
	and B.CXU_PRDCT_TYP = A.CTD_PRDCT_TYP
  and CCM_XCHNG_CD  = A.CTD_XCHNG_CD  /** Ver 3.4 **/
  and CCM_UNDRLYNG  = A.CTD_UNDRLYNG  /** Ver 3.4 **/
  and CCM_PRDCT_TYP = A.CTD_PRDCT_TYP /** Ver 3.4 **/
  and CCM_EXPRY_DT  = A.CTD_EXPRY_DT  /** Ver 3.4 **/ 
  and CCM_EXER_TYP  = A.CTD_EXER_TYP  /** Ver 3.4 **/
  and CCM_OPT_TYP   = A.CTD_OPT_TYP   /** Ver 3.4 **/
  and CCM_STRK_PRC  = A.CTD_STRK_PRC  /** Ver 3.4 **/
  and CCM_MULTPLR is not null         /** Ver 3.4 **/
	and CTD_CLM_MTCH_ACCNT	= ITE_MTCH_ACCNT;

	if(SQLCODE != 0 )
	{
     fn_errlog(c_ServiceName,"S31110",SQLMSG,c_errmsg);
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg); 
     return -1; 
	}
	fn_userlog(c_ServiceName,"Now inserting MF trade details for :%s:",c_cmpny);
	EXEC SQL
		  insert into ETR_EMP_TRANS_RPT
	  (
	    etr_corp_name,
	    etr_prd_cd,
	    etr_rpt_dt,
	    etr_mtch_accnt,
	    ETR_ISIN_NO,
	    etr_sec_id,
	    etr_cusip_id,
	    etr_sedol_id,
	    etr_sec_type,
	    ETR_STK_NM,
	    etr_trd_flw,
	    etr_trd_dt,
	    etr_trd_settl_dt,
	    etr_trd_qty,
	    etr_sec_trd_prc,
	    etr_trd_val,
	    etr_commission,
	    etr_trd_net_val,
	    etr_sec_fees,
	    etr_othr_fees,
	    etr_othr_fees2,
	    etr_othr_fees3,
	    etr_trd_exec_no,
	    etr_currncy_cd,
	    ETR_OPT_SYMBL,
	    ETR_OPT_EXPRY_DT,
	    ETR_OPTION_CD,
	    ETR_OPT_STRK_PRC
	  )
	  select trim(:c_cmpny) CORP_NAME, 
		 'MF' PRDCT_CD,      
		 :c_trd_dt RPRT_DATE,    
		 MF_TRN_MATCH_ACC MATCH_ACC,
		 /*decode(nvl(MF_TRN_DIV_REINV_FLG,'N'),'N',nvl(FND_ISIN,'NA'),'R',nvl(REINVST_ISIN,'NA'),nvl(FND_ISIN,'NA')) ISIN, *Ver 1.4 comment **/
/**		 CASE when upper(MF_SCH_TYPE)= 'GROWTH' 
     	 then	FND_ISIN
     	 when upper(MF_SCH_TYPE)= 'DIVIDEND' 
     	 then case when decode(nvl(MF_TRN_DIV_REINV_FLG,'X'),'Y','Y','N','N','R','Y','D','N','P','N','Z','N','G','N') = 'Y'
	       				 then REINVST_ISIN
	       				 when decode(nvl(MF_TRN_DIV_REINV_FLG,'X'),'Y','Y','N','N','R','Y','D','N','P','N','Z','N','G','N') = 'N'
	       				 then PAYOUT_ISIN
	       				 ELSE  FND_ISIN
	  				end 
		 END ISIN, ** Ver 1.4 ** Commented in Ver 4.7 **/
     CASE when upper(MF_SCH_TYPE)= 'GROWTH'
       then SCH_ISIN
       when upper(MF_SCH_TYPE)= 'DIVIDEND'
       then case when decode(nvl(MF_TRN_DIV_REINV_FLG,'X'),'Y','Y','N','N','R','Y','D','N','P','N','Z','N','G','N') = 'Y'
                 then ISIN_DR
                 when decode(nvl(MF_TRN_DIV_REINV_FLG,'X'),'Y','Y','N','N','R','Y','D','N','P','N','Z','N','G','N') = 'N'
                 then SCH_ISIN
                 ELSE SCH_ISIN
            end
     END ISIN, /** Ver 4.7 **/
		 A.MF_SCH_COMP_CD SEC_id,
		 --(select MF_NAV_AMFI_CD from MF_NAVS where MF_NAV_COMP_CD=MF_TRN_COMP_CD and MF_NAV_SCH_CD=MF_TRN_SCH_CD ) SEC_IDENTFR,
		 --(select MF_NAV_AMFI_CD from MF_NAVS where MF_NAV_COMP_CD=MF_TRN_COMP_CD and MF_NAV_SCH_CD=MF_TRN_SCH_CD ) SEC_IDENTFR,
		 null,
		 null,
		 null,
		 A.MF_SYMBOL SEC_NAME,
		 MF_TRN_CD TRANS_TYPE,
		 MF_TRN_DATE TRADE_DATE,
		 MF_TRN_UPLD_DT SETTL_DATE,
		 MF_TRN_QTY TRD_QTY ,
		 MF_TRN_NAV TRD_PRC ,
		 nvl(MF_TRN_AMT,0) TRAN_AMOUNT,
		 /*(MF_TRN_ST+MF_TRN_COMM+MF_TRN_STT) COMMISSION, **/
		 (MF_TRN_BROKERAGE+MF_TRN_ST+MF_TRN_COMM  + nvl(MF_TRN_CGST_AMT,0) + nvl(MF_TRN_SGST_AMT,0) + nvl(MF_TRN_IGST_AMT,0) + nvl(MF_TRN_UGST_AMT,0)) COMMISSION,			/** GST Added for Ver 2.4 **/
		 nvl(MF_TRN_AMT,0)+nvl(MF_TRN_ST,0) + nvl(MF_TRN_COMM,0) + nvl(MF_TRN_STT,0)  + NVL(MF_TRN_CGST_AMT,0) + NVL(MF_TRN_SGST_AMT,0) + NVL(MF_TRN_IGST_AMT,0) + NVL(MF_TRN_UGST_AMT,0) NET_VAL,		 /** GST Added for Ver 2.4 **/
		 MF_TRN_STT SEC_FEES,
		 '0' OTHR_FEES,
		 '0' OTHR_FEES2,
		 '0' OTHR_FEES3,
		 MF_TRN_ID trade_ref,
		 'INR' CURR_CD,
		 null OPT_SYMB,
		 null EXP_DT,
		 null SEC_INDCTR,
		 null STRK_PRC
		from mf_transactions,
					(
						select distinct ITE_MTCH_ACCNT
						from ITE_INSD_TRD_EMP_MSTR
						where  ITE_CMPY_ID=:c_cmpny  /*** 'SUNG' *** Ver 1.5 variable used **/ /** Test trim removed **/
            and    ITE_AUTHRZTN_FLG='Y'  /** Ver 4.7**/
					),
					( select MF_SCH_TYPE,				/** ver 1.4 **/
									 substr(MF_SCH_DESC,1,40) MF_SYMBOL,
									 MF_SCH_CD,MF_SCH_COMP_CD ,nvl(MF_SCH_CLOSE_FLG,'N') MF_SCH_CLOSE_FLG,
                   NVL(MF_SCH_ISIN,'NA') SCH_ISIN,        /** Ver 4.7 **/
                   NVL(MF_SCH_ISIN_DR,'NA') ISIN_DR       /** Vre 4.7 **/
						from   MF_SCHEME_MASTER
					) A,
          (	SELECT MF_NAV_COMP_CD,
									 MF_NAV_SCH_CD,
									 nvl(MF_NAV_AMFI_CD,'NA') AMFI_CD,
									 nvl(MF_NAV_FUNDISIN,'NA') FND_ISIN,
									 nvl(MF_NAV_ISIN_PAYOUT,'NA') PAYOUT_ISIN,
									 nvl(MF_NAV_ISIN_REINVEST,'NA') REINVST_ISIN 
						from 	 MF_NAVS 
					)
		where MF_TRN_MATCH_ACC =ITE_MTCH_ACCNT
		and   MF_NAV_COMP_CD = A.MF_SCH_COMP_CD
		and   MF_NAV_SCH_CD = A.MF_SCH_CD
		and   MF_TRN_COMP_CD = MF_NAV_COMP_CD
		and   MF_TRN_SCH_CD = MF_NAV_SCH_CD
		/*** and   MF_SCH_CLOSE_FLG ='Y'  *** commented in ver 3.1 ***/
    /*** and   decode(:c_cmpny,'BNY','Y',MF_SCH_CLOSE_FLG) ='Y'  *** Added in ver 3.1 ***  ** Commented in Ver 3.4 ***/
    /*** 	and trunc(MF_TRN_DATE)= :c_trd_dt Commented in Ver 3.4 ***/
    and   MF_TRN_STATUS_CD = 'E'         /** Ver 3.4 **/
    and   MF_TRN_UPLD_DT   = :c_trd_dt;  /** Ver 3.4 **/

	if(SQLCODE != 0 )
	{
     fn_errlog(c_ServiceName,"S31115",SQLMSG,c_errmsg);
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg); 
     return -1; 
	}
	EXEC SQL
	Insert into ETR_EMP_TRANS_RPT
		  (
		    etr_corp_name,
		    etr_prd_cd,
		    etr_rpt_dt,
		    etr_mtch_accnt,
		    ETR_ISIN_NO,
		    etr_sec_id,
		    etr_cusip_id,
		    etr_sedol_id,
		    etr_sec_type,
		    ETR_STK_NM,
		    etr_trd_flw,
		    etr_trd_dt,
		    etr_trd_qty,
		    etr_sec_trd_prc,
		    etr_trd_val,
		    etr_commission,
        etr_accrued_intrst, /*** added for ver 4.1 ***/
		    etr_trd_net_val,
		    etr_sec_fees,
		    etr_othr_fees,
		    etr_othr_fees2,
		    etr_othr_fees3,
		    etr_trd_exec_no,
		    etr_currncy_cd,
		    ETR_OPT_SYMBL,
		    ETR_OPT_EXPRY_DT,
		    ETR_OPTION_CD,
		    ETR_OPT_STRK_PRC,
        ETR_TENURE              /*** ADDED FOR VER 4.1 ***/
		  )
		select  trim(:c_cmpny) CORP_NAME,
			'FD'			FEED_TYP,
			 :c_trd_dt		RPRT_DATE,
			 FT_MATCH_ACC_NO        ACCOUNT_NO,
			null		        ISIN,
			FT_SCH_CD	        SYMBOL,
			null		        CUSIP,
			null		        SEDOL,
			FIM_PRDCT_DISP_FLG	SEC_TYPE,
			/*TRIM(FSM_DESC)	        SEC_NAME,  ** Ver 3.1 comment **/
			substr(FIM_NAME,0,50)     SEC_NAME,
			FT_TRN_TYPE	  	TRD_TRAN_TYPE,	
			FT_TRN_DT	        TRADE_DATE,
			/**null		          TRADE_QTY,   ** Ver 4.2 comment **/
			case when FT_ISS_CD='5556' or ft_ISS_CD='5557' then FT_TRN_AMT/FOM_MIN_PUR_AMT else null end   TRADE_QTY,  /** Ver 4.2 **//** ver 4.4**/
			/**FT_TRN_AMT	          TRADE_PRICE, 					*** Ver 4.2 comment **/
			case when FT_ISS_CD='5556' or ft_ISS_CD='5557' then FOM_MIN_PUR_AMT	else null end  						 TRADE_PRICE,/** Ver 4.2 **//** 4.4 **/
			FT_TRN_AMT	          TRADE_PRINCIPAL_AMNT,
	  	0			  COMMSN, 
      FOM_INT_RATE,  /** added for ver 4.1 rate of intreset **/
			FT_TRN_AMT	          TRADE_NET_VAL,
			0		          SEC_FEES,
			0		          OTHR_FEES,
			0		          OTHR_FEES2,
			0		          OTHR_FEES3,
			to_char(FT_TRANS_ID)      TRADE_ID,
			FT_TRN_CURRENCY	          CURRNCY_CD,
			null		          OPT_SYMBOL,
			null		          OPT_EXPRY,
			null		          SEC_INDCTOR,
			null		          STRK_PRC,
      FT_TENURE                        /*** added for ver 4.1 **/ 
		FROM    FD_TRANS,
			FD_ISSUER_MASTER,
			FD_SCHEME_MASTER,
			FD_OPTION_MASTER,
			( select  distinct ITE_MTCH_ACCNT
			  from    ITE_INSD_TRD_EMP_MSTR
			  where   ITE_CMPY_ID=:c_cmpny  /*** 'SUNG' *** Ver 1.5 variable used **//** Test trim removed **/
        AND     ITE_AUTHRZTN_FLG='Y'  /** Ver 4.7 **/
			)
		WHERE   FT_MATCH_ACC_NO = ITE_MTCH_ACCNT
		AND     trunc(FT_TRN_DT)=:c_trd_dt
		AND     FIM_ISS_CD= FT_ISS_CD
		AND     FT_ISS_CD = FOM_ISS_CD
		AND     FT_ISS_CD = FSM_ISS_CD
		AND     FSM_SCH_CD= FOM_SCH_CD
		AND     FSM_SCH_CD= FT_SCH_CD
		AND     FT_OPT_CD = FOM_OPT_CD
		AND     FT_SCH_CD = FOM_SCH_CD;
	if(SQLCODE != 0 )
	{
     fn_errlog(c_ServiceName,"S31120",SQLMSG,c_errmsg);
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg); 
     return -1; 
	} 
	EXEC SQL
		UPDATE  ETR_EMP_TRANS_RPT
		SET ETR_TRD_SETTL_DT = ( select FSD_STTLMNT_DT from FSD_FI_STTLMNT_DTLS where trunc(FSD_TRD_DT)= :c_trd_dt )
		where ETR_PRD_CD='FD'
		and   ETR_CORP_NAME=trim(:c_cmpny)  /*** 'SUNG' *** Ver 1.5 variable used **/
		and   trunc(ETR_TRD_DT)=:c_trd_dt;
	if(SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
	{
     fn_errlog(c_ServiceName,"S31125",SQLMSG,c_errmsg);
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg); 
     return -1; 
	} 
   EXEC SQL
      INSERT INTO ETR_EMP_TRANS_RPT
         (
           ETR_CORP_NAME,
           ETR_PRD_CD,
           ETR_RPT_DT,
           ETR_MTCH_ACCNT,
           ETR_EMP_NAME,
           ETR_PAN_NO,
           ETR_DP_CLNT_ID,
           ETR_TRD_DT,
           ETR_ORDR_NO,
           ETR_TRD_EXEC_NO,
           ETR_TRD_QTY,
           ETR_SEC_TRD_PRC,
           ETR_TRD_VAL,
           ETR_ISIN_NO,
           ETR_CMPNY_NAME,
					 ETR_STK_NM,
					 ETR_TRD_FLW
         )
         (
           SELECT 
			     Company_cd,
			     'BOND',
           :c_trd_dt,
			     FTD_CLM_MTCH_ACCNT,   
           C_EMP_NAME,
           C_PAN_NO, 
			     FTD_DP_CLNT_ID,
			     FTD_ORDR_DT,
			     FTD_ORDR_RFRNC APPLICTN_NO,
			     FTD_TRD_REF TRN_NO,
			     FTD_EXCTD_QTY QTy,
			     FTD_EXCTD_RT rate,
			     FTD_TRD_VAL Amount,
			     FTD_ISIN_NMBR ISIN_NO,
			     FSM_ISSUER_NM COMPNY_NM,
					 FSM_STCK_NM,
					 FTD_ORDR_FLW
			    FROM ftd_fi_trnsctn_dtls,
			         FSM_FI_SECURITY_MSTR,
			         ( select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,
												trim(ITE_CMPY_ID) Company_cd, 
												'N' Employee,
												ITE_EMP_NAME C_EMP_NAME, 
												ITE_PAN_NO C_PAN_NO
			           from ITE_INSD_TRD_EMP_MSTR,ftd_fi_trnsctn_dtls,IOM_INFO_ORGANIZATION_MSTR
			           WHERE FTD_CLM_MTCH_ACCNT = nvl(ITE_MTCH_ACCNT,'NA')
				         AND ITE_AUTHRZTN_FLG='Y'
				         AND rtrim(ITE_CMPY_ID) =:c_cmpny  /*** 'SUNG' *** Ver 1.5 variable used **/ /** test trim removed **/
                 AND rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
                 /** AND IOM_CORPRT_EMAIL_IDES IS NOT NULL **/ /** commented in Ver 4.9 **/
                 AND FTD_TRD_TRD_DT = :c_trd_dt
			           UNION
			            select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,
													trim(ITE_CMPY_ID) Company_cd, 
													'Y' Relative,
													ITE_EMP_NAME C_EMP_NAME, 
													ITE_PAN_NO C_PAN_NO
			            FROM ITE_INSD_TRD_EMP_MSTR,ftd_fi_trnsctn_dtls,IOM_INFO_ORGANIZATION_MSTR
			            WHERE FTD_CLM_MTCH_ACCNT = nvl(ITE_RELATIVE_MTCH,'NA')
				          AND ITE_AUTHRZTN_FLG='Y'
				          AND rtrim(ITE_CMPY_ID) =:c_cmpny  /*** 'SUNG' *** Ver 1.5 variable used **/ /* test trim removd **/
                  AND rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
                /**  AND IOM_CORPRT_EMAIL_IDES IS NOT NULL **/ /** commented in Ver 4.9 **/ 
                  AND FTD_TRD_TRD_DT = :c_trd_dt
			         ) A
			    WHERE FTD_CLM_MTCH_ACCNT = A.match_id
			    AND FTD_STCK_MAPCD = FSM_STCK_MAPCD
			    AND FTD_ORDR_STTS ='E'
          AND FTD_TRD_TRD_DT =:c_trd_dt);
   if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
   {
     fn_errlog(c_ServiceName,"S31130",SQLMSG,c_errmsg);
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
     return -1;
   }
	EXEC SQL
		INSERT INTO ETR_EMP_TRANS_RPT
         (
           ETR_CORP_NAME,
           ETR_PRD_CD,
           ETR_RPT_DT,
           ETR_MTCH_ACCNT,
           ETR_ISIN_NO,
					 etr_sec_id,
					 etr_cusip_id,
					 etr_sedol_id,
					 etr_sec_type,
           ETR_STK_NM,
           ETR_TRD_FLW,
           ETR_TRD_DT,
           ETR_TRD_QTY,
           ETR_SEC_TRD_PRC,
           ETR_TRD_VAL,
					 etr_commission,
					 etr_trd_net_val,
					 etr_sec_fees,
					 etr_othr_fees,
					 etr_othr_fees2,
					 etr_othr_fees3,
           ETR_TRD_EXEC_NO,
           etr_currncy_cd,
           ETR_OPT_SYMBL,
           ETR_OPT_EXPRY_DT,
					 ETR_OPTION_CD, 
					 ETR_OPT_STRK_PRC,
           ETR_XCHNG_CD,
           ETR_PRD_TYP,
           ETR_UNDRLYNG,
           ETR_ORDR_NO,
           ETR_SEGMNT_CD,
           ETR_STLMNT_NO,
           ETR_CNTRCT_NO,
           ETR_CMPNY_NAME
         )
         (
          select
            Company_cd,
            'NCD' ,
            :c_trd_dt,
            TRD_CLM_MTCH_ACCNT MATCH_ID,
            SEM_DTLS.ISIN ISIN,
            decode(TRD_XCHNG_CD,'NSE',SEM_DTLS.NSESYM,'BSE',SEM_DTLS.BSECD) SEC_ID,
						null CUSIP,
						null SEDOL,
						null SEC_TYP,
            STK_STCK_NM STOCKNAME,
            TRD_TRD_FLW TRD_FLW,
            TRD_TRD_DT TRADE_DATE,
            TRD_EXCTD_QTY EXEC_QTY,
            TRD_EXCTD_RT EXEC_RT,
            TRD_TRD_VL TRD_VAL,
						nvl(TRD_BRKRG_VL,0) COMMSN,
						TRD_NET_VL NET_VAL,
						nvl(TRD_SEBI_CHRG_VAL,0) + nvl(TRD_STT,0) SEC_FEES,
						nvl(TRD_TRNX_CHRG,0) OTHR_FEES,
						nvl(TRD_STMP_DUTY,0) OTHR_FEES2,
						0 OTHR_FEES3,
            TRD_TRD_REF TRADE_REF,
						'INR' CURRNCY_CD,
						null OPT_SYMBOL,
						null OPT_EXPRY,
						null SEC_INDCTOR,
						null STRK_PRC,
            TRD_XCHNG_CD EXCHANGE,
            ORD_PRDCT_TYP PRDT_TYP,
            TRD_STCK_CD UNDRLYNG,
            TRD_ORDR_RFRNC ORD_REF,
            TRD_XCHNG_SGMNT_CD SEGMENT,
            TRD_XCHNG_SGMNT_STTLMNT STLMNT_NO,
            TRD_CNTRCT_NMBR CNTRCT_NO,
            FSM_ISSUER_NM COMPNY_NM
          FROM  TRD_TRD_DTLS,
               ORD_ORDR_DTLS,
               STK_STK_MSTR,
               (SELECT   SEM_STCK_CD,
		      							 MAX ( CASE WHEN SEM_ENTTY = '1' THEN SEM_MAP_VL END
			  										 ) NSESYM,
		      							 MAX (CASE WHEN SEM_ENTTY = '2' THEN SEM_MAP_VL END
			  										 ) BSECD,
		      							 MAX (CASE WHEN SEM_ENTTY = '10' THEN SEM_MAP_VL END
			  										 ) ISIN
		   					FROM SEM_STCK_MAP
		   					GROUP BY SEM_STCK_CD
		  				 ) SEM_DTLS,
               FSM_FI_SECURITY_MSTR,
               ( select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee,ITE_EMP_NAME C_EMP_NAME, ITE_PAN_NO C_PAN_NO
                 from  ITE_INSD_TRD_EMP_MSTR,TRD_TRD_DTLS,IOM_INFO_ORGANIZATION_MSTR
                WHERE  TRD_CLM_MTCH_ACCNT = nvl(ITE_MTCH_ACCNT,'NA')
                  AND  ITE_AUTHRZTN_FLG='Y'
                  AND  rtrim(ITE_CMPY_ID) =:c_cmpny  /*** 'SUNG'; *** Ver 1.5 variable used **//** test trim removed **/
                  AND  rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
                 /** AND  IOM_CORPRT_EMAIL_IDES IS NOT NULL  **/ /** commented in Ver 4.9 **/
                  AND  trunc(TRD_TRD_DT)= :c_trd_dt
               UNION
               select  distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative,ITE_DEPENDENT_EMP_NAME C_EMP_NAME, ITE_DEPENDENT_PAN_NO C_PAN_NO
                 FROM  ITE_INSD_TRD_EMP_MSTR,TRD_TRD_DTLS,IOM_INFO_ORGANIZATION_MSTR
                WHERE  TRD_CLM_MTCH_ACCNT = nvl(ITE_RELATIVE_MTCH,'NA')
                  AND  ITE_AUTHRZTN_FLG='Y'
                  AND  rtrim(ITE_CMPY_ID) =:c_cmpny  /*** 'SUNG'; *** Ver 1.5 variable used **//* test trim removed */
                  AND  rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
                /**  AND  IOM_CORPRT_EMAIL_IDES IS NOT NULL **/  /** commented in Ver 4.9 **/
                  AND   trunc(TRD_TRD_DT)= :c_trd_dt
              ) A
         WHERE TRD_STCK_CD = STK_STCK_CD
         AND   FSM_STCK_MAPCD = STK_STCK_CD
         AND   SEM_STCK_CD = TRD_STCK_CD  
				 AND   STK_STCK_CD = SEM_STCK_CD
         AND   TRD_CLM_MTCH_ACCNT = A.match_id
         AND   ORD_ORDR_RFRNC = TRD_ORDR_RFRNC
         AND   ORD_TRD_DT = trunc(TRD_TRD_DT)
         AND   STK_SCTR_CD = '28'
         AND   trunc(TRD_TRD_DT) = :c_trd_dt
       );            
   if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
   {
     fn_errlog(c_ServiceName,"S31135",SQLMSG,c_errmsg);
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
     return -1;
   }
fn_userlog (c_ServiceName,"Record insertion in IPO started: <%ld>", SQLROWCOUNT);  /*** ver 2.8 testing ***/ 
  EXEC SQL
	Insert into ETR_EMP_TRANS_RPT
		  (
		    etr_corp_name,
		    etr_prd_cd,
		    etr_rpt_dt,
		    etr_mtch_accnt,
		    ETR_ISIN_NO,
		    etr_sec_id,
		    etr_cusip_id,
		    etr_sedol_id,
		    etr_sec_type,
		    ETR_STK_NM,
		    etr_trd_flw,
		    etr_trd_dt,
		    etr_trd_qty,
		    etr_sec_trd_prc,
		    etr_trd_val,
		    etr_commission,
		    etr_trd_net_val,
		    etr_sec_fees,
		    etr_othr_fees,
		    etr_othr_fees2,
		    etr_othr_fees3,
		    etr_trd_exec_no,
		    etr_currncy_cd,
		    ETR_OPT_SYMBL,
		    ETR_OPT_EXPRY_DT,
		    ETR_OPTION_CD,
		    ETR_OPT_STRK_PRC
		  )
      (  
           select
            trim(ITE_CMPY_ID) CMPY_ID,
      /***  DECODE(IPO_CMP_ISS_TYPE,'S','BOND','IPO') PRDCT_CD,   commented in ver 2.8 ***/
            'IPO' PRDCT_CD,  /*** Ver 2.8 ***/ 
            :c_trd_dt TRD_DT,
            IPO_MATCH_ACC MATCH_ACCOUNT,
						null ISIN_NO,
						null SEC_ID,
						null CUSIP,
						null SEDOL,
						null SEC_TYPE,
            IPO_CMP_DESC SEC_DESC,
						'B' TRD_FLW,
            IPO_TRN_DATE TRD_DT,
     /***   decode(nvl(ipo_trn_asba_flg,'N'),'Y',nvl(iad_shares_allot,0),'N',decode(ipo_cmp_iss_type,'X',nvl(IPO_TRN_ALLCTD_QTY,0),nvl(IPO_RFND_SHARES_ALLTD,'0'))) ALLOCATED_QTY, commented in a version 2.8 ***/
            nvl(iad_shares_allot,0) ALLOCATED_QTY, /*** Ver 2.8 ***/ 
    /***    DECODE(ipo_trn_asba_flg,'Y',NVL(IAD_RT,0),IPO_OPT1_PRC) Price,   commented in a version 2.8 ***/
            NVL(IAD_RT,0) Price,  /*** ver 2.8 ***/  
    /***    decode(nvl(ipo_trn_asba_flg,'N'),'Y',nvl(IAD_DEBIT_AMT,0),'N',decode(ipo_cmp_iss_type,'X',nvl(ipo_rfnd_applcn_amt,0),nvl(IPO_RFND_SHARES_ALLTD,'0')*NVL(IPO_OPT1_PRC,0))) Value,   commented in a version 2.8 ***/
            nvl(IAD_DEBIT_AMT,0) Value, /*** Ver 2.8 ***/
            0 COMMSN,
    /***    decode(nvl(ipo_trn_asba_flg,'N'),'Y',nvl(IAD_DEBIT_AMT,0),'N',decode(ipo_cmp_iss_type,'X',nvl(ipo_rfnd_applcn_amt,0),nvl(IPO_RFND_SHARES_ALLTD,'0')*NVL(IPO_OPT1_PRC,0))) NET_VALUE,  commented in ver 2.8 ***/
            nvl(IAD_DEBIT_AMT,0) NET_VALUE,  /*** ver 2.8 ***/
						0 SEC_FEES, 0 OTHR_FEES, 0 OTHR_FEES2, 0 OTHR_FEES3 ,
            ipo_trn_id TRN_ID,
						'INR' CURR_CD,
						null		 OPT_SYMBOL,
						null		 OPT_EXPRY,
						null		 SEC_INDCTOR,
						null		 STRK_PRC
          FROM  IPO_TRANSACTIONS,
                ipo_company_master,
                ipo_allot_dtls,
        /***    ipo_refund_dtls,   commented in a version 2.8 ***/
                ITE_INSD_TRD_EMP_MSTR,
                IOM_INFO_ORGANIZATION_MSTR
          WHERE IPO_MATCH_ACC = nvl(ITE_MTCH_ACCNT,'NA')
            AND ITE_AUTHRZTN_FLG='Y'
            AND rtrim(ITE_CMPY_ID) =:c_cmpny  /*** 'SUNG'; *** Ver 1.5 variable used **/ /* test trim removed */
            AND rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
         /**   AND IOM_CORPRT_EMAIL_IDES IS NOT NULL **/  /** commented in Ver 4.9 **/
            AND ipo_cmp_cd   =  ipo_trn_cmp_cd
            AND ipo_trn_iss_cd = ipo_cmp_iss_cd
            AND ipo_trn_cmp_cd = iad_cmp_cd               /** ver 2.8 outer join removed **/ 
            AND ipo_trn_iss_cd = iad_iss_cd               /** ver 2.8 outer join removed **/ 
            AND ipo_trn_id     = iad_trn_id               /** ver 2.8 outer join removed **/ 
     /***   AND ipo_trn_cmp_cd = ipo_rfnd_cmp_cd (+)
            AND ipo_trn_iss_cd = ipo_rfnd_iss_cd (+)
            AND ipo_match_acc  = ipo_rfnd_match_accno(+)
            AND ipo_dp_id      = nvl(IPO_RFND_DP_ID,ipo_dp_id)
            AND ipo_dp_acc     = nvl(IPO_RFND_DP_ACC,ipo_dp_acc)   commented in a ver 2.8 ***/
            AND ipo_trn_status = 'E' 
     /***   AND DECODE(nvl(ipo_trn_asba_flg,'N'),'Y',trunc(IAD_PAYIN_DT) ,'N',trunc(IPO_RFND_ENT_DT)) = :c_trd_dt                        commented in a ver 2.8 ***/
            AND trunc(IAD_PAYIN_DT) = :c_trd_dt     /** Ver 2.8 **/
     /**    and decode(nvl(ipo_trn_asba_flg,'N'),'Y',nvl(iad_shares_allot,0),'N',decode(ipo_cmp_iss_type,'X',nvl(IPO_TRN_ALLC
TD_QTY,0),nvl(IPO_RFND_SHARES_ALLTD,'0'))) != 0  commented in ver 2.8 **/
            AND nvl(iad_shares_allot,0) != 0   /** Ver 2.8 **/
            AND trunc(IPO_TRN_DATE) >= to_date(:c_trd_dt,'dd-Mon-yyyy') -60   /** Ver 2.8 **/
        );
   if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
   {
     fn_errlog(c_ServiceName,"S31140",SQLMSG,c_errmsg);
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
     return -1;
   }
  fn_userlog (c_ServiceName,"Record insertion in IPO ended: <%ld>", SQLROWCOUNT);  /*** ver 2.8 testing ***/
  fn_userlog (c_ServiceName,"Record insertion in BOND started: <%ld>", SQLROWCOUNT);  /*** ver 2.8 testing ***/

  /**** ver 2.8 starts ***/

  EXEC SQL
     Insert into ETR_EMP_TRANS_RPT
         (
           etr_corp_name,
           etr_prd_cd,
           etr_rpt_dt,
           etr_mtch_accnt,
           ETR_ISIN_NO,
           etr_sec_id,
           etr_cusip_id,
           etr_sedol_id,
           etr_sec_type,
           ETR_STK_NM,
           etr_trd_flw,
           etr_trd_dt,
           etr_trd_qty,
           etr_sec_trd_prc,
           etr_trd_val,
           etr_commission,
           etr_trd_net_val,
           etr_sec_fees,
           etr_othr_fees,
           etr_othr_fees2,
           etr_othr_fees3,
           etr_trd_exec_no,
           etr_currncy_cd,
           ETR_OPT_SYMBL,
           ETR_OPT_EXPRY_DT,
           ETR_OPTION_CD,
           ETR_OPT_STRK_PRC
         )
         (
              select
               trim(ITE_CMPY_ID) CMPY_ID,
               'BOND' PRDCT_CD,  
               :c_trd_dt TRD_DT,
               IPO_MATCH_ACC MATCH_ACCOUNT,
               null ISIN_NO,
               null SEC_ID,
               null CUSIP,
               null SEDOL,
               null SEC_TYPE,
               IPO_CMP_DESC SEC_DESC,
               'B' TRD_FLW,
               IPO_TRN_DATE TRD_DT,
               nvl(IPO_RFND_SHARES_ALLTD,0) ALLOCATED_QTY, 
               NVL(IPO_OPT1_PRC,0) Price,  
              nvl(IPO_RFND_SHARES_ALLTD,0)*NVL(IPO_OPT1_PRC,0) Value,   
               0 COMMSN,
               nvl(IPO_RFND_SHARES_ALLTD,0)*NVL(IPO_OPT1_PRC,0) NET_VALUE,  
               0 SEC_FEES, 0 OTHR_FEES, 0 OTHR_FEES2, 0 OTHR_FEES3 ,
               ipo_trn_id TRN_ID,
               'INR' CURR_CD,
               null     OPT_SYMBOL,
               null     OPT_EXPRY,
               null     SEC_INDCTOR,
               null     STRK_PRC
             FROM  IPO_TRANSACTIONS,
                   ipo_company_master,
                   ipo_refund_dtls,
                   ITE_INSD_TRD_EMP_MSTR,
                   IOM_INFO_ORGANIZATION_MSTR
             WHERE IPO_MATCH_ACC = nvl(ITE_MTCH_ACCNT,'NA')
               AND ITE_AUTHRZTN_FLG='Y'
               AND rtrim(ITE_CMPY_ID) =:c_cmpny  
               AND rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
              /** AND IOM_CORPRT_EMAIL_IDES IS NOT NULL  **/  /** commented in Ver 4.9 **/ 
               AND ipo_cmp_cd   =  ipo_trn_cmp_cd
               AND ipo_trn_iss_cd = ipo_cmp_iss_cd
               AND ipo_trn_cmp_cd = ipo_rfnd_cmp_cd 
               AND ipo_trn_iss_cd = ipo_rfnd_iss_cd 
               AND ipo_match_acc  = ipo_rfnd_match_accno
               AND ipo_trn_status = 'E'
               AND trunc(IPO_RFND_ENT_DT) = :c_trd_dt
               AND trunc(IPO_TRN_DATE) >= to_date(:c_trd_dt,'dd-Mon-yyyy') -60 
               AND nvl(IPO_RFND_SHARES_ALLTD,0) !=0   
           );

     if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
     {
      fn_errlog(c_ServiceName,"S31145",SQLMSG,c_errmsg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
      return -1;
     } 
 fn_userlog (c_ServiceName,"Record insertion in BOND ended: <%ld>", SQLROWCOUNT);  /*** ver 2.8 testing ***/
  /***  ver 2.8 ends   ***/ 
   EXEC SQL
   UPDATE ETR_EMP_TRANS_RPT
   SET ETR_ISIN_NO = ( SELECT SEM_MAP_VL FROM sem_stck_map,ipo_company_master WHERE rtrim(IPO_CMP_DESC) = rtrim(ETR_STK_NM) AND IPO_CMP_STCK_CD =SEM_STCK_CD AND SEM_ENTTY=10 )
    WHERE ETR_PRD_CD in ( 'IPO','BOND')
      AND ETR_ISIN_NO is NULL
			AND ETR_CORP_NAME=:c_cmpny  /*** 'SUNG'; *** Ver 1.5 variable used **/ /** test trim removed **/
      AND trunc(ETR_RPT_DT) = :c_trd_dt;

   if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
   {
     fn_errlog(c_ServiceName,"S31150",SQLMSG,c_errmsg);
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
     return -1;
   }

   fn_userlog (c_ServiceName,"Record inserted in IPO : <%ld>", SQLROWCOUNT);


  if ( fn_committran( c_ServiceName, i_trnsctn,c_errmsg ) == -1 )
  {
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
     fn_errlog ( c_ServiceName, "S31155", LIBMSG, c_errmsg );
     return -1; 
  }
	fn_userlog(c_ServiceName,"End of fo_sungard_empdata");
	return 0;
}
/** Ver 1.3 ends **/
int fo_sng_gsc_empdata(char *c_ServiceName,
                       char *c_errmsg,
                       char *c_cmpny,
                       char *c_trd_dt
                       )
{

  long int li_tot_rcrds;
  int i_ch_val;
  int i_trnsctn;
  int i_loop=0;
  int i_err[5];
  int i_ferr[5];
  int i_ret_val=0;
  int i_reco_count;
  int i;

  long int li_cnt;
  long l_inner_counter=0;
  long li_session_id;
  long li_recvbuf=0;
  long l_rec_cnt=0;
  long l_opn_qty=0;
  long l_count=0;

  double d_rlzd_profit=0;
  double d_un_rlzd_profit=0;
  double d_un_rlzd_per=0;
  double d_val_at_mkt=0;
  double d_nav=0;
  double d_units=0;
  double d_opnpos_val=0;
  double d_lst_trd_prc=0;
  double d_rlzd_prft=0;
  double d_unrlzd_prft=0;


  FBFR32 *ptr_fml_buf;

  char c_mtch_acnt_id[ 11 ];
  char c_rout_str[4];
  char c_rowid[25];
  char  c_user_id[9];
  char  c_flag;
  char  c_agnt_cd[10];
  char c_trn_date[12];
  char  c_sch_name[101];
  char  c_emp_dpndnt_flg;
  char  c_mf_comp_name[140];
  char  c_cmpny_cd[5];
  char  c_cmpny_cd1[5];

  char c_xchng_cd[3];
  char c_prd_cd;
  char c_undrlyng[10];
  char c_from_dt[12];
  char c_to_dt[12];
  char c_expry_dt[12];

  FBFR32  *ptr_fml_Sbuf;
  FBFR32  *ptr_fml_Rbuf;

  EXEC SQL INCLUDE "table/mf_scheme_master.h" ;
  EXEC SQL INCLUDE "table/mf_companies.h" ;
  EXEC SQL INCLUDE "table/mf_navs.h";

  typedef struct ___list
  {
    char mtch_id[11];
    char c_emp_dpndnt_flg;
  } st_match_lst;

  st_match_lst *ptr_mtch_lst = NULL;

  typedef struct ___CDX_list
  {
    char mtch_id[11];
    char c_emp_dpndnt_flg;
    char c_expry_dt[12];
    char c_undrlyng[10];
    char c_rowid[25];
  } st_cdx_match_lst;

  st_cdx_match_lst *ptr_cdx_mtch_lst = NULL;

  EXEC SQL BEGIN DECLARE SECTION;
    varchar   c_near_expry_dt[LEN_DATE];
  EXEC SQL END DECLARE SECTION;

  MEMSET(c_trd_dt);
  MEMSET(c_errmsg);

  EXEC SQL
    SELECT count(rowid)
      INTO :l_count
      FROM ETR_EMP_TRANS_RPT
     WHERE trunc(etr_rpt_dt) = :c_trd_dt;
  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_userlog(c_ServiceName,"Failed To Get Current Trade Date");
    fn_errlog( c_ServiceName, "S31160",SQLMSG, c_errmsg);
    return -1;
  }

  
  if( l_count == 0 )
  {
   i_trnsctn= fn_begintran( c_ServiceName, c_errmsg );

   if ( i_trnsctn == -1 )
   {
    fn_errlog ( c_ServiceName, "S31165", LIBMSG, c_errmsg );
    return -1; 
   }

   /**** FNO Transactions ********/
 
   EXEC SQL
   INSERT INTO ETR_EMP_TRANS_RPT
             (  etr_corp_name,
								etr_prd_cd,
								etr_rpt_dt,
								etr_mtch_accnt,
								etr_acc_typ,
								etr_sec_id ,
								etr_sec_type ,
								etr_sec_id_typ ,
								etr_exg_mrkt_id ,
								etr_sec_desc,
								etr_cusip_id ,
								etr_sedol_id,
								etr_trd_qty ,
								etr_sec_trd_prc ,
								etr_currncy_cd,
								etr_trd_flw,
								etr_trd_val,
								etr_commission ,
								etr_accrued_intrst ,
								etr_trd_net_val,
								etr_trd_dt,
								etr_trd_settl_dt ,
              	etr_trd_can_ind,
	              etr_trd_corr_ind ,
								etr_opt_symbl ,
								etr_opt_strk_prc,
								etr_option_cd ,
								etr_opt_expry_dt ,
								etr_ord_entr_tm  ,
								etr_trd_exec_tm ,
								etr_trd_dscrtion_ind ,
								etr_pre_clrnc_id ,
								etr_ordr_no ,
								etr_trd_exec_no ,
								etr_intrntl_bnk_acc ,
								etr_aoni_ind ,
								etr_gaap_typ ,
								etr_brkr_name ,
								etr_pos_part )
        				(
        			 	 select  
	               Company_cd,
               	 'FNO',
	               :c_trd_dt,	
                 FTD_CLM_MTCH_ACCNT ,
                 '3' ,
                 SEM_MAP_VL, 
                 '1' ,
       					 null ,
      				 	 decode(FTD_XCHNG_CD,'NFO','XNSE','XBSE') ,
        				 STK_STCK_NM,
        				 null ,
        				 null ,
       					 FTD_EXCTD_QTY ,
       					 FTD_EXCTD_RT/100 ,
                 'INR' ,
                 FTD_TRD_FLW ,
                 ((FTD_EXCTD_QTY)*(FTD_EXCTD_RT+FTD_STRK_PRC))/100 ,
                 (FTD_BRKG+FTD_STT+FTD_SRC_TX+FTD_SEBI_TT+FTD_TRAN_CHRG+FTD_STAMP_DUTY+FTD_OTHER_CHRG+NVL(FTD_BRKRG_IGST,0) + NVL(FTD_BRKRG_CGST,0) + NVL(FTD_BRKRG_SGST,0) + NVL(FTD_BRKRG_UGST,0))/100 , /** GST Added for Ver 2.4 als osrc tax was twice  **/
                 0 ,
                 (((FTD_EXCTD_QTY)*(FTD_EXCTD_RT+FTD_STRK_PRC)) + (FTD_BRKG+FTD_STT+FTD_SRC_TX+FTD_SEBI_TT+FTD_TRAN_CHRG+FTD_STAMP_DUTY+FTD_OTHER_CHRG+NVL(FTD_BRKRG_IGST,0) + NVL(FTD_BRKRG_CGST,0) + NVL(FTD_BRKRG_SGST,0) + NVL(FTD_BRKRG_UGST,0)) )/100 ,				/** GST Added for Ver 2.4 **/
                 to_char(FTD_TRD_DT,'YYYYMMDD') ,
                 null ,
                'N' ,
                0 ,
                FTD_UNDRLYNG ,
                FTD_STRK_PRC/100 ,
                FTD_OPT_TYP  ,
                to_char(FTD_EXPRY_DT,'YYYYMMDD') ,
                to_char(FOD_ORD_ACK_TM,'YYYYMMDD') ,
                to_char(FTD_TRD_DT,'YYYYMMDD') ,
                'N' ,
                null  ,
                FTD_ORDR_RFRNC ,
                FTD_XCHNG_TRD_NO ,
                null ,
                null ,
               'INDGAAP' ,
               'ICICI Securities Ltd.' ,
                null 
                from ftd_fo_trd_dtls_hstry,fod_fo_ordr_dtls_hstry,sem_stck_map,STK_STK_MSTR,
                (select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee
                 from ITE_INSD_TRD_EMP_MSTR,ftd_fo_trd_dtls
                 WHERE ftd_clm_mtch_accnt = nvl(ITE_MTCH_ACCNT,'NA')
                 and   trunc(ftd_trd_dt)=  :c_trd_dt
		             AND   ITE_AUTHRZTN_FLG='Y'
                UNION
                 select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative
                 FROM ITE_INSD_TRD_EMP_MSTR,ftd_fo_trd_dtls
                 WHERE ftd_clm_mtch_accnt = nvl(ITE_RELATIVE_MTCH,'NA')
                 and   trunc(ftd_trd_dt)=  :c_trd_dt
		             AND   ITE_AUTHRZTN_FLG='Y'
                ) A
               where FTD_ORDR_RFRNC =  fod_ordr_rfrnc
               and   ftd_clm_mtch_accnt = fod_clm_mtch_accnt
               AND   A.match_id = fod_clm_mtch_accnt
               and   trunc(ftd_trd_dt) =  fod_trd_dt
               and   sem_stck_cd = FTD_UNDRLYNG 
               and   SEM_ENTTY = decode(FTD_XCHNG_CD,'NFO',3,'BFO',14)
               and   STK_STCK_CD = FTD_UNDRLYNG
               and   trunc(ftd_trd_dt) = :c_trd_dt
             );
            
    if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog(c_ServiceName,"S31170",SQLMSG,c_errmsg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg); 
      return -1; 
    }
   
    fn_userlog (c_ServiceName,"Record inserted in FNO : <%ld>", SQLROWCOUNT);
    /**** Eq Transactions *****/

    EXEC SQL
    INSERT INTO ETR_EMP_TRANS_RPT
    ( etr_corp_name,
     	etr_prd_cd,
			etr_rpt_dt,
			etr_mtch_accnt,
			etr_acc_typ,
			etr_sec_id ,
      etr_isin_no,
			etr_sec_type ,
			etr_sec_id_typ ,
			etr_exg_mrkt_id ,
			etr_sec_desc,
			etr_trd_qty ,
			etr_sec_trd_prc ,
			etr_currncy_cd,
			etr_trd_flw,
			etr_trd_val,
			etr_commission ,
			etr_accrued_intrst ,
      etr_sec_fees ,
      etr_othr_fees,
      etr_othr_fees2,
      etr_othr_fees3 ,
			etr_trd_net_val,
			etr_trd_dt,
			etr_trd_settl_dt ,
		  etr_ord_entr_tm  ,
			etr_trd_exec_tm ,
			etr_ordr_no ,
			etr_trd_exec_no ,
			etr_gaap_typ ,
			etr_brkr_name
			)
			(
				select  Company_cd,
				'EQ',
				:c_trd_dt,	        
        TRD_CLM_MTCH_ACCNT ,
        '1' ,
        TRD_STCK_CD,
        SEM_DTLS.ISIN,
				' ',
				'ISN',
        ('X' || TRD_XCHNG_CD ) ,
        STK_STCK_NM ,
        TRD_EXCTD_QTY ,
        TRD_EXCTD_RT ,
        'INR' ,
        TRD_TRD_FLW ,
        TRD_TRD_VL ,
        (nvl(TRD_BRKRG_VL,0) +nvl(TRD_TRNX_CHRG,0) + nvl(TRD_STMP_DUTY,0) +nvl(TRD_SEBI_CHRG_VAL,0) ) ,
        null ,
				nvl(TRD_STMP_DUTY,0) ,
        nvl(TRD_TRNX_CHRG,0) ,
        nvl(TRD_SEBI_CHRG_VAL,0) ,
        0 ,
        TRD_NET_VL ,
        to_char(TRD_TRD_DT,'dd-Mon-yyyy hh24:mi:ss') ,
        SPD_DEMAT_PYIN_DT  ,
        XOA_ACK_TM,
        TRD_TRD_DT,
        TRD_ORDR_RFRNC ,
        TRD_TRD_REF ,
        'INDGAAP' ,
        'ICICI Securities Ltd.' 
        from trd_trd_dtls,STK_STK_MSTR,SPD_STTLMNT_PRCS_DTLS,
            (SELECT   SEM_STCK_CD,
            	MAX (CASE
                  	WHEN SEM_ENTTY = '1'
                  	THEN SEM_MAP_VL
                 		END
                	) NSESYM,
            	MAX (CASE
                       WHEN SEM_ENTTY = '2'
                       THEN SEM_MAP_VL
                     END
                	) BSECD,
            	MAX (CASE
                   	WHEN SEM_ENTTY = '10'
                   	THEN SEM_MAP_VL
               		 END
                	) ISIN
          		FROM SEM_STCK_MAP
          		GROUP BY SEM_STCK_CD
      			) SEM_DTLS,
             XOA_XCHNG_ORD_ACK,
					 	(select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee
                from ITE_INSD_TRD_EMP_MSTR,trd_trd_dtls
                WHERE TRD_CLM_MTCH_ACCNT = nvl(ITE_MTCH_ACCNT,'NA')
									and trunc(TRD_TRD_DT)=:c_trd_dt
									AND   ITE_AUTHRZTN_FLG='Y'
             	UNION
                select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative
                FROM  ITE_INSD_TRD_EMP_MSTR,trd_trd_dtls
                WHERE TRD_CLM_MTCH_ACCNT = nvl(ITE_RELATIVE_MTCH,'NA')
									and trunc(TRD_TRD_DT)=:c_trd_dt
								  AND ITE_AUTHRZTN_FLG='Y'
             ) A
        where STK_STCK_CD= TRD_STCK_CD
        and SEM_STCK_CD = TRD_STCK_CD
        and SPD_STTLMNT_NMBR=TRD_XCHNG_SGMNT_STTLMNT
        and SPD_XCHNG_CD = TRD_XCHNG_CD
        and SPD_SGMNT_CD= TRD_XCHNG_SGMNT_CD
        and trunc(TRD_TRD_DT)= :c_trd_dt
        and TRD_CLM_MTCH_ACCNT  = A.match_id
        and XOA_ORDR_RFRNC=TRD_ORDR_RFRNC
       );

    if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog(c_ServiceName,"S31175",SQLMSG,c_errmsg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
      return -1; 
    }

    fn_userlog (c_ServiceName,"Record inserted in  EQ : <%ld>", SQLROWCOUNT);
	/* commented as not required 
    EXEC SQL
      UPDATE ETR_EMP_TRANS_RPT
         SET ETR_ISIN_NO = ( SELECT SEM_MAP_VL FROM SEM_STCK_MAP WHERE ETR_ISIN_NO = SEM_STCK_CD AND SEM_ENTTY = 10)
       WHERE etr_prd_cd ='EQ'
         AND trunc(etr_rpt_dt) = :c_trd_dt;

    if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog(c_ServiceName,"S31180",SQLMSG,c_errmsg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
      return -1; 
    }
    */
    /***** CDX Transactions ********/

    EXEC SQL
   	INSERT INTO ETR_EMP_TRANS_RPT
				( etr_corp_name,
					etr_prd_cd,
					etr_rpt_dt,
					etr_mtch_accnt,
					etr_cusip_id ,
					etr_sedol_id,
					etr_acc_typ,
					etr_sec_id ,
					etr_sec_type ,
					etr_sec_id_typ ,
					etr_exg_mrkt_id ,
					etr_sec_desc,	
					etr_trd_qty ,
					etr_sec_trd_prc ,
					etr_currncy_cd,
					etr_trd_flw,
					etr_trd_val,
					etr_commission ,
					etr_accrued_intrst ,
					etr_trd_net_val,
					etr_sec_fees ,
					etr_othr_fees,
					etr_othr_fees2,
					etr_othr_fees3 ,
					etr_trd_dt,
					etr_trd_settl_dt ,
					etr_trd_can_ind,
					etr_trd_corr_ind ,	
					etr_trd_exec_no ,	
					etr_brkr_name 
					)
					(
				select  Company_cd,
					'CDX',
					 :c_trd_dt,	
					CTD_CLM_MTCH_ACCNT ACCOUNT_NO,              
					null CUSIP,
					null SEDOL,
					null ACC_TYP,
					CTD_UNDRLYNG,
					null SEC_TYPE,
					null CORP_SEC_ID,
					'NDX' XCHNG_CD, 
					CXU_UND_NM  SECRTY_NAME,
					CTD_EXCTD_QTY TRD_QTY,
					CTD_EXCTD_RT TRD_PRICE,  
					'INR' CURRNCY_CD,        
					A.CTD_TRD_FLW,
					(CTD_EXCTD_QTY * CTD_EXCTD_RT ) PRINCIPAL_AMNT,        
					CTD_BRKG COMMISSION,
					null INTEREST,
					CTD_TRD_NET_VAL TRD_NET_VAL,
					CTD_SRC_TX+ nvl(CTD_CGST_AMT,0) + nvl(CTD_SGST_AMT,0) + nvl(CTD_UGST_AMT,0) + nvl(CTD_IGST_AMT,0) SEC_FEES,    /** GST Added for Ver 2.4 **/ 
					CTD_STT OTHER_FEES,
					0 OTHER_FES2,
					0 OTHR_FEES_3,
					CTD_TRD_DT TRD_DATE,
					CSM_CLN_PAYIN_DT,
					'N' CANCEL_FLG,
					'N' CORRECT_FLAG,       
					CTD_XCHNG_TRD_NO TRADE_ID,
					'ICICI SECURITIES' BRKR_NAME        
				  from CTD_CDX_TRD_DTLS A,CXU_CDX_XCHNG_UND B,CSM_CDX_STTLMNT_MSTR D,
				  (select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee
						from ITE_INSD_TRD_EMP_MSTR,CTD_CDX_TRD_DTLS
						WHERE CTD_CLM_MTCH_ACCNT = nvl(ITE_MTCH_ACCNT,'NA')
						 and  trunc(CTD_TRD_DT)=:c_trd_dt
						AND   ITE_AUTHRZTN_FLG='Y'
						UNION
						select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative
						FROM ITE_INSD_TRD_EMP_MSTR,CTD_CDX_TRD_DTLS
						WHERE CTD_CLM_MTCH_ACCNT = nvl(ITE_RELATIVE_MTCH,'NA')
						  and  trunc(CTD_TRD_DT)=:c_trd_dt
						AND   ITE_AUTHRZTN_FLG='Y'
				  ) C
				  where trunc(CTD_TRD_DT)=:c_trd_dt
				  and B.CXU_XCHNG_CD= A.CTD_XCHNG_CD
				  and B.CXU_UNDRLYNG= A.CTD_UNDRLYNG
          and trunc(CSM_TRD_DT)= trunc(A.CTD_TRD_DT)
          and CSM_XCHNG_CD= A.CTD_XCHNG_CD
				  and  CTD_CLM_MTCH_ACCNT = C.match_id
        );
    if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog(c_ServiceName,"S31185",SQLMSG,c_errmsg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
      return -1; 
    } 

    fn_userlog (c_ServiceName,"Record inserted in  CDX : <%ld>", SQLROWCOUNT);
    /**** MF Transactions ****/

    EXEC SQL
   	INSERT INTO ETR_EMP_TRANS_RPT
		(       etr_corp_name,
			etr_prd_cd,
			etr_rpt_dt,
			etr_mtch_accnt,
			etr_acc_typ,
			etr_sec_id ,
			etr_sec_type ,
			etr_sec_id_typ ,
			etr_exg_mrkt_id ,
			etr_sec_desc,
			etr_trd_qty ,
			etr_sec_trd_prc ,
			etr_currncy_cd,
			etr_trd_flw,
			etr_trd_val,
			etr_commission ,
			etr_sec_fees,
			etr_othr_fees,
			etr_accrued_intrst ,
			etr_trd_net_val,
			etr_trd_exec_no,
			etr_trd_dt,
			etr_trd_settl_dt ,
			etr_ord_entr_tm  ,
			etr_trd_exec_tm ,
			etr_gaap_typ ,
			etr_brkr_name 
			)
			(
		   select Company_cd,
			  'MF',
			  :c_trd_dt,	              
			  MF_TRN_MATCH_ACC ,
			  '1' ,
			  MF_NAV_AMFI_CD,
			  '0' ,
			  'AMP' ,
			  'null' ,
			  MF_COMP_NAME,
			  MF_TRN_QTY ,
			  MF_TRN_NAV ,
			  'INR' ,
			  MF_TRN_CD ,
			  nvl(MF_TRN_AMT,0) ,
			  MF_TRN_COMM,
				MF_TRN_ST + nvl(MF_TRN_CGST_AMT,0) + nvl(MF_TRN_SGST_AMT,0) + nvl(MF_TRN_IGST_AMT,0) + nvl(MF_TRN_UGST_AMT,0),    /** GST Added for Ver 2.4 ***/
				MF_TRN_STT,
			  null ,
			  MF_TRN_AMT+nvl(MF_TRN_ST,0) + nvl(MF_TRN_COMM,0) + nvl(MF_TRN_STT,0) + NVL(MF_TRN_CGST_AMT,0) + NVL(MF_TRN_SGST_AMT,0) + NVL(MF_TRN_IGST_AMT,0) + NVL(MF_TRN_UGST_AMT,0),    /** GST Added for Ver 2.4 ***/ 
				to_char(MF_TRN_ID),
			  MF_TRN_DATE ,
			  MF_TRN_UPLD_DT ,
			  MF_TRN_DATE,
			  MF_TRN_UPLD_DT,
			  'INDGAAP' ,
			  'ICICI SECURITIES'
		  FROM mf_transactions,MF_NAVS,MF_COMPANIES,
		  (select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee
				from ITE_INSD_TRD_EMP_MSTR,mf_transactions
				WHERE MF_TRN_MATCH_ACC = nvl(ITE_MTCH_ACCNT,'NA')
				AND   ITE_AUTHRZTN_FLG='Y'
				UNION
				select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative
				FROM ITE_INSD_TRD_EMP_MSTR,mf_transactions
				WHERE MF_TRN_MATCH_ACC = nvl(ITE_RELATIVE_MTCH,'NA')
				AND   ITE_AUTHRZTN_FLG='Y'
		   ) A
		  where MF_TRN_MATCH_ACC = A.match_id
      AND   MF_NAV_COMP_CD=MF_TRN_COMP_CD
      AND   MF_NAV_SCH_CD=MF_TRN_SCH_CD
      AND   MF_COMP_CD= MF_TRN_COMP_CD
     );
    if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog(c_ServiceName,"S31190",SQLMSG,c_errmsg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
      return -1; 
    }   

    fn_userlog (c_ServiceName,"Record inserted in  MF : <%ld>", SQLROWCOUNT);
    /**** FD Transactions ****/

    EXEC SQL
    INSERT INTO ETR_EMP_TRANS_RPT
		( etr_corp_name,
			etr_prd_cd,
			etr_rpt_dt,
			etr_mtch_accnt,
			etr_acc_typ,
			etr_sec_id ,
			etr_sec_type ,
			etr_sec_id_typ ,
			etr_exg_mrkt_id ,
			etr_sec_desc,
			etr_currncy_cd,
			etr_trd_flw,
			etr_trd_val,
			etr_commission ,
			etr_accrued_intrst ,
			etr_trd_net_val,
			etr_trd_dt,
			etr_trd_settl_dt ,
			etr_trd_exec_no ,
			etr_brkr_name  
			)
			(
      select  Company_cd,
			'FD',
			 :c_trd_dt,        
			 FT_TRANS_MATCH_ACC_NO ACCOUNT_NO,                  
		   '1' ACC_TYP,
       FT_TRANS_SCH_CD SEC_ID,
       '7' SEC_TYP,
		   null SEC_IDNTFR_TYP,
		   null XCHNG_IDNTFR,			           
       TRIM(FSM_DESC) SCHEME_DESC,                      
       'INR' CURRENCY_CD,                      
       FT_TRANS_TRN_TYPE TRAN_TYPE,
       FT_TRANS_TRN_AMT PRINCIPAL_AMNT,                      
       '0' COMMISION,
        '0' INTRST,
       FT_TRANS_TRN_AMT NET_AMNT,
       FT_TRANS_TRN_DT TRANSACTION_DATE,
       FSD_STTLMNT_DT ,
       FT_TRANS_TRN_ID TRADE_ID,
       'ICICI Securities' BROKER
	     FROM    FD_PRT_TRANS,
                      FD_ISSUER_MASTER,
                      FD_SCHEME_MASTER,
                      FD_OPTION_MASTER,
                      OVP_ONE_VIEW_PRT_LVL1,
                      OVP_ONE_VIEW_PRT_LVL2,
                      FSD_FI_STTLMNT_DTLS,
                     (select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee
                      from ITE_INSD_TRD_EMP_MSTR,FD_PRT_TRANS
                      WHERE FT_TRANS_MATCH_ACC_NO = nvl(ITE_MTCH_ACCNT,'NA')
		      AND   ITE_AUTHRZTN_FLG='Y'
                      UNION
                      select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative
                      FROM ITE_INSD_TRD_EMP_MSTR,FD_PRT_TRANS
                      WHERE FT_TRANS_MATCH_ACC_NO = nvl(ITE_RELATIVE_MTCH,'NA')
		      AND   ITE_AUTHRZTN_FLG='Y'
                     ) A
              WHERE   FT_TRANS_MATCH_ACC_NO = A.match_id
              AND     FIM_ISS_CD= FT_TRANS_ISS_CD
              AND     FSM_SCH_CD  = FT_TRANS_SCH_CD
              AND     FSM_ISS_CD  = FT_TRANS_ISS_CD
              AND     FT_TRANS_OPT_CD = FOM_OPT_CD
              AND     FT_TRANS_SCH_CD = FOM_SCH_CD
              AND     OVP_LVL1_CD = FIM_OVP_LVL1_CD
              AND     OVP_LVL2_CD = FIM_OVP_LVL2_CD
              AND     FT_TRANS_ISS_CD = FOM_ISS_CD
              AND     trunc(FSD_TRD_DT)=trunc(FT_TRANS_TRN_DT)
      );
    if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog(c_ServiceName,"S31195",SQLMSG,c_errmsg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
      return -1; 
    }

    fn_userlog (c_ServiceName,"Record inserted in  FD : <%ld>", SQLROWCOUNT);
    /**** BONDS Transactions *****/
    EXEC SQL
  	INSERT INTO ETR_EMP_TRANS_RPT
		( etr_corp_name,
			etr_prd_cd,
			etr_rpt_dt,
			etr_mtch_accnt,
			etr_acc_typ,
		  etr_sec_id,
    	etr_sec_type ,
			etr_sec_id_typ ,
      etr_isin_no,
			etr_exg_mrkt_id ,
			etr_sec_desc,
      etr_trd_qty,
      etr_sec_trd_prc,
			etr_currncy_cd,
			etr_trd_flw,
			etr_trd_val,
			etr_commission ,
			etr_accrued_intrst ,
			etr_trd_net_val,       
			etr_trd_dt,
			etr_trd_settl_dt ,
			etr_ord_entr_tm  ,
			etr_trd_exec_tm ,
			etr_ordr_no ,
			etr_trd_exec_no ,
			etr_brkr_name 
			)
			(
		SELECT
			Company_cd,
			'BOND',
			 :c_trd_dt, 
			 FPD_CLM_MTCH_ACCNT ,
			 '1',
       FSM_STCK_MAPCD,
			 '7',
			 null,
			 null,
			 'XBSE',
			 FSM_STCK_NM,
			 FPD_TRNSCTN_QTY,
			 FPD_TRNSCTN_PRC,
			 'INR',
			 FPD_TRNSCTN_FLW,
			 FPD_CLEAN_PRC ,
			 (nvl(FPD_BRKRG_VL,0) + nvl(FPD_STMP_DUTY,0) + nvl(FPD_TRNX_CHRG,0)) ,
			 decode(FPD_TRNSCTN_FLW,'I',FPD_INTEREST) ,
			 ( nvl(FPD_CLEAN_PRC,0) + nvl(FPD_BRKRG_VL,0) + nvl(FPD_STMP_DUTY,0) + nvl(FPD_TRNX_CHRG,0) + decode(FPD_TRNSCTN_FLW,'I',nvl(FPD_INTEREST,0)) ),
			  FPD_TRNSCTN_DT,
			  FPD_SETTLMNT_DT,
			  FPD_TRNSCTN_DT,
			  FPD_SETTLMNT_DT,
			  null ORDER_NUM,
			  null  EXEC_NUM,
			 'ICICI Securities Ltd'
		   FROM  FPS_FI_PRTFLO_SMRY,
			 			 FPD_FI_PRTFLO_DTLS,
			 			 FSM_FI_SECURITY_MSTR,
			 			 FCM_FI_CTGRY_MSTR,
			 			 (select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,
														 trim(ITE_CMPY_ID) Company_cd, 
														 'N' Employee
				      from ITE_INSD_TRD_EMP_MSTR,FPS_FI_PRTFLO_SMRY
				      WHERE FPS_CLM_MTCH_ACCNT = nvl(ITE_MTCH_ACCNT,'NA')
				      AND   ITE_AUTHRZTN_FLG='Y'
				      UNION
				      select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,
															trim(ITE_CMPY_ID) Company_cd, 
															'Y' Relative
				      FROM ITE_INSD_TRD_EMP_MSTR,FPS_FI_PRTFLO_SMRY
				      WHERE FPS_CLM_MTCH_ACCNT = nvl(ITE_RELATIVE_MTCH,'NA')
				      AND   ITE_AUTHRZTN_FLG='Y'
			 ) A
		   WHERE   FPS_CLM_MTCH_ACCNT = A.match_id
		   AND     FPD_CLM_MTCH_ACCNT= FPS_CLM_MTCH_ACCNT
		   AND     FPD_USR_ID        = FPS_USR_ID
		   AND     FPD_SCRTY_CD      = FPS_SCRTY_CD
		   AND     FSM_STCK_CD       = FPS_SCRTY_CD
		   AND     FCM_CTGRY_NO      = FSM_CTGRY
		   AND     NVL(FPD_DELETE_FLG, 'N')  <> 'Y'
    );
    if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog(c_ServiceName,"S31200",SQLMSG,c_errmsg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
      return -1; 
    }

    fn_userlog (c_ServiceName,"Record inserted in  BOND : <%ld>", SQLROWCOUNT); 
    EXEC SQL
      UPDATE ETR_EMP_TRANS_RPT
         SET etr_sec_id = (select SEM_MAP_VL from sem_stck_map where sem_stck_cd=etr_sec_id and SEM_ENTTY='2'),
             etr_isin_no= (select SEM_MAP_VL from sem_stck_map where sem_stck_cd=etr_isin_no and SEM_ENTTY='10')
       where etr_rpt_dt = :c_trd_dt
         AND etr_prd_cd ='BOND';
    if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog(c_ServiceName,"S31205",SQLMSG,c_errmsg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
      return -1; 
    }

    fn_userlog (c_ServiceName,"Record inserted in  BOND Update : <%ld>", SQLROWCOUNT);
    if ( fn_committran( c_ServiceName, i_trnsctn,c_errmsg ) == -1 )
    {
      fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
      fn_errlog ( c_ServiceName, "S31210", LIBMSG, c_errmsg );
      return -1; 
    }

   }  /** End of l_count == 0 ***/
   else
   {
    fn_userlog (c_ServiceName,"Transaction data  already downloaded ");
   } 

   /******************** Position Data *********************/
   strcpy(c_cmpny_cd,"GSC");
   strcpy(c_cmpny_cd1,"SUNG");


   if( ( strcmp( c_cmpny_cd,"GSC") == 0 ) ||
       ( strcmp( c_cmpny_cd1,"SUNG") == 0 ) )
   {

    EXEC SQL
    SELECT count(rowid)
      INTO :l_count
      FROM EPR_EMP_PSTN_RPT 
     WHERE trunc(epr_rpt_dt) = :c_trd_dt;
    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
     fn_userlog(c_ServiceName,"Failed To Get Current Trade Date");
     fn_errlog( c_ServiceName, "S31215",SQLMSG, c_errmsg);
     return -1; 
    }


    if( l_count == 0 )
    {
     i_trnsctn= fn_begintran( c_ServiceName, c_errmsg );

     if ( i_trnsctn == -1 )
     {
      fn_errlog ( c_ServiceName, "S31220", LIBMSG, c_errmsg );
      return -1; 
     }

    /**** FNO Open Position ***/

    EXEC SQL
 		INSERT INTO EPR_EMP_PSTN_RPT(
			epr_corp_name ,
			epr_prd_cd ,
			epr_rpt_dt ,
			epr_mtch_accnt,
			epr_acc_typ,
			epr_sec_id ,
			epr_sec_type, 
			epr_sec_id_typ ,
			epr_exg_mrkt_id,
			epr_sec_desc ,
			epr_cusip_id ,
			epr_sedol_id ,
			epr_trd_qty ,
			epr_sec_eod_prc ,
			epr_currncy_cd ,
			epr_trd_mrkt_val, 
			epr_pos_dt ,
			epr_intrntl_bnk_acc,
			epr_aoni_ind ,
			epr_drip_ind ,
			epr_drip_chng_cdt ,
			epr_mny_mrkt_ind ,
			epr_opt_symbl ,
			epr_strk_prc ,
			epr_opt_cd ,
			epr_expry_dt, 
			epr_rlzd_pnl ,
			epr_rlzd_acc_prd ,
			epr_unrlzd_pnl ,
			epr_unrlzd_acc_prd ,
			epr_per_rlzd_pnl ,
			epr_per_unrlzd_pnl, 
			epr_gaap_typ ,
			epr_brkr_name ,
			epr_pos_part 
			)
			(
		select   
       Company_cd, 
			 'FNO',
			 :c_trd_dt,
			 PCP_CLM_MTCH_ACCNT ACCNT_NO,
			'3' ACC_TYPE_FNO,
			SEM_MAP_VL, 
			'1' SECTYPE_DEFAULT_1,
			null SEC_ID_TYPE,
			decode(PCP_XCHNG_CD,'NFO','XNSE','XBSE') XCHNG_IDENTIFIER,
			STK_STCK_NM, 
			null CUSIP,
			null SEDOL,
			PCP_OPNPSTN_QTY POS_QTY,
			PCP_CRRNT_MKT_PRC/100 EOD_MRKT_MRC,
			'INR' CURRENCY,
			((PCP_OPNPSTN_QTY)*(PCP_CRRNT_MKT_PRC + PCP_STRK_PRC))/100 MARKET_VALUE,
			:c_trd_dt position_as_on_date,
			null INTRNTL_BNK_ACC,
			null AONI_IND,
			null DRIP_IND,
			null DRIP_CHNG_DT,
			null MONEY_MRKT_IND,
			PCP_UNDRLYNG OPTION_SYMBOL,
			decode(pcp_prdct_typ,'O',PCP_STRK_PRC/100,0) STRK_PRC,
			PCP_OPT_TYP OPT_TYP,
			PCP_EXPRY_DT EXPRY_DT,
			PCP_RLLZD_PNL/100 RLZD_PNL ,
			'LTD' RLZD_PNL_ACC_PERIOD,
			PCP_UNRLLZD_PNL/100 UNRLZD_PNL,
			'LTD' UNRLZD_PNL_ACC_PERIOD,
			null RLZD_PNLPERCENT,
			null UNRLZD_PNLPERCENT,
			'INDGAAP' GAAP_TYPE,
			'ICICI Securities Ltd' BROKER_NAME,
		  null POS_PART
		  from PCP_PRTFL_CNTRCT_PRDCT,sem_stck_map,STK_STK_MSTR,		/** Ver 2.9 _PSTN changed tp _PRDCT **/
		   (select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee
		    from ITE_INSD_TRD_EMP_MSTR,PCP_PRTFL_CNTRCT_PRDCT
				WHERE PCP_CLM_MTCH_ACCNT= nvl(ITE_MTCH_ACCNT,'NA')
				AND   ITE_AUTHRZTN_FLG='Y'
				UNION
				select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative
				FROM ITE_INSD_TRD_EMP_MSTR,PCP_PRTFL_CNTRCT_PRDCT
				WHERE PCP_CLM_MTCH_ACCNT= nvl(ITE_RELATIVE_MTCH,'NA')
				AND   ITE_AUTHRZTN_FLG='Y'
			 ) A
		   where PCP_CLM_MTCH_ACCNT = A.match_id
       AND sem_stck_cd= PCP_UNDRLYNG
       AND STK_STCK_CD= PCP_UNDRLYNG
       AND SEM_ENTTY=decode(pcp_xchng_cd,'NFO',3,'BFO',10)
     );
    if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog(c_ServiceName,"S31225",SQLMSG,c_errmsg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
      return -1; 
    }

    fn_userlog (c_ServiceName,"Record inserted in  FNO POS Update : <%ld>", SQLROWCOUNT);

   /**** EQ Positions ******/

   EXEC SQL
		INSERT INTO EPR_EMP_PSTN_RPT(
			epr_corp_name ,
			epr_prd_cd ,
			epr_rpt_dt ,
			epr_mtch_accnt,
			epr_acc_typ,
      epr_sec_id,
			epr_sec_type, 
			epr_sec_id_typ ,
			epr_exg_mrkt_id,
			epr_sec_desc ,
      epr_isin_no,
			epr_cusip_id ,
			epr_sedol_id ,
			epr_trd_qty ,
			epr_sec_eod_prc ,
			epr_currncy_cd ,
			epr_trd_mrkt_val, 
			epr_pos_dt ,
			epr_intrntl_bnk_acc,
			epr_aoni_ind ,
			epr_drip_ind ,
			epr_drip_chng_cdt ,
			epr_mny_mrkt_ind ,
			epr_opt_symbl ,
			epr_strk_prc ,
			epr_opt_cd ,
			epr_expry_dt, 
			epr_rlzd_pnl ,
			epr_rlzd_acc_prd ,
			epr_unrlzd_pnl ,
			epr_unrlzd_acc_prd ,
			epr_per_rlzd_pnl ,
			epr_per_unrlzd_pnl, 
			epr_gaap_typ ,
			epr_brkr_name ,
			epr_pos_part 
			)
			(
		select   
       Company_cd,
			 'EQ',
			 :c_trd_dt,
		  UPS_CLM_MTCH_ACCNT ACCOUNT_NO,
		  '1' ACC_TYPE_CASH,
		   STK_STCK_CD SEC_IDENTIFIER,
		  '1' SEC_TYPE,
		  'ISN' SEC_D_TYPE,
		  UPS_XCHNG_CD XCHNG_IDENTIFIER,
		  STK_STCK_NM  SEC_DESC,
      STK_STCK_CD SEC_IDENTIFIER,
		  null CUSIP,
		  null SEDOL,
		  UPS_QTY_HLD OPEN_QTY,
		  LTQ_RT  SEC_EOD_PRC,
		  'INR' CURRENCY,
		  UPS_QTY_HLD * LTQ_RT   MARKET_VALUE,
		  :c_trd_dt POS_DATE,
		  null INTNTNL_BNK_ACC,
		  null AONI_IND,
		  null DRIP_IND,
		  null Drip_CHNG_DT,
		  null MONEY_MRKT,
		  null OPTION_SYMBOL,
		  null OPTION_STRK_PRC,
		  null OPTION_CD,
		  null OPTION_EXP_DT,
		  UPS_BKD_PRFT_LSS RLZD_GAIN_LOSS,
		  'LTD' ACC_PERIOD,
		  decode(UPS_QTY_HLD,0,0,((UPS_QTY_HLD * LTQ_RT) - (UPS_QTY_HLD * UPS_AVRG_TRNSCTN_RT))) UNRLZD_GAIN_LOSS,
		  'LTD' ACC_PERIOD,
		  null RLZD_PNL_PERC,
		  null UNRLZD_PNL_PERC,
		  'INDGAAP' GAAP_TYPE,
		  'ICICI Securities Ltd.' BROKER_NAME,
		  null POS_PARTICULARS
		from UPS_PRTFLO_SMMRY,STK_STK_MSTR, ltq_trd_qt,
		 (select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee
                from ITE_INSD_TRD_EMP_MSTR,UPS_PRTFLO_SMMRY
                WHERE UPS_CLM_MTCH_ACCNT = nvl(ITE_MTCH_ACCNT,'NA')
		AND   ITE_AUTHRZTN_FLG='Y'
                UNION
                select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative
                FROM ITE_INSD_TRD_EMP_MSTR,UPS_PRTFLO_SMMRY
                WHERE UPS_CLM_MTCH_ACCNT = nvl(ITE_RELATIVE_MTCH,'NA')
		AND   ITE_AUTHRZTN_FLG='Y'
               ) A
		where UPS_CLM_MTCH_ACCNT =A.match_id 
		and STK_STCK_CD = UPS_STCK_CD
		and ups_xchng_cd= ltq_xchng_cd
    and LTQ_STCK_CD = STK_STCK_CD
    );
    if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog(c_ServiceName,"S31230",SQLMSG,c_errmsg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
      return -1; 
    }

    fn_userlog (c_ServiceName,"Record inserted in  EQ POS Update : <%ld>", SQLROWCOUNT);

    fn_userlog (c_ServiceName,"Record inserted in  BOND : <%ld>", SQLROWCOUNT);
    EXEC SQL
      UPDATE EPR_EMP_PSTN_RPT  
         SET epr_sec_id = (select SEM_MAP_VL from sem_stck_map where sem_stck_cd=epr_sec_id and SEM_ENTTY='1'),
             epr_isin_no= (select SEM_MAP_VL from sem_stck_map where SEM_ENTTY=decode(epr_exg_mrkt_id,'NSE',10,'BSE','2') and SEM_STCK_CD=epr_isin_no) 
       where epr_rpt_dt = :c_trd_dt
         AND epr_prd_cd ='EQ';
    if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog(c_ServiceName,"S31235",SQLMSG,c_errmsg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
      return -1; 
    }

    fn_userlog (c_ServiceName,"Records MF Update : <%ld>", SQLROWCOUNT);
  

    /**** BOND Positions ***/
    EXEC SQL
    INSERT INTO EPR_EMP_PSTN_RPT(
			epr_corp_name ,
			epr_prd_cd ,
			epr_rpt_dt ,
			epr_mtch_accnt,
			epr_acc_typ,
      epr_sec_id,
			epr_sec_type, 
			epr_sec_id_typ ,
			epr_exg_mrkt_id,
			epr_sec_desc ,
			epr_isin_no,
			epr_cusip_id ,
			epr_sedol_id ,
			epr_trd_qty ,
			epr_sec_eod_prc ,
			epr_currncy_cd ,
			epr_trd_mrkt_val, 
			epr_pos_dt ,
			epr_rlzd_pnl ,
			epr_rlzd_acc_prd ,
			epr_unrlzd_pnl ,
			epr_unrlzd_acc_prd ,
			epr_per_rlzd_pnl ,
			epr_per_unrlzd_pnl, 
			epr_gaap_typ ,
			epr_brkr_name 
			)
			(
		select   Company_cd,
			 'BOND',
			 :c_trd_dt,
			 FPS_CLM_MTCH_ACCNT ACCOUNT_NO,
			 '1' Acc_typ,
			 FSM_STCK_MAPCD sec_IDNTFR,
			 '7' Sec_typ,         
			 null sec_id_typ,
			 'XBSE' XCHNG_IDFR,
			 FSM_STCK_NM SEC_NAME,       
			 FSM_STCK_MAPCD Stock_Cd,
			 null CUSIP,
			 null SEDOL,
			 ROUND(NVL(FPS_QTY_HLD,0),2) QTY_HOLD,
			 NVL(FPS_AVRG_TRNSCTN_RT,0) EOD_PRC,
			 'INR' CURNCY_CD,
			 ROUND(NVL(FPS_QTY_HLD,0)*NVL(FPS_AVRG_TRNSCTN_RT,0),2) VAL_AT_COST,
			 :c_trd_dt POS_DT,
			 NVL(FPS_BKD_PRFT_LSS,0) PROFIT_LOSS,
			 'LMT' PNL_PRD,
			 ROUND((NVL(FPS_QTY_HLD,0) * (decode(ltq_rt,0,LTQ_CLS_PRC,ltq_rt) )),2)- ROUND(NVL(FPS_QTY_HLD,0)*NVL(FPS_AVRG_TRNSCTN_RT,0),2) UNRLZD_PNL ,
			 'LMT' PNL_PRD,
			 0 per_rlzd_pnl,
			 0 per_unrlzd_pnl,
			 'INDGAP' gapp_typ,
			 'ICICI SECURITIES' BROKER_CD
		   FROM  FPS_FI_PRTFLO_SMRY,
			 FPD_FI_PRTFLO_DTLS,
			 FSM_FI_SECURITY_MSTR,
			 FCM_FI_CTGRY_MSTR,
       ltq_trd_qt,
       (select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee
             from   ITE_INSD_TRD_EMP_MSTR,FPS_FI_PRTFLO_SMRY
             WHERE  FPS_CLM_MTCH_ACCNT = nvl(ITE_MTCH_ACCNT,'NA')
              AND   ITE_AUTHRZTN_FLG='Y'
            UNION
             select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative
               FROM ITE_INSD_TRD_EMP_MSTR,FPS_FI_PRTFLO_SMRY
              WHERE FPS_CLM_MTCH_ACCNT= nvl(ITE_RELATIVE_MTCH,'NA')
                AND ITE_AUTHRZTN_FLG='Y'
       ) A
		   WHERE
		   FPS_CLM_MTCH_ACCNT  = A.match_id
		   AND     FPD_CLM_MTCH_ACCNT= FPS_CLM_MTCH_ACCNT
		   AND     FPD_USR_ID        = FPS_USR_ID
		   AND     FPD_SCRTY_CD      = FPS_SCRTY_CD
		   AND     FSM_STCK_CD       = FPS_SCRTY_CD
		   AND     FCM_CTGRY_NO      = FSM_CTGRY
       AND     ltq_stck_cd       = FSM_STCK_MAPCD
       AND     LTQ_XCHNG_CD='BSE'
		   AND     NVL(FPD_DELETE_FLG, 'N')  <> 'Y'
		 /*  GROUP BY FPS_CLM_MTCH_ACCNT,FCM_CTGRY,FPS_SCRTY_CD,FSM_STCK_MAPCD,FSM_STCK_NM,FPS_QTY_HLD,NVL(FPS_AVRG_TRNSCTN_RT,0),ROUND(NVL(FPS_QTY_HLD,0)*NVL(FPS_AVRG_TRNSCTN_RT,0),2),NVL(FPS_BKD_PRFT_LSS,0) **/
     );
     if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
     {
       fn_errlog(c_ServiceName,"S31240",SQLMSG,c_errmsg);
       fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
       return -1; 
     }

    EXEC SQL
      UPDATE EPR_EMP_PSTN_RPT
         SET epr_sec_id = (select SEM_MAP_VL from sem_stck_map where sem_stck_cd=epr_sec_id and SEM_ENTTY='6'),
             epr_isin_no= (select SEM_MAP_VL from sem_stck_map where SEM_ENTTY=10 and SEM_STCK_CD=epr_isin_no)
       where epr_rpt_dt = :c_trd_dt
         AND epr_prd_cd ='BOND';
    if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog(c_ServiceName,"S31245",SQLMSG,c_errmsg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
      return -1; 
    }

    /***** CDX Positions ****/
    EXEC SQL
    INSERT INTO EPR_EMP_PSTN_RPT(
			epr_corp_name ,
			epr_prd_cd ,
			epr_rpt_dt ,
			epr_mtch_accnt,
			epr_acc_typ,
			epr_sec_id,
			epr_sec_type, 
			epr_sec_id_typ ,
			epr_exg_mrkt_id,
			epr_sec_desc ,
			epr_trd_qty ,
			epr_sec_eod_prc ,
			epr_currncy_cd ,
			epr_trd_mrkt_val, 
			epr_pos_dt ,
			epr_expry_dt		
			)
			(
			 select
 		   Company_cd,
			 'CDX',	
       :c_trd_dt,
       cfp_clm_mtch_accnt,
  		 null acc_typ,
			 cfp_undrlyng sec_id,
			 null sec_typ,
			 null sec_id_typ,
			 cfp_xchng_cd,
			 cfp_undrlyng sec_desc,
			 cfp_opnpstn_qty OPN_QTY,
			 null eod_prc,
			 'INR'  currency,
			 cfp_opnpstn_val val,
			 :c_trd_dt pos_dt,
     	 to_char(cfp_expry_dt,'dd-Mon-yyyy')			 
		   FROM cfp_cdx_fut_pstn,
    	      ( select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee
    			    from   ITE_INSD_TRD_EMP_MSTR,cfp_cdx_fut_pstn
			        WHERE  cfp_clm_mtch_accnt = nvl(ITE_MTCH_ACCNT,'NA')
			        AND    ITE_AUTHRZTN_FLG='Y'
			       UNION
			        select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative
			        FROM   ITE_INSD_TRD_EMP_MSTR,cfp_cdx_fut_pstn
			        WHERE  cfp_clm_mtch_accnt = nvl(ITE_RELATIVE_MTCH,'NA')
			        AND    ITE_AUTHRZTN_FLG='Y'
            ) A
		     WHERE    cfp_clm_mtch_accnt=A.match_id
     );

     if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
     {
      fn_errlog(c_ServiceName,"S31250",SQLMSG,c_errmsg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
      return -1; 
     } 

    if ( fn_committran( c_ServiceName, i_trnsctn,c_errmsg ) == -1 )
    {
    fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
    fn_errlog ( c_ServiceName, "S31255", LIBMSG, c_errmsg );
    return -1; 
    }

   }
   else
   {
    fn_userlog (c_ServiceName,"Position data already downloaded ");
   }

    /********************************************************************************************
     ********************************************************************************************
     *******************************************************************************************/
    /***** Call the MF portfolio service to get reliazed and unrealized profit and percentage ***/
    l_rec_cnt = 0;   
    EXEC SQL
     SELECT COUNT(1)
	   INTO   :l_rec_cnt
     FROM
	    (
	     select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee
             from   ITE_INSD_TRD_EMP_MSTR,mf_prt_trans
             WHERE  MF_TRANS_MATCH_ACC = nvl(ITE_MTCH_ACCNT,'NA')
              AND   ITE_AUTHRZTN_FLG='Y'
							AND   MF_TRANS_DELETE_FLG <> 'Y'         /**** Ver 1.6 ****/
              AND   trim(ITE_CMPY_ID) ='GSC'
             UNION
       select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative
             FROM ITE_INSD_TRD_EMP_MSTR,mf_prt_trans
            WHERE MF_TRANS_MATCH_ACC = nvl(ITE_RELATIVE_MTCH,'NA')
              AND ITE_AUTHRZTN_FLG='Y'
							AND  MF_TRANS_DELETE_FLG <> 'Y'         /**** Ver 1.6 ****/
              AND   trim(ITE_CMPY_ID) ='GSC'
       );

    if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog(c_ServiceName,"S31260",SQLMSG,c_errmsg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
      return -1; 
    }

    if( l_rec_cnt > 0 )
    {
     ptr_mtch_lst=calloc(sizeof(st_match_lst ),l_rec_cnt);
     if (ptr_mtch_lst == NULL )
     {
      fn_errlog ( c_ServiceName, "S31265", SQLMSG, c_errmsg  );
      fn_userlog(c_ServiceName,"Unable to create NEW Emp list ");
      return -1; 
     }

     EXEC SQL
      DECLARE MTCH_LIST CURSOR FOR
      SELECT  match_id,emp_dpndnt_flg
      FROM
	    ( 
      select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' emp_dpndnt_flg 
             from   ITE_INSD_TRD_EMP_MSTR,mf_prt_trans
             WHERE  MF_TRANS_MATCH_ACC = nvl(ITE_MTCH_ACCNT,'NA')
              AND   ITE_AUTHRZTN_FLG='Y'
							AND  MF_TRANS_DELETE_FLG <> 'Y'         /**** Ver 1.6 ****/
             UNION
             select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' emp_dpndnt_flg
               FROM ITE_INSD_TRD_EMP_MSTR,mf_prt_trans
              WHERE MF_TRANS_MATCH_ACC = nvl(ITE_RELATIVE_MTCH,'NA')
               AND ITE_AUTHRZTN_FLG='Y'
							 AND  MF_TRANS_DELETE_FLG <> 'Y'         /**** Ver 1.6 ****/
      );
 
     EXEC SQL OPEN MTCH_LIST;
     if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
     {
      fn_errlog(c_ServiceName,"S31270",SQLMSG,c_errmsg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
      return -1; 
     }
   
     /*Load*/
     EXEC SQL
      FOR :l_rec_cnt
     FETCH MTCH_LIST 
     INTO :ptr_mtch_lst;

     if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
     {
       fn_errlog ( c_ServiceName, "S31275", SQLMSG, c_errmsg  );
       return -1; 
     }

     EXEC SQL CLOSE MTCH_LIST;
 

     ptr_fml_Sbuf  = (FBFR32 *)tpalloc("FML32", NULL, MIN_FML_BUF_LEN);
     if ( ptr_fml_Sbuf == NULL )
     {
       fn_errlog( c_ServiceName, "S31280", TPMSG, c_errmsg  );
       return -1;
     }

     ptr_fml_Rbuf  = (FBFR32 *)tpalloc("FML32", NULL, MIN_FML_BUF_LEN);
     if ( ptr_fml_Rbuf == NULL )
     {
      fn_errlog( c_ServiceName, "S31285", TPMSG, c_errmsg  );
      return -1;
     }
     
     
     strcpy(c_user_id,"system");
     li_session_id = 0;
     c_flag ='B';
     strcpy(c_agnt_cd,"*");
 
     for(l_inner_counter=0;l_inner_counter < l_rec_cnt ; l_inner_counter++)
     {
       strcpy(c_mtch_acnt_id,ptr_mtch_lst[l_inner_counter].mtch_id );
       c_emp_dpndnt_flg=ptr_mtch_lst[l_inner_counter].c_emp_dpndnt_flg;       
       d_rlzd_profit=0;
       d_un_rlzd_profit=0;
       d_un_rlzd_per=0;
       MEMSET(sql_mf_comp_name);
       MEMSET(c_sch_name);
       d_units=0;
       d_nav=0;
 
       i_err[0] = Fchg32( ptr_fml_Sbuf,FML_USR_ID, 0, (char *)c_user_id, 0);
       i_ferr[0] = Ferror32;
       i_err[1] =  Fchg32( ptr_fml_Sbuf, FML_SSSN_ID, 0, (char *)&li_session_id, 0 );
       i_ferr[1] = Ferror32;
       i_err[2] = Fchg32( ptr_fml_Sbuf, FML_MATCH_ACCNT, 0, (char *)c_mtch_acnt_id,0 );
       i_ferr[2] = Ferror32;
       i_err[3] = Fchg32( ptr_fml_Sbuf, FML_GIFT_STATUS, 0 , (char *)&c_flag, 0 );
       i_ferr[3] = Ferror32;
       i_err[4] = Fchg32( ptr_fml_Sbuf, FML_AGENT_CD,0, (char *)c_agnt_cd, 0 );
       i_ferr[4] = Ferror32;
       for( i_loop=0; i_loop<=4; i_loop++ )
       {
         if(i_err[i_loop] == -1)
         {
          fn_userlog(c_ServiceName,"Error [%d] in Fchange at [%d]", i_ferr[i_loop],i_loop );
          break;
         }
       }
       i_ret_val = tpcall ( "SVC_MF_PRT_DISP",
                            (char *)ptr_fml_Sbuf,
                             0,
                            (char **)&ptr_fml_Rbuf,
                            &li_recvbuf,
                            0
                          );
       if( i_ret_val != 0 )
       {
        fn_errlog( c_ServiceName, "S31290", TPMSG, c_errmsg  );
        return -1; 
       }


       i_reco_count = Foccur32(ptr_fml_Rbuf, FML_MF_SCH_DESC);
    
       fn_userlog(c_ServiceName," MF Positions :%d: for match :%s:",i_reco_count,c_mtch_acnt_id);
 
       for( i=0 ; i < i_reco_count ; i++) 
       {
        fn_userlog(c_ServiceName," i :%d:",i);

        d_rlzd_profit=0;
        d_un_rlzd_profit=0;
        d_un_rlzd_per=0;
        MEMSET(c_mf_comp_name);
        MEMSET(c_sch_name);
        d_units=0;
        d_nav=0;
 
       if(Fget32(ptr_fml_Rbuf,FML_COMP_NAME,i,(char*)c_mf_comp_name,0) == -1)
       { 
         fn_errlog( c_ServiceName, "S31295", FMLMSG, c_errmsg  );  
         return -1; 
       }

       if(Fget32(ptr_fml_Rbuf,FML_MF_SCH_DESC,i,(char*)c_sch_name,0) == -1)
       {
         fn_errlog( c_ServiceName, "S31300", FMLMSG, c_errmsg  );
         return -1; 
       }

       if(Fget32(ptr_fml_Rbuf,FML_CDM_CD_DSCRPTN,i,(char*)sql_mf_nav_amfi_cd.arr,0) == -1)
       {
         fn_errlog( c_ServiceName, "S31305", FMLMSG, c_errmsg  );
         return -1; 
       }

       if(Fget32(ptr_fml_Rbuf,FML_MF_TRANS_QTY,i,(char*)&d_units,0) == -1)
       {
         fn_errlog( c_ServiceName, "S31310", FMLMSG, c_errmsg  );
         return -1; 
       }

       if(Fget32(ptr_fml_Rbuf,FML_MF_NAV_NAV,i,(char*)&d_nav,0) == -1)
       {
         fn_errlog( c_ServiceName, "S31315", FMLMSG, c_errmsg  );
         return -1; 
       }

       if(Fget32(ptr_fml_Rbuf,FML_MF_NAV_DATE,i,(char*)c_trn_date,0) == -1)
       {
         fn_errlog( c_ServiceName, "S31320", FMLMSG, c_errmsg  );
         return -1; 
       }
       if(Fget32(ptr_fml_Rbuf,FML_MF_VAL_AT_MKT,i,(char*)&d_val_at_mkt,0) == -1)
       {
         fn_errlog( c_ServiceName, "S31325", FMLMSG, c_errmsg  );
         return -1; 
       }

       if(Fget32(ptr_fml_Rbuf,FML_MF_TRANS_AMT,i,(char*)&d_rlzd_profit,0) == -1)
       { 
         fn_errlog( c_ServiceName, "S31330", FMLMSG, c_errmsg  );  
         return -1; 
       }

       if(Fget32(ptr_fml_Rbuf,FML_MAT_AMT,i,(char*)&d_un_rlzd_profit,0) == -1)
       {
         fn_errlog( c_ServiceName, "S31335", FMLMSG, c_errmsg  );
         return -1; 
       }

       if(Fget32(ptr_fml_Rbuf,FML_MF_SCH_ENLD_PER,i,(char*)&d_un_rlzd_per,0) == -1)
       {
         fn_errlog( c_ServiceName, "S31340", FMLMSG, c_errmsg  );
         return -1; 
       }
 
       rtrim(c_sch_name);
       rtrim(c_mf_comp_name);
       rtrim(sql_mf_nav_amfi_cd.arr);
 
       i_trnsctn= fn_begintran( c_ServiceName, c_errmsg );

       if ( i_trnsctn == -1 )
       {
         fn_errlog ( c_ServiceName, "S31345", LIBMSG, c_errmsg );
         return -1; 
       }

       fn_userlog(c_ServiceName," c_sch_name :%s:",c_sch_name);
       fn_userlog(c_ServiceName," c_mf_comp_name :%s:",c_mf_comp_name);
       fn_userlog(c_ServiceName," sql_mf_nav_amfi_cd :%s:",sql_mf_nav_amfi_cd.arr);
       fn_userlog(c_ServiceName," d_units :%lf:",d_units);
       fn_userlog(c_ServiceName," d_nav :%lf:",d_nav);
       fn_userlog(c_ServiceName," d_val_at_mkt :%lf:",d_val_at_mkt);
       fn_userlog(c_ServiceName," d_rlzd_profit :%lf:",d_rlzd_profit);
       fn_userlog(c_ServiceName," d_un_rlzd_profit :%lf:",d_un_rlzd_profit);
       fn_userlog(c_ServiceName," d_un_rlzd_per :%lf:",d_un_rlzd_per);
       fn_userlog(c_ServiceName," c_mtch_acnt_id :%s:",c_mtch_acnt_id);
       

       EXEC SQL
       INSERT INTO EPR_EMP_PSTN_RPT(
       epr_corp_name ,
       epr_prd_cd ,
       epr_rpt_dt ,
       epr_mtch_accnt,
       epr_acc_typ,
       epr_sec_id,
       epr_sec_type,
       epr_sec_id_typ ,
       epr_isin_no,
       epr_sec_desc ,
       epr_trd_qty ,
       epr_sec_eod_prc ,
       epr_currncy_cd ,
       epr_trd_mrkt_val,
       epr_RLZD_PNL,
       epr_UNRLZD_PNL,
       epr_PER_RLZD_PNL,
       epr_pos_dt 
      )
      VALUES
      (
       'GSC',
       'MF',
       :c_trd_dt,
       :c_mtch_acnt_id,
       '1' ,
       :c_sch_name,
       '0' ,
       'ISN' ,
       :sql_mf_nav_amfi_cd,
       :c_mf_comp_name,
       :d_units,
       :d_nav,
       'INR' ,
       :d_val_at_mkt,
       :d_rlzd_profit,
       :d_un_rlzd_profit,
       :d_un_rlzd_per,
       :c_trn_date
      );

      if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
      {
       fn_errlog(c_ServiceName,"S31350",SQLMSG,c_errmsg);
       fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
       return -1;
      }       

      if ( fn_committran( c_ServiceName, i_trnsctn,c_errmsg ) == -1 )
      {
        fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
        fn_errlog ( c_ServiceName, "S31355", LIBMSG, c_errmsg );
        return -1; 
      }
     }
    }

    free(ptr_mtch_lst);

   }
   
   /*** CDX Positions *****/
   l_rec_cnt =0;
   EXEC SQL
     SELECT COUNT(1)
     INTO   :l_rec_cnt
     FROM
      (
       select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee,epr_EXPRY_DT,epr_SEC_ID
             from   ITE_INSD_TRD_EMP_MSTR,EPR_EMP_PSTN_RPT
             WHERE  epr_MTCH_ACCNT = nvl(ITE_MTCH_ACCNT,'NA')
              AND   ITE_AUTHRZTN_FLG='Y'
              AND   trim(ITE_CMPY_ID) ='GSC'
              AND   epr_PRD_CD ='CDX'
             UNION
       select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative,epr_EXPRY_DT,epr_SEC_ID
             FROM ITE_INSD_TRD_EMP_MSTR ,EPR_EMP_PSTN_RPT
            WHERE epr_MTCH_ACCNT = nvl(ITE_RELATIVE_MTCH,'NA')
              AND ITE_AUTHRZTN_FLG='Y'
              AND   trim(ITE_CMPY_ID) ='GSC'
              AND   epr_PRD_CD ='CDX'
       );

    if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog(c_ServiceName,"S31360",SQLMSG,c_errmsg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
      return -1; 
    }

    if( l_rec_cnt > 0 )
    {
     ptr_cdx_mtch_lst=calloc(sizeof(st_cdx_match_lst ),l_rec_cnt);
     if (ptr_cdx_mtch_lst == NULL )
     {
      fn_errlog ( c_ServiceName, "S31365", SQLMSG, c_errmsg  );
      fn_userlog(c_ServiceName,"Unable to create NEW Emp list ");
      return -1; 
     }

     EXEC SQL
      DECLARE CDX_MTCH_LIST CURSOR FOR
      SELECT  match_id,emp_dpndnt_flg, epr_EXPRY_DT,epr_SEC_ID, c_rowid
      FROM
      (
            select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,
                   trim(ITE_CMPY_ID) Company_cd, 
                   'N' emp_dpndnt_flg,
                   epr_EXPRY_DT,
                   epr_SEC_ID,
                   EPR_EMP_PSTN_RPT.rowid c_rowid 
             from   ITE_INSD_TRD_EMP_MSTR,EPR_EMP_PSTN_RPT
             WHERE  epr_MTCH_ACCNT = nvl(ITE_MTCH_ACCNT,'NA')
              AND   ITE_AUTHRZTN_FLG='Y'
              AND   trim(ITE_CMPY_ID) ='GSC'
              AND   epr_PRD_CD ='CDX'
             UNION
             select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,
                    trim(ITE_CMPY_ID) Company_cd, 
                    'Y' emp_dpndnt_flg,
                    epr_EXPRY_DT,
                    epr_SEC_ID,
                    EPR_EMP_PSTN_RPT.rowid c_rowid
               FROM ITE_INSD_TRD_EMP_MSTR,EPR_EMP_PSTN_RPT
              WHERE epr_MTCH_ACCNT = nvl(ITE_RELATIVE_MTCH,'NA')
               AND ITE_AUTHRZTN_FLG='Y'
               AND   trim(ITE_CMPY_ID) ='GSC'
               AND   epr_PRD_CD ='CDX'
      );
   

     EXEC SQL OPEN CDX_MTCH_LIST;
     if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
     {
      fn_errlog(c_ServiceName,"S31370",SQLMSG,c_errmsg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
      return -1; 
     }

     /*Load*/
     EXEC SQL
      FOR :l_rec_cnt
     FETCH CDX_MTCH_LIST
     INTO :ptr_cdx_mtch_lst;

     if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
     {
       fn_errlog ( c_ServiceName, "S31375", SQLMSG, c_errmsg  );
       return -1; 
     }

     EXEC SQL CLOSE CDX_MTCH_LIST;


     ptr_fml_Sbuf  = (FBFR32 *)tpalloc("FML32", NULL, MIN_FML_BUF_LEN);
     if ( ptr_fml_Sbuf == NULL )
     {
       fn_errlog( c_ServiceName, "S31380", TPMSG, c_errmsg  );
       return -1;
     }

     ptr_fml_Rbuf  = (FBFR32 *)tpalloc("FML32", NULL, MIN_FML_BUF_LEN);
     if ( ptr_fml_Rbuf == NULL )
     {
      fn_errlog( c_ServiceName, "S31385", TPMSG, c_errmsg  );
      return -1;
     }


     strcpy(c_user_id,"system");
     li_session_id = 0;
     c_prd_cd='F';
     strcpy(c_xchng_cd,"NDX");

     for(l_inner_counter=0;l_inner_counter < l_rec_cnt ; l_inner_counter++)
     {
       strcpy(c_mtch_acnt_id,ptr_cdx_mtch_lst[l_inner_counter].mtch_id );
       c_emp_dpndnt_flg=ptr_cdx_mtch_lst[l_inner_counter].c_emp_dpndnt_flg;
       strcpy(c_expry_dt,ptr_cdx_mtch_lst[l_inner_counter].c_expry_dt );
       strcpy(c_undrlyng,ptr_cdx_mtch_lst[l_inner_counter].c_undrlyng ); 
       strcpy(c_rowid , ptr_cdx_mtch_lst[l_inner_counter].c_rowid);
 
       d_rlzd_profit=0;
       d_un_rlzd_profit=0;
       d_un_rlzd_per=0;
       MEMSET(sql_mf_comp_name);
       MEMSET(c_sch_name);
       d_units=0;
       d_nav=0;

       rtrim(c_undrlyng);
       rtrim(c_expry_dt);

       fn_userlog(c_ServiceName," c_mtch_acnt_id :%s:",c_mtch_acnt_id);
       fn_userlog(c_ServiceName," c_expry_dt :%s:",c_expry_dt);
       fn_userlog(c_ServiceName," c_undrlyng :%s:",c_undrlyng);


       i_err[0] = Fchg32( ptr_fml_Sbuf,FFO_USR_ID, 0, (char *)c_user_id, 0);
       i_ferr[0] = Ferror32;
       i_err[1] =  Fchg32( ptr_fml_Sbuf, FFO_SSSN_ID, 0, (char *)&li_session_id, 0 );
       i_ferr[1] = Ferror32;
       i_err[2] = Fchg32( ptr_fml_Sbuf, FFO_XCHNG_CD, 0, (char *)c_xchng_cd,0 );
       i_ferr[2] = Ferror32;
       i_err[3] = Fchg32( ptr_fml_Sbuf, FFO_EBA_MTCH_ACT_NO, 0 , (char *)c_mtch_acnt_id, 0 );
       i_ferr[3] = Ferror32;
       i_err[4] = Fchg32( ptr_fml_Sbuf, FFO_PRDCT_TYP,0, (char *)&c_prd_cd, 0 );
       i_ferr[4] = Ferror32;
       i_err[4] = Fchg32( ptr_fml_Sbuf, FFO_UNDRLYNG,0, (char *)c_undrlyng, 0 );
       i_ferr[4] = Ferror32;
       i_err[4] = Fchg32( ptr_fml_Sbuf, FFO_FROM_DT,0, (char *)c_expry_dt, 0 );
       i_ferr[4] = Ferror32;
       i_err[4] = Fchg32( ptr_fml_Sbuf, FFO_TO_DT,0, (char *)c_expry_dt, 0 );
       i_ferr[4] = Ferror32;

       for( i_loop=0; i_loop<=4; i_loop++ )
       {
         if(i_err[i_loop] == -1)
         {
          fn_userlog(c_ServiceName,"Error [%d] in Fchange at [%d]", i_ferr[i_loop],i_loop );
          break;
         }
       }
       i_ret_val = tpcall ( "SCD_FUT_PRTFLO",
                            (char *)ptr_fml_Sbuf,
                             0,
                            (char **)&ptr_fml_Rbuf,
                            &li_recvbuf,
                            0
                          );
       if( i_ret_val != 0 )
       {
        fn_errlog( c_ServiceName, "S31390", TPMSG, c_errmsg  ); 
        return -1;
       }

       if(Fget32(ptr_fml_Rbuf,FFO_OPNPSTN_QTY,0,(char*)&l_opn_qty,0) == -1)
       {
         fn_errlog( c_ServiceName, "S31395", FMLMSG, c_errmsg  );
         return -1; 
       }

       if(Fget32(ptr_fml_Rbuf,FFO_OPNPSTN_VAL,0,(char*)&d_opnpos_val,0) == -1)
       {
         fn_errlog( c_ServiceName, "S31400", FMLMSG, c_errmsg  );
         return -1; 
       }

       if(Fget32(ptr_fml_Rbuf,FFO_EFF_LTP,0,(char*)&d_lst_trd_prc,0) == -1)
       {
         fn_errlog( c_ServiceName, "S31405", FMLMSG, c_errmsg  );
         return -1; 
       }

       if(Fget32(ptr_fml_Rbuf,FFO_RLZD_PL,0,(char*)&d_rlzd_prft,0) == -1)
       {
         fn_errlog( c_ServiceName, "S31410", FMLMSG, c_errmsg  );
         return -1; 
       }

       if(Fget32(ptr_fml_Rbuf,FFO_UNRLZD_PL,0,(char*)&d_unrlzd_prft,0) == -1)
       {
         fn_errlog( c_ServiceName, "S31415", FMLMSG, c_errmsg  );
         return -1; 
       }

       i_trnsctn= fn_begintran( c_ServiceName, c_errmsg );

       if ( i_trnsctn == -1 )
       {
         fn_errlog ( c_ServiceName, "S31420", LIBMSG, c_errmsg );
         return -1;
       }
       
       rtrim(c_rowid);

       fn_userlog(c_ServiceName," c_rowid :%s:",c_rowid);
       EXEC SQL
       UPDATE EPR_EMP_PSTN_RPT 
       SET    EPR_TRD_QTY = :l_opn_qty,
              EPR_TRD_MRKT_VAL =:d_opnpos_val,
              EPR_SEC_EOD_PRC =:d_lst_trd_prc,
              EPR_RLZD_PNL    =:d_rlzd_prft,
              EPR_UNRLZD_PNL  =:d_unrlzd_prft
       WHERE  rowid = :c_rowid; 
  
       if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
       {
        fn_errlog(c_ServiceName,"S31425",SQLMSG,c_errmsg);
        fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
        return -1; 
       }

       if ( fn_committran( c_ServiceName, i_trnsctn,c_errmsg ) == -1 )
       {
        fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
        fn_errlog ( c_ServiceName, "S31430", LIBMSG, c_errmsg );
        return -1; 
       }
      }
    }
    free(ptr_cdx_mtch_lst);
   } 
	 fn_userlog( c_ServiceName, "fo_sng_gsc_empdata() ended");

  return 0;
}


int fo_othr_cmpny_empdata(char *c_ServiceName,
                       char *c_errmsg,
                       char *c_trd_dt
                       )
{
   int  i_trnsctn;
   int  i;
   long l_rec_cnt=0;

	  char c_cmpy_id[5];
		char c_mtch_id[11];
		char c_emp_name[80];
		char c_pan_no[11];
		char c_dp_clntid[18];
		char c_rqst_dt[22];
		char c_appln_no[17];
		char c_trns_id[18];
		double d_aplid_qt1;
		double d_aplid_prc1;
		double d_aplid_qt2;
		double d_aplid_prc2;
		double d_aplid_qt3;
		double d_aplid_prc3;
    double d_aplid_qt4;
    double d_aplid_prc4;
    double d_aplid_qt5;
    double d_aplid_prc5;
    double d_aplid_qt6;
    double d_aplid_prc6;
    double d_aplid_qt7;
    double d_aplid_prc7;
    double d_aplid_qt8;
    double d_aplid_prc8;
    double d_aplid_qt9;
    double d_aplid_prc9;
    double d_aplid_qt10;
    double d_aplid_prc10;
    double d_aplid_qt11;
    double d_aplid_prc11;
    double d_aplid_qt12;
    double d_aplid_prc12;

		double d_val_1;
		double d_val_2;
		double d_val_3;
		double d_val_4;
		double d_val_5;
		double d_val_6;
		double d_val_7;
		double d_val_8;
		double d_val_9;
		double d_val_10;
		double d_val_11;
		double d_val_12;
    double d_apld_qty;
    double d_apld_prc;
    double d_val;
 
		char c_sem_val[20];
		char c_cmp_desc[100];
    char c_iss_typ;

   fn_userlog(c_ServiceName,"Data Download for Other Companies");

   l_rec_cnt = 0;

   EXEC SQL
     SELECT count(rowid)
       INTO :l_rec_cnt
       FROM ETR_EMP_TRANS_RPT
      WHERE ETR_RPT_DT = :c_trd_dt
       AND  ETR_PRD_CD = 'FNO'
       AND  ETR_CORP_NAME NOT IN ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC');	/** Ver 1.8 ***//** Ver2.0 SPG**//*V 2.1 MACQ*//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.7 BAIN **/ /** Ver 3.8 BLPC **//** Ver 3.9 SSBT **//** Ver 4.0 FIL **//** 4.3 fil mailer**//** ver 4.5 NSER and NSFS added **/ /** Ver 4.8 ARES and INV **/
																																/** Ver 2.3 GSC removed **/ /** ver 3.1 BNY added ***/ /** Ver 4.9 TVPL,FTI and NASD **/   /** ver 5.0 MMLI **/ /** ver 5.2 ARCE **//** Ver 5.1 AGMI added **/ /** Ver 5.5 MGCS added **/ /** ver 5.6 CEAL added **/ /** ver 5.7 TDBG added **/ /** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/ 
    
   if( SQLCODE != 0 )
   {
     fn_errlog(c_ServiceName,"S31435",SQLMSG,c_errmsg);
     return -1;
   }

   if( l_rec_cnt == 0 )
   {
     fn_userlog(c_ServiceName,"Populating the data : Product FNO for  date :%s:",c_trd_dt);
  
     i_trnsctn= fn_begintran( c_ServiceName, c_errmsg );
     if ( i_trnsctn == -1 )
     {
      fn_errlog ( c_ServiceName, "S31440", LIBMSG, c_errmsg );
      return -1;
     }
 
     EXEC SQL
      INSERT INTO ETR_EMP_TRANS_RPT 
         (
           ETR_CORP_NAME,
           ETR_PRD_CD,
           ETR_RPT_DT,
           ETR_MTCH_ACCNT, 
           ETR_EMP_NAME,
           ETR_PAN_NO,
           ETR_XCHNG_CD,
           ETR_TRD_DT,
           ETR_PRD_TYP,
           ETR_UNDRLYNG,
           ETR_ORDR_NO,
           ETR_TRD_EXEC_NO,
           ETR_STK_NM,
           ETR_TRD_FLW,
           ETR_TRD_QTY,
           ETR_SEC_TRD_PRC,
           ETR_TRD_VAL,
           ETR_OPT_EXPRY_DT,
           ETR_OPTION_CD,
           ETR_OPT_STRK_PRC,
           ETR_CNTRCT_NO           
         )
         (
          select 
            Company_cd,               
            'FNO',   
            :c_trd_dt,    
            FTD_CLM_MTCH_ACCNT ,
            C_EMP_NAME,
            C_PAN_NO,
		        decode(FTD_XCHNG_CD,'NFO','NSE','BSE') Exchange,
		        FTD_TRD_DT trade_Date,
		        DECODE(FTD_PRDCT_TYP,'P','F','I','O','U','F',FTD_PRDCT_TYP) Product_Type,
	       	  FTD_UNDRLYNG UNDRLYNG,
		        FTD_ORDR_RFRNC Order_Ref,
		        FTD_EBA_TRD_REF,               
            STK_STCK_NM Stock_Name,
		        FTD_TRD_FLW TRade_FLOW,
		        FTD_EXCTD_QTY EXEC_QTY,
		        FTD_EXCTD_RT / 100 EXEC_RT,
		        ((FTD_STRK_PRC+FTD_EXCTD_RT)*FTD_EXCTD_QTY) / 100 NET_VAL,		 
		        FTD_EXPRY_DT EXPRY_DT,
		        FTD_OPT_TYP OPT_TYP,
		        FTD_STRK_PRC STRK_PRC,
		        FTD_CNTRCTNT_NMBR CONTRCT_NO
           from ftd_fo_trd_dtls_hstry,
                fod_fo_ordr_dtls_hstry,
                STK_STK_MSTR,
                ( select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee,ITE_EMP_NAME C_EMP_NAME, ITE_PAN_NO C_PAN_NO
                  from   ITE_INSD_TRD_EMP_MSTR,ftd_fo_trd_dtls_hstry,IOM_INFO_ORGANIZATION_MSTR
                  WHERE  FTD_CLM_MTCH_ACCNT = nvl(ITE_MTCH_ACCNT,'NA')
                   AND   ITE_AUTHRZTN_FLG='Y'
                   AND   rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')		/** Ver 1.8 **/ /** ver 2.0 SPG**/ /** ver 3.1 BNY **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0 FIL  *//** ver 4.3 fil mailer **//** ver 4.5 NSER and NSFS added **/  /** Ver 4.8 Ares and INV **/ /** Ver 4.9 TVPL,FTI,NASD     **/  /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** ver 5.1 AGMI added **//** Ver 5.5 MGCS added ** //** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/
                   AND   rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
                   AND   IOM_CORPRT_EMAIL_IDES IS NOT NULL
                   and   trunc(ftd_trd_dt) = :c_trd_dt
                 UNION
                  select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative,ITE_DEPENDENT_EMP_NAME C_EMP_NAME, ITE_DEPENDENT_PAN_NO C_PAN_NO
                  FROM   ITE_INSD_TRD_EMP_MSTR,ftd_fo_trd_dtls_hstry,IOM_INFO_ORGANIZATION_MSTR
                 WHERE   FTD_CLM_MTCH_ACCNT = nvl(ITE_RELATIVE_MTCH,'NA')
                   AND   ITE_AUTHRZTN_FLG='Y'
                   AND   rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')		 /** Ver 1.8 ***/ /** ver 2.0 **/  /** ver 3.1 BNY **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **/ /** Ver 4.0 FIL **//** ver 4.3 fil mailer**//** ver 4.5 NSER and NSFS added **/  /** Ver 4.8 Ares and INV **/ /** Ver 4.9 TVPL,FTI,NASD **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** ver 5.1 AGMI added **/ /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/   
                   AND   rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
                   AND   IOM_CORPRT_EMAIL_IDES IS NOT NULL
                  and   trunc(ftd_trd_dt) = :c_trd_dt
                ) A 
           where ftd_ordr_rfrnc =  fod_ordr_rfrnc
             and ftd_clm_mtch_accnt = fod_clm_mtch_accnt
             and fod_clm_mtch_accnt	= A.match_id
             and trunc(ftd_trd_dt) =  fod_trd_dt
             and stk_stck_cd = ftd_undrlyng
             and trunc(ftd_trd_dt) = :c_trd_dt
             and ftd_ordr_rfrnc NOT IN ( SELECT DISTINCT FCO_ORDR_RFRNC FROM FCO_FO_CORP_ORDERS)
		/** ver 1.9 addition starts **/
				union
					select
					Company_cd,
					'FNO',
					:c_trd_dt,
					CCD_USR_MTCH_ACCNO ,
					C_EMP_NAME,
					C_PAN_NO,
					decode(CCM_EXCNG_CD,'NFO','NSE','BSE') Exchange,
					CCD_CLSOUT_DT trade_Date,
					CCD_CLSOUT_TYP Product_Type,
					SEM_STCK_CD UNDRLYNG,
					decode(CCD_ORDR_FLW,'B','Sell Closeout','S','Buy Closeout')  Order_Ref,
					'Exchange Initiated',
					CCD_CNTRCT_SYMBL Stock_Name,
					CCD_ORDR_FLW TRade_FLOW,
					CCD_QTY*CCD_MRKT_LOT EXEC_QTY,
					CCD_PRC  EXEC_RT,
					((CCD_STRK_PRC+CCD_PRC)*(CCD_QTY*CCD_MRKT_LOT)) NET_VAL,
					CCD_EXPR_DT EXPRY_DT,
					substr(CCD_CNTRCT_OPTN_TYP,0,1) OPT_TYP,
					CCD_STRK_PRC*100 STRK_PRC,
					CCM_CLSOUTNOTE_NMBR CONTRCT_NO
					from CCM_CNTRCT_CLSOUT_MSTR,CCD_CNTRCT_CLSOUT_DTLS,SEM_STCK_MAP,
					( select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,
          				trim(ITE_CMPY_ID) Company_cd,
          				'N' Employee,
          				ITE_EMP_NAME C_EMP_NAME,
          				ITE_PAN_NO C_PAN_NO
  					from   ITE_INSD_TRD_EMP_MSTR,CCM_CNTRCT_CLSOUT_MSTR,IOM_INFO_ORGANIZATION_MSTR
  					WHERE  CCM_USR_MTCH_ACCNO = nvl(ITE_MTCH_ACCNT,'NA')
   					AND   ITE_AUTHRZTN_FLG='Y'
   					AND   rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')					/** ver 2.0**/  /** ver 3.1 BNY **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **/ /** Ver 4.0 FIL **//** ver 4.3 fil mailer **/ /** Ver 4.5 NSER and NSFS added **/  /** Ver 4.8 Ares and INV **//** Ver 4.9 TVPL,FTI,NASD **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** Ver 5.1 AGMI added **/ /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC Added **/ 
   					AND   rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
   					AND   IOM_CORPRT_EMAIL_IDES IS NOT NULL
   					AND   trunc(CCM_STTLMNT_DT) = :c_trd_dt
 					UNION
  				select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,
        				 trim(ITE_CMPY_ID) Company_cd,
        					'Y' Relative,
        					ITE_DEPENDENT_EMP_NAME C_EMP_NAME,
        					ITE_DEPENDENT_PAN_NO C_PAN_NO
  				FROM   ITE_INSD_TRD_EMP_MSTR,CCM_CNTRCT_CLSOUT_MSTR,IOM_INFO_ORGANIZATION_MSTR
 					WHERE   CCM_USR_MTCH_ACCNO = nvl(ITE_RELATIVE_MTCH,'NA')
   				AND   ITE_AUTHRZTN_FLG='Y'
   				AND   rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC') 		/** ver 2.0 **/  /** ver 3.1 BNY **/ /** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0 FIL **//** ver 4.3 fil mailer **//** Ver 4.5 NSER and NSFS added  **/   /**  ver 4.8 Ares and INV **/   /** Ver 4.9 TVPL,FTI,NASD **/ /** Ver 5.0 MMLI **/ /** vER 5.2 ARCE **/ /** ver 5.1 AGMI added **//** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/  
   				AND   rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
   				AND   IOM_CORPRT_EMAIL_IDES IS NOT NULL
  				and   trunc(CCM_STTLMNT_DT) =:c_trd_dt
				) A
				where CCM_CLSOUTNOTE_NMBR =  CCD_CLSOUTNOTE_NMBR
				and CCM_USR_MTCH_ACCNO = CCD_USR_MTCH_ACCNO
				and CCM_USR_MTCH_ACCNO = A.match_id
				and substr(CCD_CNTRCT_CODE,0,instr(CCD_CNTRCT_CODE,'-')-1 )=SEM_MAP_VL
				and SEM_ENTTY=3
				and trunc(CCD_CLSOUT_DT) =  trunc(CCM_CLSOUT_DT)
				and trunc(CCM_STTLMNT_DT) = :c_trd_dt
				union
				select
          Company_cd,
          'FNO',
          :c_trd_dt,
          FCO_CLM_MTCH_ACCNT ,
          C_EMP_NAME,
          C_PAN_NO,
          decode(FCO_XCHNG_CD,'NFO','NSE','BSE') Exchange,
          FCO_CLS_TM trade_Date,
          FCO_PRDCT_TYP Product_Type,
          FCO_UNDRLYNG UNDRLYNG,
          /*'Exchange Closeout' Order_Ref, */
					decode(FCO_ORDR_FLW,'S','Sell Closeout','B','Buy Closeout')  Order_Ref,
          'Exchange Initiated',
          STK_STCK_NM Stock_Name,
          decode(FCO_ORDR_FLW,'B','S','S','B') TRade_FLOW,
          abs(FCO_CLS_QTY) EXEC_QTY,
          FCO_CLS_RT  EXEC_RT,
          (FCO_CLS_RT*abs(FCO_CLS_QTY)) NET_VAL,
          FCO_EXPRY_DT EXPRY_DT,
          FCO_OPT_TYP OPT_TYP,
          FCO_STRK_PRC STRK_PRC,
          'Exchange Closeout'  CONTRCT_NO
					from FCO_FO_FCLSOUT,STK_STK_MSTR,
                    ( select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee,ITE_EMP_NAME C_EMP_NAME,ITE_PAN_NO C_PAN_NO
                  from   ITE_INSD_TRD_EMP_MSTR,FCO_FO_FCLSOUT,IOM_INFO_ORGANIZATION_MSTR
                  WHERE  FCO_CLM_MTCH_ACCNT = nvl(ITE_MTCH_ACCNT,'NA')
                   AND   ITE_AUTHRZTN_FLG='Y'
                   AND   rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')  /** ver 3.1 BNY **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0   FIL **//** ver 4.3 fil mailer **//** Ver 4.5 NSER and NSFS added **/    /** Ver 4.8 Ares and INV **/ /** Ver 4.9 TVPL,FTI,NASD **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE ***/ /** ver 5.1 AGMI added **/ /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/
                   AND   rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
                   AND   IOM_CORPRT_EMAIL_IDES IS NOT NULL
                   and   trunc(FCO_CLS_TM) = :c_trd_dt
                 UNION
                  select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative,ITE_DEPENDENT_EMP_NAME C_EMP_NAME, ITE_DEPENDENT_PAN_NO C_PAN_NO
                  FROM   ITE_INSD_TRD_EMP_MSTR,FCO_FO_FCLSOUT,IOM_INFO_ORGANIZATION_MSTR
                 WHERE   FCO_CLM_MTCH_ACCNT = nvl(ITE_RELATIVE_MTCH,'NA')
                   AND   ITE_AUTHRZTN_FLG='Y'
                  AND   rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')  /** ver 3.1 BNY **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/  /** Ver 3.9 **/ /** Ver 4.0  FIL **//** ver 4.3 fil mailer **//** Ver 4.5 NSER and NSFS added **/   /** Ver 4.8 Ares and INV **/ /** Ver 4.9 TVPL,FTI,NASD **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** ver 5.1 AGMI **/ /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/
                   AND   rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
                   AND   IOM_CORPRT_EMAIL_IDES IS NOT NULL
                  and   trunc(FCO_CLS_TM) = :c_trd_dt
                ) A
   			where FCO_CLM_MTCH_ACCNT =  A.match_id
   			and trunc(FCO_CLS_TM) = :c_trd_dt
   			and FCO_PRDCT_TYP='O'
   			and STK_STCK_CD = FCO_UNDRLYNG
   				union
   			select
          Company_cd,
          'FNO',
          :c_trd_dt,
          FCO_CLM_MTCH_ACCNT ,
          C_EMP_NAME,
          C_PAN_NO,
          decode(FCO_XCHNG_CD,'NFO','NSE','BSE') Exchange,
          FCO_CLS_TM trade_Date,
          FCO_PRDCT_TYP Product_Type,
          FCO_UNDRLYNG UNDRLYNG,
          /*'Exchange Closeout' Order_Ref, **/ /** remove **/
					decode(FCO_ORDR_FLW,'S','Sell Closeout','B','Buy Closeout')  Order_Ref,
          'Exchange Initiated',
          STK_STCK_NM Stock_Name,
          decode(FCO_ORDR_FLW,'B','S','S','B') TRade_FLOW,
          abs(FCO_CLS_QTY) EXEC_QTY,
          FCO_CLS_RT  EXEC_RT,
          (FCO_CLS_RT*abs(FCO_CLS_QTY)) NET_VAL,
          FCO_EXPRY_DT EXPRY_DT,
          FCO_OPT_TYP OPT_TYP,
          FCO_STRK_PRC STRK_PRC,
          'Exchange Closeout'  CONTRCT_NO
				from FCO_FO_FCLSOUT_HSTRY,STK_STK_MSTR,
                    ( select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee,ITE_EMP_NAME C_EMP_NAME,ITE_PAN_NO C_PAN_NO
                  from   ITE_INSD_TRD_EMP_MSTR,FCO_FO_FCLSOUT_HSTRY,IOM_INFO_ORGANIZATION_MSTR /* ver 2.1 FCO HSTRY used*/
                  WHERE  FCO_CLM_MTCH_ACCNT = nvl(ITE_MTCH_ACCNT,'NA')
                   AND   ITE_AUTHRZTN_FLG='Y'
                   AND   rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')   /** ver 3.1 BNY **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **/ /** Ver 4.0  FIL **//** ver 4.3 Fil mailer **//** Ver 4.5 NSER and NSFS added **/   /** Ver 4.8 Ares and INV **/ /** Ver 4.9 TVPL,FTI,NASD **/ /** Ver 5.0 MMLI **/ /** vER 5.2 ARCE **/ /** ver 5.1 AGMI **/ /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/
                   AND   rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
                   AND   IOM_CORPRT_EMAIL_IDES IS NOT NULL
                   and   trunc(FCO_CLS_TM) =  :c_trd_dt
                 UNION
                  select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative,ITE_DEPENDENT_EMP_NAME C_EMP_NAME, ITE_DEPENDENT_PAN_NO C_PAN_NO
                  FROM   ITE_INSD_TRD_EMP_MSTR,FCO_FO_FCLSOUT_HSTRY,IOM_INFO_ORGANIZATION_MSTR	/* ver 2.1 FCO HSTRY used*/
                 WHERE   FCO_CLM_MTCH_ACCNT = nvl(ITE_RELATIVE_MTCH,'NA')
                   AND   ITE_AUTHRZTN_FLG='Y'
                   AND   rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')  /** ver 3.1 BNY **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **/ /** Ver 4.0   FIL **//** ver 4.3 Fil mailer **//** Ver 4.5 NSER and NSFS added **/   /** Ver 4.8 Ares and INV **/ /** Ver 4.9 TVPL,FTI,NASD **/ /** Ver 5.0 MMLI **//** Ver 5.2 ARCE **//** Ver 5.1 AGMI **/ /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC  added **/
                   AND   rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
                   AND   IOM_CORPRT_EMAIL_IDES IS NOT NULL
                  and   trunc(FCO_CLS_TM) = :c_trd_dt
                ) A
   			where FCO_CLM_MTCH_ACCNT =  A.match_id
   			and trunc(FCO_CLS_TM) = :c_trd_dt
   			and FCO_PRDCT_TYP='O'
   			and STK_STCK_CD = FCO_UNDRLYNG
				union
				select
							Company_cd,
							'FNO',
							:c_trd_dt,
							ECM_USR_MTCH_ACCNO ,
							C_EMP_NAME,
							C_PAN_NO,
							ECM_EXCNG_CD Exchange,
							ECD_EA_DT trade_Date,
							'O' Product_Type,						/** Hard coded O as Both E and A are for Options */
							SEM_STCK_CD UNDRLYNG,
							decode(ECD_EA_FLG,'E','Exchange Exercise','A','Exchange Assigned') Order_Ref,
							'Exchange Initiated',
							ECD_CNTRCT_SYMBL Stock_Name,
							decode(ECD_EA_FLG,'E','S','A','B') TRade_FLOW,
							ECD_QTY EXEC_QTY,
							ECD_SETLMNT_PRC  EXEC_RT,
							((ECD_STRK_PRC+ECD_SETLMNT_PRC)*ECD_QTY) NET_VAL,
							ECD_EXPR_DT EXPRY_DT,
							substr(ECD_CNTRCT_OPTN_TYP,0,1) OPT_TYP,
							ECD_STRK_PRC*100 STRK_PRC,
							ECM_CNTRCT_NMBR CONTRCT_NO
					from EA_CONF_MSTR,EA_CONF_DTLS,SEM_STCK_MAP,
				( select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,
          				trim(ITE_CMPY_ID) Company_cd,
          				'N' Employee,
          				ITE_EMP_NAME C_EMP_NAME,
          				ITE_PAN_NO C_PAN_NO
  				from   ITE_INSD_TRD_EMP_MSTR,EA_CONF_MSTR,IOM_INFO_ORGANIZATION_MSTR
  				WHERE  ECM_USR_MTCH_ACCNO = nvl(ITE_MTCH_ACCNT,'NA')
   				AND   ITE_AUTHRZTN_FLG='Y'

   				AND   rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
   				AND   IOM_CORPRT_EMAIL_IDES IS NOT NULL
   				and   trunc(ECM_CNTRCT_DT) = :c_trd_dt
 					UNION
  				select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,
        					trim(ITE_CMPY_ID) Company_cd,
        					'Y' Relative,
        					ITE_DEPENDENT_EMP_NAME C_EMP_NAME,
        					ITE_DEPENDENT_PAN_NO C_PAN_NO
  				FROM   ITE_INSD_TRD_EMP_MSTR,EA_CONF_MSTR,IOM_INFO_ORGANIZATION_MSTR
 					WHERE   ECM_USR_MTCH_ACCNO = nvl(ITE_RELATIVE_MTCH,'NA')
   				AND   ITE_AUTHRZTN_FLG='Y'
   				AND   rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')  /** Ver 2.0 **/ /** ver 3.1 BNY **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/  /** Ver 3.9 SSBT **/  /** Ver 4.0   FIL **//** ver 4.3 fil mailer **//** Ver 4.5 NSER and NSFS added **/   /** Ver 4.8 Ares and INV **/ /** Ver 4.9 TVPL,FTI,NASD **/ /** Ver 5.0 MMLI **/ /** vER 5.2 ARCE **/ /** Ver 5.1 AGMI **/ /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/ 
   				AND   rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
   				AND   IOM_CORPRT_EMAIL_IDES IS NOT NULL
  				and   trunc(ECM_CNTRCT_DT) = :c_trd_dt
				) A
				where ECM_CNTRCT_NMBR =  ECD_CNTRCT_NMBR
				and ECM_USR_MTCH_ACCNO = ECD_USR_MTCH_ACCNO
				and ECM_USR_MTCH_ACCNO = A.match_id
				and rtrim(ECD_CNTRCT_SYMBL)=SEM_MAP_VL
				and SEM_ENTTY=3
				and trunc(ECD_EA_DT) =  trunc(ECM_CNTRCT_DT)
				and trunc(ECD_EA_DT) = :c_trd_dt
				/** ver 1.9 addition Ends **/
      );      
     if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
     {
       fn_errlog(c_ServiceName,"S31445",SQLMSG,c_errmsg);
       fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
       return -1;
     }     

     fn_userlog (c_ServiceName,"Record inserted in FNO : <%ld>", SQLROWCOUNT);
 
     EXEC SQL
		  UPDATE ETR_EMP_TRANS_RPT
		  SET ETR_POS_STTS = ( 
              SELECT FFP_OPNPSTN_FLW
              FROM  FFP_FO_FUTURES_PSTN,clm_clnt_mstr  /** Ver 1.1 , clm_clnt_mstr added **/
              WHERE ETR_MTCH_ACCNT = FFP_CLM_MTCH_ACCNT
              AND ETR_MTCH_ACCNT = CLM_MTCH_ACCNT      /** Ver 1.1 **/
              AND ETR_PRD_CD ='FNO'
              AND ETR_UNDRLYNG = FFP_UNDRLYNG
              AND ETR_PRD_TYP = FFP_PRDCT_TYP
              AND DECODE(ETR_XCHNG_CD,'NSE','NFO','BSE','BFO') = FFP_XCHNG_CD
              AND ETR_OPT_EXPRY_DT = FFP_EXPRY_DT
              AND NVL(CLM_SPAN_ALLWD,'N')='N'                   /** Ver 1.1 **/
              AND ETR_RPT_DT = :c_trd_dt
          UNION ALL
              SELECT FOP_OPNPSTN_FLW 
					    FROM  FOP_FO_OPTIONS_PSTN,clm_clnt_mstr   /** Ver 1.1 , clm_clnt_mstr added **/
					    WHERE ETR_MTCH_ACCNT = FOP_CLM_MTCH_ACCNT
              AND ETR_MTCH_ACCNT = CLM_MTCH_ACCNT       /** Ver 1.1 **/ 
					    AND ETR_PRD_CD ='FNO'
					    AND ETR_UNDRLYNG = FOP_UNDRLYNG
					    AND ETR_PRD_TYP = FOP_PRDCT_TYP
					    AND DECODE(ETR_XCHNG_CD,'NSE','NFO','BSE','BFO') = FOP_XCHNG_CD
					    AND ETR_OPT_EXPRY_DT = FOP_EXPRY_DT
					    AND ETR_OPT_STRK_PRC = FOP_STRK_PRC
					    AND ETR_OPTION_CD  = FOP_OPT_TYP
              AND NVL(CLM_SPAN_ALLWD,'N') ='N'                /** Ver 1.1 **/
              AND ETR_RPT_DT = :c_trd_dt
           UNION ALL
              SELECT  FCP_OPNPSTN_FLW
              FROM  FCP_FO_SPN_CNTRCT_PSTN,clm_clnt_mstr  /** Ver 1.1 , clm_clnt_mstr added **/
              WHERE ETR_MTCH_ACCNT = FCP_CLM_MTCH_ACCNT
              AND ETR_MTCH_ACCNT = CLM_MTCH_ACCNT         /** Ver 1.1 **/
              AND ETR_PRD_CD ='FNO'
              AND ETR_UNDRLYNG = FCP_UNDRLYNG
              AND ETR_PRD_TYP = FCP_PRDCT_TYP
              AND DECODE(ETR_XCHNG_CD,'NSE','NFO','BSE','BFO') = FCP_XCHNG_CD
              AND ETR_OPT_EXPRY_DT = FCP_EXPRY_DT
              AND ETR_OPT_STRK_PRC = FCP_STRK_PRC
              AND ETR_OPTION_CD  = FCP_OPT_TYP
              AND NVL(CLM_SPAN_ALLWD,'N') ='Y'                      /** Ver 1.1 **/
              AND ETR_RPT_DT = :c_trd_dt
				      )
      WHERE ETR_PRD_CD ='FNO'
        AND ETR_RPT_DT = :c_trd_dt;
     if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
     {
       fn_errlog(c_ServiceName,"S31450",SQLMSG,c_errmsg);
       fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
       return -1;
     }

     EXEC SQL
       UPDATE ETR_EMP_TRANS_RPT 
          SET ETR_DP_CLNT_ID = ( select rtrim(CLD_DP_ID)||'-'||rtrim(CLD_DP_CLNT_ID) from CLD_DP_ACCTS where CLD_DP_ACC_TYP='E' and CLD_CLM_MTCH_ACCNT=ETR_MTCH_ACCNT and rownum < 2)
         WHERE ETR_RPT_DT = :c_trd_dt
           AND ETR_PRD_CD ='FNO';
     if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
     {
       fn_errlog(c_ServiceName,"S31455",SQLMSG,c_errmsg);
       fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
       return -1;
     }

     fn_userlog (c_ServiceName,"Position Status Records Updated  : <%ld>", SQLROWCOUNT);

     if ( fn_committran( c_ServiceName, i_trnsctn,c_errmsg ) == -1 )
     {
       fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
       fn_errlog ( c_ServiceName, "S31460", LIBMSG, c_errmsg );
       return -1;
     }

  }
  else
  {
    fn_userlog(c_ServiceName,"Data is already populated : Product FNO for  date :%s:",c_trd_dt);
  }
		/** ver 1.9 starts **/
   l_rec_cnt=0;
   EXEC SQL
     SELECT count(rowid)
       INTO :l_rec_cnt
       FROM ETR_EMP_TRANS_RPT
      WHERE ETR_RPT_DT = :c_trd_dt
       AND  ETR_PRD_CD = 'CDX'
      AND  ETR_CORP_NAME NOT IN ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC') ;						/** Ver 2.0 SPG **/  /** ver 3.1 BNY **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0  FIL **//** ver 4.3 fil mailer **//** Ver 4.5 NSER and NSFS  added **//** Ver 4.8 Ares and INV **/  /** Ver 4.9 TVPL,FTI,NAS  **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** Ver 5.1 AGMI **/  /** Ver 5.5  MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/
    
   if( SQLCODE != 0 )
   {
     fn_errlog(c_ServiceName,"S31465",SQLMSG,c_errmsg);
     return -1;
   }

   if( l_rec_cnt == 0 )
   {
     fn_userlog(c_ServiceName,"Populating the data of Product CDX for  date :%s:",c_trd_dt);
  
     i_trnsctn= fn_begintran( c_ServiceName, c_errmsg );
     if ( i_trnsctn == -1 )
     {
      fn_errlog ( c_ServiceName, "S31470", LIBMSG, c_errmsg );
      return -1;
     }
 
     EXEC SQL
      INSERT INTO ETR_EMP_TRANS_RPT 
         (
           ETR_CORP_NAME,
           ETR_PRD_CD,
           ETR_RPT_DT,
           ETR_MTCH_ACCNT, 
           ETR_EMP_NAME,
           ETR_PAN_NO,
           ETR_XCHNG_CD,
           ETR_TRD_DT,
           ETR_PRD_TYP,
           ETR_UNDRLYNG,
           ETR_ORDR_NO,
           ETR_TRD_EXEC_NO,
           ETR_STK_NM,
           ETR_TRD_FLW,
           ETR_TRD_QTY,
           ETR_SEC_TRD_PRC,
           ETR_TRD_VAL,
           ETR_OPT_EXPRY_DT,
           ETR_OPTION_CD,
           ETR_OPT_STRK_PRC,
           ETR_CNTRCT_NO           
         )
         (
					select
						Company_cd,
						'CDX',
						:c_trd_dt,
						CTD_CLM_MTCH_ACCNT,
						C_EMP_NAME,
						C_PAN_NO,
						decode(CTD_XCHNG_CD,'NDX','NSE','BDX','BSE') Exchange,
						CTD_TRD_DT trade_Date,
						CTD_PRDCT_TYP Product_Type,
						CTD_UNDRLYNG UNDRLYNG,
						CTD_ORDR_RFRNC Order_Ref,
						CTD_EBA_TRD_REF,
						CTD_UNDRLYNG Stock_Name,
						CTD_TRD_FLW TRade_FLOW,
						CTD_EXCTD_QTY*CCM_MULTPLR  EXEC_QTY,
						CTD_EXCTD_RT EXEC_RT,
						(CTD_EXCTD_RT * CTD_EXCTD_QTY * CCM_MULTPLR) NET_VAL,
						CTD_EXPRY_DT EXPRY_DT,
						CTD_OPT_TYP OPT_TYP,
						CTD_STRK_PRC/100000 STRK_PRC,
						CTD_CNTRCT_NMBR CONTRCT_NO
					from
						CTD_CDX_TRD_DTLS,CCM_CDX_CNTRCT_MSTR,
						( select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee,ITE_EMP_NAME C_EMP_NAME, ITE_PAN_NO C_PAN_NO
		  				from   ITE_INSD_TRD_EMP_MSTR,CTD_CDX_TRD_DTLS,IOM_INFO_ORGANIZATION_MSTR
		  				WHERE  CTD_CLM_MTCH_ACCNT = nvl(ITE_MTCH_ACCNT,'NA')
		   				AND   ITE_AUTHRZTN_FLG='Y'
		   				AND   rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC') /** Ver 2.0 **/  /** ver 3.1 BNY **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0   FIL **//** ver 4.3 fil mailer ***//** Ver 4.5 NSER and NSFS added **/  /** Ver 4.8 Ares and INV **/ /** Ver 4.9 TVPL,FTI,NASD **/ /** ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** Ver 5.1 AGMI **/ /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **//** ver 5.9 MLIC added **/
		   				AND   rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
		   				AND   IOM_CORPRT_EMAIL_IDES IS NOT NULL
		   				and   trunc(ctd_trd_dt) =:c_trd_dt 
		 				UNION
		  			select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative,ITE_DEPENDENT_EMP_NAME C_EMP_NAME, ITE_DEPENDENT_PAN_NO C_PAN_NO
		  			FROM   ITE_INSD_TRD_EMP_MSTR,CTD_CDX_TRD_DTLS,IOM_INFO_ORGANIZATION_MSTR
		 				WHERE   CTD_CLM_MTCH_ACCNT = nvl(ITE_RELATIVE_MTCH,'NA')
		   			AND   ITE_AUTHRZTN_FLG='Y'
		   			AND   rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC') /** Ver 2.0 **/  /** ver 3.1 BNY **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0 FIL **//** ver 4.3 **//** Ver 4.5 NSER and NSFS added **/   /** Ver 4.8 Ares and INV **/ /** Ver 4.9 TVPL,FTI,NAS  **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** ver 5.1 AGMI **/ /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9  MLIC added **/ 

		   			AND   rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
		   			AND   IOM_CORPRT_EMAIL_IDES IS NOT NULL
		  			and   trunc(ctd_trd_dt) = :c_trd_dt
					 ) A
					 where ccm_xchng_cd = ctd_xchng_cd
					 and   ccm_undrlyng = ctd_undrlyng
					 and   ccm_prdct_typ = ctd_prdct_typ
					 and   ccm_expry_dt  = ctd_expry_dt
					 and   ccm_exer_typ  = ctd_exer_typ
					 and   ccm_opt_typ   = ctd_opt_typ
					 and   ccm_strk_prc  = ctd_strk_prc
					 and   CCM_MULTPLR is not null 
					 and ctd_clm_mtch_accnt = A.match_id
					 and trunc(ctd_trd_dt) = :c_trd_dt
				 UNION ALL
					select
						Company_cd,
						'CDX',
						:c_trd_dt,
					  CCD_CLM_MTCH_ACCNO,
						C_EMP_NAME,
						C_PAN_NO,
						decode(CCM_EXCNG_CD,'NDX','NSE','BSE') Exchange,
						CCD_TRD_DT trade_Date,
						decode(nvl(CCD_OPT_TYP,'*'),'*','F','O') Product_Type,
						CCD_SYMBOL UNDRLYNG,
						/*'Exchange Closeout' Order_Ref,**/      /** remove**/
						decode(CCD_TRD_FLW,'B','Sell Closeout','S','Buy Closeout') Order_Ref,
						'Exchange Initiated' TRD_REF,
						CCD_SYMBOL Stock_Name,
						CCD_TRD_FLW TRade_FLOW,
						CCD_EXCTD_QTY EXEC_QTY,
						CCD_EXCTD_RT  EXEC_RT,
						(CCD_EXCTD_RT*CCD_EXCTD_QTY) NET_VAL,
						CCD_EXPRY_DT EXPRY_DT,
						substr(CCD_OPT_TYP,1,1) OPT_TYP,
						CCD_STRK_PRC/100000 STRK_PRC,
						CCM_CNTRCT_NMBR CONTRCT_NO
					FROM  CCM_CDX_CNTRCTNT_MSTR,CCD_CDX_CNTRCTNT_DTLS,
	    			(SELECT     
							distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,
		  				trim(ITE_CMPY_ID) Company_cd,
		  				'N' Employee,
		  				ITE_EMP_NAME C_EMP_NAME,
		  				ITE_PAN_NO C_PAN_NO
							FROM       ITE_INSD_TRD_EMP_MSTR,CCM_CDX_CNTRCTNT_MSTR,IOM_INFO_ORGANIZATION_MSTR
							WHERE      CCM_CLM_MTCH_ACCNO = nvl(ITE_MTCH_ACCNT,'NA')
							AND       ITE_AUTHRZTN_FLG='Y'
							AND       rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC' )  /** Ver 2.0 **/  /** ver 3.1 BNY **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **/ /** ver 4.0  FIL **//** ver 4.3 fil mailer **/ /** Ver 4.5 NSER and NSFS added **/   /** Ver 4.8 Ares and INV **/  /** Ver 4.9 TVPL,FTI,NAS  **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** ver 5.1 AGMI **/ /** Ver 5.5  MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/ 
							AND       rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
							AND       IOM_CORPRT_EMAIL_IDES IS NOT NULL
							AND       trunc(CCM_CNTRCT_DT) = :c_trd_dt
							AND        CCM_CNTRCTNT_TYP     =     'C'
						UNION 
							SELECT    
							 distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,
		  				 trim(ITE_CMPY_ID) Company_cd,
		  				 'Y' Relative,
		  				 ITE_DEPENDENT_EMP_NAME C_EMP_NAME,
		  				 ITE_DEPENDENT_PAN_NO C_PAN_NO
							FROM       ITE_INSD_TRD_EMP_MSTR,CCM_CDX_CNTRCTNT_MSTR,IOM_INFO_ORGANIZATION_MSTR
							WHERE   CCM_CLM_MTCH_ACCNO = nvl(ITE_RELATIVE_MTCH,'NA')
							AND       ITE_AUTHRZTN_FLG='Y'
							AND       rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')  /** ver 2.0 **/  /** ver 3.1 BNY **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0   FIL **//** ver 4.3 mailer **/ /** Ver 4.5 NSER and NSFS added **/   /** Ver 4.8 Ares and INV **/  /** Ver 4.9 TVPL,FTI,NAS  **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** Ver 5.1 AGMI **/ /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /**  Ver 5.9  MLIC added **/
							AND       rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
							AND       IOM_CORPRT_EMAIL_IDES IS NOT NULL
							AND       trunc(CCM_CNTRCT_DT) =:c_trd_dt
							AND        CCM_CNTRCTNT_TYP     =     'C'
	      		) A
	  			WHERE     CCM_CNTRCT_NMBR    =  CCD_CNTRCT_NMBR
	  			AND     CCM_CLM_MTCH_ACCNO   =  CCD_CLM_MTCH_ACCNO
	  			AND     CCM_CLM_MTCH_ACCNO   =  A.match_id
	  			AND     trunc(CCD_CNTRCT_DT) =  trunc(CCM_CNTRCT_DT)
	  		AND     trunc(CCM_CNTRCT_DT) =  :c_trd_dt
	  		AND     CCM_CNTRCTNT_TYP  	 =  'C'
		 	 UNION ALL
		  	select
			  	Company_cd,
			  	'CDX',
			  	:c_trd_dt,
        	CAB_CLM_MTCH_ACCNT,
        	C_EMP_NAME,
        	C_PAN_NO,
        	decode(CAB_XCHNG_CD,'NDX','NSE','BDX','BSE') Exchange,
        	CAB_ASGND_DT    trade_Date,
        	CAB_PRDCT_TYP    Product_Type,
        	CAB_UNDRLYNG     UNDRLYNG,
        	'Exchange Assigned'     Order_Ref,
        	'Exchange Initiated' TRD_REF,
        	CAB_UNDRLYNG Stock_name,
        	'B' TRade_FLOW,
        	CAB_ASGND_QTY EXEC_QTY,
        	CAB_STTLMNT_PRC EXEC_RT,
        	( CAB_STTLMNT_PRC * CAB_ASGND_QTY)    NET_VAL,
        	CAB_EXPRY_DT EXPRY_DT,
        	CAB_OPT_TYP OPT_TYP,
        	CAB_STRK_PRC/100000 STRK_PRC,
        	CAB_ASGN_RFRNC_NO CONTRCT_NO
  			FROM  CAB_CDX_ASGNMNT_BOOK ,
        	( SELECT     
						distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,
            trim(ITE_CMPY_ID) Company_cd,
            'N' Employee,
            ITE_EMP_NAME C_EMP_NAME,
            ITE_PAN_NO C_PAN_NO
           FROM   ITE_INSD_TRD_EMP_MSTR, CAB_CDX_ASGNMNT_BOOK, IOM_INFO_ORGANIZATION_MSTR
           WHERE  CAB_CLM_MTCH_ACCNT = nvl(ITE_MTCH_ACCNT,'NA')
           AND    ITE_AUTHRZTN_FLG='Y'
           AND    rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')   /** Ver 2.0 **/  /** ver 3.1 BNY **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **/ /** Ver 4.0   FIL **//** ver 4.3 fil mailer **/ /** Ver 4.5 NSER and NSFS added **/   /** ver 4.8 Ares and INV **/  /** Ver 4.9 TVPL,FTI,NAS  **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** Ver 5.1  AGMI**/ /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9  MLIC added **/
           AND    rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
           AND    IOM_CORPRT_EMAIL_IDES IS NOT NULL
           AND    trunc(CAB_ASGND_DT) = :c_trd_dt
          UNION
           SELECT     
						distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,
            trim(ITE_CMPY_ID) Company_cd,
            'Y' Relative,
            ITE_DEPENDENT_EMP_NAME C_EMP_NAME,
            ITE_DEPENDENT_PAN_NO C_PAN_NO
           FROM   ITE_INSD_TRD_EMP_MSTR,CAB_CDX_ASGNMNT_BOOK,IOM_INFO_ORGANIZATION_MSTR
           WHERE  CAB_CLM_MTCH_ACCNT = nvl(ITE_RELATIVE_MTCH,'NA')
           AND    ITE_AUTHRZTN_FLG = 'Y'
           AND    rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')   /** Ver 2.0 **/  /** ver 3.1 BNY **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0   FIL **//** ver 4.3 fil mailer **/ /** Ver 4.5 NSER and NSFS added **/   /** ver 4.8 Ares and INV **/  /** Ver 4.9 TVPL,FTI,NAS  **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** Ver 5.1 AGMI **/ /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9  MLIC added **/
           AND    rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
           AND    IOM_CORPRT_EMAIL_IDES IS NOT NULL
           AND    trunc(CAB_ASGND_DT) =:c_trd_dt
  				) A
  			WHERE     CAB_CLM_MTCH_ACCNT = A.match_id
  			AND     CAB_ASGND_DT = :c_trd_dt
		 	 UNION ALL
				select
					Company_cd,
					'CDX',
					:c_trd_dt,
		    	CEC_CLM_MTCH_ACCNT,
        	C_EMP_NAME,
        	C_PAN_NO,
        	decode(CEC_XCHNG_CD,'NDX','NSE','BDX','BSE') Exchange,
        	CEC_EXRC_DT      trade_Date,
        	CEC_PRDCT_TYP    Product_Type,
        	CEC_UNDRLYNG     UNDRLYNG,
        	'Exchange Exercise'     Order_Ref,
        	'Exchange Initiated' TRD_REF,
        	CEC_UNDRLYNG Stock_name,
        	'S' TRade_FLOW,
        	CEC_EXRC_QTY EXEC_QTY,
        	CEC_CURR_MKT_PRC EXEC_RT,
        	( CEC_CURR_MKT_PRC * CEC_EXRC_QTY)    NET_VAL,
        	CEC_EXPRY_DT EXPRY_DT,
        	CEC_OPT_TYP OPT_TYP,
        	CEC_STRK_PRC/100000 STRK_PRC,
        	CEC_EXRC_RFRNC_NO CONTRCT_NO
  			FROM    CEC_CDX_EXRC_CONF ,
        	(SELECT     
						distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,
          	trim(ITE_CMPY_ID) Company_cd,
          	'N' Employee,
          	ITE_EMP_NAME C_EMP_NAME,
          	ITE_PAN_NO C_PAN_NO
         	FROM  ITE_INSD_TRD_EMP_MSTR, CEC_CDX_EXRC_CONF, IOM_INFO_ORGANIZATION_MSTR
         	WHERE CEC_CLM_MTCH_ACCNT = nvl(ITE_MTCH_ACCNT,'NA')
         	AND   ITE_AUTHRZTN_FLG='Y'
         	AND   rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','LPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC') /** Ver 2.0 **/  /** ver 3.1 BNY **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0   FIL **//** ver 4.3 fil mailer **/ /** Ver 4.5 NSER and NSFS added **/   /** Ver 4.8 Ares and INV **/   /** Ver 4.9 TVPL,FTI,NAS  **/ /** Ver 5.0 MMLI **//** Ver 5.2 ARCE **/ /** ver 5.1 AGMI **/ /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/
         	AND   rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
         	AND   IOM_CORPRT_EMAIL_IDES IS NOT NULL
         	AND   trunc(CEC_EXRC_DT) = :c_trd_dt
        	UNION
         	SELECT     
						distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,
          	trim(ITE_CMPY_ID) Company_cd,
          	'Y' Relative,
          	ITE_DEPENDENT_EMP_NAME C_EMP_NAME,
          	ITE_DEPENDENT_PAN_NO C_PAN_NO
         	FROM   ITE_INSD_TRD_EMP_MSTR,CEC_CDX_EXRC_CONF,IOM_INFO_ORGANIZATION_MSTR
         	WHERE  CEC_CLM_MTCH_ACCNT = nvl(ITE_RELATIVE_MTCH,'NA')
         	AND    ITE_AUTHRZTN_FLG = 'Y'
         	AND    rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC') /** Ver 2.0 **/  /** ver 3.1 BNY **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0   FIL **//** ver 4.3 fil mailer ***/ /** Ver 4.5 NSER and NSFS added **/    /** Ver 4.8 Ares and INV **/  /** Ver 4.9 TVPL,FTI,NAS  **//** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** Ver 5.1 AGMI **/ /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9  MLIC added **/
         	AND    rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
         	AND    IOM_CORPRT_EMAIL_IDES IS NOT NULL
         	AND    trunc(CEC_EXRC_DT) = :c_trd_dt
        	) A
  			WHERE     CEC_CLM_MTCH_ACCNT = A.match_id
  			AND     trunc(CEC_EXRC_DT) = :c_trd_dt
				);
    	if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
    	{
       fn_errlog(c_ServiceName,"S31475",SQLMSG,c_errmsg);
       fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
       return -1;
    	}
		 fn_userlog(c_ServiceName,"Now updating Open Position Flow");
		 EXEC SQL
			UPDATE ETR_EMP_TRANS_RPT
			 SET ETR_POS_STTS = (
						SELECT CFP_OPNPSTN_FLW
						FROM CFP_CDX_FUT_PSTN
						WHERE ETR_MTCH_ACCNT=CFP_CLM_MTCH_ACCNT
						AND    ETR_PRD_CD ='CDX'
						AND ETR_UNDRLYNG = CFP_UNDRLYNG
            AND ETR_PRD_TYP = CFP_PRDCT_TYP
            AND DECODE(ETR_XCHNG_CD,'NSE','NDX','BSE','BDX') = CFP_XCHNG_CD
            AND ETR_OPT_EXPRY_DT = CFP_EXPRY_DT
            AND ETR_RPT_DT = :c_trd_dt
				UNION ALL
						 SELECT COP_OPNPSTN_FLW                                                            
 						 FROM  COP_CDX_OPTIONS_PSTN                                                        
						 WHERE ETR_MTCH_ACCNT = COP_CLM_MTCH_ACCNT                                         
 						 AND ETR_PRD_CD ='CDX'                                                             
 						 AND ETR_UNDRLYNG = COP_UNDRLYNG                                                  
 						 AND ETR_PRD_TYP = COP_PRDCT_TYP                                                   
  					 AND DECODE(ETR_XCHNG_CD,'NSE','NDX','BSE','BDX') = COP_XCHNG_CD                  
 						 AND ETR_OPT_EXPRY_DT = COP_EXPRY_DT                                               
 						 AND ETR_OPT_STRK_PRC = COP_STRK_PRC                                               
 						 AND ETR_OPTION_CD  = COP_OPT_TYP                                                  
 						 AND ETR_RPT_DT = :c_trd_dt                                                        
						)
			WHERE ETR_PRD_CD ='CDX'
			AND   ETR_RPT_DT = :c_trd_dt;
     if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
     {
       fn_errlog(c_ServiceName,"S31480",SQLMSG,c_errmsg);
       fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
       return -1;
     }
		 fn_userlog(c_ServiceName,"After updating Open Position Flow updating dp details");

     EXEC SQL
       UPDATE ETR_EMP_TRANS_RPT 
          SET ETR_DP_CLNT_ID = ( select rtrim(CLD_DP_ID)||'-'||rtrim(CLD_DP_CLNT_ID) from CLD_DP_ACCTS where CLD_DP_ACC_TYP='E' and CLD_CLM_MTCH_ACCNT=ETR_MTCH_ACCNT and rownum < 2)
         WHERE ETR_RPT_DT = :c_trd_dt
           AND ETR_PRD_CD ='CDX';
     if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
     {
       fn_errlog(c_ServiceName,"S31485",SQLMSG,c_errmsg);
       fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
       return -1;
     }

     fn_userlog (c_ServiceName,"DP Details updated for CDX for  : <%ld>", SQLROWCOUNT);

     if ( fn_committran( c_ServiceName, i_trnsctn,c_errmsg ) == -1 )
     {
       fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
       fn_errlog ( c_ServiceName, "S31490", LIBMSG, c_errmsg );
       return -1;
     }
	}
	else
	{
    	fn_userlog(c_ServiceName,"Data is already populated : Product CDX for  date :%s:",c_trd_dt);
	}
		/** ver 1.9 ends **/

  l_rec_cnt=0;

  EXEC SQL
     SELECT count(rowid)
       INTO :l_rec_cnt
       FROM ETR_EMP_TRANS_RPT
      WHERE ETR_RPT_DT = :c_trd_dt
       AND  ETR_PRD_CD = 'EQ'
       AND  ETR_CORP_NAME NOT IN ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC') ;					 /** Ver 1.8 ***/ /** ver 2.0 **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0  FIL **//** ver 4.3 fil  mailer **//** Ver 4.5 NSER and NSFS added **/ /** Ver 4.8 Ares and INV **/    /** Ver 4.9 TVPL,FTI,NAS  **/ /** Ver 5.0 MMLI **/ /** VER 5.2 ARCE **/ /** Ver 5.1 AGMI **/  /** ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /**Ver 5.9 MLIC added **/
  
   if( SQLCODE != 0 )
   {
     fn_errlog(c_ServiceName,"S31495",SQLMSG,c_errmsg);
     return -1;
   }

   if( l_rec_cnt == 0 )
   {
     fn_userlog(c_ServiceName,"Populating data: Product EQ for  date :%s:",c_trd_dt);

   i_trnsctn= fn_begintran( c_ServiceName, c_errmsg );
   if ( i_trnsctn == -1 )
   {
     fn_errlog ( c_ServiceName, "S31500", LIBMSG, c_errmsg );
     return -1;
   }

   EXEC SQL
      INSERT INTO ETR_EMP_TRANS_RPT
         (
           ETR_CORP_NAME,
           ETR_PRD_CD,
           ETR_RPT_DT,
           ETR_MTCH_ACCNT,
           ETR_EMP_NAME,
           ETR_PAN_NO,
           ETR_DP_CLNT_ID,
           ETR_XCHNG_CD,
           ETR_TRD_DT,
           ETR_PRD_TYP,
           ETR_UNDRLYNG,
           ETR_ORDR_NO,
           ETR_TRD_EXEC_NO,
           ETR_STK_NM,
           ETR_TRD_FLW,
           ETR_TRD_QTY,
           ETR_SEC_TRD_PRC,
           ETR_TRD_VAL,
           ETR_SEGMNT_CD,
           ETR_STLMNT_NO,
           ETR_ISIN_NO,
           ETR_CNTRCT_NO
         )
         (
          select
            Company_cd,
            'EQ' ,
            :c_trd_dt,
		        TRD_CLM_MTCH_ACCNT MATCH_ID,
            C_EMP_NAME,
            C_PAN_NO,
		        ORD_DP_ID||'-'||ORD_DP_CLNT_ID,
		        TRD_XCHNG_CD EXCHANGE,
		        TRD_TRD_DT TRADE_DATE,
		        ORD_PRDCT_TYP PRDT_TYP,
						TRD_STCK_CD UNDRLYNG,
						TRD_ORDR_RFRNC ORD_REF,
						TRD_TRD_REF TRADE_REF,
						STK_STCK_NM STOCKNAME,
						TRD_TRD_FLW TRD_FLW,
						TRD_EXCTD_QTY EXEC_QTY,
						TRD_EXCTD_RT EXEC_RT,
						TRD_TRD_VL TRD_VAL,
						TRD_XCHNG_SGMNT_CD SEGMENT,
						TRD_XCHNG_SGMNT_STTLMNT STLMNT_NO,
						SEM_MAP_VL ISIN, 
		        TRD_CNTRCT_NMBR CNTRCT_NO
				FROM
						TRD_TRD_DTLS, 
            ORD_ORDR_DTLS, 
            SEM_STCK_MAP, 
            STK_STK_MSTR,
            ( select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee,ITE_EMP_NAME C_EMP_NAME, ITE_PAN_NO C_PAN_NO
                  from   ITE_INSD_TRD_EMP_MSTR,TRD_TRD_DTLS,IOM_INFO_ORGANIZATION_MSTR
                  WHERE  TRD_CLM_MTCH_ACCNT = nvl(ITE_MTCH_ACCNT,'NA')
                   AND   ITE_AUTHRZTN_FLG='Y'
                   AND   rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')				 /** Ver 1.8 ***/ /** ver 2.0**/  /** ver 3.1 BNY **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0  FIL **//** ver 4.3 fil mailer **/ /** Ver 4.5 NSER and NSFS added **/   /** ver 4.8 Ares and INV **/    /** Ver 4.9 TVPL,FTI,NAS  **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** Ver 5.1 AGMI **/  /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/
                   AND   rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
                   AND   IOM_CORPRT_EMAIL_IDES IS NOT NULL
                   AND   TRUNC(TRD_TRD_DT)= :c_trd_dt  
                 UNION
                  select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative,ITE_DEPENDENT_EMP_NAME C_EMP_NAME, ITE_DEPENDENT_PAN_NO C_PAN_NO
                    FROM ITE_INSD_TRD_EMP_MSTR,TRD_TRD_DTLS,IOM_INFO_ORGANIZATION_MSTR
                   WHERE TRD_CLM_MTCH_ACCNT = nvl(ITE_RELATIVE_MTCH,'NA')
                     AND ITE_AUTHRZTN_FLG='Y'
                     AND rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')				 /** Ver 1.8 ***//** Ver 2.0 **/  /** ver 3.1 BNY **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0  FIL **//** ver 4.3 fil mailer  **/ /** Ver 4.5 NSER and NSFS added **/  /** Ver 4.8 Ares and INV **/   /** Ver 4.9 TVPL,FTI,NAS  **/ /** ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** Ver 5.1 AGMI **/ /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9  MLIC added **/ 
                     AND rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
                     AND IOM_CORPRT_EMAIL_IDES IS NOT NULL
                     AND TRUNC(TRD_TRD_DT)= :c_trd_dt
             ) A
						WHERE ORD_CLM_MTCH_ACCNT= TRD_CLM_MTCH_ACCNT
						AND  TRD_CLM_MTCH_ACCNT = A.match_id 
						AND ORD_ORDR_RFRNC = TRD_ORDR_RFRNC
						AND SEM_STCK_CD=TRD_STCK_CD
            AND SEM_ENTTY=10
						AND STK_STCK_CD = TRD_STCK_CD  
						AND STK_STCK_CD = SEM_STCK_CD 
            AND STK_SCTR_CD !='28' 
						AND TRUNC(TRD_TRD_DT)= :c_trd_dt
         ); 

   if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
   {
     fn_errlog(c_ServiceName,"S31505",SQLMSG,c_errmsg);
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
     return -1;
   } 
  
   fn_userlog (c_ServiceName,"Record inserted in EQ : <%ld>", SQLROWCOUNT);
 
   if ( fn_committran( c_ServiceName, i_trnsctn,c_errmsg ) == -1 )
   {
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
     fn_errlog ( c_ServiceName, "S31510", LIBMSG, c_errmsg );
     return -1;
   }
  }
  else
  {
    fn_userlog(c_ServiceName,"Data is already populated : Product EQ for  date :%s:",c_trd_dt); 
  }
  
  EXEC SQL
     SELECT count(rowid)
       INTO :l_rec_cnt
       FROM ETR_EMP_TRANS_RPT
      WHERE ETR_RPT_DT = :c_trd_dt
       AND  ETR_PRD_CD = 'MF'
       AND  ETR_CORP_NAME NOT IN ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC') ;					 /** Ver 1.8 ***/ /** Ver 2.0 **/  /** ver 3.1 BNY **/ /** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0  FIL **//** ver 4.3 fil mailer  **/   /** Ver 4.5 NSER and NSFS added    **/  /** Ver 4.8 Ares and INV **/   /** Ver 4.9 TVPL,FTI AND NASD added **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** Ver 5.1 AGMI **/ /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/ 


   if( SQLCODE != 0 )
   {
     fn_errlog(c_ServiceName,"S31515",SQLMSG,c_errmsg);
     return -1;
   }

   if( l_rec_cnt == 0 )
   {
     fn_userlog(c_ServiceName,"Populating the data : Product MF for  date :%s:",c_trd_dt);

   i_trnsctn= fn_begintran( c_ServiceName, c_errmsg );
   if ( i_trnsctn == -1 )
   {
     fn_errlog ( c_ServiceName, "S31520", LIBMSG, c_errmsg );
     return -1;
   }

   EXEC SQL
      INSERT INTO ETR_EMP_TRANS_RPT
         (
           ETR_CORP_NAME,
           ETR_PRD_CD,
           ETR_RPT_DT,
           ETR_MTCH_ACCNT,
           ETR_EMP_NAME,
           ETR_PAN_NO,
           ETR_DP_CLNT_ID,
           ETR_TRD_DT,
           ETR_ORDR_NO,
           ETR_TRD_EXEC_NO,
           ETR_TRD_FLW,
           ETR_TRD_QTY,
           ETR_SEC_TRD_PRC,
           ETR_TRD_VAL,
           ETR_CMPNY_NAME,
           ETR_SCHM_DESC,
           ETR_SCHM_CD,
           ETR_ISIN_NO,            /** Ver 1.2 **/
           ETR_FUND_TYP
         )
         (
          select
            Company_cd,
            'MF',
            :c_trd_dt,
	          MF_TRN_MATCH_ACC ,
            C_EMP_NAME,
            C_PAN_NO,
	          MF_TRN_DPID||'-'||MF_TRN_CNT_ID  DP_ID, 
            MF_TRN_DATE APPLIN_DATE,                   
            MF_TRN_FOLIO Folio_No,
            MF_TRN_ID TRN_ID,
            MF_TRN_CD TRN_TYP,
            MF_TRN_QTY  TRN_QTY,
	          MF_TRN_NAV   NAV,
            nvl(MF_TRN_AMT,0) TRN_AMT,  
            MF_COMP_NAME COMPANY_NAME,
            MF_SCH_DESC SCHEME_NAME,
            MF_TRN_SCH_CD SCHEME_CD,
            /* case when MF_TRN_DIV_REINV_FLG='Y' then nvl(MF_NAV_ISIN_REINVEST,'*')
            else nvl(MF_NAV_FUNDISIN,'*')
            end ISIN_NO,  *** Ver 1.2  Case added***  *commented in Ver 3.3 ***/
            CASE when upper(MF_SCH_TYPE)= 'GROWTH' /*** Added in Ver 3.3 ***/
              /** then nvl(MF_NAV_FUNDISIN,'NA') ** Ver 4.7 **/
              then NVL(MF_SCH_ISIN,'NA')   /** Ver 4.7 **/
              when upper(MF_SCH_TYPE)= 'DIVIDEND'
              then case when decode(nvl(MF_TRN_DIV_REINV_FLG,'X'),'Y','Y','N','N','R','Y','D','N','P','N','Z','N','G','N') = 'Y'
                        /** then nvl(MF_NAV_ISIN_REINVEST,'NA') ** Ver 4.7 **/
                        then NVL(MF_SCH_ISIN_DR,'NA')  /** Ver 4.7 **/
                        when decode(nvl(MF_TRN_DIV_REINV_FLG,'X'),'Y','Y','N','N','R','Y','D','N','P','N','Z','N','G','N') = 'N'
                        /** then nvl(MF_NAV_ISIN_PAYOUT,'NA')
                            ELSE  nvl(MF_NAV_FUNDISIN,'NA')  ** Ver 4.7 **/
                        then NVL(MF_SCH_ISIN,'NA') /** Ver 4.7 **/
                        ELSE NVL(MF_SCH_ISIN,'NA') /** Ver 4.7 **/ 
                   end
            END ISIN_NO, 
            MF_SCH_CLOSE_FLG  FUND_TYP
           FROM  mf_transactions,
                 MF_NAVS,
                 MF_COMPANIES,
                 MF_SCHEME_MASTER,
                 ( select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee,ITE_EMP_NAME C_EMP_NAME, ITE_PAN_NO C_PAN_NO
                  from   ITE_INSD_TRD_EMP_MSTR,mf_transactions,IOM_INFO_ORGANIZATION_MSTR
                  WHERE  MF_TRN_MATCH_ACC = nvl(ITE_MTCH_ACCNT,'NA')
                   AND   ITE_AUTHRZTN_FLG='Y'
                   AND   rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')			 /** Ver 1.8 ***/ /** ver 2.0 **/  /** ver 3.1 BNY **/ /** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0  FIL **//** ver 4.3 fil mailer  **/ /** Ver 4.5 NSER and NSFS added **//** Ver 4.8 Ares and INV **/   /** Ver 4.9 TVPL,FTI AND NASD added **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** Ver 5.1 AGMI **/  /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** ver 5.9 MLIC added **/ 
                   AND   rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
                   AND   IOM_CORPRT_EMAIL_IDES IS NOT NULL
                   AND   mf_trn_status_cd='E'
                   and   MF_TRN_UPLD_DT = :c_trd_dt
                 UNION
                  select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative,ITE_DEPENDENT_EMP_NAME C_EMP_NAME, ITE_DEPENDENT_PAN_NO C_PAN_NO
                    FROM ITE_INSD_TRD_EMP_MSTR,mf_transactions,IOM_INFO_ORGANIZATION_MSTR
                   WHERE MF_TRN_MATCH_ACC = nvl(ITE_RELATIVE_MTCH,'NA')
                     AND ITE_AUTHRZTN_FLG='Y'
                     AND rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')				 /** Ver 1.8 ***/ /** ver 2.0 **/  /** ver 3.1 BNY **/ /** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0  FIL **//** ver 4.3 fil mailer  **/  /** Ver 4.5 NSER and NSFS added **/  /** Ver 4.8 Ares and INV **/   /** Ver 4.9 TVPL,FTI AND NASD added **/ /** Ver 5.0 MMLI **/ /** vER 5.2 ARCE **/ /** Ver 5.1 AGMI **/  /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9  MLIC added **/
                     AND rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
                     AND IOM_CORPRT_EMAIL_IDES IS NOT NULL
                     and MF_TRN_UPLD_DT = :c_trd_dt
                 ) A 
           where MF_TRN_MATCH_ACC = A.match_id 
           AND   MF_NAV_COMP_CD=MF_TRN_COMP_CD
           AND   MF_NAV_SCH_CD=MF_TRN_SCH_CD
           AND   MF_COMP_CD= MF_TRN_COMP_CD
           AND   MF_SCH_COMP_CD = MF_TRN_COMP_CD
           AND   MF_SCH_CD = MF_TRN_SCH_CD
           AND   mf_trn_status_cd='E'
           and   MF_TRN_UPLD_DT = :c_trd_dt
         );
   if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
   {
     fn_errlog(c_ServiceName,"S31525",SQLMSG,c_errmsg);
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
     return -1;
   }

   fn_userlog (c_ServiceName,"Record inserted in MF : <%ld>", SQLROWCOUNT);

   if ( fn_committran( c_ServiceName, i_trnsctn,c_errmsg ) == -1 )
   {
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
     fn_errlog ( c_ServiceName, "S31530", LIBMSG, c_errmsg );
     return -1;
   }
 
  }
  else
  {
    fn_userlog(c_ServiceName,"Data is already populated : Product MF for  date :%s:",c_trd_dt);
  }

   l_rec_cnt=0;

   EXEC SQL
     SELECT count(rowid)
       INTO :l_rec_cnt
       FROM ETR_EMP_TRANS_RPT
      WHERE ETR_RPT_DT = :c_trd_dt
       AND  ETR_PRD_CD = 'FD';


   if( SQLCODE != 0 )
   {
     fn_errlog(c_ServiceName,"S31535",SQLMSG,c_errmsg);
     return -1;
   }

   if( l_rec_cnt == 0 )
   {
   i_trnsctn= fn_begintran( c_ServiceName, c_errmsg );
   if ( i_trnsctn == -1 )
   {
     fn_errlog ( c_ServiceName, "S31540", LIBMSG, c_errmsg );
     return -1;
   }
 
   EXEC SQL
      INSERT INTO ETR_EMP_TRANS_RPT
         (
           ETR_CORP_NAME,
           ETR_PRD_CD,
           ETR_RPT_DT,
           ETR_MTCH_ACCNT,
           ETR_EMP_NAME,
           ETR_PAN_NO,
           ETR_TRD_DT,
           ETR_ORDR_NO,
           ETR_TRD_VAL,
           ETR_CMPNY_NAME,
           ETR_SCHM_DESC,
           ETR_ISSURE_CD,
           ETR_TENURE,
					 ETR_TRD_QTY,				/** Ver 4.2 **/
					 ETR_SEC_TRD_PRC    /** Ver 4.2 **/
         )
         (
          select
            Company_cd,
            'FD',
            :c_trd_dt,
            FT_MATCH_ACC_NO ACCOUNT_NO,
            C_EMP_NAME,
            C_PAN_NO,
            FT_TRN_DT TRANSACTION_DATE,
            FT_TRANS_ID APPLCTN_NO,
            FT_TRN_AMT FD_AMT,
          	FIM_NAME FD_CMPNY_NM,
            TRIM(FSM_DESC) SCHEME_DESC, 
            FIM_ISS_CD issur_Cd,
            FT_TENURE TENURE,
						case when FIM_ISS_CD='5556' or FIM_ISS_CD='5557' then FT_TRN_AMT/FOM_MIN_PUR_AMT else null end,						/** Ver 4.2 **//** Ver 4.4 **/
						case when FIM_ISS_CD='5556' or FIM_ISS_CD='5557' then FOM_MIN_PUR_AMT else null end											  /** Ver 4.2 **//** Ver 4.4 **/
          FROM FD_TRANS,
               FD_ISSUER_MASTER,
               FD_SCHEME_MASTER,                      
               ( select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee,ITE_EMP_NAME C_EMP_NAME, ITE_PAN_NO C_PAN_NO
                  from   ITE_INSD_TRD_EMP_MSTR,FD_TRANS,IOM_INFO_ORGANIZATION_MSTR
                  WHERE  FT_MATCH_ACC_NO = nvl(ITE_MTCH_ACCNT,'NA')
                   AND   ITE_AUTHRZTN_FLG='Y'
                   AND   rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')			 /** Ver 1.8 ***/ /** Ver 2.0 **/  /** ver 3.1 BNY **/ /** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0  FIL **//** ver 4.3 fil mailer **/  /** Ver 4.5 NSER and NSFS added **/   /** Ver 4.8 Ares and INV **/   /** Ver 4.9 TVPL,FTI AND NASD added **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** Ver 5.1 AGMI **//** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9  MLIC added **/  
                   AND   rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
                   AND   IOM_CORPRT_EMAIL_IDES IS NOT NULL
                   AND   FT_STATUS_CD in ('E','O') 						/** Ver 2.2 in clause added */
                   /*AND   trunc(FT_EXEC_DT) = :c_trd_dt			*** Ver 1.7 comment **/
									 AND nvl(trunc(FT_EXEC_DT),trunc(FT_TRN_DT)) = :c_trd_dt        /** Ver 1.7 nvl added**/
                 UNION
                  select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative,ITE_DEPENDENT_EMP_NAME C_EMP_NAME, ITE_DEPENDENT_PAN_NO C_PAN_NO
                    FROM ITE_INSD_TRD_EMP_MSTR,FD_TRANS,IOM_INFO_ORGANIZATION_MSTR
                   WHERE FT_MATCH_ACC_NO = nvl(ITE_RELATIVE_MTCH,'NA')
                     AND ITE_AUTHRZTN_FLG='Y'
                     AND rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')				 /** Ver 1.8 ***/ /** Ver 2.0 **/  /** ver 3.1 BNY **/ /** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0  FL **//** ver 4.3 fil mailer   **/ /** Ver 4.5 NSER and NSFS  added **/    /** ver 4.8 Ares and INV **/   /** Ver 4.9 TVPL,FTI AND NASD added **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** Ver 5.1 AGMI **/  /**  Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/
                     AND rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
                     AND IOM_CORPRT_EMAIL_IDES IS NOT NULL
                     AND   FT_STATUS_CD in ('E','O') 						/** Ver 2.2 in clause added */
                     /**AND trunc(FT_EXEC_DT) = :c_trd_dt					*** Ver 1.7 comment **/
										 AND nvl(trunc(FT_EXEC_DT),trunc(FT_TRN_DT)) = :c_trd_dt        /** Ver 1.7 nvl added**/
                ) A,
								FD_OPTION_MASTER							/** Ver 4.2 **/ 
         WHERE FT_MATCH_ACC_NO = A.match_id 
           AND FIM_ISS_CD  = FT_ISS_CD 
           AND FSM_SCH_CD  = FT_SCH_CD 
           AND FSM_ISS_CD  = FT_ISS_CD
					 AND FIM_ISS_CD  = FOM_ISS_CD								/** Ver 4.2 **/
					 AND FSM_SCH_CD	 = FOM_SCH_CD								/** Ver 4.2 **/
					 AND FT_SCH_CD   = FOM_SCH_CD								/** Ver 4.2 **/
					 AND FT_OPT_CD   = FOM_OPT_CD								/** Ver 4.2 **/								
           AND   FT_STATUS_CD in ('E','O') 						/** Ver 2.2 in clause added */
           AND nvl(trunc(FT_EXEC_DT),trunc(FT_TRN_DT)) = :c_trd_dt
        );

   if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
   {
     fn_errlog(c_ServiceName,"S31545",SQLMSG,c_errmsg);
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
     return -1;
   }

   fn_userlog (c_ServiceName,"Record inserted in FD : <%ld>", SQLROWCOUNT);
   if ( fn_committran( c_ServiceName, i_trnsctn,c_errmsg ) == -1 )
   {
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
     fn_errlog ( c_ServiceName, "S31550", LIBMSG, c_errmsg );
     return -1;
   }
  }
  else
  {
    fn_userlog(c_ServiceName,"Data is already populated : Product FD for  date :%s:",c_trd_dt);
  }

  l_rec_cnt=0;

   EXEC SQL
     SELECT count(rowid)
       INTO :l_rec_cnt
       FROM ETR_EMP_TRANS_RPT
      WHERE ETR_RPT_DT = :c_trd_dt
       AND  ETR_PRD_CD = 'BOND'
       AND  ETR_CORP_NAME NOT IN ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC') ;			 /** Ver 1.8 ***/ /** ver 2.0 **/  /** ver 3.1 BNY **/ /** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0   FIL **//** ver 4.3 fil mailer **/    /** Ver 4.5 NSER and NSFS added **/   /** Ver 4.8 Ares and INV **/  /** Ver 4.9 TVPL,FTI AND NASD added **/ /** vER 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** Ver 5.1 AGMI **//** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/ 
 
   if( SQLCODE != 0 )
   {
     fn_errlog(c_ServiceName,"S31555",SQLMSG,c_errmsg);
     return -1;
   }

   if( l_rec_cnt == 0 )
   {
   i_trnsctn= fn_begintran( c_ServiceName, c_errmsg );
   if ( i_trnsctn == -1 )
   {
     fn_errlog ( c_ServiceName, "S31560", LIBMSG, c_errmsg );
     return -1;
   }

   EXEC SQL
      INSERT INTO ETR_EMP_TRANS_RPT
         (
           ETR_CORP_NAME,
           ETR_PRD_CD,
           ETR_RPT_DT,
           ETR_MTCH_ACCNT,
           ETR_EMP_NAME,
           ETR_PAN_NO,
           ETR_DP_CLNT_ID,
           ETR_TRD_DT,
           ETR_ORDR_NO,
           ETR_TRD_EXEC_NO,
           ETR_TRD_QTY,
           ETR_SEC_TRD_PRC,
           ETR_TRD_VAL,
           ETR_ISIN_NO,
           ETR_CMPNY_NAME
         )
         (
           SELECT 
			     Company_cd,
			     'BOND',
           :c_trd_dt,
			     FTD_CLM_MTCH_ACCNT,   
           C_EMP_NAME,
           C_PAN_NO, 
			     FTD_DP_ID||'-'||FTD_DP_CLNT_ID,
			     FTD_ORDR_DT,
			     FTD_ORDR_RFRNC APPLICTN_NO,
			     FTD_TRD_REF TRN_NO,
			     FTD_EXCTD_QTY QTy,
			     FTD_EXCTD_RT rate,
			     FTD_TRD_VAL Amount,
			     FTD_ISIN_NMBR ISIN_NO,
			     FSM_ISSUER_NM COMPNY_NM
			    FROM ftd_fi_trnsctn_dtls,
			         FSM_FI_SECURITY_MSTR,
			         ( select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee,ITE_EMP_NAME C_EMP_NAME, ITE_PAN_NO C_PAN_NO
			             from ITE_INSD_TRD_EMP_MSTR,ftd_fi_trnsctn_dtls,IOM_INFO_ORGANIZATION_MSTR
			            WHERE FTD_CLM_MTCH_ACCNT = nvl(ITE_MTCH_ACCNT,'NA')
				            AND ITE_AUTHRZTN_FLG='Y'
				            AND rtrim(ITE_CMPY_ID)  not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')       /** Ver 1.8 ***/ /** Ver 2.0 **/  /** ver 3.1 BNY **/ /** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0  FIL **//** ver 4.3 fil mailer  **/ /** Ver 4.5 NSER and NSFS added **/    /** Ver 4.8 Ares and INV **/ /** Ver 4.9 TVPL,FTI AND NASD added **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** Ver 5.1 AGMI **/ /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/ 
 
                    AND rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
                    AND IOM_CORPRT_EMAIL_IDES IS NOT NULL
                    AND FTD_TRD_TRD_DT = :c_trd_dt
			           UNION
			            /*** select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative,ITE_EMP_NAME C_EMP_NAME, ITE_PAN_NO C_PAN_NO *** Commentd in Ver 1.5 ***/
			            select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative,ITE_DEPENDENT_EMP_NAME C_EMP_NAME, ITE_DEPENDENT_PAN_NO C_PAN_NO   /** ver 1.5 ***/
			              FROM ITE_INSD_TRD_EMP_MSTR,ftd_fi_trnsctn_dtls,IOM_INFO_ORGANIZATION_MSTR
			             WHERE FTD_CLM_MTCH_ACCNT = nvl(ITE_RELATIVE_MTCH,'NA')
				             AND ITE_AUTHRZTN_FLG='Y'
				             AND rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX', 'MGCS','CEAL','TDBG','TAML','MLIC')	 /** Ver 1.8 ***/ /** Ver 2.0 **/  /** ver 3.1 BNY **/ /** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0  FIL **//** ver 4.3 fil mailer  **/ /** Ver 4.5 NSER and NSFS added **/  /** Ver 4.8 Ares and INV **/   /** Ver 4.9 TVPL,FTI AND NASD added **/ /** Ver 5.0 MMLI **//** Ver 5.2 ARCE **/ /** ver 5.1 AGMI **/  /** Ver  5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/  
                     AND rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
                     AND IOM_CORPRT_EMAIL_IDES IS NOT NULL
                     AND FTD_TRD_TRD_DT = :c_trd_dt
			         ) A
			    WHERE FTD_CLM_MTCH_ACCNT = A.match_id
			    AND FTD_STCK_MAPCD = FSM_STCK_MAPCD
			    AND FTD_ORDR_STTS ='E'
          AND FTD_TRD_TRD_DT = :c_trd_dt
     /****** Commented in Ver 1.3 ******
			  UNION
			    SELECT
			    Company_cd,
			    'NCD',
          :c_trd_dt,
			    TRD_CLM_MTCH_ACCNT,
          C_EMP_NAME,
          C_PAN_NO,
			    ORD_DP_ID||'-'||ORD_DP_CLNT_ID,
			    ORD_TRD_DT,
			    ORD_ORDR_RFRNC,
			    TRD_TRD_REF,
			    TRD_EXCTD_QTY,
			    TRD_EXCTD_RT,
			    TRD_TRD_VL,
			    FSM_ISIN_NO ISIN,
			    FSM_ISSUER_NM COMPNY_NM
			   FROM  TRD_TRD_DTLS,
			         ORD_ORDR_DTLS,
			         STK_STK_MSTR, 
			         FSM_FI_SECURITY_MSTR,
			         ( select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee,ITE_EMP_NAME C_EMP_NAME, ITE_PAN_NO C_PAN_NO
				         from  ITE_INSD_TRD_EMP_MSTR,TRD_TRD_DTLS,IOM_INFO_ORGANIZATION_MSTR
				        WHERE  TRD_CLM_MTCH_ACCNT = nvl(ITE_MTCH_ACCNT,'NA')
				          AND  ITE_AUTHRZTN_FLG='Y'
				          AND  rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ')
                  AND  rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
                  AND  IOM_CORPRT_EMAIL_IDES IS NOT NULL
                  AND  trunc(TRD_TRD_DT)= :c_trd_dt
				       UNION
				       select  distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative,ITE_DEPENDENT_EMP_NAME C_EMP_NAME, ITE_DEPENDENT_PAN_NO C_PAN_NO
				         FROM  ITE_INSD_TRD_EMP_MSTR,TRD_TRD_DTLS,IOM_INFO_ORGANIZATION_MSTR
				        WHERE  TRD_CLM_MTCH_ACCNT = nvl(ITE_RELATIVE_MTCH,'NA')
				          AND  ITE_AUTHRZTN_FLG='Y'
				          AND  rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ')
                  AND  rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
                  AND  IOM_CORPRT_EMAIL_IDES IS NOT NULL
                  AND   trunc(TRD_TRD_DT)= :c_trd_dt
			        ) A
			   WHERE TRD_STCK_CD = STK_STCK_CD
		   	 AND   FSM_STCK_MAPCD = STK_STCK_CD
			   AND   TRD_CLM_MTCH_ACCNT = A.match_id
			   AND   ORD_ORDR_RFRNC = TRD_ORDR_RFRNC
			   AND   ORD_TRD_DT = trunc(TRD_TRD_DT)
			   AND   STK_SCTR_CD = '28'
			   AND   trunc(TRD_TRD_DT)= :c_trd_dt
       ************* Ver 1.3 ***********************/ 
        ); 
   if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
   {
     fn_errlog(c_ServiceName,"S31565",SQLMSG,c_errmsg);
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
     return -1;
   }

   fn_userlog (c_ServiceName,"Record inserted in BOND : <%ld>", SQLROWCOUNT);
   
   if ( fn_committran( c_ServiceName, i_trnsctn,c_errmsg ) == -1 )
   {
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
     fn_errlog ( c_ServiceName, "S31570", LIBMSG, c_errmsg );
     return -1;
   }
  }
  else
  {
    fn_userlog(c_ServiceName,"Data is already populated : Product EQ for  date :%s:",c_trd_dt);
  } 

  /**** Ver 1.3 Starts here ****/
  l_rec_cnt=0;

   EXEC SQL
     SELECT count(rowid)
       INTO :l_rec_cnt
       FROM ETR_EMP_TRANS_RPT
      WHERE ETR_RPT_DT = :c_trd_dt
       AND  ETR_PRD_CD = 'NCD'
       AND  ETR_CORP_NAME NOT IN ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC') ;			 /** Ver 1.8 ***/ /** ver 2.0 **/  /** ver 3.1 BNY **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0   FIL **/  /** Ver 4.5 NSER and NSFS added **/  /** Ver 4.8 Ares and INV **/   /** Ver 4.9 TVPL,FTI AND NASD added **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** Ver 5.1 AGMI **/  /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/

   if( SQLCODE != 0 )
   {
     fn_errlog(c_ServiceName,"S31575",SQLMSG,c_errmsg);
     return -1;
   }

   if( l_rec_cnt == 0 )
   {
     i_trnsctn= fn_begintran( c_ServiceName, c_errmsg );
     if ( i_trnsctn == -1 )
     {
       fn_errlog ( c_ServiceName, "S31580", LIBMSG, c_errmsg );
       return -1;
     }
     
     EXEC SQL
      INSERT INTO ETR_EMP_TRANS_RPT
         (
           ETR_CORP_NAME,
           ETR_PRD_CD,
           ETR_RPT_DT,
           ETR_MTCH_ACCNT,
           ETR_EMP_NAME,
           ETR_PAN_NO,
           ETR_DP_CLNT_ID,
           ETR_XCHNG_CD,
           ETR_TRD_DT,
           ETR_PRD_TYP,
           ETR_UNDRLYNG,
           ETR_ORDR_NO,
           ETR_TRD_EXEC_NO,
           ETR_STK_NM,
           ETR_TRD_FLW,
           ETR_TRD_QTY,
           ETR_SEC_TRD_PRC,
           ETR_TRD_VAL,
           ETR_SEGMNT_CD,
           ETR_STLMNT_NO,
           ETR_ISIN_NO,
           ETR_CNTRCT_NO,
           ETR_CMPNY_NAME
         )
         (
          select
            Company_cd,
            'NCD' ,
            :c_trd_dt,
            TRD_CLM_MTCH_ACCNT MATCH_ID,
            C_EMP_NAME,
            C_PAN_NO,
            ORD_DP_ID||'-'||ORD_DP_CLNT_ID,
            TRD_XCHNG_CD EXCHANGE,
            TRD_TRD_DT TRADE_DATE,
            ORD_PRDCT_TYP PRDT_TYP,
            TRD_STCK_CD UNDRLYNG,
            TRD_ORDR_RFRNC ORD_REF,
            TRD_TRD_REF TRADE_REF,
            STK_STCK_NM STOCKNAME,
            TRD_TRD_FLW TRD_FLW,
            TRD_EXCTD_QTY EXEC_QTY,
            TRD_EXCTD_RT EXEC_RT,
            TRD_TRD_VL TRD_VAL,
            TRD_XCHNG_SGMNT_CD SEGMENT,
            TRD_XCHNG_SGMNT_STTLMNT STLMNT_NO,
            SEM_MAP_VL ISIN,
            TRD_CNTRCT_NMBR CNTRCT_NO,
            FSM_ISSUER_NM COMPNY_NM
          FROM  TRD_TRD_DTLS,
               ORD_ORDR_DTLS,
               STK_STK_MSTR,
               SEM_STCK_MAP,
               FSM_FI_SECURITY_MSTR,
               ( select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee,ITE_EMP_NAME C_EMP_NAME, ITE_PAN_NO C_PAN_NO
                 from  ITE_INSD_TRD_EMP_MSTR,TRD_TRD_DTLS,IOM_INFO_ORGANIZATION_MSTR
                WHERE  TRD_CLM_MTCH_ACCNT = nvl(ITE_MTCH_ACCNT,'NA')
                  AND  ITE_AUTHRZTN_FLG='Y'
                  AND  rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')			 /** Ver 1.8 ***/ /** ver 2.0 SPG **/  /** ver 3.1 BNY **/ /** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0  FIL **//** ver  4.3 Fil mailer **/   /** Ver 4.5 NSER and NSFS added **/   /** ver 4.8 Ares and INV **/     /** Ver 4.9 TVPL,FTI AND NASD added **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **//** Ver 5.1 AGMI **/ /**Ver 5.5 MGCS added**//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/ 
                  AND  rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
                  AND  IOM_CORPRT_EMAIL_IDES IS NOT NULL
                  AND  trunc(TRD_TRD_DT)= :c_trd_dt
               UNION
               select  distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative,ITE_DEPENDENT_EMP_NAME C_EMP_NAME, ITE_DEPENDENT_PAN_NO C_PAN_NO
                 FROM  ITE_INSD_TRD_EMP_MSTR,TRD_TRD_DTLS,IOM_INFO_ORGANIZATION_MSTR
                WHERE  TRD_CLM_MTCH_ACCNT = nvl(ITE_RELATIVE_MTCH,'NA')
                  AND  ITE_AUTHRZTN_FLG='Y'
                  AND  rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX', 'MGCS','CEAL','TDBG','TAML','MLIC')			 /** Ver 1.8 ***/ /** Ver 2.0 **/  /** ver 3.1 BNY **/ /** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0  FIL **/ /** Ver 4.3 Fil mailer   **/  /** Ver 4.5 NSER   NSFS  added **/ /** Ver 4.8 Ares and INV **/   /** Ver 4.9 TVPL,FTI AND NASD added **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ACRE **/ /** Ver 5.1 AGMI **/  /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/
                  AND   rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
                  AND  IOM_CORPRT_EMAIL_IDES IS NOT NULL
                  AND   trunc(TRD_TRD_DT)= :c_trd_dt
              ) A
         WHERE TRD_STCK_CD = STK_STCK_CD
         AND   FSM_STCK_MAPCD = STK_STCK_CD
         AND   SEM_STCK_CD = TRD_STCK_CD  
         AND   TRD_CLM_MTCH_ACCNT = A.match_id
         AND   ORD_ORDR_RFRNC = TRD_ORDR_RFRNC
         AND   ORD_TRD_DT = trunc(TRD_TRD_DT)
         AND   STK_SCTR_CD = '28'
         AND   SEM_ENTTY = '10' 
         AND   trunc(TRD_TRD_DT) = :c_trd_dt
       );            
   if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
   {
     fn_errlog(c_ServiceName,"S31585",SQLMSG,c_errmsg);
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
     return -1;
   }

   fn_userlog (c_ServiceName,"Record inserted in NCD BOND : <%ld>", SQLROWCOUNT);

   if ( fn_committran( c_ServiceName, i_trnsctn,c_errmsg ) == -1 )
   {
     fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
     fn_errlog ( c_ServiceName, "S31590", LIBMSG, c_errmsg );
     return -1;
   }
  }
  else
  {
    fn_userlog(c_ServiceName,"Data is already populated : Product NCD for  date :%s:",c_trd_dt);
  }
 
  /**** Ver 1.3 Ends here ****/

  l_rec_cnt=0;

  EXEC SQL
     SELECT count(rowid)
       INTO :l_rec_cnt
       FROM ETR_EMP_TRANS_RPT
      WHERE ETR_RPT_DT = :c_trd_dt
       AND  ETR_PRD_CD = 'IPO'
       AND  ETR_CORP_NAME NOT IN ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC') ;					 /** Ver 1.8 ***/ /** Ver 2.0 SPG**/  /** ver 3.1 BNY **/ /** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0  FIL **//** ver 4.3 fil   mailer    **/   /** Ver 4.5 NSER and NSFS added **/ /** Ver 4.8 Ares and INV **/    /** Ver 4.9 TVPL,FTI AND NASD added **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** Ver 5.1 AGMI **/  /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/ 

   if( SQLCODE != 0 )
   {
     fn_errlog(c_ServiceName,"S31595",SQLMSG,c_errmsg);
     return -1;
   }

   if( l_rec_cnt == 0 )
   {
     fn_userlog(c_ServiceName,"Populating the data : Product IPO for  date :%s:",c_trd_dt);

   /** i_trnsctn= fn_begintran( c_ServiceName, c_errmsg ); *** Commented for Ver 2.6 **/
	 i_trnsctn = tpbegin(TRAN_TIME,0); /** Added in Ver 2.6 **/
   if ( i_trnsctn == -1 )
   {
     fn_errlog ( c_ServiceName, "S31600", LIBMSG, c_errmsg );
     return -1;
   }

   /*** Inserting Allocated Transactions ***/

   EXEC SQL
      INSERT INTO ETR_EMP_TRANS_RPT
         (
           ETR_CORP_NAME,
           ETR_PRD_CD,
           ETR_RPT_DT,
           ETR_MTCH_ACCNT,
           ETR_EMP_NAME,
           ETR_PAN_NO,
           ETR_DP_CLNT_ID,
           ETR_TRD_DT,
           ETR_ORDR_NO,
           ETR_TRD_EXEC_NO,
           ETR_TRD_QTY,
           ETR_SEC_TRD_PRC,
           ETR_TRD_VAL,
           ETR_POS_STTS, 
           ETR_CMPNY_NAME
         )
         (  /*** Ver 1.3 Starts here ***/
          SELECT CMPY_ID,
                 TRNS_TYP,
                 TRD_DT,
                 MATCH_ACCOUNT,
 								 EMP_NAME,
                 PAN_NO,
                 DP_ID,
                 RQST_DT,
                 APPLN_NO,
                 TRN_ID,
                 ALLOCATED_QTY,
                 Price,
                 Value,
                 Stts,
                 SEC_DESC
          FROM
          (  /*** Ver 1.3 Ends Here ***/
           select
            trim(ITE_CMPY_ID) CMPY_ID,
            DECODE(IPO_CMP_ISS_TYPE,'S','BOND','IPO') TRNS_TYP, /** Ver 3.2 uncomment ver 2.8 comment **/
						/** 'IPO' TRNS_TYP, ** Ver 3.2 comment ***/
            :c_trd_dt TRD_DT,
            IPO_MATCH_ACC MATCH_ACCOUNT,
            ITE_EMP_NAME EMP_NAME,
            ITE_PAN_NO PAN_NO, 
            ipo_dp_id||'-'||ipo_dp_acc DP_ID, 
            IPO_TRN_DATE RQST_DT,
            nvl(ipo_trn_app_no,'-') APPLN_NO,
            ipo_trn_id TRN_ID,
            /*decode(nvl(ipo_trn_asba_flg,'N'),'Y',nvl(iad_shares_allot,0),'N',decode(ipo_cmp_iss_type,'X',nvl(IPO_TRN_ALLCTD_QTY,0),nvl(IPO_RFND_SHARES_ALLTD,'0'))) ALLOCATED_QTY,  ** Ver 2.7 commnet **/
						 nvl(iad_shares_allot,0) ALLOCATED_QTY,			/** Ver 2.7 **/
            /* DECODE(IPO_CMP_ISS_TYPE,'S',NVL(IPO_OPT1_PRC,0),IAD_DEBIT_AMT/IAD_SHARES_ALLOT)  Price,**** Ver 1.3 comment ***/
            /*DECODE(ipo_trn_asba_flg,'Y',NVL(IAD_RT,0),IPO_OPT1_PRC) Price,  *** ver 1.3 ** ** Ver 2.7 comment **/
            NVL(IAD_RT,0) Price,  /*** ver 2.7 **/
            /*decode(nvl(ipo_trn_asba_flg,'N'),'Y',nvl(IAD_DEBIT_AMT,0),'N',decode(ipo_cmp_iss_type,'X',nvl(ipo_rfnd_applcn_amt,0),nvl(IPO_RFND_SHARES_ALLTD,'0')*NVL(IPO_OPT1_PRC,0))) Value, 		** Ver 2.7 comment **/
            nvl(IAD_DEBIT_AMT,0) Value,					/** Ver 2.7 **/
            'A' Stts,  /*** Alloted stts **/
            IPO_CMP_DESC SEC_DESC
          FROM  IPO_TRANSACTIONS,
                ipo_company_master,
                ipo_allot_dtls,
                /*ipo_refund_dtls, **Ver 2.7 comment **/
                ITE_INSD_TRD_EMP_MSTR,
                IOM_INFO_ORGANIZATION_MSTR
          WHERE IPO_MATCH_ACC = nvl(ITE_MTCH_ACCNT,'NA')
            AND ITE_AUTHRZTN_FLG='Y'
            AND rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')				 /** Ver 1.8 ***/ /** ver 2.0 **/  /** ver 3.1 BNY **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0  FIL **//** ver 4.3 fil mailer **/     /** Ver 4.5 NSERand NSFS added **/      /** ver 4.8 Ares and INV **/   /** Ver 4.9 TVPL,FTI AND NASD added **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** Ver 5.1 AGMI **/ /** ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/
            AND rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
            AND IOM_CORPRT_EMAIL_IDES IS NOT NULL
            AND ipo_cmp_cd   =  ipo_trn_cmp_cd
            AND ipo_trn_iss_cd = ipo_cmp_iss_cd
            AND ipo_trn_cmp_cd = iad_cmp_cd 					/** ver 2.7 outer join removed **/
            AND ipo_trn_iss_cd = iad_iss_cd						/** ver 2.7 outer join removed **/
            AND ipo_trn_id     = iad_trn_id 					/** ver 2.7 outer join removed **/
            /*AND ipo_trn_cmp_cd = ipo_rfnd_cmp_cd (+)
            AND ipo_trn_iss_cd = ipo_rfnd_iss_cd (+)
            AND ipo_match_acc  = ipo_rfnd_match_accno(+)
            AND ipo_dp_id      = nvl(IPO_RFND_DP_ID,ipo_dp_id)
            AND ipo_dp_acc     = nvl(IPO_RFND_DP_ACC,ipo_dp_acc)   ** Ver 2.7 comment **/
            AND ipo_trn_status = 'E' 
            /*AND DECODE(nvl(ipo_trn_asba_flg,'N'),'Y',trunc(IAD_PAYIN_DT) ,'N',trunc(IPO_RFND_ENT_DT)) = :c_trd_dt *Ver 2.7*/
            AND trunc(IAD_PAYIN_DT) = :c_trd_dt						/** ver 2.7 **/
            AND  trunc(IPO_TRN_DATE) >= to_date(:c_trd_dt,'dd-Mon-yyyy') -60      /* Ver 2.5 */
         UNION
           select
            trim(ITE_CMPY_ID) CMPY_ID,
            DECODE(IPO_CMP_ISS_TYPE,'S','BOND','IPO') TRNS_ID,  /**** Ver 3.2 uncomment Ver 2.8 comment **/
            /** 'IPO' TRNS_TYP, ** Ver 3.2 comment***/
            :c_trd_dt TRD_DT,
            IPO_MATCH_ACC MATCH_ACCOUNT,
            ITE_DEPENDENT_EMP_NAME EMP_NAME,
            ITE_DEPENDENT_PAN_NO PAN_NO, 
            ipo_dp_id||'-'||ipo_dp_acc DP_ID,
            IPO_TRN_DATE RQST_DT,
            nvl(ipo_trn_app_no,'-') APPLN_NO,
            ipo_trn_id TRN_ID,
            /*decode(nvl(ipo_trn_asba_flg,'N'),'Y',nvl(iad_shares_allot,0),'N',decode(ipo_cmp_iss_type,'X',nvl(IPO_TRN_ALLCTD_QTY,0),nvl(IPO_RFND_SHARES_ALLTD,'0'))) ALLOCATED_QTY,  ***  Ver 2.7 comment **/
            nvl(iad_shares_allot,0) ALLOCATED_QTY, 				/** ver 2.7 **/
            /*DECODE(IPO_CMP_ISS_TYPE,'S',NVL(IPO_OPT1_PRC,0),IAD_DEBIT_AMT/IAD_SHARES_ALLOT)  Price,**** ver 1.3 comment ***/
            /*DECODE(ipo_trn_asba_flg,'Y',NVL(IAD_RT,0),IPO_OPT1_PRC) Price,   ** Ver 1.3 **  Ver 2.7 comment **/
            NVL(IAD_RT,0) Price,   /** Ver 2.7 **/ 
            /*decode(nvl(ipo_trn_asba_flg,'N'),'Y',nvl(IAD_DEBIT_AMT,0),'N',decode(ipo_cmp_iss_type,'X',nvl(ipo_rfnd_applcn_amt,0),nvl(IPO_RFND_SHARES_ALLTD,'0')*NVL(IPO_OPT1_PRC,0))) Value,  ** Ver 2.7 comment **/
            nvl(IAD_DEBIT_AMT,0) Value,				/** Ver 2.7 **/
            'A' Stts,  /*** Alloted stts **/
            IPO_CMP_DESC SEC_DESC
          FROM  IPO_TRANSACTIONS,
                ipo_company_master,
                ipo_allot_dtls,
                /**ipo_refund_dtls,						** Ver 2.7 comment **/
                ITE_INSD_TRD_EMP_MSTR, 
                IOM_INFO_ORGANIZATION_MSTR 
          WHERE IPO_MATCH_ACC = nvl(ITE_RELATIVE_MTCH,'NA')
            AND ITE_AUTHRZTN_FLG='Y'
            AND rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')    /** Ver 1.8 ***/ /** Ver 2.0 **/  /** ver 3.1 BNY **/ /** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0  FIL **//** ver 4.3 fil mailer  **/ /** Ver 4.5 NSER and NSFS added **/    /** Ver 4.8 Ares and INV **/ /** Ver 4.9 TVPL,FTI AND NASD added **/  /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** Ver 5.1 AGMI **/ /** Ver 5.5 MGCS  added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/
            AND rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
            AND IOM_CORPRT_EMAIL_IDES IS NOT NULL
            AND ipo_cmp_cd   =  ipo_trn_cmp_cd
            AND ipo_trn_iss_cd = ipo_cmp_iss_cd
            AND ipo_trn_cmp_cd = iad_cmp_cd 					/** ver 2.7 outer join removed **/
            AND ipo_trn_iss_cd = iad_iss_cd 					/** ver 2.7 outer join removed **/
            AND ipo_trn_id     = iad_trn_id 					/** ver 2.7 outer join removed **/
            /*AND ipo_trn_cmp_cd = ipo_rfnd_cmp_cd (+)
            AND ipo_trn_iss_cd = ipo_rfnd_iss_cd (+)
            AND ipo_match_acc  = ipo_rfnd_match_accno(+)
            AND ipo_dp_id      = nvl(IPO_RFND_DP_ID,ipo_dp_id)
            AND ipo_dp_acc     = nvl(IPO_RFND_DP_ACC,ipo_dp_acc) ** Ver 2.7 comment **/
            AND ipo_trn_status = 'E'
            /*AND DECODE(nvl(ipo_trn_asba_flg,'N'),'Y',trunc(IAD_PAYIN_DT) ,'N',trunc(IPO_RFND_ENT_DT)) = :c_trd_dt ** ver 2.7 comment**/
            AND trunc(IAD_PAYIN_DT) = :c_trd_dt			/** Ver 2.7 **/
            AND  trunc(IPO_TRN_DATE) >= to_date(:c_trd_dt,'dd-Mon-yyyy') -60      /* Ver 2.5 */
          )
          where ALLOCATED_QTY != 0  /*** Ver 1.3 ***/
         );
   if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
   {
     fn_errlog(c_ServiceName,"S31605",SQLMSG,c_errmsg);
     /** fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg); ** Commented for Ver 2.6 **/
		 tpabort(0);	/** Added for Ver 2.6 **/
     return -1;
   }
   fn_userlog (c_ServiceName,"Record inserted in IPO : <%ld>", SQLROWCOUNT);

		/** Ver 2.7 starts ****/
   EXEC SQL
      INSERT INTO ETR_EMP_TRANS_RPT
         (
           ETR_CORP_NAME,
           ETR_PRD_CD,
           ETR_RPT_DT,
           ETR_MTCH_ACCNT,
           ETR_EMP_NAME,
           ETR_PAN_NO,
           ETR_DP_CLNT_ID,
           ETR_TRD_DT,
           ETR_ORDR_NO,
           ETR_TRD_EXEC_NO,
           ETR_TRD_QTY,
           ETR_SEC_TRD_PRC,
           ETR_TRD_VAL,
           ETR_POS_STTS,
           ETR_CMPNY_NAME
         )
         (
          SELECT CMPY_ID,
                 TRNS_TYP,
                 TRD_DT,
                 MATCH_ACCOUNT,
                 EMP_NAME,
                 PAN_NO,
                 DP_ID,
                 RQST_DT,
                 APPLN_NO,
                 TRN_ID,
                 ALLOCATED_QTY,
                 Price,
                 Value,
                 Stts,
                 SEC_DESC
          FROM
				(
					select
								trim(ITE_CMPY_ID) CMPY_ID,
                DECODE(IPO_CMP_ISS_TYPE,'S','BOND','IPO') TRNS_TYP,  /**** Ver 3.2 uncomment Ver 2.8 comment **/
 								/*** 'BOND' TRNS_TYP, *** Ver 3.2 comment ***/
 								:c_trd_dt TRD_DT,
 								IPO_MATCH_ACC MATCH_ACCOUNT,
 								ITE_EMP_NAME EMP_NAME,
 								ITE_PAN_NO PAN_NO,
 								ipo_dp_id||'-'||ipo_dp_acc DP_ID,
 								IPO_TRN_DATE RQST_DT,
 								nvl(ipo_trn_app_no,'-') APPLN_NO,
 								ipo_trn_id TRN_ID,
 								nvl(IPO_RFND_SHARES_ALLTD,'0') ALLOCATED_QTY,
 								nvl(IPO_OPT1_PRC,0) Price,
 								nvl(IPO_RFND_SHARES_ALLTD,'0')*NVL(IPO_OPT1_PRC,0) Value,
 								'A' Stts,
 								IPO_CMP_DESC SEC_DESC
					FROM  IPO_TRANSACTIONS,
     						ipo_company_master,
     						ipo_refund_dtls,
      					ITE_INSD_TRD_EMP_MSTR,
     						IOM_INFO_ORGANIZATION_MSTR
					WHERE IPO_MATCH_ACC = nvl(ITE_MTCH_ACCNT,'NA')
 					AND 	ITE_AUTHRZTN_FLG='Y'
 					AND 	rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')  /** ver 3.1 BNY **//** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0   FIL **//** ver 4.3 fil mailer **/ /** Ver 4.5 NSER and NSFS added **/    /** Ver 4.8 Ares and INV **/  /** Ver 4.9 TVPL,FTI AND NASD added **/  /** Ver 5.0 MMLI **/ /** ver 5.2 ARCE **/ /** Ver 5.1 AGMI **/ /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/
 					AND 	rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
 					AND 	IOM_CORPRT_EMAIL_IDES IS NOT NULL
 					AND 	ipo_match_acc  = ipo_rfnd_match_accno
 					AND 	ipo_cmp_cd     = ipo_trn_cmp_cd
 					AND 	ipo_trn_iss_cd = ipo_cmp_iss_cd
 					AND 	ipo_trn_cmp_cd = IPO_RFND_CMP_CD
 					AND 	ipo_trn_iss_cd = IPO_RFND_ISS_CD
 					AND 	ipo_trn_status = 'E'
 					AND 	trunc(IPO_RFND_ENT_DT) = :c_trd_dt
 					AND  	trunc(IPO_TRN_DATE) >= to_date(:c_trd_dt,'dd-Mon-yyyy') -60

					UNION

					select
								trim(ITE_CMPY_ID) CMPY_ID,
                DECODE(IPO_CMP_ISS_TYPE,'S','BOND','IPO') TRNS_TYP,  /**** Ver 3.2 uncomment Ver 2.8 comment **/
 								/*** 'BOND' TRNS_TYP,  *** Ver 3.2 comment ***/
 								:c_trd_dt TRD_DT,
 								IPO_MATCH_ACC MATCH_ACCOUNT,
 								ITE_EMP_NAME EMP_NAME,
 								ITE_PAN_NO PAN_NO,
 								ipo_dp_id||'-'||ipo_dp_acc DP_ID,
 								IPO_TRN_DATE RQST_DT,
 								nvl(ipo_trn_app_no,'-') APPLN_NO,
 								ipo_trn_id TRN_ID,
 								nvl(IPO_RFND_SHARES_ALLTD,'0') ALLOCATED_QTY,
 								nvl(IPO_OPT1_PRC,0) Price,
 								nvl(IPO_RFND_SHARES_ALLTD,'0')*NVL(IPO_OPT1_PRC,0) Value,
 							  'A' Stts,
 								IPO_CMP_DESC SEC_DESC
								FROM  IPO_TRANSACTIONS,
     						ipo_company_master,
     						ipo_refund_dtls,
      					ITE_INSD_TRD_EMP_MSTR,
     						IOM_INFO_ORGANIZATION_MSTR
					WHERE IPO_MATCH_ACC = nvl(ITE_RELATIVE_MTCH,'NA')
 					AND 	ITE_AUTHRZTN_FLG='Y'
 					AND 	rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC') /** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0   FIL **//** ver 4.3 fil mailer **/  /** Ver 4.5 NSER and NSFS added **/    /** Ver 4.8 Ares and INV **/  /** Ver 4.9 TVPL,FTI AND NASD added **/ /**Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** Ver 5.1 AGMI **/ /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/
 					AND 	rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
 					AND   IOM_CORPRT_EMAIL_IDES IS NOT NULL
 					AND 	ipo_match_acc  = ipo_rfnd_match_accno
 					AND 	ipo_cmp_cd   =  ipo_trn_cmp_cd
 					AND 	ipo_trn_iss_cd = ipo_cmp_iss_cd
 					AND 	ipo_trn_cmp_cd = IPO_RFND_CMP_CD
 					AND 	ipo_trn_iss_cd = IPO_RFND_ISS_CD
 					AND 	ipo_trn_status = 'E'
 					AND 	trunc(IPO_RFND_ENT_DT) = :c_trd_dt
 					AND  	trunc(IPO_TRN_DATE) >= to_date(:c_trd_dt,'dd-Mon-yyyy') - 60
				));
   if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
   {
     fn_errlog(c_ServiceName,"S31610",SQLMSG,c_errmsg);
		 tpabort(0);	
     return -1;
   }
   fn_userlog (c_ServiceName,"Record inserted in BOND: <%ld>", SQLROWCOUNT);
	/** Ver 2.7 Ends **/
   EXEC SQL
   UPDATE ETR_EMP_TRANS_RPT
      SET ETR_ISIN_NO = ( SELECT SEM_MAP_VL FROM sem_stck_map,ipo_company_master WHERE IPO_CMP_DESC = ETR_CMPNY_NAME AND IPO_CMP_STCK_CD =SEM_STCK_CD AND SEM_ENTTY=10 )
    WHERE ETR_PRD_CD in ( 'IPO','BOND')
      AND ETR_ISIN_NO is NULL
      AND ETR_RPT_DT = :c_trd_dt;

   if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
   {
     fn_errlog(c_ServiceName,"S31615",SQLMSG,c_errmsg);
     /** fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg); ** Commented for Ver 2.6 **/
		 tpabort(0);	/** Added for Ver 2.6 **/
     return -1;
   } 
   
   fn_userlog (c_ServiceName,"ISIN No. Updated for IPO : <%ld>", SQLROWCOUNT);

   /**** Fetching Applied IPO Transactions ****/
   EXEC SQL
   DECLARE Cur_Applied_IPO_TRNS CURSOR FOR
   SELECT
           trim(ITE_CMPY_ID),
           IPO_MATCH_ACC MATCH_ACCOUNT,
           ITE_EMP_NAME,
           ITE_PAN_NO,
           ipo_dp_id||'-'||ipo_dp_acc DP_ID,
           to_char(IPO_TRN_DATE,'dd-Mon-yyyy hh24:mi:ss') RQST_DT,
           nvl(ipo_trn_app_no,'-') APPLN_NO,
           ipo_trn_id TRN_ID,
           NVL(IPO_OPT1_QTY,0) APPLIED_QTY_1,
           NVL(IPO_OPT1_PRC,0) APPLIED_PRICE_1,
           NVL(IPO_OPT2_QTY,0) APPLIED_QTY_2,
           NVL(IPO_OPT2_PRC,0) APPLIED_PRICE_2,
           NVL(IPO_OPT3_QTY,0) APPLIED_QTY_3,
           NVL(IPO_OPT3_PRC,0) APPLIED_PRICE_3,
           NVL(IPO_OPT4_QTY,0) APPLIED_QTY_4,
            NVL(IPO_OPT4_PRC,0) APPLIED_PRICE_4,
            NVL(IPO_OPT5_QTY,0) APPLIED_QTY_5,
            NVL(IPO_OPT5_PRC,0) APPLIED_PRICE_5,
            NVL(IPO_OPT6_QTY,0) APPLIED_QTY_6,
            NVL(IPO_OPT6_PRC,0) APPLIED_PRICE_6,
            NVL(IPO_OPT7_QTY,0) APPLIED_QTY_7,
            NVL(IPO_OPT7_PRC,0) APPLIED_PRICE_7,
            NVL(IPO_OPT8_QTY,0) APPLIED_QTY_8,
            NVL(IPO_OPT8_PRC,0) APPLIED_PRICE_8,
            NVL(IPO_OPT9_QTY,0) APPLIED_QTY_9,
            NVL(IPO_OPT9_PRC,0) APPLIED_PRICE_9,
            NVL(IPO_OPT10_QTY,0) APPLIED_QTY_10,
            NVL(IPO_OPT10_PRC,0) APPLIED_PRICE_10,
            NVL(IPO_OPT11_QTY,0) APPLIED_QTY_11,
            NVL(IPO_OPT11_PRC,0) APPLIED_PRICE_11,
            NVL(IPO_OPT12_QTY,0) APPLIED_QTY_12,
            NVL(IPO_OPT12_PRC,0) APPLIED_PRICE_12,
           ( NVL(IPO_OPT1_QTY,0) * NVL(IPO_OPT1_PRC,0) ) Value_1,
           ( NVL(IPO_OPT2_QTY,0) * NVL(IPO_OPT2_PRC,0) ) Value_2,
           ( NVL(IPO_OPT3_QTY,0) * NVL(IPO_OPT3_PRC,0) ) Value_3,
           ( NVL(IPO_OPT4_QTY,0) * NVL(IPO_OPT4_PRC,0) ) Value_4,
            ( NVL(IPO_OPT5_QTY,0) * NVL(IPO_OPT5_PRC,0) ) Value_5,
            ( NVL(IPO_OPT6_QTY,0) * NVL(IPO_OPT6_PRC,0) ) Value_6,
            ( NVL(IPO_OPT7_QTY,0) * NVL(IPO_OPT7_PRC,0) ) Value_7,
            ( NVL(IPO_OPT8_QTY,0) * NVL(IPO_OPT8_PRC,0) ) Value_8,
            ( NVL(IPO_OPT9_QTY,0) * NVL(IPO_OPT9_PRC,0) ) Value_9,
            ( NVL(IPO_OPT10_QTY,0) * NVL(IPO_OPT10_PRC,0) ) Value_10,
            ( NVL(IPO_OPT11_QTY,0) * NVL(IPO_OPT11_PRC,0) ) Value_11,
            ( NVL(IPO_OPT12_QTY,0) * NVL(IPO_OPT12_PRC,0) ) Value_12,
            IPO_CMP_DESC SEC_DESC,
            IPO_CMP_ISS_TYPE
      FROM  IPO_TRANSACTIONS,
            ipo_company_master,
            ITE_INSD_TRD_EMP_MSTR,
            IOM_INFO_ORGANIZATION_MSTR
      WHERE IPO_MATCH_ACC = nvl(ITE_MTCH_ACCNT,'NA')
        AND ITE_AUTHRZTN_FLG='Y'
        AND rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')       /** Ver 1.8 ***/ /** Ver 2.0 **/  /** ver 3.1 BNY **/ /** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0  FIL **//** ver 4.3 fil mailer  **/ /** Ver 4.5 NSER and NSFS added **/    /** Ver 4.8 Ares and INV **/ /** Ver 4.9 TVPL,FTI AND NASD added **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **/ /** Ver 5.1 AGMI **/ /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/ 
        AND rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
        AND IOM_CORPRT_EMAIL_IDES IS NOT NULL
        AND ipo_cmp_cd   =  ipo_trn_cmp_cd
        AND ipo_trn_iss_cd = ipo_cmp_iss_cd
        AND ipo_trn_status = 'E'
        AND ipo_cmp_iss_type in ('I','B','S')
        AND decode(IPO_CMP_ISS_TYPE,'S',trunc(IPO_DWNLD_DT),trunc(IPO_BID1_UPLD_DT)) = :c_trd_dt 
        AND trunc(IPO_TRN_DATE) >= to_date(:c_trd_dt,'dd-Mon-yyyy') -60      /* Ver 2.5 */
    UNION
      select
            trim(ITE_CMPY_ID),
            IPO_MATCH_ACC MATCH_ACCOUNT,
            /** ITE_EMP_NAME,  ** ver 1.5 ***/
            ITE_DEPENDENT_EMP_NAME,   /*** Ver 1.5 ***/
            /** ITE_PAN_NO,  ** Ver 1.5 **/
            ITE_DEPENDENT_PAN_NO,   /*** Ver 1.5 ***/
            ipo_dp_id||'-'||ipo_dp_acc DP_ID,
            to_char(IPO_TRN_DATE,'dd-Mon-yyyy hh24:mi:ss') RQST_DT,
            nvl(ipo_trn_app_no,'-') APPLN_NO,
            ipo_trn_id TRN_ID,
             NVL(IPO_OPT1_QTY,0) APPLIED_QTY_1,  /*** Ver 1.3 starts here *** nvl added ***/
           NVL(IPO_OPT1_PRC,0) APPLIED_PRICE_1,
           NVL(IPO_OPT2_QTY,0) APPLIED_QTY_2,
           NVL(IPO_OPT2_PRC,0) APPLIED_PRICE_2,
           NVL(IPO_OPT3_QTY,0) APPLIED_QTY_3,
           NVL(IPO_OPT3_PRC,0) APPLIED_PRICE_3,
           NVL(IPO_OPT4_QTY,0) APPLIED_QTY_4,
            NVL(IPO_OPT4_PRC,0) APPLIED_PRICE_4,
            NVL(IPO_OPT5_QTY,0) APPLIED_QTY_5,
            NVL(IPO_OPT5_PRC,0) APPLIED_PRICE_5,
            NVL(IPO_OPT6_QTY,0) APPLIED_QTY_6,
            NVL(IPO_OPT6_PRC,0) APPLIED_PRICE_6,
            NVL(IPO_OPT7_QTY,0) APPLIED_QTY_7,
            NVL(IPO_OPT7_PRC,0) APPLIED_PRICE_7,
            NVL(IPO_OPT8_QTY,0) APPLIED_QTY_8,
            NVL(IPO_OPT8_PRC,0) APPLIED_PRICE_8,
            NVL(IPO_OPT9_QTY,0) APPLIED_QTY_9,
            NVL(IPO_OPT9_PRC,0) APPLIED_PRICE_9,
            NVL(IPO_OPT10_QTY,0) APPLIED_QTY_10,
            NVL(IPO_OPT10_PRC,0) APPLIED_PRICE_10,
            NVL(IPO_OPT11_QTY,0) APPLIED_QTY_11,
            NVL(IPO_OPT11_PRC,0) APPLIED_PRICE_11,
            NVL(IPO_OPT12_QTY,0) APPLIED_QTY_12,
            NVL(IPO_OPT12_PRC,0) APPLIED_PRICE_12,
						( NVL(IPO_OPT1_QTY,0) * NVL(IPO_OPT1_PRC,0) ) Value_1,
           ( NVL(IPO_OPT2_QTY,0) * NVL(IPO_OPT2_PRC,0) ) Value_2,
           ( NVL(IPO_OPT3_QTY,0) * NVL(IPO_OPT3_PRC,0) ) Value_3,
           ( NVL(IPO_OPT4_QTY,0) * NVL(IPO_OPT4_PRC,0) ) Value_4,
            ( NVL(IPO_OPT5_QTY,0) * NVL(IPO_OPT5_PRC,0) ) Value_5,
            ( NVL(IPO_OPT6_QTY,0) * NVL(IPO_OPT6_PRC,0) ) Value_6,
            ( NVL(IPO_OPT7_QTY,0) * NVL(IPO_OPT7_PRC,0) ) Value_7,
            ( NVL(IPO_OPT8_QTY,0) * NVL(IPO_OPT8_PRC,0) ) Value_8,
            ( NVL(IPO_OPT9_QTY,0) * NVL(IPO_OPT9_PRC,0) ) Value_9,
            ( NVL(IPO_OPT10_QTY,0) * NVL(IPO_OPT10_PRC,0) ) Value_10,
            ( NVL(IPO_OPT11_QTY,0) * NVL(IPO_OPT11_PRC,0) ) Value_11,
            ( NVL(IPO_OPT12_QTY,0) * NVL(IPO_OPT12_PRC,0) ) Value_12,  /*** Ver 1.3 nvl added end here ***/
             IPO_CMP_DESC SEC_DESC,
             IPO_CMP_ISS_TYPE
       FROM  IPO_TRANSACTIONS,
             ipo_company_master,
             ITE_INSD_TRD_EMP_MSTR,
             IOM_INFO_ORGANIZATION_MSTR
      WHERE IPO_MATCH_ACC = nvl(ITE_RELATIVE_MTCH,'NA')
        AND ITE_AUTHRZTN_FLG='Y'
        AND rtrim(ITE_CMPY_ID) not in ('SUNG','MILL','SPG','MACQ','BNY','AQR','GMO','MORN','BAIN','BLPC','SSBT'/**'FIL'**/,'NSER','NSFS','ARES','INV','TVPL','FTI','NASD','MMLI','ARCE','AGMI','NCAP','NFIN','NFIX','MGCS','CEAL','TDBG','TAML','MLIC')       /** Ver 1.8 ***/ /** Ver 2.0 **/  /** ver 3.1 BNY **/ /** Ver 3.4 AQR **//** Ver 3.6 GMO & MORN **/ /** Ver 3.9 SSBT **//** Ver 4.0  FIL **//** ver 4.3 fil mailer  **/ /** Ver 4.5 NSER and NSFS added **/    /** Ver 4.8 Ares and INV **/ /** Ver 4.9 TVPL,FTI AND NASD added **/ /** Ver 5.0 MMLI **/ /** Ver 5.2 ARCE **//** Ver 5.1 AGMI **/ /** Ver 5.5 MGCS added **//** ver 5.6 CEAL added **//** Ver 5.7 TDBG added **//** ver 5.8 TAML Added **/ /** Ver 5.9 MLIC added **/ 
        AND rtrim(ITE_CMPY_ID) = IOM_ORGANIZATION_CODE
        AND IOM_CORPRT_EMAIL_IDES IS NOT NULL
        AND ipo_cmp_cd   =  ipo_trn_cmp_cd
        AND ipo_trn_iss_cd = ipo_cmp_iss_cd
        AND ipo_trn_status = 'E'
        AND ipo_cmp_iss_type in ('I','B','S')
        AND decode(IPO_CMP_ISS_TYPE,'S',trunc(IPO_DWNLD_DT),trunc(IPO_BID1_UPLD_DT)) = :c_trd_dt
        AND trunc(IPO_TRN_DATE) >= to_date(:c_trd_dt,'dd-Mon-yyyy') -60;      /* Ver 2.5 */ 
   if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
   {
     fn_errlog(c_ServiceName,"S31620",SQLMSG,c_errmsg);
     /** fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg); ** Commented for Ver 2.6 **/
		 tpabort(0);	/** Added for Ver 2.6 **/
     return -1;
   } 

   EXEC SQL OPEN Cur_Applied_IPO_TRNS;
   if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
   {
     fn_errlog(c_ServiceName,"S31625",SQLMSG,c_errmsg);
     EXEC SQL CLOSE Cur_Applied_IPO_TRNS;
     /** fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg); ** Commented for Ver 2.6 **/
		 tpabort(0);	/** Added for Ver 2.6 **/
     return -1;
   }


  while ( 1 )
  {
   MEMSET(c_rqst_dt);

   EXEC SQL
     FETCH Cur_Applied_IPO_TRNS
     INTO :c_cmpy_id,
          :c_mtch_id,
          :c_emp_name,
          :c_pan_no,
          :c_dp_clntid,
          :c_rqst_dt,
          :c_appln_no,
          :c_trns_id,
          :d_aplid_qt1,
          :d_aplid_prc1,
          :d_aplid_qt2,
          :d_aplid_prc2,
          :d_aplid_qt3,
          :d_aplid_prc3,
          :d_aplid_qt4,
          :d_aplid_prc4,
          :d_aplid_qt5,
          :d_aplid_prc5,
          :d_aplid_qt6,
          :d_aplid_prc6,
          :d_aplid_qt7,
          :d_aplid_prc7,
          :d_aplid_qt8,
          :d_aplid_prc8,
          :d_aplid_qt9,
          :d_aplid_prc9,
          :d_aplid_qt10,
          :d_aplid_prc10,
          :d_aplid_qt11,
          :d_aplid_prc11,
          :d_aplid_qt12,
          :d_aplid_prc12,
          :d_val_1,
          :d_val_2,
          :d_val_3,
          :d_val_4,
          :d_val_5,
          :d_val_6,
          :d_val_7,
          :d_val_8,
          :d_val_9,
          :d_val_10,
          :d_val_11,
          :d_val_12,
          :c_cmp_desc,
          :c_iss_typ;
   if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
   {
     fn_errlog(c_ServiceName,"S31630",SQLMSG,c_errmsg);
     /** fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg); ** Commented for Ver 2.6 **/
		 tpabort(0);	/** Added for Ver 2.6 **/
     EXEC SQL CLOSE Cur_Applied_IPO_TRNS;
     return -1;
   }

   if( SQLCODE == NO_DATA_FOUND )
   {
    fn_userlog ( c_ServiceName, "Inside No data found");
    EXEC SQL CLOSE Cur_Applied_IPO_TRNS;
    break;
   }

   i = 1 ;

   d_apld_qty = 0;
   d_apld_prc = 0;
   d_val      = 0;
  if( c_iss_typ == 'I' || c_iss_typ == 'B' )
  {
   while (i <= 12 )
   {
     if( i == 1 )
     {
       d_apld_qty = d_aplid_qt1;
       d_apld_prc = d_aplid_prc1;
       d_val      = d_val_1;
     }
     else if( i == 2 )
     {
      if( d_aplid_qt2 > d_apld_qty )
      {
        d_apld_qty = d_aplid_qt2;
        d_apld_prc = d_aplid_prc2;
        d_val      = d_val_2;
      }
     }
     else if( i == 3 )
     {
      if( d_aplid_qt3 > d_apld_qty )
      {
        d_apld_qty = d_aplid_qt3;
        d_apld_prc = d_aplid_prc3;
        d_val      = d_val_3;
      }
     }
     else if( i == 4 )
     {
      if( d_aplid_qt4 > d_apld_qty )
      {
        d_apld_qty = d_aplid_qt4;
        d_apld_prc = d_aplid_prc4;
        d_val      = d_val_4;
      }
     }
     else if( i == 5 )
     {
      if( d_aplid_qt5 > d_apld_qty )
      {
        d_apld_qty = d_aplid_qt5;
        d_apld_prc = d_aplid_prc5;
        d_val      = d_val_5;
      }
     }
     else if( i == 6 )
     {
      if( d_aplid_qt6 > d_apld_qty )
      {
        d_apld_qty = d_aplid_qt6;
        d_apld_prc = d_aplid_prc6;
        d_val      = d_val_6;
      }
     }
     else if( i == 7 )
     {
      if( d_aplid_qt7 > d_apld_qty )
      {
        d_apld_qty = d_aplid_qt7;
        d_apld_prc = d_aplid_prc7;
        d_val      = d_val_7;
      }
     }
     else if( i == 8 )
     {
      if( d_aplid_qt8 > d_apld_qty )
      {
        d_apld_qty = d_aplid_qt8;
        d_apld_prc = d_aplid_prc8;
        d_val      = d_val_8;
      }
     }
     else if( i == 9 )
     {
      if( d_aplid_qt9 > d_apld_qty )
      {
        d_apld_qty = d_aplid_qt9;
        d_apld_prc = d_aplid_prc9;
        d_val      = d_val_9;
      }
     }
     else if( i == 10 )
     {
      if( d_aplid_qt10 > d_apld_qty )
      {
        d_apld_qty = d_aplid_qt10;
        d_apld_prc = d_aplid_prc10;
        d_val      = d_val_10;
      }
     }
     else if( i == 11 )
     { 
      if( d_aplid_qt11 > d_apld_qty )
      {
        d_apld_qty = d_aplid_qt11;
        d_apld_prc = d_aplid_prc11;
        d_val      = d_val_11;
      }
     }
     else if( i == 12 )
     {
      if( d_aplid_qt12 > d_apld_qty )
      {
        d_apld_qty = d_aplid_qt12;
        d_apld_prc = d_aplid_prc12;
        d_val      = d_val_12;
      }
     }
    
    i = i + 1 ;     
   } /** End of While **/
  }
  else
  {
    d_apld_qty = d_aplid_qt1 + d_aplid_qt2 + d_aplid_qt3 + d_aplid_qt4 + d_aplid_qt5 + d_aplid_qt6 + d_aplid_qt7 + d_aplid_qt8 + d_aplid_qt9 + d_aplid_qt10 + d_aplid_qt11 + d_aplid_qt12 ;
    d_val = d_val_1 + d_val_2 + d_val_3 + d_val_4 + d_val_5 + d_val_6 + d_val_7 + d_val_8 + d_val_9 + d_val_10 + d_val_11 + d_val_12 ;
    d_apld_prc = d_aplid_prc1;
  }

  if( d_apld_qty != 0 && d_apld_prc != 0 )
  {
     rtrim(c_cmp_desc); 
     rtrim(c_rqst_dt); 
     fn_userlog(c_ServiceName," d_apld_qty :%lf:",d_apld_qty);
     fn_userlog(c_ServiceName," d_apld_prc :%lf:",d_apld_prc);
     fn_userlog(c_ServiceName," d_val :%lf:",d_val);
     fn_userlog(c_ServiceName," c_cmp_desc :%s:",c_cmp_desc);
     fn_userlog(c_ServiceName," c_rqst_dt :%s:",c_rqst_dt);
      
     EXEC SQL
      INSERT INTO ETR_EMP_TRANS_RPT
         (
           ETR_CORP_NAME,
           ETR_PRD_CD,
           ETR_RPT_DT,
           ETR_MTCH_ACCNT,
           ETR_EMP_NAME,
           ETR_PAN_NO,
           ETR_DP_CLNT_ID,
           ETR_TRD_DT,
           ETR_ORDR_NO,
           ETR_TRD_EXEC_NO,
           ETR_TRD_QTY,
           ETR_SEC_TRD_PRC,
           ETR_TRD_VAL,
           ETR_POS_STTS,
           ETR_CMPNY_NAME
         )
         VALUES
         (
          :c_cmpy_id,
          DECODE(:c_iss_typ,'S','BOND','IPO'),
          :c_trd_dt,
          :c_mtch_id,
          :c_emp_name,
          :c_pan_no,
          :c_dp_clntid,
          to_date(:c_rqst_dt,'dd-Mon-yyyy hh24:mi:ss'),
          :c_appln_no,
          :c_trns_id,
          :d_apld_qty,
          :d_apld_prc,
          :d_val,
          'P',
          :c_cmp_desc
         );
    if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog(c_ServiceName,"S31635",SQLMSG,c_errmsg);
      /** fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg); ** Commented for Ver 2.6 **/
			tpabort(0);	/** Added for Ver 2.6 **/
      EXEC SQL CLOSE Cur_Applied_IPO_TRNS;
      return -1;
    }
   }
  }

   EXEC SQL
   UPDATE ETR_EMP_TRANS_RPT
      SET ETR_ISIN_NO = ( SELECT SEM_MAP_VL FROM sem_stck_map,ipo_company_master WHERE IPO_CMP_DESC = ETR_CMPNY_NAME AND IPO_CMP_STCK_CD =SEM_STCK_CD AND SEM_ENTTY=10 )
    WHERE ETR_PRD_CD in ( 'IPO','BOND')
      AND ETR_ISIN_NO is NULL
      AND ETR_RPT_DT = :c_trd_dt;
   if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
   {
     fn_errlog(c_ServiceName,"S31640",SQLMSG,c_errmsg);
     /** fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg); ** Commented for Ver 2.6 **/
		 tpabort(0);	/** Added for Ver 2.6 **/
     return -1;
   }

   fn_userlog (c_ServiceName,"ISIN No. Updated for IPO Applied : <%ld>", SQLROWCOUNT);

   /** if ( fn_committran( c_ServiceName, i_trnsctn,c_errmsg ) == -1 )	** Commented for Ver 2.6 **/
	 if (tpcommit(0) == -1 ) /** Added for Ver 2.6 **/
   {
     /** fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg); ** Commented for Ver 2.6 **/
		 tpabort(0);	/** Added for Ver 2.6 **/
     fn_errlog ( c_ServiceName, "S31645", LIBMSG, c_errmsg );
     return -1;
   }
  }
  else
  {
    fn_userlog(c_ServiceName,"Data is already populated : Product IPO for  date :%s:",c_trd_dt);  
  }

return 0;

}

int fn_othrs_pos_report(char *c_ServiceName,
                        char *c_errmsg,
                        char *c_trd_dt,
                        char *c_comp_cd
                       ) /*** Added in ver 3.0 ***/
{
  long l_count=0;
  int i_trnsctn=0;
	rtrim(c_comp_cd);
  fn_userlog(c_ServiceName,"Inside othr position report generation for :%sL",c_comp_cd);

  EXEC SQL
    SELECT count(rowid)
    INTO  :l_count
    FROM  EPR_EMP_PSTN_RPT
    WHERE trunc(EPR_RPT_DT) = :c_trd_dt
    AND   trim(EPR_CORP_NAME)= :c_comp_cd; 
 
  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_userlog(c_ServiceName,"Failed To Get Current position Data");
    fn_errlog( c_ServiceName, "S31650",SQLMSG, c_errmsg);
    return -1;
  }

  if(l_count > 0 )
  {
    fn_userlog(c_ServiceName,"Exiting as Position data present in Isider table for :%s:",c_trd_dt);
    return -2;
  }

  fn_userlog(c_ServiceName,"Now inserting EQ Position data");

  EXEC SQL
  insert into EPR_EMP_PSTN_RPT
  (
   EPR_CORP_NAME,
   EPR_PRD_CD,
   EPR_RPT_DT,
   EPR_MTCH_ACCNT,
   EPR_BRKR_NAME,
   EPR_SEC_ID,
   EPR_TRD_QTY,
   EPR_ISIN_NO,
   EPR_SEC_DESC,
   EPR_TRD_MRKT_VAL,
   EPR_SEC_EOD_PRC,
   EPR_RLZD_ACC_PRD        /** ver 4.6 incorporate column for exchnage code **/ 
  )
  select
  :c_comp_cd CORP_NAME,
  'EQ' PRDCT,
  :c_trd_dt,
  UPS_CLM_MTCH_ACCNT ACCOUNT_NO,
  'ICICI Securities Ltd.' BROKER_NAME,
  decode(UPS_XCHNG_CD,'NSE',SEM_DTLS.NSESYM ,'BSE',SEM_DTLS.BSECD )  SYMBOL, 
  UPS_QTY_HLD OPEN_QTY,
  SEM_DTLS.ISIN  ISIN,
  STK_STCK_NM SEC_NAME,
  (UPS_AVRG_TRNSCTN_RT * UPS_QTY_HLD) total_price,
  UPS_AVRG_TRNSCTN_RT BUY_PRC,
  UPS_XCHNG_CD                                  /** ver 4.6 exchange code added **/
  from UPS_PRTFLO_SMMRY , STK_STK_MSTR,
  (	select  distinct ITE_MTCH_ACCNT
	  from    ITE_INSD_TRD_EMP_MSTR
	  where   ITE_CMPY_ID= :c_comp_cd  
	  AND     ITE_AUTHRZTN_FLG='Y'
   UNION
    select  distinct ITE_RELATIVE_MTCH 
    from    ITE_INSD_TRD_EMP_MSTR
    where   ITE_CMPY_ID= :c_comp_cd
    AND    ITE_AUTHRZTN_FLG='Y' 
  ) ,
  (SELECT   SEM_STCK_CD,
   MAX (CASE
        WHEN SEM_ENTTY = '1'
        THEN SEM_MAP_VL
        END
       ) NSESYM,
   MAX (CASE
        WHEN SEM_ENTTY = '2'
         THEN SEM_MAP_VL
        END
       ) BSECD,
   MAX (CASE
        WHEN SEM_ENTTY = '10'
        THEN SEM_MAP_VL
        END
       ) ISIN
   FROM SEM_STCK_MAP
   GROUP BY SEM_STCK_CD
  ) SEM_DTLS
  where UPS_CLM_MTCH_ACCNT  = ITE_MTCH_ACCNT
	and SEM_STCK_CD = UPS_STCK_CD
	and STK_STCK_CD=UPS_STCK_CD
	and UPS_QTY_HLD <> 0;

  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_userlog(c_ServiceName,"Failed To Get EQ position Data");
    fn_errlog( c_ServiceName, "S31655",SQLMSG, c_errmsg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
    return -1;
  }




  fn_userlog(c_ServiceName,"Now inserting FNO Position data");

  EXEC SQL
  insert into EPR_EMP_PSTN_RPT
  ( 
   EPR_CORP_NAME,
   EPR_PRD_CD,
   EPR_RPT_DT,
   EPR_POS_DT,
   EPR_MTCH_ACCNT,
   EPR_SEC_TYPE,
   EPR_BRKR_NAME,
   EPR_SEC_ID,
   EPR_TRD_QTY,
	 EPR_SEC_EOD_PRC ,
   EPR_TRD_MRKT_VAL,
   EPR_ISIN_NO,
   EPR_SEC_DESC,
   EPR_OPT_SYMBL,
   EPR_OPT_CD,
   EPR_EXPRY_DT,
   EPR_STRK_PRC
  )
  (
   select 
    :c_comp_cd CORP_NAME,
    'FNO' PRDCT,
    :c_trd_dt,
    trunc(PCP_TM_STMP) Position_date,
    PCP_CLM_MTCH_ACCNT ACCNT_NO,
    PCP_INDSTK Instrument_Typ,
    'ICICI Securities Ltd.' BROKER_NAME,
    decode(PCP_XCHNG_CD,'NFO',SEM_DTLS.NSESYM ,'BFO',SEM_DTLS.BSECD )  SYMBOL, 
    PCP_OPNPSTN_QTY POS_QTY,
	  PCP_AVG_TRD_PRC TRD_PRC,
    (PCP_AVG_TRD_PRC * PCP_OPNPSTN_QTY) total_price,
    SEM_DTLS.ISIN ISIN,
    STK_STCK_NM SEC_NAME,
    decode(pcp_prdct_typ,'O',decode(PCP_XCHNG_CD,'NFO',SEM_DTLS.NSESYM ,'BFO',SEM_DTLS.BSECD),null) OPT_SYMBOL,
    decode(pcp_prdct_typ,'O',pcp_opt_typ,'I',pcp_opt_typ,null) OPT_CD,
    PCP_EXPRY_DT  EXPRY_DT,
    decode(pcp_prdct_typ,'O',PCP_STRK_PRC,'I',PCP_STRK_PRC,null) STRK_PRC
  from PCP_PRTFL_CNTRCT_PRDCT, STK_STK_MSTR,
  (select  distinct ITE_MTCH_ACCNT
   from    ITE_INSD_TRD_EMP_MSTR
   where   ITE_CMPY_ID=:c_comp_cd 
   AND     ITE_AUTHRZTN_FLG='Y'
  UNION
   select  distinct ITE_RELATIVE_MTCH 
   from    ITE_INSD_TRD_EMP_MSTR
   where   ITE_CMPY_ID=:c_comp_cd
   AND     ITE_AUTHRZTN_FLG='Y' 
  ) ,
  (SELECT   SEM_STCK_CD,
   MAX (CASE
      WHEN SEM_ENTTY = '1'
      THEN SEM_MAP_VL
   END
  ) NSESYM,
   MAX (CASE
        WHEN SEM_ENTTY = '14'
        THEN SEM_MAP_VL
   END
       ) BSECD,
   MAX (CASE
        WHEN SEM_ENTTY = '10'
        THEN SEM_MAP_VL
   END
       ) ISIN
   FROM SEM_STCK_MAP
   GROUP BY SEM_STCK_CD
  ) SEM_DTLS
  where PCP_CLM_MTCH_ACCNT  = ITE_MTCH_ACCNT
  and SEM_STCK_CD = PCP_UNDRLYNG
  and STK_STCK_CD=PCP_UNDRLYNG
  and PCP_OPNPSTN_QTY <> 0				
 UNION ALL
 select
  :c_comp_cd CORP_NAME,
  'FNO' PRDCT,
  :c_trd_dt,
  trunc(PCP_TM_STMP) Position_date,
  PCP_CLM_MTCH_ACCNT ACCNT_NO,
  PCP_INDSTK Instrument_Typ,
  'ICICI Securities Ltd.' BROKER_NAME,
  decode(PCP_XCHNG_CD,'NFO',SEM_DTLS.NSESYM ,'BFO',SEM_DTLS.BSECD )  SYMBOL,
  PCP_OPNPSTN_QTY POS_QTY,
  PCP_AVG_TRD_PRC ,
  (PCP_AVG_TRD_PRC * PCP_OPNPSTN_QTY) total_price,
  SEM_DTLS.ISIN ISIN,
  STK_STCK_NM SEC_NAME,
  decode(pcp_prdct_typ,'O',decode(PCP_XCHNG_CD,'NFO',SEM_DTLS.NSESYM ,'BFO',SEM_DTLS.BSECD),null) OPT_SYMBOL,
  decode(pcp_prdct_typ,'O',pcp_opt_typ,'I',pcp_opt_typ,null) OPT_CD,
  PCP_EXPRY_DT EXPRY_DT,
  decode(pcp_prdct_typ,'O',PCP_STRK_PRC,'I',PCP_STRK_PRC,null) STRK_PRC
 from PCP_PRTFL_CNTRCT_PRDCT_HSTRY, STK_STK_MSTR,
 (select  distinct ITE_MTCH_ACCNT
  from    ITE_INSD_TRD_EMP_MSTR
  where   ITE_CMPY_ID=:c_comp_cd 
  AND     ITE_AUTHRZTN_FLG='Y'
  UNION
  select  distinct ITE_RELATIVE_MTCH 
  from    ITE_INSD_TRD_EMP_MSTR
  where   ITE_CMPY_ID=:c_comp_cd
  AND     ITE_AUTHRZTN_FLG='Y' 
 ) ,
 ( SELECT   SEM_STCK_CD,
           MAX (CASE
                WHEN SEM_ENTTY = '1'
                THEN SEM_MAP_VL
                END
                ) NSESYM,
           MAX (CASE
                WHEN SEM_ENTTY = '14'
                THEN SEM_MAP_VL
                END
                ) BSECD,
           MAX (CASE
                WHEN SEM_ENTTY = '10'
                THEN SEM_MAP_VL
                END
               ) ISIN
   FROM SEM_STCK_MAP
   GROUP BY SEM_STCK_CD
 ) SEM_DTLS
  where PCP_CLM_MTCH_ACCNT  = ITE_MTCH_ACCNT
  and SEM_STCK_CD = PCP_UNDRLYNG
  and STK_STCK_CD=PCP_UNDRLYNG
  and PCP_OPNPSTN_QTY <> 0
 );

 if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_userlog(c_ServiceName,"Failed To Get FNO position Data");
    fn_errlog( c_ServiceName, "S31660",SQLMSG, c_errmsg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
    return -1;
  }


 fn_userlog(c_ServiceName,"Now inserting MF Position data");
	EXEC SQL
	insert into EPR_EMP_PSTN_RPT
	(
		EPR_CORP_NAME,
		EPR_PRD_CD,
		EPR_RPT_DT,
		EPR_MTCH_ACCNT,
		EPR_BRKR_NAME,
		EPR_SEC_ID,
		EPR_TRD_QTY,
		EPR_ISIN_NO,
		EPR_SEC_DESC,
    EPR_SEC_EOD_PRC,
    EPR_TRD_MRKT_VAL,
    EPR_SEC_TYPE,      /***'G' for growth and 'D' for dividend ***/
    EPR_POS_PART
	)
  select trim(:c_comp_cd) CORP_NAME,
     'MF' PRDCT,
     :c_trd_dt,
     ACCOUNT_NO,
     BROKER,
     MF_SYMBOL1,
     HOLDING,
     ISIN,
     MF_SYMBOL2,
     NAV,
     Current_Val,
     GROWTH_DIV,
     FOLIO
from
(
 select
 trim(:c_comp_cd) CORP_NAME,
 'MF' PRDCT,
 :c_trd_dt,
 MF_UNB_MATCH_ACC ACCOUNT_NO,
 'ICICI Securities' BROKER,
 MF_SCH_COMP_CD MF_SYMBOL1,
 MF_UNB_NO_OF_UNITS  HOLDING,
 CASE when upper(MF_SCH_TYPE)= 'GROWTH'
      /** then MF_NAV_FUNDISIN ** Ver 4.7 **/
      then NVL(MF_SCH_ISIN,'NA')   /** Ver 4.7 **/
      when upper(MF_SCH_TYPE)= 'DIVIDEND'
      then case when nvl(MF_UNB_REINV_FLG,'N') = 'Y'
               /** then MF_NAV_ISIN_REINVEST ** Ver 4.7 **/
               then NVL(MF_SCH_ISIN_DR,'NA')
               when nvl(MF_UNB_REINV_FLG,'N') = 'N'
               /** then MF_NAV_ISIN_PAYOUT
                   ELSE MF_NAV_FUNDISIN ** Ver 4.7 **/
               then NVL(MF_SCH_ISIN,'NA')
               ELSE NVL(MF_SCH_ISIN,'NA') 
           end
 END ISIN,
 substr(MF_SCH_DESC,1,100) MF_SYMBOL2,
 MF_NAV_NAV NAV,
 (MF_UNB_NO_OF_UNITS *  MF_NAV_NAV ) Current_Val,
 decode(upper(nvl(MF_SCH_TYPE,'GROWTH')),'Dividend','D','GROWTH','G','G') GROWTH_DIV,
 MF_UNB_FOLIO FOLIO
 from MF_UNIT_BAL,MF_SCHEME_MASTER,MF_NAVS
 where  MF_UNB_COMP_CD = MF_SCH_COMP_CD
 and    MF_UNB_SCH_CD = MF_SCH_CD
 and    MF_NAV_COMP_CD = MF_SCH_COMP_CD
 and    MF_NAV_SCH_CD = MF_SCH_CD
 and    MF_UNB_MATCH_ACC in (
                              select  distinct ITE_MTCH_ACCNT
                              from    ITE_INSD_TRD_EMP_MSTR
			      where   ITE_CMPY_ID=:c_comp_cd
                              AND     ITE_AUTHRZTN_FLG='Y'
                              UNION
                              select  distinct ITE_RELATIVE_MTCH
                              from    ITE_INSD_TRD_EMP_MSTR
                              where   ITE_CMPY_ID=:c_comp_cd
                              AND     ITE_AUTHRZTN_FLG='Y'
                             )
  and   MF_UNB_NO_OF_UNITS<>0 ); 

  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
   fn_userlog(c_ServiceName,"Failed To Get MF position Data");
   fn_errlog( c_ServiceName, "S31665",SQLMSG, c_errmsg);
   fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
   return -1;
  }


 fn_userlog(c_ServiceName,"Now inserting BOND Position data");

 EXEC SQL
 insert into EPR_EMP_PSTN_RPT
 (
  EPR_CORP_NAME,
  EPR_PRD_CD,
  EPR_RPT_DT,
  EPR_MTCH_ACCNT,
  EPR_BRKR_NAME,
  EPR_SEC_ID,
  EPR_CUSIP_ID,
  EPR_SEDOL_ID,
  EPR_ISIN_NO,
  EPR_SEC_DESC,
  EPR_TRD_QTY,
  EPR_OPT_SYMBL,
  EPR_OPT_CD,
  EPR_EXPRY_DT,
  EPR_TRD_MRKT_VAL,
  EPR_SEC_EOD_PRC,
  EPR_RLZD_ACC_PRD                                  /** ver 4.6 column incorporate for exchnage code **/
 )
 SELECT :c_comp_cd CORP_NAME,
 'BOND' PRDCT,	
 :c_trd_dt, 
 FPS_CLM_MTCH_ACCNT ACCOUNT_NO,
 'ICICI Securities Ltd.' BROKER_CD,
 --nvl(SEM_DTLS.BND_SYMB,'NULL') SYMBOL ,
 FSM_ISSUER_NM Issuer_NAME,
 null CUSIP,
 null SEDOL,
 nvl(SEM_DTLS.ISIN,null) ISIN , 
 FSM_STCK_NM SEC_NAME,
 ROUND(NVL(FPS_QTY_HLD,0),2) QTY_HOLD,
 null OPT_SYMBOL,
 null OPTN_CD,
 null EXP_DATE,
 (FPS_AVRG_TRNSCTN_RT * FPS_QTY_HLD) total_price,
  FPS_AVRG_TRNSCTN_RT Price,
  FPD_XCHNG_CD                                          /** ver 4.6 exchange code added **/ 
  FROM  FPS_FI_PRTFLO_SMRY,
  FPD_FI_PRTFLO_DTLS,
  FSM_FI_SECURITY_MSTR,
  FCM_FI_CTGRY_MSTR,
  (SELECT   SEM_STCK_CD,
   MAX (CASE
        WHEN SEM_ENTTY = '1'
        THEN SEM_MAP_VL
   END
  ) NSESYM,
   MAX (CASE
        WHEN SEM_ENTTY = '14'
        THEN SEM_MAP_VL
   END
       ) BSECD,
   MAX (CASE
        WHEN SEM_ENTTY = '10'
        THEN SEM_MAP_VL
   END
       )ISIN,
   MAX (CASE
        WHEN SEM_ENTTY = '6'
        THEN SEM_MAP_VL
   END
       ) BND_SYMB
   FROM SEM_STCK_MAP
   GROUP BY SEM_STCK_CD
  ) SEM_DTLS,
  (select distinct ITE_MTCH_ACCNT 
   from ITE_INSD_TRD_EMP_MSTR 
   where ITE_CMPY_ID=:c_comp_cd 
   AND     ITE_AUTHRZTN_FLG='Y' 
   UNION
   select distinct ITE_RELATIVE_MTCH 
   from ITE_INSD_TRD_EMP_MSTR
   where ITE_CMPY_ID=:c_comp_cd
   AND     ITE_AUTHRZTN_FLG='Y'
  )
  WHERE  FPS_CLM_MTCH_ACCNT = ITE_MTCH_ACCNT 
  AND     FPD_CLM_MTCH_ACCNT= FPS_CLM_MTCH_ACCNT
  AND     FPD_USR_ID        = FPS_USR_ID
  AND     FPD_SCRTY_CD      = FPS_SCRTY_CD
  AND  	 FSM_STCK_CD 			 = FPS_SCRTY_CD
  AND     FSM_STCK_MAPCD 	 = SEM_STCK_CD
  AND     FCM_CTGRY_NO      = FSM_CTGRY
  AND     NVL(FPD_DELETE_FLG, 'N')  <> 'Y'
  AND     ROUND(NVL(FPS_QTY_HLD,0),2) <> 0					
  GROUP BY FPS_CLM_MTCH_ACCNT,SEM_DTLS.BND_SYMB,SEM_DTLS.ISIN,FSM_STCK_MAPCD,FSM_STCK_NM,FPS_QTY_HLD,FSM_ISSUER_NM,FPS_AVRG_TRNSCTN_RT,FPD_XCHNG_CD;

if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_userlog(c_ServiceName,"Failed To Get BOND position Data");
    fn_errlog( c_ServiceName, "S31670",SQLMSG, c_errmsg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
    return -1;
  }


 fn_userlog(c_ServiceName,"Now inserting FD Position data");

 EXEC SQL
 insert into EPR_EMP_PSTN_RPT
 (
  EPR_CORP_NAME,
  EPR_PRD_CD,
  EPR_RPT_DT,
  EPR_MTCH_ACCNT,
  EPR_BRKR_NAME,
  EPR_SEDOL_ID,
  EPR_CUSIP_ID,
  EPR_TRD_QTY,
  EPR_TRD_MRKT_VAL,
  EPR_ISIN_NO,
  EPR_EXG_MRKT_ID,
  EPR_SEC_ID,
  EPR_OPT_SYMBL,
  EPR_OPT_CD,
  EPR_EXPRY_DT,
  EPR_SEC_EOD_PRC
 )
 SELECT :c_comp_cd CORP_NAME,
 'FD' PRDCT,	
 :c_trd_dt, 
 FT_TRANS_MATCH_ACC_NO MATCH,
 'ICICI Securities Ltd.' BROKER_CD,
 FT_TRANS_SCH_CD ||'-' || FT_TRANS_FDR_NO FDR_NO,
 null CUSIP,
 FT_TRANS_TRN_AMT  TRAN_QTY,
 FT_TRANS_MAT_AMT Maturity_Amount,
 null,
 'FD' CORP_SEC_ID,
 case when :c_comp_cd='DTTL' then FIM_PROD_ID||'-'||FIM_NAME else FIM_NAME end Issuer_Name,  /** ver 4.6 **/
 null OPT_SYMBOL,
 null OPT_CD,
 FT_TRANS_MAT_DATE Maturity_date,
 FT_TRANS_TRN_AMT Amount_Invested
 FROM    FD_PRT_TRANS,
         FD_ISSUER_MASTER,
         FD_SCHEME_MASTER,
         FD_OPTION_MASTER,
         OVP_ONE_VIEW_PRT_LVL1,
         OVP_ONE_VIEW_PRT_LVL2,
         (select  distinct ITE_MTCH_ACCNT
          from    ITE_INSD_TRD_EMP_MSTR
          where   ITE_CMPY_ID=:c_comp_cd 
	        AND   ITE_AUTHRZTN_FLG='Y'
          UNION
          select  distinct ITE_RELATIVE_MTCH 
          from    ITE_INSD_TRD_EMP_MSTR
          where   ITE_CMPY_ID=:c_comp_cd
          AND ITE_AUTHRZTN_FLG='Y' 
         )
	WHERE   FT_TRANS_MATCH_ACC_NO = ITE_MTCH_ACCNT
  AND     FIM_ISS_CD= FT_TRANS_ISS_CD
	AND     FSM_SCH_CD  = FT_TRANS_SCH_CD
	AND     FSM_ISS_CD  = FT_TRANS_ISS_CD
	AND     FT_TRANS_OPT_CD = FOM_OPT_CD
	AND     FT_TRANS_SCH_CD = FOM_SCH_CD
	AND     FT_TRANS_ISS_CD = FOM_ISS_CD
	AND     OVP_LVL1_CD = FIM_OVP_LVL1_CD
	AND     OVP_LVL2_CD = FIM_OVP_LVL2_CD
	GROUP BY FT_TRANS_MATCH_ACC_NO,FOM_DESC,RTRIM(FSM_DESC), OVP_LVL1_DESC||'-'||OVP_LVL2_DESC,FT_TRANS_PROD_ID,FT_TRANS_OPT_CD,FT_TRANS_SCH_CD,FT_TRANS_ISS_CD,FT_TRANS_FDR_NO,DECODE(FIM_PRDCT_DISP_FLG,'F', 'Corporate FD', 'B', 'GOI Bond', 'I', 'ICICI Bank FD') ,TRIM(FIM_NAME),TRIM(FSM_DESC),TRIM(FOM_DESC) ,FT_TRANS_TRN_AMT ,nvl(TO_CHAR(FT_TRANS_MAT_DATE,'DD/MM/YYYY'),' ') ,FT_TRANS_MAT_AMT ,DECODE(SIGN(FT_TRANS_MAT_DATE-TRUNC(SYSDATE)),-1,0,DECODE(FOM_INT_FREQ,'C', FT_TRANS_TRN_AMT*POWER((1 + (NVL(FT_TRANS_INT_RT,FOM_INT_RATE)/100)/FOM_FREQ_VAL),(((TRUNC(SYSDATE)-TRUNC(FT_TRANS_VALUE_DT))/365)*FOM_FREQ_VAL)), FT_TRANS_TRN_AMT)),NVL(FT_TRANS_INT_RT,0.0),FOM_INT_RATE,FIM_NAME,FT_TRANS_MAT_DATE,FIM_PROD_ID
	HAVING  SUM(decode(rtrim( FT_TRANS_TRN_TYPE),'P',FT_TRANS_TRN_AMT,'R',FT_TRANS_TRN_AMT*-1)) > 0;                                                                                     /* ICICI Bank FD added in Ver 3.5 *//** Ver 4.6 FIM_PROD_ID added **/

 if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_userlog(c_ServiceName,"Failed To Get FD position Data");
    fn_errlog( c_ServiceName, "S31675",SQLMSG, c_errmsg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
    return -1;
  }

  fn_userlog(c_ServiceName,"Now inserting NPS Position data");

  EXEC SQL
  insert into EPR_EMP_PSTN_RPT
  (
   EPR_CORP_NAME,
   EPR_PRD_CD,
   EPR_MTCH_ACCNT,
   EPR_SEC_ID,
   EPR_RPT_DT,
   EPR_SEC_DESC,
   EPR_TRD_QTY,
   EPR_SEC_EOD_PRC,
   EPR_TRD_MRKT_VAL
  )
  select  :c_comp_cd CORP_CD,
         'NPS' PRDCT_CD,
         NUB_NPS_CLM_MTCH_ACC "Match id",
         NPM_NPS_PFM_DESC  "Pension fund manager",
         :c_trd_dt,
         NSM_NPS_SCHEME_DESC "Scheme",
         NUB_NPS_TOT_UNITS  "No of units",
         NNN_NPS_NAVS "NAV",
         NUB_NPS_TOT_UNITS * NNN_NPS_NAVS "Val at cost"
  from  NUB_NPS_UNIT_BAL,
       NPM_NPS_PFM_MSTR,
       ncm_nps_clnt_mstr,
       NSM_NPS_SCHEME_MSTR,
       NNN_NPS_NAVS,
       (select ITE_MTCH_ACCNT MTCH_ID
                              from ITE_INSD_TRD_EMP_MSTR
                              where ITE_CMPY_ID=:c_comp_cd
                              AND  ITE_AUTHRZTN_FLG='Y'
                             UNION
                              select ITE_RELATIVE_MTCH MTCH_ID
                              from ITE_INSD_TRD_EMP_MSTR
                              where ITE_CMPY_ID=:c_comp_cd
                              AND ITE_AUTHRZTN_FLG='Y'
       ) ITE
  where NUB_NPS_PFM_CD = NPM_NPS_PFM_CD
  AND   NUB_NPS_CLM_MTCH_ACC = NCM_NPS_CLM_MTCH_ACC
  AND   ITE.MTCH_ID  = NUB_NPS_CLM_MTCH_ACC
  AND   NSM_NPS_SCHEME_ID = NUB_NPS_SCHM_CD
  AND   NNN_NPS_SCHM_CD = NSM_NPS_SCHEME_ID
  AND   NNN_NPS_PFM_CD = NUB_NPS_PFM_CD
  AND   NNN_NPS_DATE = (select max(NNN_NPS_DATE) from NNN_NPS_NAVS)
  AND   NUB_NPS_TOT_UNITS <> 0;
  
  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_userlog(c_ServiceName,"Failed To Get NPS position Data");
    fn_errlog( c_ServiceName, "S31680",SQLMSG, c_errmsg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_errmsg);
    return -1;
 }

 return 0;
}

int fn_bat_init ( int argc, char *argv[] ) 
{
	fn_var = BAT_INSDR_DTLS;
	return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
	return 0;
}
