/*   Service       : bat_eacnt_click.pc																				                       */
/*                                                                                                   */
/*   Purpose       : Bulk upload of Exersize & Assignments contract notes to click database tables   */
/*                                                                                                   */
/*                                                                                                   */
/*   Input Param   : For date                                                                        */
/*                                                                                                   */
/*   Output        : Success/Failure																					                       */
/*                                                                                                   */
/*   Author        : ICICI Infotech                                                                  */
/*                                                                                                   */
/*   Date          : 24-03-2008                                                                      */
/*                                                                                                   */
/*   Version       :  1.0      Release                                                               */
/*                    1.1   06-Mar-2009 Bug Fix (diwakar)                                            */
/*										1.2		15-Apr-2009	Changes for CRARE28117 (umesh)				                       */
/*                    1.3   22-Feb-2012 BSE ORS (Navina D)                                           */
/*                    1.4   28-may-2014 File Name Changes (Sandip T)                                 */
/*                    1.5   02-Jun-2015 CR-ISEC03-63562CN Name Changes(Sandip T)                     */
/*                    1.6   23-Jan-2017 UCC code population on FNO Daily,EA,                         */
/*                                  		Closeout Contract notes CR-ISEC03-90143 (Vishal B)           */  
/*                    1.7   28-Jun-2017 GST Chnages (Sandip T)                                       */
/*                    1.8   06-Mar-2018 Handling ContractNote Dummy Email (Tanmay Patel)             */
/*                    1.9   11-Jul-2019 Handling Truncate for simultaneous Batch run(Anuj Pancholi)  */
/*****************************************************************************************************/
#include <stdio.h>      /* C Header File                */
#include <stdlib.h>     /* C Header File                */
#include <sqlca.h>      /* Oracle header file           */
#include <atmi.h>       /* TUXEDO Header File           */
#include <fml32.h>      /* TUXEDO Header File           */
#include <Usysflds.h>   /* TUXEDO Field Definitions     */
#include <fml_def.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fml_rout.h>
#include <fn_ddr.h>
#include <eba.h>
#include <string.h>
#include <fn_read_debug_lvl.h>

/* #define MEMSET(A) memset(&A,'\0',sizeof(A));  */
#define MAX_REC 100

FBFR32    *ptr_fml_Sbuffer;
FBFR32    *ptr_fml_Rbuffer;

long    l_bufferlength;
long    li_len_tobuf;
long    l_rows_fetched;

long		l_count_ecm;
long		l_count_ecd;
long		l_count_ead;

int     i_max_rec_per_fetch = MAX_REC;
int     i_ch_val;
int     i_ret_val;
int     i_err[10];

char    c_ServiceName[33];
char    c_errmsg[256];
char    c_xchng_cd[4] = {'\0'};
char    c_for_date[25] = {'\0'};
char    c_event[256];							/** Ver 1.2 **/
unsigned char *c_msg_cbuf;

struct ea_conf_mstr
{
	char		sql_ecm_usr_mtch_accno[20+1];
	char		sql_ecm_excng_cd[3+1];
	char		sql_ecm_cntrct_nmbr[50+1];
	char		sql_ecm_cntrct_dt[24];
	long		l_ecm_record_id;
	char		sql_ecm_filename[50+1];
	char		sql_ecm_usr_nm[150+1];
	char		sql_ecm_add_ln1[100+1];
	char		sql_ecm_add_ln2[100+1];
	char		sql_ecm_add_ln3[100+1];
	char		sql_ecm_add_ln4[100+1];
	char		sql_ecm_ucc_cd[25+1];
	char		sql_ecm_trd_cd[20+1];
	char		sql_ecm_pan_no[50+1];
	char		sql_ecm_tel_no[50+1];
	char		sql_ecm_email_id1[100+1];
	char		sql_ecm_email_id2[100+1];
	char		sql_ecm_msg[50+1];
	double	d_ecm_amount;
	double	d_ecm_total;
	double	d_ecm_stt;
	double  d_stamp_duty;
	double	d_sebi_tt;
	double	d_tran_chrg;
	char    sql_fcm_deal_off_aval_flg;					/** Ver 1.2 **/
	char    sql_ecm_deal_off_addr1[100+1];			/** Ver 1.2 **/
  char    sql_ecm_deal_off_addr2[100+1];			/** Ver 1.2 **/
  char    sql_ecm_deal_off_city[30+1];				/** Ver 1.2 **/
  char    sql_ecm_deal_off_zip[20+1];					/** Ver 1.2 **/
  char    sql_ecm_deal_off_state[30+1];				/** Ver 1.2 **/
  char    sql_ecm_deal_off_cntry[30+1];				/** Ver 1.2 **/
  char    sql_ecm_deal_off_phone[30+1];				/** Ver 1.2 **/
	char    sql_ecm_deal_off_fax[30+1];					/** Ver 1.2 **/
  char    sql_ecm_prncpl_buis_state_cd[2+1];  /** Ver 1.7*/
  char    sql_ecm_prncpl_buis_brnch_cd[10+1]; /** Ver 1.7*/
  char    sql_ecm_cust_gst_st_cd[2+1];     		/** Ver 1.7*/
  char    sql_ecm_isec_gstin[20+1];       		/** Ver 1.7*/
  char    sql_ecm_cust_gstin[20+1];       		/** Ver 1.7*/
	double	d_ecm_igst_prcnt;										/** Ver 1.7 **/
	double	d_ecm_cgst_prcnt;										/** Ver 1.7 **/
	double	d_ecm_sgst_prcnt;										/** Ver 1.7 **/
	double	d_ecm_ugst_prcnt;										/** Ver 1.7 **/
	double	d_ecm_brkrg_igst;										/** Ver 1.7 **/
	double	d_ecm_brkrg_cgst;										/** Ver 1.7 **/
	double	d_ecm_brkrg_sgst;										/** Ver 1.7 **/
	double	d_ecm_brkrg_ugst;										/** Ver 1.7 **/
	double	d_ecm_trn_igst;											/** Ver 1.7 **/
	double	d_ecm_trn_cgst;											/** Ver 1.7 **/
	double	d_ecm_trn_sgst;											/** Ver 1.7 **/
	double	d_ecm_trn_ugst;											/** Ver 1.7 **/
	double	d_ecm_total_igst;										/** Ver 1.7 **/
	double	d_ecm_total_cgst;										/** Ver 1.7 **/
	double	d_ecm_total_sgst;										/** Ver 1.7 **/
	double	d_ecm_total_ugst;										/** Ver 1.7 **/
};

struct ea_conf_dtls
{
  char  	sql_ecd_cntrct_nmbr[50+1];
  char  	sql_ecd_usr_mtch_accno[20+1];
  char  	sql_ecd_cntrct_desc[150+1];
  char  	sql_ecd_ea_dt[24];
  long  	l_ecd_record_id;
  char  	sql_ecd_optn_typ[24+1];
  double  d_ecd_strk_prc;
  double  d_ecd_setlmnt_prc;
  char  	sql_ecd_ea_flg;
  long  	l_ecd_qty;
  double  d_ecd_brkg;
  double  d_ecd_src_tx;
  double  d_ecd_cntrct_amt;
	double	d_ecd_total_igst;										/** Ver 1.7 **/
	double	d_ecd_total_cgst;										/** Ver 1.7 **/
	double	d_ecd_total_sgst;										/** Ver 1.7 **/
	double	d_ecd_total_ugst;										/** Ver 1.7 **/
	double	d_ecd_total_gst;										/** Ver 1.7 **/
};

struct ea_annx_dtls
{
	char		sql_ead_contract_nmbr[50+1];
	char		sql_ead_mtch_accnt[20+1];  
	char		sql_ead_cntrct_dt[24] ;  
	long		sql_ead_record_id ; 
	char		sql_ead_security[150+1];
	char		sql_ead_exp_dt[24+1];
	double	sql_ead_exercise ;
	double	sql_ead_stt      ;
	double	sql_ead_tot_stt ;
};

int fn_populate_ecm(void);
int fn_populate_ecd(void);
int fn_populate_ead(void);

int fn_upld_tmp(void);
int fn_ins_log_hdr(void);
int i_mode;

void BAT_EACNT_CLICK (int argc, char* argv[] )
{

	long		l_err_cd = 0;
  int i_runindictr = 0; /** Ver 1.9 **/
 
	strcpy(c_ServiceName, "bat_eacnt_click");

	if(argc == 6)
	{
		i_mode = atol(argv[5]);
	}
	else if(argc != 5)
  {
    /*** printf("USAGE <bat_eacnt_click> <NFO> <NFO> <NA> <date> <Mode (1-5) optional>");  *** Commented in Ver 1.3 ***/
		printf("USAGE <bat_eacnt_click> <NFO/BFO> <NFO/BFO> <NA> <date> <Mode (1-5) optional>"); /*** Ver 1.3 ***/
		return ;
  }
	else
	{
		i_mode =1;
	}
		
	INITBATDBGLVL(argv[0]);

	strcpy(c_for_date,argv[4]);	

	strcpy ( c_tag, "bat_eacnt_click_" );
	strcat ( c_tag, argv[1]);
	/*** strcpy (c_xchng_cd,"NA");   *** Commented in Ver 1.3 ***/
	strcpy (c_xchng_cd,argv[2]);		/*** Ver 1.3 ***/

	fn_userlog(c_ServiceName,"I/P Xchng Code Is :%s:",c_xchng_cd);

  /** Ver 1.9 starts **/

  EXEC SQL
      SELECT COUNT(1)
      INTO  :i_runindictr
      from BPS_BTCH_PGM_STTS
      WHERE BPS_STTS = 'R'
      AND   BPS_PGM_NAME = :c_ServiceName;

  if(SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31005", SQLMSG, c_errmsg );
    sprintf(c_event,"System error-contact sys.support");
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
    return ;
  }

  fn_userlog(c_ServiceName,"i_runindictr value is %d",i_runindictr);

  if(i_runindictr > 1)
   {
     if( strcmp(c_xchng_cd,"NFO") == 0 )
     {
      sprintf(c_event,"Please check process might be already running for BFO");
     }
     else if(strcmp(c_xchng_cd,"BFO") == 0 )
     {
      sprintf(c_event,"Please check process might be already running for NFO");
     }
     fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
     return ;
   }

  /** Ver 1.9 ends **/

  fn_userlog(c_ServiceName,"bat_eacnt_click : started processing ");
  sprintf(c_event,"bat_eacnt_click : started processing ");           /** Ver 1.2 **/
  fn_bat_pst_msg(c_ServiceName,c_event,c_tag);                        /** Ver 1.2 **/
 

  EXEC SQL TRUNCATE TABLE TMP_ECM_CONF_MSTR;

  if(SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31010", SQLMSG, c_errmsg );
    return ;
  }

  EXEC SQL TRUNCATE TABLE TMP_ECD_CONF_DTLS;

  if(SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31015", SQLMSG, c_errmsg );
    return ; 
  }

  EXEC SQL TRUNCATE TABLE TMP_EAD_ANNX_DTLS;

  if(SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31020", SQLMSG, c_errmsg );
    return ;
  }


	if ( tpbegin( 0, 0 ) == -1 )
  {
    fn_errlog(c_ServiceName, "S31025", TPMSG, c_errmsg );
    return ;
  }

 	i_ret_val = fn_upld_tmp();

	if(i_ret_val == -1)
	{
		fn_errlog(c_ServiceName, "S31030",SQLMSG, c_errmsg);
		tpabort(0);
    return ;
	}

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Data upload to temp table completed");
  }


  if ( tpcommit(0) == -1 )
  {
    tpabort(0);
    fn_errlog(c_ServiceName, "S31035", FMLMSG, c_errmsg );
    return;
  }

	ptr_fml_Rbuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
  if (ptr_fml_Rbuffer == NULL)
  {
    fn_errlog(c_ServiceName, "S31040", TPMSG, c_errmsg);
    fn_userlog(c_ServiceName,"Click Upload:Unable to Allocate Receive Memory ..");
		sprintf(c_event,"System Error - Contact Support");							/** Ver 1.2 **/
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);																			/** Ver 1.2 **/
    return ;
  }

	if ( tpbegin( 0, 0 ) == -1 )
  {
    fn_errlog(c_ServiceName, "S31045", TPMSG, c_errmsg );
    fn_dstry_rs ( ptr_fml_Rbuffer );
    return ;
  }

	i_ret_val = fn_populate_ecm();

  if(i_ret_val == -1)
  {
    tpabort ( 0 );
    fn_userlog(c_ServiceName,"Failed to populate ECM");
		sprintf(c_event,"System Error - Contact Support");						/** Ver 1.2 **/
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);					/** Ver 1.2 **/
    fn_dstry_rs (ptr_fml_Sbuffer );
    fn_dstry_rs ( ptr_fml_Rbuffer );
    return ;

  }

	i_ret_val = fn_populate_ecd();

  if(i_ret_val == -1)
  {
    tpabort ( 0 );
    fn_userlog(c_ServiceName,"Failed to populate ECD");
		sprintf(c_event,"System Error - Contact Support");						/** Ver 1.2 **/
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);					/** Ver 1.2 **/
    fn_dstry_rs (  ptr_fml_Sbuffer );
    fn_dstry_rs (  ptr_fml_Rbuffer );
    return ;

  }

	i_ret_val = fn_populate_ead();

  if(i_ret_val == -1)
  {
    tpabort ( 0 );
    fn_userlog(c_ServiceName,"Failed to populate EAD");
		sprintf(c_event,"System Error - Contact Support");							/** Ver 1.2 **/
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);						/** Ver 1.2 **/
    fn_dstry_rs ( ptr_fml_Sbuffer );
    fn_dstry_rs ( ptr_fml_Rbuffer );
    return ;

  }

	if(l_count_ecm > 0)
  {
    i_ret_val = fn_ins_log_hdr();

    if(i_ret_val == -1)
    {
      tpabort ( 0 );
      fn_userlog(c_ServiceName,"Failed to populate INS_LOG_HDR");
			sprintf(c_event,"System Error - Contact Support");							/** Ver 1.2 **/
    	fn_bat_pst_msg(c_ServiceName,c_event,c_tag);										/** Ver 1.2 **/
      fn_dstry_rs ( ptr_fml_Sbuffer );
      fn_dstry_rs ( ptr_fml_Rbuffer );
      return ;
    }
  }

	if ( tpcommit(0) == -1 )
  {
    tpabort(0);
    fn_errlog(c_ServiceName, "S31050", FMLMSG,c_errmsg );
    fn_dstry_rs ( ptr_fml_Sbuffer );
    fn_dstry_rs ( ptr_fml_Rbuffer );
    return ;
  }


  fn_dstry_rs( ptr_fml_Rbuffer);
  return ;
	
}


int fn_upld_tmp(void)
{

	EXEC  SQL
    EXECUTE
      BEGIN
          RESET_SEQUENCE('SEQ_CLKEA_RECNO');
      END;
  END-EXEC;

  if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in sequence number resetting");
			sprintf(c_event,"System Error - Contact Support");								/** Ver 1.2 **/
    	fn_bat_pst_msg(c_ServiceName,c_event,c_tag);													/** Ver 1.2 **/
      fn_errlog(c_ServiceName,"S31055",SQLMSG,c_errmsg);
			return -1;
  }	

	EXEC  SQL
    EXECUTE
      BEGIN
          RESET_SEQUENCE('SEQ_CLKEA_NMBR');
      END;
  END-EXEC;

  if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in sequence number resetting");
			sprintf(c_event,"System Error - Contact Support");						/** Ver 1.2 **/
    	fn_bat_pst_msg(c_ServiceName,c_event,c_tag);											/** Ver 1.2 **/
      fn_errlog(c_ServiceName,"S31060",SQLMSG, c_errmsg);
			return -1;
  }	

	fn_userlog(c_ServiceName,"uploading in ECM..........");

	EXEC SQL
		INSERT INTO TMP_ECM_CONF_MSTR
		(
			ECM_USR_MTCH_ACCNO,
			ECM_EXCNG_CD,
			ECM_CNTRCT_NMBR,
			ECM_CNTRCT_DT,
			ECM_RECORD_ID,
			ECM_FILENAME,
			ECM_USR_NM,
			ECM_ADD_LN1,
			ECM_ADD_LN2,
			ECM_ADD_LN3,
			ECM_ADD_LN4,
			ECM_UCC_CD,
			ECM_TRD_CD,
			ECM_PAN_NO,
			ECM_TEL_NO,
			ECM_EMAIL_ID1,
			ECM_EMAIL_ID2,
			ECM_MSG,
			ECM_AMOUNT,
			ECM_TOTAL,
			ECM_STT,
			ECM_SEQ_NO,
			ECM_TRUNC_DT,
			ECM_STAMP_DUTY,
			ECM_SEBI_TT,
			ECM_TRAN_CHRG,
			ecm_deal_off_aval_flg,				/** Ver 1.2 **/
      ecm_deal_off_addr1,						/** Ver 1.2 **/
      ecm_deal_off_addr2,						/** Ver 1.2 **/
      ecm_deal_off_city,						/** Ver 1.2 **/
      ecm_deal_off_zip,							/** Ver 1.2 **/
      ecm_deal_off_state,						/** Ver 1.2 **/
      ecm_deal_off_cntry,						/** Ver 1.2 **/
      ecm_deal_off_phone,						/** Ver 1.2 **/
			ecm_deal_off_fax,							/** Ver 1.2 **/
			ecm_prncpl_buis_state_cd,			/** Ver 1.7 **/
			ecm_prncpl_buis_brnch_cd,			/** Ver 1.7 **/
			ecm_cust_st_cd,								/** Ver 1.7 **/
			ecm_isec_gstin,								/** Ver 1.7 **/
			ecm_cust_gstin,								/** Ver 1.7 **/
			ecm_igst_prcnt, 							/** Ver 1.7 **/
			ecm_cgst_prcnt, 							/** Ver 1.7 **/
			ecm_sgst_prcnt, 							/** Ver 1.7 **/
			ecm_ugst_prcnt, 							/** Ver 1.7 **/
			ecm_brkrg_igst, 							/** Ver 1.7 **/
			ecm_brkrg_cgst, 							/** Ver 1.7 **/
			ecm_brkrg_sgst, 							/** Ver 1.7 **/
			ecm_brkrg_ugst, 							/** Ver 1.7 **/
			ecm_trn_igst, 								/** Ver 1.7 **/
			ecm_trn_cgst, 								/** Ver 1.7 **/
			ecm_trn_sgst, 								/** Ver 1.7 **/
			ecm_trn_ugst, 									/** Ver 1.7 **/
			ecm_total_igst, 							/** Ver 1.7 **/
			ecm_total_cgst, 							/** Ver 1.7 **/
			ecm_total_sgst, 							/** Ver 1.7 **/
			ecm_total_ugst 							/** Ver 1.7 **/
		)
		(
		SELECT 
			ECM_USR_MTCH_ACCNO,
			ECM_EXCNG_CD,
			ECM_CNTRCT_NMBR,
			ECM_CNTRCT_DT,
			SEQ_CLKEA_RECNO.NEXTVAL,
/*			TO_CHAR(ECM_CNTRCT_DT,'yyyymmdd') || '_' || REPLACE(SUBSTR(ECM_CNTRCT_NMBR,1,14),'/','_')||SUBSTR(ECM_CNTRCT_NMBR,16), * Ver 1.4 comment ***/
			FILE_NAME || '_' || SEQ_CLKEA_RECNO.CURRVAL ||'_' || decode(:c_xchng_cd,'NFO','NFOEAC','BFO','BFOEAC'), 		/** Ver 1.4 **/
			ECM_USR_NM,
			ADD_LN1,
			ADD_LN2,
			ADD_LN3,
			ADD_LN4,
			ECM_UCC_CD,            /** Replaced ECM_USR_MTCH_ACCNO column with newly introduced ECM_UCC_CD column in Ver 1.6 **/ 
			ECM_USR_MTCH_ACCNO,
			ECM_PAN_NO,
			ECM_TEL_NO,
 /**	USR_EMAIL_ADDRSS,
			USR_EMAIL_ADDRSS2,  ** Commented in Ver 1.8 **/
      IPD_EMAIL,          /** Ver 1.8 **/
			null,								/** Ver 1.8 **/
      DECODE(SIGN(ECM_TOTAL_AMOUNT), -1 ,'Receivable from you','Payable to you'),
			ECM_TOTAL_AMOUNT,
			SUM_ECD_STT,
			ROUND_ECD_STT,
			SEQ_CLKEA_NMBR.NEXTVAL,
			TRUNC(ECM_CNTRCT_DT),
			SUM_STAMP_DUTY,
			SUM_SEBI_TT,
			SUM_TRAN_CHRG,
			deal_off_aval_flg,				/** Ver 1.2 **/
      deal_off_addr1,						/** Ver 1.2 **/
      deal_off_addr2,						/** Ver 1.2 **/
      deal_off_city,						/** Ver 1.2 **/
      deal_off_zip,							/** Ver 1.2 **/
      deal_off_state,						/** Ver 1.2 **/
      deal_off_cntry,						/** Ver 1.2 **/
      deal_off_phone,						/** Ver 1.2 **/
			NULL,											/** Ver 1.2 **/
			ecm_prncpl_buis_state_cd,  /** Ver 1.7 **/
			ecm_prncpl_buis_brnch_cd,	 /** ver 1.7 **/
			ecm_cust_st_cd,			/** Ver 1.7 **/
			ecm_isec_gstin,			/** Ver 1.7 **/
			ecm_cust_gstin,			/** Ver 1.7 **/
			ecm_igst_prcnt, 		/** Ver 1.7 **/
			ecm_cgst_prcnt, 		/** Ver 1.7 **/
			ecm_sgst_prcnt, 		/** Ver 1.7 **/
			ecm_ugst_prcnt, 		/** Ver 1.7 **/
			ecm_brkrg_igst, 		/** Ver 1.7 **/
			ecm_brkrg_cgst, 		/** Ver 1.7 **/
			ecm_brkrg_sgst, 		/** Ver 1.7 **/
			ecm_brkrg_ugst, 		/** Ver 1.7 **/
			ecm_trn_igst, 			/** Ver 1.7 **/
			ecm_trn_cgst, 			/** Ver 1.7 **/
			ecm_trn_sgst, 			/** Ver 1.7 **/
			ecm_trn_ugst,				/** Ver 1.7 **/
			ecm_total_igst,			/** Ver 1.7 **/
			ecm_total_cgst,			/** Ver 1.7 **/
			ecm_total_sgst,			/** Ver 1.7 **/
			ecm_total_ugst			/** Ver 1.7 **/
		FROM
			(
			SELECT
				ECM_USR_MTCH_ACCNO,
				ECM_EXCNG_CD,
				ECM_CNTRCT_NMBR,
				ECM_CNTRCT_DT,
				/*ECM_USR_NM,																														 /** Ver 1.5 commented **/
				nvl(IPD_FIRST_NAME,' ')||' '||nvl(IPD_MIDDLE_NAME,' ')||' '||nvl(IPD_LAST_NAME,' ') "ECM_USR_NM" , /** Ver 1.5 **/
				IAD_ADDRESS_1 || ' ' || IAD_ADDRESS_2 ADD_LN1,
				IAD_ADDRESS_3 || ' ' || IAD_ADDRESS_4 ADD_LN2,
				IAD_CITY_CD   || ' ' || IAD_PIN  ADD_LN3,
				IAD_STATE_CD  || ' ' || IAD_COUNTRY_CD ADD_LN4,
				ECM_UCC_CD,                                        /** Added in Ver 1.6 **/
				ECM_PAN_NO,
				ECM_TEL_NO,
 /**		USR_EMAIL_ADDRSS,
				USR_EMAIL_ADDRSS2,   **  Commented in Ver 1.8 **/
        IPD_EMAIL,          /** Ver 1.8 **/
				null,								/** Ver 1.8 **/
        ECM_TOTAL_AMOUNT,
				SUM(ECD_STT) SUM_ECD_STT,
				ROUND(SUM(ECD_STT)) ROUND_ECD_STT,
				ROUND(NVL(SUM(ECD_STAMP_DUTY),0.0000),2) SUM_STAMP_DUTY,
				ROUND(NVL(SUM(ECD_SEBI_TT),0.0000),2) SUM_SEBI_TT,
				ROUND(NVL(SUM(ECD_TRAN_CHRG),0.0000),2) SUM_TRAN_CHRG,
				decode(CLM_BP_ID,NULL,'N','Y') deal_off_aval_flg,											/** Ver 1.2 **/
				BBM_OFF_CORR_ADD1 deal_off_addr1,																			/** Ver 1.2 **/
				BBM_OFF_CORR_ADD2 || ' ' || BBM_OFF_CORR_ADD3 deal_off_addr2,					/** Ver 1.2 **/
				BBM_OFF_CORR_CITY deal_off_city,																			/** Ver 1.2 **/
				BBM_OFF_CORR_ZIP_CD deal_off_zip,																			/** Ver 1.2 **/
				BBM_OFF_CORR_STATE deal_off_state,																		/** Ver 1.2 **/
				BBM_OFF_CORR_CNTRY deal_off_cntry,																		/** Ver 1.2 **/
				nvl(BBM_OFF_CORR_TELNO,BBM_MBL_NMBRS) deal_off_phone,									/** Ver 1.2 **/
				IAD_PIN||'_'||substr(ECM_USR_MTCH_ACCNO,1,3) || lpad(IAI_SERIAL_NO,10,'0') || '_' ||TO_CHAR(ECM_CNTRCT_DT,'yyyymmdd') FILE_NAME,																				/** Ver 1.4 **/
				ecm_prncpl_buis_state_cd,									/** ver 1.7 **/
				ecm_prncpl_buis_brnch_cd,									/** ver 1.7 **/
				ecm_cust_st_cd,														/** ver 1.7 **/
				ecm_isec_gstin,														/** ver 1.7 **/
				ecm_cust_gstin,														/** ver 1.7 **/
				ecm_igst_prcnt,														/** ver 1.7 **/
				ecm_cgst_prcnt,														/** ver 1.7 **/
				ecm_sgst_prcnt,														/** ver 1.7 **/
				ecm_ugst_prcnt,														/** ver 1.7 **/
				ROUND(sum(ecd_brkrg_igst),2) ecm_brkrg_igst,														/** ver 1.7 **/
				round(sum(ecd_brkrg_cgst),2) ecm_brkrg_cgst,														/** ver 1.7 **/
				round(sum(ecd_brkrg_sgst),2) ecm_brkrg_sgst,														/** ver 1.7 **/
				round(sum(ecd_brkrg_ugst),2) ecm_brkrg_ugst,														/** ver 1.7 **/
				nvl(round(sum(ecd_total_igst),2)-round(sum(ecd_brkrg_igst),2),0.0000) ecm_trn_igst,        /** ver 1.7 **/
				nvl(round(sum(ecd_total_cgst),2)-round(sum(ecd_brkrg_cgst),2),0.0000) ecm_trn_cgst,				/** ver 1.7 **/
				nvl(round(sum(ecd_total_sgst),2)-round(sum(ecd_brkrg_sgst),2),0.0000) ecm_trn_sgst,				/** ver 1.7 **/
				nvl(round(sum(ecd_total_ugst),2)-round(sum(ecd_brkrg_ugst),2),0.0000) ecm_trn_ugst,				/** ver 1.7 **/
				round(sum(ecd_total_igst),2)		ecm_total_igst,												  /** ver 1.7 **/								
				round(sum(ecd_total_cgst),2)		ecm_total_cgst,													/** ver 1.7 **/							
				round(sum(ecd_total_sgst),2)		ecm_total_sgst,													/** ver 1.7 **/
				round(sum(ecd_total_ugst),2)		ecm_total_ugst 													/** ver 1.7 **/
			FROM	EA_CONF_MSTR, 
						EA_CONF_DTLS, 
  /***			USR_USER_MASTER,
						UAC_USR_ACCNTS,        **** Ver 1.8 ***/
						IAD_INFO_ADDRESS_DTLS,
						IAI_INFO_ACCOUNT_INFO,
						IPD_INFO_PERSONAL_DTLS,	/** Ver 1.5 **/
					  CLM_CLNT_MSTR,					/** Ver 1.2 **/
						BP_BRKR_MSTR						/** Ver 1.2 **/
			WHERE	ECM_EXCNG_CD			= decode(:c_xchng_cd,'NFO','NSE','BFO','BSE')			/*** Ver 1.3 ***/
			AND ECM_CNTRCT_NMBR 		= ECD_CNTRCT_NMBR
 /**  AND	ECM_USR_MTCH_ACCNO 		= UAC_CLM_MTCH_ACCNT
			AND	UAC_USR_ID          	= USR_USR_ID  ** Commented in Ver 1.8 ***/
			AND	TRUNC(ECM_CNTRCT_DT)	= :c_for_date
			AND IAI_MATCH_ACCOUNT_NO  = ECM_USR_MTCH_ACCNO
      AND IAI_SERIAL_NO         = IAD_SERIAL_NO
      AND IAD_SERIAL_NO         = IPD_SERIAL_NO								/** Ver 1.5 **/
      AND IPD_TYPE         			= 'APPLICANT'									/** Ver 1.5 **/
      AND IAD_ADDRESS_TYPE      = 'APPLICANT_CORR'
			and CLM_MTCH_ACCNT				= ECM_USR_MTCH_ACCNO					/** Ver 1.2 **/
			and CLM_BP_ID							= BBM_BP_ID (+)  							/** Ver 1.2 **/
			GROUP BY	
				ECM_USR_MTCH_ACCNO,
				ECM_EXCNG_CD,
				ECM_CNTRCT_NMBR,
				ECM_CNTRCT_DT,
				/*ECM_USR_NM,																					/** Ver 1.5 **/
				nvl(IPD_FIRST_NAME,' ') ||' '||nvl(IPD_MIDDLE_NAME,' ') ||' '||nvl(IPD_LAST_NAME,' '), /** ver 1.5 **/
				IAD_ADDRESS_1,
				IAD_ADDRESS_2,
				IAD_ADDRESS_3,
				IAD_ADDRESS_4,
				IAD_CITY_CD,
			  ECM_UCC_CD,                                        /** Added in Ver 1.6 **/	
				IAD_PIN,
				IAD_STATE_CD,
				IAD_COUNTRY_CD,
				ECM_PAN_NO,
				ECM_TEL_NO,
  /**		USR_EMAIL_ADDRSS,
				USR_EMAIL_ADDRSS2,   ** commented Ver 1.8 **/
        IPD_EMAIL,          /** Ver 1.8 **/
				ECM_TOTAL_AMOUNT,
				CLM_BP_ID,							/** Ver 1.2 **/
        BBM_OFF_CORR_ADD1, 			/** Ver 1.2 **/
				BBM_OFF_CORR_ADD2,			/** Ver 1.2 **/
        BBM_OFF_CORR_ADD3,			/** Ver 1.2 **/
        BBM_OFF_CORR_CITY,			/** Ver 1.2 **/
        BBM_OFF_CORR_ZIP_CD,		/** Ver 1.2 **/	
        BBM_OFF_CORR_STATE,			/** Ver 1.2 **/
        BBM_OFF_CORR_CNTRY,			/** Ver 1.2 **/
        BBM_OFF_CORR_TELNO,			/** Ver 1.2 **/
				BBM_MBL_NMBRS,						/** Ver 1.2 **/
				lpad(IAI_SERIAL_NO,10,'0'), /** Ver 1.4 **/
				to_char(ECM_CNTRCT_DT,'yyyymmdd'),/** Ver 1.4 **/
				ecm_prncpl_buis_state_cd,
				ecm_prncpl_buis_brnch_cd,
				ecm_isec_gstin,
				ecm_cust_gstin,
				ecm_cust_st_cd,
				ecm_igst_prcnt,
				ecm_cgst_prcnt,
				ecm_sgst_prcnt,
				ecm_ugst_prcnt
			)
	);

	if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in ECM Upload");
			sprintf(c_event,"Error in ECM Upload");						/** Ver 1.2 **/
    	fn_bat_pst_msg(c_ServiceName,c_event,c_tag);			/** Ver 1.2 **/
      fn_errlog(c_ServiceName,"S31065",SQLMSG, c_errmsg);
      return -1;
  }

	l_count_ecm =	sqlca.sqlerrd[2];
	
	fn_userlog(c_ServiceName,"l_count_ecm = [%d]",l_count_ecm);

	fn_userlog(c_ServiceName,"uploading in ECD..........");

	
  EXEC  SQL
    EXECUTE
      BEGIN
          RESET_SEQUENCE('SEQ_CLKEA_NMBR');
      END;
  END-EXEC;

  if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in sequence number resetting");
			sprintf(c_event,"System Error - Contact Support");						/** Ver 1.2 **/
    	fn_bat_pst_msg(c_ServiceName,c_event,c_tag);											/** Ver 1.2 **/
      fn_errlog(c_ServiceName,"S31070",SQLMSG, c_errmsg);
      return -1;
  }

	EXEC SQL
		INSERT INTO TMP_ECD_CONF_DTLS
		(
			ECD_CNTRCT_NMBR,
			ECD_USR_MTCH_ACCNO,
			ECD_CNTRCT_DESC,
			ECD_EA_DT,
			ECD_RECORD_ID,
			ECD_OPTN_TYP,
			ECD_STRK_PRC,
			ECD_SETLMNT_PRC	,
			ECD_EA_FLG,
			ECD_QTY,
			ECD_BRKG,
			ECD_SRC_TX,
			ECD_CNTRCT_AMT,
			ECD_SEQ_NO,
			ECD_TRUNC_DT,
			ECD_TOTAL_IGST,				/** Ver 1.7 **/
			ECD_TOTAL_CGST,				/** Ver 1.7 **/
			ECD_TOTAL_SGST,				/** Ver 1.7 **/
			ECD_TOTAL_UGST,				/** Ver 1.7 **/
			ECD_TOTAL_GST					/** Ver 1.7 **/
		)
		(
		SELECT
			ECD_CNTRCT_NMBR,
			ECD_USR_MTCH_ACCNO,
			ECD_CNTRCT_SPECS,
			ECD_EA_DT,
			-1,
			DECODE(SUBSTR(ECD_CNTRCT_OPTN_TYP,1,1),'P','PUT','C','CALL'),
			ECD_STRK_PRC,
			ECD_SETLMNT_PRC,
			ECD_EA_FLG,
			ECD_QTY,
			ECD_BRKG,
			ECD_SRC_TX,
			ECD_CNTRCT_AMT,
			SEQ_CLKEA_NMBR.NEXTVAL ,
			TRUNC(ECM_CNTRCT_DT),
			ECD_TOTAL_IGST,				/** Ver 1.7 **/
			ECD_TOTAL_CGST,				/** Ver 1.7 **/
			ECD_TOTAL_SGST,				/** Ver 1.7 **/
			ECD_TOTAL_UGST,				/** Ver 1.7 **/
			(ECD_TOTAL_IGST+ECD_TOTAL_CGST+ECD_TOTAL_SGST+ECD_TOTAL_UGST)				/** Ver 1.7 **/
		FROM	EA_CONF_MSTR, 
					EA_CONF_DTLS
		WHERE ECM_EXCNG_CD			= decode(:c_xchng_cd,'NFO','NSE','BFO','BSE')			/*** Ver 1.3 ***/	
		AND ECM_CNTRCT_NMBR 		= ECD_CNTRCT_NMBR
		AND	TRUNC(ECM_CNTRCT_DT) 	= :c_for_date
		);

	if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in ECD Upload");
			sprintf(c_event,"System Error - Contact Support");								/** Ver 1.2 **/
    	fn_bat_pst_msg(c_ServiceName,c_event,c_tag);					/** Ver 1.2 **/
      fn_errlog(c_ServiceName,"S31075",SQLMSG, c_errmsg);
      return -1;
  }

  l_count_ecd = sqlca.sqlerrd[2];

  fn_userlog(c_ServiceName,"l_count_ecd = [%d]",l_count_ecd);

  fn_userlog(c_ServiceName,"uploading in EAD..........");
	

	EXEC  SQL
    EXECUTE
      BEGIN
          RESET_SEQUENCE('SEQ_CLKEA_NMBR');
      END;
  END-EXEC;

  if(SQLCODE != 0)
  {
      fn_userlog(c_ServiceName,"Error in sequence number resetting");
			sprintf(c_event,"System Error - Contact Support");								/** Ver 1.2 **/
    	fn_bat_pst_msg(c_ServiceName,c_event,c_tag);													/** Ver 1.2 **/
      fn_errlog(c_ServiceName,"S31080",SQLMSG, c_errmsg);
      return -1;
  }

	EXEC SQL
		INSERT INTO TMP_EAD_ANNX_DTLS
		(
			EAD_CNTRCT_NMBR,
			EAD_MTCH_ACCNT,
			EAD_CNTRCT_DT,
			EAD_RECORD_ID,
			EAD_SECURITY,
			EAD_EXP_DT,
			EAD_EXERCISE,
			EAD_STT,
			EAD_TOT_STT,
			EAD_SEQ_NO,
			EAD_TRUNC_DT
		)
		(
		SELECT
			ECD_CNTRCT_NMBR,
      ECD_USR_MTCH_ACCNO,
      ECM_CNTRCT_DT,
      -1 ,
      ECD_CNTRCT_SPECS,
      ECD_EXPR_DT,
      SUM_EXERSIZE ,
      SUM_STT,
      SUM_STT,
      SEQ_CLKEA_NMBR.NEXTVAL,
      TRUNC(ECM_CNTRCT_DT)	
		FROM
			(
			SELECT
				ECD_CNTRCT_NMBR,
				ECD_USR_MTCH_ACCNO,
				ECM_CNTRCT_DT,
				ECD_CNTRCT_SPECS,
				ECD_EXPR_DT,
				SUM(ECD_QTY*ECD_SETLMNT_PRC) SUM_EXERSIZE ,
				SUM(ECD_STT) SUM_STT
			FROM	EA_CONF_MSTR, 
						EA_CONF_DTLS
			WHERE	ECM_EXCNG_CD = decode(:c_xchng_cd,'NFO','NSE','BFO','BSE')			/*** Ver 1.3 ***/
			AND		ECM_CNTRCT_NMBR 		= ECD_CNTRCT_NMBR
			AND	 	ECD_EA_FLG 					=	'E'
			AND	TRUNC(ECM_CNTRCT_DT) 	= :c_for_date
			GROUP BY 
				ECD_CNTRCT_NMBR,
				ECD_USR_MTCH_ACCNO,
				ECM_CNTRCT_DT,
				ECD_CNTRCT_SPECS,
				ECD_EXPR_DT,
				ECD_QTY,
				ECD_SETLMNT_PRC,
				ECD_STT,
				ECM_CNTRCT_DT	
			)
		);

	if(SQLCODE != 0)
	{
			fn_userlog(c_ServiceName,"Error in EAD Upload");
			sprintf(c_event,"System Error - Contact Support");								/** Ver 1.2 **/
    	fn_bat_pst_msg(c_ServiceName,c_event,c_tag);					/** Ver 1.2 **/
			fn_errlog(c_ServiceName,"S31085",SQLMSG,c_errmsg);
			return -1;
	}

	l_count_ead = sqlca.sqlerrd[2];

	fn_userlog(c_ServiceName,"l_count_ead = [%d]",l_count_ead);

	
	if( l_count_ecd > 0 )		/* Ver 1.1 Added condition for EAD update */
	{
		fn_userlog(c_ServiceName,"updating record number in ECD");

		EXEC SQL
			UPDATE TMP_ECD_CONF_DTLS A
			SET ECD_RECORD_ID = (SELECT ECM_RECORD_ID FROM TMP_ECM_CONF_MSTR B
														WHERE B.ECM_CNTRCT_NMBR = A.ECD_CNTRCT_NMBR
														AND		B.ECM_TRUNC_DT		= :c_for_date
													)
			WHERE ECD_TRUNC_DT = :c_for_date ;
		
		if(SQLCODE != 0)
		{
				fn_userlog(c_ServiceName,"Error in ECD record number update");
				sprintf(c_event,"System Error - Contact Support");								/** Ver 1.2 **/
    		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);												/** Ver 1.2 **/
				fn_errlog(c_ServiceName,"S31090",SQLMSG, c_errmsg);
				return -1;
		}

	}
	
	if(l_count_ead > 0)			/* Ver 1.1 Added condition for EAD update */
	{
		fn_userlog(c_ServiceName,"updating record number in EAD");

		EXEC SQL
			UPDATE TMP_EAD_ANNX_DTLS A
			SET EAD_RECORD_ID = (SELECT ECM_RECORD_ID FROM TMP_ECM_CONF_MSTR B
														WHERE B.ECM_CNTRCT_NMBR = A.EAD_CNTRCT_NMBR
														AND   B.ECM_TRUNC_DT    = :c_for_date
													)
			WHERE EAD_TRUNC_DT = :c_for_date ;

		if(SQLCODE != 0)
		{
				fn_userlog(c_ServiceName,"Error in EAD record number update");
				sprintf(c_event,"System Error - Contact Support");							/** Ver 1.2 **/
    		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);											/** Ver 1.2 **/
				fn_errlog(c_ServiceName,"S31095",SQLMSG,c_errmsg);
				return -1;
		}
	}

	return 0;
}


int fn_populate_ecm()
{

int  i_counter;
long l_count =1;
char c_ins_flg;
struct ea_conf_mstr ecm_conf_mstr_arr[MAX_REC];

  l_bufferlength = Fneeded32(1, sizeof(ecm_conf_mstr_arr));
  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);
  if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Error in Allocating buffer ECM");
		sprintf(c_event,"System Error - Contact Support");									/** Ver 1.2 **/
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);												/** Ver 1.2 **/
    fn_errlog(c_ServiceName, "S31100", TPMSG, c_errmsg);
    return(-1);
  }

  c_ins_flg = 'A';  /* Insert into FCM **/

	for ( l_count=0;l_count < l_count_ecm;l_count += i_max_rec_per_fetch )
  {
    MEMSET(ecm_conf_mstr_arr);

    EXEC ORACLE OPTION (char_map=string);

    EXEC SQL
      SELECT
        ECM_USR_MTCH_ACCNO,
        ECM_EXCNG_CD,
        ECM_CNTRCT_NMBR,
        ECM_CNTRCT_DT,
        ECM_RECORD_ID,
        ECM_FILENAME,
        ECM_USR_NM,
        ECM_ADD_LN1,
        ECM_ADD_LN2,
        ECM_ADD_LN3,
        ECM_ADD_LN4,
        ECM_UCC_CD,
        ECM_TRD_CD,
        ECM_PAN_NO,
        ECM_TEL_NO,
        ECM_EMAIL_ID1,
        ECM_EMAIL_ID2,
        ECM_MSG,
        ECM_AMOUNT,
        ECM_TOTAL,
        ECM_STT,
				ECM_STAMP_DUTY,
				ECM_SEBI_TT,
				ECM_TRAN_CHRG,
				ecm_deal_off_aval_flg,				/** Ver 1.2 **/
        ecm_deal_off_addr1,						/** Ver 1.2 **/
      	ecm_deal_off_addr2,						/** Ver 1.2 **/
      	ecm_deal_off_city,						/** Ver 1.2 **/
      	ecm_deal_off_zip,							/** Ver 1.2 **/
      	ecm_deal_off_state,						/** Ver 1.2 **/
      	ecm_deal_off_cntry,						/** Ver 1.2 **/
      	ecm_deal_off_phone,						/** Ver 1.2 **/
				ecm_deal_off_fax,							/** Ver 1.2 **/
      	ecm_prncpl_buis_state_cd,     /** Ver 1.7 **/
      	ecm_prncpl_buis_brnch_cd,     /** Ver 1.7 **/
      	ecm_cust_st_cd,               /** Ver 1.7 **/
      	ecm_isec_gstin,               /** Ver 1.7 **/
      	ecm_cust_gstin,               /** Ver 1.7 **/
      	ecm_igst_prcnt,               /** Ver 1.7 **/
      	ecm_cgst_prcnt,               /** Ver 1.7 **/
      	ecm_sgst_prcnt,               /** Ver 1.7 **/
      	ecm_ugst_prcnt,               /** Ver 1.7 **/
      	ecm_brkrg_igst,               /** Ver 1.7 **/
      	ecm_brkrg_cgst,               /** Ver 1.7 **/
      	ecm_brkrg_sgst,               /** Ver 1.7 **/
      	ecm_brkrg_ugst,               /** Ver 1.7 **/
      	ecm_trn_igst,                 /** Ver 1.7 **/
      	ecm_trn_cgst,                 /** Ver 1.7 **/
      	ecm_trn_sgst,                 /** Ver 1.7 **/
      	ecm_trn_ugst,                   /** Ver 1.7 **/
      	ecm_total_igst,               /** Ver 1.7 **/
      	ecm_total_cgst,               /** Ver 1.7 **/
      	ecm_total_sgst,               /** Ver 1.7 **/
      	ecm_total_ugst              /** Ver 1.7 **/
			INTO
				:ecm_conf_mstr_arr	
			FROM
				TMP_ECM_CONF_MSTR
			WHERE ECM_SEQ_NO >= :l_count + 1
			AND		ECM_SEQ_NO <= :l_count + :i_max_rec_per_fetch;

		if( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
    {
      if( SQLCODE == 1403)
      {
        if (sqlca.sqlerrd[2] == 0)
          break;
      }
      else
      {
        fn_userlog(c_ServiceName,"Data select for ECM failed");
				sprintf(c_event,"System Error - Contact Support");							/** Ver 1.2 **/
    		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);								/** Ver 1.2 **/
        fn_errlog(c_ServiceName, "S31105", SQLMSG, c_errmsg);
        return (-1);
      }
    }

		l_rows_fetched = (l_count + i_max_rec_per_fetch > l_count_ecm)? l_count_ecm%i_max_rec_per_fetch : i_max_rec_per_fetch;

		if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"bat_eacnt_click : Rows fetched : |%d| |%d|", l_rows_fetched, SQLCODE );
    }	
		
		Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
    Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

		MEMSET(c_msg_cbuf);

    c_msg_cbuf = (unsigned char *)ecm_conf_mstr_arr;

		l_bufferlength =  sizeof(ecm_conf_mstr_arr);
	
		i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
    i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
    i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&l_rows_fetched,0);
    i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);

    for(i_counter = 0;i_counter < 4;i_counter++)
    {
      if(i_err[i_counter] == -1)
      {
        fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
				sprintf(c_event,"System Error - Contact Support");								/** Ver 1.2 **/
    		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);															/** Ver 1.2 **/
        fn_errlog(c_ServiceName, "S31110", FMLMSG, c_errmsg);
        return(-1);
      }
    }

    i_ch_val = tpcall("SFO_EACLK_UPLD", (char *)ptr_fml_Sbuffer, 0,
                       (char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);
    if (i_ch_val == -1)
    {
      fn_userlog(c_ServiceName,"Error in calling service for ECM");
			sprintf(c_event,"System Error - Contact Support");							/** Ver 1.2 **/
    	fn_bat_pst_msg(c_ServiceName,c_event,c_tag);											/** Ver 1.2 **/
			if(TPCODE != TPESVCFAIL)
      {
        fn_errlog(c_ServiceName, "S31115", TPMSG, c_errmsg);
      }
      else
      {
          Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
          fn_errlog(c_ServiceName, "S31120", c_errmsg, c_errmsg);
      }
      return(-1);
    }

  }

  fn_dstry_rs( ptr_fml_Sbuffer);
  return (0);

} 


int fn_populate_ecd()
{

int  i_counter;
long l_count =1;
char c_ins_flg;
struct ea_conf_dtls ecd_conf_dtls_arr[MAX_REC];

  l_bufferlength = Fneeded32(1, sizeof(ecd_conf_dtls_arr));
  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);
  if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Error in Allocating buffer FCD");
		sprintf(c_event,"System Error - Contact Support");							/** Ver 1.2 **/
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);										/** Ver 1.2 **/
    fn_errlog(c_ServiceName, "S31125", TPMSG, c_errmsg);
    return(-1);
  }

  c_ins_flg = 'B';  /* Insert into ECD **/

  for ( l_count=0;l_count < l_count_ecd;l_count += i_max_rec_per_fetch )
  {
    MEMSET(ecd_conf_dtls_arr);

    EXEC ORACLE OPTION (char_map=string);

    EXEC SQL
      SELECT
        ECD_CNTRCT_NMBR,
        ECD_USR_MTCH_ACCNO,
        ECD_CNTRCT_DESC,
        ECD_EA_DT,
        ECD_RECORD_ID,
        ECD_OPTN_TYP,
        ECD_STRK_PRC,
        ECD_SETLMNT_PRC,
        ECD_EA_FLG,
        ECD_QTY,
        ECD_BRKG,
        ECD_SRC_TX,
        ECD_CNTRCT_AMT,		/** ver 1.7 **/
				ECD_TOTAL_IGST,		/** ver 1.7 **/
				ECD_TOTAL_CGST,		/** ver 1.7 **/
				ECD_TOTAL_SGST,		/** ver 1.7 **/
				ECD_TOTAL_UGST,		/** ver 1.7 **/
				ECD_TOTAL_GST		/** ver 1.7 **/
			INTO
        :ecd_conf_dtls_arr
      FROM
        TMP_ECD_CONF_DTLS
      WHERE ECD_SEQ_NO >= :l_count + 1
      AND   ECD_SEQ_NO <= :l_count + :i_max_rec_per_fetch;

    if( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
    {
      if( SQLCODE == 1403)
      {
        if (sqlca.sqlerrd[2] == 0)
          break;
      }
      else
      {
        fn_userlog(c_ServiceName,"Data select for ECD failed");
				sprintf(c_event,"System Error - Contact Support");							/** Ver 1.2 **/
    		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);								/** Ver 1.2 **/
        fn_errlog(c_ServiceName, "S31130", SQLMSG, c_errmsg);
        return (-1);
      }
    }

    l_rows_fetched = (l_count + i_max_rec_per_fetch > l_count_ecd)? l_count_ecd%i_max_rec_per_fetch : i_max_rec_per_fetch;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"bat_eacnt_click : Rows fetched : |%d| |%d|", l_rows_fetched, SQLCODE );
    }

		Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
    Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

    MEMSET(c_msg_cbuf);

    c_msg_cbuf = (unsigned char *)ecd_conf_dtls_arr;

    l_bufferlength =  sizeof(ecd_conf_dtls_arr);

    i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
    i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
    i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&l_rows_fetched,0);
    i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);

    for(i_counter = 0;i_counter < 4;i_counter++)
    {
      if(i_err[i_counter] == -1)
      {
        fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
				sprintf(c_event,"System Error - Contact Support");							/** Ver 1.2 **/
    		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);														/** Ver 1.2 **/
        fn_errlog(c_ServiceName, "S31135", FMLMSG, c_errmsg);
        return(-1);
      }
    }

    i_ch_val = tpcall("SFO_EACLK_UPLD", (char *)ptr_fml_Sbuffer, 0,
                       (char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);
    if (i_ch_val == -1)
    {
      fn_userlog(c_ServiceName,"Error in calling service for ECD");
			sprintf(c_event,"System Error - Contact Support");						/** Ver 1.2 **/
    	fn_bat_pst_msg(c_ServiceName,c_event,c_tag);										/** Ver 1.2 **/
			if(TPCODE != TPESVCFAIL)
      {
        fn_errlog(c_ServiceName, "S31140", TPMSG, c_errmsg);
      }
      else
      {
          Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
          fn_errlog(c_ServiceName, "S31145", c_errmsg, c_errmsg);
      }
      return(-1);
    }

  }

  fn_dstry_rs( ptr_fml_Sbuffer);
  return (0);

}

int fn_populate_ead()
{

int  i_counter;
long l_count =1;
char c_ins_flg;
struct ea_annx_dtls ead_annx_dtls_arr[MAX_REC];

  l_bufferlength = Fneeded32(1, sizeof(ead_annx_dtls_arr));
  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);
  if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Error in Allocating buffer EAD");
		sprintf(c_event,"System Error - Contact Support");						/** Ver 1.2 **/
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);									/** Ver 1.2 **/
    fn_errlog(c_ServiceName, "S31150", TPMSG, c_errmsg);
    return(-1);
  }

  c_ins_flg = 'C';  /* Insert into EAD **/

  for ( l_count=0;l_count < l_count_ead;l_count += i_max_rec_per_fetch )
  {
    MEMSET(ead_annx_dtls_arr);

    EXEC ORACLE OPTION (char_map=string);

    EXEC SQL
      SELECT
        EAD_CNTRCT_NMBR,
        EAD_MTCH_ACCNT,
        EAD_CNTRCT_DT,
        EAD_RECORD_ID,
        EAD_SECURITY,
        EAD_EXP_DT,
        EAD_EXERCISE,
        EAD_STT,
        EAD_TOT_STT
			INTO
        :ead_annx_dtls_arr
      FROM
        TMP_EAD_ANNX_DTLS
      WHERE EAD_SEQ_NO >= :l_count + 1
      AND   EAD_SEQ_NO <= :l_count + :i_max_rec_per_fetch;

    if( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
    {
      if( SQLCODE == 1403)
      {
        if (sqlca.sqlerrd[2] == 0)
          break;
      }
      else
      {
       	fn_userlog(c_ServiceName,"Data select for EAD failed");
				sprintf(c_event,"System Error - Contact Support");							/** Ver 1.2 **/
    		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);								/** Ver 1.2 **/
        fn_errlog(c_ServiceName, "S31155", SQLMSG, c_errmsg);
        return (-1);
      }
    }

    l_rows_fetched = (l_count + i_max_rec_per_fetch > l_count_ead)? l_count_ead%i_max_rec_per_fetch : i_max_rec_per_fetch;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"bat_eacnt_click : Rows fetched : |%d| |%d|", l_rows_fetched, SQLCODE );
    }

		Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
    Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

    MEMSET(c_msg_cbuf);

    c_msg_cbuf = (unsigned char *)ead_annx_dtls_arr;

    l_bufferlength =  sizeof(ead_annx_dtls_arr);

    i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
    i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
    i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&l_rows_fetched,0);
    i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);

    for(i_counter = 0;i_counter < 4;i_counter++)
    {
      if(i_err[i_counter] == -1)
      {
        fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
				sprintf(c_event,"System Error - Contact Support");							/** Ver 1.2 **/
    		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);														/** Ver 1.2 **/
        fn_errlog(c_ServiceName, "S31160", FMLMSG, c_errmsg);
        return(-1);
      }
    }

    i_ch_val = tpcall("SFO_EACLK_UPLD", (char *)ptr_fml_Sbuffer, 0,
                       (char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);
    if (i_ch_val == -1)
    {
      fn_userlog(c_ServiceName,"Error in calling service for FAD");
			sprintf(c_event,"System Error - Contact Support");						/** Ver 1.2 **/
    	fn_bat_pst_msg(c_ServiceName,c_event,c_tag);										/** Ver 1.2 **/	
			if(TPCODE != TPESVCFAIL)
      {
        fn_errlog(c_ServiceName, "S31165", TPMSG, c_errmsg);
      }
      else
      {
          Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
          fn_errlog(c_ServiceName, "S31170", c_errmsg, c_errmsg);
      }
      return(-1);
    }

  }

  fn_dstry_rs( ptr_fml_Sbuffer);
  return 0;

}

int fn_ins_log_hdr()
{
  int  i_counter;
  char c_ins_flg;
	char c_doc_typ	[7];			/***	Ver	1.3	***/
  /*char c_xchng_cd[4] = { "EAC" };			*** Ver 1.3 Comment ***/   

	/***	Ver	1.3	Starts	***/
	
	if ( strcmp(c_xchng_cd,"NFO") == 0 )
	{
		strcpy(c_doc_typ,"EAC"); 
	}
	else
	{
  	strcpy(c_doc_typ,"FNOEAC");

	}

	/***	Ver	1.3	Ends 	***/

	fn_userlog(c_ServiceName,"Exchange Code Is :%s:",c_xchng_cd); /*** Ver 1.3 **/
	fn_userlog(c_ServiceName,"doc type for LOG HEADER :%s:",c_doc_typ); /*** Ver 1.3 **/

  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Unable to allocate send buffer ");
		sprintf(c_event,"System Error - Contact Support");						/** Ver 1.2 **/
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);									/** Ver 1.2 **/
    fn_errlog(c_ServiceName, "S31175", TPMSG, c_errmsg);
    return(-1);
  }

  c_ins_flg = 'E';

  i_err[0] = Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);
  /**	i_err[1] = Fadd32(ptr_fml_Sbuffer,FML_XCHNG_CD,(char *)c_xchng_cd,0);			Commented In Ver 1.3	***/
  i_err[1] = Fadd32(ptr_fml_Sbuffer,FML_XCHNG_CD,(char *)c_doc_typ,0);			/***	Ver	1.3	***/
  i_err[2] = Fadd32(ptr_fml_Sbuffer,FML_TRD_DT,(char *)c_for_date,0);
  i_err[3] = Fadd32(ptr_fml_Sbuffer,FML_TRN_NO,(char *)&i_mode,0);

  for(i_counter =0 ;i_counter<=3;i_counter++)
  {
    if(i_err[i_counter] == -1)
    {
      fn_errlog(c_ServiceName, "S31180", FMLMSG, c_errmsg);
      fn_userlog(c_ServiceName,"Value of i =[%d]",i_counter);
      return (-1);
    }
  }

  i_ch_val = tpcall("SFO_EACLK_UPLD", (char *)ptr_fml_Sbuffer, 0,
                       (char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);
  if (i_ch_val == -1)
  {
    fn_userlog(c_ServiceName,"Error in calling service for INS_LOG_HDR");
		sprintf(c_event,"System Error - Contact Support");								/** Ver 1.2 **/
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);																/** Ver 1.2 **/
    if(TPCODE != TPESVCFAIL)
    {
      fn_errlog(c_ServiceName, "S31185", TPMSG, c_errmsg);
    }
    else
    {
      Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
      fn_errlog(c_ServiceName, "S31190", c_errmsg, c_errmsg);
    }
    return(-1);
  }

  fn_dstry_rs( ptr_fml_Sbuffer);
  return (0);

}

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_EACNT_CLICK;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}

int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
  return 0;
}

