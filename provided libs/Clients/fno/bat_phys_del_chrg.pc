/************************************************************************************/
/** Program Name : bat_phys_del_chrg.pc                                         */
/**                                                                                 */
/** Description  : This program will run on daily basis. This will process for all  */
/**                those records where proccess falg set to N in click table.       */
/**                This process will apply the physical deliver charges and insert  */
/**                records into MDC table.                                          */
/** Ver 1.0      : Sanjeet Pawar                                                    */
/** Ver 1.1      : sanjeet Pawar -CR-ISEC18-153213-Exception for Physical Contract  */
/**                               Note Charges                                      */
/** Ver 1.2      : Sandip Tambe : GST charges for Pondicherry                       */
/************************************************************************************/

#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fml_mf.h>
#include <fn_ddr.h>
#include <string.h>
#include <fml_rout.h>
#include <stdlib.h>
#include <fn_read_debug_lvl.h>
#include <fn_get_gst_amt.h>
#include <fn_pp_card.h>  /** for gst and invoice structure **/
#define SQLROWCOUNT  sqlca.sqlerrd[2]
#define TRAN_TIME 600 
int fn_upd_segment_lmt(char *c_ServiceName,
                      char *c_match_acc,
                      double d_tot_phys_del_chrgs,
                      char *c_acc_ent,
                      char  c_dr_cr_flg,
                      char *c_exg_trd_dt,
                      long  *l_sttlmnt_no,
                      char *c_err_msg);

void BAT_PHYS_DEL_CHRG( int argc, char *argv[] )
{
  long int li_tot_rcrds=0;
  int i_ch_val;
  int i_chk_rerun;
  int i_trnsctn;
  int i_count_cmd;
  int i; 
  double d_phys_del_chrgs;
  double d_tot_phys_del_chrgs;
  double d_phys_del_chrgs_cgst;
  double d_phys_del_chrgs_sgst;
  double d_phys_del_chrgs_ugst;
  double d_phys_del_chrgs_igst;
  double d_phys_del_chrgs_with_gst;
  double d_phys_chrg=0.0;
  char c_trd_dt[12];
  char c_fbc_trd_dt[12];
  char c_ServiceName[33];
  char c_errmsg[256];
  char c_xchng_cd[3];
  char c_command[512]; /** ver 1.1 **/
  MEMSET(c_command);  /** ver 1.1 **/
  char c_prod_cd[3+1];
  char c_mtch_acc[10+1];
  char c_user_id[10+1];
  char c_trade_date[12];
  char c_payment_voucher[17];
  char c_cur_sys_dt[12];
  char c_chrg_typ[10];
  char c_msg[256]={'\0'};    /** ver 1.1 **/
  struct  st_gst_amt  st_ptr_contrct_note_gsmt_amt;
  struct  st_get_gst_all_prdct  st_ptr_get_contrct_note_gst_all_prdct;
  struct st_get_gst_invins st_ptr_get_contrct_note_gst_invins;
  EXEC SQL INCLUDE "table/mdc_misc_dr_cr.h";

  strcpy ( c_ServiceName, argv[0] );

  INITBATDBGLVL(argv[0]);

  fn_userlog( c_ServiceName, "Batch process %s started", argv[0] );
  sprintf ( c_msg, "Batch process %s started", argv[0] ); /** ver 1.1 **/
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );         /** ver 1.1 **/
  MEMSET(c_trd_dt);
  MEMSET(c_fbc_trd_dt);
  MEMSET(c_errmsg);
  MEMSET(c_xchng_cd);
  MEMSET(c_prod_cd);
  fn_init_ddr_pop("NA", "NA", "NA");
   
  if ( argc < 4 )
  {
    fn_userlog("bat_phys_del_chrg","Arg count :%d:",argc);
    fn_userlog(c_ServiceName,"Usage : %s <Tag> <Exchange Code> <Pipe id> <trd_date>", argv[0] );
    return;
  }
  if(argc == 4 )
  {
 		/** comment in Ver 1.1 code take down
    fn_userlog(c_ServiceName,"Now updating LAS customer as 'X'.");
		EXEC SQL
			UPDATE PHYSICAL_CHARGES@CLICKDB
			set    EBA_PROCESS_FLAG='X',
						 EBA_PROCESS_TIME=sysdate
			where trunc(STMTDT)   >= :c_trd_dt
			and MTCH_ID  in 
			( select MTCH_ID 
		  	from 	 UAC_USR_ACCNTS,
							 TMP_PHYSICAL_CHARGES,
							 ICD_INFO_CLIENT_DTLS
		  	where MTCH_ID = UAC_CLM_MTCH_ACCNT
		  	and   ICD_USER_ID   = UAC_USR_ID
		  	and   trunc(STMTDT) >= :c_trd_dt
		  	and   icd_las_flg = 'Y'
		 )
		 and nvl(EBA_PROCESS_FLAG,'N')  = 'N';

   if( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
   {
    fn_errlog(c_ServiceName,"S31005",SQLMSG,c_errmsg);
		EXEC SQL ROLLBACK;
    return;
   } 
	 EXEC SQL COMMIT;
	 if(SQLCODE != 0)
	 {
    fn_errlog(c_ServiceName,"S31010",SQLMSG,c_errmsg);
    return;
	 }  
   fn_userlog(c_ServiceName,"updated :%d: LAS customer as 'X'.",SQLROWCOUNT);
   comment ver 1.1 ends **/
   EXEC SQL
    SELECT nvl(min(trunc(STMTDT)),sysdate)
    INTO   :c_trd_dt
    FROM   PHYSICAL_CHARGES@CLICKDB 
    WHERE  EBA_PROCESS_FLAG='N';
   if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
   {
     fn_userlog(c_ServiceName,"Failed To Get Current Trade Date");
     fn_errlog( c_ServiceName, "S31015",SQLMSG, c_errmsg);
     fn_bat_pst_msg ( c_ServiceName,"Failed To Get Current Trade Date",c_tag);  /* ver 1.1 **/
     return;
   }
	 EXEC SQL ROLLBACK;
	 if(SQLCODE == NO_DATA_FOUND )
	 {
			fn_userlog(c_ServiceName,"No records to process");
      fn_bat_pst_msg ( c_ServiceName,"No records to process",c_tag);  /** ver 1.1 **/
			return;
	 }
  }
  else
  {
    strcpy(c_trd_dt, argv[4] );
  }
  sprintf ( c_msg, "Processing from  %s started", c_trd_dt ); /** ver 1.1 **/
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );         /** ver 1.1 **/
  
  fn_userlog(c_ServiceName,"Now updating LAS customer as 'X'.");
   EXEC SQL
      UPDATE PHYSICAL_CHARGES@CLICKDB
      set    EBA_PROCESS_FLAG='X',
             EBA_PROCESS_TIME=sysdate
      where trunc(STMTDT)   >= :c_trd_dt
      and MTCH_ID  in
      ( select MTCH_ID
        from   UAC_USR_ACCNTS,
               TMP_PHYSICAL_CHARGES,
               ICD_INFO_CLIENT_DTLS
        where MTCH_ID = UAC_CLM_MTCH_ACCNT
        and   ICD_USER_ID   = UAC_USR_ID
        and   trunc(STMTDT) >= :c_trd_dt
        and   icd_las_flg = 'Y'
     )
     and nvl(EBA_PROCESS_FLAG,'N')  = 'N';

   if( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
   {
    fn_errlog(c_ServiceName,"S31020",SQLMSG,c_errmsg);
    EXEC SQL ROLLBACK;
    return;
   }
   EXEC SQL COMMIT;
   if(SQLCODE != 0)
   {
    fn_errlog(c_ServiceName,"S31025",SQLMSG,c_errmsg);
    return;
   }
   fn_userlog(c_ServiceName,"updated :%d: LAS customer as 'X'.",SQLROWCOUNT);
   sprintf ( c_msg,"updated :%d: LAS customer to skip charge calculation.",SQLROWCOUNT); /** ver 1.1 **/
   fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );  /* ver 1.1 **/
  
   /** ver 1.1 start for exception customer **/
   fn_userlog(c_ServiceName,"Now updating Exception customer as 'X'.");
    EXEC SQL
      UPDATE PHYSICAL_CHARGES@CLICKDB 
      set    EBA_PROCESS_FLAG='X',
             EBA_PROCESS_TIME=sysdate
      where trunc(STMTDT)   >= :c_trd_dt
      and MTCH_ID  in
      ( select ESM_MTCH_ACC
         from ESM_EXEPTION_ELGBLTY_MSTR
         where ESM_PHYS_CHRG_EXCP = 'Y'
      )
      and nvl(EBA_PROCESS_FLAG,'N')  = 'N';

   if( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
   {
    fn_errlog(c_ServiceName,"S31030",SQLMSG,c_errmsg);
    EXEC SQL ROLLBACK;
    return;
   }
   EXEC SQL COMMIT;
   if(SQLCODE != 0)
   {
    fn_errlog(c_ServiceName,"S31035",SQLMSG,c_errmsg);
    return;
   }
   fn_userlog(c_ServiceName,"updated :%d: Exception customer as 'X'.",SQLROWCOUNT);
   sprintf ( c_msg,"updated :%d: Exception enabled  customer to skip charge calculation.",SQLROWCOUNT); /** ver 1.1 **/
   fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );  /* ver 1.1 **/
   /** ver 1.1 end **/ 
  fn_userlog(c_ServiceName,"Processing for :%s:",c_trd_dt);
  sprintf ( c_msg,"Processing calcultaion from trade date:%s:",c_trd_dt); /** ver 1.1 **/
   fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );  /** ver 1.1 **/
	i_trnsctn=fn_begintran( c_ServiceName, c_errmsg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog ( c_ServiceName, "S31040", LIBMSG, c_errmsg );
		fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    return ;
  }

  EXEC SQL
    DELETE from tmp_PHYSICAL_CHARGES;

  if(SQLCODE != 0 && SQLCODE!= NO_DATA_FOUND )
  {
    fn_errlog(c_ServiceName, "S31045", SQLMSG, c_errmsg );
		fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    return ;
  }
  if (fn_committran( c_ServiceName,i_trnsctn, c_errmsg ) == -1 )
  {
      fn_errlog ( c_ServiceName, "S31050", LIBMSG, c_errmsg );
		  fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      return ;
  }
  fn_userlog(c_ServiceName,"inserting  the  records from click table into temp table");
   EXEC SQL 
    insert into tmp_PHYSICAL_CHARGES 
    select
    STMTDT,
    MTCH_ID, 
    DELIVERABLE_TYPE,
    nvl(EBA_PROCESS_FLAG,'N'), 
    null,
	  trunc(CLICK_PROCESS_TIME) 
    from  PHYSICAL_CHARGES@CLICKDB 
    where nvl(EBA_PROCESS_FLAG,'N')='N' 
    and   trunc(STMTDT)  >= :c_trd_dt;

   if(SQLCODE != 0 && SQLCODE!=NO_DATA_FOUND)
   {
     fn_errlog(c_ServiceName, "S31055", SQLMSG , c_errmsg );
     fn_bat_pst_msg ( c_ServiceName,"Error while inserting records into temp table",c_tag); /** ver 1.1 **/ 
		 EXEC SQL ROLLBACK;
     return;
   }
   i_count_cmd = sqlca.sqlerrd[2];
	 EXEC SQL COMMIT;
	 if(SQLCODE != 0)
	 {
     fn_errlog(c_ServiceName, "S31060", SQLMSG , c_errmsg );
     return;
	 }		
	
	 if(i_count_cmd ==0 )
	 {
		fn_userlog(c_ServiceName,"There are no pending records to be processed today");
    sprintf ( c_msg,"There are no pending records to be processed today");  /** ver 1.1 **/
     fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag ); /** ver 1.1 **/ 
     sprintf( c_command, "ksh %s/sh_scripts/bat_phys_chrgs_prc_cnt.sh %d %ld",tuxgetenv("HOME"),i_count_cmd,li_tot_rcrds); /** ver 1.1 **/ 
		 system(c_command);  /** ver 1.1 **/ 
     fn_userlog(c_ServiceName,"Mail sent");
     return;
	 }
   if(DEBUG_MSG_LVL_0)
   {
    fn_userlog (c_ServiceName,"insert into temp_table  Successful");
    fn_userlog(c_ServiceName,"Total NO. Of Records = [%d]",i_count_cmd);
   }
  sprintf ( c_msg,"Total No Of Records to Process = [%d]",i_count_cmd); /** ver 1.1 **/
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );                    /** ver 1.1 **/
  fn_userlog(c_ServiceName,"Now fetching the records into cursor");

  EXEC SQL
  DECLARE cur_contrct_note_chrg CURSOR FOR
     select    ACM_CHARGE_TYPE,
               UAC_USR_ID,
               MTCH_ID,
               ACM_CHARGE, 
               trunc(STMTDT) 
        from  UAC_USR_ACCNTS,TMP_PHYSICAL_CHARGES,ACM_ADDL_CHRGS_MSTR,icd_info_client_dtls
        where  MTCH_ID          =  UAC_CLM_MTCH_ACCNT
        and    ICD_USER_ID      = UAC_USR_ID
        and    trunc(STMTDT)   >= :c_trd_dt
        and    icd_las_flg     != 'Y' 
        and   nvl(EBA_PROCESS_FLAG,'N')  = 'N'
        and    ACM_CHARGE_TYPE =  decode(ICD_CUST_TYPE,'NRI','NRI_PHY_CN_DEL_CHRG','RI_PHY_CN_DEL_CHRG') 
        and   nvl(ACM_CHARGE,0)  > 0
				order by STMTDT ;
  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
     fn_errlog( c_ServiceName, "S31065", SQLMSG, c_errmsg );
     return;
  } 

	i_trnsctn=fn_begintran( c_ServiceName, c_errmsg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog ( c_ServiceName, "S31070", LIBMSG, c_errmsg );
    EXEC SQL CLOSE cur_contrct_note_chrg;
		fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    return ;
  } 

  EXEC SQL OPEN cur_contrct_note_chrg;

  if( SQLCODE != 0 )
  {
      fn_errlog( c_ServiceName, "S31075", SQLMSG, c_errmsg );
      EXEC SQL CLOSE cur_contrct_note_chrg;
			fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      return;
  }
  li_tot_rcrds=0;
  while( li_tot_rcrds< i_count_cmd ) 
  {
		fn_userlog(c_ServiceName,"Inside while for rec-%ld out of total %ld rec",li_tot_rcrds,i_count_cmd);
    MEMSET(c_prod_cd);
    MEMSET(c_mtch_acc);
    MEMSET(c_user_id);
    MEMSET(c_cur_sys_dt);
    MEMSET(c_payment_voucher);
    MEMSET(st_ptr_contrct_note_gsmt_amt);                        
    MEMSET(st_ptr_get_contrct_note_gst_all_prdct);               
    MEMSET(st_ptr_get_contrct_note_gst_invins);                   
    MEMSET(c_chrg_typ);
    d_tot_phys_del_chrgs=0.0; 
    d_phys_del_chrgs_cgst=0.0; 
    d_phys_del_chrgs_sgst=0.0;  
    d_phys_del_chrgs_igst=0.0;  
    /* d_phys_del_chrgs_igst=0.0;   commented in version 1.2  */
    d_phys_del_chrgs_ugst=0.0; /* Added in ver 1.2 */ 
    
    EXEC SQL
        FETCH cur_contrct_note_chrg
        INTO  :c_chrg_typ,
              :c_user_id,
              :c_mtch_acc,
              :d_tot_phys_del_chrgs,
              :c_trade_date;

    if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog( c_ServiceName, "S31080", SQLMSG, c_errmsg  );
      EXEC SQL CLOSE cur_contrct_note_chrg;
			fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      return;
    }
    if(SQLCODE == NO_DATA_FOUND )
    {
      fn_userlog(c_ServiceName,"No more records to process for MDC insert for delivery contract note charges");
      EXEC SQL CLOSE cur_contrct_note_chrg;
      break;
    }
    sprintf ( c_msg,"Processing for Math acc:%s: rec-%ld out of total %ld rec",c_mtch_acc,li_tot_rcrds,i_count_cmd); /** ver 1.1 **/
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag ); 
    rtrim(c_chrg_typ);
    d_phys_del_chrgs=0;
    d_phys_del_chrgs_with_gst=0;
    fn_userlog(c_ServiceName,"d_tot_phys_del_chrgs=:%lf",d_tot_phys_del_chrgs);
    fn_userlog(c_ServiceName,"c_chrg_typ :%s:",c_chrg_typ);
    if(d_tot_phys_del_chrgs > 0 )
    {
      strcpy(c_prod_cd,"DCC");
      d_phys_del_chrgs=d_tot_phys_del_chrgs;
    }
     else
    {
      d_phys_del_chrgs=0;
      fn_userlog(c_ServiceName,"Invalid product Code for match:%s:",c_mtch_acc);
      continue;
    }
	  i_chk_rerun=0;

  	EXEC SQL
    	select count(1)
    	into :i_chk_rerun
    	from MDC_MISC_DR_CR
    	where MDC_PRDCT_TYP='DCC'
			and  MDC_CLM_MTCH_ACCNT=:c_mtch_acc
    	and mdc_from_dt=:c_trade_date ;
  	if(SQLCODE !=0 )
  	{
    	 fn_errlog( c_ServiceName, "S31085", SQLMSG, c_errmsg );
			 fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
     	 return;
		}
  	if(i_chk_rerun > 0 )
  	{
    	fn_userlog(c_ServiceName,"Process Already run for:%s: and account:%s:.. kindly check",c_trade_date,c_mtch_acc);
      sprintf ( c_msg,"Process Already run for:%s: and account:%s:.. kindly check",c_trade_date,c_mtch_acc); /** ver 1.1 **/
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );                  /** ver 1.1 **/
    	continue;
  	}
  
   fn_userlog(c_ServiceName,"c_mtch_acc :%s: c_prod_cd :%s: d_phys_del_chrgs :%lf:",c_mtch_acc,c_prod_cd,d_phys_del_chrgs);
   if(DEBUG_MSG_LVL_3)
	 {
   	fn_userlog(c_ServiceName,"c_trade_date=:%s:",c_trade_date);
   	fn_userlog(c_ServiceName,"c_prod_cd=:%s",c_prod_cd);
   	fn_userlog(c_ServiceName,"Getting GST details for=:%s",c_user_id);
	 }
   if(fn_get_gst_amt(c_ServiceName,c_user_id,d_phys_del_chrgs,&st_ptr_contrct_note_gsmt_amt, c_errmsg) != 0)
   {
      fn_userlog(c_ServiceName,"call to fn_get_gst_amt failed..");
      errlog(c_ServiceName, "S31090", SQLMSG, DEF_USR, DEF_SSSN, c_errmsg );
			fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      return;
   }

  strcpy(st_ptr_get_contrct_note_gst_all_prdct.c_state_code,st_ptr_contrct_note_gsmt_amt.c_gst_isec_state_cd);
  rtrim(st_ptr_contrct_note_gsmt_amt.c_gst_isec_state_cd);
  fn_userlog(c_ServiceName,"c_state_code :%s:",st_ptr_get_contrct_note_gst_all_prdct.c_state_code);
  st_ptr_get_contrct_note_gst_all_prdct.c_seq_flg='O';

  EXEC SQL
   SELECT  ABS(:d_phys_del_chrgs),
           FN_GST_SEQ_OTHR_DBIT(:st_ptr_contrct_note_gsmt_amt.c_gst_isec_state_cd,TO_CHAR(SYSDATE,'DD-Mon-YYYY')),
           TO_CHAR(SYSDATE,'DD-Mon-YYYY'),
           case when (:st_ptr_contrct_note_gsmt_amt.d_cgst_per !=0 AND :st_ptr_contrct_note_gsmt_amt.d_sgst_per != 0 )
                then  ROUND(ABS(:d_phys_del_chrgs *(:st_ptr_contrct_note_gsmt_amt.d_cgst_per/100)),2) 
                when (:st_ptr_contrct_note_gsmt_amt.d_cgst_per !=0 AND :st_ptr_contrct_note_gsmt_amt.d_ugst_per != 0 )
                then  ROUND(ABS(:d_phys_del_chrgs *(:st_ptr_contrct_note_gsmt_amt.d_cgst_per/100)),2) else 0 end, /** ver 1.2 case added**/
           case when (:st_ptr_contrct_note_gsmt_amt.d_sgst_per != 0 )
                then  ROUND(ABS(:d_phys_del_chrgs *(:st_ptr_contrct_note_gsmt_amt.d_sgst_per/100)),2) else 0 end,
           /*case when (:st_ptr_contrct_note_gsmt_amt.d_sgst_per !=0 AND :st_ptr_contrct_note_gsmt_amt.d_ugst_per != 0 )  **ver 1.2 comment **/
           case when (:st_ptr_contrct_note_gsmt_amt.d_cgst_per !=0 AND :st_ptr_contrct_note_gsmt_amt.d_ugst_per != 0 ) 
                then  ROUND(ABS(:d_phys_del_chrgs *(:st_ptr_contrct_note_gsmt_amt.d_ugst_per/100)),2) else 0 end, /** ver 1.2 sgst changed to cgst as for UT : CGST + UGST applicable **/
           case when (:st_ptr_contrct_note_gsmt_amt.d_igst_per !=0  )
                then  ROUND(ABS(:d_phys_del_chrgs *(:st_ptr_contrct_note_gsmt_amt.d_igst_per/100)),2) else 0 end,
           ROUND(ABS(:d_phys_del_chrgs +(:st_ptr_contrct_note_gsmt_amt.d_cgst_per +
                                       :st_ptr_contrct_note_gsmt_amt.d_sgst_per +
                                       :st_ptr_contrct_note_gsmt_amt.d_ugst_per +
                                       :st_ptr_contrct_note_gsmt_amt.d_igst_per)/100
                                      )
                ,2)
   INTO    :d_phys_del_chrgs,
           :c_payment_voucher,
           :c_cur_sys_dt,
           :d_phys_del_chrgs_cgst,
           :d_phys_del_chrgs_sgst,
           :d_phys_del_chrgs_ugst,
           :d_phys_del_chrgs_igst,
           :d_phys_del_chrgs_with_gst
   FROM    DUAL;

  if( SQLCODE !=0 )
  {
     fn_errlog(c_ServiceName,"S31095",SQLMSG,c_errmsg);
     continue;
  }
  MEMSET(sql_mdc_sttlmnt_trd_dt);
  sql_mdc_sttlmnt_nmbr=0;
  i_ch_val=fn_upd_segment_lmt(c_ServiceName,
                                  c_mtch_acc,
                                  (d_phys_del_chrgs + d_phys_del_chrgs_cgst +
                                  d_phys_del_chrgs_sgst + d_phys_del_chrgs_ugst +
                                  d_phys_del_chrgs_igst ),
                                  c_prod_cd,
                                  'D',
                                  sql_mdc_sttlmnt_trd_dt.arr,
                                  &sql_mdc_sttlmnt_nmbr,
                                  c_errmsg);
   if(i_ch_val != 0)
   {
        fn_userlog(c_ServiceName,"fn_upd_segment_lmt failed for :%s:...",c_mtch_acc);
        fn_errlog(c_ServiceName, "S31100", LIBMSG ,c_errmsg );
				fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return;
   }
  SETLEN(sql_mdc_sttlmnt_trd_dt);
  fn_userlog(c_ServiceName,"now inserting records into mdc table");
  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"c_mtch_acc=:%s:",c_mtch_acc);
    fn_userlog(c_ServiceName,"c_prod_cd=:%s:",c_prod_cd);
    fn_userlog(c_ServiceName,"c_trade_date=:%s:",c_trade_date);
    fn_userlog(c_ServiceName,"sql_mdc_sttlmnt_trd_dt=:%s",sql_mdc_sttlmnt_trd_dt.arr);
    fn_userlog(c_ServiceName,"c_payment_voucher=:%s:",c_payment_voucher);
    fn_userlog(c_ServiceName,"isec_state_cd=:%s",st_ptr_contrct_note_gsmt_amt.c_gst_isec_state_cd);
    fn_userlog(c_ServiceName,"gst_state_cd=:%s",st_ptr_contrct_note_gsmt_amt.c_gst_state_cd);
    fn_userlog(c_ServiceName,"d_phys_del_chrgs=:%lf",d_phys_del_chrgs);
  }
  EXEC SQL
        INSERT INTO MDC_MISC_DR_CR( MDC_CLM_MTCH_ACCNT,
                                    MDC_PRDCT_TYP,
                                    MDC_CRDT_NMBR,
                                    MDC_AMT1,
                                    MDC_AMT2,
                                    MDC_TOT_AMT,
                                    MDC_FROM_DT,
                                    MDC_TO_DT,
                                    MDC_XCHNG_CD,
                                    MDC_DR_CR_FLG,
                                    MDC_MTCH_STTS,
                                    MDC_BNK_STTS,
                                    MDC_MTCH_UPD_AMT,
                                    MDC_BNK_UPD_AMT,
                                    MDC_INVOICE_NMBR,
                                    MDC_INVOICE_REF_NMBR,
                                    MDC_GST_STATE_CD,
                                    MDC_GST_ISEC_STATE_CD,
                                    MDC_CGST_AMT,
                                    MDC_SGST_AMT,
                                    MDC_IGST_AMT,
                                    MDC_UGST_AMT,
                                    MDC_INVOICE_GEN_FLG,
                                    MDC_LMT_UPD_STTS,
                                    MDC_STTLMNT_NMBR,
                                    MDC_STTLMNT_TRD_DT
                                  )
                            VALUES( trim(:c_mtch_acc),
                                    trim(:c_prod_cd),
                                    '01'||to_char(sysdate, 'yyddmm')||next_doc_no.NEXTVAL ,
                                    :d_phys_del_chrgs,
                                    0,
                                    :d_phys_del_chrgs + :d_phys_del_chrgs_cgst +
                                                      :d_phys_del_chrgs_sgst +
                                                      :d_phys_del_chrgs_ugst +
                                                      :d_phys_del_chrgs_igst,
                                    rtrim(:c_trade_date),
                                    TRUNC(sysdate),
                                    'NSE',
                                    'D',
                                    'N',
                                    'N',
                                    0,
                                    0,
                                    rtrim(:c_payment_voucher),
                                    NULL,
                                    trim(:st_ptr_contrct_note_gsmt_amt.c_gst_state_cd),
                                    trim(:st_ptr_contrct_note_gsmt_amt.c_gst_isec_state_cd),
                                    :d_phys_del_chrgs_cgst,
                                    :d_phys_del_chrgs_sgst,
                                    :d_phys_del_chrgs_igst,
                                    :d_phys_del_chrgs_ugst,
                                    'N',
                                    'Y',
                                    :sql_mdc_sttlmnt_nmbr,
                                    rtrim(:sql_mdc_sttlmnt_trd_dt) 
                                  );

        if(SQLCODE != 0)
        {
          fn_errlog(c_ServiceName, "S31105", SQLMSG , c_errmsg );
					fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
          return;
        }

        fn_userlog (c_ServiceName,"insert into MDC_MISC_DR_CR Successful");
        st_ptr_get_contrct_note_gst_invins.c_mtch_acc=c_mtch_acc;
        st_ptr_get_contrct_note_gst_invins.c_prdct_cd="OTHRDB";
        st_ptr_get_contrct_note_gst_invins.c_invoice_no=c_payment_voucher;
        st_ptr_get_contrct_note_gst_invins.c_invoice_dt=c_cur_sys_dt;
        st_ptr_get_contrct_note_gst_invins.d_charge_amt=d_phys_del_chrgs;
        st_ptr_get_contrct_note_gst_invins.d_cgst_amt=d_phys_del_chrgs_cgst;
        st_ptr_get_contrct_note_gst_invins.d_sgst_amt=d_phys_del_chrgs_sgst;
        st_ptr_get_contrct_note_gst_invins.d_ugst_amt=d_phys_del_chrgs_ugst;
        st_ptr_get_contrct_note_gst_invins.d_igst_amt=d_phys_del_chrgs_igst;
        st_ptr_get_contrct_note_gst_invins.c_sub_prdct_cd=c_prod_cd;
        st_ptr_get_contrct_note_gst_invins.c_isec_state_cd=st_ptr_contrct_note_gsmt_amt.c_gst_isec_state_cd;
        st_ptr_get_contrct_note_gst_invins.c_state_cd=st_ptr_contrct_note_gsmt_amt.c_gst_state_cd;
        st_ptr_get_contrct_note_gst_invins.c_ref_invoice_no=NULL;
        st_ptr_get_contrct_note_gst_invins.c_ref_invoice_dt=NULL;
        st_ptr_get_contrct_note_gst_invins.d_cgst_per=st_ptr_contrct_note_gsmt_amt.d_cgst_per;
        st_ptr_get_contrct_note_gst_invins.d_sgst_per=st_ptr_contrct_note_gsmt_amt.d_sgst_per;
        st_ptr_get_contrct_note_gst_invins.d_ugst_per=st_ptr_contrct_note_gsmt_amt.d_ugst_per;
        st_ptr_get_contrct_note_gst_invins.d_igst_per=st_ptr_contrct_note_gsmt_amt.d_igst_per;

    fn_userlog(c_ServiceName,"Inserting Invoice for match:%s:.",c_mtch_acc);

    if(fn_call_gst_invins(c_ServiceName, DEF_USR, DEF_SSSN,&st_ptr_get_contrct_note_gst_invins,c_errmsg) != 0)
    {
       fn_errlog(c_ServiceName, "S31110", LIBMSG ,c_errmsg );
			 fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
       return;
    }
    fn_userlog(c_ServiceName,"Invoice Insert successfull for match:%s:.",c_mtch_acc);
    sprintf ( c_msg,"Invoice Insert successfull for match:%s:.",c_mtch_acc); /** ver 1.1 **/
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );                          /** ver 1.1 **/
     
    fn_userlog(c_ServiceName,"updating eba process flag for date :%s:",c_trade_date);
   
   EXEC SQL
   update TMP_PHYSICAL_CHARGES
	 set EBA_PROCESS_FLAG='Y',
			 EBA_PROCESS_TIME=sysdate
   where MTCH_ID=:c_mtch_acc
	 and STMTDT = :c_trade_date;  
  
  if( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName,"S31115",SQLMSG,c_errmsg);
		fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg ); 
    return;
  }   
   li_tot_rcrds++;
 }/*** end of while loop *****/
 if(li_tot_rcrds >0 )
 {	
  if (fn_committran( c_ServiceName,i_trnsctn, c_errmsg ) == -1 )
  {
      fn_errlog ( c_ServiceName, "S31120", LIBMSG, c_errmsg );
		  fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      return ;
  }
  fn_userlog(c_ServiceName,"Transaction  commited.");
 }
 else
 {
		  fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      return ;
 }
 fn_userlog(c_ServiceName,"Now updating process flag at CLICK end");
	EXEC SQL
		update PHYSICAL_CHARGES@CLICKDB
		SET EBA_PROCESS_FLAG='Y',
				EBA_PROCESS_TIME =systimestamp
		WHERE  EBA_PROCESS_FLAG='N' 
		and EBA_PROCESS_TIME is null 
		and MTCH_ID in
		( select MTCH_ID
			from TMP_PHYSICAL_CHARGES
			WHERE trunc(EBA_PROCESS_TIME)=trunc(sysdate)
			AND   EBA_PROCESS_FLAG='Y'
		);
	if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
	{
      fn_errlog ( c_ServiceName, "S31125", LIBMSG, c_errmsg );
      fn_bat_pst_msg ( c_ServiceName,"Error Updating EBA_FLAG at click end",c_tag); /** ver 1.1 **/
			EXEC SQL ROLLBACK;
      return ;
	}
	EXEC SQL COMMIT;
	if(SQLCODE !=0 )
	{
      fn_errlog ( c_ServiceName, "S31130", LIBMSG, c_errmsg );
      return ;
	}
 MEMSET(c_command); /** ver 1.1 **/
 fn_userlog(c_ServiceName,"%s - completed successfully for -%ld records out of :%ld: ",c_ServiceName,li_tot_rcrds,i_count_cmd);
 sprintf ( c_msg,"%s - completed successfully for -%ld records out of :%ld: ",c_ServiceName,li_tot_rcrds,i_count_cmd ); /** Ver 1.1 **/
 fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag ); /** Ver 1.1 **/ 
 sprintf( c_command, "ksh %s/sh_scripts/bat_phys_chrgs_prc_cnt.sh %d %ld",tuxgetenv("HOME"),i_count_cmd,li_tot_rcrds); /** ver 1.1 **/
 system(c_command); /** ver 1.1 **/
 fn_userlog(c_ServiceName, "Mail sent"); /** ver 1.1 **/
 return;
}
int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_PHYS_DEL_CHRG;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}
int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}
