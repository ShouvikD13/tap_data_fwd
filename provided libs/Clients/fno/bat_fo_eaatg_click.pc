/*******************************************************************************/
/*                                                                             */
/*   Purpose       : Bulk upload of FNO Exercise Assignment contract notes to  */
/*									 click database tables																		 */
/*                                                                             */
/*                                                                             */
/*   Input Param   : For date                                                  */
/*                                                                             */
/*   Output        : Success/Failure                                           */
/*                                                                             */
/*   Author        : ICICI Infotech                                            */
/*                                                                             */
/*   Date          : 04-Mar-2014                                               */
/*                                                                             */
/*   Version       :  1.0      Release (Sandip Tambe)                          */
/*   Version       :  1.1      CR-ISEC03-63562 Name from ICIS(Sandip)					 */
/*******************************************************************************/
#include <stdio.h>      /* C Header File                */
#include <stdlib.h>     /* C Header File                */
#include <sqlca.h>      /* Oracle header file           */
#include <atmi.h>       /* TUXEDO Header File           */
#include <fml32.h>      /* TUXEDO Header File           */
#include <Usysflds.h>   /* TUXEDO Field Definitions     */
#include <fml_def.h>
#include <fn_log.h>
#include <eba.h>
#include <fn_tuxlib.h>
#include <string.h>
#include <fn_read_debug_lvl.h>

#define MAX_REC 100


struct ea_conf_mstr
{
  char    sql_ecm_usr_mtch_accno[20+1];
  char    sql_ecm_excng_cd[3+1];
  char    sql_ecm_cntrct_nmbr[50+1];
  char    sql_ecm_cntrct_dt[24];
  long    l_ecm_record_id;
  char    sql_ecm_filename[50+1];
  char    sql_ecm_usr_nm[150+1];
  char    sql_ecm_add_ln1[100+1];
  char    sql_ecm_add_ln2[100+1];
  char    sql_ecm_add_ln3[100+1];
  char    sql_ecm_add_ln4[100+1];
  char    sql_ecm_ucc_cd[25+1];
  char    sql_ecm_trd_cd[20+1];
  char    sql_ecm_pan_no[50+1];
  char    sql_ecm_tel_no[50+1];
  char    sql_ecm_email_id1[100+1];
  char    sql_ecm_email_id2[100+1];
  char    sql_ecm_msg[50+1];
  double  d_ecm_amount;
  double  d_ecm_total;
  double  d_ecm_stt;
  double  d_stamp_duty;
  double  d_sebi_tt;
  double  d_tran_chrg;
  char    sql_fcm_deal_off_aval_flg;
  char    sql_ecm_deal_off_addr1[100+1];
  char    sql_ecm_deal_off_addr2[100+1];
  char    sql_ecm_deal_off_city[30+1];
  char    sql_ecm_deal_off_zip[20+1]; 
  char    sql_ecm_deal_off_state[30+1];
  char    sql_ecm_deal_off_cntry[30+1];
  char    sql_ecm_deal_off_phone[30+1];
  char    sql_ecm_deal_off_fax[30+1];  
};

struct ea_conf_dtls
{
  char    sql_ecd_cntrct_nmbr[50+1];
  char    sql_ecd_usr_mtch_accno[20+1];
  char    sql_ecd_cntrct_desc[150+1];
  char    sql_ecd_ea_dt[24];
  long    l_ecd_record_id;
  char    sql_ecd_optn_typ[24+1];
  double  d_ecd_strk_prc;
  double  d_ecd_setlmnt_prc;
  char    sql_ecd_ea_flg;
  long    l_ecd_qty;
  double  d_ecd_brkg;
  double  d_ecd_src_tx;
  double  d_ecd_cntrct_amt;
};
struct ea_annx_dtls
{
  char    sql_ead_contract_nmbr[50+1];
  char    sql_ead_mtch_accnt[20+1];
  char    sql_ead_cntrct_dt[24] ;
  long    sql_ead_record_id ;
  char    sql_ead_security[150+1];
  char    sql_ead_exp_dt[24+1];
  double  sql_ead_exercise ;
  double  sql_ead_stt      ;
  double  sql_ead_tot_stt ;
};
typedef struct  _co_clsout_mstr
{
  char     sql_ccm_usr_mtch_accno[20+1];
  char     sql_ccm_excng_cd[3+1];
  char     sql_ccm_clsoutnote_nmbr[50+1];
  char     sql_ccm_sttlmnt_dt[22+1];
  char     sql_ccm_clsout_dt[22+1];
  char     sql_ccm_clsout_typ;
  long     sql_ccm_record_id;
  char     sql_ccm_filename[50+1];
  char     sql_ccm_name[100+1];
  char     sql_ccm_add_ln1[100+1];
  char     sql_ccm_add_ln2[100+1];
  char     sql_ccm_add_ln3[100+1];
  char     sql_ccm_add_ln4[100+1];
  char     sql_ccm_pan_no[50+1];
  char     sql_ccm_tel_no[50+1];
  char     sql_ccm_email_id1[100+1];
  char     sql_ccm_email_id2[100+1];
  char     sql_ccm_msg[50+1];
  double   sql_ccm_amount;
  double   sql_ccm_total;
  double   sql_ccm_ttl_brkg;
  double   sql_ccm_trnv_chrg;
  double   sql_ccm_trsn_chrg;
  double   sql_ccm_ttl_stamp_duty;
  long     sql_ccm_seq_no;
  char     sql_ccm_trunc_dt[22+1];
  char     sql_ccm_mobile[15+1];
} co_clsout_mstr;
typedef struct _co_clsout_dtls
{
  char     sql_ccd_clsoutnote_nmbr[50+1];
  char     sql_ccd_usr_mtch_accno[20+1];
  char     sql_ccd_cntrct_code[150+1];
  double   sql_ccd_cntrct_amt;
  char     sql_ccd_clsout_dt[22+1];
  long     sql_ccd_record_id;
  int      sql_ccd_mrkt_lot;
  char     sql_ccd_trd_flw;
  int      sql_ccd_qty;
  double   sql_ccd_prc;
  double   sql_ccd_brkg;
  double   sql_ccd_src_tx;
  double   sql_ccd_cess;
  double   sql_ccd_stt;
  long     sql_ccd_seq_no;
  long     sql_ccd_no_cntr;
  double   sql_ccd_sebi_tt;
  double   sql_ccd_total_amt;
  char     sql_ccd_trunc_dt[22+1];
  char     sql_ccd_xchng_cd[3+1];
} co_clsout_dtls;
typedef struct _co_annx_dtls
{
  char     sql_cad_clsoutnote_nmbr[50+1];
  char     sql_cad_mtch_accnt[20+1];
  char     sql_cad_sttlmnt_dt[22+1];
  long     sql_cad_record_id;
  char     sql_cad_cntrct_code[100+1];
  double   sql_cad_stt;
  double   sql_cad_tot_stt;
  long     sql_cad_seq_no;
  char     sql_cad_trunc_dt[22+1];
} co_annx_dtls;


	long	l_bufferlength;
	long	li_len_tobuf;
	long	l_rows_fetched;

	long	l_count_ecm;
	long	l_count_ecd;
	long	l_count_ead;
	long  l_count_ccm;
	long  l_count_ccd;
	long  l_count_cad;

	int	i_max_rec_per_fetch = MAX_REC;
	int	i_ch_val;
	int	i_ret_val;
	int	i_err[10];
	int	i_mode;

	char	c_ServiceName[33];
	char	c_errmsg[256];
	char	c_event[256];
	char	c_tag[32];
	char	c_xchng_cd[4] = {'\0'};
	char	c_for_date[25] = {'\0'};
	char  c_called_for='0';
	long	l_err_cd = 0;
	
	FBFR32	*ptr_fml_Sbuffer;
	FBFR32	*ptr_fml_Rbuffer;
int fn_populate_ecm(void);
int fn_populate_ecd(void);
int fn_populate_ead(void);
int fn_populate_ccm(void);
int fn_populate_ccd(void);
int fn_populate_cad(void);

int fn_upld_eatmp(void);
int fn_upld_clstmp(void);
int fn_ins_log_hdr(void);


void main (int argc, char* argv[] )
{

	int i_trnsctn;
	TPINIT *ptr_tpinfo;

	strcpy(c_ServiceName, "bat_fo_eaatg_click");

	sprintf(c_tag,"%s_%s",c_ServiceName,"na");
  /* Create the pipe */
	if( fn_create_pipe() == -1)
	{
		printf ( "Unable to create pipe." );
		exit(-1);
	}

	if(argc != 4)
	{
		fn_userlog(c_ServiceName,"Invalid Arguments Passed.Pls Check.");
		fn_userlog(c_ServiceName,"USAGE <bat_fo_eaatg_click><Exchng_cd_NFO/BFO><date><Calledfor(E/C)");
		exit(-1); 
	}
	i_mode =1;

	INITBATDBGLVL(argv[0]);

	strcpy(c_for_date,argv[2]);	
	c_called_for=argv[3][0];	

	/* Get the input arguments */
	MEMSET ( c_ServiceName );
	strcpy ( c_ServiceName, argv[0] );
	MEMSET ( c_xchng_cd );
	strcpy ( c_xchng_cd, argv[1] );

	fn_userlog(c_ServiceName," Called For :%c:",c_called_for);
	fn_userlog(c_ServiceName,"c_xchng_cd from command =%s:",c_xchng_cd);
  /* Allocate space to typed buffer pointer */
	ptr_tpinfo = ( TPINIT * ) tpalloc ( "TPINIT", NULL, TPINITNEED ( 0 ) );
	if ( ptr_tpinfo == NULL )
	{
		fn_errlog ( c_ServiceName, "S31005", TPMSG, c_errmsg );
		exit ( -1 );
	}

  /* Check if ORA_GRP group is present in the system */
	if ( tuxgetenv( "ORA_GRP" ) == NULL )
	{
		fn_errlog ( c_ServiceName, "S31010", TPMSG, c_errmsg );
		tpfree ( ( char * ) ptr_tpinfo );
		exit ( -1 );
	}

  /* Prepare the values */
	strcpy ( ptr_tpinfo->passwd, "\0" );
	strcpy ( ptr_tpinfo->cltname, "\0" );
	strcpy ( ptr_tpinfo->grpname, tuxgetenv( "ORA_GRP" ) );
	strcpy ( ptr_tpinfo->usrname, c_ServiceName );
	ptr_tpinfo->flags = 0;

  /* Join the system application */
	if ( tpinit( (TPINIT *) ptr_tpinfo ) == -1 )
	{
		fn_errlog ( c_ServiceName, "S31015", TPMSG, c_errmsg );
		tpfree ( (char *) ptr_tpinfo );
		exit ( -1 );
	}

	 /* Free the space allocated to typed buffer pointer */
	tpfree ( (char *) ptr_tpinfo );
	
	 /* Register the Batch */
	if ( fn_rgstr_bat( 'R', c_ServiceName, c_xchng_cd, "NA" ) != 1 )
	{
		fn_errlog ( c_ServiceName, "S31020", LIBMSG, c_errmsg );
		sprintf(c_event,"BAT_FO_EAATG_CLICK: 1 instance already running");
		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
		tpclose ( );
		tpterm ( );
		exit ( -1 );
	}



  /* Open the Resource Manager */
	if ( tpopen() == -1 )
	{
		fn_errlog ( c_ServiceName, "S31025", TPMSG, c_errmsg );
		sprintf(c_event,"Unable to Connect to database..");
		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
		tpterm ( );
		exit ( -1 );
	}


	fn_userlog(c_ServiceName,"bat_fo_eaatg_click:started processing ");
	sprintf(c_event,"bat_fo_eaatg_click:started processing");
	fn_bat_pst_msg(c_ServiceName,c_event,c_tag);

	if(c_called_for == 'E')
	{
		fn_userlog(c_ServiceName,"Processing for ATG Exercs and Assignment Note ");

		EXEC SQL TRUNCATE TABLE TMP_ECM_CONF_MSTR_ATG;

		if(SQLCODE != 0)
		{
			fn_errlog(c_ServiceName, "S31030", SQLMSG, c_errmsg );
			sprintf(c_event,"System error-contact sys.support");
			fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
			fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
			tpclose ( );
			tpterm ( );
			exit(-1) ;
		}

		EXEC SQL TRUNCATE TABLE TMP_ECD_CONF_DTLS_ATG;

		if(SQLCODE != 0)
		{
			fn_errlog(c_ServiceName, "S31035", SQLMSG, c_errmsg );
			sprintf(c_event,"System error-contact sys.support");
			fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
			fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
			tpclose ( );
			tpterm ( );
			exit(-1) ; 
		}

		EXEC SQL TRUNCATE TABLE TMP_EAD_ANNX_DTLS_ATG; 

		if(SQLCODE != 0)
		{
			fn_errlog(c_ServiceName, "S31040", SQLMSG, c_errmsg );
			sprintf(c_event,"System error-contact sys.support");
			fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
			fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
			tpclose ( );
			tpterm ( );
			exit(-1);
		}

		i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );
		if ( i_trnsctn == -1 )
		{
			fn_errlog ( c_ServiceName, "S31045", LIBMSG, c_errmsg );
			fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
			tpclose ( );
			tpterm ( );
			exit(-1);
		}
		
		i_ret_val = fn_upld_eatmp();
		if(i_ret_val == -1)
		{
			fn_errlog(c_ServiceName, "S31050",SQLMSG, c_errmsg);
			sprintf(c_event,"System error-contact sys.support");
			fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
			fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
			fn_aborttran ( c_ServiceName, i_trnsctn, c_errmsg );
			tpclose ( );
			tpterm ( );
			exit(-1);
		}
	
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Data upload to temp table completed");
		}

		i_ret_val = fn_committran ( c_ServiceName, i_trnsctn, c_errmsg );
		if ( i_ret_val == -1 )
		{ 
			fn_aborttran ( c_ServiceName, i_trnsctn, c_errmsg );
			fn_errlog(c_ServiceName, "S31055", TPMSG, c_errmsg );
			fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
			tpclose ( );
			tpterm ( );
			exit(-1);
		}


		ptr_fml_Rbuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
		if (ptr_fml_Rbuffer == NULL)
		{
			fn_errlog(c_ServiceName, "S31060", TPMSG, c_errmsg);
			fn_userlog(c_ServiceName,"Click Upload:Unable to Allocate Receive Memory ..");
			sprintf(c_event,"sys error.Contact sys.support");
			fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
			fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
			tpclose ( );
			tpterm ( );
			exit(-1) ;
		}


		i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );
		if ( i_trnsctn == -1 )
		{
			fn_errlog ( c_ServiceName, "S31065", LIBMSG, c_errmsg );
			fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
			tpclose ( );
			tpterm ( );
			exit(-1);
		}
		i_ret_val = fn_populate_ecm();

		if(i_ret_val == -1)
		{
			fn_userlog(c_ServiceName,"Failed to upload ATG ECM");
			sprintf(c_event,"Unable to populate ATG  ECM-contact sys.support");
			fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
			fn_aborttran ( c_ServiceName, i_trnsctn, c_errmsg );
			fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
			tpfree((char *)ptr_fml_Sbuffer );
			tpfree((char *)ptr_fml_Rbuffer );
			tpclose ( );
			tpterm ( );
			exit(-1);
		}

		i_ret_val = fn_populate_ecd();

		if(i_ret_val == -1)
		{
			sprintf(c_event,"Unable to populate ATG ECD-contact sys.support");
			fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
			fn_aborttran ( c_ServiceName, i_trnsctn, c_errmsg );
			fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
			fn_userlog(c_ServiceName,"Failed to upload FCD");
			tpfree((char *)ptr_fml_Sbuffer );
			tpfree((char *)ptr_fml_Rbuffer );
			tpclose ( );
			tpterm ( );
			exit(-1);
		}

		i_ret_val = fn_populate_ead();

		if(i_ret_val == -1)
		{
			sprintf(c_event,"Unable to populate FAD-contact sys.support");
			fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
			fn_aborttran ( c_ServiceName, i_trnsctn, c_errmsg );
			fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
			fn_userlog(c_ServiceName,"Failed to upload AT EAD");
			tpfree((char *)ptr_fml_Sbuffer );
			tpfree((char *)ptr_fml_Rbuffer );
			tpclose ( );
			tpterm ( );
			exit(-1);
		}
	
		if(l_count_ecm > 0)
		{
			i_ret_val = fn_ins_log_hdr();

			if(i_ret_val == -1)
			{
				sprintf(c_event,"Unable to Insert Loghdr for TAG EA-contact sys.support");
				fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
				fn_aborttran ( c_ServiceName, i_trnsctn, c_errmsg );
				fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
				fn_userlog(c_ServiceName,"Failed to upload ATG EAD");
				tpfree((char *)ptr_fml_Sbuffer );
				tpfree((char *)ptr_fml_Rbuffer );
				tpclose ( );
				tpterm ( );
				exit(-1);
			}
		}
	} /** end of exercise Assignnment call **/
	else if(c_called_for == 'C')
	{
		fn_userlog(c_ServiceName,"Processing for ATG Closeout Note to Click");

		EXEC SQL TRUNCATE TABLE TMP_CCM_CLSOUT_MSTR_ATG;

		if(SQLCODE != 0)
		{
			fn_errlog(c_ServiceName, "S31070", SQLMSG, c_errmsg );
			sprintf(c_event,"System error-contact sys.support");
			fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
			fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
			tpclose ( );
			tpterm ( );
			exit(-1) ;
		}

		EXEC SQL TRUNCATE TABLE TMP_CCD_CLSOUT_DTLS_ATG;

		if(SQLCODE != 0)
		{
			fn_errlog(c_ServiceName, "S31075", SQLMSG, c_errmsg );
			sprintf(c_event,"System error-contact sys.support");
			fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
			fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
			tpclose ( );
			tpterm ( );
			exit(-1) ; 
		}

		EXEC SQL TRUNCATE TABLE TMP_CAD_CLSOUT_ANNX_DTLS_ATG; 

		if(SQLCODE != 0)
		{
			fn_errlog(c_ServiceName, "S31080", SQLMSG, c_errmsg );
			sprintf(c_event,"System error-contact sys.support");
			fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
			fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
			tpclose ( );
			tpterm ( );
			exit(-1);
		}

	
		i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );
		if ( i_trnsctn == -1 )
		{
			fn_errlog ( c_ServiceName, "S31085", LIBMSG, c_errmsg );
			fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
			tpclose ( );
			tpterm ( );
			exit(-1);
		}

		i_ret_val = fn_upld_clstmp();

		if(i_ret_val == -1)
		{
			fn_errlog(c_ServiceName, "S31090",SQLMSG, c_errmsg);
			sprintf(c_event,"System error-contact sys.support");
			fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
			fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
			fn_aborttran ( c_ServiceName, i_trnsctn, c_errmsg );
			tpclose ( );
			tpterm ( );
			exit(-1);
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"ATG Closeout Data upload to temp table completed");
		}

		i_ret_val = fn_committran ( c_ServiceName, i_trnsctn, c_errmsg );
		if ( i_ret_val == -1 )
		{ 
			fn_aborttran ( c_ServiceName, i_trnsctn, c_errmsg );
			fn_errlog(c_ServiceName, "S31095", TPMSG, c_errmsg );
			fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
			tpclose ( );
			tpterm ( );
			exit(-1);
		}


		ptr_fml_Rbuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
		if (ptr_fml_Rbuffer == NULL)
		{
			fn_errlog(c_ServiceName, "S31100", TPMSG, c_errmsg);
			fn_userlog(c_ServiceName,"Click Upload:Unable to Allocate Receive Memory ..");
			sprintf(c_event,"sys error.Contact sys.support");
			fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
			fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
			tpclose ( );
			tpterm ( );
			exit(-1) ;
		}


		i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );
		if ( i_trnsctn == -1 )
		{
			fn_errlog ( c_ServiceName, "S31105", LIBMSG, c_errmsg );
			fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
			tpclose ( );
			tpterm ( );
			exit(-1);
		}
		i_ret_val = fn_populate_ccm();

		if(i_ret_val == -1)
		{
			fn_userlog(c_ServiceName,"Failed to upload ATG CCM");
			sprintf(c_event,"Unable to populate ATG  CCM-contact sys.support");
			fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
			fn_aborttran ( c_ServiceName, i_trnsctn, c_errmsg );
			fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
			tpfree((char *)ptr_fml_Sbuffer );
			tpfree((char *)ptr_fml_Rbuffer );
			tpclose ( );
			tpterm ( );
			exit(-1);
		}

		i_ret_val = fn_populate_ccd();

		if(i_ret_val == -1)
		{
			sprintf(c_event,"Unable to populate ATG CCD-contact sys.support");
			fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
			fn_aborttran ( c_ServiceName, i_trnsctn, c_errmsg );
			fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
			fn_userlog(c_ServiceName,"Failed to upload CCD");
			tpfree((char *)ptr_fml_Sbuffer );
			tpfree((char *)ptr_fml_Rbuffer );
			tpclose ( );
			tpterm ( );
			exit(-1);
		}

		i_ret_val = fn_populate_cad();

		if(i_ret_val == -1)
		{
			sprintf(c_event,"Unable to populate CAD-contact sys.support");
			fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
			fn_aborttran ( c_ServiceName, i_trnsctn, c_errmsg );
			fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
			fn_userlog(c_ServiceName,"Failed to upload AT CAD");
			tpfree((char *)ptr_fml_Sbuffer );
			tpfree((char *)ptr_fml_Rbuffer );
			tpclose ( );
			tpterm ( );
			exit(-1);
		}
	
		if(l_count_ccm > 0)
		{
			i_ret_val = fn_ins_log_hdr();

			if(i_ret_val == -1)
			{
				sprintf(c_event,"Unable to Insert Loghdr for ATG CLS-contact sys.support");
				fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
				fn_aborttran ( c_ServiceName, i_trnsctn, c_errmsg );
				fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
				fn_userlog(c_ServiceName,"Failed to upload ATG CAD");
				tpfree((char *)ptr_fml_Sbuffer );
				tpfree((char *)ptr_fml_Rbuffer );
				tpclose ( );
			}
		}
	}	/** End of ARG Closeout note to click **/
	i_ret_val = fn_committran ( c_ServiceName, i_trnsctn, c_errmsg );
	if ( i_ret_val == -1 )
	{
		fn_errlog(c_ServiceName, "S31110", TPMSG, c_errmsg ); 
		sprintf(c_event,"System error-contact sys.support");
		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
		fn_aborttran ( c_ServiceName, i_trnsctn, c_errmsg );
		fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
		tpfree((char *)ptr_fml_Sbuffer );
		tpfree((char *)ptr_fml_Rbuffer );
		tpclose ( );
		tpterm ( );
		exit(-1);
	} 
	
	tpfree((char *)ptr_fml_Rbuffer);
	fn_rgstr_bat('U',c_ServiceName,c_xchng_cd,"NA");
	sprintf(c_event,"bat_fo_eaatg_click completed sucessfully");
	fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
	tpclose( );
	tpterm( );
	exit(0) ;
}


int fn_upld_eatmp(void)
{

	EXEC  SQL
		EXECUTE
			BEGIN
				RESET_SEQUENCE('SEQ_CLKFNO_RECNO_ATG');		
			END;
		END-EXEC;

	if(SQLCODE != 0)
	{
		fn_userlog(c_ServiceName,"Error in sequence number resetting");
		fn_errlog(c_ServiceName,"S31115",SQLMSG,c_errmsg);
		return -1;
	}	

	EXEC  SQL
		EXECUTE
			BEGIN
				RESET_SEQUENCE('SEQ_CLKFNO_NMBR_ATG');	
			END;
	END-EXEC;

	if(SQLCODE != 0)
	{
		fn_userlog(c_ServiceName,"Error in sequence number resetting");
		fn_errlog(c_ServiceName,"S31120",SQLMSG, c_errmsg);
			return -1;
	}	

	fn_userlog(c_ServiceName,"uploading in ATG ECM..........");

	EXEC SQL
	   INSERT INTO TMP_ECM_CONF_MSTR_ATG
    (
      ECM_USR_MTCH_ACCNO,
      ECM_EXCNG_CD,
      ECM_CNTRCT_NMBR,
      ECM_CNTRCT_DT,
      ECM_RECORD_ID,
      ECM_FILENAME,
      ECM_USR_NM,
      ECM_ADD_LN1,
      ECM_ADD_LN2,
      ECM_ADD_LN3,
      ECM_ADD_LN4,
      ECM_UCC_CD,
      ECM_TRD_CD,
      ECM_PAN_NO,
      ECM_TEL_NO,
      ECM_EMAIL_ID1,
      ECM_EMAIL_ID2,
      ECM_MSG,
      ECM_AMOUNT,
      ECM_TOTAL,
      ECM_STT,
      ECM_SEQ_NO,
      ECM_TRUNC_DT,
      ECM_STAMP_DUTY,
      ECM_SEBI_TT,
      ECM_TRAN_CHRG,
			ECM_DEAL_OFF_AVAL_FLG,
      ECM_DEAL_OFF_ADDR1,
      ECM_DEAL_OFF_ADDR2,
      ECM_DEAL_OFF_CITY,
      ECM_DEAL_OFF_ZIP, 
      ECM_DEAL_OFF_STATE,
      ECM_DEAL_OFF_CNTRY,
      ECM_DEAL_OFF_PHONE,
      ECM_DEAL_OFF_FAX  
    )
		(
    SELECT
      ECM_USR_MTCH_ACCNO,
     	'ETG', 
      ECM_CNTRCT_NMBR,
      ECM_CNTRCT_DT,
      SEQ_CLKFNO_NMBR_ATG.NEXTVAL,
			IAD_PIN || '_' || substr(ECM_USR_MTCH_ACCNO,1,3) || lpad(ICD_SERIAL_NO,10,'0') || '_' || to_char(ECM_CNTRCT_DT,'YYYYMMDD') || '_' || SEQ_CLKFNO_NMBR_ATG.NEXTVAL || '_ETG', 
      /*ECM_USR_NM, ***Ver 1.1 comment **/
      nvl(IPD_FIRST_NAME,' ')||' '||nvl(IPD_MIDDLE_NAME,' ')||' '|| nvl(IPD_LAST_NAME,' ') "ECM_USR_NM",   /** Ver 1.1 **/
      ECM_ADD_LN1,
      ECM_ADD_LN2,
      ECM_ADD_LN3,
      ECM_ADD_LN4,
      ECM_UCC_CD,
      ECM_USR_MTCH_ACCNO,
      ECM_PAN_NO,
      ECM_TEL_NO,
      NVL(ECM_EMAIL_ID1,'*'),
      NVL(ECM_EMAIL_ID2,'*'),
      DECODE(SIGN(ECM_TOTAL), -1 ,'Receivable from you','Payable to you'),
      ECM_TOTAL,
      ECM_STT,
      ECM_STT,
      SEQ_CLKFNO_NMBR_ATG.NEXTVAL,
      trunc(ECM_CNTRCT_DT),
      ECM_STAMP_DUTY,
      ECM_SEBI_TT,
      ECM_TRAN_CHRG,
			'A',
      ECM_DEAL_OFF_ADDR1,
      ECM_DEAL_OFF_ADDR2,
      ECM_DEAL_OFF_CITY,
      ECM_DEAL_OFF_ZIP,
      ECM_DEAL_OFF_STATE,
      ECM_DEAL_OFF_CNTRY,
      ECM_DEAL_OFF_PHONE,
      ECM_DEAL_OFF_FAX
		FROM ATG_ECM_CNTRCT_MSTR_EA A,
		ICD_INFO_CLIENT_DTLS , IAD_INFO_ADDRESS_DTLS ,
		IPD_INFO_PERSONAL_DTLS																/** Ver 1.1 **/
		WHERE trunc(ECM_CNTRCT_DT)= :c_for_date
		AND ECM_USR_MTCH_ACCNO  = ICD_CLNT_CD_ATS   
    AND ICD_SERIAL_NO    = IAD_SERIAL_NO       
    AND IAD_ADDRESS_TYPE = 'APPLICANT_CORR'
		AND ICD_SERIAL_NO    = IPD_SERIAL_NO								/** Ver 1.1 **/
		AND IPD_TYPE      = 'APPLICANT'											/** Ver 1.1 **/
		AND ECM_USR_MTCH_ACCNO in ( 
																select 	distinct ECD_USR_MTCH_ACCNO 
																from 		ATG_ECD_CNTRCT_DTLS_EA B 
																where		ECD_EA_FLG != 'C' 
																and 		A.ECM_CNTRCT_NMBR = B.ECD_CNTRCT_NMBR
															)   
		);

	if(SQLCODE != 0)
	{
		fn_userlog(c_ServiceName,"Error in ATG ECM Upload");
		fn_errlog(c_ServiceName,"S31125",SQLMSG, c_errmsg);
		return -1;
	}

	l_count_ecm =	sqlca.sqlerrd[2];

	fn_userlog(c_ServiceName,"l_count_ecm = [%d]",l_count_ecm);

	fn_userlog(c_ServiceName,"uploading in ATG ECD..........");

	
	EXEC  SQL
		EXECUTE
			BEGIN
				RESET_SEQUENCE('SEQ_CLKFNO_NMBR_ATG');	
		END;
	END-EXEC;

	if(SQLCODE != 0)
	{
		fn_userlog(c_ServiceName,"Error in sequence number resetting");
		fn_errlog(c_ServiceName,"S31130",SQLMSG, c_errmsg);
		return -1;
	}

	EXEC SQL
		INSERT INTO TMP_ECD_CONF_DTLS_ATG	
			(	
      ECD_CNTRCT_NMBR,
      ECD_USR_MTCH_ACCNO,
      ECD_CNTRCT_DESC,
      ECD_EA_DT,
      ECD_RECORD_ID,
      ECD_OPTN_TYP,
      ECD_STRK_PRC,
      ECD_SETLMNT_PRC ,
      ECD_EA_FLG,
      ECD_QTY,
      ECD_BRKG,
      ECD_SRC_TX,
      ECD_CNTRCT_AMT,
      ECD_SEQ_NO,
      ECD_TRUNC_DT
			)
			(SELECT 
				ECD_CNTRCT_NMBR,	
				ECD_USR_MTCH_ACCNO,
				ECD_CNTRCT_DESC,
				ECD_EA_DT,
				-1,
				DECODE(SUBSTR(ECD_OPTN_TYP,1,1),'P','PUT','C','CALL'),
				ECD_STRK_PRC,
				ECD_SETLMNT_PRC,
				ECD_EA_FLG,
				ECD_QTY,
				ECD_BRKG,
				ECD_SRC_TX,
				ECD_CNTRCT_AMT,
				SEQ_CLKFNO_NMBR_ATG.NEXTVAL,
				ECD_EA_DT
				FROM 	ATG_ECD_CNTRCT_DTLS_EA
				WHERE 	TRUNC(ECD_EA_DT)= :c_for_date
				AND   ECD_EA_FLG <> 'C'
				AND ECD_CNTRCT_NMBR in ( SELECT distinct ECM_CNTRCT_NMBR 
																 FROM 	TMP_ECM_CONF_MSTR_ATG
															 )
			);


	if(SQLCODE != 0)
	{
		fn_userlog(c_ServiceName,"Error in ECD Upload");
		fn_errlog(c_ServiceName,"S31135",SQLMSG, c_errmsg);
		return -1;
	}

	l_count_ecd = sqlca.sqlerrd[2];

	fn_userlog(c_ServiceName,"l_count_ecd = [%d]",l_count_ecd);


	fn_userlog(c_ServiceName,"uploading in ATG EAD..........");
	

	EXEC  SQL
		EXECUTE
			BEGIN
				RESET_SEQUENCE('SEQ_CLKFNO_NMBR_ATG');			
			END;
	END-EXEC;

	if(SQLCODE != 0)
	{
		fn_userlog(c_ServiceName,"Error in sequence number resetting");
		fn_errlog(c_ServiceName,"S31140",SQLMSG, c_errmsg);
		return -1;
	}

	EXEC SQL
		INSERT INTO TMP_EAD_ANNX_DTLS_ATG
			(	EAD_CNTRCT_NMBR,
				EAD_MTCH_ACCNT,
				EAD_CNTRCT_DT,
				EAD_RECORD_ID,
				EAD_SECURITY,
				EAD_EXP_DT,
				EAD_EXERCISE,
				EAD_STT,
				EAD_TOT_STT,
				EAD_SEQ_NO,
				EAD_TRUNC_DT
			)
			(
			SELECT
				EAD_CNTRCT_NMBR,
				EAD_MTCH_ACCNT,
				trunc(EAD_CNTRCT_DT),
				-1,
				EAD_SECURITY,
				EAD_EXP_DT,
				EAD_EXERCISE,
				EAD_STT,
				EAD_TOT_STT,
				SEQ_CLKFNO_NMBR_ATG.NEXTVAL,
				TRUNC(EAD_CNTRCT_DT)	
			FROM
				 ATG_EAD_ANNX_DTLS_EA
			WHERE TRUNC(EAD_CNTRCT_DT) = :c_for_date
			AND EAD_CNTRCT_NMBR in ( SELECT distinct ECM_CNTRCT_NMBR 
																 FROM 	TMP_ECM_CONF_MSTR_ATG
															 )
			);

	if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
	{
		fn_userlog(c_ServiceName,"Error in EAD Upload");
		fn_errlog(c_ServiceName,"S31145",SQLMSG,c_errmsg);
		return -1;
	}

	l_count_ead = sqlca.sqlerrd[2];

	fn_userlog(c_ServiceName,"l_count_ead = [%d]",l_count_ead); 
	
	if( l_count_ecd > 0 )
	{	
		fn_userlog(c_ServiceName,"updating record number in ATG ECD");
		fn_userlog(c_ServiceName,"c_for_date :%s:",c_for_date);

		EXEC SQL
			UPDATE TMP_ECD_CONF_DTLS_ATG A
			SET ECD_RECORD_ID = (SELECT ECM_RECORD_ID FROM TMP_ECM_CONF_MSTR_ATG B		
														WHERE B.ECM_CNTRCT_NMBR = A.ECD_CNTRCT_NMBR
														AND		B.ECM_CNTRCT_DT		= :c_for_date
													)
			WHERE ECD_TRUNC_DT = :c_for_date;
	
		if(SQLCODE != 0)
		{
			fn_userlog(c_ServiceName,"Error in ATG ECD record number update");
			fn_errlog(c_ServiceName,"S31150",SQLMSG, c_errmsg);
			return -1;
		}
	}
	
	if(l_count_ead > 0) 
  {
		fn_userlog(c_ServiceName,"updating record number in ATG EAD");

		EXEC SQL
			UPDATE TMP_EAD_ANNX_DTLS_ATG A		
			SET EAD_RECORD_ID = (SELECT ECM_RECORD_ID FROM TMP_ECM_CONF_MSTR_ATG B
													WHERE B.ECM_CNTRCT_NMBR = A.EAD_CNTRCT_NMBR
													AND   B.ECM_CNTRCT_DT   = :c_for_date
													)
			WHERE EAD_TRUNC_DT = :c_for_date;

		if(SQLCODE != 0)
		{
			fn_userlog(c_ServiceName,"Error in FCD record number update");
			fn_errlog(c_ServiceName,"S31155",SQLMSG,c_errmsg);
			return -1;
		} 
	}
	return 0;
}



int fn_populate_ecm()
{
	int  i_counter;
	long l_count =1;
	char c_ins_flg;
	unsigned char *c_msg_cbuf;
	struct ea_conf_mstr ecm_conf_mstr_arr[MAX_REC];

	l_bufferlength = Fneeded32(1, sizeof(ecm_conf_mstr_arr));
	ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);
	if (ptr_fml_Sbuffer == NULL)
	{
		fn_userlog(c_ServiceName,"Error in Allocating buffer FCM");
		fn_errlog(c_ServiceName, "S31160", TPMSG, c_errmsg);
		return(-1);
	}

	c_ins_flg = 'A';  /** Insert into ECM **/

	for ( l_count=0;l_count < l_count_ecm;l_count += i_max_rec_per_fetch )
	{
		MEMSET(ecm_conf_mstr_arr);

		EXEC ORACLE OPTION (char_map=string);

		EXEC SQL
			SELECT
        ECM_USR_MTCH_ACCNO,
        ECM_EXCNG_CD,
        ECM_CNTRCT_NMBR,
        ECM_CNTRCT_DT,
        ECM_RECORD_ID,
        ECM_FILENAME,
        ECM_USR_NM,
        ECM_ADD_LN1,
        ECM_ADD_LN2,
        ECM_ADD_LN3,
        ECM_ADD_LN4,
        ECM_UCC_CD,
        ECM_TRD_CD,
        ECM_PAN_NO,
        ECM_TEL_NO,
        ECM_EMAIL_ID1,
        ECM_EMAIL_ID2,
        ECM_MSG,
        ECM_AMOUNT,
        ECM_TOTAL,
        ECM_STT,
        ECM_STAMP_DUTY,
        ECM_SEBI_TT,
        ECM_TRAN_CHRG,
        'A',			
        ecm_deal_off_addr1,  
        ecm_deal_off_addr2, 
        ecm_deal_off_city, 
        ecm_deal_off_zip, 
        ecm_deal_off_state,
        ecm_deal_off_cntry,
        ecm_deal_off_phone,
        ecm_deal_off_fax  
			INTO
				:ecm_conf_mstr_arr	
			FROM
				TMP_ECM_CONF_MSTR_ATG		
			WHERE ECM_SEQ_NO >= :l_count + 1
			AND		ECM_SEQ_NO <= :l_count + :i_max_rec_per_fetch;

	if( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
	{
		if( SQLCODE == 1403)
		{
			if (sqlca.sqlerrd[2] == 0)
				break;
		}
		else
		{
			fn_userlog(c_ServiceName,"Data select for ATG ECM failed");
			fn_errlog(c_ServiceName, "S31165", SQLMSG, c_errmsg);
			return (-1);
		}
	}

	l_rows_fetched = (l_count + i_max_rec_per_fetch > l_count_ecm)? l_count_ecm%i_max_rec_per_fetch : i_max_rec_per_fetch;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"bat_fo_eaatg_click : Rows fetched : |%d| |%d|", l_rows_fetched, SQLCODE );
	}	

  sprintf(c_event,"bat_fo_eaatg_click:Rows fetched ATG ECM:%d:",l_rows_fetched);
  fn_bat_pst_msg(c_ServiceName,c_event,c_tag);

	Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
	Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

		MEMSET(c_msg_cbuf);

	c_msg_cbuf = (unsigned char *)ecm_conf_mstr_arr;

	l_bufferlength =  sizeof(ecm_conf_mstr_arr);
	fn_userlog(c_ServiceName,"FML_VLME=:%ld:",l_bufferlength);	
	i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
	i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
	i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&l_rows_fetched,0);
	i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);

	for(i_counter = 0;i_counter < 4;i_counter++)
	{
		if(i_err[i_counter] == -1)
		{
			fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
			fn_errlog(c_ServiceName, "S31170", FMLMSG, c_errmsg);
			return(-1);
		}
	}

	i_ch_val = tpcall("SFO_EACLK_UPLD", (char *)ptr_fml_Sbuffer, 0,(char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);
	if (i_ch_val == -1)
	{
		fn_userlog(c_ServiceName,"Error in calling service for ATG ECM");
		if(TPCODE != TPESVCFAIL)
		{
			fn_errlog(c_ServiceName, "S31175", TPMSG, c_errmsg);
		}
		else
		{
			Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
			fn_errlog(c_ServiceName, "S31180", c_errmsg, c_errmsg);
		}
	return(-1);
	}

  }

	tpfree( (char *)ptr_fml_Sbuffer);
	return(0);
} 


int fn_populate_ecd()
{
	int  i_counter;
	long l_count =1;
	char c_ins_flg;
	unsigned char *c_msg_cbuf;
	struct ea_conf_dtls ecd_conf_dtls_arr[MAX_REC];

	l_bufferlength = Fneeded32(1, sizeof(ecd_conf_dtls_arr));
	ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);
	if (ptr_fml_Sbuffer == NULL)
	{
		fn_userlog(c_ServiceName,"Error in Allocating buffer FCD");
		fn_errlog(c_ServiceName, "S31185", TPMSG, c_errmsg);
		return(-1);
	}

	c_ins_flg = 'B'; /** Insert into ECD **/

	for ( l_count=0;l_count < l_count_ecd;l_count += i_max_rec_per_fetch )
	{
		MEMSET(ecd_conf_dtls_arr);

		EXEC ORACLE OPTION (char_map=string);
    EXEC SQL
      SELECT
        ECD_CNTRCT_NMBR,
        ECD_USR_MTCH_ACCNO,
        ECD_CNTRCT_DESC,
        ECD_EA_DT,
        ECD_RECORD_ID,
        ECD_OPTN_TYP,
        ECD_STRK_PRC,
        ECD_SETLMNT_PRC,
        ECD_EA_FLG,
        ECD_QTY,
        ECD_BRKG,
        ECD_SRC_TX,
        ECD_CNTRCT_AMT
      INTO
        :ecd_conf_dtls_arr
      FROM
        TMP_ECD_CONF_DTLS_ATG
      WHERE ECD_SEQ_NO >= :l_count + 1
      AND   ECD_SEQ_NO <= :l_count + :i_max_rec_per_fetch;

		if( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
		{
			if( SQLCODE == 1403)
			{
				if (sqlca.sqlerrd[2] == 0)
					break;
			}
			else
			{
				fn_userlog(c_ServiceName,"Data select for ATG ECD failed");
				fn_errlog(c_ServiceName, "S31190", SQLMSG, c_errmsg);
				return (-1);
			}
		}

		l_rows_fetched = (l_count + i_max_rec_per_fetch > l_count_ecd)? l_count_ecd%i_max_rec_per_fetch : i_max_rec_per_fetch;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"bat_fo_eaatg_click : Rows fetched : |%d| |%d|", l_rows_fetched, SQLCODE );
		}

		sprintf(c_event,"bat_fo_eaatg_click:Rows fetched ECD:%d:",l_rows_fetched);
  	fn_bat_pst_msg(c_ServiceName,c_event,c_tag);

		Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
		Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

		MEMSET(c_msg_cbuf);

		c_msg_cbuf = (unsigned char *)ecd_conf_dtls_arr;

		l_bufferlength =  sizeof(ecd_conf_dtls_arr);

    i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
    i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
    i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&l_rows_fetched,0);
    i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);

    for(i_counter = 0;i_counter < 4;i_counter++)
    {
      if(i_err[i_counter] == -1)
      {
        fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
        fn_errlog(c_ServiceName, "S31195", FMLMSG, c_errmsg);
      return(-1);
      }
    }

    i_ch_val = tpcall("SFO_EACLK_UPLD", (char *)ptr_fml_Sbuffer, 0,(char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);
    if(i_ch_val == -1)
    {
      fn_userlog(c_ServiceName,"Error in calling service for FCD");
      if(TPCODE != TPESVCFAIL)
      {
        fn_errlog(c_ServiceName, "S31200", TPMSG, c_errmsg);
      }
      else
      {
      Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
      fn_errlog(c_ServiceName, "S31205", c_errmsg, c_errmsg);
      }
	 		return(-1);
		}
	}
  tpfree( (char *)ptr_fml_Sbuffer);
  return(0);
}
int fn_populate_ead()
{
  int  i_counter;
  long l_count =1;
  char c_ins_flg;
  unsigned char *c_msg_cbuf;
  struct ea_annx_dtls ea_annx_dtls_arr[MAX_REC];

  l_bufferlength = Fneeded32(1, sizeof(ea_annx_dtls_arr));
  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);
  if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Error in Allocating buffer FAD");
    fn_errlog(c_ServiceName, "S31210", TPMSG, c_errmsg);
    return(-1);
  }

  c_ins_flg = 'C';  /** Insert into EAD **/

  for ( l_count=0;l_count < l_count_ead;l_count += i_max_rec_per_fetch )
  {
    MEMSET(ea_annx_dtls_arr);

    EXEC ORACLE OPTION (char_map=string);
    EXEC SQL
      SELECT
        EAD_CNTRCT_NMBR,
        EAD_MTCH_ACCNT,
        EAD_CNTRCT_DT,
        EAD_RECORD_ID,
        EAD_SECURITY,
        EAD_EXP_DT,
        EAD_EXERCISE,
        EAD_STT,
        EAD_TOT_STT
      INTO
        :ea_annx_dtls_arr
      FROM
        TMP_EAD_ANNX_DTLS_ATG
      WHERE EAD_SEQ_NO >= :l_count + 1
      AND   EAD_SEQ_NO <= :l_count + :i_max_rec_per_fetch;

    if( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
    {
      if( SQLCODE == 1403)
      {
        if (sqlca.sqlerrd[2] == 0)
          break;
      }
      else
      {
        fn_userlog(c_ServiceName,"Data select for ATG FAD failed");
        fn_errlog(c_ServiceName, "S31215", SQLMSG, c_errmsg);
        return (-1);
      }
    }

    l_rows_fetched = (l_count + i_max_rec_per_fetch > l_count_ead)? l_count_ead%i_max_rec_per_fetch:i_max_rec_per_fetch;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"bat_fo_eaatg_click : Rows fetched : |%d| |%d|", l_rows_fetched, SQLCODE );
    }

    sprintf(c_event,"bat_fo_eaatg_click:Rows fetched ATG EAD:%d:",l_rows_fetched);
    fn_bat_pst_msg(c_ServiceName,c_event,c_tag);

    Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
    Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

    MEMSET(c_msg_cbuf);
    c_msg_cbuf = (unsigned char *)ea_annx_dtls_arr;

    l_bufferlength =  sizeof(ea_annx_dtls_arr);

    i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
    i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
    i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&l_rows_fetched,0);
    i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);

    for(i_counter = 0;i_counter < 4;i_counter++)
    {
      if(i_err[i_counter] == -1)
      {
        fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
        fn_errlog(c_ServiceName, "S31220", FMLMSG, c_errmsg);
        return(-1);
      }
    }

    i_ch_val = tpcall("SFO_EACLK_UPLD", (char *)ptr_fml_Sbuffer, 0,(char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);
    if (i_ch_val == -1)
    {
      fn_userlog(c_ServiceName,"Error in calling service for ATG EAD");
      if(TPCODE != TPESVCFAIL)
      {
        fn_errlog(c_ServiceName, "S31225", TPMSG, c_errmsg);
      }
      else
      {
        Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
        fn_errlog(c_ServiceName, "S31230", c_errmsg, c_errmsg);
      }
    return(-1);
    }

  }
  tpfree(( char *)ptr_fml_Sbuffer);
  return (0);
}

int fn_ins_log_hdr()
{
  int  i_counter;
  char c_ins_flg;
  char c_doc_typ  [7]={'\0'};
  fn_userlog(c_ServiceName,"c_xchng_cd=:%s",c_xchng_cd);

  if((strcmp(c_xchng_cd,"NFO") == 0) && (c_called_for =='E'))
  {
    strcpy(c_doc_typ,"NEATG");
  }
  else if((strcmp(c_xchng_cd,"BFO") == 0) && (c_called_for =='E'))
  {
    strcpy(c_doc_typ,"BEATG");
  }
  else if((strcmp(c_xchng_cd,"NFO") == 0) && (c_called_for =='C'))
  {
    strcpy(c_doc_typ,"NCATG");
  }
  else if((strcmp(c_xchng_cd,"BFO") == 0) && (c_called_for =='C'))
  {
    strcpy(c_doc_typ,"BCATG");
  }

  fn_userlog(c_ServiceName,"c_doc_typ=:%s",c_doc_typ);

  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Unable to allocate send buffer ");
    fn_errlog(c_ServiceName, "S31235", TPMSG, c_errmsg);
    return(-1);
  }
  c_ins_flg = 'E';

  i_err[0] = Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);
  i_err[1] = Fadd32(ptr_fml_Sbuffer,FML_XCHNG_CD,(char *)c_doc_typ,0);
  i_err[2] = Fadd32(ptr_fml_Sbuffer,FML_TRD_DT,(char *)c_for_date,0);
  i_err[3] = Fadd32(ptr_fml_Sbuffer,FML_TRN_NO,(char *)&i_mode,0);

  for(i_counter =0 ;i_counter<=3;i_counter++)
  {
    if(i_err[i_counter] == -1)
    {
      fn_errlog(c_ServiceName, "S31240", FMLMSG, c_errmsg);
      fn_userlog(c_ServiceName,"Value of i =[%d]",i_counter);
      return (-1);
    }
  }
	if( c_called_for == 'E' )
	{
  	i_ch_val = tpcall("SFO_EACLK_UPLD", (char *)ptr_fml_Sbuffer, 0,(char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);
	}
	else if( c_called_for == 'C' )
	{
  	i_ch_val = tpcall("SFO_COCLK_UPLD", (char *)ptr_fml_Sbuffer, 0,(char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);
	}
  if (i_ch_val == -1)
  {
    fn_userlog(c_ServiceName,"Error in calling service for INS_LOG_HDR");
    if(TPCODE != TPESVCFAIL)
    {
      fn_errlog(c_ServiceName, "S31245", TPMSG, c_errmsg);
    }
    else
    {
      Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
      fn_errlog(c_ServiceName, "S31250", c_errmsg, c_errmsg);
    }
   return(-1);
  }

  tpfree((char *)ptr_fml_Sbuffer);
  return (0);
}
int fn_upld_clstmp()
{
	fn_userlog(c_ServiceName," Inside fn_upld_clstmp ");
		EXEC  SQL
		EXECUTE
			BEGIN
				RESET_SEQUENCE('SEQ_CLKFNO_RECNO_ATG');
			END;
		END-EXEC;
	if(SQLCODE != 0)
	{
		fn_userlog(c_ServiceName,"Error in sequence number resetting");
		fn_errlog(c_ServiceName,"S31255",SQLMSG,c_errmsg);
		return -1;
	}	
	fn_userlog(c_ServiceName," Inside fn_upld_clstmp  reset SEQ_CLKFNO_NMBR_ATG");

	EXEC  SQL
		EXECUTE
			BEGIN
				RESET_SEQUENCE('SEQ_CLKFNO_NMBR_ATG');
			END;
	END-EXEC;

	if(SQLCODE != 0)
	{
		fn_userlog(c_ServiceName,"Error in sequence number resetting");
		fn_errlog(c_ServiceName,"S31260",SQLMSG,c_errmsg);
		return -1;
	}	
	fn_userlog(c_ServiceName,"uploading in ATG CCM..........");

	EXEC SQL
	 INSERT INTO TMP_CCM_CLSOUT_MSTR_ATG
    (
      CCM_USR_MTCH_ACCNO  ,
      CCM_EXCNG_CD        ,
      CCM_CLSOUTNOTE_NMBR ,
      CCM_STTLMNT_DT      ,
      CCM_CLSOUT_DT       ,
      CCM_CLSOUT_TYP      ,
      CCM_RECORD_ID       ,
      CCM_FILENAME        ,
      CCM_NAME            ,
      CCM_ADD_LN1         ,
      CCM_ADD_LN2         ,
      CCM_ADD_LN3         ,
      CCM_ADD_LN4         ,
      CCM_PAN_NO          ,
      CCM_TEL_NO          ,
      CCM_EMAIL_ID1       ,
      CCM_EMAIL_ID2       ,
      CCM_MSG             ,
      CCM_AMOUNT          ,
      CCM_TOTAL           ,
      CCM_TTL_BRKG        ,
      CCM_TRNV_CHRG       ,
      CCM_TRSN_CHRG       ,
      CCM_TTL_STAMP_DUTY  ,
      CCM_SEQ_NO          ,
      CCM_TRUNC_DT        ,
      CCM_MOBILE            
    )
		(
			SELECT
				ECM_USR_MTCH_ACCNO,
				ECM_EXCNG_CD,
				ECM_CNTRCT_NMBR,
				ECM_CNTRCT_DT ,
				ECM_CNTRCT_DT,
				'E'	,
				SEQ_CLKFNO_RECNO_ATG.NEXTVAL,
				IAD_PIN || '_' || substr(ECM_USR_MTCH_ACCNO,1,3) || lpad(ICD_SERIAL_NO,10,'0') || '_' || to_char(ECM_CNTRCT_DT,'YYYYMMDD') || '_' || SEQ_CLKFNO_NMBR_ATG.NEXTVAL || '_' || ECM_EXCNG_CD,
				/*ECM_USR_NM ,	** ver 1.1 comment **/	/** to insert only 100 bytes **/
				nvl(IPD_FIRST_NAME,' ')||' '||nvl(IPD_MIDDLE_NAME,' ')||' '|| nvl(IPD_LAST_NAME,' ') "ECM_USR_NM" ,		/** Ver 1.1 **/
				ECM_ADD_LN1,
				ECM_ADD_LN2,
				ECM_ADD_LN3,
				ECM_ADD_LN4,
				ECM_PAN_NO,
				ECM_TEL_NO,
				ECM_EMAIL_ID1,
				ECM_EMAIL_ID2,
				ECM_MSG,
				ECM_AMOUNT,
				ECM_TOTAL,
				'0',
				'0',
				ECM_TRAN_CHRG,
				ECM_STAMP_DUTY,
				SEQ_CLKFNO_NMBR_ATG.CURRVAL, 
				trunc(ECM_CNTRCT_DT),
				IAD_MOBILE
			FROM ATG_ECM_CNTRCT_MSTR_EA A,
					 ICD_INFO_CLIENT_DTLS , IAD_INFO_ADDRESS_DTLS,
					 IPD_INFO_PERSONAL_DTLS /** ver 1.1 **/
			WHERE trunc(ECM_CNTRCT_DT)= :c_for_date
			AND    ECM_USR_MTCH_ACCNO  = ICD_CLNT_CD_ATS
			AND ICD_SERIAL_NO    = IAD_SERIAL_NO
			AND IAD_SERIAL_NO    = IPD_SERIAL_NO						/** Ver 1.1 **/
			AND IPD_TYPE         = 'APPLICANT'							/** Ver 1.1 **/ 
			AND IAD_ADDRESS_TYPE = 'APPLICANT_CORR' 
	 		AND ECM_CNTRCT_NMBR in ( 	select distinct ECD_CNTRCT_NMBR 
																from 		ATG_ECD_CNTRCT_DTLS_EA B
																where   ECD_EA_FLG='C'
																and     A.ECM_CNTRCT_NMBR = B.ECD_CNTRCT_NMBR
														 )
		);	
  if(SQLCODE != 0)
  {
    fn_userlog(c_ServiceName,"Error in ATG ECM Upload");
    fn_errlog(c_ServiceName,"S31265",SQLMSG, c_errmsg);
    return -1;
  }
	l_count_ccm = sqlca.sqlerrd[2];	
	fn_userlog(c_ServiceName,"l_count_ccm = [%d]",l_count_ccm);
  fn_userlog(c_ServiceName,"uploading in ATG CCD..........");

  EXEC  SQL
    EXECUTE
      BEGIN
        RESET_SEQUENCE('SEQ_CLKFNO_NMBR_ATG');
    END;
  END-EXEC;

  if(SQLCODE != 0)
  {
    fn_userlog(c_ServiceName,"Error in sequence number resetting");
    fn_errlog(c_ServiceName,"S31270",SQLMSG, c_errmsg);
    return -1;
  }
  EXEC SQL
    INSERT INTO TMP_CCD_CLSOUT_DTLS_ATG
    (
      CCD_CLSOUTNOTE_NMBR,
      CCD_USR_MTCH_ACCNO ,
      CCD_CNTRCT_CODE    ,
      CCD_CNTRCT_AMT     ,
      CCD_CLSOUT_DT      ,
      CCD_RECORD_ID      ,
      CCD_MRKT_LOT       ,
      CCD_TRD_FLW        ,
      CCD_QTY            ,
      CCD_PRC            ,
      CCD_BRKG           ,
      CCD_SRC_TX         ,
      CCD_CESS           ,
      CCD_STT            ,
      CCD_SEQ_NO         ,
      CCD_NO_CNTR        ,
      CCD_SEBI_TT        ,
      CCD_TOTAL_AMT      ,
      CCD_TRUNC_DT       ,
      CCD_XCHNG_CD
    )
    (
			SELECT 
				ECD_CNTRCT_NMBR,
				ECD_USR_MTCH_ACCNO,
				ECD_CNTRCT_DESC,
				ECD_CNTRCT_AMT,
				ECD_EA_DT,
				-1,
		  	ECD_LOT_SZ,	
				ECD_BUYSELL,
				ECD_QTY,
				ECD_SETLMNT_PRC,
				ECD_BRKG,
				ECD_SRC_TX,
				'0',
				'0',
				SEQ_CLKFNO_NMBR_ATG.NEXTVAL,
				ECD_QTY/ECD_LOT_SZ,
				'0',
				ECD_CNTRCT_AMT,
				ECD_EA_DT,
				decode(:c_xchng_cd,'NFO','NSE','BFO','BSE')			/** xchng_cd required to be sent to click */
			from ATG_ECD_CNTRCT_DTLS_EA
			where ECD_EA_DT =:c_for_date
			and ECD_CNTRCT_NMBR in (select distinct CCM_CLSOUTNOTE_NMBR from TMP_CCM_CLSOUT_MSTR_ATG ) 
		);	
  if(SQLCODE != 0)
  {
    fn_userlog(c_ServiceName,"Error in FCD Upload");
    fn_errlog(c_ServiceName,"S31275",SQLMSG, c_errmsg);
    return -1;
  }

  l_count_ccd = sqlca.sqlerrd[2];

  fn_userlog(c_ServiceName,"l_count_ccd = [%d]",l_count_ccd);

  fn_userlog(c_ServiceName,"uploading in ATG CAD..........");

  EXEC  SQL
    EXECUTE
      BEGIN
        RESET_SEQUENCE('SEQ_CLKFNO_NMBR_ATG');
      END;
  END-EXEC;

  if(SQLCODE != 0)
  {
    fn_userlog(c_ServiceName,"Error in sequence number resetting");
    fn_errlog(c_ServiceName,"S31280",SQLMSG, c_errmsg);
    return -1;
  }
 EXEC SQL
    INSERT INTO TMP_CAD_CLSOUT_ANNX_DTLS_ATG
    (
      CAD_CLSOUTNOTE_NMBR ,
      CAD_MTCH_ACCNT      ,
      CAD_STTLMNT_DT      ,
      CAD_RECORD_ID       ,
      CAD_CNTRCT_CODE     ,
      CAD_STT             ,
      CAD_TOT_STT         ,
      CAD_SEQ_NO          ,
      CAD_TRUNC_DT
    )
    (
			SELECT EAD_CNTRCT_NMBR,
						 EAD_MTCH_ACCNT,
						 EAD_CNTRCT_DT,
						 -1,
						 EAD_SECURITY,
						 EAD_STT,
						 EAD_STT,
						 SEQ_CLKFNO_NMBR_ATG.NEXTVAL,
						 EAD_CNTRCT_DT
			 from ATG_EAD_ANNX_DTLS_EA
			where EAD_CNTRCT_DT =:c_for_date
			and EAD_CNTRCT_NMBR in ( SELECT distinct CCM_CLSOUTNOTE_NMBR
                                 FROM   TMP_CCM_CLSOUT_MSTR_ATG
                               )					 
		);	
  l_count_cad = sqlca.sqlerrd[2];

  fn_userlog(c_ServiceName,"l_count_cad = [%d]",l_count_cad);

  if( l_count_ccd > 0 )
  {
    fn_userlog(c_ServiceName,"updating record number in ATG CCD");
    fn_userlog(c_ServiceName,"c_for_date :%s:",c_for_date);

    EXEC SQL
      UPDATE TMP_CCD_CLSOUT_DTLS_ATG A
      SET CCD_RECORD_ID = (SELECT CCM_RECORD_ID FROM TMP_CCM_CLSOUT_MSTR_ATG B
                            WHERE B.CCM_CLSOUTNOTE_NMBR = A.CCD_CLSOUTNOTE_NMBR
                            AND   B.CCM_CLSOUT_DT   = :c_for_date
                          )
      WHERE CCD_TRUNC_DT = :c_for_date;

    if(SQLCODE != 0)
    {
      fn_userlog(c_ServiceName,"Error in ATG CCD record number update");
      fn_errlog(c_ServiceName,"S31285",SQLMSG, c_errmsg);
      return -1;
    }
  }
	if(l_count_cad > 0)
  {
    fn_userlog(c_ServiceName,"updating record number in ATG EAD");

    EXEC SQL
      UPDATE TMP_CAD_CLSOUT_ANNX_DTLS_ATG A
      SET CAD_RECORD_ID = (SELECT CCM_RECORD_ID FROM TMP_CCM_CLSOUT_MSTR_ATG B
                          WHERE B.CCM_CLSOUTNOTE_NMBR = A.CAD_CLSOUTNOTE_NMBR
                          AND   B.CCM_CLSOUT_DT   = :c_for_date
                          )
      WHERE CAD_TRUNC_DT = :c_for_date;

    if(SQLCODE != 0)
    {
      fn_userlog(c_ServiceName,"Error in FCD record number update");
      fn_errlog(c_ServiceName,"S31290",SQLMSG,c_errmsg);
      return -1;
    }
  }
	fn_userlog(c_ServiceName,"updating total amount in CCM"); 
	fn_userlog(c_ServiceName,"## Function TEMP UPLD Completed");
	return 0;
} 
int fn_populate_ccm()
{
  int  i_counter;
  long l_count =1;
  char c_ins_flg;
  unsigned char *c_msg_cbuf;
  struct _co_clsout_mstr ccm_clsout_mstr_arr[MAX_REC];
  l_bufferlength = Fneeded32(1, sizeof(ccm_clsout_mstr_arr));

  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);
  if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Error in Allocating buffer CCM");
    fn_errlog(c_ServiceName, "S31295", TPMSG, c_errmsg);
    return(-1);
  }

  c_ins_flg = 'A';  /* Insert into CCM **/

  for ( l_count=0;l_count < l_count_ccm;l_count += i_max_rec_per_fetch )
  {
    MEMSET(ccm_clsout_mstr_arr);

    EXEC ORACLE OPTION (char_map=string);
   EXEC SQL
      SELECT
        ccm_usr_mtch_accno ,
        ccm_excng_cd       ,
        ccm_clsoutnote_nmbr,
        ccm_sttlmnt_dt     ,
        ccm_clsout_dt      ,
        ccm_clsout_typ     ,
        ccm_record_id      ,
        ccm_filename       ,
        ccm_name           ,
        ccm_add_ln1        ,
        ccm_add_ln2        ,
        ccm_add_ln3        ,
        ccm_add_ln4        ,
        ccm_pan_no         ,
        ccm_tel_no         ,
        ccm_email_id1      ,
        ccm_email_id2      ,
        ccm_msg            ,
        ccm_amount         ,
        ccm_total          ,
        ccm_ttl_brkg       ,
        ccm_trnv_chrg      ,
        ccm_trsn_chrg      ,
        ccm_ttl_stamp_duty ,
        ccm_seq_no         ,
        ccm_trunc_dt       ,
        ccm_mobile     
      INTO
        :ccm_clsout_mstr_arr
      FROM
        TMP_CCM_CLSOUT_MSTR_ATG
      WHERE CCM_SEQ_NO >= :l_count + 1
      AND   CCM_SEQ_NO <= :l_count + :i_max_rec_per_fetch;

    if( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
    {
      if( SQLCODE == 1403)
      {
        if (sqlca.sqlerrd[2] == 0)
          break;
      }
      else
      {
        fn_userlog(c_ServiceName,"Data select for CCM failed");
        fn_errlog(c_ServiceName, "S31300", SQLMSG, c_errmsg);
        return (-1);
      }
		}
    l_rows_fetched = (l_count + i_max_rec_per_fetch > l_count_ccm)? l_count_ccm%i_max_rec_per_fetch: i_max_rec_per_fetch;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"bat_fo_eaatg_click : Rows fetched : |%d| |%d|", l_rows_fetched, SQLCODE);
		}
	  Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
    Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

    MEMSET(c_msg_cbuf);

    c_msg_cbuf = (unsigned char *)ccm_clsout_mstr_arr;

    l_bufferlength =  sizeof(ccm_clsout_mstr_arr);

    i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0        );
    i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
    i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&l_rows_fetched,0);
    i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0      );

    for (i_counter = 0;i_counter < 4;i_counter++)
    {
      if(i_err[i_counter] == -1)
      {
        fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
        fn_errlog(c_ServiceName, "S31305", FMLMSG, c_errmsg);
        return (-1);
      }
    }

    i_ch_val = tpcall("SFO_COCLK_UPLD", (char *)ptr_fml_Sbuffer, 0,(char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);
    if (i_ch_val == -1)
    {
      fn_userlog(c_ServiceName,"Error in calling service for CCM");
      if(TPCODE != TPESVCFAIL)
      {
        fn_errlog(c_ServiceName, "S31310", TPMSG, c_errmsg);
      }
      else
      {
          Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
          fn_errlog(c_ServiceName, "S31315", c_errmsg, c_errmsg);
      }
      return(-1);
    }
  }

	tpfree( (char *)ptr_fml_Sbuffer);
	return 0;
}
int fn_populate_ccd()
{
int  i_counter;
long l_count =1;
char c_ins_flg;
unsigned char *c_msg_cbuf;
co_clsout_dtls ccd_co_clsout_dtls_arr[MAX_REC];

  l_bufferlength = Fneeded32(1, sizeof(ccd_co_clsout_dtls_arr));
  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);
  if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Error in Allocating buffer CCD");
    fn_errlog(c_ServiceName, "S31320", TPMSG, c_errmsg);
    return(-1);
  }

  c_ins_flg = 'B';  /* Insert into CCD **/

  for ( l_count=0;l_count < l_count_ccd;l_count += i_max_rec_per_fetch )
  {
    MEMSET(ccd_co_clsout_dtls_arr);

    EXEC ORACLE OPTION (char_map=string);

    EXEC SQL
      SELECT
       ccd_clsoutnote_nmbr,
       ccd_usr_mtch_accno ,
       ccd_cntrct_code    ,
       ccd_cntrct_amt     ,
       ccd_clsout_dt      ,
       ccd_record_id      ,
       ccd_mrkt_lot       ,
       ccd_trd_flw        ,
       ccd_qty            ,
       ccd_prc            ,
       ccd_brkg           ,
       ccd_src_tx         ,
       ccd_cess           ,
       ccd_stt            ,
       ccd_seq_no         ,
       ccd_no_cntr        ,
       ccd_sebi_tt        ,
       ccd_total_amt      ,
       ccd_trunc_dt       ,
       ccd_xchng_cd
      INTO
        :ccd_co_clsout_dtls_arr
      FROM
            TMP_CCD_CLSOUT_DTLS_ATG
      WHERE CCD_SEQ_NO >= :l_count + 1
      AND   CCD_SEQ_NO <= :l_count + :i_max_rec_per_fetch;

    if ( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
    {
      if( SQLCODE == 1403)
      {
        if (sqlca.sqlerrd[2] == 0)
          break;
      }
      else
      {
        fn_userlog(c_ServiceName,"Data select for CCD failed");
        fn_errlog(c_ServiceName, "S31325", SQLMSG, c_errmsg);
        return (-1);
      }
    }
    l_rows_fetched = (l_count + i_max_rec_per_fetch > l_count_ccd)? l_count_ccd%i_max_rec_per_fetch:i_max_rec_per_fetch;

    if (DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"bat_fo_eaatg_click : Rows fetched : |%d| |%d|", l_rows_fetched, SQLCODE);
    }

    Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
    Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

    MEMSET(c_msg_cbuf);

    c_msg_cbuf = (unsigned char *)ccd_co_clsout_dtls_arr;

    l_bufferlength =  sizeof(ccd_co_clsout_dtls_arr);

    i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
    i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
    i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&l_rows_fetched,0);
    i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);

    for (i_counter = 0;i_counter < 4;i_counter++)
    {
      if(i_err[i_counter] == -1)
      {
        fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
        fn_errlog(c_ServiceName, "S31330", FMLMSG, c_errmsg);
        return(-1);
      }
    }
    i_ch_val = tpcall("SFO_COCLK_UPLD", (char *)ptr_fml_Sbuffer, 0,
                       (char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);
    if (i_ch_val == -1)
    {
      fn_userlog(c_ServiceName,"Error in calling service for CCD");
      if(TPCODE != TPESVCFAIL)
      {
        fn_errlog(c_ServiceName, "S31335", TPMSG, c_errmsg);
      }
      else
      {
          Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
          fn_errlog(c_ServiceName, "S31340", c_errmsg, c_errmsg);
      }
      return(-1);
    }
  }

	tpfree( (char *)ptr_fml_Sbuffer);
	return 0;
}
int fn_populate_cad()
{
int  i_counter;
long l_count =1;
char c_ins_flg;
unsigned char *c_msg_cbuf;
co_annx_dtls co_clsout_annx_dtls_arr[MAX_REC];

  l_bufferlength = Fneeded32(1, sizeof(co_clsout_annx_dtls_arr));
  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);
  if (ptr_fml_Sbuffer == NULL)
  {
    fn_userlog(c_ServiceName,"Error in Allocating buffer CAD");
    fn_errlog(c_ServiceName, "S31345", TPMSG, c_errmsg);
    return(-1);
  }

  c_ins_flg = 'C';  /* Insert into CAD **/

  for ( l_count=0;l_count < l_count_cad;l_count += i_max_rec_per_fetch )
  {
    MEMSET(co_clsout_annx_dtls_arr);

    EXEC ORACLE OPTION (char_map=string);

    EXEC SQL
      SELECT
        cad_clsoutnote_nmbr,
        cad_mtch_accnt     ,
        cad_sttlmnt_dt     ,
        cad_record_id      ,
        cad_cntrct_code   ,
        cad_stt            ,
        cad_tot_stt        ,
        cad_seq_no         ,
        cad_trunc_dt
      INTO
        :co_clsout_annx_dtls_arr
      FROM
        TMP_CAD_CLSOUT_ANNX_DTLS_ATG
      WHERE CAD_SEQ_NO >= :l_count + 1
      AND   CAD_SEQ_NO <= :l_count + :i_max_rec_per_fetch;

    if ( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
    {
      if( SQLCODE == 1403)
      {
        /** No data found **/
        if (sqlca.sqlerrd[2] == 0)
          break;
      }
      else
      {
        fn_userlog( c_ServiceName,"Data select for CAD failed");
        fn_errlog ( c_ServiceName, "S31350", SQLMSG, c_errmsg );
        return (-1);
      }
    }

    l_rows_fetched = (l_count + i_max_rec_per_fetch > l_count_cad)? l_count_cad%i_max_rec_per_fetch:i_max_rec_per_fetch;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"bat_fo_eaatg_click : Rows fetched : |%d| |%d|", l_rows_fetched, SQLCODE);
    }

    Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
    Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));
    MEMSET(c_msg_cbuf);

    c_msg_cbuf = (unsigned char *)co_clsout_annx_dtls_arr;

    l_bufferlength =  sizeof(co_clsout_annx_dtls_arr);

    i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
    i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
    i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&l_rows_fetched,0);
    i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);

    for(i_counter = 0;i_counter < 4;i_counter++)
    {
      if(i_err[i_counter] == -1)
      {
        fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
        fn_errlog(c_ServiceName, "S31355", FMLMSG, c_errmsg);
        return(-1);
      }
    }

    i_ch_val = tpcall("SFO_COCLK_UPLD", (char *)ptr_fml_Sbuffer, 0,
                       (char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);
    if (i_ch_val == -1)
    {
      fn_userlog(c_ServiceName,"Error in calling service for CAD");
      if(TPCODE != TPESVCFAIL)
      {
        fn_errlog(c_ServiceName, "S31360", TPMSG, c_errmsg);
      }
      else
      {
          Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
          fn_errlog(c_ServiceName, "S31365", c_errmsg, c_errmsg);
      }
      return(-1);
    }
  }
	tpfree( (char *)ptr_fml_Sbuffer);
	return 0;
}
