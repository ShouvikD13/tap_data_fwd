/******************************************************************
* Service name :  BAT_CANORD_PANAD                                *
*                                                                 *
* Description  : This batch is written to one time Cancel the FNO * 
*                clients Pending orders not having PAN and AAdhar linked* 
*                                                                 *
* Input        :  XCHNG_CD																				*
*              :  UNDRLYNG / ALL                                  *
*              :  EXPRY_DT                                        *
* Output       :                                                  *
*                                                                                 *
* Log  1.0     :   29-Mar-2022 Initial Release  - Sachin Birje                    *
* Log  1.1     :   15-May-2023 RQ:2088_backend_utility_for_open_positions - Dipin * 
*******************************************************************/
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <fml_rout.h>
#include <fn_session.h>
#include <string.h>
#include <fn_read_debug_lvl.h>

FBFR32   *ptr_fml_buf;

int fn_get_canord_rs( char* c_ServiceName, 
											char* c_err_msg, 
											char*	c_flag,		
											char* c_xchng_cd,
                      char* c_trd_dt,
                      char* c_prcs_flg
										 );

void BAT_CANORD_PANAD ( int argc, char *argv[] )
{
	 
	int      i_ch_val;
  int      i_trnsctn;
	int			 i_exist = 0;	
	int			 i_ucount = 0;		
	int 		 i_rollsprd_cnt = 0; 
  long int li_cnt = 0; 
	long int li_tot_rcrds = 0;
  char     c_msg[256];
  char     c_ServiceName [ 33 ];
	char		 c_xchng_cd[ 4 ];
	char		 c_undrlyng[ 100 ]; 
	char		 c_tmp_undrlyng[ 100 ]; 
  char     c_err_msg [ 256 ];
  char     c_rout_str [ 4 ];
  char     c_svc_name[ 30 ];
	char		 c_run_mod[4];				
	char		 c_prdct_typ = '\0';
	char		 c_exist	= 'P';		
	char*		 token;						
  char     c_prcs_flg[2];             /** ver 1.1 **/
  char     c_fco_remarks[150]={'\0'}; /** ver 1.1 **/
  char     c_trd_dt [ LEN_DATE ];

	EXEC SQL INCLUDE "table/fod_fo_ordr_dtls.h";

	EXEC SQL BEGIN DECLARE SECTION;
   char    c_exg_stts ;
	 varchar v_expry_dt[23];
  EXEC SQL END DECLARE SECTION;

	MEMSET(c_msg);
	MEMSET(c_xchng_cd);
	MEMSET(c_undrlyng);
	MEMSET(c_tmp_undrlyng);
	MEMSET(c_err_msg);
	MEMSET(c_rout_str);
	MEMSET(c_ServiceName);
	MEMSET(c_svc_name);
	MEMSET(c_run_mod);
	MEMSET(v_expry_dt.arr);
  MEMSET(c_prcs_flg); /** ver 1.1 **/
  MEMSET(c_fco_remarks); /** ver 1.1 **/
  strcpy ( c_ServiceName, argv[0] );
  INITBATDBGLVL(c_ServiceName);

	sprintf ( c_msg, "Batch process %s started", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
	
	strcpy( c_xchng_cd, argv[2] );
  strcpy( c_trd_dt, argv[4] );
  strcpy(c_prcs_flg,argv[5]); /**ver 1.1 **/
  rtrim(c_prcs_flg); /** ver 1.1 **/
	rtrim(c_xchng_cd);

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName,"========== Input Parameters ==========");
		fn_userlog( c_ServiceName,"c_xchng_cd	:%s:",c_xchng_cd);
    fn_userlog( c_ServiceName,"c_prcs_flg :%s:",c_prcs_flg); /** ver 1.1 **/
	}

	EXEC SQL
       SELECT  exg_crrnt_stts
       INTO    :c_exg_stts
       FROM    exg_xchng_mstr
       WHERE   exg_xchng_cd = :c_xchng_cd 
       AND     exg_mkt_typ  = 'D';

		if( SQLCODE != 0 )
  	{
    	fn_errlog( c_ServiceName, "S31005", SQLMSG, c_err_msg );
    	strcpy ( c_msg, "System error. Contact system support" );
    	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    	return;
  	}
	
		if( c_exg_stts != EXCHANGE_OPEN )
		{
			fn_errlog( c_ServiceName, "B28520", DEFMSG, c_err_msg );
			strcpy ( c_msg, "Exchange should be open for running Physical Settlement Cancellation" );
			fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			return;
		}

	  strcpy ( c_msg, "Creating data. Please wait ... " );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	  i_ch_val = fn_get_canord_rs(	c_ServiceName,
																  c_err_msg,
																  &c_exist,	
																  c_xchng_cd,
                                  c_trd_dt,
                                  c_prcs_flg
																);
																	


	if ( i_ch_val != SUCCESS )	
	{
		fn_errlog( c_ServiceName, "S31010", LIBMSG, c_err_msg );
		strcpy ( c_msg, "System error. Contact system support" );
		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		return;
	}


	if ( i_ch_val == SUCCESS && c_exist == 'N' )
	{
		fn_userlog( c_ServiceName,"No record exist");
		strcpy ( c_msg, "No record exist");	
		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		return;
	}


	li_tot_rcrds = fn_reccnt_rs ( ptr_fml_buf,
                                c_ServiceName,
                                c_err_msg,
                                FFO_EBA_MTCH_ACT_NO);

	if ( li_tot_rcrds == -1 ) 
	{
		fn_errlog( c_ServiceName, "S31015", LIBMSG, c_err_msg );
		strcpy ( c_msg, "System error. Contact system support" );
		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		fn_dstry_rs ( ptr_fml_buf );
		return;
	}

	strcpy ( c_msg, "Data created." );
	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	sprintf ( c_msg, "Total records = %ld", li_tot_rcrds );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	for ( li_cnt=1; li_cnt<=li_tot_rcrds; li_cnt++ )
	{
		i_ch_val = fn_getnxt_rs ( ptr_fml_buf,
                              c_ServiceName,
                              c_err_msg,
                              10,                             /** ver 1.1 9->10 **/
                              FFO_EBA_MTCH_ACT_NO, ( char * ) sql_fod_clm_mtch_accnt, NULL,
                              FFO_XCHNG_CD, ( char * )sql_fod_xchng_cd, NULL,
                              FFO_PRDCT_TYP, ( char * )&sql_fod_prdct_typ, NULL,
                              FFO_CTGRY_INDSTK, ( char * )&sql_fod_indstk, NULL,
                              FFO_UNDRLYNG, ( char * )sql_fod_undrlyng, NULL,
                              FFO_ORDR_RFRNC, ( char * )sql_fod_ordr_rfrnc, NULL,  
                              FFO_EXPRY_DT, (char * )sql_fod_expry_dt.arr, NULL,
                              FFO_PIPE_ID, ( char * )sql_fod_pipe_id, NULL,
															FFO_SPL_FLG, ( char * )&sql_fod_spl_flag, NULL,
                              FFO_REMARKS, (char *)c_fco_remarks, NULL ); /** ver 1.1 **/

		if ( i_ch_val != 0 )
		{
			fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg );
			strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			fn_dstry_rs ( ptr_fml_buf );
      return;
    }

    rtrim(sql_fod_clm_mtch_accnt);
    rtrim(sql_fod_ordr_rfrnc);
    rtrim(sql_fod_xchng_cd);
    rtrim(sql_fod_undrlyng);
    rtrim(sql_fod_pipe_id);
    SETLEN(sql_fod_expry_dt);
    rtrim(c_fco_remarks);   /** ver 1.1 **/

		sprintf ( c_msg, "Processing record %ld of %ld", li_cnt, li_tot_rcrds );
		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
	
		i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
																	c_err_msg,
                                  "sfr_pfs_cmb_qt",
                                  li_cnt,
                                  li_tot_rcrds );
		if ( i_ch_val == -1 )
		{
			fn_errlog( c_ServiceName, "S31025", LIBMSG, c_err_msg );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      fn_dstry_rs ( ptr_fml_buf );
      return;
		}

		strcpy( c_svc_name,"SFO_CANORD_PA");
	  fn_init_ddr_pop ( sql_fod_pipe_id,TRADING_SECTION,F_CS); 	
		fn_cpy_ddr( c_rout_str );

		fn_userlog ( c_ServiceName,"ROUT STRING IS :%s:",c_rout_str );	

		i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                  c_err_msg,
                                  "SFO_ORD_ROUT",
                                  0,
                                  14,                                        /** ver 1.1 13->14 **/ 
                                  FFO_XCHNG_CD, ( char * )sql_fod_xchng_cd,
                                  FFO_EBA_MTCH_ACT_NO,(char *)sql_fod_clm_mtch_accnt,
                                  FFO_PRDCT_TYP, ( char * )&sql_fod_prdct_typ,
                                  FFO_UNDRLYNG, ( char * )sql_fod_undrlyng,
                                  FFO_CTGRY_INDSTK, ( char * )&sql_fod_indstk,
                                  FFO_ORDR_RFRNC, ( char * )sql_fod_ordr_rfrnc, 
                                  FFO_SVC_NAME, (char*)c_svc_name,
                                  FFO_BAT_TAG, ( char * )c_tag,
                                  FFO_REC_NO, ( char * )&li_cnt,
                                  FFO_EXPRY_DT, (char * )sql_fod_expry_dt.arr,
                                  FFO_PIPE_ID, ( char * )sql_fod_pipe_id,
                                  FFO_ROUT_CRT, ( char *)c_rout_str,
																	FFO_SPL_FLG, ( char * )&sql_fod_spl_flag,
                                  FFO_REMARKS, (char *)c_fco_remarks); /** ver 1.1 **/ 

    if ( i_ch_val == -1 )
    {
      fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      fn_dstry_rs ( ptr_fml_buf );
      return;
    }
	}

	fn_dstry_rs ( ptr_fml_buf );

	sprintf ( c_msg, "Batch process %s ended", argv[0] );
	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	return;
}

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_CANORD_PANAD;

  fn_userlog( argv[0],"%s argc cnt :%d:",argv[0],argc);
	if(argc != 6)
	{
		fn_userlog( argv[0],"Usage - %s <configuration file> <Exchange code>  NA <TRD_DT>",argv[0]);
		fn_bat_pst_msg ( argv[0], "Invalid number of arguments", c_tag ); 
		fn_userlog ( argv[0], "Invalid number of arguments" );
		return -1;
	}

  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
	fn_userlog ( argv[0], "BAT_CANORD_PANAD ended" );
  return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}


int fn_get_canord_rs( char* c_ServiceName, 
											char* c_err_msg, 
											char*	c_flag,	
											char* c_xchng_cd,
                      char* c_trd_dt,
                      char* c_prcs_flg
										)
{

	
	int 	i_counter	=	0;
	int 	i_rollsprd_cnt = 0; 
	int 	i_returncode;
  int   i_exceptn_exist=0; 
	int   i_cnt_ref_no = 0;  
	char  c_span_allwd_flg = '\0';  
  char  c_fco_remarks[150];

	EXEC SQL BEGIN DECLARE SECTION;
   varchar v_expry_dt[23];
	 sql_cursor  sys_cursor;
  EXEC SQL END DECLARE SECTION;

	EXEC SQL INCLUDE "table/fod_fo_ordr_dtls.h";

	Finit32(ptr_fml_buf,MIN_FML_BUF_LEN);


  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog( c_ServiceName,"Inside fn_get_canord_rs");
  }

	EXEC SQL ALLOCATE :sys_cursor;
                                                         /** ver 1.1 starts **/
 if(c_prcs_flg[0]=='P')
  {
    if (DEBUG_MSG_LVL_3)
     {
        fn_userlog( c_ServiceName, " Inside PAN user ");
     }
                                                            /** ver 1.1 ends **/
	EXEC SQL EXECUTE
			BEGIN
				OPEN :sys_cursor FOR
				SELECT
             	FOD_CLM_MTCH_ACCNT,
             	FOD_UNDRLYNG,
             	FOD_EXPRY_DT,
             	FOD_PRDCT_TYP,
             	FOD_XCHNG_CD,
             	FOD_ORDR_RFRNC,
             	FOD_PIPE_ID,
             	FOD_INDSTK,
							FOD_SPL_FLAG,   
              FOD_OPT_TYP,    
              FOD_STRK_PRC,
              FPA_REMARKS           /** ver 1.1 **/ 
      	FROM 	FOD_FO_ORDR_DTLS, FPA_FNO_PAN_AADHAR
     	 	WHERE FOD_TRD_DT = :c_trd_dt 
        AND   FOD_TRD_DT = FPA_TRD_DT 
        AND   FOD_XCHNG_CD =:c_xchng_cd
        AND   FOD_CLM_MTCH_ACCNT=FPA_CLM_MTCH_ACCNT
      	AND   FOD_PRDCT_TYP IN ('F','O') 
      	AND   FOD_ORDR_STTS in ('P','O','R');	
		END;
		END-EXEC;
 }                                                                /** ver 1.1 starts **/
 else if(c_prcs_flg[0]=='C')
 {
   if (DEBUG_MSG_LVL_3)
   {
     fn_userlog( c_ServiceName, " Inside Other Contract users");
   }
    EXEC SQL EXECUTE
      BEGIN
        OPEN :sys_cursor FOR
        SELECT
              FOD_CLM_MTCH_ACCNT,
              FOD_UNDRLYNG,
              FOD_EXPRY_DT,
              FOD_PRDCT_TYP,
              FOD_XCHNG_CD,
              FOD_ORDR_RFRNC,
              FOD_PIPE_ID,
              FOD_INDSTK,
              FOD_SPL_FLAG ,
              FOD_OPT_TYP,
              FOD_STRK_PRC,
              FCO_REMARKS
        FROM  FOD_FO_ORDR_DTLS,FCO_FO_CANSQ_ORDPSTN
        WHERE FOD_TRD_DT = :c_trd_dt
        AND   FOD_TRD_DT = FCO_TRD_DT
        AND   FOD_XCHNG_CD = FCO_XCHNG_CD
        AND   FOD_CLM_MTCH_ACCNT=FCO_CLM_MTCH_ACCNT
        AND   FOD_PRDCT_TYP IN ('F','O')
        AND   FOD_PRDCT_TYP = FCO_PRDCT_TYP
        AND   FOD_ORDR_STTS in ('P','O','R')
        AND   FOD_STRK_PRC = FCO_STRK_PRC
        AND   FOD_OPT_TYP  = FCO_OPT_TYP
        AND   FOD_EXPRY_DT = FCO_EXPRY_DT
        AND   FOD_UNDRLYNG = FCO_UNDRLYNG
        AND   FOD_INDSTK   = FCO_INDSTK; 
    END;
    END-EXEC; 
 }
 else
 {
    fn_userlog(c_ServiceName,"Invalid Product Type");
    fn_errlog(c_ServiceName,"S31035","Invalid Product Type",c_err_msg);
    return FAILURE;
 }                         /** ver 1.1 ends **/
 
 if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31040",SQLMSG, c_err_msg );
		  EXEC SQL CLOSE :sys_cursor;
		  EXEC SQL FREE  :sys_cursor;
      return FAILURE;
    }

	  i_counter = 0;

	  while(1)
	  {
			MEMSET(sql_fod_clm_mtch_accnt);
			MEMSET(sql_fod_undrlyng);
			MEMSET(sql_fod_expry_dt);
			MEMSET(sql_fod_xchng_cd);
			MEMSET(sql_fod_ordr_rfrnc);
			MEMSET(sql_fod_pipe_id);
			sql_fod_prdct_typ = '\0';
			sql_fod_indstk	=	'\0';
			sql_fod_spl_flag = '\0';  
    	sql_fod_opt_typ='\0'; 
    	sql_fod_strk_prc=0;  
    	i_exceptn_exist =0; 
      MEMSET(c_fco_remarks); /** ver 1.1 **/

		 EXEC SQL
			FETCH :sys_cursor  
			INTO	:sql_fod_clm_mtch_accnt,
						:sql_fod_undrlyng,
						:sql_fod_expry_dt,
						:sql_fod_prdct_typ,
						:sql_fod_xchng_cd,
						:sql_fod_ordr_rfrnc,
						:sql_fod_pipe_id,
						:sql_fod_indstk,
						:sql_fod_spl_flag,  
            :sql_fod_opt_typ,  
            :sql_fod_strk_prc,
            :c_fco_remarks; /** ver 1.1 **/ 

		if(SQLCODE != 0)
		{
			if(SQLCODE ==	NO_DATA_FOUND)
			{
				fn_userlog( c_ServiceName,"Inside Break");

				if( i_counter == 0 )
				{
					*c_flag = 'N';
				}

				EXEC SQL CLOSE :sys_cursor;
				EXEC SQL FREE  :sys_cursor;

				break;
			}
		
			fn_errlog( c_ServiceName, "S31045",SQLMSG, c_err_msg );
			EXEC SQL CLOSE :sys_cursor;  
			EXEC SQL FREE  :sys_cursor;	
			if( i_counter != 0)
			{
				tpfree((char *)ptr_fml_buf);
			}
			return FAILURE;
		}

		i_counter = 1;

		rtrim(sql_fod_clm_mtch_accnt);
		rtrim(sql_fod_undrlyng);
		rtrim(sql_fod_xchng_cd);
		rtrim(sql_fod_ordr_rfrnc);
		rtrim(sql_fod_pipe_id);
    rtrim(c_fco_remarks);    /** ver 1.1 **/
		SETNULL(sql_fod_expry_dt);

		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog( c_ServiceName,"sql_fod_clm_mtch_accnt :%s:",sql_fod_clm_mtch_accnt);
			fn_userlog( c_ServiceName,"sql_fod_undrlyng	:%s:",sql_fod_undrlyng);
			fn_userlog( c_ServiceName,"sql_fod_expry_dt :%s:",sql_fod_expry_dt.arr);
			fn_userlog( c_ServiceName,"sql_fod_prdct_typ :%c:",sql_fod_prdct_typ);
			fn_userlog( c_ServiceName,"sql_fod_xchng_cd	:%s:",sql_fod_xchng_cd);
			fn_userlog( c_ServiceName,"sql_fod_ordr_rfrnc :%s:",sql_fod_ordr_rfrnc);
			fn_userlog( c_ServiceName,"sql_fod_pipe_id	:%s:",sql_fod_pipe_id);
			fn_userlog( c_ServiceName,"sql_fod_indstk	  :%c:",sql_fod_indstk);
			fn_userlog( c_ServiceName,"sql_fod_spl_flag :%c:",sql_fod_spl_flag);
      fn_userlog( c_ServiceName,"sql_fod_opt_typ :%c:",sql_fod_opt_typ); 
      fn_userlog( c_ServiceName,"sql_fod_strk_prc :%ld:",sql_fod_strk_prc);
      fn_userlog( c_ServiceName,"sql_fod_remarks :%s:",c_fco_remarks);     /** ver 1.1 **/  
		}

		int i_rollsprd_cnt = 0; 
		if(sql_fod_spl_flag == 'O') 
		{
			i_rollsprd_cnt ++;
			
			if(DEBUG_MSG_LVL_5)
			{
				fn_userlog( c_ServiceName,"1st leg rollover_with_spread_ord[%d] ref:%s:",i_rollsprd_cnt,sql_fod_ordr_rfrnc);
			}
		}

		i_returncode = fn_pack_vartofml (c_ServiceName,
																		 c_err_msg,
																		 &ptr_fml_buf,
																		 10,                                               /** ver 1.1 9->10 **/ 
																		 FFO_EBA_MTCH_ACT_NO, ( char * )sql_fod_clm_mtch_accnt,
																		 FFO_UNDRLYNG, ( char * )sql_fod_undrlyng,
																		 FFO_EXPRY_DT, ( char * )sql_fod_expry_dt.arr,
																		 FFO_PRDCT_TYP,( char * )&sql_fod_prdct_typ,
																		 FFO_XCHNG_CD,( char * )sql_fod_xchng_cd,
																		 FFO_ORDR_RFRNC,( char * )sql_fod_ordr_rfrnc,
																		 FFO_PIPE_ID,( char * )sql_fod_pipe_id,
																		 FFO_CTGRY_INDSTK,( char * )&sql_fod_indstk, 
																		 FFO_SPL_FLG,( char * )&sql_fod_spl_flag,
                                     FFO_REMARKS, (char *)c_fco_remarks ); /** ver 1.1 **/
		if( i_returncode == -1 )
		{
			fn_errlog( c_ServiceName, "S31050",LIBMSG, c_err_msg );
			EXEC SQL CLOSE :sys_cursor; 
			EXEC SQL FREE  :sys_cursor; 
			tpfree((char *)ptr_fml_buf);
			return FAILURE;
		}
	}

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog( c_ServiceName,"Total rollover with spread 1st leg orders count :%d:",i_rollsprd_cnt); 
		fn_userlog( c_ServiceName,"End of fn_get_canord_rs");
	}	

	return SUCCESS;			
}
