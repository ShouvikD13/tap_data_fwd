/******************************************************************************/
/*  Program           : BAT_UPLD_CN01                                         */
/*                                                                            */
/*  Input             : CN01.csv file                                         */
/*                                                                            */
/*  Output            : Success / Failure                                     */
/*                                                                            */
/*  Description       : updates closing price in EBA system by directly       */
/*                      reading CN01 file                                     */
/*  Log               :                                                       */
/*                                                                            */
/******************************************************************************/
/*  02-Apr-2009     Ver 1.0        Prakash Sawant     Release 1.0             */
/*	08-Apr-2013			Ver 1.1				 Vishnu Nair				Changes for GAME Simulator*/
/******************************************************************************/
#include <stdio.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <Usysflds.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <string.h>
#include <stdlib.h>
#include <fn_read_debug_lvl.h>
#include <fn_pos.h>	/* Ver 1.1 */

void BAT_UPLD_CN01( int argc, char *argv[] )
{
  char c_ServiceName[33];
  char c_msg[256];
  char c_err_msg[256];
  char c_xchng_cd[4];
  long int li_tot_rcrds;
  long int li_cnt;
  int i_trnsctn;
  int i_ch_val;
  int i;
  int j;
  int i_len;
  int i_dt_chk;

  /* File handling variables */
  FILE *ptr_cn01_file;
  char c_file_name[256];
  char c_data[1024+1];
  char c_o_data[1024+1];
  char *ptr_c_tmp;

  /* variables for CLC table */
EXEC SQL BEGIN DECLARE SECTION;
  char c_trade_date[12];
  char c_cntrct_inst[7];
  char c_undrlying[21];
  char c_expry_date[12];
  double d_strike_price;
  char c_opt_type[3];
  long l_ca_lvl;
  long l_lot;
  char c_iss_strt_date[12];
  char c_iss_mat_date[12];
  char c_exrc_strt_date[12];
  char c_exrc_end_date[12];
  char c_exrc_style;
  char c_mrkt_type;
  double d_opn_prc;
  double d_high_prc;
  double d_low_prc;
  double d_cls_prc;
  long l_cls_prc;
  double d_sttlmt_prc;
  double d_undrlyng_prc;
  long l_undrlyng_prc;

EXEC SQL END DECLARE SECTION;

	/**** Ver 1.1 Starts ****/
  char c_program_nm[33];
  char c_xchng_cd_tmp[4];
  char c_match_id[11];
  char c_error_txt[256];

  MEMSET(c_program_nm);
  MEMSET(c_xchng_cd_tmp);
  MEMSET(c_match_id);
  MEMSET(c_error_txt);

	strcpy(c_program_nm,argv[0]);
	strcpy(c_xchng_cd_tmp, argv[2]);
	
  /**** Ver 1.1 Ends ***/

  strcpy(c_ServiceName, argv[0]);
  strcpy(c_xchng_cd, argv[2]);

  INITBATDBGLVL(argv[0]);

  ptr_c_tmp = (char*)getenv("EBALOG_PATH");

  if (ptr_c_tmp == NULL)
  {
    fn_errlog(c_ServiceName, "S31005", LIBMSG, c_err_msg);
    strcpy( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    return;
  }

  /**CN01 File reading **/
  sprintf(c_file_name, "%s/%s/fno/%s", ptr_c_tmp, argv[4],argv[5]);

  ptr_cn01_file = fopen(c_file_name, "r");

  if ( ptr_cn01_file == NULL )
  {
    fn_errlog(c_ServiceName, "S31010", LIBMSG, c_err_msg);
    strcpy( c_msg, "File can not be opened. Contact system support" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    return;
  }

  sprintf ( c_msg, "Batch process %s started", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  fn_bat_pst_msg ( c_ServiceName, "Applying CN01 file details....", c_tag );

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31015", LIBMSG, c_err_msg);
    strcpy( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    fclose( ptr_cn01_file );
    return;
  }

  while( !feof( ptr_cn01_file) )
  {
    /*** Check for triggers ***/
    fn_chk_stts(c_ServiceName);

		MEMSET(c_trade_date);
		MEMSET(c_cntrct_inst);
		MEMSET(c_undrlying);
		MEMSET(c_expry_date);
		d_strike_price = 0;
		MEMSET(c_opt_type);
		l_ca_lvl = 0;
		l_lot = 0;
		MEMSET(c_iss_strt_date);
		MEMSET(c_iss_mat_date);
		MEMSET(c_exrc_strt_date);
		MEMSET(c_exrc_end_date);
		MEMSET(c_exrc_style);
	  MEMSET(c_mrkt_type);
		d_opn_prc = 0;
		d_high_prc = 0;
		d_low_prc = 0;
		d_cls_prc = 0;
		d_sttlmt_prc = 0;
		d_undrlyng_prc = 0;

    fgets( c_data, 1024, ptr_cn01_file);
    if( c_data == NULL)
    {
			 fn_errlog(c_ServiceName, "S31020", LIBMSG, c_err_msg);
			 strcpy( c_msg, "System error. Contact system support" );
			 fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
       fclose( ptr_cn01_file );
			 return;
    }

    if( feof( ptr_cn01_file ) != 0 )
    {
      break;
    }

    i_len = strlen(c_data);
   
    j=0;
    for(i=0;i<i_len;i++)
    {
      if(c_data[i] == ',')
      {
        c_o_data[j++] = ' ';
        if(c_data[i+1] == ',')   /* string '*' is treated as NULL string inbetween two consecutive ','*/
        {
          c_o_data[j++]='*';
        }
      }
      else if(c_data[i] == ' ')
      {
        continue;
      }
      else
      {
        c_o_data[j++] = c_data[i];
      }
    }

    c_o_data[j] = '\0';

    sscanf(c_o_data,"%s %s %s %s %lf %s %ld %ld %s %s %s %s %c %c %lf %lf %lf %lf %lf %lf",
								c_trade_date,
								c_cntrct_inst,
								c_undrlying,
								c_expry_date,
								&d_strike_price,
								c_opt_type,
								&l_ca_lvl,
								&l_lot,
								c_iss_strt_date,
								c_iss_mat_date,
								c_exrc_strt_date,
								c_exrc_end_date,
								&c_exrc_style,
								&c_mrkt_type,
								&d_opn_prc,
								&d_high_prc,
								&d_low_prc,
								&d_cls_prc,
								&d_sttlmt_prc,
								&d_undrlyng_prc); 

     if( DEBUG_MSG_LVL_3 )
     {
				fn_userlog( c_ServiceName, "c_trade_date     :%s:",  c_trade_date     );
				fn_userlog( c_ServiceName, "c_cntrct_inst    :%s:",  c_cntrct_inst    );
				fn_userlog( c_ServiceName, "c_undrlying      :%s:",  c_undrlying      );
				fn_userlog( c_ServiceName, "c_expry_date     :%s:",  c_expry_date     );
				fn_userlog( c_ServiceName, " d_strike_price  :%lf",  d_strike_price  );
				fn_userlog( c_ServiceName, "c_opt_type       :%s:",  c_opt_type       );
				fn_userlog( c_ServiceName, " l_ca_lvl        :%ld:",  l_ca_lvl        );
				fn_userlog( c_ServiceName, " l_lot           :%ld:",  l_lot           );
				fn_userlog( c_ServiceName, "c_iss_strt_date  :%s:",  c_iss_strt_date  );
				fn_userlog( c_ServiceName, "c_iss_mat_date   :%s:",  c_iss_mat_date   );
				fn_userlog( c_ServiceName, "c_exrc_strt_date :%s:",  c_exrc_strt_date );
				fn_userlog( c_ServiceName, "c_exrc_end_date  :%s:",   c_exrc_end_date );
				fn_userlog( c_ServiceName, "c_exrc_style     :%c:",  c_exrc_style     );
				fn_userlog( c_ServiceName, "c_mrkt_type      :%c:",  c_mrkt_type      );
				fn_userlog( c_ServiceName, " d_opn_prc       :%lf:",  d_opn_prc       );
				fn_userlog( c_ServiceName, " d_high_prc      :%lf:",  d_high_prc      );
				fn_userlog( c_ServiceName, " d_low_prc       :%lf:",  d_low_prc       );
				fn_userlog( c_ServiceName, " d_cls_prc       :%lf:",  d_cls_prc       );
				fn_userlog( c_ServiceName, " d_sttlmt_prc    :%lf:",  d_sttlmt_prc    );
				fn_userlog( c_ServiceName, " d_undrlyng_prc  :%lf:",   d_undrlyng_prc);
     }

    EXEC SQL
    INSERT INTO CLC_CNTRCT_CLS_CN01
        (
        CLC_TRADE_DATE,
				CLC_CNTRCT_INST,
				CLC_UNDRLYING,
				CLC_EXPRY_DATE,
				CLS_STRIKE_PRICE,
				CLC_OPT_TYPE,
				CLC_CA_LVL,
				CLC_LOT,
				CLC_ISS_STRT_DATE,
				CLC_ISS_MAT_DATE,
				CLC_EXRC_STRT_DATE,
				CLC_EXRC_END_DATE,
				CLC_EXRC_STYLE,
				CLC_MRKT_TYPE,
				CLC_OPN_PRC,
				CLC_HIGH_PRC,
				CLC_LOW_PRC,
				CLC_CLS_PRC,
				CLC_STTLMT_PRC,
				CLC_UNDRLYNG_PRC
        ) 
    VALUES
        (
        to_date(:c_trade_date, 'dd-MON-yyyy'),
				:c_cntrct_inst,
				:c_undrlying,
				:c_expry_date,
				:d_strike_price,
				:c_opt_type,
				:l_ca_lvl,
				:l_lot,
        decode(:c_iss_strt_date,'*',NULL,to_date(:c_iss_strt_date, 'dd-MON-yyyy')), /*assumed these 4 dates could be null */
        decode(:c_iss_mat_date,'*',NULL,to_date(:c_iss_mat_date, 'dd-MON-yyyy')),
        decode(:c_exrc_strt_date,'*',NULL,to_date(:c_exrc_strt_date, 'dd-MON-yyyy')),
        decode(:c_exrc_end_date,'*',NULL,to_date(:c_exrc_end_date, 'dd-MON-yyyy')),
				:c_exrc_style,
				:c_mrkt_type,
				:d_opn_prc,
				:d_high_prc,
				:d_low_prc,
				:d_cls_prc,
				:d_sttlmt_prc,
        :d_undrlyng_prc
        );

    if( SQLCODE != 0 )
    {
			 fn_errlog(c_ServiceName, "S31025", SQLMSG, c_err_msg);
			 strcpy( c_msg, "System error. Contact system support" );
			 fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			 strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.1 ***/
   		 fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /** Ver 1.1 ***/
       fclose(ptr_cn01_file);
			 return;
    }

  }

  if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
     fn_errlog(c_ServiceName, "S31030", LIBMSG, c_err_msg);
     strcpy( c_msg, "System error. Contact system support" );
     fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		 strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.1 ***/
     fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /** Ver 1.1 ***/
     fclose(ptr_cn01_file);
     return;
  }

  fclose(ptr_cn01_file);

  fn_bat_pst_msg ( c_ServiceName, "Data retieved from CN01 file....", c_tag );

  EXEC SQL
     SELECT count(*)
     INTO   :li_tot_rcrds
     FROM   CLC_CNTRCT_CLS_CN01, EXG_XCHNG_MSTR
     WHERE  EXG_XCHNG_CD = 'NFO' 
     AND    CLC_TRADE_DATE = EXG_NXT_TRD_DT;

	if( SQLCODE != 0 )
	{
		 fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg );
		 strcpy( c_msg, "System error. Contact system support" );
		 fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		 strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.1 ***/
     fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /** Ver 1.1 ***/
		 return;
	}

	fn_userlog( c_ServiceName, "li_tot_rcrds     :%ld:", li_tot_rcrds);

	if( li_tot_rcrds == 0 )
	{
		 fn_errlog( c_ServiceName, "S31040", DEFMSG, c_err_msg );
     strcpy( c_msg, "Closing price date in file should be same as that of Trade date.");
     fn_bat_pst_msg( c_ServiceName, c_msg, c_tag );
		 strcpy(c_error_txt,"System error. Contact System Support");  /** Ver 1.1 **/
     fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /** Ver 1.1 **/
		 return;
	}

  EXEC SQL
     DECLARE cur_clc CURSOR FOR
     SELECT to_char(CLC_TRADE_DATE,'dd-Mon-yyyy'),
						CLC_CNTRCT_INST,
						CLC_UNDRLYING,
            to_char(CLC_EXPRY_DATE,'dd-Mon-yyyy'),
						CLS_STRIKE_PRICE,
						CLC_OPT_TYPE,
						CLC_CA_LVL,
		  			CLC_STTLMT_PRC * 100,                                 /* closing price for futures */
            CLC_UNDRLYNG_PRC * 100                                /* closing price for options */
     FROM   CLC_CNTRCT_CLS_CN01, EXG_XCHNG_MSTR
     WHERE  EXG_XCHNG_CD = 'NFO'  
     AND    CLC_TRADE_DATE = EXG_NXT_TRD_DT;

	if( SQLCODE != 0 )
	{
		 fn_errlog( c_ServiceName, "S31045", SQLMSG, c_err_msg );
		 strcpy( c_msg, "System error. Contact system support" );
		 fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		 strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.1 ***/
     fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /** Ver 1.1 **/
		 return;
	}

  EXEC SQL OPEN cur_clc;
  if( SQLCODE != 0 )
  {
     fn_errlog( c_ServiceName, "S31050", SQLMSG, c_err_msg );
     strcpy( c_msg, "System error. Contact system support" );
     fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		 strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.1 ***/
     fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /** Ver 1.1 ***/
     return;
  }

  for( li_cnt = 1; li_cnt<=li_tot_rcrds; li_cnt++ )
  {
     EXEC SQL
        FETCH cur_clc       
				INTO	:c_trade_date,
							:c_cntrct_inst,
							:c_undrlying,
							:c_expry_date,
							:d_strike_price,
							:c_opt_type,
							:l_ca_lvl,
							:l_cls_prc,
							:l_undrlyng_prc;

     if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
     {
        fn_errlog( c_ServiceName, "S31055", SQLMSG, c_err_msg );
        strcpy( c_msg, "System error. Contact system support" );
        fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
				strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.1 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /** Ver 1.1 ***/
        EXEC SQL CLOSE cur_clc;
        return;
     }

     if( SQLCODE == NO_DATA_FOUND )
     {
        strcpy( c_msg, "All Done");
        fn_bat_pst_msg( c_ServiceName, c_msg, c_tag );
        EXEC SQL CLOSE cur_clc;
        break;
     }

     rtrim( c_undrlying );
  
     if( strncmp( c_cntrct_inst, "OPT", 3) == 0 )   /* For option contracts undrlyng prc is apllied as closing prc */
     {
        l_cls_prc = l_undrlyng_prc;
     }
   
		 if( DEBUG_MSG_LVL_3 )
		 {
			  fn_userlog( c_ServiceName, "c_trade_date     :%s:",  c_trade_date     );
			  fn_userlog( c_ServiceName, "c_cntrct_inst    :%s:",  c_cntrct_inst    );
			  fn_userlog( c_ServiceName, "c_undrlying      :%s:",  c_undrlying      );
			  fn_userlog( c_ServiceName, "c_expry_date     :%s:",  c_expry_date     );
			  fn_userlog( c_ServiceName, " d_strike_price  :%lf",  d_strike_price  );
			  fn_userlog( c_ServiceName, "c_opt_type       :%s:",  c_opt_type       );
			  fn_userlog( c_ServiceName, " l_ca_lvl        :%ld:",  l_ca_lvl        );
			  fn_userlog( c_ServiceName, " l_cls_prc       :%ld:",  l_cls_prc       );
		 }

     i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                  c_err_msg,
                                  "sfr_beod_prcs",
                                  li_cnt,
                                  li_tot_rcrds );
		 if ( i_ch_val == -1 )
		 {
				fn_errlog( c_ServiceName, "S31060", LIBMSG, c_err_msg );
				strcpy ( c_msg, "System error. Contact system support" );
				fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
				strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.1 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /** Ver 1.1 ***/
        EXEC SQL CLOSE cur_clc;
				return;
		 } 

     i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                  c_err_msg,
                                  "SFO_CLSPRC_DWLD",
                                  0,
                                  10,
                                  FFO_INSTRMNT_TYP , ( char * )c_cntrct_inst,
                                  FFO_SYMBOL, ( char * )c_undrlying,
                                  FFO_EXPRY_DT, ( char * )c_expry_date,
                                  FFO_OPTION_TYP,( char * )c_opt_type,
                                  FFO_STRIKE_PRC, ( char * )&d_strike_price,
                                  FFO_CA_LVL, ( char * )&l_ca_lvl,
                                  FFO_CLS_PRC, (char *)&l_cls_prc,
                                  FFO_XCHNG_CD, (char *)c_xchng_cd,
                                  FFO_TRD_DT, (char *)c_trade_date,
                                  FFO_BAT_TAG, ( char * )c_tag );
		 if ( i_ch_val == -1 )
		 {
			  fn_errlog( c_ServiceName, "S31065", LIBMSG, c_err_msg );
			  strcpy ( c_msg, "System error. Contact system support" );
			  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
				strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.1 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); /** Ver 1.1 ***/
			  EXEC SQL CLOSE cur_clc;
			  return;
		 }
  }
}

int fn_bat_init ( int argc, char *argv[] )
{
  if (argc != 6)
  {
    fn_userlog( argv[0],
      "Usage - %s <configuration file> <Exchange code> <pipe_id> <Folder Date(yyyymmdd)> <fileName>",argv[0]);
    fn_bat_pst_msg ( argv[0], "Invalid number of arguments", c_tag );
    return -1;
  }

  fn_var = BAT_UPLD_CN01;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  char c_msg[256];

  sprintf ( c_msg, "Batch process %s ended", argv[0] ); 
  fn_bat_pst_msg (  argv[0], c_msg, c_tag );
  return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}
