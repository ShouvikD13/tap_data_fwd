/***************************************************************************************/
/*  Program           : BAT_ADD_MRGNOPT                                      					 */
/*                                                                          					 */
/*  Input             : LTQ/CLS_PRC Indicator                               					 */
/*                    : Match                                                					 */ 
/*                    : Stock                                                					 */
/*                                                                           					 */
/*  Output            :                                                      					 */
/*                                                                            				 */
/*  Description       : This client process calulates the margin blocked on positions  */
/*                      and recalculates the margin required either with LTQ or Close  */ 
/*										  price. It tried the block what ever margin is available if     */
/*                      required. If marginis not available it cancels the new orders  */
/*                      or squares off the existing position.                          */
/*                                                                                     */
/*  Log               : Ver 1.0 02-Feb-2010 Vidyayini Krish                            */
/*  Log               : Ver 1.1 06-Aug-2014 Sandeep Patil															 */
/***************************************************************************************/
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <string.h>
#include <stdlib.h>	
#include <fn_read_debug_lvl.h>
#include <fml_rout.h> 

void BAT_ADD_MRGNOPT ( int argc, char *argv[] )
{
	int i_ch_val;


	long int li_tot_rcrds;
  long int li_cnt;
	long  l_strk_prc;
	long int li_run_no = 0;

  char c_msg[256];
  char c_ServiceName [ 33 ];
  char c_svc_name [ 33 ];
  char c_err_msg [ 256 ];
  char c_und_str [ 400 ];
  char c_match_str [ 400 ];
  char c_xchng_cd [ 4 ];
  char c_clm_mtch_acnt [ 11 ];
  char c_undrlyng [ 7 ];
  char c_imtm_remarks [ 256 ];
  char c_expry_dt [ 12 ];
	

	char c_indstk;
	char c_cntrct_tag;
	char c_exer_typ;
	char c_opt_typ;
	char c_actn_typ;
  char c_prd_typ;
  char c_rqst_typ;
  char c_xchng_stts;
	char c_prc_flg;

	FBFR32 *ptr_fml_buf;

  strcpy ( c_ServiceName, argv[0] );

	INITBATDBGLVL(argv[0]);		

	sprintf ( c_msg, "Batch process %s started", argv[0] );

 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	strcpy ( c_msg, "Creating data. Please wait ... " );

 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	/*---------Verifying the input arguments and reading them into local variables---------*/

  if( argc < 6 )   
  {
    fn_bat_pst_msg ( c_ServiceName, "Invalid Number of Arguments", c_tag );
    exit(0);
  }

  strcpy( c_xchng_cd, argv[2] );

  li_run_no = atoi( argv[5] );

	strcpy( c_match_str, (char *)argv[6] );

	strcpy( c_und_str, (char *)argv[7] );

	c_prc_flg   = argv[4][0];

	c_prd_typ = OPTIONS;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Exchange Code Is :%s:",c_xchng_cd);
		fn_userlog(c_ServiceName,"c_prc_flg Is :%c:",c_prc_flg);
		fn_userlog(c_ServiceName,"li_run_no Is :%ld:",li_run_no);
		fn_userlog(c_ServiceName,"c_match_str Is :%s:",c_match_str);
		fn_userlog(c_ServiceName,"c_und_str Is :%s:",c_und_str);
	}

	/***	Commented In Ver 1.1

	EXEC SQL
  	SELECT  EXG_CRRNT_STTS
  	INTO    :c_xchng_stts
  	FROM    EXG_XCHNG_MSTR
  	WHERE   EXG_XCHNG_CD  = :c_xchng_cd;

 	if ( SQLCODE != 0 )
 	{
   	fn_errlog(c_ServiceName,"S31005", SQLMSG, c_err_msg);
   	return;
 	}

 	if ( c_xchng_stts == EXCHANGE_OPEN )
 	{
   	fn_userlog(c_ServiceName,"Can't Run Adhoc Margin Process With Exchange Status Open");
   	fn_bat_pst_msg ( c_ServiceName, "Can't Run Adhoc Margin Process With Exchange Status Open",c_tag );
   	return;
 	}
 	else if ( c_xchng_stts ==  EXCHANGE_CLOSE && c_prc_flg != 'C' )
 	{
		fn_userlog(c_ServiceName,"With Exchange Status Close ,Can't Run Process With Last Traded Price");
		fn_bat_pst_msg ( c_ServiceName, "With Exchange Status Close ,Can't Run Process With Last Traded Price",c_tag );
   	return;
 	}
 	else if ( c_xchng_stts == EXCHANGE_UNDER_EXPIRY && c_prc_flg !='L')
 	{
		fn_userlog(c_ServiceName,"With Exchange Under Expiry ,Can't Run Process With Closing Price");
		fn_bat_pst_msg ( c_ServiceName, "With Exchange Under Expiry ,Can't Run Process With Closing Price",c_tag );
   	return;
 	}

	Ver 1.1 Comment Ends	***/

  if ( strcmp(c_match_str,"NONE") == 0 && strcmp(c_und_str,"NONE") == 0 )
  {
		fn_userlog(c_ServiceName,"Inside MTM_ALL_PSTN");

	   	c_rqst_typ = MTM_ALL_PSTN;
			ptr_fml_buf = fn_create_rs ( 	c_ServiceName,
	                             	 		c_err_msg,
	                             	 		"SFO_GT_OAMRGN",
	                             	 		TPNOTIME,
	                             	 		5,
	                             	 		FFO_XCHNG_CD, ( char * )c_xchng_cd,
	                             	 		FFO_PRDCT_TYP, (char * )&c_prd_typ,
	                             	 		FFO_RQST_TYP, (char *)&c_rqst_typ,
                                    FFO_EBA_MTCH_ACT_NO,( char * )c_match_str,
	                             	 		FFO_UNDRLYNG, (char *)c_und_str);
	}
  else if( strcmp(c_match_str,"NONE") != 0 && strcmp(c_und_str,"NONE") == 0 )
  {
    fn_userlog(c_ServiceName,"Inside MTM_FOR_MATCH_ALL_UNDRLYNG");
	   	c_rqst_typ = MTM_FOR_MATCH_ALL_UNDRLYNG;
			ptr_fml_buf = fn_create_rs ( 	c_ServiceName,
	                             	 		c_err_msg,
	                             	 		"SFO_GT_OAMRGN",
	                             	 		TPNOTIME,
	                             	 		5,
	                             	 		FFO_XCHNG_CD, ( char * )c_xchng_cd,
	                             	 		FFO_PRDCT_TYP, (char * )&c_prd_typ,
	                             	 		FFO_RQST_TYP, (char *)&c_rqst_typ,
                                    FFO_EBA_MTCH_ACT_NO,( char * )c_match_str,
	                             	 		FFO_UNDRLYNG, (char *)c_und_str);
	}
	else if( strcmp(c_match_str,"NONE") == 0 && strcmp(c_und_str,"NONE") != 0 )
  {
    fn_userlog(c_ServiceName,"Inside MTM_FOR_UNDRLYNG");
      c_rqst_typ = MTM_FOR_UNDRLYNG;
      ptr_fml_buf = fn_create_rs (  c_ServiceName,
                                    c_err_msg,
                                    "SFO_GT_OAMRGN",
                                    TPNOTIME,
                                    5,
                                    FFO_XCHNG_CD, ( char * )c_xchng_cd,
                                    FFO_PRDCT_TYP, (char * )&c_prd_typ,
                                    FFO_RQST_TYP, (char *)&c_rqst_typ,
                                    FFO_EBA_MTCH_ACT_NO,( char * )c_match_str,
                                    FFO_UNDRLYNG, (char *)c_und_str);
  }
	else
	{
		strcpy ( c_msg, "Invalid inputs. Contact system support" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    return;
	}



	/*----------If called service didn't return data in buffer throw an error else get data from buffer----------*/

	if ( ptr_fml_buf == NULL )
	{
		fn_errlog( c_ServiceName, "S31010", LIBMSG, c_err_msg );
		return;
	}

	li_tot_rcrds = fn_reccnt_rs ( ptr_fml_buf,
                                c_ServiceName,
                                c_err_msg,
                                FFO_EBA_MTCH_ACT_NO);
	if ( li_tot_rcrds == -1 )
	{
		fn_errlog( c_ServiceName, "S31015", LIBMSG, c_err_msg );
		fn_dstry_rs ( ptr_fml_buf );
		return;
	}
	strcpy ( c_msg, "Data created." );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  sprintf ( c_msg, "Total records = %ld", li_tot_rcrds );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );



	/*-----------Processing for the records begins here-------------*/

  for ( li_cnt=1; li_cnt<=li_tot_rcrds; li_cnt++ )
  {

		i_ch_val = fn_getnxt_rs ( ptr_fml_buf,
                              c_ServiceName,
                              c_err_msg,
                              9,
                              FFO_EBA_MTCH_ACT_NO, 
																						( char * )c_clm_mtch_acnt, NULL,
                              FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL,
                              FFO_PRDCT_TYP, ( char * )&c_prd_typ, NULL,
                              FFO_UNDRLYNG, ( char * )c_undrlyng, NULL,
                              FFO_CTGRY_INDSTK, ( char * )&c_indstk, NULL,
                              FFO_EXPRY_DT, ( char * )c_expry_dt, NULL,
                              FFO_STRK_PRC, ( char * )&l_strk_prc, NULL,
                              FFO_EXER_TYP, ( char * )&c_exer_typ, NULL,
                              FFO_OPT_TYP, ( char * )&c_opt_typ, NULL );
		if ( i_ch_val != 0 )
		{
			fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg );
			fn_dstry_rs ( ptr_fml_buf );
  		strcpy ( c_msg, "System error. Contact system support" );
  		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			return;
		}

		sprintf ( c_msg, "Processing record %ld of %ld", li_cnt, li_tot_rcrds );
 		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

    i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                  c_err_msg,
                                  "sfr_bof_oimtm",
                                  li_cnt,
                                  li_tot_rcrds );
    if ( i_ch_val == -1 )
    {
			fn_errlog( c_ServiceName, "S31025", LIBMSG, c_err_msg );
			fn_dstry_rs ( ptr_fml_buf );
  		strcpy ( c_msg, "System error. Contact system support" );
  		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			return;
    }


		/* Call to SFO_ORD_ROUT is done to get the Pipe id for creating the DDR string in the service SFO_ADD_OMRGN */

	  strcpy( c_imtm_remarks,"POSITION ENTERING EOD_OPT_ADDMRN");
		strcpy( c_svc_name,"SFO_ADD_OMRGN");

		fn_userlog( c_ServiceName,"Calling SFO_ADD_OMRGN" );
		fn_userlog( c_ServiceName,"Match is :%s:",c_clm_mtch_acnt );
		

   	i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                 	c_err_msg,
                                 	"SFO_ORD_ROUT",
                                 	0,
                                 	15,
                              		FFO_EBA_MTCH_ACT_NO,(char *)c_clm_mtch_acnt,
                              		FFO_XCHNG_CD, ( char * )c_xchng_cd,
                              		FFO_PRDCT_TYP, ( char * )&c_prd_typ,
                              		FFO_UNDRLYNG, ( char * )c_undrlyng,
                              		FFO_CTGRY_INDSTK, ( char * )&c_indstk,
                              		FFO_EXPRY_DT, ( char * )c_expry_dt,
                              		FFO_STRK_PRC, ( char * )&l_strk_prc,
                              		FFO_EXER_TYP, ( char * )&c_exer_typ,
                              		FFO_OPT_TYP, ( char * )&c_opt_typ,
                              		FFO_IMTM_RMRKS, ( char * )c_imtm_remarks,
				                        	FFO_SVC_NAME, (char*) c_svc_name,
                                  FFO_SPL_FLG,(char *)&c_prc_flg,
                                  FFO_BAT_TAG, ( char * )c_tag,
                                  FFO_REC_NO, ( char * )&li_cnt,
																	FFO_RUN_NUM, (char *)&li_run_no);

    if ( i_ch_val == -1 )
    {
			fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg );
			fn_dstry_rs ( ptr_fml_buf );
  		strcpy ( c_msg, "System error. Contact system support" );
  		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			return;
		}
  }

	fn_dstry_rs ( ptr_fml_buf );

	sprintf ( c_msg, "Batch process %s ended", argv[0] );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  return;
}

int fn_bat_init ( int argc, char *argv[] ) 
{
	fn_var = BAT_ADD_MRGNOPT;
	return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}
int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}
