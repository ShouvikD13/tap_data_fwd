/*********************************************************************************/
/*  Program           : BAT_DLVRYMRGN_PRCnS                                       */ 
/*                                                                               */
/*  Description       :                                                          */  
/*                                                                               */
/*  Mode              - E - For EOD Mode                                         */ 
/*                    - I - For Intra day Mode                                   */
/*                                                                               */
/*  Log               : 1.0  Akash Balasubramanian ( 22-Jun-2019)                */
/*  Log               : 1.1  Mrinal Kishore( 19-Aug-2020)                        */
/*  Log               : 1.2  Enable Delievry taking flag - Abhinav( 19-Aug-2020) */
/*  Log               : 1.3  CR-ISEC10-156987 MarginShotfall_Communication (28-Jul-2021) */
/*****************************************************************************************/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo_fml_def.h>


#define INTRA_DAY 'I'
#define EOD       'E'
#define EOD_MARGIN_REP 'R'  /** Ver 1.3 **/ 

#include <fn_battmpt.h>
#include<fn_tuxlib.h>
#include<fn_log.h>
#include <fn_env.h>
#include <fo.h>
#include <unistd.h>


FBFR32 *ptr_fml_Ibuf ;

varchar c_err_msg[256];
long l_bufferlength=0;
int i_counter=1;
int i_returncode=0;
int i_dt_chk=0; 
char c_span_flg='\0';
char c_exer_typ='\0';
char c_expiry_dt[12];

int fn_upd_delivery_flg(void); /** Ver 1.2 **/ 

void BAT_DLVRYMRGN_PRCS(int argc,char *argv[])
{
 char c_ServiceName[20];
 char c_rqst_typ='\0'; 

 /* Ver 1.1 Starts */
 char c_prcs_typ='\0';            
 char c_flm_lodm_typ='\0';            
 char c_flm_undrlyng[7] = "\0";       
 char c_flm_exp_dt[12] = "\0";        
 char c_flm_eos_dt[12] = "\0";        
 int  i_flm_num_of_days = 0;          
 int  i_adhoc_fct_cnt = 0;            
 int  i_day_cnt= 0;                   
 double d_cur_lodm_prcnt = 0.0;       
 /* Ver 1.1 Ends */

 char c_expry_dt[12];
 char c_min_trd_dt[12];
 char c_max_trd_dt[12];
 char c_trade_dt[12];
 char c_check_date[12];
 char c_xchng_cd[4];
 char c_exg_crrnt_stts='\0';
 char c_match_account[11];
 char c_underlying[7];
 char c_exchng_cd[4];
 char c_prd_typ='\0';
 char c_opt_typ='\0';
 char c_ind_stk='\0';
 char c_user_id[9]; 
 char c_msg[256];
 char c_scrpt_cmd[250];
 int  i_cnt = 0;
 char c_time_flg='\0';
 
 long l_strike_prc=0;

 int i_mnth_flg;
 int i_day_chk;
 int i_nth_day;
 int i_ch_val;
 int i_trnsctn;

 double d_spot_prc=0.0;

 long int li_tot_rcrds=0;
 long int li_cnt=0;
 
 varchar c_err_msg[256];

 int fn_get_dlvry_rec (char *,char *,char );

 MEMSET(c_ServiceName);
 MEMSET(c_expry_dt);
 MEMSET(c_xchng_cd);
 MEMSET(c_trade_dt);
 MEMSET(c_check_date);
 MEMSET(c_match_account);
 MEMSET(c_underlying);
 MEMSET(c_exchng_cd);
 MEMSET(c_user_id);
 MEMSET(c_min_trd_dt);
 MEMSET(c_max_trd_dt);
 MEMSET(c_msg);
 MEMSET(c_scrpt_cmd);

 /* if(argc != 6) *** Ver 1.1 ***/
 if(argc != 7)        /*** 6 is replaced with 7 in Ver 1.1 ***/
 {
  /* fn_userlog( argv[0],"Usage - %s <configuration file> <Exchange code> <pipe_id> <Mode> <Expiry date> ",argv[0]);		*/
	fn_userlog( argv[0],"Usage - %s <configuration file> <Exchange code> <pipe_id> <Mode> <Expiry date> <Prcs type> ",argv[0]); /* Ver 1.1 ***/
  fn_bat_pst_msg ( argv[0], "Invalid number of arguments", c_tag ); 
  fn_userlog ( argv[0], "Invalid number of arguments" );
  return ;
 }

 strcpy(c_ServiceName,argv[0]);
 strcpy(c_xchng_cd,argv[2]);
 c_rqst_typ=argv[4][0];
 strcpy(c_expry_dt,argv[5]);
 c_prcs_typ=argv[6][0];               /*** Ver 1.1 ***/

 fn_userlog(c_ServiceName," Running in mode :%c and for Expiry date :%s:",c_rqst_typ,c_expry_dt);

  /******* Validation begins ********/

 /*** Check expiry date whether it belongs to the current Month   *****/


 EXEC SQL
 SELECT 1
 INTO :i_mnth_flg
 FROM DUAL
 WHERE to_date(:c_expry_dt,'DD-Mon-YYYY') =(
 SELECT MIN(FTQ_EXPRY_DT)
 FROM  FTQ_FO_TRD_QT where FTQ_XCHNG_CD='NFO'
 and FTQ_PRDCT_TYP='F'
 and FTQ_UNDRLYNG='NIFTY');


 if(( SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND) )
 {
  fn_errlog( c_ServiceName, "S31005", SQLMSG, c_err_msg.arr );
  fn_bat_pst_msg ( c_ServiceName, "Expiry date check failure",c_tag);
  return; 
 }

 if (SQLCODE == NO_DATA_FOUND )
 {
  i_mnth_flg=0;
 }

 fn_userlog(c_ServiceName,"Month Flag :%d:",i_mnth_flg);

 if ( i_mnth_flg != 1 )
 {
  strcpy(c_err_msg.arr,"Incorrect Expiry Date"); 
  fn_bat_pst_msg ( c_ServiceName, "Expiry date check failure",c_tag);
  return; 
 } 

 /******* Check for request type ******/

 if(( c_rqst_typ !=INTRA_DAY) && (c_rqst_typ !=EOD)  && (c_rqst_typ != EOD_MARGIN_REP) )  /** EOD_MRGN_REP Added in ver 1.3 **/
 {
  strcpy(c_err_msg.arr,"Invalid Run mode");
  fn_bat_pst_msg ( c_ServiceName, "Invalid Run Mode", c_tag );
  return; 
 }  
 /*** Ver 1.1 starts *** Check for process type ***/


 if(( c_prcs_typ != 'N') && (c_prcs_typ != 'A'))
 {
  strcpy(c_err_msg.arr,"Invalid Process Type");
  fn_bat_pst_msg ( c_ServiceName, "Invalid Process Type", c_tag );
  return;
 }
 
 /*******  Check for the date range when the process should be run  ******/


 /**** Query Commented ***

 EXEC SQL
 SELECT MIN(trd_dt),MAX(trd_dt)
 INTO :c_min_trd_dt,
      :c_max_trd_dt 
 FROM
 (
  SELECT trd_dt
  FROM
  (
   SELECT FBC_TRD_DT trd_dt from FBC_FO_BRNCH_CAL
   WHERE FBC_XCHNG_CD='NFO'
   AND FBC_GRP_ID='1'
   AND  FBC_TRD_DT <= (select min(FTQ_EXPRY_DT) AS min_expry_dt from ftq_fo_trd_qt where FTQ_XCHNG_CD='NFO'
   AND  FTQ_PRDCT_TYP='F'
   AND  FTQ_UNDRLYNG='NIFTY' and FTQ_EXPRY_DT >=trunc(sysdate))
  ** AND to_date(FBC_TRD_DT,'dd-Mon-yyyy') >= to_date(sysdate,'dd-Mon-yyyy') **
   AND trunc(FBC_TRD_DT,'mm') between add_months(trunc(to_date(:c_expry_dt),'MM'),-1) and  trunc(to_date(:c_expry_dt),'MM')
   ORDER BY FBC_TRD_DT desc
  ),FSP_FO_SYSTM_PRMTR
  WHERE
  ROWNUM <=FSP_DLVRY_STRT_DAY+1
  ORDER BY trd_dt ASC 
 );

 *********/

  /****** Revised Query ******/
  /*** Comment start in Ver 1.1 ***
 EXEC SQL
 SELECT MIN(trd_dt),MAX(trd_dt)
 INTO :c_min_trd_dt,
      :c_max_trd_dt
 FROM
 (
  SELECT trd_dt
  FROM
  (
   SELECT FBC_TRD_DT trd_dt
   from FBC_FO_BRNCH_CAL,
   (select min(FTQ_EXPRY_DT) min_dt from ftq_fo_trd_qt where FTQ_XCHNG_CD='NFO' AND FTQ_PRDCT_TYP='F' AND FTQ_UNDRLYNG='NIFTY') A
   WHERE  FBC_TRD_DT <= A.min_dt
   AND trunc(FBC_TRD_DT,'MM')= trunc(A.min_dt,'MM')
   AND    FBC_XCHNG_CD='NFO'
   AND FBC_GRP_ID='1'
   ORDER BY FBC_TRD_DT desc
  ),FSP_FO_SYSTM_PRMTR
  WHERE
  ROWNUM <=FSP_DLVRY_STRT_DAY+1
  ORDER BY trd_dt ASC
 );



 if( SQLCODE != 0 )
 {
  fn_errlog( c_ServiceName, "S31010", SQLMSG, c_err_msg.arr );
  return;
 }

 fn_userlog(c_ServiceName,"c_min_trd_dt is :%s:",c_min_trd_dt);
 fn_userlog(c_ServiceName,"c_max_trd_dt :%s:",c_max_trd_dt);



 EXEC SQL
 SELECT 1 
 INTO :i_day_chk
 FROM DUAL 
 WHERE to_date(:c_expry_dt,'DD-MM-YYYY') between to_date(:c_min_trd_dt,'DD-MM-YYYY') AND to_date(:c_max_trd_dt,'DD-MM-YYYY');

 fn_userlog(c_ServiceName,"After query");
 
 if(( SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
 {
  fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg.arr );
  return;
 }

 if( SQLCODE == NO_DATA_FOUND )
 {
  i_day_chk=0;
 }

 fn_userlog(c_ServiceName," Day check :%d:",i_day_chk);

 if ( i_day_chk != 1 )
 {
  strcpy(c_err_msg.arr,"Expiry Date does not fall between the Ideal run date ");
  fn_bat_pst_msg ( c_ServiceName,"Expiry Date does not fall between the Ideal run date " , c_tag );
  return;
 }
 *** Comment ends in Ver 1.1 ***/


 /***** Check Exchange Status *******/

 EXEC SQL
 SELECT EXG_CRRNT_STTS,
        EXG_NXT_TRD_DT
 INTO :c_exg_crrnt_stts,
      :c_trade_dt
 FROM EXG_XCHNG_MSTR 
 WHERE EXG_XCHNG_CD=:c_xchng_cd;

 if( SQLCODE != 0 )
 {
  fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg.arr );
  return;
 }

 fn_userlog(c_ServiceName," Exchange Status :%c:",c_exg_crrnt_stts);
 fn_userlog(c_ServiceName,"Exchange Trade date :%s:",c_trade_dt);


 if( c_rqst_typ ==EOD || c_rqst_typ == EOD_MARGIN_REP )  /** EOD_MRGN_REP Added in ver 1.3 **/
 {
  if(c_exg_crrnt_stts =='O')
  {
   strcpy(c_err_msg.arr,"Exchange Status should not be open");
   fn_bat_pst_msg ( c_ServiceName,"Exchange Status should not be open for EOD Mode", c_tag );
   return; 
  }
 }

 
 if( c_rqst_typ ==INTRA_DAY)
 {
  if(c_exg_crrnt_stts !='O')
  {
   strcpy(c_err_msg.arr,"Exchange Status should be open");
   fn_bat_pst_msg ( c_ServiceName,"Exchange Status should  be open for Intra Day Mode", c_tag );
   return;
  }
 }


 EXEC SQL
 SELECT 1
 INTO :i_cnt
 FROM EXG_XCHNG_MSTR
 WHERE TRUNC(SYSDATE)>=TO_DATE(:c_trade_dt)
 AND EXG_XCHNG_CD=:c_xchng_cd;

 if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND)  )
 {
  i_cnt=0;
  fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg.arr );
  return;
 }

 if( SQLCODE == NO_DATA_FOUND)
 {
  fn_userlog(c_ServiceName,"Trading Holiday *************");
  strcpy(c_err_msg.arr,"Today is trading holiday");
  fn_bat_pst_msg ( c_ServiceName,"Could not run process as Today is trading holiday", c_tag );
  return;
 }



  /*** Ver 1.1 Starts ***/
  rtrim(c_expry_dt);
  c_time_flg='B';
  if ( c_rqst_typ != EOD_MARGIN_REP )   /** If condition added in Ver 1.3 **/
  {
    sprintf(c_scrpt_cmd,"nohup %s/sh_scripts/fo_dlvry_mrgn_pnd.sh %c %c %s %c & ",tuxgetenv("HOME"),c_rqst_typ,c_time_flg,c_expry_dt,c_prcs_typ);
    fn_userlog( c_ServiceName, "portfolio run command :%s:",c_scrpt_cmd);
    system(c_scrpt_cmd);
  }

  if(c_prcs_typ == 'N')
  {
    fn_userlog(c_ServiceName,"Before insert into FCT_FOLODM_CNTRCT_TMP for c_prcs_typ :%c: ",c_prcs_typ);
    i_trnsctn = fn_begintran( c_ServiceName, c_err_msg.arr);
    if( i_trnsctn == -1 )
    {
      fn_errlog( c_ServiceName, "S31030",FMLMSG , c_err_msg.arr );
      return;
    }
    EXEC SQL
      DELETE FCT_FOLODM_CNTRCT_TMP;
    if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog( c_ServiceName, "S31035",SQLMSG, c_err_msg.arr );
      fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg.arr);
      return;
    }
    fn_userlog(c_ServiceName,"After Delete FCT_FOLODM_CNTRCT_TMP for c_prcs_typ :%c: ",c_prcs_typ);

    EXEC SQL
      INSERT INTO FCT_FOLODM_CNTRCT_TMP
      (
        FCT_UNDRLYNG,
        FCT_PRDCT_TYP,
        FCT_EXP_DT
      )
      (SELECT  DISTINCT FTQ_UNDRLYNG,
        FTQ_PRDCT_TYP,
        FTQ_EXPRY_DT
       FROM  FTQ_FO_TRD_QT,
        FLM_FO_LODM_MSTR
       WHERE FLM_EXP_DT = FTQ_EXPRY_DT
       AND FLM_UNDRLYNG = 'ALL'
       AND FTQ_PRDCT_TYP= 'O'
       AND FTQ_XCHNG_CD = :c_xchng_cd
       AND NOT EXISTS (SELECT  DISTINCT FLM_UNDRLYNG, FLM_EXP_DT
												FROM   FLM_FO_LODM_MSTR
												WHERE  FLM_UNDRLYNG = FTQ_UNDRLYNG
												AND	FLM_EOS_DT <= FTQ_EXPRY_DT
												AND	TRUNC(FTQ_EXPRY_DT,'MM') = TRUNC(FLM_EOS_DT,'MM')
												AND	FLM_EOS_DT >= TRUNC(SYSDATE)
												AND	NVL(FLM_TODAYS_LODM_PERCNT,0) != 0
												AND	FLM_DLVRY_MRGPRCNT_UPDDT is not NULL));
    if(( SQLCODE != 0) && (SQLCODE!= NO_DATA_FOUND) )
    {
      fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg.arr );
      fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg.arr);
      return;
    }

    fn_userlog(c_ServiceName,"After Insert FCT_FOLODM_CNTRCT_TMP for c_prcs_typ :%c: ",c_prcs_typ);
    if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg.arr ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31045",FMLMSG , c_err_msg.arr );
      fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg.arr);
      return;
    }
  }
  else
  {


    fn_userlog(c_ServiceName,"Before insert into FCT_FOLODM_CNTRCT_TMP for c_prcs_typ :%c: ",c_prcs_typ);
    i_trnsctn = fn_begintran( c_ServiceName, c_err_msg.arr);
    if( i_trnsctn == -1 )
    {
      fn_errlog( c_ServiceName, "S31050",FMLMSG , c_err_msg.arr );
      return;
    }
    EXEC SQL
      DELETE FCT_FOLODM_CNTRCT_TMP;
    if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog( c_ServiceName, "S31055",SQLMSG, c_err_msg.arr );
      fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg.arr);
      return;
    }
    fn_userlog(c_ServiceName,"After Delete FCT_FOLODM_CNTRCT_TMP for c_prcs_typ :%c: ",c_prcs_typ);


    EXEC SQL
      INSERT INTO FCT_FOLODM_CNTRCT_TMP
      (
        FCT_UNDRLYNG,
        FCT_PRDCT_TYP,
        FCT_EXP_DT
      )
      (
        SELECT DISTINCT FTQ_UNDRLYNG,FTQ_PRDCT_TYP,FTQ_EXPRY_DT
        FROM (SELECT  FLM_PRDCT_TYP, UND, Exp_Dt
          FROM  (SELECT count(1) days_left_eos,
            FLM_UNDRLYNG UND,
            FLM_EOS_DT,
            FLM_EXP_DT Exp_Dt
            FROM  FBC_FO_BRNCH_CAL,
            FLM_FO_LODM_MSTR
            WHERE FBC_TRD_DT <= FLM_EOS_DT
            AND FBC_TRD_DT <= FLM_EXP_DT
            AND TRUNC(FBC_TRD_DT,'MM') = TRUNC(TO_DATE(FLM_EOS_DT,'DD-Mon-YYYY'),'MM')
            AND FBC_XCHNG_CD = :c_xchng_cd
            AND FLM_LODM_TYP = :c_prcs_typ
            AND FBC_GRP_ID = '1'
            AND FLM_EXP_DT = to_date(:c_expry_dt,'DD-Mon-YYYY')
            AND FBC_TRD_DT >= to_date(:c_trade_dt,'DD-Mon-YYYY')
            group by FLM_UNDRLYNG,
            FLM_EOS_DT,
            FLM_EXP_DT), FLM_FO_LODM_MSTR
          WHERE FLM_UNDRLYNG = UND
          AND FLM_EXP_DT = Exp_Dt
          AND days_left_eos <= FLM_NUM_OF_DAYS+1) B, FTQ_FO_TRD_QT
        WHERE FTQ_EXPRY_DT >= to_date(B.Exp_Dt,'DD-Mon-YYYY')
        AND FTQ_UNDRLYNG = B.UND
        AND FTQ_PRDCT_TYP = 'O'
        AND FTQ_XCHNG_CD = :c_xchng_cd);
    if( SQLCODE != 0)
    {
      fn_errlog( c_ServiceName, "S31060", SQLMSG, c_err_msg.arr );
      fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg.arr);
      return;
    }
    fn_userlog(c_ServiceName,"After Insert FCT_FOLODM_CNTRCT_TMP for c_prcs_typ :%c: ",c_prcs_typ);
    EXEC SQL
      SELECT count(*)
      into   :i_adhoc_fct_cnt
      from    FCT_FOLODM_CNTRCT_TMP
      where   FCT_EXP_DT = :c_expry_dt;
    if( SQLCODE != 0)
    {
      fn_errlog( c_ServiceName, "S31065", SQLMSG, c_err_msg.arr );
      fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg.arr);
      return;
    }
    fn_userlog(c_ServiceName,"Count from FCT_FOLODM_CNTRCT_TMP :%d: ",i_adhoc_fct_cnt);
    if(i_adhoc_fct_cnt < 1)
    {
      strcpy(c_err_msg.arr,"Adhoc mode should not be run today ");
      fn_bat_pst_msg ( c_ServiceName, "Adhoc mode should not be run today", c_tag );
      fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg.arr);
      return;
    }


    if( c_rqst_typ == EOD || c_rqst_typ == EOD_MARGIN_REP)  /** EOD_MARGIN_REP Added in Ver 1.3 **/
    {


      fn_userlog(c_ServiceName,"Before Merge query execution for c_trade_dt:%s:",c_trade_dt);
      varchar v_sql_flm_upd[15000];
      MEMSET(v_sql_flm_upd);
      sprintf(v_sql_flm_upd.arr,
        "MERGE INTO FLM_FO_LODM_MSTR A \
          USING (SELECT  count(1) days_left_eos, \
            FLM_UNDRLYNG UND, \
            FLM_EOS_DT, \
            FLM_EXP_DT Exp_Dt \
          FROM  FBC_FO_BRNCH_CAL, \
                FLM_FO_LODM_MSTR \
          WHERE FBC_TRD_DT < FLM_EOS_DT \
          AND TRUNC(FBC_TRD_DT,'MM') <= TRUNC(TO_DATE(FLM_EOS_DT,'DD-Mon-YYYY'),'MM') \
          AND FBC_XCHNG_CD = '%s' \
          AND FLM_LODM_TYP = '%c' \
          AND FBC_GRP_ID = '1' \
          AND FLM_EXP_DT = to_date('%s','DD-Mon-YYYY') \
          AND FBC_TRD_DT >= '%s' \
          AND FLM_UNDRLYNG in (select FCT_UNDRLYNG from FCT_FOLODM_CNTRCT_TMP) \
          group by FLM_UNDRLYNG,FLM_EOS_DT,FLM_EXP_DT) TEMP \
          ON    (A.FLM_UNDRLYNG  = TEMP.UND \
          AND     trunc(A.FLM_EXP_DT) = TEMP.Exp_Dt  \
          AND     TEMP.days_left_eos >= 1 \
          AND     TEMP.days_left_eos <= A.FLM_NUM_OF_DAYS) \
          WHEN MATCHED  THEN  UPDATE  \
          SET A.FLM_TODAYS_LODM_PERCNT =DECODE(TEMP.days_left_eos,7,NVL(A.FLM_MARGN_PRCNT_D1,0.0), \
                      6,NVL(A.FLM_MARGN_PRCNT_D2,0.0), \
                      5,NVL(A.FLM_MARGN_PRCNT_D3,0.0), \
                      4,NVL(A.FLM_MARGN_PRCNT_D4,0.0), \
                      3,NVL(A.FLM_MARGN_PRCNT_D5,0.0), \
                      2,NVL(A.FLM_MARGN_PRCNT_D6,0.0), \
                      1,NVL(A.FLM_MARGN_PRCNT_D7,0.0), \
                      0.0), \
          A.FLM_DLVRY_MRGPRCNT_UPDDT ='%s'",c_xchng_cd,c_prcs_typ,c_expry_dt,c_trade_dt,c_trade_dt);
      SETLEN(v_sql_flm_upd);
      EXEC SQL DECLARE sql_flm_stmt STATEMENT;
      if( SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S31070", SQLMSG, c_err_msg.arr );
        fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg.arr);
        return;
      }
      EXEC SQL PREPARE sql_flm_stmt FROM :v_sql_flm_upd ;
      if( SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S31075", SQLMSG, c_err_msg.arr );
        fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg.arr);
        return;
      }
      EXEC SQL EXECUTE sql_flm_stmt ;
      if( SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S31080", SQLMSG, c_err_msg.arr );
        fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg.arr);
        return;
      }
      fn_userlog(c_ServiceName,"Total FLM rows Updated for Adhoc :%d:",sqlca.sqlerrd[2]);
      if (sqlca.sqlerrd[2] < 1)
      {
        strcpy(c_err_msg.arr,"Adhoc-EOD mode should not be run today ");
        fn_bat_pst_msg ( c_ServiceName, "Adhoc-EOD mode should not be run today", c_tag );
        fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg.arr);
        return;
      }
      fn_userlog(c_ServiceName,"After Merge query execution for c_trade_dt:%s:",c_trade_dt);
 			if( fn_upd_delivery_flg() != 0 )  /** Ver 1.2 **/
      {
       fn_errlog( c_ServiceName, "S31085", SQLMSG, c_err_msg.arr );
       fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg.arr);
       return;
      }    
 
    }
    if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg.arr ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31090",FMLMSG , c_err_msg.arr );
      fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg.arr);
      return;
    }
  }
 if(c_prcs_typ == 'N')
 {

  EXEC SQL
    SELECT  FLM_UNDRLYNG,
            FLM_EXP_DT,
            FLM_EOS_DT,
            FLM_NUM_OF_DAYS,
            FLM_LODM_TYP
    into    :c_flm_undrlyng,
            :c_flm_exp_dt,
            :c_flm_eos_dt,
            :i_flm_num_of_days,
            :c_flm_lodm_typ
    FROM    FLM_FO_LODM_MSTR
    WHERE   FLM_EXP_DT   = :c_expry_dt
    AND     FLM_LODM_TYP = :c_prcs_typ
    AND     FLM_UNDRLYNG = 'ALL';

  if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31095", SQLMSG, c_err_msg.arr );
    fn_bat_pst_msg ( c_ServiceName, "Unable to get FLM Table details",c_tag);
    return;
  }
  rtrim(c_flm_undrlyng);
  rtrim(c_flm_exp_dt);
  rtrim(c_flm_eos_dt);
  fn_userlog(c_ServiceName,"Stock :%s: Exp_dt :%s: Eos_dt :%s: N :%ld: Lodm_Typ :%c:",c_flm_undrlyng,c_flm_exp_dt,c_flm_eos_dt,i_flm_num_of_days,c_flm_lodm_typ);

  EXEC SQL
    SELECT  count(1)
    into  :i_day_cnt
    FROM  FBC_FO_BRNCH_CAL,
      FLM_FO_LODM_MSTR
    WHERE FBC_TRD_DT <= FLM_EXP_DT
    AND TRUNC(FBC_TRD_DT,'MM') = TRUNC(TO_DATE(FLM_EXP_DT,'DD-Mon-YYYY'),'MM')
    AND FBC_XCHNG_CD = 'NFO'
    AND FLM_LODM_TYP = 'N'
    AND FBC_GRP_ID = '1'
    AND FLM_EXP_DT = to_date(:c_flm_exp_dt,'DD-Mon-YYYY')
    AND FBC_TRD_DT > :c_trade_dt;
  if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31100", SQLMSG, c_err_msg.arr );
    fn_bat_pst_msg ( c_ServiceName, "Unable to get FLM Table details",c_tag);
    return;
  }
  fn_userlog(c_ServiceName,"inside c_prcs_typ :%c: i_day_cnt :%ld:",c_prcs_typ,i_day_cnt);
 }
 /*** Ver 1.1 End ***/
 
 /* Comment Starts in Ver 1.1
 if( c_rqst_typ ==EOD)
 {


   ** Trade Date should be less than max date and greater than or equal to min date **

   EXEC SQL
   SELECT 1 
   INTO :i_dt_chk
   FROM DUAL
   WHERE to_date(:c_trade_dt,'DD-MM-YYYY') < to_date(:c_max_trd_dt,'DD-MM-YYYY')
   AND to_date(:c_trade_dt,'DD-MM-YYYY') >=to_date(:c_min_trd_dt,'DD-MM-YYYY') ;

  if(( SQLCODE != 0) && ( SQLCODE !=NO_DATA_FOUND) )
  {
   fn_errlog( c_ServiceName, "S31105", SQLMSG, c_err_msg.arr );
   return; 
  }
  
  if( SQLCODE == NO_DATA_FOUND )
  {
    i_dt_chk=0;
  }


  if( i_dt_chk == 0)		*** Ver 1.1 ***/
 /*** Ver 1.1 Starts ***/
 if( (c_rqst_typ == EOD || c_rqst_typ == EOD_MARGIN_REP ) && c_prcs_typ == 'N' )  /** EOD_MRGN_REP Added in ver 1.3 **/
 {
  if( i_day_cnt > i_flm_num_of_days || i_day_cnt < 1)
  /*** Ver 1.1 Ends ***/
  {
   strcpy(c_err_msg.arr,"EOD mode should not be run today ");
   fn_bat_pst_msg ( c_ServiceName, "EOD mode should not be run today", c_tag );
   return; 
  }

 }

 /* Comment Starts in Ver 1.1
 if( c_rqst_typ ==INTRA_DAY)
 {

  EXEC SQL
  SELECT 1
  INTO :i_dt_chk
  FROM DUAL
  WHERE to_date(:c_trade_dt,'DD-MM-YYYY') > to_date(:c_min_trd_dt,'DD-MM-YYYY')
  AND to_date(:c_trade_dt,'DD-MM-YYYY') <= to_date(:c_max_trd_dt,'DD-MM-YYYY');

  if(( SQLCODE != 0) && (SQLCODE !=NO_DATA_FOUND) )
  {
   fn_errlog( c_ServiceName, "S31110", SQLMSG, c_err_msg.arr );
   return; 
  }

  if( SQLCODE == NO_DATA_FOUND )
  {
   fn_userlog( c_ServiceName," Inside NO_DATA_FOUND For Intraday Mode with c_trade_dt :%s: and c_min_trd_dt :%s:",c_trade_dt,c_min_trd_dt);
   i_dt_chk=0;
  }

  if( i_dt_chk == 0)	*** Ver 1.1 ***/
  /*** Ver 1.1 Starts ***/


 if( c_rqst_typ == INTRA_DAY && c_prcs_typ == 'N')
 {
  if( i_day_cnt >= i_flm_num_of_days )
  /*** Ver 1.1 Ends ***/
  {
   strcpy(c_err_msg.arr,"Intra Day mode should not be run today ");
   fn_bat_pst_msg ( c_ServiceName, "Intra Day mode should not be run today", c_tag );
   return;
  }
 }

 /***** Updating Delivery Margin Only in EOD mode  **********/
 
 /* if ( c_rqst_typ ==EOD)      *** Ver 1.1 ***/
 if( (c_rqst_typ == EOD || c_rqst_typ == EOD_MARGIN_REP) && c_prcs_typ == 'N')        /*** Ver 1.1 ***/ /** EOD_MRGN_REP Added in ver 1.3 **/ 
 {

 
  /*** Ver 1.1 Start ***/
    EXEC SQL
      SELECT  DECODE(:i_day_cnt,7,NVL(FLM_MARGN_PRCNT_D1,0.0),
              6,NVL(FLM_MARGN_PRCNT_D2,0.0),
              5,NVL(FLM_MARGN_PRCNT_D3,0.0),
              4,NVL(FLM_MARGN_PRCNT_D4,0.0),
              3,NVL(FLM_MARGN_PRCNT_D5,0.0),
              2,NVL(FLM_MARGN_PRCNT_D6,0.0),
              1,NVL(FLM_MARGN_PRCNT_D7,0.0),
              0.0)
      INTO  :d_cur_lodm_prcnt
      FROM  FLM_FO_LODM_MSTR
      WHERE FLM_EXP_DT = :c_flm_exp_dt
      AND FLM_UNDRLYNG = :c_flm_undrlyng;
    if(SQLCODE != 0)
    {
      fn_errlog( c_ServiceName, "S31115", SQLMSG, c_err_msg.arr );
      fn_bat_pst_msg ( c_ServiceName, "Unable to get FLM Table details",c_tag);
      return;
    }
    fn_userlog(c_ServiceName,"inside c_prcs_typ :%c: d_cur_lodm_prcnt :%lf:",c_prcs_typ,d_cur_lodm_prcnt);
  /*** Ver 1.1 End ***/

    if ( c_rqst_typ != EOD_MARGIN_REP ) /** If condition Added in Ver 1.3 **/
    {
      i_trnsctn = fn_begintran( c_ServiceName, c_err_msg.arr);

      if( i_trnsctn == -1 )
      {
        fn_errlog( c_ServiceName, "S31120",FMLMSG , c_err_msg.arr );
          return;
      }
 
  /*** Comment starts in Ver 1.1
  EXEC SQL
  UPDATE FSP_FO_SYSTM_PRMTR
  SET FSP_DLVRY_MRGPRCNT = LEAST( NVL(FSP_DLVRY_MRGPRCNT,0) + NVL(FSP_DLVRY_STRTDY_MRGN_PRCNT,0),100), 
  FSP_DLVRY_MRGPRCNT_UPDDT=:c_trade_dt
  WHERE FSP_DLVRY_MRGPRCNT_UPDDT!=:c_trade_dt
  OR FSP_DLVRY_MRGPRCNT_UPDDT IS NULL;			* Ver 1.1 Comment Ends */
  
      /*** Ver 1.1 Start ***/
      EXEC SQL
      UPDATE FLM_FO_LODM_MSTR
      SET FLM_TODAYS_LODM_PERCNT = :d_cur_lodm_prcnt,
          FLM_DLVRY_MRGPRCNT_UPDDT = :c_trade_dt
      WHERE (FLM_DLVRY_MRGPRCNT_UPDDT != :c_trade_dt
         OR FLM_DLVRY_MRGPRCNT_UPDDT IS NULL)
      AND FLM_UNDRLYNG = :c_flm_undrlyng
      AND FLM_EXP_DT = :c_flm_exp_dt;
      /*** Ver 1.1 End ***/
      if(( SQLCODE != 0) && (SQLCODE!= NO_DATA_FOUND) )
      {
        fn_errlog( c_ServiceName, "S31125", SQLMSG, c_err_msg.arr );
        fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg.arr);
        return;
      }

			
  		if( fn_upd_delivery_flg() != 0 ) /** Ver 1.2 **/
  		{
    		fn_errlog( c_ServiceName, "S31130", SQLMSG, c_err_msg.arr );
    		fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg.arr);
    		return;
  		}

      if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg.arr ) == -1 )
      {
        fn_errlog( c_ServiceName, "S31135",FMLMSG , c_err_msg.arr );
        fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg.arr);
        return; 
      }
    } /** Ver 1.3 **/
  } 
  /*** Ver 1.1 ***
 rtrim(c_expry_dt);
 c_time_flg='B';
 sprintf(c_scrpt_cmd,"nohup %s/sh_scripts/fo_dlvry_mrgn_pnd.sh %c %c %s & ",tuxgetenv("HOME"),c_rqst_typ,c_time_flg,c_expry_dt);
 fn_userlog( c_ServiceName, "portfolio run command :%s:",c_scrpt_cmd);
 system(c_scrpt_cmd);
  **** ver 1.1 ***/

 /******* Fetch Position Data ***********/

   
 i_ch_val= fn_get_dlvry_rec(c_ServiceName,
                             c_expry_dt,
                             c_rqst_typ );

 if ( i_ch_val != 0 )  
 {
  fn_errlog( c_ServiceName, "S31140", LIBMSG, c_err_msg.arr);
  strcpy ( c_msg, "System error. Contact system support" );
  fn_bat_pst_msg ( c_ServiceName, "Failed in Fetching Position Data", c_tag );
  return;
 }
 
 
 li_tot_rcrds = fn_reccnt_rs ( ptr_fml_Ibuf,
                               c_ServiceName,
                               c_err_msg.arr,
                               FFO_EBA_MTCH_ACT_NO);

 if ( li_tot_rcrds == -1 )
 {
  fn_errlog( c_ServiceName, "S31145", LIBMSG, c_err_msg.arr );
  strcpy ( c_msg, "System error. Contact system support" );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  fn_dstry_rs ( ptr_fml_Ibuf );
  return;
 }

 sprintf ( c_msg, "Total records = %ld", li_tot_rcrds );
 fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );


 for ( li_cnt=1; li_cnt<=li_tot_rcrds; li_cnt++ )
 {

  i_ch_val = fn_getnxt_rs ( ptr_fml_Ibuf,
                            c_ServiceName,
                            c_err_msg.arr,
                            11,
                            FFO_EBA_MTCH_ACT_NO, ( char * )c_match_account,NULL,
                            FFO_UNDRLYNG, ( char * )c_underlying,NULL,
                            FFO_EXPRY_DT, ( char * )c_expiry_dt,NULL,
                            FFO_PRDCT_TYP,( char * )&c_prd_typ,NULL,
                            FFO_XCHNG_CD,( char * )c_exchng_cd,NULL,
                            FFO_CTGRY_INDSTK,( char * )&c_ind_stk,NULL,
                            FFO_OPT_TYP,( char * )&c_opt_typ,NULL,
                            FFO_STRK_PRC,( char * )&l_strike_prc,NULL,
                            FFO_EXER_TYP,( char * )&c_exer_typ,NULL,
                            FFO_RQST_TYP, (char*)&c_rqst_typ,NULL,
                            FFO_STATUS_FLG,(char *)&c_span_flg,NULL );

  if ( i_ch_val != 0 )
  {
   fn_errlog( c_ServiceName, "S31150", LIBMSG, c_err_msg.arr);
   strcpy ( c_msg, "System error. Contact system support" );
   fn_bat_pst_msg ( c_ServiceName, "Failed in Processing Data", c_tag );
   fn_dstry_rs ( ptr_fml_Ibuf );
   return;
  }

  fn_userlog(c_ServiceName," Tanmay c_rqst_typ :%c:",c_rqst_typ);  /** Ver 1.3 **/
 
  rtrim(c_match_account);
  rtrim(c_underlying);
  rtrim(c_expiry_dt);
  rtrim(c_exchng_cd);

  sprintf ( c_msg, "Processing record %ld of %ld", li_cnt, li_tot_rcrds );
  fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);


  i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                c_err_msg.arr,
                                "sfr_dlvrmrn_prc",
                                li_cnt,
                                li_tot_rcrds );
  if ( i_ch_val == -1 )
  {
   fn_errlog( c_ServiceName, "S31155", LIBMSG, c_err_msg.arr );
   strcpy ( c_msg, "System error. Contact system support" );
   fn_bat_pst_msg ( c_ServiceName,"Failed in Processing Data" , c_tag );
   fn_dstry_rs ( ptr_fml_Ibuf );
   return;
  }


  i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                c_err_msg.arr,
                               "SFO_DLVMRG_PRC",
                                0,
                                11,
                                FFO_EBA_MTCH_ACT_NO,(char*)c_match_account, 
                                FFO_XCHNG_CD,(char*)c_exchng_cd,
                                FFO_PRDCT_TYP,(char*)&c_prd_typ,
                                FFO_UNDRLYNG, (char*)c_underlying,
                                FFO_EXPRY_DT, (char*)c_expiry_dt,
                                FFO_EXER_TYP, (char*)&c_exer_typ,
                                FFO_OPT_TYP, (char*)&c_opt_typ,
                                FFO_STRK_PRC, (char*)&l_strike_prc,
                                FFO_CTGRY_INDSTK, (char*)&c_ind_stk,
                                FFO_RQST_TYP, (char*)&c_rqst_typ,
                                FFO_STATUS_FLG,(char *)&c_span_flg);
 


  if ( i_ch_val == -1 )
  {
   fn_errlog( c_ServiceName, "S31160", LIBMSG, c_err_msg.arr );
   strcpy ( c_msg, "System error. Contact system support" );
   fn_bat_pst_msg ( c_ServiceName,c_msg , c_tag );
   fn_dstry_rs ( ptr_fml_Ibuf );
   return;
  } 
 }

 /***** Audit table entry after Successful run ******/ 

 if( c_rqst_typ == EOD || c_rqst_typ == EOD_MARGIN_REP )  
 {
  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg.arr);

  if( i_trnsctn == -1 )
  {
   fn_errlog( c_ServiceName, "S31165",FMLMSG , c_err_msg.arr );
   return;
  }

  rtrim(c_ServiceName);
  rtrim(c_xchng_cd);
  rtrim(c_trade_dt);
  fn_userlog(c_ServiceName,"Trade date :%s:",c_trade_dt);
  fn_userlog(c_ServiceName,"c_rqst_typ :%c:",c_rqst_typ);


  EXEC SQL
  INSERT INTO audit_prog_runstts
            (
             APR_PROG_NAME,
             APR_TIME,
             APR_SUCC_FLG,
             APR_TRD_DT,
             APR_XCHNG_CD
            )
  VALUES    (
             :c_ServiceName,
             sysdate,
             Decode(:c_rqst_typ,'R','Z','P'), /** Decode Added in Ver 1.3 **/
             :c_trade_dt,
             :c_xchng_cd
            );

 
  if( SQLCODE != 0 )
  {
   fn_errlog( c_ServiceName, "S31170", SQLMSG, c_err_msg.arr );
   strcpy ( c_msg, "System error. Contact system support" );
   fn_bat_pst_msg ( c_ServiceName,c_msg , c_tag );
   return;
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg.arr ) == -1 )
  {
   fn_errlog( c_ServiceName, "S31175",FMLMSG , c_err_msg.arr );
   fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg.arr);
   return;
  }
 }

 if( c_rqst_typ != EOD_MARGIN_REP )  /** EOD_MRGN_REP Added in ver 1.3 **/ 
 {
   c_time_flg='A';
   MEMSET(c_scrpt_cmd);
   sprintf(c_scrpt_cmd,"nohup %s/sh_scripts/fo_dlvry_mrgn_pnd.sh %c %c %s %c & ",tuxgetenv("HOME"),c_rqst_typ,c_time_flg,c_expry_dt,c_prcs_typ);	/* c_prcs_typ added in Ver 1.1 */
   fn_userlog( c_ServiceName, "portfolio run command :%s:",c_scrpt_cmd);
   system(c_scrpt_cmd);
 } /** ver 1.3 **/

 sprintf ( c_msg, "Batch process %s ended", argv[0] );
 fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

 return;

}

int fn_bat_init(int argc,char *argv[])
{
 fn_var=BAT_DLVRYMRGN_PRCS;
 return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
 char c_msg[256];
 sprintf ( c_msg, "Batch process %s ended", argv[0] );
 fn_bat_pst_msg (  argv[0], c_msg, c_tag );
 return;
}


int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
 return 0;
}

int fn_get_dlvry_rec(char* c_ServiceName,
                     char* c_expry_dt,
                     char c_rqst_typ )
{
 char c_match_account[11];
 char c_underlying[7];
 char c_exchng_cd[4];
 char c_prd_typ='\0';
 char c_opt_typ='\0';
 char c_ind_stk='\0';
 char c_user_id[9]; 
 int  i_trnsctn = 0;
 long l_strike_prc=0;
 double d_spot_prc=0.0;

 EXEC SQL BEGIN DECLARE SECTION;
 sql_cursor  sys_cursor;
 sql_cursor  sys_cursor_snd;
 EXEC SQL END DECLARE SECTION;

 Finit32(ptr_fml_Ibuf,MIN_FML_BUF_LEN);

 fn_userlog(c_ServiceName,"Fetching data for Expiry date :%s:",c_expry_dt);

 i_trnsctn = fn_begintran( c_ServiceName, c_err_msg.arr);

 if( i_trnsctn == -1 )
 {
  fn_errlog( c_ServiceName, "S31180",FMLMSG , c_err_msg.arr );
  return -1;
 }

  EXEC SQL
  INSERT INTO FPM_FOLODM_PRCS_MSTR_HSTRY
  (
          FPM_CLM_MTCH_ACCNT,
          FPM_UNDRLYNG,
          FPM_EXPRY_DT,
          FPM_STRK_PRC,
          FPM_SPT_PRC,
          FPM_EXER_TYP,
          FPM_OPT_TYP,
          FPM_INDSTK,
          FPM_XCHNG_CD,
          FPM_PRDCT_TYP,
          FPM_SPAN_FLG,
          FPM_RQST_TYP,
          FPM_INSRT_DT,
          FPM_PRCS_FLG,
          FPM_PRCS_DT
 )
 (
  SELECT FPM_CLM_MTCH_ACCNT,
          FPM_UNDRLYNG,
          FPM_EXPRY_DT,
          FPM_STRK_PRC,
          FPM_SPT_PRC,
          FPM_EXER_TYP,
          FPM_OPT_TYP,
          FPM_INDSTK,
          FPM_XCHNG_CD,
          FPM_PRDCT_TYP,
          FPM_SPAN_FLG,
          FPM_RQST_TYP,
          FPM_INSRT_DT,
          FPM_PRCS_FLG,
          FPM_PRCS_DT
   FROM FPM_FOLODM_PRCS_MSTR
  );

 if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
 {
  fn_errlog( c_ServiceName, "S31185",SQLMSG, c_err_msg.arr );
  fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg.arr);
  return -1;
 }
 
  EXEC SQL
       DELETE FROM FPM_FOLODM_PRCS_MSTR where FPM_PRCS_FLG!='U';

 if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
 {
  fn_errlog( c_ServiceName, "S31190",SQLMSG, c_err_msg.arr );
  fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg.arr);
  return -1;
 }

 if( c_rqst_typ==INTRA_DAY)
 {
  EXEC SQL 
  INSERT INTO FPM_FOLODM_PRCS_MSTR
  (
			    FPM_CLM_MTCH_ACCNT,
					FPM_UNDRLYNG,
					FPM_EXPRY_DT,
					FPM_STRK_PRC,
					FPM_SPT_PRC,
					FPM_EXER_TYP,
					FPM_OPT_TYP,
					FPM_INDSTK,
					FPM_XCHNG_CD,
					FPM_PRDCT_TYP,
					FPM_SPAN_FLG,
					FPM_RQST_TYP,
					FPM_INSRT_DT,
					FPM_PRCS_FLG 
 )
 (
  SELECT FOP_CLM_MTCH_ACCNT,
         FOP_UNDRLYNG,
         FOP_EXPRY_DT,
         FOP_STRK_PRC,
         NVL(LTQ_RT,0)*100,
         FOP_EXER_TYP,
         FOP_OPT_TYP,
         FOP_INDSTK,
         FOP_XCHNG_CD,
         FOP_PRDCT_TYP,
        'N',
         'I',
         sysdate,
         'N'           
  FROM FOP_FO_OPTIONS_PSTN,LTQ_TRD_QT,FTQ_FO_TRD_QT,FCT_FOLODM_CNTRCT_TMP         /*** Ver 1.1 FCT_ Table Added ***/
  WHERE FOP_UNDRLYNG = LTQ_STCK_CD
  AND FOP_UNDRLYNG=FTQ_UNDRLYNG
  AND FOP_EXPRY_DT=FTQ_EXPRY_DT
  AND FOP_PRDCT_TYP=FTQ_PRDCT_TYP
  AND FCT_UNDRLYNG=FTQ_UNDRLYNG             /*** Ver 1.1 ***/
  AND FCT_EXP_DT=FTQ_EXPRY_DT               /*** Ver 1.1 ***/
  AND FCT_PRDCT_TYP=FTQ_PRDCT_TYP           /*** Ver 1.1 ***/
  AND FOP_OPT_TYP=FTQ_OPT_TYP
  AND FOP_STRK_PRC=FTQ_STRK_PRC
  AND FTQ_SETLMNT_FLG='P'
  AND FOP_PRDCT_TYP='O'
  AND FOP_OPNPSTN_FLW='B'
  AND FOP_OPT_TYP='C'
  AND NVL(FOP_MTM_FLG,'O') !='D'
  AND FOP_XCHNG_CD= decode(LTQ_XCHNG_CD,'NSE','NFO','BSE','BFO')
  AND FOP_XCHNG_CD='NFO'
  AND (FOP_STRK_PRC  <= (NVL(LTQ_RT,0)*100))
  /* AND FOP_EXPRY_DT=:c_expry_dt         *** Ver 1.1 ***/
  UNION ALL
  SELECT FOP_CLM_MTCH_ACCNT,
         FOP_UNDRLYNG,
         FOP_EXPRY_DT,
         FOP_STRK_PRC,
         LTQ_RT*100,
         FOP_EXER_TYP,
         FOP_OPT_TYP,
         FOP_INDSTK,
         FOP_XCHNG_CD,
         FOP_PRDCT_TYP,
        'N',
         'I',
         sysdate,
         'N'
  FROM  FOP_FO_OPTIONS_PSTN,LTQ_TRD_QT,FTQ_FO_TRD_QT,FCT_FOLODM_CNTRCT_TMP         /*** Ver 1.1 FCT_ Table Added ***/
  WHERE FOP_UNDRLYNG = LTQ_STCK_CD
  AND FOP_UNDRLYNG=FTQ_UNDRLYNG
  AND FOP_EXPRY_DT=FTQ_EXPRY_DT
  AND FOP_PRDCT_TYP=FTQ_PRDCT_TYP
  AND FCT_UNDRLYNG=FTQ_UNDRLYNG             /*** Ver 1.1 ***/
  AND FCT_EXP_DT=FTQ_EXPRY_DT               /*** Ver 1.1 ***/
  AND FCT_PRDCT_TYP=FTQ_PRDCT_TYP           /*** Ver 1.1 ***/
  AND FOP_OPT_TYP=FTQ_OPT_TYP
  AND FOP_STRK_PRC=FTQ_STRK_PRC
  AND FTQ_SETLMNT_FLG='P'
  AND FOP_PRDCT_TYP='O'
  AND FOP_OPNPSTN_FLW='B'
  AND FOP_OPT_TYP='P'
  AND NVL(FOP_MTM_FLG,'O') !='D'
  AND FOP_XCHNG_CD= decode(LTQ_XCHNG_CD,'NSE','NFO','BSE','BFO')
  AND FOP_XCHNG_CD='NFO'
  AND (FOP_STRK_PRC  >= (NVL(LTQ_RT,0)*100))
  /* AND FOP_EXPRY_DT=:c_expry_dt     *** Ver 1.1 ***/
  UNION ALL
  SELECT FCP_CLM_MTCH_ACCNT,
         FCP_UNDRLYNG,
         FCP_EXPRY_DT,
         FCP_STRK_PRC,
         NVL(LTQ_RT,0)*100,
         FCP_EXER_TYP,
         FCP_OPT_TYP,
         FCP_INDSTK,
         FCP_XCHNG_CD,
         FCP_PRDCT_TYP,
         'Y',
         'I',
         sysdate,
         'N'
  FROM FCP_FO_SPN_CNTRCT_PSTN,LTQ_TRD_QT,FTQ_FO_TRD_QT,FCT_FOLODM_CNTRCT_TMP         /*** Ver 1.1 FCT_ Table Added ***/
  WHERE FCP_UNDRLYNG=LTQ_STCK_CD
  AND FCP_UNDRLYNG=FTQ_UNDRLYNG
  AND FCP_EXPRY_DT=FTQ_EXPRY_DT
  AND FCP_PRDCT_TYP=FTQ_PRDCT_TYP
  AND FCT_UNDRLYNG=FTQ_UNDRLYNG             /*** Ver 1.1 ***/
  AND FCT_EXP_DT=FTQ_EXPRY_DT               /*** Ver 1.1 ***/
  AND FCT_PRDCT_TYP=FTQ_PRDCT_TYP           /*** Ver 1.1 ***/
  AND FCP_OPT_TYP=FTQ_OPT_TYP
  AND FCP_STRK_PRC=FTQ_STRK_PRC
  AND FTQ_SETLMNT_FLG='P'
  AND FCP_PRDCT_TYP='O'
  AND FCP_OPNPSTN_FLW='B'
  AND FCP_OPT_TYP='C'
  AND NVL(FCP_MTM_FLG,'O')!='D'
  AND FCP_XCHNG_CD=decode(LTQ_XCHNG_CD,'NSE','NFO','BSE','BFO')
  AND FCP_XCHNG_CD='NFO'
  AND (FCP_STRK_PRC<= (NVL(LTQ_RT,0)*100))
  /* AND FCP_EXPRY_DT =:c_expry_dt   *** Ver 1.1 ***/
  UNION ALL
  SELECT FCP_CLM_MTCH_ACCNT,
         FCP_UNDRLYNG,
         FCP_EXPRY_DT,
         FCP_STRK_PRC,
         NVL(LTQ_RT,0)*100,
         FCP_EXER_TYP,
         FCP_OPT_TYP,
         FCP_INDSTK,
         FCP_XCHNG_CD,
         FCP_PRDCT_TYP,
        'Y',
         'I',
         sysdate,
         'N'
  FROM FCP_FO_SPN_CNTRCT_PSTN,LTQ_TRD_QT,FTQ_FO_TRD_QT,FCT_FOLODM_CNTRCT_TMP         /*** Ver 1.1 FCT_ Table Added ***/
  WHERE FCP_UNDRLYNG=LTQ_STCK_CD
  AND FCP_UNDRLYNG=FTQ_UNDRLYNG
  AND FCP_EXPRY_DT=FTQ_EXPRY_DT
  AND FCP_PRDCT_TYP=FTQ_PRDCT_TYP
  AND FCT_UNDRLYNG=FTQ_UNDRLYNG             /*** Ver 1.1 ***/
  AND FCT_EXP_DT=FTQ_EXPRY_DT               /*** Ver 1.1 ***/
  AND FCT_PRDCT_TYP=FTQ_PRDCT_TYP           /*** Ver 1.1 ***/
  AND FCP_OPT_TYP=FTQ_OPT_TYP
  AND FCP_STRK_PRC=FTQ_STRK_PRC
  AND FTQ_SETLMNT_FLG='P'
  AND FCP_PRDCT_TYP='O'
  AND FCP_OPNPSTN_FLW='B'
  AND FCP_OPT_TYP='P'
  AND NVL(FCP_MTM_FLG,'O')!='D'
  AND FCP_XCHNG_CD=decode(LTQ_XCHNG_CD,'NSE','NFO','BSE','BFO')
  AND FCP_XCHNG_CD='NFO'
  AND (FCP_STRK_PRC>= (NVL(LTQ_RT,0)*100))
  /* AND FCP_EXPRY_DT =:c_expry_dt *** Ver 1.1 ***/
 );
 }
 else 
 {
  /******** For EOD Mode **********/

  EXEC SQL
  INSERT INTO FPM_FOLODM_PRCS_MSTR
  (
          FPM_CLM_MTCH_ACCNT,
          FPM_UNDRLYNG,
          FPM_EXPRY_DT,
          FPM_STRK_PRC,
          FPM_SPT_PRC,
          FPM_EXER_TYP,
          FPM_OPT_TYP,
          FPM_INDSTK,
          FPM_XCHNG_CD,
          FPM_PRDCT_TYP,
          FPM_SPAN_FLG,
          FPM_RQST_TYP,
          FPM_INSRT_DT,
          FPM_PRCS_FLG
 )
 (
  SELECT FOP_CLM_MTCH_ACCNT,
         FOP_UNDRLYNG,
         FOP_EXPRY_DT,
         FOP_STRK_PRC,
         NVL(LTQ_CLS_PRC,0)*100,
         FOP_EXER_TYP,
         FOP_OPT_TYP,
         FOP_INDSTK,
         FOP_XCHNG_CD,
         FOP_PRDCT_TYP,
         'N',
         Decode(:c_rqst_typ,'R','R','E'),  /** Decode added in Ver 1.3 **/ 
         sysdate,
         'N'
  FROM FOP_FO_OPTIONS_PSTN,LTQ_TRD_QT,FTQ_FO_TRD_QT,FCT_FOLODM_CNTRCT_TMP         /*** Ver 1.1 FCT_Table Added ***/
  WHERE FOP_UNDRLYNG = LTQ_STCK_CD
  AND FOP_UNDRLYNG=FTQ_UNDRLYNG
  AND FOP_EXPRY_DT=FTQ_EXPRY_DT
  AND FOP_PRDCT_TYP=FTQ_PRDCT_TYP
  AND FCT_UNDRLYNG=FTQ_UNDRLYNG             /*** Ver 1.1 ***/
  AND FCT_EXP_DT=FTQ_EXPRY_DT               /*** Ver 1.1 ***/
  AND FCT_PRDCT_TYP=FTQ_PRDCT_TYP           /*** Ver 1.1 ***/
  AND FOP_OPT_TYP=FTQ_OPT_TYP
  AND FOP_STRK_PRC=FTQ_STRK_PRC
  AND FTQ_SETLMNT_FLG='P'
  AND FOP_PRDCT_TYP='O'
  AND FOP_OPT_TYP='C'
  AND FOP_XCHNG_CD= decode(LTQ_XCHNG_CD,'NSE','NFO','BSE','BFO')
  AND FOP_XCHNG_CD='NFO'
  /* AND FOP_EXPRY_DT=:c_expry_dt   *** Ver 1.1 ***/
  AND (( FOP_STRK_PRC  <= (NVL(LTQ_CLS_PRC,0)*100) AND FOP_OPNPSTN_FLW='B')
  OR  (NVL(FOP_UDLVRY_MRGN,0) !=0))
  UNION ALL
  SELECT FOP_CLM_MTCH_ACCNT,
         FOP_UNDRLYNG,
         FOP_EXPRY_DT,
         FOP_STRK_PRC,
         NVL(LTQ_CLS_PRC,0)*100,
         FOP_EXER_TYP,
         FOP_OPT_TYP,
         FOP_INDSTK,
         FOP_XCHNG_CD,
         FOP_PRDCT_TYP,
        'N',
         Decode(:c_rqst_typ,'R','R','E'),  /** Decode added in Ver 1.3 **/
         sysdate,
         'N'
  FROM  FOP_FO_OPTIONS_PSTN,LTQ_TRD_QT,FTQ_FO_TRD_QT,FCT_FOLODM_CNTRCT_TMP         /*** Ver 1.1 FCT_ Table Added ***/
  WHERE FOP_UNDRLYNG = LTQ_STCK_CD
  AND FOP_UNDRLYNG=FTQ_UNDRLYNG
  AND FOP_EXPRY_DT=FTQ_EXPRY_DT
  AND FOP_PRDCT_TYP=FTQ_PRDCT_TYP
  AND FCT_UNDRLYNG=FTQ_UNDRLYNG             /*** Ver 1.1 ***/
  AND FCT_EXP_DT=FTQ_EXPRY_DT               /*** Ver 1.1 ***/
  AND FCT_PRDCT_TYP=FTQ_PRDCT_TYP           /*** Ver 1.1 ***/
  AND FOP_OPT_TYP=FTQ_OPT_TYP
  AND FOP_STRK_PRC=FTQ_STRK_PRC
  AND FTQ_SETLMNT_FLG='P'
  AND FOP_PRDCT_TYP='O'
  AND FOP_OPT_TYP='P'
  AND FOP_XCHNG_CD= decode(LTQ_XCHNG_CD,'NSE','NFO','BSE','BFO')
  AND FOP_XCHNG_CD='NFO'
  /* AND FOP_EXPRY_DT=:c_expry_dt *** Ver 1.1 ***/
  AND ((FOP_STRK_PRC  >= (NVL(LTQ_CLS_PRC,0)*100) AND FOP_OPNPSTN_FLW='B')
  OR (NVL(FOP_UDLVRY_MRGN,0) !=0))
  UNION ALL
  SELECT FCP_CLM_MTCH_ACCNT,
         FCP_UNDRLYNG,
         FCP_EXPRY_DT,
         FCP_STRK_PRC,
         NVL(LTQ_CLS_PRC,0)*100,
         FCP_EXER_TYP,
         FCP_OPT_TYP,
         FCP_INDSTK,
         FCP_XCHNG_CD,
         FCP_PRDCT_TYP,
        'Y',
         Decode(:c_rqst_typ,'R','R','E'),  /** Decode added in Ver 1.3 **/
         sysdate,
         'N'
  FROM FCP_FO_SPN_CNTRCT_PSTN,LTQ_TRD_QT,FTQ_FO_TRD_QT,FCT_FOLODM_CNTRCT_TMP         /*** Ver 1.1 FCT_ Table Added ***/
  WHERE FCP_UNDRLYNG=LTQ_STCK_CD
  AND FCP_UNDRLYNG=FTQ_UNDRLYNG
  AND FCP_EXPRY_DT=FTQ_EXPRY_DT
  AND FCP_PRDCT_TYP=FTQ_PRDCT_TYP
  AND FCT_UNDRLYNG=FTQ_UNDRLYNG             /*** Ver 1.1 ***/
  AND FCT_EXP_DT=FTQ_EXPRY_DT               /*** Ver 1.1 ***/
  AND FCT_PRDCT_TYP=FTQ_PRDCT_TYP           /*** Ver 1.1 ***/
  AND FCP_OPT_TYP=FTQ_OPT_TYP
  AND FCP_STRK_PRC=FTQ_STRK_PRC
  AND FTQ_SETLMNT_FLG='P'
  AND FCP_PRDCT_TYP='O'
  AND FCP_OPT_TYP='C'
  AND FCP_XCHNG_CD=decode(LTQ_XCHNG_CD,'NSE','NFO','BSE','BFO')
  AND FCP_XCHNG_CD='NFO'
  /* AND FCP_EXPRY_DT =:c_expry_dt      *** Ver 1.1 ***/
  AND ((FCP_STRK_PRC<= (NVL(LTQ_CLS_PRC,0)*100)  AND FCP_OPNPSTN_FLW='B')
  OR  (NVL(FCP_UDLVRY_MRGN,0) !=0))
  UNION ALL
  SELECT FCP_CLM_MTCH_ACCNT,
         FCP_UNDRLYNG,
         FCP_EXPRY_DT,
         FCP_STRK_PRC,
         NVL(LTQ_CLS_PRC,0)*100,
         FCP_EXER_TYP,
         FCP_OPT_TYP,
         FCP_INDSTK,
         FCP_XCHNG_CD,
         FCP_PRDCT_TYP,
        'Y',
         Decode(:c_rqst_typ,'R','R','E'),  /** Decode added in Ver 1.3 **/
         sysdate,
         'N'
  FROM FCP_FO_SPN_CNTRCT_PSTN,LTQ_TRD_QT,FTQ_FO_TRD_QT,FCT_FOLODM_CNTRCT_TMP         /*** Ver 1.1 FCT_ Table Added ***/
  WHERE FCP_UNDRLYNG=LTQ_STCK_CD
  AND FCP_UNDRLYNG=FTQ_UNDRLYNG
  AND FCP_EXPRY_DT=FTQ_EXPRY_DT
  AND FCP_PRDCT_TYP=FTQ_PRDCT_TYP
  AND FCT_UNDRLYNG=FTQ_UNDRLYNG             /*** Ver 1.1 ***/
  AND FCT_EXP_DT=FTQ_EXPRY_DT               /*** Ver 1.1 ***/
  AND FCT_PRDCT_TYP=FTQ_PRDCT_TYP           /*** Ver 1.1 ***/
  AND FCP_OPT_TYP=FTQ_OPT_TYP
  AND FCP_STRK_PRC=FTQ_STRK_PRC
  AND FTQ_SETLMNT_FLG='P'
  AND FCP_PRDCT_TYP='O'
  AND FCP_OPT_TYP='P'
  AND FCP_XCHNG_CD=decode(LTQ_XCHNG_CD,'NSE','NFO','BSE','BFO')
  AND FCP_XCHNG_CD='NFO'
  /* AND FCP_EXPRY_DT =:c_expry_dt      *** Ver 1.1 ***/
  AND(
  (FCP_STRK_PRC>= (NVL(LTQ_CLS_PRC,0)*100)  AND FCP_OPNPSTN_FLW='B')
  OR (NVL(FCP_UDLVRY_MRGN,0) !=0))
  );
 }

 if( SQLCODE != 0 )
 {
  fn_errlog( c_ServiceName, "S31195",SQLMSG, c_err_msg.arr );
  fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg.arr);
  return -1;
 }

 if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg.arr ) == -1 )
 {
  fn_errlog( c_ServiceName, "S31200",FMLMSG , c_err_msg.arr );
  fn_aborttran( c_ServiceName,i_trnsctn,c_err_msg.arr);
  return -1;
 }
 ptr_fml_Ibuf = NULL; 

  EXEC SQL ALLOCATE :sys_cursor_snd;
  EXEC SQL EXECUTE
  BEGIN
  OPEN :sys_cursor_snd FOR
  select distinct FPM_CLM_MTCH_ACCNT
   from  FPM_FOLODM_PRCS_MSTR;

	END;
  END-EXEC;
          
 if( SQLCODE != 0 )
 {
  fn_errlog( c_ServiceName, "S31205",SQLMSG, c_err_msg.arr );
  EXEC SQL CLOSE :sys_cursor_snd;
  EXEC SQL FREE  :sys_cursor_snd;
  return -1;
 }
 while(1)
 {
  MEMSET(c_match_account);

  EXEC SQL
  FETCH :sys_cursor_snd 
  INTO  :c_match_account;

  if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
   fn_errlog( c_ServiceName, "S31210", SQLMSG, c_err_msg.arr );
   EXEC SQL CLOSE :sys_cursor_snd ;
   return -1; 
  }

  if( SQLCODE == NO_DATA_FOUND )
  {
   fn_userlog(c_ServiceName,"All records fetched or Inside No data found for Match Account");
   EXEC SQL CLOSE :sys_cursor_snd;
   break;
  }

   rtrim(c_match_account);
   fn_userlog(c_ServiceName,"Match Account :%s:",c_match_account);

   EXEC SQL
   SELECT      FPM_XCHNG_CD,
               FPM_PRDCT_TYP,
               FPM_INDSTK,
               FPM_UNDRLYNG,
               FPM_EXPRY_DT,
               FPM_EXER_TYP,
               FPM_OPT_TYP,
               FPM_STRK_PRC,
               FPM_SPAN_FLG,
               FPM_RQST_TYP
         INTO  :c_exchng_cd,
               :c_prd_typ,
               :c_ind_stk,
               :c_underlying,
               :c_expiry_dt,
               :c_exer_typ,
               :c_opt_typ,
               :l_strike_prc,
               :c_span_flg,
               :c_rqst_typ
        FROM
        (
       SELECT  FPM_XCHNG_CD, 
               FPM_PRDCT_TYP,
               FPM_INDSTK,
               FPM_UNDRLYNG,
               FPM_EXPRY_DT,
               FPM_EXER_TYP,
               FPM_OPT_TYP,
               FPM_STRK_PRC,
               FPM_SPAN_FLG,
               FPM_RQST_TYP
           FROM
                 FPM_FOLODM_PRCS_MSTR
           WHERE FPM_CLM_MTCH_ACCNT=:c_match_account
             AND FPM_PRCS_FLG='N'
            ORDER BY FPM_UNDRLYNG asc
        )
        WHERE ROWNUM < 2;

  if(( SQLCODE != 0) && (SQLCODE!= NO_DATA_FOUND) )
  {
   fn_errlog( c_ServiceName, "S31215", SQLMSG, c_err_msg.arr );
   EXEC SQL CLOSE :sys_cursor_snd ;
   return -1; 
  }

  rtrim(c_match_account);
  rtrim(c_underlying);
  rtrim(c_expiry_dt);
  rtrim(c_exchng_cd);

  fn_userlog(c_ServiceName,"Match Account :%s:",c_match_account);
  fn_userlog(c_ServiceName,"Underlying :%s:",c_underlying);
  fn_userlog(c_ServiceName,"Expiry Date :%s:",c_expiry_dt);
  fn_userlog(c_ServiceName,"Exchange code :%s:",c_exchng_cd);
  fn_userlog(c_ServiceName,"Strike Price :%ld:",l_strike_prc);
  fn_userlog(c_ServiceName,"Spot price   :%lf:",d_spot_prc);
  fn_userlog(c_ServiceName,"Exercise Type :%c:",c_exer_typ);
  fn_userlog(c_ServiceName,"Option Type :%c:",c_opt_typ);
  fn_userlog(c_ServiceName,"Index stock :%c:",c_ind_stk);
  fn_userlog(c_ServiceName,"Product Type :%c:",c_prd_typ);  
  fn_userlog(c_ServiceName,"Span Flag   :%c:",c_span_flg);


  i_returncode = fn_pack_vartofml (c_ServiceName,
                                   c_err_msg.arr,
                                   &ptr_fml_Ibuf,
                                   11,
                                   FFO_EBA_MTCH_ACT_NO, ( char * )c_match_account,
                                   FFO_UNDRLYNG, ( char * )c_underlying,
                                   FFO_EXPRY_DT, ( char * )c_expiry_dt,
                                   FFO_PRDCT_TYP,( char * )&c_prd_typ,
                                   FFO_XCHNG_CD,( char * )c_exchng_cd,
                                   FFO_CTGRY_INDSTK,( char * )&c_ind_stk,
                                   FFO_OPT_TYP,( char * )&c_opt_typ,
                                   FFO_STRK_PRC,( char * )&l_strike_prc,
                                   FFO_EXER_TYP,( char * )&c_exer_typ,
                                   FFO_RQST_TYP, (char *)&c_rqst_typ,
                                   FFO_STATUS_FLG,(char *)&c_span_flg
                                   );

  
 if( i_returncode == -1 )
 {
  fn_errlog( c_ServiceName, "S31220", SQLMSG, c_err_msg.arr );
   EXEC SQL CLOSE :sys_cursor_snd ;
   return -1;
 }

 }
 return 0;
 }

/** Ver 1.2 Starts here ***/
int fn_upd_delivery_flg()
{
  int i_trnsctn=0;
  varchar c_err_msg[250];
  char c_ServiceName[33];

    strcpy(c_ServiceName,"bat_dlvrymrgn_prcs");
    EXEC SQL
    UPDATE    FLM_FO_LODM_MSTR
    SET       FLM_DLVRYENBL_FLG='Y'
    WHERE     FLM_EOS_DT IN
    (
    SELECT    FBC_TRD_DT
    FROM
    (
    SELECT    FBC_TRD_DT,rownum cnt from FBC_FO_BRNCH_CAL, exg_xchng_mstr
    where     FBC_XCHNG_CD=EXG_XCHNG_CD
    AND       FBC_XCHNG_CD='NFO'
    AND       FBC_GRP_ID='1'
    AND       FBC_TRD_DT >= exg_nxt_trd_dt
    ORDER     by FBC_TRD_DT asc
    ) , FLM_FO_LODM_MSTR
    WHERE     cnt= 1+ FLM_DLVRYMODE_NDAYS
    AND       FBC_TRD_DT=FLM_EOS_DT
    );

  if(( SQLCODE != 0) && (SQLCODE!= NO_DATA_FOUND) )
  {
   fn_errlog( c_ServiceName, "S31225", SQLMSG, c_err_msg.arr );
   return -1;
  }

 return 0;
 }
/** Ver 1.2 Ends Here **/

