/********************************************************************************
*  Program           : bat_conf_inc.pc                                         *
*                                                                              *
*  Description       :                                                         *
*                                                                              *
*                                                                              *
*  Input Parameters  :      1. M       Month  - Only M in frontend             *
*                           2. 1/2/3/4 Quarter Number of year                  *
*                           3. 2009    Year                                    *
*                           4. [1..]   Incentive Type                          *
*                                                                              *
*  Change Log        : 1.0   11-Dec-2009  Venture M|Infotech                   *
*  Change Log        : 1.1   28-Jul-2010  Venture M|Infotech                   *
*	 Change	Log				 : 1.2	 05-Sep-2012	Vishnu  N|Infotech									 *
*	 Change	Log				 : 1.3	 09-Sep-2014	Sachin  B|Infotech									 *
*  Change Log        : 1.4   24-Jul-2017  Afzal    |Infotech 
*  Change Log        : 1.5   22-Apr-2019  Vinod    |Infotech 
*  Change Log        : TOL   05-Sep-2023  Agam     |Infotech 
********************************************************************************
*  1.0    -  New Release                                                       *
*  1.1    -  Fix for negative MDC inserts                                      *
*	 1.2		-	 Additional insertion in  FIS_FUT_INC_SMRY table									 *
*	 1.3		-	 View to FML Changes                             								   *
*  1.4    -  GST Inc Changes                                                   *  
*  1.5    -  CR-ISEC03-118638_Migration_to_Deposit_Model (Vinod)               *  
*  TOL    -  Tux on Linux                                                      *
*******************************************************************************/

/* Header Files */

#include<sqlca.h>
#include<atmi.h>
#include <string.h>     
#include <stdlib.h>     
#include<fo.h>
#include<fml32.h>
#include<fn_log.h>
#include<fn_tuxlib.h>
#include<fn_battmpt.h>
#include<fml_def.h>
#include<fo_fml_def.h>
#include<fn_ddr.h>
/** #include<fo_view_def.h> ** Ver 1.3 **/
#include <fn_read_debug_lvl.h> 
#include <fn_prd_insert.h> /* Ver 1.4 */

#define SQL_ROW_COUNT sqlca.sqlerrd[2]

int fn_upd_segment_lmt(char *c_ServiceName,
                      char *c_match_acc,
                      double d_tot_amt,
                      char *c_acc_ent,
                      char  c_dr_cr_flg,
											char	*c_exg_trd_dt,
											long	*l_sttlmnt_no,
                      char *c_err_msg);	/* Ver 1.5 */


EXEC SQL BEGIN DECLARE SECTION;

char c_g_qtr_mth_ind='0';
int  i_g_qtr_mth_no=0;
int  i_g_year=0;
int  i_g_inc_type=0;
char c_g_inc_type[4]={0};

char c_g_start_date[23]={0};
char c_g_end_date[23]={0}; 
char c_prcs_dt[25]={0}; 		/** Ver 1.4 **/

char c_ServiceName[33]={0};
char c_err_msg[500]={0};

double d_g_normal_percentage=0.00;
double d_g_svc_tax_percentage=0.00;

EXEC SQL  END  DECLARE SECTION;

/*----------------------------------------------------------------------------*/

int fn_calc_dates(char , int , int  );

int fn_validate_rerun(void);

void fn_print_date_time(void);

/******************************************************************************/

void BAT_CONF_INC ( int argc, char *argv[])
{
  EXEC SQL BEGIN DECLARE SECTION;

  char c_msg[256]={0};
  char c_svc_name[18]={0};
  char c_trd_date[21]={0};
  /*char c_err_msg[256]={0};  commented in Ver TOL */
  char c_xchng_cd[4]={0};
  char c_mdc_rowid[25]={0};		/*Ver 1.5*/

	int	i_ret_cd;	/*Ver 1.5*/

  EXEC SQL  END  DECLARE SECTION;

	EXEC SQL INCLUDE "table/mdc_misc_dr_cr.h";		/*Ver 1.5*/

  strcpy(c_ServiceName,argv[0]);
  sprintf(c_tag,"%s_na",argv[0]);

  INITBATDBGLVL(argv[0]);

  fn_userlog (c_ServiceName,"-------------------------START--------------------");
  sprintf(c_msg,"Batch process %s is started",argv[0]);
  fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);     /* Renamed fn_bat_pst_msg to fn_bat_pst_msg_fno in Ver TOL */
  fn_userlog (c_ServiceName,"Batch process %s is started",argv[0]);

  /*need to validate the params passed*/

  if ( argc != 8 )
  {
    fn_userlog (c_ServiceName,"Invalid Arguments passed %d",argc);
    fn_userlog (c_ServiceName,"Usage:%s  <M> <Month (1..12 ) <Year> <Inc Type> ",argv[0]);
    return;
  }
  else
  {
    c_g_qtr_mth_ind=argv[4][0];
    i_g_qtr_mth_no=atoi(argv[5]);
    i_g_year=atoi(argv[6]);
    i_g_inc_type=atoi(argv[7]);
    
    fn_userlog (c_ServiceName,"Arguments passed %c %d %d %d",
                c_g_qtr_mth_ind,
                i_g_qtr_mth_no,
                i_g_year,
                i_g_inc_type);
  }

  if ( fn_calc_dates( c_g_qtr_mth_ind,  i_g_qtr_mth_no ,  i_g_year) )
  {
    fn_userlog (c_ServiceName,"Failed to calculate the dates ");
    sprintf(c_msg,"Failed to calculate the dates");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
    return;
  }

  if ( fn_validate_rerun() )
  {
    fn_userlog (c_ServiceName,"Failed in rerun validation ");
    sprintf(c_msg,"Failed in rerun validation");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
    return;
  }

	MEMSET(c_prcs_dt);		/** Ver 1.4 **/

  EXEC SQL
    SELECT ITM_PRDCT_TYP, TO_CHAR(SYSDATE, 'DD-Mon-YY HH24.MI.SS')	/* SYSDATE added for Ver 1.4 */
    into :c_g_inc_type,:c_prcs_dt
    FROM ITM_INC_TYPE_MSTR
    WHERE ITM_INCENT_NO = :i_g_inc_type;
  
  if (SQLCODE != 0)
  {
    errlog(c_ServiceName, "S31005", SQLMSG, DEF_USR, DEF_SSSN, c_err_msg);
    return;
  }

  fn_userlog (c_ServiceName,"Incentive Type %s ",c_g_inc_type);
    
  if ( tpbegin( 0, 0 ) == -1 )
  {
    fn_errlog(c_ServiceName, "S31010", TPMSG, c_err_msg );
    tpabort(0);
    return ;
  }

  EXEC SQL
  INSERT INTO FIS_FUT_INC_SMRY 
  (
    SELECT FIS_MATCH_ACNT       ,
           FIS_FROM_DT          ,
           FIS_TO_DT            ,
           FIS_TURNOVER         ,
           FIS_FUT_BRKRG        ,
           FIS_NRML_BRKRG       ,
           FIS_UPFRONT_BRKRG    ,
           FIS_OFFLINE_BRKRG    ,
           FIS_INCNT_AMT        ,
           FIS_NET_INCNT_AMT    ,
           FIS_INCNT_REFUND_AMT ,
           FIS_INCNT_DATE       ,
           FIS_PRCNTG           ,
           FIS_SQ_TURNOVER      ,
           FIS_SQ_FUT_BRKRG     ,
           FIS_DISP_FLAG        ,
           'Y'       						,
					 FIS_SCHM_ELG_FLG			,											/** Added in ver 1.2 **/
					 FIS_EXEP_ELG_FLG			,											/** Added in ver 1.2 **/
					 FIS_FINAL_ELG_FLG    ,											/** Added in ver 1.2 **/
					 FIS_FINAL_INC_AMT    , 											/** Added in ver 1.2 **/
           FIS_CGST_AMT         ,                      /** Added in ver 1.4 **/
           FIS_SGST_AMT         ,                      /** Added in ver 1.4 **/
           FIS_UGST_AMT         ,                      /** Added in ver 1.4 **/
           FIS_IGST_AMT         ,                       /** Added in ver 1.4 **/
					 FIS_TOT_GST_AMT      ,                      /** Added in ver 1.4 **/
					 FIS_ISEC_STATE_CD    ,										   /** Added in ver 1.4 **/
					 FIS_CUST_STATE_CD     										   /** Added in ver 1.4 **/
    FROM
      TMP_FUT_INC_SMRY
    WHERE   
      FIS_DISP_FLAG   = 'Y'
    AND FIS_PRCS_FLAG = 'N'
    AND FIS_FROM_DT   = :c_g_start_date
    AND FIS_TO_DT     = :c_g_end_date  
    );
    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31015", SQLMSG, c_err_msg  );
      sprintf(c_msg,"Failed in FIS insert");
      fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag); 
      tpabort(0);
      return;
    }
    
    fn_userlog (c_ServiceName," Row count %d ", SQL_ROW_COUNT );
    
    EXEC SQL
    INSERT INTO MDC_MISC_DR_CR
    (
      MDC_CLM_MTCH_ACCNT,
      MDC_PRDCT_TYP,
      MDC_CRDT_NMBR,
      MDC_AMT1,
      MDC_AMT2,
      MDC_TOT_AMT,
      MDC_FROM_DT,
      MDC_TO_DT,
      MDC_DR_CR_FLG,
      MDC_PRCNTG,
      MDC_TURNOVER,
      MDC_MTCH_STTS,
      MDC_BNK_STTS,
      MDC_BNK_DT,
      MDC_BNK_TRC_NMBR,
      MDC_MTCH_UPD_AMT,
      MDC_BNK_UPD_AMT,
      MDC_CGST_AMT,    /** Added in ver 1.4 **/
      MDC_SGST_AMT,    /** Added in ver 1.4 **/
      MDC_UGST_AMT,    /** Added in ver 1.4 **/
      MDC_IGST_AMT,      /** Added in ver 1.4 **/
      MDC_GST_STATE_CD, /** Added in ver 1.4 **/
      MDC_GST_ISEC_STATE_CD, /** Added in ver 1.4 **/
			MDC_LMT_UPD_STTS				/** Added in ver 1.5 **/
    )
    (
    SELECT      FIS_MATCH_ACNT,
                :c_g_inc_type,
                :i_g_inc_type||LPAD(SEQ_FUT_BRKR_REF.NEXTVAL,12,'0'),
                FIS_NET_INCNT_AMT,
								0,				/*** Ver 1.4 **/
                /** (FIS_INCNT_REFUND_AMT - FIS_NET_INCNT_AMT ), ** Ver 1.4 **/
                FIS_INCNT_REFUND_AMT,
                FIS_FROM_DT,
                FIS_TO_DT,
                'C',
                FIS_PRCNTG,
                FIS_TURNOVER/100,         
                'N',
                'N',
                NULL,
                NULL,
                0.00,
                0.00,
                FIS_CGST_AMT,        /** Added in ver 1.4 **/
                FIS_SGST_AMT,        /** Added in ver 1.4 **/
                FIS_UGST_AMT,        /** Added in ver 1.4 **/
                FIS_IGST_AMT,        /** Added in ver 1.4 **/
                FIS_CUST_STATE_CD,   /** Added in ver 1.4 **/
                FIS_ISEC_STATE_CD,    /** Added in ver 1.4 **/
								'N'										/** Added in ver 1.5 **/
    FROM
      TMP_FUT_INC_SMRY
    WHERE
      FIS_DISP_FLAG ='Y'
    AND FIS_PRCS_FLAG = 'N'
    AND FIS_FROM_DT  = :c_g_start_date
    AND FIS_TO_DT    = :c_g_end_date  
    AND FIS_INCNT_REFUND_AMT > 0		/*1.1*/
    AND FIS_NET_INCNT_AMT    > 0	/*1.1*/
		AND	FIS_FINAL_ELG_FLG = 'Y'		/*1.2*/
    );

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31020", SQLMSG, c_err_msg  );
      sprintf(c_msg,"Failed in MDC update");
      fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
      tpabort(0);
    }

    fn_userlog (c_ServiceName," Row count %d ", SQL_ROW_COUNT );

    EXEC SQL
    UPDATE
    TMP_FUT_INC_SMRY
    SET FIS_PRCS_FLAG = 'Y',  /* Processing done */
        FIS_DISP_FLAG = 'C'   /* Confirmed that it has been displayed& prcsd */
    WHERE 
    :c_g_start_date   = FIS_FROM_DT
    AND :c_g_end_date = FIS_TO_DT
    AND FIS_DISP_FLAG = 'Y'
    AND FIS_PRCS_FLAG = 'N';

    if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog ( c_ServiceName, "S31025", SQLMSG, c_err_msg  );
      sprintf(c_msg,"Failed in Flag update");
      fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
      tpabort(0);
      return ;
    }

  fn_userlog (c_ServiceName," Row count %d ", SQL_ROW_COUNT );

	/************Added in Ver 1.5 start************/
	  EXEC SQL
    DECLARE cur_mdc_list CURSOR FOR
      SELECT  MDC_CLM_MTCH_ACCNT,
              MDC_PRDCT_TYP,
              MDC_TOT_AMT,
              MDC_DR_CR_FLG,
							MDC_CRDT_NMBR,
              NVL(MDC_RUN_NO,0),
              TO_CHAR(MDC_FROM_DT,'DD-Mon-YYYY'),
							ROWID
      FROM    MDC_MISC_DR_CR
      WHERE   MDC_PRDCT_TYP = :c_g_inc_type
			AND			MDC_LMT_UPD_STTS = 'N'
      AND     TRUNC(MDC_ENTRY_DT) = TRUNC(SYSDATE);

  EXEC SQL OPEN cur_mdc_list;

  if(SQLCODE != 0)
  {
		fn_errlog ( c_ServiceName, "S31030", SQLMSG, c_err_msg  );
    sprintf(c_msg,"Failed in FIS insert");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
    tpabort(0);
    return;
  }

  while(1)
  {
		MEMSET(sql_mdc_clm_mtch_accnt);
		MEMSET(sql_mdc_prdct_typ);
		MEMSET(sql_mdc_crdt_nmbr);
		MEMSET(c_mdc_rowid);
		MEMSET(sql_mdc_from_dt);
		MEMSET(sql_mdc_sttlmnt_trd_dt);

		sql_mdc_tot_amt=0;
		sql_mdc_dr_cr_flg='X';
		sql_mdc_run_no=0;
		sql_mdc_sttlmnt_nmbr=0;

    EXEC SQL
      FETCH cur_mdc_list
      INTO  :sql_mdc_clm_mtch_accnt,
            :sql_mdc_prdct_typ,
            :sql_mdc_tot_amt,
            :sql_mdc_dr_cr_flg,
						:sql_mdc_crdt_nmbr,
						:sql_mdc_run_no,
						:sql_mdc_from_dt,
						:c_mdc_rowid;

	  if(SQLCODE != 0)
    {
      if(SQLCODE == NO_DATA_FOUND)
      {
        EXEC SQL CLOSE cur_mdc_list;
        break;
      }
      else
      {
				fn_errlog ( c_ServiceName, "S31035", SQLMSG, c_err_msg  );
				EXEC SQL CLOSE cur_mdc_list;
    		sprintf(c_msg,"Failed in FIS insert");
    		fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
    		tpabort(0);
    		return;
      }
    }

		i_ret_cd=fn_upd_segment_lmt(c_ServiceName,
																sql_mdc_clm_mtch_accnt,
																sql_mdc_tot_amt,
																sql_mdc_prdct_typ,
																sql_mdc_dr_cr_flg,
																sql_mdc_sttlmnt_trd_dt.arr,
																&sql_mdc_sttlmnt_nmbr,
																c_err_msg);

		if(i_ret_cd != 0)
    {
			fn_errlog ( c_ServiceName, "S31040", "", c_err_msg  );
      EXEC SQL CLOSE cur_mdc_list;
      sprintf(c_msg,"Failed in FIS insert");
      fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
      tpabort(0);
      return;
    }

		rtrim(c_mdc_rowid);
		SETLEN(sql_mdc_sttlmnt_trd_dt);

		EXEC SQL
			UPDATE	MDC_MISC_DR_CR
			SET			MDC_LMT_UPD_STTS = 'Y',
							MDC_STTLMNT_TRD_DT = :sql_mdc_sttlmnt_trd_dt,
							MDC_STTLMNT_NMBR = :sql_mdc_sttlmnt_nmbr
			WHERE		MDC_LMT_UPD_STTS = 'N'
			AND			ROWID = :c_mdc_rowid;

		if(SQLCODE != 0)
		{
			fn_errlog ( c_ServiceName, "S31045", SQLMSG, c_err_msg  );
      EXEC SQL CLOSE cur_mdc_list;
      sprintf(c_msg,"Failed in FIS insert");
      fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
      tpabort(0);
      return;
		}
  }
	/************Added in Ver 1.5 end************/

	/*** Start for Ver 1.4 **/
	if(fn_prd_insert( c_ServiceName,
									  "NA",
			  						"-",
			  						0,
			  						"BO",
			  						c_g_inc_type,
			  						"system",
			  						c_g_start_date,
			  						c_prcs_dt,
			  						SQL_ROW_COUNT) == -1)
	{
  		fn_userlog (c_ServiceName,"Failed in Audit insert");
    	sprintf(c_msg,"Failed in Audit insert");
    	fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
      tpabort(0);
      return ;
	}
	/** End of Ver 1.4 **/


  if ( tpcommit(0) == -1 )
  {
    fn_errlog(c_ServiceName, "S31050", FMLMSG,c_err_msg );
    tpabort(0);
  }

  sprintf(c_msg,"Batch process %s completed",argv[0]);
  fn_userlog (c_ServiceName,"Batch process %s completed",argv[0]);
  fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
  fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);

}


/******************************************************************************/

int fn_calc_dates( c_qtr_mth_ind,  i_qtr_mth_no ,  i_year)
EXEC SQL BEGIN DECLARE SECTION;
char c_qtr_mth_ind;
int i_qtr_mth_no ;
int i_year;
EXEC SQL END   DECLARE SECTION;
{
  fn_userlog (c_ServiceName,"fn_calc_dates %c %d %d ",c_qtr_mth_ind,i_qtr_mth_no,i_year);

  if (c_qtr_mth_ind == 'M')
  {
    if ( (i_qtr_mth_no > 0)  && (i_qtr_mth_no < 13 ) )
    {
    EXEC SQL 
      SELECT 
      '01-' || TO_CHAR ( TO_DATE(:i_qtr_mth_no,'MM') , 'Mon' ) ||'-'||:i_year
      INTO :c_g_start_date
      FROM    dual;
      if ( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31055", SQLMSG, c_err_msg  );
        return (-1);
      }
      
      EXEC SQL
      SELECT LAST_DAY(:c_g_start_date)
      INTO :c_g_end_date
      FROM DUAL;
      if ( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31060", SQLMSG, c_err_msg  );
        return (-1);
      }
    }
    else
    {
      fn_userlog (c_ServiceName,"Invalid  Month passed. |%d|",i_qtr_mth_no);
      return (-1);
    }
  }
  else
  {
    fn_userlog (c_ServiceName,"Invalid Month indicator passed. |%c|",c_qtr_mth_ind);
    return (-1);
  }

  fn_userlog (c_ServiceName,"fn_calc_dates start date %s ",c_g_start_date);
  fn_userlog (c_ServiceName,"fn_calc_dates  end  date %s ",c_g_end_date);
  
  return (0);
}

/******************************************************************************/

int fn_validate_rerun()
{

  EXEC SQL BEGIN DECLARE SECTION;
  long l_l_past_count=0;
  EXEC SQL END   DECLARE SECTION;

  EXEC SQL
  SELECT
  count(rowid)
  INTO :l_l_past_count
  FROM  
  FIS_FUT_INC_SMRY
  WHERE 
  :c_g_start_date   = FIS_FROM_DT
  AND :c_g_end_date = FIS_TO_DT
  AND FIS_DISP_FLAG = 'Y'
  AND FIS_PRCS_FLAG = 'Y';
  
  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31065", SQLMSG, c_err_msg  );
    return (-1);
  }
  
  if (l_l_past_count == 0 )
  {
    fn_userlog (c_ServiceName," No past data found |%ld|. Proceed ",l_l_past_count);
  }
  else
  {
    fn_userlog (c_ServiceName," Past data found |%ld|. Abort ... ",l_l_past_count);
    return (-1);
  }

  EXEC SQL
  SELECT
  count(rowid)
  INTO :l_l_past_count
  FROM  
  TMP_FUT_INC_SMRY
  WHERE 
  :c_g_start_date   = FIS_FROM_DT
  AND :c_g_end_date = FIS_TO_DT
  AND FIS_DISP_FLAG = 'Y'
  AND FIS_PRCS_FLAG = 'N';
  
  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31070", SQLMSG, c_err_msg  );
    return (-1);
  }

  if (l_l_past_count != 0)
  {
    fn_userlog (c_ServiceName," Calculated data found |%ld|. Proceed ",l_l_past_count);
  }
  else
  {
    fn_userlog (c_ServiceName," No calculated data |%ld|. Pls confirm  ... ",l_l_past_count);
    return (-1);
  }
  
  return (0);
}

/******************************************************************************/

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_CONF_INC;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  fn_userlog (c_ServiceName,"-------------------------END--------------------");
  return;
}

int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
  return 0;
}

/******************************************************************************/
/*                                END OF CODE                                 */
/******************************************************************************/




