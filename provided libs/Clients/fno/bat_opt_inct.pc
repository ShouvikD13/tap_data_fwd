/*******************************************************************************
*  Program           : bat_opt_inct.pc                                         *
*                                                                              *
*  Description       :                                                         *  
*                                                                              *
*  Input Parameters  :      																									 *
*                           1. 1..12   Month Number of year                    *
*                           2. 2010    Year                                    *
*                                                                              *
*  Change Log        : 1.0   07-Sep-2010  Venture M & Shamili D.|Infotech      *
*											 1.1	 19-Oct-2011	Shamili															 *
*											 1.2	 14-Nov-2011	Shamili															 *
*											 1.3	 09-Jan-2012	Shamili															 *
*											 1.4	 31-Jul-2012  Sandip T  													 *
*											 1.5	 01-Aug-2012  Nitin Save  												 *
*											 1.6	 17-Sep-2012	Sandip Tambe											   *
*                      1.7   03-Jan-2013  Vishnu Nair                          *
*											 1.8	 17-Oct-2013	Sandip Tambe											   *
*										 : 1.9 	 08-Oct-2013 	Navina  D|Infotech									 *
*										 : 2.0 	 09-Sep-2014 	Samip		M|Infotech									 *
*										 : 2.1 	 09-Oct-2014 	Sandip Tambe          							 *
*										 : 2.2 	 12-Aug-2014 	Sandip Tambe          							 *
*										 : 2.3 	 20-Apr-2016  Sandip Tambe          							 *
*                    : 2.4   03-May-2017  Bhupendra Malik                      *
*                    : 2.5   25-Jul-2017  Afzal Khan                           *
*                    : 2.6   10-Apr-2019  Sandip T.                            *
********************************************************************************
*  1.0    -  New Release                                                       *
*  1.1    -  Excluding Rs.20 in incentive calculation.												 *
*	 1.2	  -  Excluding clients that are under option pricing scheme						 *
*	 1.3		-	 Excluding clients that are under prepaid brokerage scheme				 *
*  1.4    -  Excluding Rs.25 in incentive calculation.												 *
*  1.5    -  Implementing logic to calculate incentive for Option-195 clients  *
*  1.6    -  Incentive Changes for ATS Customers														   *
*  1.7    -  Change to include / exclude customers mapped to the schemes       *
*            and based on eligibility                                          *
*  1.8    -  Fix to handle 10CR turnover slab   														   *
*  1.9    -  Including the OptionPLUS turnover for incentive calculations      *
*  2.0    -  View to FML changes																							 *
*  2.1    -  CR-ISEC14-55222_I_Gain_Profit_Pricing_Model											 *	
*  2.2    -  Bullet Pricing Scheme Changes              											 *	
*  2.3    -  CR-ISEC04-78141- Excluding Trades with 50 Rs brokerage. 					 *	
*  2.4    -  No data found handling added                                      *
*  2.5    -  GST Inc Changes																									 *
*  2.6    -  EXCEP_ELIGBL_OPM195_INC_CR-ISEC04-121833													 *
*******************************************************************************/
                                                                                
/* Header Files */                                                              
                                                                                
#include<sqlca.h>
#include<atmi.h>
#include<string.h>     
#include<stdlib.h>     
#include<fo.h>
#include<fml32.h>
#include<fn_log.h>
#include<fn_tuxlib.h>
#include<fn_battmpt.h>
#include<fml_def.h>
#include<fo_fml_def.h>
#include<fn_ddr.h>
/** #include<fo_view_def.h> **/	/** Ver 2.0 **/
#include <fn_read_debug_lvl.h>  
#include "fml_rout.h"
#include <fn_inctv_ltst_gst_per.h> /** Addded in Ver 2.5 ***/

/******************************************************************************/
/*Helper defines*/ 
#define SQL_ROW_COUNT sqlca.sqlerrd[2]
#define DEFLOG1 if (DEBUG_MSG_LVL_1)
#define DEFLOG2 if (DEBUG_MSG_LVL_2)
#define DEFLOG3 if (DEBUG_MSG_LVL_3)
#define DEFLOG4 if (DEBUG_MSG_LVL_4)
#define DEFLOG5 if (DEBUG_MSG_LVL_5)
/******************************************************************************/
/******************************************************************************/


int fn_calc_dates( int , int  );

int fn_chk_housekp(void);

int fn_chk_lot_sz(void);

int fn_crt_tmp_smry_tbl(void);

int fn_prcs_smry_tbl(void);

int fn_load_glbl_data(void);

char *trim(char *str);

void fn_print_date_time(void);

int fn_validate_clnt_ctgy(void);

void fn_exclud_op(void);                                /** 1.2 **/

void fn_exclud_prepaid_brk(void);                       /** 1.3 **/

int fn_include_exclude_schm(void);                     /** Ver 1.7 **/

int fn_crt_tmp_opi_tbl(void);                          /** Ver 1.5 **/
int fn_upd_tmp_opi(void);			       									 /** Ver 1.5 **/
int fn_calc_brkg_195(void);			      	 							 /** Ver 1.5 **/
int fn_crt_opi_tbl(void);			       									 /** Ver 1.5 **/
int fn_upd_opi_tbl(void);			       									 /** Ver 1.5 **/
int fn_calc_schm_brkg(char * c_schm_code, int i_carry_fwd_lot); /** Ver 1.5 **/

/******************************************************************************/	

EXEC SQL BEGIN DECLARE SECTION;

struct st_gst_per st_ptr_gst_per;   /**** Added in Ver 2.5 ****/

char c_g_qtr_mth_ind='0';
int  i_g_qtr_mth_no=0;
int  i_g_year=0;
char c_g_mode = '\0';  /** Added in Ver 1.5 **/
char c_g_ats_flag='\0';	 /** Ver 1.6 **/

char c_g_start_date[23]={0};
char c_g_end_date[23]={0}; 

char c_ServiceName[33]={0};
//char c_err_msg[500]={0};
char c_err_msg[256]={0};  /* Added in Ver TOL */

double d_g_normal_percentage=0.00;

/** double d_g_svc_tax_percentage=0.00; ***Commented in Ver 2.5***/

char c_mtch_accnt_no[11]; /***  Added in Ver 2.5 ***/

double d_net_inct_amnt=0.00;   /*** Added in Ver 2.5 ***/

double d_old_brkg_amt=0.00;   /*** Added in Ver 2.5 ***/

double d_fnl_brkg_amt=0.00;   /*** Added in Ver 2.5 ***/ 

char c_msg[256]={0};
  
typedef struct __undrlyng_list
{
	char undrlyng[7];
	long mkt_lot;
	long mkt_lot_new;
	char actn_dt[23];
} str_undrlyng_list;

EXEC SQL  END  DECLARE SECTION;


void BAT_OPT_INCT ( int argc, char *argv[])                                 
{
	 int i_trnsctn=0;
  
   MEMSET(c_mtch_accnt_no);  /***  Added in Ver 2.5 ***/
   
  EXEC SQL  BEGIN DECLARE SECTION;

					  char  c_svc_name[18]={0};                                   
					  char  c_trd_date[21]={0};
					  char  c_flr_rmrk[255]={0};                                                     
					  long  i=0,l_flag_cnt=0;
					  char  c_tag[32]={0}; 
						varchar  c_schm_cd[50]={0};  /** Ver 1.7 **/   
  EXEC SQL  END   DECLARE SECTION;

  strcpy(c_ServiceName,argv[0]);
  INITBATDBGLVL(argv[0]);
  
	sprintf( c_tag,"%s%s",c_ServiceName,"_na");
  fn_userlog (c_ServiceName,"======================Started Batch - %s===============",argv[0]);
  sprintf(c_msg,"Batch process %s is started",argv[0]);
  fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
  
  if ( argc != 8 ) /** Changed argument Count from 6 to 7 in Ver 1.5 **//** ver 1.6 count_changed to 8 from 7 ***/
 	{
    fn_userlog (c_ServiceName,"Invalid Arguments passed %d",argc);
    fn_userlog (c_ServiceName,"Usage:%s NFO NFO NA <Month (1..12 )> <Year> <Mode: Normal-N / OPM-O ><ATS Flag > ",argv[0]); 
		/** Added Mode in ver 1.5 **/  /** Added ATS flag in Ver 1.6 **/
		fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);    
    return;
  }
  else
  {
    i_g_qtr_mth_no=atoi(argv[4]);
    i_g_year=atoi(argv[5]);    
    c_g_mode=argv[6][0];       /** Added in ver 1.5 **/
		c_g_ats_flag = argv[7][0]; /** Ver 1.6 **/
    fn_userlog (c_ServiceName,"Arguments passed <%d> <%d> <%c> <%c>",i_g_qtr_mth_no,i_g_year, c_g_mode,c_g_ats_flag); 
	  /* Added c_g_mode in ver 1.5 */ /*** Added c_g_ats_flag in Ver 1.6 **/

  } 

  if ( fn_calc_dates( i_g_qtr_mth_no ,  i_g_year)  )
	{
  	fn_userlog (c_ServiceName,"Failed to calculate the dates ");
  	fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
	  sprintf(c_msg,"Failed to calculate the dates ");
    fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 	
		return;
	}
	else
	{
	  sprintf(c_msg,"Calculate dates  ... done ");
    fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 	
	}


  if ( fn_chk_housekp() )
  {
    fn_userlog (c_ServiceName," House keep check failed ");
    sprintf(c_msg," WARNING : House Keep Process is not Run ");
    fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
    return;
  }	
  /*******************  Added conditional call with c_g_mode for Ver 1.5  ************************/
  /******  Ver 1.5 Started *********/
 /* if (c_g_mode == 'N')  ** Ver 1.6 comment **/ /** Indicates Incentive process run for Normal Clients **/
  if (c_g_mode == 'N' && c_g_ats_flag=='N') /* Ver 1.6 Added ats flag check to run Only for Normal*/
  {
  /******  Ver 1.5 Ended *********/
	
	if ( fn_chk_lot_sz() )
  {
    fn_userlog (c_ServiceName," I Lot size check failed ");
    sprintf(c_msg," WARNING : Found records with lot size null / 0 ");
    fn_errlog ( c_ServiceName, "B31041",DEFMSG,c_err_msg  );
    fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
    return;
  }

	
	if ( fn_load_glbl_data () )
	{
  	fn_userlog (c_ServiceName,"Failed to load global data ");
  	fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
	  sprintf(c_msg,"Failed to load global data  ");
    fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 	
		return;
	}
	else
	{	
	  sprintf(c_msg,"Loading Global data ... done ");
    fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 	
	}


	if ( fn_crt_tmp_smry_tbl() )
	{
    fn_userlog (c_ServiceName," II Create tmp smry OPT failed ");
  	fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
	  sprintf(c_msg,"II Create tmp smry OPT failed ");
    fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 	
		   
    return;
  }	
	
	/** Ver 1.7 Starts **/
	
	/*** Checking Whether Option Incentive flag is defined for all scheme code ***/

	MEMSET(c_schm_cd);

 	EXEC SQL
  	SELECT  IMSM_SCHEMECODE
  	INTO    :c_schm_cd
  	FROM  INSD_INFO_NTST_SCHEME_DTLS,IMSM_INFO_MATCH_SCHEME_MASTER,TMP_OPT_INC_SMRY
 	 	WHERE INSD_MATCH_ACCOUNT_NO=OIS_MATCH_ACNT
  	AND   INSD_FNO_SCHEMECODE = IMSM_SCHEMECODE
  	AND   IMSM_OPT_INC  IS NULL
  	AND   ROWNUM < 2  ;

  if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
   	fn_errlog ( c_ServiceName, "S31005", SQLMSG, c_err_msg  );
   	fn_userlog (c_ServiceName,"Failed while checking option incentive flag ");
   	fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
   	sprintf(c_msg,"Failed  while checking option incentive flag");
   	fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
   	return;
  }
  else if(SQLCODE == 0 )
  {
		SETNULL(c_schm_cd);

		EXEC SQL
    DELETE TMP_OPT_INC_SMRY
    WHERE nvl(OIS_ATS_FLG,'N') = :c_g_ats_flag;      

  	if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  	{
    	fn_errlog ( c_ServiceName, "S31010", SQLMSG, c_err_msg  );
    	return;
  	}
	
   	fn_userlog (c_ServiceName,"Incentive flag not defined for Scheme :%s:",c_schm_cd.arr);
   	fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
   	sprintf(c_msg,"Incentive flag not defined for Scheme :%s:",c_schm_cd.arr);
   	fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
   	return;
  }

	if ( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Incentive Flag check completed.. ");
  }

  /* Ver 1.7 Ends */


	if ( fn_prcs_smry_tbl() )
	{
    fn_userlog (c_ServiceName," III Process smry OPT failed ");   
  	fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
	  sprintf(c_msg," III Process smry OPT failed ");
    fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 	
    return;
  }

	/*** Ver 1.7 Starts ***/

  if( fn_include_exclude_schm() )
  {
    fn_userlog (c_ServiceName,"Failed while marking eligibilty");
    fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
    sprintf(c_msg,"Failed in marking eligibilty");
    fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
    return;
  }

  /*** Ver 1.7 Ends ***/


	if ( fn_validate_clnt_ctgy() )
  {
    fn_userlog (c_ServiceName,"Failed in setting clients category filter. ");
    fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
    sprintf(c_msg,"Failed in setting clients category filter. ");
    fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
    return;
  }
  else
  {
    sprintf(c_msg,"Client category filter applied ");
    fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
  }

  }  /***** Condition Ended for Normal Run under  Ver 1.5 *****/

  /*******************  Added conditional call with c_g_mode='O'  for Ver 1.5  ************************/
  /****  Ver 1.5 Started  ****/

  if (c_g_mode == 'O')  /** Indicates Incentive process run for Option-195 Clients **/
  {

		/**  Get the values of parameters stored  **/
		if (fn_load_glbl_data() != 0)
		{
			fn_userlog (c_ServiceName," Error - Load parameter details ");
			fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
			sprintf(c_msg,"Error - Parameter details for Option Pricing Incentive ");
			fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 	
			return;
		}		
		
		/** Step -1 : Populate dada into Temp OPI table for each client-contract againts given period  **/
		if ( fn_crt_tmp_opi_tbl() != 0 )
		{
			if ( fn_crt_tmp_opi_tbl() == 1 )
			{
				fn_userlog (c_ServiceName," No Record to process for Option Pricing Incentive ");
				fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
				sprintf(c_msg," No Record to process for Option Pricing Incentive ");
				fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 	
				return;
			}
			fn_userlog (c_ServiceName," Error - Create tmp table for Option Pricing Incentive ");
			fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
			sprintf(c_msg,"Error - Create temp table for Option Pricing Incentive ");
			fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 	
			return;
		}	

		/** Step -2 : Update dada into Temp OPI table for turnover and slab of 10CR a day  **/
		if ( fn_upd_tmp_opi() != 0 )
		{
			fn_userlog (c_ServiceName," Error - Update temp data for Option Pricing Incentive  ");   
			fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
			sprintf(c_msg," Error - Update temp data for Option Pricing Incentive ");
			fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 	
			return;
		}	

		/** Step -3 : Calculate and Update dada into Temp OPI table for brokerage as per -195 plan  **/
		if ( fn_calc_brkg_195() != 0 )
		{
			fn_userlog (c_ServiceName," Error - Update brkg as per 195 plan for Option Pricing Incentive  ");   
			fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
			sprintf(c_msg," Error -Update brkg as per 195 plan for Option Pricing Incentive ");
			fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 	
			return;
		}	

		/** Step -4 : Insert dada into Main OPI table for for given period  **/
		if ( fn_crt_opi_tbl() != 0 )
		{
			fn_userlog (c_ServiceName," Error - Create data in OPI for Option Pricing Incentive  ");   
			fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
			sprintf(c_msg," Error - Create main data for Option Pricing Incentive ");
			fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 	
			return;
		}

		/** Step -5 : Final update of dada into Main OPI table for flag and brokerage amount  **/
		if ( fn_upd_opi_tbl() != 0 )
		{
			fn_userlog (c_ServiceName," Error - Update final data in OPI for Option Pricing Incentive  ");   
			fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
			sprintf(c_msg," Error - Update final data for Option Pricing Incentive ");
			fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 	
			return;
		}

 	}
 	/****  Ver 1.5 Ended  ****/
  
  sprintf(c_msg,"Completed Batch --- All records processed ");                         
  fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);

  fn_userlog (c_ServiceName,"======================Completed Batch - %s===============",argv[0]);
	              
  return ;                                                                      

}

/******************************************************************************/

int fn_calc_dates( i_qtr_mth_no ,  i_year)
EXEC SQL BEGIN DECLARE SECTION;
int i_qtr_mth_no ;
int i_year;
EXEC SQL END   DECLARE SECTION;
{
   /* fn_userlog (c_ServiceName,"fn_calc_dates %c %d %d ",i_qtr_mth_no,i_year); */ /* Commented in Ver 1.5 */
   fn_userlog (c_ServiceName,"fn_calc_dates %d %d ",i_qtr_mth_no,i_year); /* Corrected parameter printing in Ver 1.5 */

	if ( (i_qtr_mth_no > 0)  && (i_qtr_mth_no < 13 ) )
	{
  EXEC SQL 
    SELECT 
    '01-' || TO_CHAR ( TO_DATE(:i_qtr_mth_no,'MM') , 'Mon' ) ||'-'||:i_year
		INTO :c_g_start_date
    FROM    dual;
	  if ( SQLCODE != 0 )
	  {
	    fn_errlog ( c_ServiceName, "S31015", SQLMSG, c_err_msg  );
	    return (-1);
	  }
	  
	  EXEC SQL
	  SELECT LAST_DAY(:c_g_start_date)
		INTO :c_g_end_date
		FROM DUAL;
	  if ( SQLCODE != 0 )
	  {
	    fn_errlog ( c_ServiceName, "S31020", SQLMSG, c_err_msg  );
	    return (-1);
	  }
	}
	else
	{
		fn_userlog (c_ServiceName,"Invalid  Month passed. |%d|",i_qtr_mth_no);
  	return (-1);
	}
  
  fn_userlog (c_ServiceName,"fn_calc_dates start date :%s: ",c_g_start_date);
  fn_userlog (c_ServiceName,"fn_calc_dates  end  date :%s: ",c_g_end_date);
  
  return (0);
}


/******************************************************************************/


int fn_chk_housekp(void)
{

	EXEC SQL BEGIN DECLARE SECTION;
  long l_trd_count=0;
  EXEC SQL END   DECLARE SECTION;


	fn_userlog (c_ServiceName,"-------- inside House keep check -------");

	/******* Ver 1.6 Starts *****/

	if(c_g_ats_flag == 'A' )
	{
	  EXEC SQL
    SELECT COUNT(rowid)				/**** Ver 1.6 count(*) changed to count(rowid) ***/
    INTO  :l_trd_count
    FROM  FAT_FO_ATS_TRADES_NSE
		WHERE TRUNC(FAT_TRD_DT) BETWEEN :c_g_start_date and :c_g_end_date;

  	if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  	{
						fn_errlog ( c_ServiceName, "S31025", SQLMSG, c_err_msg  );
						return (-1);
  	}

     fn_userlog (c_ServiceName,"l_trd_count FAT :%ld:",l_trd_count);


		 if ( l_trd_count > 0 )
  	 {
						fn_userlog (c_ServiceName," Found records in ATS trade table : FAT |%ld| ",l_trd_count);
						sprintf(c_msg," WARNING : Found records in ATS trade table ,House keep is not run");
						fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
						return (-1);
	   }
	}
	else if (c_g_ats_flag == 'N' )
	{																		/*** Ver 1.6 Ends ***/
	  EXEC SQL
    SELECT COUNT(rowid)					/**** Ver 1.6 count(*) changed to count(rowid) ***/
    INTO  :l_trd_count
    FROM  FTD_FO_TRD_DTLS
		WHERE TRUNC(FTD_TRD_DT) BETWEEN :c_g_start_date and :c_g_end_date;

  	if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  	{
						fn_errlog ( c_ServiceName, "S31030", SQLMSG, c_err_msg  );
						return (-1);
  	}

     fn_userlog (c_ServiceName,"l_trd_count in FTD :%ld:",l_trd_count);


		 if ( l_trd_count > 0 )
  	 {
						fn_userlog (c_ServiceName," Found records in trade table : FTD |%ld| ",l_trd_count);
						sprintf(c_msg," WARNING : Found records in trade table ,House keep is not run");
						fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
						return (-1);
	   }


		EXEC SQL
    SELECT COUNT(rowid)				/**** Ver 1.6 count(*) changed to count(rowid) ***/
    INTO  :l_trd_count
    FROM  FAB_FO_ASGNMNT_BOOK
		WHERE TRUNC(FAB_ASGND_DT) BETWEEN :c_g_start_date and :c_g_end_date; 

  	if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  	{
						fn_errlog ( c_ServiceName, "S31035", SQLMSG, c_err_msg  );
						return (-1);
    }

		if ( l_trd_count > 0 )
    {
            fn_userlog (c_ServiceName," Found records in trade table : FAB|%ld| ",l_trd_count);
            sprintf(c_msg," WARNING : Found records in trade table ,House keep is not run");
            fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
            return (-1);
    }


		EXEC SQL
    SELECT COUNT(rowid)							/**** Ver 1.6 count(*) changed to count(rowid) ***/
    INTO  :l_trd_count
    FROM  FEC_FO_EXRC_CONF
		WHERE TRUNC(FEC_EXRC_DT) BETWEEN :c_g_start_date and :c_g_end_date; 

  	if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  	{
						fn_errlog ( c_ServiceName, "S31040", SQLMSG, c_err_msg  );
						return (-1);
  	}

    if ( l_trd_count > 0 )
    {

				    fn_userlog (c_ServiceName," Found records in trade table : FEC |%ld| ",l_trd_count);
            sprintf(c_msg," WARNING : Found records in trade table ,House keep is not run");
            fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
            return (-1);
    }
	}																/**** Ver 1.6 ***/

		/****************** 1.2 Starts ******************/

    EXEC SQL
    SELECT COUNT(rowid)										/**** Ver 1.6 count(*) changed to count(rowid) ***/
    INTO  :l_trd_count
    FROM  OTD_OPTION_TRD_DTLS
    WHERE TRUNC(OTD_TRD_DT) BETWEEN :c_g_start_date and :c_g_end_date
		AND   nvl(OTD_ATS_FLG,'N') =:c_g_ats_flag;										/*** Ver 1.6 ***/

    if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
            fn_errlog ( c_ServiceName, "S31045", SQLMSG, c_err_msg  );
            return (-1);
    }

    if ( l_trd_count > 0 )
    {

         fn_userlog(c_ServiceName,"Found records in option pricing table : OTD|%ld| ",l_trd_count);
         sprintf(c_msg," WARNING : Found records in option pricing table ,House keep is not run");
         fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
         return (-1);
    }

		/****************** 1.2 Ends ******************/
		
		
	return (0);

}

/******************************************************************************/

int fn_chk_lot_sz(void)
{
	EXEC SQL BEGIN DECLARE SECTION;
	long l_lot_sz_zero_count=0;
	long l_hlot_sz_zero_count=0;
	EXEC SQL END   DECLARE SECTION;

/******************************************************************************/

	fn_userlog (c_ServiceName,"-------- inside Lot size check -------");

	/*rtrim(c_g_start_date);
	rtrim(c_g_end_date);*/

	fn_userlog (c_ServiceName,"fn_calc_dates start date2 :%s: ",c_g_start_date);
  fn_userlog (c_ServiceName,"fn_calc_dates  end  date2 :%s: ",c_g_end_date);

	/*** Ver 1.6 Starts **/
	if( c_g_ats_flag == 'A')
	{
		EXEC SQL
			SELECT COUNT(rowid)			/**** Ver 1.6 count(*) changed to count(rowid) ***/
			INTO  :l_lot_sz_zero_count
			FROM  FAT_FO_ATS_TRADES_NSE_HSTRY
			WHERE FAT_PRDCT_TYP = 'O' 
			AND 	TRUNC(FAT_TRD_DT) BETWEEN :c_g_start_date and :c_g_end_date
			AND ( FAT_MIN_LOT_SIZE = 0 OR FAT_MIN_LOT_SIZE is null )		
			;			
  
		if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  	{
    	fn_errlog ( c_ServiceName, "S31050", SQLMSG, c_err_msg  );
    	return (-1);
  	}

		fn_userlog (c_ServiceName,"l_lot_sz_zero_count in FAT :%ld:",l_lot_sz_zero_count);
	
		if ( l_lot_sz_zero_count > 0 )
  	{
  		fn_userlog (c_ServiceName," NULL Lot size : FAT |%ld| ",l_lot_sz_zero_count);
			sprintf(c_msg," WARNING : Found records in  ATS trade table with lot size null / 0");
    	fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
			return (-1);
		}
	}
	else if( c_g_ats_flag == 'N')
	{																			/*** Ver 1.6 Ends ***/
		EXEC SQL
			SELECT COUNT(rowid)					/**** Ver 1.6 count(*) changed to count(rowid) ***/
			INTO  :l_lot_sz_zero_count
			FROM  FTD_FO_TRD_DTLS_HSTRY
			WHERE FTD_PRDCT_TYP in ('O','I')	/*** Product type 'I' added in Ver 1.9 ***/ 
			AND 	TRUNC(FTD_TRD_DT) BETWEEN :c_g_start_date and :c_g_end_date
			AND ( FTD_MIN_LOT_SIZE = 0 OR FTD_MIN_LOT_SIZE is null )		
			;			
  
		if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  	{
    	fn_errlog ( c_ServiceName, "S31055", SQLMSG, c_err_msg  );
    	return (-1);
  	}

		fn_userlog (c_ServiceName,"l_lot_sz_zero_count :%ld:",l_lot_sz_zero_count);
	
		if ( l_lot_sz_zero_count > 0 )
  	{
  		fn_userlog (c_ServiceName," NULL Lot size : FTD |%ld| ",l_lot_sz_zero_count);
			sprintf(c_msg," WARNING : Found records in trade table with lot size null / 0");
    	fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
			return (-1);
		}

		/******************************************************************************/

		EXEC SQL
			SELECT COUNT(rowid)					/**** Ver 1.6 count(*) changed to count(rowid) ***/
			INTO  :l_lot_sz_zero_count
			FROM  FAB_FO_ASGNMNT_BOOK_HSTRY
			WHERE FAB_PRDCT_TYP = 'O' 
			AND 	TRUNC(FAB_ASGND_DT) BETWEEN :c_g_start_date and :c_g_end_date
			AND ( FAB_MIN_LOT_SIZE = 0 OR FAB_MIN_LOT_SIZE is null )		
			;			
  
		if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  	{
    	fn_errlog ( c_ServiceName, "S31060", SQLMSG, c_err_msg  );
    	return (-1);
  	}
	
		if ( l_lot_sz_zero_count > 0 )
  	{
  		fn_userlog (c_ServiceName," NULL Lot size : FAB |%ld| ",l_lot_sz_zero_count);
			sprintf(c_msg," WARNING : Found records in assignment table with lot size null / 0 ");
    	fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
			return (-1);
		}


		/******************************************************************************/

		EXEC SQL
			SELECT COUNT(rowid)				/**** Ver 1.6 count(*) changed to count(rowid) ***/
			INTO  :l_lot_sz_zero_count
			FROM  FEC_FO_EXRC_CONF_HSTRY
			WHERE FEC_PRDCT_TYP = 'O' 
			AND 	TRUNC(FEC_EXRC_DT) BETWEEN :c_g_start_date and :c_g_end_date
			AND ( FEC_MIN_LOT_SIZE = 0 OR FEC_MIN_LOT_SIZE is null )		
			;			
  
		if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  	{
    	fn_errlog ( c_ServiceName, "S31065", SQLMSG, c_err_msg  );
    	return (-1);
  	}
	
		if ( l_lot_sz_zero_count > 0 )
  	{
  		fn_userlog (c_ServiceName," NULL Lot size : FEC |%ld| ",l_lot_sz_zero_count);
    	sprintf(c_msg," WARNING : Found records in exercise table with lot size null / 0 ");
    	fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
			return (-1);
		}

		/******************************************************************************/
	}										/*** Ver 1.6 **/	
	return (0);
}

int fn_crt_tmp_smry_tbl(void)
{


	int i_trnsctn=0;

	EXEC SQL BEGIN DECLARE SECTION;
	long l_l_row_count=0;
	EXEC SQL END   DECLARE SECTION;

	DEFLOG3 fn_print_date_time();
	fn_userlog (c_ServiceName,"+ - CLEANUP TMP_OPT_INC_SMRY ");

	EXEC SQL
		DELETE TMP_OPT_INC_SMRY
		WHERE nvl(OIS_ATS_FLG,'N') = :c_g_ats_flag;						/*** Ver 1.6 **/

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31070", SQLMSG, c_err_msg  );
    return (-1);
  }

	DEFLOG3 fn_print_date_time();	
	fn_userlog (c_ServiceName,"II - Inserting into table TMP_OPT_INC_SMRY ");

	/**** Ver 1.6 starts ****/
 if (c_g_ats_flag == 'A' )
 {
		fn_userlog(c_ServiceName,"Inside ATS TMP_OPT_INC_SMRY insert");/* Ver 1.6 Ends */	
		EXEC SQL
		INSERT INTO TMP_OPT_INC_SMRY 
		(
			OIS_MATCH_ACNT        ,
			OIS_FROM_DT           ,
			OIS_TO_DT             ,
			OIS_FRSH_LOTS         ,
			OIS_OPT_BRKRG         ,    
			OIS_PREMIUM						,
			OIS_DISP_FLAG				  ,
			OIS_PRCS_FLAG         ,
			OIS_ATS_FLG										
		)
		(
			SELECT 
				MTCH 							,
				:c_g_start_date		, 
				:c_g_end_date			, 
				SUM(LOTS) 				, 
				SUM(BKRG) 				,
				SUM(PREM)					,
				'Y'								,
				'N'								,
				:c_g_ats_flag							
			FROM
			(
				SELECT 
					FAT_CLM_MTCH_ACCNT 						                     MTCH,
					NVL(SUM ( FAT_EXCTD_QTY / FAT_MIN_LOT_SIZE),0) 		 LOTS,
					NVL(SUM(FAT_EXCTD_QTY  * FAT_EXCTD_RT),0)		  	 	 PREM,					
					NVL(SUM(FAT_BRKG),0)                               BKRG
					FROM
					FAT_FO_ATS_TRADES_NSE_HSTRY
					WHERE 
					( NVL((FAT_BRKG / ( FAT_EXCTD_QTY / FAT_MIN_LOT_SIZE) ),0) not in (1500,2000,2500,5000)) /** ver 2.3 50 added **/
					AND		FAT_BRKG != 0
					AND		FAT_BRKG IS NOT NULL
					AND 	FAT_MIN_LOT_SIZE != 0
					AND   FAT_MIN_LOT_SIZE IS NOT NULL
					AND   FAT_PRDCT_TYP = 'O' 
					AND 	TRUNC(FAT_TRD_DT) BETWEEN :c_g_start_date and :c_g_end_date
				GROUP BY FAT_CLM_MTCH_ACCNT
			)
			temp
			GROUP BY MTCH
		);
 }
 else if( c_g_ats_flag == 'N')
 {					
		fn_userlog(c_ServiceName,"Inside Normal TMP_OPT_INC_SMRY insert");/* Ver 1.6 Ends */
	
		EXEC SQL
		INSERT INTO TMP_OPT_INC_SMRY 
		(
			OIS_MATCH_ACNT        ,
			OIS_FROM_DT           ,
			OIS_TO_DT             ,
			OIS_FRSH_LOTS         ,
			OIS_OPT_BRKRG         ,    
			OIS_PREMIUM						,
			OIS_DISP_FLAG				  ,
			OIS_PRCS_FLAG         ,
			OIS_ATS_FLG											/**** Ver 1.6 ***/
		)
		(
			SELECT 
				MTCH ,
				:c_g_start_date		, 
				:c_g_end_date			, 
				SUM(LOTS) 				, 
				SUM(BKRG) 				,
				SUM(PREM)					,
				'Y',
				'N'								,
				:c_g_ats_flag								/**** Ver 1.6 ***/
			FROM
			(
				SELECT 
					FAB_CLM_MTCH_ACCNT                      			 										MTCH,
					NVL(SUM(FAB_ASGND_QTY/FAB_MIN_LOT_SIZE ),0)    										LOTS,
					NVL(SUM(ABS(FAB_STTLMNT_PRC-FAB_STRK_PRC ) * FAB_ASGND_QTY),0)		PREM,
					NVL(SUM(FAB_BRKRG_VAL ) ,0) 									                    BKRG
					FROM FAB_FO_ASGNMNT_BOOK_HSTRY  
					WHERE 
					FAB_PRDCT_TYP = 'O'
					AND 	FAB_MIN_LOT_SIZE  != 0
					AND   FAB_MIN_LOT_SIZE  IS NOT NULL
					/*AND   (FAB_BRKRG_VAL / FAB_MIN_LOT_SIZE) <> 1500 */					/**1.1 **/
					AND   ((FAB_BRKRG_VAL / FAB_MIN_LOT_SIZE) not in ( 1500,2000,2500,5000))	/**1.1 **//** Ver 1.4 **/ /** ver 2.3 */
					AND		FAB_BRKRG_VAL != 0
				  AND		FAB_BRKRG_VAL IS NOT NULL 
					AND   TRUNC(FAB_ASGND_DT) BETWEEN :c_g_start_date AND :c_g_end_date
				GROUP BY FAB_CLM_MTCH_ACCNT
			UNION ALL
				SELECT 
					FTD_CLM_MTCH_ACCNT 						                     MTCH,
					NVL(SUM ( FTD_EXCTD_QTY / FTD_MIN_LOT_SIZE),0) 		 LOTS,
					NVL(SUM(FTD_EXCTD_QTY  * FTD_EXCTD_RT),0)		  	 	 PREM,					
					NVL(SUM(FTD_BRKG),0)                               BKRG
					FROM
					FTD_FO_TRD_DTLS_HSTRY
					WHERE 
					/**NVL((FTD_BRKG / ( FTD_EXCTD_QTY / FTD_MIN_LOT_SIZE) ),0) <> 1500 **/	/**1.1**/
					( NVL((FTD_BRKG / ( FTD_EXCTD_QTY / FTD_MIN_LOT_SIZE) ),0) not in (1500,2000,2500,5000))/** 1.1 **/ /** Ver 1.4  ***/ /** ver 2.3 50 added **/
					AND		FTD_BRKG != 0
					AND		FTD_BRKG IS NOT NULL
					AND 	FTD_MIN_LOT_SIZE != 0
					AND   FTD_MIN_LOT_SIZE IS NOT NULL
					AND   FTD_PRDCT_TYP in ('O','I') /*** Product type 'I' added in Ver 1.9 ***/ 
					AND 	TRUNC(FTD_TRD_DT) BETWEEN :c_g_start_date and :c_g_end_date
					AND   nvl(FTD_BRKG_TYPE,'N') <> 'B' 																					/*** Ver 2.2 **/
					AND	  FTD_ORDR_RFRNC not in 
												( select distinct iod_ordr_rfrnc 
													from IOD_IGAIN_ORDR_DTLS_HSTRY 
													where trunc(iod_ordr_Dt) between :c_g_start_date and :c_g_end_date
												) /** Ver 2.1 **/
				GROUP BY FTD_CLM_MTCH_ACCNT
			UNION ALL
				SELECT 
					FEC_CLM_MTCH_ACCNT                      			    								MTCH,
					NVL(SUM(FEC_EXRC_QTY / FEC_MIN_LOT_SIZE),0)       								LOTS,
					NVL(SUM(ABS(FEC_CURR_MKT_PRC-FEC_STRK_PRC ) * FEC_EXRC_QTY),0)		PREM, 
					NVL(SUM(FEC_BRKG_VAL ),0)                      										BKRG
					FROM FEC_FO_EXRC_CONF_HSTRY
					WHERE 
					/*(FEC_BRKG_VAL  / ( FEC_EXRC_QTY  / FEC_MIN_LOT_SIZE ) ) <> 1500 */		/**1.1**/
					((FEC_BRKG_VAL  / ( FEC_EXRC_QTY  / FEC_MIN_LOT_SIZE ) ) not in (1500,2000,2500,5000)) /**1.1**/ /** Ver 1.4 **/ /** ver 2.3 **/
					AND		FEC_BRKG_VAL != 0
					AND		FEC_BRKG_VAL IS NOT NULL
					AND 	FEC_MIN_LOT_SIZE  != 0
					AND   FEC_MIN_LOT_SIZE  IS NOT NULL
					AND   FEC_PRDCT_TYP  = 'O' 
					AND   TRUNC(FEC_EXRC_DT) BETWEEN :c_g_start_date and :c_g_end_date
				GROUP BY FEC_CLM_MTCH_ACCNT 
			)
			temp
			GROUP BY MTCH
		);
	}																					/**** Ver 1.6 ***/	
	
  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31075", SQLMSG, c_err_msg  );
    return (-1);
  }
  
  if ( ( SQLCODE == NO_DATA_FOUND ) )
  {
		fn_userlog (c_ServiceName,"II - NO DATA TO BE PROCESSED ");
    return (1);
  }

	fn_userlog (c_ServiceName," Row count  before excluding option pricing %d ", SQL_ROW_COUNT ); /**
1.2**/

	/********* Excluding records which are under option pricing scheme ****/    /**1.2 **/

  fn_exclud_op();

	fn_userlog (c_ServiceName," Row count  before excluding prepaid brokerage %d ", SQL_ROW_COUNT ); /** 1.3**/


	/** Commented in Ver 1.7
	********* Excluding records which are under prepaid brpkerage scheme ****    **1.3 **

	fn_exclud_prepaid_brk();
	**/

	/*** Ver 1.6 Starts ****/
	if(c_g_ats_flag == 'A')
	{
		fn_userlog(c_ServiceName,"Inside ATS TMP_OPT_INC_SMRY update ");
  	EXEC SQL
			UPDATE TMP_OPT_INC_SMRY
			SET
			(OIS_SQ_PREMIUM,OIS_SQ_LOTS,OIS_SQ_BRKRG) =
				(
				SELECT  
							SUM(SQ_PREM), 
						  SUM(SQ_LOTS),		
							SUM(SQ_BKRG)		FROM
			 	(
				SELECT
					FAT_CLM_MTCH_ACCNT																							MTCH,
					NVL(SUM(FAT_EXCTD_QTY  * FAT_EXCTD_RT),0)		  									SQ_PREM,
					NVL(SUM ( FAT_EXCTD_QTY / FAT_MIN_LOT_SIZE),0)                  SQ_LOTS,
					NVL(SUM(FAT_BRKG),0)                                            SQ_BKRG
				FROM
							FAT_FO_ATS_TRADES_NSE_HSTRY
				WHERE	  ((FAT_BRKG / ( FAT_EXCTD_QTY / FAT_MIN_LOT_SIZE) ) = 1500 
				OR      (FAT_BRKG / ( FAT_EXCTD_QTY / FAT_MIN_LOT_SIZE) ) = 2000  
				OR      (FAT_BRKG / ( FAT_EXCTD_QTY / FAT_MIN_LOT_SIZE) ) = 2500 
				OR      (FAT_BRKG / ( FAT_EXCTD_QTY / FAT_MIN_LOT_SIZE) ) = 5000  /** ver 2.3 **/
				OR 			FAT_BRKG IS NULL 
				OR 		  FAT_BRKG = 0)
				AND 		FAT_MIN_LOT_SIZE != 0
				AND   	FAT_MIN_LOT_SIZE IS NOT NULL
				AND   	FAT_PRDCT_TYP = 'O' 
				AND 		TRUNC(FAT_TRD_DT) BETWEEN :c_g_start_date AND :c_g_end_date
				GROUP BY FAT_CLM_MTCH_ACCNT 
				) TEMP
		 	WHERE  MTCH = OIS_MATCH_ACNT
			AND OIS_ATS_FLG= :c_g_ats_flag 
			);
	}
	else if( c_g_ats_flag == 'N')
	{																					/*** ver 1.6 Ends **/
  	EXEC SQL
			UPDATE TMP_OPT_INC_SMRY
			SET
			(OIS_SQ_PREMIUM,OIS_SQ_LOTS,OIS_SQ_BRKRG) =
				(
				SELECT  
							SUM(SQ_PREM), 
						  SUM(SQ_LOTS),		
							SUM(SQ_BKRG)		FROM
			 	(
				SELECT 					
					FAB_CLM_MTCH_ACCNT																								MTCH,
          NVL(SUM(ABS(FAB_STTLMNT_PRC-FAB_STRK_PRC ) * FAB_ASGND_QTY),0)    SQ_PREM,
					NVL(SUM(FAB_ASGND_QTY/FAB_MIN_LOT_SIZE ),0)                       SQ_LOTS,
					NVL(SUM(FAB_BRKRG_VAL ) ,0)                                       SQ_BKRG
				FROM 
							FAB_FO_ASGNMNT_BOOK_HSTRY  
				WHERE  
					((FAB_BRKRG_VAL/ ( FAB_ASGND_QTY/ FAB_MIN_LOT_SIZE) ) = 1500
					OR		(FAB_BRKRG_VAL/ ( FAB_ASGND_QTY/ FAB_MIN_LOT_SIZE) ) = 2000  /**1.1**/
					OR		(FAB_BRKRG_VAL/ ( FAB_ASGND_QTY/ FAB_MIN_LOT_SIZE) ) = 2500  /**1.4**/
					OR		(FAB_BRKRG_VAL/ ( FAB_ASGND_QTY/ FAB_MIN_LOT_SIZE) ) = 5000  /**2.3**/
        	OR    FAB_BRKRG_VAL = 0
        	OR    FAB_BRKRG_VAL IS NULL)
					AND		FAB_PRDCT_TYP = 'O'
					AND 	FAB_MIN_LOT_SIZE  != 0
					AND   FAB_MIN_LOT_SIZE  IS NOT NULL
					AND   TRUNC(FAB_ASGND_DT) BETWEEN :c_g_start_date AND :c_g_end_date
					GROUP BY FAB_CLM_MTCH_ACCNT 
				UNION ALL 
				SELECT
					FTD_CLM_MTCH_ACCNT																							MTCH,
					NVL(SUM(FTD_EXCTD_QTY  * FTD_EXCTD_RT),0)		  									SQ_PREM,
					NVL(SUM ( FTD_EXCTD_QTY / FTD_MIN_LOT_SIZE),0)                  SQ_LOTS,
					NVL(SUM(FTD_BRKG),0)                                            SQ_BKRG
				FROM
							FTD_FO_TRD_DTLS_HSTRY
				WHERE	  ((FTD_BRKG / ( FTD_EXCTD_QTY / FTD_MIN_LOT_SIZE) ) = 1500 
				OR      (FTD_BRKG / ( FTD_EXCTD_QTY / FTD_MIN_LOT_SIZE) ) = 2000     /**1.1**/
				OR      (FTD_BRKG / ( FTD_EXCTD_QTY / FTD_MIN_LOT_SIZE) ) = 2500     /**1.4**/
				OR      (FTD_BRKG / ( FTD_EXCTD_QTY / FTD_MIN_LOT_SIZE) ) = 5000     /**2.3**/
				OR 			FTD_BRKG IS NULL 
				OR 		  FTD_BRKG = 0)
				AND 		FTD_MIN_LOT_SIZE != 0
				AND   	FTD_MIN_LOT_SIZE IS NOT NULL
				AND   	FTD_PRDCT_TYP in ('O' ,'I') /*** Product type 'I' added in Ver 1.9 ***/
				AND 		TRUNC(FTD_TRD_DT) BETWEEN :c_g_start_date AND :c_g_end_date
				AND   	NVL(FTD_BRKG_TYPE,'N') <> 'B' 																					/*** Ver 2.2 **/
				AND	  	FTD_ORDR_RFRNC not in 
												( select distinct iod_ordr_rfrnc 
													from IOD_IGAIN_ORDR_DTLS_HSTRY 
													where trunc(iod_ordr_Dt) between :c_g_start_date and :c_g_end_date
												) /** Ver 2.1 **/
				GROUP BY FTD_CLM_MTCH_ACCNT 
				UNION ALL
				SELECT 
					 FEC_CLM_MTCH_ACCNT																								MTCH,
					 NVL(SUM(ABS(FEC_CURR_MKT_PRC-FEC_STRK_PRC ) * FEC_EXRC_QTY),0)		SQ_PREM,
					 NVL(SUM(FEC_EXRC_QTY / FEC_MIN_LOT_SIZE),0)                      SQ_LOTS,
					 NVL(SUM(FEC_BRKG_VAL) ,0)                                        SQ_BKRG
				FROM 
							FEC_FO_EXRC_CONF_HSTRY
				WHERE 	((FEC_BRKG_VAL / ( FEC_EXRC_QTY/ FEC_MIN_LOT_SIZE) ) = 1500
				OR      (FEC_BRKG_VAL / ( FEC_EXRC_QTY/ FEC_MIN_LOT_SIZE) ) = 2000 		/**1.1 **/
				OR      (FEC_BRKG_VAL / ( FEC_EXRC_QTY/ FEC_MIN_LOT_SIZE) ) = 2500 		/**1.4 **/
				OR      (FEC_BRKG_VAL / ( FEC_EXRC_QTY/ FEC_MIN_LOT_SIZE) ) = 5000 		/**2.3 **/
      	OR      FEC_BRKG_VAL = 0
      	OR      FEC_BRKG_VAL IS NULL)
				AND 		FEC_MIN_LOT_SIZE  != 0
				AND   	FEC_MIN_LOT_SIZE  IS NOT NULL
				AND   	FEC_PRDCT_TYP  = 'O' 
				AND   	TRUNC(FEC_EXRC_DT) BETWEEN :c_g_start_date AND :c_g_end_date  
				GROUP BY FEC_CLM_MTCH_ACCNT
				) TEMP
		 	WHERE  MTCH = OIS_MATCH_ACNT 
			);
	
  	if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  	{
    	fn_errlog ( c_ServiceName, "S31080", SQLMSG, c_err_msg  );
    	return (-1);
  	}
  
  	if ( ( SQLCODE == NO_DATA_FOUND ) )
  	{
			fn_userlog (c_ServiceName,"II-SQ - NO DATA TO BE PROCESSED ");
    	return (1);
  	}
	}																							/**** Ver 1.6 ****/	
	return (0);
}

int fn_prcs_smry_tbl(void)
{

	DEFLOG3 fn_print_date_time();
	
	fn_userlog (c_ServiceName," - Updating the slab rates into Smry table");
	
	/*New sceheme has to be inserted into EBA for this*/ 

	EXEC SQL
		UPDATE TMP_OPT_INC_SMRY
		SET OIS_PRCNTG = ( 
			SELECT NVL((ISD_INCENT_PER),0.00) 
			FROM INC_SLAB_DTLS  
			WHERE ISD_SCHM_NO = 4
				AND OIS_FRSH_LOTS >= ISD_TURN_FROM
			  AND OIS_FRSH_LOTS <=  ISD_TURN_TO
			  AND ISD_INCENT_PER IS NOT NULL)
		WHERE OIS_ATS_FLG= :c_g_ats_flag;							/**** Ver 1.6 ***/

	if ( SQLCODE == NO_DATA_FOUND )
	{
		fn_userlog (c_ServiceName," - No records updated. Exiting ... ");
		return(1);
	}
	
  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31085", SQLMSG, c_err_msg  );
    return (-1);
  }

	fn_userlog (c_ServiceName,"---------- Row count |%d| ", SQL_ROW_COUNT );
	fn_userlog (c_ServiceName," - Updating the slab rate to 0 where null ");

  EXEC SQL
  UPDATE  TMP_OPT_INC_SMRY
  SET OIS_PRCNTG = 0
	WHERE OIS_PRCNTG is null
	AND   OIS_ATS_FLG = :c_g_ats_flag;						/**** Ver 1.6 ***/
  
  if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
    fn_errlog ( c_ServiceName, "S31090", SQLMSG, c_err_msg  );
    return (-1);
  }

	fn_userlog (c_ServiceName,"---------- Row count |%d| ", SQL_ROW_COUNT );
	
	fn_userlog (c_ServiceName," - Updating Normal Brokerage ");
	
	EXEC SQL
		UPDATE TMP_OPT_INC_SMRY
	  /*SET OIS_NRML_BRKRG   = OIS_FRSH_LOTS *  9500; 		* This 95 has to be fetched from INC PAR */
	  	SET OIS_NRML_BRKRG   = OIS_FRSH_LOTS *  :d_g_normal_percentage * 100
		WHERE OIS_ATS_FLG = :c_g_ats_flag;				/**** Ver 1.6 ***/ 	

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31095", SQLMSG, c_err_msg  );
    return (-1);
  }
	fn_userlog (c_ServiceName,"---------- Row count |%d| ", SQL_ROW_COUNT );
	
	fn_userlog (c_ServiceName," - Updating Offline Brokerage ");
		

	EXEC SQL
    UPDATE TMP_OPT_INC_SMRY
    SET OIS_OFFLINE_BRKRG =                           
  ( SELECT nvl( SUM(MDC_AMT1*100) ,0)
    FROM  MDC_MISC_DR_CR
    WHERE MDC_CLM_MTCH_ACCNT=OIS_MATCH_ACNT
      AND MDC_DR_CR_FLG ='C'
      AND (MDC_FROM_DT) >= :c_g_start_date
      AND (MDC_TO_DT)   <= :c_g_end_date
			AND  MDC_PRDCT_TYP in ( SELECT IAT_ADHOC_TYPE from IAT_INCENTIVE_ADHOC_TYPE where
			IAT_INCENT_NO = (select ITM_INCENT_NO from ITM_INC_TYPE_MSTR where ITM_PRDCT_TYP = 'OPT')))
		WHERE OIS_ATS_FLG = :c_g_ats_flag;					/**** Ver 1.6 ***/
	
  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31100", SQLMSG, c_err_msg  );
    return (-1);
  }
  
  fn_userlog (c_ServiceName,"---------- Row count |%d| ", SQL_ROW_COUNT );

 

/******************************************************************************/
/******************************************************************************/

  fn_userlog (c_ServiceName," - Updating Upfront Brokerage benefit  > 0 ");

  EXEC SQL  
	  UPDATE  TMP_OPT_INC_SMRY
		SET OIS_UPFRONT_BRKRG = ( (OIS_NRML_BRKRG - OIS_OPT_BRKRG ) + OIS_OFFLINE_BRKRG )
		WHERE (OIS_NRML_BRKRG - OIS_OPT_BRKRG ) > 0
		 AND OIS_ATS_FLG = :c_g_ats_flag;         /**** Ver 1.6 ***/					

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31105", SQLMSG, c_err_msg  );
    return (-1);
  }
  
	fn_userlog (c_ServiceName,"---------- Row count (RB >0) %d ", SQL_ROW_COUNT );
	fn_userlog (c_ServiceName," - Updating Upfront Brokerage benefit  <= 0 ");

	EXEC SQL  
	  UPDATE  TMP_OPT_INC_SMRY
		SET OIS_UPFRONT_BRKRG = OIS_OFFLINE_BRKRG
		WHERE (OIS_NRML_BRKRG - OIS_OPT_BRKRG ) <= 0
		AND  OIS_ATS_FLG= :c_g_ats_flag;							/**** Ver 1.6 ***/

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog (c_ServiceName, "S31110", SQLMSG, c_err_msg);
    return (-1);
  }

	fn_userlog (c_ServiceName,"---------- Row count (RB<=0) %d ", SQL_ROW_COUNT );
	
	/*Lots refund needs to be setup before this calc is done - DONE*/
	
/******************************************************************************/
/******************************************************************************/  

	fn_userlog (c_ServiceName," - Updating Incentive amount ");
	
	EXEC SQL  
	  UPDATE  TMP_OPT_INC_SMRY
		SET OIS_INCNT_AMT = OIS_FRSH_LOTS * OIS_PRCNTG * 100
		WHERE OIS_ATS_FLG= :c_g_ats_flag;           /**** Ver 1.6 ***/    
		
  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31115", SQLMSG, c_err_msg  );
    return (-1);
  }
  
  fn_userlog (c_ServiceName,"---------- Row count |%d| ", SQL_ROW_COUNT );
  fn_userlog (c_ServiceName," - Updating Net Incentive Amount ");
  
	EXEC SQL  
	  UPDATE  TMP_OPT_INC_SMRY
		SET OIS_NET_INCNT_AMT = OIS_INCNT_AMT - OIS_UPFRONT_BRKRG /** to show -ve amt **/
	  WHERE OIS_ATS_FLG= :c_g_ats_flag;           /**** Ver 1.6 ***/	
		
  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31120", SQLMSG, c_err_msg  );
    return (-1);
  }

  fn_userlog (c_ServiceName,"---------- Row count |%d| ", SQL_ROW_COUNT );
  fn_userlog (c_ServiceName," - Updating Incentive Refund Amount ");
  

/** Cmmented in Ver 2.5
	
   EXEC SQL  
	  UPDATE  TMP_OPT_INC_SMRY
		SET OIS_INCNT_REFUND_AMT =  OIS_NET_INCNT_AMT + 
	 ( OIS_NET_INCNT_AMT *	 ( :d_g_svc_tax_percentage /100) ), **OIS_INCNT_REFUND_AMT in paise **
	 			OIS_INCNT_DATE=SYSDATE
		 WHERE OIS_ATS_FLG= :c_g_ats_flag;           **** Ver 1.6 ***
		
*****/

   /*** Ver 2.5 Starts****/

 EXEC SQL
    DECLARE inct_cursor CURSOR FOR
            SELECT OIS_MATCH_ACNT,
                   OIS_NET_INCNT_AMT
            FROM   TMP_OPT_INC_SMRY
						WHERE  OIS_ATS_FLG= :c_g_ats_flag;
     
    if ( SQLCODE != 0 )
     {
       fn_errlog( c_ServiceName, "S31125", SQLMSG, c_err_msg  );
     }

  EXEC SQL OPEN inct_cursor;

 for ( ; ; )
  {
   MEMSET(c_mtch_accnt_no);
   d_net_inct_amnt =0.00;

      EXEC SQL
               FETCH inct_cursor
               INTO  :c_mtch_accnt_no,
                     :d_net_inct_amnt;



    if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        break;
      }
      else
      {
        fn_errlog( c_ServiceName, "S31130", SQLMSG, c_err_msg  );
        EXEC SQL CLOSE inct_cursor;
        return (-1);
      }
    }


/** if( fn_inctv_ltst_gst_per ( c_ServiceName, c_mtch_accnt_no, d_net_inct_amnt, &st_ptr_gst_per, c_err_msg) != (-1) ) **/
if( fn_inctv_ltst_gst_per ( c_ServiceName, c_mtch_accnt_no, d_net_inct_amnt, c_g_start_date, c_g_end_date, &st_ptr_gst_per, c_err_msg) != (-1) )
  {

  if ( DEBUG_MSG_LVL_3) /*** Ver 2.5  ***/
    {
      fn_userlog(c_ServiceName,"c_mtch_accnt_no   :%s:",c_mtch_accnt_no);
      fn_userlog(c_ServiceName,"d_net_inct_amnt :%lf:",d_net_inct_amnt);
      fn_userlog(c_ServiceName,"st_ptr_gst_per.d_cgst_amt :%lf:",st_ptr_gst_per.d_cgst_amt);
      fn_userlog(c_ServiceName,"st_ptr_gst_per.d_sgst_amt :%lf:",st_ptr_gst_per.d_sgst_amt);
      fn_userlog(c_ServiceName,"st_ptr_gst_per.d_ugst_amt :%lf:",st_ptr_gst_per.d_ugst_amt);
      fn_userlog(c_ServiceName,"st_ptr_gst_per.d_igst_amt :%lf:",st_ptr_gst_per.d_igst_amt);
      fn_userlog(c_ServiceName,"st_ptr_gst_per.d_gst_amt  :%lf:",st_ptr_gst_per.d_gst_amt);
      fn_userlog(c_ServiceName,"c_gst_isec_state_cd :%s:",st_ptr_gst_per.c_gst_isec_state_cd);
      fn_userlog(c_ServiceName,"c_gst_cust_state_cd :%s:",st_ptr_gst_per.c_gst_cust_state_cd);
    }

    EXEC SQL
     UPDATE  TMP_OPT_INC_SMRY 
      SET   OIS_CGST_AMT = :st_ptr_gst_per.d_cgst_amt,
            OIS_SGST_AMT = :st_ptr_gst_per.d_sgst_amt,
            OIS_UGST_AMT = :st_ptr_gst_per.d_ugst_amt,
            OIS_IGST_AMT = :st_ptr_gst_per.d_igst_amt,
            OIS_TOT_GST_AMT= :st_ptr_gst_per.d_gst_amt,
            OIS_ISEC_STATE_CD=:st_ptr_gst_per.c_gst_isec_state_cd,
            OIS_CUST_STATE_CD=:st_ptr_gst_per.c_gst_cust_state_cd,
            OIS_INCNT_REFUND_AMT = OIS_NET_INCNT_AMT + :st_ptr_gst_per.d_gst_amt,
	 					OIS_INCNT_DATE=SYSDATE
      WHERE OIS_MATCH_ACNT = :c_mtch_accnt_no
			AND		OIS_ATS_FLG= :c_g_ats_flag;

 if ( SQLCODE != 0 )
   {
    fn_errlog ( c_ServiceName, "S31135", SQLMSG, c_err_msg  );
     EXEC SQL CLOSE inct_cursor;
     return (-1);
   }
 }
 else
  {
     fn_errlog ( c_ServiceName, "S31140", SQLMSG, c_err_msg  );
     EXEC SQL CLOSE inct_cursor;
     return (-1);
  } 
}
/**** Ver 2.5 Ends *****/

  fn_userlog (c_ServiceName,"---------- Row count |%d| ", SQL_ROW_COUNT );
			
	DEFLOG3 fn_print_date_time();
	
	return (0);
}

int fn_load_glbl_data(void)
{
	fn_print_date_time();
	fn_userlog (c_ServiceName," Loading Global Data ...  ");

	EXEC SQL
		SELECT IPM_PARAM_VALUE
		INTO :d_g_normal_percentage 
		FROM INC_PARAM_MSTR
		WHERE IPM_PARAM='FNO_OPT_NRML_BRKG';
		
	if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31145", SQLMSG, c_err_msg  );
    return (-1);
  }

/***  Commented Ver 2.5	
	EXEC SQL 
		SELECT IPM_PARAM_VALUE 
		INTO :d_g_svc_tax_percentage
		FROM INC_PARAM_MSTR WHERE IPM_PARAM='SERVICE_TAX';
	
	if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31150", SQLMSG, c_err_msg  );
    return (-1);
	}
******/

	fn_userlog (c_ServiceName," Normal Brokerage Percent |%lf| ",d_g_normal_percentage);
/**	fn_userlog (c_ServiceName," Service Tax Percent  |%lf| ",d_g_svc_tax_percentage);  **Commented in Ver 2.5***/

	return (0);
}

int fn_validate_clnt_ctgy()
{

  fn_print_date_time();
  fn_userlog (c_ServiceName," Discarding clients of invalid categories ");

  EXEC SQL
  DELETE
  FROM TMP_OPT_INC_SMRY 
  WHERE OIS_MATCH_ACNT IN
  (
    SELECT CLM_MTCH_ACCNT
        from
        CLM_CLNT_MSTR
        WHERE
        CLM_CLNT_CTGRY_ID not in (1,6,7,9,10)
  )
	AND OIS_ATS_FLG = :c_g_ats_flag;				/*** Ver 1.6 ***/


  if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31155", SQLMSG, c_err_msg  );
    return (-1);

 }

  fn_userlog (c_ServiceName," Row count %d ", SQL_ROW_COUNT );
  fn_print_date_time();
  fn_userlog (c_ServiceName,"\t\t ... done ");

  return 0;
}

/*************************** Ver 1.2 Starts ********************************/

void fn_exclud_op(void)
{

  fn_userlog(c_ServiceName,"Excluding records which are under option pricing scheme");


  EXEC SQL
       DELETE from TMP_OPT_INC_SMRY
       WHERE OIS_MATCH_ACNT in
       (
       SELECT OTD_CLM_MTCH_ACCNT
       FROM OTD_OPTION_TRD_DTLS_HSTRY
       WHERE OTD_TRD_DT between :c_g_start_date AND :c_g_end_date
			 AND  nvl(OTD_ATS_FLG,'N') = :c_g_ats_flag											/*** Ver 1.6 ***/
       );

  if ( SQLCODE != 0  &&  SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog ( c_ServiceName, "S31160", SQLMSG, c_err_msg  );
    return ;
  }


  fn_userlog (c_ServiceName," Row count  for option pricing %d ", SQL_ROW_COUNT );


}

/*************************** Ver 1.2 Ends ********************************/

/*************************** Ver 1.3 Starts ********************************/

void fn_exclud_prepaid_brk(void)
{

  fn_userlog(c_ServiceName,"Excluding records which are under prepaid brokerage scheme");


  EXEC SQL
       DELETE from TMP_OPT_INC_SMRY
       WHERE OIS_MATCH_ACNT in
       (
       SELECT distinct BUA_MATCH_ACC 
       FROM BUA_BRK_UTIL_AUDIT,TMP_OPT_INC_SMRY 
       WHERE 
			 BUA_MATCH_ACC = OIS_MATCH_ACNT and 
			 BUA_AMT_REDUC_DT between :c_g_start_date AND :c_g_end_date
       )
			 AND OIS_ATS_FLG = :c_g_ats_flag;												/*** Ver 1.6 ***/

  if ( SQLCODE != 0  &&  SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog ( c_ServiceName, "S31165", SQLMSG, c_err_msg  );
    return ;
  }
  fn_userlog (c_ServiceName," Row count  for Prepaid brokerage%d ", SQL_ROW_COUNT );
}

/*************************** Ver 1.3 Ends ********************************/

/*************************** Ver 1.5 Starts ******************************/

/* ############################# STEP- 1 ############################### */
/*************************************************************************
* This function will insert data into TMP_OPI_OPT_PRICING_INC
  from OTD_OPTION_TRD_DTLS_HSTRY table for all match id's and contracts for
  given time period
**************************************************************************/

int fn_crt_tmp_opi_tbl(void)
{
	int i_trnsctn=0;
	fn_userlog(c_ServiceName,"Input ATS Flag is :%c:",c_g_ats_flag);		/** ver 1.6 **/

	EXEC SQL
		DELETE TMP_OPI_OPT_PRICING_INC
		WHERE nvl(OPI_ATS_FLG,'N') = :c_g_ats_flag;					/*** Ver 1.6 ***/

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31170", SQLMSG, c_err_msg  );
    fn_userlog (c_ServiceName,"Error in deleting old records of TMP_OPI_OPT_PRICING_INC ...  ");
    return (-1);
  }

  	if (DEBUG_MSG_LVL_3)
	{
	fn_print_date_time();
	fn_userlog (c_ServiceName,"After Delete old records of TMP_OPI_OPT_PRICING_INC ...STEP-1 <%ld>", SQL_ROW_COUNT);
	}
	

	EXEC SQL
		INSERT INTO TMP_OPI_OPT_PRICING_INC 
		(
			OPI_XCHNG_CD,
			OPI_CLM_MTCH_ACCNT,
			OPI_TRD_DT,
			OPI_SCHM_CODE,
			OPI_TURNOVER,
			OPI_CST_SLAB,
			OPI_CONTRACT_DTLS,
			OPI_BUY_LOTS,
			OPI_SELL_LOTS,
			OPI_CARRY_FWD_LOTS,
			OPI_TOTAL_LOTS,
			OPI_OLD_BRKG,
			OPI_NEW_BRKG_1,
			OPI_NEW_BRKG_2,
			OPI_NEW_BRKG_3,
			OPI_PRCS_FLAG,
			OPI_DISP_FLAG,
			OPI_ATS_FLG										/** Ver 1.6 ***/
		)
		SELECT 
			OTD_XCHNG_CD,
			OTD_CLM_MTCH_ACCNT,
			OTD_TRD_DT,
			OTD_SCHM_CODE,
			NULL,
			NULL,
			(OTD_UNDRLYNG || ' ' || OTD_INDSTK  || ' ' || OTD_EXPRY_DT || ' ' || OTD_PRDCT_TYP || ' ' || OTD_EXER_TYP || ' ' || OTD_OPT_TYP  || ' ' || OTD_STRK_PRC) Cont_Spec,
			OTD_BUY_SUM_QTY,
			OTD_SELL_SUM_QTY,
			abs(OTD_CARRY_FWD_QTY),
			(OTD_BUY_SUM_QTY + OTD_SELL_SUM_QTY),
			abs(nvl(OTD_CARRY_FWD_QTY,0)) * 95 * 100,
			abs(nvl(OTD_CARRY_FWD_QTY,0)) * 45 * 100,
			abs(nvl(OTD_CARRY_FWD_QTY,0)) * 60 * 100,
			NULL,
			'N',
			'N',
			nvl(OTD_ATS_FLG,'N')									/*** Ver 1.6 ***/
			FROM OTD_OPTION_TRD_DTLS_HSTRY,ESM_EXEPTION_ELGBLTY_MSTR		/**** Ver 2.6 ESM introduced **/
			WHERE OTD_TRD_DT between :c_g_start_date and :c_g_end_date
			AND OTD_PRCS_FLG = 'Y'
			AND nvl(OTD_ATS_FLG,'N')=:c_g_ats_flag				 /**** Ver 1.6 ***/
			and ESM_MTCH_ACC=OTD_CLM_MTCH_ACCNT 					 /**** Ver 2.6 ***/
		 	and ESM_ACTIVE='Y'														 /**** Ver 2.6 ***/
			and nvl(ESM_OPT_OPM195_INC,'N') ='Y';										 /**** Ver 2.6 ***/

 	if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31175", SQLMSG, c_err_msg  );
    fn_userlog (c_ServiceName,"Error in inserting data into Temp OPI table <%ld> ", SQLCODE );
    return (-1);
  }
  
  if ( ( SQLCODE == NO_DATA_FOUND ) )
  {
    fn_userlog (c_ServiceName," NO DATA TO BE PROCESSED FOR Option Pricing Incentive ");
    return (1);
  }
	/*** Ver 2.4 Starts ***/
	if( SQL_ROW_COUNT == 0 )
	{
		fn_userlog(c_ServiceName,"No records found to be insert/process");
		return (1);
	}
	/**** Ver 2.4 Ends ***/
  fn_userlog (c_ServiceName," Number of records inserted in temp OPI table  <%ld> ", SQL_ROW_COUNT );
  fn_print_date_time();
  return (0);
}

/************************************************************************************************/
/* ############################# STEP- 2 ############################### */
/*************************************************************************
* This function will update data into TMP_OPI_OPT_PRICING_INC
  with daily turnover & customer slab  for given time period
**************************************************************************/

int fn_upd_tmp_opi(void)
{
	if(c_g_ats_flag == 'N' )								/*** Ver 1.6 ***/
	{	
		EXEC SQL 
			UPDATE TMP_OPI_OPT_PRICING_INC
			SET OPI_TURNOVER = (SELECT SUM ((FTD_STRK_PRC + FTD_EXCTD_RT) * FTD_EXCTD_QTY) TURNOVER
										    FROM FTD_FO_TRD_DTLS_HSTRY 
			    							WHERE FTD_CLM_MTCH_ACCNT = OPI_CLM_MTCH_ACCNT 
			    							AND TRUNC(FTD_TRD_DT) = OPI_TRD_DT   
			    							AND FTD_PRDCT_TYP in ('O','I') /*** Product type 'I' added in Ver 1.9 ***/
												AND NVL(FTD_BRKG_TYPE,'N') <> 'B' 																	/** Ver 2.2 **/
												AND	FTD_ORDR_RFRNC not in 
												( 	select distinct iod_ordr_rfrnc 
														from 		IOD_IGAIN_ORDR_DTLS_HSTRY 
														where 	trunc(iod_ordr_Dt) between :c_g_start_date and :c_g_end_date
												) /** Ver 2.1 **/
											 )
			WHERE OPI_TRD_DT between :c_g_start_date and :c_g_end_date 
			AND OPI_PRCS_FLAG = 'N'
			AND OPI_ATS_FLG =:c_g_ats_flag;							/**** Ver 1.6 **/
	}
	else if(c_g_ats_flag == 'A' )									/*** Ver 1.6 starts **/
	{
		EXEC SQL 
			UPDATE TMP_OPI_OPT_PRICING_INC
			SET OPI_TURNOVER = (SELECT SUM ((FAT_STRIKE_PRC + FAT_EXCTD_RT) * FAT_EXCTD_QTY) TURNOVER
											    FROM FAT_FO_ATS_TRADES_NSE_HSTRY  
			  	  							WHERE FAT_CLM_MTCH_ACCNT = OPI_CLM_MTCH_ACCNT 
			  	  							AND TRUNC(FAT_TRD_DT) = OPI_TRD_DT   
			    								AND FAT_PRDCT_TYP ='O'
												 )
			WHERE OPI_TRD_DT between :c_g_start_date and :c_g_end_date 
			AND OPI_PRCS_FLAG = 'N'
			AND OPI_ATS_FLG =:c_g_ats_flag;							
		
	}																					 	  /** Ver 1.6 Ends **/

	if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
	{
	 	fn_errlog ( c_ServiceName, "S31180", SQLMSG, c_err_msg  );
	 	fn_userlog (c_ServiceName,"Error in updating turnover into TMP_OPI table <%ld> ", SQLCODE );
	  return (-1);
	}

	if (DEBUG_MSG_LVL_3)
	{	
	  fn_userlog (c_ServiceName," After Update of turnover in TMP_OPI table - No of Rows <%ld> ", SQL_ROW_COUNT );
	  fn_print_date_time();	
	}

	EXEC SQL 
		UPDATE TMP_OPI_OPT_PRICING_INC
		SET	OPI_CST_SLAB = (
			CASE 	
			WHEN OPI_TURNOVER >= '10000000000' THEN '10CR'
			ELSE NULL
			END
			)
		WHERE OPI_TRD_DT between :c_g_start_date and :c_g_end_date 
		AND OPI_PRCS_FLAG = 'N'
		AND OPI_ATS_FLG=:c_g_ats_flag;											/**** Ver 1.6 ****/

	if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
	{
	   fn_errlog ( c_ServiceName, "S31185", SQLMSG, c_err_msg  );
	   fn_userlog (c_ServiceName,"Error in updating Slab-10Cr into TMP_OPI table <%ld> ", SQLCODE );
	   return (-1);
	}

	if (DEBUG_MSG_LVL_3)
	{	
	  fn_userlog (c_ServiceName," After Update of Slab-10Cr in TMP_OPI table - No of Rows <%ld> ", SQL_ROW_COUNT );
	  fn_print_date_time();	
	}

	return(0);
}

/***************************************************************************************************/
/* ############################# STEP- 3 ############################### */
/*************************************************************************
* This function will update data into TMP_OPI_OPT_PRICING_INC
  with brokerage as per 195 OPM scheme for given time period
**************************************************************************/

int fn_calc_brkg_195(void)
{
	varchar c_opb_schm_code[10]; 
	int i_opb_carry_fwd_lots = 0;
	double d_opb_carry_fwd_brkg =0;
	int i_counter_1 = 0;

	EXEC SQL
		DELETE FROM TMP_OPB_OPT_PRICING_BRKG;

	if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
	{
		fn_errlog ( c_ServiceName, "S31190", SQLMSG, c_err_msg  );
		fn_userlog (c_ServiceName,"Error in deleting old data from TMP_OPB table <%ld> ", SQLCODE );
		return (-1);
	}
	
	EXEC SQL 
		INSERT INTO TMP_OPB_OPT_PRICING_BRKG 
		     (OPB_SCHM_CODE, 
		      OPB_CARRY_FWD_LOTS)
		SELECT DISTINCT OPI_SCHM_CODE, OPI_CARRY_FWD_LOTS 
		FROM TMP_OPI_OPT_PRICING_INC
		WHERE OPI_TRD_DT between :c_g_start_date and :c_g_end_date ;

	if ( SQLCODE != 0  )
	{
		fn_errlog ( c_ServiceName, "S31195", SQLMSG, c_err_msg  );
		fn_userlog (c_ServiceName,"Error in Inserting carry fwd lots format into TMP_OPB table <%ld> ", SQLCODE );
		return (-1);
	}

	if (DEBUG_MSG_LVL_3)
	{   	    
	  fn_userlog (c_ServiceName," After Inserting carry fwd lots format into TMP_OPB table-No of Rows <%ld> ",SQL_ROW_COUNT );
	  fn_print_date_time();
	}

  /*******************************************************************************************/

	EXEC SQL 
		Declare get_opb_cf_lots CURSOR for
		SELECT OPB_SCHM_CODE, OPB_CARRY_FWD_LOTS
		FROM TMP_OPB_OPT_PRICING_BRKG
		ORDER BY OPB_CARRY_FWD_LOTS;

	if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND )
	{
		fn_userlog (c_ServiceName,"Error in declaring Cursor: get_opb_cf_lots");		
		fn_errlog ( c_ServiceName, "S31200", SQLMSG, c_err_msg  );
		return (-1);				
	}

	EXEC SQL
			OPEN get_opb_cf_lots;

	if(SQLCODE !=0)
	{
		fn_userlog (c_ServiceName,"Error in opening Cursor: get_opb_cf_lots");		
		fn_errlog ( c_ServiceName, "S31205", SQLMSG, c_err_msg  );
		return (-1);				
	}

	while(1)    
	{
		EXEC SQL 	
			FETCH get_opb_cf_lots 
			INTO    :c_opb_schm_code, 
							:i_opb_carry_fwd_lots;

		if(SQLCODE !=0)
		{
			if(SQLCODE == NO_DATA_FOUND)
			{
				if(i_counter_1>0)
				{	 
					fn_userlog (c_ServiceName,"Reached end of records for Cursor- get_opb_cf_lots");		
					break; 
				}
				else
				{
					fn_userlog (c_ServiceName,"Error- No records found during fetching Cursor get_opb_cf_lots");		
					fn_errlog ( c_ServiceName, "S31210", SQLMSG, c_err_msg  );
					EXEC SQL CLOSE get_opb_cf_lots;
					return(-1) ;
				}
			} 		 
			else
			{
				fn_userlog (c_ServiceName,"Error in fetching into for Cursor- get_opb_cf_lots");		
				fn_errlog ( c_ServiceName, "S31215", SQLMSG, c_err_msg  );
				EXEC SQL CLOSE get_opb_cf_lots;
				return(-1) ;
			}
		}

		SETNULL(c_opb_schm_code);
		if (DEBUG_MSG_LVL_3)
		{
			fn_userlog (c_ServiceName,"Val of counter for brkg calc = <%d>",  i_counter_1); 
			fn_userlog (c_ServiceName,"Val of c_opb_schm_code =<%s>,i_opb_carry_fwd_lots =<%d>", c_opb_schm_code.arr, i_opb_carry_fwd_lots); 
		}

		d_opb_carry_fwd_brkg  = fn_calc_schm_brkg (c_opb_schm_code.arr, i_opb_carry_fwd_lots);

	  EXEC SQL 
				UPDATE TMP_OPB_OPT_PRICING_BRKG
			  SET		OPB_CARRY_FWD_BRKG      = :d_opb_carry_fwd_brkg
			  WHERE OPB_SCHM_CODE = :c_opb_schm_code
			  AND OPB_CARRY_FWD_LOTS = :i_opb_carry_fwd_lots;

		if(SQLCODE !=0)
		{
			fn_userlog (c_ServiceName,"Error in updating Brkg val in TMP_OPB_OPT_PRICING_BRKG in While loop ");		
			fn_errlog ( c_ServiceName, "S31220", SQLMSG, c_err_msg  );
			return(-1) ;
		}

		fn_userlog (c_ServiceName,"Val of d_opb_carry_fwd_brkg:<%ld> for Lot:<%d> of Scheme:<%s>",  d_opb_carry_fwd_brkg, i_opb_carry_fwd_lots, c_opb_schm_code.arr); 

		i_counter_1 ++;
	}

	/*****************************************************************************************************/

	EXEC SQL 
		UPDATE TMP_OPI_OPT_PRICING_INC
		SET OPI_NEW_BRKG_3 = (SELECT OPB_CARRY_FWD_BRKG * 100
		      								FROM TMP_OPB_OPT_PRICING_BRKG
			      							WHERE OPB_SCHM_CODE = OPI_SCHM_CODE
			      							AND   OPB_CARRY_FWD_LOTS = OPI_CARRY_FWD_LOTS
												 ),
        OPI_PRCS_FLAG = 'Y',
	OPI_DISP_FLAG = 'Y'
        WHERE OPI_TRD_DT between :c_g_start_date and :c_g_end_date 
				AND OPI_PRCS_FLAG = 'N';

  if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND)
  {
  	fn_userlog (c_ServiceName,"Error in updating Scheme  Brkg val in TMP_OPI_OPT_PRICING_INC  ");		
		fn_errlog ( c_ServiceName, "S31225", SQLMSG, c_err_msg  );
		return(-1) ;
  }

	if (DEBUG_MSG_LVL_3)
	{
		fn_print_date_time();	
		fn_userlog (c_ServiceName,"After Update of brkg as per 195 plan in TMP_OPI table- No of Rows <%ld> ",SQL_ROW_COUNT );
	}
	return(0);
}
/* ******************************************************************************************* */
/* ############################# STEP- 4 ############################### */
/*************************************************************************
* This function will insert data into OPI_OPT_PRICING_INC from TMP_OPI table
**************************************************************************/

int fn_crt_opi_tbl(void)
{
	if (DEBUG_MSG_LVL_3)
	{  
	   fn_print_date_time();	
	   fn_userlog (c_ServiceName,"Delete old records and Update main OPI table for total brokerage and total lots");
  }

	EXEC SQL
		DELETE OPI_OPT_PRICING_INC
		WHERE OPI_FROM_DT = :c_g_start_date 
		AND OPI_TO_DT = :c_g_end_date
		AND nvl(OPI_ATS_FLG,'N') =:c_g_ats_flag;							/*** Ver 1.6 ***/

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31230", SQLMSG, c_err_msg  );
    fn_userlog (c_ServiceName,"Error in deleting old records of OPI_OPT_PRICING_INC ...  ");
    return (-1);
  }

	EXEC SQL 
		INSERT INTO OPI_OPT_PRICING_INC
		(OPI_CLM_MTCH_ACCNT,
		 OPI_FROM_DT,
		 OPI_TO_DT,
		 OPI_SCHM_CODE,
		 OPI_BUY_LOTS,
		 OPI_SELL_LOTS,
		 OPI_CARRY_FWD_LOTS,
		 OPI_TOT_LOTS,
		 OPI_OLD_BRKG,
		 OPI_NEW_BRKG_1,
		 OPI_NEW_BRKG_2,
		 OPI_NEW_BRKG_3,
		 OPI_PRCS_FLAG,
		 OPI_CONF_FLAG,
		 OPI_ATS_FLG														/*** Ver 1.6 ***/
		)
		SELECT 
			OPI_CLM_MTCH_ACCNT,
			:c_g_start_date,
			:c_g_end_date,
			OPI_SCHM_CODE,
			SUM(OPI_BUY_LOTS),
			SUM(OPI_SELL_LOTS),
			SUM(OPI_CARRY_FWD_LOTS),
			SUM(OPI_TOTAL_LOTS),
			SUM(OPI_OLD_BRKG),
			SUM(OPI_NEW_BRKG_1),
			SUM(OPI_NEW_BRKG_2),
			SUM(OPI_NEW_BRKG_3),
			'N',
			'N',
			nvl(OPI_ATS_FLG,'N')												/**** Ver 1.6 ****/
		FROM TMP_OPI_OPT_PRICING_INC
		WHERE OPI_TRD_DT between :c_g_start_date and :c_g_end_date 
		AND   OPI_PRCS_FLAG = 'Y'
		AND   nvl(OPI_ATS_FLG,'N')=:c_g_ats_flag			  /**** Ver 1.6 ***/
		GROUP BY 
			OPI_CLM_MTCH_ACCNT,
			:c_g_start_date,
			:c_g_end_date,
			OPI_SCHM_CODE,
			'N',
			'N',
			'N',
			OPI_ATS_FLG;												/*** Ver 1.6 *****/

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31235", SQLMSG, c_err_msg  );
    fn_userlog (c_ServiceName,"Error in inserting data into OPI table <%ld> ", SQLCODE );
    return (-1);
  }

  if (DEBUG_MSG_LVL_3)
  {	
		fn_userlog (c_ServiceName," - After main insert in OIS table - No of Rows <%ld> ", SQL_ROW_COUNT );
		fn_print_date_time();	
  }

   return(0);
}

/*********************************************************************************************/
/* ############################# STEP- 5 ############################### */
/*************************************************************************
* This function will update data into OPI_OPT_PRICING_INC from TMP_OPI table
  1: Update monthly Turnover
  2: Update Cst slab 
  3: Update final Brokerage as per slab
**************************************************************************/

int fn_upd_opi_tbl(void)
{

   if (DEBUG_MSG_LVL_3)
   {	
		fn_print_date_time();	
		fn_userlog (c_ServiceName," - Before update  in OIS table - No of Rows <%ld> ", SQL_ROW_COUNT );
   }

	 EXEC SQL 
			UPDATE OPI_OPT_PRICING_INC
			SET OPI_TURNOVER = (SELECT nvl(SUM(AMT),0) from
											     	(SELECT distinct temp.OPI_CLM_MTCH_ACCNT mtch_id, temp.OPI_TRD_DT trd_dt, nvl(temp.OPI_TURNOVER,0)  amt
			  	    							 FROM TMP_OPI_OPT_PRICING_INC temp 
			    	  						   WHERE temp.OPI_CLM_MTCH_ACCNT = OPI_CLM_MTCH_ACCNT
														) a 
														WHERE  a.mtch_id = OPI_CLM_MTCH_ACCNT

			   									),
      		OPI_CARRY_FWD_PERC = round( (OPI_CARRY_FWD_LOTS/OPI_TOT_LOTS) * 100, 2)
			WHERE OPI_FROM_DT = :c_g_start_date
			AND OPI_TO_DT  = :c_g_end_date
			AND OPI_PRCS_FLAG = 'N'
			AND OPI_ATS_FLG=:c_g_ats_flag;									/*** Ver 1.6 ***/

  	if ( SQLCODE != 0 )
  	{
    	fn_errlog ( c_ServiceName, "S31240", SQLMSG, c_err_msg  );
    	fn_userlog (c_ServiceName,"Error in updating turnover into OPI table <%ld> ", SQLCODE );
    	return (-1);
  	}

  	if (DEBUG_MSG_LVL_3)
  	{	
			fn_userlog (c_ServiceName," After update OIS table for monthly Turnover:-No of Rows <%ld> ", SQL_ROW_COUNT );
			fn_print_date_time();	
  	}

 		/************************************************************************************************/
		EXEC SQL 
			UPDATE OPI_OPT_PRICING_INC A
			SET  OPI_CST_SLAB =
													(
														CASE 	WHEN OPI_TURNOVER > 100000000000 THEN '100CR'
        										WHEN EXISTS (select 1 from TMP_OPI_OPT_PRICING_INC B where B.opi_cst_slab='10CR' and A.OPI_TURNOVER < 100000000000 and A.OPI_CLM_MTCH_ACCNT = B.OPI_CLM_MTCH_ACCNT) THEN '10CR' /*** Ver 1.8 ***/
														WHEN OPI_CARRY_FWD_PERC  between '0'  and '10' THEN '0-10'
														WHEN (OPI_CARRY_FWD_PERC   > '10' and OPI_CARRY_FWD_PERC <= '15') THEN '10-15'
														WHEN (OPI_CARRY_FWD_PERC   > '15' and OPI_CARRY_FWD_PERC <= '20') THEN '15-20'
														ELSE NULL
														END
													)    
			WHERE OPI_FROM_DT = :c_g_start_date
			AND OPI_TO_DT  = :c_g_end_date
			AND OPI_PRCS_FLAG = 'N'
			AND OPI_ATS_FLG=:c_g_ats_flag;						/*** Ver 1.6 ***/

  	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )	
  	{
    	fn_errlog ( c_ServiceName, "S31245", SQLMSG, c_err_msg  );
    	fn_userlog (c_ServiceName,"Error in updating cst_slab into OPI table <%ld> ", SQLCODE );
    	return (-1);
  	}

    if (DEBUG_MSG_LVL_3)
  	 {	
			fn_userlog (c_ServiceName," After update OPI table for Cst SLAB:-No of Rows <%ld> ", SQL_ROW_COUNT );
			fn_print_date_time();	
  	 }



		EXEC SQL 
			UPDATE OPI_OPT_PRICING_INC
			SET  OPI_CST_SLAB =
					(
					select distinct temp.OPI_CST_SLAB
					FROM TMP_OPI_OPT_PRICING_INC temp
					WHERE OPI_OPT_PRICING_INC.OPI_CLM_MTCH_ACCNT = temp.OPI_CLM_MTCH_ACCNT 
					AND temp.OPI_CST_SLAB is not NULL
					)
			WHERE OPI_FROM_DT = :c_g_start_date
			AND OPI_TO_DT  = :c_g_end_date
			/*AND nvl(OPI_CST_SLAB,'N') <> '100CR' ****/ /*** confirm to remove completely or not ***/
			AND OPI_CST_SLAB is NULL
			AND OPI_PRCS_FLAG = 'N'
			AND OPI_ATS_FLG=:c_g_ats_flag;						/*** Ver 1.6  ****/

  	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )		
  	{
    	fn_errlog ( c_ServiceName, "S31250", SQLMSG, c_err_msg  );
    	fn_userlog (c_ServiceName,"Error in updating cst_slab into OPI table <%ld> ", SQLCODE );
    	return (-1);
  	}

    if (DEBUG_MSG_LVL_3)
  	 {	
			fn_userlog (c_ServiceName," After update OPI table from temp OPI for Cst SLAB:-No of Rows <%ld> ", SQL_ROW_COUNT );
			fn_print_date_time();	
  	 }


 /************************************************************************************************/

		EXEC SQL 
			UPDATE OPI_OPT_PRICING_INC
			SET OPI_FINAL_BRKG = 
			(
				CASE WHEN OPI_CST_SLAB = '100CR' THEN OPI_NEW_BRKG_3
		     		 WHEN OPI_CST_SLAB = '10CR'  THEN OPI_NEW_BRKG_3					 
		     		 WHEN OPI_CST_SLAB = '0-10'  THEN OPI_NEW_BRKG_3
				 WHEN OPI_CST_SLAB = '10-15' THEN DECODE( sign(OPI_NEW_BRKG_1 - OPI_NEW_BRKG_3) , '1' , OPI_NEW_BRKG_1 , '-1', OPI_NEW_BRKG_3, OPI_NEW_BRKG_3) 
				 WHEN OPI_CST_SLAB = '15-20' THEN DECODE( sign(OPI_NEW_BRKG_2 - OPI_NEW_BRKG_3) , '1' , OPI_NEW_BRKG_2 , '-1', OPI_NEW_BRKG_3, OPI_NEW_BRKG_3) 
		     		 ELSE OPI_OLD_BRKG
		     END
			)
			WHERE OPI_FROM_DT = :c_g_start_date
			AND OPI_TO_DT  = :c_g_end_date
			AND OPI_PRCS_FLAG = 'N'
			AND OPI_ATS_FLG=:c_g_ats_flag;								/*** Ver 1.6 ***/


	  if ( SQLCODE != 0 )
 	  {
   	 fn_errlog ( c_ServiceName, "S31255", SQLMSG, c_err_msg  );
   	 fn_userlog (c_ServiceName,"Error in updating Final Brokerage into OPI table <%ld> ", SQLCODE );
   	 return (-1);
  	}

    if (DEBUG_MSG_LVL_3)
   	{	
			fn_userlog (c_ServiceName," After update Final Brokerage into OPI table:-No of Rows <%ld> ", SQL_ROW_COUNT );
			fn_print_date_time();	
    }

  /***Ver 2.5 starts***/
     
 EXEC SQL
    DECLARE inct_cursor_opt CURSOR FOR
            SELECT OPI_CLM_MTCH_ACCNT,
                   NVL(OPI_OLD_BRKG, 0),
                   nvl(OPI_FINAL_BRKG,0)
            FROM   OPI_OPT_PRICING_INC
						WHERE  OPI_FROM_DT = :c_g_start_date
						AND OPI_TO_DT  = :c_g_end_date
						AND OPI_PRCS_FLAG = 'N'
						AND OPI_ATS_FLG=:c_g_ats_flag;
      
 if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31260", SQLMSG, c_err_msg  );
     return (-1);
  }

 EXEC SQL OPEN inct_cursor_opt;

  for ( ; ; )
  {
    MEMSET(c_mtch_accnt_no);
   d_old_brkg_amt = 0.0;
   d_fnl_brkg_amt = 0.0;

      EXEC SQL
               FETCH inct_cursor_opt
               INTO  :c_mtch_accnt_no,
                     :d_old_brkg_amt,
                     :d_fnl_brkg_amt;



    if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        break;
      }
      else
      {
        fn_errlog( c_ServiceName, "S31265", SQLMSG, c_err_msg  );
        EXEC SQL CLOSE inct_cursor_opt;
        return (-1);
      }
    }

 MEMSET(st_ptr_gst_per);     
 
/**** Ver 2.5 Ends *****/    

 
/** if( fn_inctv_ltst_gst_per ( c_ServiceName, c_mtch_accnt_no,  d_old_brkg_amt , &st_ptr_gst_per, c_err_msg) != (-1) )*** Ver 2.5  ***/
if( fn_inctv_ltst_gst_per ( c_ServiceName, c_mtch_accnt_no,  d_old_brkg_amt , c_g_start_date, c_g_end_date, &st_ptr_gst_per, c_err_msg) != (-1) )/*** Ver 2.5  ***/
  {

  if ( DEBUG_MSG_LVL_3) /*** Ver 2.5  ***/
    {
      fn_userlog(c_ServiceName,"c_mtch_accnt_no   :%s:",c_mtch_accnt_no);
      fn_userlog(c_ServiceName,"d_old_brkg_amt :%lf:",d_old_brkg_amt);
      fn_userlog(c_ServiceName,"st_ptr_gst_per.d_cgst_amt :%lf:",st_ptr_gst_per.d_cgst_amt);
      fn_userlog(c_ServiceName,"st_ptr_gst_per.d_sgst_amt :%lf:",st_ptr_gst_per.d_sgst_amt);
      fn_userlog(c_ServiceName,"st_ptr_gst_per.d_ugst_amt :%lf:",st_ptr_gst_per.d_ugst_amt);
      fn_userlog(c_ServiceName,"st_ptr_gst_per.d_igst_amt :%lf:",st_ptr_gst_per.d_igst_amt);
      fn_userlog(c_ServiceName,"st_ptr_gst_per.d_gst_amt  :%lf:",st_ptr_gst_per.d_gst_amt);
      fn_userlog(c_ServiceName,"c_gst_isec_state_cd :%s:",st_ptr_gst_per.c_gst_isec_state_cd);
      fn_userlog(c_ServiceName,"c_gst_cust_state_cd :%s:",st_ptr_gst_per.c_gst_cust_state_cd);
    }

	EXEC SQL 
			UPDATE OPI_OPT_PRICING_INC
			SET 
/***  Commented in Ver 2.5***
      OPI_OLD_SRC_TX = round(OPI_OLD_BRKG * :d_g_svc_tax_percentage /100),
			OPI_NEW_SRC_TX = round(OPI_FINAL_BRKG * :d_g_svc_tax_percentage /100),  ****/
	    OPI_OLD_CGST_AMT = :st_ptr_gst_per.d_cgst_amt,   /*** Ver 2.5  ***/ 
      OPI_OLD_SGST_AMT = :st_ptr_gst_per.d_sgst_amt,   /*** Ver 2.5  ***/
      OPI_OLD_UGST_AMT = :st_ptr_gst_per.d_ugst_amt,   /*** Ver 2.5  ***/
      OPI_OLD_IGST_AMT = :st_ptr_gst_per.d_igst_amt,   /*** Ver 2.5  ***/
      OPI_OLD_TOT_GST_AMT  = :st_ptr_gst_per.d_gst_amt,  /*** Ver 2.5  ***/
      OPI_ISEC_STATE_CD = :st_ptr_gst_per.c_gst_isec_state_cd,  /*** Ver 2.5  ***/
      OPI_CUST_STATE_CD = :st_ptr_gst_per.c_gst_cust_state_cd   /*** Ver 2.5  ***/
			/**    OPI_PRCS_FLAG = 'Y' *** Ver 2.5 **/
			WHERE OPI_CLM_MTCH_ACCNT = :c_mtch_accnt_no
			AND OPI_FROM_DT = :c_g_start_date
			AND OPI_TO_DT  = :c_g_end_date
			AND OPI_PRCS_FLAG = 'N'
			AND OPI_ATS_FLG=:c_g_ats_flag;


	  if ( SQLCODE != 0 )
 	  {
   	 fn_errlog ( c_ServiceName, "S31270", SQLMSG, c_err_msg  );
   	 fn_userlog (c_ServiceName,"Error in updating Service tax into OPI table <%ld> ", SQLCODE );
   	 return (-1);
    }	
  }
 else
  {
     fn_errlog ( c_ServiceName, "S31275", SQLMSG, c_err_msg  );
     EXEC SQL CLOSE inct_cursor_opt;
     return (-1);
  }

  
    /***Ver 2.5 starts***/
 
   MEMSET(st_ptr_gst_per);

 /** if( fn_inctv_ltst_gst_per ( c_ServiceName, c_mtch_accnt_no, d_fnl_brkg_amt  , &st_ptr_gst_per, c_err_msg) != (-1) ) ***Ver 2.5***/
 if( fn_inctv_ltst_gst_per ( c_ServiceName, c_mtch_accnt_no, d_fnl_brkg_amt  , c_g_start_date, c_g_end_date, &st_ptr_gst_per, c_err_msg) != (-1) ) /***Ver 2.5***/
  {
   
  if ( DEBUG_MSG_LVL_3) /*** Ver 2.5  ***/
    {
      fn_userlog(c_ServiceName,"c_mtch_accnt_no   :%s:",c_mtch_accnt_no);
      fn_userlog(c_ServiceName,"d_fnl_brkg_amt :%lf:",d_fnl_brkg_amt);
      fn_userlog(c_ServiceName,"st_ptr_gst_per.d_cgst_amt :%lf:",st_ptr_gst_per.d_cgst_amt);
      fn_userlog(c_ServiceName,"st_ptr_gst_per.d_sgst_amt :%lf:",st_ptr_gst_per.d_sgst_amt);
      fn_userlog(c_ServiceName,"st_ptr_gst_per.d_ugst_amt :%lf:",st_ptr_gst_per.d_ugst_amt);
      fn_userlog(c_ServiceName,"st_ptr_gst_per.d_igst_amt :%lf:",st_ptr_gst_per.d_igst_amt);
      fn_userlog(c_ServiceName,"st_ptr_gst_per.d_gst_amt  :%lf:",st_ptr_gst_per.d_gst_amt);
      fn_userlog(c_ServiceName,"c_gst_isec_state_cd :%s:",st_ptr_gst_per.c_gst_isec_state_cd);
      fn_userlog(c_ServiceName,"c_gst_cust_state_cd :%s:",st_ptr_gst_per.c_gst_cust_state_cd);
    }

 
    EXEC SQL
      UPDATE OPI_OPT_PRICING_INC
      SET
      OPI_NEW_CGST_AMT = :st_ptr_gst_per.d_cgst_amt,
      OPI_NEW_SGST_AMT = :st_ptr_gst_per.d_sgst_amt,
      OPI_NEW_UGST_AMT = :st_ptr_gst_per.d_ugst_amt,
      OPI_NEW_IGST_AMT = :st_ptr_gst_per.d_igst_amt,
      OPI_NEW_TOT_GST_AMT  = :st_ptr_gst_per.d_gst_amt,
      OPI_PRCS_FLAG = 'Y'
      WHERE OPI_CLM_MTCH_ACCNT = :c_mtch_accnt_no
			AND OPI_FROM_DT = :c_g_start_date
      AND OPI_TO_DT  = :c_g_end_date
      AND OPI_PRCS_FLAG = 'N'  
      AND OPI_ATS_FLG=:c_g_ats_flag;


    if ( SQLCODE != 0 )
    {
     fn_errlog ( c_ServiceName, "S31280", SQLMSG, c_err_msg  );
     fn_userlog (c_ServiceName,"Error in updating Service tax into OPI table <%ld> ", SQLCODE );
     return (-1);
    }
  }
  else
  {
     fn_errlog ( c_ServiceName, "S31285", SQLMSG, c_err_msg  );
     EXEC SQL CLOSE inct_cursor_opt;
     return (-1);
  }

}
  /**** Ver 2.5 Ends *****/

    if (DEBUG_MSG_LVL_3)
   	{	
		/***Commented in Ver 2.5***	fn_userlog (c_ServiceName," After update Service Tax <%lf> into OPI table:-No of Rows <%ld> ",d_g_svc_tax_percentage,  SQL_ROW_COUNT ); ******/
			fn_print_date_time();	
    }

}
/* ####################################################################################### */
/************************************************************************
 This function will calculate the brokerage with OPM scheme,
 as per the parameters passed for scheme code adn lots
************************************************************************/
int fn_calc_schm_brkg(char * p_schm_code, int p_carry_fwd_lot )
{   /************     fn_calc_schm_brkg Function Start  *************/

	EXEC SQL BEGIN DECLARE SECTION;

	int i_osd_seq_no = 0;       
	int i_osd_lwr_rng_lotsz = 0;
	varchar c_osd_upr_rng_lotsz[10];
	int i_osd_brkr_rng_rate = 0;
	varchar c_osd_chrg_base[30];

	int i_osd_lwr_rng_lotsz_1 = 0; 
	varchar c_osd_upr_rng_lotsz_1[10];
	int i_osd_brkr_rng_rate_1 = 0; 
	varchar c_osd_chrg_base_1[30];

	int i_osd_lwr_rng_lotsz_2 = 0; 
	int i_osd_upr_rng_lotsz_2 = 0;
	varchar c_osd_upr_rng_lotsz_2[10];
	int i_osd_brkr_rng_rate_2 = 0; 
	varchar c_osd_chrg_base_2[30];

	int i_obc_above_qty = 0;
	int i_obc_below_qty = 0;
	int i_obc_inrange_qty = 0;

	int i_carry_fwd_brkg_1 = 0;
	int i_carry_fwd_brkg   = 0;

	EXEC SQL END DECLARE SECTION;


	fn_userlog (c_ServiceName,"Val of p_carry_fwd_lot inside fn <%d>", p_carry_fwd_lot);		
	fn_userlog (c_ServiceName,"Val of p_schm_code inside fn <%s>", p_schm_code);

	if(p_carry_fwd_lot != 0)     
	{     /************     Main if with qty > 0 for brokerage calculation Start *************/

	 MEMSET(c_osd_chrg_base);  
	 SETLEN(c_osd_chrg_base);  

	 EXEC SQL 
					 SELECT OSD_SEQ_NO, 
									OSD_LWR_RNG_LOTSZ, 
									OSD_UPR_RNG_LOTSZ, 
									OSD_BRKR_RNG_RATE ,
									OSD_CHRG_BASE    
						INTO	:i_osd_seq_no, 
									:i_osd_lwr_rng_lotsz, 
									:c_osd_upr_rng_lotsz, 
									:i_osd_brkr_rng_rate,
									:c_osd_chrg_base 
						FROM  OSD_OPTION_SCHEME_DTLS
						WHERE OSD_SCHM_CODE = :p_schm_code
						AND    OSD_LWR_RNG_LOTSZ <= :p_carry_fwd_lot
					  AND   ( instr(OSD_UPR_RNG_LOTSZ,'Above') > 0 OR to_char(OSD_UPR_RNG_LOTSZ) >= :p_carry_fwd_lot); 


   if(SQLCODE !=0)
   {
	  fn_userlog (c_ServiceName,"Error in Selecting from OSD_OPTION_SCHEME_DTLS");		
	  fn_errlog ( c_ServiceName, "S31290", SQLMSG, c_err_msg  );
	  return(-1) ;
	 }

	 SETNULL(c_osd_upr_rng_lotsz);
	 SETNULL(c_osd_chrg_base); 
	 i_carry_fwd_brkg_1 = 0;

	 while(i_osd_seq_no > 2)
	 {          /****   While for OSD seq Start  *********/

	    i_carry_fwd_brkg_1 = i_carry_fwd_brkg_1 + ( (p_carry_fwd_lot - i_osd_lwr_rng_lotsz + 1) * i_osd_brkr_rng_rate );
	    i_osd_seq_no = i_osd_seq_no -1;

		  if(i_osd_seq_no != 2)	
		  {
					EXEC SQL 
								  SELECT OSD_LWR_RNG_LOTSZ, 
												 OSD_UPR_RNG_LOTSZ, 
												 OSD_BRKR_RNG_RATE
								  INTO	 :i_osd_lwr_rng_lotsz_1, 
												 :c_osd_upr_rng_lotsz_1, 
											   :i_osd_brkr_rng_rate_1 
									FROM   OSD_OPTION_SCHEME_DTLS
									WHERE  OSD_SCHM_CODE = :p_schm_code
								  AND    OSD_SEQ_NO = :i_osd_seq_no;

					if(SQLCODE !=0)
				  {
						fn_userlog (c_ServiceName,"Error in Selecting from OSD_OPTION_SCHEME_DTLS in While loop");		
						fn_errlog ( c_ServiceName, "S31295", SQLMSG, c_err_msg  );
						return(-1) ;
					}

					SETNULL(c_osd_upr_rng_lotsz_1);

					i_carry_fwd_brkg_1 = i_carry_fwd_brkg_1 +  ((atoi(c_osd_upr_rng_lotsz_1.arr) - i_osd_lwr_rng_lotsz_1 + 1) * i_osd_brkr_rng_rate_1);

					i_osd_seq_no = i_osd_seq_no -1;
			}

	 }  /****   While for OSD seq >2 End *********/

	
	 /*********** After While loop for Seq no >2 fixed Brkg for Seq-2 is added into i_carry_fwd_brkg_1 *************/				

	 MEMSET(c_osd_chrg_base_2);  
	 SETLEN(c_osd_chrg_base_2);  

	 if (i_osd_seq_no < 3 ) 
	 {
	  EXEC SQL 
				   SELECT OSD_LWR_RNG_LOTSZ, 
									OSD_UPR_RNG_LOTSZ, 
									OSD_BRKR_RNG_RATE,
									OSD_CHRG_BASE  
					 INTO   :i_osd_lwr_rng_lotsz, 
									:i_osd_upr_rng_lotsz_2, 
									:i_osd_brkr_rng_rate_2,
									:c_osd_chrg_base_2 
					 FROM   OSD_OPTION_SCHEME_DTLS
					 WHERE  OSD_SCHM_CODE = :p_schm_code
								  AND OSD_SEQ_NO = :i_osd_seq_no; 

	  if(SQLCODE !=0)
	  {
	   fn_userlog (c_ServiceName,"Error in Selecting from OSD_OPTION_SCHEME_DTLS for OSD_SEQ_NO = '2'");		
	   fn_errlog ( c_ServiceName, "S31300", SQLMSG, c_err_msg  );
	   return(-1) ;
	  }

	  SETNULL(c_osd_chrg_base_2);  
	  if (strcmp(c_osd_chrg_base_2.arr, "PerLot")== 0)
	  {
	   i_carry_fwd_brkg = i_carry_fwd_brkg_1 + i_osd_brkr_rng_rate_2 * p_carry_fwd_lot ;	
	  }
	  if (strcmp(c_osd_chrg_base_2.arr, "PerOrderTraded")== 0)
	  {
	   i_carry_fwd_brkg = i_carry_fwd_brkg_1 + i_osd_brkr_rng_rate_2 ;	
	  }

} 
	
}     /*******  Main if with qty > 1 for brokerage calculation END ***********/

if (DEBUG_MSG_LVL_3)
{
fn_userlog (c_ServiceName,"Val of i_carry_fwd_brkg before passing back= <%d>",  i_carry_fwd_brkg); 
}

return(i_carry_fwd_brkg);

}

/*************************** Ver 1.5 Ends ******************************/

/******************************************************************************/
/******************************************************************************/
                                                                                
int fn_bat_init ( int argc, char *argv[] )                                      
{
  fn_var = BAT_OPT_INCT;                                                    
  return 0;                                                                     
}
                                                                                
void fn_bat_term ( int argc, char *argv[] )                                     
{
  return;                                                                       
}

int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
  return 0;
}

/******************************************************************************/

void fn_print_date_time()
{
  EXEC SQL BEGIN DECLARE SECTION;
  char c_date_time[30];
  EXEC SQL END   DECLARE SECTION;
  
  EXEC SQL
  SELECT
  to_char(SYSDATE , 'dd-Mon-yyyy--hh24:mi:ss')
  INTO :c_date_time
  from dual;

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31305", SQLMSG, c_err_msg  );
    return ;
  }

  trim(c_date_time);
  fn_userlog (c_ServiceName," ----------------  Time : %s  ---------------- ",c_date_time);  
}

/******************************** Ver 1.7 Starts ******************************/

int fn_include_exclude_schm()
{
	fn_userlog(c_ServiceName,"Updating TMP_OPT_INC_SMRY table");

  EXEC SQL
  UPDATE TMP_OPT_INC_SMRY
  SET OIS_SCHM_ELG_FLG =(
                          SELECT IMSM_OPT_INC
                          FROM   INSD_INFO_NTST_SCHEME_DTLS,IMSM_INFO_MATCH_SCHEME_MASTER
                          WHERE  INSD_FNO_SCHEMECODE = IMSM_SCHEMECODE
                          AND    INSD_MATCH_ACCOUNT_NO = TMP_OPT_INC_SMRY.OIS_MATCH_ACNT
                         ),
  		OIS_EXEP_ELG_FLG =(
                          SELECT decode(count(1),'1','Y','N')
                          FROM   ESM_EXEPTION_ELGBLTY_MSTR
                          WHERE ESM_MTCH_ACC = TMP_OPT_INC_SMRY.OIS_MATCH_ACNT
                          AND      ESM_OPT_INC = 'Y'
                          AND      ESM_ACTIVE = 'Y'
                     		)
  WHERE OIS_FROM_DT = :c_g_start_date
  AND   OIS_TO_DT = :c_g_end_date;


  if (SQLCODE != 0)
  {
    fn_errlog ( c_ServiceName, "S31310", SQLMSG, c_err_msg  );
    return(-1) ;
  }

	EXEC SQL
  UPDATE TMP_OPT_INC_SMRY
  SET OIS_FINAL_ELG_FLG=DECODE(OIS_SCHM_ELG_FLG,'Y','Y',(decode(OIS_EXEP_ELG_FLG,'Y','Y','N'))),
			OIS_FINAL_INC_AMT=DECODE((DECODE(OIS_SCHM_ELG_FLG,'Y','Y',OIS_EXEP_ELG_FLG)),'Y',OIS_INCNT_REFUND_AMT,0)
  WHERE OIS_FROM_DT = :c_g_start_date
  AND   OIS_TO_DT = :c_g_end_date;

  if (SQLCODE != 0)
  {
    fn_errlog ( c_ServiceName, "S31315", SQLMSG, c_err_msg  );
    return(-1) ;
  }

  fn_userlog (c_ServiceName," Total records updated %d ", SQL_ROW_COUNT );

  return(0);
}


/*****************************  Ver 1.7 Ends  *********************************/

char *trim(char *str)
{
  
  int i;
  for (i=0;i<strlen(str);i++)
    if (str[i]==' ') str[i]='\0';

  return(str);
}
                                                                                
/******************************************************************************/
/*  END OF CODE                                                               */
/******************************************************************************/


