/*************************************************************************************/
/*    Program               : bat_fo_mail                                            */
/*                                                                                   */
/*    Input                 : Exchange_code                                          */
/*                                                                                   */
/*    Output                :                                                        */
/*                                                                                   */
/*    Description           : This batch program is sending mails to the customers   */
/*                                                                                   */
/*    Log                   : 1.0  10-Aug-2007 Sandeep Patil/ Kunal Jadav            */
/* 													:	1.1	 04-Apr-2008 Sandeep IBM Migration Changes	       */
/*																																									 */
/*************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <userlog.h>
#include <Usysflds.h>
#include <fn_ddr.h>
#include <fo.h>
#include <fn_battmpt.h>
#include <fn_log.h>								/*** Ver 1.1 ***/			

#include <fn_tuxlib.h>						/*** Ver 1.1 ***/
#include <fn_read_debug_lvl.h>		/*** Ver 1.1 ***/

#define MEMSET(A) memset(&A,'\0',sizeof(A))

void BAT_FO_MAIL( int argc, char* argv[] )
{
	char c_ServiceName[33];
	char c_err_msg[256];
	int i_trnsctn;
	int i_cntr;
  int i;
  int i_returncode;
  int i_count = 0;
  int i_option = 0;
  int i_mail_status = 0;
  int i_success_mails_sent = 0;
  int i_mails_failed_other = 0;
  int i_invalid_mails =0; 
	int i_loop;
  char  c_event[256];
	char  *null_ptr = 0;
  char  c_trd_dt[23];
	char 	c_ip_dt[23];
  char  c_mtch_accnt[11];
  char  c_usr_nm[31];
  char  c_email_addrss[100];
  char  c_email_addrss2[100]; 
  char  c_command[200]; 
  char  c_path[100];
  char  c_temp[50];
	char  c_opt[2];
  char  **ptr_temp;

	strcpy( c_ServiceName, "BAT_FO_MAIL");
	
	if( argc != 6)
	{
		fn_userlog( c_ServiceName, "Usage: bat_fo_mail <ini> <Exchange_cd> <NA> <1:Fresh 2:All> <trd_dt> ");
		return;
	}

	if( ((argv[4][0]== '1') || (argv[4][0]== '2')) && argv[5] ==  '\0')
	{
		fn_userlog( c_ServiceName, "Trade date is missing");
		return;
	}

	INITBATDBGLVL(argv[0]);			 /*** Ver 1.1 ***/

	strcpy(c_opt, argv[4]);
	i_option = atoi(c_opt);

	if( DEBUG_MSG_LVL_3 )     /*** Ver 1.1 ***/
	{
		fn_userlog( c_ServiceName, "The copied i_opt is : %d", i_option);
		fn_userlog( c_ServiceName, "Copying the trade date");
	}

	strcpy( c_ip_dt, argv[5] );

  /*Select the sysdate as trade date for comparision with input date */

  EXEC SQL
  	SELECT  to_char(sysdate, 'dd-Mon-yyyy')
    INTO    :c_trd_dt
    FROM    dual;

  if(SQLCODE != 0)
  {
		fn_userlog(c_ServiceName,"Failed To Get System Date");  
		fn_errlog( c_ServiceName, "S31005",SQLMSG, c_err_msg);
   	return;
  }

  rtrim(c_trd_dt);

	if( DEBUG_MSG_LVL_3 )     /*** Ver 1.1 ***/
	{
    fn_userlog(c_ServiceName,"Option Selected is :%d:", i_option);
    fn_userlog(c_ServiceName,"Input Trade Date :%s:", c_ip_dt);
		fn_userlog(c_ServiceName,"Current Trade Date :%s:", c_trd_dt);
    fn_userlog(c_ServiceName,"Starting the mail sending process........");
  }
	
	if(tuxgetenv("FO_HOME") == NULL)
  {
    fn_errlog(c_ServiceName, "S31010",LIBMSG,c_err_msg);
		return;
  }

  strcpy(c_path, tuxgetenv("FO_HOME"));

	if( DEBUG_MSG_LVL_3 )     /*** Ver 1.1 ***/
	{
		fn_userlog( c_ServiceName, "i_option1: %d",i_option);
	}

	if(i_option == 1 || i_option == 2)
  {
		i_cntr = 0;

		EXEC SQL
			SELECT count(*)
			INTO   :i_cntr
			FROM 	 fsm_fo_snd_mail
			WHERE	 fsm_trd_dt = :c_trd_dt;
	
		if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  	{
			fn_errlog( c_ServiceName, "S31015",SQLMSG, c_err_msg);
			return;
  	}	

		if( DEBUG_MSG_LVL_3 )     /*** Ver 1.1 ***/
		{
			fn_userlog( c_ServiceName, "The total no. of records1 : %d", i_cntr);
		}

		if(SQLCODE != NO_DATA_FOUND && i_cntr > 0)
  	{
			/****************** Option to be checked ************************/

			if(i_option == 1)
			{
    		if( DEBUG_MSG_LVL_3 )     /*** Ver 1.1 ***/
				{
					fn_userlog( c_ServiceName, "Mail data already collected");
				}
				return;
			}
		}
		/*SN*/
		

		i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  	if( i_trnsctn == -1 )
  	{
    	fn_errlog(c_ServiceName, "S31020", LIBMSG, c_err_msg);
    	fn_userlog(c_ServiceName, "Error while beginning the transaction");
    	return;
  	}	
	

		EXEC SQL
				DELETE FROM fsm_fo_snd_mail
				WHERE  fsm_mail_sent_flg = 'Y';
	
		if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog(c_ServiceName, "S31025", SQLMSG,c_err_msg);
      fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
      return;
    }
		

		if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  	{
    	fn_errlog(c_ServiceName, "S31030", SQLMSG, c_err_msg);
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	return;
  	}
		

		/*	compare trade date with the current trade date	*/

		if( strcmp( c_trd_dt, c_ip_dt) == 0)	 
		{												
			fn_userlog(c_ServiceName, "Fetching data from the live tables");

			i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
    	if( i_trnsctn == -1 )
    	{
      	fn_errlog(c_ServiceName, "S31035", LIBMSG, c_err_msg);
      	fn_userlog(c_ServiceName, "Error while beginning the transaction");
      	return;
    	}

			EXEC SQL
		 		INSERT INTO fsm_fo_snd_mail
 				(
					fsm_clm_mtch_accnt,
					fsm_prdct_typ,
					fsm_undrlyng,
					fsm_expry_dt,
					fsm_exer_typ,
					fsm_opt_typ,
					fsm_strk_prc,
					fsm_ordr_flw,
	 				fsm_ordr_rfrnc,
          fsm_trd_dt,
          fsm_lmt_mrkt_sl_flg,
          fsm_ordr_tot_qty,
          fsm_lmt_rt,
          fsm_stp_lss_tgr,
          fsm_mdfctn_cntr,
          fsm_rqst_typ,
          fsm_plcd_stts,
          fsm_ack_tm,
          fsm_xchng_cncld_qty,
					fsm_mail_sent_flg
				)
				(
				SELECT
    			fod_clm_mtch_accnt,
   				fod_prdct_typ,
   				fod_undrlyng,
   				fod_expry_dt,
   				fod_exer_typ,
   				fod_opt_typ,
   				fod_strk_prc,
   				fod_ordr_flw,
    			fxb_ordr_rfrnc,
   				fxb_mod_trd_dt,
   				fxb_lmt_mrkt_sl_flg,
   				fxb_ordr_tot_qty,
   				fxb_lmt_rt,
   				fxb_stp_lss_tgr,
   				fxb_mdfctn_cntr,
   				fxb_rqst_typ,
   				fxb_plcd_stts,
   				fxb_ack_tm,
   				fxb_xchng_cncld_qty,
	 				'N'
				FROM  	fxb_fo_xchng_book, fod_fo_ordr_dtls
				WHERE   fod_ordr_rfrnc = fxb_ordr_rfrnc
				AND 		FXB_RQST_TYP != 'T'
				AND 		fod_ordr_stts != 'Y'
				);

			if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName, "S31040", SQLMSG,c_err_msg);
        fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
        return;
      }

			EXEC SQL
			INSERT INTO fsm_fo_snd_mail
			(
				fsm_clm_mtch_accnt,
				fsm_ordr_rfrnc,
				fsm_prdct_typ,
				fsm_undrlyng,
				fsm_expry_dt,
				fsm_exer_typ,
				fsm_opt_typ,
				fsm_strk_prc,
				fsm_trd_dt,		
				fsm_xchng_trd_no,
				fsm_exctd_qty,
				fsm_exctd_rt,
				fsm_eba_trd_ref,
				fsm_ordr_flw,
				fsm_rqst_typ,
				fsm_plcd_stts,
				fsm_mail_sent_flg
			)
			(
			SELECT 		
				ftd_clm_mtch_accnt,
				ftd_ordr_rfrnc,
				ftd_prdct_typ,
				ftd_undrlyng,
				ftd_expry_dt,
				ftd_exer_typ,
				ftd_opt_typ,
				ftd_strk_prc,
				ftd_trd_dt,		
				ftd_xchng_trd_no,
				ftd_exctd_qty,
				ftd_exctd_rt,
				ftd_eba_trd_ref,
				ftd_trd_flw,
				'T',
				'T',
				'N'
			FROM		ftd_fo_trd_dtls
			);

			if(SQLCODE != 0)
      {
      	fn_errlog(c_ServiceName, "S31045", SQLMSG,c_err_msg);
        fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
        return;
      }


			EXEC SQL
			UPDATE  fsm_fo_snd_mail
        SET (
          fsm_lmt_mrkt_sl_flg,	
          fsm_ordr_tot_qty,	
          fsm_lmt_rt,		
          fsm_stp_lss_tgr,
					fsm_ack_tm
        ) =
        (
        SELECT
          fod_lmt_mrkt_sl_flg,
          fod_ordr_tot_qty,
          fod_lmt_rt,
          fod_stp_lss_tgr,
					fod_ord_ack_tm
        FROM  fod_fo_ordr_dtls
        WHERE fod_ordr_rfrnc = fsm_ordr_rfrnc
        )
				WHERE fsm_xchng_trd_no is not NULL
				;		


			if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog(c_ServiceName, "S31050", SQLMSG,c_err_msg);
				fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
        return;
      }
		
			if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    	{
      	fn_errlog(c_ServiceName, "S31055", SQLMSG, c_err_msg);
      	fn_userlog(c_ServiceName, "Error in commit [%s] exiting..", c_err_msg);
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	return;
    	} 

		}		/* if ends */


		else if ((strcmp( c_trd_dt, c_ip_dt) != 0) && i_option == 2		)		/* pick up data from the history table */
		{
			i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
    	if( i_trnsctn == -1 )
    	{
      	fn_errlog(c_ServiceName, "S31060", LIBMSG, c_err_msg);
      	fn_userlog(c_ServiceName, "Error while beginning the transaction");
      	return;
    	}

    	EXEC SQL
     		INSERT INTO fsm_fo_snd_mail
      	(
        	fsm_clm_mtch_accnt,
          fsm_prdct_typ,
          fsm_undrlyng,
          fsm_expry_dt,
          fsm_exer_typ,
          fsm_opt_typ,
          fsm_strk_prc,
          fsm_ordr_flw,
          fsm_ordr_rfrnc,
          fsm_trd_dt,
          fsm_lmt_mrkt_sl_flg,
          fsm_ordr_tot_qty,
          fsm_lmt_rt,
          fsm_stp_lss_tgr,
          fsm_mdfctn_cntr,
          fsm_rqst_typ,
          fsm_plcd_stts,
          fsm_ack_tm,
          fsm_xchng_cncld_qty,
          fsm_mail_sent_flg
				)
				(
				SELECT
    			fod_clm_mtch_accnt,
   				fod_prdct_typ,
   				fod_undrlyng,
   				fod_expry_dt,
   				fod_exer_typ,
   				fod_opt_typ,
   				fod_strk_prc,
   				fod_ordr_flw,
    			fxb_ordr_rfrnc,
   				fxb_mod_trd_dt,
   				fxb_lmt_mrkt_sl_flg,
   				fxb_ordr_tot_qty,
   				fxb_lmt_rt,
   				fxb_stp_lss_tgr,
   				fxb_mdfctn_cntr,
   				fxb_rqst_typ,
   				fxb_plcd_stts,
   				fxb_ack_tm,
   				fxb_xchng_cncld_qty,
   				'N'
				FROM   fxb_fo_xchng_book_hstry, fod_fo_ordr_dtls_hstry
				WHERE  fod_ordr_rfrnc = fxb_ordr_rfrnc
				AND    fxb_rqst_typ != 'T'
				AND    fod_ordr_stts != 'Y'
				AND 	 fxb_mod_trd_dt = to_date(:c_ip_dt, 'dd-mon-yyyy')
				);

			if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName, "S31065", SQLMSG,c_err_msg);
        fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
        return;
      }

		EXEC SQL
      INSERT INTO fsm_fo_snd_mail
      (
        fsm_clm_mtch_accnt,
        fsm_ordr_rfrnc,
        fsm_prdct_typ,
        fsm_undrlyng,
        fsm_expry_dt,
        fsm_exer_typ,
        fsm_opt_typ,
        fsm_strk_prc,
        fsm_trd_dt,
        fsm_xchng_trd_no,
        fsm_exctd_qty,
        fsm_exctd_rt,
        fsm_eba_trd_ref,
        fsm_ordr_flw,
        fsm_rqst_typ,
        fsm_plcd_stts,
        fsm_mail_sent_flg
      )
      (
      SELECT
        ftd_clm_mtch_accnt,
        to_char(ftd_ordr_rfrnc),
        ftd_prdct_typ,
        ftd_undrlyng,
        ftd_expry_dt,
        ftd_exer_typ,
        ftd_opt_typ,
        ftd_strk_prc,
        ftd_trd_dt,
        ftd_xchng_trd_no,
        ftd_exctd_qty,
        ftd_exctd_rt,
        to_char(ftd_eba_trd_ref),
        ftd_trd_flw,
        'T',
        'T',
        'N'
      FROM    ftd_fo_trd_dtls_hstry
      WHERE   trunc(ftd_trd_dt) = to_date(:c_ip_dt, 'dd-mon-yyyy')
      );

				if(SQLCODE != 0)
        {
        	fn_errlog(c_ServiceName, "S31070", SQLMSG,c_err_msg);
          fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
          return;
        }

			EXEC SQL
      UPDATE  fsm_fo_snd_mail
        SET (
          fsm_lmt_mrkt_sl_flg,
          fsm_ordr_tot_qty,
          fsm_lmt_rt,
          fsm_stp_lss_tgr,
          fsm_ack_tm
        ) =
        (
        SELECT
          fod_lmt_mrkt_sl_flg,
          fod_ordr_tot_qty,
          fod_lmt_rt,
          fod_stp_lss_tgr,
          fod_ord_ack_tm
        FROM  fod_fo_ordr_dtls_hstry
        WHERE fod_ordr_rfrnc = fsm_ordr_rfrnc
        )
        WHERE fsm_xchng_trd_no is not NULL
        ;	

        if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
        {
          fn_errlog(c_ServiceName, "S31075", SQLMSG,c_err_msg);
          fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
          return;
        }

				fn_userlog(c_ServiceName, "Fetching data from the history table.");
				if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    		{
       		fn_errlog(c_ServiceName, "S31080", SQLMSG, c_err_msg);
       		fn_userlog(c_ServiceName, "Error in commit [%s] exiting..", c_err_msg);
       		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       		return;
    		} 

		}   /* second copy */
	}



	EXEC SQL
  	SELECT  count(distinct(fsm_clm_mtch_accnt||'*'||fsm_trd_dt||'*'))
    INTO  	:i_cntr
    FROM 		fsm_fo_snd_mail 
    WHERE   fsm_mail_sent_flg != 'Y';

  if(SQLCODE != 0)
  {
	 	fn_errlog(c_ServiceName, "S31085", SQLMSG,c_err_msg);
    return;
  }

  EXEC SQL
  	DECLARE c_mail CURSOR FOR
    SELECT  distinct(fsm_clm_mtch_accnt||'*'||fsm_trd_dt||'*')
    FROM  	fsm_fo_snd_mail
    WHERE   fsm_mail_sent_flg != 'Y';

    
	if(SQLCODE != 0)
  {
		fn_errlog(c_ServiceName, "S31090", SQLMSG,c_err_msg);
	 	fn_userlog(c_ServiceName,"Failed In Cursor");
    return;
  }

	if( DEBUG_MSG_LVL_3 )     /*** Ver 1.1 ***/
	{
    fn_userlog(c_ServiceName,"The number of mails to be sent are :%d:",i_cntr);
  }

			
	ptr_temp = (char **)malloc(sizeof(char *) * i_cntr);

  for(i = 0; i < i_cntr; i++)
    ptr_temp[i] = (char *)malloc(sizeof(char) * 50);

  EXEC SQL
    OPEN  c_mail;

  i_loop = 0;

  while(1)
  {
    EXEC SQL
      FETCH c_mail
      INTO  :c_temp;

    if(SQLCODE != 0)
    {
      if(SQLCODE == NO_DATA_FOUND)
      {
        EXEC SQL CLOSE c_mail;
        break;
      }
      EXEC SQL CLOSE c_mail;
			
			fn_errlog(c_ServiceName, "S31095", SQLMSG,c_err_msg);
      return;
    }

    strcpy((char *)ptr_temp[i_loop], c_temp);
    i_loop++;

  }/*End of While loop */

		
	EXEC SQL CLOSE c_mail;

	for(i = 0; i < i_loop; i++)
  {
    if( DEBUG_MSG_LVL_3 )     /*** Ver 1.1 ***/
		{
      fn_userlog(c_ServiceName,"The string is :%s:", ptr_temp[i]);
    }

    strcpy(c_mtch_accnt, strtok((char *)ptr_temp[i], "*"));
    strcpy(c_trd_dt, strtok(null_ptr, "*"));

    rtrim(c_mtch_accnt);
    rtrim(c_trd_dt);

  	if( DEBUG_MSG_LVL_3 )     /*** Ver 1.1 ***/
		{
      fn_userlog(c_ServiceName,"Match Account   :%s:", c_mtch_accnt);
      fn_userlog(c_ServiceName,"Trade Date  :%s:", c_trd_dt);
    }

    MEMSET(c_usr_nm);
    MEMSET(c_email_addrss);
    MEMSET(c_email_addrss2);
								
		
	  /*Get the user id, username and email id for the customer*/

    EXEC SQL
      SELECT  usr_usr_nm,
              usr_email_addrss,
              NVL(usr_email_addrss2,' ')  
      INTO  :c_usr_nm,
            :c_email_addrss,
            :c_email_addrss2     
      FROM  usr_user_master, uac_usr_accnts
      WHERE usr_usr_id = uac_usr_id
      AND   uac_clm_mtch_accnt = :c_mtch_accnt;

    if(SQLCODE != 0)
    {
			fn_errlog(c_ServiceName, "S31100", SQLMSG,c_err_msg);
			fn_userlog(c_ServiceName,"Failed To Get Mail Id");  
      return;
    }

    rtrim(c_usr_nm);
    rtrim(c_email_addrss);
    rtrim(c_email_addrss2); 

    if( DEBUG_MSG_LVL_3 )     /*** Ver 1.1 ***/
		{
      fn_userlog(c_ServiceName,"User Name  :%s:", c_usr_nm);
      fn_userlog(c_ServiceName,"Primary Email  :%s:", c_email_addrss);
      fn_userlog(c_ServiceName,"Secondary Email Address  :%s:", c_email_addrss2);  
    }
	
	
	 	/** Condition for validiating  e-mail address. **/

    if(strcmp(c_email_addrss2," ")!=0)
    {
      if(strcmp(c_email_addrss2, "Enter @ Valid Email ID.") == 0 ||
         strcmp(c_email_addrss2, "enter @ valid email id.") == 0 ||
         strcmp(c_email_addrss2, "xyz@.") == 0 ||
         strcmp(c_email_addrss2, "xyz@xyz.com") == 0 ||  
         strcmp(c_email_addrss2, "xyz@.com") == 0 ||    
         strchr(c_email_addrss2,'@')==NULL || strchr(c_email_addrss2,'.')==NULL )
       {
         fn_userlog(c_ServiceName,"%s", c_event);
         strcpy(c_email_addrss2, " ");
       }
    }

   
    if(strcmp(c_email_addrss, "Enter @ Valid Email ID.") == 0 ||
       strcmp(c_email_addrss, "enter @ valid email id.") == 0 ||
       strcmp(c_email_addrss, "xyz@.") == 0 ||
       strcmp(c_email_addrss, "xyz@xyz.com") == 0 ||        
       strcmp(c_email_addrss, "xyz@.com") == 0 ||          
       strchr(c_email_addrss,'@')==NULL || strchr(c_email_addrss,'.')==NULL )
    	{
      	i_invalid_mails++;  
      	fn_userlog(c_ServiceName,"%s", c_event);
    	}

		else
    {
      /*Call the script to send the mail*/

      sprintf(c_command, "ksh %s/fod_mailer.sh %s %s \"%s\" \"%s\" \"%s\"",
                c_path, c_mtch_accnt, c_trd_dt, c_usr_nm, c_email_addrss,c_email_addrss2);

      
			/********Trap the return value of the mail sending script*********/


      i_mail_status = system(c_command);
      MEMSET(c_command);
      /*sprintf(c_command, "/usr/bin/rm /tmp/%s*",c_mtch_accnt);*/
      system(c_command);


      /*********** Begining the transaction *************/
				
			i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
    	if( i_trnsctn == -1 )
    	{
      	fn_errlog(c_ServiceName, "S31105", LIBMSG, c_err_msg);
      	fn_userlog(c_ServiceName, "Error while beginning the transaction");
      	return;
    	}

      if(i_mail_status == 0)
      {
      	i_success_mails_sent++;
        if(i_success_mails_sent % 100 == 0)
        {
        	fn_userlog(c_ServiceName,":%d: mails successfully sent.", i_success_mails_sent);
        }
      }
			 else
      {
        fn_userlog(c_ServiceName,"Mail sending failed for Match account :%s:.",c_mtch_accnt);
      }

      EXEC SQL
        UPDATE	fsm_fo_snd_mail
        SET fsm_mail_sent_flg = decode( :i_mail_status,0,'Y','F')
        WHERE fsm_clm_mtch_accnt = :c_mtch_accnt
        AND trunc(fsm_trd_dt) = :c_trd_dt;

      if(SQLCODE != 0)
      {
			  fn_errlog(c_ServiceName, "S31110", SQLMSG,c_err_msg);
        fn_userlog(c_ServiceName,"Failed To Update Flag ");
        fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
        return;
      }


      /*********** Commiting transaction.************/

			if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
      	{
					fn_errlog(c_ServiceName, "S31115", SQLMSG, c_err_msg);
          fn_userlog(c_ServiceName, "Error in commit [%s] exiting..", c_err_msg);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          return;
        }
    }/*end of else*/

	  i_count++;

  } /* End of for loop*/

  if(i_count == 0)
  {
    fn_userlog(c_ServiceName,"No records processed.");
  }
  else
  {
    fn_userlog(c_ServiceName," :%d: records processed.", i_count);
    fn_userlog(c_ServiceName," :%d: mails to be sent.",i_cntr);
    fn_userlog(c_ServiceName," :%d: mails sucessfully sent.",i_success_mails_sent);
  }

  /**  sending  mail send report to specified IDs **/
  i_mails_failed_other = i_count - i_success_mails_sent - i_invalid_mails ;

  sprintf(c_command,"ksh %s/fod_mailer_report.sh %s %d %d %d %d", c_path,c_trd_dt,i_count,
  i_success_mails_sent,i_invalid_mails,i_mails_failed_other);
  system(c_command);


  if( DEBUG_MSG_LVL_3 )     /*** Ver 1.1 ***/
	{
    fn_userlog(c_ServiceName,"Finished sending mails.");
  }

  for(i = 0; i < i_cntr; i++)
  {
    tpfree((char*)ptr_temp[i]);
  }

  tpfree(*ptr_temp);
 		
}
int fn_bat_init ( int argc, char *argv[] )
	{
  	fn_var = BAT_FO_MAIL;
  	return 0;
	}

void fn_bat_term ( int argc, char *argv[] )
	{
  	return;
	}

int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
	{
  	return 0;
	}

