/******************************************************************
* Service name :  BAT_CANCEL_FP                                   *
*                                                                 *
* Description  :  This Batch Program cancels all Future Plus      *
*                 orders in the given pipe.                       *
*                                                                 *
* Input        :  Exchange Code                                   *
							 :  Pipe Id                                         *
*                                                                 *
* Output      :                                                   *
*                                                                 *
* Log         :   11-Mar-2008 Initial Release  - Vidyayini Krish  *
* Log         :   13-Jun-2008 Revamp					 - Shailesh|Sandeep *
* Log Ver 1.2 :   01-Mar-2013 Game Simulator   - Sachin Birje     *
******************************************************************/
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <fml_rout.h>
#include <fn_session.h>
#include <string.h>
#include <fn_read_debug_lvl.h>
#include <unistd.h>           /*** Ver 1.2 ***/

void BAT_CANCEL_GAME_FP ( int argc, char *argv[] )
{
	long int li_tot_rcrds;
  int 	   i_ch_val;
  int 		 i_trnsctn;
	int      i_order_in_queue_exists;
  long int li_cnt;
	long     l_rec_cnt = 0;
	long     l_cnt = 0;
	long     l_run_no = 0;
  char 		 c_msg[256];
  char 		 c_ServiceName [ 33 ];
  char 		 c_err_msg [ 256 ];
  char 		 c_rout_str [ 4 ];
	char     c_rqst_typ;
	char     c_svc_name[ 30 ];
	FBFR32   *ptr_fml_buf;

	EXEC SQL INCLUDE "table/ffp_fo_futures_pstn.h";
	EXEC SQL INCLUDE "table/fod_fo_ordr_dtls.h";
	EXEC SQL INCLUDE "table/usr_user_master.h";
	EXEC SQL INCLUDE "table/clm_clnt_mstr.h";

  EXEC SQL BEGIN DECLARE SECTION;
   char     c_exg_stts ;
  EXEC SQL END DECLARE SECTION;

  strcpy ( c_ServiceName, argv[0] );
	INITBATDBGLVL(c_ServiceName);

  sprintf ( c_msg, "Batch process %s started", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  strcpy ( c_msg, "Creating data. Please wait ... " );
	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	if( argc < 5 )
  {
    fn_bat_pst_msg ( c_ServiceName, "Invalid Number of Arguments", c_tag );
		return;
  }

		fn_userlog ( c_ServiceName, " 1 Req for cancellation placed for all underlying and all pipe" );
	memset(sql_fod_pipe_id,'\0',sizeof(sql_fod_pipe_id));
	memset(sql_ffp_clm_mtch_accnt,'\0',sizeof(sql_ffp_clm_mtch_accnt));			/**Ver 1.1 **/
	memset(sql_fod_ordr_rfrnc,'\0',sizeof(sql_fod_ordr_rfrnc));							/**Ver 1.1 **/
	memset(sql_fod_xchng_cd,'\0',sizeof(sql_fod_xchng_cd));
	memset(sql_ffp_undrlyng,'\0',sizeof(sql_ffp_undrlyng));
		fn_userlog ( c_ServiceName, " 2 Req for cancellation placed for all underlying and all pipe" );
	
/*	SETNULL(sql_ffp_expry_dt);											*/												/**Ver 1.1 **/

  strcpy( sql_fod_xchng_cd, argv[2] );
	strcpy( sql_fod_pipe_id, argv[3] );
	strcpy( sql_ffp_undrlyng,argv[4] );

		fn_userlog ( c_ServiceName, " 3 Req for cancellation placed for all underlying and all pipe" );
	rtrim(sql_fod_pipe_id);
	rtrim(sql_fod_xchng_cd);
	rtrim(sql_ffp_undrlyng);

	if( (strcmp(sql_ffp_undrlyng,"A") == 0) && (strcmp(sql_fod_pipe_id,"A") == 0) )
	{
		c_rqst_typ = FPEOS_ALL_UND_ALL_PIPE;	
		strcpy ( c_msg, "Req for cancellation placed for all underlying and all pipe" );
	  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );	
		fn_userlog ( c_ServiceName, "Req for cancellation placed for all underlying and all pipe" );
	}

	else if( (strcmp(sql_ffp_undrlyng,"A") != 0) && (strcmp(sql_fod_pipe_id,"A") == 0) )
	{
		c_rqst_typ = FPEOS_UND_ALL_PIPE;	
		sprintf ( c_msg, "Req for cancellation placed for underlying :%s: and all pipe", sql_ffp_undrlyng );
		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		fn_userlog ( c_ServiceName, "Req for cancellation placed for :%s: and all pipes", sql_ffp_undrlyng );
	}

	else if( (strcmp(sql_ffp_undrlyng,"A") == 0) && (strcmp(sql_fod_pipe_id,"A") != 0) )
	{
	  c_rqst_typ = FPEOS_ALL_UND_PIPE;
		sprintf ( c_msg, "Req for cancellation placed for all underlying and pipe :%s:", sql_fod_pipe_id );
		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		fn_userlog ( c_ServiceName, "Req for cancellation placed for all underlyng and pipe :%s:", sql_fod_pipe_id );
	}

	else if( (strcmp(sql_ffp_undrlyng,"A") != 0) && (strcmp(sql_fod_pipe_id,"A") != 0) )
	{
		c_rqst_typ = FPEOS_UNDRLYNG_PIPE;
		sprintf ( c_msg, "Req for cancellation placed for underlying :%s: and pipe :%s:", sql_ffp_undrlyng, sql_fod_pipe_id );
		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		fn_userlog ( c_ServiceName, "Req for cancellation placed for underlying :%s: and pipe :%s:", sql_ffp_undrlyng, sql_fod_pipe_id );
	}

	else
	{
		fn_userlog(c_ServiceName,"Please enter valid inputs");
		strcpy(c_msg, "System error. Contact system support" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		return;
	}

	if( strcmp(sql_fod_pipe_id,"A") == 0 )
	{
		strcpy ( sql_fod_pipe_id,"%" );
	}
	if( strcmp(sql_ffp_undrlyng,"A") == 0)
	{
		strcpy( sql_ffp_undrlyng,"%" );
	}

  sql_fod_prdct_typ = 'P';

	EXEC SQL
       SELECT  exg_crrnt_stts
       INTO    :c_exg_stts
       FROM    exg_xchng_mstr
       WHERE   exg_xchng_cd = :sql_fod_xchng_cd
       AND     exg_mkt_typ  = 'D';

  if( SQLCODE != 0 )
  {
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    fn_errlog( c_ServiceName, "S31005", SQLMSG, c_err_msg );
    return;
  }

  if( c_exg_stts != EXCHANGE_OPEN )
  {
    strcpy ( c_msg, "Exchange should be open for running cancellation of Future Plus orders" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    fn_errlog( c_ServiceName, "B28520", DEFMSG, c_err_msg );
    return;
  }

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
     	strcpy ( c_msg, "System error. Contact system support" );
     	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
     	fn_errlog(c_ServiceName, "S31010", LIBMSG, c_err_msg );
     	return ;
  }	
	EXEC SQL
			 UPDATE mtm_appln_stts
			 SET    mtm_can_req = 'Y',
							mtm_roll_stts = 'N',
							mtm_can_sqr_off = 'Y'										/**Ver 1.1 ***/
			 WHERE  mtm_xchng_cd = :sql_fod_xchng_cd
			 AND    mtm_pipe_id LIKE :sql_fod_pipe_id;

			
	if( SQLCODE != 0 )
 	{
     	strcpy ( c_msg, "System error. Contact system support" );
     	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     	fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg );
     	return;
 	} 

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
 	{
     	strcpy ( c_msg, "System error. Contact system support" );
     	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     	fn_errlog( c_ServiceName, "S31020",LIBMSG,c_err_msg);
     	return;
 	}


  ptr_fml_buf = fn_create_rs (  c_ServiceName,
                                c_err_msg,
                                "SFO_GT_CANFP",
                                 TPNOTIME,
                                 5,
                                 FFO_XCHNG_CD, ( char * )sql_fod_xchng_cd,
                                 FFO_PRDCT_TYP, (char * )&sql_fod_prdct_typ,
                                 FFO_RQST_TYP, (char *)&c_rqst_typ,
																 FFO_UNDRLYNG,(char *)sql_ffp_undrlyng,
																 FFO_PIPE_ID,(char *)sql_fod_pipe_id);
  if ( ptr_fml_buf == NULL )
  {
    fn_errlog( c_ServiceName, "S31025", LIBMSG, c_err_msg );
    return;
  }	

	fn_userlog ( c_ServiceName," Returned from get service , creating record set");

	li_tot_rcrds = fn_reccnt_rs ( ptr_fml_buf,
                                c_ServiceName,
                                c_err_msg,
                                FFO_EBA_MTCH_ACT_NO);
  if ( li_tot_rcrds == -1 )
  {
    fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg );
    fn_dstry_rs ( ptr_fml_buf );
    return;
  }

  strcpy ( c_msg, "Data created." );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  sprintf ( c_msg, "Total records = %ld", li_tot_rcrds );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  for ( li_cnt=1; li_cnt<=li_tot_rcrds; li_cnt++ )
	{
	  i_ch_val = fn_getnxt_rs ( ptr_fml_buf,
                              c_ServiceName,
                              c_err_msg,
                              8,
                              FFO_EBA_MTCH_ACT_NO, ( char * ) sql_ffp_clm_mtch_accnt, NULL,
                              FFO_XCHNG_CD, ( char * )sql_fod_xchng_cd, NULL,
                              FFO_PRDCT_TYP, ( char * )&sql_fod_prdct_typ, NULL,
                              FFO_CTGRY_INDSTK, ( char * )&sql_ffp_indstk, NULL,
                              /**Commented in Ver 1.1 FFO_CNTRCT_TAG, ( char * )&sql_ffp_cntrct_tag,		**/
                              FFO_UNDRLYNG, ( char * )sql_ffp_undrlyng, NULL,
                              FFO_ORDR_RFRNC, ( char * )sql_fod_ordr_rfrnc, NULL,		/**Ver 1.1 **/
															FFO_EXPRY_DT, (char * )sql_ffp_expry_dt.arr, NULL,
															FFO_PIPE_ID, ( char * )sql_fod_pipe_id, NULL);

		if ( i_ch_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31035", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_buf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }

    sprintf ( c_msg, "Processing record %ld of %ld", li_cnt, li_tot_rcrds );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
	fn_userlog ( c_ServiceName," STEP 1");

    i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                  c_err_msg,
                                  "sfr_gt_canfp",
                                  li_cnt,
                                  li_tot_rcrds );
    if ( i_ch_val == -1 )
    {
      fn_errlog( c_ServiceName, "S31040", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_buf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }

	fn_userlog ( c_ServiceName," STEP 2");
		rtrim(sql_ffp_clm_mtch_accnt);
		rtrim(sql_fod_ordr_rfrnc);					/**Ver 1.1 ***/
		rtrim(sql_fod_xchng_cd);
		rtrim(sql_ffp_undrlyng);
		rtrim(sql_fod_pipe_id);

	fn_userlog ( c_ServiceName," STEP 3");
		sql_ffp_expry_dt.len = strlen((char *)sql_ffp_expry_dt.arr);

	fn_userlog ( c_ServiceName," STEP 4");
	fn_userlog ( c_ServiceName," STEP 5");
	  strcpy((char *)sql_fod_remarks.arr,"EOS System placed Cancellation");
	fn_userlog ( c_ServiceName," STEP 6");
		sql_fod_remarks.len = strlen((char *)sql_fod_remarks.arr);
	fn_userlog ( c_ServiceName," STEP 7");

		memset(c_svc_name,'\0',sizeof(c_svc_name));
		strcpy( c_svc_name,"SFO_PRCS_CANFP");
	fn_userlog ( c_ServiceName," STEP 8");

	  /** call to SFO_ORD_ROUT is done to get the Pipe id for   **/
    /** creating the DDR string in the service SFO_PRCS_CANFP **/

		fn_userlog ( c_ServiceName,"MATCH ACCOUNT IS :%s:",sql_ffp_clm_mtch_accnt );
		fn_userlog ( c_ServiceName,"EXCHANGE CODE IS :%s:",sql_fod_xchng_cd );
		fn_userlog ( c_ServiceName,"PRODUCT TYPE IS :%c:",sql_fod_prdct_typ );
		fn_userlog ( c_ServiceName,"UNDERLYNG IS :%s:",sql_ffp_undrlyng );
		fn_userlog ( c_ServiceName,"INDEX-STOCK IS :%c:",sql_ffp_indstk );
		fn_userlog ( c_ServiceName,"CONTRACT TAG IS :%c:",sql_ffp_cntrct_tag );
		fn_userlog ( c_ServiceName,"REMARKS IS :%s:",sql_fod_remarks.arr );
		fn_userlog ( c_ServiceName,"SERVICENAME IS :%s:",c_svc_name );
		fn_userlog ( c_ServiceName,"Order Rfrnc is:%s:",sql_fod_ordr_rfrnc);
		fn_userlog ( c_ServiceName,"TAG IS :%s:",c_tag );
		fn_userlog ( c_ServiceName,"RECORD NO IS :%ld:",li_cnt );
		fn_userlog ( c_ServiceName,"PIPE IS IS :%s:",sql_fod_pipe_id );
		fn_userlog ( c_ServiceName,"Expiry Date is :%s:",sql_ffp_expry_dt.arr );

		
		fn_init_ddr_pop ( sql_fod_pipe_id,TRADING_SECTION,F_CS);
		fn_cpy_ddr( c_rout_str );

		fn_userlog ( c_ServiceName,"ROUT STRING IS :%s:",c_rout_str );
	
	  i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                    c_err_msg,
                                    "SFO_ORD_ROUT",
                                    0,
                                    13,		
                                  	FFO_XCHNG_CD, ( char * )sql_fod_xchng_cd,
                                  	FFO_EBA_MTCH_ACT_NO,(char *)sql_ffp_clm_mtch_accnt,
                                  	FFO_PRDCT_TYP, ( char * )&sql_fod_prdct_typ,
                                  	FFO_UNDRLYNG, ( char * )sql_ffp_undrlyng,
                                  	FFO_CTGRY_INDSTK, ( char * )&sql_ffp_indstk,
                                  	/**Commented in Ver 1.1 FFO_CNTRCT_TAG, ( char * )&sql_ffp_cntrct_tag,		**/
                                  	FFO_ORDR_RFRNC, ( char * )sql_fod_ordr_rfrnc,	/**Ver 1.1 **/	
                                  	FFO_IMTM_RMRKS, ( char * )sql_fod_remarks.arr,
                                  	FFO_SVC_NAME, (char*)c_svc_name,
                                  	FFO_BAT_TAG, ( char * )c_tag,
                                  	FFO_REC_NO, ( char * )&li_cnt,
																		FFO_EXPRY_DT, (char * )sql_ffp_expry_dt.arr,
																		FFO_PIPE_ID, ( char * )sql_fod_pipe_id,
																		FFO_ROUT_CRT, ( char *)c_rout_str);

		if ( i_ch_val == -1 )
    {
      fn_errlog( c_ServiceName, "S31045", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_buf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }
 
    sleep(1);  /*** Sleep(1) second is introduced for Game simulator ***/ 

	}	

	fn_dstry_rs ( ptr_fml_buf );

  sprintf ( c_msg, "Batch process %s ended", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  return;
}

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_CANCEL_GAME_FP;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}


int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}
