/********************************************************************************************************/
/*  Program             : BAT_CANSQ_SIMTM																																*/
/*  Log                 : 1.0     19-Apr-2011     																											*/
/*  Log                 : 1.4     18-Jun-2013     																											*/
/*  Log                 : 1.5     25-Feb-2016     																											*/
/*  Log                 : 1.6     20-Jun-2016     																											*/
/*  Log                 : 1.8     15-Jul-2022     																											*/
/********************************************************************************************************/
/*  1.0   -   New Release                                                                               */
/*  1.1   -   MEMSET Input String and NVL in FTQ Fetch - 29-Mar-2012  (Navina D.)                       */
/*        -   Bug Fix For Decimal Strike Prices                                                         */
/*  1.2   -   Exchange Code Handling    - 02-Apr-2012  (Navina D.)                                      */
/*  1.3   -   FNO BSE SPAN Changes | Sachin Birje                                                       */
/*  1.4   -   SPAN Bug Changes for reading string  | Mahesh Shinde																			*/
/*  1.5   -   Cancellation of Pending order - 25-Feb-2016 - Tanmay W																		*/
/*  1.6   -   Cancellation of intraday & LimitNeg orders only  | Tanmay W.       					              */
/*  1.7   -   Query_optimization                              | Tanmay W.                               */
/*  1.8   -   SPAN_BOD_MRGN_CR-ISEC14-172812        (Sachin Birje)                                      */
/*  1.9   -   CR-ISEC14-171371 changes              (Suchita Dabir)                                      */
/********************************************************************************************************/
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <string.h>   
#include <stdlib.h>  
#include <fml_rout.h> 
#include <fn_read_debug_lvl.h>  
#include <fn_span_lib.h>
#include <fn_session.h>
#include <math.h>

int fn_mark_unmark( char *c_ServiceName,
										char *c_xchng_cd, 
										char * c_match_str,
										char *c_err_msg,
										char *argv[],
										int argc);

int fn_check_am_mm(	char *c_ServiceName,
									 char *c_clm_mtch_acnt, 
									 char *c_xchng_cd,
									 char *c_undrlyng,
									 char *c_err_msg);

void BAT_CANSQ_SIMTM ( int argc, char *argv[] )
{
  int i_ch_val;
  int i_trnsctn;
  int i_cnt=0;
  int i_rec_exists=0;

  long int li_cnt;
	long int li_tot_rcrds;

  char c_rqst_typ;
  char c_indstk;
  char c_exg_extnd_stts;  

  char c_msg[256];
  char c_ServiceName [ 33 ];
  char c_svc_name [ 33 ];
  char c_err_msg [ 256 ];
  char c_und_str [ 400 ];
  char c_match_str [ 400 ];
  char c_clm_mtch_acnt [ 11 ];
  char c_undrlyng [ 7 ];
  char c_imtm_remarks [ 256 ];
  char c_rout_str [ 4 ];
  char c_run_mode[2];

  FBFR32 *ptr_fml_buf;

  EXEC SQL BEGIN DECLARE SECTION;
    long int l_report_no;

    char  c_exg_stts ;
    char c_xchng_cd [ 4 ];
  EXEC SQL END DECLARE SECTION;

  strcpy ( c_ServiceName, argv[0] );

  INITBATDBGLVL(argv[0]);

  sprintf ( c_msg, "Batch process %s started", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  strcpy ( c_msg, "Creating data. Please wait ... " );

	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	if ( argc < 6	)
	{
		fn_bat_pst_msg ( c_ServiceName, "Invalid Number of Arguments", c_tag );
    exit(0);
	}

	strcpy( c_xchng_cd, argv[2] );

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"Exchange Code :%s:",c_xchng_cd);
	}

	EXEC SQL
		SELECT  EXG_CRRNT_STTS,
						EXG_EXTND_MRKT_STTS   
		INTO    :c_exg_stts,
						:c_exg_extnd_stts    
		FROM    EXG_XCHNG_MSTR
		WHERE   EXG_XCHNG_CD = :c_xchng_cd
		AND     EXG_MKT_TYP  = 'D';

	if( SQLCODE != 0 )
	{
		strcpy ( c_msg, "System error. Contact system support" );
		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		fn_errlog( c_ServiceName, "S31005", SQLMSG, c_err_msg );
		return;
	}

	if( argc > 6 )                          
	{
		strcpy( c_und_str, (char *)argv[6] ); 
		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"c_und_str is :%s:",c_und_str);
		}
	}


	if ( c_exg_stts	!= EXCHANGE_OPEN )
	{
		if ( c_exg_extnd_stts	!=	EXCHANGE_OPEN	)
		{
			strcpy ( c_msg, "Exchange should be open for running MTM" );
			fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			fn_errlog( c_ServiceName, "B28520",DEFMSG,c_err_msg);
			return ;
		}
		else if ( argc < 6)    
		{
			strcpy ( c_msg, "During Extend Market Hours MTM Can Be Run Only For NIFTY");
			fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			return ;
		}
		else if( strcmp(c_und_str,"\'NIFTY\'") != 0 )
		{
			strcpy ( c_msg, "During Extend Market Hours MTM Can Be Run Only For NIFTY");
			fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			return ;
		}

	}

	strcpy( c_match_str, (char *)argv[5] );   

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"c_match_str is :%s:",c_match_str);
	}

	/*** AM and MM first time comparision only, which will compare AM and MM and unmark customers in the same - Navina ***/
	i_ch_val = fn_mark_unmark( c_ServiceName,
														 c_xchng_cd, 
														 c_match_str,
														 c_err_msg,
														 &argv[0],
														 argc
													 );
  if ( i_ch_val != 0 )
  {
		fn_errlog( c_ServiceName, "S31010", LIBMSG, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		return;
	}
	

	if ( strcmp(c_match_str,"NONE") == 0 )
	{
		if( argc > 6 )  /*** changed by Swati ***/    
		{
			strcpy( c_und_str, (char *)argv[6] );   
			c_rqst_typ = MTM_FOR_UNDRLYNG;
			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog(c_ServiceName,"c_und_str is :%s:",c_und_str);
			}
			ptr_fml_buf = fn_create_rs (  c_ServiceName,
																		c_err_msg,
																		"SFO_GT_SIMTM",
																		TPNOTIME,
																		4,       
																		FFO_XCHNG_CD, ( char * )c_xchng_cd,
																		FFO_RQST_TYP, (char *)&c_rqst_typ,
																		FFO_EBA_MTCH_ACT_NO,( char * )c_match_str,
																		FFO_UNDRLYNG, (char *)c_und_str);
																		
		}
		else
		{
			c_rqst_typ = MTM_ALL_PSTN;
			ptr_fml_buf = fn_create_rs (  c_ServiceName,
																		c_err_msg,
																		"SFO_GT_SIMTM",
																		TPNOTIME,
																		3, 
																		FFO_XCHNG_CD, ( char * )c_xchng_cd,
																		FFO_RQST_TYP, (char *)&c_rqst_typ,
																		FFO_EBA_MTCH_ACT_NO,(char *)c_match_str);
																		
		}

	}
	else
	{
		if( argc > 6 )
		{
			strcpy( c_und_str, (char *)argv[6] ); 
			c_rqst_typ = MTM_FOR_MATCH_UNDRLYNG;
			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog(c_ServiceName,"c_und_str is :%s:",c_und_str);
			}
			ptr_fml_buf = fn_create_rs (  c_ServiceName,
																		c_err_msg,
																		"SFO_GT_SIMTM",
																		TPNOTIME,
																		4,  
																		FFO_XCHNG_CD, ( char * )c_xchng_cd,
																		FFO_RQST_TYP, (char *)&c_rqst_typ,
																		FFO_EBA_MTCH_ACT_NO,( char * )c_match_str,
																		FFO_UNDRLYNG, (char *)c_und_str);
																	 
		}
		else
		{
			c_rqst_typ = MTM_FOR_MATCH_ALL_UNDRLYNG;
			ptr_fml_buf = fn_create_rs (  c_ServiceName,
																		c_err_msg,
																		"SFO_GT_SIMTM",
																		TPNOTIME,
																		3, 
																		FFO_XCHNG_CD, ( char * )c_xchng_cd,
																		FFO_RQST_TYP, (char *)&c_rqst_typ,
																		FFO_EBA_MTCH_ACT_NO,(char *)c_match_str);
																	
		}
	
	}

	if ( ptr_fml_buf == NULL )
  {
    fn_errlog( c_ServiceName, "S31015", LIBMSG, c_err_msg );
    return;
  }

  li_tot_rcrds = fn_reccnt_rs ( ptr_fml_buf,
                                c_ServiceName,
                                c_err_msg,
                                FFO_EBA_MTCH_ACT_NO);
  if ( li_tot_rcrds == -1 )
  {
    fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg );
    fn_dstry_rs ( ptr_fml_buf );
    return;
  }

  strcpy ( c_msg, "Data created." );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  sprintf ( c_msg, "Total records = %ld", li_tot_rcrds );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  for ( li_cnt=1; li_cnt<=li_tot_rcrds; li_cnt++ )
  {
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Before Sending to SFO_PRCS_SIMTM");
    }
		i_ch_val = fn_getnxt_rs ( ptr_fml_buf,
                              c_ServiceName,
                              c_err_msg,
                              4,
                              FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL,
                              FFO_EBA_MTCH_ACT_NO, ( char * )c_clm_mtch_acnt, NULL,
                              FFO_UNDRLYNG, ( char * )c_undrlyng, NULL,
                              FFO_CTGRY_INDSTK, ( char * )&c_indstk, NULL);
    if ( i_ch_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31025", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_buf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }
		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"c_clm_mtch_acnt is :%s:",c_clm_mtch_acnt);
		}

    sprintf ( c_msg, "Processing record %ld of %ld", li_cnt, li_tot_rcrds );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

    i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                  c_err_msg,
                                  "sfr_bof_fimtm", 
                                  li_cnt,
                                  li_tot_rcrds );
    if ( i_ch_val == -1 )
    {
      fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_buf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }

    if (  atoi (argv[4]) == RUN_INTRADAY_MTM )
    {

      /** call to SFO_ORD_ROUT is done to get the Pipe id for   **/
      /** creating the DDR string in the service SFO_PRCS_SIMTM **/

      strcpy( c_imtm_remarks,"POSITION ENTERING MTM");
      strcpy( c_svc_name,"SFO_PRCS_SIMTM");

      i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                    c_err_msg,
                                    "SFO_ORD_ROUT",
                                    0,
                                    8,
                                  FFO_XCHNG_CD, ( char * )c_xchng_cd,
                                  FFO_EBA_MTCH_ACT_NO,(char *)c_clm_mtch_acnt,
                                  FFO_UNDRLYNG, ( char * )c_undrlyng,
                                  FFO_CTGRY_INDSTK, ( char * )&c_indstk,
                                  FFO_IMTM_RMRKS, ( char * )c_imtm_remarks,
                                  FFO_SVC_NAME, (char*) c_svc_name,
                                  FFO_BAT_TAG, ( char * )c_tag,
                                  FFO_REC_NO, ( char * )&li_cnt);

			if ( i_ch_val == -1 )
			{
				fn_errlog( c_ServiceName, "S31035", LIBMSG, c_err_msg );
				fn_dstry_rs ( ptr_fml_buf );
				strcpy ( c_msg, "System error. Contact system support" );
				fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
				return;
			}

			i_rec_exists = 0;

			EXEC SQL
			SELECT 1 
			INTO   :i_rec_exists
			FROM   TMP_SQOFF_DEFAULTER
			WHERE  TMP_XCHNG_CD = :c_xchng_cd
			AND		 TMP_CLM_MTCH_ACCNT = :c_clm_mtch_acnt
			AND		 TMP_UNDRLYNG	= :c_undrlyng
			AND    TMP_PROCESS_FLG = 'N';

			if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) && (SQLCODE != TOO_MANY_ROWS_FETCHED) )
			{
				fn_errlog ( c_ServiceName, "S31040",SQLMSG, c_err_msg );
				fn_dstry_rs ( ptr_fml_buf );  
				strcpy ( c_msg, "Error selecting from tmp_sqoff_defaulter" );
				fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
				return;
			}
			if ( i_rec_exists == 1 )
			{
				i_ch_val = tpbegin( TRAN_TIMEOUT, 0 );
				if ( i_ch_val == -1 )
				{
					fn_errlog(c_ServiceName,"S31045",TPMSG,c_err_msg);
					fn_dstry_rs ( ptr_fml_buf );
					strcpy ( c_msg, "Unable to start transaction - Contact system support" );
					fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
					return;
				}

				EXEC SQL
				UPDATE TMP_SQOFF_DEFAULTER
				SET		 TMP_PROCESS_FLG = 'P'
				WHERE  TMP_XCHNG_CD = :c_xchng_cd
				AND		 TMP_CLM_MTCH_ACCNT = :c_clm_mtch_acnt
				AND		 TMP_UNDRLYNG	= :c_undrlyng
				AND    TMP_PROCESS_FLG = 'N';

				if ( SQLCODE != 0 )
				{
					strcpy ( c_msg, "Error while updating TMP_SQOFF_DEFAULTER..." );
					fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
        	fn_dstry_rs ( ptr_fml_buf );    /** ver 1.6 **/
					fn_errlog( c_ServiceName, "S31050", SQLMSG, c_err_msg );
					tpabort(0);
					return;
				}

				i_ch_val = tpcommit(0);
				if ( i_ch_val == -1 )
				{
					fn_errlog(c_ServiceName,"S31055",TPMSG,c_err_msg);
					fn_dstry_rs ( ptr_fml_buf );
					strcpy ( c_msg, "Unable to commit transaction - Contact system support" );
					fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
					tpabort(0);
					return;
				}
			}
    }
    else if ( atoi (argv[4]) == CREATE_MTM_REPORT_DATA )
    {
			fn_userlog(c_ServiceName,"Report process is separate bat_rpt_simtm, no provision for report in this batch program");
		}
  }

  fn_dstry_rs ( ptr_fml_buf );

  sprintf ( c_msg, "Batch process %s ended", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  return;

}


int fn_mark_unmark( char *c_ServiceName,
										char *c_xchng_cd, 
										char * c_match_str,
										char *c_err_msg,
										char *argv[],
										int argc)
{
	char c_und_str [ 400 ];
  char c_rqst_typ;
  char c_msg[256];
  char c_clm_mtch_acnt [ 11 ];
	char c_indstk;
	char c_undrlyng [ 7 ];
	
	int i_ch_val;

	long int li_cnt;
  long int li_tot_rcrds;

  FBFR32 *ptr_fml_buf;

	if ( strcmp(c_match_str,"NONE") == 0 )
	{
		if( argc > 6 ) 
		{
			strcpy( c_und_str, (char *)argv[6] );   
			c_rqst_typ = MTM_FOR_UNDRLYNG;
			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog(c_ServiceName,"c_und_str is :%s:",c_und_str);
			}
			ptr_fml_buf = fn_create_rs (  c_ServiceName,
																		c_err_msg,
																		"SFO_GT_SIMTM",
																		TPNOTIME,
																		4,       
																		FFO_XCHNG_CD, ( char * )c_xchng_cd,
																		FFO_RQST_TYP, (char *)&c_rqst_typ,
																		FFO_EBA_MTCH_ACT_NO,( char * )c_match_str,
																		FFO_UNDRLYNG, (char *)c_und_str);
																		
		}
		else
		{
			c_rqst_typ = MTM_ALL_PSTN;
			ptr_fml_buf = fn_create_rs (  c_ServiceName,
																		c_err_msg,
																		"SFO_GT_SIMTM",
																		TPNOTIME,
																		3, 
																		FFO_XCHNG_CD, ( char * )c_xchng_cd,
																		FFO_RQST_TYP, (char *)&c_rqst_typ,
																		FFO_EBA_MTCH_ACT_NO,(char *)c_match_str);
																		
		}
	}
	else
	{
		if( argc > 6 )
		{
			strcpy( c_und_str, (char *)argv[6] ); 
			c_rqst_typ = MTM_FOR_MATCH_UNDRLYNG;
			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog(c_ServiceName,"c_und_str is :%s:",c_und_str);
			}
			ptr_fml_buf = fn_create_rs (  c_ServiceName,
																		c_err_msg,
																		"SFO_GT_SIMTM",
																		TPNOTIME,
																		4,  
																		FFO_XCHNG_CD, ( char * )c_xchng_cd,
																		FFO_RQST_TYP, (char *)&c_rqst_typ,
																		FFO_EBA_MTCH_ACT_NO,( char * )c_match_str,
																		FFO_UNDRLYNG, (char *)c_und_str);
																	 
		}
		else
		{
			c_rqst_typ = MTM_FOR_MATCH_ALL_UNDRLYNG;
			ptr_fml_buf = fn_create_rs (  c_ServiceName,
																		c_err_msg,
																		"SFO_GT_SIMTM",
																		TPNOTIME,
																		3, 
																		FFO_XCHNG_CD, ( char * )c_xchng_cd,
																		FFO_RQST_TYP, (char *)&c_rqst_typ,
																		FFO_EBA_MTCH_ACT_NO,(char *)c_match_str);
																	
		}
	}

	if ( ptr_fml_buf == NULL )
  {
    fn_errlog( c_ServiceName, "S31060", LIBMSG, c_err_msg );
    return FAILURE;
  }

  li_tot_rcrds = fn_reccnt_rs ( ptr_fml_buf,
                                c_ServiceName,
                                c_err_msg,
                                FFO_EBA_MTCH_ACT_NO);
  if ( li_tot_rcrds == -1 )
  {
    fn_errlog( c_ServiceName, "S31065", LIBMSG, c_err_msg );
    fn_dstry_rs ( ptr_fml_buf );
    return FAILURE;
  }

  sprintf ( c_msg, "Total records for Available - Minimum Margin Check = %ld", li_tot_rcrds );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	if (li_tot_rcrds == 0)
	{
		return SUCCESS;
	}

	for ( li_cnt=1; li_cnt<=li_tot_rcrds; li_cnt++ )
  {
    i_ch_val = fn_getnxt_rs ( ptr_fml_buf,
                              c_ServiceName,
                              c_err_msg,
                              4,
                              FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL,
                              FFO_EBA_MTCH_ACT_NO, ( char * )c_clm_mtch_acnt, NULL,
                              FFO_UNDRLYNG, ( char * )c_undrlyng, NULL,
                              FFO_CTGRY_INDSTK, ( char * )&c_indstk, NULL);
    if ( i_ch_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31070", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_buf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return FAILURE;
    }

    sprintf ( c_msg, "Processing record %ld of %ld", li_cnt, li_tot_rcrds );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"c_clm_mtch_acnt is :%s:",c_clm_mtch_acnt);
		}

		/*** Available >= Mimimum Margin Check ***/
		i_ch_val = fn_check_am_mm(	c_ServiceName,
																 c_clm_mtch_acnt, 
																 c_xchng_cd,
																 c_undrlyng,
																 c_err_msg);

		if ( i_ch_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31075", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_buf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return FAILURE;
    }

	}
	fn_dstry_rs ( ptr_fml_buf );
	return SUCCESS;
}

int fn_check_am_mm(	char *c_ServiceName,
									 char *c_clm_mtch_acnt, 
									 char *c_xchng_cd,
									 char *c_undrlyng,
									 char *c_err_msg)
{
  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  char c_inp_strng1[ 8000 ];
  char c_inp_strng11[ 8000 ];
  char c_inp_strng2[ 8000 ];
  char c_inp_strng22[ 8000 ];
  char c_inp_strng[ 16000 ];
  char c_op_strng[ 16000 ];
  char c_op_strng1[ 16000 ];
  char c_op_strng2[ 16000 ];
  char c_seq_num1[12000];
  char c_seq_num2[12000];
  char c_max_opn_qty[200];
  char c_min_opn_qty[200];
  char c_ltp[2000];
  char c_mrgn_indctr[3];
  char c_mtch_accnt1[11];
  char c_mtch_accnt2[11];
  char c_spn_mrgn1[20];
  char c_spn_mrgn2[20];
  char c_nov1[20];
  char c_nov2[20];
  char c_total_mrgn1[20];
  char c_total_mrgn2[20];
  char c_expry_dt_span[10]; 
	char c_rout_crt[4];
  char c_msg[256];
	char c_strk_prc[20];         /*** Ver 1.1 ***/
  char c_xchng_cd1[4];         /*** Ver 1.3 ***/
  char c_xchng_cd2[4];         /*** Ver 1.3 ***/
	char c_svc_nm[20] = "\0";           /*** Ver 1.5 ****/
  char *null_ptr  = 0;

  int i_returncode;
  int i_rtrn_cd1;
	int i_trnsctn;
  int i_cntrct_cnt = 0;   /*** Ver 1.1 ***/

	/*** Ver 1.5 ****/
	int  i_exists = 0;
  char c_cln_mtch_accnt [11] = "\0" ;
  char c_prd_typ              ='\0';
  char c_ctgry_indstk ='\0' ;
  char c_exrc_typ ='\0' ;
  char c_opt_typ ='\0' ;
	char c_pipe_id[3]  = "\0"  ;
  char c_tag [ 256 ]   = "\0" ;
  char c_alias[9]  = "\0" ;
  char c_usr_id[100]={0};
  long l_sssn_id = 0;
	long  l_strike_prc = 0;
  sql_cursor trd_cursor;
  EXEC SQL INCLUDE "table/fod_fo_ordr_dtls.h";
	/*** 1.5 *** Ends **/

  long  l_max_opn_qty	= 0;
  long  l_min_opn_qty	= 0;
  long  l_temp_qty		=	0;
  long  l_prtfl_seq1	= 0;
  long  l_prtfl_seq2	= 0;
  long  li_len_tobuf	= 0;
  long  l_length1			= 0;
  long  l_length2			= 0;
  /*** long  l_strike_prc	= 0;  -- Ver 1.1 ***/
  long  l_cntr  			= 0;
	long  l_basket_id		= 0;

  double d_diff_mrgn= 0.0;
  double d_diff_pl= 0.0;
  double d_balance_amt= 0.0;
  double d_bal_to_apply= 0.0;
  double d_ltp= 0.0;
  double d_spn_mrgn1= 0.0;
  double d_spn_mrgn2= 0.0;
  double d_nov1= 0.0;
  double d_nov2= 0.0;
	double d_total_mrgn= 0.0;
  double d_total_mrgn1= 0.0;
  double d_total_mrgn2= 0.0;
  double d_cntrct_pl    = 0.0;
  double d_ntnl_pl      = 0.0;
  double d_blckd_amnt   = 0.0;
	double d_thrshld_per  = 0.0;
	double d_mltplr =0.0;;
	double d_expr= 0.0;
	double d_min_expsr=0.0;
	double d_min_mrgn =  0.0;
	double d_intl_mrgn = 0.0;
	double d_available_mrgn=0.0;
	double d_base_prc=0.0;
	double d_premium_temp=0.0;
	double d_premium=0.0;
	double d_undrlyng_notioanl_pnl  = 0.0;
	double d_expsr_mrgn = 0.0;
	double d_expsr = 0.0;
	double d_min_expsr_mrgn = 0.0;
	double d_strike_prc = 0.0;    /*** Ver 1.1 ***/ 
  int i_cntrct_opnpos=0;

  /*** Ver 1.8  Starts Here ***/
  int    i_ret_val=0;

  double d_spn_bmrgn1=0;
  double d_bnov1=0;
  double d_total_bmrgn1=0;

  double d_spn_bmrgn2=0;
  double d_bnov2=0;
  double d_total_bmrgn2=0;

  double d_spn_bmrgn=0;
  double d_bnov=0;
  double d_total_bmrgn=0;
  /*** Ver 1.8 Ends here ***/

	
  EXEC SQL BEGIN DECLARE SECTION; 

    sql_cursor     sys_cursor;
    char  sql_cln_mtch_accnt[11];
    char  sql_xchng_cd[4];
    char  sql_prd_typ;
    char  sql_cntrct_tag;
    char  sql_undrlyng[7];
    varchar c_expry_dt[LEN_DATE]; 
    varchar c_xchng_undrlyng[20]; 

		struct st_fus_undrlyng_pstn st_undrlyng_pstn;
		struct st_fcp_cntrct_pstn st_cntrct_pstn;
		struct st_err_msg st_error_msg;
  EXEC SQL END DECLARE SECTION; 

	MEMSET(st_undrlyng_pstn);
	MEMSET(st_cntrct_pstn);
	MEMSET(st_error_msg);

  ptr_fml_Obuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31080", TPMSG, c_err_msg);
    return FAILURE;
  }

  ptr_fml_Ibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN*10);
																/*** Ver 1.1 - Size increased by multiple of 10 to accomodate the big sized portfolio ***/

  if ( ptr_fml_Ibuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31085", TPMSG, c_err_msg);
    tpfree((char *)ptr_fml_Obuf);
    return FAILURE;
  }

	strcpy( sql_cln_mtch_accnt,c_clm_mtch_acnt);
  strcpy( sql_xchng_cd,c_xchng_cd);
  strcpy( sql_undrlyng,c_undrlyng);

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog( c_ServiceName, "sql_cln_mtch_accnt = :%s:", sql_cln_mtch_accnt);
		fn_userlog( c_ServiceName, "sql_xchng_cd = :%s:", sql_xchng_cd);
		fn_userlog( c_ServiceName, "sql_undrlyng = :%s:", sql_undrlyng);
	}

	EXEC SQL
			SELECT  SEM_MAP_VL
			INTO    :c_xchng_undrlyng
			FROM    SEM_STCK_MAP
			WHERE   SEM_STCK_CD = :c_undrlyng
			/*** AND     SEM_ENTTY   = 3; *** Ver 1.3 ***/
        AND   SEM_ENTTY   = DECODE(:sql_xchng_cd,'NFO',3,14);  /*** Ver 1.3 ***/

	if ( SQLCODE  !=  0 )
	{
		fn_errlog ( c_ServiceName, "S31090", SQLMSG, c_err_msg );
		tpfree((char *)ptr_fml_Obuf);
		tpfree((char *)ptr_fml_Ibuf);
		return FAILURE;
	}

	SETNULL(c_xchng_undrlyng);

	EXEC SQL
		SELECT  FUS_CLM_MTCH_ACCNT,
            FUS_XCHNG_CD,
            FUS_INDSTK,
            FUS_UNDRLYNG,
            FUS_UIBUY_QTY,
            FUS_UIBUY_VAL,
            FUS_UISELL_QTY,
            FUS_UISELL_VAL,
            FUS_UEXBUY_QTY,
            FUS_UEXBUY_VAL,
            FUS_UEXSELL_QTY,
            FUS_UEXSELL_VAL,
            FUS_UBUY_EXCTD_QTY,
            FUS_USELL_EXCTD_QTY,
            FUS_UOPNPSTN_FLW,
            FUS_UOPNPSTN_QTY,
            FUS_UOPNPSTN_VAL,
            FUS_UMTM_OPN_VAL,
            FUS_INITIAL_MRGN,
						FUS_SPAN_WEMULT_MRGN,
						FUS_EBA_EXPR_MRGN,
						FUS_USPAN_WENOV_MRGN,
						FUS_MULTIPLIER,
						FUS_USPAN_NENOV_MRGN,
						FUS_NET_OPTN_VAL,
            NVL(FUS_MIN_MRGN,0),
            NVL(FUS_MTM_FLG,'O'),
						FUS_BLCKD_PL,
						FUS_REQD_INITIAL_MRGN
    INTO    :st_undrlyng_pstn.c_cln_mtch_accnt,
            :st_undrlyng_pstn.c_xchng_cd,
            :st_undrlyng_pstn.c_indstk,
            :st_undrlyng_pstn.c_undrlyng,
            :st_undrlyng_pstn.l_uibuy_qty,
            :st_undrlyng_pstn.d_uibuy_val,
            :st_undrlyng_pstn.l_uisell_qty,
            :st_undrlyng_pstn.d_uisell_val,
            :st_undrlyng_pstn.l_uexbuy_qty,
            :st_undrlyng_pstn.d_uexbuy_val,
            :st_undrlyng_pstn.l_uexsell_qty,
            :st_undrlyng_pstn.d_uexsell_val,
            :st_undrlyng_pstn.l_ubuy_exctd_qty,
            :st_undrlyng_pstn.l_usell_exctd_qty,
            :st_undrlyng_pstn.c_uopnpstn_flw,
            :st_undrlyng_pstn.l_uopnpstn_qty,
            :st_undrlyng_pstn.d_uopnpstn_val,
            :st_undrlyng_pstn.d_umtm_opn_val,
            :st_undrlyng_pstn.d_initial_mrgn,
						:st_undrlyng_pstn.d_span_wemult_mrgn,
						:st_undrlyng_pstn.d_eba_expr_mrgn,
 					  :st_undrlyng_pstn.d_uspan_wenov_mrgn,
					  :st_undrlyng_pstn.d_multpr,
					  :st_undrlyng_pstn.d_uspan_nenov_mrgn,
					  :st_undrlyng_pstn.d_net_optn_val,
						:st_undrlyng_pstn.d_min_mrgn,
            :st_undrlyng_pstn.c_mtm_flg,
            :st_undrlyng_pstn.d_blckd_pl,
            :st_undrlyng_pstn.d_reqd_initial_mrgn
    FROM    FUS_FO_UNDRLYNG_SPN_PSTN
    WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
    AND     FUS_XCHNG_CD        = :sql_xchng_cd
    AND     FUS_UNDRLYNG        = :sql_undrlyng
		AND     (FUS_UOPNPSTN_QTY != 0 OR FUS_INITIAL_MRGN != 0);   /*** Ver 1.1 ***/

	if ( SQLCODE != 0 && ( SQLCODE != NO_DATA_FOUND))/** NDF IN ver 1.9 ***/
	{
		fn_errlog( c_ServiceName, "S31095", SQLMSG, c_err_msg  );
		tpfree((char *)ptr_fml_Obuf);
		tpfree((char *)ptr_fml_Ibuf);
		return FAILURE;
	}
	/** ver 1.9 starts ***/	
    if( SQLCODE == NO_DATA_FOUND)
    {
     i_cntrct_opnpos = 0;

     EXEC SQL
     SELECT count(1)
     INTO  :i_cntrct_opnpos
     FROM FCP_FO_SPN_CNTRCT_PSTN WHERE FCP_OPNPSTN_QTY<>0
     AND FCP_CLM_MTCH_ACCNT=:sql_cln_mtch_accnt
     AND FCP_XCHNG_CD=:sql_xchng_cd
     AND FCP_UNDRLYNG=:sql_undrlyng
     AND ( (FCP_PRDCT_TYP='O' AND FCP_OPNPSTN_FLW!='B' ) OR FCP_PRDCT_TYP !='O');
  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31100", SQLMSG, c_err_msg  );
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
    return FAILURE;
  }

     if( i_cntrct_opnpos > 0 )
     {
  EXEC SQL
    SELECT  FUS_CLM_MTCH_ACCNT,
            FUS_XCHNG_CD,
            FUS_INDSTK,
            FUS_UNDRLYNG,
            FUS_UIBUY_QTY,
            FUS_UIBUY_VAL,
            FUS_UISELL_QTY,
            FUS_UISELL_VAL,
            FUS_UEXBUY_QTY,
            FUS_UEXBUY_VAL,
            FUS_UEXSELL_QTY,
            FUS_UEXSELL_VAL,
            FUS_UBUY_EXCTD_QTY,
            FUS_USELL_EXCTD_QTY,
            FUS_UOPNPSTN_FLW,
            FUS_UOPNPSTN_QTY,
            FUS_UOPNPSTN_VAL,
            FUS_UMTM_OPN_VAL,
            FUS_INITIAL_MRGN,
            FUS_SPAN_WEMULT_MRGN,
            FUS_EBA_EXPR_MRGN,
            FUS_USPAN_WENOV_MRGN,
            FUS_MULTIPLIER,
            FUS_USPAN_NENOV_MRGN,
            FUS_NET_OPTN_VAL,
            NVL(FUS_MIN_MRGN,0),
            NVL(FUS_MTM_FLG,'O'),
            FUS_BLCKD_PL,
            FUS_REQD_INITIAL_MRGN
    INTO    :st_undrlyng_pstn.c_cln_mtch_accnt,
            :st_undrlyng_pstn.c_xchng_cd,
            :st_undrlyng_pstn.c_indstk,
            :st_undrlyng_pstn.c_undrlyng,
            :st_undrlyng_pstn.l_uibuy_qty,
            :st_undrlyng_pstn.d_uibuy_val,
            :st_undrlyng_pstn.l_uisell_qty,
            :st_undrlyng_pstn.d_uisell_val,
            :st_undrlyng_pstn.l_uexbuy_qty,
            :st_undrlyng_pstn.d_uexbuy_val,
            :st_undrlyng_pstn.l_uexsell_qty,
            :st_undrlyng_pstn.d_uexsell_val,
            :st_undrlyng_pstn.l_ubuy_exctd_qty,
            :st_undrlyng_pstn.l_usell_exctd_qty,
            :st_undrlyng_pstn.c_uopnpstn_flw,
            :st_undrlyng_pstn.l_uopnpstn_qty,
            :st_undrlyng_pstn.d_uopnpstn_val,
            :st_undrlyng_pstn.d_umtm_opn_val,
            :st_undrlyng_pstn.d_initial_mrgn,
            :st_undrlyng_pstn.d_span_wemult_mrgn,
            :st_undrlyng_pstn.d_eba_expr_mrgn,
            :st_undrlyng_pstn.d_uspan_wenov_mrgn,
            :st_undrlyng_pstn.d_multpr,
            :st_undrlyng_pstn.d_uspan_nenov_mrgn,
            :st_undrlyng_pstn.d_net_optn_val,
            :st_undrlyng_pstn.d_min_mrgn,
            :st_undrlyng_pstn.c_mtm_flg,
            :st_undrlyng_pstn.d_blckd_pl,
            :st_undrlyng_pstn.d_reqd_initial_mrgn
    FROM    FUS_FO_UNDRLYNG_SPN_PSTN
    WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
    AND     FUS_XCHNG_CD        = :sql_xchng_cd
    AND     FUS_UNDRLYNG        = :sql_undrlyng;
  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31105", SQLMSG, c_err_msg  );
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
    return FAILURE;
  }
  }
  else
  {
    fn_errlog( c_ServiceName, "S31110", SQLMSG, c_err_msg  );
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
    return FAILURE;
  }
 }
 /** ver 1.9 ends ***/
	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog( c_ServiceName, "*******************************************FUS***********************************");
		fn_userlog(c_ServiceName,"BEFORE SPAN- (A+B)Initial Margin IS :%lf:",st_undrlyng_pstn.d_initial_mrgn);
		fn_userlog(c_ServiceName,"BEFORE SPAN- (A=C*D)SPAN Margin with Eff of Multiplier is:%lf:",st_undrlyng_pstn.d_span_wemult_mrgn);
		fn_userlog(c_ServiceName,"BEFORE SPAN- (B)Exposure  IS :%lf:",st_undrlyng_pstn.d_eba_expr_mrgn);
		fn_userlog(c_ServiceName,"BEFORE SPAN- (C)SPAN MARGIN WITH EFFECT OF NOV IS :%lf:",st_undrlyng_pstn.d_uspan_wenov_mrgn);
		fn_userlog(c_ServiceName,"BEFORE SPAN- (D)Multiplier IS :%lf:",st_undrlyng_pstn.d_multpr);
		fn_userlog(c_ServiceName,"BEFORE SPAN- NOV IS :%lf:",st_undrlyng_pstn.d_net_optn_val);
		fn_userlog(c_ServiceName,"BEFORE SPAN- Min. Margin IS :%lf:",st_undrlyng_pstn.d_min_mrgn);
		fn_userlog( c_ServiceName, "*********************************************************************************");
	}

	 EXEC  SQL
			SELECT  SPN_PRTFL1_SEQ.nextval
			INTO    :l_prtfl_seq1
			FROM    DUAL; 

		if ( SQLCODE  !=  0 )
		{
			fn_errlog( c_ServiceName, "S31115", SQLMSG, c_err_msg  );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return FAILURE;
		}

		EXEC  SQL
			SELECT  SPN_PRTFL1_SEQ.nextval
			INTO    :l_prtfl_seq2
			FROM    DUAL; 

		if ( SQLCODE  !=  0 )
		{
			fn_errlog( c_ServiceName, "S31120", SQLMSG, c_err_msg  );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return FAILURE;
		}

	/*** Ver 1.1 starts here ***/
	MEMSET(c_inp_strng);
	MEMSET(c_inp_strng1);
	MEMSET(c_inp_strng2);
	MEMSET(c_inp_strng11);
	MEMSET(c_inp_strng22);
	/*** Ver 1.1 Ends here ***/

	strcpy(c_inp_strng1,"1^");
	strcpy(c_inp_strng2,"|");

  /**** Ver 1.3 Starts Here *****/

  if( strcmp(sql_xchng_cd,"NFO") == 0 )
  {
   strcat( c_inp_strng1 ,"NSE^");
  }
  else
  {
   strcat( c_inp_strng1 ,"BSE^");
  }
  /**** Ver 1.3 Ends Here ******/

	sprintf(c_seq_num1,"%ld",l_prtfl_seq1);
	sprintf(c_seq_num2,"%ld",l_prtfl_seq2);

	strcat( c_inp_strng1 , c_seq_num1 );
	strcat( c_inp_strng2 , c_seq_num2 );

	strcat(c_inp_strng1,"^");
	strcat(c_inp_strng2,"^");

	EXEC SQL
    SELECT  FCB_UNDRLYNG_BSKT_ID
    INTO    :l_basket_id
    FROM    FCB_FO_CLN_BSKT_ALLTD
    WHERE   FCB_CLN_LVL = ( SELECT  CLM_CLNT_LVL
                            FROM    CLM_CLNT_MSTR
                            WHERE   CLM_MTCH_ACCNT = :sql_cln_mtch_accnt);
  if ( SQLCODE != 0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31125",SQLMSG, c_err_msg);
 		tpfree((char *)ptr_fml_Obuf);
		tpfree((char *)ptr_fml_Ibuf);
    return  FAILURE;
  }

  /** Prepare a list of contracts from contract position table **/
  EXEC SQL ALLOCATE :sys_cursor; 
  EXEC SQL EXECUTE
      BEGIN
         OPEN :sys_cursor FOR
          SELECT  FCP_CLM_MTCH_ACCNT,
                  FCP_XCHNG_CD,
                  FCP_PRDCT_TYP,
                  FCP_INDSTK,
                  FCP_UNDRLYNG,
                  TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
                  FCP_EXER_TYP,
                  FCP_STRK_PRC,
                  FCP_OPT_TYP,
									FCP_IBUY_QTY,
									FCP_IBUY_ORD_VAL,
									FCP_ISELL_QTY,
									FCP_ISELL_ORD_VAL,
									FCP_EXBUY_QTY,
									FCP_EXBUY_ORD_VAL,
									FCP_EXSELL_QTY,
									FCP_EXSELL_ORD_VAL,
									FCP_BUY_EXCTD_QTY,
									FCP_SELL_EXCTD_QTY,
									FCP_OPNPSTN_FLW,
									FCP_OPNPSTN_QTY,
									FCP_OPNPSTN_VAL,
									FCP_MTM_OPN_VAL,
									FCP_OPT_PREMIUM
            FROM  FCP_FO_SPN_CNTRCT_PSTN
            WHERE FCP_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
            AND   FCP_XCHNG_CD        = :sql_xchng_cd
            AND   FCP_UNDRLYNG        = :sql_undrlyng
						AND   ( FCP_IBUY_QTY <> 0 OR FCP_ISELL_QTY <> 0 OR FCP_EXBUY_QTY <> 0 OR FCP_EXSELL_QTY <> 0 OR FCP_OPNPSTN_QTY <> 0 OR FCP_OPT_PREMIUM <> 0 ) 																											/*** Ver 1.1 ***/
            ORDER BY FCP_EXPRY_DT ASC;
          END;
        END-EXEC; 

	if ( SQLCODE != 0 )
	{
		fn_errlog( c_ServiceName, "S31130", SQLMSG, c_err_msg  );
		/** EXEC SQL CLOSE :sys_cursor;  Ver 1.6 **/
		EXEC SQL FREE :sys_cursor; 
		tpfree((char *)ptr_fml_Obuf);
		tpfree((char *)ptr_fml_Ibuf);
		return FAILURE;
	}

	while ( 1 )
  {
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName," In while loop.");
		}

		d_expsr_mrgn      = 0.0;
		d_min_expsr_mrgn  = 0.0;			

		EXEC SQL  FETCH  :sys_cursor
						 INTO   :st_cntrct_pstn.c_cln_mtch_accnt,
										:st_cntrct_pstn.c_xchng_cd,
										:st_cntrct_pstn.c_prd_typ,
										:st_cntrct_pstn.c_ctgry_indstk,
										:st_cntrct_pstn.c_undrlyng,
										:c_expry_dt,
										:st_cntrct_pstn.c_exer_typ,
										:st_cntrct_pstn.l_strike_prc,
										:st_cntrct_pstn.c_opt_typ,
										:st_cntrct_pstn.l_ibuy_qty,
										:st_cntrct_pstn.d_ibuy_ord_val,
										:st_cntrct_pstn.l_isell_qty,
										:st_cntrct_pstn.d_isell_ord_val,
										:st_cntrct_pstn.l_exbuy_qty,
										:st_cntrct_pstn.d_exbuy_ord_val,
										:st_cntrct_pstn.l_exsell_qty,
										:st_cntrct_pstn.d_exsell_ord_val,
										:st_cntrct_pstn.l_buy_exctd_qty,
										:st_cntrct_pstn.l_sell_exctd_qty,
										:st_cntrct_pstn.c_opnpstn_flw,
										:st_cntrct_pstn.l_opnpstn_qty,
										:st_cntrct_pstn.d_opnpstn_val,
										:st_cntrct_pstn.d_mtm_opn_val,
										:d_premium_temp;

		if ( SQLCODE != 0 )
		{
			if ( SQLCODE == NO_DATA_FOUND )
			{
				EXEC SQL CLOSE :sys_cursor; 
				EXEC SQL FREE :sys_cursor; 
				break;
			}

			EXEC SQL CLOSE :sys_cursor; 
			EXEC SQL FREE :sys_cursor; 
			fn_errlog ( c_ServiceName, "S31135", SQLMSG, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return FAILURE;
		}

		i_cntrct_cnt++;             /*** Ver 1.1 ***/

		SETNULL( c_expry_dt );
		strcpy ( st_cntrct_pstn.c_expry_dt, (char *) c_expry_dt.arr );
		rtrim(st_cntrct_pstn.c_xchng_cd);
		rtrim(st_cntrct_pstn.c_undrlyng);
		rtrim(st_cntrct_pstn.c_expry_dt);

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "**********************************FCP FETCHED*******************************");
			fn_userlog( c_ServiceName, "c_expry_dt=:%s:",c_expry_dt.arr);
			fn_userlog( c_ServiceName, "st_cntrct_pstn.c_exer_typ = :%c:", st_cntrct_pstn.c_exer_typ);
			fn_userlog( c_ServiceName, "st_cntrct_pstn.l_strike_prc = :%ld:",st_cntrct_pstn.l_strike_prc);
			fn_userlog( c_ServiceName, "st_cntrct_pstn.c_opt_typ = :%c:", st_cntrct_pstn.c_opt_typ);
			fn_userlog( c_ServiceName, "st_cntrct_pstn.l_ibuy_qty = :%ld:",  st_cntrct_pstn.l_ibuy_qty);
			fn_userlog( c_ServiceName, "st_cntrct_pstn.l_isell_qty = %ld:",  st_cntrct_pstn.l_isell_qty);
			fn_userlog( c_ServiceName, "st_cntrct_pstn.c_opnpstn_flw = :%c:", st_cntrct_pstn.c_opnpstn_flw);
			fn_userlog( c_ServiceName, "st_cntrct_pstn.l_opnpstn_qty = :%ld:", st_cntrct_pstn.l_opnpstn_qty);
			fn_userlog( c_ServiceName, "st_cntrct_pstn.d_opnpstn_val = :%lf:", st_cntrct_pstn.d_opnpstn_val);
			fn_userlog( c_ServiceName, "****************************************************************************");
		}

		l_max_opn_qty = st_cntrct_pstn.l_opnpstn_qty + fn_maxl ( st_cntrct_pstn.l_ibuy_qty , st_cntrct_pstn.l_exbuy_qty );
		l_min_opn_qty = st_cntrct_pstn.l_opnpstn_qty + fn_maxl ( abs ( st_cntrct_pstn.l_isell_qty ) , abs ( st_cntrct_pstn.l_exsell_qty )) * -1;

		if (st_cntrct_pstn.c_prd_typ  ==  'O' )
		{
			l_temp_qty  = fn_minl ( l_max_opn_qty , l_min_opn_qty );
			l_max_opn_qty = l_temp_qty  ;
			l_min_opn_qty = l_temp_qty  ;
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Expiry Date:%s:",st_cntrct_pstn.c_expry_dt);
			fn_userlog(c_ServiceName,"l_basket_id:%ld:",l_basket_id);
		}

		i_returncode  = fn_cal_expsr  ( c_ServiceName,
																		st_cntrct_pstn,
																		l_basket_id,
																		&d_expsr_mrgn,
																		&d_min_expsr_mrgn,
																		&d_mltplr,
																		c_err_msg
																	);

		if ( i_returncode != 0 )
		{
			 fn_errlog(c_ServiceName, "S31140", LIBMSG, c_err_msg );
			 EXEC SQL CLOSE :sys_cursor;
			 EXEC SQL FREE :sys_cursor;
			 tpfree((char *)ptr_fml_Obuf);
			 tpfree((char *)ptr_fml_Ibuf);
			 return FAILURE;
		}	
	
		EXEC SQL
		SELECT  NVL(FTQ_LST_TRD_PRC,0),		/*** NVL added in Ver 1.1 ***/
						NVL(FTQ_CLS_PRC,0)				/*** NVL added in Ver 1.1 ***/
			INTO    :d_ltp,
							:d_base_prc
			FROM    FTQ_FO_TRD_QT
			WHERE   FTQ_XCHNG_CD  = :st_cntrct_pstn.c_xchng_cd    /*** Ver 1.2 ***/
			AND   	FTQ_PRDCT_TYP = :st_cntrct_pstn.c_prd_typ
			AND     FTQ_UNDRLYNG  = :st_cntrct_pstn.c_undrlyng
			AND     FTQ_EXPRY_DT  = :st_cntrct_pstn.c_expry_dt
			AND     FTQ_EXER_TYP  = :st_cntrct_pstn.c_exer_typ
			AND     FTQ_OPT_TYP   = :st_cntrct_pstn.c_opt_typ
			AND     FTQ_STRK_PRC  = :st_cntrct_pstn.l_strike_prc; 
		if(SQLCODE  !=  0 )
		{
			EXEC SQL CLOSE :sys_cursor; 
			EXEC SQL FREE :sys_cursor; 
			fn_errlog ( c_ServiceName, "S31145", SQLMSG, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return FAILURE;
		}

		if ( st_cntrct_pstn.l_opnpstn_qty != 0 )     /***  Profit / Loss Calculation Contractwise  ***/
		{
			if( st_cntrct_pstn.l_opnpstn_qty > 0 && st_cntrct_pstn.c_prd_typ == 'F' )
			{
				d_cntrct_pl = ( d_ltp * (double) st_cntrct_pstn.l_opnpstn_qty ) -  st_cntrct_pstn.d_opnpstn_val;
				
				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"111d_cntrct_pl:%lf:",d_cntrct_pl);
					fn_userlog(c_ServiceName,"d_ltp:%lf:",d_ltp);
					fn_userlog(c_ServiceName,"st_cntrct_pstn.d_mtm_opn_val:%lf:",st_cntrct_pstn.d_mtm_opn_val);
					fn_userlog(c_ServiceName,"st_cntrct_pstn.d_opnpstn_val:%lf:",st_cntrct_pstn.d_opnpstn_val);
					fn_userlog(c_ServiceName,"st_cntrct_pstn.l_opnpstn_qty:%ld:",st_cntrct_pstn.l_opnpstn_qty);
				}
			}
			else if ( st_cntrct_pstn.l_opnpstn_qty < 0  )
			{
				if(st_cntrct_pstn.c_prd_typ == 'F')
				{
					d_cntrct_pl = fabs(st_cntrct_pstn.d_opnpstn_val) -  ( d_ltp * (double) abs(st_cntrct_pstn.l_opnpstn_qty) ) ;
					
					if(DEBUG_MSG_LVL_0)
					{
						fn_userlog(c_ServiceName,"222d_cntrct_pl:%lf:",d_cntrct_pl);
						fn_userlog(c_ServiceName,"d_ltp:%lf:",d_ltp);
						fn_userlog(c_ServiceName,"st_cntrct_pstn.d_mtm_opn_val:%lf:",st_cntrct_pstn.d_mtm_opn_val);
						fn_userlog(c_ServiceName,"st_cntrct_pstn.d_opnpstn_val:%lf:",st_cntrct_pstn.d_opnpstn_val);
						fn_userlog(c_ServiceName,"st_cntrct_pstn.l_opnpstn_qty:%ld:",st_cntrct_pstn.l_opnpstn_qty);
					}
				}
				else if (st_cntrct_pstn.c_prd_typ == 'O')
				{
					d_cntrct_pl	= (double)abs(st_cntrct_pstn.l_opnpstn_qty)	*	(	d_base_prc	-	d_ltp	);
					
					if(DEBUG_MSG_LVL_0)
					{
						fn_userlog(c_ServiceName,"MARK SIMTM Contract PNL Is :%lf:",d_cntrct_pl);
					}
				}
			}
		}

    d_undrlyng_notioanl_pnl = d_undrlyng_notioanl_pnl + d_cntrct_pl ;

		EXEC SQL
			SELECT to_char(to_date(:st_cntrct_pstn.c_expry_dt,'DD-Mon-YYYY'),'dd-Mon-YY')
			INTO  :c_expry_dt_span
			FROM  DUAL;
		if ( SQLCODE  !=  0 )
		{
			EXEC SQL CLOSE :sys_cursor; 
			EXEC SQL FREE :sys_cursor; 
			fn_errlog ( c_ServiceName, "S31150", SQLMSG, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return FAILURE;
		}

		/*** l_strike_prc  = st_cntrct_pstn.l_strike_prc/100  ;  *** Commented in Ver 1.1 ***/
		
		/*** Ver 1.1 starts here ***/
		d_strike_prc = 0.0;
    d_strike_prc  = (double) st_cntrct_pstn.l_strike_prc/ 100.00  ;
    sprintf(c_strk_prc,"%lf",d_strike_prc);

    fn_spn_rtrim(c_strk_prc,'0');
    fn_spn_rtrim(c_strk_prc,'.');

    /*** Ver 1.1 ends here ***/

		d_ltp = d_ltp / 100;

		if( l_cntr  ==  0 )
		{
			if(st_cntrct_pstn.c_prd_typ  ==  'F')
			{
				sprintf(c_inp_strng11,"%s^%s~%c:%s^%ld^%lf",st_cntrct_pstn.c_cln_mtch_accnt,c_xchng_undrlyng.arr,st_cntrct_pstn.c_prd_typ,c_expry_dt_span,l_max_opn_qty,d_ltp);

			strcat(c_inp_strng1,c_inp_strng11);
			sprintf(c_inp_strng22,"%s^%s~%c:%s^%ld^%lf",st_cntrct_pstn.c_cln_mtch_accnt,c_xchng_undrlyng.arr,st_cntrct_pstn.c_prd_typ,c_expry_dt_span,l_min_opn_qty,d_ltp);

			strcat(c_inp_strng2,c_inp_strng22);

			}
			else
			{
				sprintf(c_inp_strng11,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntrct_pstn.c_cln_mtch_accnt,c_xchng_undrlyng.arr, st_cntrct_pstn.c_prd_typ,c_expry_dt_span,st_cntrct_pstn.c_opt_typ,st_cntrct_pstn.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp);

				strcat(c_inp_strng1,c_inp_strng11);

				sprintf(c_inp_strng22,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntrct_pstn.c_cln_mtch_accnt,c_xchng_undrlyng.arr,st_cntrct_pstn.c_prd_typ,c_expry_dt_span,st_cntrct_pstn.c_opt_typ,st_cntrct_pstn.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp);

				strcat(c_inp_strng2,c_inp_strng22);

			}
		}
		else
		{
			if(st_cntrct_pstn.c_prd_typ  ==  'F')
			{
				sprintf(c_inp_strng11,"%s~%c:%s^%ld^%lf",c_xchng_undrlyng.arr,st_cntrct_pstn.c_prd_typ,c_expry_dt_span,l_max_opn_qty,d_ltp);

				strcat(c_inp_strng1,c_inp_strng11);

				sprintf(c_inp_strng22,"%s~%c:%s^%ld^%lf",c_xchng_undrlyng.arr,st_cntrct_pstn.c_prd_typ,c_expry_dt_span,l_min_opn_qty,d_ltp);

				strcat(c_inp_strng2,c_inp_strng22);

			}
			else
			{
				sprintf(c_inp_strng11,"%s~%c:%s:%c%c:%s^%ld^%lf",c_xchng_undrlyng.arr,st_cntrct_pstn.c_prd_typ,c_expry_dt_span,st_cntrct_pstn.c_opt_typ,st_cntrct_pstn.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp);

				strcat(c_inp_strng1,c_inp_strng11);

				sprintf(c_inp_strng22,"%s~%c:%s:%c%c:%s^%ld^%lf",c_xchng_undrlyng.arr,st_cntrct_pstn.c_prd_typ,c_expry_dt_span,st_cntrct_pstn.c_opt_typ,st_cntrct_pstn.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp);

				strcat(c_inp_strng2,c_inp_strng22);

			}
		}

    if(DEBUG_MSG_LVL_3)
		{
			fn_userlog ( c_ServiceName, "Expiry date       :%s:", c_expry_dt.arr );
			fn_userlog ( c_ServiceName, "Expiry date to SPAN:%s:", c_expry_dt_span);
			fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntrct_pstn.l_ibuy_qty );
			fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntrct_pstn.d_ibuy_ord_val );
			fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntrct_pstn.l_isell_qty );
			fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntrct_pstn.d_isell_ord_val );
			fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntrct_pstn.l_exbuy_qty );
			fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntrct_pstn.d_exbuy_ord_val );
			fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntrct_pstn.l_exsell_qty );
			fn_userlog ( c_ServiceName, "EXCH sell val      :%lf:", st_cntrct_pstn.d_exsell_ord_val );
			fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntrct_pstn.l_buy_exctd_qty );
			fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_cntrct_pstn.l_sell_exctd_qty );
			fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntrct_pstn.l_opnpstn_qty );
			fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntrct_pstn.d_mtm_opn_val );
			fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntrct_pstn.d_mtm_opn_val );
	 }

    strcat(c_inp_strng1,",");
    strcat(c_inp_strng2,",");

    l_cntr  ++;
		d_premium = d_premium + d_premium_temp;
		d_expsr     = d_expsr_mrgn  + d_expsr ;
		d_min_expsr = d_min_expsr_mrgn  + d_min_expsr ;
  }	/****** End of WHILE loop  *******/

	/* Type Casted by Mahesh for 1 paisa issue */
	d_undrlyng_notioanl_pnl = (long long)d_undrlyng_notioanl_pnl;

  l_length1 = strlen(c_inp_strng1);

  if( c_inp_strng1[l_length1  - 1 ] == ',')
  {
    c_inp_strng1[l_length1 -1]  ='\0';
  }

  l_length2 = strlen(c_inp_strng2);

  if( c_inp_strng2[l_length2  - 1 ] == ',')
  {
    c_inp_strng2[l_length2 -1]  ='\0';
  }

	/*** Ver 1.1 starts here ***/

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog( c_ServiceName, "i_cntrct_cnt = :%d:",i_cntrct_cnt);
  }

  if (i_cntrct_cnt > 10)
  {
		if ( Fadd32 (ptr_fml_Ibuf,FFO_ROUT_CRT,(char *)c_rout_crt,0)  ==  -1 )
    {
      fn_errlog( c_ServiceName, "S31155",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }
    
    MEMSET(c_inp_strng);
    strcpy(c_inp_strng,c_inp_strng1);
    strcat(c_inp_strng,"\n");

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"c_inp_strng 1 = :%s:",c_inp_strng);
    }

    if ( Fadd32 (ptr_fml_Ibuf,FFO_REMARKS,(char *)c_inp_strng,0)  ==  -1 )
    {
      fn_errlog( c_ServiceName, "S31160",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
    }

    i_rtrn_cd1  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

		if( i_rtrn_cd1 != 0 )
    {
      fn_errlog( c_ServiceName, "S31165",TPMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng1,0)  ==  -1 )
    {
      fn_errlog( c_ServiceName, "S31170",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"Output String 1 Is :%s:",c_op_strng1);
    }

    /*** Ver 1.8 Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31175",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
    /*** Ver 1.8 Ends here ***/
 

    MEMSET(c_inp_strng);

		/**** Ver 1.3 BUG bix Starts Here *****/

    if( strcmp(c_xchng_cd,"NFO") == 0 )
    {
      strcpy( c_inp_strng ,"1^NSE^");
    }
    else
    {
        strcpy( c_inp_strng ,"1^BSE^");
    }
    /**** Ver 1.3 Ends Here ******/

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"Initial c_inp_strng2 = :%s:",c_inp_strng2);
    }

    fn_spn_ltrim(c_inp_strng2,'|');
    /*** sprintf(c_inp_strng,"1^%s",c_inp_strng2);   Commented in ver 1.3 ***/
    /**sprintf(c_inp_strng,"%s",c_inp_strng2);       Commented in Ver 1.3 ***/
		strcat(c_inp_strng,c_inp_strng2);                /* Added in ver 1.3 ***/
    strcat(c_inp_strng,"\n");

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"c_inp_strng 2 = :%s:",c_inp_strng);
    }

    if ( Fchg32 (ptr_fml_Ibuf,FFO_REMARKS,0,(char *)c_inp_strng,0)  ==  -1 )
    {
      fn_errlog( c_ServiceName, "S31180",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

 		if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
    }

    i_rtrn_cd1  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

    if( i_rtrn_cd1 != 0 )
    {
      fn_errlog( c_ServiceName, "S31185",TPMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng2,0)  ==  -1 )
    {
      fn_errlog( c_ServiceName, "S31190",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    fn_spn_ltrim(c_op_strng2,'1');
    fn_spn_ltrim(c_op_strng2,'^');

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"Output String 2 Is :%s:",c_op_strng2);
    }

    /*** Ver 1.8 Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn2,
                                    &d_bnov2,
                                    &d_total_bmrgn2,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31195",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn2 :%lf: d_bnov2:%lf: d_total_bmrgn2:%lf:",d_spn_bmrgn2,d_bnov2,d_total_bmrgn2);
    }
    /*** Ver 1.8 Ends here ***/


   }
 		else
   {
  	/*** Ver 1.1 Ends here ***/

		strcpy(c_inp_strng,c_inp_strng1);
  	strcat(c_inp_strng,c_inp_strng2);
  	strcat(c_inp_strng,"\n");

  	if ( Fadd32 (ptr_fml_Ibuf,FFO_ROUT_CRT,(char *)c_rout_crt,0)  ==  -1 )
  	{
			fn_errlog ( c_ServiceName, "S31200", SQLMSG, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return FAILURE;
  	}

  	if ( Fadd32 (ptr_fml_Ibuf,FFO_REMARKS,(char *)c_inp_strng,0)  ==  -1 )
  	{
			fn_errlog ( c_ServiceName, "S31205", SQLMSG, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return FAILURE;
  	}

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
		}

  	i_rtrn_cd1  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

		if( i_rtrn_cd1 != 0 )
		{
			fn_errlog ( c_ServiceName, "S31210", TPMSG, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return FAILURE;
		}

		if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng,0)  ==  -1 )
		{
			fn_errlog ( c_ServiceName, "S31215", SQLMSG, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return FAILURE;
		}

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"Output String Is :%s:",c_op_strng);
		}

		strcpy(c_op_strng1,strtok(c_op_strng,"|"));
		strcpy(c_op_strng2,strtok(null_ptr,"|"));

    /*** Ver 1.8 Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31220",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
    /*** Ver 1.8 Ends here ***/
	
	} /*** Ver 1.1 ***/

	strcpy(c_mrgn_indctr,strtok(c_op_strng1,"^"));
  strcpy(c_xchng_cd1,strtok(null_ptr,"^"));    /** Ver 1.3 ***/
 	strcpy(c_seq_num1,strtok(null_ptr,"^"));
	strcpy(c_mtch_accnt1,strtok(null_ptr,"^"));
	strcpy(c_spn_mrgn1,strtok(null_ptr,"^"));
	strcpy(c_nov1,strtok(null_ptr,"^"));
	strcpy(c_total_mrgn1,strtok(null_ptr,"^"));

	if (i_cntrct_cnt > 10)  /*** Condition Added in Ver 1.4 ***/
  {
  strcpy(c_xchng_cd2,strtok(c_op_strng2,"^"));    /** Ver 1.3 ***/
/*	strcpy(c_seq_num2,strtok(c_op_strng2,"^"));    ** Ver 1.3 ***/
	strcpy(c_seq_num2,strtok(null_ptr,"^"));        /** Ver 1.3 ***/
	}
	else
	{
		strcpy(c_seq_num2,strtok(c_op_strng2,"^"));    /*** Ver 1.4 ***/
	}
	strcpy(c_mtch_accnt2,strtok(null_ptr,"^"));
	strcpy(c_spn_mrgn2,strtok(null_ptr,"^"));
	strcpy(c_nov2,strtok(null_ptr,"^"));
	strcpy(c_total_mrgn2,strtok(null_ptr,"^"));

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"SPAN c_mtch_accnt1 Is :%s:",c_mtch_accnt1);
		fn_userlog(c_ServiceName,"SPAN c_xchng_cd2 Is :%s:",c_xchng_cd2); /** Ver 1.3 ***/
    fn_userlog(c_ServiceName,"SPAN c_seq_num2 Is :%s:",c_seq_num2);  /** Ver 1.3 ***/
    fn_userlog(c_ServiceName,"SPAN c_spn_mrgn2 Is :%s:",c_spn_mrgn2); /** Ver 1.3 ***/
    fn_userlog(c_ServiceName,"SPAN c_nov2 Is :%s:",c_nov2);            /** Ver 1.3 ***/
    fn_userlog(c_ServiceName,"SPAN c_total_mrgn2 Is :%s:",c_total_mrgn2); /** Ver 1.3 ***/
	}

	if ( c_mtch_accnt1[0] == '1' || c_mtch_accnt1[0] == '2' || c_mtch_accnt1[0] == '3' )	/*** Ver 1.1 ***/
	{
		fn_errlog ( c_ServiceName, "S31225", SQLMSG, c_err_msg );
		tpfree((char *)ptr_fml_Obuf);
		tpfree((char *)ptr_fml_Ibuf);
		return FAILURE;
	}

  /*** Ver 1.8 Starts here ***/
  d_spn_bmrgn = fn_maxd(d_spn_bmrgn1,d_spn_bmrgn2) * 100;
  d_bnov      = fn_maxd(d_bnov1,d_bnov2) * 100;
  d_total_bmrgn = fn_maxd(d_total_bmrgn1,d_total_bmrgn2) * 100;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"d_spn_bmrgn :%lf: d_bnov :%lf: d_total_bmrgn:%lf:",d_spn_bmrgn,d_bnov,d_total_bmrgn);
  }
  /*** Ver 1.8  Ends here ***/ 

	d_spn_mrgn1   = atof(c_spn_mrgn1);
	d_spn_mrgn2   = atof(c_spn_mrgn2);
	d_nov1        = atof(c_nov1);
	d_nov2        = atof(c_nov2);
	d_total_mrgn1 = atof(c_total_mrgn1);
	d_total_mrgn2 = atof(c_total_mrgn2);

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"d_spn_mrgn1:%lf:",d_spn_mrgn1);
		fn_userlog(c_ServiceName,"d_spn_mrgn2:%lf:",d_spn_mrgn2);
		fn_userlog(c_ServiceName,"d_nov1:%lf:",d_nov1);
		fn_userlog(c_ServiceName,"d_nov2:%lf:",d_nov2);
		fn_userlog(c_ServiceName,"d_total_mrgn1:%lf:",d_total_mrgn1);
		fn_userlog(c_ServiceName,"d_total_mrgn2:%lf:",d_total_mrgn2);
	}
	
	st_undrlyng_pstn.d_uspan_nenov_mrgn = fn_maxd(d_spn_mrgn1,d_spn_mrgn2)	*	100	;			/***  SPAN  MRGN  ***/
	st_undrlyng_pstn.d_net_optn_val = fn_maxd(d_nov1,d_nov2)	*	100	;										/***  NOV ***/	
	st_undrlyng_pstn.d_uspan_wenov_mrgn = fn_maxd(d_total_mrgn1,d_total_mrgn2)	*	100	;	/***  SPAN +/- NOV  ***/

  /*** Ver 1.8 Starts Here ***/
  st_undrlyng_pstn.d_uspan_nenov_mrgn  = fn_maxd(st_undrlyng_pstn.d_uspan_nenov_mrgn,d_spn_bmrgn);
  st_undrlyng_pstn.d_net_optn_val = fn_maxd(st_undrlyng_pstn.d_net_optn_val,d_bnov);
  st_undrlyng_pstn.d_uspan_wenov_mrgn = fn_maxd(st_undrlyng_pstn.d_uspan_wenov_mrgn,d_total_bmrgn);
  /*** Ver 1.8 Ends Here ***/


	d_total_mrgn  =  st_undrlyng_pstn.d_uspan_wenov_mrgn  ;	

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"0000- (A+B)Initial Margin IS :%lf:",st_undrlyng_pstn.d_initial_mrgn);
		fn_userlog(c_ServiceName,"0000- (A=C*D)SPAN Margin with Eff of Multiplier is:%lf:",st_undrlyng_pstn.d_span_wemult_mrgn);
		fn_userlog(c_ServiceName,"0000- (B)Exposure  IS :%lf:",st_undrlyng_pstn.d_eba_expr_mrgn);
		fn_userlog(c_ServiceName,"0000- (C)SPAN MARGIN WITH EFFECT OF NOV IS :%lf:",st_undrlyng_pstn.d_uspan_wenov_mrgn);
		fn_userlog(c_ServiceName,"0000- (D)Multiplier IS :%lf:",st_undrlyng_pstn.d_multpr);
		fn_userlog(c_ServiceName,"0000- SPAN MARGIN WITHOUT EFFECT OF NOV IS :%lf:",st_undrlyng_pstn.d_uspan_nenov_mrgn);
		fn_userlog(c_ServiceName,"0000- NOV IS :%lf:",st_undrlyng_pstn.d_net_optn_val);
		fn_userlog(c_ServiceName,"0000- Min. Margin IS :%lf:",d_min_mrgn);
	}

	i_returncode  = fn_cal_mrgn ( c_ServiceName,
																d_total_mrgn,
																d_mltplr,
																d_expsr,
																d_min_expsr,	
																&d_min_mrgn,
																&d_intl_mrgn,
																c_err_msg
															);

	if ( i_returncode !=  0 )
	{
		fn_errlog ( c_ServiceName, "S31230", SQLMSG, c_err_msg );
		tpfree((char *)ptr_fml_Obuf);
		tpfree((char *)ptr_fml_Ibuf);
		return FAILURE;
	}

	d_intl_mrgn = ( long long )d_intl_mrgn;
	d_expsr = ( long long )d_expsr; 
	st_undrlyng_pstn.d_span_wemult_mrgn = ( long long )st_undrlyng_pstn.d_uspan_wenov_mrgn * (d_mltplr);

	d_available_mrgn = st_undrlyng_pstn.d_initial_mrgn + d_undrlyng_notioanl_pnl +  st_undrlyng_pstn.d_blckd_pl;

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"***Available - Minimum Margin Check***");
		fn_userlog(c_ServiceName,"d_available_mrgn:%lf:",d_available_mrgn);
		fn_userlog(c_ServiceName,"st_undrlyng_pstn.d_initial_mrgn:%lf:",st_undrlyng_pstn.d_initial_mrgn);
		fn_userlog(c_ServiceName,"st_undrlyng_pstn.d_blckd_pl:%lf:",st_undrlyng_pstn.d_blckd_pl);
		fn_userlog(c_ServiceName,"d_undrlyng_notioanl_pnl:%lf:",d_undrlyng_notioanl_pnl);
		fn_userlog(c_ServiceName,"d_min_mrgn:%lf:",d_min_mrgn);
		fn_userlog(c_ServiceName,"d_intl_mrgn:%lf:",d_intl_mrgn);
	}

	if ( d_available_mrgn >= d_min_mrgn )
	{
		i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
		if ( i_trnsctn == -1 )
		{
			fn_errlog( c_ServiceName, "S31235", LIBMSG, c_err_msg  );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return FAILURE;
		}

		i_returncode = fn_lock_usr( c_ServiceName, sql_cln_mtch_accnt );

		if ( i_returncode == -1 )
		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			fn_errlog( c_ServiceName, "S31240", LIBMSG, c_err_msg  );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return FAILURE;
		}

		EXEC SQL
			UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
			SET			FUS_MTM_FLG = 'O'
			WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
			AND     FUS_UNDRLYNG        = :sql_undrlyng
			AND     FUS_XCHNG_CD        = :sql_xchng_cd;
			
	  if(SQLCODE != 0 )
	  {
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			fn_errlog( c_ServiceName, "S31245",SQLMSG , c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return FAILURE;
		}
	
		if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
 		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			fn_errlog ( c_ServiceName, "S31250", SQLMSG, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return FAILURE;
		}
 	  sprintf ( c_msg, "%s-%s-UNMARKED IN AVAIL-MIN CHECK",sql_cln_mtch_accnt,sql_undrlyng);
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		
		fn_userlog(c_ServiceName," is am at stage 100 :%s:  :%s:",sql_cln_mtch_accnt,sql_undrlyng);

			rtrim(st_cntrct_pstn.c_cln_mtch_accnt);
			rtrim(st_cntrct_pstn.c_xchng_cd);
			rtrim(st_cntrct_pstn.c_undrlyng);
			

		/******** Ver added 1.5 ****/
			if(DEBUG_MSG_LVL_3)
      {
      	fn_userlog(c_ServiceName," FOD_CLM_MTCH_ACCNT :%s: ", st_cntrct_pstn.c_cln_mtch_accnt);
      	fn_userlog(c_ServiceName," FOD_XCHNG_CD :%s: ", st_cntrct_pstn.c_xchng_cd );
      	fn_userlog(c_ServiceName," FOD_UNDRLYNG :%s: ", st_cntrct_pstn.c_undrlyng );
      	fn_userlog(c_ServiceName," FOD_INDSTK :%c: ",st_cntrct_pstn.c_ctgry_indstk );
			}

		  EXEC SQL
      SELECT count(1)
      INTO   :i_exists
      FROM   FOD_FO_ORDR_DTLS
      WHERE  FOD_CLM_MTCH_ACCNT = :st_cntrct_pstn.c_cln_mtch_accnt   /** trim removed in Ver 1.7 **/
      AND    FOD_XCHNG_CD  = :st_cntrct_pstn.c_xchng_cd              /** trim removed in Ver 1.7 **/
      AND    trim(FOD_UNDRLYNG)  = :st_cntrct_pstn.c_undrlyng
      AND    FOD_INDSTK    = :st_cntrct_pstn.c_ctgry_indstk          /** trim removed in Ver 1.7 **/
 			AND    FOD_ORDR_STTS in ('O','R','P')
      AND    FOD_SPL_FLAG in ('L','M')           /** Ver 1.6 **/
      AND    FOD_CHANNEL = 'SYS';

      if ( SQLCODE != 0 )
      {
         fn_errlog ( c_ServiceName, "S31255", SQLMSG, c_err_msg );
      	 tpfree((char *)ptr_fml_Obuf);  /** ver 1.6 **/
      	 tpfree((char *)ptr_fml_Ibuf);  /** ver 1.6 **/
         return FAILURE;
      }

			strcpy( c_cln_mtch_accnt ,st_cntrct_pstn.c_cln_mtch_accnt );
      strcpy( c_xchng_cd , st_cntrct_pstn.c_xchng_cd );
      strcpy( c_undrlyng , st_cntrct_pstn.c_undrlyng );
      c_prd_typ = st_cntrct_pstn.c_prd_typ;
      c_ctgry_indstk = st_cntrct_pstn.c_ctgry_indstk;
		  c_exrc_typ = st_cntrct_pstn.c_exer_typ;
			c_opt_typ = st_cntrct_pstn.c_opt_typ ;
			l_strike_prc = st_cntrct_pstn.l_strike_prc;	

      if(DEBUG_MSG_LVL_3)
      {
      	fn_userlog(c_ServiceName," i_exists :%d: ",i_exists );
      	fn_userlog(c_ServiceName," FOD_CLM_MTCH_ACCNT :%s: ", c_cln_mtch_accnt);
      	fn_userlog(c_ServiceName," FOD_XCHNG_CD :%s: ", c_xchng_cd );
      	fn_userlog(c_ServiceName," FOD_UNDRLYNG :%s: ", c_undrlyng );
      	fn_userlog(c_ServiceName," FOD_PRDCT_TYP :%c: ",c_prd_typ );
      	fn_userlog(c_ServiceName," FOD_INDSTK :%c: ",c_ctgry_indstk );
			}

      if(i_exists > 0 )
      {
         EXEC SQL ALLOCATE :trd_cursor;
         EXEC SQL EXECUTE
         BEGIN
         OPEN   :trd_cursor FOR
         SELECT FOD_ORDR_RFRNC,
                FOD_PIPE_ID,
                FOD_CHANNEL
         FROM   FOD_FO_ORDR_DTLS
         WHERE  FOD_CLM_MTCH_ACCNT =:c_cln_mtch_accnt   /** trim removed in Ver 1.7 **/
         AND    FOD_XCHNG_CD  = :c_xchng_cd							/** trim removed in Ver 1.7 **/
         AND    trim(FOD_UNDRLYNG)  = :c_undrlyng
         AND    FOD_INDSTK    = :c_ctgry_indstk 				/** trim removed in Ver 1.7 **/
				 AND    FOD_ORDR_STTS in ('O','R','P')
      	 AND    FOD_SPL_FLAG in ('L','M')           /** Ver 1.6 **/
         AND    FOD_CHANNEL   = 'SYS';
         END;
         END-EXEC;

       if ( SQLCODE != 0 )
			 {
          fn_errlog ( c_ServiceName, "S31260", SQLMSG, c_err_msg );
         	EXEC SQL FREE :trd_cursor;    /*** ver 1.6 **/
      		tpfree((char *)ptr_fml_Obuf); /** Ver 1.6 **/
      		tpfree((char *)ptr_fml_Ibuf);
          return FAILURE;
       }

       while( 1 )
       {
        EXEC SQL
        FETCH :trd_cursor
        INTO  :sql_fod_ordr_rfrnc,
              :sql_fod_pipe_id,
              :sql_fod_channel;

        fn_userlog(c_ServiceName," sql_fod_ordr_rfrnc :%s:",sql_fod_ordr_rfrnc );

        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
             fn_userlog(c_ServiceName," no data found");
          	EXEC SQL CLOSE :trd_cursor;    /*** ver 1.6 **/
          	EXEC SQL FREE :trd_cursor;    /*** ver 1.6 **/
            break;
          }
          else
          {
            fn_errlog ( c_ServiceName, "S31265", SQLMSG, c_err_msg );
          	EXEC SQL CLOSE :trd_cursor;    /*** ver 1.6 **/
          	EXEC SQL FREE :trd_cursor;    /*** ver 1.6 **/
          	tpfree((char *)ptr_fml_Obuf); /** ver 1.6 **/
          	tpfree((char *)ptr_fml_Ibuf); /** ver 1.6 **/
            return FAILURE;
          }
        }


       strcpy(c_usr_id,"system");
       strcpy(c_alias,"*");
       l_sssn_id = 0;
			 strcpy(c_svc_nm,"SFO_SPN_CANCEL");

       i_returncode = fn_acall_svc_fml ( c_ServiceName,
                                     c_err_msg,
                                     "SFO_ORD_ROUT",
                                     0,
                                     8,
                                     FFO_USR_ID, (char *)c_usr_id ,
                                     FFO_SVC_NAME, (char *)c_svc_nm,
                                     FFO_SSSN_ID, (char *)&l_sssn_id ,
                                     FFO_XCHNG_CD, (char *)c_xchng_cd ,
                                     FFO_EBA_MTCH_ACT_NO, (char *)c_cln_mtch_accnt ,
                                     FFO_ORDR_RFRNC, (char *)sql_fod_ordr_rfrnc,
                                     FFO_CHANNEL, (char *)sql_fod_channel.arr,
                                     FFO_ALIAS,(char *)c_alias,
                                     FFO_PIPE_ID, (char *)sql_fod_pipe_id);

        if(i_returncode != SUCC_BFR )
        {
         fn_errlog ( c_ServiceName, "S31270", SQLMSG, c_err_msg );
         EXEC SQL CLOSE :trd_cursor;    /*** ver 1.6 **/
         EXEC SQL FREE :trd_cursor;    /*** ver 1.6 **/
         tpfree((char *)ptr_fml_Obuf);  /** ver 1.6 **/
         tpfree((char *)ptr_fml_Ibuf); /** ver 1.6 **/
         return FAILURE;
        }

			}
		}
	}
	
	tpfree((char *)ptr_fml_Obuf);
	tpfree((char *)ptr_fml_Ibuf);
	return SUCCESS;
}

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_CANSQ_SIMTM;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}


int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}



