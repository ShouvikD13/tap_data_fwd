/***
Batch Program : BAT_INDEX_UPLOAD

Purpose       : To upload a CSV file, into table FSC_FO_STCK_CAP

Input Param   : File name and date

Output        : Number of records Uploaded

Tables        : FSC_FO_STCK_CAP

Author        : |ICICI Infotech|sangeet

Date          : 25-09-2001

Version       :  1.0      Release
                 1.1      CR 1491 Ranjit	IBM Migration
								 1.2      CRCSN32841 Vidyayini Krish 
								 1.3			SEM Mapping Changes	Sandeep Patil
								 1.4			View to FML Changes - 01-Sep-2014 - Samip M
**********************************************************************************************/
#include <stdio.h>
#include <ctype.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
/** #include <fo_view_def.h> **/	/** Commented for Ver 1.4 **/
#include <string.h>   /* ver 1.1 */
#include <fn_log.h>   /* ver 1.1 */
#include <time.h>     /* ver 1.1 */
#include <userlog.h>  /* ver 1.1 */
#include <stdlib.h>   /* ver 1.1 */
#include <fn_read_debug_lvl.h>	/* ver 1.1 */



void BAT_INDEX_UPLOAD ( int argc, char *argv[] )
{
  long int li_tot_rcrds;
  int i_ch_val;
  long int li_cnt;
  char c_err_msg [ 256 ];

/****Application Level Variables ****/
  FILE *fpfile;
	char  c_date [ LEN_DATE ];
  char  c_file_nm [ LEN_DATE ];
  int   i = 0,j = 0,counter=0;
  int   tot_recs=0;
  int   i_trnsctn;
  int   i_count ;
  int   i_nifty_flg ; /* ver 1.1 */
  int   i_flg = 0;    /* ver 1.1 */
  char  c;
  char  c_data[1000];
  char  c_temp[1000];
  char  c_file_data[100][100];
  char  c_msg[256];
  char  c_errmsg[256];
  char  c_FilePath[256];
  char  c_FullPath[256];
  char  c_ServiceName[33];
  char  c_event_msg[256 + 1];
  char  c_dir[10];
  char    c_var1;
  char    c_var2;
  char    c_var3;
	char *ptr;
  time_t time_stmp;
  char c_xchng_cd [ 4 ];
	double d_cls_price;		/* ver 1.1 */
	double d_wtg;					/* ver 1.1 */

  EXEC SQL INCLUDE "table/fsc_fo_stck_cap.h";
  struct vw_err_msg *ptr_st_err_msg;

	/*** Commented for Ver 1.4 ******
	ptr_st_err_msg = (struct vw_err_msg *)tpalloc ("VIEW32","vw_err_msg",
                                                         sizeof ( struct vw_err_msg ) );


  if ( ptr_st_err_msg ==  NULL )
  {
    fn_errlog ( c_ServiceName, "S31005", TPMSG, c_event_msg );
    tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
  }
	**** Ver 1.4 *****/
	
	INITBATDBGLVL(argv[0]);		/* ver 1.1 */

  strcpy ( c_ServiceName, argv[0] );

  sprintf ( c_msg, "Batch process %s started", argv[0] );

	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  strcpy ( c_msg, "Creating data. Please wait ... " );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  strcpy( c_xchng_cd, argv[2] );
  strcpy( c_date, argv[4] );
  strcpy( c_file_nm, argv[5] );

  /*************************************************/
  /*********Logic of the Batch Program**************/
  /*************************************************/

	if(DEBUG_MSG_LVL_3)
	{
  	sprintf ( c_msg, "File name |%s|", argv[1]);
  	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  	sprintf ( c_msg, "upload date |%s|", argv[4]); /* 1.2 changed from arg[2] to arg[4] */
  	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
	}

/***** Get the file path from todays date for Mkt cap ************/
/***** The same has to be written for base market cap ************/

  time_stmp = time(NULL);
  strftime ( c_dir, 10, "%Y%m%d", localtime ( &time_stmp ) );
  strcpy( c_FilePath, tuxgetenv("EBALOG_PATH"));
  memset( c_FullPath, 0, sizeof( c_FullPath )) ;
  sprintf( c_FullPath, "%s/%s/fno/", c_FilePath, c_dir );
  strcat( c_FullPath, c_file_nm );

	if(DEBUG_MSG_LVL_3)
  {
  	sprintf ( c_msg, " Full path is |%s|", c_FullPath);
  	userlog( c_ServiceName, " Full path is |%s|", c_FullPath);
  	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
	}

  fpfile=(FILE *)fopen(c_FullPath,"r");
  if (fpfile == NULL)
	{
    fn_errlog(c_ServiceName, "S31010", "Unable to open the file",c_event_msg);
    /*strcpy ( c_msg, "File not found %s ... ",c_FullPath ); */
		sprintf ( c_msg , "File not found %s ... ",c_FullPath );  /* ver 1.1 */
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    /* exit(-7); */ 
		return ;
  }


  EXEC SQL
  TRUNCATE TABLE FSC_FO_STCK_CAP;

  i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );
  if(i_trnsctn == -1)
  {
    sprintf ( c_msg, "  Error commiting transaction");
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    fn_errlog( c_ServiceName, "S31015", LIBMSG,c_event_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    fclose(fpfile);
    exit(-8);
  }

  while ( fgets(c_data, 1000, fpfile))
  {
    tot_recs = tot_recs + 1;

    /*if(tot_recs == 1)*/


		if (tot_recs <= 3 )
    {
      continue ;
    }

    strcpy(c_temp,c_data);
	
		if(DEBUG_MSG_LVL_3)
  	{
    	fn_userlog(c_ServiceName ,"%s",c_data);
		}

    i_nifty_flg =0;		/* ver 1.1 */


		 for(i=0;i<9;i++) /* ver 1.2 changed from 8 to 9  */
    {

      /*if(i==19) ******	 ver 1.1 ********
      {
        strtok(c_data,"\n");
        strcpy(c_file_data[i],c_data);n
        break;
      }

      if(c_data[0] == ',')
      {
        strcpy(c_file_data[i]," ");
        strcpy(c_data,(strstr(c_temp,",") + 1));
        strcpy(c_temp,c_data);
      }
      else
      {*  ver 1.1 */


				if(i==8)     /* Ver 1.2 changed from 7 to 8   */ 
				{
					strtok(c_data,"\n");
					strcpy(c_file_data[i],c_data);
					fn_userlog(c_ServiceName ,"i = %d",i);
					break;
				}

        strtok(c_data,",");

        if((strcmp(c_data ,"NIFTY")!= 0)&& i_nifty_flg == 0)      /* ver 1.1 */
        {
          fn_userlog(c_ServiceName , "End of NIFTY............");
          i_flg = 1;
          break;
        }

        strcpy(c_file_data[i],c_data);

				if(DEBUG_MSG_LVL_3)
  			{
        	fn_userlog(c_ServiceName ,"%d : %s",i,c_file_data[i]);
				}

        strcpy(c_data,(strstr(c_temp,",") + 1));
        strcpy(c_temp,c_data);


        i_nifty_flg = 1;    /* ver 1.1 */

      /*}*/
    }

		if(i_flg)   /* ver 1.1 */
    {
      fn_userlog(c_ServiceName ,"Breaking While........");
      break;
    }

    /*strcpy(sql_fsc_stck_cd.arr,c_file_data[2]); **** ver 1.1 ***
    sscanf(c_file_data[16],"%lf",&sql_fsc_issue_cap); **/


    strcpy(sql_fsc_stck_cd.arr,c_file_data[1]);       /* ver 1.1 */
    sscanf(c_file_data[4],"%lf",&sql_fsc_issue_cap);  /* ver 1.1 */
		sscanf(c_file_data[6],"%lf",&d_cls_price);	/* ver 1.1 */   /* Ver 1.2 changed from 5 to 6 */
		sscanf(c_file_data[8],"%lf",&d_wtg);				/* ver 1.1 */   /* Ver 1.2 changed from 7 to 8 */ 



    SETLEN(sql_fsc_stck_cd);

    /*** Convert the stock code into EBA stock code ***/

    c_var3 = sql_fsc_stck_cd.arr[1] ;

    if(c_var3 == '&')
    {
      c_var1 = sql_fsc_stck_cd.arr[0];
      c_var2 = sql_fsc_stck_cd.arr[2];
      EXEC SQL
      SELECT rtrim(SEM_STCK_CD)
      INTO  :sql_fsc_eba_stck_cd
      FROM SEM_STCK_MAP
      WHERE
      SEM_ENTTY = 3 and			/***		Ver	1.3	SEM_ENTTY Changed From 1 To 3			***/
      SEM_MAP_VL = :c_var1||'&'||:c_var2 ;

			if(SQLCODE != 0)
        {
          fn_errlog(c_ServiceName, "S31020", SQLMSG, c_errmsg);
					sprintf(c_msg,"Error occured <contact system support> scrip :%s", sql_fsc_stck_cd.arr); /* ver 1.1 */
         /*fn_bat_pst_msg ( c_ServiceName,
                  "Error occured <contact system support>", c_tag);	*/
					fn_bat_pst_msg ( c_ServiceName,c_msg,c_tag );		/* ver 1.1 */
          fclose(fpfile);
          fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
          /*exit(-8); * ver 1.1 */
					return; 
        }
    }
    else
    {
      EXEC SQL
      SELECT rtrim(SEM_STCK_CD)
      INTO  :sql_fsc_eba_stck_cd
      FROM SEM_STCK_MAP
      WHERE
      SEM_ENTTY = 3 and			/***    Ver 1.3 SEM_ENTTY Changed From 1 To 3     ***/
      SEM_MAP_VL = :sql_fsc_stck_cd;
      if(SQLCODE != 0)
      {
					sprintf(c_msg,"Error occured <contact system support> scrip :%s", sql_fsc_stck_cd.arr); /* ver 1.1 */
          /*fn_bat_pst_msg ( c_ServiceName,
                  "Error occured <contact system support>", c_tag);	* ver 1.1 */
					fn_bat_pst_msg ( c_ServiceName,c_msg,c_tag );  /* ver 1.1 */
          fn_errlog(c_ServiceName, "S31025", SQLMSG, c_errmsg);
          fclose(fpfile);
          fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
          /* exit(-8); */	/* ver 1.1 */
					return ;				/* ver 1.1 */	
      }
    }
		/* Insert records */
    EXEC SQL
    INSERT INTO FSC_FO_STCK_CAP
    (FSC_STCK_CD,
     FSC_ISSUE_CAP,
     FSC_EBA_STCK_CD,
		 FSC_CLS_PRC,
		 FSC_WTG)
     values
     (:sql_fsc_stck_cd,
      :sql_fsc_issue_cap,
      :sql_fsc_eba_stck_cd, 
			trim(:d_cls_price),			/* ver 1.1 */
			trim(:d_wtg)						/* ver 1.1 */
		);

   if(SQLCODE != 0)
   {
    sprintf ( c_msg, "  Error Inserting records to FSC table ");
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    fn_userlog(c_ServiceName,"Stock code =:%s: FSC_ISSUE_CAP = :%lf:SQLCODE is =%d",sql_fsc_stck_cd.arr,
																			sql_fsc_issue_cap,SQLCODE);
    fn_errlog(c_ServiceName, "S31030", SQLMSG,c_event_msg);
    fclose(fpfile);
    fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    /*exit(-8); */
		return ;
    }
   else
    {
    counter = counter + 1;
    }

  } /* end of whiLe, for each line */

	if ( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 )
    {
    sprintf ( c_msg, "  Error commiting transaction");
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    fn_errlog( c_ServiceName, "S31035", LIBMSG,c_event_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    fclose(fpfile);
    exit(-8);
    }

  sprintf ( c_msg, "  |%d| records uploaded ", counter);
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  sprintf ( c_msg, "Batch process %s ended", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  fclose(fpfile);
  return;
}

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_INDEX_UPLOAD;
  return 0;
}
void fn_bat_term ( int argc, char *argv[] )
{
  return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}
