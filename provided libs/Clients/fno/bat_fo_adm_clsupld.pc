/****************************************************************************************
*					Program Name :bat_fo_adm_clsupld.pc																						*
*					Description  :This Batch will do the processing needed to upload the ADM			* 
*												Related Bill Data to Match Side																	*
*					Input Parameters : exchange code , product code,pipe id,Date									*
*					Output Parameters: Success/Failure 																						*
*					Called By			:	BOF																														*
*																																												*
*					LOG	:																																					*
*																																												*	
*					Ver 1.0 				: Sandip Tambe[New Release]																		*
*					Ver 1.1 				: Sandip Tambe[ FNO BSE Changes]															*
*					Ver 1.2 				: Nitin Save[ FNO BSE Changes-BSE-Entry]											*
*					Ver 1.3 				: Sachin Birje [ ADM Run No Passing ]   											*
*					Ver 1.4 				: Sachin Birje [ View to FML Changes]   											*
*				  Ver 1.5         : Tanmay Patel [ Add Batch Status in APR Table           	   	*
*****************************************************************************************/
#include <stdio.h>
#include <string.h>
#include <sqlca.h>
#include <stdlib.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fn_ddr.h>
#include <string.h>
#include <stdlib.h>
#include <fml_rout.h>
/** #include <fo_view_def.h> ** ver 1.4 **/
#include <fn_read_debug_lvl.h>


void BAT_FO_ADM_CLSUPLD(int argc, char * argv[] )
{

	TPINIT	*ptr_st_tpinfo;
	FBFR32	*Sbuffer;
	FBFR32	*Rbuffer;
	
	long    l_recv_buff_len=0;
	char		c_amc_clm_mtch_accnt[11];
	char 		c_Transaction_Type[6];
	char		c_Maincode[6];
	char		c_Client_Code[11];
	char		c_Bill_No[20];
	char		c_trnsctn_dt[12];
	char		c_Posting_dt[12];
	char		c_post_date[12];			/*** added for sysdate ***/
	char		c_dr_cr_flg;
	char 		c_user_id[9];
	double	d_amount = 0.0;
  
  long    l_run_no;         /*** Ver 1.3 ***/

	int 		i_ret_cd =0 ;
	int 		i_ch_val= 0 ;
	int 		i = 0;
  int     i_succ_rec = 0;
  int     i_fail_rec = 0;
  int     i_trnsctn = 0;  /** Ver 1.5 ***/ 
	int     i_err[9];

	char c_row_id[19];
	char c_err_msg[256];
	char c_msg[256]={0};
	char c_ServiceName[33];
	char c_xchng_cd[4]={'\0'};				/*** Ver 1.1 ***/
	INITBATDBGLVL(argv[0]);

	MEMSET(c_amc_clm_mtch_accnt);
	MEMSET(c_Transaction_Type);
	MEMSET(c_ServiceName);
	MEMSET(c_err_msg);
	MEMSET(c_trnsctn_dt);
	MEMSET(c_Posting_dt);
	MEMSET(c_Maincode);
	MEMSET(c_Client_Code);
	MEMSET(c_user_id);
  MEMSET(c_post_date);
  MEMSET(c_xchng_cd);							/** Ver 1.1 ***/

  if(argc!=5)
  {
    printf("4 arguments expected. <NFO/BFO> <NFO/BFO> <NA> <Run Date>");
    exit(1);
  }
	
	strcpy ( c_ServiceName, argv[0] );
	strcpy ( c_Posting_dt,argv[4]);				/** Bill Posting date **/
	strcpy ( c_xchng_cd,argv[2]);					/** Ver 1.1 ***/	
	strcpy ( c_Transaction_Type,"T001");	/** Transaction Type Hardcoded **/
	fn_bat_pst_msg ( c_ServiceName, " ***** ADM upload Process Started *****", c_tag );

	/** init the rout **/
	fn_init_ddr_pop("NA", "NA", "NA");

	/********Allocate memory to Input and Output Buffer****/

	Sbuffer = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
  if(Sbuffer == NULL)
  {
     fn_errlog(c_ServiceName,"S31005",TPMSG,c_err_msg);
     tpfree((char*)Sbuffer);
     tpclose();
     tpterm ();
     return;
  }
	Rbuffer = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
  if(Rbuffer == NULL)
  {
     fn_errlog(c_ServiceName,"S31010",TPMSG,c_err_msg);
     tpfree((char*)Rbuffer);
     tpclose();
     tpterm ();
     return;
  }

	Finit32(Sbuffer,(FLDLEN32) Fsizeof32(Sbuffer));
	Finit32(Rbuffer,(FLDLEN32) Fsizeof32(Rbuffer));

  /******** Ver 1.2 Starts **************/
	if (strcmp(c_xchng_cd,"NFO")==0)
	{
	  strcpy(c_Maincode,"20087");
	}
	else if (strcmp(c_xchng_cd,"BFO")==0)
	{
	  strcpy(c_Maincode,"20080");
	}
	/******** Ver 1.2 Ends **************/

      
	/*** Selecting Main Code from Parameter Table *****/	
  /** Commented below part under Ver 1.2 Starts  **/
  /*****************************************************
	EXEC SQL
		 SELECT FSP_MAINCODE
		 INTO   :c_Maincode
		 FROM 	FSP_FO_SYSTM_PRMTR;

 	if(SQLCODE != 0)
  {
   	fn_errlog(c_ServiceName, "S31015", SQLMSG, c_err_msg);
   	fn_bat_pst_msg( c_ServiceName, c_err_msg, c_tag );
   	return;
  }
	********************************************************/
	/** Commented  part under Ver 1.2 Ends  **/
  
	EXEC SQL
		 SELECT trunc(sysdate)
		 INTO  :c_post_date
		 FROM dual;
 
  if(SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31020", SQLMSG, c_err_msg);
    fn_bat_pst_msg( c_ServiceName, c_err_msg, c_tag );
    return;
  }


  	rtrim((char *)c_Transaction_Type);
  	rtrim((char *)c_Maincode);
  	rtrim((char *)c_Posting_dt);
  	rtrim((char *)c_post_date);

	if(DEBUG_MSG_LVL_3)
	{	
  	fn_userlog( c_ServiceName, "c_Posting_dt is = :%s", c_Posting_dt );
  	fn_userlog( c_ServiceName, "Maincode  is= :%s:", c_Maincode );
  	fn_userlog( c_ServiceName, "Transaction Typ  is= :%s:", c_Transaction_Type ); /** Ver 1.1 **/
  	fn_userlog( c_ServiceName, "Exchange Code  is= :%s:", c_xchng_cd );						/** Ver 1.1 **/
	}
		/** Adding data to sending buffer **/

  i_err[0]=Fadd32(Sbuffer,FFO_TRNSCTN_TYP,(char *)c_Transaction_Type,0);
  i_err[1]=Fadd32(Sbuffer,FFO_SYMBOL,(char *)c_Maincode,0);
	i_err[2]=Fadd32(Sbuffer,FFO_TM_STMP,(char *)c_post_date,0);
  i_err[2]=Fadd32(Sbuffer,FFO_XCHNG_CD,(char *)c_xchng_cd,0);  /*** Ver 1.1 ***/ 
  for(i= 0; i< 4 ;i++)		/*** Ver 1.1 counter chaged from 3 to 4 **/
  {
    if(i_err[i] == -1)
    {
      fn_userlog(c_ServiceName,"error in field");
      fn_errlog(c_ServiceName,"S31025",FMLMSG,c_err_msg);
      tpfree((char *)Sbuffer);
      tpfree((char *)Rbuffer);
      tpclose();
      tpterm ();
			return;
    }
  }

  while(1)
  {
  	MEMSET(c_amc_clm_mtch_accnt);
  	MEMSET(c_trnsctn_dt);
  	MEMSET(c_Bill_No);
		d_amount = 0.00;
		fn_userlog(c_ServiceName,"ADM Now selecting data for uploading  ");

		EXEC SQL
			SELECT rowid,
						 AMC_CLM_MTCH_ACCNT,
						 AMC_RUN_DT,
						 AMC_BILL_NO,
						 decode(AMC_DBCR_CD,'D',(AMC_NEW_ISEC_MRGN_AMT * -1),AMC_NEW_ISEC_MRGN_AMT), 
						 AMC_DBCR_CD,
             AMC_RUN_NO    /** Ver 1.3 ***/
			INTO  
						:c_row_id,
						:c_amc_clm_mtch_accnt,
						:c_trnsctn_dt,
						:c_Bill_No,
						:d_amount,
						:c_dr_cr_flg,
            :l_run_no      /** Ver 1.3 ***/
			FROM	AMC_ADM_MRGN_CALC
			WHERE AMC_BILL_PST_FLG = 'N'
			AND   AMC_STATUS_FLG ='Y'
		  AND	  trunc(AMC_RUN_DT)= :c_Posting_dt
			AND  AMC_XCHNG_CD=:c_xchng_cd								/*** Ver 1.1 ***/
			AND		ROWNUM <2;
		
		if(SQLCODE != 0)
    {
      if(SQLCODE == NO_DATA_FOUND)
      {
        fn_userlog(c_ServiceName,"No Record to upload or all records uploaded");
        break;
      }
      else
      {
       	fn_userlog(c_ServiceName,"Failed Bill selection- <%ld>", SQLCODE);
       	fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg );
       	strcpy ( c_err_msg, "System error. Contact system support" );
       	fn_bat_pst_msg ( c_ServiceName, c_err_msg, c_tag );
      }
 
    }
  	rtrim((char *)c_amc_clm_mtch_accnt);
  	rtrim((char *)c_Bill_No);
  	rtrim((char *)c_trnsctn_dt);


		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Data Collected Successfully ");
			fn_userlog(c_ServiceName,"ADM Now calling Service for bill uploading ");
  		fn_userlog(c_ServiceName,"FFO_TRNSCTN_TYP  :%s: ",c_Transaction_Type);
	  	fn_userlog(c_ServiceName,"FFO_SYMBOL = :%s:",c_Maincode);
			fn_userlog(c_ServiceName,"FFO_EBA_MTCH_ACT_NO =:%s:",c_amc_clm_mtch_accnt);
			fn_userlog(c_ServiceName,"FFO_BILL_NO =:%s: ",c_Bill_No);
			fn_userlog(c_ServiceName,"FFO_TRD_DT =:%s: ",c_trnsctn_dt);
			fn_userlog(c_ServiceName,"FFO_TM_STMP =:%s: ",c_post_date);
			fn_userlog(c_ServiceName,"FFO_DR_CR_FLG = :%c:",c_dr_cr_flg);
			fn_userlog(c_ServiceName,"FFO_AMOUNT	  = :%lf: ",d_amount);
			fn_userlog(c_ServiceName,"FFO_REC_NO    = :%ld: ",l_run_no);
		}
		/****** add Values to sending Buffer***/

    i_err[0]=Fchg32(Sbuffer,FFO_EBA_MTCH_ACT_NO,(FLDOCC32) 0,(char *)c_amc_clm_mtch_accnt,0);
    i_err[1]=Fchg32(Sbuffer,FFO_BILL_NO,(FLDOCC32) 0,(char *)c_Bill_No,0);
    i_err[2]=Fchg32(Sbuffer,FFO_TRD_DT,(FLDOCC32) 0,(char *)c_trnsctn_dt,0);
    i_err[3]=Fchg32(Sbuffer,FFO_DR_CR_FLG,(FLDOCC32) 0,(char *)&c_dr_cr_flg,0);
    i_err[4]=Fchg32(Sbuffer,FFO_AMOUNT,(FLDOCC32) 0,(char *)&d_amount,0);
    i_err[5]=Fchg32(Sbuffer,FFO_REC_NO,(FLDOCC32) 0,(char *)&l_run_no,0);        /** Ver 1.3 **/

    for(i=0;i<6;i++)   /** Ver 1.3, Changed from 5 to 6 **/
    {
      if(i_err[i] == -1)
      {
				fn_userlog(c_ServiceName," adding data to send Buffer Failed");
        fn_errlog(c_ServiceName,"S31035",TPMSG,c_err_msg);
        tpfree((char *)Sbuffer);
        tpfree((char *)Rbuffer);
        tpclose();
        tpterm ();
  			return;
      }
    } /* Para added successfully */
    
		/**** Call service to upload the bill to class store pocedure **/

   i_ret_cd = tpcall("SFO_ADM_UPLD",(char *)Sbuffer,0,(char **)&Rbuffer,&l_recv_buff_len,0);
                       

	 if(i_ret_cd == -1)
   {
	  	fn_userlog(c_ServiceName,"Bill Posting failed");
			fn_errlog( c_ServiceName, "S31040", LIBMSG, c_err_msg );
			strcpy ( c_err_msg, "System error. Contact system support" );
     	fn_bat_pst_msg ( c_ServiceName, c_err_msg, c_tag );
      i_fail_rec = i_fail_rec +1;
     	return;
	 }
   else
   {
      i_succ_rec = i_succ_rec + 1;
					
			fn_userlog(c_ServiceName,"ADM Now updating record processed successfully ");

	 		i_ret_cd =fn_begintran(c_ServiceName,c_err_msg);
   		if(i_ret_cd == -1)
   		{
   			fn_errlog(c_ServiceName,"S31045",LIBMSG,c_err_msg);
   			fn_userlog(c_ServiceName,"Couldn't start transaction");
   			return ;
   		}


			EXEC SQL
				UPDATE AMC_ADM_MRGN_CALC
				SET		 AMC_BILL_PST_FLG = 'Y',
							 AMC_BILL_PST_DT  = sysdate 
				WHERE	 AMC_CLM_MTCH_ACCNT = :c_amc_clm_mtch_accnt
				AND 	 AMC_BILL_NO = :c_Bill_No
				AND		 AMC_BILL_PST_FLG = 'N'
				AND 	 AMC_XCHNG_CD = :c_xchng_cd							/*** Ver 1.1 ***/
				AND		 ROWID = :c_row_id;
 
 			if( fn_committran(c_ServiceName,i_ret_cd,c_err_msg)== -1 )
   		{
   			fn_aborttran(c_ServiceName,i_ret_cd,c_err_msg);
   			fn_errlog(c_ServiceName,"S31050",LIBMSG,c_err_msg);
   			fn_userlog(c_ServiceName,"Error in commiting trans");
   			return ;
   		}
		}	
	}/* while end */

		sprintf(c_msg," <%d> records posted to class  successfully ",i_succ_rec);
    fn_bat_pst_msg (c_ServiceName,c_msg,c_tag);
	
	if(DEBUG_MSG_LVL_3)
	{	
		fn_userlog(c_ServiceName," Total Bills Posted Successfully :%d:",i_succ_rec);
		fn_userlog(c_ServiceName," Total Failed Bills							 :%d:",i_fail_rec);
	}

  /***** Ver 1.5 Starts *****/

  i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
        fn_errlog(c_ServiceName,"S31055",LIBMSG,c_err_msg);
        fn_userlog(c_ServiceName,"Couldn't start transaction");
        return ;
  }

  fn_userlog(c_ServiceName,"Inserting in APR Table.");
  EXEC SQL
  INSERT INTO audit_prog_runstts
            (
              APR_PROG_NAME,
              APR_TIME,
              APR_SUCC_FLG,
              APR_TRD_DT,
              APR_XCHNG_CD
             )
      VALUES (
              :c_ServiceName,
              sysdate,
              'P',
              :c_Posting_dt, 
              :c_xchng_cd
             );  

  if(SQLCODE != 0)
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_errlog(c_ServiceName, "S31060", SQLMSG, c_err_msg);
    fn_bat_pst_msg( c_ServiceName, c_err_msg, c_tag );
    return;
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog(c_ServiceName,"S31065",LIBMSG,c_err_msg);
        fn_userlog(c_ServiceName,"Error in commiting trans");
        return ;
  }
  /***** Ver 1.5 End *****/
		fn_bat_pst_msg ( c_ServiceName, " ***** ADM upload Process Completed *****", c_tag );
		return ;
}

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_FO_ADM_CLSUPLD;

  if ( argc != 5 )
  {
    fn_userlog ( "bat_fo_adm_clsupld","Usage : %s <NFO/BFO> <NFO/BFO> <NA> <DATE>", argv[0] );
   
    return -1;
  }

  return 0;
}
void fn_bat_term (  int argc, char *argv[] )
{
   return ;
}

int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
  return 0;
}


