/******************************************************************************/
/*  Program           : BAT_DATA_TRANSFER                                     */
/******************************************************************************/
/*  Program           : BAT_DATA_TRANSFER                                     */
/*                                                                            */
/*  Input             :                                                       */
/*                                                                            */
/*  Output            :                                                       */
/*                                                                            */
/*  Description       :                                                       */
/*                                                                            */
/*                                                                            */
/*                                                                            */
/*  Log               : 1.0   26-Aug-2021   Infotech|Anand/Saurabh            */
/*                    : 1.1   19-Oct-2021   Infotech|Saurabh Patil            */
/*                    : 1.2   28-Oct-2021   Infotech|Saurabh Patil            */
/******************************************************************************/
/*   1.0  -  New release                                                      */
/*   1.1  -  Minor Changes                                                    */
/*   1.2  -  Minor Changes modes added                                        */
/*   1.3  -  Movement with CR of ESOP MTM																			*/
/******************************************************************************/
#include<sqlca.h>
#include<string.h>
#include<stdlib.h>
#include<atmi.h>
#include<fml32.h>
#include<fn_log.h>
#include<fn_tuxlib.h>
#include<fn_battmpt.h>
#include<fml_def.h>
#include<fml_rout.h>
#include<fn_read_debug_lvl.h>
#include<userlog.h>
#include<eba.h>

#define LOCAL_TRAN_TIMEOUT 600

void print_qry(char * str, int i_cnt,char * c_ServiceName);

char      c_ServiceName[33];
int       i_trnsctn = 0;

void bat_data_transfer( int argc, char *argv[] )
{
   char      c_ServiceName [33];
   char      c_colmn_nm[50];    /** Ver 1.2  change size 25 to 50 **/
   double    d_count;
   char      c_rid[26] = {'\0'};
   int       i_trnsctn = 0;
   long int  total_rec_count=0;
   long      li_len;
   char      host_array[100]={'\0'};
   long int  selected_records=0;
   long int  select_records=0; 
   long int  transferred_records=0;
   long int  deleted_records=0;
   char      c_msg[50];
   int       i_counter=0;
   char      c_tab_name[46];
   long      l_days_retrieve;
   char      c_days_retrieve[6];
   char      c_days_to_retrive[6];  /** Added in Ver 1.1 **/
   varchar   c_query[1000];
   varchar   c_query1[1000];
   long      l_size_before;
   long      l_size_after;
   long      l_before_count;
   long      l_after_count;
   char      c_before_count[11];
   char      c_after_count[11];
   char      c_size_before[6];
   char      c_size_after[6];
	 char			 c_start_time[21];
	 char			 c_end_time[21];
   char      c_mode_flg[2];         /** Ver 1.2  **/
   EXEC SQL BEGIN DECLARE SECTION;

    varchar select_stmt[3000];
    varchar select_stmt1[3000];
    varchar select_stmt2[3000];
    varchar delete_stmt[3000];
    varchar insert_temp_stmt[3000];
    varchar insert_stmt[3000];
    varchar selectrd_stmt[3000];
    varchar shrink_stmt[3000];
    varchar rowmt_stmt[3000];
    varchar ins_ettl_stmt[3000];
    varchar ins_ettl_stmt1[3000];

   EXEC SQL END DECLARE SECTION;

   INITBATDBGLVL(argv[0]);

   strcpy(c_ServiceName, "bat_data_tran");

   fn_userlog (c_ServiceName,"Batch Service started...");

   /** Ver 1.1 Start**/
   if(argc == 7)      /** Ver 1.2 change 6 to 7 **/
   {
    strcpy(c_days_to_retrive,argv[6]);
   }
   /** Ver 1.1 End **/ 
   else if(argc != 6)      /** Ver 1.2 change 5 to 6 **/
   {
     sprintf(c_msg,"Usage: %s <NFO> <NA> <BO> <Table_name>",argv[0]);
     fn_userlog (c_ServiceName,"Usage : <bat_data_tran> <NFO> <NA> <BO> <Table_name> <Mode-A/B/C> <Optional-Days_to_retrive>");
     return;
   }
   /** Ver 1.1 Start**/
   else   
   {
    strcpy(c_days_to_retrive,"N");
   }
   /** Ver 1.1 End **/
 
   strcpy(c_tab_name,argv[4]);
   strcpy(c_mode_flg,argv[5]);  /** Ver 1.2 **/

   fn_userlog(c_ServiceName,"Input table name is :%s:",c_tab_name);
   fn_userlog(c_ServiceName,"Input Mode is :%s:",c_mode_flg);

   if(strcmp(c_mode_flg,"A") == 0)  /** Ver 1.2 **/
   {
      fn_userlog(c_ServiceName,"Inside A Mode");
       
      /** Ver 1.1 Start **/  
      i_trnsctn = tpbegin(0, 0);

      if ( i_trnsctn == -1 )
      {
        fn_errlog(c_ServiceName,"S31005",LIBMSG,c_err_msg);
        return;
      }

      EXEC SQL
         UPDATE ETM_EBA_TRANSFER_MASTER
         SET    ETM_INSERT_FLG = 'N'
         WHERE  ETM_TABLE_NM = :c_tab_name;
       
      if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog(c_ServiceName,"S31010",SQLMSG,c_err_msg );
        tpabort(0);
        return;
      }
      else if ( SQLCODE == NO_DATA_FOUND )
      {
        fn_userlog (c_ServiceName,"No records found");
        tpabort(0);
        return;
      }

      if ( tpcommit(0) == -1 )
      {
        fn_errlog(c_ServiceName, "S31015", TPMSG, c_err_msg );
        tpabort(0);
        return;
      }
 
      fn_userlog(c_ServiceName,"Insertion Flag Set To N For Table:%s:",c_tab_name);
      /** Ver 1.1 End **/

      i_trnsctn = tpbegin(0, 0);
 
      if ( i_trnsctn == -1 )
      {
        fn_errlog(c_ServiceName,"S31020",LIBMSG,c_err_msg);
        return;
      }

      EXEC SQL
          UPDATE ETM_EBA_TRANSFER_MASTER
          SET    ETM_INSERT_FLG = 'I'
          WHERE  ETM_TABLE_NM = :c_tab_name;

      if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog(c_ServiceName,"S31025",SQLMSG,c_err_msg );
        tpabort(0);
         return;
      }
      else if ( SQLCODE == NO_DATA_FOUND )
      {
        fn_userlog (c_ServiceName,"No records found");
        tpabort(0);
        return;
      }

      if ( tpcommit(0) == -1 )
      {
        fn_errlog(c_ServiceName, "S31030", TPMSG, c_err_msg );
        tpabort(0);
        return;
      }

      memset(insert_temp_stmt.arr,0,sizeof(insert_temp_stmt.arr));
      memset(delete_stmt.arr,0,sizeof(delete_stmt.arr));
      memset(select_stmt.arr,0,sizeof(select_stmt.arr));
      memset(select_stmt1.arr,0,sizeof(select_stmt1.arr));
      memset(select_stmt2.arr,0,sizeof(select_stmt2.arr));
      memset(insert_stmt.arr,0,sizeof(insert_stmt.arr)); 
      memset(ins_ettl_stmt.arr,0,sizeof(ins_ettl_stmt.arr)); 
      memset(ins_ettl_stmt1.arr,0,sizeof(ins_ettl_stmt1.arr)); 

      /** Ver 1.1 Start **/ 
      if(strcmp(c_days_to_retrive,"N") != 0)
      {
         strcpy(c_days_retrieve,c_days_to_retrive); 
                
         EXEC SQL
            SELECT  ETM_COL_NM
            INTO    :c_colmn_nm
            FROM    ETM_EBA_TRANSFER_MASTER
            WHERE   ETM_TABLE_NM = :c_tab_name
            AND     ETM_INSERT_FLG = 'I';
            
            
         if(SQLCODE != 0)
         {
           fn_userlog(c_ServiceName,"Error in fetching from Transfer Master Table...");
           fn_errlog(c_ServiceName,"S31035",SQLMSG,c_err_msg );
           return;
         }
                        
         rtrim(c_colmn_nm);
                    
         fn_userlog (c_ServiceName,"c_colmn_nm :%s:",c_colmn_nm);
         fn_userlog (c_ServiceName,"c_days_retrieve :%s:",c_days_retrieve);
           
      }
      /** Ver 1.1 Start **/
      else if(strcmp(c_days_to_retrive,"N") == 0 )  /** else if condition Added in Ver 1.1  **/
      { 
        EXEC SQL
           SELECT  ETM_COL_NM,
                   ETM_DAYS_RETRIEVE,
                   to_char(ETM_DAYS_RETRIEVE)
           INTO    :c_colmn_nm,
                   :l_days_retrieve,
                   :c_days_retrieve
           FROM    ETM_EBA_TRANSFER_MASTER
           WHERE   ETM_TABLE_NM = :c_tab_name
             AND   ETM_INSERT_FLG = 'I';
           
           
        if(SQLCODE != 0)
        {
          fn_userlog(c_ServiceName,"Error in fetching from Transfer Master Table...");
          fn_errlog(c_ServiceName,"S31040",SQLMSG,c_err_msg );
          return;
        }
              
        rtrim(c_colmn_nm);
        rtrim(c_days_retrieve);
                 
        fn_userlog (c_ServiceName,"c_colmn_nm :%s:",c_colmn_nm);
        fn_userlog (c_ServiceName,"l_days_retrieve :%ld:",l_days_retrieve);
        fn_userlog (c_ServiceName,"c_days_retrieve :%s:",c_days_retrieve);
              
      }       

      strcpy ((char *)select_stmt.arr,"select count(1)");
      strcat ((char *)select_stmt.arr," from ");
      strcat ((char *)select_stmt.arr,c_tab_name);
      strcat ((char *)select_stmt.arr," where ");
      strcat ((char *)select_stmt.arr,c_colmn_nm);
      strcat ((char *)select_stmt.arr," < trunc(sysdate) - ");
      strcat ((char *)select_stmt.arr,c_days_retrieve);

      select_stmt.len = strlen((char *)select_stmt.arr);
      li_len = select_stmt.len; 

      fn_userlog ( c_ServiceName, "Length of stmt is :%ld:",li_len );

      print_qry((char*)select_stmt.arr,li_len,c_ServiceName);
      
      EXEC SQL PREPARE sql_sel_stmt FROM :select_stmt;

      if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName,"S31045",SQLMSG,c_err_msg );
        return;
      }
      fn_userlog ( c_ServiceName, "after prepare...");

      EXEC SQL DECLARE cur_dyn SCROLL CURSOR FOR sql_sel_stmt;

      EXEC SQL OPEN cur_dyn ;
      
      if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName,"S31050",SQLMSG,c_err_msg );
        return;
      }

      EXEC SQL FETCH FIRST cur_dyn INTO :total_rec_count;  
       
      if(SQLCODE != 0)
      {
        fn_userlog(c_ServiceName,"No Record Found. ");
        fn_errlog(c_ServiceName,"S31055",SQLMSG,c_err_msg );
        return;
      }
      
      EXEC SQL CLOSE cur_dyn;
    
      fn_userlog ( c_ServiceName, "total_rec_count :%ld:",total_rec_count);

      EXEC SQL
      SELECT SUM(MB)
      into :l_size_before 
  	  FROM( 
  		select i.table_name,s.segment_type,s.segment_name, s.bytes/(1024*1024) MB 
  		/** from user_segments s, user_indexes i  *** Ver 1.3 **/
			from dba_segments s, dba_indexes i
  		where i.table_name = upper(:c_tab_name) 
  		and s.segment_name=i.index_name 
  		union 
  		select t.table_name,s.segment_type,s.segment_name, s.bytes/(1024*1024) MB 
  		/** from user_segments s, user_tables t  ** Ver 1.3 **/
			from dba_segments s, dba_tables t
  		where t.table_name = upper(:c_tab_name)
  		and s.segment_name=t.table_name);
   
      if(SQLCODE != 0)
      {
         fn_userlog(c_ServiceName,"Error in fetching size of Table...");
         fn_errlog(c_ServiceName,"S31060",SQLMSG,c_err_msg );
         return;
      }
 
      fn_userlog(c_ServiceName,"Size in MB before shrink :%ld:",l_size_before);


      strcpy ((char *)select_stmt1.arr,"select count(1)");
      strcat ((char *)select_stmt1.arr," from ");
      strcat ((char *)select_stmt1.arr,c_tab_name);
     

      select_stmt1.len = strlen((char *)select_stmt1.arr);
      li_len = select_stmt1.len;

      fn_userlog ( c_ServiceName, "Length of stmt is :%ld:",li_len );

      print_qry((char*)select_stmt1.arr,li_len,c_ServiceName);

      EXEC SQL PREPARE sql_sel_stmt1 FROM :select_stmt1;

      if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName,"S31065",SQLMSG,c_err_msg );
        return;
      }
      fn_userlog ( c_ServiceName, "after prepare...");

      EXEC SQL DECLARE cur_dyn1 SCROLL CURSOR FOR sql_sel_stmt1;

      EXEC SQL OPEN cur_dyn1 ;

      if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName,"S31070",SQLMSG,c_err_msg );
        tpabort(0);
        return;
      }

      EXEC SQL FETCH FIRST cur_dyn1 INTO :l_before_count;

      if(SQLCODE != 0)
      {
        fn_userlog(c_ServiceName,"No Record Found. ");
        fn_errlog(c_ServiceName,"S31075",SQLMSG,c_err_msg );
        return;
      }

      EXEC SQL CLOSE cur_dyn1;

      EXEC SQL 
			SELECT to_char(:l_before_count), to_char(:l_size_before), to_char(SYSDATE,'DD-Mon-YYYY HH24:MI:SS')
			into :c_before_count, :c_size_before, :c_start_time from dual;

      if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName,"S31080",SQLMSG,c_err_msg );
        return;
      }

      fn_userlog ( c_ServiceName, "total_rec_count in table :%ld:",l_before_count);
      fn_userlog ( c_ServiceName, "c_before_count :%s:",c_before_count);
      fn_userlog ( c_ServiceName, "c_size_before :%s:",c_size_before);
      fn_userlog ( c_ServiceName, "c_start_time :%s:",c_start_time);

      i_trnsctn = tpbegin(0, 0);
      
      if ( i_trnsctn == -1 )
      {
        fn_errlog(c_ServiceName,"S31085",LIBMSG,c_err_msg);
        return;
      }   
         
         /** strcpy ((char *)ins_ettl_stmt.arr,"INSERT INTO ETTL_EBA_TABLE_TRANSFER_LOG");
             strcat ((char *)ins_ettl_stmt.arr,"(ETTL_TABLE_NAME,ETTL_START_TIME,");
             strcat ((char *)ins_ettl_stmt.arr,"ETTL_COUNT_BFR_TRNSFR,");
             strcat ((char *)ins_ettl_stmt.arr,",ETTL_SIZE_BFR_TRNSFR)  VALUES(");
             strcat ((char *)ins_ettl_stmt.arr,c_tab_name);
             strcat ((char *)ins_ettl_stmt.arr,",");
             strcat ((char *)ins_ettl_stmt.arr,"sysdate");
             strcat ((char *)ins_ettl_stmt.arr,",");
             strcat ((char *)ins_ettl_stmt.arr,c_before_count);
             strcat ((char *)ins_ettl_stmt.arr,",");
             strcat ((char *)ins_ettl_stmt.arr,c_size_before);
             strcat ((char *)ins_ettl_stmt.arr,")"); **/
        
      EXEC SQL
       INSERT INTO ETTL_EBA_TABLE_TRANSFER_LOG
       (ETTL_TABLE_NAME,ETTL_START_TIME,
        ETTL_COUNT_BFR_TRNSFR,
        ETTL_SIZE_BFR_TRNSFR)
       	VALUES
   			(:c_tab_name,
       	TO_DATE(:c_start_time,'DD-Mon-YYYY HH24:MI:SS'),
       	:l_before_count,
       	:l_size_before);
          
        /** ins_ettl_stmt.len = strlen((char *)ins_ettl_stmt.arr);
              li_len = ins_ettl_stmt.len;

              fn_userlog ( c_ServiceName, "Length of stmt is :%ld:",li_len );

              print_qry((char*)ins_ettl_stmt.arr,li_len,c_ServiceName);

              EXEC SQL PREPARE sql_ins_ettl_stmt FROM :ins_ettl_stmt;

              if(SQLCODE != 0)
              {
                fn_errlog(c_ServiceName,"S31090",SQLMSG,c_err_msg );
                tpabort(0);
                return;
              }

              EXEC SQL EXECUTE sql_ins_ettl_stmt; ***/
        
           
      if(SQLCODE != 0)
      {
         if(SQLCODE == NO_DATA_FOUND)
         {
           fn_userlog(c_ServiceName,"No more data to process in %s Table...",c_tab_name);
           tpabort(0);
         }
         else
         {
           fn_errlog(c_ServiceName,"S31095",SQLMSG,c_err_msg );
           tpabort(0);  
           return;
         }
      }
      
   	  if ( tpcommit(0) == -1 )
   	  {
        fn_errlog(c_ServiceName, "S31100", TPMSG, c_err_msg );
        tpabort(0);
        return;
   	  }

      /** Ver 1.1 Start **/ 
      EXEC SQL
        ALTER SESSION ENABLE PARALLEL DML;   
         
      if(SQLCODE != 0)
      {
        fn_userlog(c_ServiceName,"Error in PARALLEL ENABLE...");
        fn_errlog(c_ServiceName,"S31105",SQLMSG,c_err_msg );
        return;
      }
      
      fn_userlog ( c_ServiceName, "Parallel Session Enable here..." );
      /** Ver 1.1 End **/
      while(1)
      {
   
        strcpy ((char *)insert_temp_stmt.arr,"INSERT INTO TEMP_DATA_TRANSFER ");
        strcat ((char *)insert_temp_stmt.arr,"(SELECT ROWID FROM ");
        strcat ((char *)insert_temp_stmt.arr,c_tab_name);
        /*** strcat ((char *)insert_temp_stmt.arr," WHERE rownum < 100001 " ); Commented in Ver 1.1 ***/ 
        /** Ver 1.1 Start **/
        strcat ((char *)insert_temp_stmt.arr," WHERE ");
        strcat ((char *)insert_temp_stmt.arr,c_colmn_nm);
     		strcat ((char *)insert_temp_stmt.arr," < trunc(sysdate) - ");
      	strcat ((char *)insert_temp_stmt.arr,c_days_retrieve);
        strcat ((char *)insert_temp_stmt.arr," and rownum < 100001 ");
        /** Ver 1.1 End **/ 
        strcat ((char *)insert_temp_stmt.arr,")");
         
        insert_temp_stmt.len = strlen((char *)insert_temp_stmt.arr);
        li_len = insert_temp_stmt.len;

        fn_userlog ( c_ServiceName, "Length of stmt is :%ld:",li_len );

        print_qry((char*)insert_temp_stmt.arr,li_len,c_ServiceName);

        EXEC SQL PREPARE sql_inst_temp_stmt FROM :insert_temp_stmt;

        if(SQLCODE != 0)
        {
           fn_errlog(c_ServiceName,"S31110",SQLMSG,c_err_msg );
           return;
        }

        EXEC SQL EXECUTE sql_inst_temp_stmt;

        fn_userlog(c_ServiceName,"Count after insert :%ld:",sqlca.sqlerrd[2]);

        if(SQLCODE != 0)
        {
           if(SQLCODE == NO_DATA_FOUND)
           {
              fn_userlog(c_ServiceName,"No more data to process in %s Table...",c_tab_name);
              EXEC SQL ROLLBACK;   /** Ver 1.1 **/
              break;
           }
           else
           {
             EXEC SQL ROLLBACK;
             fn_errlog(c_ServiceName,"S31115",SQLMSG,c_err_msg );
             continue;
             return;
           }
        } 
		  	if(sqlca.sqlerrd[2] == 0)
			  {
            fn_userlog(c_ServiceName,"No more data to process in %s Table...",c_tab_name);
            EXEC SQL ROLLBACK;   /** Ver 1.1 **/
            break;
				}
 

        strcpy ((char *)insert_stmt.arr,"INSERT /*+ PARALLEL(16) */ INTO ");   /** Ver 1.1 **/
        strcat ((char *)insert_stmt.arr,c_tab_name);
        /**strcat ((char *)insert_stmt.arr,"@CONTENTDEV_DB ");**** dev **/ 
        /** strcat ((char *)insert_stmt.arr,"@CONTENT_DB "); ** uat ***/
        strcat ((char *)insert_stmt.arr,"@NEOEBA_DBLINK "); /** Live **/
        strcat ((char *)insert_stmt.arr,"(SELECT * FROM ");
        strcat ((char *)insert_stmt.arr,c_tab_name);
        strcat ((char *)insert_stmt.arr," WHERE ROWID in (SELECT TEMP_ROWID FROM TEMP_DATA_TRANSFER)) "); /** Ver 1.1  "*" replaced by temp_rowid**/


        insert_stmt.len = strlen((char *)insert_stmt.arr);
        li_len = insert_stmt.len;

        fn_userlog ( c_ServiceName, "Length of stmt is :%ld:",li_len );

        print_qry((char*)insert_stmt.arr,li_len,c_ServiceName);

        EXEC SQL PREPARE sql_inst_stmt FROM :insert_stmt;

        if(SQLCODE != 0)
        {
           fn_errlog(c_ServiceName,"S31120",SQLMSG,c_err_msg );
           EXEC SQL ROLLBACK;           /** Ver 1.1 **/                       
           return;
        }

        EXEC SQL EXECUTE sql_inst_stmt;

        fn_userlog(c_ServiceName,"Count after insert remote :%ld:",sqlca.sqlerrd[2]);

        if(SQLCODE != 0)
        {
           if(SQLCODE == NO_DATA_FOUND)
           {
              fn_userlog(c_ServiceName,"No more data to process in %s Table...",c_tab_name);
            	EXEC SQL ROLLBACK;        /** Ver 1.1 **/
              break;
           }
           else
           {
              fn_errlog(c_ServiceName,"S31125",SQLMSG,c_err_msg );
              EXEC SQL ROLLBACK;          /** Ver 1.1 **/
              continue;
              return;
           }
        }
 

        strcpy ((char *)delete_stmt.arr,"DELETE /*+ PARALLEL(16) */ FROM ");     /** Ver 1.1 **/
        strcat ((char *)delete_stmt.arr,c_tab_name);
        strcat ((char *)delete_stmt.arr," WHERE rowid in (SELECT TEMP_ROWID FROM TEMP_DATA_TRANSFER)");  /** Ver 1.1 "*" replaced by temp_rowid **/

        delete_stmt.len = strlen((char *)delete_stmt.arr);
        li_len = delete_stmt.len;

        fn_userlog ( c_ServiceName, "Length of stmt is :%ld:",li_len );

        print_qry((char*)delete_stmt.arr,li_len,c_ServiceName);

        EXEC SQL PREPARE sql_del_stmt FROM :delete_stmt;

        if(SQLCODE != 0)
        {
           fn_errlog(c_ServiceName,"S31130",SQLMSG,c_err_msg );
           EXEC SQL ROLLBACK;            /** Ver 1.1 **/
           return;
        }

        EXEC SQL EXECUTE sql_del_stmt;

        fn_userlog(c_ServiceName,"Count after delete :%ld:",sqlca.sqlerrd[2]);

        if(SQLCODE != 0)
        {
           fn_errlog(c_ServiceName,"S31135",SQLMSG,c_err_msg );
           EXEC SQL ROLLBACK;           /** Ver 1.1 **/
           return;
        }

        EXEC SQL COMMIT;

      }
 
      /** Ver 1.1 Start **/      
      EXEC SQL
      ALTER SESSION DISABLE PARALLEL DML;

      if(SQLCODE != 0)
      {
         fn_errlog(c_ServiceName,"S31140",SQLMSG,c_err_msg );
         return;
      } 
  
      fn_userlog ( c_ServiceName, "Parallel Session Disable here..." );
      /** Ver 1.1 End **/
 
      fn_userlog (c_ServiceName,"Preparing SQL statement for enable row movement...");

      strcpy ((char *)rowmt_stmt.arr,"ALTER TABLE ");
      strcat ((char *)rowmt_stmt.arr,c_tab_name);
      strcat ((char *)rowmt_stmt.arr," ENABLE ROW MOVEMENT ");

      rowmt_stmt.len = strlen((char *)rowmt_stmt.arr);
      li_len = rowmt_stmt.len;

      fn_userlog ( c_ServiceName, "Length of stmt is :%ld:",li_len );

      print_qry((char*)rowmt_stmt.arr,li_len,c_ServiceName);

      EXEC SQL PREPARE sql_rowmt_stmt FROM :rowmt_stmt;

      if(SQLCODE != 0)
      {
         fn_errlog(c_ServiceName,"S31145",SQLMSG,c_err_msg );
         return;
      }

      EXEC SQL EXECUTE sql_rowmt_stmt;

      if(SQLCODE != 0)
      {
         fn_errlog(c_ServiceName,"S31150",SQLMSG,c_err_msg );
         return;
      }

      fn_userlog (c_ServiceName,"Preparing SQL statement for shrink...");

      strcpy ((char *)shrink_stmt.arr,"ALTER TABLE ");
      strcat ((char *)shrink_stmt.arr,c_tab_name);
      strcat ((char *)shrink_stmt.arr," SHRINK SPACE CASCADE");

      shrink_stmt.len = strlen((char *)shrink_stmt.arr);
      li_len = shrink_stmt.len;

      fn_userlog ( c_ServiceName, "Length of stmt is :%ld:",li_len );

      print_qry((char*)shrink_stmt.arr,li_len,c_ServiceName);

      EXEC SQL PREPARE sql_shrink_stmt FROM :shrink_stmt;

      if(SQLCODE != 0)
      {
         fn_errlog(c_ServiceName,"S31155",SQLMSG,c_err_msg );
         return;
      } 

      EXEC SQL EXECUTE sql_shrink_stmt;

      if(SQLCODE != 0)
      {
         fn_errlog(c_ServiceName,"S31160",SQLMSG,c_err_msg );
         return;
      }


      i_trnsctn = tpbegin(0, 0);

      if ( i_trnsctn == -1 )
      {
        fn_errlog(c_ServiceName,"S31165",LIBMSG,c_err_msg);
        return;
      }


      EXEC SQL
         UPDATE ETM_EBA_TRANSFER_MASTER
         SET    ETM_INSERT_FLG = 'Y'
         WHERE  ETM_INSERT_FLG = 'I'
         AND    ETM_TABLE_NM = :c_tab_name
         AND    ROWNUM < 2;
       
      if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog(c_ServiceName,"S31170",SQLMSG,c_err_msg );
        tpabort(0);
        return;
      }
      else if ( SQLCODE == NO_DATA_FOUND )
      {
        fn_userlog (c_ServiceName,"NO records found");
        tpabort(0);
        return;
      }
 
      if ( tpcommit(0) == -1 )
      {
        fn_errlog(c_ServiceName, "S31175", TPMSG, c_err_msg );
        tpabort(0);
        return;
      }

      EXEC SQL
      SELECT SUM(MB)
      into :l_size_after
      FROM(
      select i.table_name,s.segment_type,s.segment_name, s.bytes/(1024*1024) MB
      /** from user_segments s, user_indexes i ** Ver 1.3 **/
			from dba_segments s, dba_indexes i
      where i.table_name = upper(:c_tab_name)
      and s.segment_name=i.index_name
      union
      select t.table_name,s.segment_type,s.segment_name, s.bytes/(1024*1024) MB
      /** from user_segments s, user_tables t ** Ver 1.3 **/
			from dba_segments s, dba_tables t
      where t.table_name = upper(:c_tab_name)
      and s.segment_name=t.table_name);

      if(SQLCODE != 0)
      {
         fn_userlog(c_ServiceName,"Error in fetching size of Table...");
         fn_errlog(c_ServiceName,"S31180",SQLMSG,c_err_msg );
         return;
      }

      fn_userlog(c_ServiceName,"Size in MB after shrink :%ld:",l_size_after);
  

      strcpy ((char *)select_stmt2.arr,"select count(1)");
      strcat ((char *)select_stmt2.arr," from ");
      strcat ((char *)select_stmt2.arr,c_tab_name);
     

      select_stmt2.len = strlen((char *)select_stmt2.arr);
      li_len = select_stmt2.len;

      fn_userlog ( c_ServiceName, "Length of stmt is :%ld:",li_len );

      print_qry((char*)select_stmt2.arr,li_len,c_ServiceName);

      EXEC SQL PREPARE sql_sel_stmt2 FROM :select_stmt2;

      if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName,"S31185",SQLMSG,c_err_msg );
        return;
      }
      fn_userlog ( c_ServiceName, "after prepare...");

      EXEC SQL DECLARE cur_dyn2 SCROLL CURSOR FOR sql_sel_stmt2;

      EXEC SQL OPEN cur_dyn2 ;

      if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName,"S31190",SQLMSG,c_err_msg );
        return;
      }

      EXEC SQL FETCH FIRST cur_dyn2 INTO :l_after_count;

      if(SQLCODE != 0)
      {
        fn_userlog(c_ServiceName,"No Record Found. ");
        fn_errlog(c_ServiceName,"S31195",SQLMSG,c_err_msg );
        return;
      }

      EXEC SQL CLOSE cur_dyn2;

      EXEC SQL SELECT to_char(:l_after_count), to_char(:l_size_after), to_char(SYSDATE,'DD-Mon-YYYY HH24:MI:SS')
			into :c_before_count, :c_size_before, :c_end_time 
			from dual;

      if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName,"S31200",SQLMSG,c_err_msg );
        return;
      }

      fn_userlog ( c_ServiceName, "total_rec_count :%ld:",l_after_count);
      fn_userlog ( c_ServiceName, "c_end_time :%s:",c_end_time);

      i_trnsctn = tpbegin(0, 0);

       if ( i_trnsctn == -1 )
       {
         fn_errlog(c_ServiceName,"S31205",LIBMSG,c_err_msg);
         return;
       }

			/****
      strcpy ((char *)ins_ettl_stmt1.arr,"INSERT INTO ETTL_EBA_TABLE_TRANSFER_LOG");
              strcat ((char *)ins_ettl_stmt1.arr,"(ETTL_TABLE_NAME,ETTL_START_TIME,ETTL_COUNT_BFR_TRNSFR,ETTL_SIZE_BFR_TRNSFR)  VALUES(");
             strcat ((char *)ins_ettl_stmt1.arr,c_tab_name);
             strcat ((char *)ins_ettl_stmt1.arr,",");
             strcat ((char *)ins_ettl_stmt1.arr,"sysdate");
             strcat ((char *)ins_ettl_stmt1.arr,",");
             strcat ((char *)ins_ettl_stmt1.arr,c_after_count);
             strcat ((char *)ins_ettl_stmt1.arr,",");
             strcat ((char *)ins_ettl_stmt1.arr,c_size_after);
             strcat ((char *)ins_ettl_stmt1.arr,")");


              ins_ettl_stmt1.len = strlen((char *)ins_ettl_stmt1.arr);
              li_len = ins_ettl_stmt1.len;

              fn_userlog ( c_ServiceName, "Length of stmt is :%ld:",li_len );

              print_qry((char*)ins_ettl_stmt1.arr,li_len,c_ServiceName);

              EXEC SQL PREPARE sql_ins_ettl_stmt1 FROM :ins_ettl_stmt1;

              if(SQLCODE != 0)
              {
                fn_errlog(c_ServiceName,"S31210",SQLMSG,c_err_msg );
                return;
              }

              EXEC SQL EXECUTE sql_ins_ettl_stmt1;

						***/

					EXEC SQL
						UPDATE ETTL_EBA_TABLE_TRANSFER_LOG
						SET ETTL_END_TIME = TO_DATE(:c_end_time,'DD-Mon-YYYY HH24:MI:SS'),
						ETTL_COUNT_AFTR_TRNSFR = :l_after_count,
						ETTL_SIZE_AFTR_TRNSFR = :l_size_after
						WHERE ETTL_TABLE_NAME = :c_tab_name
						AND ETTL_START_TIME = TO_DATE(:c_start_time,'DD-Mon-YYYY HH24:MI:SS');
            
          if(SQLCODE != 0)
          {
             if(SQLCODE == NO_DATA_FOUND)
             {
               fn_userlog(c_ServiceName,"No more data to process in %s Table...",c_tab_name);
               tpabort(0);  
             }
             else
             {
               fn_errlog(c_ServiceName,"S31215",SQLMSG,c_err_msg );
               tpabort(0);
               return;
             }
          } 


      if ( tpcommit(0) == -1 )
   		{
     		fn_errlog(c_ServiceName, "S31220", TPMSG, c_err_msg );
     		tpabort(0);
     		return;
   		}

   }
   /***   Ver 1.2 Start ***/
   else if(strcmp(c_mode_flg,"B") == 0)
   {
     fn_userlog ( c_ServiceName, "Inside B Mode...");

     i_trnsctn = tpbegin(0, 0);

     if ( i_trnsctn == -1 )
     {
       fn_errlog(c_ServiceName,"S31225",LIBMSG,c_err_msg);
       return;
     }

     EXEC SQL
         UPDATE ETM_EBA_TRANSFER_MASTER
         SET    ETM_INSERT_FLG = 'N'
         WHERE  ETM_TABLE_NM = :c_tab_name;

     if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
     {
       fn_errlog(c_ServiceName,"S31230",SQLMSG,c_err_msg );
       tpabort(0);
       return;
     }
     else if ( SQLCODE == NO_DATA_FOUND )
     {
       fn_userlog (c_ServiceName,"No records found");
       tpabort(0);
       return;
     }

     if ( tpcommit(0) == -1 )
     {
       fn_errlog(c_ServiceName, "S31235", TPMSG, c_err_msg );
       tpabort(0);
       return;
     }

     fn_userlog(c_ServiceName,"Insertion Flag Set To N For Table:%s:",c_tab_name);

     i_trnsctn = tpbegin(0, 0);

     if ( i_trnsctn == -1 )
     {
       fn_errlog(c_ServiceName,"S31240",LIBMSG,c_err_msg);
       return;
     }

     EXEC SQL
          UPDATE ETM_EBA_TRANSFER_MASTER
          SET    ETM_INSERT_FLG = 'I'
          WHERE  ETM_TABLE_NM = :c_tab_name;

     if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
     {
       fn_errlog(c_ServiceName,"S31245",SQLMSG,c_err_msg );
       tpabort(0);
        return;
     }
     else if ( SQLCODE == NO_DATA_FOUND )
     {
       fn_userlog (c_ServiceName,"No records found");
       tpabort(0);
       return;
     }

     if ( tpcommit(0) == -1 )
     {
       fn_errlog(c_ServiceName, "S31250", TPMSG, c_err_msg );
       tpabort(0);
       return;
     }
     
     memset(delete_stmt.arr,0,sizeof(delete_stmt.arr));
     memset(select_stmt1.arr,0,sizeof(select_stmt1.arr));
     memset(select_stmt2.arr,0,sizeof(select_stmt2.arr));

     if(strcmp(c_days_to_retrive,"N") != 0)
     {
        strcpy(c_days_retrieve,c_days_to_retrive);

        EXEC SQL
            SELECT  ETM_COL_NM
            INTO    :c_colmn_nm
            FROM    ETM_EBA_TRANSFER_MASTER
            WHERE   ETM_TABLE_NM = :c_tab_name
            AND     ETM_INSERT_FLG = 'I';


        if(SQLCODE != 0)
        {
          fn_userlog(c_ServiceName,"Error in fetching from Transfer Master Table...");
          fn_errlog(c_ServiceName,"S31255",SQLMSG,c_err_msg );
          return;
        }

        rtrim(c_colmn_nm);

        fn_userlog (c_ServiceName,"c_colmn_nm :%s:",c_colmn_nm);
        fn_userlog (c_ServiceName,"c_days_retrieve :%s:",c_days_retrieve);

     }
     else if(strcmp(c_days_to_retrive,"N") == 0 )  
     {
       EXEC SQL
          SELECT  ETM_COL_NM,
                  ETM_DAYS_RETRIEVE,
                  to_char(ETM_DAYS_RETRIEVE)
          INTO    :c_colmn_nm,
                  :l_days_retrieve,
                  :c_days_retrieve
          FROM    ETM_EBA_TRANSFER_MASTER
          WHERE   ETM_TABLE_NM = :c_tab_name
            AND   ETM_INSERT_FLG = 'I';


       if(SQLCODE != 0)
       {
         fn_userlog(c_ServiceName,"Error in fetching from Transfer Master Table...");
         fn_errlog(c_ServiceName,"S31260",SQLMSG,c_err_msg );
         return;
       }

       rtrim(c_colmn_nm);
       rtrim(c_days_retrieve);

       fn_userlog (c_ServiceName,"c_colmn_nm :%s:",c_colmn_nm);
       fn_userlog (c_ServiceName,"l_days_retrieve :%ld:",l_days_retrieve);
       fn_userlog (c_ServiceName,"c_days_retrieve :%s:",c_days_retrieve);

     }

     strcpy ((char *)select_stmt.arr,"select count(1)");
     strcat ((char *)select_stmt.arr," from ");
     strcat ((char *)select_stmt.arr,c_tab_name);
     strcat ((char *)select_stmt.arr," where ");
     strcat ((char *)select_stmt.arr,c_colmn_nm);
     strcat ((char *)select_stmt.arr," < trunc(sysdate) - ");
     strcat ((char *)select_stmt.arr,c_days_retrieve);

     select_stmt.len = strlen((char *)select_stmt.arr);
     li_len = select_stmt.len;

     fn_userlog ( c_ServiceName, "Length of stmt is :%ld:",li_len );

     print_qry((char*)select_stmt.arr,li_len,c_ServiceName);

     EXEC SQL PREPARE sql_sel_stmt FROM :select_stmt;

     if(SQLCODE != 0)
     {
       fn_errlog(c_ServiceName,"S31265",SQLMSG,c_err_msg );
       return;
     }
     fn_userlog ( c_ServiceName, "after prepare...");

     EXEC SQL DECLARE cur_dynm SCROLL CURSOR FOR sql_sel_stmt;

     EXEC SQL OPEN cur_dynm ;

     if(SQLCODE != 0)
     {
       fn_errlog(c_ServiceName,"S31270",SQLMSG,c_err_msg );
       return;
     }

     EXEC SQL FETCH FIRST cur_dynm INTO :total_rec_count;

     if(SQLCODE != 0)
     {
       fn_userlog(c_ServiceName,"No Record Found. ");
       fn_errlog(c_ServiceName,"S31275",SQLMSG,c_err_msg );
       return;
     }

     EXEC SQL CLOSE cur_dynm;

     fn_userlog ( c_ServiceName, "total_rec_count :%ld:",total_rec_count);

     EXEC SQL
      SELECT SUM(MB)
      into :l_size_before
      FROM(
      select i.table_name,s.segment_type,s.segment_name, s.bytes/(1024*1024) MB
      from user_segments s, user_indexes i
      where i.table_name = upper(:c_tab_name)
      and s.segment_name=i.index_name
      union
      select t.table_name,s.segment_type,s.segment_name, s.bytes/(1024*1024) MB
      from user_segments s, user_tables t
      where t.table_name = upper(:c_tab_name)
      and s.segment_name=t.table_name);

      if(SQLCODE != 0)
      {
         fn_userlog(c_ServiceName,"Error in fetching size of Table...");
         fn_errlog(c_ServiceName,"S31280",SQLMSG,c_err_msg );
         return;
      }

      fn_userlog(c_ServiceName,"Size in MB before shrink :%ld:",l_size_before);

      strcpy ((char *)select_stmt1.arr,"select count(1)");
      strcat ((char *)select_stmt1.arr," from ");
      strcat ((char *)select_stmt1.arr,c_tab_name);


      select_stmt1.len = strlen((char *)select_stmt1.arr);
      li_len = select_stmt1.len;

      fn_userlog ( c_ServiceName, "Length of stmt is :%ld:",li_len );

      print_qry((char*)select_stmt1.arr,li_len,c_ServiceName);

      EXEC SQL PREPARE sql_sel_stmt1 FROM :select_stmt1;

      if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName,"S31285",SQLMSG,c_err_msg );
        return;
      }
      fn_userlog ( c_ServiceName, "after prepare...");

      EXEC SQL DECLARE cur_dyn3 SCROLL CURSOR FOR sql_sel_stmt1;

      EXEC SQL OPEN cur_dyn3 ;

      if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName,"S31290",SQLMSG,c_err_msg );
        tpabort(0);
        return;
      }

      EXEC SQL FETCH FIRST cur_dyn3 INTO :l_before_count;

      if(SQLCODE != 0)
      {
        fn_userlog(c_ServiceName,"No Record Found. ");
        fn_errlog(c_ServiceName,"S31295",SQLMSG,c_err_msg );
        return;
      }

      EXEC SQL CLOSE cur_dyn3;

      EXEC SQL
      SELECT to_char(:l_before_count), to_char(:l_size_before), to_char(SYSDATE,'DD-Mon-YYYY HH24:MI:SS')
      into :c_before_count, :c_size_before, :c_start_time from dual;

      if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName,"S31300",SQLMSG,c_err_msg );
        return;
      }

      fn_userlog ( c_ServiceName, "total_rec_count in table :%ld:",l_before_count);
      fn_userlog ( c_ServiceName, "c_size_before :%s:",c_size_before);
      fn_userlog ( c_ServiceName, "c_start_time :%s:",c_start_time);

      i_trnsctn = tpbegin(0, 0);

      if ( i_trnsctn == -1 )
      {
        fn_errlog(c_ServiceName,"S31305",LIBMSG,c_err_msg);
        return;
      }


      EXEC SQL
       INSERT INTO ETTL_EBA_TABLE_TRANSFER_LOG
       (ETTL_TABLE_NAME,ETTL_START_TIME,
        ETTL_COUNT_BFR_TRNSFR,
        ETTL_SIZE_BFR_TRNSFR)
        VALUES
        (:c_tab_name,
        TO_DATE(:c_start_time,'DD-Mon-YYYY HH24:MI:SS'),
        :l_before_count,
        :l_size_before);

       if(SQLCODE != 0)
       {
          if(SQLCODE == NO_DATA_FOUND)
          {
            fn_userlog(c_ServiceName,"No more data to process in %s Table...",c_tab_name);
            tpabort(0);
          }
          else
          {
            fn_errlog(c_ServiceName,"S31310",SQLMSG,c_err_msg );
            tpabort(0);
            return;
          }
       }
       
       if ( tpcommit(0) == -1 )
       {
         fn_errlog(c_ServiceName, "S31315", TPMSG, c_err_msg );
         tpabort(0);
         return;
       }
  
       EXEC SQL
          ALTER SESSION ENABLE PARALLEL DML;
 
       if(SQLCODE != 0)
       {
          fn_userlog(c_ServiceName,"Error in fetching from Transfer Master Table...");
          fn_errlog(c_ServiceName,"S31320",SQLMSG,c_err_msg );
          return;
       }

       fn_userlog ( c_ServiceName, "Parallel Session Enable here..." );

       while(1)
       {
 
         strcpy ((char *)delete_stmt.arr,"DELETE /*+ PARALLEL(16) */ FROM ");     
         strcat ((char *)delete_stmt.arr,c_tab_name);
         strcat ((char *)delete_stmt.arr," WHERE ");
         strcat ((char *)delete_stmt.arr,c_colmn_nm);
         strcat ((char *)delete_stmt.arr," < trunc(sysdate) - ");
         strcat ((char *)delete_stmt.arr,c_days_retrieve);
         strcat ((char *)delete_stmt.arr," AND rownum < 100001");  

         delete_stmt.len = strlen((char *)delete_stmt.arr);
         li_len = delete_stmt.len;
 
         fn_userlog ( c_ServiceName, "Length of stmt is :%ld:",li_len );
 
         print_qry((char*)delete_stmt.arr,li_len,c_ServiceName);
 
         EXEC SQL PREPARE sql_del_stmt FROM :delete_stmt;
 
         if(SQLCODE != 0)
         {
            fn_errlog(c_ServiceName,"S31325",SQLMSG,c_err_msg );
            EXEC SQL ROLLBACK;
            return;
         }
 
         EXEC SQL EXECUTE sql_del_stmt;
 
         fn_userlog(c_ServiceName,"Count after delete :%ld:",sqlca.sqlerrd[2]);
  
         if(SQLCODE != 0)
         {
           if(SQLCODE == NO_DATA_FOUND || sqlca.sqlerrd[2] == 0)
           {
              fn_userlog(c_ServiceName,"No more data to process in %s Table...",c_tab_name);
              EXEC SQL ROLLBACK;  
              break;
           }
           else
           {
             EXEC SQL ROLLBACK;
             fn_errlog(c_ServiceName,"S31330",SQLMSG,c_err_msg );
             continue;
             return;
           }
         }
            
         EXEC SQL COMMIT;
       }
       EXEC SQL
          ALTER SESSION DISABLE PARALLEL DML;

       if(SQLCODE != 0)
       {
          fn_errlog(c_ServiceName,"S31335",SQLMSG,c_err_msg );
          return;
       }

       fn_userlog ( c_ServiceName, "Parallel Session Disable here..." );    

       fn_userlog (c_ServiceName,"Preparing SQL statement for enable row movement...");

       strcpy ((char *)rowmt_stmt.arr,"ALTER TABLE ");
       strcat ((char *)rowmt_stmt.arr,c_tab_name);
       strcat ((char *)rowmt_stmt.arr," ENABLE ROW MOVEMENT ");

       rowmt_stmt.len = strlen((char *)rowmt_stmt.arr);
       li_len = rowmt_stmt.len;

       fn_userlog ( c_ServiceName, "Length of stmt is :%ld:",li_len );

       print_qry((char*)rowmt_stmt.arr,li_len,c_ServiceName);

       EXEC SQL PREPARE sql_rowmt_stmt FROM :rowmt_stmt;

       if(SQLCODE != 0)
       {
         fn_errlog(c_ServiceName,"S31340",SQLMSG,c_err_msg );
         return;
       }

       EXEC SQL EXECUTE sql_rowmt_stmt;
 
       if(SQLCODE != 0)
       {
         fn_errlog(c_ServiceName,"S31345",SQLMSG,c_err_msg );
         return;
       }

       fn_userlog (c_ServiceName,"Preparing SQL statement for shrink...");

       strcpy ((char *)shrink_stmt.arr,"ALTER TABLE ");
       strcat ((char *)shrink_stmt.arr,c_tab_name);
       strcat ((char *)shrink_stmt.arr," SHRINK SPACE CASCADE");

       shrink_stmt.len = strlen((char *)shrink_stmt.arr);
       li_len = shrink_stmt.len;

       fn_userlog ( c_ServiceName, "Length of stmt is :%ld:",li_len );

       print_qry((char*)shrink_stmt.arr,li_len,c_ServiceName);

       EXEC SQL PREPARE sql_shrink_stmt FROM :shrink_stmt;

       if(SQLCODE != 0)
       {
         fn_errlog(c_ServiceName,"S31350",SQLMSG,c_err_msg );
         return;
       }

       EXEC SQL EXECUTE sql_shrink_stmt;

       if(SQLCODE != 0)
       {
         fn_errlog(c_ServiceName,"S31355",SQLMSG,c_err_msg );
         return;
       }

       i_trnsctn = tpbegin(0, 0);

       if ( i_trnsctn == -1 )
       {
         fn_errlog(c_ServiceName,"S31360",LIBMSG,c_err_msg);
         return;
       }


       EXEC SQL
         UPDATE ETM_EBA_TRANSFER_MASTER
         SET    ETM_INSERT_FLG = 'Y'
         WHERE  ETM_INSERT_FLG = 'I'
         AND    ETM_TABLE_NM = :c_tab_name
         AND    ROWNUM < 2;

       if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
       {
         fn_errlog(c_ServiceName,"S31365",SQLMSG,c_err_msg );
         tpabort(0);
         return;
       }
       else if ( SQLCODE == NO_DATA_FOUND )
       {
         fn_userlog (c_ServiceName,"NO records found");
         tpabort(0);
         return;
       }

       if ( tpcommit(0) == -1 )
       {
         fn_errlog(c_ServiceName, "S31370", TPMSG, c_err_msg );
         tpabort(0);
         return;
       }
   
       EXEC SQL
         SELECT SUM(MB)
         into :l_size_after
         FROM(
         select i.table_name,s.segment_type,s.segment_name, s.bytes/(1024*1024) MB
         from user_segments s, user_indexes i
         where i.table_name = upper(:c_tab_name)
         and s.segment_name=i.index_name
         union
         select t.table_name,s.segment_type,s.segment_name, s.bytes/(1024*1024) MB
         from user_segments s, user_tables t
         where t.table_name = upper(:c_tab_name)
         and s.segment_name=t.table_name);
           
       if(SQLCODE != 0)
       {
          fn_userlog(c_ServiceName,"Error in fetching size of Table...");
          fn_errlog(c_ServiceName,"S31375",SQLMSG,c_err_msg );
          return;
       }

       fn_userlog(c_ServiceName,"Size in MB after shrink :%ld:",l_size_after);


       strcpy ((char *)select_stmt2.arr,"select count(1)");
       strcat ((char *)select_stmt2.arr," from ");
       strcat ((char *)select_stmt2.arr,c_tab_name);


       select_stmt2.len = strlen((char *)select_stmt2.arr);
       li_len = select_stmt2.len;

       fn_userlog ( c_ServiceName, "Length of stmt is :%ld:",li_len );

       print_qry((char*)select_stmt2.arr,li_len,c_ServiceName);

       EXEC SQL PREPARE sql_sel_stmt2 FROM :select_stmt2;

       if(SQLCODE != 0)
       {
         fn_errlog(c_ServiceName,"S31380",SQLMSG,c_err_msg );
         return;
       }
       fn_userlog ( c_ServiceName, "after prepare...");

       EXEC SQL DECLARE cur_dyn4 SCROLL CURSOR FOR sql_sel_stmt2;

       EXEC SQL OPEN cur_dyn4 ;

       if(SQLCODE != 0)
       {
         fn_errlog(c_ServiceName,"S31385",SQLMSG,c_err_msg );
         return;
       }

       EXEC SQL FETCH FIRST cur_dyn4 INTO :l_after_count;

       if(SQLCODE != 0)
       {
          fn_userlog(c_ServiceName,"No Record Found. ");
          fn_errlog(c_ServiceName,"S31390",SQLMSG,c_err_msg );
          return;
       }

       EXEC SQL CLOSE cur_dyn4;

       EXEC SQL SELECT to_char(:l_after_count), to_char(:l_size_after), to_char(SYSDATE,'DD-Mon-YYYY HH24:MI:SS')
       into :c_before_count, :c_size_before, :c_end_time
       from dual;

       if(SQLCODE != 0)
       {
         fn_errlog(c_ServiceName,"S31395",SQLMSG,c_err_msg );
         return;
       }

       fn_userlog ( c_ServiceName, "total_rec_count :%ld:",l_after_count);
       fn_userlog ( c_ServiceName, "c_end_time :%s:",c_end_time);

       i_trnsctn = tpbegin(0, 0);

       if ( i_trnsctn == -1 )
       {
         fn_errlog(c_ServiceName,"S31400",LIBMSG,c_err_msg);
         return;
       }

       EXEC SQL
          UPDATE ETTL_EBA_TABLE_TRANSFER_LOG
          SET ETTL_END_TIME = TO_DATE(:c_end_time,'DD-Mon-YYYY HH24:MI:SS'),
          ETTL_COUNT_AFTR_TRNSFR = :l_after_count,
          ETTL_SIZE_AFTR_TRNSFR = :l_size_after
          WHERE ETTL_TABLE_NAME = :c_tab_name
          AND ETTL_START_TIME = TO_DATE(:c_start_time,'DD-Mon-YYYY HH24:MI:SS');
        
       if(SQLCODE != 0)
       {
          if(SQLCODE == NO_DATA_FOUND)
          {
             fn_userlog(c_ServiceName,"No more data to process in %s Table...",c_tab_name);
             tpabort(0);
          }
          else
          {
            fn_errlog(c_ServiceName,"S31405",SQLMSG,c_err_msg );
            tpabort(0);
            return;
          }
       }

       if ( tpcommit(0) == -1 )
       {
          fn_errlog(c_ServiceName, "S31410", TPMSG, c_err_msg );
          tpabort(0);
          return;
       }
       fn_userlog(c_ServiceName,"Mode B is Completed...");      
  
   }
   else if(strcmp(c_mode_flg,"C") == 0)
   {     
      fn_userlog ( c_ServiceName, "Inside C mode...");

      EXEC SQL
      SELECT SUM(MB)
      into :l_size_before
      FROM(
      select i.table_name,s.segment_type,s.segment_name, s.bytes/(1024*1024) MB
      from user_segments s, user_indexes i
      where i.table_name = upper(:c_tab_name)
      and s.segment_name=i.index_name
      union
      select t.table_name,s.segment_type,s.segment_name, s.bytes/(1024*1024) MB
      from user_segments s, user_tables t
      where t.table_name = upper(:c_tab_name)
      and s.segment_name=t.table_name);

      if(SQLCODE != 0)
      {
         fn_userlog(c_ServiceName,"Error in fetching size of Table...");
         fn_errlog(c_ServiceName,"S31415",SQLMSG,c_err_msg );
         return;
      }

      fn_userlog(c_ServiceName,"Size in MB before shrink :%ld:",l_size_before);
    
      strcpy ((char *)select_stmt1.arr,"select count(1)");
      strcat ((char *)select_stmt1.arr," from ");
      strcat ((char *)select_stmt1.arr,c_tab_name);

      select_stmt1.len = strlen((char *)select_stmt1.arr);
      li_len = select_stmt1.len;

      fn_userlog ( c_ServiceName, "Length of stmt is :%ld:",li_len );

      print_qry((char*)select_stmt1.arr,li_len,c_ServiceName);

      EXEC SQL PREPARE sql_sel_stmt1 FROM :select_stmt1;

      if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName,"S31420",SQLMSG,c_err_msg );
        return;
      }
      fn_userlog ( c_ServiceName, "after prepare...");

      EXEC SQL DECLARE cur_dyn5 SCROLL CURSOR FOR sql_sel_stmt1;

      EXEC SQL OPEN cur_dyn5 ;

      if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName,"S31425",SQLMSG,c_err_msg );
        tpabort(0);
        return;
      }

      EXEC SQL FETCH FIRST cur_dyn5 INTO :l_before_count;

      if(SQLCODE != 0)
      {
        fn_userlog(c_ServiceName,"No Record Found. ");
        fn_errlog(c_ServiceName,"S31430",SQLMSG,c_err_msg );
        return;
      }

      EXEC SQL CLOSE cur_dyn5;

      EXEC SQL
      SELECT to_char(:l_before_count), to_char(:l_size_before), to_char(SYSDATE,'DD-Mon-YYYY HH24:MI:SS')
      into :c_before_count, :c_size_before, :c_start_time from dual;

      if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName,"S31435",SQLMSG,c_err_msg );
        return;
      }

      fn_userlog ( c_ServiceName, "total_rec_count in table :%ld:",l_before_count);
      fn_userlog ( c_ServiceName, "c_size_before :%s:",c_size_before);
      fn_userlog ( c_ServiceName, "c_start_time :%s:",c_start_time);

      i_trnsctn = tpbegin(0, 0);

      if ( i_trnsctn == -1 )
      {
        fn_errlog(c_ServiceName,"S31440",LIBMSG,c_err_msg);
        return;
      }


      EXEC SQL
       INSERT INTO ETTL_EBA_TABLE_TRANSFER_LOG
       (ETTL_TABLE_NAME,ETTL_START_TIME,
        ETTL_COUNT_BFR_TRNSFR,
        ETTL_SIZE_BFR_TRNSFR)
        VALUES
        (:c_tab_name,
        TO_DATE(:c_start_time,'DD-Mon-YYYY HH24:MI:SS'),
        :l_before_count,
        :l_size_before);

      if(SQLCODE != 0)
      {
         if(SQLCODE == NO_DATA_FOUND)
         {
           fn_userlog(c_ServiceName,"No more data to process in %s Table...",c_tab_name);
           tpabort(0);
         }
         else
         {
           fn_errlog(c_ServiceName,"S31445",SQLMSG,c_err_msg );
           tpabort(0);
           return;
         }
      }
      
      if ( tpcommit(0) == -1 )
      {
        fn_errlog(c_ServiceName, "S31450", TPMSG, c_err_msg );
        tpabort(0);
        return;
      }
    
      fn_userlog (c_ServiceName,"Preparing SQL statement for enable row movement...");

      strcpy ((char *)rowmt_stmt.arr,"ALTER TABLE ");
      strcat ((char *)rowmt_stmt.arr,c_tab_name);
      strcat ((char *)rowmt_stmt.arr," ENABLE ROW MOVEMENT ");

      rowmt_stmt.len = strlen((char *)rowmt_stmt.arr);
      li_len = rowmt_stmt.len;

      fn_userlog ( c_ServiceName, "Length of stmt is :%ld:",li_len );

      print_qry((char*)rowmt_stmt.arr,li_len,c_ServiceName);
  
      EXEC SQL PREPARE sql_rowmt_stmt FROM :rowmt_stmt;

      if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName,"S31455",SQLMSG,c_err_msg );
        return;
      }

      EXEC SQL EXECUTE sql_rowmt_stmt;

      if(SQLCODE != 0)
      {
         fn_errlog(c_ServiceName,"S31460",SQLMSG,c_err_msg );
         return;
      }

      fn_userlog (c_ServiceName,"Preparing SQL statement for shrink...");

      strcpy ((char *)shrink_stmt.arr,"ALTER TABLE ");
      strcat ((char *)shrink_stmt.arr,c_tab_name);
      strcat ((char *)shrink_stmt.arr," SHRINK SPACE CASCADE");

      shrink_stmt.len = strlen((char *)shrink_stmt.arr);
      li_len = shrink_stmt.len;

      fn_userlog ( c_ServiceName, "Length of stmt is :%ld:",li_len );
 
      print_qry((char*)shrink_stmt.arr,li_len,c_ServiceName);

      EXEC SQL PREPARE sql_shrink_stmt FROM :shrink_stmt;

      if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName,"S31465",SQLMSG,c_err_msg );
        return;
      }

      EXEC SQL EXECUTE sql_shrink_stmt;

      if(SQLCODE != 0)
      {
         fn_errlog(c_ServiceName,"S31470",SQLMSG,c_err_msg );
         return;
      }     
     
      fn_userlog ( c_ServiceName, " Shrink completed....");    


      EXEC SQL
       SELECT SUM(MB)
       into :l_size_after
       FROM(
       select i.table_name,s.segment_type,s.segment_name, s.bytes/(1024*1024) MB
       from user_segments s, user_indexes i
       where i.table_name = upper(:c_tab_name)
       and s.segment_name=i.index_name
       union
       select t.table_name,s.segment_type,s.segment_name, s.bytes/(1024*1024) MB
       from user_segments s, user_tables t
       where t.table_name = upper(:c_tab_name)
       and s.segment_name=t.table_name);

     if(SQLCODE != 0)
     {
        fn_userlog(c_ServiceName,"Error in fetching size of Table...");
        fn_errlog(c_ServiceName,"S31475",SQLMSG,c_err_msg );
        return;
     }

     fn_userlog(c_ServiceName,"Size in MB after shrink :%ld:",l_size_after);


     strcpy ((char *)select_stmt2.arr,"select count(1)");
     strcat ((char *)select_stmt2.arr," from ");
     strcat ((char *)select_stmt2.arr,c_tab_name);


     select_stmt2.len = strlen((char *)select_stmt2.arr);
     li_len = select_stmt2.len;

     fn_userlog ( c_ServiceName, "Length of stmt is :%ld:",li_len );

     print_qry((char*)select_stmt2.arr,li_len,c_ServiceName);

     EXEC SQL PREPARE sql_sel_stmt2 FROM :select_stmt2;

     if(SQLCODE != 0)
     {
       fn_errlog(c_ServiceName,"S31480",SQLMSG,c_err_msg );
       return;
     } 
     fn_userlog ( c_ServiceName, "after prepare...");

     EXEC SQL DECLARE cur_dyn6 SCROLL CURSOR FOR sql_sel_stmt2;

     EXEC SQL OPEN cur_dyn6 ;

     if(SQLCODE != 0)
     {
       fn_errlog(c_ServiceName,"S31485",SQLMSG,c_err_msg );
       return;
     } 

     EXEC SQL FETCH FIRST cur_dyn6 INTO :l_after_count;

     if(SQLCODE != 0)
     {
       fn_userlog(c_ServiceName,"No Record Found. ");
       fn_errlog(c_ServiceName,"S31490",SQLMSG,c_err_msg );
       return;
     }

     EXEC SQL CLOSE cur_dyn6;

     EXEC SQL SELECT to_char(:l_after_count), to_char(:l_size_after), to_char(SYSDATE,'DD-Mon-YYYY HH24:MI:SS')
     into :c_before_count, :c_size_before, :c_end_time
     from dual;

     if(SQLCODE != 0)
     {
       fn_errlog(c_ServiceName,"S31495",SQLMSG,c_err_msg );
       return;
     }

     fn_userlog ( c_ServiceName, "total_rec_count :%ld:",l_after_count);
     fn_userlog ( c_ServiceName, "c_end_time :%s:",c_end_time);
 
     i_trnsctn = tpbegin(0, 0);

     if ( i_trnsctn == -1 )
     {
       fn_errlog(c_ServiceName,"S31500",LIBMSG,c_err_msg);
       return;
     }

     EXEC SQL
        UPDATE ETTL_EBA_TABLE_TRANSFER_LOG
        SET ETTL_END_TIME = TO_DATE(:c_end_time,'DD-Mon-YYYY HH24:MI:SS'),
        ETTL_COUNT_AFTR_TRNSFR = :l_after_count,
        ETTL_SIZE_AFTR_TRNSFR = :l_size_after
        WHERE ETTL_TABLE_NAME = :c_tab_name
        AND ETTL_START_TIME = TO_DATE(:c_start_time,'DD-Mon-YYYY HH24:MI:SS');

     if(SQLCODE != 0)
     {
        if(SQLCODE == NO_DATA_FOUND)
        {
          fn_userlog(c_ServiceName,"No more data to process in %s Table...",c_tab_name);
          tpabort(0);
        }
        else
        {
          fn_errlog(c_ServiceName,"S31505",SQLMSG,c_err_msg );
          tpabort(0);
          return;
        }
     }

     if ( tpcommit(0) == -1 )
     {
       fn_errlog(c_ServiceName, "S31510", TPMSG, c_err_msg );
       tpabort(0);
       return;
     }       
     fn_userlog(c_ServiceName,"Mode C is Completed...");
   }
   /*** Ver 1.2 End ***/
   fn_userlog(c_ServiceName,"Batch process completed successfully for table :%s:",c_tab_name);
}


void print_qry(char * str, int i_cnt,char * c_ServiceName)
{
  int idx;
  char c_tmp_str1[190];  /*** Changed array size to 190 from 150 in Ver 1.1 ***/

  MEMSET(c_tmp_str1);

  fn_userlog(c_ServiceName,"Printing query");

  for (idx = 0;idx < i_cnt; idx += 170)   /*** Changed from 130 to 170 in Ver 1.1 ***/
  {
    strncpy(c_tmp_str1,str + idx,170);    /*** Changed from 130 to 170 in Ver 1.1 ***/

    fn_userlog(c_ServiceName,"%s",c_tmp_str1);
  }

    fn_userlog(c_ServiceName,"Finished printing query");
}

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = bat_data_transfer;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}

int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
  return 0;
}
