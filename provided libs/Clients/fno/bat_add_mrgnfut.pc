/******************************************************************************/
/*  Program           : BAT_ADDMRGN_FUT.PC                                    */
/*                                                                            */
/*  Description       : This Program will get all records having open positon */
/*                      in Futures and calls processing service to process  	*/
/*											all records.																					*/
/*  Log               : 1.0   03-Feb-2010  Sandeep|Infotech                   */
/*  Log               : 1.1   06-Aug-2014  Sandeep|Infotech                   */
/*	Log								: 1.2		02-Feb-2021	 Kiran|Infotech											*/
/******************************************************************************/
/*  1.0    -  New Release                                                     */
/*  1.1    -  Exchange Condition Commented																		*/
/*	1.2		 -  Separate EOS for Stock and Index Underlyings in FPSL						*/
/******************************************************************************/

#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <string.h> 
#include <stdlib.h>  
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>
#include <unistd.h>

void BAT_ADDMRGN_FUT (int argc, char *argv[] )
{

  FBFR32 *ptr_fml_buf;

	char c_ServiceName[33];
	char c_svc_name[33];
	char c_err_msg [ 256 ];
	char c_msg[256];
	char c_prdct_typ;
	char c_cntrct_tag;
	char c_prc_flg;
	char c_rqst_typ;
	char c_indstk;
	char c_xchng_cd [4];
	char c_undrlyng[7];
	char c_clm_mtch_acnt[11];
	char c_undrlyng_str [ 400 ];
  char c_mtch_str [ 400 ];
	char c_imtm_remarks [ 256 ];
	char c_run_mode;
	char c_xchng_stts;



	int i_cnt;
	int i_ch_val;
	int i_trans;

	long li_tot_rcrds;
	long li_cnt;
	long li_rprt_no;

	strcpy ( c_ServiceName, argv[0] );

	INITBATDBGLVL(argv[0]);

	sprintf ( c_msg, "Batch process %s started", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	if( argc < 8 )
	{
		fn_userlog(c_ServiceName,"USAGE:<BAT_ADD_MRGNFUT> <NFO> <NFO> <NA> < Product Type F/P > < Closing Price / LTP > < Report No >  < Match Account/NONE >                                                         < Underlying / NONE >");
		fn_bat_pst_msg ( c_ServiceName, "Invalid Number of Arguments", c_tag );
		return;
	}

	strcpy( c_xchng_cd , argv[2]);
	c_prdct_typ =	argv[4][0];
	c_prc_flg	  = argv[5][0];
	li_rprt_no 	= atoi ( argv[6] ) ;
	c_run_mode	=	'N';

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Exchange Code Is ;%s:",c_xchng_cd);
		fn_userlog(c_ServiceName,"Product Type Is :%c:",c_prdct_typ);
		fn_userlog(c_ServiceName,"Price Flag Is :%c:",c_prc_flg);
		fn_userlog(c_ServiceName,"Report No. Is :%ld:",li_rprt_no);
	}

	if(	c_prc_flg != 'C' && c_prc_flg != 'L'	)
	{
		fn_userlog(c_ServiceName,"Price Flag Entered Is Not Valid");
		fn_bat_pst_msg ( c_ServiceName, "Price Flag Should Be (C - Closing Price / L - LTP) ", c_tag );
		return;

	}

	/***	Commented In Ver 1.1

	EXEC SQL
		SELECT	EXG_CRRNT_STTS
		INTO		:c_xchng_stts
		FROM		EXG_XCHNG_MSTR
		WHERE		EXG_XCHNG_CD	=	:c_xchng_cd;

	if ( SQLCODE != 0 )
	{
		fn_errlog(c_ServiceName,"S31005", SQLMSG, c_err_msg);
		return;
	}

	if ( c_xchng_stts == EXCHANGE_OPEN )
	{
		fn_userlog(c_ServiceName,"Can't Run Adhoc Margin Process With Exchange Status Open");
		fn_bat_pst_msg ( c_ServiceName, "Can't Run Adhoc Margin Process With Exchange Status Open",c_tag );
    return;
	}
	else if ( c_xchng_stts ==  EXCHANGE_CLOSE && c_prc_flg != 'C' )
	{
	  fn_userlog(c_ServiceName,"With Exchange Status Close ,Can't Run Process With Last Traded Price");
 		fn_bat_pst_msg ( c_ServiceName, "With Exchange Status Close ,Can't Run Process With Last Traded Price",c_tag );
 		return;

	}
	else if ( c_xchng_stts == EXCHANGE_UNDER_EXPIRY && c_prc_flg !='L')
	{
	 	fn_userlog(c_ServiceName,"With Exchange Under Expiry ,Can't Run Process With Closing Price");
 		fn_bat_pst_msg ( c_ServiceName, "With Exchange Under Expiry ,Can't Run Process With Closing Price",c_tag );
 		return;
	}

	Ver 1.1 Comment Ends ***/

  fn_init_ddr_pop("NA", "NA", "NA");

	if (c_prdct_typ == 'P')      
  {

    EXEC SQL
      SELECT 1
      INTO  :i_cnt
      FROM  MTM_APPLN_STTS
      WHERE MTM_XCHNG_CD='NFO'
      AND ( MTM_ROLL_STTS = 'N'
      OR    MTM_CAN_SQR_OFF ='Y'
      OR    MTM_CAN_REQ = 'Y'
			OR		MTM_ROLL_STTS_S = 'N'		/*** Ver 1.2 ***/
			OR		MTM_CAN_SQR_OFF_S = 'Y'	/*** Ver 1.2 ***/
			OR		MTM_CAN_REQ_S = 'Y' );		/*** Ver 1.2 ***/


    if (i_cnt==1)
    {
      fn_bat_pst_msg ( c_ServiceName, "Can/Sqroff Under Process For Future Plus,Can Not Run Adhoc Margin ",c_tag );
      exit(0);
    }
  }

	strcpy(c_mtch_str,(char *)argv[7]);

	if(strcmp(c_mtch_str,"NONE") == 0 )
	{
		if (argc > 8 )
		{
			strcpy( c_undrlyng_str, (char *)argv[8] );

      c_rqst_typ = MTM_FOR_UNDRLYNG;

      fn_userlog(c_ServiceName,"c_undrlyng_str is :%s:",c_undrlyng_str);

      ptr_fml_buf = fn_create_rs (  c_ServiceName,
                                    c_err_msg,
                                    "SFO_GT_FIMTM",
                                    TPNOTIME,
                                    6,
                                    FFO_XCHNG_CD, ( char * )c_xchng_cd,
                                    FFO_PRDCT_TYP, (char * )&c_prdct_typ,
                                    FFO_RQST_TYP, (char *)&c_rqst_typ,
                                    FFO_EBA_MTCH_ACT_NO,( char * )c_mtch_str,
                                    FFO_UNDRLYNG, (char *)c_undrlyng_str,
                                    FFO_OPERATION_TYP, (char *)&c_run_mode);   

		}
		else
		{
			c_rqst_typ = MTM_ALL_PSTN;
      ptr_fml_buf = fn_create_rs (  c_ServiceName,
                                    c_err_msg,
                                    "SFO_GT_FIMTM",
                                    TPNOTIME,
                                    5,
                                    FFO_XCHNG_CD, ( char * )c_xchng_cd,
                                    FFO_PRDCT_TYP, (char * )&c_prdct_typ,
                                    FFO_RQST_TYP, (char *)&c_rqst_typ,
                                    FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_str,
	                                  FFO_OPERATION_TYP, (char *)&c_run_mode);  

		}

	}
	else
	{
		if (argc > 8 )
		{
			fn_userlog(c_ServiceName,"You Can't Run For Match Account & Underlying Combination");
			fn_bat_pst_msg(c_ServiceName,"Can't Run For Match Account & Underlying Combination",c_tag);	
			return;
		}
		else
		{

			c_rqst_typ =	MTM_FOR_MATCH_ALL_UNDRLYNG	;		
			ptr_fml_buf = fn_create_rs (  c_ServiceName,
       			                        c_err_msg,
                                    "SFO_GT_FIMTM",
                                    TPNOTIME,
                                    5,
                                    FFO_XCHNG_CD, ( char * )c_xchng_cd,
                                    FFO_PRDCT_TYP, (char * )&c_prdct_typ,
                                    FFO_RQST_TYP, (char *)&c_rqst_typ,
                                    FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_str,
                                    FFO_OPERATION_TYP, (char *)&c_run_mode);    

		}

	}

	if ( ptr_fml_buf == NULL )
  {
    fn_errlog( c_ServiceName, "S31010", LIBMSG, c_err_msg );
    return;
  }

	li_tot_rcrds = fn_reccnt_rs ( ptr_fml_buf,
                                c_ServiceName,
                                c_err_msg,
                                FFO_EBA_MTCH_ACT_NO);
  if ( li_tot_rcrds == -1 )
  {
    fn_errlog( c_ServiceName, "S31015", LIBMSG, c_err_msg );
    fn_dstry_rs ( ptr_fml_buf );
    return;
  }

  strcpy ( c_msg, "Data created." );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  sprintf ( c_msg, "Total records = %ld", li_tot_rcrds );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	for( li_cnt=1; li_cnt<=li_tot_rcrds; li_cnt++ )
	{
		i_ch_val = fn_getnxt_rs ( ptr_fml_buf,
                              c_ServiceName,
                              c_err_msg,
                              6,
                              FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL,
                              FFO_EBA_MTCH_ACT_NO,( char * )c_clm_mtch_acnt, NULL,
                              FFO_PRDCT_TYP, ( char * )&c_prdct_typ, NULL,
                              FFO_UNDRLYNG, ( char * )c_undrlyng, NULL,
                              FFO_CTGRY_INDSTK, ( char * )&c_indstk, NULL,
                              FFO_CNTRCT_TAG, ( char * )&c_cntrct_tag, NULL);
    if ( i_ch_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_buf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }

		sprintf ( c_msg, "Processing record %ld of %ld", li_cnt, li_tot_rcrds );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

    i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                  c_err_msg,
                                  "sfr_bof_fimtm",
                                  li_cnt,
                                  li_tot_rcrds );
    if ( i_ch_val == -1 )
    {
      fn_errlog( c_ServiceName, "S31025", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_buf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }

		strcpy( c_imtm_remarks,"POSITION ENTERING ADDHOC MARGIN");
    strcpy( c_svc_name,"SFO_PRCS_FIMTM");

    i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                  c_err_msg,
                                  "SFO_ORD_ROUT",
                  								0,
                                  11,
    	                            FFO_XCHNG_CD, ( char * )c_xchng_cd,
                                  FFO_EBA_MTCH_ACT_NO,(char *)c_clm_mtch_acnt,
                                  FFO_PRDCT_TYP, ( char * )&c_prdct_typ,
                                  FFO_UNDRLYNG, ( char * )c_undrlyng,
                                  FFO_CTGRY_INDSTK, ( char * )&c_indstk,
                                  FFO_CNTRCT_TAG, ( char * )&c_cntrct_tag,
                                  FFO_IMTM_RMRKS, ( char * )c_imtm_remarks,
                                  FFO_SVC_NAME, (char*) c_svc_name,
																	FFO_SPL_FLG,(char *)&c_prc_flg,
                                  FFO_BAT_TAG, ( char * )c_tag,
                                  FFO_REC_NO, ( char * )&li_cnt);
																	

		if ( i_ch_val == -1 )
    {
      fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg );
      fn_dstry_rs ( ptr_fml_buf );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }

	}	/*** End Of For Loop	***/
	
	fn_dstry_rs ( ptr_fml_buf );

  sprintf ( c_msg, "Batch process %s ended", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );


  return;

}
int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_ADDMRGN_FUT;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}


int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}
