/*  Program           : bat_fo_lmt_neg.pc                                     */
/*                                                                            */
/*  Input             :                                                       */
/*                                                                            */
/*  Output            : Success / Failure                                     */
/*                                                                            */
/*  Description       : This batch Process all the match accounts in FNO      */
/*											which having negative limit.													*/
/*                                                                            */
/*  Log               : Ver 1.0   06-Feb-2012       Mahesh Shinde             */
/*                    :	Ver 1.1		03-May-2012				Mahesh Shinde	            */
/*                    : Ver 1.2   07-Mar-2013       Sachin Birje              */
/*                    : Ver 1.3   03-Jul-2013       Swati A.B                 */
/*                    : Ver 1.4   26-Mar-2014       Samip M	                  */
/*                    : Ver 1.5   05-Jan-2015       Vikram Gadhave            */
/*                    : Ver 1.6   10-Jun-2016       Samip M										*/
/******************************************************************************/
/*  Ver 1.0           : New Release                                           */
/*	Ver 1.1 					: Proper Error Handelling 						    							*/		
/*  Ver 1.2           : BFO Process Negativity Changes                        */
/*  Ver 1.3           : CR-ISEC03-37658(ATS Migration chamngs for FNO         */
/*  									  (Exception Mstr handling)															*/
/*	Ver 1.4						:	FDR Module changes																		*/
/*  Ver 1.5           : Changes for Message Display in Console								*/
/*  Ver 1.6           : Query optimization change															*/
/******************************************************************************/
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <string.h>
#include <stdlib.h>
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>
void BAT_FO_LMT_NEG( int argc, char *argv[] )
{
	char c_msg[256];
  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];
	char c_clm_mtch_accnt[10+1];
	char c_xchng_cd[3+1];
	char c_xchng_date[ 11+1 ];
	int  i_trnsctn;
	int  i_returnval;
	long li_cnt = 0;
	long li_tot_records = 0;	
  long li_len_tobuf;
	strcpy ( c_ServiceName, argv[0] );

	FBFR32* ptr_fml_Ibuf;
  FBFR32* ptr_fml_Obuf;
	sql_cursor     app_cursor;
	
  INITBATDBGLVL(argv[0]);

  sprintf ( c_msg, "BATCH PROCESS %s STARTED", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  strcpy( c_xchng_cd, argv[2] );

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog( c_ServiceName, "---------- BAT_FO_LMT_NEG STARTED ---------");
  }
	MEMSET(c_xchng_date);

	 EXEC SQL
    SELECT  EXG_NXT_TRD_DT
    INTO    :c_xchng_date
    FROM    EXG_XCHNG_MSTR
    WHERE   EXG_XCHNG_CD = :c_xchng_cd;

  if( (SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
  {
    fn_userlog(c_ServiceName,"Inside Selection Of Exchange Date");
    fn_errlog(c_ServiceName,"S31005",SQLMSG,c_err_msg);
    return;
  }

  /*** Truncate the table ***/
  /*** Ver 1.2 ****
  EXEC SQL
    TRUNCATE TABLE TMP_FO_LIMIT_DUMP;
  if(SQLCODE!=0 )
  {
    fn_errlog(c_ServiceName,"S31010",SQLMSG,c_err_msg);
    return;
  } 
  *** Ver 1.2 ****/
 
  /*** Ver 1.2 starts here ***/
  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31015", LIBMSG, c_err_msg);
    fn_userlog(c_ServiceName, "Error while beginning the transaction");
    return;
  }
 
  EXEC SQL
    DELETE FROM TMP_FO_LIMIT_DUMP WHERE TMP_XCHNG_CD=:c_xchng_cd;

	if(SQLCODE!=0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog(c_ServiceName,"S31020",SQLMSG,c_err_msg);
    return;
	}

  if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog(c_ServiceName, "S31025", SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName, "Error in commit [%s] exiting..", c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return;
  }
   
  /*** Ver 1.2 Ends Here ***/

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31030", LIBMSG, c_err_msg);
    fn_userlog(c_ServiceName, "Error while beginning the transaction");
    return;
  }

	/** Inserting Data in TEMP Table of Match A/C who having limit negative **/
	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog( c_ServiceName, "---- Inserting Data in TEMP Table -------");
	}

  /*** Ver 1.2, Below query is commented, because it does not consider the debit obligation of both the exchanges 
       at the time of finding the match ides with negative limit ********* 
	EXEC SQL
		INSERT INTO TMP_FO_LIMIT_DUMP
  	(
    	TMP_CLM_MTCH_ACCNT
    )
			select distinct FOP_CLM_MTCH_ACCNT,FOP_XCHNG_CD from 
			(
				select FOP_CLM_MTCH_ACCNT
				from fop_fo_options_pstn, FAB_FO_ALC_BFT_SMRY,FCB_FO_CLNT_BLNCS 
  ***			where FOP_OPNPSTN_QTY <> 0    **
				where FOP_CLM_MTCH_ACCNT = FAB_CLM_MTCH_ACCNT
				and FOP_CLM_MTCH_ACCNT = FCB_CLM_MTCH_ACCNT
				and trunc(FCB_TRD_DT) = trunc(sysdate) 
				and FCB_GRP_ID= 1
				and FCB_DC_AMT < 0
				and ( NVL(FAB_ALCTD_AMT,0)+NVL(FAB_BFT_AMT,0)+NVL(FAB_PLG_AMT,0)+NVL(FAB_ISEC_MRGN_AMT,0)+NVL(FCB_DC_AMT,0) ) < 0     
				UNION ALL
				select FFP_CLM_MTCH_ACCNT
				from ffp_fo_futures_pstn, FAB_FO_ALC_BFT_SMRY,FCB_FO_CLNT_BLNCS 
***				where FFP_OPNPSTN_QTY <> 0   ***
				where FFP_CLM_MTCH_ACCNT = FAB_CLM_MTCH_ACCNT
				and FFP_CLM_MTCH_ACCNT = FCB_CLM_MTCH_ACCNT
				and FCB_TRD_DT = trunc(sysdate) 
				and FCB_GRP_ID= 1
				and FCB_DC_AMT < 0
			);
      ************************ Ver 1.2 Ends Here **********/

  /*** Ver 1.2 Starts Here *****/

  EXEC SQL
    INSERT INTO TMP_FO_LIMIT_DUMP
    (
      TMP_CLM_MTCH_ACCNT,
      TMP_XCHNG_CD
    )
    SELECT clinet_match_id,
           Exchang_cd
    FROM
    (
       select a.c_match_id clinet_match_id, sum(NVL(FAB_ALCTD_AMT,0)+NVL(FAB_BFT_AMT,0)+NVL(FAB_PLG_AMT,0)+NVL(FAB_ISEC_MRGN_AMT,0)+NVL(FAB_ISEC_MRGN_AMT_BSE,0) + a.d_dc_amount + FAB_FDR_AMT) final_amt ,a.c_xchng_cd Exchang_cd		/*** FAB_FDR_AMT Added for Ver 1.4 ***/
       FROM
       (
         SELECT distinct c_mtch c_match_id,sum(dc_amt) d_dc_amount ,xchng_cd c_xchng_cd
         FROM
         (
           select  distinct FOP_CLM_MTCH_ACCNT c_mtch,FCB_DC_AMT dc_amt,FOP_XCHNG_CD xchng_cd
           from    fop_fo_options_pstn,FCB_FO_CLNT_BLNCS
           WHERE   FOP_CLM_MTCH_ACCNT = FCB_CLM_MTCH_ACCNT
           AND     FOP_XCHNG_CD=:c_xchng_cd
					 AND		 FOP_XCHNG_CD = FCB_XCHNG_CD				/*** Added for Ver 1.6 ***/
           AND     FCB_DC_AMT < 0
           AND     FCB_GRP_ID =1
           AND     FCB_TRD_DT = trunc(sysdate)
         UNION
           select distinct FFP_CLM_MTCH_ACCNT c_mtch ,FCB_DC_AMT dc_amt, FFP_XCHNG_CD xchng_cd
           FROM   ffp_fo_futures_pstn ,FCB_FO_CLNT_BLNCS
           WHERE  FFP_CLM_MTCH_ACCNT = FCB_CLM_MTCH_ACCNT
           AND    FFP_XCHNG_CD=:c_xchng_cd
					 AND		FFP_XCHNG_CD = FCB_XCHNG_CD				/*** Added for Ver 1.6 ***/
           AND    FCB_DC_AMT < 0
           AND    FCB_GRP_ID =1
           AND    FCB_TRD_DT = trunc(sysdate)
        ) b
        group by b.c_mtch,b.xchng_cd
      ) a,FAB_FO_ALC_BFT_SMRY
      WHERE FAB_CLM_MTCH_ACCNT = a.c_match_id
      group by a.c_match_id,a.c_xchng_cd
      having sum(NVL(FAB_ALCTD_AMT,0)+NVL(FAB_BFT_AMT,0)+NVL(FAB_PLG_AMT,0)+NVL(FAB_ISEC_MRGN_AMT,0)+NVL(FAB_ISEC_MRGN_AMT_BSE,0) + a.d_dc_amount + FAB_FDR_AMT) < 0		/*** FAB_FDR_AMT Added for Ver 1.4 ***/
   );

  /*** Ver 1.2 Ends Here ****/
	if(SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31035", SQLMSG,c_err_msg);
    fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
    return;
  }

  if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog(c_ServiceName, "S31040", SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName, "Error in commit [%s] exiting..", c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return;
  }
	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog( c_ServiceName, "---- Data Inserted in TEMP Table -------");
	}

	EXEC SQL
  SELECT COUNT(ROWID)
  INTO  :li_tot_records
  FROM TMP_FO_LIMIT_DUMP
  /*** WHERE TMP_XCHNG_CD=:c_xchng_cd;  ** Ver 1.2 ** Commented In Ver 1.3 ***/
  WHERE TMP_XCHNG_CD=:c_xchng_cd  /** Ver 1.3 - Semi-colon removed to add clause **/
	AND		TMP_CLM_MTCH_ACCNT NOT IN ( SELECT  MEM_MTCH_ACCNT 															/*** Ver 1.3 ***/ 
																		FROM    MEM_MTM_EXPTN_MSTR
																		WHERE   MEM_SEGMENT IN ('FNOIM','FPIM')
																		AND     SYSDATE BETWEEN MEM_FROM_DT AND MEM_TO_DT );

  
	if(SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31045", SQLMSG,c_err_msg);
    return;
  }

	if( DEBUG_MSG_LVL_3 )
	{	
		fn_userlog( c_ServiceName,"Total Number Of Records |%ld|",li_tot_records);
		fn_userlog( c_ServiceName,"Exchange Code |%s|",c_xchng_date);
	}

	/*** Declare Cursor for all Match Account ***/

	EXEC SQL ALLOCATE :app_cursor;
	
	EXEC SQL EXECUTE
        BEGIN
          OPEN :app_cursor FOR
					SELECT TMP_CLM_MTCH_ACCNT 
					FROM TMP_FO_LIMIT_DUMP
  /*** WHERE TMP_XCHNG_CD=:c_xchng_cd;  ** Ver 1.2 ** Commented In Ver 1.3 ***/
  WHERE TMP_XCHNG_CD=:c_xchng_cd  /** Ver 1.3 - Semi-colon removed to add clause **/
  AND   TMP_CLM_MTCH_ACCNT NOT IN ( SELECT  MEM_MTCH_ACCNT                              /*** Ver 1.3 ***/
                                    FROM    MEM_MTM_EXPTN_MSTR
                                    WHERE   MEM_SEGMENT IN ('FNOIM','FPIM')
                                    AND     SYSDATE BETWEEN MEM_FROM_DT AND MEM_TO_DT );
	END;
  END-EXEC;	

	/*** Allocate Space For Input Output Buffer ***/

	ptr_fml_Ibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
  ptr_fml_Obuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if(ptr_fml_Ibuf == NULL)
  {
    fn_errlog( c_ServiceName, "S31050", TPMSG, c_err_msg  );
    fn_bat_pst_msg(c_ServiceName,"System error ..exiting",c_tag);
    return; 
  }

  if(ptr_fml_Obuf == NULL)
  {
    tpfree( (char *)ptr_fml_Ibuf );
    fn_errlog( c_ServiceName, "S31055", TPMSG, c_err_msg  );
    fn_bat_pst_msg(c_ServiceName,"System error ..exiting",c_tag);
    return;
  }

	while (1)
	{
		 MEMSET(c_clm_mtch_accnt);
		 Finit32(ptr_fml_Ibuf,MIN_FML_BUF_LEN);
		 li_cnt ++;
	
		 EXEC SQL FETCH :app_cursor
                INTO :c_clm_mtch_accnt;
	
		 if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
     {
        fn_errlog( c_ServiceName, "S31060", SQLMSG, c_err_msg  );
        EXEC SQL CLOSE :app_cursor;
        EXEC SQL FREE :app_cursor;
        return ;
     }
		 if( SQLCODE == NO_DATA_FOUND )
     {
				fn_userlog( c_ServiceName," No More data To Process" );
				break;
		 }		
		 /***	
		 if( Fadd32(ptr_fml_Ibuf,FFO_EBA_MTCH_ACT_NO,(char *)c_clm_mtch_accnt,0)) ;
	   {	
       fn_userlog(c_ServiceName,"Error in Fadd ");
       fn_errlog( c_ServiceName, "S31065", FMLMSG, c_err_msg  );
       fn_bat_pst_msg(c_ServiceName,"system error occured..exiting",c_tag);
       tpfree( (char *)ptr_fml_Ibuf );
       tpfree( (char *)ptr_fml_Obuf );
       return;
     }			
	
		 if( Fadd32(ptr_fml_Ibuf,FFO_TRD_DT,(char *)c_xchng_date,0) == -1 ) ;
     {
       fn_errlog( c_ServiceName, "S31070", FMLMSG, c_err_msg  );
       fn_bat_pst_msg(c_ServiceName,"system error occured..exiting",c_tag);
       tpfree( (char *)ptr_fml_Ibuf );
       tpfree( (char *)ptr_fml_Obuf );
       return;
     }

     if( Fadd32(ptr_fml_Ibuf,FFO_XCHNG_CD,(char *)c_xchng_cd,0) == -1 ) ;
     {
       fn_errlog( c_ServiceName, "S31075", FMLMSG, c_err_msg  );
       fn_bat_pst_msg(c_ServiceName,"system error occured..exiting",c_tag);
       tpfree( (char *)ptr_fml_Ibuf );
       tpfree( (char *)ptr_fml_Obuf );
       return;
     }
		***/

		
		 i_returnval = fn_pack_vartofml( c_ServiceName,
                                      c_err_msg,
                                      &ptr_fml_Ibuf,
                                      4,
                                      FFO_EBA_MTCH_ACT_NO, ( char * )c_clm_mtch_accnt,
                                      FFO_TRD_DT, ( char * )c_xchng_date,
                                      FFO_XCHNG_CD, ( char * )c_xchng_cd,
                                      FFO_BAT_TAG, (char * )c_tag );          /*** Added in Ver 1.5 ***/

     if( i_returnval == -1 )
     {
       fn_errlog( c_ServiceName, "S31080", FMLMSG, c_err_msg  );
       fn_bat_pst_msg(c_ServiceName,"system error occured..exiting",c_tag);
       tpfree( (char *)ptr_fml_Ibuf );
       tpfree( (char *)ptr_fml_Obuf );
			 return;
     }	


		 if( DEBUG_MSG_LVL_3 )
		 {		
		 		fn_userlog( c_ServiceName,"Processing Match Account |%s|",c_clm_mtch_accnt);
		 }
	
		 i_returnval = fn_pre_prcs_rcrd ( c_ServiceName,
                                      c_err_msg,
                                      "sfr_prc_neg",
                                      li_cnt,
                                      li_tot_records );
     if ( i_returnval == -1 )
     {
       fn_errlog( c_ServiceName, "S31085", LIBMSG, c_err_msg );
       strcpy ( c_msg, "System error. Contact system support" );
       fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
       return;
     } 	
 
		 i_returnval = tpacall ( "SFO_PRC_LMT_NEG" , (char * )ptr_fml_Ibuf ,0, TPNOTRAN );
			
		 if(i_returnval == -1)
  	 {
    	 fn_errlog( c_ServiceName, "S31090", TPMSG, c_err_msg );

    	 if(Fget32(ptr_fml_Obuf,FFO_ERR_MSG,0,(char *)c_err_msg,0) == -1)
    	 {
      	 fn_errlog( c_ServiceName, "S31095", FMLMSG, c_err_msg  );
      	 /** sprintf(c_err_msg," Limit Process for Match Account  :[%s] failed..",c_clm_mtch_accnt); Ver 1.1  ***/
				 strcpy ( c_err_msg, "System error. Contact system support" );	/*** Ver 1.1 ***/	
      	 fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
         tpfree( (char *)ptr_fml_Ibuf );
         tpfree( (char *)ptr_fml_Obuf );
				 return;
    	 }
    	 else
    	 {
      	 /** sprintf(c_err_msg," Limit Process for Match Account  :[%s] failed",c_clm_mtch_accnt);	Ver 1.1	**/
				 fn_errlog( c_ServiceName, "S31100", TPMSG, c_err_msg );				/*** Ver 1.1 ***/
				 strcpy ( c_err_msg, "System error. Contact system support" );	/*** Ver 1.1 ***/ 
         fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      	 /** fn_userlog(c_ServiceName,"Limit Process for Match Account:[%s] failed ",c_clm_mtch_accnt);Ver 1.1	**/
      	 tpfree( (char *)ptr_fml_Ibuf );
      	 tpfree( (char *)ptr_fml_Obuf );
    	 	 return;	
			 }
  	 }
  	/***** Ver 1.1 else
     {
			 if( DEBUG_MSG_LVL_3 )
			 {		
       		fn_userlog(c_ServiceName," Limit Process for Match Account [%s] Success",c_clm_mtch_accnt);
       }
			 sprintf(c_err_msg," Limit Process for Match Account [%s] Success",c_clm_mtch_accnt);
       fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
     }
 		 if( DEBUG_MSG_LVL_3 )
		 {		 
		 		fn_userlog( c_ServiceName,"Processed Match Account |%s|",c_clm_mtch_accnt);
		 }  *********  Commented by Mahesh ***********/	
	}
	
  tpfree( (char *)ptr_fml_Ibuf );
  tpfree( (char *)ptr_fml_Obuf );

	EXEC SQL CLOSE :app_cursor;
  EXEC SQL FREE :app_cursor;

	sprintf ( c_msg, "Batch process %s ended", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  return;	

}

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_FO_LMT_NEG;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}
