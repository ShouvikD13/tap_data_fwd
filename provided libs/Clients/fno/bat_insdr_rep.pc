/*******************************************************************************
*  Program           : bat_insdr_rep.pc                                        *
*                                                                              *
*  Description       : Batch program for extracting insider trade report       *
*                                                                              *
*                                                                              *
*  Input Parameters  : Date : Date for which  he report is to be extracted.    *
*                                                                              *
*  Change Log        : 1.0   22-Dec-2009  Indrajit B|Infotech                  * 
*                    : 1.1   31-Jan-2012  Nitin Save | Infotech                *
*                    : 1.2   29-Mar-2012  Nitin Save | Infotech                *
*                    : 1.3   08-May-2012  Nitin Save | Infotech                *
*										 : 1.4	 27-nov-2012	Vishnu Nair| Infotech								 *	
*										 : 1.5	 01-Oct-2013  Sachin Birje | Infotech			  			 *	
*                    : 1.6   27-Feb-2014  Amrin Khan | Infotech                *
*                    : 1.7   10-Jun-2014  Sachin Birje | Infotech              *
*                    : 1.8   09-Sep-2014  Sachin Birje | Infotech              *
********************************************************************************
*  1.0    -  New Release                                                       *
*  1.1    -  Change to consider equity-bse trades in report                    *
*  1.2    -  Change to add scrip name in report		            			           *
*  1.3    -  Change to consider dependent data of ITE and insert into FIT      *
*	 1.4		-  Changes CR-ISEC04-33731-to consider multiple trades	    				 *	
*	 1.5		-  Only Bank Employee data Population 	    				                 *  	
*  1.6    -  INDIA VIX               						                               *
*  1.7    -  CR-ISEC04-48922- Data sharing through ITMS                        *
*  1.8    -  VIew to FML Changes                                               *
*******************************************************************************/

/* Header Files */

#include<sqlca.h>
#include<atmi.h>
#include <string.h>     
#include <stdlib.h>     
#include<fo.h>
#include<fml32.h>
#include<fn_log.h>
#include<fn_tuxlib.h>
#include<fn_battmpt.h>
#include<fml_def.h>
#include<fo_fml_def.h>
#include<fn_ddr.h>
/** #include<fo_view_def.h> ** Ver 1.8 */
#include <fn_read_debug_lvl.h> 

#define SQL_ROW_COUNT sqlca.sqlerrd[2]




EXEC SQL BEGIN DECLARE SECTION;

char c_ServiceName[33]={0};
//char c_err_msg[500]={0};
char c_err_msg[256]={0};  /* Added in Ver TOL */
char c_msg[256]={0};
varchar c_trd_dt[LEN_DATE];
EXEC SQL  END  DECLARE SECTION;

void BAT_INSDR_REP( int argc, char *argv[])
{
	int i_chk_past_run;	

  strcpy(c_ServiceName,argv[0]);
	MEMSET(c_trd_dt);
	strcpy(c_trd_dt.arr,argv[4]);
	SETLEN(c_trd_dt);
  sprintf(c_tag,"%s_na",argv[0]);

  INITBATDBGLVL(c_ServiceName);

  fn_userlog (c_ServiceName,"-------------------------START--------------------");
  sprintf(c_msg,"Batch process %s started",c_ServiceName);
  fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag); /* Renamed fn_bat_pst_msg to fn_bat_pst_msg_fno in Ver TOL */
  fn_userlog (c_ServiceName,"Batch process %s is started",c_ServiceName);
	
	if( argc != 5)
	{
		fn_userlog (c_ServiceName,"Invalid Arguments passed %d",argc);
    fn_userlog (c_ServiceName,"Usage:%s NFO NFO NA DD-Mon-YYYY",c_ServiceName);
    fn_userlog (c_ServiceName,"==================End of %s =================",c_ServiceName);
    return;
	}

  fn_userlog (c_ServiceName,"Checking if the program has already been run for :%s:",c_trd_dt.arr);
	
	EXEC SQL
	SELECT count(rowid) 
	INTO :i_chk_past_run
	FROM FIT_FO_INSDR_TRDS
	WHERE FIT_FO_TRD_DT = :c_trd_dt;

	if ( SQLCODE != 0 )
  {
  	fn_errlog ( c_ServiceName, "S31005", SQLMSG, c_err_msg  );
  	return;
  }
	
	
	if(i_chk_past_run != 0)
	{
  	fn_userlog (c_ServiceName,"Program has already been run for date :%s:",c_trd_dt.arr);
  	return;
	}

  fn_userlog (c_ServiceName,"Extracting insider trade report for  :%s:",c_trd_dt.arr);
    
  if ( tpbegin( 0, 0 ) == -1 )
  {
    fn_errlog(c_ServiceName, "S31010", TPMSG, c_err_msg );
    tpabort(0);
    return ;
  }

  /** Added UNION in Ver 1.3 to maintain distinct flag for entries of trades from relaive match **/
  
  EXEC SQL
  INSERT INTO FIT_FO_INSDR_TRDS 
  (
		FIT_FO_ID,           
		FIT_FO_TRD_DT,       
		FIT_FO_EMP_ID,       
		FIT_FO_EMP_NAME,     
		FIT_FO_EMP_MATCH_ACC,
		FIT_FO_EMP_PAN_NO,   
		FIT_FO_CMPNY_ID,     
		FIT_FO_DP_ID,        
		FIT_FO_DP_CLNT_ID,   
		FIT_FO_SEGMENT,      
		FIT_FO_STOCK_CODE,   
		FIT_FO_STOCK_SYMBOL, 
		FIT_FO_ISIN_CODE,    
		FIT_FO_TRD_FLW,      
		FIT_FO_TRD_EXCTD_QTY,
		FIT_FO_TRD_EXCTD_RT, 
		FIT_FO_CONTRACT,     
		FIT_FO_FTD_EXPRY_DT, 
		FIT_FO_OPT_TYP,      
		FIT_FO_STRK_PRC,
		FIT_RELATIVE_MTCH,       /** Added in Ver 1.3 **/
		FIT_DEPENDENT_PAN_NO,     /** Added in Ver 1.3 **/
		FIT_RELATION_CODE,       /** Added in Ver 1.3 **/		
    FIT_DEPEDENT_FLG         /** Added in Ver 1.3 **/
  ) 
  SELECT FIT_FO_INSDR_SEQ.NEXTVAL,
         TRD_TRD_DT,
				 ITE_EMP_ID,
	 			 EMP_NAME,
				 ITE_MTCH_ACCNT,
	 			 ITE_PAN_NO,
	 			 ITE_CMPY_ID,
	 			 ORD_DP_ID,
	 			 ORD_DP_CLNT_ID,
	 			 'E',
	 		   STCK_CD,
	 			 SEM_MAP_VL,
	 			 NULL,
	 			 TRD_TRD_FLW,
	 			 TRD_EXCTD_QTY,
	 			 TRD_EXCTD_RT,
	 			 NULL,
	 			 NULL,
	 			 NULL,
	 		   NULL,
	 			 ITE_RELATIVE_MTCH,     
				 ITE_DEPENDENT_PAN_NO,
	 			 ITE_RELATION_CODE,       
	 			 RELATIVE_FLAG
				 FROM
  (    /** Added in Ver 1.3 for UNION **/
    (
     SELECT /* FIT_FO_INSDR_SEQ.NEXTVAL, */ /* Commented for Ver 1.3 */	
						TRD_TRD_DT,
           	ITE_EMP_ID,
           	TRIM(ITE_EMP_NAME) EMP_NAME,
           	ITE_MTCH_ACCNT,
           	ITE_PAN_NO,
           	ITE_CMPY_ID,
					 	ORD_DP_ID,
           	ORD_DP_CLNT_ID,
					 	'E',	
					 	trim(TRD_STCK_CD) STCK_CD,
           	SEM_MAP_VL,
						NULL,
           	TRD_TRD_FLW,
           	TRD_EXCTD_QTY,
           	TRD_EXCTD_RT,
           	NULL,
           	NULL,
           	NULL,
           	NULL,
						ITE_RELATIVE_MTCH,       /** Added in Ver 1.3 **/
						ITE_DEPENDENT_PAN_NO,    /** Added in Ver 1.3 **/
						ITE_RELATION_CODE,       /** Added in Ver 1.3 **/
            'N'  RELATIVE_FLAG                    /** Added in Ver 1.3 **/ 
     FROM TRD_TRD_DTLS , ITE_INSD_TRD_EMP_MSTR, ORD_ORDR_DTLS, SEM_STCK_MAP
     WHERE NVL(ITE_MTCH_ACCNT,'NA') = TRD_CLM_MTCH_ACCNT  /** Ver 1.7 ** NVL added **/ 
     AND ITE_DEPENDENT_PAN_NO is NULL       /** Added in Ver 1.3 -To get Main record **/ 
     AND ORD_CLM_MTCH_ACCNT= TRD_CLM_MTCH_ACCNT
     AND ORD_ORDR_RFRNC = TRD_ORDR_RFRNC
     AND SEM_STCK_CD=TRD_STCK_CD
	   /* 	AND SEM_ENTTY=1 */                      /* Commented in Ver 1.1 */
     AND SEM_ENTTY = decode(TRD_XCHNG_CD,'NSE','1','BSE','2') /* Ver 1.1 */
		 AND trunc(TRD_TRD_DT) = :c_trd_dt
     AND ITE_CMPY_ID = 'BANK'               /** Ver 1.5 **/
     AND ITE_AUTHRZTN_FLG = 'Y'            /** Ver 1.7 **/
		)  /** Added below UNION in Ver 1.3 **/
		UNION ALL /** Added UNION ALL in ver 1.4 **/
		(
     SELECT /* FIT_FO_INSDR_SEQ.NEXTVAL, */ /* Commented in Ver 1.3 */
						TRD_TRD_DT,
           	ITE_EMP_ID,
           	TRIM(ITE_EMP_NAME) EMP_NAME,
           	NVL(ITE_MTCH_ACCNT,'NA'),  /** Ver 1.7 **/
           	ITE_PAN_NO,
           	ITE_CMPY_ID,
					 	ORD_DP_ID,
           	ORD_DP_CLNT_ID,
					 	'E',	
					 	trim(TRD_STCK_CD) STCK_CD,
           	SEM_MAP_VL,
						NULL,
           	TRD_TRD_FLW,
           	TRD_EXCTD_QTY,
           	TRD_EXCTD_RT,
           	NULL,
           	NULL,
           	NULL,
           	NULL,
						ITE_RELATIVE_MTCH,     
						ITE_DEPENDENT_PAN_NO,    /** Added in Ver 1.3 **/
						ITE_RELATION_CODE,       
            'Y'  RELATIVE_FLAG                    
     FROM TRD_TRD_DTLS , ITE_INSD_TRD_EMP_MSTR, ORD_ORDR_DTLS, SEM_STCK_MAP
     WHERE NVL(ITE_RELATIVE_MTCH,'NA') = TRD_CLM_MTCH_ACCNT /** Ver 1.7 ** NVL Added **/ 
     AND ORD_CLM_MTCH_ACCNT  = TRD_CLM_MTCH_ACCNT
     AND ORD_ORDR_RFRNC = TRD_ORDR_RFRNC
     AND SEM_STCK_CD=TRD_STCK_CD
     AND SEM_ENTTY = decode(TRD_XCHNG_CD,'NSE','1','BSE','2') 
		 AND trunc(TRD_TRD_DT) = :c_trd_dt
     AND ITE_CMPY_ID = 'BANK'               /** Ver 1.5 **/
     AND ITE_AUTHRZTN_FLG = 'Y'            /** Ver 1.7 **/
		)
  );

  if ( SQLCODE != 0 )
  {
  	fn_errlog ( c_ServiceName, "S31015", SQLMSG, c_err_msg  );
  }
		
	fn_userlog (c_ServiceName," Inserted :%d: rows for EQUITY", SQL_ROW_COUNT );

	fn_userlog (c_ServiceName,"UPDATING ISIN CODE FOR EQUITY...................... " );
  EXEC SQL
	UPDATE FIT_FO_INSDR_TRDS 
	SET FIT_FO_ISIN_CODE = ( 
													SELECT SEM_MAP_VL 
													FROM SEM_STCK_MAP 
													WHERE SEM_STCK_CD=FIT_FO_STOCK_CODE 
													AND SEM_ENTTY=10 
												)
	WHERE FIT_FO_SEGMENT ='E'	
	and trunc(FIT_FO_TRD_DT) = :c_trd_dt;
  if ( SQLCODE != 0 )
  {
  	fn_errlog ( c_ServiceName, "S31020", SQLMSG, c_err_msg  );
		fn_userlog (c_ServiceName,"Error while updating ISIN CODE for EQUITY " );
  }
	fn_userlog (c_ServiceName," Updated :%d: rows for EQUITY", SQL_ROW_COUNT );



  /** Added columns -RELATIVE_MTCH, RELATION_CODE & DEPEDENT_FLG in Ver 1.3  **/
  /** Added UNION to maintain distinct entry against trades of depedendent match id **/
  EXEC SQL
  INSERT INTO FIT_FO_INSDR_TRDS 
  (
		FIT_FO_ID,
		FIT_FO_TRD_DT,
		FIT_FO_EMP_ID,
		FIT_FO_EMP_NAME,
		FIT_FO_EMP_MATCH_ACC,
		FIT_FO_EMP_PAN_NO,
		FIT_FO_CMPNY_ID,
		FIT_FO_DP_ID,
		FIT_FO_DP_CLNT_ID,
		FIT_FO_SEGMENT,
		FIT_FO_STOCK_CODE,
		FIT_FO_STOCK_SYMBOL,
		FIT_FO_ISIN_CODE,
		FIT_FO_TRD_FLW,
		FIT_FO_TRD_EXCTD_QTY,
		FIT_FO_TRD_EXCTD_RT,
		FIT_FO_CONTRACT,
		FIT_FO_FTD_EXPRY_DT,
		FIT_FO_OPT_TYP,
		FIT_FO_STRK_PRC,
		FIT_RELATIVE_MTCH,       /** Added in Ver 1.3 **/
		FIT_DEPENDENT_PAN_NO,    /** Added in Ver 1.3 **/
		FIT_RELATION_CODE,       /** Added in Ver 1.3 **/
    FIT_DEPEDENT_FLG         /** Added in Ver 1.3 **/
  )
  SELECT FIT_FO_INSDR_SEQ.NEXTVAL, TRD_DT,EMPID,EMPNAME,MTCH_ACC,
						PAN,CMPNY_ID,DP_ID,CLNT_ID,SEG,UND,STCK_SYM,ISNCD,FLW,QTY,RT,CNTRCT,EXP_DT,PRDTYP,STRK,
						ITE_RELATIVE_MTCH,ITE_DEPENDENT_PAN_NO, ITE_RELATION_CODE, RELATIVE_FLAG
						FROM
  (
   (
		SELECT	TRD_DT,EMPID,EMPNAME,MTCH_ACC,
						PAN,CMPNY_ID,DP_ID,CLNT_ID,SEG,UND,STCK_SYM,ISNCD,FLW,QTY,RT,CNTRCT,EXP_DT,PRDTYP,STRK,
						ITE_RELATIVE_MTCH,ITE_DEPENDENT_PAN_NO,  ITE_RELATION_CODE, RELATIVE_FLAG 
		FROM 
		(
     SELECT	FTD_TRD_DT TRD_DT,
           	ITE_EMP_ID EMPID,
           	TRIM(ITE_EMP_NAME) EMPNAME ,
           	NVL(ITE_MTCH_ACCNT,'NA') MTCH_ACC,
           	ITE_PAN_NO PAN,
           	ITE_CMPY_ID CMPNY_ID,
					 	NULL DP_ID,	
					 	NULL CLNT_ID,	
					 	'F' SEG,	
					 	trim(FTD_UNDRLYNG) UND,
           	NULL STCK_SYM, 
           	NULL ISNCD, 
           	FTD_TRD_FLW FLW,
           	FTD_EXCTD_QTY QTY,
           	(FTD_EXCTD_RT/100) RT,
						/*************** Added for 1.6 *************/
           //	TRIM(FTD_UNDRLYNG)||'-'||DECODE( FTD_PRDCT_TYP,'O', 'OPT','F','FUT' )||DECODE( FTD_INDSTK,'I','IDX','S','STK') CNTRCT,
           	TRIM(FTD_UNDRLYNG)||'-'||DECODE( FTD_PRDCT_TYP,'O', 'OPT','F','FUT' )||DECODE( FTD_INDSTK,'I',DECODE(FTD_UNDRLYNG,'INDVIX','IVX','IDX'),'S','STK') CNTRCT,
						   /*************** Added for 1.6 *************/
						FTD_EXPRY_DT EXP_DT,
           	DECODE(FTD_OPT_TYP,'*','F',FTD_OPT_TYP) PRDTYP,
           	(FTD_STRK_PRC/100) STRK,
						ITE_RELATIVE_MTCH,  /* Added in Ver 1.3 */
						ITE_DEPENDENT_PAN_NO, /* Added in Ver 1.3 */
						ITE_RELATION_CODE,  /* Added in Ver 1.3 */
						'N' RELATIVE_FLAG   /* Added in Ver 1.3 */
     FROM FTD_FO_TRD_DTLS , ITE_INSD_TRD_EMP_MSTR
     WHERE FTD_CLM_MTCH_ACCNT= NVL(ITE_MTCH_ACCNT,'NA')  /*** Ver 1.7 ** NVL Added **/
		 AND trunc(FTD_TRD_DT) = :c_trd_dt
		 AND ITE_DEPENDENT_PAN_NO is NULL       /** Added in Ver 1.3 -To get Main record **/ 
     AND ITE_CMPY_ID = 'BANK'               /** Ver 1.5 **/ 
     AND ITE_AUTHRZTN_FLG = 'Y'            /** Ver 1.7 **/
		 UNION ALL 
     SELECT	FTD_TRD_DT TRD_DT,
           	ITE_EMP_ID EMPID,
           	TRIM(ITE_EMP_NAME) EMPNAME,
           	NVL(ITE_MTCH_ACCNT,'NA') MTCH_ACC,  /** Ver 1.7 , NVL Added **/
           	ITE_PAN_NO PAN,
           	ITE_CMPY_ID CMPNY_ID,
					 	NULL DP_ID,	
					 	NULL CLNT_ID,	
					 	'F' SEG,	
					 	trim(FTD_UNDRLYNG) UND,
           	NULL STCK_SYM, 
           	NULL ISNCD, 
           	FTD_TRD_FLW FLW,
           	FTD_EXCTD_QTY QTY,
           	(FTD_EXCTD_RT/100) RT,
           	  /*************** Added for 1.6 *************/
					//	TRIM(FTD_UNDRLYNG)||'-'||DECODE( FTD_PRDCT_TYP,'O', 'OPT','F','FUT' )||DECODE( FTD_INDSTK,'I','IDX','S','STK') CNTRCT,
						TRIM(FTD_UNDRLYNG)||'-'||DECODE( FTD_PRDCT_TYP,'O', 'OPT','F','FUT' )||DECODE( FTD_INDSTK,'I',DECODE(FTD_UNDRLYNG,'INDVIX','IVX','IDX'),'S','STK') CNTRCT,
               /*************** Added for 1.6 *************/
           	FTD_EXPRY_DT EXP_DT,
           	DECODE(FTD_OPT_TYP,'*','F',FTD_OPT_TYP) PRDTYP,
           	(FTD_STRK_PRC/100) STRK,
						ITE_RELATIVE_MTCH,  /* Added in Ver 1.3 */
						ITE_DEPENDENT_PAN_NO, /* Added in Ver 1.3 */
						ITE_RELATION_CODE,  /* Added in Ver 1.3 */
						'N' RELATIVE_FLAG   /* Added in Ver 1.3 */
     FROM FTD_FO_TRD_DTLS_HSTRY , ITE_INSD_TRD_EMP_MSTR
     WHERE FTD_CLM_MTCH_ACCNT=NVL(ITE_MTCH_ACCNT,'NA')  /** Ver 1.7 ** NVL Added **/
		 AND trunc(FTD_TRD_DT) = :c_trd_dt
		 AND ITE_DEPENDENT_PAN_NO is NULL       /** Added in Ver 1.3 -To get Main record **/
     AND ITE_CMPY_ID = 'BANK'               /** Ver 1.5 **/
     AND ITE_AUTHRZTN_FLG = 'Y'            /** Ver 1.7 **/ 
		)
   )  /** Added Below UNION in Ver 1.3 **/
   UNION ALL /** Added UNION ALL in  1.4 **/
   (
		SELECT	TRD_DT,EMPID,EMPNAME,MTCH_ACC,
						PAN,CMPNY_ID,DP_ID,CLNT_ID,SEG,UND,STCK_SYM,ISNCD,FLW,QTY,RT,CNTRCT,EXP_DT,PRDTYP,STRK,
						ITE_RELATIVE_MTCH, ITE_DEPENDENT_PAN_NO, ITE_RELATION_CODE, RELATIVE_FLAG
		FROM 
		(
     SELECT	FTD_TRD_DT TRD_DT,
           	ITE_EMP_ID EMPID,
           	TRIM(ITE_EMP_NAME) EMPNAME ,
           	NVL(ITE_MTCH_ACCNT,'NA') MTCH_ACC,
           	ITE_PAN_NO PAN,
           	ITE_CMPY_ID CMPNY_ID,
					 	NULL DP_ID,	
					 	NULL CLNT_ID,	
					 	'F' SEG,	
					 	trim(FTD_UNDRLYNG) UND,
           	NULL STCK_SYM, 
           	NULL ISNCD, 
           	FTD_TRD_FLW FLW,
           	FTD_EXCTD_QTY QTY,
           	(FTD_EXCTD_RT/100) RT,
						   /*************** Added for 1.6 *************/
           //TRIM(FTD_UNDRLYNG)||'-'||DECODE( FTD_PRDCT_TYP,'O', 'OPT','F','FUT' )||DECODE( FTD_INDSTK,'I','IDX','S','STK') CNTRCT,
						TRIM(FTD_UNDRLYNG)||'-'||DECODE( FTD_PRDCT_TYP,'O', 'OPT','F','FUT' )||DECODE( FTD_INDSTK,'I',DECODE(FTD_UNDRLYNG,'INDVIX','IVX','IDX'),'S','STK') CNTRCT,
						 /*************** Added for 1.6 *************/
						FTD_EXPRY_DT EXP_DT,
           	DECODE(FTD_OPT_TYP,'*','F',FTD_OPT_TYP) PRDTYP,
           	(FTD_STRK_PRC/100) STRK,
						ITE_RELATIVE_MTCH,  /* Added in Ver 1.3 */
						ITE_DEPENDENT_PAN_NO, /* Added in Ver 1.3 */
						ITE_RELATION_CODE,  /* Added in Ver 1.3 */
						'Y' RELATIVE_FLAG   /* Added in Ver 1.3 */
     FROM FTD_FO_TRD_DTLS , ITE_INSD_TRD_EMP_MSTR
     WHERE FTD_CLM_MTCH_ACCNT= NVL(ITE_RELATIVE_MTCH,'NA')  /** Ver 1.7 ** NVL Added **/
		 AND trunc(FTD_TRD_DT) = :c_trd_dt
     AND ITE_CMPY_ID = 'BANK'               /** Ver 1.5 **/
     AND ITE_AUTHRZTN_FLG = 'Y'            /** Ver 1.7 **/
		 UNION ALL 
     SELECT	FTD_TRD_DT TRD_DT,
           	ITE_EMP_ID EMPID,
           	TRIM(ITE_EMP_NAME) EMPNAME,
           	NVL(ITE_MTCH_ACCNT,'NA') MTCH_ACC,  /** Ver 1.7, nvl added **/
           	ITE_PAN_NO PAN,
           	ITE_CMPY_ID CMPNY_ID,
					 	NULL DP_ID,	
					 	NULL CLNT_ID,	
					 	'F' SEG,	
					 	trim(FTD_UNDRLYNG) UND,
           	NULL STCK_SYM, 
           	NULL ISNCD, 
           	FTD_TRD_FLW FLW,
           	FTD_EXCTD_QTY QTY,
           	(FTD_EXCTD_RT/100) RT,
 						/*************** Added for 1.6 *************/
           //	TRIM(FTD_UNDRLYNG)||'-'||DECODE( FTD_PRDCT_TYP,'O', 'OPT','F','FUT' )||DECODE( FTD_INDSTK,'I','IDX','S','STK') CNTRCT,	 
           	TRIM(FTD_UNDRLYNG)||'-'||DECODE( FTD_PRDCT_TYP,'O', 'OPT','F','FUT' )||DECODE( FTD_INDSTK,'I',DECODE(FTD_UNDRLYNG,'INDVIX','IVX','IDX'),'S','STK') CNTRCT,
						/*************** Added for 1.6 *************/
						FTD_EXPRY_DT EXP_DT,
           	DECODE(FTD_OPT_TYP,'*','F',FTD_OPT_TYP) PRDTYP,
           	(FTD_STRK_PRC/100) STRK,
						ITE_RELATIVE_MTCH,  /* Added in Ver 1.3 */
						ITE_DEPENDENT_PAN_NO, /* Added in Ver 1.3 */
						ITE_RELATION_CODE,  /* Added in Ver 1.3 */
						'Y'  RELATIVE_FLAG  /* Added in Ver 1.3 */
     FROM FTD_FO_TRD_DTLS_HSTRY , ITE_INSD_TRD_EMP_MSTR
     WHERE FTD_CLM_MTCH_ACCNT=NVL(ITE_RELATIVE_MTCH,'NA')  /** Ver 1.7 ** NVL Added **/
		 AND trunc(FTD_TRD_DT) = :c_trd_dt
     AND ITE_CMPY_ID = 'BANK'               /** Ver 1.5 **/
     AND ITE_AUTHRZTN_FLG = 'Y'            /** Ver 1.7 **/
		)
   )
  );

  if ( SQLCODE != 0 )
  {
  	fn_errlog ( c_ServiceName, "S31025", SQLMSG, c_err_msg  );
  }

	fn_userlog (c_ServiceName," Inserted :%d: rows for FNO", SQL_ROW_COUNT );

	fn_userlog (c_ServiceName,"UPDATING STOCK SYMBOL FOR FNO............. " );
  EXEC SQL
	UPDATE FIT_FO_INSDR_TRDS 
	SET FIT_FO_STOCK_SYMBOL = ( 
													SELECT SEM_MAP_VL 
													FROM SEM_STCK_MAP 
													WHERE SEM_STCK_CD=FIT_FO_STOCK_CODE 
													AND SEM_ENTTY=1 
													/** This need to change -in case of trades in FNO-BSE - Like Ver 1.1 **/
													/** Currently No any change in Ver 1.1 **/
												)
	WHERE  FIT_FO_SEGMENT ='F'	
	and trunc(FIT_FO_TRD_DT) = :c_trd_dt;
  if ( SQLCODE != 0 )
  {
  	fn_errlog ( c_ServiceName, "S31030", SQLMSG, c_err_msg  );
		fn_userlog (c_ServiceName,"Error while updating STOCK SYMBOL for FNO " );
  }
	fn_userlog (c_ServiceName," Updated :%d: rows for FNO", SQL_ROW_COUNT );

	fn_userlog (c_ServiceName,"UPDATING DP ID and DP CLNT ID FOR FNO.............. " );
	EXEC SQL
	UPDATE FIT_FO_INSDR_TRDS 
	SET FIT_FO_DP_ID =(
											SELECT CLD_DP_ID
											FROM CLD_DP_ACCTS
											WHERE CLD_CLM_MTCH_ACCNT=FIT_FO_EMP_MATCH_ACC
											AND CLD_PAN_EXIST_FLAG='Y'
											AND ROWNUM < 2
									 	),
			FIT_FO_DP_CLNT_ID = (
											SELECT CLD_DP_CLNT_ID
											FROM CLD_DP_ACCTS
											WHERE CLD_CLM_MTCH_ACCNT=FIT_FO_EMP_MATCH_ACC
											AND CLD_PAN_EXIST_FLAG='Y'
											AND ROWNUM < 2
                   	)
	WHERE  FIT_FO_SEGMENT ='F'	
	and trunc(FIT_FO_TRD_DT) = :c_trd_dt;
  if ( SQLCODE != 0 )
  {
  	fn_errlog ( c_ServiceName, "S31035", SQLMSG, c_err_msg  );
		fn_userlog (c_ServiceName,"Error while updating DP ID and DP CLNT ID for FNO " );
  }
	fn_userlog (c_ServiceName," Updated :%d: rows for FNO", SQL_ROW_COUNT ); 


  /* Ver 1.2 Starts */

  EXEC SQL
		UPDATE FIT_FO_INSDR_TRDS 
		SET FIT_FO_SCRP_NAME = ( SELECT STK_STCK_NM 
				 										 FROM STK_STK_MSTR 
				 										 WHERE STK_STCK_CD=FIT_FO_STOCK_CODE 
		    	    						 )
		WHERE trunc(FIT_FO_TRD_DT) = :c_trd_dt;
  
	if ( SQLCODE != 0 )
  {
  	fn_errlog ( c_ServiceName, "S31040", SQLMSG, c_err_msg  );
		fn_userlog (c_ServiceName,"Error while updating SCRIP NAME for both" );
  }
	fn_userlog (c_ServiceName," Updated :%d: rows for SCRIP Name", SQL_ROW_COUNT );


  /* Ver 1.2 Ends */
		
  if ( tpcommit(0) == -1 )
  {
    fn_errlog(c_ServiceName, "S31045", FMLMSG,c_err_msg );
    tpabort(0);
  }

  sprintf(c_msg,"Batch process %s completed",c_ServiceName);
  fn_userlog (c_ServiceName,"Batch process %s completed",c_ServiceName);
  fn_userlog (c_ServiceName,"==================End of %s =================",c_ServiceName);
  fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
	return;

}

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_INSDR_REP;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  fn_userlog (c_ServiceName,"-------------------------END--------------------");
  return;
} 

int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
  return 0;
}
