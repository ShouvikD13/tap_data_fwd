/******************************************************************************/
/*  Program           : BAT_MRGN_PLG                                          */
/*                                                                            */
/*  Input             : <bat_mrgn_plg>												                */
/*                                                                            */
/*  Output            :  Integer 1 on sucess and 0 on fail                    */
/*                                                                            */
/*  Description       :  This bat process take Standard  inputs		  			    */
/*                                                                            */
/* This batch process update PTD_PLG_TIFP_DTLS table												  */
/*  										                                                      */
/*                                                                            */
/*  Log               : 1.0   13-Jul-2020   Infotech|Samip M									*/
/*                    : 1.1   08-Mar-2022   Infotech|Saurabh P                */
/*                    : 1.2   12-Dec-2022   Infotech|Samip M									*/
/******************************************************************************/
/*   1.0  -  New release                                                      */
/*   1.1  -  CR-ISEC03-162033 - Re-pledging for SAM Pledge securities         */
/*   1.2  -  CR-ISEC03-178283 - Spot Invocation																*/
/******************************************************************************/

#include "fn_collateral.h"
#include <fn_read_debug_lvl.h>
#define	WITHDRAW	'W'
#define	PLG	'P'
#define	INV	'I'

EXEC SQL INCLUDE "table/tpd_ptd_tbl.h";

int main (int argc , char* argv[])
{
		int		i_trnsctn;
		int		i_count;
		int		flag =0, i=0;
		int   count=0;
		int   i_haircut=0;
		int   i_counter = 0;
    int   i_dp_flg=0;
		int		i_cc_cm_cnt = 0;	/** Ver 1.1 **/

		char	c_plg_rev_typ;

 		char  c_channel[4];
		char  c_bpid[9];
		char	c_clm_mtch_accnt[11];
		char	c_dp_id[9];
		char	c_dp_clnt_id[9];
		char	c_isin_no[13];
		char	c_stck_cd[7];
		char	c_ServiceName [ 33 ];
		char	c_err_msg[256];
		char  c_msg[256+1];
		char	c_ordr_no[19];
		char	C_iwtl_dp_accnt[18];
		char 	ch_tm[25];
		char	c_rmrks[256];
  	/**	char	c_dpm_no[10 +1];  --commented for ver 1.5  **/
		char  c_dpm_no[14 +1]; /** ver 1.5 **/
		char	c_pod_ref_no[18 +1];
		char	c_tifp_run_dt[22];
		char	c_agree_nmbr[40 + 1];
		char	c_iwtl_dp_accnt[17+1];
    char  c_cdsl_iwtl_dp_accnt[18]; /* Added Ver 1.6 */
		char	c_ordr_dt[22];
		char  c_tag[32];
		char  c_fileseq[3];			/** Ver 1.1 **/
		char  c_fileseq_fo[3];			/** Ver 1.1 **/
		char  c_filedate[9];		/** Ver 1.1 **/
		char  c_filedate_name[9];		/** Ver 1.1 **/
		char  c_row_id[19];			/** Ver 1.1 **/
		char  c_seg_code;			/** Ver 1.1 **/
		varchar v_file_data[200];		/** Ver 1.1 **/
		char c_path[50];				/** Ver 1.1 **/
		char c_command[350];		/** Ver 1.1 **/
		char c_filename[200];		/** Ver 1.1 **/
		char c_file_path[200];		/** Ver 1.1 **/
		char c_filename_fo[200];		/** Ver 1.1 **/
		char c_file_path_fo[200];		/** Ver 1.1 **/
		FILE *fp;								/** Ver 1.1 **/
		FILE *fp_fo;								/** Ver 1.1 **/
		varchar v_channel[4];				/** Ver 1.2 **/

		long	l_ordr_qty;
		long  l_plg_req_qty;
		long  l_tifp_qty;
		long  l_rev_req_qty;
		long  l_inv_req_qty;
		long	l_free_qty;
		long	l_plg_vs_wd_qty;	
		long	l_rqst_qty;
		long	l_plg_req_qty_chng;
		long	l_tifp_qty_chng;
		long	l_rev_req_qty_chng;
		long	l_inv_req_qty_chng;
		long  l_pod_qty;
		long  l_rev_cov_qty;
		long  l_inv_cov_qty;
		long l_run_no;				/** Ver 1.1 **/

 		double d_ordr_val =0;
 		double d_conf_qty =0;
 		double d_rjct_qty =0;
		double sql_tmp_dpm_nmbr = 0.0;	/** Ver 1.1 **/

 		FBFR32 *ptr_fml_Ibuf1;
  	FBFR32 *ptr_fml_Obuf1;

		int l_pod_cnt = 0;
		int l_plg_cnt = 0;
		int i_ptd_cnt = 0;
		int l_ptd_cnt = 0;		/** Ver 1.1 **/
		varchar sql_execn_dt[13];
		char c_plg_typ;
		char c_operation_typ;
		int  i_err[16];				/** Changed from 10 to 14 for Ver 1.1 **//** 16 for Ver 1.2 **/
		long l_ip_len = 0;
		int i_returncode = 0;
		int j = 0;
		int i_cutoff_exist = 0;
		

		NULLCHAR(c_ServiceName);
		NULLCHAR(c_tag);
		NULLCHAR(c_clm_mtch_accnt);
		NULLCHAR(c_stck_cd);

		strcpy(c_ServiceName ,"bat_mrgn_plg");

		INITBATDBGLVL(argv[0]);			/*** Ver 1.3 ***/

		if(argc != 6)			/** Changed from 8 to 6 for Ver 1.1 **/
		{
				/** fn_userlog(c_ServiceName, "Usage: bat_mrgn_plg <Config File> <Exchange Cd> \
				<Pipe Id> <MatchAccount> <stock code> < Pledge Type> <Operation Type>"); *** Commented for Ver 1.1 **/
				fn_userlog(c_ServiceName, "Usage: bat_mrgn_plg <Config File> <Exchange Cd> \
				<Pipe Id> < Pledge Type> <Operation Type>");
				exit(-1);
		}

		strcpy( c_msg, "STAGE 1.0 Starting BAT_MRGN_PLG...");
		fn_userlog( c_ServiceName,c_msg);
		fn_userlog( c_ServiceName,"config File :%s:"   ,argv[1]);
		fn_userlog( c_ServiceName,"Exchange Code :%s:" ,argv[2]);
		fn_userlog( c_ServiceName,"Pipe Id :%s:"       ,argv[3]);

		sprintf(c_tag,"%s_%s",c_ServiceName,argv[2]);

		init_bat(c_ServiceName,argv[2],argv[3]);

		fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);

/*** Commented for Ver 1.1 ****

		if ( (strcmp(argv[4],"A") == 0) || (strcmp(argv[4],"*") == 0) )
				strcpy(c_clm_mtch_accnt,"%");
		else
				strcpy(c_clm_mtch_accnt,argv[4]);

		if( (strcmp(argv[5],"A") == 0) || (strcmp(argv[5],"*") == 0) )
				strcpy(c_stck_cd,"%");
		else
				strcpy(c_stck_cd,argv[5]);

** End for Ver 1.1 ***/

		/** if( (strcmp(argv[6],"A") == 0) || (strcmp(argv[6],"*") == 0) )
				c_plg_rev_typ = '%';
		else ***/

		c_plg_rev_typ = (char) argv[5][0];		/*** Arg changed from 6 to 5 for Ver 1.1 **/

    if ( c_plg_rev_typ == 'P')
        c_plg_typ = 'P';
    /** else if ( c_plg_rev_typ == 'R') ** Commented for Ver 1.1 ***/
		else if ( c_plg_rev_typ == 'W')			/*** Changed to W for Ver 1.1 **/
        c_plg_typ = 'W';
    else if ( c_plg_rev_typ == 'I')
        c_plg_typ = 'I';
		/** Added for Ver 1.1 **/
		/** Added for Ver 1.3 **/
    else if ( c_plg_rev_typ == 'R')
        c_plg_typ = 'I';
    else if ( c_plg_rev_typ == 'S')
        c_plg_typ = 'I';
		/** Added for Ver 1.2 **/
    else if ( c_plg_rev_typ == 'X')
        c_plg_typ = 'W';
    else if ( c_plg_rev_typ == 'J')
        c_plg_typ = 'I';
    else if ( c_plg_rev_typ == 'T')
        c_plg_typ = 'T';
    else if ( c_plg_rev_typ == 'C')
        c_plg_typ = 'C';
    else if ( c_plg_rev_typ == 'D')
        c_plg_typ = 'D';
    else if ( c_plg_rev_typ == 'U')
        c_plg_typ = 'U';
		/** End for Ver 1.1 **/
    else
    {
          strcpy(c_err_msg,"Invalid Pledge Type must be P,R or I");
          fn_userlog(c_ServiceName,c_err_msg );
          destroy_bat();
    }

		c_operation_typ = (char) argv[4][0];		/** Arg changed from 7 to 4 for Ver 1.1 **/

		fn_userlog(c_ServiceName,"VAlue of c_operation_typ :%c:",c_operation_typ);

		if(c_operation_typ!='R' && c_operation_typ != 'C')
		{
          strcpy(c_err_msg,"Invalid Operation Type must be R or C");
          fn_userlog(c_ServiceName,c_err_msg );
          destroy_bat();
		}

		if (DEBUG_MSG_LVL_3)			/*** Ver 1.3  ***/
		{ 
			fn_userlog( c_ServiceName,"Match Account :%s:" ,c_clm_mtch_accnt);
			fn_userlog( c_ServiceName,"Stock Code :%s"     ,c_stck_cd);
			fn_userlog( c_ServiceName,"Pledge Input Type :%c:"   ,c_plg_rev_typ);
			fn_userlog( c_ServiceName,"Pledge Type :%c:"   ,c_plg_typ);
		}

		ptr_fml_Ibuf1 = (FBFR32 *)NULL;
  	ptr_fml_Obuf1 = (FBFR32 *)NULL;

		fn_userlog(c_ServiceName,"Parameter passed c_operation_typ :%c: and c_plg_rev_typ :%c:",c_operation_typ,c_plg_rev_typ);

  	ptr_fml_Ibuf1 = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  	if ( ptr_fml_Ibuf1 == NULL )
  	{
				fn_errlog( c_ServiceName, "S31005", TPMSG , c_err_msg  );
				fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
				destroy_bat();
  	}

  	ptr_fml_Obuf1 = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  	if ( ptr_fml_Obuf1 == NULL )
  	{
				fn_errlog( c_ServiceName, "S31010", TPMSG , c_err_msg  );
				fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
				destroy_bat();
  	}

		/**** Commented ***
		i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

		if ( i_trnsctn == -1 )
		{
				fn_errlog( c_ServiceName, "S31015", TPMSG , c_err_msg  );
				fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
				destroy_bat();
		}
		*********/

		/*** Commented for Cutoff time ***
		EXEC SQL
			SELECT TO_CHAR(SYSDATE)
			INTO :sql_execn_dt
			FROM DUAL;

		*** Cutoff time ***/

		MEMSET(sql_execn_dt); 

		EXEC SQL
    	SELECT COUNT(1)
    	INTO :i_cutoff_exist
    	FROM PPP_PAR_PLG_PRMTR
    	WHERE NVL(PPP_CUT_OFF_TIME,24) <= TO_CHAR(SYSDATE,'HH24');

   	if(SQLCODE != 0)
   	{
      fn_errlog(c_ServiceName, "S31020", SQLMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      destroy_bat();
    }

  	/** if(i_cutoff_exist == 0) ** Commented and included Repledge for sysdate for Ver 1.1 **/
  	if(i_cutoff_exist == 0 || c_plg_rev_typ == 'T' || c_plg_rev_typ == 'C' || c_plg_rev_typ == 'U' || c_plg_rev_typ == 'D')
  	{

    	EXEC SQL
      	SELECT TO_CHAR(SYSDATE,'DD-Mon-YYYY')
      	INTO  :sql_execn_dt
      	FROM  DUAL;

  	}
  	else
  	{
    	EXEC SQL
      	SELECT TO_CHAR(MIN(SPD_TRD_FRM_DT),'DD-Mon-YYYY')
      	INTO  :sql_execn_dt
      	FROM SPD_STTLMNT_PRCS_DTLS
      	WHERE SPD_TRD_FRM_DT>TRUNC(SYSDATE)
      	AND SPD_XCHNG_CD='BSE';
  	}
   	if(SQLCODE != 0)
   	{
      fn_errlog(c_ServiceName, "S31025", SQLMSG, c_err_msg);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      destroy_bat();
    }

		SETLEN(sql_execn_dt);
		SETNULL(sql_execn_dt);

		switch(c_operation_typ)
		{
			case 'R':

			fn_userlog(c_ServiceName,"Inside the flow of Request");
			/** if(c_plg_rev_typ == 'P')
			{ **/

			/** Condition Added for Ver 1.1 **/
			if (c_plg_rev_typ == 'P' || c_plg_rev_typ == 'X' || c_plg_rev_typ == 'J' || c_plg_rev_typ == 'R')/** Added R for Ver 1.2 **/
			{
				fn_userlog(c_ServiceName,"Pledge Type for Request :%c:",c_plg_rev_typ);
			
				EXEC SQL
					SELECT COUNT(1)
					INTO :l_pod_cnt
					FROM POD_PLG_ORDR_DTLS
          WHERE 
          POD_PLG_REV_TYP = :c_plg_typ
          AND POD_ORDR_STTS = 'R'
					AND POD_ORDR_QTY - NVL(POD_PRCSD_QTY,0) > 0	
					AND 1 = (CASE 
									WHEN :c_plg_typ = 'I' AND :c_plg_rev_typ = 'J' AND POD_CHANNEL = 'SYS' THEN 1
									WHEN :c_plg_typ = 'I' AND :c_plg_rev_typ = 'R' AND POD_CHANNEL <> 'SYS' THEN 1
									WHEN :c_plg_typ <> 'I' THEN 1
									ELSE 0 END);

    	 	if(SQLCODE != 0)
    	 	{
        	fn_errlog(c_ServiceName, "S31030", SQLMSG, c_err_msg);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	destroy_bat();
    	 	}

			 	if( l_pod_cnt== 0)
			 	{
					fn_userlog(c_ServiceName,"No record found for Pledge Request");
					strcpy(c_err_msg,"No record found for Pledge Request");
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          destroy_bat();
				}
			}
			else if (c_plg_rev_typ == 'W' || c_plg_rev_typ == 'I' || c_plg_rev_typ == 'S')	/** Added S for Ver 1.2 **/
			{
				fn_userlog(c_ServiceName,"Pledge Type for Request :%c:",c_plg_rev_typ);

				EXEC SQL
					SELECT COUNT(1)
					INTO :l_ptd_cnt
					FROM   ptd_tifp_dtls 
					WHERE  ptd_plg_rev_typ=DECODE(:c_plg_rev_typ,'S','I',:c_plg_rev_typ)
					AND    ptd_tifp_stts = 'N'
					AND    ptd_leg_no is NULL
					AND    1 = (CASE 
									WHEN :c_plg_rev_typ = 'W' AND ptd_slipno_w1 IS NULL THEN 1
									WHEN :c_plg_rev_typ = 'I' AND ptd_slipno_i1 is NULL AND PTD_CHANNEL = 'SYS' THEN 1	/** Channel added for Ver 1.2 */
									WHEN :c_plg_rev_typ = 'S' AND ptd_slipno_i1 is NULL AND PTD_CHANNEL <> 'SYS' THEN 1 /** Channel added for Ver 1.2 */
								 END );

    	 	if(SQLCODE != 0)
    	 	{
        	fn_errlog(c_ServiceName, "S31035", SQLMSG, c_err_msg);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	destroy_bat();
    	 	}

			 	if( l_ptd_cnt == 0)
			 	{
					fn_userlog(c_ServiceName,"No record found for Submission for Type :%c:",c_plg_rev_typ);
					sprintf(c_err_msg,"No record found for Submission for Type :%c:",c_plg_rev_typ);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          destroy_bat();
				}
			}
			else if (c_plg_rev_typ == 'T')
			{

				 EXEC SQL
						 SELECT COUNT(1)
						 INTO :l_pod_cnt
						 FROM POD_PLG_ORDR_DTLS,
									PTD_TIFP_DTLS
						WHERE POD_PLG_REV_TYP = 'P'
						AND   PTD_CLM_MTCH_ACCNT = POD_CLNT_MTCH_ACCNT
						AND   PTD_DP_ID = POD_DP_ACCNT
						AND   PTD_DP_CLNT_ID = POD_DP_CLNT_ACCNT
						AND   PTD_POD_REF_NO = POD_ORDR_NO
						AND   PTD_PLG_REV_TYP = POD_PLG_REV_TYP
						AND   PTD_TIFP_STTS = 'P'
						AND   POD_ORDR_STTS = 'C'
						AND 	SUBSTR(PTD_DP_ID,1,1) <> '1'
						AND   (PTD_TIFP_QTY - NVL(PTD_PLG_VS_WD_QTY,0)) - NVL(PTD_REPLG1_QTY,0) > 0
						AND		EXISTS ( SELECT 1 FROM prc_plg_replg_clnts
														WHERE  PTD_CLM_MTCH_ACCNT = pcr_mtch_Accnt);

    	 	if(SQLCODE != 0)
    	 	{
        	fn_errlog(c_ServiceName, "S31040", SQLMSG, c_err_msg);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	destroy_bat();
    	 	}

			 	if( l_pod_cnt == 0)
			 	{
					fn_userlog(c_ServiceName,"No record found for Pledge TM CM for Type :%c:",c_plg_rev_typ);
					sprintf(c_err_msg,"No record found for Type :%c:",c_plg_rev_typ);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          destroy_bat();
				}

			}
			else if (c_plg_rev_typ == 'C')
			{
				 EXEC SQL
						 SELECT COUNT(1)
						 INTO :l_pod_cnt
						 FROM POD_PLG_ORDR_DTLS,
									PTD_TIFP_DTLS
						WHERE POD_PLG_REV_TYP = 'T'
						AND   PTD_CLM_MTCH_ACCNT = POD_CLNT_MTCH_ACCNT
						AND   PTD_DP_ID = POD_DP_ACCNT
						AND   PTD_DP_CLNT_ID = POD_DP_CLNT_ACCNT
						AND   PTD_POD_REF_NO = POD_ORDR_NO
						AND   PTD_PLG_REV_TYP = POD_PLG_REV_TYP
						AND 	SUBSTR(PTD_DP_ID,1,1) <> '1'
						AND   PTD_TIFP_STTS = 'P'
						AND   POD_ORDR_STTS = 'C'
						AND   (PTD_TIFP_QTY - NVL(PTD_REPLG2_QTY,0)) > 0;

    	 	if(SQLCODE != 0)
    	 	{
        	fn_errlog(c_ServiceName, "S31045", SQLMSG, c_err_msg);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	destroy_bat();
    	 	}

			 	if( l_pod_cnt == 0)
			 	{
					fn_userlog(c_ServiceName,"No record found for Pledge CM CC for Type :%c:",c_plg_rev_typ);
					sprintf(c_err_msg,"No record found for Type :%c:",c_plg_rev_typ);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          destroy_bat();
				}

			}
			else if (c_plg_rev_typ == 'D')
			{

				fn_userlog(c_ServiceName,"Pledge Type for Request :%c:",c_plg_rev_typ);

				EXEC SQL
					SELECT COUNT(1)
					INTO :l_ptd_cnt
					FROM   ptd_tifp_dtls A
					WHERE  ptd_plg_rev_typ in ('W','I')
					AND    ptd_tifp_stts = 'N'
					AND    ptd_leg_no is NULL
					AND    1 = (CASE 
									WHEN ptd_plg_rev_typ = 'W' AND ptd_slipno_w1 IS NULL THEN 1
									WHEN ptd_plg_rev_typ = 'I' AND ptd_slipno_i1 IS NULL THEN 1
								 END )
					AND	PTD_TIFP_QTY - NVL(PTD_REPLG2_QTY,0) > 0
					AND 	SUBSTR(PTD_DP_ID,1,1) <> '1'
					AND exists(select 1 from ptd_tifp_dtls B where A.PTD_DPM_NMBR3 = B.PTD_DPM_NMBR3
					AND B.PTD_TIFP_QTY - NVL(B.PTD_PLG_VS_WD_QTY,0) > 0
					AND B.ptd_plg_rev_typ = 'C');

    	 	if(SQLCODE != 0)
    	 	{
        	fn_errlog(c_ServiceName, "S31050", SQLMSG, c_err_msg);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	destroy_bat();
    	 	}

			 	if( l_ptd_cnt == 0)
			 	{
					fn_userlog(c_ServiceName,"No record found for Type CC CM:%c:",c_plg_rev_typ);
					sprintf(c_err_msg,"No record found for Type :%c:",c_plg_rev_typ);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          destroy_bat();
				}
			}
			else if (c_plg_rev_typ == 'U')
			{
				fn_userlog(c_ServiceName,"Pledge Type for Request :%c:",c_plg_rev_typ);

				EXEC SQL
					SELECT COUNT(1)
					INTO :l_ptd_cnt
					FROM   ptd_tifp_dtls A
					WHERE  ptd_plg_rev_typ in ('W','I')
					AND    ptd_tifp_stts = 'N'
					AND    ptd_leg_no is NULL
					AND    1 = (CASE 
									WHEN ptd_plg_rev_typ = 'W' AND ptd_slipno_w1 IS NULL THEN 1
									WHEN ptd_plg_rev_typ = 'I' AND ptd_slipno_i1 IS NULL THEN 1
								 END )
					AND	PTD_TIFP_QTY - NVL(PTD_REPLG1_QTY,0) > 0
					AND 	SUBSTR(PTD_DP_ID,1,1) <> '1'
					AND exists(select 1 from ptd_tifp_dtls B where A.PTD_DPM_NMBR2 = B.PTD_DPM_NMBR2
					AND B.PTD_TIFP_QTY - NVL(B.PTD_PLG_VS_WD_QTY,0) > 0
					AND B.ptd_plg_rev_typ = 'T');

    	 	if(SQLCODE != 0)
    	 	{
        	fn_errlog(c_ServiceName, "S31055", SQLMSG, c_err_msg);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	destroy_bat();
    	 	}

			 	if( l_ptd_cnt == 0)
			 	{
					fn_userlog(c_ServiceName,"No record found for CM TM :%c:",c_plg_rev_typ);
					sprintf(c_err_msg,"No record found for Type :%c:",c_plg_rev_typ);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          destroy_bat();
				}
			}

			/** Added for Ver 1.1 **/
			EXEC SQL
          SELECT SEQ_REPLG_DTLS.NEXTVAL
          INTO :l_run_no
          FROM DUAL;

    	 	if(SQLCODE != 0)
    	 	{
        	fn_errlog(c_ServiceName, "S31060", SQLMSG, c_err_msg);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        	destroy_bat();
    	 	}

				i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

				if ( i_trnsctn == -1 )
				{
					fn_errlog( c_ServiceName, "S31065", TPMSG , c_err_msg  );
					fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
					destroy_bat();
				}

				EXEC SQL
					DELETE FROM TPD_PTD_TBL;

    	 	if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    	 	{
        	fn_errlog(c_ServiceName, "S31070", SQLMSG, c_err_msg);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	destroy_bat();
    	 	}

			if (c_plg_rev_typ == 'P' || c_plg_rev_typ == 'X' || c_plg_rev_typ == 'J' || c_plg_rev_typ == 'R') /** Added R for Ver 1.2 **/
			{
				EXEC SQL
					INSERT INTO TPD_PTD_TBL
											(TMP_CLM_MTCH_ACCNT,
											TMP_STCK_CD,
											TMP_TIFP_QTY,
											TMP_PLG_REV_TYP,
											TMP_ISIN_NMBR,
											TMP_DP_ID,
											TMP_DP_CLNT_ID,
											TMP_POD_REF_NO,
											TMP_TIFP_RUN_DT,
											TMP_CHANNEL)				/** Ver 1.2 **/
											SELECT
											POD_CLNT_MTCH_ACCNT,
											POD_STCK_CD,
											POD_ORDR_QTY,
											POD_PLG_REV_TYP,
											POD_ISIN_NO,
											POD_DP_ACCNT,
											POD_DP_CLNT_ACCNT,
											POD_ORDR_NO,
											POD_ORDR_DT,
											POD_CHANNEL					/** Ver 1.2 **/
											FROM POD_PLG_ORDR_DTLS
											WHERE
          						POD_PLG_REV_TYP = :c_plg_typ
          						AND POD_ORDR_STTS = 'R'
          						AND POD_ORDR_QTY - NVL(POD_PRCSD_QTY,0) > 0
											AND 1 = (CASE 
															WHEN :c_plg_typ = 'I' AND :c_plg_rev_typ = 'J' AND POD_CHANNEL = 'SYS' THEN 1
															WHEN :c_plg_typ = 'I' AND :c_plg_rev_typ = 'R' AND POD_CHANNEL <> 'SYS' THEN 1
															WHEN :c_plg_typ <> 'I' THEN 1
															ELSE 0 END);

    	 	if(SQLCODE != 0)
    	 	{
        	fn_errlog(c_ServiceName, "S31075", SQLMSG, c_err_msg);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	destroy_bat();
    	 	}
			}
			else if (c_plg_rev_typ == 'W' || c_plg_rev_typ == 'I' || c_plg_rev_typ == 'S')	/** Added S for Ver 1.2 **/
			{
				EXEC SQL
					INSERT INTO TPD_PTD_TBL
											(TMP_CLM_MTCH_ACCNT,
											TMP_STCK_CD,
											TMP_TIFP_QTY,
											TMP_PLG_REV_TYP,
											TMP_ISIN_NMBR,
											TMP_DP_ID,
											TMP_DP_CLNT_ID,
											TMP_POD_REF_NO,
											TMP_TIFP_RUN_DT,
											TMP_PLG_VS_WD_QTY,
											TMP_DPM_NMBR,
											TMP_TIFP_STTS,
											TMP_IWTL_DP_ACCNT,
											TMP_AGREE_NMBR,
											TMP_CHANNEL)			/** Ver 1.2 **/
						SELECT 
							PTD_CLM_MTCH_ACCNT,
							PTD_STCK_CD,
							PTD_TIFP_QTY,
							PTD_PLG_REV_TYP,
							PTD_ISIN_NMBR,
							PTD_DP_ID,
							PTD_DP_CLNT_ID,
							PTD_POD_REF_NO,
							PTD_TIFP_RUN_DT,
							PTD_PLG_VS_WD_QTY,
							PTD_DPM_NMBR,
							PTD_TIFP_STTS,
							PTD_IWTL_DP_ACCNT,
							PTD_AGREE_NMBR,
							PTD_CHANNEL						/** Ver 1.2 **/
						FROM PTD_TIFP_DTLS 
						WHERE  PTD_PLG_REV_TYP=DECODE(:c_plg_rev_typ,'S','I',:c_plg_rev_typ)	/** Ver 1.2 **/
						AND    PTD_TIFP_STTS = 'N'
						AND    PTD_LEG_NO IS NULL
						AND    1 = (CASE 
									WHEN :c_plg_rev_typ = 'W' AND PTD_SLIPNO_W1 IS NULL THEN 1
									WHEN :c_plg_rev_typ = 'I' AND ptd_slipno_i1 is NULL AND PTD_CHANNEL = 'SYS' THEN 1	/** Channel added for Ver 1.2 */
									WHEN :c_plg_rev_typ = 'S' AND ptd_slipno_i1 is NULL AND PTD_CHANNEL <> 'SYS' THEN 1 /** Channel added for Ver 1.2 */
									END );

    	 	if(SQLCODE != 0)
    	 	{
        	fn_errlog(c_ServiceName, "S31080", SQLMSG, c_err_msg);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	destroy_bat();
    	 	}

			}
			else if (c_plg_rev_typ == 'T')
			{
				EXEC SQL
					INSERT INTO TPD_PTD_TBL
											(TMP_CLM_MTCH_ACCNT,
											TMP_STCK_CD,
											TMP_TIFP_QTY,
											TMP_PLG_REV_TYP,
											TMP_ISIN_NMBR,
											TMP_DP_ID,
											TMP_DP_CLNT_ID,
											TMP_POD_REF_NO,
											TMP_TIFP_RUN_DT,
											TMP_DPM_NMBR,
											TMP_AGREE_NMBR,
											TMP_CHANNEL)				/** Ver 1.2 **/
						SELECT 
							PTD_CLM_MTCH_ACCNT,
							PTD_STCK_CD,
							(PTD_TIFP_QTY - NVL(PTD_PLG_VS_WD_QTY,0)) - NVL(PTD_REPLG1_QTY,0),
							PTD_PLG_REV_TYP,
							PTD_ISIN_NMBR,
							PTD_DP_ID,
							PTD_DP_CLNT_ID,
							PTD_POD_REF_NO,
							PTD_TIFP_RUN_DT,
							PTD_DPM_NMBR,
							PTD_AGREE_NMBR,
							PTD_CHANNEL						/** Ver 1.2 **/
						 FROM POD_PLG_ORDR_DTLS,
									PTD_TIFP_DTLS
						WHERE POD_PLG_REV_TYP = 'P'
						AND   PTD_CLM_MTCH_ACCNT = POD_CLNT_MTCH_ACCNT
						AND   PTD_DP_ID = POD_DP_ACCNT
						AND   PTD_DP_CLNT_ID = POD_DP_CLNT_ACCNT
						AND   PTD_POD_REF_NO = POD_ORDR_NO
						AND 	SUBSTR(PTD_DP_ID,1,1) <> '1'
						AND   PTD_PLG_REV_TYP = POD_PLG_REV_TYP
						AND   PTD_TIFP_STTS = 'P'
						AND   POD_ORDR_STTS = 'C'
						AND   (PTD_TIFP_QTY - NVL(PTD_PLG_VS_WD_QTY,0)) - NVL(PTD_REPLG1_QTY,0) > 0
						AND		EXISTS ( SELECT 1 FROM prc_plg_replg_clnts
														WHERE  PTD_CLM_MTCH_ACCNT = pcr_mtch_Accnt);

    	 	if(SQLCODE != 0)
    	 	{
        	fn_errlog(c_ServiceName, "S31085", SQLMSG, c_err_msg);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	destroy_bat();
    	 	}

			}

			else if (c_plg_rev_typ == 'C')
			{
				EXEC SQL
					INSERT INTO TPD_PTD_TBL
											(TMP_CLM_MTCH_ACCNT,
											TMP_STCK_CD,
											TMP_TIFP_QTY,
											TMP_PLG_REV_TYP,
											TMP_ISIN_NMBR,
											TMP_DP_ID,
											TMP_DP_CLNT_ID,
											TMP_POD_REF_NO,
											TMP_TIFP_RUN_DT,
											TMP_DPM_NMBR,
											TMP_AGREE_NMBR,
											TMP_CHANNEL)					/** Ver 1.2 **/
						SELECT 
							PTD_CLM_MTCH_ACCNT,
							PTD_STCK_CD,
							(PTD_TIFP_QTY - NVL(PTD_REPLG2_QTY,0)),
							PTD_PLG_REV_TYP,
							PTD_ISIN_NMBR,
							PTD_DP_ID,
							PTD_DP_CLNT_ID,
							PTD_POD_REF_NO,
							PTD_TIFP_RUN_DT,
							PTD_DPM_NMBR,
							PTD_AGREE_NMBR,
							PTD_CHANNEL									/** Ver 1.2 **/
						 FROM POD_PLG_ORDR_DTLS,
									PTD_TIFP_DTLS
						WHERE POD_PLG_REV_TYP = 'T'
						AND   PTD_CLM_MTCH_ACCNT = POD_CLNT_MTCH_ACCNT
						AND   PTD_DP_ID = POD_DP_ACCNT
						AND   PTD_DP_CLNT_ID = POD_DP_CLNT_ACCNT
						AND   PTD_POD_REF_NO = POD_ORDR_NO
						AND 	SUBSTR(PTD_DP_ID,1,1) <> '1'
						AND   PTD_PLG_REV_TYP = POD_PLG_REV_TYP
						AND   PTD_TIFP_STTS = 'P'
						AND   POD_ORDR_STTS = 'C'
						AND   (PTD_TIFP_QTY - NVL(PTD_REPLG2_QTY,0)) > 0;

    	 	if(SQLCODE != 0)
    	 	{
        	fn_errlog(c_ServiceName, "S31090", SQLMSG, c_err_msg);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	destroy_bat();
    	 	}

			}

			else if (c_plg_rev_typ == 'U')
			{

				/****** Commented for combined **
				EXEC SQL
					INSERT INTO TPD_PTD_TBL
											(TMP_CLM_MTCH_ACCNT,
											TMP_STCK_CD,
											TMP_TIFP_QTY,
											TMP_PLG_REV_TYP,
											TMP_ISIN_NMBR,
											TMP_DP_ID,
											TMP_DP_CLNT_ID,
											TMP_POD_REF_NO,
											TMP_TIFP_RUN_DT,
											TMP_DPM_NMBR,
											TMP_AGREE_NMBR)
						SELECT 
							PTD_CLM_MTCH_ACCNT,
							PTD_STCK_CD,
							PTD_TIFP_QTY,
							PTD_PLG_REV_TYP,
							PTD_ISIN_NMBR,
							PTD_DP_ID,
							PTD_DP_CLNT_ID,
							PTD_POD_REF_NO,
							PTD_TIFP_RUN_DT,
							PTD_DPM_NMBR2,
							PTD_AGREE_NMBR
						FROM PTD_TIFP_DTLS A
						WHERE  PTD_PLG_REV_TYP in('W','I')
						AND    PTD_TIFP_STTS = 'N'
						AND    PTD_LEG_NO IS NULL
						AND    1 = (CASE 
										WHEN PTD_PLG_REV_TYP = 'W' AND PTD_SLIPNO_W1 IS NULL THEN 1
										WHEN PTD_PLG_REV_TYP = 'I' AND PTD_SLIPNO_I1 IS NULL THEN 1
									END )
						AND	PTD_TIFP_QTY - NVL(PTD_REPLG1_QTY,0) > 0
						AND 	SUBSTR(PTD_DP_ID,1,1) <> '1'
					AND exists(select 1 from ptd_tifp_dtls B where A.PTD_DPM_NMBR2 = B.PTD_DPM_NMBR2
					AND B.PTD_TIFP_QTY - NVL(B.PTD_PLG_VS_WD_QTY,0) > 0
					AND B.ptd_plg_rev_typ = 'T');

				******** Combined end **/

				EXEC SQL
					INSERT INTO TPD_PTD_TBL
											(TMP_CLM_MTCH_ACCNT,
											TMP_STCK_CD,
											TMP_TIFP_QTY,
											TMP_PLG_REV_TYP,
											TMP_ISIN_NMBR,
											TMP_DP_ID,
											TMP_DP_CLNT_ID,
											TMP_POD_REF_NO,
											TMP_TIFP_RUN_DT,
											TMP_DPM_NMBR,
											TMP_AGREE_NMBR,
											TMP_CHANNEL)					/** Ver 1.2 **/
							SELECT 
								PTD_CLM_MTCH_ACCNT,
								PTD_STCK_CD,
								SUM(PTD_TIFP_QTY) PTD_TIFP_QTY,
								' ' TMP_PLG_REV_TYP,
								PTD_ISIN_NMBR,
								PTD_DP_ID,
								PTD_DP_CLNT_ID,
								'NA' PTD_POD_REF_NO,
								'' PTD_TIFP_RUN_DT,
								PTD_DPM_NMBR2,
								PTD_AGREE_NMBR,
								'SYS'
							FROM PTD_TIFP_DTLS A
							WHERE  PTD_PLG_REV_TYP in('W','I')
							AND    PTD_TIFP_STTS = 'N'
							AND    PTD_LEG_NO IS NULL
							AND    1 = (CASE 
											WHEN PTD_PLG_REV_TYP = 'W' AND PTD_SLIPNO_W1 IS NULL THEN 1
											WHEN PTD_PLG_REV_TYP = 'I' AND PTD_SLIPNO_I1 IS NULL THEN 1
										END )
							AND	PTD_TIFP_QTY - NVL(PTD_REPLG1_QTY,0) > 0
							AND 	SUBSTR(PTD_DP_ID,1,1) <> '1'
							AND exists(select 1 from ptd_tifp_dtls B where A.PTD_DPM_NMBR2 = B.PTD_DPM_NMBR2
							AND B.PTD_TIFP_QTY - NVL(B.PTD_PLG_VS_WD_QTY,0) > 0
							AND B.ptd_plg_rev_typ = 'T')
							GROUP BY 
								PTD_CLM_MTCH_ACCNT,
								PTD_STCK_CD,
								PTD_ISIN_NMBR,	
								PTD_DP_ID,
								PTD_DP_CLNT_ID,
								PTD_DPM_NMBR2,
								PTD_AGREE_NMBR;

    	 	if(SQLCODE != 0)
    	 	{
        	fn_errlog(c_ServiceName, "S31095", SQLMSG, c_err_msg);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	destroy_bat();
    	 	}

			}

			else if (c_plg_rev_typ == 'D')
			{

				/*** Comment for combined ***

				EXEC SQL
					INSERT INTO TPD_PTD_TBL
											(TMP_CLM_MTCH_ACCNT,
											TMP_STCK_CD,
											TMP_TIFP_QTY,
											TMP_PLG_REV_TYP,
											TMP_ISIN_NMBR,
											TMP_DP_ID,
											TMP_DP_CLNT_ID,
											TMP_POD_REF_NO,
											TMP_TIFP_RUN_DT,
											TMP_DPM_NMBR,
											TMP_AGREE_NMBR)
						SELECT 
							PTD_CLM_MTCH_ACCNT,
							PTD_STCK_CD,
							PTD_TIFP_QTY,
							PTD_PLG_REV_TYP,
							PTD_ISIN_NMBR,
							PTD_DP_ID,
							PTD_DP_CLNT_ID,
							PTD_POD_REF_NO,
							PTD_TIFP_RUN_DT,
							PTD_DPM_NMBR3,
							PTD_AGREE_NMBR
						FROM PTD_TIFP_DTLS A
						WHERE  PTD_PLG_REV_TYP in('W','I')
						AND    PTD_TIFP_STTS = 'N'
						AND 	SUBSTR(PTD_DP_ID,1,1) <> '1'
						AND    PTD_LEG_NO IS NULL
						AND    1 = (CASE 
										WHEN PTD_PLG_REV_TYP = 'W' AND PTD_SLIPNO_W1 IS NULL THEN 1
										WHEN PTD_PLG_REV_TYP = 'I' AND PTD_SLIPNO_I1 IS NULL THEN 1
									END )
						AND	PTD_TIFP_QTY - NVL(PTD_REPLG2_QTY,0) > 0
					AND exists(select 1 from ptd_tifp_dtls B where A.PTD_DPM_NMBR3 = B.PTD_DPM_NMBR3
					AND B.PTD_TIFP_QTY - NVL(B.PTD_PLG_VS_WD_QTY,0) > 0
					AND B.ptd_plg_rev_typ = 'C');

				*** Comment end **/

				EXEC SQL
					INSERT INTO TPD_PTD_TBL
											(TMP_CLM_MTCH_ACCNT,
											TMP_STCK_CD,
											TMP_TIFP_QTY,
											TMP_PLG_REV_TYP,
											TMP_ISIN_NMBR,
											TMP_DP_ID,
											TMP_DP_CLNT_ID,
											TMP_POD_REF_NO,
											TMP_TIFP_RUN_DT,
											TMP_DPM_NMBR,
											TMP_AGREE_NMBR,
											TMP_CHANNEL)				/** Ver 1.2 **/
						SELECT 
								PTD_CLM_MTCH_ACCNT,
								PTD_STCK_CD,
								SUM(PTD_TIFP_QTY) PTD_TIFP_QTY,
								' ' TMP_PLG_REV_TYP,
								PTD_ISIN_NMBR,
								PTD_DP_ID,
								PTD_DP_CLNT_ID,
								'NA' PTD_POD_REF_NO,
								'' PTD_TIFP_RUN_DT,
								PTD_DPM_NMBR3,
								PTD_AGREE_NMBR,
								'SYS'
							FROM PTD_TIFP_DTLS A
							WHERE  PTD_PLG_REV_TYP in('W','I')
							AND    PTD_TIFP_STTS = 'N'
							AND    PTD_LEG_NO IS NULL
							AND    1 = (CASE 
											WHEN PTD_PLG_REV_TYP = 'W' AND PTD_SLIPNO_W1 IS NULL THEN 1
											WHEN PTD_PLG_REV_TYP = 'I' AND PTD_SLIPNO_I1 IS NULL THEN 1
										END )
							AND	PTD_TIFP_QTY - NVL(PTD_REPLG2_QTY,0) > 0
							AND SUBSTR(PTD_DP_ID,1,1) <> '1'
							AND exists(select 1 from ptd_tifp_dtls B where A.PTD_DPM_NMBR2 = B.PTD_DPM_NMBR2
							AND B.PTD_TIFP_QTY - NVL(B.PTD_PLG_VS_WD_QTY,0) > 0
							AND B.ptd_plg_rev_typ = 'C')
							GROUP BY 
								PTD_CLM_MTCH_ACCNT,
								PTD_STCK_CD,
								PTD_ISIN_NMBR,	
								PTD_DP_ID,
								PTD_DP_CLNT_ID,
								PTD_DPM_NMBR3,
								PTD_AGREE_NMBR;


    	 	if(SQLCODE != 0)
    	 	{
        	fn_errlog(c_ServiceName, "S31100", SQLMSG, c_err_msg);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	destroy_bat();
    	 	}

			}

				if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
				{
					fn_errlog( c_ServiceName, "S31105",TPMSG ,c_err_msg);
					fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					destroy_bat();
				}

				EXEC SQL
					SELECT COUNT(1) 
					INTO :l_plg_cnt
					FROM TPD_PTD_TBL;

    	 	if(SQLCODE != 0)
    	 	{
        	fn_errlog(c_ServiceName, "S31110", SQLMSG, c_err_msg);
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        	destroy_bat();
    	 	}

				if(l_plg_cnt == 0)
				{
					fn_userlog(c_ServiceName,"No records to Pledge");
					strcpy(c_err_msg,"No records to Pledge");
        	fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        	destroy_bat();
				}

				sprintf(c_err_msg,"Records to Process :%d:",l_plg_cnt);
        fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);

				for(i=1;i<=l_plg_cnt;i++)
				{

       		Finit32(ptr_fml_Ibuf1, (FLDLEN32) Fsizeof32(ptr_fml_Ibuf1));
        	Finit32(ptr_fml_Obuf1, (FLDLEN32) Fsizeof32(ptr_fml_Obuf1));

					i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

					if ( i_trnsctn == -1 )
					{
						fn_errlog( c_ServiceName, "S31115", TPMSG , c_err_msg  );
						fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
						destroy_bat();
					}

					MEMSET(sql_tmp_stck_cd);
					MEMSET(sql_tmp_plg_rev_typ);
					MEMSET(sql_tmp_isin_nmbr);
					MEMSET(sql_tmp_dp_id);
					MEMSET(sql_tmp_dp_clnt_id);
					MEMSET(sql_tmp_pod_ref_no);
					/** MEMSET(sql_tmp_tifp_run_dt);	** Commented for Ver 1.1 **/
					MEMSET(sql_tmp_clm_mtch_accnt);
					sql_tmp_tifp_qty = 0;
					sql_tmp_dpm_nmbr = 0.0;			/** Ver 1.1 **/
					MEMSET(sql_tmp_agree_nmbr);		/** Ver 1.1 **/
					MEMSET(v_channel);						/** Ver 1.2 **/

					EXEC SQL
						SELECT 	TMP_CLM_MTCH_ACCNT,
										TMP_STCK_CD,
										TMP_TIFP_QTY,
										TMP_PLG_REV_TYP,
										TMP_ISIN_NMBR,
										TMP_DP_ID,
										TMP_DP_CLNT_ID,
										TMP_POD_REF_NO,
										/** TMP_TIFP_RUN_DT, ** Commented for Ver 1.1 **/
										NVL(TMP_DPM_NMBR,0),
										NVL(TMP_AGREE_NMBR,' '),
										NVL(TMP_CHANNEL,' ')			/** Ver 1.2 **/
						INTO
										:sql_tmp_clm_mtch_accnt,
										:sql_tmp_stck_cd,
										:sql_tmp_tifp_qty,
										:sql_tmp_plg_rev_typ,
										:sql_tmp_isin_nmbr,
										:sql_tmp_dp_id,
										:sql_tmp_dp_clnt_id,
										:sql_tmp_pod_ref_no,
										/** :sql_tmp_tifp_run_dt, ** Commetned for Vere 1.1 **/
										:sql_tmp_dpm_nmbr,
										:sql_tmp_agree_nmbr,
										:v_channel							/** Ver 1.2 **/
						FROM		TPD_PTD_TBL
						WHERE		ROWNUM < 2;

    	 		if(SQLCODE != 0)
    	 		{
        		fn_errlog(c_ServiceName, "S31120", SQLMSG, c_err_msg);
        		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        		destroy_bat();
					}

					/** Added for Ver 1.1 **/
					SETLEN(sql_tmp_pod_ref_no);
					/** SETLEN(sql_tmp_tifp_run_dt); ** Commented for Ver 1.1 **/
					SETLEN(sql_tmp_agree_nmbr);
					SETNULL(sql_tmp_pod_ref_no);
					/** SETNULL(sql_tmp_tifp_run_dt); ** Commented for Ver 1.1 **/
					SETNULL(sql_tmp_agree_nmbr);
					/** End for Ver 1.1 **/

					SETLEN(v_channel);		/** Ver 1.2 **/
					SETNULL(v_channel);		/** Ver 1.2 **/


					EXEC SQL
						DELETE FROM TPD_PTD_TBL
						WHERE ROWNUM < 2;

    	 		if(SQLCODE != 0)
    	 		{
        		fn_errlog(c_ServiceName, "S31125", SQLMSG, c_err_msg);
        		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        		destroy_bat();
					}
	
					if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
					{
						fn_errlog( c_ServiceName, "S31130",TPMSG ,c_err_msg);
						fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						destroy_bat();
					}

					fn_userlog(c_ServiceName,"Processing Record No :%d:",i);
					fn_userlog(c_ServiceName,"Value of sql_tmp_clm_mtch_accnt :%s:",sql_tmp_clm_mtch_accnt);
					fn_userlog(c_ServiceName,"Value of sql_tmp_dp_id :%s:",sql_tmp_dp_id);
					fn_userlog(c_ServiceName,"Value of sql_tmp_dp_clnt_id :%s:",sql_tmp_dp_clnt_id);
					fn_userlog(c_ServiceName,"Value of sql_tmp_stck_cd :%s:",sql_tmp_stck_cd);
					fn_userlog(c_ServiceName,"Value of sql_tmp_pod_ref_no :%s:",sql_tmp_pod_ref_no.arr);
					fn_userlog(c_ServiceName,"Value of sql_execn_dt :%s:",sql_execn_dt.arr);
					fn_userlog(c_ServiceName,"Value of c_operation_typ :%c:",c_operation_typ);
					fn_userlog(c_ServiceName,"Value of sql_tmp_plg_rev_typ :%c:",sql_tmp_plg_rev_typ);
					fn_userlog(c_ServiceName,"Value of sql_tmp_isin_nmbr :%s:",sql_tmp_isin_nmbr);
					fn_userlog(c_ServiceName,"Value of c_plg_rev_typ :%c:",c_plg_rev_typ);			/** Ver 1.1 **/
					fn_userlog(c_ServiceName,"Value of sql_tmp_dpm_nmbr :%lf:",sql_tmp_dpm_nmbr);		/** Ver 1.1 **/
					fn_userlog(c_ServiceName,"Value of sql_tmp_agree_nmbr :%s:",sql_tmp_agree_nmbr.arr);		/** Ver 1.1 **/
					fn_userlog(c_ServiceName,"Value of v_channel :%s:",v_channel.arr);		/** Ver 1.2 **/

    			i_err [0] = Fadd32(ptr_fml_Ibuf1,FFO_EBA_MTCH_ACT_NO, (char *)sql_tmp_clm_mtch_accnt,0);
    			i_err [1] = Fadd32(ptr_fml_Ibuf1,FFO_DPID, (char *)sql_tmp_dp_id ,0);
    			i_err [2] = Fadd32(ptr_fml_Ibuf1,FFO_DP_CLNT_ID, (char *)sql_tmp_dp_clnt_id ,0);
    			i_err [3] = Fadd32(ptr_fml_Ibuf1,FFO_STCK_CD, sql_tmp_stck_cd ,0);
    			i_err [4] = Fadd32(ptr_fml_Ibuf1,FFO_TIFP_QTY, (char *)&sql_tmp_tifp_qty,0);
    			i_err [5] = Fadd32(ptr_fml_Ibuf1,FFO_SPRD_ORD_REF, sql_tmp_pod_ref_no.arr,0);
    			i_err [6] = Fadd32(ptr_fml_Ibuf1,FFO_OPERATION_TYP, (char *)&c_operation_typ,0);
    			i_err [7] = Fadd32(ptr_fml_Ibuf1,FFO_PLG_TYP, (char *)&c_plg_typ,0);		/*** Ver 1.1 **/
    			i_err [8] = Fadd32(ptr_fml_Ibuf1,FFO_EXECN_DT, sql_execn_dt.arr,0);
    			i_err [9] = Fadd32(ptr_fml_Ibuf1,FFO_ISIN_NMBR, sql_tmp_isin_nmbr,0);
					i_err [10] = Fadd32(ptr_fml_Ibuf1,FFO_PLG_REV_TYP, (char *)&c_plg_rev_typ,0);		/** Ver 1.1 **/
					i_err [11] = Fadd32(ptr_fml_Ibuf1,FFO_SOMC_PRCNT, (char *)&sql_tmp_dpm_nmbr,0);		/** Ver 1.1 **/
					i_err [12] = Fadd32(ptr_fml_Ibuf1,FFO_REF_NO, (char *)sql_tmp_agree_nmbr.arr,0);	/** Ver 1.1 **/
					i_err [13] = Fadd32(ptr_fml_Ibuf1,FFO_RUN_NUM, (char *)&l_run_no,0);	/** Ver 1.1 **/
					i_err [14] = Fadd32(ptr_fml_Ibuf1,FFO_CHANNEL, (char *)v_channel.arr,0);	/** Ver 1.2 **/

    			for ( j=0; j < 15; j++ ) /***Ver 3.5 replace 1 with 0***/	/** Changed from 10 to 14 for Ver 1.1 **//** 15 for Ver 1.2 **/
    			{
      			if ( i_err[ j ] == -1 )
      			{
							fn_errlog( c_ServiceName, "S31135",TPMSG ,c_err_msg);
							fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
							destroy_bat();
      			}
    			}

					/* Fprint32(ptr_fml_Ibuf1); 
					fn_userlog(c_ServiceName,"After fprint");*/

   				i_returncode = tpcall( "SFO_MRGN_PLG",
                      					(char*)ptr_fml_Ibuf1,
                      					0,
                      					(char**)&ptr_fml_Obuf1,
                      					&l_ip_len,0);

      		if( i_returncode == -1)
      		{
        		if ( tperrno != TPESVCFAIL )
        		{
            	fn_errlog ( c_ServiceName, "S31140", TPMSG,c_err_msg);
							fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
							destroy_bat();
        		}
      		}

				}

				/*** Added for Ver 1.1 **/
				if (c_plg_rev_typ == 'D')
				{
					EXEC SQL
						SELECT COUNT(1) 
						INTO :i_cc_cm_cnt
						FROM RRD_REPLG_RELESE_DTLS
						WHERE RRD_OPERATION_TYP = 'R'
						AND NVL(RRD_STTS_FLG,'N') = 'N';

    	 		if(SQLCODE != 0)
    	 		{
        		fn_errlog(c_ServiceName, "S31145", SQLMSG, c_err_msg);
        		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        		destroy_bat();
					}

					if (i_cc_cm_cnt <= 0)
					{
						fn_userlog(c_ServiceName,"No Record for File Generation or All records pushed");	
						strcpy(c_err_msg,"No Record for File Generation or All records pushed");
						fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
						destroy_bat();
					}

					EXEC SQL
						SELECT to_char(sysdate,'YYYYMMDD')
						INTO :c_filedate
						FROM DUAL;

    	 		if(SQLCODE != 0)
    	 		{
        		fn_errlog(c_ServiceName, "S31150", SQLMSG, c_err_msg);
        		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        		destroy_bat();
					}

					EXEC SQL
						SELECT to_char(sysdate,'DDMMYYYY')
						INTO :c_filedate_name
						FROM DUAL;

    	 		if(SQLCODE != 0)
    	 		{
        		fn_errlog(c_ServiceName, "S31155", SQLMSG, c_err_msg);
        		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        		destroy_bat();
					}

					MEMSET(c_filename);
					MEMSET(c_file_path);
					strcpy(c_fileseq,"01");
					/** sprintf(c_filename,"C_RRT_07730_%s_%s.csv",c_filedate_name,c_fileseq); **/
					sprintf(c_filename,"C_RRT_%s_%s.csv",c_filedate_name,c_fileseq);
				  sprintf(c_file_path,"%s/%s/fno/%s",tuxgetenv("EBALOG_PATH"),c_filedate,c_filename);
					fn_userlog(c_ServiceName,"EQ File is :%s: ",c_file_path);


					MEMSET(c_filename_fo);
					MEMSET(c_file_path_fo);
					strcpy(c_fileseq_fo,"01");
					sprintf(c_filename_fo,"F_RRT_%s_%s.csv",c_filedate_name,c_fileseq_fo);
				  sprintf(c_file_path_fo,"%s/%s/fno/%s",tuxgetenv("EBALOG_PATH"),c_filedate,c_filename_fo);
					fn_userlog(c_ServiceName,"FO File is :%s: ",c_file_path_fo);

					fp = (FILE *)fopen(c_file_path,"w") ;
					if(fp == NULL)
					{
						fn_userlog(c_ServiceName,"UNABLE TO OPEN FILE %s",c_file_path);
					}


					fp_fo = (FILE *)fopen(c_file_path_fo,"w") ;
					if(fp_fo == NULL)
					{
						fn_userlog(c_ServiceName,"UNABLE TO OPEN FILE %s",c_file_path_fo);
					}

					for (i=0; i<i_cc_cm_cnt; i++ )
					{

						MEMSET(v_file_data);
						MEMSET(c_row_id);
						MEMSET(c_seg_code);

						EXEC SQL
							SELECT ROWID,
							TO_CHAR(TRIM(RRD_SEG_ID) || ',' ||
							TRIM(RRD_CM_CD) || ',' ||
							TRIM(RRD_COLL_TYP) || ',' ||
							TRIM(RRD_INS_TYP) || ',' ||
							TRIM(RRD_INS_ID) || ',' ||
							TRIM(RRD_DP_CD) || ',' ||
							TRIM(RRD_STCK_CD) || ',' ||
							RRD_QNTY || ',' ||
							RRD_AMNT || ',' ||
							RRD_ISIN_NO || ',' ||
							TRIM(RRD_TM_CODE) || ',' ||
							TRIM(RRD_CLNT_CD) || ',' ||
							TRIM(RRD_BANK_CD) || ',' ||
							RRD_DPM3_NO || ',' ||
							RRD_DP_ID || ',' ||
							RRD_FUNG_FLG), TRIM(RRD_SEG_ID)
							INTO :c_row_id, :v_file_data, :c_seg_code
							FROM RRD_REPLG_RELESE_DTLS
							WHERE RRD_OPERATION_TYP = 'R'
							AND NVL(RRD_STTS_FLG,'N') = 'N'
							AND ROWNUM < 2;

						if(SQLCODE != 0)
						{
							fn_errlog(c_ServiceName, "S31160", SQLMSG, c_err_msg);
							fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							destroy_bat();
						}

						fn_userlog(c_ServiceName,"Value of v_file_data :%s:",v_file_data.arr);

						SETLEN(v_file_data);
						SETNULL(v_file_data);


						if (c_seg_code == 'C')
						{
							fprintf(fp,"%s\n",v_file_data.arr);
						}
						else if (c_seg_code == 'F')
						{
							fprintf(fp_fo,"%s\n",v_file_data.arr);
						}

						EXEC SQL
							UPDATE RRD_REPLG_RELESE_DTLS
							SET RRD_STTS_FLG = 'Y',
									RRD_FILE_NAME = TRIM(:c_filename)
							WHERE ROWID = :c_row_id;

						if(SQLCODE != 0)
						{
							fn_errlog(c_ServiceName, "S31165", SQLMSG, c_err_msg);
							fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							destroy_bat();
						}

					}

					fclose(fp);
					fclose(fp_fo);

					strcpy(c_path, tuxgetenv("HOME"));
					strcat(c_path, "/sh_scripts");

					fn_userlog(c_ServiceName,"Sending Mail ......");
					MEMSET(c_command);
					sprintf(c_command,"ksh %s/Repledge_CC_CM_Closure.sh", c_path);
					system(c_command);
	
				}


			/** }
			if(c_plg_rev_typ == 'W')
			{
			}
			if(c_plg_rev_typ == 'I')
			{
			} ***/

			break;

			case 'C':

			fn_userlog(c_ServiceName,"Inside the flow of COnfirmation");
			fn_userlog(c_ServiceName,"Pledge Type for Confirmation :%c:",c_plg_typ);

			if(c_plg_typ == 'P')
			{

				EXEC SQL
					SELECT COUNT(1)
					INTO :i_ptd_cnt
					FROM PTD_TIFP_DTLS
        	WHERE PTD_PLG_REV_TYP='P'
        	AND PTD_TIFP_STTS = 'P'
        	AND PTD_LEG_NO = 'L1';

    	 		if(SQLCODE != 0)
    	 		{
        		fn_errlog(c_ServiceName, "S31170", SQLMSG, c_err_msg);
        		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        		destroy_bat();
					}
			}

			if(c_plg_typ == 'W')
			{

				EXEC SQL
					SELECT COUNT(1)
					INTO :i_ptd_cnt
					FROM PTD_TIFP_DTLS
        	WHERE PTD_PLG_REV_TYP='W'
        	AND PTD_TIFP_STTS = 'P'
        	AND PTD_LEG_NO = 'W1';

    	 		if(SQLCODE != 0)
    	 		{
        		fn_errlog(c_ServiceName, "S31175", SQLMSG, c_err_msg);
        		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        		destroy_bat();
					}
			}

			if(c_plg_typ == 'I')
			{

				EXEC SQL
					SELECT COUNT(1)
					INTO :i_ptd_cnt
					FROM PTD_TIFP_DTLS
        	WHERE PTD_PLG_REV_TYP='I'
        	AND PTD_TIFP_STTS = 'P'
        	AND PTD_LEG_NO = 'I1';

    	 		if(SQLCODE != 0)
    	 		{
        		fn_errlog(c_ServiceName, "S31180", SQLMSG, c_err_msg);
        		fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        		destroy_bat();
					}
			}

			/** Added for Ver 1.1 **/
     	if(c_plg_typ == 'T')
      {

        EXEC SQL
          SELECT COUNT(1)
          INTO :i_ptd_cnt
          FROM PTD_TIFP_DTLS
          WHERE PTD_PLG_REV_TYP='T'
          AND PTD_TIFP_STTS = 'P'
          AND PTD_LEG_NO = 'T1';

          if(SQLCODE != 0)
          {
            fn_errlog(c_ServiceName, "S31185", SQLMSG, c_err_msg);
            fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
            destroy_bat();
          }
      }

     	if(c_plg_typ == 'C')
      {

        EXEC SQL
          SELECT COUNT(1)
          INTO :i_ptd_cnt
          FROM PTD_TIFP_DTLS
          WHERE PTD_PLG_REV_TYP='C'
          AND PTD_TIFP_STTS = 'P'
          AND PTD_LEG_NO = 'C1';

          if(SQLCODE != 0)
          {
            fn_errlog(c_ServiceName, "S31190", SQLMSG, c_err_msg);
            fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
            destroy_bat();
          }
      }
			
     	if(c_plg_typ == 'U')
      {

        EXEC SQL
          SELECT COUNT(1)
          INTO :i_ptd_cnt
          FROM PTD_TIFP_DTLS
          WHERE PTD_PLG_REV_TYP='U'
          AND PTD_TIFP_STTS = 'P'
          AND PTD_LEG_NO = 'U1';

          if(SQLCODE != 0)
          {
            fn_errlog(c_ServiceName, "S31195", SQLMSG, c_err_msg);
            fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
            destroy_bat();
          }
      }

     	if(c_plg_typ == 'D')
      {

        EXEC SQL
          SELECT COUNT(1)
          INTO :i_ptd_cnt
          FROM PTD_TIFP_DTLS
          WHERE PTD_PLG_REV_TYP='D'
          AND PTD_TIFP_STTS = 'P'
          AND PTD_LEG_NO = 'D1';

          if(SQLCODE != 0)
          {
            fn_errlog(c_ServiceName, "S31200", SQLMSG, c_err_msg);
            fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
            destroy_bat();
          }
      }

			/** End for Ver 1.1 **/

			if(i_ptd_cnt == 0)
			{
					fn_userlog(c_ServiceName,"No records for confirmation for type :%c:",c_plg_typ);
					sprintf(c_err_msg,"No records for confirmation for type :%c:",c_plg_typ);
          fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
					destroy_bat();
			}

			sprintf(c_err_msg,":%d: records for confirmation for type :%c: ",i_ptd_cnt,c_plg_typ);
      fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);

			fn_userlog(c_ServiceName,"Calling SFO_MRGN_PLG");

   		i_err [0] = Fadd32(ptr_fml_Ibuf1,FFO_OPERATION_TYP, (char *)&c_operation_typ,0);
   		i_err [1] = Fadd32(ptr_fml_Ibuf1,FFO_PLG_TYP, (char *)&c_plg_typ,0);

      for ( j=0; j < 2; j++ ) /***Ver 3.5 replace 1 with 0***/
      {
         if ( i_err[ j ] == -1 )
         {
            fn_errlog( c_ServiceName, "S31205",TPMSG ,c_err_msg);
            fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
            destroy_bat();
         }
       }

       i_returncode = tpcall( "SFO_MRGN_PLG",
                              (char*)ptr_fml_Ibuf1,
                              0,
                              (char**)&ptr_fml_Obuf1,
                              &l_ip_len,0);

       if( i_returncode == -1)
       {
          if ( tperrno != TPESVCFAIL )
          {
              fn_errlog ( c_ServiceName, "S31210", TPMSG,c_err_msg);
              fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
              destroy_bat();
          }
        }

			break;

			default:
			break;
		}

		fn_userlog(c_ServiceName," ALL DONE ");
		fn_bat_pst_msg(c_ServiceName," ALL DONE ",c_tag);

		destroy_bat();
}
