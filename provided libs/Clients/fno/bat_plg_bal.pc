/******************************************************************************/
/*  Program           : BAT_PLG_BAL                                           */
/*																																						*/
/*  Input            :  FFO_STCK_CD                                           */
/*                      FFO_EXPRY_DT                                          */
/*                                                                            */
/*  Output            :  Integer 1 on sucess and 0 on fail                    */
/*                                                                            */
/*  Description       :  This batch process internally call SFO_PLG_BAL       */
/*                                                                            */
/*                                                                            */
/*  Log               : 1.0   26-May-2006   Infotech|Vidyayini Krish          */
/*										:	1.1		28-Sep-2007		Ranjit														*/
/*                                                                            */
/******************************************************************************/
/*   1.0  -  New release                                                      */
/*	 1.1	-	 IBM migration																										*/
/******************************************************************************/
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <fn_collateral.h>
#include <fn_read_debug_lvl.h>	/* ver 1.1 */
/*#define   MAX 3 */  /* Commented in  ver 1.1 */
#define   MAX 5       /* ver 1.1  **/
/*#define MEMSET(A) memset((void *)&A,'\0',sizeof(A))		** Commented in ver 1.1 */

int main ( int argc, char *argv[] )
{

	int i_trnsctn;
  long int li_tot_rcrds;
  int i_ch_val;
  long int li_cnt;
  char c_msg[256];
	char  c_tag[32];
  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];
  char c_xchng_cd [ 4 ];
	char c_stck_cd [ 7 ];
  char c_clm_mtch_accnt [ 11 ];
  char c_dp_id[9];
  char c_dp_clnt_id[9];
  char c_record_dt [ 12 ];
	int  i_err[MAX];
  int  i_returncode;
  int  i_cnt;
  int  count=0;
  int i_ferr[12];
	int flag;

	long int  li_Obuf_len;


	FBFR32 *ptr_fml_Ibuffer = (FBFR32 *)NULL;         /* Pointer to FML Input buffer */
  FBFR32 *ptr_fml_Obuffer = (FBFR32 *)NULL;         /* Pointer to FML Output Buffer */

	strcpy ( c_ServiceName, (char *)argv[0] );

	INITBATDBGLVL(argv[0]);		/* ver 1.1 */

  sprintf ( c_msg, "Batch process %s started", argv[0] );

  strcpy ( c_msg, "Creating data. Please wait ... " );

  if( argc != 6 )
  {
    fn_userlog ( c_ServiceName, "Invalid Number of Arguments" );
    exit(0);
  }

	strcpy( c_stck_cd, (char *)argv[4] );
	strcpy( c_record_dt, (char *)argv[5] );

	fn_userlog( c_ServiceName,"Exchange Code is :%s:",argv[1] );
	fn_userlog( c_ServiceName,"Config File is :%s:",argv[2] );
	fn_userlog( c_ServiceName,"Pipe Id is :%s:",argv[3] );
	fn_userlog( c_ServiceName,"Stock Code is :%s:",c_stck_cd );
	fn_userlog( c_ServiceName,"Record Date is :%s:",c_record_dt );

	sprintf(c_tag,"%s_%s",c_ServiceName,argv[2]);

	fn_userlog( c_ServiceName,"Pipe Id is :%s:",argv[3] );

	init_bat(c_ServiceName,argv[1],argv[3]);

	/**** 
		#ifdef DEBUG
        fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
    #endif  
	****/

  EXEC SQL
       DECLARE cur_plg_bal CURSOR FOR 
       SELECT  DISTINCT ptd_clm_mtch_accnt,
											  ptd_dp_id,ptd_dp_clnt_id 
       FROM    ptd_tifp_dtls 
			 WHERE   ptd_stck_cd = :c_stck_cd;

	EXEC SQL 
       OPEN cur_plg_bal;

	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
      {
        EXEC SQL CLOSE cur_plg_bal;
        fn_errlog(c_ServiceName, "S31005", SQLMSG, c_err_msg);
        fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        destroy_bat();
      } 	

  if ( SQLCODE == NO_DATA_FOUND)
 	{
	      EXEC SQL CLOSE cur_plg_bal;
        fn_errlog(c_ServiceName, "S31010", SQLMSG, c_err_msg);
        strcpy(c_msg,"No Data Found in PTD ");
        fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
        fn_userlog(c_ServiceName,c_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				destroy_bat();
 	}

	flag=0;

	while(1)
  {
       	if(DEBUG_MSG_LVL_3)
				{ 
       	 fn_userlog( c_ServiceName, " Fetching Match Account Numbers,DP Ids and DP client Ids  ");
        }

        NULLCHAR(c_clm_mtch_accnt);
				NULLCHAR(c_dp_id);
				NULLCHAR(c_dp_clnt_id);

        EXEC  SQL 
              FETCH cur_plg_bal
              INTO  :c_clm_mtch_accnt,
							      :c_dp_id,
							      :c_dp_clnt_id;

        if ( SQLCODE != 0 )
        {
              if ( SQLCODE == NO_DATA_FOUND )
              {
                  EXEC SQL CLOSE cur_plg_bal;
                  break;
              }
              else
              {
                  EXEC SQL CLOSE cur_plg_bal;
                  fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg  );
                  fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
                  fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
                  fn_userlog( c_ServiceName, "Skipping Record ..... ");
                  flag = 1;       /* for exiting from outer loop */
                  break;
              }
        }

				i_cnt++;

        fn_userlog( c_ServiceName, "MATCH ACCOUNT IS :%s:",c_clm_mtch_accnt);
		  	fn_userlog( c_ServiceName, "DP_ID IS :%s:",c_dp_id);
		  	fn_userlog( c_ServiceName, "DP_CLNT_ID IS :%s:",c_dp_clnt_id);



		  	/**   Allocate memory to input and output buffers  **/


				ptr_fml_Ibuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN * 2);

   			if (ptr_fml_Ibuffer == NULL)
   			{
   					fn_errlog(c_ServiceName, "S31020", TPMSG, c_err_msg);
   					fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
   					destroy_bat();
   			}


				ptr_fml_Obuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

   			if (ptr_fml_Obuffer == NULL)
   			{
   					fn_errlog(c_ServiceName, "S31025", TPMSG, c_err_msg);
   					fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
   					tpfree((char *)ptr_fml_Ibuffer);
   					destroy_bat();
   			}
				
				Finit32(ptr_fml_Ibuffer, (FLDLEN32) Fsizeof32(ptr_fml_Ibuffer));
  			Finit32(ptr_fml_Obuffer, (FLDLEN32) Fsizeof32(ptr_fml_Obuffer));
			

  			/**   Add input to FML   **/

	  		fn_userlog( c_ServiceName, "Stock Code :%s:",c_stck_cd      );
    		fn_userlog( c_ServiceName, "Record Date :%s:",c_record_dt      );


  			/**     MEMSET(c_stck_cd);
  							MEMSET(c_record_dt);
  							MEMSET(c_clm_mtch_accnt);  
				**/

  			i_err[0]= Fadd32(ptr_fml_Ibuffer, FFO_STCK_CD,(char *)c_stck_cd, 0);
  			i_ferr [0] = Ferror32;

  			i_err[1]= Fadd32(ptr_fml_Ibuffer, FFO_EXPRY_DT,(char *)c_record_dt, 0);
  			i_ferr [1] = Ferror32;

 			 	i_err[2]= Fadd32(ptr_fml_Ibuffer, FFO_EBA_MTCH_ACT_NO,(char *)c_clm_mtch_accnt, 0);
  			i_ferr [2] = Ferror32;

				i_err[3]= Fadd32(ptr_fml_Ibuffer, FFO_DPID,(char *)c_dp_id, 0);
				i_ferr [3] = Ferror32;

				i_err[4]= Fadd32(ptr_fml_Ibuffer, FFO_CLNT_DPID,(char *)c_dp_clnt_id, 0);
				i_ferr [4] = Ferror32;

				for ( i_cnt=0; i_cnt < MAX; i_cnt++ )
    		{
       			if ( i_err[ i_cnt ] == -1 )
       			{
         				sprintf(c_msg, "ERROR : At FML no :%d:",i_cnt);
         				fn_errlog( c_ServiceName,"S31030",Fstrerror32(i_err[i_cnt]),c_err_msg );
								fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
								fn_userlog(c_ServiceName,c_msg);
								fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
								tpfree((char *)ptr_fml_Ibuffer);
								tpfree((char*)ptr_fml_Obuffer);
								destroy_bat();
          	}
   			}

	  		/**  Call Service SFO_PLG_BAL  **/


  			i_returncode = tpcall("SFO_PLG_BAL", (char*)ptr_fml_Ibuffer, 0,
                             (char **)&ptr_fml_Obuffer, &li_Obuf_len, 0);

   			if ( i_returncode == -1 )
    		{
    				if ( tperrno  == TPESVCFAIL )
   					{
       					memset(c_err_msg,0,sizeof(c_err_msg));

       					if( Fget32( ptr_fml_Obuffer, FFO_ERR_MSG, 0,c_err_msg, 0 ) == -1 )
       					{
             				fn_errlog(c_ServiceName,"S31035",Fstrerror32(Ferror32),c_msg);
       					}

       					fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
       					fn_userlog(c_ServiceName,c_err_msg);
       					sprintf(c_msg,"ERROR : Service Fail ");
       					fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
   					}
        		else
          	{
         				fn_errlog ( c_ServiceName, "S31040", TPMSG,c_err_msg);
         				fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
        		}

        		tpfree ( ( char * ) ptr_fml_Ibuffer );
        		tpfree ( ( char * ) ptr_fml_Obuffer );
        		destroy_bat();
 				}

	}/**  END OF WHILE LOOP **/

	fn_userlog(c_ServiceName,"ALL Done ");
  fn_bat_pst_msg(c_ServiceName,"ALL Done ",c_tag);

	tpfree ( ( char * ) ptr_fml_Ibuffer );
  tpfree ( ( char * ) ptr_fml_Obuffer );
  destroy_bat();
}
