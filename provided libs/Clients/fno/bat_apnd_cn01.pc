/*  Program           : BAT_APND_CN01                                         */
/*                                                                            */
/*  Input             : contract.txt file                                     */
/*                      CN01.csv file                                         */
/*                                                                            */
/*  Output            : CN01.csv file                                         */
/*                                                                            */
/*  Description       : Comparing contract.txt and CN01.csv and appending     */
/*                      CN01 file with newly listed scrips present in         */
/*                      contract.txt                                          */
/*  Log               :                                                       */
/*                                                                            */
/******************************************************************************/
/*  04-Jun-2009     Ver 1.0        Shamili Dalvi & Krishna   Release 1.0      */
/******************************************************************************/
#include <stdio.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <Usysflds.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <errno.h>
#include <eba_to_ors.h>
#include <fn_ddr.h>
#include <fn_read_debug_lvl.h>

void fn_nsetoors_tm ( char *c_tm_stmp,
                      long int li_src );

void bat_tm_init(void);
void del_temp(void);
long int li_utc_offset;
long int li_ten_yrs;

void BAT_APND_CN01( int argc, char *argv[] )
{
	char c_ServiceName[33];
	char c_msg[256];
	char c_err_msg[256];
	char c_xchng_cd[4];

	int	i_trnsctn;
	int i_len;
  int i;
	int j;	
	

	/* File handling variables */
	 FILE *ptr_cn01_file;
	 FILE *ptr_cn02_file;
	 FILE *ptr_cntrct_file;
	 char c_file_name[256];
	 char c_cn01_fname[256];
	 char	c_folder_date[8+1];
	 char	c_folder_dt[8+1];
	 char c_data[1024+1];
	 char c_o_data[1024+1];
	 char *ptr_c_tmp;

	/** File Contract variables **/

 	char c_instrument_name[6+1];
	char c_option_typ[2+1];
 	char c_symbol[10];
 	char c_series[3];
  char c_ex_style;
	char c_delete_flg;
 	long int li_exp_dt;
 	long int li_base_prc=0;
 	long int li_iss_strt_dt;
 	long int li_iss_maturity_dt;
 	long int li_local_upd_tm;
 	long int li_exer_strt_dt;
 	long int li_exer_end_dt;
	long int li_tot_rcrds;
	long int li_cnt;

	/* Variables for table */

	EXEC SQL BEGIN DECLARE SECTION;
  	char c_trade_date[12];
  	char c_cntrct_inst[7];
  	char c_undrlying[21];
  	char c_expry_date[12];
		char c_min_expry_date[12];
		char c_iss_strt_date[12];
  	char c_iss_mat_date[12];
  	char c_exrc_strt_date[12];
  	char c_exrc_end_date[12];
  	char c_exrc_style;
  	char c_mrkt_type;
		char c_tmp_date2[23];
  	long l_ca_lvl=0;
  	long l_lot;
  	long li_tm_diff;
		long int li_undrlyng_prc=0;
  	double d_strike_price = 0.0;
		double d_undrlyng_prc;
  	double d_opn_prc;
  	double d_high_prc;
  	double d_low_prc;
  	double d_cls_prc;
  	double d_sttlmt_prc;
  EXEC SQL END DECLARE SECTION;

	 INITBATDBGLVL(argv[0]);
	 
	 strcpy(c_ServiceName, argv[0]);
	 strcpy(c_xchng_cd, argv[2]);

	 msg_cntrct_info st_cntrct_info;
	 MEMSET(c_msg);

	 if (argc != 5)
  	{
    printf("Usage - %s <Configuration File> <Exchange code> <pipe_id> <Folder Date(yyyymmdd)> \n", argv[0]);
		sprintf(c_msg,"Usage - %s <Configuration File> <Exchange code> <pipe_id> <Folder Date(yyyymmdd)>", argv[0]);
		fn_bat_pst_msg( c_ServiceName, c_msg, c_tag );
    return;
    }

	 ptr_c_tmp = (char*)getenv("EBALOG_PATH");
	 if (ptr_c_tmp == NULL)
	 {
			fn_userlog(c_ServiceName,"111");	
			fn_errlog(c_ServiceName, "S31005", UNXMSG, c_err_msg);
			strcpy( c_msg, "System error. Contact system support" );
			fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			return;
	 }


	/* Reading file cn01 */

		strcpy(c_folder_dt,argv[4]); 

		EXEC SQL
		 SELECT  to_char(to_date(:c_folder_dt ,'YYYYMMDD'), 'DDMMYYYY') INTO :c_folder_date FROM dual; 

		if( SQLCODE != 0 )
    {
       fn_errlog(c_ServiceName, "S31010", SQLMSG, c_err_msg);
       strcpy( c_msg, "System error. Contact system support" );
       fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
       fclose(ptr_cn01_file);
       return;
    }

		strcpy(c_cn01_fname,"F_CN01_");	
		strcat(c_cn01_fname,c_folder_date);
		strcat(c_cn01_fname,".CSV");

		fn_userlog(c_ServiceName," c_cn01_fname :%s:",c_cn01_fname);
	
		sprintf(c_file_name, "%s/%s/fno/%s", ptr_c_tmp, argv[4],c_cn01_fname);	

		fn_userlog(c_ServiceName,"c_file_name  I  :%s:",c_file_name);

		ptr_cn01_file = fopen(c_file_name, "r");

		if ( ptr_cn01_file == NULL )
		{
			fn_errlog(c_ServiceName, "S31015", LIBMSG, c_err_msg);
			strcpy( c_msg, "File can not be opened. Contact system support" );
			fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			return;			
		}

		sprintf ( c_msg, "Batch process %s started", argv[0] );
		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		fn_bat_pst_msg ( c_ServiceName, "Applying CN01 file details....", c_tag );


		i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
		if( i_trnsctn == -1 )
		{
			fn_errlog(c_ServiceName, "S31020", LIBMSG, c_err_msg);
			strcpy( c_msg, "System error. Contact system support" );
			fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			fclose(ptr_cn01_file);
			return;
		}


		while( !feof( ptr_cn01_file) )	
		{
			/*** Check for triggers ***/
			fn_chk_stts(c_ServiceName);
			

			fgets( c_data, 1024, ptr_cn01_file);
			if( c_data == NULL)
			{
        fn_errlog(c_ServiceName, "S31025", LIBMSG, c_err_msg);
        strcpy( c_msg, "System error. Contact system support" );
        fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
        fclose( ptr_cn01_file );
        return;
    	}

			if( feof( ptr_cn01_file ) != 0 )
			{
				break;
			}

			i_len = strlen(c_data);

			j=0 ;
			for(i = 0;i < i_len ; i++) 
			{
				if (c_data[i] == ',')
				{
					c_o_data[j++] = ' ';
					if(c_data[i+1] == ',')
					{
						 c_o_data[j++]='*';
					}	
						
				}
				else
				{
					c_o_data[j++] = c_data[i] ;

				}
			}

			c_o_data[j] = '\0';
			sscanf(c_o_data,"%s %s %s %s %lf %s %ld %ld %s %s %s %s %c %c %lf %lf %lf %lf %lf %lf",
                c_trade_date,
                c_cntrct_inst,
                c_undrlying,
                c_expry_date,
                &d_strike_price,
                c_option_typ,
                &l_ca_lvl,
                &l_lot,
                c_iss_strt_date,
                c_iss_mat_date,
                c_exrc_strt_date,
                c_exrc_end_date,
                &c_exrc_style,
                &c_mrkt_type,
                &d_opn_prc,
                &d_high_prc,
                &d_low_prc,
                &d_cls_prc,
                &d_sttlmt_prc,
                &d_undrlyng_prc);

		
		 if( DEBUG_MSG_LVL_3 )
     {
        fn_userlog( c_ServiceName, "c_trade_date     :%s:",  c_trade_date     );
        fn_userlog( c_ServiceName, "c_cntrct_inst    :%s:",  c_cntrct_inst    );
        fn_userlog( c_ServiceName, "c_undrlying      :%s:",  c_undrlying      );
        fn_userlog( c_ServiceName, "c_expry_date     :%s:",  c_expry_date     );
        fn_userlog( c_ServiceName, " d_strike_price  :%lf",  d_strike_price   );
        fn_userlog( c_ServiceName, "c_option_typ     :%s:",  c_option_typ     );
        fn_userlog( c_ServiceName, "l_ca_lvl         :%ld:", l_ca_lvl         );
        fn_userlog( c_ServiceName, "l_lot            :%ld:", l_lot            );
        fn_userlog( c_ServiceName, "c_iss_strt_date  :%s:",  c_iss_strt_date  );
        fn_userlog( c_ServiceName, "c_iss_mat_date   :%s:",  c_iss_mat_date   );
        fn_userlog( c_ServiceName, "c_exrc_strt_date :%s:",  c_exrc_strt_date );
        fn_userlog( c_ServiceName, "c_exrc_end_date  :%s:",  c_exrc_end_date  );
        fn_userlog( c_ServiceName, "c_exrc_style     :%c:",  c_exrc_style     );
        fn_userlog( c_ServiceName, "c_mrkt_type      :%c:",  c_mrkt_type      );
        fn_userlog( c_ServiceName, " d_opn_prc       :%lf:", d_opn_prc        );
        fn_userlog( c_ServiceName, " d_high_prc      :%lf:", d_high_prc       );
        fn_userlog( c_ServiceName, " d_low_prc       :%lf:", d_low_prc        );
        fn_userlog( c_ServiceName, " d_cls_prc       :%lf:", d_cls_prc        );
        fn_userlog( c_ServiceName, " d_sttlmt_prc    :%lf:", d_sttlmt_prc     );
        fn_userlog( c_ServiceName, " d_undrlyng_prc  :%lf:", d_undrlyng_prc   );
        fn_userlog( c_ServiceName,"--------------------------------------------");
     } 

		 EXEC SQL
          INSERT INTO temp_new_cntrct_cn01
          (
            ncc_trade_date,
            ncc_cntrct_inst,
            ncc_undrlying,
            ncc_expry_date,
            ncc_strike_price,
            ncc_opt_type,
            ncc_ca_lvl,
            ncc_lot,
            ncc_iss_strt_date,
            ncc_iss_mat_date,
            ncc_exrc_strt_date,
            ncc_exrc_end_date,
            ncc_exrc_style,
            ncc_mrkt_type,
            ncc_opn_prc,
            ncc_high_prc,
            ncc_low_prc,
            ncc_cls_prc,
            ncc_sttlmt_prc,
            ncc_undrlyng_prc
          )
          VALUES
					(
            to_date(:c_trade_date, 'dd-MON-yyyy'),
            :c_cntrct_inst,
            :c_undrlying,
            :c_expry_date,
            :d_strike_price,
            :c_option_typ,
            :l_ca_lvl,
            :l_lot,
            decode(:c_iss_strt_date,'*',NULL,to_date(:c_iss_strt_date, 'dd-MON-yyyy')),
            decode(:c_iss_mat_date,'*',NULL,to_date(:c_iss_mat_date, 'dd-MON-yyyy')),
            decode(:c_exrc_strt_date,'*',NULL,to_date(:c_exrc_strt_date, 'dd-MON-yyyy')),
            decode(:c_exrc_end_date,'*',NULL,to_date(:c_exrc_end_date, 'dd-MON-yyyy')),
            :c_exrc_style,
            :c_mrkt_type,
            :d_opn_prc,
            :d_high_prc,
            :d_low_prc,
            :d_cls_prc,
            :d_sttlmt_prc,
            :d_undrlyng_prc
          );


					if( SQLCODE != 0 )
          {
            fn_errlog(c_ServiceName, "S31030", SQLMSG, c_err_msg);
            strcpy( c_msg, "System error. Contact system support" );
            fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
            fclose(ptr_cn01_file);
						del_temp();
            return;
          }

    }
    if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    {
     fn_errlog(c_ServiceName, "S31035", LIBMSG, c_err_msg);
     strcpy( c_msg, "System error. Contact system support" );
     fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
     fclose(ptr_cn01_file);
		 del_temp();
     return;
    }

    fclose(ptr_cn01_file);
    fn_bat_pst_msg ( c_ServiceName, "Data retieved from CN01 file....", c_tag );


		 /*********************** contract.txt ************************************/		

		strcpy(c_tmp_date2, argv[4]);
    sprintf(c_file_name, "%s/%s/fno/contract.txt", ptr_c_tmp, argv[4]);

    fn_userlog(c_ServiceName,"c_file_name :%s: II",c_file_name);
    ptr_cntrct_file = fopen(c_file_name, "r");

  	if ( ptr_cntrct_file == NULL )
  	{
    fn_errlog(c_ServiceName, "S31040", LIBMSG, c_err_msg);
    strcpy( c_msg, "File can not be opened. Contact system support" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		del_temp();
    return;
  	}

  	fn_bat_pst_msg ( c_ServiceName, "Applying contract file details....", c_tag );	
		i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  	if( i_trnsctn == -1 )
  	{
    	fn_errlog(c_ServiceName, "S31045", LIBMSG, c_err_msg);
    	strcpy( c_msg, "System error. Contact system support" );
    	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    	fclose( ptr_cntrct_file );
			del_temp();
    	return;
  	}

		while( feof( ptr_cntrct_file) == 0 )
		{
				fn_chk_stts(c_ServiceName);
			  memset(&st_cntrct_info, '\0', sizeof(st_cntrct_info) );
				MEMSET(c_instrument_name);

				fgets(c_data, 1024, ptr_cntrct_file);
    		if ( c_data == NULL)
    		{
      		fn_errlog(c_ServiceName, "S31050", UNXMSG, c_err_msg);
      		fn_bat_pst_msg ( c_ServiceName,
                      "System error occured. Contact system support", c_tag );
					del_temp();
      		return;
    		}

    		if( feof(ptr_cntrct_file) != 0)
    		{
      		break;
    		}

				/*** Replace '|' by ' ' and '||' by  ' . ' to make standard ***/
    		i_len = strlen(c_data);
    		j=0;
    		for(i=0;i<i_len;i++)
    		{
      		if(c_data[i] == '|')
      		{
        		c_o_data[j++] = ' ';
        		if(c_data[i+1] == '|')
        		{
          		c_o_data[j++]='*';
        		}
      		}
      		else if(c_data[i] == ' ')
      		{
        		continue;
      		}
      		else
      		{
        		c_o_data[j++] = c_data[i];
      		}
    		}
    		c_o_data[j] = '\0';

			sscanf(c_o_data, "%ld %*s %s %s %s %*s %ld %ld %s %c %ld %*s %*s %*s %*s \
                      %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %ld %*s %ld \
                      %*s %ld %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %ld \
                      %ld %*s %*s %*s %ld %ld %ld %*s %*s %*s %*s %*s %*s %*s \
                      %*s %*s %c %*s %*s %*s %*s %*s %*s %*s %ld %c",
                      &st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.l_token_id,
                      c_instrument_name,
                      st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_symbol,
                      st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_series,
                      &li_exp_dt,
                      &st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.l_strike_prc,
                      c_option_typ,
                      &st_cntrct_info.c_normal_ext_mkttyp,                          
                      &st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.l_ca_lvl,
                      &li_iss_strt_dt, 
                      &li_iss_maturity_dt, &st_cntrct_info.li_min_lot_qty,
                      &st_cntrct_info.li_low_prc_rng,
                      &st_cntrct_info.li_high_prc_rng,
                      &li_local_upd_tm, &li_exer_strt_dt,
                      &li_exer_end_dt,&c_ex_style,&li_base_prc,&c_delete_flg);

		if( DEBUG_MSG_LVL_3 ){		
		fn_userlog(c_ServiceName,"li_exp_dt :%ld:",li_exp_dt);	
		fn_userlog(c_ServiceName,"li_tm_diff :%ld:",li_tm_diff);	
		}

		/*** Since exchange is sending the date format as no of seconds from ***/
    /*** 01-Jan-1980, we can calculate the no of seconds for current     ***/
    /*** running date and can ignore the expired data                    ***/

    EXEC SQL
      SELECT ( ( to_date(:c_tmp_date2, 'yyyymmdd') -
                 to_date('01-Jan-1980 00:00:00', 'dd-Mon-yyyy hh24:mi:ss') )
                * 86400 )
      INTO :li_tm_diff
      FROM dual;

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31055", SQLMSG, c_err_msg);
      fn_bat_pst_msg ( c_ServiceName,
                      "System error occured. Contact system support", c_tag );
			del_temp();
      return;
    }
    if ( li_exp_dt < li_tm_diff )
    {
      continue;
    }

		strcpy(st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_xchng_cd, argv[2]);
    fn_nsetoors_tm ( st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_expry_dt, li_exp_dt);
		fn_nsetoors_tm ( st_cntrct_info.c_issue_strt_dt,li_iss_strt_dt			);
    fn_nsetoors_tm ( st_cntrct_info.c_issue_mat_dt,li_iss_maturity_dt	);
    fn_nsetoors_tm ( st_cntrct_info.c_ex_strt_dt,li_exer_strt_dt     );
    fn_nsetoors_tm ( st_cntrct_info.c_ex_end_dt,li_exer_end_dt			);
    fn_nsetoors_tm ( st_cntrct_info.c_tm,li_local_upd_tm 		);


		if( DEBUG_MSG_LVL_3 )
    {
		fn_userlog( c_ServiceName, "Token id              :%ld:  ",st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.l_token_id );
    fn_userlog( c_ServiceName, "c_instrument_name     :%s:   ",c_instrument_name);
    fn_userlog( c_ServiceName, "symbol                :%s:   ",st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_symbol);
    fn_userlog( c_ServiceName, "series                :%s:   ",st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_series);
		fn_userlog( c_ServiceName, "c_expry_dt            :%s:   ",st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_expry_dt);	
    fn_userlog( c_ServiceName, "strike Price 			    :%ld:  ",st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.l_strike_prc);
    fn_userlog( c_ServiceName, "c_option_typ          :%s:   ",c_option_typ);
    fn_userlog( c_ServiceName, "Market Type           :%c:  ", st_cntrct_info.c_normal_ext_mkttyp);
    fn_userlog( c_ServiceName, "CA_level              :%ld:  ",st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.l_ca_lvl);
    fn_userlog( c_ServiceName, "c_issue_strt_dt       :%s:  ", st_cntrct_info.c_issue_strt_dt);
    fn_userlog( c_ServiceName, "c_issue_mat_dt        :%s:  ", st_cntrct_info.c_issue_mat_dt);
    fn_userlog( c_ServiceName, "li_min_lot_size       :%ld: ", st_cntrct_info.li_min_lot_qty);
    fn_userlog( c_ServiceName, "Low Price range       :%ld: ", st_cntrct_info.li_low_prc_rng);
    fn_userlog( c_ServiceName, "High Price range      :%ld: ", st_cntrct_info.li_high_prc_rng);
    fn_userlog( c_ServiceName, "Local update time     :%s:  ", st_cntrct_info.c_tm);
    fn_userlog( c_ServiceName, "c_ex_strt_dt          :%s:  ", st_cntrct_info.c_ex_strt_dt);
    fn_userlog( c_ServiceName, "c_ex_end_dt           :%s:  ", st_cntrct_info.c_ex_end_dt);
    fn_userlog( c_ServiceName, "li_base_prc  	        :%ld:  ",li_base_prc);	
    fn_userlog( c_ServiceName, "c_delete_flg     	   	:%c:  ", c_delete_flg);  
    fn_userlog( c_ServiceName, "c_ex_style      	   	:%c:  ", c_ex_style);  	
		fn_userlog(c_ServiceName,"===========================================================================");
		}


		EXEC SQL
				 INSERT INTO temp_new_list_cntrct
       	 (
            nlc_trade_date,
            nlc_cntrct_instrument,
            nlc_symbol,
            nlc_expiry_date,
            nlc_strike_price,
            nlc_option_type,
						nlc_ca_lvl,	
            nlc_minimum_lot,
            nlc_iss_strt_date,
            nlc_iss_mat_date,
            nlc_exrc_strt_date,
            nlc_exrc_end_date,
						nlc_exrc_style,
						nlc_base_price,
					  nlc_series
        )
        VALUES
				(
						to_date(:st_cntrct_info.c_tm,'dd-MON-yyyy hh24:mi:ss'),
						:c_instrument_name,
						:st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_symbol,
						to_date(:st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_expry_dt ,'dd-MON-yyyy hh24:mi:ss'),
						:st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.l_strike_prc,
						:c_option_typ,
						:st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.l_ca_lvl,
						:st_cntrct_info.li_min_lot_qty,
						to_date(:st_cntrct_info.c_issue_strt_dt,'dd-MON-yyyy hh24:mi:ss'),
						to_date(:st_cntrct_info.c_issue_mat_dt,'dd-MON-yyyy hh24:mi:ss'),
						to_date(:st_cntrct_info.c_ex_strt_dt,'dd-MON-yyyy hh24:mi:ss'),
						to_date(:st_cntrct_info.c_ex_end_dt,'dd-MON-yyyy hh24:mi:ss'),
						:c_ex_style,
						:li_base_prc,
						:st_cntrct_info.st_cntrt_dtls.st_nfo_cnt.c_series
				);

				if( SQLCODE != 0 )
        {
           fn_errlog(c_ServiceName, "S31060", SQLMSG, c_err_msg);
           strcpy( c_msg, "System error. Contact system support" );
           fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
           fclose(ptr_cntrct_file);
					 del_temp();
           return;
        }
		}

		if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    {
     	fn_errlog(c_ServiceName, "S31065", LIBMSG, c_err_msg);
     	strcpy( c_msg, "System error. Contact system support" );
     	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      fclose(ptr_cntrct_file);
     	return;
    }
		
		fclose(ptr_cntrct_file);

		/**Total Number Of Records Which are in Contract.txt and not in CN01.CSV **/

		EXEC SQL
      SELECT count(*)
      INTO :li_tot_rcrds
      FROM temp_new_list_cntrct 
			WHERE nlc_iss_strt_date > nlc_trade_date AND
					  nlc_symbol NOT IN (SELECT distinct ncc_undrlying FROM temp_new_cntrct_cn01 );  

   if( SQLCODE != 0 )
 	 {
     fn_errlog( c_ServiceName, "S31070", SQLMSG, c_err_msg );
     strcpy( c_msg, "System error. Contact system support" );
     fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		 del_temp();
     return;
   }

   fn_userlog( c_ServiceName, "li_tot_rcrds     :%ld:", li_tot_rcrds);


   if( li_tot_rcrds == 0 )
   {
     fn_errlog( c_ServiceName, "B31040", DEFMSG, c_err_msg ); 
     strcpy( c_msg, "No new listing");
     fn_bat_pst_msg( c_ServiceName, c_msg, c_tag );
		 del_temp();
     return;
   }

		i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
    if( i_trnsctn == -1 )
    {
      fn_errlog(c_ServiceName, "S31075", LIBMSG, c_err_msg);
      strcpy( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			del_temp();
      return;
    }

		EXEC SQL
    SELECT min(nlc_expiry_date)
    INTO  :c_min_expry_date
    FROM   temp_new_list_cntrct;

    fn_userlog(c_ServiceName,"c_min_expry_date :%s:",c_min_expry_date);
		

  	EXEC SQL
    DECLARE cur_new_list CURSOR FOR
    SELECT to_char(nlc_trade_date,'dd-MON-yyyy'), 
           nlc_cntrct_instrument,
           nlc_symbol,
				 	 decode(nlc_expiry_date,NULL,'*',to_char(nlc_expiry_date,'dd-MON-yyyy')),
           NVL(nlc_strike_price,0),
           decode(nlc_option_type,'XX','FF',nlc_option_type),
           nlc_ca_lvl,
           nlc_minimum_lot,
           decode(nlc_iss_strt_date,NULL,'*',to_char(nlc_iss_strt_date,'dd-MON-yyyy')),
           decode(nlc_iss_mat_date,NULL,'*',to_char(nlc_iss_mat_date,'dd-MON-yyyy')),
           decode(nlc_exrc_strt_date,NULL,'*',to_char(nlc_exrc_strt_date,'dd-MON-yyyy')),
           decode(nlc_exrc_end_date,NULL,'*', to_char(nlc_exrc_end_date,'dd-MON-yyyy')),
           nlc_exrc_style,
           nlc_active_mkt_type,
           nlc_opn_price,
           nlc_high_prc,
           nlc_low_prc,
           nlc_cls_prc,
           nlc_sttlmt_prc,
           nlc_series
    FROM   temp_new_list_cntrct 
		WHERE	 nlc_iss_strt_date > nlc_trade_date AND
					 nlc_symbol NOT IN (select distinct  ncc_undrlying FROM temp_new_cntrct_cn01); 
					
		if( SQLCODE != 0 )
  	{
     	fn_errlog( c_ServiceName, "S31080", SQLMSG, c_err_msg );
     	strcpy( c_msg, "System error. Contact system support" );
     	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			del_temp();
     	return;
  	}


		EXEC SQL OPEN cur_new_list;
  	if( SQLCODE != 0 )
  	{
     	fn_errlog( c_ServiceName, "S31085", SQLMSG, c_err_msg );
     	strcpy( c_msg, "System error. Contact system support" );
     	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			del_temp();
     	return;
  	}
		 fn_userlog( c_ServiceName, "li_tot_rcrds     :%ld:", li_tot_rcrds);
		 fn_userlog( c_ServiceName, "c_file_name  III   :%s:", c_file_name);
		 fn_userlog( c_ServiceName, "c_cn01_fname   :%s:", c_cn01_fname);      
			
		 sprintf(c_file_name, "%s/%s/fno/%s", ptr_c_tmp, argv[4],c_cn01_fname);
     fn_userlog(c_ServiceName,"c_file_name :%s:",c_file_name);  
     ptr_cn02_file = fopen(c_file_name,"a");

     if ( ptr_cn02_file == NULL )
      {
          fn_errlog(c_ServiceName, "S31090", LIBMSG, c_err_msg);
          strcpy( c_msg, "File can not be opened. Contact system support" );
          fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
          fclose(ptr_cn02_file);
					EXEC SQL CLOSE cur_new_list;
					del_temp();
          return;
      }
		 
		 for( li_cnt = 1; li_cnt<=li_tot_rcrds; li_cnt++ )
		 {
				MEMSET(c_trade_date);	
				MEMSET(c_iss_strt_date);
				MEMSET(c_exrc_strt_date);
			  MEMSET(c_exrc_end_date);

				EXEC SQL
					 FETCH cur_new_list 
					 INTO  :c_trade_date,
                 :c_cntrct_inst,
                 :c_undrlying,
                 :c_expry_date,
                 :d_strike_price,
						   	 :c_option_typ,
                 :l_ca_lvl,
                 :l_lot,
						  	 :c_iss_strt_date,
						   	 :c_iss_mat_date,
							 	 :c_exrc_strt_date,
						   	 :c_exrc_end_date, 
							   :c_exrc_style,
               	 :c_mrkt_type,
               	 :d_opn_prc,
               	 :d_high_prc,
               	 :d_low_prc,
            	   :d_cls_prc,
            	   :d_sttlmt_prc,
							   :c_series;	

			if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog( c_ServiceName, "S31095", SQLMSG, c_err_msg );
        strcpy( c_msg, "System error. Contact system support" );
        fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
        EXEC SQL CLOSE cur_new_list;
				fclose(ptr_cn02_file);
				del_temp(); 
        return;
      }
     	else if( SQLCODE == NO_DATA_FOUND )
     	{
        strcpy( c_msg, "All Done");
        fn_bat_pst_msg( c_ServiceName, c_msg, c_tag );
        EXEC SQL CLOSE cur_new_list;
        break;
     	}

		 rtrim( c_undrlying );	
		
		 fn_userlog( c_ServiceName, " c_undrlying     :%s:",  c_undrlying      );
		 fn_userlog( c_ServiceName, " c_trade_date    :%s:",  c_trade_date     );
		 fn_userlog( c_ServiceName, " c_iss_strt_date :%s:",  c_iss_strt_date  );
		 fn_userlog( c_ServiceName, " --------------------------------------  ");
		 

		/***	The Underlying price of the option contracts are not dependent on strike price. So the option 
			contract underlying price should be equal to future contract underlying price.****/

				EXEC SQL
        SELECT nlc_base_price
        INTO 	 :li_undrlyng_prc
        FROM 	 temp_new_list_cntrct
        WHERE
        nlc_cntrct_instrument = decode(:c_cntrct_inst,'OPTSTK','FUTSTK',
																		   'OPTIDX','FUTIDX',
																		   'UNDINT','FUTINT',:c_cntrct_inst)  
        AND nlc_symbol = :c_undrlying
        AND to_char(nlc_expiry_date,'dd-Mon-yyyy') = :c_min_expry_date;


				d_undrlyng_prc = (double)li_undrlyng_prc;

		 if( DEBUG_MSG_LVL_3 )
     {
        fn_userlog( c_ServiceName, " c_trade_date    :%s:",  c_trade_date     );
        fn_userlog( c_ServiceName, " c_cntrct_inst   :%s:",  c_cntrct_inst    );
        fn_userlog( c_ServiceName, " c_undrlying     :%s:",  c_undrlying      );
        fn_userlog( c_ServiceName, " c_expry_date    :%s:",  c_expry_date     );
        fn_userlog( c_ServiceName, " d_strike_price  :%lf",  d_strike_price   );
        fn_userlog( c_ServiceName, " c_option_typ    :%s:",  c_option_typ     );
        fn_userlog( c_ServiceName, " l_ca_lvl        :%ld:", l_ca_lvl         );
        fn_userlog( c_ServiceName, " l_lot           :%ld:", l_lot            );
        fn_userlog( c_ServiceName, " c_iss_strt_date :%s:",  c_iss_strt_date  );
        fn_userlog( c_ServiceName, " c_iss_mat_date  :%s:",  c_iss_mat_date   );
        fn_userlog( c_ServiceName, " c_exrc_strt_date:%s:",  c_exrc_strt_date );
        fn_userlog( c_ServiceName, " c_exrc_end_date :%s:",  c_exrc_end_date  );
        fn_userlog( c_ServiceName, " d_cls_prc       :%lf:", d_cls_prc        );
        fn_userlog( c_ServiceName, " d_sttlmt_prc    :%lf:", d_sttlmt_prc     );
        fn_userlog( c_ServiceName, " d_undrlyng_prc  :%lf:", d_undrlyng_prc   );
        fn_userlog( c_ServiceName, " --------------------------------------  ");
     }     

			EXEC SQL
			 INSERT INTO temp_new_cntrct_cn01
			 values 
			 ( 
					:c_trade_date,
					:c_cntrct_inst,
					:c_undrlying,
					:c_expry_date,
					:d_strike_price/100,
					:c_option_typ,
					:l_ca_lvl,
			  	:l_lot,
      		decode(:c_iss_strt_date,'*',NULL,to_date(:c_iss_strt_date, 'dd-MON-yyyy')),
       		decode(:c_iss_mat_date,'*',NULL,to_date(:c_iss_mat_date, 'dd-MON-yyyy')),
          decode(:c_exrc_strt_date,'*',NULL,to_date(:c_exrc_strt_date, 'dd-MON-yyyy')),
          decode(:c_exrc_end_date,'*',NULL,to_date(:c_exrc_end_date, 'dd-MON-yyyy')),
          :c_exrc_style,
          :c_mrkt_type,
          :d_opn_prc,
          :d_high_prc,
          :d_low_prc,
          :d_cls_prc,
          :d_sttlmt_prc,
          :d_undrlyng_prc/100);

			  if( SQLCODE != 0 )
  			{
     			fn_errlog( c_ServiceName, "S31100", SQLMSG, c_err_msg );
     			strcpy( c_msg, "System error. Contact system support" );
     			fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
					EXEC SQL CLOSE cur_new_list;
					fclose(ptr_cn02_file);
					del_temp(); 
     			return;
  			}

				fprintf(ptr_cn02_file,"%s,", c_trade_date);
				fprintf(ptr_cn02_file,"%s,", c_cntrct_inst);
				fprintf(ptr_cn02_file,"%s,", c_undrlying);
				fprintf(ptr_cn02_file,"%s,", c_expry_date);
				if ( d_strike_price < 0.0 )
				d_strike_price = 0.0;
				fprintf(ptr_cn02_file,"%0.2lf,", d_strike_price/100);
				fprintf(ptr_cn02_file,"%s,", c_option_typ);
				fprintf(ptr_cn02_file,"%ld,", l_ca_lvl);
				fprintf(ptr_cn02_file,"%ld,", l_lot);
				fprintf(ptr_cn02_file,"%s,", c_iss_strt_date);

				if( (strcmp(c_exrc_strt_date ,"*")==0) || (strcmp(c_exrc_end_date ,"*")== 0) || d_strike_price == 0  )
        {
					fprintf(ptr_cn02_file,"%s,,,", c_iss_mat_date);
        }
				else
				{
					fprintf(ptr_cn02_file,"%s,", c_iss_mat_date);
					fprintf(ptr_cn02_file,"%s,", c_exrc_strt_date);
					fprintf(ptr_cn02_file,"%s,", c_exrc_end_date);
				}
				fprintf(ptr_cn02_file,"%c,", c_exrc_style);
				fprintf(ptr_cn02_file,"%c,", c_mrkt_type);
				fprintf(ptr_cn02_file,"%0.2lf,", d_opn_prc);
				fprintf(ptr_cn02_file,"%0.2lf,", d_high_prc);
				fprintf(ptr_cn02_file,"%0.2lf,", d_low_prc);
				fprintf(ptr_cn02_file,"%0.2lf,", d_cls_prc);
				fprintf(ptr_cn02_file,"%0.2lf,", d_sttlmt_prc);
				fprintf(ptr_cn02_file,"%0.2lf,,",d_undrlyng_prc/100);
				fprintf(ptr_cn02_file,"%s,", c_undrlying);
				if( strstr(c_cntrct_inst,"STK")  != NULL )
				{
        fn_userlog(c_ServiceName,"STK");
        strcpy(c_series,"EQ");
        }
				else
				{
        fn_userlog(c_ServiceName,"IDX/IND");
        strcpy(c_series,"");	
				}
				fprintf(ptr_cn02_file,"%s,,,,\n",c_series);

		}
				
		fclose(ptr_cn02_file);	

		if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    {
      fn_errlog(c_ServiceName, "S31105", LIBMSG, c_err_msg);
      strcpy( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			del_temp();  
      return;
    }

		del_temp(); 

		fn_userlog(c_ServiceName,"bat_apnd_cn01 completed sucessfully...");
    fn_bat_pst_msg ( c_ServiceName, "bat_apnd_cn01 completed sucessfully....", c_tag );	

}

void del_temp(void)
{

	char c_ServiceName[33];
  char c_msg[256];
  char c_err_msg[256];
	int i_trnsctn;

		i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
   	if( i_trnsctn == -1 )
   	{
   		fn_errlog(c_ServiceName, "S31110", LIBMSG, c_err_msg);
   		strcpy( c_msg, "System error. Contact system support" );
   		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
   		return;
   	}

    EXEC SQL
      DELETE FROM temp_new_cntrct_cn01; 

     if( SQLCODE != 0 )
     {
       fn_errlog(c_ServiceName, "S31115", SQLMSG, c_err_msg);
       strcpy( c_msg, "System error. Contact system support" );
       fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
       return;
     }

		fn_userlog(c_ServiceName,"data deleted from TEMP_NEW_CNTRCT_CN01"); 

		EXEC SQL
      DELETE FROM temp_new_list_cntrct;  

     if( SQLCODE != 0 )
     {
     	 fn_errlog(c_ServiceName, "S31120", SQLMSG, c_err_msg);
       strcpy( c_msg, "System error. Contact system support" );
       fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
       return;
     }

    fn_userlog(c_ServiceName,"data deleted from TEMP_NEW_LIST_CNTRCT");

    if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    {
		 fn_userlog(c_ServiceName,"commit");
     fn_errlog(c_ServiceName, "S31125", LIBMSG, c_err_msg);
     strcpy( c_msg, "System error. Contact system support" );
     fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
     return;
    }

		fn_userlog(c_ServiceName,"EMPTY TEMP TABLE ");		

}    

void fn_nsetoors_tm ( char *c_tm_stmp,
                      long int li_src )
{
  char *c_tm;
  int i;
  int j;
  time_t now;

  li_src += li_ten_yrs;
  strftime(c_tm_stmp, 21, "%d-%b-%Y %H:%M:%S", gmtime(&li_src) );
}
void bat_tm_init(void)
{
  struct tm tenyrs_tm;

  tenyrs_tm.tm_sec = 0;
  tenyrs_tm.tm_min = 0;
  tenyrs_tm.tm_hour = 0;
  tenyrs_tm.tm_mday = 1;
  tenyrs_tm.tm_mon = 0;
  tenyrs_tm.tm_year = 70;
  tenyrs_tm.tm_wday = 0;
  tenyrs_tm.tm_yday = 0;
  tenyrs_tm.tm_isdst = 0;

  li_utc_offset = mktime(&tenyrs_tm) * (-1);

  tenyrs_tm.tm_sec = 0;
  tenyrs_tm.tm_min = 0;
  tenyrs_tm.tm_hour = 0;
  tenyrs_tm.tm_mday = 1;
  tenyrs_tm.tm_mon = 0;
  tenyrs_tm.tm_year = 80;
  tenyrs_tm.tm_wday = 0;
  tenyrs_tm.tm_yday = 0;
  tenyrs_tm.tm_isdst = 0;

  li_ten_yrs = mktime(&tenyrs_tm) + li_utc_offset;
}

int fn_bat_init ( int argc, char *argv[] )
{

	bat_tm_init();
  fn_var = BAT_APND_CN01;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  char c_msg[256];

  sprintf ( c_msg, "Batch process %s ended", argv[0] );
  fn_bat_pst_msg (  argv[0], c_msg, c_tag );
  return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}

