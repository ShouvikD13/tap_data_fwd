/**************************************************************************/  
/* File 						: bat_populate_prl 																		*/ 
/*																																				*/ 
/*																																				*/ 
/* Description			: This Batch program will run after Pledge Creation   */
/*                    Process and Request Book details which are in 		  */ 
/*										INPROCESS state will be inserted into log table		  */ 
/*																																				*/  
/*																																				*/ 
/*																																				*/								 
/* Calling Programs/Sub-routines:																					*/	 
/*																																				*/	 
/*																																				*/ 
/* Called by				:																											*/	 
/*																																				*/ 
/* Author 					:	Amisha																							*/  
/*																																				*/ 
/* Created on				:	12-Aug-2008																					*/		 
/*																																				*/ 
/* Modification History:																									*/ 
/*																																				*/	 
/*	Date		Version No.		 Modified by 		Modification Description				*/ 
/*																																				*/	 
/* 08-Feb-2010 1.1         Vidyayini Krish  Console changes               */
/* 03-Nov-2014 1.2         Tanmay Wakrhade  SAM BLOCK UNBLOCK changes     */
/*																																				*/ 
/*																																				*/ 
/**************************************************************************/ 
 
/*********** Standard include files**********/ 
 
#include<stdio.h>						/* C Header File */ 
#include<stdlib.h>					/* C Header File */ 
#include<sqlca.h>						/* Oracle header file */ 
#include <atmi.h>						/* TUXEDO Header File */ 
#include <userlog.h>				/* TUXEDO Header File */ 
#include <fml32.h>					/* TUXEDO Header File */ 
#include <fml_def.h> 
#include <string.h> 
#include <fml_rout.h>	 
#include <fn_read_debug_lvl.h> 
#include <fo.h> 
#include <fn_log.h> 
#include <fn_tuxlib.h> 
#include <fn_collateral.h> 
#include <fn_battmpt.h> 
 
 
/*********** Defines ************/ 
 
#define TOTAL_FML 13 
#define LEN_EVENT 256 
#define LEN_USER_ID 9 
#define LEN_ERR_MSG 256 
#define LEN_MSG  256 
#define LEN_SRVC_NM 33 
#define LEN_TAG 32 
#define LEN_SYS_DT 22+1 
#define LEN_FILE_NM 1000 
#define LEN_TMP_VAL	500 
#define	ZERO	0 
#define NLVL {'\0'} 

#define BAT_TRAN_LOCAL 4500 	/*** Migration purpose ***/
 
 
/************Function Prototype************/ 
int GetValue(char file_name[],char search_str[],char retstr[]); 
 
void main( int argc, char * argv[] ) /* Main Program Starts here */ 
{ 
 
		char	c_event[LEN_EVENT]=NLVL; 
		char	c_user_id[LEN_USER_ID]=NLVL; 
		char	c_err_msg[LEN_ERR_MSG]=NLVL; 
		char	c_msg[LEN_MSG]=NLVL; 
		char	c_ServiceName[LEN_SRVC_NM]=NLVL; 
		char	c_tag[LEN_TAG]=NLVL;	 
		char 	c_ini_FileName[LEN_FILE_NM]=NLVL; 
    char  tempval[LEN_TMP_VAL]=NLVL;
		char  c_command[200];

		int		i_returncode;	/* Store return code */ 
		int		i = ZERO; 
		int		i_counter=ZERO; 
		int		i_err[TOTAL_FML]; 
		int 	i_trnsctn; 
		int 	i_plg_prcs=ZERO;
		int i_ret_val=0;
 
 
EXEC SQL INCLUDE "table/prl_plg_report_log.h"; 
EXEC SQL INCLUDE "table/pod_plg_ordr_dtls.h"; 
 
/******* Host variable declaration Starts ******/ 
 
EXEC SQL BEGIN DECLARE SECTION; 
 
		char	sql_frm_dt[LEN_SYS_DT]; 
		char	sql_to_dt[LEN_SYS_DT]; 
		int	i_count=0; 
 
EXEC SQL END DECLARE SECTION; 
 
	TPINIT 	*tpinfo; 
 
		NULLCHAR(c_ServiceName); 
		NULLCHAR(c_tag); 
		NULLCHAR(c_msg); 
		NULLCHAR(c_err_msg); 
 
		strcpy(c_ServiceName, "bat_populate_prl" );	 
		INITBATDBGLVL(argv[0]); 
 
 
/**********To Create Log pipe**************/ 
 
			if( fn_create_pipe() == FAILURE) 
			exit(FAILURE); 
 
 
/*************Argument Validation*********/ 
		if(argc != 3) 
		{ 
			sprintf(c_msg,"Usage: bat_populate_prl <FROM DATE> <TO DATE>"); 
			fn_userlog(c_ServiceName,c_msg); 
			exit(FAILURE); 
		} 
 
 
		if((tpinfo = (TPINIT *)tpalloc("TPINIT",NULL,MIN_FML_BUF_LEN)) == NULL) 
		{ 
					sprintf(c_msg,"[%s]:Following error occured while allocating memory for TPINIT buffer: Code:'%d' Message:'%s'", c_ServiceName, TPCODE, TPMSG); 
					fn_userlog(c_ServiceName,c_msg); 
					fn_errlog( c_ServiceName, "S31005", LIBMSG, c_err_msg  ); 
					exit(FAILURE); 
		} 
 
			 
 
/************ Connection Details from Profile ***********/ 
 
		if(tuxgetenv("ORA_GRP") == NULL) 
		{ 
				strcpy(c_msg,"ORA_GRP not defined in the environment"); 
				fn_userlog(c_ServiceName,c_msg);				 
				fn_errlog( c_ServiceName, "S31010", LIBMSG, c_err_msg  ); 
				tpfree((char*)tpinfo); 
				exit(FAILURE); 
		} 
 
		if(DEBUG_MSG_LVL_3) 
		{ 
				sprintf(c_msg,"ORA_GRP is defined in the environment: [%s]",tuxgetenv("ORA_GRP")); 
				fn_userlog(c_ServiceName,c_msg); 
		} 
 
				strcpy(tpinfo->grpname,tuxgetenv("ORA_GRP")); 
				strcpy ( tpinfo->usrname, "\0" ); 
				strcpy ( tpinfo->passwd, "\0" ); 
				strcpy ( tpinfo->cltname, "" ); 
				tpinfo->flags = TPU_DIP; 
 
		if(tpinit((TPINIT *) tpinfo) == FAILURE) 
		{ 
					sprintf(c_msg,"[%s]:Client failed in connecting to group %s, due to following reason: Code:'%d' Message:'%s'", c_ServiceName, tuxgetenv("ORA_GRP"), TPCODE, TPMSG); 
					fn_userlog(c_ServiceName,c_msg); 
					fn_errlog( c_ServiceName, "S31015", LIBMSG, c_err_msg  ); 
					tpfree((char*)tpinfo); 
					exit(FAILURE); 
		} 
 
			tpfree((char*)tpinfo); 
 
		if(DEBUG_MSG_LVL_3) 
		{ 
				sprintf(c_msg,"tpinit() returns SUCCESS : [%d]",tperrno); 
				fn_userlog(c_ServiceName,c_msg); 
		} 
 
/******** Validation for connection is estabilished or Not ***********/ 
 
		if (tpopen() == FAILURE) 
		{ 
				sprintf(c_msg,"[%s]:Unable to open connection with resource manager, due to following reason: Code:'%d' Message:'%s'", c_ServiceName, TPCODE, TPMSG); 
				fn_userlog(c_ServiceName,c_msg); 
				tpterm(); 
				exit(FAILURE); 
		} 
 
		if(DEBUG_MSG_LVL_3) 
		{ 
				sprintf(c_msg,"[%s]:Client successfully connected to group %s",c_ServiceName,tuxgetenv("ORA_GRP")); 
				fn_userlog(c_ServiceName,c_msg); 
		} 
 
/************Calling function to begin Transaction******************/ 
 
	/**	i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );  *** Commented for Migration **/
	  i_trnsctn = tpbegin(BAT_TRAN_LOCAL,0);
		if ( i_trnsctn == FAILURE ) 
		{ 
				fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg  ); 
				fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); 
				exit(FAILURE); 
		} 
			 
 
			strcpy( c_msg, " Starting BAT_POPULATE_PRL..."); 
			fn_userlog( c_ServiceName,c_msg); 
			fn_userlog( c_ServiceName,"from date :%s:"   ,argv[1]); 
			fn_userlog( c_ServiceName,"to date :%s:" ,argv[2]); 
 
/*************Passing arguments to Host Variables************/ 
 
			strcpy(sql_frm_dt,argv[1]); 
			strcpy(sql_to_dt,argv[2]); 

			/* Ver 1.1 sprintf(c_tag,"%s_%s",c_ServiceName,argv[1]);  */

      sprintf(c_tag,"%s_na",c_ServiceName);       /* Ver 1.1 */
 
			fn_userlog( c_ServiceName,c_msg); 
			fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
	 
	/*****Reading Pledge Process time from INI File****/ 
	 
	 sprintf( c_ini_FileName, "%s/%s", tuxgetenv("BIN"),"CollateralReport.INI"); 
	 fn_userlog(c_ServiceName,"%s",c_ini_FileName); 
	 GetValue(c_ini_FileName,"PLEDGE_TIME",tempval); 
	 /***i_plg_prcs=atoi(tempval); 
	fn_userlog(c_ServiceName,"%d",i_plg_prcs); **/

	sprintf(sql_frm_dt,"%s %s",sql_frm_dt,tempval);
	sprintf(sql_to_dt,"%s %s",sql_to_dt,tempval);
 
/********* Declaring Cursor **********/ 
		 
	if(DEBUG_MSG_LVL_3) 
	{ 
				fn_userlog(c_ServiceName,"Before select statement"); 
	} 
 
    /*************************** Commented in ver 1.2 **************************
			EXEC SQL 
				DECLARE cur_fet_log 
				CURSOR FOR  
				SELECT nvl(POD_ORDR_NO,' '), 
								nvl(POD_STCK_CD,' '), 
								nvl(POD_ORDR_QTY,0), 
								to_char(POD_ORDR_DT,'DD-MON-YYYY HH24MISS'), 
								nvl(POD_HAIRCUT,0), 
								nvl(POD_ORDR_VL,0), 
								nvl(POD_ISIN_NO,' '), 
								nvl(POD_DP_CLNT_ACCNT,' '), 
								nvl(POD_DP_ACCNT ,' '), 
								nvl(POD_CLNT_MTCH_ACCNT,' '), 
								nvl(POD_PLG_REV_TYP,' '), 
								nvl(POD_ORDR_STTS,' '), 
								nvl(POD_CONF_QTY,0), 
								nvl(POD_RJCT_QTY,0), 
								nvl(POD_RMRKS,' '), 
								nvl(POD_BP_ID,' '), 
								nvl(POD_CHANNEL,' '), 
								nvl(POD_PRCSD_QTY,0) 
							FROM	pod_plg_ordr_dtls	 
							WHERE	POD_ORDR_STTS='I'
							AND to_date(POD_ORDR_DT,'dd-mon-yyyy HH24MI') 
							BETWEEN
            	to_char(to_date(:sql_frm_dt,'dd-mon-yyyy HH24MI')) 
							and to_char(to_date(:sql_to_dt,'dd-mon-yyyy HH24MI'));
							 
  *************************** Commented in ver 1.2 **************************/

  /***************************Added in ver 1.2 **************************/

    EXEC SQL
        DECLARE cur_fet_log
        CURSOR FOR
        SELECT nvl(SBD_ORDR_NO,' '),
                nvl(SBD_STCK_CD,' '),
                nvl(SBD_BKUBK_QTY,0),
                to_char(SBD_BKUBK_DT,'DD-MON-YYYY HH24MISS'),
                nvl(SBD_HAIRCUT,0),
                nvl(SBD_BKUBK_VL,0),
                nvl(SBD_ISIN_NO,' '),
                nvl(SBD_DP_CLNT_ACCNT,' '),
                nvl(SBD_DP_ACCNT,' '),
                nvl(SBD_CLNT_MTCH_ACCNT,' '),
                nvl(SBD_SAM_BKUBK_TYP,' '),
                nvl(SBD_BKUBK_STTS,' '),
                nvl(SBD_RMRKS,' '),
                nvl(SBD_BP_ID,' '),
                nvl(SBD_CHANNEL,' ')
              FROM  SBD_SAM_BKUBK_DTLS
              WHERE 
              to_date(SBD_BKUBK_DT,'dd-mon-yyyy HH24MI')
              BETWEEN
              to_char(to_date(:sql_frm_dt,'dd-mon-yyyy HH24MI'))
              and to_char(to_date(:sql_to_dt,'dd-mon-yyyy HH24MI'))
							and SBD_RMRKS <> 'System SAM Block';		/*** Remarks added for migration **/

  /***************************Added in ver 1.2 **************************/



	if(DEBUG_MSG_LVL_3) 
	{ 
				fn_userlog(c_ServiceName,"Successfully completed selecting the records from pod_plg_ordr_dtls "); 
	} 
 
		 
	if ( SQLCODE != SUCCESS ) 
	{ 
				 
				if ( SQLCODE == NO_DATA_FOUND ) 
				{ 
						strcpy(c_msg," No Data Found while selecting the records"); 
						fn_userlog(c_ServiceName,c_msg); 
						fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
				} 
				else 
				{	 
						strcpy(c_msg,"SQL ERROR"); 
						fn_userlog(c_ServiceName,c_msg);  
						fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg  ); 
						fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); 
				} 
						EXEC SQL CLOSE cur_fet_log; 
						fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg ); 
						exit(FAILURE); 
	} 
 
 
 
/**********Opening the Cursor**********/	 
 
		EXEC SQL OPEN cur_fet_log; 
	
	if(SQLCODE != SUCCESS)  
	{ 
			if(SQLCODE == NO_DATA_FOUND) 
			{ 
 
					sprintf(c_msg,"No Data Found while opening the cursor");	 
					fn_userlog(c_ServiceName,c_msg); 
					fn_errlog(c_ServiceName, "S31030", SQLMSG, c_err_msg); 
					fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
			} 
			else 
			{ 
 
					fn_userlog(c_ServiceName,"Error while opening the cursor");		 
					fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg  ); 
					fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); 
			} 
				EXEC SQL CLOSE cur_fet_log; 
				fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg ); 
				exit(FAILURE); 
	} 
 
while(1)	/* Loop Starts */ 
{ 
		if(DEBUG_MSG_LVL_3) 
		{ 
				fn_userlog(c_ServiceName,"Record fetching from crsor cur_fet_log start"); 
		} 
 
		EXEC SQL FETCH cur_fet_log  
					INTO	:sql_prl_ordr_no, 
								:sql_prl_stck_cd, 
								:sql_prl_ordr_qty, 
								:sql_prl_ordr_dt, 
								:sql_prl_haircut, 
								:sql_prl_ordr_vl, 
								:sql_prl_isin_no, 
								:sql_prl_dp_clnt_accnt, 
								:sql_prl_dp_accnt, 
								:sql_prl_clnt_mtch_accnt, 
								:sql_prl_plg_rev_typ, 
								:sql_prl_ordr_stts, 
					/**			:sql_prl_conf_qty, 
								:sql_prl_rjct_qty,  **** Commented for Ver 1.2 ****/
								:sql_prl_rmrks, 
								:sql_prl_bp_id, 
								:sql_prl_channel; 
				/**				:sql_prl_prcsd_qty;  *** Commented for Ver 1.2 ****/
		 
	if(SQLCODE != SUCCESS)  
	{
			if(SQLCODE == NO_DATA_FOUND)
			{
					if(i_counter>0)
					{ 
						sprintf(c_msg,"%d Records are prcessed... No more records still to process ",i_counter); 
						fn_userlog(c_ServiceName,c_msg); 
						fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
						break; 
 					}
					else
					{
            sprintf(c_msg,"Records not found");
            fn_userlog(c_ServiceName,c_msg);
            fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
            exit(FAILURE);
					}
			} 		 
			else 
			{ 
					sprintf(c_msg,"Error while fetching from the cursor  cur_fet_log & sqlcode-:%d:",sqlca.sqlcode); 
					fn_userlog(c_ServiceName,c_msg); 
					fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg  ); 
					fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag);
				  exit(FAILURE); 
				 
			} 
	} 
 
	if(DEBUG_MSG_LVL_3) 
	{ 
				fn_userlog(c_ServiceName,"Checking Record Existing Or not "); 
	} 
 
/****Checking for Record ***/ 
	fn_userlog( c_ServiceName,"ORDER NUMBER IS :%s:",sql_prl_ordr_no.arr );
	fn_userlog( c_ServiceName,"Order STATUS IS :%c:",sql_prl_ordr_stts );

	EXEC SQL  
	SELECT 	count(*) 
	INTO			:i_count 
	FROM			prl_plg_report_log 
	WHERE			PRL_ORDR_NO= :sql_prl_ordr_no 
	AND			PRL_ORDR_STTS=:sql_prl_ordr_stts; 
	 
	if(SQLCODE != SUCCESS) 
	{ 
 
				if(SQLCODE != NO_DATA_FOUND) 
				{ 
 
						strcpy(c_msg,"No Data To Process..."); 
						fn_errlog(c_ServiceName,"S31045",SQLMSG,c_err_msg); 
						fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
						fn_userlog(c_ServiceName,c_msg); 
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); 
						EXEC SQL CLOSE cur_fet_log; 
						exit(FAILURE); 
 
				} 
					strcpy(c_msg,"NO data Found"); 
					fn_userlog(c_ServiceName,c_msg); 
					fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
				 
	} 

		if(i_count>0)
  	{

 	     	strcpy(c_msg,"Record found...");
  	    fn_userlog(c_ServiceName,c_msg);
    	  fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
      	continue;

 		 }
 
/*******Inserting Vales into PRL_PLG_REPORT_LOG********************/ 
 
			EXEC SQL  
			INSERT INTO PRL_PLG_REPORT_LOG 
								(PRL_ORDR_NO, 
								PRL_STCK_CD, 
								PRL_ORDR_QTY, 
								PRL_ORDR_DT, 
								PRL_HAIRCUT, 
								PRL_ORDR_VL, 
								PRL_ISIN_NO, 
								PRL_DP_CLNT_ACCNT, 
								PRL_DP_ACCNT, 
								PRL_CLNT_MTCH_ACCNT, 
								PRL_PLG_REV_TYP, 
								PRL_ORDR_STTS, 
								PRL_CONF_QTY, 
								PRL_RJCT_QTY, 
								PRL_RMRKS, 
								PRL_BP_ID, 
								PRL_CHANNEL, 
								PRL_PRCSD_QTY, 
								PRL_RECORDED_ON, 
								PRL_PRCS_STTS,
								PRL_REC_STTS) 
							VALUES( 
								:sql_prl_ordr_no, 
								:sql_prl_stck_cd, 
								:sql_prl_ordr_qty, 
								to_date(:sql_prl_ordr_dt,'DD-MON-YYYY HH24MISS'), 
								:sql_prl_haircut, 
								:sql_prl_ordr_vl, 
								:sql_prl_isin_no, 
								:sql_prl_dp_clnt_accnt, 
								:sql_prl_dp_accnt, 
								:sql_prl_clnt_mtch_accnt, 
								:sql_prl_plg_rev_typ, 
								:sql_prl_ordr_stts, 
								:sql_prl_conf_qty, 
								:sql_prl_rjct_qty, 
								:sql_prl_rmrks, 
								:sql_prl_bp_id, 
								:sql_prl_channel, 
								:sql_prl_prcsd_qty, 
								SYSDATE, 
								NULL,
								'N'); 
 
 
		if(DEBUG_MSG_LVL_3) 
		{ 
				fn_userlog(c_ServiceName,"Insertion Completed Successfully"); 
		} 
 
		if(SQLCODE != SUCCESS) 
		{ 
				if(SQLCODE == NO_DATA_FOUND) 
				{ 
 
						strcpy(c_msg,"No Data To Process..."); 
						fn_errlog(c_ServiceName,"S31050",SQLMSG,c_err_msg); 
						fn_bat_pst_msg(c_ServiceName,c_msg,c_tag); 
						fn_userlog(c_ServiceName,c_msg); 
 
				} 
				else 
				{ 
 
						fn_errlog(c_ServiceName , "S31055", SQLMSG,c_err_msg); 
						fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); 
 
				} 
	 
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); 
						EXEC SQL CLOSE cur_fet_log; 
						exit(FAILURE); 
		} 
 
	 i_counter++;
 
}/*END of LOOP*/ 
	 
/*********Closing the Cursor********/ 
 
	EXEC SQL CLOSE cur_fet_log; 
 
	if(SQLCODE != SUCCESS) 
	{ 
				sprintf(c_msg,"Closing cursor is fail,sqlcode-:%d:",sqlca.sqlcode); 
				fn_userlog(c_ServiceName,c_msg); 
				fn_bat_pst_msg(c_ServiceName,c_msg,c_tag);
				exit(FAILURE); 
	} 
 
 
/********Commiting the transaction*******/ 
 
	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == FAILURE ) 
	{ 
			fn_errlog(c_ServiceName, "S31060", LIBMSG, c_err_msg); 
			fn_bat_pst_msg(c_ServiceName,c_err_msg,c_tag); 
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); 
			exit(FAILURE); 
	} 
 
	 
			fn_userlog(c_ServiceName,"Batch program completed successfully "); 

	MEMSET(c_command);
  strcpy(c_command,"bat_prl_send_report");

  fn_userlog(c_ServiceName,"The Command Is :%s:",c_command);
  fn_userlog(c_ServiceName,"Before Call To bat_prl_send_report");


  i_ret_val = system(c_command); 

  fn_userlog(c_ServiceName," i_ret_val Is :%d:",i_ret_val);

  fn_userlog(c_ServiceName," After Call To bat_prl_send_report");

}/* Main Ends */ 
 
 
/****Function to read the values from INI file********/ 
 
int GetValue(char file_name[],char search_str[],char retstr[]) 
{ 
				FILE *ini_fp; 
				char filestr[1000]; 
 
        ini_fp = fopen( file_name, "r" ); 
        if ( ini_fp == NULL ) 
        { 
						return -1; 
        } 
				while(fgets(filestr,1000,ini_fp) != NULL) 
    		{ 
                fflush(NULL); 
                if(strstr(filestr,search_str) != NULL) 
                { 
                        break; 
                } 
    		} 
        fclose(ini_fp); 
 
				strcpy(retstr,(strstr(filestr,"=")+1)); 
				if(retstr[strlen(retstr)-1]='\n') 
				retstr[strlen(retstr)-1]='\0'; 
				 
 
				return 0; 
 
} 
 
 
 
