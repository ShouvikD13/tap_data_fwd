/******************************************************************************/
/*  Program           : CLN_BRD_CLNTQ		                                      */
/*                                                                            */
/*  Input             : C_PIPE_ID                                             */
/*                                                                            */
/*  Output            :                                                       */
/*                                                                            */
/*  Description       : Broadcast client runs in the process space of the     */
/*                      EBA system and it is a Tuxedo based client process.   */
/*                      It receives messages from broadcast server in ORS     */
/*                      system and directs the message to appropriate services*/
/*                      in EBA sytem.                                         */
/*  Log               : 1.0   09-May-2013   Sachin Birje                      */
/*  Log               : 1.2   09-Sep-2014   Samip M														*/
/*  Log               : TOL   14-Aug-2023   Agam                              */
/******************************************************************************/
/*Ver 1.0             : New Release																						*/
/*Ver 1.1             : Routing Removed   																		*/
/*Ver 1.2             : View to FML changes																		*/
/*Ver TOL             : Tux on Linux                                          */
/******************************************************************************/

/**** C header ****/
#include <stdio.h>
#include <sqlca.h>
#include <sys/socket.h>
#include <unistd.h> 
/**** Tuxedo header ****/
#include <atmi.h>
#include <fml32.h>
#include <Usysflds.h>

/** #include <fo_view_def.h> **/	/** Ver 1.2 **/
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fo.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fn_scklib_tap.h>
#include <fo_exg_brd_lib.h>
#include<errno.h>

/* Process specific header  */
#include <fn_env.h>
#include <fn_log.h>
#include <brd_cln_srvr.h>
#include <fn_fil_log.h>
#include <fn_ddr.h>
#include <fn_msgq.h>

#include <string.h>
#include <stdlib.h>
#include <fml_rout.h>
#include <fn_signal.h>
#include <fn_read_debug_lvl.h>
#include <signal.h>                      /* Added in Ver TOL */
#define MAX_BCAST_PACKET_LEN 516 
#define QUE_EMPTY 1             


void fn_sgnl_usr2(int i_sig_no);



char c_pipe_id [ 5+1 ];
char c_tbt_mod;	

int  i_dmp_val;
int	 i_lzo_ret_val;
int i_exit_stts;
int i_send_qid;

char  c_qspace_name[10]; 
char  c_q_name[10];     

long int li_port;

struct st_q_message
{
long l_msg_type;
char c_buffer_msg[516];
};


void CLN_BRD_CLNTQ ( int argc, char *argv[] )
{

	char c_ServiceName [33];
	char c_err_msg [256];
  char c_rout_id[3];
	char c_run_mod;
  char c_tbt_mod;

	char *ptr_c_tmp;

  int i_ch_val;
  int i_err[5];
  int i_ferr[5];
  int i_loop;
  int i_ret_val;
  int i_rout_val;

  long li_buf_len;
 
  FBFR32 *ptr_fml_Sbuf;

  struct st_q_message st_q_msg;
  struct st_bcast_pack_data st_bcastdata;
  
	strcpy(c_ServiceName, argv[0]);

	INITBATDBGLVL(argv[0]);

  ptr_fml_Sbuf  = (FBFR32 *)tpalloc("FML32", NULL, 1024 );
  if ( ptr_fml_Sbuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31005", UNXMSG, c_err_msg);
    exit(0);
  }
  
	ptr_c_tmp = (char*) fn_get_prcs_spc ( c_ServiceName, "RUN_MODE" );
  if ( ptr_c_tmp == NULL )
  {
    fn_errlog(c_ServiceName,"S31010", LIBMSG, c_err_msg);
    tpfree( ( char * ) ptr_fml_Sbuf);
    exit(0);
  }
  c_run_mod = *ptr_c_tmp;


	ptr_c_tmp = (char*) fn_get_prcs_spc ( c_ServiceName, "TBT_MODE" );
  if ( ptr_c_tmp == NULL )
  {
    fn_errlog(c_ServiceName,"S31015", LIBMSG, c_err_msg);
    tpfree( ( char * ) ptr_fml_Sbuf);
    exit(0);
  }
	c_tbt_mod = *ptr_c_tmp;
  
  i_exit_stts = DONT_EXIT;

  /**  i_rout_val=11; Ver 1.1 ****/

  while ( i_exit_stts == DONT_EXIT )
  {
    li_buf_len = sizeof( st_q_msg );

    memset(&st_q_msg,'\0',sizeof(struct st_q_message));

    if ( fn_read_msg_q ( i_send_qid,
                         (void *)&st_q_msg,
                         &li_buf_len,
                         c_ServiceName,
                         c_err_msg       ) == -1 )
    {
      fn_userlog(c_ServiceName," Error in Reading MSG Queue ");
    }

    memset ( &st_bcastdata, '\0', sizeof ( struct st_bcast_pack_data ) );
    memcpy ( &st_bcastdata, st_q_msg.c_buffer_msg, sizeof(st_q_msg.c_buffer_msg) );
    li_buf_len = sizeof(st_bcastdata);

    i_err[0] = Fchg32( ptr_fml_Sbuf, FFO_CBUF, 0, (char *)&st_bcastdata, li_buf_len);
    i_ferr[0] = Ferror32;
    i_err[1] =  Fchg32( ptr_fml_Sbuf, FFO_TMPLT, 0, (char *)&li_buf_len, 0 );
    i_ferr[1] = Ferror32;
    i_err[2] = Fchg32( ptr_fml_Sbuf, FFO_DWL_FLG , 0, (char *)&c_run_mod, 0 );
    i_ferr[2] = Ferror32;
    i_err[3] = Fchg32( ptr_fml_Sbuf, FFO_SOURCE_FLG, 0, (char *)&c_tbt_mod, 0 );
    i_ferr[3] = Ferror32;
    for( i_loop=0; i_loop<=3; i_loop++ )
    {
      if(i_err[i_loop] == -1)
      {
       fn_userlog(c_ServiceName,"Error [%d] in Fchange at [%d]", i_ferr[i_loop],i_loop);
       tpfree( ( char * ) ptr_fml_Sbuf);
       exit(0);
      }
    }

   /**** Ver 1.1 Starts Here ******* 
    switch ( i_rout_val )
    {
      case 11: 
              strcpy(c_rout_id,"11"); 
              i_rout_val=12;
              break;

      case 12:
              strcpy(c_rout_id,"12");
              i_rout_val=13;
              break;

      case 13: 
              strcpy(c_rout_id,"13");
              i_rout_val=14;
              break;

      case 14:
              strcpy(c_rout_id,"14");
              i_rout_val=15;
              break;
      case 15:
              strcpy(c_rout_id,"15");
              i_rout_val=16;
              break;
     
      case 16:
              strcpy(c_rout_id,"16");
              i_rout_val=17;
              break;

       case 17:
              strcpy(c_rout_id,"17");
              i_rout_val=11;
              break; 

    }   

    if( Fchg32( ptr_fml_Sbuf, FFO_PIPE_ID, 0, (char *)c_rout_id, 0 ) == -1)
    {
      fn_errlog(c_ServiceName,"S31020", FMLMSG, c_err_msg);
    }
    ******* Ver 1.1 Ends Here ***/
    
    i_ch_val = tpacall("SFO_BRD_PRCS", (char *)ptr_fml_Sbuf, 0, TPNOREPLY);
    if( i_ch_val == -1 )
    {
      fn_errlog(c_ServiceName, "S31025", LIBMSG, c_err_msg);
      tpfree( ( char * ) ptr_fml_Sbuf);
      exit(0);
    } 
  }
  tpfree( ( char * ) ptr_fml_Sbuf);
}

int fn_bat_init(int argc, char *argv[])
{
  int  i_ch_val ;
	int  i_loop;
  int  i_msgq_typ;

  char c_ServiceName [ 33 ];
	char c_pipe_id [ 5+1 ];
  char c_err_msg[256];
	char *ptr_c_tmp;
  char c_fileName[256];

  strcpy( c_ServiceName, "cln_brd_clntQ" );

  if( argc != 4)
  {
    fn_userlog(c_ServiceName,
    "Usage - cln_brd_clntQ <Exchange qualifier> <Exchange code> <pipe_id>");
    return ( -1 );
  }
  strcpy( c_pipe_id, argv[3] );

  /*** Initialize the Routing string ***/
  fn_init_ddr_pop ( argv[3],
                    TRADING_SECTION,
                    COMMON);

  ptr_c_tmp = (char *)fn_get_prcs_spc(c_ServiceName,"SEND_QUEUE");
  i_msgq_typ = atoi(ptr_c_tmp);
  fn_userlog(c_ServiceName, " SEND_QUEUE  :%s:",ptr_c_tmp);

  if(fn_crt_msg_q(&i_send_qid, i_msgq_typ, CLIENT, c_ServiceName, c_err_msg) == -1)
  {
     fn_userlog(c_ServiceName,"EBA : Failed to take access of Transmit queque.");
     return ( -1 );
  }

  i_ch_val = fn_flush_q( i_send_qid,
                          c_ServiceName,
                          c_err_msg);
  if ( i_ch_val == -1 )
  {
     fn_userlog(c_ServiceName,"EBA : Failed to FLUSH the Queue ");
     return ( -1 );
  }
  
	if ( fn_set_sgn_hnd ( SIGUSR2, fn_sgnl_usr2, c_ServiceName, c_err_msg ) == -1 )
	{
  	fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg );
  	return -1;
	}

  fn_var = CLN_BRD_CLNTQ;

  return ( 0 );
}

void fn_bat_term(int argc,
                 char *argv[] )
{
  return;
}


int fn_prcs_trg(char *c_ServiceName,
                 int i_trg_typ)
{
  return ( 0 );
}
void fn_sgnl_usr2(int i_sig_no)
{
	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog("cln_brd_clntQ","CLN_BRD_CLNTQ SIGUSER2 exit");
	}
  i_exit_stts = EXIT;
  return;
}
