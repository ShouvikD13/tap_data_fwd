/************************************************************************************/
/*																																				        	*/
/*	Program						:	BAT_REVALUATION																		        	*/
/*																																				        	*/
/*	Input							:	NONE																							        	*/
/*																																				        	*/
/*	Output						:	SUCCESS/FAILURE																		        	*/
/*																																				        	*/
/*	Discription				:	This process revaluates the pledge amount of  		        	*/ 
/*											scrip based on the pledge price at that time.			        	*/	
/*																																				        	*/
/*	Log								:15/08/2004		New Release	Himanshu & Naveen|INFOTECH          */
/*	Log								:02/02/2006		Changes for 52 week hi low 1.1				        	*/
/*										:21/01/2008		IBM Migraton	ranjit ver 1.2 				        		*/
/*										:01/11/2008   Changes for Market Hours Run  Prakash Ver 1.3		*/
/*                    :26/08/2009   Calculations Changed to BSE from NSE  Ver 1.4   */
/*                    :13/12/2011   Log to check plg rate   Ver 1.5                 */
/*					Ver 1.6		:11/01/2011   EQuity SAM  - diwakar        					        	*/
/*					Ver 1.7		:27/01/2012   Fix for limit mismatch - diwakar 			        	*/
/*				  Ver 1.8   :30/04/2012   Plg rate updated using front end for            */
/*																		selected scripts (Shamili)					  				*/ 
/*				  Ver 1.9   :30/04/2012   Log table for Plg rate change -Shashi					  */
/*					Ver 2.0   :01-Jun-2012  Exhange code added for  Audit table insert			*/ 
/*					Ver 2.1   :08-Oct-2013  Service Optimization						*/ 
/*					Ver 2.2   :09-Sep-2013  CR-ISEC04-25334 Haircut percentage storage      */ 
/*					Ver 2.3   :18-Jan-2014  CR-ISEC04-25334 Haircut percentage storage - Fix */ 
/*					Ver 2.4   :29-Apr-2014  CR-ISEC04-48772 Haircut upload logic change 		*/
/*					Ver 2.5		:16-Oct-2014	SAM Block/Unblock changes												*/
/*          Ver 2.6   :10-Oct-2016 	Check to allow Revaluation for Non-Market hours only */
/*          Ver 2.7   :16-Oct-2018  Changes in Logic for Client Haircut Percentage (Tanmay Patel) */
/*          Ver 2.8   :22-Jan-2019  NON-EQ series (Tanmay Patel)                                  */
/*          Ver 2.9   :27-Jul-2020  CR-ISEC14-138293 Margin Pledge changes (Samip M)							*/
/*          Ver 3.0   :22-Sep-2022  CR-ISEC14-162075_Currency_SAM (Tanmay Patel)                  */
/*          Ver 3.1   :09-Feb-2023  Prev SAM (Samip M)																						*/
/*          Ver 3.2   :09-Mar-2023  Changes for Client level lock (Samip M)                       */
/*          Ver TOL   :20-Sep-2023  Tux on Linux (Agam)                                           */
/**************************************************************************************************/

#include "fn_collateral.h"
#include <fn_read_debug_lvl.h>	/* ver 1.2 */
#include <math.h>						/* ver 1.6 */
#include <fn_eqsam.h>						/* ver 1.6 */

#define EOD 'E'                 /* Ver 1.3 */
#define MARKET 'M'              /* Ver 1.3 */

void fn_updt_audittab ( char );   /*  Ver 1.3  *//* Renamed fn_upd_audittab to fn_updt_audittab in Ver TOL */ 
int fn_upd_plgrt ( char );       /*  Ver 1.3  */ 
int fn_upd_haircut( char *str);        /*  Ver 2.2  *//** Change from Void to char in Ver 2.8 **/
int fn_upd_chm_status(char *str);  /*** Ver 2.2 ***/
void trim(char *str); /*** Ver 2.3 ***/

  char    c_exg_xchng_cd[4];    /* ver 1.9 */
	char		c_upld_mode;					/*** Ver 2.4 ***/

int main( int argc, char *argv[] )
{
	char 		c_err_msg[256];
	char 		c_ServiceName[33];
	char 		c_cur_date[22];
	char		c_mtch_accnt[11];
	char		c_stck_code[7];
	char 		c_bnk_accnt[20];
	char    c_tag[32];
	char    c_narration[61];
	char    c_msg[256];
  char    c_run_mode;           /* ver 1.3 */
  char    c_flg = 'F';          /* ver 1.3 */
  /*char    c_exg_xchng_cd[4];    * ver 1.3 */
  char    c_exg_crrnt_stts;     /* ver 1.3 */
  char    c_opncls_flg = '\0';     /*** Ver 2.2 ***/
	char    c_exg_crrnt_temp = '\0';     /** Ver 2.6 **/

	int 		i_counter;
	int 		i_trnsctn;
	int 		i_returncode;
	int     flag = 0;
	int     count=0;
  int     i_ch_val;             /* Ver 1.3 */
  int     i_hair_rec= 0 ;             /* Ver 2.2 */

	double 	d_plg_haircut = 0.0;        /*** Ver 2.2 Variable intialised ***/
	double 	d_tot_plg_amt = 0.0 ;				/*** Ver 2.2 Variable intialised ***/
	double 	d_plg_amt = 0.0 ;						/*** Ver 2.2 Variable intialised ***/
	double 	d_prev_plg_amt = 0.0 ;				/*** Ver 2.2 Variable intialised ***/
	double 	d_plg_rt = 0.0;							/*** Ver 2.2 Variable intialised ***/
	double 	d_alctd_amt = 0.0;					/*** Ver 2.2 Variable intialised ***/
	double 	d_bft_amt= 0.0;						/*** Ver 2.2 Variable intialised ***/
	double 	d_diff_amt = 0.0 ;						/*** Ver 2.2 Variable intialised ***/

	long long ll_tot_plg_amt ;  /** Ver 1.7 */
	long    l_count;
	long 		l_pldg_qty;
	long    i;

	strcpy ( c_ServiceName, argv[0] );

	INITBATDBGLVL(argv[0]);		/* ver 1.2 */

	if(argc != 5 && argc != 6)			/*** Added check of 6 for Ver 2.4 ***/
	{
		fn_userlog(c_ServiceName,"Usage: bat_revaluation <Config File> <Exchange Cd> <Pipe Id> <RUN MODE>");   /* Ver 1.3 */
		exit(-1);
	}
 
	c_run_mode = argv[4][0] ;  /* Ver 1.3 */
	/** strcpy ( c_exg_xchng_cd, "NFO" ); * Ver 1.3 * Commented in Ver 2.8 **/
  strcpy ( c_exg_xchng_cd,argv[2]);     /** Ver 2.8 **/
  fn_userlog( c_ServiceName,"Exchange Code :%s:" ,c_exg_xchng_cd); /** Ver 2.8 **/

	strcpy( c_msg, "STAGE 1.0 Starting BAT_REVALUATION...");
	fn_userlog( c_ServiceName,c_msg);
	fn_userlog( c_ServiceName,"config File :%s:"   ,argv[1]);
	fn_userlog( c_ServiceName,"Exchange Code :%s:" ,argv[2]);
	fn_userlog( c_ServiceName,"Pipe Id :%s:"       ,argv[3]);
	fn_userlog( c_ServiceName,"Running Mode :%s:"  ,c_run_mode);  /* Ver 1.3 */

	sprintf(c_tag,"%s_%s",c_ServiceName,argv[1]);

	init_bat(c_ServiceName,argv[2],argv[3]);

	fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag); /* Renamed fn_bat_pst_msg to fn_bat_pst_msg_fno in Ver TOL */

	/**** ver 2.4 Start ***/

	if ( argc == 5)
		c_upld_mode = 'V';
	else if (argc == 6)
		c_upld_mode = argv[5][0];

	/**** ver 2.4 Ends ***/

	/*** Ver 2.6 Starts ***/

  if( c_run_mode == MARKET )
  {
    strcpy ( c_msg, "Revaluation not available for MARKET run mode" );
    fn_errlog(c_ServiceName, "S31005", c_msg, c_err_msg);
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
    destroy_bat();
  }	

  c_exg_crrnt_temp = '\0';
	
  EXEC SQL
    SELECT exg_crrnt_stts
    INTO   :c_exg_crrnt_temp
    FROM   exg_xchng_mstr
    WHERE  exg_xchng_cd in (:c_exg_xchng_cd,'NSE','BSE')
    AND    exg_crrnt_stts = 'O'
    AND    rownum <= 1;

  if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
		strcpy ( c_msg, "Error in selecting from Exchange master");
    fn_errlog(c_ServiceName, "S31010", SQLMSG, c_err_msg);
    fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
    destroy_bat();
  }

	if( c_exg_crrnt_temp == 'O' ) 
	{
		strcpy ( c_msg, "Revaluation for Market Hour can not be run" );
		fn_errlog(c_ServiceName, "S31015", c_msg, c_err_msg);
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
    destroy_bat();	
	} 

	/*** Ver 2.6 Ends ***/ 


	/*** Ver 2.2 Starts ***/

	EXEC SQL
       SELECT PPP_PLG_OPNCLS_FLG
       INTO   :c_opncls_flg
       FROM   PPP_PAR_PLG_PRMTR;

  if( SQLCODE != 0 )
  {
    fn_userlog( c_ServiceName,"Unable to select PPP open close flag.." );
    fn_errlog(c_ServiceName, "S31020", SQLMSG, c_err_msg);
    fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
    destroy_bat();
  }
	/*** Ver 2.2 Ends   ***/

  /** Ver 1.3 Introducing Audit Table **/

	i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
	{
		fn_errlog(c_ServiceName, "S31025", LIBMSG, c_err_msg);
		fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
		destroy_bat();
	}
 
  EXEC SQL
					INSERT INTO audit_prog_runstts
								(APR_PROG_NAME,											/*** Ver 2.0 ***/
								 APR_TIME,													/*** Ver 2.0 ***/
								 APR_SUCC_FLG,                      /*** Ver 2.0 ***/
                 APR_XCHNG_CD)											/*** Ver 2.8 ***/
					VALUES (
										:c_ServiceName,
										sysdate,
										'N',
                    :c_exg_xchng_cd                 /*** Ver 2.8 ***/
									);

	if( SQLCODE != 0 )	
	{
		fn_errlog(c_ServiceName, "S31030", SQLMSG, c_err_msg);
		fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    destroy_bat();
	}

	/*** Ver 2.2 Starts ***/

	if ( c_opncls_flg != 'Y')
  {
    fn_userlog( c_ServiceName,"Parameter Table is locked.." );
		fn_userlog( c_ServiceName,"Marking all the CHM records as Failed ..." );


		EXEC SQL
       UPDATE chm_coll_haircut_mstr
       SET    chm_prcsd_flg = 'F'
       WHERE trunc(chm_trd_date) = trunc(sysdate)
       AND   chm_run_no  = (  SELECT MAX(chm_run_no)
                            FROM   chm_coll_haircut_mstr
                            WHERE  trunc(chm_trd_date) = trunc(sysdate)
                            AND   chm_prcsd_flg  = 'I'
                            AND   chm_xchng_cd = :c_exg_xchng_cd /** ver 2.8 **/
                         )
       /** AND     trim(chm_series) in ('EQ','BE') ** Commented in Ver 2.8 **/
       AND     chm_xchng_cd = :c_exg_xchng_cd  /** Change from NFO in Ver 2.8 **/ 
       AND     chm_prcsd_flg  = 'I' ;

		if ( SQLCODE != 0 && SQLCODE!= NO_DATA_FOUND )
		{
			fn_errlog( c_ServiceName, "S31035",SQLMSG,c_err_msg);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			return(FAILURE);
		}

		fn_updt_audittab( c_flg );
		sprintf ( c_msg , "Kindly run the process after sometime.." );
		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
		destroy_bat();

  }


	EXEC SQL
  UPDATE  PPP_PAR_PLG_PRMTR
  SET     PPP_PLG_OPNCLS_FLG = 'N';

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31040", SQLMSG, c_err_msg);
    fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_updt_audittab( c_flg );    
    destroy_bat();
  }

	/*** Ver 2.2 Ends   ***/


	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
	{
		fn_errlog(c_ServiceName, "S31045", LIBMSG, c_err_msg);
		fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		destroy_bat();
	}

	/**** Ver 1.6 commented ****************
	EXEC SQL
     SELECT exg_crrnt_stts
     INTO   :c_exg_crrnt_stts
     FROM   exg_xchng_mstr
     WHERE  exg_xchng_cd = :c_exg_xchng_cd;

   if( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31050", SQLMSG, c_err_msg);
    fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_updt_audittab( c_flg );
    destroy_bat();
  }
	****** Ver 1.6 comment ends ************/

	/********** Ver 1.6 EQ SAM ************************/
  EXEC SQL
     SELECT exg_crrnt_stts  
     INTO   :c_exg_crrnt_stts
     FROM   exg_xchng_mstr
     WHERE  exg_xchng_cd in (:c_exg_xchng_cd,'NSE','BSE')
		 AND exg_crrnt_stts = 'O'
		 AND		rownum <= 1;

  if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog(c_ServiceName, "S31055", SQLMSG, c_err_msg);
    fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_updt_audittab( c_flg );
    destroy_bat();
  }

	if(SQLCODE == NO_DATA_FOUND)
	{
		c_exg_crrnt_stts ='C' ;
	}
	/******* Ver 1.6 ends ****************************/
  
	fn_userlog( c_ServiceName,"c_exg_crrnt_stts :%c:"  ,c_exg_crrnt_stts);

  if( c_exg_crrnt_stts != 'O' && c_run_mode == MARKET )
  {
    strcpy ( c_msg, "Revaluation for Market Hour can not be run during Non-Market hours" );
    fn_errlog(c_ServiceName, "S31060", c_msg, c_err_msg);
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
    fn_updt_audittab( c_flg );
    destroy_bat();
  }

	/***  Ver 2.2 Starts ****/


	i_hair_rec = 0 ;

	EXEC SQL
      SELECT count(*)
			INTO   :i_hair_rec 
			FROM   chm_coll_haircut_mstr 
			WHERE  chm_run_no  = (  SELECT MAX(chm_run_no)
                              FROM   chm_coll_haircut_mstr
                              WHERE  trunc(chm_trd_date) = trunc(sysdate)
                              AND    chm_prcsd_flg  = 'I'
                              AND    chm_xchng_cd = :c_exg_xchng_cd /** ver 2.8 **/
                           )
			 AND trunc(chm_trd_date) = trunc(sysdate)
			 /** AND     trim(chm_series) in ('EQ','BE') ** Commented in Ver 2.8 **/
       AND     chm_xchng_cd = :c_exg_xchng_cd /** Change from 'NFO' in Ver 2.8 **/
       AND     chm_prcsd_flg  = 'I' ;

	if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog(c_ServiceName, "S31065", SQLMSG, c_err_msg);
    fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_updt_audittab( c_flg );
    destroy_bat();
  }


	/***  Ver 2.2 Ends   ****/

 
  /** Function call to update LTQ_PLG_RT in accordance with EOD - MARKET run **/

	i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
	{
		fn_errlog(c_ServiceName, "S31070", LIBMSG, c_err_msg);
		fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
    fn_updt_audittab( c_flg );
		destroy_bat();
	}

  i_ch_val = fn_upd_plgrt( c_run_mode );

  if( i_ch_val == -1 )
  {
    strcpy ( c_msg, "Error in updating Pledge Rate of all BSE scripts" );
		fn_errlog( c_ServiceName, "S31075", c_msg, c_err_msg );
		fn_bat_pst_msg_fno( c_ServiceName,c_err_msg,c_tag );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_updt_audittab( c_flg );
		destroy_bat();
  }

	/*** Ver 2.2 Starts ***/

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog(c_ServiceName," i_hair_rec :%d:",i_hair_rec);
	}

	if ( i_hair_rec > 0 )
	{

		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog(c_ServiceName," Calling fn_upd_haircut function");
		}

  	i_ch_val = fn_upd_haircut( c_exg_xchng_cd ); /** c_exg_xchng_cd Added in Ver 2.8 **/

  	if( i_ch_val == -1 )
  	{
    	strcpy ( c_msg, "Error while updating haircut percentage ..." );
			fn_errlog( c_ServiceName, "S31080", c_msg, c_err_msg );
			fn_bat_pst_msg_fno( c_ServiceName,c_err_msg,c_tag );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	fn_updt_audittab( c_flg );
			destroy_bat();
  	}
	}
	/*** Ver 2.2 Ends ***/

			fn_userlog(c_ServiceName," Before commit...");
	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
	{
		fn_errlog( c_ServiceName, "S31085", LIBMSG, c_err_msg );
		fn_bat_pst_msg_fno( c_ServiceName,c_err_msg,c_tag );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_updt_audittab( c_flg );
		destroy_bat();
	}
			fn_userlog(c_ServiceName," After commit...");

  /** End of Ver 1.3 **/


	/***************** Ver 1.8 Starts ************/

	/***  Commented In ver 2.1 
	i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31090", LIBMSG, c_err_msg);
    fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
    fn_updt_audittab( c_flg );
    destroy_bat();
  }
	*****/


  EXEC SQL
	/** Ver 2.1 ***/
       /***DELETE FROM VAM_VALUES_TO_APPLY_MSTR;***/	
       TRUNCATE TABLE VAM_VALUES_TO_APPLY_MSTR;

  if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog(c_ServiceName, "S31095", SQLMSG, c_err_msg);
    fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_updt_audittab( c_flg );
    destroy_bat();
  }

	/***** Commented In ver 2.1
	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "S31100", LIBMSG, c_err_msg );
    fn_bat_pst_msg_fno( c_ServiceName,c_err_msg,c_tag );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_updt_audittab( c_flg );
    destroy_bat();
  }

	*********/


  /***************** Ver 1.8 Ends ************/


  /******************** Selecting All  Match Accounts **********************/


	EXEC SQL
	/** Ver 2.1 ***/
	/**DELETE TCM_TEMP_CLM_MTCH_ACCNT;**/
	TRUNCATE TABLE TCM_TEMP_CLM_MTCH_ACCNT;

	i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
	{
		fn_errlog(c_ServiceName, "S31105", LIBMSG, c_err_msg);
		fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
    fn_updt_audittab( c_flg );    /* Ver 1.3 */
		destroy_bat();
	}

	EXEC SQL
	INSERT INTO	TCM_TEMP_CLM_MTCH_ACCNT
	(
		SELECT 	distinct DBD_CLM_MTCH_ACCNT 
		FROM 		DBD_DP_BLCK_DTLS
		/*** WHERE 	(nvl(DBD_PLG_REQ_QTY,0)  + nvl(DBD_TIFP_QTY,0) + nvl(DBD_BLOCK_FOR_SALE,0)) >0 ***/	/*** Ver 2.1 ***/
		/** WHERE 	(DBD_PLG_REQ_QTY  + DBD_TIFP_QTY + DBD_BLOCK_FOR_SALE) >0 **/ /** Commented in Ver 2.5 **/
				WHERE (DBD_SAM_BLCKD_QTY + DBD_BLOCK_FOR_SALE) > 0
	);

	if( SQLCODE != 0 )	
	{
		fn_errlog(c_ServiceName, "S31110", SQLMSG, c_err_msg);
		fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_updt_audittab( c_flg );    /* Ver 1.3 */
    destroy_bat();
	}

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
	{
		 fn_errlog(c_ServiceName, "S31115", LIBMSG, c_err_msg);
		 fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
		 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     fn_updt_audittab( c_flg );    /* Ver 1.3 */
		 destroy_bat();
	}

	l_count = 0;
	EXEC SQL
	SELECT count(*)
	INTO   :l_count
	FROM    TCM_TEMP_CLM_MTCH_ACCNT;

	if(SQLCODE != 0)
	{
		fn_errlog(c_ServiceName, "S31120", SQLMSG, c_err_msg);
		fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_updt_audittab( c_flg );    /* Ver 1.3 */
		destroy_bat();
	}

	if( l_count <= 0 )
	{
    c_flg = 'P';
		strcpy(c_msg,"No Data to Process....");
		fn_userlog(c_ServiceName,c_msg);
		fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_updt_audittab( c_flg );    /* Ver 1.3 */
		destroy_bat();
	}

	fn_userlog(c_ServiceName,"No of records to be process are :%ld:",l_count);

/**** Added for Ver 2.1 ***/

	EXEC SQL
		DECLARE cur_mtch_accnt CURSOR FOR
		SELECT TCM_CLM_MTCH_ACCNT, NVL(CLB_BNK_ACCT_NMBR,'NA') 
		FROM CLB_BNK_ACCTS, TCM_TEMP_CLM_MTCH_ACCNT
		WHERE 
		TCM_CLM_MTCH_ACCNT = CLB_CLM_MTCH_ACCNT(+);

		if ( SQLCODE != 0 )
		{
			fn_errlog(c_ServiceName, "S31125", SQLMSG, c_err_msg);
			fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
			return -1;
		}

		EXEC SQL OPEN cur_mtch_accnt;

		if ( SQLCODE != 0 )
		{
			fn_errlog(c_ServiceName, "S31130", SQLMSG, c_err_msg);
			fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
			return -1;
		}

/**** Added for Ver 2.1 ***/


	for(i=0; i < l_count; i++)						/*for Each Match Account*/
	{

			d_plg_amt =0;
			NULLCHAR(c_mtch_accnt);	

			/****************** Select Match Account to Process ******************/

			/*** Commented for Ver 2.1 ****
			
			EXEC SQL
			SELECT 	TCM_CLM_MTCH_ACCNT
			INTO  	:c_mtch_accnt 
			FROM		TCM_TEMP_CLM_MTCH_ACCNT
			WHERE		rownum < 2 ;
			
			*** Commented for Ver 2.1 ****/

			/**** Changed for Ver 2.1 ****/

			NULLCHAR(c_bnk_accnt);
	
			EXEC SQL FETCH cur_mtch_accnt
				INTO	:c_mtch_accnt,
					:c_bnk_accnt;
				

			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
			{
				EXEC SQL CLOSE cur_mtch_accnt;
			 	fn_errlog(c_ServiceName, "S31135", SQLMSG, c_err_msg);
				fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
				fn_updt_audittab( c_flg );    /* Ver 1.3 */
				destroy_bat();
			}

			if( SQLCODE == NO_DATA_FOUND )
			{
				EXEC SQL CLOSE cur_mtch_accnt;
				break;
			}
			/**** Changed end for Ver 2.1 ****/


			if( DEBUG_MSG_LVL_3 )	/*** Ver 2.1 ***/
			{
			fn_userlog(c_ServiceName,"Match Accnt :%s:",c_mtch_accnt);
			}

			/*** Commented for Ver 2.1 ****

			************************** begin transaction **************************


			i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
			if ( i_trnsctn == -1 )
			{
				fn_errlog(c_ServiceName, "S70040",LIBMSG,c_err_msg);
				fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
        fn_updt_audittab( c_flg );    * Ver 1.3 *
				destroy_bat();
			}

			
			EXEC SQL
			DELETE TCM_TEMP_CLM_MTCH_ACCNT
			WHERE   rownum < 2 ;
			

      if ( SQLCODE != 0 )
      {
				fn_errlog(c_ServiceName, "S31140", SQLMSG, c_err_msg);
        fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
        fn_updt_audittab( c_flg );    * Ver 1.3 *
        destroy_bat();
      }


			************************** Commit Transaction *************************


			
			if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
			{
				 fn_errlog(c_ServiceName, "S31145", LIBMSG, c_err_msg);
				 fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
				 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
         fn_updt_audittab( c_flg );    * Ver 1.3 *
				 destroy_bat();
			}

			*** Commented end for Ver 2.1 ****/


			/************************** begin transaction **************************/


/*************** Commented for ver 2.1 ***********
			fn_userlog(c_ServiceName," Begin transcation for Match :%s:",c_mtch_accnt);
      i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

			fn_userlog(c_ServiceName,"i_trnsctn after begin == :%d:",i_trnsctn); 
      if ( i_trnsctn == -1 )
      {
        fn_errlog(c_ServiceName, "S31150", LIBMSG, c_err_msg);
        fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
        fn_updt_audittab( c_flg );    * Ver 1.3 *
        destroy_bat();
      }

***************/

      /*****************************  lock user  **************************/

      i_returncode = fn_lock_usr( c_ServiceName, c_mtch_accnt );

      if( i_returncode != 0 )
      {
				EXEC SQL ROLLBACK;	/*** Ver 2.1 ***/
        fn_errlog(c_ServiceName, "S31155", LIBMSG, c_err_msg);
        fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
        /****fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );**/ /*** Ver 2.1 ***/
        fn_updt_audittab( c_flg );    /* Ver 1.3 */
        destroy_bat();
      }

      /*** Added for Ver 3.2 ***/
      i_returncode = fn_lock_fno( c_ServiceName, c_mtch_accnt );

      if( i_returncode != 0 )
      {
        EXEC SQL ROLLBACK;
        fn_errlog(c_ServiceName, "S31160", LIBMSG, c_err_msg);
        fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
        fn_updt_audittab( c_flg );
        destroy_bat();
      }
      /** Ver 3.2 **/

			/************* Selecting All Scrips & its pledge Quantity **************/


			/***********************************************************************
				we dont reduce DBD_INV_REQ_QTY & DBD_INV_COV_QTY from TIFP qty as it 
				have been reduce at the time of spot sell. So we dont need to reduce
				it again.Block for sale qty is added to TIFP qty as 
				money is not recovered from client. 
			***********************************************************************/

			EXEC SQL
			DECLARE cur_scrip_pldg_dtls CURSOR FOR
			SELECT	DBD_STCK_CD, PLG_QTY
			FROM		(
								SELECT		DBD_STCK_CD ,
													(
														SUM( 			/** 	nvl(DBD_PLG_REQ_QTY,0)  +	nvl(DBD_TIFP_QTY,0) Commented in Ver 2.5 **/
																	+ nvl(DBD_SAM_BLCKD_QTY,0)
																	+ nvl(DBD_BLOCK_FOR_SALE,0)	 
																	- nvl(DBD_REV_REQ_QTY,0)- nvl(DBD_REV_COV_QTY,0) /** Commented in Ver 2.5 **//** Uncomment for Ver 2.9 ***/
																)
													) as PLG_QTY
								FROM			DBD_DP_BLCK_DTLS
								WHERE			DBD_CLM_MTCH_ACCNT = :c_mtch_accnt 
								GROUP BY 	DBD_STCK_CD
							)
			WHERE PLG_QTY > 0;

			EXEC SQL OPEN cur_scrip_pldg_dtls;

			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
			{
				EXEC SQL ROLLBACK;	/*** Ver 2.1 ***/
				EXEC SQL CLOSE cur_scrip_pldg_dtls;
				fn_errlog(c_ServiceName, "S31165", SQLMSG, c_err_msg);
				fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
        /****fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );**/ /*** Ver 2.1 ***/
        fn_updt_audittab( c_flg );    /* Ver 1.3 */
				destroy_bat();
			}

			if ( SQLCODE == NO_DATA_FOUND)
			{
					EXEC SQL ROLLBACK;	/*** Ver 2.1 ***/
					EXEC SQL CLOSE cur_scrip_pldg_dtls;
					fn_errlog(c_ServiceName, "S31170", SQLMSG, c_err_msg);
					strcpy(c_msg,"No Data Found in DBD Skipping Clinet");
					fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
					fn_userlog(c_ServiceName,c_msg);
        	/****fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );**/ /*** Ver 2.1 ***/
					continue;	
			}

			/*************** Calculate Total Limit for collateral of client ************/

			d_tot_plg_amt = 0;
			flag = 0;
			count = 0;
			while (1)									/*for each scrip*/
			{
					NULLCHAR(c_stck_code);
					l_pldg_qty = 0;
					d_plg_amt = 0;
					d_diff_amt = 0;

					EXEC SQL
					FETCH cur_scrip_pldg_dtls
					INTO	:c_stck_code,
								:l_pldg_qty ;	

					
					if( SQLCODE == NO_DATA_FOUND )
					{
						EXEC SQL CLOSE cur_scrip_pldg_dtls;

						if(count == 0)
							flag=1;

						break;
					}

					if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
					{
						EXEC SQL ROLLBACK;	/*** Ver 2.1 ***/
						EXEC SQL CLOSE cur_scrip_pldg_dtls;
						fn_errlog(c_ServiceName, "S31175", SQLMSG, c_err_msg);
						fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
        		/****fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );**/ /*** Ver 2.1 ***/
            fn_updt_audittab( c_flg );    /* Ver 1.3 */
						destroy_bat();
					}

					if( DEBUG_MSG_LVL_3 )	/*** Ver 2.1 ***/
					{
					fn_userlog(c_ServiceName,"stock code :%s:",c_stck_code);
					fn_userlog(c_ServiceName,"Pledge Qty :%ld:",l_pldg_qty);	
					}

					/***************************** Get Pledge Rate ************************/

					d_plg_rt = 0;

					EXEC SQL
					SELECT 	NVL(LTQ_PLG_RT,0)
					INTO		:d_plg_rt
					FROM 		LTQ_TRD_QT
					WHERE		LTQ_STCK_CD = :c_stck_code
					AND			LTQ_XCHNG_CD = 'BSE' ;      /* ver 1.4  NSE to BSE */
					
					if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
					{
						EXEC SQL ROLLBACK;	/*** Ver 2.1 ***/
						EXEC SQL CLOSE cur_scrip_pldg_dtls;
						fn_errlog(c_ServiceName, "S31180", SQLMSG, c_err_msg);
						fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
        		/****fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );**/ /*** Ver 2.1 ***/
            fn_updt_audittab( c_flg );    /* Ver 1.3 */
						destroy_bat();
					}

					if(SQLCODE == NO_DATA_FOUND )
					{
						EXEC SQL CLOSE cur_scrip_pldg_dtls;
						fn_errlog(c_ServiceName, "S31185", SQLMSG, c_err_msg);
						fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
						flag =1; /** Skipping from outer loop */
						break;
					}

					if( DEBUG_MSG_LVL_3 )	/*** Ver 2.1 ***/
					{
					fn_userlog(c_ServiceName,"The Pledge Rate :%lf:",d_plg_rt );
					}
					/************************* Get the haircut % **********************/

					d_plg_haircut = 0;

					/**** Ver 1.6 Eq SAM first get haircut from client level haircut master ***/


					/*** Query modified for Ver 2.1 ****/
					EXEC SQL
				  /**		SELECT NVL(CHM_HAIRCUT,NVL(STK_PLG_HAIRCUT,0))   *** commented in Ver 2.7 ****/
            SELECT GREATEST(NVL(CHM_HAIRCUT,0),NVL(STK_PLG_HAIRCUT,0))  /*** change in Ver 2.7 ***/
						into	:d_plg_haircut
						FROM	CHM_CLNT_HAIRCUT_MSTR, STK_STK_MSTR
						WHERE STK_STCK_CD = CHM_STCK_CD(+)
						AND CHM_CLM_MTCH_ACCNT(+)	=	:c_mtch_accnt
						AND STK_STCK_CD		=	:c_stck_code;

    
					if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
					{
						EXEC SQL ROLLBACK;	/*** Ver 2.1 ***/
						EXEC SQL CLOSE cur_scrip_pldg_dtls;
            fn_errlog(c_ServiceName, "S31190", SQLMSG, c_err_msg);
            fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
        		/****fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );**/ /*** Ver 2.1 ***/
            fn_updt_audittab( c_flg );    /* Ver 1.3 */
            destroy_bat();
          }

	  						if(SQLCODE == NO_DATA_FOUND )
						{
							EXEC SQL CLOSE cur_scrip_pldg_dtls;
							fn_errlog(c_ServiceName,"S70012",SQLMSG,c_err_msg);
							fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
							flag =1; /** Skipping from outer loop */
							break; 
						}


					/**** Ver 1.6 EQ SAM ends *****************/

					/*** Commented for Ver 2.1 *****
					if(SQLCODE == NO_DATA_FOUND)	** V1.6 added condition if client level haircut not defined**
					{
						EXEC SQL
						SELECT  NVL(STK_PLG_HAIRCUT,0)
						INTO    :d_plg_haircut
						FROM    STK_STK_MSTR
						WHERE   STK_STCK_CD = :c_stck_code;

						if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
						{
							EXEC SQL CLOSE cur_scrip_pldg_dtls;
							fn_errlog(c_ServiceName, "S31195", SQLMSG, c_err_msg);
							fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
        			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							fn_updt_audittab( c_flg );   * Ver 1.3 *
							destroy_bat();
						}

						if(SQLCODE == NO_DATA_FOUND )
						{
							EXEC SQL CLOSE cur_scrip_pldg_dtls;
							fn_errlog(c_ServiceName,"S70012",SQLMSG,c_err_msg);
							fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
							flag =1; ** Skipping from outer loop *
							break; 
						}
					}
					*************** Commented End for Ver 2.1 *****/

					if( DEBUG_MSG_LVL_3 )	/*** Ver 2.1 ***/
					{
					fn_userlog(c_ServiceName,"HairCut :%lf:",d_plg_haircut);
					}

				/***** Calculating pledge amount for scrip after deducting haircut ***/

					if(d_plg_rt <= 0 || l_pldg_qty <= 0 || d_plg_haircut <= 0)
					{
							EXEC SQL CLOSE cur_scrip_pldg_dtls;
							strcpy(c_msg,"d_plg_rt or l_pldg_qty or d_plg_haircut is zero or negative");
            	fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
							flag = 1;
							break;
					}

					d_plg_amt = 0;
					d_plg_amt = ( d_plg_rt * l_pldg_qty ) * (	1 - (d_plg_haircut/100) ) ;

				/********* adding this pledge amount to total pledge amount ********/

			fn_userlog(c_ServiceName,"d_plg_amt   Is :%lf:",d_plg_amt);
					d_tot_plg_amt += d_plg_amt ;

					count++;
			}		/******** End  loop  Each Script *********/

			d_tot_plg_amt = d_tot_plg_amt*100;  /******* Convert it to Paisa *******/

			if( DEBUG_MSG_LVL_3 )	/*** Ver 2.1 ***/
			{
			fn_userlog(c_ServiceName,"Current Total Pledge amount :%lf:",d_tot_plg_amt);
			}

			if(flag == 1)
			{
					EXEC SQL ROLLBACK;	/** Ver 2.1 **/
					strcpy(c_msg,"No data Found skipping mtch Account.....");
          fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
					fn_userlog(c_ServiceName,c_msg);
					flag = 0;
					/*****fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );***/ /** Ver 2.1 ***/
					continue;
			}

			/**************  Get current Limit position of client **************/

			/*** Ver 1.6 commented ******
			EXEC SQL
			SELECT 	NVL(FAB_PLG_AMT,0),
							NVL(FAB_ALCTD_AMT,0),
							NVL(FAB_BFT_AMT,0)
			INTO		:d_prev_plg_amt,
							:d_alctd_amt,
							:d_bft_amt
			FROM		FAB_FO_ALC_BFT_SMRY
			WHERE		FAB_CLM_MTCH_ACCNT = :c_mtch_accnt ;
			******** Ver 1.6 ends ******/

			/*** ver 1.6 starts ********/
		
			fn_userlog( c_ServiceName, "Before update of match account  [%s]",c_mtch_accnt);

			EXEC SQL
				SELECT  NVL(FAB_PLG_AMT,0) + nvl(FAB_NWB_AMT,0) + nvl(EAB_PLG_AMT,0)*100 + NVL(CDX.CAB_PLG_AMT,0)*100 +NVL(MCO.CAB_PLG_AMT,0) , /** CAB_PLG_AMT added in Ver 3.0 **/
              	NVL(FAB_ALCTD_AMT,0),
              	NVL(FAB_BFT_AMT,0)
      	INTO    :d_prev_plg_amt,
              	:d_alctd_amt,
              	:d_bft_amt
      	FROM    FAB_FO_ALC_BFT_SMRY , EAB_EQ_ALC_BFT_SMRY,CAB_CDX_ALC_BFT_SMRY CDX, CAB_COD_ALC_BFT_SMRY MCO /** CAB_CDX_ALC_BFT_SMRY CAB_COD_ALC_BFT_SMRY  added in Ver 3.0 **/
      	WHERE   FAB_CLM_MTCH_ACCNT = :c_mtch_accnt 
				AND			FAB_CLM_MTCH_ACCNT = EAB_CLM_MTCH_ACCNT
        AND     FAB_CLM_MTCH_ACCNT = CDX.CAB_CLM_MTCH_ACCNT(+)   /** Added in Ver 3.0 **/
        AND     FAB_CLM_MTCH_ACCNT = MCO.CAB_CLM_MTCH_ACCNT(+);  /** Added in Ver 3.0 **/
			/*** ver 1.6 ends ********/

			if( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND)
			{
				EXEC SQL ROLLBACK;	/** Ver 2.1 ***/
				fn_errlog(c_ServiceName, "S31200", SQLMSG, c_err_msg);
				fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
				/****fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );***/ /** Ver 2.1 **/
				continue;
			}

			if(SQLCODE == NO_DATA_FOUND)
			{
				EXEC SQL ROLLBACK;	/*** Ver 2.1 ***/
				fn_errlog(c_ServiceName, "S31205", SQLMSG, c_err_msg);
				strcpy(c_err_msg,"Pledge Amt not found for client Skipping ....");
				fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
				/***fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); Ver 2.1 ***/
				continue;
			}

			/*** ver 1.6 rounding of pledge amount **/

			if((long long)(d_tot_plg_amt * 100 ) % 100 > 50)
      {
      	d_tot_plg_amt = d_tot_plg_amt + 1.0;

        if(DEBUG_MSG_LVL_3){
           fn_userlog( c_ServiceName, "The rounded off amount is [%lf]",d_tot_plg_amt);
        }
      }
			/** ver 1.6 ends **/

			/* calculate difference of previous pledge amount and  new pledge amount */

			ll_tot_plg_amt = (long long) d_tot_plg_amt;			/** Ver 1.7 **/

			d_tot_plg_amt  = (double) ll_tot_plg_amt;				/** Ver 1.7 **/

			d_diff_amt = (long long) (d_tot_plg_amt -  d_prev_plg_amt); 		/** typecast to long long**/

			if( DEBUG_MSG_LVL_3 )	/*** Ver 2.1 ***/
			{
			fn_userlog(c_ServiceName,"Prvious pledge Amount:%lf:",d_prev_plg_amt);
			fn_userlog(c_ServiceName,"Total diff  :%lf:",d_diff_amt);
			}

			if((long long)d_diff_amt == 0) /***** if diff amount is zero than do not update ***/ /** typecast to long long**/
			{
				EXEC SQL ROLLBACK;	/*** Ver 2.1 ***/
				strcpy(c_msg,"No change in limit for this match id skipping");
				fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
				/****fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );****//** ver 2.1 **/

				/*** Added for Ver 3.1 **/

				i_returncode = fn_get_prev_sam(c_ServiceName,
                        									c_mtch_accnt,
                        									c_err_msg);
				if(i_returncode == -1)
				{
					EXEC SQL ROLLBACK;	
					fn_errlog(c_ServiceName, "S31210", LIBMSG, c_err_msg);
					fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
        	fn_updt_audittab( c_flg );
					destroy_bat();
				}

				EXEC SQL COMMIT;	/*** Added for Ver 2.1 ***/
				/** End for Ver 3.1 **/
				continue;
			}


			/**** Commented for Ver 2.1 ****
			************** Get bank account no for this Match Account **********

			NULLCHAR(c_bnk_accnt);
			EXEC SQL
			SELECT  CLB_BNK_ACCT_NMBR
			INTO    :c_bnk_accnt
			FROM    CLB_BNK_ACCTS
			WHERE   CLB_CLM_MTCH_ACCNT =:c_mtch_accnt ;

			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
			{
				fn_errlog(c_ServiceName, "S31215", SQLMSG, c_err_msg);
				fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_updt_audittab( c_flg );    * Ver 1.3 *
				destroy_bat();
			}

			if(SQLCODE == NO_DATA_FOUND)
			************** Commented end for Ver 2.1 ****/
			if(strcpy(c_bnk_accnt,"NA") == 0)		/** Condition changed for Ver 2.1 ***/
			{
				fn_errlog(c_ServiceName, "S31220", SQLMSG, c_err_msg);
				strcpy(c_err_msg,"Bank Account not found  for client Skipping ....");
				fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				continue;
			}


			if( DEBUG_MSG_LVL_3 )	/*** Ver 2.1 ***/
			{
			fn_userlog(c_ServiceName,"Bank Account Number :%s:",c_bnk_accnt);
			}


			strcpy(c_narration, "Change by Revaluation");

			/********************** Insert Data Into Log Table *********************

			********* Commented in Ver 1.6 for equity sam **********
			EXEC SQL
			INSERT  INTO FAL_FO_ALCBFT_LOG
			(
				FAL_CLM_MTCH_ACCNT,
				FAL_BNK_ACCNT,
				FAL_ALCTD_AMT,
				FAL_BFT_AMT,
				FAL_TRN_DT,
				FAL_OLD_PLG_AMT,
				FAL_PLG_CHG_AMT,
				FAL_NARRATION
			)
			VALUES
			(
				:c_mtch_accnt,
				:c_bnk_accnt,
				:d_alctd_amt,
				:d_bft_amt,
				* to_date(sysdate ,'DD-Mon-YYYY hh24:mi:ss'), *
        sysdate,                                          * Fixed in Ver 1.3 *
				:d_prev_plg_amt,
				:d_diff_amt,
				:c_narration
			) ;
			
			if ( SQLCODE != 0 )
			{
				fn_errlog(c_ServiceName, "S31225", SQLMSG, c_err_msg);
				fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_updt_audittab( c_flg );    * Ver 1.3 *
				destroy_bat();
			}
		

			************************* update new pledge amount ******************

			EXEC SQL
				UPDATE 	FAB_FO_ALC_BFT_SMRY
				SET			FAB_PLG_AMT = round(:d_tot_plg_amt)
				WHERE		FAB_CLM_MTCH_ACCNT = :c_mtch_accnt;

			if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND)
			{
				fn_errlog(c_ServiceName, "S31230", SQLMSG, c_err_msg);
				fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); 
        fn_updt_audittab( c_flg );    * Ver 1.3 *
				destroy_bat();
			}

			if(SQLCODE == NO_DATA_FOUND)
			{
				fn_errlog(c_ServiceName, "S31235", SQLMSG, c_err_msg);
				strcpy(c_err_msg,"Pledge Amt can not updated for client Skipping ....");
				fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				continue;
			}

			********************** Comment Ver 1.6 ends *************************/


			/****** Ver 1.6 Equity SAM starts ***************/


			if(d_diff_amt < 0)
			{
				i_returncode = fn_reduce_sam_reval(c_ServiceName,
                        									c_mtch_accnt,
                        									fabs(d_diff_amt),
                        									c_narration,
                        									c_err_msg);
				if(i_returncode == -1)
				{
					EXEC SQL ROLLBACK;	/*** Ver 2.1 ***/
					fn_errlog(c_ServiceName, "S31240", LIBMSG, c_err_msg);
					fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
					/*** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );*** ver 2.1 ***/
        	fn_updt_audittab( c_flg );
					destroy_bat();
				}

			}
			else if (d_diff_amt >0 )
			{
				i_returncode = fn_add_sam_limit(c_ServiceName,
                                          c_mtch_accnt,
                                          d_diff_amt,
                                          c_narration,
                                          c_err_msg);

				if(i_returncode == -1)
        {
					EXEC SQL ROLLBACK;	/*** Ver 2.1 ***/
          fn_errlog(c_ServiceName, "S31245", LIBMSG, c_err_msg);
          fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
          /** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );*** Ver 2.1 ***/
          fn_updt_audittab( c_flg );
          destroy_bat();
        }
			}

			/******* Ver 1.6 Ends **************/
				/*** Added for Ver 3.1 **/
				i_returncode = fn_get_prev_sam(c_ServiceName,
                        									c_mtch_accnt,
                        									c_err_msg);
				if(i_returncode == -1)
				{
					EXEC SQL ROLLBACK;	
					fn_errlog(c_ServiceName, "S31250", LIBMSG, c_err_msg);
					fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
        	fn_updt_audittab( c_flg );
					destroy_bat();
				}
				/** End for Ver 3.1 **/




			/************* User will be unlocked becoz of commit trans ************/ 

			fn_userlog(c_ServiceName," Before commit for match account :%s:",c_mtch_accnt);
			fn_userlog(c_ServiceName,"i_trnsctn before commit == :%d:",i_trnsctn); 
			
/********* Commenter for Ver 2.1 ********
			if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
			{
				fn_errlog(c_ServiceName, "S31255", LIBMSG, c_err_msg);
				fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_updt_audittab( c_flg );    * Ver 1.3 *
				destroy_bat();
			}

	*****************/
			EXEC SQL COMMIT;	/*** Added for Ver 2.1 ***/
			fn_userlog(c_ServiceName," After commit for match account :%s:",c_mtch_accnt);

			if( DEBUG_MSG_LVL_3 )	/*** Ver 2.1 ***/
			{
			fn_userlog(c_ServiceName,"Limit Updated :%lf:",d_tot_plg_amt);
			}

	}/*End of Every Match Account */

	/************************** 1.1 begin transaction **************************/

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
	if ( i_trnsctn == -1 )
	{
		fn_errlog(c_ServiceName, "S70040",LIBMSG,c_err_msg);
		fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
    fn_updt_audittab( c_flg );    /* Ver 1.3 */
		destroy_bat();
	}

	EXEC SQL
	UPDATE 	PPP_PAR_PLG_PRMTR
	SET			PPP_PLG_OPNCLS_FLG = 'Y';

	if ( SQLCODE != 0 )
	{
		fn_errlog(c_ServiceName, "S31260", SQLMSG, c_err_msg);
		fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_updt_audittab( c_flg );    /* Ver 1.3 */
		destroy_bat();
	}



	/****** Ver 1.6 To record the pragram is run ***/
	EXEC SQL
    INSERT INTO
      PRD_PGM_RUN_DTLS
      ( PRD_PGM_NAME,
        PRD_TRD_DT,
        PRD_INS_DT
      )
    VALUES
      ('bat_revaluation',
       trunc(sysdate),
       sysdate
      );

	if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31265", SQLMSG, c_err_msg);
    fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_updt_audittab( c_flg );   /* Ver 1.3 */
    destroy_bat();
  }
	/****** Ver 1.6 ends ***/

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
	{
		fn_errlog(c_ServiceName, "S31270", LIBMSG, c_err_msg);
		fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_updt_audittab( c_flg );    /* Ver 1.3 */
		destroy_bat();
	}
 
  c_flg = 'P';                 /* Ver 1.3 */
  fn_updt_audittab( c_flg );    /* Ver 1.3 */

	fn_userlog(c_ServiceName,"Pledge Gate Opened" );
	fn_userlog(c_ServiceName,"ALL Done");
  fn_bat_pst_msg_fno(c_ServiceName,"ALL DONE ",c_tag);
  destroy_bat();
}

/** Ver 1.3 starts **/
void fn_updt_audittab ( char c_flg )
{
  char    c_err_msg[256];
	char 		c_ServiceName[33];
	char    c_tag[32];

	int 		i_trnsctn;

	strcpy ( c_ServiceName, "bat_revaluation" );
	sprintf(c_tag,"%s_%s",c_ServiceName, "NFO" );

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
	if ( i_trnsctn == -1 )
	{
		fn_errlog(c_ServiceName, "S31275",LIBMSG,c_err_msg);
		fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
		destroy_bat();
	}

  EXEC SQL
    UPDATE audit_prog_runstts
    SET    apr_succ_flg = :c_flg
    WHERE  apr_prog_name = :c_ServiceName
    AND    apr_time = ( SELECT max(apr_time)
                        FROM   audit_prog_runstts
                        where  apr_prog_name = :c_ServiceName );

	if ( SQLCODE != 0 )
	{
		fn_errlog(c_ServiceName, "S31280", SQLMSG, c_err_msg);
		fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		destroy_bat();
	}

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
	{
		fn_errlog(c_ServiceName, "S31285", LIBMSG, c_err_msg);
		fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		destroy_bat();
	}

}

int fn_upd_plgrt( char c_service_run )
{
  char    c_ServiceName[33];
  char    c_stck_cd[7];
  char    c_stck_cd_new[7];
	char    c_tag[32];
  char    c_msg[256];

  double  d_coll_mltplctn_fctr;
  double  d_plg_rt;
  double  d_plg_rt_old;			/***1.9 **/
  double  d_plg_rt_new;			
  double  d_plg_rt_new1;		/***1.9 ***/
	strcpy ( c_ServiceName, "bat_revaluation" );
 
	fn_userlog( c_ServiceName, "In function to update Plg Rt" );

 	EXEC SQL
      DECLARE cur_nse_scripts CURSOR FOR
      SELECT LTQ_STCK_CD, nvl(LTQ_PLG_RT,0), DECODE(:c_service_run, 'E', NVL(LTQ_CLS_PRC,0), 'M', NVL(LTQ_RT,0))	/*** Ver 2.1 ***/
      FROM   LTQ_TRD_QT
      WHERE  LTQ_XCHNG_CD = 'BSE';  /* VER 1.4 NSE to BSE */

	fn_userlog( c_ServiceName, "After cursor declare in update Plg Rt" );
  EXEC SQL OPEN cur_nse_scripts;

	fn_userlog( c_ServiceName, "After cursor open in update Plg Rt" );
  if ( SQLCODE != 0 )
  {
      EXEC SQL CLOSE cur_nse_scripts;
      fn_errlog(c_ServiceName, "S31290", SQLMSG, c_err_msg);
			fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
      return -1;
  }

	fn_userlog( c_ServiceName, "before while update Plg Rt" );
  while( 1 )
  {

    EXEC SQL
       FETCH cur_nse_scripts
       INTO  :c_stck_cd, :d_plg_rt_old, :d_plg_rt_new1;	/*** Ver 2.1 ***/

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
       EXEC SQL CLOSE cur_nse_scripts;
       fn_errlog(c_ServiceName, "S31295", SQLMSG, c_err_msg);
       fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
       return -1;
    }
    if( SQLCODE == NO_DATA_FOUND )
    {
       EXEC SQL CLOSE cur_nse_scripts;
       break;
    }

/**** Added for Ver 2.1 ****/
       EXEC SQL
          UPDATE LTQ_TRD_QT
          SET    LTQ_PLG_RT = :d_plg_rt_new1
          WHERE  LTQ_XCHNG_CD = 'BSE'  /* ver 1.4 NSE to BSE */
          AND    LTQ_STCK_CD = :c_stck_cd;
       
	if ( SQLCODE != 0 )
	{
		EXEC SQL CLOSE cur_nse_scripts;
		fn_errlog(c_ServiceName, "S31300", SQLMSG, c_err_msg);
		fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
		return -1;
	}

	EXEC SQL
 		INSERT  INTO LTQ_TRD_QT_LOG
 		(
   		LTQ_STCK_CD,
   		LTQ_XCHNG_CD,
   		LTQ_DT,
   		LTQ_PLG_RT_OLD,
   		LTQ_PLG_RT_NEW
 		)
 		VALUES
 		(
   		:c_stck_cd,
   		:c_exg_xchng_cd,
   		sysdate,
   		:d_plg_rt_old,
   		:d_plg_rt_new1
 		) ;

			
  	if ( SQLCODE != 0 )
  	{
   		EXEC SQL CLOSE cur_nse_scripts;
   		fn_errlog(c_ServiceName, "S31305", SQLMSG, c_err_msg);
   		fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
   		return -1;
  	}
	
/**** Added for Ver 2.1 ****/

/**** Commented for Ver 2.1 *****
    if( c_service_run == EOD )
    {

			if( DEBUG_MSG_LVL_3 )	*** Ver 2.1 ***
			{
			 fn_userlog(c_ServiceName,"======== EOD ======");  ** 1.5 **
			}		

			**********1.9 starts ***********


			EXEC SQL
        SELECT nvl(LTQ_PLG_RT,0)
        INTO  :d_plg_rt_old
        FROM 	LTQ_TRD_QT
        WHERE  LTQ_XCHNG_CD = 'BSE'
        AND    LTQ_STCK_CD = :c_stck_cd;

			 if ( SQLCODE != 0 )
       {
          EXEC SQL CLOSE cur_nse_scripts;
          fn_errlog(c_ServiceName, "S31310", SQLMSG, c_err_msg);
          fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
          return -1;
       }



			***********1.9 Ends *********


       EXEC SQL
          UPDATE LTQ_TRD_QT
          SET    LTQ_PLG_RT = LTQ_CLS_PRC
          WHERE  LTQ_XCHNG_CD = 'BSE'      * ver 1.4 NSE to BSE *
          AND    LTQ_STCK_CD = :c_stck_cd;
       
		   if ( SQLCODE != 0 )
			 {
					EXEC SQL CLOSE cur_nse_scripts;
					fn_errlog(c_ServiceName, "S31315", SQLMSG, c_err_msg);
					fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
					return -1;
			 }

			************* 1. 9 starts ********
				
			EXEC SQL
      SELECT nvl(LTQ_PLG_RT,0)
      INTO  :d_plg_rt_new1
      FROM LTQ_TRD_QT
      WHERE  LTQ_XCHNG_CD = 'BSE'
      AND    LTQ_STCK_CD = :c_stck_cd;

			if ( SQLCODE != 0 )
      {
          EXEC SQL CLOSE cur_nse_scripts;
          fn_errlog(c_ServiceName, "S31320", SQLMSG, c_err_msg);
          fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
          return -1;
      }


			EXEC SQL
				INSERT  INTO LTQ_TRD_QT_LOG
				(
					LTQ_STCK_CD,
					LTQ_XCHNG_CD,
					LTQ_DT,
					LTQ_PLG_RT_OLD,
					LTQ_PLG_RT_NEW
				)
				VALUES
				(
					:c_stck_cd,
				  :c_exg_xchng_cd,
					sysdate,
					:d_plg_rt_old,
					:d_plg_rt_new1
				) ;

				 if ( SQLCODE != 0 )
				 {
						EXEC SQL CLOSE cur_nse_scripts;
						fn_errlog(c_ServiceName, "S31325", SQLMSG, c_err_msg);
						fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
						return -1;
				 }


			************* 1. 9 Ends********



    }

    else if( c_service_run == MARKET )
    {
			if( DEBUG_MSG_LVL_3 )	*** Ver 2.1 ***
			{
			 fn_userlog(c_ServiceName,"======== MARKET ======");  ** 1.5 **
			}

				**************** Ver 1.9 Starts ****************

      EXEC SQL
      SELECT nvl(LTQ_PLG_RT,0)
      INTO  :d_plg_rt_old
      FROM LTQ_TRD_QT
      WHERE  LTQ_XCHNG_CD = 'BSE'
      AND    LTQ_STCK_CD = :c_stck_cd;

 			if ( SQLCODE != 0 )
 			{
     			EXEC SQL CLOSE cur_nse_scripts;
     			fn_errlog(c_ServiceName, "S31330", SQLMSG, c_err_msg);
     			fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
     			return -1;
 			}
				************* Ver 1. 9 Ends ******************


       EXEC SQL
          UPDATE LTQ_TRD_QT
          SET    LTQ_PLG_RT = LTQ_RT
          WHERE  LTQ_XCHNG_CD = 'BSE'  * ver 1.4 NSE to BSE *
          AND    LTQ_STCK_CD = :c_stck_cd;
       
			 if ( SQLCODE != 0 )
			 {
		  		EXEC SQL CLOSE cur_nse_scripts;
					fn_errlog(c_ServiceName, "S31335", SQLMSG, c_err_msg);
					fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
					return -1;
		   }

			********************* Ver 1.9 Starts ************************

      EXEC SQL
      SELECT nvl(LTQ_PLG_RT,0)
      INTO  :d_plg_rt_new1
      FROM LTQ_TRD_QT
      WHERE  LTQ_XCHNG_CD = 'BSE'
      AND    LTQ_STCK_CD = :c_stck_cd;
			

			
   		if ( SQLCODE != 0 )
   		{
       EXEC SQL CLOSE cur_nse_scripts;
       fn_errlog(c_ServiceName, "S31340", SQLMSG, c_err_msg);
       fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
       return -1;
   		}


				 EXEC SQL
 					INSERT  INTO LTQ_TRD_QT_LOG
 					(
   				LTQ_STCK_CD,
   				LTQ_XCHNG_CD,
   				LTQ_DT,
   				LTQ_PLG_RT_OLD,
   				LTQ_PLG_RT_NEW
 			)
 			VALUES
 			(
   				:c_stck_cd,
   				:c_exg_xchng_cd,
   				sysdate,
   				:d_plg_rt_old,
   				:d_plg_rt_new1
 			) ;

			
  			if ( SQLCODE != 0 )
  			{
   			EXEC SQL CLOSE cur_nse_scripts;
   			fn_errlog(c_ServiceName, "S31345", SQLMSG, c_err_msg);
   			fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
   			return -1;
  			}
			************* 1. 9 Ends********
    }******** Commented End for Ver 2.1 ********/
  }

	fn_userlog( c_ServiceName, "After while update Plg Rt" );

	/********************* Ver 1.8 Starts ************************/

	EXEC SQL
      DECLARE cur_sel_scripts CURSOR FOR
/*** Commented and Added for Ver 2.1 ***
      SELECT VAM_STCK_CD ,
             VAM_PLG_RT
      FROM   VAM_VALUES_TO_APPLY_MSTR ; 
      **** Ver 2.1 ***/
      SELECT VAM_STCK_CD ,
             VAM_PLG_RT, 
	     nvl(LTQ_PLG_RT,0)
	FROM VAM_VALUES_TO_APPLY_MSTR, LTQ_TRD_QT
	WHERE VAM_STCK_CD = LTQ_STCK_CD
	AND LTQ_XCHNG_CD = 'BSE';


  EXEC SQL OPEN  cur_sel_scripts;

  if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
      EXEC SQL CLOSE cur_nse_scripts;
      fn_errlog(c_ServiceName, "S31350", SQLMSG, c_err_msg);
      fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
      return -1;
  }


	while(1)
	{

				EXEC SQL
        FETCH cur_sel_scripts
        INTO  :c_stck_cd_new,
							:d_plg_rt_new,
							:d_plg_rt_old;	/*** Ver 2.1 ***/

    		if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    		{
							 EXEC SQL CLOSE cur_sel_scripts;
							 fn_errlog(c_ServiceName, "S31355", SQLMSG, c_err_msg);
							 fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
							 return -1;
        }
        if( SQLCODE == NO_DATA_FOUND )
        {
							 EXEC SQL CLOSE cur_sel_scripts;
							 break;
        }

/**** Commented for Ver 2.1 ****
********************* Ver 1.9 Starts ************************


		    EXEC SQL
        SELECT nvl(LTQ_PLG_RT,0)
        INTO  :d_plg_rt_old
        FROM LTQ_TRD_QT
        WHERE  LTQ_XCHNG_CD = 'BSE'
        AND    LTQ_STCK_CD = :c_stck_cd_new;
			
    		if ( SQLCODE != 0 )
    		{
       	EXEC SQL CLOSE cur_sel_scripts;
       	fn_errlog(c_ServiceName, "S31360", SQLMSG, c_err_msg);
      	 fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
       	return -1;
        }


********************* Ver 1.9 End ************************
**** Commented for Ver 2.1 ****/


				EXEC SQL
          UPDATE LTQ_TRD_QT
          SET    LTQ_PLG_RT = :d_plg_rt_new 
          WHERE  LTQ_XCHNG_CD = 'BSE'  
          AND    LTQ_STCK_CD = :c_stck_cd_new;

       if ( SQLCODE != 0 )
       {
          EXEC SQL CLOSE cur_sel_scripts;
          fn_errlog(c_ServiceName, "S31365", SQLMSG, c_err_msg);
          fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
          return -1;
       }

/********************* Ver 1.9 Starts ************************/
			

        EXEC SQL
          INSERT  INTO LTQ_TRD_QT_LOG
          (
          LTQ_STCK_CD,
          LTQ_XCHNG_CD,
          LTQ_DT,
          LTQ_PLG_RT_OLD,
          LTQ_PLG_RT_NEW
          )
          VALUES
          (
            :c_stck_cd_new,
            :c_exg_xchng_cd,
            sysdate,
            :d_plg_rt_old,
            :d_plg_rt_new
          ) ;
				
    if ( SQLCODE != 0 )
    {
       EXEC SQL CLOSE cur_sel_scripts;
       fn_errlog(c_ServiceName, "S31370", SQLMSG, c_err_msg);
       fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
       return -1;
    }
						
 }



/********************* Ver 1.9 End ************************/

	


/************************ Ver 1.8  Ends *********************/


 	EXEC SQL
     DECLARE cur_ssf_scripts CURSOR FOR
     SELECT  SSF_STCK_CD,
             SSF_COLL_MLTPLCTN_FCTR,
	     NVL(LTQ_PLG_RT,0)
     FROM    SSF_STCK_SPLT_FCTR, LTQ_TRD_QT	/*** Ver 2.1 ***/
     WHERE   SSF_XCHNG_CD = 'BSE'       /* ver 1.4 NSE to BSE */
     AND     SSF_XCHNG_CD = LTQ_XCHNG_CD	/*** Ver 2.1 ***/
     AND     SSF_STCK_CD = LTQ_STCK_CD		/*** Ver 2.1 ***/
     AND     TO_DATE( sysdate, 'dd-Mon-yyyy') BETWEEN SSF_ND_BGN_DT AND SSF_RCRD_DT
     AND     SSF_COLL_MLTPLCTN_FCTR IS NOT NULL
     AND     SSF_COLL_MLTPLCTN_FCTR <> 1;

  EXEC SQL OPEN cur_ssf_scripts;

  if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
     EXEC SQL CLOSE cur_ssf_scripts;
     fn_errlog(c_ServiceName, "S31375", SQLMSG, c_err_msg);
		 fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
     return -1;
  }
  if( SQLCODE == NO_DATA_FOUND )
  {
	   fn_userlog( c_ServiceName, "There is no SSF script" );
     EXEC SQL CLOSE cur_nse_scripts;
  }
  

  while( 1 )
  {
    EXEC SQL
       FETCH cur_ssf_scripts
       INTO  :c_stck_cd,
             :d_coll_mltplctn_fctr,
	     :d_plg_rt;		/*** Ver 2.1 ***/

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
       EXEC SQL CLOSE cur_ssf_scripts;
       fn_errlog(c_ServiceName, "S31380", SQLMSG, c_err_msg);
       fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
       return -1;
    }
    if( SQLCODE == NO_DATA_FOUND )
    {
       EXEC SQL CLOSE cur_nse_scripts;
       break;
    }

    if( DEBUG_MSG_LVL_3 )
    {
	  fn_userlog( c_ServiceName, "cur_ssf_scripts c_stck_cd |%s|" , c_stck_cd);
	  fn_userlog( c_ServiceName, "cur_ssf_scripts d_coll_mltplctn_fctr |%lf|", d_coll_mltplctn_fctr);
    }

/*** Commented for Ver 2.1 *****
		EXEC SQL
		 	 SELECT 	NVL(LTQ_PLG_RT,0)
			 INTO		  :d_plg_rt
			 FROM 		LTQ_TRD_QT
			 WHERE		LTQ_STCK_CD = :c_stck_cd
			 AND			LTQ_XCHNG_CD = 'BSE' ;   * ver 1.4 *
					
		if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
		{
		   EXEC SQL CLOSE cur_scrip_pldg_dtls;
			 fn_errlog(c_ServiceName, "S31385", SQLMSG, c_err_msg);
			 fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
       return -1;
		}

    * Please note NDF means entry in SSF where no corresponding entry in LTQ *
		if(SQLCODE == NO_DATA_FOUND )
		{
			 sprintf( c_msg,"collateral factor is present but quotes not present for |%s|", c_stck_cd );
       fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
			 continue;
	  }

******* Commented for Ver 2.1 ***/
		if( DEBUG_MSG_LVL_3 ) {
    fn_userlog( c_ServiceName, "d_plg_rt  before applying coll_mult_factor:%lf:",d_plg_rt);/* 1.5 */
    }

		 d_plg_rt_old = d_plg_rt;       /** 1.9 **/

    d_plg_rt = d_plg_rt * d_coll_mltplctn_fctr;

    if( DEBUG_MSG_LVL_3 )
    {
	  fn_userlog( c_ServiceName, "cur_ssf_scripts d_plg_rt |%lf|", d_plg_rt );
    }

    EXEC SQL
       UPDATE LTQ_TRD_QT
       SET    LTQ_PLG_RT = :d_plg_rt
       WHERE  LTQ_XCHNG_CD = 'BSE'   /* ver 1.4 */
       AND    LTQ_STCK_CD = :c_stck_cd;
       
		if ( SQLCODE != 0 )
	  {
			 EXEC SQL CLOSE cur_ssf_scripts;
			 fn_errlog(c_ServiceName, "S31390", SQLMSG, c_err_msg);
			 fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
			 return -1;
	  }

/********************* Ver 1.9 Starts ************************/

     d_plg_rt_new1 = d_plg_rt;

    EXEC SQL
        INSERT  INTO LTQ_TRD_QT_LOG
        (
          LTQ_STCK_CD,
          LTQ_XCHNG_CD,
          LTQ_DT,
          LTQ_PLG_RT_OLD,
          LTQ_PLG_RT_NEW
        )
       VALUES
       (
        :c_stck_cd,
        :c_exg_xchng_cd,
        sysdate,
        :d_plg_rt_old,
        :d_plg_rt_new1
        ) ;

	  if ( SQLCODE != 0 )
   {
      EXEC SQL CLOSE cur_ssf_scripts;
      fn_errlog(c_ServiceName, "S31395", SQLMSG, c_err_msg);
      fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
      return -1;
   }

/********************* Ver 1.9 End ************************/
  }
  return 0;
}
/**  Ver 1.3 ends **/
/*** Ver 2.2 Starts ***/
int fn_upd_haircut( char *c_xchng_cd ) /** Changed from Void to char in Ver 2.8 **/
{

	/*** Declarations Starts ***/
	char  c_ServiceName[33];
	char c_stk_cd[20];
	char c_chm_trd_date[12];
	char    c_msg[256];
	char    c_tag[32];
	double d_chm_new_haircut = 0.0 ;
	double d_stk_haircut = 0.0 ;
	int i_return_val = 0;
	long l_chm_run_no = 0;
	varchar sql_rowid[25];
	/*** Declarations Ends   ***/
    sql_cursor  sys_cursor; /** Ver 2.8 **/
 
	strcpy ( c_ServiceName, "bat_revaluation" );

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog( c_ServiceName," Inside function fn_upd_haircut");
		fn_userlog( c_ServiceName,"Value of c_upld_mode :%c:",c_upld_mode);
	}


/** Ver 2.8 Starts **/	
  EXEC SQL ALLOCATE :sys_cursor;

  if ( strcmp(c_xchng_cd,"NFO") == 0 && c_upld_mode == 'V')
  {

EXEC SQL EXECUTE    
 BEGIN              
  OPEN :sys_cursor FOR 
          SELECT distinct stk_name,
                 haircut,
                 trade_date,
                 run_no,
                 row_id
          FROM ( 
           /** SELECT  NVL(TRIM(SEM_STCK_CD),TRIM(CHM_STCK_CD)) stk_name, **//** NVL removed and also outer join removed **/
           SELECT  TRIM(SEM_STCK_CD) stk_name,
                   CHM_NEW_HAIRCUT   haircut,
									 CHM_TRD_DATE      trade_date,
									 CHM_RUN_NO        run_no,
									 CHM_COLL_HAIRCUT_MSTR.ROWID  row_id
           FROM    CHM_COLL_HAIRCUT_MSTR , sem_stck_map,ESS_SGMNT_STCK 
           WHERE   CHM_STCK_CD   = SEM_MAP_VL
					 AND     SEM_ENTTY  = 1 
           AND     SEM_STCK_CD= ESS_STCK_CD
					 AND		 ESS_XCHNG_CD = 'NSE'
           AND     ESS_XCHNG_SUB_SERIES = CHM_SERIES
					 AND     TRUNC(CHM_TRD_DATE) = TRUNC(SYSDATE)  
					 AND     CHM_RUN_NO  = ( SELECT MAX(CHM_RUN_NO) 
										    				   FROM   CHM_COLL_HAIRCUT_MSTR 
														  	   WHERE  TRUNC(CHM_TRD_DATE) = TRUNC(SYSDATE) 
																   AND    CHM_PRCSD_FLG  = 'I'
                                   AND    CHM_XCHNG_CD   = 'NFO'
														     ) 
           AND     CHM_XCHNG_CD  = 'NFO'
           AND     CHM_PRCSD_FLG = 'I'
           ORDER BY STK_NAME );
     END;
    END-EXEC;
   }
   else if ( strcmp(c_xchng_cd,"BFO") == 0 )
   {
EXEC SQL EXECUTE    
 BEGIN              
  OPEN :sys_cursor FOR
          SELECT distinct stk_name,
                 haircut,
                 trade_date,
                 run_no,
                 row_id
          FROM (
           SELECT  NVL(TRIM(SEM_STCK_CD),TRIM(CHM_STCK_CD)) stk_name,
                   CHM_NEW_HAIRCUT   haircut,
                   CHM_TRD_DATE      trade_date,
                   CHM_RUN_NO        run_no,
                   CHM_COLL_HAIRCUT_MSTR.ROWID  row_id
           FROM    CHM_COLL_HAIRCUT_MSTR , sem_stck_map
           WHERE   CHM_STCK_CD  = SEM_MAP_VL(+)
           AND     SEM_ENTTY(+) = 2
           AND     TRUNC(CHM_TRD_DATE) = TRUNC(SYSDATE)
           AND     CHM_RUN_NO  = ( SELECT MAX(CHM_RUN_NO)
                                   FROM   CHM_COLL_HAIRCUT_MSTR
                                   WHERE  TRUNC(CHM_TRD_DATE) = TRUNC(SYSDATE)
                                   AND    CHM_PRCSD_FLG  = 'I'
                                   AND    CHM_XCHNG_CD   = 'BFO'
                                 )
           AND     CHM_XCHNG_CD   = 'BFO' 
           AND     CHM_PRCSD_FLG  = 'I'
           ORDER BY STK_NAME );
     END;
    END-EXEC;
   } 
   if ( strcmp(c_xchng_cd,"NFO") == 0 && c_upld_mode == 'M')
	 {
			EXEC SQL EXECUTE    
 			BEGIN              
  		OPEN :sys_cursor FOR 
          SELECT distinct stk_name,
                 haircut,
                 trade_date,
                 run_no,
                 row_id
          FROM ( 
           SELECT  TRIM(SEM_STCK_CD) stk_name,
                   CHM_NEW_HAIRCUT   haircut,
									 CHM_TRD_DATE      trade_date,
									 CHM_RUN_NO        run_no,
									 CHM_COLL_HAIRCUT_MSTR.ROWID  row_id
           FROM    CHM_COLL_HAIRCUT_MSTR , sem_stck_map,ESS_SGMNT_STCK 
           WHERE   TRIM(CHM_STCK_CD) = TRIM(SEM_STCK_CD)
					 --AND     SEM_ENTTY  = 1 
           AND     TRIM(SEM_STCK_CD) = TRIM(ESS_STCK_CD)
					 AND		 ESS_XCHNG_CD = 'NSE'
           AND     ESS_XCHNG_SUB_SERIES = CHM_SERIES
					 AND     TRUNC(CHM_TRD_DATE) = TRUNC(SYSDATE)  
					 AND     CHM_RUN_NO  = ( SELECT MAX(CHM_RUN_NO) 
										    				   FROM   CHM_COLL_HAIRCUT_MSTR 
														  	   WHERE  TRUNC(CHM_TRD_DATE) = TRUNC(SYSDATE) 
																   AND    CHM_PRCSD_FLG  = 'I'
                                   AND    CHM_XCHNG_CD   = 'NFO'
														     ) 
           AND     CHM_XCHNG_CD  = 'NFO'
           AND     CHM_PRCSD_FLG = 'I'
           ORDER BY STK_NAME );
     END;
    END-EXEC;
	 }
   /*** Ver 2.8 Ends   ***/

   /******* Commented in Ver 2.8 ****
           SELECT  nvl(TRIM(sem_stck_cd),TRIM(chm_stck_cd)),
                   chm_new_haircut ,
                   chm_trd_date ,
                   chm_run_no ,
                   chm_coll_haircut_mstr.ROWID
           FROM    chm_coll_haircut_mstr , sem_stck_map
           WHERE  chm_stck_cd = sem_map_vl(+)
           AND     sem_entty(+) = 3
           AND trunc(chm_trd_date) = trunc(sysdate)
           AND chm_run_no  = (  SELECT MAX(chm_run_no)
                                FROM   chm_coll_haircut_mstr
                                WHERE  trunc(chm_trd_date) = trunc(sysdate)
                                AND   chm_prcsd_flg  = 'I'
                             )
           AND     trim(chm_series) in ('EQ','BE')
           AND     chm_xchng_cd = 'NFO'
           AND     chm_prcsd_flg  = 'I'
           ORDER BY chm_stck_cd;

				EXEC SQL OPEN  cur_haircut;
    ****************************************/

				if ( SQLCODE != 0 )
				{
						/** EXEC SQL CLOSE cur_haircut; ** Ver 2.8 ***/
            EXEC SQL CLOSE :sys_cursor;   /*** Ver 2.8 ***/ 
            EXEC SQL FREE  :sys_cursor;   /*** Ver 2.8 ***/ 
						fn_errlog(c_ServiceName, "S31400", SQLMSG, c_err_msg);
						fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
						return -1;
				}
		
				while( 1 )
			  {

					EXEC SQL
						 /** FETCH cur_haircut ** Ver 2.8 **/
             FETCH :sys_cursor     /*** Ver 2.8 ***/
						 INTO  :c_stk_cd,            
									 :d_chm_new_haircut ,    
									 :c_chm_trd_date ,       
									 :l_chm_run_no ,         
									 :sql_rowid   ;           

					if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
					{
						 /** EXEC SQL CLOSE cur_nse_scripts; ** 2.8 ***/
             EXEC SQL CLOSE :sys_cursor;   /*** Ver 2.8 ***/ 
             EXEC SQL FREE  :sys_cursor;   /*** Ver 2.8 ***/ 
						 fn_errlog(c_ServiceName, "S31405", SQLMSG, c_err_msg);
						 fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
						 return -1;
					}
					if( SQLCODE == NO_DATA_FOUND )
					{
						 fn_userlog( c_ServiceName," Inside NO_DATA_FOUND For fn_upd_haircut ");
						 /** EXEC SQL CLOSE cur_haircut; ** Ver 2.8 **/
             EXEC SQL CLOSE :sys_cursor;   /*** Ver 2.8 ***/
             EXEC SQL FREE  :sys_cursor;   /*** Ver 2.8 ***/
						 break;
					}


					SETNULL(sql_rowid);
					trim(c_stk_cd);					/*** Added for Ver 2.3 **/
					if( DEBUG_MSG_LVL_3 ) 
				  {
						fn_userlog( c_ServiceName,"Stock code  is :%s:", c_stk_cd );
						fn_userlog( c_ServiceName,"ROWID IS :%s:", sql_rowid.arr );
						fn_userlog( c_ServiceName,"d_chm_new_haircut  is :%lf:",d_chm_new_haircut );  
						fn_userlog( c_ServiceName,"c_chm_trd_date  is :%s:",c_chm_trd_date ); 
						fn_userlog( c_ServiceName,"c_chm_run_no  is :%ld:",l_chm_run_no );   
					}
					
					EXEC SQL
							 SELECT stk_plg_haircut
							 INTO   :d_stk_haircut
							 FROM   stk_stk_mstr
							 WHERE  stk_stck_cd = :c_stk_cd;

					if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
					{
						fn_userlog( c_ServiceName,"Updating margin values failed" );
						fn_errlog(c_ServiceName, "S31410", SQLMSG, c_msg);					/** Added for Ver 2.3 **/
						/**sprintf ( c_msg , "Updating margin values failed" );**/	/** Commented for Ver 2.3 **/
						fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
						i_return_val = fn_upd_chm_status(sql_rowid.arr);
						continue;
					}
					if( SQLCODE == NO_DATA_FOUND )
					{
						fn_userlog( c_ServiceName,"No data for updating in master" );
						sprintf ( c_msg , "No data for updating in master" );
						fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
						i_return_val = fn_upd_chm_status(sql_rowid.arr);
						continue;
					}

          fn_userlog( c_ServiceName,"Insert into SHL log ...."); /** Ver 2.8 ***/
         
					EXEC SQL
							 INSERT INTO shl_stk_haircut_log
													 (
															shl_stck_cd,
															shl_xchng_cd,
															shl_haircut,
															shl_date,
															shl_run_no
													 )
													 VALUES
													 (
															:c_stk_cd,
															:c_xchng_cd, /** Change from 'NFO' in Ver 2.8 **/
															:d_stk_haircut,
															sysdate,
															:l_chm_run_no
													 );

					if( SQLCODE != 0 )
					{
						fn_userlog( c_ServiceName,"Insert into Audit trail failed" );
						fn_errlog(c_ServiceName, "S31415", SQLMSG, c_msg);		/** Added for Ver 2.3 **/
						/***sprintf ( c_msg , "Insert into Audit trail failed" );***//** Commented for Ver 2.3 **/
						fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
						i_return_val = fn_upd_chm_status(sql_rowid.arr);
						continue;
					}
	
					EXEC SQL
						UPDATE stk_stk_mstr
						SET    stk_plg_haircut = :d_chm_new_haircut
						WHERE  stk_stck_cd = :c_stk_cd
						/** AND    stk_plg_allwd in ('R','Y'); **/ /** Commented and Added for Ver 2.4 **/
						AND ((:c_upld_mode = 'V' and stk_plg_allwd in ('R','Y'))
							OR (:c_upld_mode = 'M' and stk_plg_allwd in ('R','Y','W')));


					if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
					{	
						fn_userlog( c_ServiceName,"Updating margin values failed" );
						sprintf ( c_err_msg , "Updating margin values failed for :%s: " , c_stk_cd);
						fn_bat_pst_msg_fno ( c_ServiceName, c_err_msg, c_tag );
						i_return_val = fn_upd_chm_status(sql_rowid.arr);
						continue;
					}
					if( SQLCODE == NO_DATA_FOUND )
					{
						fn_userlog( c_ServiceName,"Pledge is not allowed for this stock" );
						sprintf ( c_msg , "Pledge is not allowed for this stock" );
						fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag ); /** Ver 2.3 **/
						i_return_val = fn_upd_chm_status(sql_rowid.arr);
						continue;
					}

					EXEC SQL
          	UPDATE chm_coll_haircut_mstr
           	SET    chm_prcsd_flg = 'P'
           	WHERE  ROWID = :sql_rowid;

      		if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      		{
        		fn_userlog( c_ServiceName,"Updating processed flag to P failed.." );
        		sprintf ( c_msg , "Updating margin values failed" );
        		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
        		i_return_val = fn_upd_chm_status(sql_rowid.arr);
        		continue;
      		}


				} /***End of while ***/
	return 0 ;
}

int fn_upd_chm_status(char *sql_rowid)
{

  int i_trnsctn ;
  char c_err_msg[256];
  char c_ServiceName[33];

  strcpy(c_ServiceName,"bat_revaluation");

	if( DEBUG_MSG_LVL_3 )
	{
  	fn_userlog ( c_ServiceName,"ROWID IS :%s:",sql_rowid );
	}

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31420",LIBMSG,c_err_msg);
  }

  EXEC SQL
       UPDATE chm_coll_haircut_mstr
       SET    chm_prcsd_flg = 'F'
       WHERE  ROWID = :sql_rowid;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31425",SQLMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return(FAILURE);
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "S31430",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return(FAILURE);
  }
  return( SUCCESS);
}
/*** Ver 2.2 Ends   ***/
/*** Ver 2.3 adds **/
void trim(char *str)
{
  int i=0;
  char *ptr;
  ptr = str;
  while ( *str != '\0' )
  {
    if (*str != ' ' && *str != '\t')
    {
      i=i+1;
      *ptr++=*str;
    }
    str++;
  }
  *ptr='\0';
  while( i != 0 )
  {
    ptr--;
    i=i-1;
  }
  str = ptr;
}
/*** Ver 2.3 ends **/



