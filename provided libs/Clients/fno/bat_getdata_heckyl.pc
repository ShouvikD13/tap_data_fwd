/******************************************************************************/
/* Service name :  BAT_GETDATA_HECKYL                                         */
/*																																						*/
/*																																						*/
/*Description  :	This batch fetches data and insert into fml and 	   				*/
/*								pass it on to the service																		*/
/*																																						*/
/*																																						*/
/*																																						*/
/* Input       :																															*/
/*																																						*/
/* Output      :                                                              */
/*																																						*/
/*																																						*/
/*																																						*/
/* Log         :   08-Aug-2015 Initial Release  -  Tanmay W.									*/
/* ver 1.1     :   09-Sep-2016 Query change to add stock which are disabled - Tanmay W. */
/* ver 1.2     :   07-Nov-2016 Global indices data retrival       - Tanmay W. */
/* ver 1.3     :   19-Nov-2016 Global indices Fix								- Tanmay W. */
/******************************************************************************/



#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <stdlib.h>
#include <fml_rout.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <string.h> 
#include <stdlib.h>
#include <fn_read_debug_lvl.h> 
#define SQLROWCOUNT  sqlca.sqlerrd[2] 
#include <fn_pos.h>      
#include <fo_fml_def.h> 
#include <fml_def.h> 
#include<fn_ddr.h>

#define REC_LENGTH 4000


  TPINIT  *tpinfo;

void main( int argc, char *argv[] )
{

	varchar c_stk_cd[7];
	char 		c_stck_cd1[7];    /** Ver 1.2**/
	varchar c_stk_nm[21]; 
	char c_isin_no[21];
	char 		c_ServiceName[33]; 
	char	 	c_msg [ 100 ];
  char     c_run_mode='\0';    /*** Ver 1.2 **/
  char 		c_errmsg [ 256 ];
  int  		i_returncode;
  int  		i_trnsctn=0;
	long 		l_rcv_length;
	int 		i_err[4];
	int 		i_ferr[4];
	int 		i_odbcerr[8];
	int 		i_odbcferr[8];
	int 		i_loop = 0;
	int 		i = 0;
	int     i_counter =1;
  int   	i_no_rows = 0 ;       /*** Ver 1.2 **/
	int   	i_index_value = 0 ;   /*** Ver 1.2 **/
  double  d_ltq_rt;      			 	/*** Ver 1.2 **/
  double  d_open_prc;      			 	/*** Ver 1.2 **/
  double  d_cls_prc;      			 	/*** Ver 1.2 **/
  double  d_high_prc;      			 	/*** Ver 1.2 **/
  double  d_low_prc;      			 	/*** Ver 1.2 **/
	char  	c_ltq_dt[23];      				/*** Ver 1.2 **/
	char  	c_ltq_dt1[23];      				/*** Ver 1.2 **/
	
	long l_bufferlength           = 0;

	
  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;              /** Ver 1.2 ***/
	sql_cursor stk_cursor;
	
	strcpy(c_ServiceName, argv[0] );

  c_run_mode ='\0';	                 /*** Ver 1.2 **/
  c_run_mode = argv[1][0];             /*** Ver 1.2 **/
 
	INITBATDBGLVL(argv[0]);

  if(DEBUG_MSG_LVL_0)                     /*** Ver 1.2 **/
  {
    fn_userlog(c_ServiceName,"Run Mode          :%c:", c_run_mode);
  }

  ptr_fml_Ibuf = (FBFR32 *)tpalloc("FML32", NULL, MIN_FML_BUF_LEN * 10);
  if(ptr_fml_Ibuf == NULL)
  {
    fn_errlog(c_ServiceName, "S31005", FMLMSG, c_errmsg);
		return;
  }

  ptr_fml_Obuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN * 10);   /** Ver 1.2 **/
  if (ptr_fml_Obuf == NULL)
  {
    fn_errlog(c_ServiceName, "S31010", TPMSG,c_errmsg);
    Fadd32(ptr_fml_Ibuf, FML_ERR_MSG,  c_errmsg, 0);
    return ; 
  }
  fn_userlog(c_ServiceName,"started");

    if((tpinfo = (TPINIT *)tpalloc("TPINIT",NULL,MIN_FML_BUF_LEN)) == NULL)
    {
          sprintf(c_msg,"[%s]:Following error occured while allocating memory for TPINIT buffer: Code:'%d' Message:'%s'", c_ServiceName, TPCODE, TPMSG);
          fn_userlog(c_ServiceName,c_msg);
          fn_errlog( c_ServiceName, "S31015", LIBMSG, c_errmsg  );
 					tpfree ( ( char * )ptr_fml_Obuf);  /** Ver 1.2 **/
 					tpfree ( ( char * )ptr_fml_Ibuf);   /** Ver 1.2 **/
          exit(FAILURE);
    }

    if(tuxgetenv("ORA_GRP") == NULL)
    {
        strcpy(c_msg,"ORA_GRP not defined in the environment");
        fn_userlog(c_ServiceName,c_msg);
        fn_errlog( c_ServiceName, "S31020", LIBMSG, c_errmsg  );
        tpfree((char*)tpinfo);
        tpfree ( ( char * )ptr_fml_Obuf);  /** Ver 1.2 **/
        tpfree ( ( char * )ptr_fml_Ibuf);   /** Ver 1.2 **/
        exit(FAILURE);
    }

        strcpy(tpinfo->grpname,tuxgetenv("ORA_GRP"));
        strcpy ( tpinfo->usrname, "\0" );
        strcpy ( tpinfo->passwd, "\0" );
        strcpy ( tpinfo->cltname, "" );
        tpinfo->flags = TPU_DIP;

    if(tpinit((TPINIT *) tpinfo) == FAILURE)
    {
          sprintf(c_msg,"[%s]:Client failed in connecting to group %s, due to following reason: Code:'%d' Message:'%s'", c_ServiceName, tuxgetenv("ORA_GRP"), TPCODE, TPMSG);
          fn_userlog(c_ServiceName,c_msg);
          fn_errlog( c_ServiceName, "S31025", LIBMSG, c_errmsg  );
          tpfree((char*)tpinfo);
          tpfree ( ( char * )ptr_fml_Obuf);  /** Ver 1.2 **/
          tpfree ( ( char * )ptr_fml_Ibuf);   /** Ver 1.2 **/
          exit(FAILURE);
    }

      tpfree((char*)tpinfo);

    if(DEBUG_MSG_LVL_3)
    {
        sprintf(c_msg,"tpinit() returns SUCCESS : [%d]",tperrno);
        fn_userlog(c_ServiceName,c_msg);
    }

    if (tpopen() == FAILURE)
    {
        sprintf(c_msg,"[%s]:Unable to open connection with resource manager, due to following reason: Code:'%d' Message:'%s'", c_ServiceName, TPCODE, TPMSG);
        fn_userlog(c_ServiceName,c_msg);
        tpfree ( ( char * )ptr_fml_Obuf);  /** Ver 1.2 **/
        tpfree ( ( char * )ptr_fml_Ibuf);   /** Ver 1.2 **/
        tpterm();
        exit(FAILURE);
    }


 if ( c_run_mode == 'N')         /*** condition added in *** Ver 1.2 **/
 {

/**** commented  Ver 1.1 ***
  EXEC SQL ALLOCATE :stk_cursor;
  EXEC SQL EXECUTE
  BEGIN
  OPEN   :stk_cursor FOR
  select distinct a.SEM_STCK_CD,
                  a.stk ,
                  b.incd
  from (select  SEM_MAP_VL stk,
                SEM_STCK_CD
        from    SEM_STCK_MAP
        where   SEM_ENTTY = 3 )a,
       (select  SEM_MAP_VL incd ,
                SEM_STCK_CD
        from    SEM_STCK_MAP
        where   SEM_ENTTY = 10 )b,
        FUM_FO_UNDRLYNG_MSTR
  where a.SEM_STCK_CD = b.SEM_STCK_CD
  AND FUM_UNDRLYNG =  a.SEM_STCK_CD
  AND FUM_QT_TRDNG_FLG  = 'T';

  *** commented  Ver 1.1 Ends ****/

  /*** Query Added in Ver 1.1 ****/

  EXEC SQL ALLOCATE :stk_cursor;
  EXEC SQL EXECUTE
  BEGIN
  OPEN   :stk_cursor FOR
  select distinct a.SEM_STCK_CD,
                  a.NSE_STCK ,
                  b.ISIN_NO
  from (select  trim(SEM_MAP_VL) NSE_STCK,
                trim(SEM_STCK_CD) SEM_STCK_CD
        from    SEM_STCK_MAP
        where   SEM_ENTTY = 3 )a,
       (select  trim(SEM_MAP_VL) ISIN_NO ,
                trim(SEM_STCK_CD) SEM_STCK_CD
        from    SEM_STCK_MAP
        where   SEM_ENTTY = 10 )b,
        FUM_FO_UNDRLYNG_MSTR,FTQ_FO_TRD_QT
  where a.SEM_STCK_CD = b.SEM_STCK_CD
  AND trim(FUM_UNDRLYNG) =  a.SEM_STCK_CD
  AND a.SEM_STCK_CD = trim(FTQ_UNDRLYNG);
	END;
  END-EXEC; 	

	if ( (SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog(c_ServiceName,"S31030",SQLMSG,c_errmsg);
    tpfree ( ( char * )ptr_fml_Obuf);  /** Ver 1.2 **/
    tpfree ( ( char * )ptr_fml_Ibuf);   /** Ver 1.2 **/
		return;
  }

	while(1)
	{
		MEMSET(c_stk_cd);
		MEMSET(c_isin_no);
		MEMSET(c_stk_nm);
		

		EXEC SQL
		fetch :stk_cursor 
		into :c_stk_cd,
				 :c_stk_nm,
				 :c_isin_no;
	
	 if ( (SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
   {
     fn_errlog(c_ServiceName,"S31035",SQLMSG,c_errmsg);
     EXEC SQL CLOSE :stk_cursor;    		/*** Ver 1.2 **/
     EXEC SQL FREE :stk_cursor;    		/*** Ver 1.2 **/
     tpfree ( ( char * )ptr_fml_Obuf);  /** Ver 1.2 **/
     tpfree ( ( char * )ptr_fml_Ibuf);   /** Ver 1.2 **/
		 return;
   }
   else if( SQLCODE == NO_DATA_FOUND )
   {
     break;
   }

	 rtrim(c_stk_cd.arr);
	 rtrim(c_stk_nm.arr);
	 rtrim(c_isin_no);   /** Ver 1.1 ***/
	 SETLEN(c_stk_nm);

	 fn_userlog(c_ServiceName , " FFO_UNDRLYNG is :%s: ",c_stk_cd.arr);
	 fn_userlog(c_ServiceName , " FML_UWL_STCK_LST is :%s: ",c_stk_nm.arr);
	 fn_userlog(c_ServiceName , " FML_ORD_ISIN_NMBR is :%s: ",c_isin_no);


	 if(Funused32(ptr_fml_Ibuf) <= Fneeded32(1,REC_LENGTH) ) 
	 {

			 l_bufferlength = Fsizeof32(ptr_fml_Ibuf) + MIN_FML_BUF_LEN * 10;
          ptr_fml_Ibuf=(FBFR32 *)tprealloc((char *)ptr_fml_Ibuf ,l_bufferlength);

          if (ptr_fml_Ibuf == NULL)
          {
            fn_errlog(c_ServiceName,"S31040",FMLMSG,c_errmsg);
            Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_errmsg, 0 );
            tpfree((char *)ptr_fml_Ibuf);
          }
	 }

   i_err [0] = Fadd32(ptr_fml_Ibuf,FFO_UNDRLYNG ,(char *)c_stk_cd.arr,0);
	 i_ferr[0] = Ferror32;
   i_err [1] = Fadd32(ptr_fml_Ibuf,FFO_STCK_CD ,(char *)c_stk_nm.arr ,0);
	 i_ferr[1] = Ferror32;
   i_err [2] = Fadd32(ptr_fml_Ibuf,FFO_ISIN_NMBR ,(char *)c_isin_no,0);
   i_ferr[2] = Ferror32;
   i_err [3] = Fadd32(ptr_fml_Ibuf,FFO_RQST_TYP ,(char *)&c_run_mode,0);
   i_ferr[3] = Ferror32;


	 for( i_loop=0; i_loop<3; i_loop++)
   {
    if(DEBUG_MSG_LVL_3)
    {
			fn_userlog(c_ServiceName , " i_loop is :%d:",i_loop );
		}
     if(i_err[i_loop] == -1)
     {
      fn_errlog(c_ServiceName, "S31045", FMLMSG, c_errmsg);
      fn_userlog(c_ServiceName,"Error [%d] in Fchange at [%d]", i_ferr[i_loop],i_loop );
      printf( "System error. Contact system support\n" );
     	EXEC SQL CLOSE :stk_cursor;        /*** Ver 1.2 **/
     	EXEC SQL FREE :stk_cursor;       /*** Ver 1.2 **/
     	tpfree ( ( char * )ptr_fml_Obuf);  /** Ver 1.2 **/
     	tpfree ( ( char * )ptr_fml_Ibuf);   /** Ver 1.2 **/
      break;
     }
   }
	}

	if(tpcall("SFO_HECKYL_FIND",(char *)ptr_fml_Ibuf,0, (char **)&ptr_fml_Ibuf,&l_rcv_length,0) == -1)  
  {
   fn_errlog(c_ServiceName,"S31050",TPMSG,c_errmsg);
   fn_userlog(c_ServiceName , " failed to complete the call to SFO_HECKYL_FIND ");
   EXEC SQL CLOSE :stk_cursor;        /*** Ver 1.2 **/
   EXEC SQL FREE :stk_cursor;       /*** Ver 1.2 **/
   tpfree ( ( char * )ptr_fml_Obuf);  /** Ver 1.2 **/
   tpfree ( ( char * )ptr_fml_Ibuf);   /** Ver 1.2 **/
   return;
  }
 }
 else if ( c_run_mode == 'G' )      /*** Ver 1.2 **/
 {
	 i_err [0] = Fadd32(ptr_fml_Ibuf,FFO_RQST_TYP ,(char *)&c_run_mode,0);
   i_ferr[0] = Ferror32;

  if(i_err[0] == -1)
    {
      fn_userlog( c_ServiceName, "Error in request type" );
      fn_errlog( c_ServiceName, "S31055", Fstrerror32( i_ferr[0]),c_errmsg );
      tpfree((char *)ptr_fml_Ibuf);
   		tpfree ( ( char * )ptr_fml_Obuf);  /** Ver 1.2 **/
      return;
    }
 	
	if(tpcall("SFO_HECKYL_FIND",(char *)ptr_fml_Ibuf,0, (char **)&ptr_fml_Obuf,&l_rcv_length,0) == -1)  
	{
	 fn_errlog(c_ServiceName,"S31060",TPMSG,c_errmsg);
	 fn_userlog(c_ServiceName , " failed to complete the call to SFO_HECKYL_FIND ");
   tpfree ( ( char * )ptr_fml_Obuf);  /** Ver 1.2 **/
   tpfree((char *)ptr_fml_Ibuf);      /** Ver 1.2 **/
	 return;
	}

	/*** Ver 1.2 Starts ***/
  i_no_rows = Foccur32((FBFR32 *)ptr_fml_Obuf,FFO_INDX_VAL);
   fn_userlog(c_ServiceName , " i_no_rows :%d:",i_no_rows);	
  for(i=0;i<i_no_rows;i++)
  {
    i_index_value = 0;
    d_ltq_rt = 0;
    d_open_prc = 0;
    d_cls_prc = 0;
    d_high_prc = 0;
    d_low_prc = 0;
    MEMSET(c_ltq_dt);
	 i_odbcerr [0] = Fget32(ptr_fml_Obuf,FFO_INDX_VAL ,i,(char *)&i_index_value, 0);       /*** Ver 1.2 ***/
   i_odbcferr[0] = Ferror32;
   i_odbcerr [1] = Fget32(ptr_fml_Obuf, FFO_FUT_PRC,i,(char *)&d_ltq_rt ,0);
   i_odbcferr[1] = Ferror32;
   i_odbcerr [2] = Fget32(ptr_fml_Obuf,FFO_NXT_TRD_DT ,i,(char *)c_ltq_dt ,0);
   i_odbcferr[2] = Ferror32;
   i_odbcerr [3] = Fget32(ptr_fml_Obuf, FFO_RATE,i,(char *)&d_open_prc ,0);   /** ver 1.3 FML changed FFO_OPN_PRC to FFO_RATE **/
   i_odbcferr[3] = Ferror32;
   i_odbcerr [4] = Fget32(ptr_fml_Obuf, FFO_EFF_CLS_PRC,i,(char *)&d_cls_prc ,0);   /** Ver 1.3 FFO_CLS_PRC to FFO_EFF_CLS_PRC **/
   i_odbcferr[4] = Ferror32;
   i_odbcerr [5] = Fget32(ptr_fml_Obuf, FFO_OI_HIGH,i,(char *)&d_high_prc ,0);   /** Ver 1.3 FFO_HGH_PRC to FFO_OI_HIGH **/
   i_odbcferr[5] = Ferror32;
   i_odbcerr [6] = Fget32(ptr_fml_Obuf, FFO_OI_LOW,i,(char *)&d_low_prc ,0);   /** Ver 1.3 FFO_LOW_PRC to FFO_OI_LOW **/
   i_odbcferr[6] = Ferror32;

   for( i_loop=0; i_loop<=2; i_loop++)
   {
		
		if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName ," i_odbcferr [i_loop] :%d:", i_odbcferr [i_loop] );
		}
     if(i_odbcferr[i_loop] == -1)
     {
      fn_errlog(c_ServiceName, "S31065", FMLMSG, c_errmsg);
      fn_userlog(c_ServiceName,"Error [%d] in Fchange at [%d]", i_odbcferr[i_loop],i_loop );
   		tpfree ( ( char * )ptr_fml_Obuf);  /** Ver 1.2 **/
   		tpfree((char *)ptr_fml_Ibuf);      /** Ver 1.2 **/
			return ;
     }
   }
	 i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );
   if ( i_trnsctn == -1 )
   {
     fn_errlog(c_ServiceName, "S31070",LIBMSG,c_errmsg);
   	 tpfree ( ( char * )ptr_fml_Obuf);  /** Ver 1.2 **/
   	 tpfree((char *)ptr_fml_Ibuf);      /** Ver 1.2 **/
     return ;
   }

	 MEMSET ( c_stck_cd1 ) ;
	 if ( i_index_value == 3 )
	 {
			strcpy(c_stck_cd1,  "DJIA");
	 }
	 else if ( i_index_value == 4 )
   {
      strcpy(c_stck_cd1,  "FTSE");
   }
	 else if ( i_index_value == 11 )
   {
      strcpy(c_stck_cd1,  "SNP500");
   }

	 EXEC SQL 
	 update LTQ_TRD_QT 
	 set LTQ_RT =:d_ltq_rt,
	 LTQ_OPN_PRC = :d_open_prc,
	 LTQ_PREV_CLS_PRC = :d_cls_prc,
	 LTQ_CLS_PRC = :d_cls_prc,           /** Ver 1.3 ***/
	 LTQ_LOW_PRC = :d_low_prc,
	 LTQ_HGH_PRC = :d_high_prc,
	 LTQ_DT = to_date(sysdate,'dd-Mon-yyyy')
	 where LTQ_XCHNG_CD = 'NSE'
	 and LTQ_STCK_CD = :c_stck_cd1;
	
	 if(SQLCODE != 0) 
	 {
		 fn_errlog(c_ServiceName, "S31075",SQLMSG,c_errmsg);
		 fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
   	 tpfree ( ( char * )ptr_fml_Obuf);  /** Ver 1.2 **/
   	 tpfree((char *)ptr_fml_Ibuf);      /** Ver 1.2 **/
     return ;
   }		
	 	
	 EXEC SQL
   /** Insert into  GID_GLBL_IND_DTLS values ( decode(:i_index_value, 3,  'DJIA', 4, 'SNP500', 11, 'FTSE' ), :d_ltq_rt, sysdate, :d_open_prc,:d_cls_prc,:d_low_prc, :d_high_prc ); **Ver 1.3 **/

   Insert into  GID_GLBL_IND_DTLS values ( :c_stck_cd1, :d_ltq_rt, sysdate, :d_open_prc,:d_cls_prc,:d_low_prc, :d_high_prc ); 
		
	 if(SQLCODE != 0)
   {
     fn_errlog(c_ServiceName, "S31080",SQLMSG,c_errmsg);
		 fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
   	 tpfree ( ( char * )ptr_fml_Obuf);  /** Ver 1.2 **/
   	 tpfree((char *)ptr_fml_Ibuf);      /** Ver 1.2 **/
     return ;
   }
	 if ( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 )
   {
    fn_errlog(c_ServiceName,"S31085",LIBMSG,c_errmsg);
		fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
   	tpfree ( ( char * )ptr_fml_Obuf);  /** Ver 1.2 **/
   	tpfree((char *)ptr_fml_Ibuf);      /** Ver 1.2 **/
    return;
   }
  }
 }
 sprintf ( c_msg, "Batch process %s ended", argv[0] );
 fn_userlog(c_ServiceName,"%s",c_msg);
 tpfree ( ( char * )ptr_fml_Obuf);  /** Ver 1.2 **/
 tpfree((char *)ptr_fml_Ibuf);      /** Ver 1.2 **/

	return;
}
/****
int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_GETDATA_HECKYL ;
  char    c_ServiceName[33];
  strcpy(c_ServiceName,"bat_getdata_heckyl");
  fn_userlog(c_ServiceName,"Inside fn_bat_init");
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  char    c_ServiceName[33];
  strcpy(c_ServiceName,"bat_getdata_heckyl");
  fn_userlog(c_ServiceName,"Inside fn_bat_term");
  return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  char    c_ServiceName[33];
  strcpy(c_ServiceName,"bat_getdata_heckyl");
  fn_userlog(c_ServiceName,"Inside fn_prcs_trg");
  return 0;
}
***/
