/*******************************************************************************************/
/* Batch Program : BAT_INIT_MRGN																													 */
/* Purpose       : To receive initial margin % from SPAN server														 */
/* Version       : 1.0      Initial Release																								 */
/*																																											   */
/* Log					 : 1.0     02-Jun-2011     																								 */
/*******************************************************************************************/
/*  Ver 1.1      : Exchange Code Handling- 29-Mar-2012  (Navina D.)                        */
/*******************************************************************************************/

/**** C header ****/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>

/**** To be added for Pro c codes ****/
#include <sqlca.h>

/**** Tuxedo header ****/
#include <atmi.h>
#include <Usysflds.h>
#include <fcntl.h>

/**** Application header ****/

#include <fo_fml_def.h>
#include <fo.h>
#include <fn_env.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <ud_sck.h>
#include <fn_read_debug_lvl.h>
#include <fn_battmpt.h>

#define  SET_KEEPALIVE   1

char sql_c_pipe_id [ 3 ];
int i_span_sck_id;
/*** int fn_upd_spn_val(char *ptr_spn_data , char *c_ServiceName , char *c_event_msg); *** Commented in Ver 1.1 ***/
int fn_upd_spn_val(char *ptr_spn_data , char *c_xchng_cd, char *c_ServiceName , char *c_event_msg);		/*** Ver 1.1 ***/
int fn_crt_clnt_sck(char *c_ip_addr, long li_port, int *i_span_sck_id, char *c_ServiceName, char *c_err_msg);
int fn_close_sck(int i_sck_id,char *c_ServiceName,char *c_event_msg);

void BAT_INIT_MRGN ( int argc, char *argv[] )
{
  char c_ServiceName [ 33 ];
  char c_remarks[ 10240];
  char c_ptr_data[ 10240];
	char c_event_msg[256 + 1];
  char c_temp_str[20480];
	char *ptr_c_temp_str;
	char *ptr_c_replace;
  char c_xchng_cd[3+1];   /*** Ver 1.1 ***/
	
	int i_send_len;
	int i_ch_val;
	int i_returncode;
	int i_recv_len = 100;

	strcpy ( c_ServiceName, argv[0] );

	INITBATDBGLVL ( argv[0] );

	fn_userlog(c_ServiceName," Batch process %s started ",argv[0]);
	
	strcpy( c_xchng_cd, argv[2] );	/*** Ver 1.1 ***/

	strcpy( c_remarks,"2^IM002^INITIATE");
	strcat( c_remarks,"\n");

	i_send_len = strlen(c_remarks);
	
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"The input string is ---------------------------> %s",c_remarks);
		fn_userlog(c_ServiceName,"The input string size--------------------------> %d",i_send_len);
		fn_userlog(c_ServiceName,"The socket id is--------------------------------------> %d",i_span_sck_id);
	}

	i_ch_val = fn_send (i_span_sck_id,(char *) &c_remarks,&i_send_len);

	if(i_ch_val != 100)
	{
		fn_userlog(c_ServiceName,"Error while sending...");
    fn_errlog ( c_ServiceName, "S31005", TPMSG, c_event_msg );
		return;
	}

	fn_userlog(c_ServiceName,"INPUT :%s: SENT.........",c_remarks);

	while (1)
	{
		MEMSET(c_ptr_data);
		i_ch_val = fn_recv (i_span_sck_id,( char * )&c_ptr_data, &i_recv_len,TM_30 );
		
		fn_userlog(c_ServiceName,"i_ch_val = %d",i_ch_val);
		fn_userlog(c_ServiceName,"recv_len = %d",i_recv_len);

		if(i_ch_val != 100)
		{
			fn_userlog(c_ServiceName,"Error while receiving...");
			fn_errlog ( c_ServiceName, "S31010", TPMSG, c_event_msg );
			break;
		}
	
		if((ptr_c_replace = strstr(c_ptr_data,"\r\n")) != NULL)
 		{
			strncpy(ptr_c_replace," |",2);
 		}
		else if((ptr_c_replace = strstr(c_ptr_data,"\r")) != NULL)
    {
      strncpy(ptr_c_replace," ",1);
    }
		else if((ptr_c_replace = strstr(c_ptr_data,"\n")) != NULL)
    {
      strncpy(ptr_c_replace,"|",1);
    }
 	
		strcat ( c_temp_str, c_ptr_data );
		
	  fn_userlog(c_ServiceName,"rescived data per loop : %s :", c_ptr_data);
   
  } 

		ptr_c_temp_str = strtok( c_temp_str, "|");
	
		while(1)
		{
			fn_userlog(c_ServiceName,"send data before if : %s :", ptr_c_temp_str); 
			
		  if( strstr((ptr_c_temp_str),"2^IM002^") != NULL ) 
    	{
   			ptr_c_temp_str = ptr_c_temp_str + strlen("2^IM002^");
   	  }
			
      fn_userlog(c_ServiceName,"send data after if : %s :", ptr_c_temp_str);
			
			i_returncode = fn_upd_spn_val ( ptr_c_temp_str,
																			c_xchng_cd,			/*** Ver 1.1 ***/
																			c_ServiceName,
																			c_event_msg );	
			
			if(i_returncode == -1)
			{
				 fn_userlog(c_ServiceName,"Error while updating :%s:",ptr_c_temp_str);
				 fn_errlog ( c_ServiceName, "S31015", TPMSG, c_event_msg );
				 return ;					
			}
				
		  ptr_c_temp_str = strtok(NULL,"|");

  	  if(ptr_c_temp_str == NULL)
    	{
		 	   fn_userlog(c_ServiceName,"String ended.......");	
   			 break;
    	}
		}
	
		if( fn_close_sck(i_span_sck_id,c_ServiceName,c_event_msg) == -1 )
    {
      fn_userlog(c_ServiceName," Error in closing socket ");
    }
		 fn_userlog(c_ServiceName,"Socket closed.......");
			
		return;
}


int fn_bat_init ( int argc, char *argv[] )
{
	int   i_ch_val;
	char  *ptr_c_tmp;
	char  ptr_c_fileName [512];
	char 	c_err_msg [ 256 ];	
  char c_ServiceName [ 33 ];
	char *ptr_c_ip_addr;
	char c_ip_addr[20];
	long li_port;
	int i_tmp;
	int i_exit_status;
	i_ch_val = 0;


	sprintf(ptr_c_fileName, "%s/span.ini", getenv("BIN"));

	i_ch_val = fn_create_pipe ( );

	if ( i_ch_val == -1 )
	{
		fn_userlog(c_ServiceName, "EBA : Error creating pipe" );
		return ( -1 );
	}	

	strcpy(c_ServiceName, "BAT_INIT_MRGN");

	if ( tpopen( ) == -1 )
	{
		fn_userlog(c_ServiceName, "EBA : RM failed in opening connection |%s|", TPMSG );
		fn_destroy_pipe();
		return ( -1 );
	}

	/*** Initialize Process Space  ***/
	fn_userlog(c_ServiceName,"ptr_c_fileName=%s",ptr_c_fileName);

	i_ch_val = fn_init_prcs_spc( "BAT_INIT_MRGN",
															 ptr_c_fileName,
															 "BAT_INIT_MRGN" );
	if (i_ch_val == -1)
	{
		fn_userlog(c_ServiceName, "EBA : Initializing Process space is failed " );
		fn_destroy_pipe();
		return ( -1 );
	}

	/*** Getting IP address and Port No from the process Space. ***/
	fn_userlog(c_ServiceName,"Getting IP address....");
	ptr_c_ip_addr = (char *)fn_get_prcs_spc(c_ServiceName, "SPAN_SRVR_ADDR");
	if(ptr_c_ip_addr == NULL)
	{
		fn_errlog(c_ServiceName, "L31005", LIBMSG, c_err_msg);
		return -1;
	}
	strcpy(c_ip_addr, ptr_c_ip_addr);
	
	fn_userlog(c_ServiceName,"IP ADDRESS=:%s:",ptr_c_ip_addr);
	fn_userlog(c_ServiceName,"IP ADDRESS=:%s:",c_ip_addr);

	fn_userlog(c_ServiceName,"Getting Port number....");
	ptr_c_tmp = (char*)fn_get_prcs_spc(c_ServiceName, "SPAN_SRVR_PORT");
	if(ptr_c_tmp == NULL)
	{
		fn_errlog(c_ServiceName, "L31010", LIBMSG, c_err_msg);
		return -1;
	}
	li_port = atoi(ptr_c_tmp);
	
	fn_userlog(c_ServiceName,"PORT NUMBER = :%s:",ptr_c_tmp);
	fn_userlog(c_ServiceName,"PORT NUMBER =:%ld:",li_port);

	/*** creating client socket. ***/
	fn_userlog(c_ServiceName,"Creating .... Client Socket");
	if(fn_crt_clnt_sck(c_ip_addr,
										 li_port,
										 &i_span_sck_id,
										 c_ServiceName,
										 c_err_msg) == -1)
	{
		fn_errlog(c_ServiceName, "L31015", LIBMSG, c_err_msg);
		return -1;
	}

	fn_userlog(c_ServiceName,"Client Socket created");

	fn_read_debug_flg(argv[0]); /* Debug Level */

	fn_userlog(c_ServiceName,"socket ids: send:%d:",i_span_sck_id);

  fn_var = BAT_INIT_MRGN;
	
	fn_userlog(c_ServiceName,"Finished init...");

	return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}

int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
  return 0;
}

/*****************************************************************************/
/*                                                                           */
/*  Description       :  Function to create the socket by reading he desired */
/*                       Inputs from the process space.                      */
/*                                                                           */
/*  Input Parameters  :  socket id.                                          */
/*                                                                           */
/*  Output Parameters :  Returns 0 upon creating the socket and -1 on failure*/
/*                                                                           */
/*****************************************************************************/
int fn_crt_clnt_sck(char *ptr_c_ip_addr,
                    int  i_port_no,
                    int  *ptr_i_sck_id,
                    char *c_ServiceName,
                    char *c_err_msg)
{
  int i_tmp_sck_id;
  int i_setval;

  socklen_t ud_optlen;

  struct sockaddr_in sck_in;

  if(  fn_socket ( &i_tmp_sck_id, AF_INET, SOCK_STREAM, 0 ) == -1 )
  {
    fn_errlog(c_ServiceName, "L31115", UNXMSG, c_err_msg);
    return -1;
  }

  i_setval = SET_KEEPALIVE;
  ud_optlen = (socklen_t)sizeof(int);

  if( fn_setsockopt ( i_tmp_sck_id, SOL_SOCKET, SO_KEEPALIVE, &i_setval, ud_optlen ) == -1 )
  {
    fn_errlog(c_ServiceName, "L31115", UNXMSG, c_err_msg);
    return -1;
  }

  i_setval = TCP_NODELAY;
  ud_optlen = (socklen_t)sizeof(int);


  if( fn_setsockopt ( i_tmp_sck_id, IPPROTO_TCP, TCP_NODELAY, &i_setval, ud_optlen ) == -1 )
  {
    errlog(c_ServiceName, "S31020", UNXMSG, (char *)DEF_USR, DEF_SSSN, c_err_msg);
    return -1;
  }

  i_setval = 20;
  if( fn_setsockopt ( i_tmp_sck_id, IPPROTO_TCP, TCP_KEEPIDLE, &i_setval, ud_optlen ) == -1 )
  {
    fn_errlog(c_ServiceName, "L31115", UNXMSG, c_err_msg);
    return -1;
  }

  i_setval = 20;
  if( fn_setsockopt ( i_tmp_sck_id, IPPROTO_TCP, TCP_KEEPINTVL, &i_setval, ud_optlen ) == -1 )
  {
    fn_errlog(c_ServiceName, "L31115", UNXMSG, c_err_msg);
    return -1;
  }

  i_setval = 600;
  if( fn_setsockopt ( i_tmp_sck_id, IPPROTO_TCP, TCP_KEEPCNT, &i_setval, ud_optlen ) == -1 )
  {
    fn_errlog(c_ServiceName, "L31115", UNXMSG, c_err_msg);
    return -1;
  }

  i_setval = 1;
  if( fn_setsockopt ( i_tmp_sck_id, IPPROTO_TCP, TCP_NODELAYACK, &i_setval, ud_optlen ) == -1 )
  {
    fn_errlog(c_ServiceName, "L31115", UNXMSG, c_err_msg);
    return -1;
  }
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"i_tmp_sck_id1=:%d:",i_tmp_sck_id);
		fn_userlog(c_ServiceName,"ptr_c_ip_addr=:%s:",ptr_c_ip_addr);
		fn_userlog(c_ServiceName,"i_port_no=:%d:",i_port_no);
	}

  if( fn_connect ( i_tmp_sck_id, AF_INET, ptr_c_ip_addr, i_port_no ) == -1 )
  {
    fn_errlog(c_ServiceName, "L31115", UNXMSG, c_err_msg);
    return -1;
  }

 *ptr_i_sck_id = i_tmp_sck_id;
	fn_userlog(c_ServiceName,"i_tmp_sck_id=:%d:",i_tmp_sck_id);
	fn_userlog(c_ServiceName,"*ptr_i_sck_id=:%d:",*ptr_i_sck_id);

  return 0;

}

int fn_upd_spn_val ( char *ptr_spn_data,
										 char *c_xchng_cd,      /*** Ver 1.1 ***/
									   char *c_ServiceName,
									   char *c_event_msg )
{
	 int i_returncode;
	 fn_userlog(c_ServiceName,"function data =: %s :", ptr_spn_data);

	 i_returncode = tpbegin( TRAN_TIMEOUT, 0 );
 
	 if ( i_returncode == -1 )
   {
     fn_errlog(c_ServiceName,"S31025",TPMSG,c_event_msg);
		 return -1;
   }


	 EXEC SQL
        UPDATE FMM_FO_MRGN_MSTR
        SET    FMM_SPAN_VAL = ( SELECT substr (:ptr_spn_data ,instr(:ptr_spn_data,'^') + 1) from dual)
        WHERE  FMM_XCHNG_CD = :c_xchng_cd						/*** Ver 1.1 ***/
		    AND    FMM_UNDRLYNG = ( SELECT SEM_STCK_CD
            									  FROM SEM_STCK_MAP
           											WHERE SEM_ENTTY = 1
           											AND SEM_MAP_VL = (SELECT substr(:ptr_spn_data, 1,instr(:ptr_spn_data,'^') - 1)
                                FROM DUAL));
	 
	 if ( SQLCODE != 0 && SQLCODE !=NO_DATA_FOUND )
   {
       fn_userlog(c_ServiceName,"Error while updating ");
 			 fn_errlog ( c_ServiceName, "S31030",SQLMSG , c_event_msg );
		   tpabort(0);
       return -1;
   }
	
	  i_returncode = tpcommit(0);

   if ( i_returncode == -1 )
   {
   	  	fn_errlog(c_ServiceName,"S31035",TPMSG,c_event_msg);
		  	return -1;
   }
 
		
 	 	fn_userlog(c_ServiceName,"data update successfully : %s : ", ptr_spn_data);

		return 0;
}

int fn_close_sck ( int i_sck_id,char *c_ServiceName,char *c_event_msg )
{
  if(close(i_sck_id) == -1)
  {
    fn_errlog(c_ServiceName, "L31065", UNXMSG,c_event_msg);
    return -1;
  }
  return 0;
}	
