/*   Service       : bat_fo_atg_click.pc                                       		*/
/*                                                                             		*/
/*   Purpose       : Bulk upload of FNO contract notes to click database tables		*/
/*                                                                             		*/
/*                                                                             		*/
/*   Input Param   : For date                                                  		*/
/*                                                                             		*/
/*   Output        : Success/Failure                                           		*/
/*                                                                             		*/
/*   Author        : ICICI Infotech                                            		*/
/*                                                                             		*/
/*   Date          : 22-12-2008                                                		*/
/*                                                                             		*/
/*   Version       :  1.0      Release (Rohit)                                 		*/
/*                 :  1.1     17-Feb-2008 atgrpt_CRAT27049 (Rohit)						 		*/
/*										1.2			29-May-2009	CRARAE28117 (SKS)										 		*/
/*                    1.3     17-Aug-2009             (Marvin)                 		*/
/*                    1.4     25-Sep-2009 Seperate temp table for atg(diwakar) 		*/
/*										1.5			06-Jan-2010 CRAT31845 - dealer's address (Amisha)		*/
/*                    1.6     26-Mar-2012 Physical Statement CR-ISEC0318209(DS)		*/
/*                    1.7     26-Jun-2012 Bug fix for selecting pin from iad   		*/
/*										1.8			11-Mar-2014	BSE ACK Changes	- Vishnu Nair				 		*/
/*										1.9			30-Jul-2014 CR-ISEC27-53835 CN Format Changes(Sandip)*/
/*										2.0			14-Aug-2014 CR-ISEC27-53835 CN Format Changes		 		*/
/*																				[sending computed values for default 		*/
/*																				 0 in Ver 1.9] (Sandip)							 		*/
/*										2.1			05-Jun-2015 CR-ISEC03-63562 CN Name Changes(Sandip) */
/*										2.2			15-Feb-2017 Length change for contract Note(Samip)  */
/**********************************************************************************/
#include <stdio.h>      /* C Header File                */
#include <stdlib.h>     /* C Header File                */
#include <sqlca.h>      /* Oracle header file           */
#include <atmi.h>       /* TUXEDO Header File           */
#include <fml32.h>      /* TUXEDO Header File           */
#include <Usysflds.h>   /* TUXEDO Field Definitions     */
#include <fml_def.h>
#include <fn_log.h>
#include <eba.h>
#include <fn_tuxlib.h>
#include <string.h>
#include <fn_read_debug_lvl.h>

#define MAX_REC 1000


struct fno_cntrct_mstr
{
	char	sql_fcm_usr_mtch_accno[20+1];
	char	sql_fcm_excng_cd[3+1];
	char	sql_fcm_cntrct_nmbr[50+1];
	char	sql_fcm_cntrct_dt[24+1];
	char	c_fcm_cntrct_flg;
	long	l_fcm_record_id;
	char	sql_fcm_filename[50+1];
	char	sql_fcm_usr_nm[150+1];
	char	sql_fcm_addr1[100+1];			
	char	sql_fcm_addr2[100+1];			 
	char	sql_fcm_addr3[100+1];			
	char	sql_fcm_addr4[100+1];			  
	char	sql_fcm_ucc_cd[25+1];
	char	sql_fcm_trd_cd[20+1];
	char	sql_fcm_pan_no[50+1];
	char	sql_fcm_tel_no[50+1];
	char	sql_fcm_email_id1[100+1];
	char	sql_fcm_email_id2[100+1];
	double	d_fcm_total;
	double	d_fcm_stt;
	double	d_fcm_trns_chrg;
	double	d_fcm_stmp_duty;
	double	d_fcm_sebi_srv_tx;
  char  sql_fcm_deal_off_aval_flg;          /** Ver 1.2 */
  char  sql_fcm_deal_off_addr1[300+1];      /** Ver 1.2 */ /** Length change from 100 to 300 for Ver 2.2 **/
  char  sql_fcm_deal_off_addr2[300+1];      /** Ver 1.2 */ /** Length change from 100 to 300 for Ver 2.2 **/
  char  sql_fcm_deal_off_city[30+1];        /** Ver 1.2 */
  char  sql_fcm_deal_off_zip[20+1];         /** Ver 1.2 */
  char  sql_fcm_deal_off_state[30+1];       /** Ver 1.2 */
  char  sql_fcm_deal_off_cntry[30+1];       /** Ver 1.2 */
  char  sql_fcm_deal_off_phone[30+1];       /** Ver 1.2 */
  char  sql_fcm_deal_off_fax[30+1];         /** Ver 1.2 */
  char  sql_fcm_mobile[15+1];               /** Ver 1.6 */
	double d_fcm_net_pay_amnt;								/** Ver 1.9 */
	double d_fcm_src_tx;											/** Ver 1.9 */
	double d_fcm_net_tot;											/** Ver 1.9 */
	double d_fcm_tot_brkg;										/** Ver 1.9 */
	double d_fcm_pipo_obl;    								/** Ver 1.9 */
};

struct fno_cntrct_dtls
{
	char	sql_fcd_cntrct_nmbr[50+1];
	char	sql_fcd_usr_mtch_accno[20+1];
	char	sql_fcd_cntrct_dt[24+1];
	long	l_fcd_record_id;
	char	sql_fcd_ordr_ref[19+1];  /* Ver 1.8 size increased from 17 to 20 */
	char	sql_fcd_ordr_tm[25+1];
	char	sql_fcd_trd_ref[15+1];
	char	sql_fcd_trd_tm[10+1];
	char	c_fcd_trd_flw;
	double	d_fcd_prc;
	long	l_fcd_qty;
	double	d_fcd_brkg;
	double	d_fcd_src_tx;
	double	d_fcd_stt;
	double	d_fcd_strk_prc;
	double	d_fcd_cntrct_amt;
	char	sql_fcd_cntrct_specs[150+1];
	double	d_fcd_amt_instt;
	double	d_fcd_total;
	char	sql_fcd_excng_cd[3+1];
  char    sql_fcd_series_cd[23+1];  /** Ver 1.6 **/
  double  sql_fcd_mkt_lot;          /** Ver 1.6 **/
  double  sql_fcd_no_of_cntrcts;    /** Ver 1.6 **/
  double  sql_fcd_brkrg_per_cntrct;  /** Ver 1.6**/
};

struct fno_annx_dtls
{
	char	sql_fad_cntrct_nmbr[50+1];
	char	sql_fad_mtch_accnt[20+1];
	char	sql_fad_cntrct_dt[24+1];
	long	l_fad_record_id;
	char	sql_fad_undrlyng[150+1];
	char	sql_fad_exp_dt[24+1];
	double	d_fad_fut_sell;
	double	d_fad_fut_stt;
	double	d_fad_opt_sell;
	double	d_fad_opt_stt;
	double	d_fad_tot_stt;
	 char  sql_fad_excng_cd[3+1];
};


	long	l_bufferlength;
	long	li_len_tobuf;
	long	l_rows_fetched;

	long	l_count_fcm;
	long	l_count_fcd;
	long	l_count_fad;

	int	i_max_rec_per_fetch = MAX_REC;
	int	i_ch_val;
	int	i_ret_val;
	int	i_err[10];
	int	i_mode;

	char	c_ServiceName[33];
	char	c_errmsg[256];
	char	c_event[256];
	char	c_tag[32];
	char	c_xchng_cd[4] = {'\0'};
	char	c_for_date[25] = {'\0'};

	long	l_err_cd = 0;
	
	FBFR32	*ptr_fml_Sbuffer;
	FBFR32	*ptr_fml_Rbuffer;


void main (int argc, char* argv[] )
{

	int i_trnsctn;
	TPINIT *ptr_tpinfo;

/* Function Prototype */
	int fn_populate_fcm(void);
	int fn_populate_fcd(void);
	int fn_populate_fad(void);
	int fn_ins_log_hdr(void);
	int fn_upld_tmp(void);

	strcpy(c_ServiceName, "bat_fo_atg_click");

	sprintf(c_tag,"%s_%s",c_ServiceName,"na");

	if(argc != 2)
	{
		printf("USAGE <bat_fo_atg_click> <date>");
		exit(-1); ;
	}
	i_mode =1;

	INITBATDBGLVL(argv[0]);

	strcpy(c_for_date,argv[1]);	

	strcpy (c_xchng_cd,"NA");

	/* Get the input arguments */
	MEMSET ( c_ServiceName );
	strcpy ( c_ServiceName, argv[0] );

  /* Create the pipe */
	if( fn_create_pipe() == -1)
	{
		printf ( "Unable to create pipe." );
		exit(-1);
	}

  /* Allocate space to typed buffer pointer */
	ptr_tpinfo = ( TPINIT * ) tpalloc ( "TPINIT", NULL, TPINITNEED ( 0 ) );
	if ( ptr_tpinfo == NULL )
	{
		fn_errlog ( c_ServiceName, "S31005", TPMSG, c_errmsg );
		exit ( -1 );
	}

  /* Check if ORA_GRP group is present in the system */
	if ( tuxgetenv( "ORA_GRP" ) == NULL )
	{
		fn_errlog ( c_ServiceName, "S31010", TPMSG, c_errmsg );
		tpfree ( ( char * ) ptr_tpinfo );
		exit ( -1 );
	}

  /* Prepare the values */
	strcpy ( ptr_tpinfo->passwd, "\0" );
	strcpy ( ptr_tpinfo->cltname, "\0" );
	strcpy ( ptr_tpinfo->grpname, tuxgetenv( "ORA_GRP" ) );
	strcpy ( ptr_tpinfo->usrname, c_ServiceName );
	ptr_tpinfo->flags = 0;

  /* Join the system application */
	if ( tpinit( (TPINIT *) ptr_tpinfo ) == -1 )
	{
		fn_errlog ( c_ServiceName, "S31015", TPMSG, c_errmsg );
		tpfree ( (char *) ptr_tpinfo );
		exit ( -1 );
	}

	 /* Free the space allocated to typed buffer pointer */
	tpfree ( (char *) ptr_tpinfo );
	
	 /* Register the Batch */
	if ( fn_rgstr_bat( 'R', c_ServiceName, "NFO", "NA" ) != 1 )
	{
		fn_errlog ( c_ServiceName, "S31020", LIBMSG, c_errmsg );
		sprintf(c_event,"BAT_FO_ATG_CLICK: 1 instance already running");
		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
		tpclose ( );
		tpterm ( );
		exit ( -1 );
	}



  /* Open the Resource Manager */
	if ( tpopen() == -1 )
	{
		fn_errlog ( c_ServiceName, "S31025", TPMSG, c_errmsg );
		sprintf(c_event,"Unable to Connect to database..");
		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
		tpterm ( );
		exit ( -1 );
	}


	fn_userlog(c_ServiceName,"bat_fo_atg_click:started processing ");
	sprintf(c_event,"bat_fo_atg_click:started processing");
	fn_bat_pst_msg(c_ServiceName,c_event,c_tag);

	/**EXEC SQL TRUNCATE TABLE TMP_FCM_CNTRCT_MSTR; ** Ver 1.4 **/
	EXEC SQL TRUNCATE TABLE TMP_FCM_CNTRCT_MSTR_ATG; /*Ver 1.4*/

	if(SQLCODE != 0)
	{
		fn_errlog(c_ServiceName, "S31030", SQLMSG, c_errmsg );
		sprintf(c_event,"System error-contact sys.support");
		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
		fn_rgstr_bat('U',c_ServiceName,"NFO","NA");
		tpclose ( );
		tpterm ( );
		exit(-1) ;
	}

	/**EXEC SQL TRUNCATE TABLE TMP_FCD_CNTRCT_DTLS; ** Ver 1.4**/
	EXEC SQL TRUNCATE TABLE TMP_FCD_CNTRCT_DTLS_ATG; /** Ver 1.4 **/

	if(SQLCODE != 0)
	{
		fn_errlog(c_ServiceName, "S31035", SQLMSG, c_errmsg );
		sprintf(c_event,"System error-contact sys.support");
		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
		fn_rgstr_bat('U',c_ServiceName,"NFO","NA");
		tpclose ( );
		tpterm ( );
		exit(-1) ; 
	}

	/**EXEC SQL TRUNCATE TABLE TMP_FAD_ANNX_DTLS; ** Ver 1.4 **/
	EXEC SQL TRUNCATE TABLE TMP_FAD_ANNX_DTLS_ATG; /** Ver 1.4 **/

	if(SQLCODE != 0)
	{
		fn_errlog(c_ServiceName, "S31040", SQLMSG, c_errmsg );
		sprintf(c_event,"System error-contact sys.support");
		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
		fn_rgstr_bat('U',c_ServiceName,"NFO","NA");
		tpclose ( );
		tpterm ( );
		exit(-1);
	}


	i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );
	if ( i_trnsctn == -1 )
	{
		fn_errlog ( c_ServiceName, "S31045", LIBMSG, c_errmsg );
		fn_rgstr_bat('U',c_ServiceName,"NFO","NA");
		tpclose ( );
		tpterm ( );
		exit(-1);
	}
	
	i_ret_val = fn_upld_tmp();
	if(i_ret_val == -1)
	{
		fn_errlog(c_ServiceName, "S31050",SQLMSG, c_errmsg);
		sprintf(c_event,"System error-contact sys.support");
		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
		fn_rgstr_bat('U',c_ServiceName,"NFO","NA");
		fn_aborttran ( c_ServiceName, i_trnsctn, c_errmsg );
		tpclose ( );
		tpterm ( );
		exit(-1);
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Data upload to temp table completed");
	}

	i_ret_val = fn_committran ( c_ServiceName, i_trnsctn, c_errmsg );
	if ( i_ret_val == -1 )
	{ 
		fn_aborttran ( c_ServiceName, i_trnsctn, c_errmsg );
		fn_errlog(c_ServiceName, "S31055", TPMSG, c_errmsg );
		fn_rgstr_bat('U',c_ServiceName,"NFO","NA");
		tpclose ( );
		tpterm ( );
		exit(-1);
	}


	ptr_fml_Rbuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
	if (ptr_fml_Rbuffer == NULL)
	{
		fn_errlog(c_ServiceName, "S31060", TPMSG, c_errmsg);
		fn_userlog(c_ServiceName,"Click Upload:Unable to Allocate Receive Memory ..");
		sprintf(c_event,"sys error.Contact sys.support");
		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
		fn_rgstr_bat('U',c_ServiceName,"NFO","NA");
		tpclose ( );
		tpterm ( );
		exit(-1) ;
	}


	i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );
	if ( i_trnsctn == -1 )
	{
		fn_errlog ( c_ServiceName, "S31065", LIBMSG, c_errmsg );
		fn_rgstr_bat('U',c_ServiceName,"NFO","NA");
		tpclose ( );
		tpterm ( );
		exit(-1);
	}
	i_ret_val = fn_populate_fcm();

	if(i_ret_val == -1)
	{
		fn_userlog(c_ServiceName,"Failed to upload FCM");
		sprintf(c_event,"Unable to populate FCM-contact sys.support");
		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
		fn_aborttran ( c_ServiceName, i_trnsctn, c_errmsg );
		fn_rgstr_bat('U',c_ServiceName,"NFO","NA");
		tpfree((char *)ptr_fml_Sbuffer );
		tpfree((char *)ptr_fml_Rbuffer );
		tpclose ( );
		tpterm ( );
		exit(-1);
	}

	i_ret_val = fn_populate_fcd();

	if(i_ret_val == -1)
	{
		sprintf(c_event,"Unable to populate FCD-contact sys.support");
		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
		fn_aborttran ( c_ServiceName, i_trnsctn, c_errmsg );
		fn_rgstr_bat('U',c_ServiceName,"NFO","NA");
		fn_userlog(c_ServiceName,"Failed to upload FCD");
		tpfree((char *)ptr_fml_Sbuffer );
		tpfree((char *)ptr_fml_Rbuffer );
		tpclose ( );
		tpterm ( );
		exit(-1);
	}

	i_ret_val = fn_populate_fad();

	if(i_ret_val == -1)
	{
		sprintf(c_event,"Unable to populate FAD-contact sys.support");
		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
		fn_aborttran ( c_ServiceName, i_trnsctn, c_errmsg );
		fn_rgstr_bat('U',c_ServiceName,"NFO","NA");
		fn_userlog(c_ServiceName,"Failed to upload FAD");
		tpfree((char *)ptr_fml_Sbuffer );
		tpfree((char *)ptr_fml_Rbuffer );
		tpclose ( );
		tpterm ( );
		exit(-1);
	}
	
	if(l_count_fcm > 0)
	{
		i_ret_val = fn_ins_log_hdr();

		if(i_ret_val == -1)
		{
			sprintf(c_event,"Unable to Insert Loghdr-contact sys.support");
			fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
			fn_aborttran ( c_ServiceName, i_trnsctn, c_errmsg );
			fn_rgstr_bat('U',c_ServiceName,"NFO","NA");
			fn_userlog(c_ServiceName,"Failed to upload FAD");
			tpfree((char *)ptr_fml_Sbuffer );
			tpfree((char *)ptr_fml_Rbuffer );
			tpclose ( );
			tpterm ( );
			exit(-1);
		}
	}

	i_ret_val = fn_committran ( c_ServiceName, i_trnsctn, c_errmsg );
	if ( i_ret_val == -1 )
	{
		fn_errlog(c_ServiceName, "S31070", TPMSG, c_errmsg ); 
		sprintf(c_event,"System error-contact sys.support");
		fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
		fn_aborttran ( c_ServiceName, i_trnsctn, c_errmsg );
		fn_rgstr_bat('U',c_ServiceName,"NFO","NA");
		tpfree((char *)ptr_fml_Sbuffer );
		tpfree((char *)ptr_fml_Rbuffer );
		tpclose ( );
		tpterm ( );
		exit(-1);
	} 


	tpfree((char *)ptr_fml_Rbuffer);
	fn_rgstr_bat('U',c_ServiceName,"NFO","NA");
	sprintf(c_event,"bat_fo_atg_click completed sucessfully");
	fn_bat_pst_msg(c_ServiceName,c_event,c_tag);
	tpclose( );
	tpterm( );
	exit(0) ;
}


int fn_upld_tmp(void)
{

	EXEC  SQL
		EXECUTE
			BEGIN
				RESET_SEQUENCE('SEQ_CLKFNO_RECNO_ATG');		/*Ver 1.4 seperate Seq no for atg */
			END;
		END-EXEC;

	if(SQLCODE != 0)
	{
		fn_userlog(c_ServiceName,"Error in sequence number resetting");
		fn_errlog(c_ServiceName,"S31075",SQLMSG,c_errmsg);
		return -1;
	}	

	EXEC  SQL
		EXECUTE
			BEGIN
				RESET_SEQUENCE('SEQ_CLKFNO_NMBR_ATG');	/*Ver 1.4 seperate Seq no for atg */
			END;
	END-EXEC;

	if(SQLCODE != 0)
	{
		fn_userlog(c_ServiceName,"Error in sequence number resetting");
		fn_errlog(c_ServiceName,"S31080",SQLMSG, c_errmsg);
			return -1;
	}	

	fn_userlog(c_ServiceName,"uploading in FCM..........");

	EXEC SQL
		INSERT INTO 
			TMP_FCM_CNTRCT_MSTR_ATG			/*Ver 1.4*/
				(	FCM_USR_MTCH_ACCNO ,
					FCM_EXCNG_CD       ,
					FCM_CNTRCT_NMBR    ,
					FCM_CNTRCT_DT      ,
					FCM_CNTRCT_FLG     ,
					FCM_RECORD_ID      ,
					FCM_FILENAME			 ,
					FCM_USR_NM         ,
					FCM_ADDR1          ,
					FCM_ADDR2          ,
					FCM_ADDR3          ,
					FCM_ADDR4          ,
					FCM_UCC_CD         ,
					FCM_TRD_CD         ,
					FCM_PAN_NO         ,
					FCM_TEL_NO         ,
					FCM_EMAIL_ID1      ,
					FCM_EMAIL_ID2      ,
					FCM_TOTAL          ,
					FCM_STT            ,
					FCM_TRNS_CHRG      ,
					FCM_STMP_DUTY      ,
					FCM_SEBI_SRV_TX    ,
					FCM_SEQ_NO         ,
					FCM_TRUNC_DT       ,
					/* Ver 1.5  To display dealer address Start */
					FCM_DEAL_OFF_AVAL_FLG,			/* MG */
					FCM_DEAL_OFF_ADDR1 ,   
					FCM_DEAL_OFF_ADDR2 ,  
					FCM_DEAL_OFF_CITY  ,  
					FCM_DEAL_OFF_ZIP   ,  
					FCM_DEAL_OFF_STATE ,   
					FCM_DEAL_OFF_CNTRY ,   
					FCM_DEAL_OFF_PHONE ,  
					FCM_DEAL_OFF_FAX, 
      		/* Ver 1.5 End */
          FCM_MOBILE ,       /* Ver 1.6 */
					FCM_SRC_TX,									/*** Ver 1.9 **/
					FCM_NET_PAY_AMNT,						/*** Ver 1.9 **/
					FCM_NET_TOT,								/*** Ver 1.9 **/
					FCM_TOT_BRKG,								/*** Ver 1.9 **/
					FCM_PIPO_OBL								/*** Ver 1.9 **/
				)
				(
					SELECT
						FCM_USR_MTCH_ACCNO ,
						'FTG'              ,
						FCM_CNTRCT_NMBR    ,
						FCM_CNTRCT_DT      ,
						/**'A',									  *** Ver 2.0 comment ***/
						FCM_CNTRCT_FLG,						/*** Ver 2.0 sending flag as received from class **/
						SEQ_CLKFNO_RECNO_ATG.NEXTVAL,		/*Ver 1.4*/
						/*TO_CHAR(FCM_CNTRCT_DT,'yyyymmdd')||'_FTG_'||REPLACE(SUBSTR(FCM_CNTRCT_NMBR,1,11),'/','_')||SUBSTR(FCM_CNTRCT_NMBR,13),*/															/* Ver 1.1comment */
						/**TO_CHAR(FCM_CNTRCT_DT,'yyyymmdd')||'_FTG_'||REPLACE(FCM_CNTRCT_NMBR,'/','_'),* Ver 1.1 added* Commented 1.6 */
						/*FCM_DEAL_OFF_ZIP*V1.7*/ IAD_PIN || '_' || substr(FCM_USR_MTCH_ACCNO,1,3) || lpad(ICD_SERIAL_NO,10,'0') 
							|| '_' || to_char(FCM_CNTRCT_DT,'YYYYMMDD') || '_' || SEQ_CLKFNO_NMBR_ATG.NEXTVAL || '_FTG'  ,  /** Ver 1.6 **/
						/*FCM_USR_NM, 																																											*** ver 2.1 comment ***/
						nvl(IPD_FIRST_NAME,' ')||' '||nvl(IPD_MIDDLE_NAME,' ')||' '|| nvl(IPD_LAST_NAME,' ') "FCM_USR_NM", /*** Ver 2.1 **/
						FCM_ADDR1,
						FCM_ADDR2,
						FCM_ADDR3,
						FCM_ADDR4,
						FCM_UCC_CD,
						FCM_USR_MTCH_ACCNO,
						FCM_PAN_NO,
						FCM_TEL_NO,
						NVL(FCM_EMAIL_ID1,'*'),   /* Ver 1.3 -- NVL Added */ 
						NVL(FCM_EMAIL_ID2,'*'),   /* Ver 1.3 -- NVL Added */
						FCM_TOTAL,
						FCM_STT,
						FCM_TRNS_CHRG,
						FCM_STMP_DUTY,
						FCM_SEBI_SRV_TX,
						SEQ_CLKFNO_NMBR_ATG.CURRVAL, 		/*Ver 1.4*/ /* Ver 1.6 changed to currval **/
						trunc(FCM_CNTRCT_DT),
						/* Ver 1.5 Start */
						'Y',								/* MG */
						FCM_DEAL_OFF_ADDR1, 
						FCM_DEAL_OFF_ADDR2, 
						FCM_DEAL_OFF_CITY,  
						FCM_DEAL_OFF_ZIP,   
						FCM_DEAL_OFF_STATE, 
						FCM_DEAL_OFF_CNTRY, 
						FCM_DEAL_OFF_PHONE, 
						FCM_DEAL_OFF_FAX,
						/* Ver 1.5 Start */
            IAD_MOBILE ,                    /* Ver 1.6 */
						A.SUM_SRVC_TAX,                       			/** Ver 1.9 **//** Ver 2.0 0 replaced **/
						NVL(FCM_NETAMTDUE,0)		 FCM_NET_PAY_AMNT,	/** Ver 1.9 **//** Ver 2.0 0 replaced **/
						nvl(FCM_NETBFORLEVIES,0) FCM_NET_TOT,				/** Ver 1.9 **//** Ver 2.0 0 replaced **/
						nvl(FCM_BROKERAGE,0)		 FCM_TOT_BRKG,			/** Ver 1.9 **//** Ver 2.0 0 replaced **/
						nvl(FCM_PAYINOUT,0) 		 FCM_PIPO_OBL				/** Ver 1.9 **//** Ver 2.0 0 replaced **/
					FROM ATG_FCM_CNTRCT_MSTR ,
					ICD_INFO_CLIENT_DTLS , IAD_INFO_ADDRESS_DTLS, /** Ver 1.6 **/
          (SELECT SUM(FCD_BRKG) SUM_BRKG ,
                  sum(FCD_SRC_TX) SUM_SRVC_TAX,
                  FCD_CNTRCT_NMBR,
                  FCD_USR_MTCH_ACCNO
           FROM   ATG_FCD_CNTRCT_DTLS
           WHERE  trunc(FCD_CNTRCT_DT)=:c_for_date
           Group  by FCD_CNTRCT_NMBR,FCD_USR_MTCH_ACCNO ) A ,/** Ver 2.0 ***/
					IPD_INFO_PERSONAL_DTLS														 /** ver 2.1 **/
					WHERE trunc(FCM_CNTRCT_DT)= :c_for_date
					AND FCM_USR_MTCH_ACCNO  = ICD_CLNT_CD_ATS    	/** Ver 1.6 **/
          AND ICD_SERIAL_NO    = IAD_SERIAL_NO         	/** Ver 1.6 **/
          AND IAD_ADDRESS_TYPE = 'APPLICANT_CORR'      	/** Ver 1.6 */
          AND FCM_USR_MTCH_ACCNO = A.FCD_USR_MTCH_ACCNO /*** Ver 2.0 **/
          AND FCM_CNTRCT_NMBR = A.FCD_CNTRCT_NMBR       /*** Ver 2.0 **/
					AND ICD_SERIAL_NO = IPD_SERIAL_NO							/*** Ver 2.1 **/
					AND IPD_TYPE      = 'APPLICANT'								/*** Ver 2.1 **/
					/* AND FCM_EMAIL_ID1 is not null -- Ver 1.3 */
				);

	if(SQLCODE != 0)
	{
		fn_userlog(c_ServiceName,"Error in FCM Upload");
		fn_errlog(c_ServiceName,"S31085",SQLMSG, c_errmsg);
		return -1;
	}

	l_count_fcm =	sqlca.sqlerrd[2];

	fn_userlog(c_ServiceName,"l_count_fcm = [%d]",l_count_fcm);

	fn_userlog(c_ServiceName,"uploading in FCD..........");

	
	EXEC  SQL
		EXECUTE
			BEGIN
				RESET_SEQUENCE('SEQ_CLKFNO_NMBR_ATG');			/*Ver 1.4 */
		END;
	END-EXEC;

	if(SQLCODE != 0)
	{
		fn_userlog(c_ServiceName,"Error in sequence number resetting");
		fn_errlog(c_ServiceName,"S31090",SQLMSG, c_errmsg);
		return -1;
	}

	EXEC SQL
		INSERT INTO TMP_FCD_CNTRCT_DTLS_ATG			/*Ver 1.4*/
			(	FCD_CNTRCT_NMBR,
				FCD_USR_MTCH_ACCNO,
				FCD_CNTRCT_DT,
				FCD_RECORD_ID,
				FCD_ORDR_REF,
				FCD_ORDR_TM,
				FCD_TRD_REF,
				FCD_TRD_TM,
				FCD_TRD_FLW,
				FCD_PRC,
				FCD_QTY,
				FCD_BRKG,
				FCD_SRC_TX,
				FCD_STT,
				FCD_STRK_PRC,
				FCD_CNTRCT_AMT,
				FCD_CNTRCT_SPECS,
				FCD_AMT_INSTT,
				FCD_TOTAL,
				FCD_SEQ_NO,
				FCD_TRUNC_DT,
				FCD_XCHNG_CD
			)
			(
				SELECT 
					FCD_CNTRCT_NMBR,
					FCD_USR_MTCH_ACCNO,
					FCD_CNTRCT_DT,
					-1,	
					FCD_ORDR_REF,
					nvl (FCD_ORDR_TM,'NA') ,		
					FCD_TRD_REF,
					FCD_TRD_TM,
					nvl(FCD_TRD_FLW,' '),
					nvl(FCD_PRC,0.0000),	
					nvl(FCD_QTY,0),
					nvl(FCD_BRKG,0.0000),
					FCD_SRC_TX,
					0.0000,	
					nvl(FCD_STRK_PRC,0.0000),
					nvl(FCD_CNTRCT_AMT,0.0000),
					FCD_CNTRCT_SPECS,
					0,
					nvl(FCD_TOTAL,0),
					SEQ_CLKFNO_NMBR_ATG.NEXTVAL,				/*Ver 1.4*/
					TRUNC(FCD_CNTRCT_DT),
					'FTG'
				FROM 	ATG_FCD_CNTRCT_DTLS
        /* ,ATG_FCM_CNTRCT_MSTR
				* WHERE  FCD_CNTRCT_NMBR = FCM_CNTRCT_NMBR
				* AND   FCD_CNTRCT_DT = FCM_CNTRCT_DT -- Ver 1.3 */
				WHERE 	TRUNC(FCD_CNTRCT_DT)= :c_for_date
				/* AND FCM_EMAIL_ID1 is not null -- Ver 1.3 */
			);


	if(SQLCODE != 0)
	{
		fn_userlog(c_ServiceName,"Error in FCD Upload");
		fn_errlog(c_ServiceName,"S31095",SQLMSG, c_errmsg);
		return -1;
	}

	l_count_fcd = sqlca.sqlerrd[2];

	fn_userlog(c_ServiceName,"l_count_fcd = [%d]",l_count_fcd);


	fn_userlog(c_ServiceName,"uploading in FAD..........");
	

	EXEC  SQL
		EXECUTE
			BEGIN
				RESET_SEQUENCE('SEQ_CLKFNO_NMBR_ATG');			/*Ver 1.4*/
			END;
	END-EXEC;

	if(SQLCODE != 0)
	{
		fn_userlog(c_ServiceName,"Error in sequence number resetting");
		fn_errlog(c_ServiceName,"S31100",SQLMSG, c_errmsg);
		return -1;
	}

	EXEC SQL
		INSERT INTO TMP_FAD_ANNX_DTLS_ATG			/*Ver 1.4*/
			(	FAD_CNTRCT_NMBR,
				FAD_MTCH_ACCNT,
				FAD_CNTRCT_DT,
				FAD_RECORD_ID,
				FAD_UNDRLYNG,
				FAD_EXP_DT,
				FAD_FUT_SELL,
				FAD_FUT_STT,
				FAD_OPT_SELL,
				FAD_OPT_STT,
				FAD_TOT_STT,
				FAD_SEQ_NO,
				FAD_TRUNC_DT,
				FAD_XCHNG_CD
			)
			(
			SELECT
				FAD_CNTRCT_NMBR,
				FAD_MTCH_ACCNT,
				trunc(FAD_CNTRCT_DT),
				-1,
				FAD_UNDRLYNG,
				FAD_EXP_DT,
				FAD_FUT_SELL,
				FAD_FUT_STT,
				FAD_OPT_SELL,
				FAD_OPT_STT,
				FAD_TOT_STT,
				SEQ_CLKFNO_NMBR_ATG.NEXTVAL,			/*Ver 1.4*/
				TRUNC(FAD_CNTRCT_DT),	
				'FTG'
			FROM
				 ATG_FAD_ANNX_DTLS
      /* ,ATG_FCM_CNTRCT_MSTR
			* WHERE FAD_CNTRCT_NMBR = FCM_CNTRCT_NMBR
			* AND   FAD_CNTRCT_DT = FCM_CNTRCT_DT
			* AND   FCM_EMAIL_ID1 is not null    -- Ver 1.3 */
			WHERE TRUNC(FAD_CNTRCT_DT) = :c_for_date
			);

	if(SQLCODE != 0)
	{
		fn_userlog(c_ServiceName,"Error in FCD Upload");
		fn_errlog(c_ServiceName,"S31105",SQLMSG,c_errmsg);
		return -1;
	}

	l_count_fad = sqlca.sqlerrd[2];

	fn_userlog(c_ServiceName,"l_count_fad = [%d]",l_count_fad); 

	fn_userlog(c_ServiceName,"updating record number in FCD");
	
	EXEC SQL
		UPDATE TMP_FCD_CNTRCT_DTLS_ATG A			/*Ver 1.4*/
		SET FCD_RECORD_ID = (SELECT FCM_RECORD_ID FROM TMP_FCM_CNTRCT_MSTR_ATG B		/*Ver 1.4*/
													WHERE B.FCM_CNTRCT_NMBR = A.FCD_CNTRCT_NMBR
													/* AND  FCM_EMAIL_ID1 is not null -- Ver 1.3 */
													AND		trunc(B.FCM_TRUNC_DT)		= :c_for_date
												)
		WHERE trunc(FCD_TRUNC_DT) = :c_for_date;
	
	if(SQLCODE != 0)
	{
		fn_userlog(c_ServiceName,"Error in FCD record number update");
		fn_errlog(c_ServiceName,"S31110",SQLMSG, c_errmsg);
		return -1;
	}

	fn_userlog(c_ServiceName,"updating record number in FAD");
	

	EXEC SQL
		UPDATE TMP_FAD_ANNX_DTLS_ATG A		/*Ver 1.4*/
		SET FAD_RECORD_ID = (SELECT FCM_RECORD_ID FROM TMP_FCM_CNTRCT_MSTR_ATG B		/*Ver 1.4*/
												WHERE B.FCM_CNTRCT_NMBR = A.FAD_CNTRCT_NMBR
												AND   trunc(B.FCM_TRUNC_DT)   = :c_for_date
												)
		WHERE trunc(FAD_TRUNC_DT) = :c_for_date;

	if(SQLCODE != 0)
	{
		fn_userlog(c_ServiceName,"Error in FCD record number update");
		fn_errlog(c_ServiceName,"S31115",SQLMSG,c_errmsg);
		return -1;
	} 

}



int fn_populate_fcm()
{
	int  i_counter;
	long l_count =1;
	char c_ins_flg;
	unsigned char *c_msg_cbuf;
	struct fno_cntrct_mstr fcm_cntrct_mstr_arr[MAX_REC];

	l_bufferlength = Fneeded32(1, sizeof(fcm_cntrct_mstr_arr));
	ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);
	if (ptr_fml_Sbuffer == NULL)
	{
		fn_userlog(c_ServiceName,"Error in Allocating buffer FCM");
		fn_errlog(c_ServiceName, "S31120", TPMSG, c_errmsg);
		return(-1);
	}

	c_ins_flg = 'A';  /** Insert into FCM **/

	for ( l_count=0;l_count < l_count_fcm;l_count += i_max_rec_per_fetch )
	{
		MEMSET(fcm_cntrct_mstr_arr);

		EXEC ORACLE OPTION (char_map=string);

		EXEC SQL
			SELECT
				FCM_USR_MTCH_ACCNO,
				FCM_EXCNG_CD,
				FCM_CNTRCT_NMBR,
				FCM_CNTRCT_DT,
				FCM_CNTRCT_FLG,
				FCM_RECORD_ID,
				FCM_FILENAME,
				FCM_USR_NM,
				FCM_ADDR1,
				FCM_ADDR2,
				FCM_ADDR3,
				FCM_ADDR4,
				FCM_UCC_CD,
				FCM_USR_MTCH_ACCNO,
				FCM_PAN_NO,
				FCM_TEL_NO,
				FCM_EMAIL_ID1,
				FCM_EMAIL_ID2,
				FCM_TOTAL,
				FCM_STT,
				nvl(FCM_TRNS_CHRG,0),             
				nvl(FCM_STMP_DUTY,0),             
				nvl(FCM_SEBI_SRV_TX,0),				/* Ver 1.2 : Comma added */
				FCM_DEAL_OFF_AVAL_FLG,				/* Ver 1.2 : New column	*/
				FCM_DEAL_OFF_ADDR1,						/* Ver 1.2 : New column */
				FCM_DEAL_OFF_ADDR2,						/* Ver 1.2 : New column */
				FCM_DEAL_OFF_CITY,						/* Ver 1.2 : New column */
				FCM_DEAL_OFF_ZIP,							/* Ver 1.2 : New column */
				FCM_DEAL_OFF_STATE,						/* Ver 1.2 : New column */
				FCM_DEAL_OFF_CNTRY,						/* Ver 1.2 : New column */
				FCM_DEAL_OFF_PHONE,						/* Ver 1.2 : New column */
				FCM_DEAL_OFF_FAX,							/* Ver 1.2 : New column */
        FCM_MOBILE,                   /* Ver 1.6 */
				FCM_NET_PAY_AMNT,							/** Ver 1.9 **/
				FCM_SRC_TX,										/** Ver 1.9 **/
				FCM_NET_TOT,									/** Ver 1.9 **/
				FCM_PIPO_OBL,									/** Ver 1.9 **/
				FCM_TOT_BRKG									/** Ver 1.9 **/
			INTO
				:fcm_cntrct_mstr_arr	
			FROM
				TMP_FCM_CNTRCT_MSTR_ATG				/*Ver 1.4*/
			WHERE FCM_SEQ_NO >= :l_count + 1
			AND		FCM_SEQ_NO <= :l_count + :i_max_rec_per_fetch;

	if( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
	{
		if( SQLCODE == 1403)
		{
			if (sqlca.sqlerrd[2] == 0)
				break;
		}
		else
		{
			fn_userlog(c_ServiceName,"Data select for FCM failed");
			fn_errlog(c_ServiceName, "S31125", SQLMSG, c_errmsg);
			return (-1);
		}
	}

	l_rows_fetched = (l_count + i_max_rec_per_fetch > l_count_fcm)? l_count_fcm%i_max_rec_per_fetch : i_max_rec_per_fetch;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"bat_focnt_click : Rows fetched : |%d| |%d|", l_rows_fetched, SQLCODE );
	}	

  sprintf(c_event,"bat_focnt_click:Rows fetched FCM:%d:",l_rows_fetched);
  fn_bat_pst_msg(c_ServiceName,c_event,c_tag);

	Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
	Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

		MEMSET(c_msg_cbuf);

	c_msg_cbuf = (unsigned char *)fcm_cntrct_mstr_arr;

	l_bufferlength =  sizeof(fcm_cntrct_mstr_arr);
	
	i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
	i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
	i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&l_rows_fetched,0);
	i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);

	for(i_counter = 0;i_counter < 4;i_counter++)
	{
		if(i_err[i_counter] == -1)
		{
			fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
			fn_errlog(c_ServiceName, "S31130", FMLMSG, c_errmsg);
			return(-1);
		}
	}

	i_ch_val = tpcall("SFO_CLICK_UPLD", (char *)ptr_fml_Sbuffer, 0,(char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);
	if (i_ch_val == -1)
	{
		fn_userlog(c_ServiceName,"Error in calling service for FCM");
		if(TPCODE != TPESVCFAIL)
		{
			fn_errlog(c_ServiceName, "S31135", TPMSG, c_errmsg);
		}
		else
		{
			Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
			fn_errlog(c_ServiceName, "S31140", c_errmsg, c_errmsg);
		}
	return(-1);
	}

  }

	tpfree( (char *)ptr_fml_Sbuffer);
	return(0);
} 


int fn_populate_fcd()
{
	int  i_counter;
	long l_count =1;
	char c_ins_flg;
	unsigned char *c_msg_cbuf;
	struct fno_cntrct_dtls fcd_cntrct_dtls_arr[MAX_REC];

	l_bufferlength = Fneeded32(1, sizeof(fcd_cntrct_dtls_arr));
	ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);
	if (ptr_fml_Sbuffer == NULL)
	{
		fn_userlog(c_ServiceName,"Error in Allocating buffer FCD");
		fn_errlog(c_ServiceName, "S31145", TPMSG, c_errmsg);
		return(-1);
	}

	c_ins_flg = 'B'; /** Insert into FCD **/

	for ( l_count=0;l_count < l_count_fcd;l_count += i_max_rec_per_fetch )
	{
		MEMSET(fcd_cntrct_dtls_arr);

		EXEC ORACLE OPTION (char_map=string);

		EXEC SQL
			SELECT
				FCD_CNTRCT_NMBR,
				FCD_USR_MTCH_ACCNO,
				FCD_CNTRCT_DT,
				FCD_RECORD_ID,
				to_char(FCD_ORDR_REF),
				FCD_ORDR_TM,
				to_char(FCD_TRD_REF),
				FCD_TRD_TM,
				FCD_TRD_FLW,
				FCD_PRC,
				FCD_QTY,
				FCD_BRKG,
				FCD_SRC_TX,
				FCD_STT,
				FCD_STRK_PRC,
				FCD_CNTRCT_AMT,
				FCD_CNTRCT_SPECS,
				FCD_AMT_INSTT,
				FCD_TOTAL,
				FCD_XCHNG_CD,
			  null, /** Ver 1.6 **/
  			null, /** Ver 1.6 **/
  			null, /** Ver 1.6 **/
  			null  /** Ver 1.6**/
			INTO
			:fcd_cntrct_dtls_arr
			FROM
			TMP_FCD_CNTRCT_DTLS_ATG			/*Ver 1.4*/
			WHERE FCD_SEQ_NO >= :l_count + 1
			AND   FCD_SEQ_NO <= :l_count + :i_max_rec_per_fetch;

		if( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
		{
			if( SQLCODE == 1403)
			{
				if (sqlca.sqlerrd[2] == 0)
					break;
			}
			else
			{
				fn_userlog(c_ServiceName,"Data select for FCD failed");
				fn_errlog(c_ServiceName, "S31150", SQLMSG, c_errmsg);
				return (-1);
			}
		}

		l_rows_fetched = (l_count + i_max_rec_per_fetch > l_count_fcd)? l_count_fcd%i_max_rec_per_fetch : i_max_rec_per_fetch;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"bat_focnt_click : Rows fetched : |%d| |%d|", l_rows_fetched, SQLCODE );
		}

		sprintf(c_event,"bat_focnt_click:Rows fetched FCD:%d:",l_rows_fetched);
  	fn_bat_pst_msg(c_ServiceName,c_event,c_tag);

		Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
		Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

		MEMSET(c_msg_cbuf);

		c_msg_cbuf = (unsigned char *)fcd_cntrct_dtls_arr;

		l_bufferlength =  sizeof(fcd_cntrct_dtls_arr);

		i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
		i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
		i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&l_rows_fetched,0);
		i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);

		for(i_counter = 0;i_counter < 4;i_counter++)
		{
			if(i_err[i_counter] == -1)
			{
				fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
				fn_errlog(c_ServiceName, "S31155", FMLMSG, c_errmsg);
			return(-1);
			}
		}

		i_ch_val = tpcall("SFO_CLICK_UPLD", (char *)ptr_fml_Sbuffer, 0,(char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);
		if(i_ch_val == -1)
		{
			fn_userlog(c_ServiceName,"Error in calling service for FCD");
			if(TPCODE != TPESVCFAIL)
			{
				fn_errlog(c_ServiceName, "S31160", TPMSG, c_errmsg);
			}
			else
			{
			Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
			fn_errlog(c_ServiceName, "S31165", c_errmsg, c_errmsg);
			}
		return(-1);
		}

	}

  tpfree( (char *)ptr_fml_Sbuffer);

	return(0);
}

int fn_populate_fad()
{

	int  i_counter;
	long l_count =1;
	char c_ins_flg;
	unsigned char *c_msg_cbuf;
	struct fno_annx_dtls fad_annx_dtls_arr[MAX_REC];

	l_bufferlength = Fneeded32(1, sizeof(fad_annx_dtls_arr));
	ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);
	if (ptr_fml_Sbuffer == NULL)
	{
		fn_userlog(c_ServiceName,"Error in Allocating buffer FAD");
		fn_errlog(c_ServiceName, "S31170", TPMSG, c_errmsg);
		return(-1);
	}

	c_ins_flg = 'C';  /** Insert into FAD **/

	for ( l_count=0;l_count < l_count_fad;l_count += i_max_rec_per_fetch )
	{
		MEMSET(fad_annx_dtls_arr);

		EXEC ORACLE OPTION (char_map=string);

		EXEC SQL
			SELECT
				FAD_CNTRCT_NMBR,
				FAD_MTCH_ACCNT,
				FAD_CNTRCT_DT,
				FAD_RECORD_ID,
				FAD_UNDRLYNG,
				FAD_EXP_DT,
				FAD_FUT_SELL,
				FAD_FUT_STT,
				FAD_OPT_SELL,
				FAD_OPT_STT,
				FAD_TOT_STT,
				FAD_XCHNG_CD
			INTO
			:fad_annx_dtls_arr
		FROM
		TMP_FAD_ANNX_DTLS_ATG				/*Ver 1.4*/
		WHERE FAD_SEQ_NO >= :l_count + 1
		AND   FAD_SEQ_NO <= :l_count + :i_max_rec_per_fetch;

		if( SQLCODE != 0 && SQLCODE != -1405 )  /** 1405 Null data **/
		{
			if( SQLCODE == 1403)
			{
				if (sqlca.sqlerrd[2] == 0)
					break;
			}
			else
			{
				fn_userlog(c_ServiceName,"Data select for FAD failed");
				fn_errlog(c_ServiceName, "S31175", SQLMSG, c_errmsg);
				return (-1);
			}
		}

		l_rows_fetched = (l_count + i_max_rec_per_fetch > l_count_fad)? l_count_fad%i_max_rec_per_fetch : i_max_rec_per_fetch;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"bat_focnt_click : Rows fetched : |%d| |%d|", l_rows_fetched, SQLCODE );
		}

		sprintf(c_event,"bat_focnt_click:Rows fetched FAD:%d:",l_rows_fetched);
  	fn_bat_pst_msg(c_ServiceName,c_event,c_tag);

		Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
		Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

		MEMSET(c_msg_cbuf);

		c_msg_cbuf = (unsigned char *)fad_annx_dtls_arr;

		l_bufferlength =  sizeof(fad_annx_dtls_arr);

		i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
		i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
		i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&l_rows_fetched,0);
		i_err[3]=Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);

		for(i_counter = 0;i_counter < 4;i_counter++)
		{
			if(i_err[i_counter] == -1)
			{
				fn_userlog(c_ServiceName,"Error in Fadd i_counter :%d:",i_counter);
				fn_errlog(c_ServiceName, "S31180", FMLMSG, c_errmsg);
				return(-1);
			}
		}

		i_ch_val = tpcall("SFO_CLICK_UPLD", (char *)ptr_fml_Sbuffer, 0,(char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);
		if (i_ch_val == -1)
		{
			fn_userlog(c_ServiceName,"Error in calling service for FAD");
			if(TPCODE != TPESVCFAIL)
			{
				fn_errlog(c_ServiceName, "S31185", TPMSG, c_errmsg);
			}
			else
			{
				Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
				fn_errlog(c_ServiceName, "S31190", c_errmsg, c_errmsg);
			}
		return(-1);
		}

	}

	tpfree(( char *)ptr_fml_Sbuffer);
	return (0);

}

int fn_ins_log_hdr()
{
	int  i_counter;
	char c_ins_flg;
	char c_xchng_cd[4] = { "FTG" };

	ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
		
	if (ptr_fml_Sbuffer == NULL)
	{
		fn_userlog(c_ServiceName,"Unable to allocate send buffer ");
		fn_errlog(c_ServiceName, "S31195", TPMSG, c_errmsg);
		return(-1);
	}
	
	c_ins_flg = 'E';

	i_err[0] = Fadd32(ptr_fml_Sbuffer,FML_DAM_TRNSCTN,(char *)&c_ins_flg,0);
	i_err[1] = Fadd32(ptr_fml_Sbuffer,FML_XCHNG_CD,(char *)c_xchng_cd,0);
	i_err[2] = Fadd32(ptr_fml_Sbuffer,FML_TRD_DT,(char *)c_for_date,0);
	i_err[3] = Fadd32(ptr_fml_Sbuffer,FML_TRN_NO,(char *)&i_mode,0);		

	for(i_counter =0 ;i_counter<=3;i_counter++)
	{
		if(i_err[i_counter] == -1)
		{
			fn_errlog(c_ServiceName, "S31200", FMLMSG, c_errmsg);
			fn_userlog(c_ServiceName,"Value of i =[%d]",i_counter);
			return (-1);
		}
	}

	i_ch_val = tpcall("SFO_CLICK_UPLD", (char *)ptr_fml_Sbuffer, 0,(char **)&ptr_fml_Rbuffer, &li_len_tobuf, 0);
	if (i_ch_val == -1)
	{
		fn_userlog(c_ServiceName,"Error in calling service for INS_LOG_HDR");
		if(TPCODE != TPESVCFAIL)
		{
			fn_errlog(c_ServiceName, "S31205", TPMSG, c_errmsg);
		}
		else
		{
			Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,c_errmsg,0);
			fn_errlog(c_ServiceName, "S31210", c_errmsg, c_errmsg);
		}
	 return(-1);
	}

	tpfree((char *)ptr_fml_Sbuffer);
	return (0);

} 
