/*******************************************************************************
*  Program           : bat_conf_optinc.pc                                      *
*                                                                              *
*  Description       :                                                         *
*                                                                              *
*                                                                              *
*  Input Parameters  :      1. M       Month  - Only M in frontend             *
*                           2. 1/2/3/4 Quarter Number of year                  *
*                           3. 2009    Year                                    *
*                           4. [1..]   Incentive Type                          *
*                                                                              *
*  Change Log        : 1.0   22-Sep-2010  Shamili D|Infotech                   *
*										 : 1.1	 14-Aug-2012	Vishnu 	N|Infotech									 *
*									 	 : 1.2	 26-Sep-2012  Sandip  T|Infotech									 *	
*                    : 1.3   03-Jan-2013  Vishnu  N|Infotech                   *
*                    : 1.4   09-Sep-2014  Sachin B |Infotech                   *
*                    : 1.5   25-Jul-2017  Afzal K  |Infotech                   *
*										 : 1.6   22-Apr-2019  Vinod		 |Infotech
*                    : 1.7   26-Aug-2019  Akash B  |Infotech                   *
********************************************************************************
*  1.0    -  New Release                                                       *
*	 1.1		-  Changes for Option-195 scheme																		 *
*	 1.2		-	 Changes for ATS Option Pricing                                    *
*  1.3    -  Additional insertion in OIS_OPT_INC_SMRY table                    *
*  1.4    -  View to FML Changes                                               *
*  1.5    -  GST Inc Changes                                                   *
*	 1.6    -  CR-ISEC03-118638_Migration_to_Deposit_Model											 *
*  1.7    -  Handling FOR records                                              *
*******************************************************************************/

/* Header Files */

#include<sqlca.h>
#include<atmi.h>
#include <string.h>     
#include <stdlib.h>     
#include<fo.h>
#include<fml32.h>
#include<fn_log.h>
#include<fn_tuxlib.h>
#include<fn_battmpt.h>
#include<fml_def.h>
#include<fo_fml_def.h>
#include<fn_ddr.h>
/** #include<fo_view_def.h> ** Ver 1.4 **/
#include <fn_read_debug_lvl.h> 
#include <fn_prd_insert.h> /* Ver 1.5 */

#define SQL_ROW_COUNT sqlca.sqlerrd[2]


EXEC SQL BEGIN DECLARE SECTION;

char c_g_mode = '\0';  /** Added in Ver 1.1 **/
char c_g_ats_flg = '\0';  /** Added in Ver 1.2 **/
char c_g_qtr_mth_ind='0';
int  i_g_qtr_mth_no=0;
int  i_g_year=0;
int  i_g_inc_type=0;
char c_g_inc_type[4]={0};
char c_g_inc_type_db[4] ={0};  /** Ver 1.1 **/

char c_g_start_date[23]={0};
char c_g_end_date[23]={0}; 
char c_prcs_dt[25]={0}; 			/** Ver 1.5 **/

char c_ServiceName[33]={0};
//char c_err_msg[500]={0};
char c_err_msg[256]={0};  /* Added in Ver TOL */

double d_g_normal_percentage=0.00;
double d_g_svc_tax_percentage=0.00;

EXEC SQL  END  DECLARE SECTION;

/*----------------------------------------------------------------------------*/

int fn_calc_dates(char , int , int  );

int fn_validate_rerun(void);

void fn_print_date_time(void);

int fn_upd_segment_lmt(char *c_ServiceName,
                      char *c_match_acc,
                      double d_tot_amt,
                      char *c_acc_ent,
                      char  c_dr_cr_flg,
											char *c_exg_trd_dt,
											long	*l_sttlmnt_no,
                      char *c_err_msg);		/*Ver 1.6*/

/******************************************************************************/

void BAT_CONF_OPTINC ( int argc, char *argv[])
{
  EXEC SQL BEGIN DECLARE SECTION;

  char c_msg[256]={0};
  char c_svc_name[18]={0};
  char c_trd_date[21]={0};
  //char c_err_msg[256]={0};
  char c_xchng_cd[4]={0};
	char c_mdc_rowid[25]={0};			/*Ver 1.6*/
	int	i_ret_cd=0;								/*Ver 1.6*/
  EXEC SQL  END  DECLARE SECTION;

	EXEC SQL INCLUDE "table/mdc_misc_dr_cr.h";	/*Ver 1.6*/

  strcpy(c_ServiceName,argv[0]);
  sprintf(c_tag,"%s_na",argv[0]);

  INITBATDBGLVL(argv[0]);

  fn_userlog (c_ServiceName,"-------------------------START--------------------");
  sprintf(c_msg,"Batch process %s is started",argv[0]);
  fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag); /* renamed fn_bat_pst_msg to fn_bat_pst_msg_fno in Ver TOL */
  fn_userlog (c_ServiceName,"Batch process %s is started",argv[0]);

  /*need to validate the params passed*/

  if ( argc != 10 )     /*** Changed arg from 8 to 9 in Ver 1.1 ***//* changed from 9 to 10 in Ver 1.2 ****/
  {
    fn_userlog (c_ServiceName,"Invalid Arguments passed %d",argc);
    fn_userlog (c_ServiceName,"Usage:%s  <M> <Month (1..12 ) <Year> <Inc Type> <Mode: Normal-N / OPM-O > <Type- A-ATS , N- Normal> ",argv[0]);  /** Added Mode in Ver 1.1 **//** Ver 1.2 Added Type **/
		/**bat_conf_optinc NFO NFO NA  <M> <Month (1..12 ) <Year> <Inc Type> <Mode: Normal-N / OPM-O > <Type- A-ATS , N- No
rmal>**Sample**Ver 1.6**/
    return;
  }
  else
  {
    c_g_qtr_mth_ind=argv[4][0];
    i_g_qtr_mth_no=atoi(argv[5]);
    i_g_year=atoi(argv[6]);
    i_g_inc_type=atoi(argv[7]);
    c_g_mode=argv[8][0];    /*** Added in Ver 1.1 ***/
    c_g_ats_flg=argv[9][0];    /*** Added in Ver 1.2 ***/
 
    fn_userlog (c_ServiceName,"Arguments passed %c %d %d %d %c %c",
                c_g_qtr_mth_ind,
                i_g_qtr_mth_no,
                i_g_year,
                i_g_inc_type,
								c_g_mode,  			/** Added in Ver 1.1 **/
								c_g_ats_flg);   /** Added in Ver 1.2 **/
  }

  if ( fn_calc_dates( c_g_qtr_mth_ind,  i_g_qtr_mth_no ,  i_g_year) )
  {
    fn_userlog (c_ServiceName,"Failed to calculate the dates ");
    sprintf(c_msg,"Failed to calculate the dates");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
    return;
  }

  if ( fn_validate_rerun() )
  {
    fn_userlog (c_ServiceName,"Failed in rerun validation ");
    sprintf(c_msg,"Failed in rerun validation");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
    return;
  }

	MEMSET(c_prcs_dt); 	/** Ver 1.5 **/

 	EXEC SQL
    SELECT ITM_PRDCT_TYP, TO_CHAR(SYSDATE, 'DD-Mon-YY HH24.MI.SS') /* Ver 1.5 */
    into :c_g_inc_type, :c_prcs_dt
    FROM ITM_INC_TYPE_MSTR
    WHERE ITM_INCENT_NO = :i_g_inc_type;
  
  if (SQLCODE != 0)
  {
    errlog(c_ServiceName, "S31005", SQLMSG, DEF_USR, DEF_SSSN, c_err_msg);
    fn_userlog (c_ServiceName,"Error in selection of inc_typ <%ld> ",SQLCODE);
    return;
  }

  fn_userlog (c_ServiceName,"Incentive Type %s ",c_g_inc_type);
    
  /** Ver 1.1 Starts **/
  if (i_g_inc_type == 9)
  {
    strcpy(c_g_inc_type_db ,"FOR");
    fn_userlog (c_ServiceName,"Incentive Type for Debit in Option-195 <%s> ",c_g_inc_type_db);
  }
  /** Ver 1.1 Ends **/


  if ( tpbegin( 0, 0 ) == -1 )
  {
    fn_errlog(c_ServiceName, "S31010", TPMSG, c_err_msg );
    tpabort(0);
    return ;
  }

	/*** Ver 1.1 Starts ***/
  if ( c_g_mode == 'N')
  {
  	/*** Ver 1.1 Ends ***/
	
  	/** Added column list while inserting into OIS_OPT_INC_SMRY in ver 1.1  **/

		EXEC SQL
  		INSERT INTO OIS_OPT_INC_SMRY
  		( OIS_MATCH_ACNT       ,
  			OIS_FROM_DT          ,
  			OIS_TO_DT            ,
  			OIS_FRSH_LOTS        ,
  			OIS_OPT_BRKRG        ,
  			OIS_NRML_BRKRG       ,
  			OIS_UPFRONT_BRKRG    ,
  			OIS_OFFLINE_BRKRG    ,
  			OIS_INCNT_AMT        ,
  			OIS_NET_INCNT_AMT    ,
  			OIS_INCNT_REFUND_AMT ,
  			OIS_INCNT_DATE       ,
  			OIS_PRCNTG           ,
  			OIS_SQ_LOTS          ,
  			OIS_SQ_BRKRG         ,
  			OIS_PREMIUM          ,
  			OIS_SQ_PREMIUM       ,
  			OIS_DISP_FLAG        ,
  			OIS_PRCS_FLAG				 ,
				OIS_ATS_FLG					 ,											 /** Added in Ver 1.2 **/	
  			OIS_SCHM_ELG_FLG     ,                       /** Added in Ver 1.3 **/
  			OIS_EXEP_ELG_FLG     ,                       /** Added in Ver 1.3	**/
  			OIS_FINAL_ELG_FLG    ,                       /** Added in Ver 1.3 **/
  			OIS_FINAL_INC_AMT    ,                       /** Added in Ver 1.3 **/
				OIS_CGST_AMT         ,                      /** Added in ver 1.5 **/
  			OIS_SGST_AMT         ,                      /** Added in ver 1.5 **/
  			OIS_UGST_AMT         ,                      /** Added in ver 1.5 **/
  			OIS_IGST_AMT         ,                       /** Added in ver 1.5 **/
  			OIS_ISEC_STATE_CD    ,                       /** Added in ver 1.5 **/
  			OIS_CUST_STATE_CD    ,                          /** Added in ver 1.5 **/
  			OIS_TOT_GST_AMT                                  /** Added in ver 1.5 **/
  		)
			(
    		SELECT	OIS_MATCH_ACNT       ,
           			OIS_FROM_DT          ,
           			OIS_TO_DT            ,
           			OIS_FRSH_LOTS				,
           			OIS_OPT_BRKRG				,
           			OIS_NRML_BRKRG				,
           			OIS_UPFRONT_BRKRG		,
           			OIS_OFFLINE_BRKRG		,
           			OIS_INCNT_AMT				,
           			OIS_NET_INCNT_AMT		,
           			OIS_INCNT_REFUND_AMT ,
           			OIS_INCNT_DATE       ,
           			OIS_PRCNTG           ,
           			OIS_SQ_LOTS				  ,
           			OIS_SQ_BRKRG				  ,
					 			OIS_PREMIUM					,
					 			OIS_SQ_PREMIUM				,
           			OIS_DISP_FLAG        ,
           			'Y'       						,
					 			OIS_ATS_FLG					,												/** Added in Ver 1.2 **/
					 			OIS_SCHM_ELG_FLG     ,                       /** Added in Ver 1.3 **/
           			OIS_EXEP_ELG_FLG     ,                       /** Added in Ver 1.3 **/
           			OIS_FINAL_ELG_FLG    ,                       /** Added in Ver 1.3 **/
           			OIS_FINAL_INC_AMT    ,                        /** Added in Ver 1.3 **/
           			OIS_CGST_AMT         ,                      /** Added in ver 1.5 **/
           			OIS_SGST_AMT         ,                      /** Added in ver 1.5 **/
           			OIS_UGST_AMT         ,                      /** Added in ver 1.5 **/
           			OIS_IGST_AMT         ,                       /** Added in ver 1.5 **/
           			OIS_ISEC_STATE_CD    ,                       /** Added in ver 1.5 **/
           			OIS_CUST_STATE_CD    ,                          /** Added in ver 1.5 **/
           			OIS_TOT_GST_AMT                                  /** Added in ver 1.5 **/
			 
    		FROM		TMP_OPT_INC_SMRY
    		WHERE   OIS_DISP_FLAG   = 'Y'
    		AND 		OIS_PRCS_FLAG = 'N'
    		AND 		OIS_FROM_DT   = :c_g_start_date
    		AND 		OIS_TO_DT     = :c_g_end_date 
				AND 		OIS_ATS_FLG   = :c_g_ats_flg									/** Added in Ver 1.2 **/ 
    	);

		if ( SQLCODE != 0 )
    {
     	fn_errlog ( c_ServiceName, "S31015", SQLMSG, c_err_msg  );
     	sprintf(c_msg,"Failed in OIS insert");
     	fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag); 
     	tpabort(0);
     	return;
    }
    
		if(DEBUG_MSG_LVL_3)
		{	
    	fn_userlog (c_ServiceName," Row count %d ", SQL_ROW_COUNT );
			fn_userlog (c_ServiceName,"----------------Incentive Type %s ",c_g_inc_type);
			fn_userlog (c_ServiceName,"----------------Incentive Type %d ",i_g_inc_type);
		}
    
    EXEC SQL
    	INSERT INTO mdc_misc_dr_cr
    	(
      	MDC_CLM_MTCH_ACCNT,
      	MDC_PRDCT_TYP,
      	MDC_CRDT_NMBR,
      	MDC_AMT1,
      	MDC_AMT2,
      	MDC_TOT_AMT,
      	MDC_FROM_DT,
      	MDC_TO_DT,
      	MDC_DR_CR_FLG,
      	MDC_PRCNTG,
      	MDC_TURNOVER,
      	MDC_MTCH_STTS,
      	MDC_BNK_STTS,
      	MDC_BNK_DT,
      	MDC_BNK_TRC_NMBR,
      	MDC_MTCH_UPD_AMT,
      	MDC_BNK_UPD_AMT,
      	MDC_CGST_AMT,    /** Added in ver 1.5 **/
      	MDC_SGST_AMT,    /** Added in ver 1.5 **/
      	MDC_UGST_AMT,    /** Added in ver 1.5 **/
      	MDC_IGST_AMT,      /** Added in ver 1.5 **/
      	MDC_GST_STATE_CD,  /** Added in ver 1.5 **/
      	MDC_GST_ISEC_STATE_CD, /** Added in ver 1.5 **/
				MDC_LMT_UPD_STTS			 /** Added in ver 1.6**/
    	)
    	(
    		SELECT	OIS_MATCH_ACNT,
                :c_g_inc_type,
                :i_g_inc_type||LPAD(SEQ_OPT_BRKR_REF.NEXTVAL,12,'0'),
                ROUND(OIS_NET_INCNT_AMT/100,2),							
            /***ROUND((OIS_INCNT_REFUND_AMT - OIS_NET_INCNT_AMT)/100,2), ***Commented in 1.5**/    
                0.00, /**Added in Ver 1.5***/
                ROUND(OIS_INCNT_REFUND_AMT/100,2),
                OIS_FROM_DT,
                OIS_TO_DT,
                'C',
                OIS_PRCNTG,
								ROUND(OIS_PREMIUM /100,2),
                'N',
                'N',
                NULL,
                NULL,
                0.00,
                0.00,
                ROUND(OIS_CGST_AMT/100,2),        /** Added in ver 1.5 **/
                ROUND(OIS_SGST_AMT/100,2),        /** Added in ver 1.5**/
                ROUND(OIS_UGST_AMT/100,2),        /** Added in ver 1.5 **/
                ROUND(OIS_IGST_AMT/100,2),        /** Added in ver 1.5**/
                OIS_CUST_STATE_CD,   /** Added in ver 1.5**/
                OIS_ISEC_STATE_CD,    /** Added in ver 1.5**/
								'N'										/** Added in ver 1.6**/
    			FROM 	TMP_OPT_INC_SMRY 
					WHERE OIS_DISP_FLAG ='Y'
    			AND OIS_PRCS_FLAG = 'N'
    			AND OIS_FROM_DT  = :c_g_start_date
    			AND OIS_TO_DT    = :c_g_end_date  
    			AND OIS_INCNT_REFUND_AMT > 0		
    			AND OIS_NET_INCNT_AMT    > 0
					AND OIS_ATS_FLG   = :c_g_ats_flg					  /** Added in Ver 1.2 **/ 
    			AND OIS_FINAL_ELG_FLG = 'Y'                 /** Added in Ver 1.3 **/
			);

		if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31020", SQLMSG, c_err_msg  );
      sprintf(c_msg,"Failed in MDC update");
      fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
      tpabort(0);
			return;		/*Ver 1.6*/
    }

		if(DEBUG_MSG_LVL_3){
    fn_userlog (c_ServiceName," Row count %d ", SQL_ROW_COUNT );
		}

		/************Added in Ver 1.6 start************/
  	EXEC SQL
    	DECLARE cur_mdc_list CURSOR FOR
      	SELECT  MDC_CLM_MTCH_ACCNT,
              	MDC_PRDCT_TYP,
              	MDC_TOT_AMT,
              	MDC_DR_CR_FLG,
								MDC_CRDT_NMBR,
								NVL(MDC_RUN_NO,0),
								TO_CHAR(MDC_FROM_DT,'DD-Mon-YYYY'),
								ROWID
      	FROM    MDC_MISC_DR_CR
      	WHERE   MDC_PRDCT_TYP = :c_g_inc_type
				AND			MDC_LMT_UPD_STTS = 'N'
      	AND     TRUNC(MDC_ENTRY_DT) = TRUNC(SYSDATE);
	
  	EXEC SQL OPEN cur_mdc_list;
	
  	if(SQLCODE != 0)
  	{
			fn_errlog ( c_ServiceName, "S31025", SQLMSG, c_err_msg  );
      sprintf(c_msg,"Contact System support...");
      fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
      tpabort(0);
			return;
  	}
	
  	while(1)
  	{
			MEMSET(sql_mdc_clm_mtch_accnt);
			MEMSET(sql_mdc_prdct_typ);
			MEMSET(sql_mdc_crdt_nmbr);
			MEMSET(c_mdc_rowid);
			MEMSET(sql_mdc_from_dt);
			MEMSET(sql_mdc_sttlmnt_trd_dt);

			sql_mdc_tot_amt=0;
			sql_mdc_dr_cr_flg='X';
			sql_mdc_run_no=0;		
			sql_mdc_sttlmnt_nmbr=0;

    	EXEC SQL
      	FETCH cur_mdc_list
      	INTO  :sql_mdc_clm_mtch_accnt,
            	:sql_mdc_prdct_typ,
            	:sql_mdc_tot_amt,
            	:sql_mdc_dr_cr_flg,
							:sql_mdc_crdt_nmbr,
							:sql_mdc_run_no,
							:sql_mdc_from_dt,
							:c_mdc_rowid;

	    if(SQLCODE != 0)
    	{
      	if(SQLCODE == NO_DATA_FOUND)
      	{
        	EXEC SQL CLOSE cur_mdc_list;
        	break;
      	}
      	else
      	{
					fn_errlog ( c_ServiceName, "S31030", SQLMSG, c_err_msg  );
					EXEC SQL CLOSE cur_mdc_list;
					sprintf(c_msg,"Contact System support...");
      		fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
      		tpabort(0);
					return;
      	}
    	}

			i_ret_cd=fn_upd_segment_lmt(c_ServiceName,
																	sql_mdc_clm_mtch_accnt,
																	sql_mdc_tot_amt,
																	sql_mdc_prdct_typ,
																	sql_mdc_dr_cr_flg,
																	sql_mdc_sttlmnt_trd_dt.arr,
																	&sql_mdc_sttlmnt_nmbr,
																	c_err_msg);
	
			if(i_ret_cd != 0)
    	{
				fn_errlog ( c_ServiceName, "S31035", SQLMSG, c_err_msg  );
				EXEC SQL OPEN cur_mdc_list;
				sprintf(c_msg,"Contact System support...");
      	fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
      	tpabort(0);
    	}

			rtrim(c_mdc_rowid);
			SETLEN(sql_mdc_sttlmnt_trd_dt);

			EXEC SQL 
				UPDATE	MDC_MISC_DR_CR
				SET			MDC_LMT_UPD_STTS = 'Y',
								MDC_STTLMNT_TRD_DT = :sql_mdc_sttlmnt_trd_dt,
								MDC_STTLMNT_NMBR = :sql_mdc_sttlmnt_nmbr
				WHERE		MDC_LMT_UPD_STTS = 'N'
				AND			ROWID = :c_mdc_rowid;	

			if(SQLCODE != 0)
			{
				fn_errlog ( c_ServiceName, "S31040", SQLMSG, c_err_msg  );
        EXEC SQL OPEN cur_mdc_list;
        sprintf(c_msg,"Contact System support...");
        fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
        tpabort(0);
				return ;
			}
  	}
  	/************Added in Ver 1.6 end************/

    EXEC SQL
    UPDATE
    TMP_OPT_INC_SMRY
    SET OIS_PRCS_FLAG = 'Y',  /* Processing done */
        OIS_DISP_FLAG = 'C'   /* Confirmed that it has been displayed& prcsd */
    WHERE 
    :c_g_start_date   = OIS_FROM_DT
    AND :c_g_end_date = OIS_TO_DT
    AND OIS_DISP_FLAG = 'Y'
		AND OIS_ATS_FLG   = :c_g_ats_flg					  /** Added in Ver 1.2 **/ 
    AND OIS_PRCS_FLAG = 'N';

    if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog ( c_ServiceName, "S31045", SQLMSG, c_err_msg  );
      sprintf(c_msg,"Failed in Flag update");
      fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
      tpabort(0);
      return ;
    }

		if(DEBUG_MSG_LVL_3)
		{
  		fn_userlog (c_ServiceName," Row count %d ", SQL_ROW_COUNT );
		}
		/*** Ver 1.1 Starts ***/
	}
	else if( c_g_mode  == 'O')
	{
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog (c_ServiceName,"Inside O condition");
		}

		EXEC SQL
    	INSERT INTO mdc_misc_dr_cr
    	(
      	MDC_CLM_MTCH_ACCNT,
      	MDC_PRDCT_TYP,
      	MDC_CRDT_NMBR,
      	MDC_AMT1,
      	MDC_AMT2,
      	MDC_TOT_AMT,
      	MDC_FROM_DT,
      	MDC_TO_DT,
      	MDC_DR_CR_FLG,
      	MDC_PRCNTG,
      	MDC_TURNOVER,
      	MDC_MTCH_STTS,
      	MDC_BNK_STTS,
      	MDC_BNK_DT,
      	MDC_BNK_TRC_NMBR,
      	MDC_MTCH_UPD_AMT,
      	MDC_BNK_UPD_AMT,
      	MDC_CGST_AMT,    /** Added in ver 1.5 **/
      	MDC_SGST_AMT,    /** Added in ver 1.5 **/
      	MDC_UGST_AMT,    /** Added in ver 1.5 **/
      	MDC_IGST_AMT,      /** Added in ver 1.5**/ 
      	MDC_GST_STATE_CD,  /** Added in ver 1.5 **/
      	MDC_GST_ISEC_STATE_CD, /** Added in ver 1.5 **/
				MDC_LMT_UPD_STTS			 /** Added in ver 1.6 **/
    	)
    	(
    		SELECT	OPI_CLM_MTCH_ACCNT,
				/***commented in ver 1.5**		DECODE(SIGN(((OPI_OLD_BRKG-OPI_FINAL_BRKG)+(OPI_OLD_SRC_TX-OPI_NEW_SRC_TX))),'1',:c_g_inc_type,'-1',:c_g_inc_type_db),  ***//** Added in UAT for Debit case **/
            
           DECODE(SIGN(((OPI_OLD_BRKG-OPI_FINAL_BRKG)+(OPI_OLD_TOT_GST_AMT- OPI_NEW_TOT_GST_AMT))),'1',:c_g_inc_type,'-1',:c_g_inc_type_db),  /***Added in Ver 1.5****/
						:i_g_inc_type||LPAD(SEQ_OPT_BRKR_REF.NEXTVAL,12,'0'),
						ABS(ROUND((OPI_OLD_BRKG-OPI_FINAL_BRKG)/100,2)),
				/**ABS(ROUND((OPI_OLD_SRC_TX-OPI_NEW_SRC_TX)/100,2)),***commented in ver 1.5**/
            0.00, /***Added in Ver 1.5****/
		 	/**		ABS(ROUND(((OPI_OLD_BRKG-OPI_FINAL_BRKG)+(OPI_OLD_SRC_TX-OPI_NEW_SRC_TX))/100,2)), ***commented in ver 1.5**/
            ABS(ROUND(((OPI_OLD_BRKG-OPI_FINAL_BRKG)+(OPI_OLD_TOT_GST_AMT- OPI_NEW_TOT_GST_AMT))/100,2)), /***Added in Ver 1.5****/
						OPI_FROM_DT,
						OPI_TO_DT,
				/**	DECODE(SIGN(((OPI_OLD_BRKG-OPI_FINAL_BRKG)+(OPI_OLD_SRC_TX-OPI_NEW_SRC_TX))),'1','C','-1','D'), **commented in ver 1.5**/
						DECODE(SIGN(((OPI_OLD_BRKG-OPI_FINAL_BRKG)+(OPI_OLD_TOT_GST_AMT- OPI_NEW_TOT_GST_AMT))),'1','C','-1','D'), /***Added in Ver 1.5****/
            NULL,
						ROUND(OPI_TURNOVER/100,2),
						'N',
            'N',
            NULL,
            NULL,
            0.00,
            0.00,
           ABS(ROUND((OPI_OLD_CGST_AMT - OPI_NEW_CGST_AMT)/100,2)), /***Added in Ver 1.5****/ /**ABS added in Ver 1.7 ***/
           ABS(ROUND((OPI_OLD_SGST_AMT - OPI_NEW_SGST_AMT)/100,2)), /***Added in Ver 1.5****/ /**ABS added in Ver 1.7 ***/
           ABS(ROUND((OPI_OLD_UGST_AMT - OPI_NEW_UGST_AMT)/100,2)), /***Added in Ver 1.5****/ /**ABS added in Ver 1.7 ***/
           ABS(ROUND((OPI_OLD_IGST_AMT - OPI_NEW_IGST_AMT)/100,2)),	/***Added in Ver 1.5****/ /**ABS added in Ver 1.7 ***/
            OPI_CUST_STATE_CD, /***Added in Ver 1.5****/
            OPI_ISEC_STATE_CD,   /***Added in Ver 1.5****/
            'N'   /***Added in Ver 1.6****/
		FROM 	  OPI_OPT_PRICING_INC
		WHERE   OPI_PRCS_FLAG='Y'
		AND			OPI_CONF_FLAG='N'
		AND			OPI_FROM_DT	= :c_g_start_date
		AND			OPI_TO_DT	= :c_g_end_date 
		AND 		OPI_ATS_FLG   = :c_g_ats_flg					  /** Added in Ver 1.2 **/ 
/**Commented in 1.5***		AND 		((OPI_OLD_BRKG-OPI_FINAL_BRKG)+(OPI_OLD_SRC_TX-OPI_NEW_SRC_TX)) !=0	***/	
    AND     ((OPI_OLD_BRKG-OPI_FINAL_BRKG)*(OPI_OLD_TOT_GST_AMT- OPI_NEW_TOT_GST_AMT)) !=0  /***Added in Ver 1.5****/
		);
	
	if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31050", SQLMSG, c_err_msg  );
    sprintf(c_msg,"Failed in MDC update");
    fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
    tpabort(0);
		return;		/*Ver 1.6*/
  }
	
	if(DEBUG_MSG_LVL_3)
	{
    fn_userlog (c_ServiceName," Row count of Insert in mdc_misc_dr_cr :%d: ", SQL_ROW_COUNT );
  }

	/************Added in Ver 1.6 start************/
    EXEC SQL
      DECLARE cur_mdc_list_1 CURSOR FOR
        SELECT  MDC_CLM_MTCH_ACCNT,
                MDC_PRDCT_TYP,
                MDC_TOT_AMT,
                MDC_DR_CR_FLG,
                MDC_CRDT_NMBR,
                NVL(MDC_RUN_NO,0),
                TO_CHAR(MDC_FROM_DT,'DD-Mon-YYYY'),
                ROWID
        FROM    MDC_MISC_DR_CR
        WHERE  (MDC_PRDCT_TYP = :c_g_inc_type OR MDC_PRDCT_TYP =:c_g_inc_type_db)
        AND     MDC_LMT_UPD_STTS = 'N'
        AND     TRUNC(MDC_ENTRY_DT) = TRUNC(SYSDATE);

    EXEC SQL OPEN cur_mdc_list_1;

    if(SQLCODE != 0)
    {
      fn_errlog ( c_ServiceName, "S31055", SQLMSG, c_err_msg  );
      sprintf(c_msg,"Contact System support...");
      fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
      tpabort(0);
			return;
    }
	
		while(1)
    {
      MEMSET(sql_mdc_clm_mtch_accnt);
      MEMSET(sql_mdc_prdct_typ);
      MEMSET(sql_mdc_crdt_nmbr);
      MEMSET(c_mdc_rowid);
      MEMSET(sql_mdc_from_dt);
      MEMSET(sql_mdc_sttlmnt_trd_dt);

      sql_mdc_tot_amt=0;
      sql_mdc_dr_cr_flg='X';
      sql_mdc_run_no=0;
      sql_mdc_sttlmnt_nmbr=0;

      EXEC SQL
        FETCH cur_mdc_list_1
        INTO  :sql_mdc_clm_mtch_accnt,
              :sql_mdc_prdct_typ,
              :sql_mdc_tot_amt,
              :sql_mdc_dr_cr_flg,
              :sql_mdc_crdt_nmbr,
              :sql_mdc_run_no,
              :sql_mdc_from_dt,
              :c_mdc_rowid;

      if(SQLCODE != 0)
      {
        if(SQLCODE == NO_DATA_FOUND)
        {
          EXEC SQL CLOSE cur_mdc_list_1;
          break;
        }
        else
        {
          fn_errlog ( c_ServiceName, "S31060", SQLMSG, c_err_msg  );
					EXEC SQL CLOSE cur_mdc_list_1;
          sprintf(c_msg,"Contact System support...");
          fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
          tpabort(0);
					return;
        }
      }

      i_ret_cd=fn_upd_segment_lmt(c_ServiceName,
                                  sql_mdc_clm_mtch_accnt,
                                  sql_mdc_tot_amt,
                                  sql_mdc_prdct_typ,
                                  sql_mdc_dr_cr_flg,
                                  sql_mdc_sttlmnt_trd_dt.arr,
                                  &sql_mdc_sttlmnt_nmbr,
                                  c_err_msg);

      if(i_ret_cd != 0)
      {
        fn_errlog ( c_ServiceName, "S31065", SQLMSG, c_err_msg  );
        EXEC SQL CLOSE cur_mdc_list_1;
        sprintf(c_msg,"Contact System support...");
        fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
        tpabort(0);
				return;
      }

			rtrim(c_mdc_rowid);
      SETLEN(sql_mdc_sttlmnt_trd_dt);

      EXEC SQL
        UPDATE  MDC_MISC_DR_CR
        SET     MDC_LMT_UPD_STTS = 'Y',
                MDC_STTLMNT_TRD_DT = :sql_mdc_sttlmnt_trd_dt,
                MDC_STTLMNT_NMBR = :sql_mdc_sttlmnt_nmbr
        WHERE   MDC_LMT_UPD_STTS = 'N'
        AND     ROWID = :c_mdc_rowid;

			if(SQLCODE != 0)
      {
        fn_errlog ( c_ServiceName, "S31070", SQLMSG, c_err_msg  );
        EXEC SQL CLOSE cur_mdc_list_1;
        sprintf(c_msg,"Contact System support...");
        fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
        tpabort(0);
				return;
      }
    }
    /************Added in Ver 1.6 end************/
	
		EXEC SQL
			UPDATE TMP_OPI_OPT_PRICING_INC
			SET OPI_DISP_FLAG='C'     /*** Confirmation ***/
			WHERE OPI_PRCS_FLAG = 'Y'
			AND 	OPI_ATS_FLG   = :c_g_ats_flg					  /** Added in Ver 1.2 **/ 
			AND		OPI_DISP_FLAG='Y';
	

		if ( ( SQLCODE != 0 ) )
    {
      fn_errlog ( c_ServiceName, "S31075", SQLMSG, c_err_msg  );
      sprintf(c_msg,"Failed while updating TMP_OPI_OPT_PRICING_INC ");
      fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
      tpabort(0);
      return ;
    }

		if(DEBUG_MSG_LVL_3)
  	{
    	fn_userlog (c_ServiceName," Row count of Update of TMP_OPI_OPT_PRICING_INC  table :%d: ", SQL_ROW_COUNT );
  	}
	
		EXEC SQL
			UPDATE OPI_OPT_PRICING_INC
			SET OPI_CONF_FLAG = 'Y'
			WHERE OPI_PRCS_FLAG = 'Y'
			AND		OPI_CONF_FLAG = 'N'
			AND 	OPI_ATS_FLG   = :c_g_ats_flg					  /** Added in Ver 1.2 **/ 
			AND		OPI_FROM_DT = :c_g_start_date
			AND		OPI_TO_DT = :c_g_end_date;  
  
		if ( ( SQLCODE != 0 ) )
    {
      fn_errlog ( c_ServiceName, "S31080", SQLMSG, c_err_msg  );
      sprintf(c_msg,"Failed while updating OPI_OPT_PRICING_INC ");
      fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
      tpabort(0);
      return ;
    }

		if(DEBUG_MSG_LVL_3)
  	{
    	fn_userlog (c_ServiceName," Row count of Update of OPI_OPT_PRICING_INC table :%d: ", SQL_ROW_COUNT );
  	}

	}

	/*** Start for Ver 1.4 **/
	if(fn_prd_insert( c_ServiceName,
										"NA",
										"-",
										0,
										"BO",
										c_g_inc_type,
										"system",
										c_g_start_date,
										c_prcs_dt,
										SQL_ROW_COUNT) == -1)
	{
		fn_userlog (c_ServiceName,"Failed in Audit insert");
		sprintf(c_msg,"Failed in Audit insert");
		fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
		tpabort(0);
		return ;
	}
	/** End of Ver 1.4 **/
	/*** Ver 1.1 Ends ***/													

  if ( tpcommit(0) == -1 )
  {
 		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog (c_ServiceName," Row count %d ", SQL_ROW_COUNT );
    }   
		fn_errlog(c_ServiceName, "S31085", FMLMSG,c_err_msg );
    tpabort(0);
  }

  sprintf(c_msg,"Batch process %s completed",argv[0]);
  fn_userlog (c_ServiceName,"Batch process %s completed",argv[0]);
  fn_userlog (c_ServiceName,"==================End of %s =================",argv[0]);
  fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
}


/******************************************************************************/

int fn_calc_dates( c_qtr_mth_ind,  i_qtr_mth_no ,  i_year)
EXEC SQL BEGIN DECLARE SECTION;
char c_qtr_mth_ind;
int i_qtr_mth_no ;
int i_year;
EXEC SQL END   DECLARE SECTION;
{
  fn_userlog (c_ServiceName,"fn_calc_dates %c %d %d ",c_qtr_mth_ind,i_qtr_mth_no,i_year);

  if (c_qtr_mth_ind == 'M')
  {
    if ( (i_qtr_mth_no > 0)  && (i_qtr_mth_no < 13 ) )
    {
    EXEC SQL 
      SELECT 
      '01-' || TO_CHAR ( TO_DATE(:i_qtr_mth_no,'MM') , 'Mon' ) ||'-'||:i_year
      INTO :c_g_start_date
      FROM    dual;
      if ( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31090", SQLMSG, c_err_msg  );
        return (-1);
      }
      
      EXEC SQL
      SELECT LAST_DAY(:c_g_start_date)
      INTO :c_g_end_date
      FROM DUAL;
      if ( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31095", SQLMSG, c_err_msg  );
        return (-1);
      }
    }
    else
    {
      fn_userlog (c_ServiceName,"Invalid  Month passed. |%d|",i_qtr_mth_no);
      return (-1);
    }
  }
  else
  {
    fn_userlog (c_ServiceName,"Invalid Month indicator passed. |%c|",c_qtr_mth_ind);
    return (-1);
  }

	if(DEBUG_MSG_LVL_3){
  fn_userlog (c_ServiceName,"fn_calc_dates start date %s ",c_g_start_date);
  fn_userlog (c_ServiceName,"fn_calc_dates  end  date %s ",c_g_end_date);
	}
  
  return (0);
}

/******************************************************************************/

int fn_validate_rerun()
{

  EXEC SQL BEGIN DECLARE SECTION;
  long l_l_past_count=0;
  EXEC SQL END   DECLARE SECTION;
	
	if(c_g_mode == 'N')      /*** Added in 1.1 ***/
	{												 /*** Added in 1.1 ***/ 
  EXEC SQL
  SELECT
  count(rowid)
  INTO :l_l_past_count
  FROM  
  OIS_OPT_INC_SMRY
  WHERE 
  :c_g_start_date   = OIS_FROM_DT
  AND :c_g_end_date = OIS_TO_DT
  AND OIS_DISP_FLAG = 'Y'
	AND nvl(OIS_ATS_FLG,'N') = :c_g_ats_flg				/** Ver 1.2 ***/
  AND OIS_PRCS_FLAG = 'Y';
  
  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31100", SQLMSG, c_err_msg  );
    return (-1);
  }

  
  if (l_l_past_count == 0 )
  {
    fn_userlog (c_ServiceName," No past data found |%ld|. Proceed ",l_l_past_count);
  }
  else
  {
    fn_userlog (c_ServiceName," Past data found |%ld|. Abort ... ",l_l_past_count);
    return (-1);
  }

  EXEC SQL
  SELECT
  count(rowid)
  INTO :l_l_past_count
  FROM  
  TMP_OPT_INC_SMRY
  WHERE 
  :c_g_start_date   = OIS_FROM_DT
  AND :c_g_end_date = OIS_TO_DT
  AND OIS_DISP_FLAG = 'Y'
	AND OIS_ATS_FLG   = :c_g_ats_flg				/** Ver 1.2 **/
  AND OIS_PRCS_FLAG = 'N';
  
  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31105", SQLMSG, c_err_msg  );
    return (-1);
  }

  if (l_l_past_count != 0)
  {
    fn_userlog (c_ServiceName," Calculated data found |%ld|. Proceed ",l_l_past_count);
  }
  else
  {
    fn_userlog (c_ServiceName," No calculated data |%ld|. Pls confirm  ... ",l_l_past_count);
    return (-1);
  }
	
	/*** Ver 1.1 Starts ***/
  }	
	else if(c_g_mode == 'O')
	{
	EXEC SQL
	SELECT
	COUNT(rowid)
	INTO :l_l_past_count
	FROM
	OPI_OPT_PRICING_INC
	WHERE 
	OPI_FROM_DT = :c_g_start_date
	AND	OPI_TO_DT = :c_g_end_date
	AND	OPI_PRCS_FLAG = 'Y'
	AND nvl(OPI_ATS_FLG,'N')= :c_g_ats_flg				/*** Ver 1.2 ***/
	AND OPI_CONF_FLAG = 'Y';
  
	if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31110", SQLMSG, c_err_msg  );
    return (-1);
  }


  if (l_l_past_count == 0 )
  {
    fn_userlog (c_ServiceName," No past data found in OPI_OPT_PRICING_INC table |%ld|. Proceed ",l_l_past_count);
  }
  else
  {
    fn_userlog (c_ServiceName," Past data found in OPI_OPT_PRICING_INC table|%ld|. Abort ... ",l_l_past_count);
    return (-1);
  }

	EXEC SQL
  SELECT
  count(rowid)
  INTO :l_l_past_count
  FROM
  TMP_OPI_OPT_PRICING_INC 
  WHERE
	OPI_PRCS_FLAG = 'Y'
	AND OPI_ATS_FLG = :c_g_ats_flg				/*** Ver 1.2 ***/
	AND OPI_DISP_FLAG = 'Y';

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31115", SQLMSG, c_err_msg  );
    return (-1);
  }

  if (l_l_past_count != 0)
  {
    fn_userlog (c_ServiceName," Calculated data found in TMP_OPI_OPT_PRICING_INC table |%ld|. Proceed ",l_l_past_count);
  }
  else
  {
    fn_userlog (c_ServiceName," No calculated data found in TMP_OPI_OPT_PRICING_INC table |%ld|. Pls confirm  ... ",l_l_past_count);
    return (-1);
  }
	}
	/*** Ver 1.1 Ends ***/
  return (0);
}

/******************************************************************************/

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_CONF_OPTINC;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  fn_userlog (c_ServiceName,"-------------------------END--------------------");
  return;
}

int fn_prcs_trg ( char *c_pgm_nm, int i_trg_typ )
{
  return 0;
}

/******************************************************************************/
/*                                END OF CODE                                 */
/******************************************************************************/




