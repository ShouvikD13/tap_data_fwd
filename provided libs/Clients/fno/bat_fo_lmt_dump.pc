
/*  Program           : BAT_FO_LMT_DUMP                                       */
/*                                                                            */
/*  Input             : FFO_XCHNG_CD                                          */
/*                                                                            */
/*  Output            : Success / Failure                                     */
/*                                                                            */
/*  Description       : This batch  selects all the match accounts in FNO	  	*/
/*										  and inserts the limit details into Dump table         */ 
/*                                                                            */
/*  Log               : Ver 1.0   10-Jan-2012       Swati Bharankar           */
/*                                                                            */
/******************************************************************************/
/*  Ver 1.0           : New Release                                           */
/******************************************************************************/

#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <string.h>			
#include <stdlib.h>		 
#include <fml_rout.h>	
#include <fn_read_debug_lvl.h>      

void BAT_FO_LMT_DUMP( int argc, char *argv[] )
{

  int i_ch_val					= 0;
	int i_trnsctn         = 0;
  long li_cnt       		= 0;
	long li_rec_cnt   		= 0;
	long li_rec_count   	= 0;
	long li_tot_records		= 0;
	long li_grpid         = 0;

	char c_rqst_type;
  char c_msg[256];
  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];
  char c_xchng_date[ 11+1 ];
	char c_clm_mtch_accnt[10+1];   
  char c_xchng_cd[3+1];
  char c_rowid[40];

	double  d_alctd_amt		= 0.0;            
	double  d_bft_amt  = 0.0;              
	double  d_plg_amt  = 0.0;              
	double  d_nwb_amt  = 0.0;              
	double  d_isec_mrgn_amt  = 0.0;         
	double  d_current_limit = 0.0;         


  strcpy ( c_ServiceName, argv[0] );

	INITBATDBGLVL(argv[0]);  

	sprintf ( c_msg, "BATCH PROCESS %s STARTED", argv[0] );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  strcpy( c_xchng_cd, argv[2] );

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog( c_ServiceName, "---------- BAT_FO_LMT_DUMP STARTED ---------");
  }

	/*** Truncate the table ***/

	EXEC SQL
    TRUNCATE TABLE FLD_FO_LIMIT_DUMP;
  if(SQLCODE!=0)
  {
    fn_errlog(c_ServiceName,"S31005",SQLMSG,c_err_msg);
    return;
  }

	/*** Get the trade date ***/
	MEMSET(c_xchng_date);

	EXEC SQL
    SELECT  EXG_NXT_TRD_DT
    INTO    :c_xchng_date
    FROM    EXG_XCHNG_MSTR
    WHERE   EXG_XCHNG_CD = :c_xchng_cd;      /*** Replace with EXG_MKT_TYP = 'D' check for BSE changes ***/ 

  if( (SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
  {
    fn_userlog(c_ServiceName,"Inside Selection Of Exchange Date");
    fn_errlog(c_ServiceName,"S31010",SQLMSG,c_err_msg);
    return;
  }	

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
	if( i_trnsctn == -1 )
	{
		fn_errlog(c_ServiceName, "S31015", LIBMSG, c_err_msg);
		fn_userlog(c_ServiceName, "Error while beginning the transaction");
		return;
	}

	EXEC SQL
	INSERT INTO TMP_FO_LIMIT_DUMP
	(
		TMP_CLM_MTCH_ACCNT,
		TMP_ALCTD_AMT,
		TMP_BFT_AMT,
		TMP_PLG_AMT,
/*		TMP_NWB_AMT, */
		TMP_ISEC_MRGN_AMT
	)
	( SELECT	FAB_CLM_MTCH_ACCNT,
						NVL(FAB_ALCTD_AMT,0),
						NVL(FAB_BFT_AMT,0),
						NVL(FAB_PLG_AMT,0),
/*						NVL(FAB_NWB_AMT,0), */
						NVL(FAB_ISEC_MRGN_AMT,0)
		FROM    FAB_FO_ALC_BFT_SMRY
		WHERE   FAB_CLM_MTCH_ACCNT IN 
						( SELECT  DISTINCT FUP_CLM_MTCH_ACCNT 
							FROM FUP_FUT_UNDRLYNG_PSTN
							WHERE FUP_UTRD_MRGN <> 0
							UNION 
						  SELECT  DISTINCT FOP_CLM_MTCH_ACCNT 
							FROM FOP_FO_OPTIONS_PSTN
							WHERE FOP_UEXCTD_MRGN <> 0
					  )	
	);
	if(SQLCODE != 0)
	{
		fn_errlog(c_ServiceName, "S31020", SQLMSG,c_err_msg);
		fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
		return;
	}			

	if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
	{
		fn_errlog(c_ServiceName, "S31025", SQLMSG, c_err_msg);
		fn_userlog(c_ServiceName, "Error in commit [%s] exiting..", c_err_msg);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		return;
	}

	EXEC SQL
	SELECT COUNT(ROWID)
	INTO  :li_tot_records
	FROM TMP_FO_LIMIT_DUMP;
	if(SQLCODE != 0)
	{
		fn_errlog(c_ServiceName, "S31030", SQLMSG,c_err_msg);
		return;
	}			
	
	while (1)
	{
		/**Reseting Old Values **/

	  MEMSET(c_clm_mtch_accnt);
	  MEMSET(c_rowid);
		d_alctd_amt= 0.0;
		d_bft_amt = 0.0;
		d_plg_amt = 0.0;
		d_nwb_amt = 0.0;
		d_isec_mrgn_amt = 0.0;
		d_current_limit = 0.0;

		EXEC SQL
			SELECT	TMP_CLM_MTCH_ACCNT,
							NVL(TMP_ALCTD_AMT,0),
							NVL(TMP_BFT_AMT,0),
							NVL(TMP_PLG_AMT,0),
							NVL(TMP_NWB_AMT,0),
							NVL(TMP_ISEC_MRGN_AMT,0),
							ROWID
				INTO  :c_clm_mtch_accnt,
							:d_alctd_amt,
							:d_bft_amt,
							:d_plg_amt,
							:d_nwb_amt,
							:d_isec_mrgn_amt,
							:c_rowid
			FROM    TMP_FO_LIMIT_DUMP 
			WHERE  ROWNUM <2
			ORDER BY TMP_CLM_MTCH_ACCNT;

		if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
		{
			fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg );
			break;
		}

		if( SQLCODE == NO_DATA_FOUND )
		{
			if ( li_rec_cnt != 0 )
			{
				fn_userlog(c_ServiceName, " li_rec_cnt != 0 AND NO_DATA_FOUND ");

				if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
				{
					fn_errlog(c_ServiceName, "S31040", SQLMSG, c_err_msg);
					fn_userlog(c_ServiceName, "Error in commit [%s] exiting..", c_err_msg);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					return;
				}
			}					

			break;
		}

		/*** Begin Transcation ***/		
	  if ( li_rec_cnt == 0 )
		{
			fn_userlog(c_ServiceName, " Beginning Transcation");

			i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
			if( i_trnsctn == -1 )
			{
				fn_errlog(c_ServiceName, "S31045", LIBMSG, c_err_msg);
				fn_userlog(c_ServiceName, "Error while beginning the transaction");
				return;
			}
		}	

		/*** Get the current Limit For this Match ***/
	
		c_rqst_type = LIMIT_X ;  /*** This is for Viewing the limits ***/
    li_grpid  = 0 ;  				 /*** Set o default as i is not required for LIMIT_X case***/
     EXEC SQL
          EXECUTE
            BEGIN
            LIMIT_CAL
              ( :c_clm_mtch_accnt,
                :c_xchng_date,
                :c_rqst_type,
                :li_grpid,
                :c_xchng_cd,
                :d_current_limit,
                :i_ch_val
              );
            END;
          END-EXEC;

    if ( i_ch_val == -1 )
    {
      fn_aborttran ( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog ( c_ServiceName, "S31050",LIBMSG,c_err_msg );
			return;
    }
					


		/*** Insert Into Dump Table ***/
			
		EXEC SQL	
		INSERT INTO FLD_FO_LIMIT_DUMP
		(
			FLD_CLM_MTCH_ACCNT,      
			FLD_TRADE_DT ,           
			FLD_CURRNT_LMT ,         
			FLD_ALCTD_AMT,           
			FLD_BFT_AMT,             
			FLD_PLG_AMT,             
			FLD_NWB_AMT,             
			FLD_ISEC_MRGN_AMT,
			FLD_SPN_CHECK        
		)
		VALUES
	 	(	
			:c_clm_mtch_accnt,
			:c_xchng_date,     
			:d_current_limit,    
			:d_alctd_amt,     
			:d_bft_amt,       
			:d_plg_amt,       
			:d_nwb_amt,       
			:d_isec_mrgn_amt,
		  'N'	
		);
		if(SQLCODE != 0)
		{
			fn_errlog(c_ServiceName, "S31055", SQLMSG,c_err_msg);
			fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
			return;
		}			
	
		li_rec_cnt ++;
		li_rec_count++;

		EXEC SQL
		DELETE FROM  TMP_FO_LIMIT_DUMP
		WHERE ROWID = RTRIM(:c_rowid);
		if(SQLCODE != 0)
		{
			fn_errlog(c_ServiceName, "S31060", SQLMSG,c_err_msg);
			fn_aborttran(c_ServiceName,i_trnsctn, c_err_msg );
			return;
		}			
		
	  if ( li_rec_cnt ==  500 ) 
    {
      fn_userlog(c_ServiceName," Processing Record %ld of %ld",li_rec_count,li_tot_records);

       if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
       	{
        	fn_errlog(c_ServiceName, "S31065", SQLMSG, c_err_msg);
        	fn_userlog(c_ServiceName, "Error in commit [%s] exiting..", c_err_msg);
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	return;
     		}
      li_rec_cnt  = 0 ;
    }

	} // End of While Loop	


	sprintf ( c_msg, "Batch process %s ended", argv[0] );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  return;
}

int fn_bat_init ( int argc, char *argv[] ) 
{
	fn_var = BAT_FO_LMT_DUMP;
	return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
	return 0;
}
