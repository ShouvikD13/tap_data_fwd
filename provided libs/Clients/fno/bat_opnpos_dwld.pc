/*****************************************************************************************
Batch Program : BAT_OPNPOS_DWLD

Purpose       : To download the open positions from Match.

Author        : |ICICI Infotech|sangeet

Date          : 25-09-2001

Version       :  1.0      Release
Version       :  1.1      Release|Modification for the Report and making program pc
Version       :  1.2			IBM Migration Ranjit	
Version       :  1.3		  Taking data directly from PS03 file when Match derivative is down.(Shamili)	
Version       :  1.4      Changes for BSE ( Mahesh/ sandip )
Version       :  1.5      Changes for Optimization ( Nitin Save )
*****************************************************************************************/

#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fml_def.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <string.h>		/*ver 1.2 */
#include <fml_rout.h>	/*ver 1.2 */
#include <fn_read_debug_lvl.h>	/* ver 1.2 */


/**** Ver 1.3 Starts ***/

#define NORMAL  "N"
#define FILE "F"
#define OUTPUT_FML   11


int fn_create_ps03(    char  *c_ServiceName,
                        char  *c_err_msg,
                        char  *c_ixchng_cd,
                        char  *c_trd_dt,
                        char  *c_eba_mtch_act_no);


FBFR32  *ptr_fml_buf;

/**** Ver 1.3 Ends ***/


void BAT_OPNPOS_DWLD ( int argc, char *argv[] )
{
	long int li_tot_rcrds;
  int i_ch_val;
  int i_trnsctn;
  long int li_cnt;
  char c_msg[256];
	/*FBFR32 *ptr_fml_buf; */						/*** Ver 1.3 ***/
	char c_run_mode[2]; 								/*** Ver 1.3 ***/
  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];

  char  c_usr_id[8];
  long  l_session_id;
  long  l_open_position;
  char  c_trd_dt[12];
  char  c_ixchng_cd [21];
  char  c_oxchng_cd [21];
  char  c_client_code[21] ;
  char  c_instrmnt_typ[9] = "NNNNNNNN" ;
  char    c_symbol[12] = "NNNNNNNNNNN" ;
  char    c_expry_dt[12] = "NNNNNNNNNNN" ;
  char    c_opt_typ[3] = "NN" ;
  /*char    c_ca_lvl[3] ;	*** ver 1.2 */
  double  d_strike_prc = 0.00;
  long    l_strike_prc = 0;
  long    l_close_price;
	long		l_ca_lvl;			/* ver 1.2 */
  long  l_bse_token_id=0;           /*** Ver 1.4 ***/
  char  c_series_cd[24]={'\0'};         /*** Ver 1.4 ***/
	
	char c_rout_str[4];

  strcpy ( c_ServiceName, argv[0] );
	INITDBGLVL(c_ServiceName);	/* ver 1.2 */

	sprintf ( c_msg, "Batch process %s started", argv[0] );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	strcpy ( c_msg, "Creating data. Please wait ... " );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  strcpy(c_usr_id,"system");
  l_session_id = 0;
  strcpy( c_ixchng_cd, argv[2] );
  strcpy(c_trd_dt, argv[4] );
  strcpy(c_client_code, argv[5] );
	strcpy(c_run_mode,argv[6]);     /** Ver 1.3 **/

  /*** For Service routing ***/
  fn_init_ddr_pop("NA", "NA", "NA");

	if (strcmp(c_run_mode, NORMAL) == 0)
  {	

			if (DEBUG_MSG_LVL_3){
			fn_userlog(c_ServiceName,"c_run_mode = NORMAL");
			}

			ptr_fml_buf = fn_create_rs ( c_ServiceName,
                               		 c_err_msg,
                                   "SFO_GETOPNPSTN",
                                   TPNOTIME,
                                   5,
															     FFO_USR_ID, ( char * )c_usr_id,
															     FFO_SSSN_ID, ( char * )&l_session_id,
															     FFO_XCHNG_CD, ( char * )c_ixchng_cd,
															     FFO_TRD_DT, ( char * )c_trd_dt,
															     FFO_EBA_MTCH_ACT_NO, (char *)c_client_code );
			if ( ptr_fml_buf == NULL )
			{
				fn_errlog( c_ServiceName, "S31005", LIBMSG, c_err_msg );
  			strcpy ( c_msg, "System error. Contact system support" );
  			fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
				return;
			}
	}

	/****** Ver 1.3 Starts**********/

  else if ( strcmp(c_run_mode,FILE) == 0 )
  {

				 if (DEBUG_MSG_LVL_3){
         fn_userlog(c_ServiceName,"c_run_mode = FILE");
				 }

         i_ch_val = fn_create_ps03 (c_ServiceName,
																	  c_err_msg,
																	  c_ixchng_cd,
																	  c_trd_dt,
																	  c_client_code);


        if ( i_ch_val == -1 )
        {
            fn_errlog( c_ServiceName, "S31010", LIBMSG, c_err_msg );
            strcpy ( c_msg, "Could Not Create Data.." );
            fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
            return;
        }


  }	

	else
  {
           fn_userlog(c_ServiceName,"Invalid Run mode option ");
           fn_errlog( c_ServiceName, "S31015", LIBMSG, c_err_msg );
           strcpy ( c_msg, "Invalid Run mode option");
           fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
           return;

  }

  /****** Ver 1.3  Ends **********/

	li_tot_rcrds = fn_reccnt_rs ( ptr_fml_buf,
                                c_ServiceName,
                                c_err_msg,
                                FFO_EBA_MTCH_ACT_NO);
	
	if ( li_tot_rcrds == SYSTEM_ERROR )
	{
		fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg );
		fn_dstry_rs ( ptr_fml_buf );
		return;
	}

	strcpy ( c_msg, "Data created." );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  sprintf ( c_msg, "Total records = %ld", li_tot_rcrds );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
	if ( i_trnsctn == -1 )
  {
			fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg );
			fn_dstry_rs ( ptr_fml_buf );
  		strcpy ( c_msg, "System error. Contact system support" );
  		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			return;
  }
	
	EXEC SQL
	DELETE FRP_FO_RECO_PSTN
	WHERE FRP_XCHNG_CD = :c_ixchng_cd;		/** Ver 1.4 ***/

	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)			/** 1.3 **/
  {
			fn_errlog( c_ServiceName, "S31030", SQLMSG, c_err_msg );
			fn_dstry_rs ( ptr_fml_buf );
  		strcpy ( c_msg, "System error. Contact system support" );
  		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			return;
  }
  
	
	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
			fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg );
			fn_dstry_rs ( ptr_fml_buf );
  		strcpy ( c_msg, "System error. Contact system support" );
  		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			return;
  }

  for ( li_cnt=1; li_cnt<=li_tot_rcrds; li_cnt++ )
  {
    if(strcmp(c_ixchng_cd ,"NFO") == 0)			/** Ver 1.4 If added **/
    {
			i_ch_val = fn_getnxt_rs ( ptr_fml_buf,
                              c_ServiceName,
                              c_err_msg,
                              9,
                              FFO_EBA_MTCH_ACT_NO , ( char * )c_client_code, NULL,
                              FFO_INSTRMNT_TYP , ( char * )c_instrmnt_typ, NULL,
                              FFO_SYMBOL, ( char * )c_symbol, NULL,
                              FFO_EXPRY_DT, ( char * )c_expry_dt, NULL,
                              FFO_OPTION_TYP,( char * )c_opt_typ, NULL,
                              FFO_CA_LVL, ( char *)&l_ca_lvl, NULL,	/*c_ca_lvl changed to l_ca_lvl ver 1.2*/ 
                              FFO_XCHNG_CD, ( char * )c_oxchng_cd, NULL,
                              FFO_OPNPSTN_QTY, (char *)&l_open_position,NULL,
                              FFO_HGH_PRC, ( char * )&l_strike_prc, NULL);
	  }
		else if(strcmp(c_ixchng_cd ,"BFO") == 0)	/*** Ver 1.4 ELSE IF added **/
		{
			i_ch_val = fn_getnxt_rs ( ptr_fml_buf,
                              c_ServiceName,
                              c_err_msg,
                              11,
                              FFO_EBA_MTCH_ACT_NO , ( char * )c_client_code, NULL,
                              FFO_INSTRMNT_TYP , ( char * )c_instrmnt_typ, NULL,
                              FFO_SYMBOL, ( char * )c_symbol, NULL,
                              FFO_EXPRY_DT, ( char * )c_expry_dt, NULL,
                              FFO_OPTION_TYP,( char * )c_opt_typ, NULL,
                              FFO_CA_LVL, ( char *)&l_ca_lvl, NULL,	/*c_ca_lvl changed to l_ca_lvl ver 1.2*/ 
                              FFO_XCHNG_CD, ( char * )c_oxchng_cd, NULL,
                              FFO_OPNPSTN_QTY, (char *)&l_open_position,NULL,
                              FFO_HGH_PRC, ( char * )&l_strike_prc, NULL ,
															FFO_TOKEN_ID , (char *)&l_bse_token_id, NULL,
                              FFO_STCK_CD, (char *)c_series_cd ,NULL);
		}/** ver 1.4 Else ends **/
		if ( i_ch_val != 0 )
		{
			fn_errlog( c_ServiceName, "S31040", LIBMSG, c_err_msg );
			fn_dstry_rs ( ptr_fml_buf );
  		strcpy ( c_msg, "System error. Contact system support" );
  		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			return;
		}
	
		/**** Ver 1.4 Starts ***/

		if(strncmp(c_series_cd,"MSX",3) == 0)
    {
      fn_userlog(c_ServiceName,"Original Symbol=:%s:",c_symbol);
      strcpy(c_symbol,"MSX");
      fn_userlog(c_ServiceName,"Copied Symbol =:%s:",c_symbol);
    }
		/******* Ver 1.4 Ends ****/

		d_strike_prc = ((double)(l_strike_prc ))/ 100 ;
		fn_userlog(c_ServiceName,"THE STRIKE PRICE_LONG IS :%ld:",l_strike_prc);
		fn_userlog(c_ServiceName,"THE STRIKE PRICE_DOUBLE IS :%lf:",d_strike_prc);
		fn_userlog(c_ServiceName,"The option type before call to SFO_OPNPOS_DWLD is :%s:",c_opt_typ);
		fn_userlog(c_ServiceName,"The match account before call to SFO_OPNPOS_DWLD is :%s:",c_client_code);
		fn_userlog(c_ServiceName,"The c_instrmnt_typ before call to SFO_OPNPOS_DWLD is :%s:",c_instrmnt_typ);
		fn_userlog(c_ServiceName,"The c_symbol before call to SFO_OPNPOS_DWLD is :%s:",c_symbol);
		fn_userlog(c_ServiceName,"The c_expry_dt before call to SFO_OPNPOS_DWLD is :%s:",c_expry_dt);
		/*fn_userlog(c_ServiceName,"The c_ca_lvl before call to SFO_OPNPOS_DWLD is :%s:",l_ca_lvl);*ver 1.2 */
		fn_userlog(c_ServiceName,"The c_oxchng_cd before call to SFO_OPNPOS_DWLD is :%s:",c_oxchng_cd);
		fn_userlog(c_ServiceName,"l_bse_token_id  :%ld:",l_bse_token_id);	/** Ver 1.4 Userlog **/
    fn_userlog(c_ServiceName,"c_series_cd :%s:",c_series_cd);					/** Ver 1.4 Userlog **/

    if(li_cnt % 50 == 1)
    {
      sprintf ( c_msg, "Processing record %ld of %ld", li_cnt, li_tot_rcrds );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    }


		if (strcmp(c_run_mode, NORMAL) == 0)				/** 1.3 **/
		{
    	  /*** Commented in Ver 1.5 Starts   *********/
        /*******************************************
				i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
                                  c_err_msg,
                                  "sfr_beod_mtchgt",
                                  li_cnt,
                                  li_tot_rcrds );
        *******************************************/
        /*** Commented in Ver 1.5 Ends   *********/

				/*************  Ver 1.5 Starts *******************/
				fn_userlog(c_ServiceName,"Processing record %ld of %ld", li_cnt, li_tot_rcrds );

				i_ch_val = fn_pre_prcs_rcrd ( c_ServiceName,
        		                          c_err_msg,
            		                      "sfr_beod_prcs",        /** Changed server name in Ver 1.5 **/
                		                  li_cnt,
                    		              li_tot_rcrds );
				/***********  Ver 1.5 Ends *******************/

    		if ( i_ch_val == -1 )
    		{
					fn_errlog( c_ServiceName, "S31045", LIBMSG, c_err_msg );
					fn_dstry_rs ( ptr_fml_buf );
  				strcpy ( c_msg, "System error. Contact system support" );
  				fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
					return;
        }

		}

		/* To clarify with SWAMI about FFO_EBA_CNTRCT_ID as input */
		fn_cpy_ddr(c_rout_str);

    i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                  c_err_msg,
                                  "SFO_OPNPOS_DWLD",
                                  0,
																	12,
                              		FFO_EBA_MTCH_ACT_NO, ( char * )c_client_code, 
                              		FFO_INSTRMNT_TYP , ( char * )c_instrmnt_typ,
                              		FFO_SYMBOL, ( char * )c_symbol,
                              		FFO_EXPRY_DT, ( char * )c_expry_dt,
                              		FFO_OPTION_TYP,( char * )c_opt_typ,
                              		FFO_STRIKE_PRC, ( char * )&d_strike_prc,
                              		FFO_CA_LVL, ( char * )&l_ca_lvl, /* c_ca_lvl changed to l_ca_lvl ver 1.2 */
                              		FFO_XCHNG_CD, ( char * )c_oxchng_cd,
                              		FFO_OPNPSTN_QTY, (char *)&l_open_position,
                                  FFO_BAT_TAG, ( char * )c_tag,
                                  FFO_REC_NO, ( char * )&li_cnt,
                              		FFO_ROUT_CRT, (char*) c_rout_str );
    if ( i_ch_val == -1 )
    {
			fn_errlog( c_ServiceName, "S31050", LIBMSG, c_err_msg );
			fn_dstry_rs ( ptr_fml_buf );
  		strcpy ( c_msg, "System error. Contact system support" );
  		fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
			return;
		}

  }

	fn_dstry_rs ( ptr_fml_buf );

	sprintf ( c_msg, "Batch process %s ended", argv[0] );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  return;
}

int fn_bat_init ( int argc, char *argv[] ) 
{
	fn_var = BAT_OPNPOS_DWLD;
	return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
	return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
	return 0;
}


/******* Ver 1.3 Starts ***************/

int fn_create_ps03(  char  *c_ServiceName,
                     char  *c_err_msg,
                     char  *c_ixchng_cd,
                     char  *c_trd_dt,
                     char  *c_client_code)

{

    int cnt_opn_pos;
    int i_err[11];
    char c_msg[256];

    double d_sttlmnt_prcs;
    double d_strike_price;

    long l_ca_level;
    long l_strike_price;
    long l_open_position;
    long l_exercise_qty;
    long l_assgnmnt_qty;
    long l_sttlmnt_prcs;
		long l_pstexrasslng_qty;           
  	long l_pstexrassshrt_qty;           
  	long l_net_open_qty;              

		char  c_client_code1[11] ;
    char c_assgn_dt[12];
    char c_contract_ins_typ[7];
    char c_symbol[21];
    char c_expiry_dt[12];
    char c_option_typ[3];

    int l=0,k;
    int i_trnsctn;

		MEMSET(c_client_code1);

    Finit32(ptr_fml_buf, (FLDLEN32) Fsizeof32(ptr_fml_buf));
		
		ptr_fml_buf = ( FBFR32 * ) tpalloc ( "FML32", NULL, MIN_FML_BUF_LEN );
    if ( ptr_fml_buf == NULL )
    {
        fn_errlog ( c_ServiceName, "L31060", TPMSG, c_err_msg );
        return -1;
    }

    EXEC SQL
         SELECT count(*)
         INTO  :cnt_opn_pos
         FROM  fpt_fo_ps01_tmp
         WHERE (fpt_postexasgmntlongqty - fpt_postexasgmntshortqty ) != 0
				 AND   fpt_positiondate = :c_trd_dt;

     if(  SQLCODE != 0  )
     {
         fn_errlog(c_ServiceName, "S31055", SQLMSG, c_err_msg);
         strcpy( c_msg, "System error. Contact system support" );
         fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
         return -1;
     }
	
		 fn_userlog(c_ServiceName," Total open positions :%d:",cnt_opn_pos); 
			

     if(cnt_opn_pos == 0)
     {
         fn_userlog(c_ServiceName,"No open position under this contarct");
         strcpy( c_msg, "No records to procesd");
         fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
         return -1;
     }


      EXEC SQL
           DECLARE get_ps03_det CURSOR FOR
            SELECT fpt_positiondate,
                   fpt_clientaccountcode,
                   fpt_instrumenttype,
                   fpt_symbol,
                   fpt_expirydate,
                   fpt_strikeprice,
                   fpt_optiontype,
                   fpt_calevel,
									 fpt_postexasgmntlongqty,
									 fpt_postexasgmntshortqty, 
                   fpt_settlementprice
            FROM   fpt_fo_ps01_tmp
            WHERE  ( fpt_postexasgmntlongqty - fpt_postexasgmntshortqty) !=  0
					  AND			fpt_positiondate = :c_trd_dt
            ORDER BY fpt_positiondate,fpt_expirydate ;

      if( SQLCODE != 0 )
      {
          fn_errlog(c_ServiceName, "S31060", SQLMSG, c_err_msg);
          strcpy( c_msg, "System error. Contact system support" );
          fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
          return -1;
      }


		 EXEC SQL
        OPEN get_ps03_det;

         if(SQLCODE !=0 )
         {
               fn_errlog(c_ServiceName,"S31065",SQLMSG,c_err_msg) ;
               tpfree((char*)ptr_fml_buf) ;
               return -1;
         }


       while(1)
       {

            EXEC SQL
                 FETCH get_ps03_det
                 INTO   :c_assgn_dt,
                        :c_client_code1,
                        :c_contract_ins_typ,
                        :c_symbol,
                        :c_expiry_dt,
                        :d_strike_price,
                        :c_option_typ,
                        :l_ca_level,
												:l_pstexrasslng_qty,
												:l_pstexrassshrt_qty,
                        :d_sttlmnt_prcs;


          if(SQLCODE==NO_DATA_FOUND)
          {
              fn_userlog(c_ServiceName," NO_DATA_FOUND ");
              EXEC SQL
              CLOSE get_ps03_det;
              break;
          }

					else if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
          {
              EXEC SQL
              CLOSE get_ps03_det;
              fn_errlog(c_ServiceName,"S31070",SQLMSG,c_err_msg);
              return -1;
          }


          l_strike_price =  (long)(d_strike_price* 100);
					l_net_open_qty = l_pstexrasslng_qty - l_pstexrassshrt_qty;

          rtrim(c_symbol);

					/*** Ver 1.4 Starts ***/
          /*** strcpy(c_ixchng_cd,"NSE"); Commented by Mahesh for BSE Changes ***/


  			  if (strcmp(c_ixchng_cd,"NFO") == 0)
  			  {
    				strcpy(c_ixchng_cd ,"NSE");
  			  }
  			  else if (strcmp(c_ixchng_cd,"BFO") == 0)
  			  {
    				strcpy(c_ixchng_cd ,"BSE");
  			  }

  			  /***  Ver 1.4 Ends here ***/



					 if (DEBUG_MSG_LVL_3){
					 fn_userlog(c_ServiceName,"c_trd_dt :%s:",c_trd_dt);
           fn_userlog(c_ServiceName,"c_client_code1 :%s:",c_client_code1);
           fn_userlog(c_ServiceName,"c_contract_ins_typ, :%s:",c_contract_ins_typ);
           fn_userlog(c_ServiceName,"c_symbol, :%s:",c_symbol);
           fn_userlog(c_ServiceName,"c_expiry_dt,:%s:",c_expiry_dt);
           fn_userlog(c_ServiceName,"l_strike_price,:%ld:",l_strike_price);
           fn_userlog(c_ServiceName,"c_option_typ,:%s:",c_option_typ);
           fn_userlog(c_ServiceName,"l_ca_level,:%ld:",l_ca_level);
           fn_userlog(c_ServiceName,"l_net_open_qty,:%ld:",l_net_open_qty);
           fn_userlog(c_ServiceName,"-----------------------------------------");
					 }

          i_err[0] = Fadd32(ptr_fml_buf, FFO_EBA_MTCH_ACT_NO, (char *)c_client_code1, 0);
          i_err[1] = Fadd32(ptr_fml_buf, FFO_INSTRMNT_TYP, (char *)c_contract_ins_typ, 0);
          i_err[2] = Fadd32(ptr_fml_buf, FFO_SYMBOL, (char *)c_symbol, 0);
          i_err[3] = Fadd32(ptr_fml_buf, FFO_EXPRY_DT, (char *)c_expiry_dt, 0);
          i_err[4] = Fadd32(ptr_fml_buf, FFO_OPTION_TYP, (char *)c_option_typ, 0);
          i_err[5] = Fadd32(ptr_fml_buf, FFO_HGH_PRC, (char *)&l_strike_price, 0);
          i_err[6] = Fadd32(ptr_fml_buf, FFO_CA_LVL , (char *)&l_ca_level, 0);
          i_err[7] = Fadd32(ptr_fml_buf, FFO_OPNPSTN_QTY, (char *)&l_net_open_qty, 0);
          i_err[8] = Fadd32(ptr_fml_buf, FFO_XCHNG_CD, (char *)c_ixchng_cd, 0);

           l++ ;

					 if (DEBUG_MSG_LVL_3){
           fn_userlog(c_ServiceName,"After Fadd of cycle no %ld",l); }

           for (k=0;k<OUTPUT_FML;k++)
           {
                if (i_err[k] == -1)
                {
                        fn_userlog(c_ServiceName,"Error in Fadd at %d",k);
                        fn_errlog ( c_ServiceName, "S31075", TPMSG, c_err_msg );
                        tpfree((char *)ptr_fml_buf);
												return -1;
                }
           }



      } /*** End of while ***/

return 0;

}

/****** Ver 1.3 Ends **********/

