/**********************************************************************************/
/** Program Name : bat_insdr_sndmail.pc                                           */
/**                                                                               */
/** Description  : This program will write the insider transactions into file from*/
/**                insider report table for called company. Calls the shell script*/
/**                                                                               */
/**                to send the file attached mail to company.                     */
/** Ver 1.0     :  Sachin Birje.                                                  */
/** Ver 1.1     :  Sachin Birje || Remove of Extra spaces from column values.     */
/** Ver 1.2     :  Sachin Birje || Mail trigger on process fail                   */
/** Ver 1.3     :  Sandip Tambe || SUNGARD Insider Report changes									*/
/** Ver 1.4     :  Sandip Tambe || CITI Insider Report changes	   								*/
/** Ver 1.5     :  Sandip Tambe || JPM Insider Report  sftp changes	   						*/
/** Ver 1.6     :  Sandip Tambe || ENY Insider Report  sftp changes	   						*/
/** Ver 1.7     :  Sandip Tambe || GSC Insider Report  sftp changes	   						*/
/** Ver 1.8     :  Sandip Tambe || IPRDInsider Report  sftp changes               */
/** Ver 1.9     :  Varadraj G   || Position report generation and sending         */
/** Ver 2.0     :  Varadraj G   || Trade report generation for CITI               */
/** Ver 2.1     :  Sandip Tambe || Fortnightly mailer trigger issue on 01st       */
/** Ver 2.2     :  Tanmay patel || CRISIL Insider Report sftp changes             */
/** Ver 2.3     :  Sanjeet pawar || UBS Insider Report sftp changes               */
/** Ver 2.4     :  Viraj Yadav ||	Barclays Insider Report SFTP Changes RQ:2366    */
/** Ver TOL     :  Agam         || Tux on Linux                                   */
/**********************************************************************************/
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include<fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <string.h>
#include <stdlib.h>
#include <fn_read_debug_lvl.h>
#include <eba.h>
#include <time.h>
#include <sys/time.h>   /* Added in Ver TOL */

#define SUCCESS 0
#define FAIL  -1

char c_ServiceName [ 33 ];
char c_err_msg [ 256 ];
char c_msg[100];
char c_time[7];

void fn_gettime(void );

int fn_trade_report( char* c_file_name,
                     char *c_comp_cd,
                     char *c_from_date,
                     char *c_to_date,
                     char *c_ServiceName,
                     char *c_err_msg
                   );

int fn_trdrpt_othrs( char* c_file_name,
                     char *c_comp_cd,
                     char *c_from_date,
                     char *c_to_date,
                     char c_accdls_flg,
                     char *c_ServiceName,
                     char *c_err_msg
                   );

int fn_open_pos_report(char *c_file_name_pos, 
                       char *c_comp_cd,
                       char *c_from_date,
                       char *c_to_date,
                       char *c_ServiceName,
                       char *c_err_msg);

int fn_ipofpo_report( int i_records,
                        char* c_file_name,
                        char *c_from_dt,
                        char *c_to_dt,
                        char *c_ServiceName,
                        char *c_err_msg);

int fn_accdtls_report(char *c_file_name_pos,
                       char *c_comp_cd,
                       char *c_from_date,
                       char *c_to_date,
                       char *c_ServiceName,
                       char *c_err_msg);

int fn_pstnrpt_othrs(char* c_file_name,             /*** Ver 1.9 ***/
                     char *c_comp_cd,
                     char *c_from_date,
                     char *c_to_date,
                     char c_accdls_flg,
                     char *c_ServiceName,
                     char *c_err_msg
                   );


void BAT_INSDR_SNDMAIL( int argc, char *argv[] )
{
  int i_ret_val=0;
  int i_ret=0;
  int i=0;
	int i_trnsctn=0; /** Ver 1.2 **/

  char c_filedate[9];
  char c_file_name [ 200 ];
  char c_file_name_pos [ 200 ];
  char c_file_name_opo [ 200 ];
  char c_file_name_mr [ 200 ];
  char c_file_name_accdtls[200];

  char c_command[512];
  char c_comp_cd[6];
  char c_from_date[12];
  char c_to_date[12];
  char c_smpl[200];
  char c_tmp_file_nm[200];
  char c_mail_id[20];
  char c_accdls_flg='\0';

  char c_trd_dt[12];   /****** Ver 1.9 *********/
  char c_pos_flg='N'; /****** Ver 1.9 *********/
  char c_trg_flg='N'; /****** Ver 1.9 *********/
 
  strcpy( c_tag, "BAT_INSDR_SNDMAIL");

  INITBATDBGLVL(argv[0]);

  sprintf ( c_msg, "Batch process %s started...........", argv[0] );

	strcpy ( c_ServiceName, argv[0] ); /** Ver 1.2 **/

  fn_userlog(c_ServiceName," Batch process %s started...........",c_ServiceName );

  MEMSET(c_filedate);
  MEMSET(c_command);

  /*** For Service routing ***/
  fn_init_ddr_pop("NA", "NA", "NA");

  strcpy(c_comp_cd,argv[4]);
  strcpy(c_from_date,argv[5]);
  strcpy(c_to_date,argv[6]);
  
  fn_userlog(c_ServiceName,"Generating Trade Report for ..........:%s:",c_comp_cd );
  fn_userlog(c_ServiceName,"c_from_date  ..........:%s:",c_from_date);
  fn_userlog(c_ServiceName,"c_to_date    ..........:%s:",c_to_date);
  EXEC SQL
    SELECT to_char(sysdate,'yyyymmdd'),
           trunc(sysdate-1)                        /** ver 1.9 **/
    INTO :c_filedate,
         :c_trd_dt                                 /** ver1.9  **/ 
    FROM DUAL;
  if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31005",SQLMSG,c_err_msg);
    fn_userlog(c_ServiceName,"Error in selecting file time" );
    exit(-1);
  }
  
  EXEC SQL 
    SELECT NVL(IOM_ACCDTLS_FLG,'N'),
         case when nvl(IOM_PSTN_FRQNCY,'N') ='M' and to_char(sysdate-1,'DD')='01' then 'Y'   /** ver 1.9 **/
              when nvl(IOM_PSTN_FRQNCY,'N') ='W' and to_char(sysdate-1,'Dy')='Mon' then 'Y'  
              when nvl(IOM_PSTN_FRQNCY,'N') ='F' and to_char(sysdate-1,'DD')='16' then 'Y'  
              when nvl(IOM_PSTN_FRQNCY,'N') ='F' and to_char(sysdate-1,'DD')='01' then 'Y'  /** ver 2.1 **/
              when nvl(IOM_PSTN_FRQNCY,'N') ='D'  then 'Y'
       else 'N' end,
         case when nvl(IOM_MAIL_FRQNCY,'N') ='M' and to_char(sysdate,'DD')='01' then 'Y'   /** ver 1.9 **/
              when nvl(IOM_MAIL_FRQNCY,'N') ='W' and to_char(sysdate,'Dy')='Mon' then 'Y'
              when nvl(IOM_MAIL_FRQNCY,'N') ='F' and to_char(sysdate,'DD')='16' then 'Y'
              when nvl(IOM_MAIL_FRQNCY,'N') ='F' and to_char(sysdate,'DD')='01' then 'Y'		/** ver 2.1 **/
              when nvl(IOM_MAIL_FRQNCY,'N') ='D'  then 'Y'
      else 'N' end
      INTO :c_accdls_flg,
           :c_pos_flg,                                                              /** ver 1.9 **/
           :c_trg_flg                                                               /** ver 1.9 **/
      FROM IOM_INFO_ORGANIZATION_MSTR
     WHERE IOM_ORGANIZATION_CODE=:c_comp_cd;

  if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31010",SQLMSG,c_err_msg);
    fn_userlog(c_ServiceName,"Error in selecting file time" );
    /** Ver 1.2 Starts Here **/
    sprintf( c_command, "ksh $HOME/sh_scripts/fo_mail_process_stts.sh %s %s %s ",c_ServiceName,argv[2],argv[3]);
    system(c_command);
    /** Ver 1.2 Ends Here **/
    exit(-1);
  }
  if( strcmp( c_comp_cd ,"SUNG") == 0 )
  { 
    fn_gettime();
    sprintf(c_file_name,"%s/%s/fno/emp_trade_report_%s.csv",tuxgetenv("EBALOG_PATH"),c_filedate,c_comp_cd);

    i_ret_val = fn_trade_report(c_file_name,
                                c_comp_cd,
                                c_from_date,
                                c_to_date,
                                c_ServiceName,
                                c_err_msg);

    if( i_ret_val == -1 )
    {
     fn_errlog( c_ServiceName, "S31015",LIBMSG,c_err_msg);
     fn_userlog(c_ServiceName,"Trade report could not be created" );
     sprintf ( c_msg, " Trade report could not be created" );
     /** Ver 1.2 Starts Here **/
     sprintf( c_command, "ksh $HOME/sh_scripts/fo_mail_process_stts.sh %s %s %s ",c_ServiceName,argv[2],argv[3]);
     system(c_command);
     /** Ver 1.2 Ends Here **/
     return;
    }

    fn_gettime();
    sprintf(c_file_name_pos,"%s/%s/fno/emp_pos_report_%s.csv",tuxgetenv("EBALOG_PATH"),c_filedate,c_comp_cd);
  
    i_ret_val = fn_open_pos_report(c_file_name_pos,  
                                   c_comp_cd,
                                   c_from_date,
                                   c_to_date,
                                   c_ServiceName,
                                   c_err_msg);
    if( i_ret_val == -1 )
    {
     fn_errlog( c_ServiceName, "S31020",LIBMSG,c_err_msg);
     fn_userlog(c_ServiceName,"Open position futures report could not be created" );
     sprintf ( c_msg, " Open position futures report could not be created" );
     /** Ver 1.2 Starts Here **/
     sprintf( c_command, "ksh $HOME/sh_scripts/fo_mail_process_stts.sh %s %s %s ",c_ServiceName,argv[2],argv[3]);
     system(c_command);
     /** Ver 1.2 Ends Here **/
     return;
    }
    /*****
    fn_gettime();
    sprintf(c_file_name_orf,"%s/%s/fno/emp_ipofpo_report_%s.csv",tuxgetenv("EBALOG_PATH"),c_filedate,c_comp_cd);

    i_ret_val = fn_ipofpo_report(c_comp_cd,
                                 c_from_date,
                                 c_to_date,
                                 c_ServiceName,
                                 c_err_msg);
    if( i_ret_val == -1 )
    {
      fn_errlog( c_ServiceName, "S31025",LIBMSG,c_err_msg);
      fn_userlog(c_ServiceName,"Open position futures report could not be created" );
      sprintf ( c_msg, " Open position futures report could not be created" );
      return;
    }
   **/

   fn_gettime();
   sprintf(c_file_name_accdtls,"%s/%s/fno/emp_accdtls_report_%s.csv",tuxgetenv("EBALOG_PATH"),c_filedate,c_comp_cd);

   i_ret_val = fn_accdtls_report(c_file_name_accdtls, 
                                 c_comp_cd,
                                 c_from_date,
                                 c_to_date,
                                 c_ServiceName,
                                 c_err_msg);
   if( i_ret_val == -1 )
   {
    fn_errlog( c_ServiceName, "S31030",LIBMSG,c_err_msg);
    fn_userlog(c_ServiceName,"Open position futures report could not be created" );
    sprintf ( c_msg, " Account Details report could not be created" );		/** ver 1.3 **/
    /** Ver 1.2 Starts Here **/
    sprintf( c_command, "ksh $HOME/sh_scripts/fo_mail_process_stts.sh %s %s %s ",c_ServiceName,argv[2],argv[3]);
    system(c_command);
    /** Ver 1.2 Ends Here **/
    return;
   }

   sprintf( c_command, "ksh fo_sndmail_emptrnrpt.sh emp_trade_report_%s.csv emp_pos_report_%s.csv emp_accdtls_report_%s.csv %s",c_comp_cd,c_comp_cd,c_comp_cd,c_comp_cd);				/** ver 1.3 **/
   fn_userlog( c_ServiceName,"Mail send command :%s", c_command );
   system(c_command);
   
  }
  /** Ver 1.6 comment ***
	else if( strcmp( c_comp_cd ,"GSC") == 0 )
  {
    fn_gettime();
    sprintf(c_file_name,"%s/%s/fno/emp_trade_report_%s.csv",tuxgetenv("EBALOG_PATH"),c_filedate,c_comp_cd);

    i_ret_val = fn_trade_report(c_file_name,
                                c_comp_cd,
                                c_from_date,
                                c_to_date,
                                c_ServiceName,
                                c_err_msg);

    if( i_ret_val == -1 )
    {
     fn_errlog( c_ServiceName, "S31035",LIBMSG,c_err_msg);
     fn_userlog(c_ServiceName,"Trade report could not be created" );
     sprintf ( c_msg, " Trade report could not be created" );
     ** Ver 1.2 Starts Here **
    sprintf( c_command, "ksh $HOME/sh_scripts/fo_mail_process_stts.sh %s %s %s ",c_ServiceName,argv[2],argv[3]);
    system(c_command);
    ** Ver 1.2 Ends Here **
     return;
    }

    fn_gettime();
    sprintf(c_file_name_pos,"%s/%s/fno/emp_pos_report_%s.csv",tuxgetenv("EBALOG_PATH"),c_filedate,c_comp_cd);

    i_ret_val = fn_open_pos_report(c_file_name_pos, 
                                   c_comp_cd,
                                   c_from_date,
                                   c_to_date,
                                   c_ServiceName,
                                   c_err_msg
                                  );
    if( i_ret_val == -1 )
    {
     fn_errlog( c_ServiceName, "S31040",LIBMSG,c_err_msg); 
     fn_userlog(c_ServiceName,"Open position futures report could not be created" );
     sprintf ( c_msg, " Open position futures report could not be created" );
     ** Ver 1.2 Starts Here **
    sprintf( c_command, "ksh $HOME/sh_scripts/fo_mail_process_stts.sh %s %s %s ",c_ServiceName,argv[2],argv[3]);
    system(c_command);
    ** Ver 1.2 Ends Here **
     return;
    }
    *****
    fn_gettime();
    sprintf(c_file_name_orf,"%s/%s/fno/emp_ipofpo_report_%s.csv",tuxgetenv("EBALOG_PATH"),c_filedate,c_comp_cd);

    i_ret_val = fn_ipofpo_report(c_comp_cd,
                                 c_from_date,
                                 c_to_date,
                                 c_ServiceName,
                                 c_err_msg
                                );
    if( i_ret_val == -1 )
    { 
      fn_errlog( c_ServiceName, "S31045",LIBMSG,c_err_msg);
      fn_userlog(c_ServiceName,"Open position futures report could not be created" );
      sprintf ( c_msg, " Open position futures report could not be created" );
			sprintf( c_command, "ksh $HOME/sh_scripts/fo_mail_process_stts.sh %s %s %s ",c_ServiceName,argv[2],argv[3]);
			system(c_command);
      return;
    }
   **

    fn_gettime();
    sprintf(c_file_name_accdtls,"%s/%s/fno/emp_accdtls_report_%s.csv",tuxgetenv("EBALOG_PATH"),c_filedate,c_comp_cd);

    i_ret_val = fn_accdtls_report(c_file_name_accdtls,  
                                  c_comp_cd,
                                  c_from_date,
                                  c_to_date,
                                  c_ServiceName,
                                  c_err_msg
                                 );
    if( i_ret_val == -1 )
    {
     fn_errlog( c_ServiceName, "S31050",LIBMSG,c_err_msg);
     fn_userlog(c_ServiceName,"Open position futures report could not be created" );
     sprintf ( c_msg, " Open position futures report could not be created" );
     ** Ver 1.2 Starts Here **
    sprintf( c_command, "ksh $HOME/sh_scripts/fo_mail_process_stts.sh %s %s %s ",c_ServiceName,argv[2],argv[3]);
    system(c_command);
    ** Ver 1.2 Ends Here **
     return;
    }

    sprintf( c_command, "ksh fo_sndmail_emptrnrpt.sh emp_trade_report_%s.csv emp_pos_report_%s.csv emp_accdtls_report_%s.csv  %s %s %s",c_comp_cd,c_comp_cd,c_comp_cd,c_comp_cd,c_from_date,c_to_date);				** ver 1.3 **
    fn_userlog( c_ServiceName,"Mail send command :%s", c_command );
    system(c_command);
   } **** Ver 1.6 comment ends */
   else  /*** BOA & Other ***/
   {
    fn_userlog(c_ServiceName,"Company CD :%s:",c_comp_cd); 
    fn_gettime();

   if(c_trg_flg == 'Y')  /*** condition added in ver 1.9 ***/
   {
    sprintf(c_file_name,"%s/%s/fno/emp_trade_report_%s.csv",tuxgetenv("EBALOG_PATH"),c_filedate,c_comp_cd);

    i_ret_val = fn_trdrpt_othrs( c_file_name,
                                 c_comp_cd,
                                 c_from_date,
                                 c_to_date, 
                                 c_accdls_flg,
                                 c_ServiceName,
                                 c_err_msg
                               );

    if( i_ret_val == -1 )
    {
     fn_errlog( c_ServiceName, "S31055",LIBMSG,c_err_msg);
     fn_userlog(c_ServiceName,"Open position futures report could not be created" );
     sprintf ( c_msg, " Open position futures report could not be created" );
     /** Ver 1.2 Starts Here **/
    		sprintf( c_command, "ksh $HOME/sh_scripts/fo_mail_process_stts.sh %s %s %s ",c_ServiceName,argv[2],argv[3]);
    		system(c_command);
     return;
    }
   }
    /******************** Ver 1.9 starts ******************/
 
    if(c_pos_flg == 'Y')
    {
     sprintf(c_file_name,"%s/%s/fno/emp_othrpos_report_%s.csv",tuxgetenv("EBALOG_PATH"),c_filedate,c_comp_cd);
     i_ret_val= fn_pstnrpt_othrs(c_file_name,
                                 c_comp_cd,
                                 c_from_date,
                                 c_to_date,
                                 c_accdls_flg,
                                 c_ServiceName,
                                 c_err_msg
                                );
     if(i_ret_val == -1)
     {
      fn_errlog( c_ServiceName, "S31060",LIBMSG,c_err_msg);
      fn_userlog(c_ServiceName,"Positional report for others could not be created" );
      return;
     }  
    }
   /************************** Ver 1.9 Ends *****************/
		if(strcmp(c_comp_cd,"JPM") != 0 && strcmp(c_comp_cd,"ENY") != 0 && strcmp(c_comp_cd,"GSC") != 0 && strcmp(c_comp_cd,"IPRD") != 0 && strcmp(c_comp_cd,"CITI") != 0 && strcmp(c_comp_cd,"CRSL") != 0 && strcmp(c_comp_cd,"UBS") != 0 && 
	strcmp(c_comp_cd,"BARC")!= 0 &&
	strcmp(c_comp_cd,"BCAP")!= 0 &&
	strcmp(c_comp_cd,"BBHK")!= 0 &&
	strcmp(c_comp_cd,"BJAP")!= 0 &&
	strcmp(c_comp_cd,"BSIN")!= 0 
	) /** ver 1.5 if addedd ***/    /** Ver 1.6 ENY **/ /** Ver 1.7 GSC */  /** Ver 1.8 **/ /** Ver 2.0 **/ /** Ver 2.2 CRSL **/ /** Ver 2.3 UBS **/ /** Ver 2.4 BARC BCAP BBHK BJAP BSIN **/
		{
      if(c_trg_flg == 'Y')  /*** If condition added in ver 1.9 ***/
      {
      	sprintf( c_command, "ksh $HOME/sh_scripts/fo_sndmail_othr_emptrnrpt.sh emp_trade_report_%s.csv %s %s %s",c_comp_cd,c_comp_cd,c_from_date,c_to_date);
    	  fn_userlog( c_ServiceName,"Mail send command :%s", c_command );
      	system(c_command);
     
        MEMSET(c_command);
        sprintf( c_command, "ksh $HOME/sh_scripts/insdr_mail_to_ops.sh %s %s %s", c_from_date , c_to_date,c_comp_cd);
        system(c_command);
      }
      if(c_pos_flg == 'Y')  /*** ver 1.9 ***/
      {
      sprintf( c_command, "ksh $HOME/sh_scripts/fo_sndmail_othr_emptrnrpt_pos.sh emp_othrpos_report_%s.csv %s %s %s",c_comp_cd,c_comp_cd,c_from_date,c_to_date);
      fn_userlog( c_ServiceName,"Mail send command in case of other positional report:%s", c_command );
      system(c_command);
      
      MEMSET(c_command);
      sprintf( c_command, "ksh $HOME/sh_scripts/insdr_mail_to_ops_pos.sh %s %s %s", c_from_date , c_to_date,c_comp_cd);
      system(c_command);
      fn_userlog( c_ServiceName,"Mail send command for OPS in case of other positional report is completed:%s", c_command );
      } /** ver 1.9 ended **/

		}		/** Ver 1.5 else part **/
	  else
		{
			fn_userlog( c_ServiceName,"JPM report generation completed..");
			return; 
		}
    /** Ver 1.2 Ends Here **/
   }

   /**** Ver 1.2 Starts here ****/
   i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
   if ( i_trnsctn == -1 )
   {
     fn_errlog( c_ServiceName, "S31065",TPMSG,c_err_msg);
     sprintf ( c_msg, "Error in creating reports. contact system support !" );
     /** Ver 1.2 Starts Here **/
     sprintf( c_command, "ksh $HOME/sh_scripts/fo_mail_process_stts.sh %s %s %s ",c_ServiceName,argv[2],argv[3]);
     system(c_command);
     /** Ver 1.2 Ends Here **/
     return;
   }

   EXEC SQL
     UPDATE IOM_INFO_ORGANIZATION_MSTR
        SET IOM_MAIL_SEND_DT = SYSDATE
      WHERE IOM_ORGANIZATION_CODE =:c_comp_cd;
   if( SQLCODE != 0 )
   {
     fn_errlog ( c_ServiceName, "S31070", SQLMSG, c_err_msg);
     fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
     /** Ver 1.2 Starts Here **/
     sprintf( c_command, "ksh $HOME/sh_scripts/fo_mail_process_stts.sh %s %s %s ",c_ServiceName,argv[2],argv[3]);
     system(c_command);
     /** Ver 1.2 Ends Here **/
     return;
   }

   if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
   {
     fn_errlog ( c_ServiceName, "S31075", TPMSG, c_err_msg);
     fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
     /** Ver 1.2 Starts Here **/
     sprintf( c_command, "ksh $HOME/sh_scripts/fo_mail_process_stts.sh %s %s %s ",c_ServiceName,argv[2],argv[3]);
     system(c_command);
     /** Ver 1.2 Ends Here **/
     return;
   }

   /**** Ver 1.2 Ends here ****/

  fn_userlog(c_ServiceName,"===========bat_insdr_sndmail Completed======" );

  return;
}


int fn_trade_report( char *c_file_name,
                     char *c_comp_cd,
                     char *c_from_date,
                     char *c_to_date,
                     char *c_ServiceName,
                     char *c_err_msg
                   )
{

  int i_rec_cnt=0;
  int i=0;

  FILE  *fp ;
  char c_file_header [ 500 ];
  char c_file_record [ 500 ];
  char c_feed_data[1024];
  char c_rowid[25];
 
  typedef struct trns_rowid 
  {
   char c_rowid[25];
  }st_trns_rowid;

  st_trns_rowid *ptr_st_trns_rowid;

  fn_userlog(c_ServiceName,"File is :%s: ",c_file_name);

  fp = (FILE *)fopen(c_file_name,"w") ;

  if(fp == NULL)
  {
    fn_userlog(c_ServiceName,"-------UNABLE TO OPEN FILE %s-------",c_file_name);
    sprintf ( c_msg, "Error in creating trade report. contact system support !" );
    return -1;
  }


  sprintf(c_file_header,"product|Symbol |Cusip|Sedol|Isin|Security Type|Ric Code|Corporate Security Id|Security Name |Account Number |Broker |Transaction Type |Trade Date |Settlement Date|Quantity |Price |Principal Amount|Net Amount|Commission|Interest|Sec Fees|Other Fees|Other Fees 2|Other Fees 3|Cancel Flag|Correct Flag|Comments|Trade Id |Trade Short Sale Position Type Code|Open Close Option Code|Currency Code|Option Symbol|Expiration Date|Security Indicator|Strike Price"); /** Ver 1.3 'M' removed*/
  /*sprintf(c_file_header,"product,Symbol ,Cusip,Sedol,Isin,Security Type,Ric Code,Corporate Security Id,Security Name ,Account Number ,Broker ,Transaction Type ,Trade Date ,Settlement Date,Quantity ,Price ,Principal Amount,Net Amount,Commission,Interest,Sec Fees,Other Fees,Other Fees 2,Other Fees 3,Cancel Flag,Correct Flag,Comments,Trade Id ,Trade Short Sale Position Type Code,Open Close Option Code,Currency Code,Option Symbol,Expiration Date,Security Indicator,Strike Price"); ** Ver 1.3 'M' removed*/

  fprintf(fp,"%s\n",c_file_header);

  EXEC SQL
    SELECT count(1)
      INTO :i_rec_cnt
      FROM ETR_EMP_TRANS_RPT 
     WHERE ETR_CORP_NAME = :c_comp_cd
       AND ETR_RPT_DT >= to_date(:c_from_date,'dd-Mon-YYYY')
       AND ETR_RPT_DT <= to_date(:c_to_date,'dd-Mon-YYYY'); 
  if(SQLCODE != 0 )
  {
   fn_errlog( c_ServiceName, "S31080",SQLMSG,c_err_msg);
   exit(-1);
  }

  fn_userlog(c_ServiceName,"Total number FNO Trans :%d:",i_rec_cnt);

  if( i_rec_cnt > 0 )
  {
    ptr_st_trns_rowid = calloc(sizeof(st_trns_rowid),i_rec_cnt);

    if (ptr_st_trns_rowid == NULL )
    {
      fn_userlog(c_ServiceName,"-------Error in allocating pointer ------");
      sprintf ( c_msg, "Error in creating the reports. contact system support !" );
      exit(-1);
    }

    EXEC SQL
    DECLARE cur_fo_trns_rowid CURSOR for
    SELECT  ETR_EMP_TRANS_RPT.ROWID
    FROM ETR_EMP_TRANS_RPT 
     WHERE ETR_CORP_NAME = :c_comp_cd
       AND ETR_RPT_DT >= to_date(:c_from_date,'dd-Mon-YYYY')
       AND ETR_RPT_DT <= to_date(:c_to_date,'dd-Mon-YYYY')
       ORDER BY ETR_PRD_CD;

    EXEC SQL OPEN cur_fo_trns_rowid;  

    if(SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31085",SQLMSG,c_err_msg);
      sprintf ( c_msg, "Error in creating reports. contact system support !" ); 
      exit(-1);
    }

    EXEC SQL FOR :i_rec_cnt
    FETCH cur_fo_trns_rowid 
    INTO :ptr_st_trns_rowid;

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog( c_ServiceName, "S31090",SQLMSG,c_err_msg);
      fn_userlog(c_ServiceName,"Error in fetching cur_fo_trns_rowid " );
      sprintf ( c_msg, "Error in creating reports. contact system support !" );
      EXEC SQL CLOSE cur_fo_trns_rowid ;
      exit(-1);
    }

    EXEC SQL CLOSE cur_fo_trns_rowid ; 

    for(i=0;i<i_rec_cnt;i++)
    {
      strcpy(c_rowid,ptr_st_trns_rowid[i].c_rowid);
      rtrim(c_rowid);   
      fn_userlog(c_ServiceName," Rowid :%s:",c_rowid);
 
      EXEC SQL
        select etr_sec_id ||'|'||
        null ||'|'||
        null ||'|'||
        ETR_ISIN_NO ||'|'||
        null ||'|'||
        null ||'|'||
        ETR_ISIN_NO ||'|'||
        ETR_STK_NM ||'|'||				
        etr_mtch_accnt ||'|'||
        'ICICI Securities Ltd.' ||'|'||
        decode(rtrim(etr_trd_flw),'B','BUY','S','SELL','P','BUY','DI','BUY','SI','BUY','TI','BUY','R','SELL','SO','SELL','SW','SELL','TO','SELL') ||'|'||		/** ver 1.3 **/
        to_char(etr_trd_dt,'mm/dd/yyyy') ||'|'||
        to_char(etr_trd_settl_dt,'mm/dd/yyyy') ||'|'||
        etr_trd_qty ||'|'||
        etr_sec_trd_prc ||'|'||
        etr_trd_val ||'|'||
        etr_trd_net_val ||'|'||
        nvl(etr_commission,0) ||'|'||
        0 ||'|'||
        nvl(etr_sec_fees,0) ||'|'||
        nvl(etr_othr_fees,0) ||'|'||
        nvl(etr_othr_fees2,0) ||'|'||
        nvl(ETR_OTHR_FEES3,0) ||'|'|| /** ver 1.3 NVL added **/
        'N' ||'|'||
        'N' ||'|'||
        '' ||'|'||
        etr_trd_exec_no ||'|'||
        '' ||'|'||
        '' ||'|'||
        'INR' ||'|'||
        ETR_OPT_SYMBL ||'|'||
        to_char(ETR_OPT_EXPRY_DT,'mm/dd/yyyy') ||'|'||
        decode(ETR_OPTION_CD,'*','',ETR_OPTION_CD) ||'|'|| 		/** Ver 1.3 **/
        ETR_OPT_STRK_PRC 																	/** Ver 1.3 **/
    INTO :c_feed_data
   FROM ETR_EMP_TRANS_RPT
   WHERE ROWID = :c_rowid;
  
   if(SQLCODE != 0 )
   {
     fn_errlog( c_ServiceName, "S31095",SQLMSG,c_err_msg);
     sprintf ( c_msg, "Error in creating reports. contact system support !" );
     free(ptr_st_trns_rowid);
     exit(-1);
   }

 		fprintf(fp,"%s\n",c_feed_data);
   } 

  } /** End Of i while **/ 

  fclose(fp);  
  free(ptr_st_trns_rowid); 
}


int fn_open_pos_report(char *c_file_name_pos,
                       char *c_comp_cd,
                       char *c_from_date,
                       char *c_to_date,
                       char *c_ServiceName,
                       char *c_err_msg)
{

  int i_rec_cnt=0;
  int i=0;

  FILE  *fp ;
  char c_file_header [ 500 ];
  char c_file_record [ 500 ];
  char c_feed_data[1024];
  char c_rowid[25];

  typedef struct trns_rowid
  {
   char c_rowid[25];
  }st_trns_rowid;

  st_trns_rowid *ptr_st_trns_rowid;

  fn_userlog(c_ServiceName,"File is :%s: ",c_file_name_pos);

  fp = (FILE *)fopen(c_file_name_pos,"w") ;

  if(fp == NULL)
  {
    fn_userlog(c_ServiceName,"-------UNABLE TO OPEN FILE %s-------",c_file_name_pos);
    sprintf ( c_msg, "Error in creating trade report. contact system support !" );
    return -1;
  }


  sprintf(c_file_header,"Product|Account Number |Broker |Symbol|Cusip|Quantity |Sedol|ISIN|Ric Code|Corporate Security Id|Security Name|Security Name 2|Account Type|Option Symbol|Expiration Date|Security Indicator|Strike Price|Security Type"); /** ver 1.3 */
  /*sprintf(c_file_header,"Product,Account Number ,Broker ,Symbol,Cusip,Quantity ,Sedol,ISIN,Ric Code,Corporate Security Id,Security Name,Security Name 2,Account Type,Option Symbol,Expiration Date,Security Indicator,Strike Price,Security Type"); ** ver 1.3 */

  fprintf(fp,"%s\n",c_file_header);

  EXEC SQL
    SELECT count(1)
      INTO :i_rec_cnt
      FROM EPR_EMP_PSTN_RPT 
     WHERE EPR_CORP_NAME = :c_comp_cd
       AND trunc(EPR_RPT_DT) >= to_date(:c_from_date,'dd-Mon-YYYY')  /** Ver 1.3 **/
       AND trunc(EPR_RPT_DT) <= to_date(:c_to_date,'dd-Mon-YYYY');	 /** Ver 1.3 **/
  if(SQLCODE != 0 )
  {
   fn_errlog( c_ServiceName, "S31100",SQLMSG,c_err_msg);
   exit(-1);
  }

  fn_userlog(c_ServiceName,"Total number FNO Trans :%d:",i_rec_cnt);

  if( i_rec_cnt > 0 )
  {
    ptr_st_trns_rowid = calloc(sizeof(st_trns_rowid),i_rec_cnt);

    if (ptr_st_trns_rowid == NULL )
    {
      fn_userlog(c_ServiceName,"-------Error in allocating pointer ------");
      sprintf ( c_msg, "Error in creating the reports. contact system support !" );
      exit(-1);
    }

    EXEC SQL
    DECLARE cur_fo_pos_rowid CURSOR for
    SELECT  ROWID
    FROM   EPR_EMP_PSTN_RPT 
     WHERE EPR_CORP_NAME = :c_comp_cd
       AND trunc(EPR_RPT_DT) >= to_date(:c_from_date,'dd-Mon-YYYY')	/** ver 1.3 **/
       AND trunc(EPR_RPT_DT) <= to_date(:c_to_date,'dd-Mon-YYYY')		/** ver 1.3 **/
       ORDER BY EPR_PRD_CD;

    EXEC SQL OPEN cur_fo_pos_rowid;

    if(SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31105",SQLMSG,c_err_msg);
      sprintf ( c_msg, "Error in creating reports. contact system support !" );
      exit(-1);
    }

    EXEC SQL FOR :i_rec_cnt
    FETCH cur_fo_pos_rowid
    INTO :ptr_st_trns_rowid;

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog( c_ServiceName, "S31110",SQLMSG,c_err_msg);
      fn_userlog(c_ServiceName,"Error in fetching cur_fo_trns_rowid " );
      sprintf ( c_msg, "Error in creating reports. contact system support !" );
      EXEC SQL CLOSE cur_fo_pos_rowid ;
      exit(-1);
    }

    EXEC SQL CLOSE cur_fo_pos_rowid ;

    for(i=0;i<i_rec_cnt;i++)
    {
      strcpy(c_rowid,ptr_st_trns_rowid[i].c_rowid);
      rtrim(c_rowid);
      fn_userlog(c_ServiceName," Rowid :%s:",c_rowid);
      MEMSET(c_feed_data);

      EXEC SQL
      SELECT EPR_MTCH_ACCNT ||'|'||
       'ICICI Securities Ltd.'||'|'||
       EPR_SEC_ID||'|'||
       null ||'|'||
       EPR_TRD_QTY ||'|'||
       null ||'|'||
       EPR_ISIN_NO ||'|'||
       null ||'|'||
       null ||'|'||
       EPR_SEC_DESC ||'|'||
       null ||'|'||
       'Individual' ||'|'||				/** ver 1.3 **/
       EPR_OPT_SYMBL ||'|'||
       to_char(EPR_EXPRY_DT,'mm/dd/yyyy') ||'|'||
       decode(EPR_OPT_CD,'*','',EPR_OPT_CD) ||'|'||			/** ver 1.3 **/
       EPR_STRK_PRC ||'|'||													/** ver 1.3 **/
       null 
     INTO :c_feed_data
     FROM EPR_EMP_PSTN_RPT 
      WHERE ROWID = :c_rowid and EPR_TRD_QTY > 0 ;

   if(SQLCODE != 0 )
   {
     fn_errlog( c_ServiceName, "S31115",SQLMSG,c_err_msg);
     sprintf ( c_msg, "Error in creating reports. contact system support !" );
     free(ptr_st_trns_rowid);
     exit(-1);
   }

    fprintf(fp,"%s\n",c_feed_data);
   }
  } /** End Of i while **/
  fclose(fp);
  free(ptr_st_trns_rowid);
}


int fn_accdtls_report(char *c_file_name_pos,
                       char *c_comp_cd,
                       char *c_from_date,
                       char *c_to_date,
                       char *c_ServiceName,
                       char *c_err_msg)
{

  int i_rec_cnt=0;
  int i=0;

  FILE  *fp ;
  char c_file_header [ 500 ];
  char c_file_record [ 500 ];
  char c_feed_data[1024];
  char c_rowid[25];
  char c_matchid[11];

  typedef struct trns_rowid
  {
   char c_matchid[11];
  }st_trns_rowid;

  st_trns_rowid *ptr_st_accdtls;

  fn_userlog(c_ServiceName,"File is :%s: ",c_file_name_pos);

  fp = (FILE *)fopen(c_file_name_pos,"w") ;

  if(fp == NULL)
  {
    fn_userlog(c_ServiceName,"-------UNABLE TO OPEN FILE %s-------",c_file_name_pos);
    sprintf ( c_msg, "Error in creating trade report. contact system support !" );
    return -1;
  }


  sprintf(c_file_header,"Account Number (M),Established Date,Broker ,Corporate AP Id,Account Name (M),Account Description (M),Closed Date,Tax Id,Not Monitored,Account Type ,Broker Contact,Broker Address 1,Broker Address 2,Broker City,Broker State,Broker Zip,Broker Phone,Broker Country Code,Comments");

  fprintf(fp,"%s\n",c_file_header);

  EXEC SQL
    SELECT count(match_id)
      INTO :i_rec_cnt
    from  
      (select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee
                 from ITE_INSD_TRD_EMP_MSTR,IAI_INFO_ACCOUNT_INFO
                 WHERE IAI_MATCH_ACCOUNT_NO = nvl(ITE_MTCH_ACCNT,'NA')
                 AND   ITE_AUTHRZTN_FLG='Y'
		       AND   trim(ITE_CMPY_ID)='SUNG'
                UNION
                 select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative
                 FROM ITE_INSD_TRD_EMP_MSTR,IAI_INFO_ACCOUNT_INFO
                 WHERE IAI_MATCH_ACCOUNT_NO = nvl(ITE_RELATIVE_MTCH,'NA')
                 AND   ITE_AUTHRZTN_FLG='Y'
		       AND   trim(ITE_CMPY_ID)='SUNG'
       ); 
  if(SQLCODE != 0 )
  {
   fn_errlog( c_ServiceName, "S31120",SQLMSG,c_err_msg);
   exit(-1);
  }

  fn_userlog(c_ServiceName,"Total number FNO Trans :%d:",i_rec_cnt);

  if( i_rec_cnt > 0 )
  {
    ptr_st_accdtls = calloc(sizeof(st_trns_rowid),i_rec_cnt);

    if (ptr_st_accdtls == NULL )
    {
      fn_userlog(c_ServiceName,"-------Error in allocating pointer ------");
      sprintf ( c_msg, "Error in creating the reports. contact system support !" );
      exit(-1);
    }

    EXEC SQL
    DECLARE cur_fo_accdtls CURSOR for
    SELECT  match_id 
    from  
    (select distinct nvl(ITE_MTCH_ACCNT,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'N' Employee
                 from ITE_INSD_TRD_EMP_MSTR,IAI_INFO_ACCOUNT_INFO
                 WHERE IAI_MATCH_ACCOUNT_NO = nvl(ITE_MTCH_ACCNT,'NA')
                 AND   ITE_AUTHRZTN_FLG='Y'
           AND   trim(ITE_CMPY_ID)='SUNG'
                UNION
                 select distinct nvl(ITE_RELATIVE_MTCH,'NA') match_id,trim(ITE_CMPY_ID) Company_cd, 'Y' Relative
                 FROM ITE_INSD_TRD_EMP_MSTR,IAI_INFO_ACCOUNT_INFO
                 WHERE IAI_MATCH_ACCOUNT_NO = nvl(ITE_RELATIVE_MTCH,'NA')
                 AND   ITE_AUTHRZTN_FLG='Y'
           AND   trim(ITE_CMPY_ID)='SUNG'
    ); 
    EXEC SQL OPEN cur_fo_accdtls;

    if(SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31125",SQLMSG,c_err_msg);
      sprintf ( c_msg, "Error in creating reports. contact system support !" );
      exit(-1);
    }

    EXEC SQL FOR :i_rec_cnt
    FETCH cur_fo_accdtls
    INTO :ptr_st_accdtls;

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog( c_ServiceName, "S31130",SQLMSG,c_err_msg);
      fn_userlog(c_ServiceName,"Error in fetching cur_fo_trns_rowid " );
      sprintf ( c_msg, "Error in creating reports. contact system support !" );
      EXEC SQL CLOSE  cur_fo_accdtls;
      exit(-1);
    }

    EXEC SQL CLOSE  cur_fo_accdtls;

    for(i=0;i<i_rec_cnt;i++)
    {
      strcpy(c_matchid,ptr_st_accdtls[i].c_matchid);
      rtrim(c_matchid);
      fn_userlog(c_ServiceName," Match Id:%s:",c_matchid);
      MEMSET(c_feed_data);

      EXEC SQL
      select distinct  IAI_MATCH_ACCOUNT_NO ||'|'||			/** ver 1.3 **/
       			 to_char(IAI_MATCH_ACCOUNT_OPEN_DT,'mm/dd/yyyy') ||'|'||
       			 'ICICI SECURITIES LTD' ||'|'||
						 ITE_EMP_ID ||'|'||													/** ver 1.3 **/
       			 (rtrim(IPD_FIRST_NAME)||' '|| rtrim(IPD_MIDDLE_NAME)||' '|| rtrim(IPD_LAST_NAME)) ||'|'|| /** ver 1.3 **/
      		  'ICICI Trading Account' ||'|'||
       			 null ||'|'||
       			 ICD_PAN_NO ||'|'||
      		  'N' ||'|'||
      		  '401K' ||'|'||
       		 '912240701000' ||'|'||
      		  'Shree Sawan Knowledge Park Gr. Floor, Plot No. D-507.' ||'|'|| /** ver 1.3 , removed from address **/
       		 'TTC Industrial Area, MIDC  Turbhe.' ||'|'||
      		  'Navi Mumbai' ||'|'||
      		  'MAHARASHTRA' ||'|'||
       		 '400705' ||'|'||
       		 '912240701000' ||'|'||
       			 '91' ||'|'||
       		 null
      INTO :c_feed_data
      FROM  IAI_INFO_ACCOUNT_INFO,
            IPD_INFO_PERSONAL_DTLS,
            ICD_INFO_CLIENT_DTLS,
						IAD_INFO_ADDRESS_DTLS,
						CLD_DP_ACCTS,
						UAC_USR_ACCNTS,ITE_INSD_TRD_EMP_MSTR				/** Ver 1.3 Query changed ***/
			WHERE IAI_SERIAL_NO			=	ICD_SERIAL_NO
			AND   ICD_SERIAL_NO 		= IPD_SERIAL_NO
			AND   IAD_SERIAL_NO 		= IAI_SERIAL_NO
			AND   IAD_SERIAL_NO 		= IPD_SERIAL_NO
			AND   IAD_SERIAL_NO 		= ICD_SERIAL_NO
			AND   IAI_MATCH_ACCOUNT_NO = ICD_CLNT_CD
			AND   IAI_MATCH_ACCOUNT_NO = ITE_MTCH_ACCNT
			AND   ICD_CLNT_CD 			= ITE_MTCH_ACCNT
			AND   UAC_CLM_MTCH_ACCNT=	ICD_CLNT_CD
			AND   CLD_CLM_MTCH_ACCNT=	ICD_CLNT_CD
			AND   UAC_CLM_MTCH_ACCNT=	CLD_CLM_MTCH_ACCNT
			AND   IAD_ADDRESS_TYPE	= 'APPLICANT_CORR'
			AND   CLD_DP_ACC_TYP	  = 'E'
			AND 	IPD_TYPE					= 'APPLICANT'
			AND   ITE_CMPY_ID				= 'SUNG'
      AND   ICD_CLNT_CD 			= :c_matchid and rownum <2;

   if(SQLCODE != 0 )
   {
     fn_errlog( c_ServiceName, "S31135",SQLMSG,c_err_msg);
     sprintf ( c_msg, "Error in creating reports. contact system support !" );
     free(ptr_st_accdtls);
     exit(-1);
   }

    fprintf(fp,"%s\n",c_feed_data);
   }
  } /** End Of i while **/
  fclose(fp);
  free(ptr_st_accdtls);
}

int fn_trdrpt_othrs( char* c_file_name,
                     char *c_comp_cd,
                     char *c_from_date,
                     char *c_to_date,
                     char c_accdls_flg,
                     char *c_ServiceName,
                     char *c_err_msg
                   )
{
  int i_rec_cnt=0;
  int i=0;
  int i_trnsctn;


  FILE  *fp ;
  char c_file_header [ 500 ];
  char c_file_record [ 500 ];
  char c_feed_data[1024]={'\0'};
  char c_feed_data_citi[1024] = {'\0'};			/** ver 1.4 **/
  char c_rowid[25];

  char c_mtch_id[11];
  char c_emp_name[80];
  char c_pan_no[11];
  char c_dpid_clntid[20];
  char c_hdr[13]={'\0'};	/** Ver 1.4 **/
  char c_trl[13]={'\0'};  /** Ver 1.4 **/

  typedef struct trns_rowid
  {
   char c_rowid[25];
  }st_trns_rowid;

  st_trns_rowid *ptr_st_trns_rowid;

  fn_userlog(c_ServiceName,"File is :%s: ",c_file_name);

  fp = (FILE *)fopen(c_file_name,"w") ;

  if(fp == NULL)
  {
    fn_userlog(c_ServiceName,"-------UNABLE TO OPEN FILE %s-------",c_file_name);
    sprintf ( c_msg, "Error in creating trade report. contact system support !" );
    return -1;
  }
	if(strcmp(c_comp_cd,"CITI") != 0 )				 /** ver 1.4 If condition added **/
	{
  	sprintf(c_file_header,"PRODUCT CODE,MATCH_ID,CUSTOMER_NAME,PAN_NO,DP_ID_AND_CLIENT_ID,EXCHANGE,TRADE_DATE/APPLICATION_DATE,PRODUCT_TYP,UNDERLYING,ORDER_REFERENCE_NO/APPLICATION_NO/FOLIO_NO_APP_NO,TRADE_REFERENCE_NO/TRANSACTION_ID,STOCK_NAME,TRADE_FLOW/TRANSACTION_TYPE,EXECUTED_QTY/ALLOTED_QTY,EXECUTED_RATE/NAV/PRICE,VALUE/ALLOTMENT_AMOUNT/FD_AMOUNT/NET_AMOUNT,POSITION_STATUS/ALLOTMENT_STATUS,SEGMENT,SETTLEMENT_NO,ISIN_NO,COMPANY_NAME,SCHEME_NAME/SCHEME_DESCRIPTION,SCHEME_CODE,FUND_TYPE,ISSUER_CODE,EXPIRY_DATE,OPTION_TYPE,STRIKE_PRICE,CONTRACT_NO,TENURE");

  	fprintf(fp,"%s\n",c_file_header);
	}

  EXEC SQL
    SELECT count(1)
      INTO :i_rec_cnt
      FROM ETR_EMP_TRANS_RPT
     WHERE ETR_CORP_NAME = :c_comp_cd
       AND trunc(ETR_RPT_DT) >= to_date(:c_from_date,'dd-Mon-YYYY')
       AND trunc(ETR_RPT_DT) <= to_date(:c_to_date,'dd-Mon-YYYY');
  if(SQLCODE != 0 )
  {
   fn_errlog( c_ServiceName, "S31140",SQLMSG,c_err_msg);
   return -1;
  }

  fn_userlog(c_ServiceName,"Total number FNO Trans :%d:",i_rec_cnt);

  if( i_rec_cnt > 0 )
  {
    ptr_st_trns_rowid = calloc(sizeof(st_trns_rowid),i_rec_cnt);

    if (ptr_st_trns_rowid == NULL )
    {
      fn_userlog(c_ServiceName,"-------Error in allocating pointer ------");
      sprintf ( c_msg, "Error in creating the reports. contact system support !" );
      return -1; 
    }

    EXEC SQL
    DECLARE cur_othr_trns_rowid CURSOR for
    SELECT  ETR_EMP_TRANS_RPT.ROWID
    FROM ETR_EMP_TRANS_RPT
     WHERE ETR_CORP_NAME = :c_comp_cd
       AND trunc(ETR_RPT_DT) >= to_date(:c_from_date,'dd-Mon-YYYY')
       AND trunc(ETR_RPT_DT) <= to_date(:c_to_date,'dd-Mon-YYYY')
       ORDER BY ETR_PRD_CD;

    EXEC SQL OPEN cur_othr_trns_rowid;

    if(SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31145",SQLMSG,c_err_msg);
      sprintf ( c_msg, "Error in creating reports. contact system support !" );
      return -1; 
    }

    EXEC SQL FOR :i_rec_cnt
    FETCH cur_othr_trns_rowid 
    INTO :ptr_st_trns_rowid;

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog( c_ServiceName, "S31150",SQLMSG,c_err_msg);
      fn_userlog(c_ServiceName,"Error in fetching cur_fo_trns_rowid " );
      sprintf ( c_msg, "Error in creating reports. contact system support !" );
      EXEC SQL CLOSE cur_fo_trns_rowid ;
      return -1; 
    }

    EXEC SQL CLOSE cur_fo_trns_rowid ;

    for(i=0;i<i_rec_cnt;i++)
    {
			MEMSET(c_feed_data);  /** Ver 1.1 **/
			memset(c_feed_data,'\0',sizeof(c_feed_data));  					 /** Ver 1.4 **/
			memset(c_feed_data_citi,'\0',sizeof(c_feed_data_citi));  /** Ver 1.4 **/

      strcpy(c_rowid,ptr_st_trns_rowid[i].c_rowid);
      rtrim(c_rowid);
      fn_userlog(c_ServiceName," Rowid :%s:",c_rowid);

      EXEC SQL
        select  rtrim(ETR_PRD_CD) ||','||
        etr_mtch_accnt ||','||
        rtrim(ETR_EMP_NAME) ||','||
        ETR_PAN_NO   ||','||
        rtrim(ETR_DP_CLNT_ID) ||','||
        ETR_XCHNG_CD ||','||
        to_char(ETR_TRD_DT,'dd-Mon-yyyy hh24:mi:ss')  ||','||
        ETR_PRD_TYP ||','||
        rtrim(ETR_UNDRLYNG) ||','||
        rtrim(ETR_ORDR_NO)  ||','||
        rtrim(ETR_TRD_EXEC_NO) ||','||
        rtrim(ETR_STK_NM) ||','||
        rtrim(ETR_TRD_FLW) ||','||
        ETR_TRD_QTY ||','||
        ETR_SEC_TRD_PRC ||','||
        ETR_TRD_VAL ||','||
        DECODE(ETR_POS_STTS,'B','Y','S','Y','A','Alloted','P','Applied',ETR_POS_STTS) ||','||
        rtrim(ETR_SEGMNT_CD) ||','||
        ETR_STLMNT_NO ||','||
        ETR_ISIN_NO ||','||
        rtrim(ETR_CMPNY_NAME) ||','||
        rtrim(ETR_SCHM_DESC) ||','||
        rtrim(ETR_SCHM_CD) ||','||
        DECODE(ETR_FUND_TYP,'Y','Closed Ended','N','Open Ended',ETR_FUND_TYP) ||','||
        rtrim(ETR_ISSURE_CD) ||','||
        ETR_OPT_EXPRY_DT ||','||
        ETR_OPTION_CD ||','||
        ETR_OPT_STRK_PRC ||','||
        rtrim(ETR_CNTRCT_NO) ||','||
        ETR_TENURE 
    INTO :c_feed_data
   FROM ETR_EMP_TRANS_RPT ETR
   WHERE  ETR.ROWID = :c_rowid;

   if(SQLCODE != 0 )
   {
     fn_errlog( c_ServiceName, "S31155",SQLMSG,c_err_msg);
     sprintf ( c_msg, "Error in creating reports. contact system support !" );
     free(ptr_st_trns_rowid);
     return -1; 
   }
	
		rtrim(c_feed_data); /**Ver 1.1 **/
		strcpy(c_feed_data_citi,c_feed_data);

	  if(i==0 && strcmp(c_comp_cd,"CITI") == 0 ) /** ver 1.4 If loop **/
	  {
			fn_userlog(c_ServiceName,"Inside CITI and counter is :%d:",i);
			 EXEC SQL
				 SELECT 'HDR|'||case when to_date(:c_from_date,'DD-Mon-YYYY') = to_date(:c_to_date,'DD-Mon-YYYY')
														 then  to_char(to_date(:c_from_date,'DD-Mon-YYYY'),'YYYYMMDD') 
														 ELSE to_char(SYSDATE,'YYYYMMDD')
												END ,
							  'TRL|'||to_char(:i_rec_cnt + 3)
				 INTO   :c_hdr,
							  :c_trl
				 FROM DUAL;

   			 if(SQLCODE != 0 )
   			 {
     			 fn_errlog( c_ServiceName, "S31160",SQLMSG,c_err_msg);
     			 sprintf ( c_msg, "Error in creating reports FOR CITI. contact system support !" );
     			 free(ptr_st_trns_rowid);
     			 return -1; 
   			 }
			   fn_userlog(c_ServiceName,"Header  record:%s:",c_hdr);
			
    	   fprintf(fp,"%s\n",c_hdr);
  		   sprintf(c_file_header,"PRODUCT CODE,MATCH_ID,CUSTOMER_NAME,PAN_NO,DP_ID_AND_CLIENT_ID,EXCHANGE,TRADE_DATE/APPLICATION_DATE,PRODUCT_TYP,UNDERLYING,ORDER_REFERENCE_NO/APPLICATION_NO/FOLIO_NO_APP_NO,TRADE_REFERENCE_NO/TRANSACTION_ID,STOCK_NAME,TRADE_FLOW/TRANSACTION_TYPE,EXECUTED_QTY/ALLOTED_QTY,EXECUTED_RATE/NAV/PRICE,VALUE/ALLOTMENT_AMOUNT/FD_AMOUNT/NET_AMOUNT,POSITION_STATUS/ALLOTMENT_STATUS,SEGMENT,SETTLEMENT_NO,ISIN_NO,COMPANY_NAME,SCHEME_NAME/SCHEME_DESCRIPTION,SCHEME_CODE,FUND_TYPE,ISSUER_CODE,EXPIRY_DATE,OPTION_TYPE,STRIKE_PRICE,CONTRACT_NO,TENURE");
  			fprintf(fp,"%s\n",c_file_header);
	  }
		if( strcmp(c_comp_cd,"CITI") == 0 )
		{
    	fprintf(fp,"%s\n",c_feed_data_citi);
		}
		else
		{
    	fprintf(fp,"%s\n",c_feed_data);
		}

		if(i== (i_rec_cnt-1) && strcmp(c_comp_cd,"CITI") == 0 )     /** ver 1.4 If loop **/
		{
			fn_userlog(c_ServiceName,"Trailer record:%s:",c_trl);
    	fprintf(fp,"%s\n",c_trl);
		}
   }

  } /** End Of i while **/

  free(ptr_st_trns_rowid);

  if( c_accdls_flg == 'Y' )
  {
   /**** Non Traded Employee Details *****/
   EXEC SQL
   DECLARE cur_non_trd_emp CURSOR FOR
     SELECT 
            ITE_MTCH_ACCNT,
            ITE_EMP_NAME,
            ITE_PAN_NO,
            CLD_DP_ID||'-'||CLD_DP_CLNT_ID
       FROM ITE_INSD_TRD_EMP_MSTR,CLD_DP_ACCTS
      WHERE NVL(ITE_MTCH_ACCNT,'NA') = CLD_CLM_MTCH_ACCNT
        AND ITE_DEPENDENT_PAN_NO is NULL
        AND CLD_DP_ACC_TYP='E'
        AND ITE_AUTHRZTN_FLG='Y'
        AND trim(ITE_CMPY_ID)=:c_comp_cd
        AND NVL(ITE_MTCH_ACCNT,'NA') not in ( SELECT DISTINCT ETR_MTCH_ACCNT 
                                              FROM   ETR_EMP_TRANS_RPT
                                              WHERE  ETR_CORP_NAME = :c_comp_cd
                                              AND    trunc(ETR_RPT_DT) >= to_date(:c_from_date,'dd-Mon-YYYY')
                                              AND    trunc(ETR_RPT_DT) <= to_date(:c_to_date,'dd-Mon-YYYY')
                                             ); 
   if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )   
   {            
    fn_errlog( c_ServiceName, "S31165",SQLMSG,c_err_msg);
    sprintf ( c_msg, "Error in creating reports. contact system support !" );
    return -1;
   } 
  
   EXEC SQL OPEN cur_non_trd_emp;
  
   while( 1 )
   { 
    MEMSET(c_mtch_id);
    MEMSET(c_emp_name);
    MEMSET(c_pan_no);
    MEMSET(c_dpid_clntid);

    EXEC SQL FETCH cur_non_trd_emp
        INTO :c_mtch_id,
             :c_emp_name,
             :c_pan_no,
             :c_dpid_clntid;
    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog( c_ServiceName, "S31170",SQLMSG,c_err_msg);
      sprintf ( c_msg, "Error in creating reports. contact system support !" );
      EXEC SQL CLOSE cur_non_trd_emp;
      return -1;
  
    }   
 
    if(SQLCODE == NO_DATA_FOUND)
    {
      EXEC SQL CLOSE cur_non_trd_emp;
      break;
    }

    MEMSET(c_feed_data);
    sprintf(c_feed_data,"NOT_TRADED,%s,%s,%s,%s",c_mtch_id,c_emp_name,c_pan_no,c_dpid_clntid);
  
    fprintf(fp,"%s\n",c_feed_data);
   }
   EXEC SQL CLOSE cur_non_trd_emp;
  }

  fclose(fp);

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
   fn_errlog( c_ServiceName, "S31175",SQLMSG,c_err_msg);
   sprintf ( c_msg, "Error in creating reports. contact system support !" );
   return -1; 
  } 

  EXEC SQL
    UPDATE ETR_EMP_TRANS_RPT
       SET ETR_MAIL_SENT_DT=SYSDATE
     WHERE ETR_CORP_NAME = :c_comp_cd
       AND trunc(ETR_RPT_DT) >= to_date(:c_from_date,'dd-Mon-YYYY')
       AND trunc(ETR_RPT_DT) <= to_date(:c_to_date,'dd-Mon-YYYY');
  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
    fn_errlog( c_ServiceName, "S31180",SQLMSG,c_err_msg);
		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    sprintf ( c_msg, "Error in creating reports. contact system support !" );
    return -1; 
  }  

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog ( c_ServiceName, "S31185", SQLMSG, c_err_msg);
		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return (-1);
  }

  return 0;
}

int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_INSDR_SNDMAIL;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}

void fn_gettime(void)
{
  int i_mili_sec = 0;
  struct timeval tv;
  struct timezone tz;
  struct tm *tm;

  gettimeofday(&tv, &tz);
  tm=localtime(&tv.tv_sec);
  i_mili_sec= tv.tv_usec/1000;
 /* sprintf(c_time,"%d:%d:%d:%d",tm->tm_hour, tm->tm_min, tm->tm_sec, i_mili_sec);  */
  sprintf(c_time,"%d%d%d",tm->tm_hour, tm->tm_min, tm->tm_sec);
  return;
}
/************ Ver 1.9 starts ********************/

int fn_pstnrpt_othrs( char* c_file_name,
                     char *c_comp_cd,
                     char *c_from_date,
                     char *c_to_date,
                     char c_accdls_flg,
                     char *c_ServiceName,
                     char *c_err_msg
                   )
{
  int i_rec_cnt=0;
  int i=0;
  int i_trnsctn;


  FILE  *fp ;
  char c_file_header [ 500 ];
  char c_file_record [ 500 ];
  char c_feed_data[1024]={'\0'};
  char c_rowid[25];

  typedef struct trns_rowid
  {
   char c_rowid[25];
  }st_trns_rowid;

  st_trns_rowid *ptr_st_trns_rowid;

  fn_userlog(c_ServiceName,"File is :%s: ",c_file_name);

  fp = (FILE *)fopen(c_file_name,"w") ;

  if(fp == NULL)
  {
    fn_userlog(c_ServiceName,"-------UNABLE TO OPEN FILE %s-------",c_file_name);
    sprintf ( c_msg, "Error in creating positional report. contact system support !" );
    return -1;
  }
  	sprintf(c_file_header,"PRODUCT CODE,MATCH ID,Position DATE,QTY/Units,Price/NAV/Amount invested,Value/Amount,Symbol,Expiry,Option Type,Strike Price,Scheme/Stock Name,Growth/Dividend,FDR NO,FOLIO");

  	fprintf(fp,"%s\n",c_file_header);

  EXEC SQL
    SELECT count(1)
      INTO :i_rec_cnt
      FROM EPR_EMP_PSTN_RPT 
     WHERE EPR_CORP_NAME = :c_comp_cd
       AND trunc(EPR_RPT_DT) >= to_date(:c_from_date,'dd-Mon-YYYY')
       AND trunc(EPR_RPT_DT) <= to_date(:c_to_date,'dd-Mon-YYYY');
  if(SQLCODE != 0 )
  {
   fn_errlog( c_ServiceName, "S31190",SQLMSG,c_err_msg);
   return -1;
  }

  fn_userlog(c_ServiceName,"Total number of Positions :%d:",i_rec_cnt);

  if( i_rec_cnt > 0 )
  {
    ptr_st_trns_rowid = calloc(sizeof(st_trns_rowid),i_rec_cnt);

    if (ptr_st_trns_rowid == NULL )
    {
      fn_userlog(c_ServiceName,"-------Error in allocating pointer ------");
      sprintf ( c_msg, "Error in creating the reports. contact system support !" );
      return -1; 
    }

    EXEC SQL
    DECLARE cur_othrpos_trns_rowid CURSOR for
    SELECT  EPR_EMP_PSTN_RPT.ROWID
    FROM EPR_EMP_PSTN_RPT 
     WHERE EPR_CORP_NAME = :c_comp_cd
       AND trunc(EPR_RPT_DT) >= to_date(:c_from_date,'dd-Mon-YYYY')
       AND trunc(EPR_RPT_DT) <= to_date(:c_to_date,'dd-Mon-YYYY')
       ORDER BY EPR_PRD_CD;

    EXEC SQL OPEN cur_othrpos_trns_rowid;

    if(SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31195",SQLMSG,c_err_msg);
      sprintf ( c_msg, "Error in creating reports. contact system support !" );
      return -1; 
    }

    EXEC SQL FOR :i_rec_cnt
    FETCH cur_othrpos_trns_rowid 
    INTO :ptr_st_trns_rowid;

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog( c_ServiceName, "S31200",SQLMSG,c_err_msg);
      fn_userlog(c_ServiceName,"Error in fetching cur_othrpos_trns_rowid " );
      sprintf ( c_msg, "Error in creating reports. contact system support !" );
      EXEC SQL CLOSE cur_othrpos_trns_rowid;
      return -1; 
    }

    EXEC SQL CLOSE cur_othrpos_trns_rowid;

    for(i=0;i<i_rec_cnt;i++)
    {
			MEMSET(c_feed_data);  /** Ver 1.1 **/
			memset(c_feed_data,'\0',sizeof(c_feed_data));  					 /** Ver 1.4 **/

      strcpy(c_rowid,ptr_st_trns_rowid[i].c_rowid);
      rtrim(c_rowid);
      fn_userlog(c_ServiceName," Rowid :%s:",c_rowid);

      EXEC SQL
        select  trim(EPR_PRD_CD) ||','||
        EPR_MTCH_ACCNT ||','||
        decode(trim(EPR_PRD_CD),'EQ',EPR_POS_DT,'FNO',EPR_POS_DT,NULL) ||','||
        decode(trim(EPR_PRD_CD),'FD',NULL,EPR_TRD_QTY)   ||','||
        decode(trim(EPR_PRD_CD),'FNO',EPR_SEC_EOD_PRC/100,EPR_SEC_EOD_PRC) ||','||
        decode(trim(EPR_PRD_CD),'FNO',EPR_TRD_MRKT_VAL/100,EPR_TRD_MRKT_VAL) ||','||
        EPR_SEC_ID  ||','||
        decode(trim(EPR_PRD_CD),'FNO',EPR_EXPRY_DT,'FD',EPR_EXPRY_DT,NULL) ||','||
        decode(trim(EPR_PRD_CD),'FNO',EPR_OPT_CD,NULL) ||','||
        decode(trim(EPR_PRD_CD),'FNO',EPR_STRK_PRC/100,null) ||','||
        decode(trim(EPR_PRD_CD),'MF',EPR_SEC_DESC,'NPS',EPR_SEC_DESC,'EQ',EPR_SEC_DESC,NULL)  ||','||
        decode(trim(EPR_PRD_CD),'MF',decode(EPR_SEC_TYPE,'G','Growth','D','Dividend'),NULL) ||','||  /*** 'G' for growth and 'D' for dividend ***/
        decode(trim(EPR_PRD_CD),'FD',EPR_SEDOL_ID,NULL) ||','||
        decode(trim(EPR_PRD_CD),'MF',EPR_POS_PART,NULL)
    INTO :c_feed_data
   FROM EPR_EMP_PSTN_RPT EPR
   WHERE  EPR.ROWID = :c_rowid;

   if(SQLCODE != 0 )
   {
     fn_errlog( c_ServiceName, "S31205",SQLMSG,c_err_msg);
     sprintf ( c_msg, "Error in creating reports. contact system support !" );
     free(ptr_st_trns_rowid);
     return -1; 
   }
	
		rtrim(c_feed_data); /**Ver 1.1 **/

    	fprintf(fp,"%s\n",c_feed_data);

   }

  } 

  free(ptr_st_trns_rowid);

  fclose(fp);

  return 0;
}

/************ Ver 1.9 Ends ********************/
