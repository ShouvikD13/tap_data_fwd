/*************************************************************************************/
/*    Program               : BAT_CNV_TO_FUTOPT                                      */
/*                                                                                   */
/*    Input                 : Exchange_code                                          */
/*                          : Trade_date                                             */
/*													: Match_Acc																							 */
/*													: Underlying																						 */
/*													: Contract_Tag																					 */
/*                                                                                   */
/*    Output                :                                                        */
/*                                                                                   */
/*    Description           : This batch program picks all open futureplus positions */
/*                            and converts it to the future position one bye one.    */
/*                                                                                   */
/*    Log                   : 1.0   02-Dec-2015			Tanmay Warkhade									 */
/*																																									 */	
/*************************************************************************************/
/*    1.0 			- 			New release                                                  */
/*    1.1 			- 		FPSL Profit order changes - Suchita                          */
/*************************************************************************************/
#include <sqlca.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_tuxlib.h> 
#include <fn_battmpt.h>
#include <fml_def.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fml_rout.h>
#include <fn_read_debug_lvl.h> 
#define SQLROWCOUNT  sqlca.sqlerrd[2]  

void BAT_CNV_TO_FUTOPT( int argc, char* argv[])
{
  char c_ServiceName[33] = "\0";
  char c_err_msg[256]= "\0";	
	char c_msg[256] ="\0";
	char c_xchng_cd[4]= "\0";
	char c_trd_dt[ LEN_DATE ] ="\0";
	char c_prd_typ='\0';
	char c_clm_mtch_acnt [ 11 ]= "\0";
	char c_undrlyng [ 7 ] ="\0";
	char c_indstk='\0';
	char c_cntrct_tag = '\0';
	char c_spl_flg='S';
	char c_rout_str [ 4 ]= "\0";
	char c_svc_name [ 33 ] ="\0";
	char c_user_id[9] ="\0";
  char c_channel[4] ="\0";
	char c_svc_nm[33] = "\0";
  char c_rout_crt[4] = "\0";
  char c_fresh_ordr_ref[19] ="\0";
	char c_match_account[11]= "\0";
	char c_exchange_code[4]= "\0";

	int i;
	int i_err[10];
	int i_ferr[10];
	int i_trnsctn;
	int i_ip_len;
	int i_op_len;
	int i_returncode;
	int i_ch_val;
	long int li_tot_rcrds;
	long int li_cnt;
  long l_sssn_id;

	sql_cursor trd_cursor;
	
	FBFR32 *ptr_fml_buf;

	strcpy( c_ServiceName, argv[0] );

  INITBATDBGLVL(argv[0]);     

  if( argc < 5 )
  {
    fn_userlog( "Usage: %s <ini> <Exchange_code> <NA> <Mtch_Acc/A> <prd_typ : U/I > ", argv[0] );
    return;
  }

	if((ptr_fml_buf = (FBFR32 *)tpalloc("FML32", NULL, 1024)) == NULL)
  {
    fn_errlog(c_ServiceName, "S31005", TPMSG, c_err_msg);
    strcpy(c_msg, "Unable to allocate buffer");
    fn_bat_pst_msg(c_ServiceName, c_msg, c_tag);
    return;
  }

	sprintf ( c_msg, "Batch process %s started", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	strcpy( c_xchng_cd, argv[2] );
	strcpy( c_clm_mtch_acnt, argv[4] );
	c_prd_typ =  argv[5][0] ;
	strcpy(c_user_id,"system");
	strcpy(c_channel,"SYS");
	l_sssn_id = 0;

	strcpy(c_rout_crt,000);

  if( strcmp(c_clm_mtch_acnt,"A") == 0)
  {
    strcpy( c_clm_mtch_acnt,"%" );
  }
  rtrim(c_clm_mtch_acnt);

	EXEC SQL ALLOCATE :trd_cursor;


	fn_userlog(c_ServiceName,"c_xchng_cd:%s:",c_xchng_cd);
	fn_userlog(c_ServiceName,"c_clm_mtch_acnt:%s:",c_clm_mtch_acnt);
	fn_userlog(c_ServiceName,"c_prd_typ :%c:",c_prd_typ );

	EXEC SQL EXECUTE
     BEGIN
     OPEN  		:trd_cursor  FOR 
	SELECT  		DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ),
							FOD_CLM_MTCH_ACCNT,
							FOD_XCHNG_CD
      FROM    FOD_FO_ORDR_DTLS
      WHERE   FOD_XCHNG_CD	= :c_xchng_cd
      AND     FOD_PRDCT_TYP = :c_prd_typ
			AND     FOD_CLM_MTCH_ACCNT LIKE :c_clm_mtch_acnt
    GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ),FOD_CLM_MTCH_ACCNT,FOD_XCHNG_CD,FOD_PRDCT_TYP,
							FOD_INDSTK,FOD_UNDRLYNG,FOD_EXPRY_DT,FOD_EXER_TYP,FOD_OPT_TYP,FOD_STRK_PRC
    HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) != 0; /** ver 1.1 **/
   END;
   END-EXEC;
	
	 if ( (SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
   {
     fn_userlog(c_ServiceName,"S31020",SQLMSG,c_err_msg );
     tpfree((char*) ptr_fml_buf);
     return;
   }

		fn_cpy_ddr(c_rout_crt);

		MEMSET(c_svc_nm);

  	while (1)
  	{
			
			MEMSET(c_fresh_ordr_ref);
			MEMSET(c_match_account);
			MEMSET(c_exchange_code);

			EXEC SQL 	
			FETCH :trd_cursor 
			INTO  :c_fresh_ordr_ref,
						:c_match_account,
						:c_exchange_code;

 		 	if ( SQLCODE != 0 )
  		{
  		  if ( SQLCODE == NO_DATA_FOUND )
  		  {
  		    fn_userlog(c_ServiceName,"Inside break");
          EXEC SQL CLOSE :trd_cursor;
          EXEC SQL FREE :trd_cursor;
  		    break;
 		 	  }
  		  else
  		  {
  		    fn_errlog( c_ServiceName, "S31010", SQLMSG, c_err_msg );
  		    EXEC SQL CLOSE :trd_cursor;
  		    EXEC SQL FREE :trd_cursor;
          tpfree((char*) ptr_fml_buf); 
  	   		return;
  			}
  		}

			fn_userlog(c_ServiceName,"Processing :%s:%s:%s",c_fresh_ordr_ref,c_match_account,c_exchange_code);

			if(c_prd_typ == 'I')
			{
				strcpy(c_svc_nm , "SFO_OPLS_TO_OPT");
			}
			else if(c_prd_typ == 'U')
			{	
				strcpy(c_svc_nm,"SFO_FPSL_TO_FUT");

			}
				i_err[0]  = Fchg32(ptr_fml_buf, FFO_ORDR_RFRNC , 0, (char *)c_fresh_ordr_ref , 0);
      	i_ferr[0] = Ferror32;
      	i_err[1]  = Fchg32(ptr_fml_buf, FFO_USR_ID , 0, (char *)c_user_id, 0);
      	i_ferr[1] = Ferror32;
      	i_err[2]  = Fchg32(ptr_fml_buf, FFO_SSSN_ID , 0, (char *)&l_sssn_id , 0);
      	i_ferr[2] = Ferror32;
      	i_err[3]  = Fchg32(ptr_fml_buf, FFO_CHANNEL, 0, (char *)c_channel , 0);
      	i_ferr[3] = Ferror32;
      	i_err[4]  = Fchg32(ptr_fml_buf, FFO_SVC_NAME, 0, (char *)c_svc_nm, 0);
      	i_ferr[4] = Ferror32;
      	i_err[5]  = Fchg32(ptr_fml_buf, FFO_ROUT_CRT, 0, (char *)c_rout_crt, 0);
      	i_ferr[5] = Ferror32;
				i_err[6]  = Fchg32(ptr_fml_buf, FFO_EBA_MTCH_ACT_NO, 0, (char *)c_match_account , 0);
      	i_ferr[6] = Ferror32;
				i_err[7]  = Fchg32(ptr_fml_buf, FFO_XCHNG_CD, 0, (char *)c_exchange_code, 0);
      	i_ferr[7] = Ferror32;

      	for(i = 0; i < 8 ; i++)
      	{
      	  if(i_err[i] == -1)
      	  {
      	    fn_userlog(c_ServiceName,"The field number is %d", i);
      	    fn_errlog(c_ServiceName, "S31015", Fstrerror32(i_ferr[i]), c_err_msg);
            EXEC SQL CLOSE :trd_cursor;
            EXEC SQL FREE :trd_cursor;
            tpfree((char*) ptr_fml_buf);
      	    return;
      	  }
      	}
			
			if( tpacall( "SFO_ORD_ROUT", (char*)(ptr_fml_buf), 0, TPNOTRAN ) == -1 )
      {
    	    fn_errlog(c_ServiceName, "S31020", TPMSG, c_err_msg);
    	    fn_userlog(c_ServiceName,"Unable to read output paramters");
          EXEC SQL CLOSE :trd_cursor;
          EXEC SQL FREE :trd_cursor;
          tpfree((char*) ptr_fml_buf); 
    	    return; 
      }	

	  }

	 fn_dstry_rs ( ptr_fml_buf );
	
	 if( DEBUG_MSG_LVL_3 ) 
	 {	
		fn_userlog(c_ServiceName, "Batch conv_to_fut process Ended");
	 }
	
	sprintf ( c_msg, "Batch process %s ended", argv[0] );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
	
	return;
}
int fn_bat_init ( int argc, char *argv[] )
{
  fn_var = BAT_CNV_TO_FUTOPT;
  return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
  return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
  return 0;
}
