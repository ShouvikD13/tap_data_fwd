/***************************************************************************************************/
/**  bat_fo_demon.pc - Program to Manage the backoffice process by calling one after another       */
/**                    based on the sequence assigned to them and checking the errors              */
/** Ver 1.0 : Sachin Birje.																																				 */
/*	Ver 1.1 : 22-Mar-2013 Vishnu Nair. BUG Fix																										 */
/*  Ver 1.2 : 04-Apr-2013 Vishnu Nair. Changes to remove the dependency on class team for closing price download	*/ 
/*  Ver 1.3 : 22-Aug-2013 Changes in updating lot size                                             */
/*  Ver 1.4 : 19-Nov-2015 Market opeing after EOD PROCESSES ( Sachin Birje)                        */
/*  Ver 1.5 : 17-Aug-2015 Ritesh Deolekar. - Contract Master and Trade Quote Table Merger Changes  */ 
/***************************************************************************************************/
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <stdio.h>
#include <sqlca.h>    
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <string.h>	
#include <userlog.h>
#include <stdlib.h>	
#include <fn_read_debug_lvl.h>	
#include <fn_pos.h>

int i;
#define INIT(x,y) for(i=0 ;i<y;i++)x[i] = 0
int fn_call_gm_process(long  l_process_seq,
                       char* c_process_nm,
                       char* c_xchng_cd
                      );

int fn_chk_block_level( char* c_block_no,
                        char* c_block_enable,
                        char* c_ServiceName,
                        char* c_err_msg
                      );
int fn_upd_prcs_stts(char* c_process_nm,
                     char* c_exchng_cd,
                     char  c_prcs_stts,
                     char* c_ServiceName,
                     char* c_err_msg
                    );
int fn_chk_process_level(char* c_process_nm, char* c_xchng_cd,char* c_prcs_enbl_flg,
                         char* c_ServiceName, char* c_err_msg);

int fn_chk_prcs_err(char* c_process_nm, char* c_xchng_cd,long* l_err_count);

int fn_upd_lot_sz(void); /** Ver 1.1 **/

char c_run_dt[LEN_DATE];
char c_nxt_trd_dt[ LEN_DATE ];
char c_ServiceName[ 33 ];
char c_err_msg[ 256 ];
 
void BAT_FO_DEMON( int argc, char *argv[] )
{
  int i_ch_val=0;
  int i_return_val=0;
  int i_trnsctn=0;
  int i_ret_val=0;

  long int li_cnt;
  long int li_run_no;
  long l_clsprc_cnt;
  long l_err_count=0;
  long l_count=0;
  long l_seq_no;
  long l_inner_counter;
  

  char c_block_enable;
  char c_stts_flg;
  char c_prcs_enbl_flg;

  char c_msg[256];
  char c_command[60];
  char c_command1[60];
  char c_prgm_succ_flg;
  char c_err_msg1[100];
  char c_block_no[2];
  char c_process_nm[20];
  char c_exchng_cd[4];
  

  typedef struct ___list
  {
    long l_seq_no1;
    char c_process_nm1[33];
    char c_exchng_cd1[4];
    char c_stts_flg1;
    char c_prcs_enbl_flg1;
  } st_process_list;

  st_process_list *ptr_process_list = NULL;
  
	INIT(c_msg,256);
	INIT(c_ServiceName,33);
	INIT(c_err_msg,256);
	INIT(c_run_dt,21);
  INIT(c_nxt_trd_dt,21);
 
  strcpy ( c_ServiceName, argv[0] );

	INITBATDBGLVL(argv[0]);		

	sprintf ( c_msg, "Batch process %s started", argv[0] );

	strcpy ( c_msg, "Creating data. Please wait ... " );
  strcpy(c_err_msg1,"Game Backoffice automation process has failed, pls check");

  MEMSET(c_run_dt);
  MEMSET(c_nxt_trd_dt);

  MEMSET(c_err_msg1);
	
	/** Ver 1.1 Starts **/ 
  EXEC sql
		SELECT to_date(FBC_TRD_DT,'dd-Mon-yyyy'),
					 to_date(FBC_TRD_DT + 1,'dd-Mon-yyyy') 
		  INTO :c_run_dt,
           :c_nxt_trd_dt
		FROM FBC_FO_BRNCH_CAL
		WHERE FBC_XCHNG_CD = 'NFO'
		AND		FBC_GRP_ID	 =	1
		AND		trunc(FBC_TRD_DT) = trunc(SYSDATE);
	
	if(SQLCODE  != 0 && SQLCODE != NO_DATA_FOUND )
  {
   	fn_errlog(c_ServiceName, "S31005",SQLMSG,c_err_msg);
   	MEMSET(c_command1);
   	sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
   	system(c_command1) ;
   	return;
  }
	
	if(SQLCODE == NO_DATA_FOUND)
	{
		fn_userlog(c_ServiceName," Do not run the Game back office process today.");
		return;	
	}
	/** Ver 1.1 ends **/

/** Commented in Ver 1.1 *** 
  EXEC SQL
    SELECT to_date(exg_nxt_trd_dt,'dd-Mon-yyyy'),
           to_date(exg_nxt_trd_dt,'dd-Mon-yyyy') + 1
      INTO :c_run_dt,
           :c_nxt_trd_dt
      FROM exg_xchng_mstr
     WHERE EXG_XCHNG_CD='NFO';
  	 AND to_date(exg_nxt_trd_dt,'DD-Mon-YYYY') = to_date(sysdate,'DD-Mon-YYYY') 

  if(SQLCODE  != 0 && SQLCODE != NO_DATA_FOUND ) 
  {
   fn_errlog(c_ServiceName, "S31010",SQLMSG,c_err_msg);
   MEMSET(c_command1);
   sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
   system(c_command1) ;
   return;
  }

  if( SQLCODE == NO_DATA_FOUND )
  {
   fn_userlog(c_ServiceName," Exchange Next trade date is not equal to Sysdate.");
   fn_userlog(c_ServiceName," Do not run the Game back office process today."); 
   return;
  } ***/
 
  c_block_enable=' ';
  strcpy(c_block_no , "B1");
 
  i_ret_val = fn_chk_block_level(c_block_no,
                                 &c_block_enable,
                                 c_ServiceName,
                                 c_err_msg
                                );
  if( i_ret_val != 0 )
  {
    MEMSET(c_command1);
    sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
    system(c_command1) ;
    return;
  }
 
  if( c_block_enable == 'Y' )
  {
     fn_userlog(c_ServiceName,"Block 1 Is enabled for Processing");  
  
     EXEC SQL
        SELECT count(1)
          INTO :l_count
          FROM FPD_FO_PROCESS_DTLS
       WHERE FPD_STTS_FLG IN ('A','B')
         AND FPD_BLOCK_NO ='B1'
         ORDER BY FPD_STTS_FLG,FPD_SEQ_NO ASC;
      if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
       fn_errlog(c_ServiceName, "S31015",SQLMSG,c_err_msg);
       MEMSET(c_command1);
       sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
       system(c_command1) ;
       return;
      }

     if( l_count > 0 )
     {
      ptr_process_list = calloc(sizeof(st_process_list),l_count);
      if (ptr_process_list == NULL )
      {
       fn_errlog(c_ServiceName, "S31020",LIBMSG,c_err_msg);
       MEMSET(c_command1);
       sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
       system(c_command1) ;
       return;
      }
   
      EXEC SQL
      DECLARE cur_block1_prcs CURSOR FOR
      SELECT FPD_SEQ_NO,
             FPD_PROCESS_NM,
             FPD_EXCHNG_CD,
             FPD_STTS_FLG,
             FPD_PRCS_ENBL_FLG
        FROM FPD_FO_PROCESS_DTLS
       WHERE FPD_STTS_FLG IN ('A','B')
         AND FPD_BLOCK_NO ='B1'
         ORDER BY FPD_STTS_FLG,FPD_SEQ_NO ASC;

     EXEC SQL
     OPEN cur_block1_prcs;

     if(SQLCODE != 0 )
     {
       fn_errlog(c_ServiceName, "S31025",SQLMSG,c_err_msg);
       MEMSET(c_command1);
       sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
       system(c_command1) ;
       EXEC SQL CLOSE cur_block1_prcs;
       free(ptr_process_list);
       return; 
     }

     EXEC SQL
          FOR l_count
         FETCH cur_block1_prcs
          INTO :ptr_process_list;
     if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
     {
       fn_errlog(c_ServiceName, "S31030",SQLMSG,c_err_msg);
       MEMSET(c_command1);
       sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
       system(c_command1) ;
       EXEC SQL CLOSE cur_block1_prcs;
       free(ptr_process_list);
       return;
     }
     EXEC SQL CLOSE cur_block1_prcs;
    
     fn_userlog(c_ServiceName," After Data Load ");

     for(l_inner_counter=0;l_inner_counter < l_count ; l_inner_counter++)
     {

      MEMSET(c_process_nm);
      MEMSET(c_exchng_cd);
      c_prcs_enbl_flg ='\0';
      c_stts_flg = '\0';
      l_seq_no=0;

      strcpy(c_process_nm,ptr_process_list[l_inner_counter].c_process_nm1);
      strcpy(c_exchng_cd,ptr_process_list[l_inner_counter].c_exchng_cd1);
      l_seq_no= ptr_process_list[l_inner_counter].l_seq_no1;
      c_stts_flg=ptr_process_list[l_inner_counter].c_stts_flg1;
      c_prcs_enbl_flg = ptr_process_list[l_inner_counter].c_prcs_enbl_flg1;

      if(c_prcs_enbl_flg == 'N' ) /*** If process is Dissabled, then go for next ***/
      {
       fn_userlog(c_ServiceName,"Process :%s %s: is dissabled, go for next process",c_process_nm,c_exchng_cd);
       continue;
      } 
      if( c_prcs_enbl_flg == 'B' )  /*** If process is Break then, stop the automation ***/
      {
       fn_userlog(c_ServiceName,"Automation is break by User, stop the automation");
       return; 
      }
     
      if( c_prcs_enbl_flg != 'Y' )
      {
       fn_userlog(c_ServiceName,"Process :%s %s: is not enabled for running, So skipping ");
       continue;
      }
 
      c_block_enable=' ';
      strcpy(c_block_no , "B1");
      rtrim(c_process_nm);
      rtrim(c_exchng_cd);

      i_ret_val = fn_chk_block_level(c_block_no,
                                     &c_block_enable,
                                     c_ServiceName,
                                     c_err_msg
                                    );
      if( i_ret_val != 0 )
      {
       MEMSET(c_command1);
       sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
       system(c_command1) ;
       free(ptr_process_list);
       return;
      }

      if( c_block_enable != 'Y' )
      {  
       fn_userlog(c_ServiceName,"Block %s Automation Run is disabled",c_block_no );
       MEMSET(c_command1);
       strcpy(c_err_msg1,"'Global BackOffice Automation Run is disabled'");
       sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
       system(c_command1) ;
       free(ptr_process_list);
       return;
      }

      if( c_stts_flg == 'A' )
      {       
        i_ret_val = fn_chk_prcs_err(c_process_nm,c_exchng_cd,&l_err_count);
        if( i_ret_val != 0 )
        {
         MEMSET(c_command1);
         sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
         system(c_command1) ;
         free(ptr_process_list);
         return;
        } 
        
        fn_userlog(c_ServiceName," Error Count :%ld:",l_err_count);
 
        if( l_err_count > 0 )
        {
         fn_userlog(c_ServiceName,"Kindly Resolve the Error of %s %s",c_process_nm,c_exchng_cd);
         sprintf(c_err_msg1,"'Kindly Resolve the Error of %s %s'",c_process_nm,c_exchng_cd);
         MEMSET(c_command1);
         sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
         system(c_command1) ;
         EXEC SQL CLOSE cur_block1_prcs;
         return;
        }
      }

      fn_userlog(c_ServiceName," Exchnage Code :%s:",c_exchng_cd);
      c_prcs_enbl_flg ='\0';
 
      i_ret_val= fn_chk_process_level(c_process_nm,c_exchng_cd,&c_prcs_enbl_flg,
                                      c_ServiceName,c_err_msg);
      if( i_ret_val != 0 )
      {
        sprintf(c_err_msg1,"System Error. Contact system support.");
        MEMSET(c_command1);
        sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
        system(c_command1) ;
        free(ptr_process_list); 
        return;
      }
     
      fn_userlog(c_ServiceName,"Process Enable Flag :%c:",c_prcs_enbl_flg);
 
      if( c_prcs_enbl_flg != 'Y' )
      {
        fn_userlog(c_ServiceName,"%s Process for %s is not Enabled for run ",c_process_nm,c_exchng_cd);
        sprintf(c_err_msg1,"'%s Process for %s is not Enabled for run'",c_process_nm,c_exchng_cd);
        MEMSET(c_command1);
        sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
        system(c_command1) ;
        free(ptr_process_list); 
        return;  
      }
 
      i_return_val = fn_call_gm_process(l_seq_no,c_process_nm,c_exchng_cd); 
      if( i_return_val != 0 )
      {
        sprintf(c_err_msg1,"'%s Process for %s is failed, pls check.'",c_process_nm,c_exchng_cd);
        MEMSET(c_command1);
        sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
        system(c_command1) ;
        free(ptr_process_list); 
        return;
      } 
     }
     
     free(ptr_process_list); 
    }      
  }
  else
  {
   fn_userlog(c_ServiceName,"Block 1 is disabled"); 
  } 

  c_block_enable=' ';
  strcpy(c_block_no , "B2");

  i_ret_val = fn_chk_block_level(c_block_no,
                                 &c_block_enable,
                                 c_ServiceName,
                                 c_err_msg
                                );
  if( i_ret_val != 0 )
  {
    MEMSET(c_command1);
    sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
    system(c_command1) ;
    return;
  }


  if( c_block_enable == 'Y' )
  {
      fn_userlog(c_ServiceName,"Block 2 Is enabled for Processing");
      l_count=0;
    
      EXEC SQL
        SELECT count(1)
          INTO :l_count
          FROM FPD_FO_PROCESS_DTLS
         WHERE FPD_STTS_FLG IN ('A','B')
           AND FPD_BLOCK_NO ='B2'
           ORDER BY FPD_STTS_FLG,FPD_SEQ_NO ASC;
     if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
     {
      fn_errlog(c_ServiceName, "S31035",SQLMSG,c_err_msg);
      MEMSET(c_command1);
      sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
      system(c_command1) ;
      return;
     }

     if( l_count > 0 )
     {

      ptr_process_list = calloc(sizeof(st_process_list),l_count);
      if (ptr_process_list == NULL )
      {
       fn_errlog(c_ServiceName, "S31040",LIBMSG,c_err_msg);
       MEMSET(c_command1);
       sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
       system(c_command1) ;
       return;
      }
 
      EXEC SQL
      DECLARE cur_block2_prcs CURSOR FOR
      SELECT FPD_SEQ_NO,
             FPD_PROCESS_NM,
             FPD_EXCHNG_CD,
             FPD_STTS_FLG,
             FPD_PRCS_ENBL_FLG 
        FROM FPD_FO_PROCESS_DTLS
       WHERE FPD_STTS_FLG IN ('A','B')
         AND FPD_BLOCK_NO ='B2'
         ORDER BY FPD_STTS_FLG,FPD_SEQ_NO ASC;

     EXEC SQL
     OPEN cur_block2_prcs;

     if(SQLCODE != 0 )
     {
       fn_errlog(c_ServiceName, "S31045",SQLMSG,c_err_msg);
       MEMSET(c_command1);
       sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
       system(c_command1) ;
       EXEC SQL CLOSE cur_block2_prcs;
       free(ptr_process_list); 
       return;
     }

     EXEC SQL
          FOR l_count
         FETCH cur_block2_prcs
          INTO :ptr_process_list;
     if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
     {
       fn_errlog(c_ServiceName, "S31050",SQLMSG,c_err_msg);
       MEMSET(c_command1);
       sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
       system(c_command1) ;
       EXEC SQL CLOSE cur_block2_prcs;
       free(ptr_process_list);
       return;
     }
     EXEC SQL CLOSE cur_block2_prcs;

     for(l_inner_counter=0;l_inner_counter < l_count ; l_inner_counter++)
     {

      MEMSET(c_process_nm);
      MEMSET(c_exchng_cd);
      c_stts_flg = '\0';
      c_prcs_enbl_flg = '\0';
      l_seq_no = 0;

      strcpy(c_process_nm,ptr_process_list[l_inner_counter].c_process_nm1);
      strcpy(c_exchng_cd,ptr_process_list[l_inner_counter].c_exchng_cd1);
      l_seq_no= ptr_process_list[l_inner_counter].l_seq_no1;
      c_stts_flg=ptr_process_list[l_inner_counter].c_stts_flg1;
      c_prcs_enbl_flg = ptr_process_list[l_inner_counter].c_prcs_enbl_flg1;

      if(c_prcs_enbl_flg == 'N' ) /*** If process is Dissabled, then go for next ***/
      {
       fn_userlog(c_ServiceName,"Process :%s %s: is dissabled, go for next process",c_process_nm,c_exchng_cd);
       continue;
      }
      if( c_prcs_enbl_flg == 'B' )  /*** If process is Break then, stop the automation ***/
      {
       fn_userlog(c_ServiceName,"Automation is break by User, stop the automation");
       return;
      }
      if( c_prcs_enbl_flg != 'Y' )
      {
       fn_userlog(c_ServiceName,"Process :%s %s: is not enabled for running, So skipping ");
       continue;
      }  
      
      c_block_enable=' ';
      strcpy(c_block_no , "B2");

      i_ret_val = fn_chk_block_level(c_block_no,
                                     &c_block_enable,
                                     c_ServiceName,
                                     c_err_msg
                                    );
      if( i_ret_val != 0 )
      {
       MEMSET(c_command1);
       sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
       system(c_command1) ;
       free(ptr_process_list); 
       return;
      }

      if( c_block_enable != 'Y' )
      {
       fn_userlog(c_ServiceName,"Block %s Automation Run is disabled",c_block_no );
       MEMSET(c_command1);
       strcpy(c_err_msg1,"'Global BackOffice Automation Run is disabled'");
       sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
       free(ptr_process_list); 
       system(c_command1) ;
       return;
      }

      rtrim(c_process_nm);
      rtrim(c_exchng_cd);

      if( c_stts_flg == 'A' )
      {
        i_ret_val = fn_chk_prcs_err(c_process_nm,c_exchng_cd,&l_err_count);
        if( i_ret_val != 0 )
        {
         MEMSET(c_command1);
         sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
         system(c_command1) ;
         EXEC SQL CLOSE cur_block2_prcs;
         return;
        }

        fn_userlog(c_ServiceName," Error Count :%ld:",l_err_count);

        if( l_err_count > 0 )
        {
         fn_userlog(c_ServiceName,"Kindly Resolve the Error of %s %s",c_process_nm,c_exchng_cd);
         sprintf(c_err_msg1,"'Kindly Resolve the Error of %s %s'",c_process_nm,c_exchng_cd);
         MEMSET(c_command1);
         sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
         system(c_command1) ;
         free(ptr_process_list); 
         return;
        }
      }
     
      c_prcs_enbl_flg ='\0';
 
      i_ret_val= fn_chk_process_level(c_process_nm,c_exchng_cd,&c_prcs_enbl_flg,
                                      c_ServiceName,c_err_msg);
      if( i_ret_val != 0 )
      {
        sprintf(c_err_msg1,"System Error. Contact system support.");
        MEMSET(c_command1);
        sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
        system(c_command1) ;
        free(ptr_process_list); 
        return;
      }

      if( c_prcs_enbl_flg != 'Y' )
      {
        fn_userlog(c_ServiceName,"Process is not Enabled for run ");
        sprintf(c_err_msg1,"'Process is not Enabled for run'");
        MEMSET(c_command1);
        sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
        system(c_command1) ;
        free(ptr_process_list); 
        return;
      }

      i_return_val = fn_call_gm_process(l_seq_no,c_process_nm,c_exchng_cd);
      if( i_return_val != 0 )
      {
        sprintf(c_err_msg1,"'%s Process for %s is failed, pls check.'",c_process_nm,c_exchng_cd);
        MEMSET(c_command1);
        sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
        system(c_command1) ;
        free(ptr_process_list);  
        return;
      }
     }
     free(ptr_process_list);

    }
  }
  else
  {
   fn_userlog(c_ServiceName,"Block 2 is disabled");
  }

  c_block_enable=' ';
  strcpy(c_block_no, "B3"); 

  i_ret_val = fn_chk_block_level(c_block_no,
                                 &c_block_enable,
                                 c_ServiceName,
                                 c_err_msg
                                );
  if( i_ret_val != 0 )
  {
    MEMSET(c_command1);
    sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
    system(c_command1) ;
    return;
  }
 
  if( c_block_enable == 'Y' )
  {
      fn_userlog(c_ServiceName,"Block 3 Is enabled for Processing");
   
      EXEC SQL 
        SELECT count(1)
          INTO :l_count
          FROM FPD_FO_PROCESS_DTLS
       WHERE FPD_STTS_FLG IN ('A','B')
         AND FPD_BLOCK_NO ='B3'
         ORDER BY FPD_STTS_FLG,FPD_SEQ_NO ASC;
      if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
       fn_errlog(c_ServiceName, "S31055",SQLMSG,c_err_msg);
       MEMSET(c_command1);
       sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
       system(c_command1) ;
       return;
      }  
      
     if( l_count > 0 )
     {
      ptr_process_list = calloc(sizeof(st_process_list),l_count);
      if (ptr_process_list == NULL )
      {
       fn_errlog(c_ServiceName, "S31060",LIBMSG,c_err_msg);
       MEMSET(c_command1);
       sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
       system(c_command1) ;
       return; 
      }
       
 
      EXEC SQL
      DECLARE cur_block3_prcs CURSOR FOR
      SELECT FPD_SEQ_NO,
             FPD_PROCESS_NM,
             FPD_EXCHNG_CD,
             FPD_STTS_FLG,
             FPD_PRCS_ENBL_FLG
        FROM FPD_FO_PROCESS_DTLS
       WHERE FPD_STTS_FLG IN ('A','B')
         AND FPD_BLOCK_NO ='B3'
         ORDER BY FPD_STTS_FLG,FPD_SEQ_NO ASC;

     EXEC SQL
     OPEN cur_block3_prcs;

     if(SQLCODE != 0 )
     {
       fn_errlog(c_ServiceName, "S31065",SQLMSG,c_err_msg);
       MEMSET(c_command1);
       sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
       system(c_command1) ;
       EXEC SQL CLOSE cur_block3_prcs;
       free(ptr_process_list);
       return;
     }
 
     EXEC SQL 
          FOR l_count
         FETCH cur_block3_prcs
          INTO :ptr_process_list;
     if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
     {      
       fn_errlog(c_ServiceName, "S31070",SQLMSG,c_err_msg);
       MEMSET(c_command1);
       sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
       system(c_command1) ;
       EXEC SQL CLOSE cur_block3_prcs;
       free(ptr_process_list);
       return;
     }
     EXEC SQL CLOSE cur_block3_prcs;

     fn_userlog(c_ServiceName," After Data Load ");
     
     for(l_inner_counter=0;l_inner_counter < l_count ; l_inner_counter++)
     {

      MEMSET(c_process_nm);
      MEMSET(c_exchng_cd);
      c_stts_flg = '\0';
      l_seq_no = 0;
      c_prcs_enbl_flg = '\0';
 
      strcpy(c_process_nm,ptr_process_list[l_inner_counter].c_process_nm1);
      strcpy(c_exchng_cd,ptr_process_list[l_inner_counter].c_exchng_cd1);
      l_seq_no= ptr_process_list[l_inner_counter].l_seq_no1; 
      c_stts_flg=ptr_process_list[l_inner_counter].c_stts_flg1;
      c_prcs_enbl_flg=ptr_process_list[l_inner_counter].c_prcs_enbl_flg1;

      if(c_prcs_enbl_flg == 'N' ) /*** If process is Dissabled, then go for next ***/
      {
       fn_userlog(c_ServiceName,"Process :%s %s: is dissabled, go for next process",c_process_nm,c_exchng_cd);
       continue;
      }
      if( c_prcs_enbl_flg == 'B' )  /*** If process is Break then, stop the automation ***/
      {
       fn_userlog(c_ServiceName,"Automation is break by User, stop the automation");
       return;
      }

      if( c_prcs_enbl_flg != 'Y' )
      {
       fn_userlog(c_ServiceName,"Process :%s %s: is not enabled for running, So skipping ");
       continue;
      }
 
      c_block_enable=' ';
      strcpy(c_block_no, "B3" );

      i_ret_val = fn_chk_block_level(c_block_no,
                                     &c_block_enable,
                                     c_ServiceName,
                                     c_err_msg
                                    );
      if( i_ret_val != 0 )
      {
       MEMSET(c_command1);
       sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
       system(c_command1) ;
       free(ptr_process_list);
       return;
      }

      if( c_block_enable != 'Y' )
      {
       fn_userlog(c_ServiceName,"Block %s Automation Run is disabled",c_block_no );
       MEMSET(c_command1);
       strcpy(c_err_msg1,"'Global BackOffice Automation Run is disabled'");
       sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
       system(c_command1) ;
       free(ptr_process_list);
       return;
      }

      rtrim(c_process_nm);
      rtrim(c_exchng_cd);

      if( c_stts_flg == 'A' )
      {
        i_ret_val = fn_chk_prcs_err(c_process_nm,c_exchng_cd,&l_err_count);
        if( i_ret_val != 0 )
        {
         MEMSET(c_command1);
         sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
         system(c_command1) ;
         free(ptr_process_list);
         return;
        }

        fn_userlog(c_ServiceName," Error Count :%ld:",l_err_count);

        if( l_err_count > 0 )
        {
         fn_userlog(c_ServiceName,"Kindly Resolve the Error of %s %s",c_process_nm,c_exchng_cd);
         sprintf(c_err_msg1,"'Kindly Resolve the Error of %s %s'",c_process_nm,c_exchng_cd);
         MEMSET(c_command1);
         sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
         system(c_command1) ;
         free(ptr_process_list);
         return;
        }
      } 
     
      c_prcs_enbl_flg ='\0';
 
      i_ret_val= fn_chk_process_level(c_process_nm,c_exchng_cd,&c_prcs_enbl_flg,
                                      c_ServiceName,c_err_msg);
      if( i_ret_val != 0 )
      {
        sprintf(c_err_msg1,"System Error. Contact system support.");
        MEMSET(c_command1);
        sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
        system(c_command1) ;
        free(ptr_process_list);
        return;
      }

      if( c_prcs_enbl_flg != 'Y' )
      {
        fn_userlog(c_ServiceName,"Process is not Enabled for run ");
        sprintf(c_err_msg1,"'Process is not Enabled for run'");
        MEMSET(c_command1);
        sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
        system(c_command1) ;
        free(ptr_process_list); 
        return;
      }

      i_return_val = fn_call_gm_process(l_seq_no,c_process_nm,c_exchng_cd);
      if( i_return_val != 0 )
      {
        fn_userlog(c_ServiceName,"Inside Error condition ");
        sprintf(c_err_msg1,"'%s Process for %s is failed, pls check.'",c_process_nm,c_exchng_cd);
        MEMSET(c_command1);
        sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
        system(c_command1) ;
        free(ptr_process_list);
        return;
      }
     }
       
     free(ptr_process_list);
     fn_userlog(c_ServiceName,"End Of first loop");
    }
  }
  else
  {
   fn_userlog(c_ServiceName,"Block 3 is disabled");
  }

  c_block_enable=' ';
  strcpy(c_block_no, "B4"); 

  i_ret_val = fn_chk_block_level(c_block_no,
                                 &c_block_enable,
                                 c_ServiceName,
                                 c_err_msg
                                );
  if( i_ret_val != 0 )
  {
    MEMSET(c_command1);
    sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
    system(c_command1) ;
    return;
  }

  if( c_block_enable == 'Y' )
  {
    fn_userlog(c_ServiceName,"Block 4 Is enabled for Processing");
    l_count = 0;

    EXEC SQL
        SELECT count(1)
          INTO :l_count
          FROM FPD_FO_PROCESS_DTLS
       WHERE FPD_STTS_FLG IN ('A','B')
         AND FPD_BLOCK_NO ='B4'
         ORDER BY FPD_STTS_FLG,FPD_SEQ_NO ASC;

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
     fn_errlog(c_ServiceName, "S31075",SQLMSG,c_err_msg);
     MEMSET(c_command1);
     sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
     system(c_command1) ;
     return;
    }

    if( l_count > 0 )
    {
      ptr_process_list = calloc(sizeof(st_process_list),l_count);
      if (ptr_process_list == NULL )
      {
       fn_errlog(c_ServiceName, "S31080",LIBMSG,c_err_msg);
       MEMSET(c_command1);
       sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
       system(c_command1) ;
       return;
      }

      EXEC SQL
      DECLARE cur_block4_prcs CURSOR FOR
      SELECT FPD_SEQ_NO,
             FPD_PROCESS_NM,
             FPD_EXCHNG_CD,
             FPD_STTS_FLG,
             FPD_PRCS_ENBL_FLG
        FROM FPD_FO_PROCESS_DTLS
       WHERE FPD_STTS_FLG IN ('A','B')
         AND FPD_BLOCK_NO ='B4'
         ORDER BY FPD_STTS_FLG,FPD_SEQ_NO ASC;

     EXEC SQL
     OPEN cur_block4_prcs;

     if(SQLCODE != 0 )
     {
       fn_errlog(c_ServiceName, "S31085",SQLMSG,c_err_msg);
       MEMSET(c_command1);
       sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
       system(c_command1) ;
       EXEC SQL CLOSE cur_block4_prcs;
       free(ptr_process_list);
       return;
     }
  
     EXEC SQL
          FOR l_count
         FETCH cur_block4_prcs
          INTO :ptr_process_list;
     if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
     {
       fn_errlog(c_ServiceName, "S31090",SQLMSG,c_err_msg);
       MEMSET(c_command1);
       sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
       system(c_command1) ;
       EXEC SQL CLOSE cur_block4_prcs;
       free(ptr_process_list);
       return;
     }

     EXEC SQL CLOSE cur_block4_prcs; 
  
     fn_userlog(c_ServiceName," After Data Load ");

     for(l_inner_counter=0;l_inner_counter < l_count ; l_inner_counter++)
     {

      MEMSET(c_process_nm);
      MEMSET(c_exchng_cd);
      c_stts_flg = '\0';
      c_prcs_enbl_flg = '\0';
      l_seq_no = 0;

      strcpy(c_process_nm,ptr_process_list[l_inner_counter].c_process_nm1);
      strcpy(c_exchng_cd,ptr_process_list[l_inner_counter].c_exchng_cd1);
      l_seq_no= ptr_process_list[l_inner_counter].l_seq_no1;
      c_stts_flg=ptr_process_list[l_inner_counter].c_stts_flg1;
      c_prcs_enbl_flg=ptr_process_list[l_inner_counter].c_prcs_enbl_flg1;

      if(c_prcs_enbl_flg == 'N' ) /*** If process is Dissabled, then go for next ***/
      {
       fn_userlog(c_ServiceName,"Process :%s %s: is dissabled, go for next process",c_process_nm,c_exchng_cd);
       continue;
      }
      if( c_prcs_enbl_flg == 'B' )  /*** If process is Break then, stop the automation ***/
      {
       fn_userlog(c_ServiceName,"Automation is break by User, stop the automation");
       return;
      }

      if( c_prcs_enbl_flg != 'Y' )
      {
       fn_userlog(c_ServiceName,"Process :%s %s: is not enabled for running, So skipping ");
       continue;
      }

      c_block_enable=' ';
      strcpy(c_block_no, "B4");

      i_ret_val = fn_chk_block_level(c_block_no,
                                     &c_block_enable,
                                     c_ServiceName,
                                     c_err_msg 
                                    );
      if( i_ret_val != 0 )
      {
       MEMSET(c_command1);
       sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
       system(c_command1) ;
       free(ptr_process_list); 
       return;
      }

      if( c_block_enable != 'Y' )
      {
       fn_userlog(c_ServiceName,"Block %s Automation Run is disabled",c_block_no );
       MEMSET(c_command1);
       strcpy(c_err_msg1,"'Global BackOffice Automation Run is disabled'");
       sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
       system(c_command1) ;
       free(ptr_process_list);
       return;
      }
 
      rtrim(c_process_nm);
      rtrim(c_exchng_cd);
    
      if( c_stts_flg == 'A' )
      {
        i_ret_val = fn_chk_prcs_err(c_process_nm,c_exchng_cd,&l_err_count);
        if( i_ret_val != 0 )
        {
         MEMSET(c_command1);
         sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
         system(c_command1) ;
         free(ptr_process_list);
         return;
        }

        fn_userlog(c_ServiceName," Error Count :%ld:",l_err_count);

        if( l_err_count > 0 )
        {
         fn_userlog(c_ServiceName,"Kindly Resolve the Error of %s %s",c_process_nm,c_exchng_cd);
         sprintf(c_err_msg1,"'Kindly Resolve the Error of %s %s'",c_process_nm,c_exchng_cd);
         MEMSET(c_command1);
         sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
         free(ptr_process_list);
         system(c_command1) ;
         EXEC SQL CLOSE cur_block4_prcs;
         return;
        }
      }

      c_prcs_enbl_flg ='\0';

      i_ret_val= fn_chk_process_level(c_process_nm,c_exchng_cd,&c_prcs_enbl_flg,
                                      c_ServiceName,c_err_msg);
      if( i_ret_val != 0 )
      {
        sprintf(c_err_msg1,"System Error. Contact system support.");
        MEMSET(c_command1);
        sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
        system(c_command1) ;
        free(ptr_process_list);
        return;
      }

      if( c_prcs_enbl_flg != 'Y' )
      {
        fn_userlog(c_ServiceName,"Process is not Enabled for run ");
        sprintf(c_err_msg1,"'Process is not Enabled for run'");
        MEMSET(c_command1);
        sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
        system(c_command1) ;
        free(ptr_process_list); 
        return;
      }

      i_return_val = fn_call_gm_process(l_seq_no,c_process_nm,c_exchng_cd);
      if( i_return_val != 0 )
      {
        sprintf(c_err_msg1,"'%s Process for %s is failed, pls check.'",c_process_nm,c_exchng_cd);
        MEMSET(c_command1);
        sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
        system(c_command1) ;
        free(ptr_process_list); 
        return;
      }
     }

     free(ptr_process_list); 
 
    }
  }
  else
  {
   fn_userlog(c_ServiceName,"Block 4 is disabled");
  }

  /**** Ver 1.4 starts here ****/
  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31095",SQLMSG,c_err_msg);
     MEMSET(c_err_msg1);
     strcpy(c_err_msg1,"Overnight Marketing Opening Failed, pls check");
     MEMSET(c_command1);
     sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
     system(c_command1) ;
     return;
  }

  fn_userlog(c_ServiceName,"opening the Marlet");
 
  EXEC SQL
    UPDATE exg_xchng_mstr
       SET EXG_CRRNT_STTS='C'
      WHERE EXG_XCHNG_CD='NFO'
        AND EXG_CRRNT_STTS='X'
        AND exg_nxt_trd_dt = ( select min(FBC_TRD_DT) from FBC_FO_BRNCH_CAL where FBC_XCHNG_CD='NFO' and FBC_GRP_ID='1' and FBC_TRD_DT > trunc(sysdate));
  if( SQLCODE != 0 && SQLCODE !=NO_DATA_FOUND )
  {
     fn_errlog(c_ServiceName, "S31100",SQLMSG,c_err_msg);
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     MEMSET(c_err_msg1);
     strcpy(c_err_msg1,"Overnight Marketing Opening Failed, pls check");
     MEMSET(c_command1);
     sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
     system(c_command1) ;
     return;
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog(c_ServiceName, "S31105",SQLMSG,c_err_msg);
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     MEMSET(c_err_msg1);
     strcpy(c_err_msg1,"Overnight Marketing Opening Failed, pls check");
     MEMSET(c_command1);
     sprintf( c_command1, "ksh send_game_issue_reprt.sh %s",c_err_msg1);
     system(c_command1) ;
     return;
  }

  /***** Ver 1.4 ends here ****/
   
  return;
}

int fn_bat_init ( int argc, char *argv[] ) 
{
	fn_var = BAT_FO_DEMON;
	return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
	return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
	return 0;
}

int fn_call_gm_process(long  l_process_seq,
                       char* c_process_nm,
                       char* c_xchng_cd
                      )
{
   int i_ret_val;

   long l_err_count=0;
   long l_clsprc_cnt=0;
   long li_run_no;

   char c_prv_process_nm[20];
   char c_command[60];
   char c_prcs_enbl_flg;
   char c_expry_day;
 
   char c_program_nm[33];
   char c_xchng_cd_tmp[4];
   char c_match_id[11];
   char c_error_txt[256];
	 varchar c_file_dt[LEN_DATE];	/** Ver 1.2 **/
	 varchar c_folder_nm[LEN_DATE];	/** Ver 1.2 **/
	 char c_filename[25];				/** Ver 1.2 **/

	 MEMSET(c_match_id);
	 MEMSET(c_xchng_cd_tmp);
   MEMSET(c_command);
	 MEMSET(c_file_dt);				/** Ver 1.2 **/
	 MEMSET(c_filename);		 	/** Ver 1.2 **/
	 MEMSET(c_folder_nm);		 	/** Ver 1.2 **/
		

   fn_userlog(c_ServiceName,"Inside fn_call_gm_prcoess()");
   fn_userlog(c_ServiceName,"Sequence Number :%ld:",l_process_seq);
   fn_userlog(c_ServiceName,"Process Name :%s:",c_process_nm);
   fn_userlog(c_ServiceName,"Exchange Code :%s:",c_xchng_cd);

	 strcpy(c_xchng_cd_tmp,c_xchng_cd);
	
	 /** Ver 1.2 Starts **/
	
	 if(strcmp(c_process_nm,"bat_upld_cn01") == 0 )
   {
		EXEC SQL
		SELECT to_char(to_date(:c_run_dt),'ddmmyyyy'),
					 to_char(to_date(:c_run_dt),'yyyymmdd')
		INTO	 :c_file_dt,
					 :c_folder_nm
		FROM DUAL;

		if(SQLCODE != 0)
    {
    	fn_errlog(c_ServiceName, "S31110",SQLMSG,c_err_msg);
      return -1;
    }

		strcpy(c_filename,"F_CN01_");
		strcat(c_filename,c_file_dt.arr);
		strcat(c_filename,".CSV");

		fn_userlog(c_ServiceName,c_folder_nm.arr);
	
		strcpy(c_command,"bat_upld_cn01 NFO NFO NA ");
		strcat(c_command,c_folder_nm.arr);
		strcat(c_command," ");	
		strcat(c_command,c_filename);		
		rtrim(c_command);
										
	 }
	 /** Ver 1.2 Ends **/

   else if(strcmp(c_process_nm,"bat_fo_exp") == 0 )
   {
                        if( strcmp(c_xchng_cd,"NFO") == 0 )
                        { 
                         strcpy(c_command, "bat_fo_exp NFO NFO NA ");
                         strcat(c_command,c_nxt_trd_dt);
                         strcat(c_command," X");
                         rtrim(c_command);
                        }
                        else
                        {
                         strcpy(c_command, "bat_fo_exp BFO BFO NA ");
                         strcat(c_command,c_nxt_trd_dt);
                         strcat(c_command," X");
                         rtrim(c_command);
                        }
   }
   else if( strcmp(c_process_nm,"fno_copy_data") == 0 ) 
   {
                       strcpy(c_command, "fno_copy_data.sh");  
   }
   else if( strcmp(c_process_nm,"bat_eod_mtm") == 0) 
   {
                        l_clsprc_cnt=0 ;

												/*** Commented in Ver 1.5 ***

                        EXEC SQL
                        SELECT count(1)
                          INTO :l_clsprc_cnt
                          FROM FCM_FO_CNTRCT_MSTR
                         WHERE FCM_CLS_PRC_DT = to_date(:c_run_dt,'DD-Mon-YYYY')
                           AND FCM_XCHNG_CD = :c_xchng_cd;
			
												*** Ver 1.5 Comment Ends ***/

												/*** Ver 1.5 Starts ***/
						
												EXEC SQL
                        SELECT count(1)
                          INTO :l_clsprc_cnt
                          FROM FTQ_FO_TRD_QT
                         WHERE FTQ_CLS_PRC_DT = to_date(:c_run_dt,'DD-Mon-YYYY')
                           AND FTQ_XCHNG_CD = :c_xchng_cd;

												/*** Ver 1.5 Ends ***/

                        if(SQLCODE != 0)
                        {
                         fn_errlog(c_ServiceName, "S31115",SQLMSG,c_err_msg);
                         return -1;
                        }
                       
                        if( l_clsprc_cnt == 0 )
                        {
                         fn_userlog(c_ServiceName,"Closing Price Download is not Done, Pls check");
                         sprintf(c_error_txt,"Closing Price Download of %s is not Done, Pls check",c_xchng_cd); 
                         fn_log_prcs_err(c_process_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
                         return -1;
                        }

                        EXEC SQL
                        SELECT SEQ_FNO_EOD_MTM.NEXTVAL
                        INTO :li_run_no
                        FROM DUAL;
                        if(SQLCODE != 0)
                        {
                         fn_errlog(c_ServiceName, "S31120",SQLMSG,c_err_msg);
                         return -1; 
                        }

                        if( strcmp(c_xchng_cd,"NFO") == 0 )
                        { 
                         strcpy(c_command, "bat_eod_mtm NFO NFO NA ");
                         strcat(c_command,c_run_dt);
                         strcat(c_command," ");
                         sprintf(c_command,"%s%ld",c_command,li_run_no);
                        }    
                        else
                        {
                         strcpy(c_command, "bat_eod_mtm BFO BFO NA ");
                         strcat(c_command,c_run_dt);
                         strcat(c_command," ");
                         sprintf(c_command,"%s%ld",c_command,li_run_no);
                        }  
    }
    else if( strcmp(c_process_nm,"bat_span_eodmtm") == 0)
    {
                        l_clsprc_cnt=0;

												/*** Commented in Ver 1.5 ***

                        EXEC SQL
                        SELECT count(1)
                          INTO :l_clsprc_cnt
                          FROM FCM_FO_CNTRCT_MSTR
                         WHERE FCM_CLS_PRC_DT = to_date(:c_run_dt,'DD-Mon-YYYY')
                           AND FCM_XCHNG_CD = :c_xchng_cd;

												*** Ver 1.5 Comment Ends ***/

												/*** Ver 1.5 Starts ***/

												EXEC SQL
                        SELECT count(1)
                          INTO :l_clsprc_cnt
                          FROM FTQ_FO_TRD_QT
                         WHERE FTQ_CLS_PRC_DT = to_date(:c_run_dt,'DD-Mon-YYYY')
                           AND FTQ_XCHNG_CD = :c_xchng_cd;

												/*** Ver 1.5 Ends ***/

                        if(SQLCODE != 0)
                        {
                         fn_errlog(c_ServiceName, "S31125",SQLMSG,c_err_msg);
                         return -1;
                        }

                        if( l_clsprc_cnt == 0 )
                        {
                         fn_userlog(c_ServiceName,"Closing Price Download is not Done, Pls check");
                         sprintf(c_error_txt,"Closing Price Download of %s is not Done, Pls check",c_xchng_cd);
                         fn_log_prcs_err(c_process_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
                         return -1;
                        } 
                 
                        EXEC SQL
                        SELECT SEQ_FNO_EOD_MTM.NEXTVAL
                        INTO :li_run_no
                        FROM DUAL;
                        if(SQLCODE != 0)
                        {
                         fn_errlog(c_ServiceName, "S31130",SQLMSG,c_err_msg);
                         return -1;
                        }

                        if( strcmp(c_xchng_cd,"NFO") == 0 )
                        {
                         strcpy(c_command, "bat_span_eodmtm NFO NFO NA ");
                         strcat(c_command,c_run_dt);
                         strcat(c_command," ");
                         sprintf(c_command,"%s%ld",c_command,li_run_no);
                        }
                        else
                        {
                         strcpy(c_command, "bat_span_eodmtm BFO BFO NA ");
                         strcat(c_command,c_run_dt);
                         strcat(c_command," ");
                         sprintf(c_command,"%s%ld",c_command,li_run_no);
                        }
    }
    else if( strcmp(c_process_nm,"bat_gm_dlyoblg") == 0)
    {
                         
                        strcpy(c_command, "bat_gm_dlyoblg NFO NFO NA ");
    }
    else if( strcmp(c_process_nm,"bat_gm_excrasgn_dwld") == 0)
    {
                       c_expry_day ='\0';

												/*** Commented in Ver 1.5 ***

                        EXEC SQL
                          SELECT 'Y'
                            INTO :c_expry_day
                            FROM fcm_fo_cntrct_mstr
                           WHERE FCM_XCHNG_CD=:c_xchng_cd
                             and FCM_EXPRY_DT = trunc(SYSDATE)
                             and rownum < 2;

												*** Ver 1.5 Comment Ends ***/

												/*** Ver 1.5 Starts ***/
												
												EXEC SQL
                          SELECT 'Y'
                            INTO :c_expry_day
                            FROM ftq_fo_trd_qt
                           WHERE FTQ_XCHNG_CD=:c_xchng_cd
                             and FTQ_EXPRY_DT = trunc(SYSDATE)
                             and rownum < 2;

												/*** Ver 1.5 Ends ***/

                        if( SQLCODE !=0 && SQLCODE != NO_DATA_FOUND )
                        {
                         fn_errlog(c_ServiceName, "S31135",SQLMSG,c_err_msg);
                         return -1;
                        }

                        if( c_expry_day == 'Y' )
                        { 
                          if( strcmp(c_xchng_cd,"NFO") == 0 )
                          {
                           strcpy(c_command,"bat_gm_excrasgn_dwld NFO NFO NA");
                          }
                          else
                          {
                           strcpy(c_command,"bat_gm_excrasgn_dwld BFO BFO NA");
                          }
                        }
                        else
                        {
                         return 0;
                        }
    }
    else if( strcmp(c_process_nm,"bat_asgnt_dwld") == 0)
    {         
                        c_expry_day ='\0';

												/*** Commented in Ver 1.5 ***

                        EXEC SQL
                          SELECT 'Y'
                            INTO :c_expry_day
                            FROM fcm_fo_cntrct_mstr
                           WHERE FCM_XCHNG_CD=:c_xchng_cd 
                             and FCM_EXPRY_DT = trunc(SYSDATE) 
                             and rownum < 2;

												*** Ver 1.5 Comment Ends ***/

												/*** Ver 1.5 Starts ***/

												EXEC SQL
                          SELECT 'Y'
                            INTO :c_expry_day
                            FROM ftq_fo_trd_qt
                           WHERE FTQ_XCHNG_CD=:c_xchng_cd
                             and FTQ_EXPRY_DT = trunc(SYSDATE)
                             and rownum < 2;
 
												/*** Ver 1.5 Ends ***/

                        if( SQLCODE !=0 && SQLCODE != NO_DATA_FOUND )
                        {
                         fn_errlog(c_ServiceName, "S31140",SQLMSG,c_err_msg); 
                         return -1; 
                        }
                     
                        if( c_expry_day == 'Y' )
                        {
                          if( strcmp(c_xchng_cd,"NFO") == 0 )
                          {
                           strcpy(c_command,"bat_asgnt_dwld NFO NFO NA ");
                           strcat(c_command,c_run_dt);
                           strcat(c_command," ");
                           strcat(c_command," 0 F");
                          }
                          else
                          {
                           strcpy(c_command,"bat_asgnt_dwld BFO BFO NA ");
                           strcat(c_command,c_run_dt);
                           strcat(c_command," ");
                           strcat(c_command," 0 F");
                          }   
                        }
                        else
                        {
                          return 0;
                        }         
    }                  
    else if( strcmp(c_process_nm,"bat_exer_pstn") == 0)
    {
                        c_expry_day ='\0';

												/*** Commented in Ver 1.5 ***

                        EXEC SQL
                          SELECT 'Y'
                            INTO :c_expry_day
                            FROM fcm_fo_cntrct_mstr
                           WHERE FCM_XCHNG_CD=:c_xchng_cd
                             and FCM_EXPRY_DT = trunc(SYSDATE)
                             and rownum < 2;

												*** Ver 1.5 Comment Ends ***/

												/*** Ver 1.5 Starts ***/

												EXEC SQL
                          SELECT 'Y'
                            INTO :c_expry_day
                            FROM ftq_fo_trd_qt
                           WHERE FTQ_XCHNG_CD=:c_xchng_cd
                             and FTQ_EXPRY_DT = trunc(SYSDATE)
                             and rownum < 2;

												/*** Ver 1.5 Ends ***/
		

                        if( SQLCODE !=0 && SQLCODE != NO_DATA_FOUND )
                        {
                         fn_errlog(c_ServiceName, "S31145",SQLMSG,c_err_msg);
                         return -1;
                        }

                        if( c_expry_day == 'Y' )
                        {
                         if( strcmp(c_xchng_cd,"NFO") == 0 )
                         {
                          strcpy(c_command,"bat_exer_pstn NFO NFO NA ");
                          strcat(c_command,c_run_dt);
                          strcat(c_command," ");
                          strcat(c_command," 0 F");
                         }
                         else
                         {
                          strcpy(c_command,"bat_asgnt_dwld BFO BFO NA ");
                          strcat(c_command,c_run_dt);
                          strcat(c_command," ");
                          strcat(c_command," 0 F");
                         }
                        }
                        else
                        {
                         return 0;
                        }
     }
     else if( strcmp(c_process_nm,"bat_fo_eod") == 0)
     {
                        MEMSET(c_nxt_trd_dt);

                        EXEC SQL
                           SELECT min(FBC_TRD_DT)
                             INTO :c_nxt_trd_dt
                             FROM FBC_FO_BRNCH_CAL 
                            WHERE FBC_XCHNG_CD = :c_xchng_cd
                              AND trunc(FBC_TRD_DT) > to_date(:c_run_dt,'DD-Mon-YYYY');
                        if( SQLCODE !=0 )
                        {
                         fn_errlog(c_ServiceName, "S31150",SQLMSG,c_err_msg);
                         return -1;
                        }
                       
                        fn_userlog(c_ServiceName,"Exchange Next Trade Date :%s:",c_nxt_trd_dt);
 
                        if(strcmp(c_xchng_cd,"NFO") == 0 )
                        {
                         strcpy(c_command, "bat_fo_eod NFO NFO NA ");
                         strcat(c_command, c_nxt_trd_dt);
                        }
                        else
                        {
                         strcpy(c_command, "bat_fo_eod BFO BFO NA ");
                         strcat(c_command, c_nxt_trd_dt);
                        } 
     }
     else if( strcmp(c_process_nm,"bat_eod_adj") == 0)
     {                      
                        if( strcmp(c_xchng_cd,"NFO") == 0 )
                        {
                         strcpy(c_command, "bat_eod_adj NFO NFO NA ");
                         strcat(c_command, c_run_dt); 
                        }
                        else
                        {
                         strcpy(c_command, "bat_eod_adj BFO BFO NA ");
                         strcat(c_command, c_run_dt);
                        }
     }
     else if( strcmp(c_process_nm,"bat_adj_nri") == 0)
     { 
                        strcpy(c_command, "bat_adj_nri NFO NFO NA ");
                        strcat(c_command, c_run_dt);
     }
     else if( strcmp(c_process_nm,"bat_fo_gmpipo") == 0) 
     {
                        strcpy(c_command, "bat_fo_gmpipo NFO NFO NA ");
                        strcat(c_command, c_run_dt);
 
     } 
     else if( strcmp(c_process_nm,"bat_house_keep") == 0)     
     {
												/** Ver 1.1 Starts **/ 
												i_ret_val = fn_upd_lot_sz();
												
												if( i_ret_val != 0 )
   											{
    											fn_userlog(c_ServiceName,"Error in fn_upd_lot_sz()");
    											return -1;
   											}
												MEMSET(c_run_dt);
												
												EXEC SQL
    											SELECT to_date(exg_nxt_trd_dt,'dd-Mon-yyyy')
      										INTO :c_run_dt
      										FROM exg_xchng_mstr
     											WHERE EXG_XCHNG_CD=:c_xchng_cd;

  											if(SQLCODE  != 0 ) 
  											{
   												fn_errlog(c_ServiceName, "S31155",SQLMSG,c_err_msg);
   												return -1;
  											}
	
												/** Ver 1.1 Ends **/	
		                   
                        if( strcmp(c_xchng_cd,"NFO") == 0 )
                        {
                         strcpy(c_command, "bat_house_keep NFO NFO NA ");
                         strcat(c_command, c_run_dt);
                         strcat(c_command, " O");
                         strcat(c_command, " NA");
                        }
                        else
                        {
                         strcpy(c_command, "bat_house_keep BFO BFO NA ");
                         strcat(c_command, c_run_dt);
                         strcat(c_command, " O");
                         strcat(c_command, " NA");
                        }   
     } 
     else
     { 
                       fn_userlog(c_ServiceName," Inside Invalid Process Name"); 
     } 
 
   fn_userlog(c_ServiceName,"Command Requested :%s:",c_command);
 
   i_ret_val = fn_upd_prcs_stts(c_process_nm,c_xchng_cd,'R',c_ServiceName,c_err_msg); /** Update as Running ***/
   if( i_ret_val != 0 )
   {
    fn_userlog(c_ServiceName,"Error in fn_upd_prcs_stts()");
    return -1;
   }
 
   i_ret_val = system(c_command);

   if( i_ret_val != 0 )
   {
    fn_userlog(c_ServiceName,"Error in SYSTEM Call ");
    return -1; 
   }

   i_ret_val = fn_upd_prcs_stts(c_process_nm,c_xchng_cd,'N',c_ServiceName,c_err_msg);
   if( i_ret_val != 0 )
   {
    fn_userlog(c_ServiceName,"Error in fn_upd_prcs_stts()");
    return -1;
   }

return 0;

}

int fn_chk_block_level( char* c_block_no,
                        char* c_block_enable,
                        char* c_ServiceName,
                        char* c_err_msg
                      )
{

  char c_blocl_enbl;

  EXEC SQL
    SELECT FPB_BLOCK_FLG
      INTO :c_blocl_enbl
      FROM FPB_FO_PRCS_BLOCKDTLS
     WHERE FPB_BLOCK_NO =:c_block_no;

  if(SQLCODE  != 0)
  {
   fn_errlog(c_ServiceName, "S31160",SQLMSG,c_err_msg);
   return -1;
  }
  *c_block_enable  = c_blocl_enbl;
 return 0;
}


int fn_upd_prcs_stts(char* c_process_nm,
                 char* c_exchng_cd,
                 char  c_prcs_stts,
                 char* c_ServiceName,
                 char* c_err_msg
                )
{

 int i_trnsctn;

 long l_err_count=0;

 char c_stts_flg;

 fn_userlog(c_ServiceName,"Inside fn_upd_prcs_stts for %s: and %s:",c_process_nm,c_exchng_cd);
 if( c_prcs_stts == 'R' )
 {
   c_stts_flg = 'R';  
 }
 else
 {
   EXEC SQL
   SELECT count(1)
     INTO :l_err_count
     FROM FPE_FO_PROCESS_ERRS
    WHERE FPE_PROCESS_NM = :c_process_nm
      AND FPE_EXCHNG_CD  = :c_exchng_cd
      AND FPE_ERR_FLG    = 'N'
      AND trunc(FPE_PROCESS_DT) = trunc(sysdate);
   if( SQLCODE != 0)
   {
    fn_errlog(c_ServiceName, "S31165",SQLMSG,c_err_msg);
    return -1;
   }

   if( l_err_count > 0 )
   {
    c_stts_flg = 'A';   /*** Mark Fail ***/
   }
   else
   {
    c_stts_flg = 'C';   /*** Mark Success ***/
   }
 }

 i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
 if ( i_trnsctn == -1 )
 {
  fn_errlog(c_ServiceName, "L31165",LIBMSG,c_err_msg);
  return ( -1 );
 }

 EXEC SQL
    UPDATE FPD_FO_PROCESS_DTLS
       SET FPD_STTS_FLG=:c_stts_flg
     WHERE FPD_PROCESS_NM = :c_process_nm
       AND FPD_EXCHNG_CD = :c_exchng_cd;

 if(SQLCODE != 0 )
 {
  fn_errlog(c_ServiceName, "S31170",SQLMSG,c_err_msg);
  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  return -1;
 }

 if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
 {
  fn_errlog( c_ServiceName, "L31175",LIBMSG,c_err_msg);
  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  return ( -1 );
 }

 if( c_stts_flg == 'A' ) /*** if Error Stop the Process ***/
 {
  fn_userlog(c_ServiceName,"Process failed,pls check");
  return -1;
 }

 return 0;

}

int fn_chk_process_level(char* c_process_nm, char* c_xchng_cd,char* c_prcs_enbl_flg,
                         char* c_ServiceName, char* c_err_msg)
{

  char c_process_flg;

  fn_userlog(c_ServiceName," c_process_nm :%s:",c_process_nm);
  fn_userlog(c_ServiceName," c_xchng_cd :%s:",c_xchng_cd);

  EXEC SQL
    SELECT FPD_PRCS_ENBL_FLG
      INTO :c_process_flg
      FROM FPD_FO_PROCESS_DTLS
     WHERE FPD_PROCESS_NM = :c_process_nm
       AND FPD_EXCHNG_CD = :c_xchng_cd;
  if(SQLCODE != 0)
  {
   fn_errlog(c_ServiceName, "S31175",SQLMSG,c_err_msg);
   return -1;
  }
  *c_prcs_enbl_flg = c_process_flg; 

  fn_userlog(c_ServiceName,"Process Enable flag :%c:",*c_prcs_enbl_flg);
return 0;
}

	
int fn_chk_prcs_err(char* c_process_nm, char* c_xchng_cd,long* l_err_count)
{
  long l_err_cnt=0;
  
  fn_userlog(c_ServiceName,"Inside Rerun case ");
  EXEC SQL
    SELECT count(1)
      INTO :l_err_cnt
      FROM FPE_FO_PROCESS_ERRS
     WHERE FPE_PROCESS_NM=:c_process_nm
       AND FPE_EXCHNG_CD = :c_xchng_cd
       AND FPE_ERR_FLG   ='N'
       AND trunc(FPE_PROCESS_DT) = trunc(sysdate);

  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
   fn_errlog(c_ServiceName, "S31180",SQLMSG,c_err_msg);
   return -1;
  }

  *l_err_count = l_err_cnt;
	return 0;
}

/** Ver 1.1 Starts **/
int fn_upd_lot_sz()
{
	int i_trnsctn;

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
	if ( i_trnsctn == -1 )
	{
		fn_errlog(c_ServiceName, "S31185",LIBMSG,c_err_msg);
		return ( -1 );
	}

	/*** Commented in Ver 1.5 ***

	EXEC SQL
     UPDATE ftd_fo_trd_dtls ftd
     SET ftd_min_lot_size = ( select distinct fcm_lot_sz from fcm_fo_cntrct_mstr
                              where fcm_undrlyng=ftd.ftd_undrlyng
                              AND   fcm_expry_dt = ftd.ftd_expry_dt    *** Ver 1.3 ***
                              AND   fcm_prdct_typ = ftd.ftd_prdct_typ  *** Ver 1.3 ***
                              AND   fcm_opt_typ   = ftd.ftd_opt_typ    *** Ver 1.3 ***
                              AND   fcm_xchng_cd  = ftd.ftd_xchng_cd   *** Ver 1.3 ***
                              AND   fcm_indstk    = ftd.ftd_indstk     *** Ver 1.3 ***
                              AND   fcm_strk_prc =  ftd.ftd_strk_prc   *** Ver 1.3 ***
                             );

	*** Ver 1.5 Comment Ends ***/

	/*** Ver 1.5 Starts ***/

	EXEC SQL
     UPDATE ftd_fo_trd_dtls ftd
     SET ftd_min_lot_size = ( select distinct ftq_min_lot_qty from ftq_fo_trd_qt
                              where ftq_undrlyng	=	ftd.ftd_undrlyng
                              AND   ftq_expry_dt  = ftd.ftd_expry_dt  
                              AND   ftq_prdct_typ = ftd.ftd_prdct_typ
                              AND   ftq_opt_typ   = ftd.ftd_opt_typ  
                              AND   ftq_xchng_cd  = ftd.ftd_xchng_cd 
                              AND   ftq_indstk    = ftd.ftd_indstk   
                              AND   ftq_strk_prc  = ftd.ftd_strk_prc 
                             );

	/*** Ver 1.5 Ends ***/

  if(SQLCODE != 0 )
  {
  	fn_errlog(c_ServiceName, "S31190",SQLMSG,c_err_msg);
    fn_userlog(c_ServiceName,"failed to update lot size");
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
	{
		fn_errlog( c_ServiceName, "S31195",LIBMSG,c_err_msg);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		return ( -1 );
	}
}

/** Ver 1.1 Ends **/	
