/******************************************************************************/
/*  Program           : BAT_MTCH_UPLD																					*/
/*                                                                            */
/*  Output            : Success / Failure                                     */
/*                                                                            */
/*  Description       : New match upload process introduced for Optimization  */
/*                     																												*/
/*                                                                            */
/*  Log               : 1.1                                                   */
/*  Log               : 1.2  Shailesh                                         */
/*  Log               : 1.3  Vikash                                           */
/*	Log								: 1.4  Ranjit																						*/
/*	Log								: 1.5  Kunal																						*/	
/*  Log               : 1.6  Sachin B                                         */
/*  Log               : 1.7  Navina D                                         */
/*  Log								: 1.8  Navina D																					*/
/*  Log								: 1.9  Sandip T																					*/
/*  Log               : 2.0  Navina D.                                        */
/*  Log               : 2.1  Navina D.                                        */
/*  Log               : 2.2  Navina D.                                        */
/*  Log               : 2.3  Sachin B.                                        */
/*  Log               : 2.4  Amrin  k.                                        */
/*  Log               : 2.5  Sandip T.                                        */
/*  Log               : 2.6  Sachin B.                                        */
/*  Log               : 2.8  Samip M.																					*/
/*  Log               : 2.9  Ritesh D.                                        */
/*  Log               : 3.0  Sandip T.																				*/
/*  Log               : 3.2  Sandip T.																				*/
/*  Log               : 3.3  Sandip T.																				*/
/*  Log               : 3.4  Sandip T.																				*/
/******************************************************************************/
/*  								Ver 1.1        									                					*/
/*  18-Jun-2007     Ver 1.2        Optimization 															*/
/*  09-Oct-2007     Ver 1.3        Changes for NNF808 increase in size of     */
/*                                 trade no. and order no.                    */
/*	17-Jan-2008			Ver 1.4 			 IBM Migration															*/
/*	20-Mar-2008			Ver 1.5				 FP Change																  */
/*  21-Oct-2010     Ver 1.6        Match upload process for mapped customers  */
/*  12-Oct-2011     Ver 1.7        Optimization(Bulk Upload)									*/
/*  06-Jan-2011     Ver 1.8        BSE ORS changes														*/
/*  17-Apr-2013     Ver 1.9        OPM Front end CR Chnages										*/
/*  14-May-2013     Ver 2.0        SLTP F+ Handling                           */
/*  01-Sep-2013     Ver 2.1        OptionPLUS Handling                        */
/*  20-Dec-2014     Ver 2.2        Fix added for OptionPLUS for clients mapped*/
/*                                 under option pricing                       */
/*  01-Sep-2013     Ver 2.3        Contract Note Changes                      */
/*  27-Feb-2014     Ver 2.4        INDIAVIX                						        */
/*  26-Sep-2014     Ver 2.5        CR-ISEC14-55222_I_Gain_Profit_Pricing_Model*/
/*  23-Jan-2015     Ver 2.6        Optimize																		*/
/*  30-Mar-2015     Ver 2.7        Code Optimization    											*/
/*  12-Aug-2015     Ver 2.8        Changes for Bullet Scheme									*/
/*  17-Aug-2015     Ver 2.9        Contract Master and Trade Quote Table      */
/*                                 Merger Changes                             */
/*  18-Sep-2015     Ver 3.0        Validation of Option Pricing process added */
/*  29-Oct-2015     Ver 3.2        Transaction Time Changes                   */
/*  29-Oct-2015     Ver 3.3        Option 20 CR chages                        */
/*  03-Dec-2020     Ver 3.4        Idirect Lite chages                        */
/******************************************************************************/
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fml_def.h>
#include <fo_fml_def.h>
#include <eba_to_ors.h> /** Added in ver 1.3 **/
#include <fn_ddr.h>
#include <sqlca.h>    /*Ver 1.2*/
#include <string.h>		/* ver 1.4 */
#include <fml_rout.h>	/* ver 1.4 */
#include <fn_read_debug_lvl.h>	/* ver 1.4 */

int i;
#define	INIT(x,y) for(i=0 ;i<y;i++)x[i] = 0

#define MAX_REC 10000	/*** Ver 1.7 ***/
#define TRAN_TIME 1200      /** Ver 3.2 **/

void BAT_FO_MATUPD ( int argc, char *argv[] )
{
	long int li_tot_rcrds = 0;
  int i_ch_val;
  int i_trans;				/*Ver 1.2*/
  long int li_cnt;
  char c_msg[256];
	FBFR32 *ptr_fml_buf;
  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];

	char  c_usr_id[8];
  long  l_session_id;
  char  c_xchng_cd [21];
  char  c_Exchng_cd [21];
/**  char  c_xchng_ack [16]; commented in ver 1.3 **/
  char  c_xchng_ack [LEN_XCHNG_ACK]; /** Added in ver 1.3 **/
  char  c_ordr_rfrnc [19];
  long  l_xchng_trd_no;
  char  c_eba_trd_no [21];
  char  c_trd_rfrnc [21];		/*ver 1.2*/
  char  c_prd_typ;
  char  c_ctgry_indstk;
  char  c_undrlyng[7];
  char  c_expry_dt[23];
  char  c_opt_typ;
  char  c_exrc_typ;
  long  l_strike_prc;
  char  c_trd_flw;
  long  l_qty;
	long  l_cover_qty;			/*ver 1.2*/
  long  l_exctd_rt;
  char  c_eba_mtch_act_no[11];
  long  l_frs_brkg_val;
	long  l_cvr_brkg_val;		/*ver 1.2*/	
  char  c_trd_dt[23];
  char  c_trnsctn_typ[4];
  char  c_settlor[13];
  char  c_pro_cli_flg;
  char  c_status_flg;

  long l_script_id;
  char c_instrmnt_typ[9];
  char c_symbol[12];
  char c_rqst_typ;
  double d_strike_prc;
  long l_ca_lvl;
  long l_min_lot_qty;
  long l_tck_sc;
  long l_multplr;
  long l_start_seq=0;  /* Ver 2.7 **/
  long l_end_seq=0;  /* Ver 2.7 **/
  long int  i_element=0;  /* Ver 2.7 **/
  long l_frsh_cvr_qty_cnt=0; /* Ver 2.7 **/
  long l_conv_trd_cnt=0; /* Ver 2.7 **/

  char c_brkr_cmpt_flg;
  
	int i_flg=0;
	char c_rout_str[4];
  char c_trd_ack_tm [23] ; /* 1.1 */

  int i_opm_cnt = 0;  /** Ver 1.6 **/


	/*** Ver 1.7 start ***/
	FBFR32    *ptr_fml_Sbuffer;		
	FBFR32    *ptr_fml_Rbuffer;		

	long int li_maxrecord = 0; 
	char c_member_cd[6];			 
	char c_event[256];				
	long int li_counter = 0;			
  long l_rowprcssd = 0;				
	long l_bufferlength;					
	int i_err[4];								/***	Ver	1.8	Incremented By 1	***/
	long l_rcv_length;						
	char c_exec_flg;							
	int i_rec_count=0;					  
	long	i_ret_val;		

	char c_rowid[19];					
  char c_tmp_xchng_cd[4];					
	char c_tmp_member_cd[6];				
	char c_tmp_company_cd[5];				
	char c_tmp_group_cd[1];					
	char c_tmp_order_no[21];				
	char c_tmp_trade_no[20];				
	char c_tmp_contract_ins_typ[11];
	char c_tmp_symbol[21];					
	char c_tmp_expiry_dt[23];				
	char c_tmp_option_typ[3];				
	double d_tmp_strike_price;			
	char c_tmp_ca_level[3];					
	char c_tmp_user_id[21];					
	char c_tmp_buy_sell[2];	
	char c_tmp_trader_id[12];
	char c_tmp_cu_flag[2];
	double d_tmp_trade_price;				
	char c_tmp_client_cd[11];				
	char c_tmp_pro_client_flag[2];			
	char c_tmp_participant_cd[21];	
	char c_tmp_tconf_status[2];			
	char c_tmp_trade_dt[23];				
	char c_tmp_ord_dt_tm[23];				
	char c_tmp_eba_trade_typ[4];		
	char c_tmp_covered_call;				
	char c_tmp_brk_cmpt_flg[2];				
	char c_tmp_created_on[26];			
	char c_tmp_oc_flag[2];							
	char c_tmp_trd_rowid[19];				
	char c_tmp_series_id[11];						/*** Ver 1.8 ***/
	char c_tmp_series_cd[2];						/*** Ver 1.8 ***/
	char c_tmp_spl_flg[2];						  /*** Ver 2.3 ***/
	long l_eba_trade_srno = 0;
  int  i_opm_trd_cnt=0;								/*** Ver 3.0 **/

	typedef struct tagtradedetails					
	{
		char		c_xchng_cd[4];
		char    c_member_cd[6]; 
		char    c_company_cd[5];
		char    c_group_cd[1];
		char    c_order_no[21]; 
		char    c_trade_no[21];
		char		c_eba_trd_no[21];
		char		c_contract_ins_typ[11];
		char		c_symbol[21];
		char		c_expiry_dt[23];
		char		c_option_typ[3]; 
		double  d_strike_price;
		char		c_ca_level[3];
		char		c_user_id[21];
		char		c_buy_sell[2];
		char    c_trader_id[12];
		char    c_cu_flag[2];
		double	d_trade_quantity;
		double	d_trade_price;
		char		c_client_cd[11]; 
		double	d_brokerage;
		char		c_pro_client_flag[2];
		char		c_participant_cd[21];
		char		c_tconf_status[2];
		char		c_trade_dt[23]; 
		char    c_ord_dt_tm[23]; 
		char		c_eba_trade_typ[4];
		char		c_covered_call;
		char    c_brk_cmpt_flg[2];
		char    c_created_on[26];
		long		l_eba_trade_srno;
		char    c_oc_flag[2];
		char    c_trd_rowid[19];
		char    c_series_id[11];					/*** Ver 1.8 ***/
		char    c_series_cd[2];						/*** Ver 1.8 ***/
		char    c_sq_flg[2];					   	/*** Ver 2.3 ***/
	}struct_trade_details;

	struct_trade_details tradearray[MAX_REC];	
	unsigned char  *c_msg_cbuf;
	
	li_maxrecord = MAX_REC;
	/*** Ver 1.7 Ends ***/


	INIT(c_trnsctn_typ , 4);
	INIT(c_settlor , 13);
	INIT(c_ordr_rfrnc , 19);

  strcpy ( c_ServiceName, argv[0] );

	INITBATDBGLVL(argv[0]);		/* ver 1.4 */
	strcpy(c_usr_id,"system");
	l_session_id = 0;
	strcpy( c_xchng_cd, argv[2] );
	strcpy(c_trd_dt, argv[4] );
	strcpy(c_eba_mtch_act_no , argv[5] );/*Front end will send 0 if it has to go for all */
  c_brkr_cmpt_flg=argv[6][0];  /* Ver 1.6 */ 

	if(strcmp(c_eba_mtch_act_no , "0") != 0)
	{
		c_rqst_typ = UPLD_FOR_MTCH_ACCNT	;
	}
	else
	{
		c_rqst_typ = MTCH_UPLD_FOR_XCHNG ;
	}

  fn_userlog(c_ServiceName,"c_xchng_cd :%s:",c_xchng_cd);
  fn_userlog(c_ServiceName,"c_brkr_cmpt_flg = %c ",c_brkr_cmpt_flg);
  /*** For Service routing ***/
   fn_init_ddr_pop("NA", "NA", "NA");

	sprintf ( c_msg, "Batch process %s started", argv[0] );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	strcpy ( c_msg, "Creating data. Please wait ... " );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

	if ( strcmp(c_xchng_cd,"NFO") == 0 )			/***	Ver	1.8	***/
	{
		strcpy(c_Exchng_cd,"NSE");
	}
	else if ( strcmp(c_xchng_cd,"BFO") == 0 )
	{
		strcpy(c_Exchng_cd,"BSE");
	}

	/**Ver 1.2 starts **/
	/** Ver 3.0 Option Pricing Check ***/

	EXEC SQL
		Select count(ftd_clm_mtch_accnt)
		Into   :i_opm_trd_cnt
		from   ftd_fo_trd_dtls,clm_clnt_mstr
		where  ftd_clm_mtch_accnt= clm_mtch_accnt 
		and     trunc(ftd_trd_dt)=to_date(:c_trd_dt,'dd-Mon-yyyy')
		/*and    (clm_brkr_cmpt_flg='N' or clm_igain_fp_flg='Y' or clm_igain_op_flg='Y' or clm_bullet_schm_flg='Y') 		*** ver 3.3 comment **/
		and    ftd_xchng_cd = :c_xchng_cd
		and    nvl(ftd_brkg_type,'N') <> 'N';

	if(SQLCODE != 0 )
	{
		fn_errlog(c_ServiceName,"S31005",SQLMSG,c_err_msg);
    strcpy ( c_msg, "Unable to get OPM/IGAIN/Bullet Trade count.");
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		return;
	}
	fn_userlog(c_ServiceName,"OPM/OP20/IGAIN/Bullet Trade count is :%d:",i_opm_trd_cnt);
	if(i_opm_trd_cnt == 0 && strcmp(c_xchng_cd,"BFO") !=0) 
	{
		fn_errlog(c_ServiceName,"S31010","OPM Pricing not run for the day",c_err_msg);
    strcpy ( c_msg, "Unable to get OPM/IGAIN/Bullet Trade count.Pls Run OPM Pricing before passtrade.");   
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		return;
	}

	/** Ver 3.0 Ends **/
	
	/*** Ver 1.8 start ***/
	i_trans=fn_begintran(c_ServiceName,c_err_msg);
	if(i_trans == -1)
	{
		fn_errlog(c_ServiceName,"S31015",LIBMSG,c_err_msg);
		fn_userlog(c_ServiceName,"Couldn't start transaction");
		return ;
	}

	EXEC SQL
		DELETE FROM TMP_MTCH_UPLD WHERE TMP_XCHNG_CD = :c_xchng_cd;

	if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND)
	{
		fn_errlog(c_ServiceName,"S31020",LIBMSG,c_err_msg);
		fn_aborttran(c_ServiceName,i_trans,c_err_msg); /** ver 3.2 **/
    strcpy ( c_msg, "Could Not delete from tmp table" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
		return;
	}

  /*** Ver 2.7 Starts Here ***/
  if( strcmp(c_xchng_cd,"NFO") == 0 )
  {
    EXEC SQL
       EXECUTE
         BEGIN
            reset_sequence( 'NFO_TRD_UPLD_SEQ');
         END;
       END-EXEC;

   if ( SQLCODE != 0 )
   {
     fn_errlog(c_ServiceName,"S31025",SQLMSG,c_err_msg);
		 fn_aborttran(c_ServiceName,i_trans,c_err_msg);		/** ver 3.2 **/
     strcpy ( c_msg, "Could Not delete from tmp table" );
     fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
     return;
   }
  }
  else if( strcmp(c_xchng_cd,"BFO") == 0 )
  {
    EXEC SQL
       EXECUTE
         BEGIN
            reset_sequence( 'BFO_TRD_UPLD_SEQ');
         END;
       END-EXEC;

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName,"S31030",SQLMSG,c_err_msg);
		  fn_aborttran(c_ServiceName,i_trans,c_err_msg);		/** ver 3.2 **/
      strcpy ( c_msg, "Could Not delete from tmp table" );
      fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
      return;
    }
  }
  
  /*** Ver 2.7 Ends here ***/

	if( fn_committran(c_ServiceName,i_trans,c_err_msg)== -1 )
	{
		fn_aborttran(c_ServiceName,i_trans,c_err_msg);
		fn_errlog(c_ServiceName,"S31035",LIBMSG,c_err_msg);
		fn_userlog(c_ServiceName,"Error in commiting trans");
		return ;
	}
	/*** Ver 1.8 end ***/


	/***	Ver	1.7	Starts	***/
 	memset ( c_member_cd, 0, sizeof ( c_member_cd ) );

  EXEC SQL
    SELECT ltrim(rtrim(EXG_BRKR_ID))
    INTO   :c_member_cd
    FROM   EXG_XCHNG_MSTR
    WHERE  EXG_XCHNG_CD = :c_xchng_cd;  /*** Ver 1.8 ***/

  if( SQLCODE != 0 )
  {
		fn_errlog(c_ServiceName,"S31040",LIBMSG,c_err_msg);
    strcpy ( c_msg, "Error while selecting member code" );
    fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
    return;
  }
  c_member_cd[strlen(c_member_cd)] = '\0';

  fn_userlog(c_ServiceName,"c_member_cd :%s:",c_member_cd);

	l_bufferlength = Fneeded32(1, sizeof(tradearray));

	ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,l_bufferlength);		

	if(ptr_fml_Sbuffer == NULL )
	{
		errlog(c_ServiceName, "S31045", TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
		strcpy(c_event, "Match Update:Unable to Allocate Send Memory ..");
		fn_bat_pst_msg ( c_ServiceName, c_event, c_tag );
		tpclose ( );
		tpterm ( );
		return;
	}

	ptr_fml_Rbuffer = (FBFR32 *)tpalloc("FML32" ,NULL ,MIN_FML_BUF_LEN);
	if(ptr_fml_Rbuffer == NULL )
	{
		errlog(c_ServiceName, "S31050", TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
		strcpy(c_event, "Match Update:Unable to Allocate Receive Memory ..");
		fn_bat_pst_msg ( c_ServiceName, c_event, c_tag );
		tpfree ( ( char * ) ptr_fml_Sbuffer );
		tpclose ( );
		tpterm ( );
		return;
	}
	/***	Ver	1.7	Ends	***/

	/*i_trans=fn_begintran(c_ServiceName,c_err_msg); ** Ver 3.2 comment **/
	i_trans=tpbegin(TRAN_TIME,0); 		/** ver 3.2 **/
	if(i_trans == -1)
	{
		fn_errlog(c_ServiceName,"S31055",LIBMSG,c_err_msg);
		fn_userlog(c_ServiceName,"Couldn't start transaction");
		return ;
	}

 /****** The value of  c_brkr_cmpt_flg= 'Y'  indicates that, brokerage and other charges are to be computed in
   CLASS and downloaded into EBA after Contract Note generation in CLASS. ************/ 


 if( c_brkr_cmpt_flg == 'Y') /* Ver 1.6 */
 {

	if(c_rqst_typ == MTCH_UPLD_FOR_XCHNG)
	{
		EXEC SQL
		INSERT INTO TMP_MTCH_UPLD
		(TMP_XCHNG_CD,
		TMP_ORDR_RFRNC,
		TMP_ORD_ACK_NMBR,
		TMP_XCHNG_TRD_NO,
		TMP_EBA_TRD_REF,
		TMP_PRDCT_TYP,
		TMP_INDSTK,
		TMP_UNDRLYNG,
		TMP_EXPRY_DT,
		TMP_OPT_TYP,
		TMP_EXER_TYP,
		TMP_STRK_PRC,
		TMP_TRD_FLW,
		TMP_FRESH_QTY,
		TMP_EXCTD_RT,
		TMP_CLM_MTCH_ACCNT,
		TMP_FRS_BRKG,
		TMP_CVR_BRKG,
		TMP_COVER_QTY,
		TMP_TRD_DT,
		TMP_TRNSCTN_TYP,
		TMP_SETTLOR,
		TMP_PRO_CLI_IND,
		TMP_ACK_TIME,
		TMP_UPLD_MTCH_FLG,
		TMP_MEMBER_CD,			/*** Ver 1.7 ***/ 
		TMP_SEM_MAP_VL,			/*** Ver 1.7 ***/
		TMP_TRD_ROWID,     	/*** Ver 1.7 ***/
		TMP_TOKEN_NO, 			/*** Ver 1.8 ***/
    TMP_SQ_FLG,         /*** Ver 2.3 ***/
    TMP_SEQ_NO)         /*** Ver 2.7 ***/
		(	SELECT FTD.FTD_XCHNG_CD,
               FTD.FTD_ORDR_RFRNC,
               FTD.FTD_ORD_ACK_NMBR,
               FTD.FTD_XCHNG_TRD_NO,
               FTD.FTD_EBA_TRD_REF,
               decode( FTD.FTD_PRDCT_TYP, 'P', 'F', 'U', 'F','I','O', FTD.FTD_PRDCT_TYP),					/* Ver 1.5 */	/*** Ver 2.0 Product type 'U' handled ***/ /*** Ver 2.1 Product type 'I' handled ***/
               FTD.FTD_INDSTK,
               NVL( FTD.FTD_UNDRLYNG,'*'),
               FTD.FTD_EXPRY_DT,
               NVL( FTD.FTD_OPT_TYP,'*'),
               NVL( FTD.FTD_EXER_TYP,'*'),
               NVL( FTD.FTD_STRK_PRC,0),
               NVL( FTD.FTD_TRD_FLW,'*'),
               NVL( FTD.FTD_FRESH_QTY,0),
               NVL( FTD.FTD_EXCTD_RT,0),
               NVL( FTD.FTD_CLM_MTCH_ACCNT,'*'),
               NVL( FTD.FTD_FRS_BRKG,0),
               NVL( FTD.FTD_CVR_BRKG,0),
               NVL(FTD.FTD_COVER_QTY,0),
							 FTD.FTD_TRD_DT,
               NVL(FTD.FTD_TRNSCTN_TYP,'F'),
               NVL(FOD.FOD_SETTLOR,0),
               NVL(FOD.FOD_PRO_CLI_IND,0) ,
               FXB_ACK_TM,		
							 'N',
							 :c_member_cd,							/*** Ver 1.7 ***/
							 decode(TRIM(SEM_MAP_VL),'MSX','1',TRIM(SEM_MAP_VL)),					/*** Ver 1.7 ***/			/***	Ver 1.8 Decode Added For MSXSEN In BSE	***/
							 FTD.ROWID,									/*** Ver 1.7 ***/
			/***		 FCM.FCM_TOKEN_NO,					*** Ver 1.8 *** Commented in Ver 2.9 ***/
               FTQ.FTQ_TOKEN_NO,          /*** Added in Ver 2.9 ***/ 
               decode(NVL(FOD.FOD_SPL_FLAG,'N'),'M','Y','L','Y','N'),        /*** Ver 2.3 ***/
               decode(:c_xchng_cd,'NFO',NFO_TRD_UPLD_SEQ.NEXTVAL,'BFO',BFO_TRD_UPLD_SEQ.NEXTVAL)   /** Ver 2.7 **/
			FROM   FTD_FO_TRD_DTLS FTD, FOD_FO_ORDR_DTLS FOD ,FXB_FO_XCHNG_BOOK FXB /**,CLM_CLNT_MSTR CLM ** Ver 2.6 **//* Ver 1.6 */ ,SEM_STCK_MAP	SEM,	/*** Ver 1.7 ***/ 
		  /***	 FCM_FO_CNTRCT_MSTR FCM	*** Ver 1.8 *** commented in Ver 2.9 ***/
             FTQ_FO_TRD_QT FTQ  		/*** Added in Ver 2.9 ***/ 
			WHERE  FTD.FTD_ORDR_RFRNC = FXB.FXB_ORDR_RFRNC
			AND    FTD.FTD_ORDR_RFRNC = FOD.FOD_ORDR_RFRNC
			AND    FTD. FTD_XCHNG_CD = :c_xchng_cd								/*** Ver 1.8 ***/ 
      /** AND    FTD.FTD_CLM_MTCH_ACCNT = CLM.CLM_MTCH_ACCNT  ** Ver 2.6 **/  /* Ver 1.6 */
     /* AND    CLM.CLM_BRKR_CMPT_FLG = 'Y'                    * Ver 1.6 */ /** Ver 1.9 comment*/
      /*AND    CLM.CLM_BRKR_CMPT_FLG in ('Z','Y')              * Ver 1.9 Z is equivalent to Y *//* Ver 2.5 comment */
			/** AND    FTD.FTD_TRD_DT >= to_date(:c_trd_dt,'dd-Mon-yyyy') ** Ver 2.6 **/
			AND    trunc(FTD.FTD_TRD_DT) = to_date(:c_trd_dt,'dd-Mon-yyyy')  /** Ver 2.6 **/
			AND   (FXB.FXB_MDFCTN_CNTR, fxb.fxb_ack_tm) = (SELECT max(FXB_MDFCTN_CNTR), f1.FXB_ACK_TM
																	FROM   FXB_FO_XCHNG_BOOK f1
																	WHERE  f1.FXB_ORDR_RFRNC = FTD.FTD_ORDR_RFRNC
																	AND    f1.FXB_PLCD_STTS  in ('A','T')
																	and    f1.FXB_ACK_TM = ( SELECT max(FXB_ACK_TM)
																													FROM   FXB_FO_XCHNG_BOOK f2
																													WHERE  f2.FXB_ORDR_RFRNC =  FTD.FTD_ORDR_RFRNC
																													AND    f2.FXB_PLCD_STTS  in ('A','T')
																													AND    f2.FXB_ACK_TM <=(FTD.FTD_TRD_DT+1/(60*60*24)))
																													group by f1.FXB_ACK_TM)
			AND		 SEM.SEM_STCK_CD	= FTD.FTD_UNDRLYNG					/*** Ver 1.7 ***/
			/*** AND    SEM.SEM_ENTTY		= 3											*** Ver 1.7 ***   Commented for ver 1.8 ***/
			AND    SEM.SEM_ENTTY		= decode( :c_xchng_cd, 'NFO', 3, 'BFO', 13 )			/*** Ver 1.8 ***/		
 /**  Commented in Ver 2.9 ***	
			AND    FCM.FCM_XCHNG_CD = :c_xchng_cd						*** Ver 1.8 ***		
			AND    FCM.FCM_PRDCT_TYP = decode( FTD.FTD_PRDCT_TYP, 'P', 'F', 'U', 'F','I','O', FTD.FTD_PRDCT_TYP)     *** Ver 1.8 ***	 *** Ver 2.0 Product type 'U' handled ***	*** Ver 2.1 Product type 'I' handled ***
			AND    FCM.FCM_INDSTK = FTD.FTD_INDSTK					*** Ver 1.8 ***		
			AND    FCM.FCM_UNDRLYNG =  FTD.FTD_UNDRLYNG			*** Ver 1.8 ***		
			AND    FCM.FCM_EXPRY_DT = FTD.FTD_EXPRY_DT			*** Ver 1.8 ***	
			AND    FCM.FCM_EXER_TYP = FTD.FTD_EXER_TYP			*** Ver 1.8 ***		
			AND    FCM.FCM_OPT_TYP = FTD.FTD_OPT_TYP				*** Ver 1.8 ***		
			AND    FCM.FCM_STRK_PRC = FTD.FTD_STRK_PRC			*** Ver 1.8 ***
 
	 ** Ver 2.9 Comment Ends ***/

  /*** Ver 2.9 Starts ***/

      AND    FTQ.FTQ_XCHNG_CD = :c_xchng_cd
      AND    FTQ.FTQ_PRDCT_TYP = decode( FTD.FTD_PRDCT_TYP, 'P', 'F', 'U', 'F','I','O', FTD.FTD_PRDCT_TYP)
      AND    FTQ.FTQ_INDSTK = FTD.FTD_INDSTK
      AND    FTQ.FTQ_UNDRLYNG =  FTD.FTD_UNDRLYNG
      AND    FTQ.FTQ_EXPRY_DT = FTD.FTD_EXPRY_DT
      AND    FTQ.FTQ_EXER_TYP = FTD.FTD_EXER_TYP
      AND    FTQ.FTQ_OPT_TYP = FTD.FTD_OPT_TYP
      AND    FTQ.FTQ_STRK_PRC = FTD.FTD_STRK_PRC

  /*** Ver 2.9 Ends ***/
		
			AND    FTD. FTD_UPLD_MTCH_FLG = 'N'
      /*** Ver 2.6 Starts Here ******************
			AND    ftd_ordr_rfrnc not in 
											 (   select  distinct OBC_ORDR_RFRNC
                            from    OBC_OPTION_BRKR_CMPT_SMRY
                            where   trunc(OBC_TRD_TIME)= :c_trd_dt
                            ** Ver 2.6 and     OBC_XCHNG_CD = FTD.FTD_XCHNG_CD
                            and     OBC_CLM_MTCH_ACCNT = FTD.FTD_CLM_MTCH_ACCNT **
                          UNION
                            select  distinct IOD_ORDR_RFRNC
                            from    IOD_IGAIN_ORDR_DTLS
                            where 	 trunc(IOD_ORDR_DT)= :c_trd_dt
														** Ver 2.6 and   IOD_XCHNG_CD=FTD.FTD_XCHNG_CD
                            and     IOD_CLM_MTCH_ACCNT = FTD.FTD_CLM_MTCH_ACCNT **
                        )                             *** Ver 2.5 ***
      ************** Ver 2.6 Ends Here *********/
      /*** Ver 2.6 Starts here ***/
			/*** Commented for Ver 2.8 *******
      AND    ftd_ordr_rfrnc not in
                       (   select  distinct OBC_ORDR_RFRNC
                            from    OBC_OPTION_BRKR_CMPT_SMRY
                            where   trunc(OBC_TRD_TIME)= :c_trd_dt
                            and     OBC_XCHNG_CD = FTD.FTD_XCHNG_CD
                            and     OBC_CLM_MTCH_ACCNT = FTD.FTD_CLM_MTCH_ACCNT
                        )
      AND    ftd_ordr_rfrnc not in
                       (   select  distinct IOD_ORDR_RFRNC
                            from    IOD_IGAIN_ORDR_DTLS
                            where    trunc(IOD_ORDR_DT)= :c_trd_dt
                            and   IOD_XCHNG_CD=FTD.FTD_XCHNG_CD
                            and     IOD_CLM_MTCH_ACCNT = FTD.FTD_CLM_MTCH_ACCNT
                       )
			******* Ver 2.8 ******/
			AND		NVL(FTD_BRKG_TYPE,'N') = 'N'		/*** Ver 2.8 ***/
      /*** Ver 2.6 Ends Here ***/ 
		 ); 
	}
	else if(c_rqst_typ == UPLD_FOR_MTCH_ACCNT)
	{

		EXEC SQL
		INSERT INTO TMP_MTCH_UPLD
		(TMP_XCHNG_CD,
		TMP_ORDR_RFRNC,
		TMP_ORD_ACK_NMBR,
		TMP_XCHNG_TRD_NO,
		TMP_EBA_TRD_REF,
		TMP_PRDCT_TYP,
		TMP_INDSTK,
		TMP_UNDRLYNG,
		TMP_EXPRY_DT,
		TMP_OPT_TYP,
		TMP_EXER_TYP,
		TMP_STRK_PRC,
		TMP_TRD_FLW,
		TMP_FRESH_QTY,
		TMP_EXCTD_RT,
		TMP_CLM_MTCH_ACCNT,
		TMP_FRS_BRKG,
		TMP_CVR_BRKG,
		TMP_COVER_QTY,
		TMP_TRD_DT,
		TMP_TRNSCTN_TYP,
		TMP_SETTLOR,
		TMP_PRO_CLI_IND,
		TMP_ACK_TIME,
		TMP_UPLD_MTCH_FLG,
		TMP_MEMBER_CD,			/*** Ver 1.7 ***/ 
		TMP_SEM_MAP_VL,			/*** Ver 1.7 ***/
		TMP_TRD_ROWID,     	/*** Ver 1.7 ***/
		TMP_TOKEN_NO,				/*** Ver 1.8 ***/
    TMP_SQ_FLG,          /*** Ver 2.3 ***/
    TMP_SEQ_NO)         /*** Ver 2.7 ***/
		(	SELECT FTD.FTD_XCHNG_CD,
               FTD.FTD_ORDR_RFRNC,
               FTD.FTD_ORD_ACK_NMBR,
               FTD.FTD_XCHNG_TRD_NO,
               FTD.FTD_EBA_TRD_REF,
               decode( FTD.FTD_PRDCT_TYP, 'P', 'F', 'U', 'F','I','O', FTD.FTD_PRDCT_TYP),						/* Ver 1.5 */ /*** Ver 2.0 Product type 'U' handled ***/ /*** Ver 2.1 Product type 'I' handled ***/
               FTD.FTD_INDSTK,
               NVL(FTD.FTD_UNDRLYNG,'*'),
               FTD.FTD_EXPRY_DT,
               NVL(FTD.FTD_OPT_TYP,'*'),
               NVL(FTD.FTD_EXER_TYP,'*'),
               NVL(FTD.FTD_STRK_PRC,0),
               NVL(FTD.FTD_TRD_FLW,'*'),
               NVL(FTD.FTD_FRESH_QTY,0),
               NVL(FTD.FTD_EXCTD_RT,0),
               NVL(FTD.FTD_CLM_MTCH_ACCNT,'*'),
               NVL(FTD.FTD_FRS_BRKG,0), 
               NVL(FTD.FTD_CVR_BRKG,0),
               NVL(FTD.FTD_COVER_QTY,0),
							 FTD.FTD_TRD_DT,
               NVL(FTD.FTD_TRNSCTN_TYP,'F'),
               NVL(FOD.FOD_SETTLOR,0),
               NVL(FOD.FOD_PRO_CLI_IND,0) ,
               FXB_ACK_TM,	
							'N',
							 :c_member_cd,							/*** Ver 1.7 ***/
               decode(TRIM(SEM_MAP_VL),'MSX','1',TRIM(SEM_MAP_VL)),          /*** Ver 1.7 ***/     /***  Ver 1.8 Decode Added For MSXSEN In BSE  ***/
							 FTD.ROWID,									/*** Ver 1.7 ***/
 				/***	 FCM.FCM_TOKEN_NO,					 *** Ver 1.8 *** Commneted in Ver 2.9 ***/
               FTQ.FTQ_TOKEN_NO,          /*** Added in Ver 2.9 ***/
               decode(NVL(FOD.FOD_SPL_FLAG,'N'),'M','Y','L','Y','N'), /*** Ver 2.3 ***/
               decode(:c_xchng_cd,'NFO',NFO_TRD_UPLD_SEQ.NEXTVAL,'BFO',BFO_TRD_UPLD_SEQ.NEXTVAL)   /** Ver 2.7 **/
			FROM   FTD_FO_TRD_DTLS FTD, FOD_FO_ORDR_DTLS FOD ,FXB_FO_XCHNG_BOOK FXB, CLM_CLNT_MSTR CLM, SEM_STCK_MAP SEM,	/*** Ver 1.7 ***/
			/***	 FCM_FO_CNTRCT_MSTR FCM	 *** Ver 1.8 *** Commented in Ver 2.9 ***/
             FTQ_FO_TRD_QT FTQ  /*** Added in Ver 2.9 ***/
			WHERE  FTD.FTD_CLM_MTCH_ACCNT = :c_eba_mtch_act_no
			AND    FTD.FTD_ORDR_RFRNC = FXB.FXB_ORDR_RFRNC
			AND    FTD.FTD_ORDR_RFRNC = FOD.FOD_ORDR_RFRNC
       AND    FTD.FTD_CLM_MTCH_ACCNT = CLM.CLM_MTCH_ACCNT    /* Ver 1.6 */
      /** AND    CLM.CLM_BRKR_CMPT_FLG = 'Y'                     Ver 1.6 commented in Ver 1.9*/
      /*AND    CLM.CLM_BRKR_CMPT_FLG in ('Z','Y')              * Ver 1.9 Z is equivalent to Y */ /* Ver 2.5 comment **/
			AND    FTD. FTD_XCHNG_CD = :c_xchng_cd								/*** Ver 1.8 ***/ 
			AND    FTD.FTD_TRD_DT >= to_date(:c_trd_dt,'dd-Mon-yyyy')
			AND   (FXB.FXB_MDFCTN_CNTR, fxb.fxb_ack_tm) = (SELECT max(FXB_MDFCTN_CNTR), f1.FXB_ACK_TM
																	FROM   FXB_FO_XCHNG_BOOK f1
																	WHERE  f1.FXB_ORDR_RFRNC = FTD.FTD_ORDR_RFRNC
																	AND    f1.FXB_PLCD_STTS  in ('A','T')
																	and    f1.FXB_ACK_TM = ( SELECT max(FXB_ACK_TM)
																													FROM   FXB_FO_XCHNG_BOOK f2
																													WHERE  f2.FXB_ORDR_RFRNC =  FTD.FTD_ORDR_RFRNC
																													AND    f2.FXB_PLCD_STTS  in ('A','T')
																													AND    f2.FXB_ACK_TM <=(FTD.FTD_TRD_DT+1/(60*60*24)))
																													group by f1.FXB_ACK_TM)
			AND		 SEM.SEM_STCK_CD	= FTD.FTD_UNDRLYNG					/*** Ver 1.7 ***/
			/*** AND    SEM.SEM_ENTTY		= 3											*** Ver 1.7 ***   Commented for ver 1.8 ***/
			AND    SEM.SEM_ENTTY		= decode( :c_xchng_cd, 'NFO', 3, 'BFO', 13 )			/*** Ver 1.8 ***/	
      /*** Commented in Ver 2.9 ***	
			AND    FCM.FCM_XCHNG_CD = :c_xchng_cd						*** Ver 1.8 ***		
			AND    FCM.FCM_PRDCT_TYP = decode( FTD.FTD_PRDCT_TYP, 'P', 'F', 'U', 'F','I','O', FTD.FTD_PRDCT_TYP)  *** Ver 1.8 ***		 *** Ver 2.0 Product type 'U' handled *** *** Ver 2.1 Product type 'I' handled ***
			AND    FCM.FCM_INDSTK = FTD.FTD_INDSTK					*** Ver 1.8 ***		
			AND    FCM.FCM_UNDRLYNG =  FTD.FTD_UNDRLYNG			*** Ver 1.8 ***		
			AND    FCM.FCM_EXPRY_DT = FTD.FTD_EXPRY_DT			*** Ver 1.8 ***		
			AND    FCM.FCM_EXER_TYP = FTD.FTD_EXER_TYP			*** Ver 1.8 ***		
			AND    FCM.FCM_OPT_TYP = FTD.FTD_OPT_TYP				*** Ver 1.8 ***		
			AND    FCM.FCM_STRK_PRC = FTD.FTD_STRK_PRC			*** Ver 1.8 ***
      *** Ver 2.9 Comment Ends ***/

      /*** Ver 2.9 Starts ***/

      AND    FTQ.FTQ_XCHNG_CD = :c_xchng_cd
      AND    FTQ.FTQ_PRDCT_TYP = decode( FTD.FTD_PRDCT_TYP, 'P', 'F', 'U', 'F','I','O', FTD.FTD_PRDCT_TYP)
      AND    FTQ.FTQ_INDSTK = FTD.FTD_INDSTK
      AND    FTQ.FTQ_UNDRLYNG =  FTD.FTD_UNDRLYNG
      AND    FTQ.FTQ_EXPRY_DT = FTD.FTD_EXPRY_DT
      AND    FTQ.FTQ_EXER_TYP = FTD.FTD_EXER_TYP
      AND    FTQ.FTQ_OPT_TYP = FTD.FTD_OPT_TYP
      AND    FTQ.FTQ_STRK_PRC = FTD.FTD_STRK_PRC

      /*** Ver 2.9 Ends ***/
	
			AND    FTD. FTD_UPLD_MTCH_FLG = 'N'
			/*** Commented for Ver 2.8 ***
			AND    ftd_ordr_rfrnc not in 
												(   select  distinct OBC_ORDR_RFRNC
                            from    OBC_OPTION_BRKR_CMPT_SMRY
                            where   trunc(OBC_TRD_TIME)= :c_trd_dt
                            ** Ver 2.6 and     OBC_XCHNG_CD = FTD.FTD_XCHNG_CD
                            and     OBC_CLM_MTCH_ACCNT = FTD.FTD_CLM_MTCH_ACCNT **
                          UNION
                            select  distinct IOD_ORDR_RFRNC
                            from    IOD_IGAIN_ORDR_DTLS
                            where    trunc(IOD_ORDR_DT)= :c_trd_dt
														*** Ver 2.6 and IOD_XCHNG_CD=FTD.FTD_XCHNG_CD
                            and     IOD_CLM_MTCH_ACCNT = FTD.FTD_CLM_MTCH_ACCNT **
                        )                             *** Ver 2.5 ***
			****** Ver 2.8 ******/
			AND		NVL(FTD_BRKG_TYPE,'N') = 'N'				/*** Added for Ver 2.8 ***/
		);

	}

	if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND)
	{
		fn_errlog(c_ServiceName,"S31060",SQLMSG,c_err_msg);
		fn_aborttran(c_ServiceName,i_trans,c_err_msg);
		return;
	}
	
	if(SQLCODE == NO_DATA_FOUND)
	{	
		fn_userlog(c_ServiceName,"No Data to be Uploaded");
		tpabort ( 0 );	/** ver 3.2 **/
		/*fn_aborttran(c_ServiceName,i_trans,c_err_msg); ** Ver 3.2 comment**/
		return;
	}
	li_tot_rcrds=sqlca.sqlerrd[2];
		
	/*if( fn_committran(c_ServiceName,i_trans,c_err_msg)== -1 ) ** Ver 3.2 comment **/
	if( tpcommit(0) == -1 ) /** Ver 3.2 **/
	{
		tpabort ( 0 );					/** ver 3.2 **/
		/*fn_aborttran(c_ServiceName,i_trans,c_err_msg); ** Ver 3.2 comment */
		fn_errlog(c_ServiceName,"S31065",LIBMSG,c_err_msg);
		fn_userlog(c_ServiceName,"Error in commiting trans");
		return ;
	}

	/*** Ver 1.2 Ends ***/
	if(DEBUG_MSG_LVL_3)					/* ver 1.4 */
	{
		fn_userlog(c_ServiceName,"c_xchng_cd :%s:",c_xchng_cd);
		fn_userlog(c_ServiceName,"c_trd_dt :%s:",c_trd_dt);
		fn_userlog(c_ServiceName,"c_rqst_typ :%c:",c_rqst_typ);
		fn_userlog(c_ServiceName,"c_eba_mtch_act_no :%s:",c_eba_mtch_act_no);
	}

  /** Ver 2.7 ***
	strcpy ( c_msg, "Data created." );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  sprintf ( c_msg, "Total records = %ld", li_tot_rcrds );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  *** Ver 2.7 **/
 }
 else if( c_brkr_cmpt_flg ==  'N')   /* Ver 1.6 */
 {

 
 /*********** The value of  brkr_cmpt_flg 'N'  indicates that, Brokerage for only Options trades shall be computed
     in EBA as per the new Options Pricing Model and other charges are computed in CLASS. *******/

 
 	if(c_rqst_typ == MTCH_UPLD_FOR_XCHNG)
	{


    EXEC SQL
       SELECT COUNT(1) 
			 INTO :i_opm_cnt
			 FROM FTD_FO_TRD_DTLS 
			 WHERE FTD_XCHNG_CD = :c_xchng_cd				/*** Ver 1.8 ***/
			 /** AND   FTD_PRDCT_TYP ='O'            Commented in Ver 2.2 ***/
       /*AND   FTD_PRDCT_TYP in ('O','I','U')       *** Ver 2.2 ***** Ver 2.5 'U' Added **/ /** Ver 3.4 **/
			 AND   FTD_BRKG IS NULL 
			 AND   trunc(FTD_TRD_DT) = to_date(:c_trd_dt,'dd-Mon-yyyy') /** Added for house keep skip issue **/
			 AND		NVL(FTD_BRKG_TYPE,'N') <> 'N';				/*** Added for Ver 2.8 ***/
			 /*** Commented for Ver 2.8 ******
			 AND    ftd_ordr_rfrnc in 
											 (   select  distinct OBC_ORDR_RFRNC
                            from    OBC_OPTION_BRKR_CMPT_SMRY
                            where   trunc(OBC_TRD_TIME)= :c_trd_dt
                            and     OBC_XCHNG_CD = FTD_XCHNG_CD
                            and     OBC_CLM_MTCH_ACCNT = FTD_CLM_MTCH_ACCNT
                          UNION
                            select  distinct IOD_ORDR_RFRNC
                            from    IOD_IGAIN_ORDR_DTLS
                            where   IOD_XCHNG_CD=FTD_XCHNG_CD
                            and     trunc(IOD_ORDR_DT)= :c_trd_dt
                            and     IOD_CLM_MTCH_ACCNT = FTD_CLM_MTCH_ACCNT
                        )                             *** Ver 2.5 ***
			  AND FTD_CLM_MTCH_ACCNT IN (
																	SELECT DISTINCT 
																				 CLM_MTCH_ACCNT  
																	FROM   CLM_CLNT_MSTR 
																*WHERE  CLM_BRKR_CMPT_FLG ='N' ** Ver 2.5 comment *
      														WHERE 
																	(
																		(CLM_BRKR_CMPT_FLG='N' AND ftd_prdct_typ in('O','I'))
																															OR
						 												(nvl(CLM_IGAIN_FP_FLG,'N') = 'Y' AND ftd_prdct_typ='U')																																OR
						 												(nvl(CLM_IGAIN_OP_FLG,'N') = 'Y' AND ftd_prdct_typ='I')
						 											)							** Ver 2.5 **
																 );
						******** Ver 2.8 ******/

    if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND)
    {
     fn_errlog(c_ServiceName,"S31070",SQLMSG,c_err_msg);
		 tpabort ( 0 );					/** ver 3.2 **/
     /*fn_aborttran(c_ServiceName,i_trans,c_err_msg);  ** ver 3.2 comment **/
     return;
    }


    if(i_opm_cnt > 0)
    {
		 fn_errlog(c_ServiceName,"S31075","Option Calc Process not completed", c_err_msg);
		 tpabort ( 0 );		 /** ver 3.2 **/
     /*fn_aborttran(c_ServiceName,i_trans,c_err_msg); ** ver 3.2 comment*/
     strcpy ( c_msg, "FNO Calculate Option Brokerage process has not run yet");
     fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
     return;  
		}

 
		EXEC SQL
		INSERT INTO TMP_MTCH_UPLD
		(TMP_XCHNG_CD,
		TMP_ORDR_RFRNC,
		TMP_ORD_ACK_NMBR,
		TMP_XCHNG_TRD_NO,
		TMP_EBA_TRD_REF,
		TMP_PRDCT_TYP,
		TMP_INDSTK,
		TMP_UNDRLYNG,
		TMP_EXPRY_DT,
		TMP_OPT_TYP,
		TMP_EXER_TYP,
		TMP_STRK_PRC,
		TMP_TRD_FLW,
		TMP_FRESH_QTY,
		TMP_EXCTD_RT,
		TMP_CLM_MTCH_ACCNT,
		TMP_FRS_BRKG,
		TMP_CVR_BRKG,
		TMP_COVER_QTY,
		TMP_TRD_DT,
		TMP_TRNSCTN_TYP,
		TMP_SETTLOR,
		TMP_PRO_CLI_IND,
		TMP_ACK_TIME,
		TMP_UPLD_MTCH_FLG,
		TMP_MEMBER_CD,			/*** Ver 1.7 ***/ 
		TMP_SEM_MAP_VL,			/*** Ver 1.7 ***/
		TMP_TRD_ROWID,     	/*** Ver 1.7 ***/
		TMP_TOKEN_NO,       /*** Ver 1.8 ***/ 
    TMP_SQ_FLG ,       /*** Ver 2.3 ***/
    TMP_SEQ_NO)         /*** Ver 2.7 ***/
		(	SELECT FTD.FTD_XCHNG_CD,
               FTD.FTD_ORDR_RFRNC,
               FTD.FTD_ORD_ACK_NMBR,
               FTD.FTD_XCHNG_TRD_NO,
               FTD.FTD_EBA_TRD_REF,
               decode( FTD.FTD_PRDCT_TYP, 'P', 'F', 'U', 'F', 'I','O',FTD.FTD_PRDCT_TYP),					/* Ver 1.5 */ /*** Ver 2.0 Product type 'U' handled ***/ /*** Ver 2.1 Product type 'I' handled ***/
               FTD.FTD_INDSTK,
               NVL( FTD.FTD_UNDRLYNG,'*'),
               FTD.FTD_EXPRY_DT,
               NVL( FTD.FTD_OPT_TYP,'*'),
               NVL( FTD.FTD_EXER_TYP,'*'),
               NVL( FTD.FTD_STRK_PRC,0),
               NVL( FTD.FTD_TRD_FLW,'*'),
               NVL( FTD.FTD_FRESH_QTY,0),
               NVL( FTD.FTD_EXCTD_RT,0),
               NVL( FTD.FTD_CLM_MTCH_ACCNT,'*'),
              /** NVL( FTD.FTD_FRS_BRKG,0), ***/ /** Ver 1.6 ***/
               NVL( FTD.FTD_BRKG,0),             /** Ver 1.6 ***/
               NVL( FTD.FTD_CVR_BRKG,0),
               NVL(FTD.FTD_COVER_QTY,0),
							 FTD.FTD_TRD_DT,
               NVL(FTD.FTD_TRNSCTN_TYP,'F'),
               NVL(FOD.FOD_SETTLOR,0),
               NVL(FOD.FOD_PRO_CLI_IND,0) ,
               FXB_ACK_TM,		
							 'N',
							 :c_member_cd,							/*** Ver 1.7 ***/
               decode(TRIM(SEM_MAP_VL),'MSX','1',TRIM(SEM_MAP_VL)),          /*** Ver 1.7 ***/     /***  Ver 1.8 Decode Added For MSXSEN In BSE  ***/
							 FTD.ROWID,									/*** Ver 1.7 ***/
				/***	 FCM.FCM_TOKEN_NO,           *** Ver 1.8 *** Commented in Ver 2.9 ***/
               FTQ.FTQ_TOKEN_NO,           /*** Added Ver 2.9 ***/
               decode(NVL(FOD.FOD_SPL_FLAG,'N'),'M','Y','L','Y','N'), /*** Ver 2.3 ***/
               decode(:c_xchng_cd,'NFO',NFO_TRD_UPLD_SEQ.NEXTVAL,'BFO',BFO_TRD_UPLD_SEQ.NEXTVAL)   /** Ver 2.7 **/
			FROM   FTD_FO_TRD_DTLS FTD, FOD_FO_ORDR_DTLS FOD ,FXB_FO_XCHNG_BOOK FXB, CLM_CLNT_MSTR CLM, SEM_STCK_MAP	SEM, /*** Ver 1.7 ***/
			/***	 FCM_FO_CNTRCT_MSTR FCM  *** Ver 1.8 *** Commented in Ver 2.9 ***/
             FTQ_FO_TRD_QT FTQ   /*** Added in Ver 2.9  ***/
			WHERE  FTD.FTD_ORDR_RFRNC = FXB.FXB_ORDR_RFRNC
			AND    FTD.FTD_ORDR_RFRNC = FOD.FOD_ORDR_RFRNC
      AND    FTD.FTD_CLM_MTCH_ACCNT = CLM.CLM_MTCH_ACCNT    /* Ver 1.6 */
     /* AND    CLM.CLM_BRKR_CMPT_FLG = 'N'                    /* Ver 1.6 *//** Ver 2.5 Comment **/
      /* AND    FTD.FTD_PRDCT_TYP ='O'                        * Ver 1.6 * Commented in Ver 2.2 ***/
      /*AND    FTD.FTD_PRDCT_TYP in ('O','I','U')               *** Ver 2.2 **** Ver 2.5 U Added */ /** Ver 2.6 **/
			AND    FTD. FTD_XCHNG_CD = :c_xchng_cd								/*** Ver 1.8 ***/
			AND    FTD.FTD_TRD_DT >= to_date(:c_trd_dt,'dd-Mon-yyyy')
			AND   (FXB.FXB_MDFCTN_CNTR, fxb.fxb_ack_tm) = (SELECT max(FXB_MDFCTN_CNTR), f1.FXB_ACK_TM
																	FROM   FXB_FO_XCHNG_BOOK f1
																	WHERE  f1.FXB_ORDR_RFRNC = FTD.FTD_ORDR_RFRNC
																	AND    f1.FXB_PLCD_STTS  in ('A','T')
																	and    f1.FXB_ACK_TM = ( SELECT max(FXB_ACK_TM)
																													FROM   FXB_FO_XCHNG_BOOK f2
																													WHERE  f2.FXB_ORDR_RFRNC =  FTD.FTD_ORDR_RFRNC
																													AND    f2.FXB_PLCD_STTS  in ('A','T')
																													AND    f2.FXB_ACK_TM <=(FTD.FTD_TRD_DT+1/(60*60*24)))
																													group by f1.FXB_ACK_TM)
			AND		 SEM.SEM_STCK_CD	= FTD.FTD_UNDRLYNG					/*** Ver 1.7 ***/
			/*** AND    SEM.SEM_ENTTY		= 3											*** Ver 1.7 ***   Commented for ver 1.8 ***/
			AND    SEM.SEM_ENTTY		= decode( :c_xchng_cd, 'NFO', 3, 'BFO', 13 )			/*** Ver 1.8 ***/			
      /*** Commented in Ver 2.9 ***	
			AND    FCM.FCM_XCHNG_CD = :c_xchng_cd           *** Ver 1.8 ***
      AND    FCM.FCM_PRDCT_TYP = decode( FTD.FTD_PRDCT_TYP, 'P', 'F', 'U', 'F', 'I','O', FTD.FTD_PRDCT_TYP)	*** Ver 1.8 *** *** Ver 2.0 Product type 'U' handled *** *** Ver 2.1 Product type 'I' handled ***
      AND    FCM.FCM_INDSTK = FTD.FTD_INDSTK          *** Ver 1.8 ***
      AND    FCM.FCM_UNDRLYNG =  FTD.FTD_UNDRLYNG     *** Ver 1.8 ***
      AND    FCM.FCM_EXPRY_DT = FTD.FTD_EXPRY_DT      *** Ver 1.8 ***
      AND    FCM.FCM_EXER_TYP = FTD.FTD_EXER_TYP      *** Ver 1.8 ***
      AND    FCM.FCM_OPT_TYP = FTD.FTD_OPT_TYP        *** Ver 1.8 ***
      AND    FCM.FCM_STRK_PRC = FTD.FTD_STRK_PRC      *** Ver 1.8 ***
      *** Ver 2.9 Comment Ends ***/

      /*** Ver 2.9 Starts ***/

      AND    FTQ.FTQ_XCHNG_CD = :c_xchng_cd
      AND    FTQ.FTQ_PRDCT_TYP = decode( FTD.FTD_PRDCT_TYP, 'P', 'F', 'U', 'F', 'I','O', FTD.FTD_PRDCT_TYP)
      AND    FTQ.FTQ_INDSTK = FTD.FTD_INDSTK
      AND    FTQ.FTQ_UNDRLYNG =  FTD.FTD_UNDRLYNG
      AND    FTQ.FTQ_EXPRY_DT = FTD.FTD_EXPRY_DT
      AND    FTQ.FTQ_EXER_TYP = FTD.FTD_EXER_TYP
      AND    FTQ.FTQ_OPT_TYP = FTD.FTD_OPT_TYP
      AND    FTQ.FTQ_STRK_PRC = FTD.FTD_STRK_PRC

      /*** Ver 2.9 Ends ***/

			AND    FTD. FTD_UPLD_MTCH_FLG = 'N'
			AND		NVL(FTD_BRKG_TYPE,'N') <> 'N'				/*** Added for Ver 2.8 ***/
			/*** Commented for Ver 2.8 ***
			AND    ftd_ordr_rfrnc in 
											 (   select  distinct OBC_ORDR_RFRNC
                            from    OBC_OPTION_BRKR_CMPT_SMRY
                            where   trunc(OBC_TRD_TIME)= :c_trd_dt
                            and     OBC_XCHNG_CD = FTD.FTD_XCHNG_CD
                            and     OBC_CLM_MTCH_ACCNT = FTD.FTD_CLM_MTCH_ACCNT
                          UNION
                            select  distinct IOD_ORDR_RFRNC
                            from    IOD_IGAIN_ORDR_DTLS
                            where   IOD_XCHNG_CD=FTD.FTD_XCHNG_CD
                            and     trunc(IOD_ORDR_DT)= :c_trd_dt
                            and     IOD_CLM_MTCH_ACCNT = FTD.FTD_CLM_MTCH_ACCNT
                        )                             *** Ver 2.5 ***
			****** Ver 2.8 *****/
			);
	}
	else if(c_rqst_typ == UPLD_FOR_MTCH_ACCNT)
	{

	  EXEC SQL
       SELECT COUNT(1)
       INTO :i_opm_cnt
       FROM FTD_FO_TRD_DTLS
       WHERE FTD_XCHNG_CD = :c_xchng_cd				/*** Ver 1.8 ***/
			/** AND   FTD_PRDCT_TYP ='O' ** Commented in Ver 2.2 ***/
      /* AND   FTD_PRDCT_TYP in ('O','I','U')       *** Ver 2.2 *** ** Ver 2.5 U added */ /** Ver 3.4 **/
       AND   FTD_BRKG IS NULL
       AND  FTD_CLM_MTCH_ACCNT  = :c_eba_mtch_act_no
       AND  trunc(ftd_trd_dt) = to_date(:c_trd_dt,'dd-Mon-yyyy') /** Added for house keep skip issue **/
			 AND		NVL(FTD_BRKG_TYPE,'N') <> 'N';				/*** Added for Ver 2.8 ***/
			 /*** Commented for Ver 2.8 ****
			 AND    ftd_ordr_rfrnc in 
											 (   select  distinct OBC_ORDR_RFRNC
                            from    OBC_OPTION_BRKR_CMPT_SMRY
                            where   trunc(OBC_TRD_TIME)= :c_trd_dt
                            and     OBC_XCHNG_CD = FTD_XCHNG_CD
                            and     OBC_CLM_MTCH_ACCNT = FTD_CLM_MTCH_ACCNT
                          UNION
                            select  distinct IOD_ORDR_RFRNC
                            from    IOD_IGAIN_ORDR_DTLS
                            where   IOD_XCHNG_CD=FTD_XCHNG_CD
                            and     trunc(IOD_ORDR_DT)= :c_trd_dt
                            and     IOD_CLM_MTCH_ACCNT = FTD_CLM_MTCH_ACCNT
                        )                             *** Ver 2.5 ***
       AND FTD_CLM_MTCH_ACCNT IN ( SELECT DISTINCT 
																						CLM_MTCH_ACCNT  
																	 FROM   CLM_CLNT_MSTR 
																*	 WHERE  CLM_BRKR_CMPT_FLG ='N' ** Ver 2.5 comment **
																	WHERE
																	(
																		( CLM_BRKR_CMPT_FLG='N' AND ftd_prdct_typ in('O','I')) 
																														OR
																		( nvl(CLM_IGAIN_FP_FLG,'N') = 'Y' AND ftd_prdct_typ='U')
		      																									OR
																		( nvl(CLM_IGAIN_OP_FLG,'N') = 'Y' AND ftd_prdct_typ='I')
																	 )             ** Ver 2.5 **
																 );	
			****** Ver 2.8 *******/


    if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND)
    {
     fn_errlog(c_ServiceName,"S31080",SQLMSG,c_err_msg);
		 tpabort ( 0 ); /** ver 3.2 **/
     /*fn_aborttran(c_ServiceName,i_trans,c_err_msg); ** ver 3.2 comment */
     return;
    }

    if(i_opm_cnt > 0)
    {
     fn_errlog(c_ServiceName,"S31085","Option Calc Process not completed", c_err_msg);
		 tpabort ( 0 );				/** ver 3.2 **/    
     /*fn_aborttran(c_ServiceName,i_trans,c_err_msg); ** ver 3.2 comment */
     strcpy ( c_msg, "FNO Calculate Option Brokerage process has not run yet");
     fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
     return;
    }


		EXEC SQL
		INSERT INTO TMP_MTCH_UPLD
		(TMP_XCHNG_CD,
		TMP_ORDR_RFRNC,
		TMP_ORD_ACK_NMBR,
		TMP_XCHNG_TRD_NO,
		TMP_EBA_TRD_REF,
		TMP_PRDCT_TYP,
		TMP_INDSTK,
		TMP_UNDRLYNG,
		TMP_EXPRY_DT,
		TMP_OPT_TYP,
		TMP_EXER_TYP,
		TMP_STRK_PRC,
		TMP_TRD_FLW,
		TMP_FRESH_QTY,
		TMP_EXCTD_RT,
		TMP_CLM_MTCH_ACCNT,
		TMP_FRS_BRKG,
		TMP_CVR_BRKG,
		TMP_COVER_QTY,
		TMP_TRD_DT,
		TMP_TRNSCTN_TYP,
		TMP_SETTLOR,
		TMP_PRO_CLI_IND,
		TMP_ACK_TIME,
		TMP_UPLD_MTCH_FLG,
		TMP_MEMBER_CD,			/*** Ver 1.7 ***/ 
		TMP_SEM_MAP_VL,			/*** Ver 1.7 ***/
		TMP_TRD_ROWID,     	/*** Ver 1.7 ***/
		TMP_TOKEN_NO,       /*** Ver 1.8 ***/
    TMP_SQ_FLG,          /*** Ver 2.3 ***/
    TMP_SEQ_NO)         /*** Ver 2.7 ***/
		(	SELECT FTD.FTD_XCHNG_CD,
               FTD.FTD_ORDR_RFRNC,
               FTD.FTD_ORD_ACK_NMBR,
               FTD.FTD_XCHNG_TRD_NO,
               FTD.FTD_EBA_TRD_REF,
               decode( FTD.FTD_PRDCT_TYP, 'P', 'F', 'U', 'F', 'I','O', FTD.FTD_PRDCT_TYP),						/* Ver 1.5 */ /*** Ver 2.0 Product type 'U' handled ***/ /*** Ver 2.1 Product type 'I' handled ***/
               FTD.FTD_INDSTK,
               NVL(FTD.FTD_UNDRLYNG,'*'),
               FTD.FTD_EXPRY_DT,
               NVL(FTD.FTD_OPT_TYP,'*'),
               NVL(FTD.FTD_EXER_TYP,'*'),
               NVL(FTD.FTD_STRK_PRC,0),
               NVL(FTD.FTD_TRD_FLW,'*'),
               NVL(FTD.FTD_FRESH_QTY,0),
               NVL(FTD.FTD_EXCTD_RT,0),
               NVL(FTD.FTD_CLM_MTCH_ACCNT,'*'),
             /**  NVL(FTD.FTD_FRS_BRKG,0),  ***/ /** Ver 1.6 ***/
               NVL( FTD.FTD_BRKG,0),             /** Ver 1.6 ***/
               NVL(FTD.FTD_CVR_BRKG,0),
               NVL(FTD.FTD_COVER_QTY,0),
							 FTD.FTD_TRD_DT,
               NVL(FTD.FTD_TRNSCTN_TYP,'F'),
               NVL(FOD.FOD_SETTLOR,0),
               NVL(FOD.FOD_PRO_CLI_IND,0) ,
               FXB_ACK_TM,	
							'N',
							 :c_member_cd,							/*** Ver 1.7 ***/
               decode(TRIM(SEM_MAP_VL),'MSX','1',TRIM(SEM_MAP_VL)),          /*** Ver 1.7 ***/     /***  Ver 1.8 Decode Added For MSXSEN In BSE  ***/
							 FTD.ROWID,									/*** Ver 1.7 ***/
			/***		 FCM.FCM_TOKEN_NO,           *** Ver 1.8 *** Commented in Ver 2.9 ***/
               FTQ.FTQ_TOKEN_NO,           /*** Added in Ver 2.9 ***/
               decode(NVL(FOD.FOD_SPL_FLAG,'N'),'M','Y','L','Y','N'), /*** Ver 2.3 ***/
               decode(:c_xchng_cd,'NFO',NFO_TRD_UPLD_SEQ.NEXTVAL,'BFO',BFO_TRD_UPLD_SEQ.NEXTVAL)   /** Ver 2.7 **/
			FROM   FTD_FO_TRD_DTLS FTD, FOD_FO_ORDR_DTLS FOD ,FXB_FO_XCHNG_BOOK FXB, CLM_CLNT_MSTR CLM, SEM_STCK_MAP	SEM, /*** Ver 1.7 ***/
		 /***		 FCM_FO_CNTRCT_MSTR FCM *** Ver 1.8 *** Commented in Ver 2.9 ***/
             FTQ_FO_TRD_QT FTQ /*** Added in Ver 2.9 ***/
			WHERE  FTD.FTD_CLM_MTCH_ACCNT = :c_eba_mtch_act_no
			AND    FTD.FTD_ORDR_RFRNC = FXB.FXB_ORDR_RFRNC
			aND    FTD.FTD_ORDR_RFRNC = FOD.FOD_ORDR_RFRNC
      AND    FTD.FTD_CLM_MTCH_ACCNT = CLM.CLM_MTCH_ACCNT    /* Ver 1.6 */
      /*AND    CLM.CLM_BRKR_CMPT_FLG = 'N'                    * Ver 1.6 */ /** Ver 2.5 comment**/
      /** AND    FTD.FTD_PRDCT_TYP ='O'                         * Ver 1.6 *  Commented in Ver 2.2 ***/
      /**AND    FTD.FTD_PRDCT_TYP in ('O','I','U')             *** Ver 2.2 ***** Ver 2.5 U added*/ /** Ver 3.4 **/
			AND    FTD. FTD_XCHNG_CD = :c_xchng_cd								/*** Ver 1.8 ***/
			AND    FTD.FTD_TRD_DT >= to_date(:c_trd_dt,'dd-Mon-yyyy')
			AND   (FXB.FXB_MDFCTN_CNTR, fxb.fxb_ack_tm) = (SELECT max(FXB_MDFCTN_CNTR), f1.FXB_ACK_TM
																	FROM   FXB_FO_XCHNG_BOOK f1
																	WHERE  f1.FXB_ORDR_RFRNC = FTD.FTD_ORDR_RFRNC
																	AND    f1.FXB_PLCD_STTS  in ('A','T')
																	and    f1.FXB_ACK_TM = ( SELECT max(FXB_ACK_TM)
																													FROM   FXB_FO_XCHNG_BOOK f2
																													WHERE  f2.FXB_ORDR_RFRNC =  FTD.FTD_ORDR_RFRNC
																													AND    f2.FXB_PLCD_STTS  in ('A','T')
																													AND    f2.FXB_ACK_TM <=(FTD.FTD_TRD_DT+1/(60*60*24)))
																													group by f1.FXB_ACK_TM)
			AND		 SEM.SEM_STCK_CD	= FTD.FTD_UNDRLYNG					/*** Ver 1.7 ***/
			/*** AND    SEM.SEM_ENTTY		= 3											*** Ver 1.7 ***   Commented for ver 1.8 ***/
			AND    SEM.SEM_ENTTY		= decode( :c_xchng_cd, 'NFO', 3, 'BFO', 13 )			/*** Ver 1.8 ***/	
      /*** Commented in Ver 2.9 ***	
			AND    FCM.FCM_XCHNG_CD = :c_xchng_cd           *** Ver 1.8 ***
      AND    FCM.FCM_PRDCT_TYP = decode( FTD.FTD_PRDCT_TYP, 'P', 'F', 'U', 'F', 'I','O', FTD.FTD_PRDCT_TYP)	 *** Ver 1.8 *** *** Ver 2.0 Product type 'U' handled *** *** Ver 2.1 Product type 'I' handled ***
      AND    FCM.FCM_INDSTK = FTD.FTD_INDSTK          *** Ver 1.8 ***
      AND    FCM.FCM_UNDRLYNG =  FTD.FTD_UNDRLYNG     *** Ver 1.8 ***
      AND    FCM.FCM_EXPRY_DT = FTD.FTD_EXPRY_DT      *** Ver 1.8 ***
      AND    FCM.FCM_EXER_TYP = FTD.FTD_EXER_TYP      *** Ver 1.8 ***
      AND    FCM.FCM_OPT_TYP = FTD.FTD_OPT_TYP        *** Ver 1.8 ***
      AND    FCM.FCM_STRK_PRC = FTD.FTD_STRK_PRC      *** Ver 1.8 ***
      *** Ver 2.9 Comment Ends ***/

      /*** Ver 2.9 Starts ***/

      AND    FTQ.FTQ_XCHNG_CD = :c_xchng_cd
      AND    FTQ.FTQ_PRDCT_TYP = decode( FTD.FTD_PRDCT_TYP, 'P', 'F', 'U', 'F', 'I','O', FTD.FTD_PRDCT_TYP)
      AND    FTQ.FTQ_INDSTK = FTD.FTD_INDSTK
      AND    FTQ.FTQ_UNDRLYNG =  FTD.FTD_UNDRLYNG
      AND    FTQ.FTQ_EXPRY_DT = FTD.FTD_EXPRY_DT
      AND    FTQ.FTQ_EXER_TYP = FTD.FTD_EXER_TYP
      AND    FTQ.FTQ_OPT_TYP = FTD.FTD_OPT_TYP
      AND    FTQ.FTQ_STRK_PRC = FTD.FTD_STRK_PRC

      /*** Ver 2.9 Ends ***/

			AND    FTD. FTD_UPLD_MTCH_FLG = 'N'
			AND		NVL(FTD_BRKG_TYPE,'N') <> 'N'				/*** Added for Ver 2.8 ***/
			/*** Commented for Ver 2.8 ****
			AND    ftd_ordr_rfrnc in 
											 (   select  distinct OBC_ORDR_RFRNC
                            from    OBC_OPTION_BRKR_CMPT_SMRY
                            where   trunc(OBC_TRD_TIME)= :c_trd_dt
                            and     OBC_XCHNG_CD = FTD.FTD_XCHNG_CD
                            and     OBC_CLM_MTCH_ACCNT = FTD.FTD_CLM_MTCH_ACCNT
                          UNION
                            select  distinct IOD_ORDR_RFRNC
                            from    IOD_IGAIN_ORDR_DTLS
                            where   IOD_XCHNG_CD=FTD.FTD_XCHNG_CD
                            and     trunc(IOD_ORDR_DT)= :c_trd_dt
                            and     IOD_CLM_MTCH_ACCNT = FTD.FTD_CLM_MTCH_ACCNT
                        )                             *** Ver 2.5 ***
			**** Ver 2.8 ********/
			);
	}

	if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND)
	{
		fn_errlog(c_ServiceName,"S31090",SQLMSG,c_err_msg);
		tpabort ( 0 );			/** Ver 3.2 **/
		/*fn_aborttran(c_ServiceName,i_trans,c_err_msg); ** ver 3.2 comment */
		return;
	}
	
	if(SQLCODE == NO_DATA_FOUND)
	{	
		fn_userlog(c_ServiceName,"No Data to be Uploaded");
		tpabort ( 0 );			/** Ver 3,1 **/
		/*fn_aborttran(c_ServiceName,i_trans,c_err_msg); ** ver 3.2 comment */
		return;
	}
	li_tot_rcrds=sqlca.sqlerrd[2];

	/*if( fn_committran(c_ServiceName,i_trans,c_err_msg)== -1 ) ** ver 3.2 comment */
	if( tpcommit(0) == -1 ) /** Ver 3.2 **/
	{
		tpabort ( 0 );		/** ver 3.2 **/
		/*fn_aborttran(c_ServiceName,i_trans,c_err_msg); ** ver 3.2 comment */
		fn_errlog(c_ServiceName,"S31095",LIBMSG,c_err_msg);
		fn_userlog(c_ServiceName,"Error in commiting trans");
		return ;
	}

	/*** Ver 1.2 Ends ***/
if(DEBUG_MSG_LVL_3)					/* ver 1.4 */
{
	fn_userlog(c_ServiceName,"c_xchng_cd :%s:",c_xchng_cd);
	fn_userlog(c_ServiceName,"c_trd_dt :%s:",c_trd_dt);
	fn_userlog(c_ServiceName,"c_rqst_typ :%c:",c_rqst_typ);
	fn_userlog(c_ServiceName,"c_eba_mtch_act_no :%s:",c_eba_mtch_act_no);
}

  /*** Ver 2.7 ***
	strcpy ( c_msg, "Data created." );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  sprintf ( c_msg, "Total records = %ld", li_tot_rcrds );
  fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
  **** Ver 2.7 **********/

} /* End of Else part of c_brkr_cmpt_flg */ 


/**** Ver 2.7 Starst Here *******/
/*** First post the Fresh Trades to class ***/

 EXEC SQL
   SELECT count(1)
     INTO :l_frsh_cvr_qty_cnt
     FROM TMP_MTCH_UPLD
    WHERE TMP_UPLD_MTCH_FLG='N'
      AND TMP_XCHNG_CD = :c_xchng_cd 
      AND NVL(TMP_FRESH_QTY,0) > 0
      AND NVL(TMP_COVER_QTY,0) > 0;
   
 if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND)
 {
   fn_errlog(c_ServiceName,"S31100",SQLMSG,c_err_msg);
   return;
 }

 EXEC SQL
   SELECT count(1)
     INTO :l_conv_trd_cnt
     FROM TMP_MTCH_UPLD
    WHERE TMP_UPLD_MTCH_FLG='N'
      AND TMP_XCHNG_CD = :c_xchng_cd
      AND NVL(TMP_FRESH_QTY,0) = 0
      AND NVL(TMP_COVER_QTY,0) = 0;

 if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND)
 {
   fn_errlog(c_ServiceName,"S31105",SQLMSG,c_err_msg);
   return;
 }
 
 fn_userlog(c_ServiceName," Count of trades includes fresh and cover qty :%ld:",l_frsh_cvr_qty_cnt);

 strcpy ( c_msg, "Data created." );
 fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
 sprintf ( c_msg, "Total records = %ld", (li_tot_rcrds+l_frsh_cvr_qty_cnt) );
 fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

 for ( li_cnt=1; li_cnt<=li_tot_rcrds; li_cnt++ )
 {
   memset(tradearray,'\0',sizeof(tradearray));

   l_start_seq = li_cnt; 
   if( li_cnt == 1 )
   {
     l_end_seq = li_maxrecord;
   }
   else
   {
     l_end_seq   = li_cnt + li_maxrecord - 1; 
   }
   fn_userlog(c_ServiceName," l_start_seq :%ld:",l_start_seq);
   fn_userlog(c_ServiceName," l_end_seq :%ld:",l_end_seq);
 
   EXEC SQL
      SELECT  decode(TMP_XCHNG_CD,'NFO','NSE','BFO','BSE'),   /*** Ver 1.8 ***/
              TMP_MEMBER_CD,
              'ISEC',
              NULL,
              rtrim(TMP_ORD_ACK_NMBR),
              rtrim(TMP_XCHNG_TRD_NO),
              rtrim(TMP_EBA_TRD_REF),
              /*** decode(TMP_PRDCT_TYP,'F',decode(TMP_INDSTK,'I','FUTIDX','S','FUTSTK'),'O',decode(TMP_INDSTK,'I','OPTIDX','S','OPTSTK')),   Commented in Ver 1.8 ***/
              /******************* commented in Ver 2.4 **************
        (case when TMP_XCHNG_CD='NFO' then decode(TMP_PRDCT_TYP,'F',decode(TMP_INDSTK,'I','FUTIDX','S','FUTSTK'),'O',decode(TMP_INDSTK,'I','OPTIDX','S','OPTSTK')) else (TMP_INDSTK || TMP_PRDCT_TYP) end), *** Ver 1.8 ***/
              /**************** Added in ver 2.4 ******************/
              (case when TMP_XCHNG_CD='NFO' then decode(TMP_PRDCT_TYP,'F',decode(TMP_INDSTK,'I',decode(rtrim(TMP_SEM_MAP_VL),'INDIAVIX','FUTIVX','FUTIDX'),'S','FUTSTK'),'O',decode(TMP_INDSTK,'I','OPTIDX','S','OPTSTK')) else (TMP_INDSTK || TMP_PRDCT_TYP) end), /*** Ver 1.8 ***/
              /******************* End of Ver 2.4 **************/
              DECODE(TMP_XCHNG_CD,'NFO',TMP_SEM_MAP_VL,'BFO',TMP_TOKEN_NO), 
              TMP_EXPRY_DT || ' 23:59:59',
              /* decode(TMP_PRDCT_TYP, 'O', TMP_OPT_TYP || TMP_EXER_TYP,'F',NULL), */
              decode(TMP_PRDCT_TYP, 'O', TMP_OPT_TYP || TMP_EXER_TYP,'F',NULL),
              TMP_STRK_PRC / 100.00,
              '00',
              NULL,
              decode(TMP_TRD_FLW,'S','2','1'),
              NULL,
              NULL,
              TMP_FRESH_QTY,
              TMP_EXCTD_RT / 100,
              TMP_CLM_MTCH_ACCNT,
              TMP_FRS_BRKG/100,
              TMP_PRO_CLI_IND,
              NULL,
              'Y',  
              to_char(TMP_TRD_DT,'DD-MON-YYYY HH24:MI:SS'),
              to_char(TMP_ACK_TIME,'DD-MON-YYYY HH24:MI:SS'),
              TMP_TRNSCTN_TYP,
              'Y',
              :c_brkr_cmpt_flg,
              to_char(systimestamp,'YYYY-MM-DD HH24:MI:SS:FF3'),
              /*** FNO_MTUPLD_SEQ.NEXTVAL, Commented in Ver 1.8 ***/
              decode(TMP_XCHNG_CD,'NFO',FNO_MTUPLD_SEQ.NEXTVAL,'BFO',BFO_MTUPLD_SEQ.NEXTVAL),  /*** Ver 1.8 ***/
              'Y',
              TMP_TRD_ROWID,
              TMP_TOKEN_NO,     /*** Ver 1.8 ***/
              NULL,
              TMP_SQ_FLG       /*** Ver 2.3 ***/
         INTO :tradearray
         FROM TMP_MTCH_UPLD
        WHERE TMP_UPLD_MTCH_FLG='N'
          AND NVL(TMP_FRESH_QTY,0) > 0
          AND TMP_XCHNG_CD = :c_xchng_cd   
          AND TMP_SEQ_NO >= :l_start_seq  
          AND TMP_SEQ_NO <= :l_end_seq;                

       li_counter = sqlca.sqlerrd[2]; 
       if(SQLCODE !=0 && SQLCODE != -1405 && SQLCODE != NO_DATA_FOUND) 
       {
         fn_errlog(c_ServiceName,"S31110",SQLMSG,c_err_msg);
         return;
       }

       if(SQLCODE == NO_DATA_FOUND)
       {
         fn_userlog(c_ServiceName,"No more data to process");
       }
       
       fn_userlog(c_ServiceName," sqlca.sqlerrd[2] :%d:",sqlca.sqlerrd[2]);
       li_counter=0; 
       for( i_element=0; i_element < li_maxrecord; i_element++)
       {

         if( strcmp(tradearray[i_element].c_oc_flag , "Y") == 0 )
         {
           li_counter = li_counter + 1;              
         }
          /****
         else
         {
           fn_userlog(c_ServiceName," i_element :%d: tradearray[i_element].c_oc_flag :%s:",i_element ,tradearray[i_element].c_oc_flag);
           fn_userlog(c_ServiceName," inside |%s,%s,%s,%s,%s,%s,%s,%s,%s,%s|",
          tradearray[i_element].c_xchng_cd,
          tradearray[i_element].c_member_cd,
          tradearray[i_element].c_company_cd,
          tradearray[i_element].c_group_cd,
          tradearray[i_element].c_order_no,
          tradearray[i_element].c_trade_no,
          tradearray[i_element].c_eba_trd_no,
          tradearray[i_element].c_contract_ins_typ,
          tradearray[i_element].c_symbol,
          tradearray[i_element].c_expiry_dt); 
         } ***/
  
       }

       if( li_counter == 0)
       {
         break;
       }
       fn_userlog(c_ServiceName,"Record Fetched  :%ld:",li_counter);
      /**************
       fn_userlog(c_ServiceName," inside |%s,%s,%s,%s,%s,%s,%s,%s,%s,%s|",
          tradearray[0].c_xchng_cd,
          tradearray[0].c_member_cd,
          tradearray[0].c_company_cd,
          tradearray[0].c_group_cd,
          tradearray[0].c_order_no,
          tradearray[0].c_trade_no,
          tradearray[0].c_eba_trd_no,
          tradearray[0].c_contract_ins_typ,
          tradearray[0].c_symbol,
          tradearray[0].c_expiry_dt);

       fn_userlog(c_ServiceName," inside2 |%s,%s,%s,%s,%s,%s,%s,%s,%s,%s|",
          tradearray[1].c_xchng_cd,
          tradearray[1].c_member_cd,
          tradearray[1].c_company_cd,
          tradearray[1].c_group_cd,
          tradearray[1].c_order_no,
          tradearray[1].c_trade_no,
          tradearray[1].c_eba_trd_no,
          tradearray[1].c_contract_ins_typ,
          tradearray[1].c_symbol,
          tradearray[1].c_expiry_dt);

       fn_userlog(c_ServiceName," inside2 |%s,%s,%s,%s,%s,%s,%s,%s,%s,%s|",
          tradearray[2].c_xchng_cd,
          tradearray[2].c_member_cd,
          tradearray[2].c_company_cd,
          tradearray[2].c_group_cd,
          tradearray[2].c_order_no,
          tradearray[2].c_trade_no,
          tradearray[2].c_eba_trd_no,
          tradearray[2].c_contract_ins_typ,
          tradearray[2].c_symbol,
          tradearray[2].c_expiry_dt);
       *****/
       li_cnt = l_end_seq; 
      
       Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
        Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

        MEMSET(c_msg_cbuf);
        c_msg_cbuf = (unsigned char *)tradearray;

        l_bufferlength = sizeof(tradearray);

        i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
        i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
        i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&li_counter,0);
        i_err[3]=Fadd32(ptr_fml_Sbuffer,FFO_ROUT_CRT,(char *)c_Exchng_cd,0);

        for (i=0;i<4;i++)
        {
          if (i_err[i] == -1)
          {
            fn_userlog(c_ServiceName,"Error in Fadd at %d",i);
            fn_errlog ( c_ServiceName, "S31115", FMLMSG, c_err_msg );
            strcpy(c_event, "Match Update:Send FML buffer Problem ..");
            fn_bat_pst_msg ( c_ServiceName, c_event, c_tag );
            tpfree ( ( char * ) ptr_fml_Sbuffer );
            tpfree ( ( char * ) ptr_fml_Rbuffer );
            tpabort ( 0 );
            tpclose ( );
            tpterm ( );
            return;
          }
        }
  
        fn_userlog(c_ServiceName,"CALL SFO_UPLDTRADE for record no: [%ld] till [%ld] in bulk", (li_cnt - (li_counter-1) ), li_cnt);

        if(tpcall("SFO_UPLDTRADE",(char *)ptr_fml_Sbuffer,0, (char **)&ptr_fml_Rbuffer,&l_rcv_length,TPNOTRAN|TPNOTIME) == -1)
        {
          c_exec_flg = 'N';
          fn_userlog(c_ServiceName,"Error in tpcall ");
          fn_errlog ( c_ServiceName, "S31120", TPMSG, c_err_msg );
          sprintf (c_msg, "Failed while processing record no. [%ld] till [%ld] in bulk", (li_cnt - (li_counter-1) ), li_cnt);

          fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
        }
        else
        {
          c_exec_flg = 'Y';
        }

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"c_exec_flg is %c",c_exec_flg);
        }

        if(c_exec_flg == 'Y')
        {
          i_trans = tpbegin(TRAN_TIMEOUT,0);
          if(i_trans == -1)
          {
            errlog(c_ServiceName, "S31125", TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
            strcpy(c_event, "Match Update:Begin transaction failed.");
            fn_bat_pst_msg ( c_ServiceName, c_event, c_tag );
            tpfree ( ( char * ) ptr_fml_Sbuffer );
            tpfree ( ( char * ) ptr_fml_Rbuffer );
            tpabort ( 0 );
            tpclose ( );
            tpterm ( );
            return;
          }
          for(i = 0; i < li_counter; i++)
          {
            if(DEBUG_MSG_LVL_3)
            {
              fn_userlog( c_ServiceName, "UPDATE <Y> FTD_FO_TRD_DTLS for FTD_EBA_TRD_REF = :%s:",tradearray[i].c_eba_trd_no);
            }

            EXEC SQL
              UPDATE FTD_FO_TRD_DTLS
              SET FTD_UPLD_MTCH_FLG = 'Y'
              WHERE ROWID = :tradearray[i].c_trd_rowid;

            if  ( SQLCODE != 0)
            {
              fn_userlog(c_ServiceName,"tradearray[i].c_eba_trd_no :%s:",tradearray[i].c_eba_trd_no);
              fn_aborttran( c_ServiceName, i_trans, c_err_msg );
              fn_errlog ( c_ServiceName, "S31130", SQLMSG, c_err_msg );
              sprintf (c_msg, "Failed in Processing record for Trade no.:%s:",tradearray[i].c_eba_trd_no);
              fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
              tpfree((char *)ptr_fml_Sbuffer);
              tpfree((char *)ptr_fml_Rbuffer);
              tpabort (0);
              tpclose ( );
              tpterm ( );
              return;
            }
          }

         l_rowprcssd = l_rowprcssd + li_counter;

          i_rec_count = Foccur32((FBFR32 *)ptr_fml_Rbuffer,FML_TMPLT_NMBR);

          if(i_rec_count > 0)
          {
            fn_userlog(c_ServiceName,"Inside Rollback FTD for trades, not uploaded. i_rec_count=:%d:",i_rec_count);

            for(i = 0; i < i_rec_count; i++)
            {
              if (Fget32(ptr_fml_Rbuffer, FML_TMPLT_NMBR, i, (char *)&i_ret_val,0)  == -1)
              {
                  errlog(c_ServiceName, "S31135", FMLMSG, DEF_USR, DEF_SSSN, c_err_msg);
                  strcpy(c_event, "Match Update:Failed in match upload ..");
                  fn_bat_pst_msg ( c_ServiceName, c_event, c_tag );
                  tpfree ( ( char * ) ptr_fml_Sbuffer );
                  tpfree ( ( char * ) ptr_fml_Rbuffer );
                  tpabort ( 0 );
                  tpclose ( );
                  tpterm ( );
                  return;
              }
              if(DEBUG_MSG_LVL_3)
              {
                fn_userlog( c_ServiceName, "UPDATE <N> FTD_FO_TRD_DTLS for FTD_EBA_TRD_REF = :%s:",tradearray[i_ret_val].c_eba_trd_no);
              }

              EXEC SQL
                UPDATE  FTD_FO_TRD_DTLS
                SET     FTD_UPLD_MTCH_FLG = 'N'
                WHERE ROWID = :tradearray[i_ret_val].c_trd_rowid;

                if(SQLCODE != 0)
                {
                  errlog(c_ServiceName, "S31140", SQLMSG, DEF_USR, DEF_SSSN, c_err_msg);
                  strcpy(c_event, "Match Update:Failed in FTD_FO_TRD_DTLS Update ..");
                  fn_bat_pst_msg ( c_ServiceName, c_event, c_tag );
                  tpfree ( ( char * ) ptr_fml_Sbuffer );
                  tpfree ( ( char * ) ptr_fml_Rbuffer );
                  tpabort ( 0 );
                  tpclose ( );
                  tpterm ( );
                  return;
                }
                l_rowprcssd--;
            }
          }

          if ( tpcommit(0) == -1 )
          {
            fn_errlog ( c_ServiceName, "S31145", SQLMSG, c_err_msg );
            sprintf (c_msg, "Failed in Processing record for Trade no.:%s:",tradearray[i].c_eba_trd_no);
            fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
            tpfree((char *)ptr_fml_Sbuffer);
            tpfree((char *)ptr_fml_Rbuffer);
            tpabort ( 0 );
            tpclose ( );
            tpterm ( );
            return;
          }

          sprintf(c_event, "No. recs processed :%ld: of:%ld: ",l_rowprcssd,(li_tot_rcrds-l_conv_trd_cnt) + l_frsh_cvr_qty_cnt );
          fn_bat_pst_msg ( c_ServiceName, c_event, c_tag );

        }
        memset(tradearray,'\0',sizeof(tradearray));
        li_counter = 0;

  } /** End of For Loop ***/

  /**** Sending the Cover Trades ****/
  for ( li_cnt=1; li_cnt<=li_tot_rcrds; li_cnt++ )
  {
   memset(tradearray,'\0',sizeof(tradearray));

   l_start_seq = li_cnt;
   if( li_cnt == 1 )
   {
     l_end_seq = li_maxrecord;
   }
   else
   {
     l_end_seq   = li_cnt + li_maxrecord - 1;
   }

   EXEC SQL
      SELECT  decode(TMP_XCHNG_CD,'NFO','NSE','BFO','BSE'),   /*** Ver 1.8 ***/
              rtrim(TMP_MEMBER_CD),
              'ISEC',
              NULL,
              rtrim(TMP_ORD_ACK_NMBR),
              rtrim(TMP_XCHNG_TRD_NO),
              rtrim(TMP_EBA_TRD_REF),
              /*** decode(TMP_PRDCT_TYP,'F',decode(TMP_INDSTK,'I','FUTIDX','S','FUTSTK'),'O',decode(TMP_INDSTK,'I','OPTIDX','S','OPTSTK')),   Commented in Ver 1.8 ***/
              /******************* commented in Ver 2.4 **************
        (case when TMP_XCHNG_CD='NFO' then decode(TMP_PRDCT_TYP,'F',decode(TMP_INDSTK,'I','FUTIDX','S','FUTSTK'),'O',decode(TMP_INDSTK,'I','OPTIDX','S','OPTSTK')) else (TMP_INDSTK || TMP_PRDCT_TYP) end), *** Ver 1.8 ***/
              /**************** Added in ver 2.4 ******************/
              (case when TMP_XCHNG_CD='NFO' then decode(TMP_PRDCT_TYP,'F',decode(TMP_INDSTK,'I',decode(rtrim(TMP_SEM_MAP_VL),'INDIAVIX','FUTIVX','FUTIDX'),'S','FUTSTK'),'O',decode(TMP_INDSTK,'I','OPTIDX','S','OPTSTK')) else (TMP_INDSTK || TMP_PRDCT_TYP) end), /*** Ver 1.8 ***/
              /******************* End of Ver 2.4 **************/
              DECODE(TMP_XCHNG_CD,'NFO',TMP_SEM_MAP_VL,'BFO',TMP_TOKEN_NO), 
              TMP_EXPRY_DT || ' 23:59:59',
              /** decode(TMP_PRDCT_TYP, 'O', TMP_OPT_TYP || TMP_EXER_TYP,'F',NULL), **/
              decode(TMP_PRDCT_TYP, 'O', TMP_OPT_TYP || TMP_EXER_TYP,'F',NULL),
              TMP_STRK_PRC / 100.00,
              '00',
              NULL,
              decode(TMP_TRD_FLW,'S','2','1'),
              NULL,
              NULL,
              TMP_COVER_QTY,
              TMP_EXCTD_RT / 100,
              TMP_CLM_MTCH_ACCNT,
              DECODE(:c_brkr_cmpt_flg,'N',TMP_FRS_BRKG/100,TMP_CVR_BRKG/100),
              TMP_PRO_CLI_IND,
              NULL,
              'Y',
              to_char(TMP_TRD_DT,'DD-MON-YYYY HH24:MI:SS'),
              to_char(TMP_ACK_TIME,'DD-MON-YYYY HH24:MI:SS'),
              'C',
              'Y',
              :c_brkr_cmpt_flg,
              to_char(systimestamp,'YYYY-MM-DD HH24:MI:SS:FF3'),
              /*** FNO_MTUPLD_SEQ.NEXTVAL, Commented in Ver 1.8 ***/
              decode(TMP_XCHNG_CD,'NFO',FNO_MTUPLD_SEQ.NEXTVAL,'BFO',BFO_MTUPLD_SEQ.NEXTVAL),  /*** Ver 1.8 ***/
              'Y',
              TMP_TRD_ROWID,
              TMP_TOKEN_NO,     /*** Ver 1.8 ***/
              NULL,
              TMP_SQ_FLG       /*** Ver 2.3 ***/
         INTO :tradearray
         FROM TMP_MTCH_UPLD
        WHERE TMP_UPLD_MTCH_FLG='N'
          AND NVL(TMP_COVER_QTY,0) > 0
          AND TMP_XCHNG_CD = :c_xchng_cd
          AND TMP_SEQ_NO >= :l_start_seq
          AND TMP_SEQ_NO <= :l_end_seq;

       if(SQLCODE !=0 && SQLCODE != -1405 && SQLCODE != NO_DATA_FOUND)
       {
         fn_errlog(c_ServiceName,"S31150",SQLMSG,c_err_msg);
         return;
       }

       if(SQLCODE == NO_DATA_FOUND)
       {
         fn_userlog(c_ServiceName,"No more data to process");
       }
      
       li_counter = sqlca.sqlerrd[2];
       li_counter = 0;
       for( i_element=0; i_element < li_maxrecord; i_element++)
       {
         if( strcmp(tradearray[i_element].c_oc_flag , "Y") == 0 )
         {
           li_counter = li_counter + 1;
         }
       }
 
       if( li_counter == 0)
       {
         break;
       }

       fn_userlog(c_ServiceName,"Record Fetched :%ld:",li_counter);

       li_cnt = l_end_seq;

       Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
        Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));

        MEMSET(c_msg_cbuf);
        c_msg_cbuf = (unsigned char *)tradearray;

        l_bufferlength = sizeof(tradearray);

        i_err[0]=Fadd32(ptr_fml_Sbuffer,FML_VLME,(char *)&l_bufferlength,0);
        i_err[1]=Fadd32(ptr_fml_Sbuffer,FML_SBUF,(char *)c_msg_cbuf,l_bufferlength);
        i_err[2]=Fadd32(ptr_fml_Sbuffer,FML_STTLMNT_NMBR,(char *)&li_counter,0);
        i_err[3]=Fadd32(ptr_fml_Sbuffer,FFO_ROUT_CRT,(char *)c_Exchng_cd,0);

        for (i=0;i<4;i++)
        {
          if (i_err[i] == -1)
          {
            fn_userlog(c_ServiceName,"Error in Fadd at %d",i);
            fn_errlog ( c_ServiceName, "S31155", FMLMSG, c_err_msg );
            strcpy(c_event, "Match Update:Send FML buffer Problem ..");
            fn_bat_pst_msg ( c_ServiceName, c_event, c_tag );
            tpfree ( ( char * ) ptr_fml_Sbuffer );
            tpfree ( ( char * ) ptr_fml_Rbuffer );
            tpabort ( 0 );
            tpclose ( );
            tpterm ( );
            return;
          }
        }

        fn_userlog(c_ServiceName,"CALL SFO_UPLDTRADE for record no: [%ld] till [%ld] in bulk", (li_cnt - (li_counter-1) ), li_cnt);

        if(tpcall("SFO_UPLDTRADE",(char *)ptr_fml_Sbuffer,0, (char **)&ptr_fml_Rbuffer,&l_rcv_length,TPNOTRAN|TPNOTIME) == -1)
        {
          c_exec_flg = 'N';
          fn_userlog(c_ServiceName,"Error in tpcall ");
          fn_errlog ( c_ServiceName, "S31160", TPMSG, c_err_msg );
          sprintf (c_msg, "Failed while processing record no. [%ld] till [%ld] in bulk", (li_cnt - (li_counter-1) ), li_cnt);

          fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
        }
        else
        {
          c_exec_flg = 'Y';
        }

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"c_exec_flg is %c",c_exec_flg);
        }

        if(c_exec_flg == 'Y')
        {
          i_trans = tpbegin(TRAN_TIMEOUT,0);
          if(i_trans == -1)
          {
            errlog(c_ServiceName, "S31165", TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
            strcpy(c_event, "Match Update:Begin transaction failed.");
            fn_bat_pst_msg ( c_ServiceName, c_event, c_tag );
            tpfree ( ( char * ) ptr_fml_Sbuffer );
            tpfree ( ( char * ) ptr_fml_Rbuffer );
            tpabort ( 0 );
            tpclose ( );
            tpterm ( );
            return;
          }
          for(i = 0; i < li_counter; i++)
          {
            if(DEBUG_MSG_LVL_3)
            {
              fn_userlog( c_ServiceName, "UPDATE <Y> FTD_FO_TRD_DTLS for FTD_EBA_TRD_REF = :%s:",tradearray[i].c_eba_trd_no);
            }

            EXEC SQL
              UPDATE FTD_FO_TRD_DTLS
              SET FTD_UPLD_MTCH_FLG = 'Y'
              WHERE ROWID = :tradearray[i].c_trd_rowid;

            if  ( SQLCODE != 0)
            {
              fn_userlog(c_ServiceName,"tradearray[i].c_eba_trd_no :%s:",tradearray[i].c_eba_trd_no);
              fn_aborttran( c_ServiceName, i_trans, c_err_msg );
              fn_errlog ( c_ServiceName, "S31170", SQLMSG, c_err_msg );
              sprintf (c_msg, "Failed in Processing record for Trade no.:%s:",tradearray[i].c_eba_trd_no);
              fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
              tpfree((char *)ptr_fml_Sbuffer);
              tpfree((char *)ptr_fml_Rbuffer);
              tpabort (0);
              tpclose ( );
              tpterm ( );
              return;
            }
          }

         l_rowprcssd = l_rowprcssd + li_counter;

          i_rec_count = Foccur32((FBFR32 *)ptr_fml_Rbuffer,FML_TMPLT_NMBR);

          if(i_rec_count > 0)
          {
            fn_userlog(c_ServiceName,"Inside Rollback FTD for trades, not uploaded. i_rec_count=:%d:",i_rec_count);

            for(i = 0; i < i_rec_count; i++)
            {
              if (Fget32(ptr_fml_Rbuffer, FML_TMPLT_NMBR, i, (char *)&i_ret_val,0)  == -1)
              {
                  errlog(c_ServiceName, "S31175", FMLMSG, DEF_USR, DEF_SSSN, c_err_msg);
                  strcpy(c_event, "Match Update:Failed in match upload ..");
                  fn_bat_pst_msg ( c_ServiceName, c_event, c_tag );
                  tpfree ( ( char * ) ptr_fml_Sbuffer );
                  tpfree ( ( char * ) ptr_fml_Rbuffer );
                  tpabort ( 0 );
                  tpclose ( );
                  tpterm ( );
                  return;
              }
              if(DEBUG_MSG_LVL_3)
              {
                fn_userlog( c_ServiceName, "UPDATE <N> FTD_FO_TRD_DTLS for FTD_EBA_TRD_REF = :%s:",tradearray[i_ret_val].c_eba_trd_no);
              }

              EXEC SQL
                UPDATE  FTD_FO_TRD_DTLS
                SET     FTD_UPLD_MTCH_FLG = 'N'
                WHERE ROWID = :tradearray[i_ret_val].c_trd_rowid;

                if(SQLCODE != 0)
                {
                  errlog(c_ServiceName, "S31180", SQLMSG, DEF_USR, DEF_SSSN, c_err_msg);
                  strcpy(c_event, "Match Update:Failed in FTD_FO_TRD_DTLS Update ..");
                  fn_bat_pst_msg ( c_ServiceName, c_event, c_tag );
                  tpfree ( ( char * ) ptr_fml_Sbuffer );
                  tpfree ( ( char * ) ptr_fml_Rbuffer );
                  tpabort ( 0 );
                  tpclose ( );
                  tpterm ( );
                  return;
                }
                l_rowprcssd--;
            }
          }

          if ( tpcommit(0) == -1 )
          {
            fn_errlog ( c_ServiceName, "S31185", SQLMSG, c_err_msg );
            sprintf (c_msg, "Failed in Processing record for Trade no.:%s:",tradearray[i].c_eba_trd_no);
            fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );
            tpfree((char *)ptr_fml_Sbuffer);
            tpfree((char *)ptr_fml_Rbuffer);
            tpabort ( 0 );
            tpclose ( );
            tpterm ( );
            return;
          }

          sprintf(c_event, "No. recs processed :%ld: of:%ld: ",l_rowprcssd,(li_tot_rcrds-l_conv_trd_cnt) + l_frsh_cvr_qty_cnt );
          fn_bat_pst_msg ( c_ServiceName, c_event, c_tag );

        }
        memset(tradearray,'\0',sizeof(tradearray));
        li_counter = 0;

  } /** End of For Loop  Ver 2.7 Ends Here ***/
 
/*** Ver 1.7 start ***/
if (li_tot_rcrds == 0)
{
	strcpy(c_event, "Match Upload:No Trades to Upload");
	fn_bat_pst_msg ( c_ServiceName, c_event, c_tag );
}  
else
{
	sprintf(c_event,"Total Records = %ld",(li_tot_rcrds-l_conv_trd_cnt) + l_frsh_cvr_qty_cnt); /** Ver 2.7 **/
	fn_bat_pst_msg ( c_ServiceName, c_event, c_tag );

	sprintf(c_event,"Total Records Successfully Processed = %ld", l_rowprcssd );  
	fn_bat_pst_msg ( c_ServiceName, c_event, c_tag );

	if(li_tot_rcrds != l_rowprcssd)
	{
		sprintf(c_event,"Total Records Failed  = %ld", (( (li_tot_rcrds-l_conv_trd_cnt) + l_frsh_cvr_qty_cnt )-l_rowprcssd) ); /** Ver 2.7 **/	
		fn_bat_pst_msg ( c_ServiceName, c_event, c_tag );
	}
}
/*** Ver 1.7 Ends ***/

	sprintf ( c_msg, "Batch process %s ended", argv[0] );
 	fn_bat_pst_msg ( c_ServiceName, c_msg, c_tag );

  return;
}

int fn_bat_init ( int argc, char *argv[] ) 
{
	fn_var = BAT_FO_MATUPD;
	return 0;
}

void fn_bat_term ( int argc, char *argv[] )
{
	return;
}

int fn_prcs_trg ( char *c_pgm_nm,
                  int i_trg_typ )
{
	return 0;
}
