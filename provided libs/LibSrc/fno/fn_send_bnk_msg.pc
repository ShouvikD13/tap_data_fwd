/***********************************************************************************************************
Ver 1.1 	22-Sep-2006  : SN changes for FNO-NRI to ignore group id 9 from Internal Adjustments 
Ver 1.2		12-Dec-2007  : AIX Migration  ROhit | Debug Level
Ver 1.3		08-Sep-2009  : ROunding off fix for NRI | Venture
Ver 1.4		26-May-2011  : ADM change-additional function for FAB updates | Sachin
Ver 1.5		13-Sep-2011  : FNO Narration -additional parameter in input of fn_send_bnk_msg | Nitin Save
Ver 1.6   04-Jan-2012  : FNO BSE related Changes  | Sachin  
Ver 1.7   04-Dec-2013  : PIPO Run Number Handling  | Sachin  
Ver 1.8		15-Apr-2014	 : FDR Module changes | Samip M
Ver 1.9		19-Nov-2014	 : View to FML Changes| Sachin Birje.
Ver 2.0   19-Nov-2014  : Select double value from dual before compairing | Sachin Birje.
Ver 2.1   07-Oct-2016  : IBR product code changes | Vishal Borhade.
Ver 2.2   18-Jul-2018  : Run number for Bank Service | Samip M.
Ver 2.3   03-May-2019  : Deposit Model Changes | Akash B
Ver 2.4   08-Jul-2021  : Physical Delivery of Stock Derivatives | Akash B
Ver 2.5   30-Nov-2021  : IDFC_CR-ISEC03-157490_CHANGES Changes | Sachin Birje  
Ver 2.6   09-Mar-2023  : Minor Changes - CLient Lock Change | Sachin Birje  
Ver 2.7   06-APr-2023  : [IN:1627] : Handling of concurrent locks on client master in EQ allocation and Deallocation | Renuka
Ver 2.8   14-Apr-2023  : Regulatory changes:Real time margin reporting | Dipin
Ver TOL   03-Aug-2023  : Tux on Linux | Agam
*************************************************************************************************************/

#include <stdio.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fml_def.h>
/** #include <fo_view_def.h> ** ver 1.9 **/
#include <fo_view_def.h>     /** ver 1.9 **/
#include <fo_fml_def.h>        /** ver 1.9 **/
#include <fml_rout.h>          /** ver 1.9 **/
#include <fo.h>
#include <fo_bank.h>
#include <fn_tuxlib.h>
#include <fn_log.h>		/* Ver 1.2 */
#include <userlog.h>	/* Ver 1.2 */
#include <string.h>		/* Ver 1.2 */
#include <fn_session.h>	/* Ver 1.2 */
#include <fml_rout.h>		/* Ver 1.2 32 bit */
#include <fn_read_debug_lvl.h>		/* Ver 1.2  Debug Level */
/** Ver 1.8 Start **/

EXEC SQL INCLUDE "table/fal_fo_alcbft_log.h";
EXEC SQL INCLUDE "table/fab_fo_alc_bft_smry.h";
/** Ver 1.8 End **/

#define DATABASE_LOCK_WTH_NOWAIT   -54  /* Ver 2.7. SQLCODE value for lock when nowait is specified */

/*** Ver 2.3 Starts *****/

int fn_ins_mbs(char *,char *,char *,char *,char *,char *,long ,char *,double,char *,char *,char,char *,char,char *,char *,char *,char *,char, char *,
char *,char *,char *,char ); 
int fn_ins_seg_log(char *,long,char *,char *,double,char,char *,double,char,char *,char *,long,char *,char *);

/**** Ver 2.3 Ends ******/

int fn_send_bnk_msg ( struct vw_usr_prfl *ptr_usr_dtls,
                      char c_trn_typ,
                      char *c_blk_unblk_rsn_cd,
                      double d_amt,
                      int i_pipe_id,
                      char *c_ServiceName,
                      char *c_err_msg,
                      double *ptr_d_avl_bal,
                      char *c_trn_ref ,
                      char *c_tmstamp , 		/*REVAMP:Function parameter added by sangeet*/
                      char *c_bnk_narration , 		/* Added in Ver 1.5 */
		                  char *c_xchng_cd,       /** Added in Ver 2.1 **/				
											long l_run_no)					/** Added for Ver 2.2 **/
{
  FBFR32    *ptr_fml_tibuf;
  FBFR32    *ptr_fml_tobuf;
  long int  li_len_tobuf;
	int i_err [ 11 ];  /** Size changed to 9 from 8 in Ver 1.5 **/ /** Size changed to 10 from 9 in Ver 2.1 **/	/** Changed from 10 to 11 for Ver 2.2 **/
	int i_ferr [ 11 ]; /** Size changed to 9 from 8 in Ver 1.5 **/ /** Size changed to 10 from 9 in Ver 2.1 **/ /** Changed from 10 to 11 for Ver 2.2 **/
	int i_cnt;
	int i_ch_val;
	int i_ret_val;
	double d_amt_in_rs;
	double d_bal_amt_in_rs;
  char   c_prdct_code[10];  /** Ver 2.1 **/

/*#ifdef DEBUG */ /* Ver 1.2 03/Mar/08 */
	if(DEBUG_MSG_LVL_3)
	{
	fn_userlog ( c_ServiceName, "c_usr_id           :%s:", 
               ptr_usr_dtls->c_user_id );
	fn_userlog ( c_ServiceName, "li_sssn_id         :%ld:", 
               ptr_usr_dtls->l_session_id );
	fn_userlog ( c_ServiceName, "Match account no   :%s:", 
               ptr_usr_dtls->c_cln_mtch_accnt );
	fn_userlog ( c_ServiceName, "Bank account no    :%s:", 
               ptr_usr_dtls->c_bnk_accnt_nmbr );
	fn_userlog ( c_ServiceName, "c_trn_typ          :%c:", c_trn_typ );
	fn_userlog ( c_ServiceName, "c_blk_unblk_rsn_cd :%s:", c_blk_unblk_rsn_cd );
	fn_userlog ( c_ServiceName, "c_trn_ref :%s:", c_trn_ref );
	fn_userlog ( c_ServiceName, "c_tmstamp :%s:", c_tmstamp );
	fn_userlog ( c_ServiceName, "d_amt in paise     :%lf:", d_amt );
	fn_userlog ( c_ServiceName, "c_bnk_narration in fn_send_bnk_msg :%s:", c_bnk_narration ); /** Added in Ver 1.5 **/
	fn_userlog ( c_ServiceName, "c_xchng_cd  :%s:", c_xchng_cd );                             /** Ver 2.1 **/
	fn_userlog ( c_ServiceName, "l_run_no  :%ld:", l_run_no );						/** Ver 2.2 **/
	}
/*#endif */
   /************* ALLOCATE & initialize Sbuffer ************/

	 /** Ver 2.1 Starts here **/

  strcpy(c_prdct_code,c_xchng_cd);
  if( c_trn_typ == DB || c_trn_typ == UD )
      strcat((char *)c_prdct_code,"I");   /* Payin */
  else if ( c_trn_typ == CR )
      strcat((char *)c_prdct_code,"O");   /* Payout */

	if(DEBUG_MSG_LVL_3)
  {
  	fn_userlog(c_ServiceName,"New Exchange code :%s:",c_prdct_code);
	}

  /** Ver 2.1 Ends here **/

	d_bal_amt_in_rs = 0;
	*ptr_d_avl_bal = d_bal_amt_in_rs * 100.0;
/*	
	strcpy ( c_trn_ref, "******" );
*/							/*REVAMP:Commented by sangeet*/
  ptr_fml_tibuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
  if (ptr_fml_tibuf == NULL)
  {
    fn_errlog( c_ServiceName, "L31005", TPMSG, c_err_msg );
    return -1;
  }

  ptr_fml_tobuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
  if (ptr_fml_tobuf == NULL)
  {
    fn_errlog( c_ServiceName, "L31010", TPMSG, c_err_msg );
    tpfree ( ( char * ) ptr_fml_tibuf );
    return -1;
  }

  i_err [ 0 ] = Fadd32 ( ptr_fml_tibuf, FML_USR_ID, ptr_usr_dtls->c_user_id, 0); 
	i_ferr [ 0 ] = Ferror32;
  i_err [ 1 ] = Fadd32 ( ptr_fml_tibuf, FML_SSSN_ID, ( char * )&(ptr_usr_dtls->l_session_id), 0); 
	i_ferr [ 1 ] = Ferror32;
  i_err [ 2 ] = Fadd32 ( ptr_fml_tibuf, FML_MSG_TYP, ( char * )&c_trn_typ, 0); 
	i_ferr [ 2 ] = Ferror32;
  i_err [ 3 ] = Fadd32 ( ptr_fml_tibuf, FML_EBA_MTCH_ACT_NO,( char * )ptr_usr_dtls->c_cln_mtch_accnt, 0); 
	i_ferr [ 3 ] = Ferror32;
  i_err [ 4 ] = Fadd32 ( ptr_fml_tibuf, FML_BNK_ACT_NO,( char * )ptr_usr_dtls->c_bnk_accnt_nmbr, 0); 
	i_ferr [ 4 ] = Ferror32;
	d_amt_in_rs = d_amt / 100.0;
  i_err [ 5 ] = Fadd32 ( ptr_fml_tibuf, FML_TRNSCTN_AMT,( char * )&d_amt_in_rs, 0); 
	i_ferr [ 5 ] = Ferror32;
  i_err [ 6 ] = Fadd32 ( ptr_fml_tibuf, FML_BLK_UNBLK_RSN_CD,c_blk_unblk_rsn_cd, 0); 
	i_ferr [ 6 ] = Ferror32;
  i_err [ 7 ] = Fadd32 ( ptr_fml_tibuf, FML_USR_DPRTMNT_ID,( char * )&i_pipe_id, 0); 
	i_ferr [ 7 ] = Ferror32;
  i_err [ 8 ] = Fadd32 ( ptr_fml_tibuf, FML_EVENT, ( char * )c_bnk_narration, 0);  /** Adde in Ver 1.5 **/
	i_ferr [ 8 ] = Ferror32;
	i_err [ 9 ] = Fadd32 ( ptr_fml_tibuf, FML_TRANS_TYP, ( char * )c_prdct_code, 0);   /** Ver 2.1 **/
  i_ferr [ 9 ] = Ferror32;
	i_err [ 10 ] = Fadd32 ( ptr_fml_tibuf, FML_TMPLT_NMBR, ( char * )&l_run_no, 0);   /** Ver 2.2 **/
  i_ferr [ 10 ] = Ferror32;																													/** Ver 2.2 **/

	for ( i_cnt=0; i_cnt<=10; i_cnt++ )   /** Ver 1.5 -Changed count from 7 to 8 **/ /** Ver 2.1 -Changed count from 8 to 9 **/ /** Changed from 9 to 10 for Ver 2.2 **/
	{
		if ( i_err [ i_cnt ] == -1 )
		{
			fn_errlog ( c_ServiceName, "L31015", Fstrerror32 ( i_ferr [ i_cnt ] ), 
                  c_err_msg);
    	tpfree ( ( char * ) ptr_fml_tobuf );
    	tpfree ( ( char * ) ptr_fml_tibuf );
			return -1;
		}
	}
	/*REVAMP: If Condition Added by sangeet for pipo revamp */
	fn_userlog ( c_ServiceName, "c_tmstamp before strcmp is :%s:", c_tmstamp );
	if(strcmp(c_tmstamp,"01-Jan-1980") != 0 )
	{
		fn_userlog(c_ServiceName,"Calling SVC_BNK_INTERFC for Rerun");
					i_err [ 1 ] = Fadd32 ( ptr_fml_tibuf, FML_SYSTEM_TRACE, 
																 ( char * )c_trn_ref, 0);
					i_ferr [ 1 ] = Ferror32;
					i_err [ 2 ] = Fadd32 ( ptr_fml_tibuf, FML_TM, 
																 ( char * )c_tmstamp, 0);
					i_ferr [ 2 ] = Ferror32;
					for ( i_cnt=0; i_cnt<=2; i_cnt++ )
					{
						if ( i_err [ i_cnt ] == -1 )
						{
							fn_errlog ( c_ServiceName, "L31020", Fstrerror32 ( i_ferr [ i_cnt ] ), 
													c_err_msg);
							tpfree ( ( char * ) ptr_fml_tobuf );
							tpfree ( ( char * ) ptr_fml_tibuf );
							return -1;
						}
					}
	}
	else if(strcmp(c_tmstamp,"01-Jan-1980") == 0 )
	{
		fn_userlog(c_ServiceName,"Calling SVC_BNK_INTERFC for Fresh");
	}
	else
	{
		fn_userlog(c_ServiceName,"Trying to call SVC_BNK_INTERFC with false c_tmstamp :%s:",c_tmstamp);
    tpfree ( ( char * ) ptr_fml_tobuf );
    tpfree ( ( char * ) ptr_fml_tibuf );
		return -1;
	}

  i_ch_val = tpcall ( "SVC_BNK_INTERFC", 
                      (char *)ptr_fml_tibuf, 
                      0,
                      (char **)&ptr_fml_tobuf, 
                      &li_len_tobuf, 
                      TPNOTRAN );

  fn_userlog(c_ServiceName,"Val of i_ch_val after SVC_BNK_INTERFC <%d>", i_ch_val);


  if ( i_ch_val == -1 )
  {
		i_ret_val = GENERAL_FAILURE; 
    if ( tperrno != TPESVCFAIL )
    {
      fn_errlog( c_ServiceName, "L31025", TPMSG, c_err_msg );
    }
    else
    {
      switch ( tpurcode )
			{
				case TRN_PLCD_NO_RES :
					fn_userlog ( c_ServiceName, "Messaging protocol error" );
					i_ret_val = INDERMINATE_FAILURE;
					break;

				case 114 :
					fn_userlog ( c_ServiceName, "Invalid account number" );
					break;

				case 116 :
					fn_userlog ( c_ServiceName, "Insufficient funds" );
					Fget32 ( ptr_fml_tobuf, FML_AVLB_BAL, 0, (char *)&d_bal_amt_in_rs, 0);
					i_ret_val = INSUF_FUNDS;
					break;

				case 115 :
				case 117 :
					fn_userlog ( c_ServiceName, "Requested function not supported" );
					i_ret_val = RERUN_FAILURE;
					break;

				case 119 :
					fn_userlog ( c_ServiceName, "Transaction not permitted" );
					break;

				case 184 :
					fn_userlog ( c_ServiceName, "Requested Block operation failed" );
					i_ret_val = RERUN_FAILURE;
					break;

				case 185 :
					fn_userlog ( c_ServiceName, "Invalid Currency/transaction Amount" );
					break;

				case 186 :
					fn_userlog ( c_ServiceName, "Block not exitsting" );
					i_ret_val = BLOCK_NOT_EXISTING;
					break;

				case 904 :
					fn_userlog ( c_ServiceName, "Format Error" );
					break;

				case 906 :
					fn_userlog ( c_ServiceName, "Cut over in progress" );
					i_ret_val = RERUN_FAILURE;
					break;

				case 907 :
					fn_userlog ( c_ServiceName, "Bancs2000 Server inoperative" );
					i_ret_val = RERUN_FAILURE;
					break;

				case 909 :
					fn_userlog ( c_ServiceName, "System malfunction" );
					i_ret_val = RERUN_FAILURE;
					break;

				case 911 :
					fn_userlog ( c_ServiceName, "Service request timed out" );
					i_ret_val = RERUN_FAILURE;
					break;

				case 913 :
					fn_userlog ( c_ServiceName, "Already processed successfully" );
					break;

				default :
					fn_userlog ( c_ServiceName, "Unknown tpurcode %d", tpurcode );
					i_ret_val = RERUN_FAILURE;								/*REVAMP: Added by sangeet for rerun failure*/
					break;
			}

			Fget32 ( ptr_fml_tobuf, FML_ERR_MSG, 0, (char *)c_err_msg, 0 );
			/* REVAMP:The return is shifted to the last of the program to trap the error message */
		}
	}
	else
	{
    if(Fget32 ( ptr_fml_tobuf, FML_AVLB_BAL, 0, (char *)&d_bal_amt_in_rs, 0 ) == -1)
    {
      fn_errlog ( c_ServiceName, "L31030", FMLMSG , c_err_msg);
      tpfree ( ( char * ) ptr_fml_tobuf );
      tpfree ( ( char * ) ptr_fml_tibuf );
      return -1;
    }

    i_ret_val = 0;
  }
	/*REVAMP: System trace is taken out of success loop because it is anyway required*/
  i_err [ 0 ] = Fget32 ( ptr_fml_tobuf, FML_SYSTEM_TRACE, 0,
                         (char *)c_trn_ref, 0 );
  i_ferr [ 0 ] = Ferror32;
  i_err [ 1 ] = Fget32 ( ptr_fml_tobuf, FML_TM, 0,            /*REVAMP: Added by sangeet*/
                         (char *)c_tmstamp, 0 );
  i_ferr [ 1 ] = Ferror32;


  fn_userlog(c_ServiceName,"The FML_SYSTEM_TRACE returned is--:%s:",c_trn_ref);
 /*  fn_userlog(c_ServiceName,"The FML_AVLB_BAL returned is------:%ld:",d_bal_amt_in_rs); */ 
  fn_userlog(c_ServiceName,"The FML_AVLB_BAL returned is------:%lf:",d_bal_amt_in_rs);  /* Version 1.4 - Display of double */
  fn_userlog(c_ServiceName,"The FML_TM returned is------------:%s:",c_tmstamp);


  for ( i_cnt=0; i_cnt<=1; i_cnt++ )
	{
		if ( i_err [ i_cnt ] == -1 )
		{
			fn_errlog ( c_ServiceName, "L31035", Fstrerror32 ( i_ferr [ i_cnt ] ), 
                  c_err_msg);
    	tpfree ( ( char * ) ptr_fml_tobuf );
    	tpfree ( ( char * ) ptr_fml_tibuf );
			return -1;
		}
	}

 	tpfree ( ( char * ) ptr_fml_tobuf );
 	tpfree ( ( char * ) ptr_fml_tibuf );
	*ptr_d_avl_bal = d_bal_amt_in_rs * 100.0;
	return i_ret_val;	  	/* REVAMP: The return value is not 0,It as as per the return case */
}

int fn_upd_bnk_drcr(  char *c_ServiceName,
                      char *c_xchng_cd,
                      char *c_cln_mtch_accnt,
                      char *c_trd_dt,
                      char  c_dc_flg,
                      int   i_grp_id,
                      double d_amount,
											char	c_int_pipo_flg,
                      double d_fbd_dc_amt ) /** Ver 2.4 **/
{
  char c_err_msg[256];

    	fn_userlog( c_ServiceName, "Inside fn_upd_bnk_drcr");

	if ( c_int_pipo_flg == INTERNAL_ADJUSTMENT )
	{
    	fn_userlog( c_ServiceName, "Inside INTERNAL_ADJUSTMENT");

  	EXEC SQL
    	UPDATE  FBD_FO_BNK_DRCR
    	SET     FBD_INT_ADJ_AMT = FBD_INT_ADJ_AMT + :d_amount
    	WHERE   FBD_XCHNG_CD    = :c_xchng_cd
    	AND     FBD_DC_FLG      = :c_dc_flg
    	AND     FBD_TRD_DT      = :c_trd_dt
    	AND     FBD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
    	AND     FBD_GRP_ID      =  :i_grp_id;

  	if ( SQLCODE != 0 )
  	{
    	fn_errlog( c_ServiceName, "L31040",SQLMSG,c_err_msg);
    	return ( FAILURE );
  	}

    if ( i_grp_id == 3 )  /**** Ver 2.4 ****/
    {
      EXEC SQL
      UPDATE FFD_FOEXG_FOBG02_DTLS 
      SET FFD_BUY_PYNSUCC_AMT = NVL(FFD_BUY_PYNSUCC_AMT,0) + :d_amount,
      FFD_TOT_PYNAMT = :d_fbd_dc_amt
      WHERE   FFD_OBLGN_DT      = :c_trd_dt
      AND     FFD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt;

      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
      {
       fn_errlog( c_ServiceName, "L31045",SQLMSG,c_err_msg);
       return ( FAILURE );
      }
      
      if( SQLCODE == NO_DATA_FOUND )
      {
          fn_userlog(c_ServiceName,"c_cln_mtch_accnt:%s: c_trd_dt:%s: d_fbd_dc_amt:%lf: d_amount :%lf:",c_cln_mtch_accnt,c_trd_dt,d_fbd_dc_amt,d_amount);
      }
 
    }


	}
	else if ( c_int_pipo_flg == PAYIN_PAYOUT )
	 {
    	fn_userlog( c_ServiceName, "Inside PAYIN_PAYOUT");

  	EXEC SQL
    	UPDATE  FBD_FO_BNK_DRCR
      SET FBD_PI_PO_AMT = FBD_PI_PO_AMT + :d_amount
    	WHERE   FBD_XCHNG_CD    = :c_xchng_cd
    	AND     FBD_DC_FLG      = :c_dc_flg
    	AND     FBD_TRD_DT      = :c_trd_dt
    	AND     FBD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
    	AND     FBD_GRP_ID      =  :i_grp_id;

  	if ( SQLCODE != 0 )
  	{
    	fn_errlog( c_ServiceName, "L31050",SQLMSG,c_err_msg);
    	return ( FAILURE );
  	}

     if ( i_grp_id == 3 )  /*** Ver 2.4 ***/
     {
      EXEC SQL
      UPDATE FFD_FOEXG_FOBG02_DTLS 
      SET FFD_BUY_PYNSUCC_AMT = NVL(FFD_BUY_PYNSUCC_AMT,0) + :d_amount,
          FFD_TOT_PYNAMT = :d_fbd_dc_amt
      WHERE   FFD_OBLGN_DT      = :c_trd_dt
      AND     FFD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt;

      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
       fn_errlog( c_ServiceName, "L31055",SQLMSG,c_err_msg);
       return ( FAILURE );
      }
     
      if( SQLCODE == NO_DATA_FOUND )
      {
          fn_userlog(c_ServiceName,"c_cln_mtch_accnt:%s: c_trd_dt:%s: d_fbd_dc_amt:%lf: d_amount :%lf:",c_cln_mtch_accnt,c_trd_dt,d_fbd_dc_amt,d_amount);
      }

    }



	}

  return ( SUCCESS );
}

int fn_call_upd_limits( char *c_ServiceName,
                        struct vw_upd_limits *ptr_st_upd_lmts,
                        char  *c_err_msg,
                        int   i_grp_id,
                        char  c_lmt_prj_flg )
{
  FBFR32 *ptr_fml_Sbuf;   /** Ver 1.9 **/
  FBFR32 *ptr_fml_Rbuf;   /** Ver 1.9 **/

  int i_ip_len;
  int i_op_len;
  int i_returncode;

  int i;              /* Ver 1.9 */
  int i_err[10];      /* Ver 1.9 */
  int i_ferr[10];     /* Ver 1.9 */
  long l_recvbuf=0;   /* Ver 1.9 */

    	fn_userlog( c_ServiceName, "Inside fn_call_upd_limits");

  EXEC SQL
    SELECT  FNM_NARRATION_ID
    INTO    :ptr_st_upd_lmts->c_narration_id
    FROM    FNM_FO_NARRATION_MSTR
    WHERE   FNM_GRP_ID = :i_grp_id
    AND   FNM_LMT_PRJ_FLG = :c_lmt_prj_flg;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31060",SQLMSG,c_err_msg);
    return ( FAILURE );
  }

  i_ip_len = sizeof ( struct vw_upd_limits );
  i_op_len = sizeof ( struct vw_upd_limits );

	strcpy ( ptr_st_upd_lmts->c_rout_crt,"000");

      fn_userlog( c_ServiceName, "Before calling SFO_UPD_LIMITS");

  /** COmmented in Ver 1.9 **********************
  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              ptr_st_upd_lmts,
                              ptr_st_upd_lmts,
                              "vw_upd_limits",
                              "vw_upd_limits",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_LIMITS" );
  ********** Ver 1.9 ****************************/

  /********* Ver 1.9 Starts here ****************/
  ptr_fml_Sbuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );
  if ( ptr_fml_Sbuf == NULL )
  {
    fn_errlog( c_ServiceName, "L31065",TPMSG,c_err_msg);
    return ( FAILURE );
  }

  ptr_fml_Rbuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );
  if ( ptr_fml_Rbuf == NULL )
  {
    fn_errlog( c_ServiceName, "L31070",TPMSG,c_err_msg);
    tpfree ((char *)ptr_fml_Sbuf);
    return ( FAILURE ); 
  }

  i_err [0] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CD, (char *)ptr_st_upd_lmts->c_xchng_cd,0);
  i_ferr[0] = Ferror32;
  i_err [1] = Fadd32(ptr_fml_Sbuf,FFO_EBA_MTCH_ACT_NO, (char *)ptr_st_upd_lmts->c_cln_mtch_accnt,0);
  i_ferr[1] = Ferror32;
  i_err [2] = Fadd32(ptr_fml_Sbuf,FFO_TRD_DT, (char *)ptr_st_upd_lmts->c_trd_dt,0);
  i_ferr[2] = Ferror32;
  i_err [3] = Fadd32(ptr_fml_Sbuf,FFO_NARRATION_ID, (char *)ptr_st_upd_lmts->c_narration_id,0);
  i_ferr[3] = Ferror32;
  i_err [4] = Fadd32(ptr_fml_Sbuf,FFO_REMARKS, (char *)ptr_st_upd_lmts->c_remarks,0);
  i_ferr[4] = Ferror32;
  i_err [5] = Fadd32(ptr_fml_Sbuf,FFO_DR_CR_FLG, (char *)&ptr_st_upd_lmts->c_dr_cr_flg,0);
  i_ferr[5] = Ferror32;
  i_err [6] = Fadd32(ptr_fml_Sbuf,FFO_AMOUNT, (char *)&ptr_st_upd_lmts->d_amount,0);
  i_ferr[6] = Ferror32;
  i_err [7] = Fadd32(ptr_fml_Sbuf,FFO_BAL_AMT, (char *)&ptr_st_upd_lmts->d_bal_amt,0);
  i_ferr[7] = Ferror32;
  i_err [8] = Fadd32(ptr_fml_Sbuf,FFO_DWL_FLG, (char *)&ptr_st_upd_lmts->c_dr_without_lmt_flg,0);
  i_ferr[8] = Ferror32;
  i_err [9] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)ptr_st_upd_lmts->c_rout_crt,0);
  i_ferr[9] = Ferror32;
  for (i = 0;i < 10 ;i++)
  {
    if(i_err[i] == -1 )
    {
      fn_userlog( c_ServiceName, "Error in :%d:",i );
      fn_errlog( c_ServiceName, "S31005", Fstrerror32( i_ferr[i]),c_err_msg);
      fn_errlog( c_ServiceName, "L31075",TPMSG,c_err_msg);
      tpfree ((char *)ptr_fml_Sbuf);
      tpfree ((char *)ptr_fml_Rbuf);
      return ( FAILURE );
    }
  } 
  
  i_returncode  = tpcall  ( "SFO_UPD_LIMITS",( char * ) ptr_fml_Sbuf,0,( char ** ) &ptr_fml_Rbuf,&l_recvbuf,0);

  /********* Ver 1.9 Starts Here ****************/

/****************************
24-apr-2002
SFO_UPD_LIMITS returns -3 on insufficient limits
  if ( i_returncode == -1 )
******************************/
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "L31080",LIBMSG,c_err_msg);
    tpfree ((char *)ptr_fml_Sbuf);   /** Ver 1.9 **/
    tpfree ((char *)ptr_fml_Rbuf);   /** Ver 1.9 **/
    return ( i_returncode );
  }

  tpfree ((char *)ptr_fml_Sbuf);   /** Ver 1.9 **/
  tpfree ((char *)ptr_fml_Rbuf);   /** Ver 1.9 **/

  return ( SUCCESS );
}

int fn_do_ia ( char *c_ServiceName,
               char *c_err_msg,
               char *c_cln_mtch_accnt,
               char *c_xchng_cd,
							 char *c_run_dt,
               char *c_tag,
               char c_cls_out_typ,
               double d_ia_amt,
               long li_run_no,   /** Ver 1.7 li_run_no  added **/
               char *c_bnk_accnt,   /** Ver 2.3 ***/
               char c_model_flg) /*** Ver 2.3 ***/
{

  char c_msg [ 256 ];
  int i_trnsctn;
  int i_returncode;
  struct vw_upd_limits st_upd_lmts;
  double 	d_amt_to_be_clsd;
	char	c_dc_flg;

    /**** Ver 2.3 ****/

  char c_prdct_cd[21];
  char c_sgmnt_cd[20+1];
  char c_pipo_src[10];      /* size changed from 3 to 10 in Ver TOL */
  char c_tran_date[23];
  char c_instrument_nmbr[20+1];
  char c_mdc_crdt_nmbr[20+1];
  char c_bnk_accn[21];
  char c_accntng_for;
  char c_accntng_typ[20+1];
  char c_trace[13];
  char c_dbcr_flg='\0';
  char c_narration[101];
  char c_mtch_series[50+1];
  char c_class_svc[20+1];
  char c_src_rowid[20+1];
  char c_run_nmbr[20+1];
  char c_instrument_typ='\0';

  double d_amot_rs=0.0;
  double d_dc_amt=0.0;


  MEMSET(c_prdct_cd);
  MEMSET(c_sgmnt_cd);
  MEMSET(c_pipo_src);
  MEMSET(c_tran_date);
  MEMSET(c_instrument_nmbr);
  MEMSET(c_mdc_crdt_nmbr);
  MEMSET(c_bnk_accn);
  MEMSET(c_accntng_typ);
  MEMSET(c_trace);
  MEMSET(c_narration);
  MEMSET(c_mtch_series);
  MEMSET(c_class_svc);
  MEMSET(c_src_rowid);
  MEMSET(c_run_nmbr);

 /**** Ver 2.3 ends  *****/

  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;             /* a cursor variable */
  	char 		c_reference[16];
  	varchar c_bill_no[51];
  	char 		c_trd_dt[12];
		int 		i_grp_id;
  	double 	d_amount;
  	char c_lmt_prj_flg;
  EXEC SQL END DECLARE SECTION;

     fn_userlog( c_ServiceName, "Inside fn_do_ia");
     fn_userlog( c_ServiceName, "d_ia_amt %lf",d_ia_amt);

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "L31085", LIBMSG, c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  i_returncode = fn_lock_usr( c_ServiceName, c_cln_mtch_accnt );
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "L31090",LIBMSG,c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }
  /** Ver 2.6 Starts here ****/
  i_returncode = fn_lock_fno( c_ServiceName, c_cln_mtch_accnt );
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "L31095",LIBMSG,c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }
  /** Ver 2.6 Ends here ****/

  EXEC SQL
       SELECT to_char(sysdate,'DDMONYYYY')||LPAD(piposeq.nextval,6,0)
       INTO : c_reference
       FROM   DUAL;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "L31100",SQLMSG,c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  EXEC SQL ALLOCATE :sys_cursor;

	if ( c_cls_out_typ == DEBIT )
	{
     fn_userlog( c_ServiceName, "Inside fn_do_ia c_cls_out_typ == DEBIT");

    EXEC SQL EXECUTE
      BEGIN
          OPEN :sys_cursor FOR
    				SELECT 	to_char( FBD_TRD_DT , 'dd-Mon-yyyy' ),
           					FBD_GRP_ID,
           					FBD_DC_AMT - FBD_PI_PO_AMT - FBD_INT_ADJ_AMT,
           					FBD_BILL_NO,
                    ROWID,
                    FBD_DC_AMT  /*** Ver 2.4 ***/
    				FROM 		FBD_FO_BNK_DRCR
    				WHERE  	FBD_XCHNG_CD = :c_xchng_cd
    				AND 		FBD_DC_FLG = :c_cls_out_typ
    				AND 		FBD_PAYIN_DT <= to_date(:c_run_dt, 'dd-Mon-yyyy' )
    				AND 		FBD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
    				AND 		FBD_DC_AMT != FBD_PI_PO_AMT + FBD_INT_ADJ_AMT;
      END;
    END-EXEC;
	}
	else
	{
     fn_userlog( c_ServiceName, "Inside fn_do_ia c_cls_out_typ == DEBIT else part");

    EXEC SQL EXECUTE
      BEGIN
          OPEN :sys_cursor FOR
    				SELECT 	to_char( FBD_TRD_DT , 'dd-Mon-yyyy' ),
           					FBD_GRP_ID,
           					FBD_DC_AMT - FBD_PI_PO_AMT - FBD_INT_ADJ_AMT,
           					FBD_BILL_NO,
                    ROWID,
                    FBD_DC_AMT  /*** Ver 2.4 ***/
    				FROM 		FBD_FO_BNK_DRCR
    				WHERE  	FBD_XCHNG_CD = :c_xchng_cd
    				AND 		FBD_DC_FLG = :c_cls_out_typ
    				AND 		FBD_PAYOUT_DT  <= to_date(:c_run_dt, 'dd-Mon-yyyy' )
    				AND 		FBD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
    				AND 		FBD_DC_AMT != FBD_PI_PO_AMT + FBD_INT_ADJ_AMT;
      END;
    END-EXEC;
	}

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31105",SQLMSG,c_err_msg);
    EXEC SQL FREE :sys_cursor;
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  while(1)
  {
    MEMSET(c_src_rowid); /*** Ver 2.3 ***/
    d_dc_amt=0.0;        /*** Ver 2.4 ***/

    EXEC SQL
      FETCH :sys_cursor
      INTO  :c_trd_dt,
            :i_grp_id,
            :d_amount,
            :c_bill_no,
            :c_src_rowid,  /*** Ver 2.3 ****/
            :d_dc_amt;     /*** Ver 2.4 ***/

    if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "L31110",SQLMSG,c_err_msg);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			return ( -1 );
    }
    else if ( SQLCODE == NO_DATA_FOUND )
    {
      break;
    }
    SETNULL(c_bill_no);

		/** Ver 1.1 FNO-NRI Changes **/
		/*#ifdef DEBUG */	
		if(DEBUG_MSG_LVL_3)
    {
     fn_userlog( c_ServiceName, "Inside fn_do_ia i_grp_id %d",i_grp_id);
		/*#endif */	
		}

		if (i_grp_id == 9)
		{
		/*#ifdef DEBUG */
		 if(DEBUG_MSG_LVL_3)
     {
     	fn_userlog( c_ServiceName, "Inside fn_do_ia GRP_D = 9 ");
     	fn_userlog( c_ServiceName, "Inside fn_do_ia d_amount %lf ",d_amount);
		/*#endif*/
		 }
		 continue;
		}
		else
		{
		/*#ifdef DEBUG */
		if(DEBUG_MSG_LVL_3)
  	{
     fn_userlog( c_ServiceName, "Inside fn_do_ia GRP_D <> 9 ");
     fn_userlog( c_ServiceName, "Inside fn_do_ia d_amount %lf ",d_amount);
		}
		/*#endif*/
		}

		/** Ver change ends **/

    c_lmt_prj_flg = CLS_FOR_INT_ADJ;

    strcpy( st_upd_lmts.c_xchng_cd,c_xchng_cd);
    strcpy( st_upd_lmts.c_cln_mtch_accnt,c_cln_mtch_accnt);
    strcpy( st_upd_lmts.c_trd_dt,c_trd_dt);
    strcpy( st_upd_lmts.c_remarks,c_reference);
    if ( c_cls_out_typ == CREDIT )
    {
		/*#ifdef DEBUG */
		if(DEBUG_MSG_LVL_3)
  	{
			fn_userlog( c_ServiceName, "Debit");
		/*#endif*/
		}
      st_upd_lmts.c_dr_cr_flg = DEBIT;
    }
    else
    {
		/*#ifdef DEBUG */
		 if(DEBUG_MSG_LVL_3)
     {	
			fn_userlog( c_ServiceName, "Credit");
		 }
		/*#endif */
      st_upd_lmts.c_dr_cr_flg = CREDIT;
    }
/*********************************
24-apr-2002
Stand was taken to move to DEBIT_WITHOUT_LIMIT as debit entry for 
pay out could not be passed when the limit is negative or when 
there is a IA of less credit and more debit. More over 
closure entries should always be DEBIT_WITHOUT_LIMIT.
By the way I feel we should have used the function 
fn_pass_cls_entry here would have solved this issue.

    st_upd_lmts.c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;
**********************************/
    st_upd_lmts.c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;
    st_upd_lmts.d_amount = -1.0 * d_amount;

     fn_userlog( c_ServiceName, "Before calling fn_call_upd_limits");

    i_returncode = fn_call_upd_limits(  c_ServiceName,
                                        &st_upd_lmts,
                                        c_err_msg,
                                        i_grp_id,
                                        c_lmt_prj_flg );

     fn_userlog( c_ServiceName, "After calling fn_call_upd_limits");

    if ( i_returncode != 0 )
    {
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      return ( -1 );
    }


     fn_userlog( c_ServiceName, "Before calling fn_upd_bnk_drcr");

    i_returncode = fn_upd_bnk_drcr( c_ServiceName,
                                    c_xchng_cd,
                                    c_cln_mtch_accnt,
                                    c_trd_dt,
                                    c_cls_out_typ,
                                    i_grp_id,
                                    d_amount,
                                    INTERNAL_ADJUSTMENT,
                                    d_dc_amt);/** ver 2.4 **/

    if ( i_returncode != 0 )
    {
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      return ( -1 );
    }


     fn_userlog( c_ServiceName, "After calling fn_upd_bnk_drcr");

     fn_userlog( c_ServiceName, "Before calling fn_ins_adj_dtls");

    i_returncode = fn_ins_adj_dtls( c_xchng_cd ,
                                    c_run_dt ,
                                    (char *)c_bill_no.arr ,
                                    d_amount ,
                                    c_reference,
                                    li_run_no );  /** Ver 1.7 li_run_no Added **/

     fn_userlog( c_ServiceName, "After calling fn_ins_adj_dtls");

    if ( i_returncode != 0 )
    {
      fn_errlog( c_ServiceName, "L31115",LIBMSG,c_err_msg);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      return ( -1 );
    }

     /***** Ver 2.3 Starts ******/

     sprintf (c_run_nmbr, "%ld" ,li_run_no);
     fn_userlog(c_ServiceName," bill number :%s:",c_bill_no.arr);
     c_instrument_typ='\0';
     rtrim(c_src_rowid);
     fn_userlog(c_ServiceName,"----------ROW ID----------- for INT ADJ -1 -----------:%s:",c_src_rowid);
     if(c_cls_out_typ==DEBIT)
     {
       if( strcmp(c_xchng_cd,"NFO")==0)
       {
        strcpy(c_prdct_cd,"NFOOADJ");
       }
       else
       {
        strcpy(c_prdct_cd,"BFOOADJ");
       }
       c_accntng_for='O';
       c_dbcr_flg='C';
     }
     if(c_cls_out_typ==CREDIT)
     {
      if( strcmp(c_xchng_cd,"NFO")==0)
      {
       strcpy(c_prdct_cd,"NFOIADJ");
      }
      else
      {
       strcpy(c_prdct_cd,"BFOIADJ");
      }
      c_accntng_for='I';
      c_dbcr_flg='D';
     }
     strcpy(c_pipo_src,"NA");
     strcpy(c_sgmnt_cd,"NFO");
     strcpy(c_tran_date,c_trd_dt);
     strcpy(c_instrument_nmbr,"");
     strcpy(c_mdc_crdt_nmbr,c_reference);
     strcpy(c_bnk_accn,c_bnk_accnt); 
     sprintf(c_narration,"BEING INTERNAL ADJUSTMENT FOR BILL NO %s",c_bill_no.arr);
     rtrim(c_narration);
     fn_userlog(c_ServiceName,"Narration in mbs :%s:",c_narration);
     strcpy(c_mtch_series,c_bill_no.arr);
     strcpy(c_class_svc,"SFO_BILL_UPLD");
     strcpy(c_accntng_typ,"GENERAL");
     strcpy(c_trace,"");

    if(d_amount<0)
    {
     d_amount=d_amount*-1;
    }

    d_amot_rs=d_amount/100;

    fn_userlog(c_ServiceName,"Bank Account number in internal adjustment :%s:",c_bnk_accn);
    fn_userlog(c_ServiceName,"Source Rowid in in internal adjustment :%s:",c_src_rowid);
    fn_userlog(c_ServiceName," Narration :%s:",c_narration);

    i_returncode = fn_ins_mbs ( c_ServiceName,
                             c_cln_mtch_accnt,
                             c_xchng_cd,
                             c_prdct_cd,
                             c_pipo_src,
                             c_sgmnt_cd,
                             0,
                             c_tran_date,
                             d_amot_rs,
                             c_run_nmbr,
                             c_instrument_nmbr,
                             c_instrument_typ,
                             c_mdc_crdt_nmbr,
                             c_accntng_for,
                             c_accntng_typ,
                             c_trace,
                             c_bnk_accn,
                             c_narration,
                             c_dbcr_flg,  /*ask**/
                             c_mtch_series,
                             c_class_svc,
                             c_src_rowid,
                             c_err_msg,
                             c_model_flg);

  if( i_returncode != 0 )
  {
    fn_userlog(c_ServiceName,"Error in Calling fn_ins_mbs");
    fn_errlog(c_ServiceName,"S31010",LIBMSG,c_err_msg);
    return -1;
  }

  /****** Ver 2.3 Ends *****/





  } /*  while */

  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

  /* Split the payout Amount as Internal Adjustment & Bank Payout */
	d_amt_to_be_clsd = d_ia_amt ;
  fn_userlog(c_ServiceName,"CLS AMT FIRST ASGN ::::::::: %lf ",d_amt_to_be_clsd);

  fn_userlog(c_ServiceName,"c_cls_out_typ bef fn_pass_cls_entry is [%c]",c_cls_out_typ);

  if ( c_cls_out_typ == CREDIT )
  {
    c_dc_flg = DEBIT;
  }
  else
  {
    c_dc_flg = CREDIT;
  }

  fn_userlog(c_ServiceName,"Before calling fn_pass_cls_entry");

	i_returncode = fn_pass_cls_entry ( 	c_ServiceName, 
																			c_err_msg,
               												c_cln_mtch_accnt,
               												c_xchng_cd,
																			c_run_dt,
               												c_tag,
               												c_dc_flg,
																			d_amt_to_be_clsd,
																			INTERNAL_ADJUSTMENT,
																			c_reference ,
                                      li_run_no,   /** Ver 1.7 li_run_no Added **/
                                       'I',        /*** Ver 2.3 ****/
                                      c_bnk_accnt, /*** Ver 2.3 ****/
                                      "",          /*** Ver 2.3 ****/ 
                                      c_model_flg);/*** Ver 2.3 ****/ 
  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "L31120",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }
  fn_userlog(c_ServiceName,"CLS AMT 2ND ASGN ::::::::: %lf ",d_amt_to_be_clsd);

  fn_userlog(c_ServiceName,"After calling fn_pass_cls_entry");

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "L31125",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  return ( 0 );
}


int fn_upd_alloc_dtls ( 	char *c_ServiceName,
               						char *c_err_msg,
               						char *c_cln_mtch_accnt,
               						char *c_bnk_accnt,
               						char *c_tag,
													double	d_bft,
													double	d_alloc)
{
  char c_msg [ 256 ];
  int i_returncode;
 
  char c_ucc_cd[13]; /**ver 2.8**/
  fn_userlog(c_ServiceName,"Inside fn_upd_alloc_dtls before INSERT");

  EXEC SQL
    INSERT INTO FAL_FO_ALCBFT_LOG
    (
     FAL_CLM_MTCH_ACCNT,
     FAL_BNK_ACCNT,
     FAL_ALCTD_AMT,
     FAL_BFT_AMT,
     FAL_TRN_DT
    )
    VALUES
    (
     :c_cln_mtch_accnt,
     :c_bnk_accnt,
     :d_alloc,
     :d_bft,
     SYSDATE
    );
  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31130",SQLMSG,c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }


  fn_userlog(c_ServiceName,"Inside fn_upd_alloc_dtls before UPDATE");

  EXEC SQL
    UPDATE FAB_FO_ALC_BFT_SMRY
    SET    FAB_BFT_AMT = FAB_BFT_AMT + :d_bft,
           FAB_ALCTD_AMT = FAB_ALCTD_AMT + :d_alloc
    WHERE  FAB_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
    AND    FAB_BNK_ACCNT = :c_bnk_accnt;

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog( c_ServiceName, "L31135",SQLMSG,c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return(-1);
  }
  else if( SQLCODE == NO_DATA_FOUND )
	{

  fn_userlog(c_ServiceName,"Before INSERT INTO fab_fo_alc_bft_smry");
     /**ver 2.8 start **/
    MEMSET(c_ucc_cd);
    EXEC SQL
    SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
    INTO :c_ucc_cd
    FROM  CLM_CLNT_MSTR
    WHERE CLM_MTCH_ACCNT =:c_cln_mtch_accnt;

    if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog( c_ServiceName, "L31140",SQLMSG,c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return(-1);
  }
  rtrim(c_ucc_cd);

    /**ver 2.8 ends**/
		EXEC SQL
			INSERT INTO fab_fo_alc_bft_smry
      (
        fab_clm_mtch_accnt,
        fab_bnk_accnt,
        fab_alctd_amt,
        fab_bft_amt,
        fab_ucc_cd /**ver 2.8 **/
      )
      VALUES
      (
        :c_cln_mtch_accnt,
        :c_bnk_accnt,
        :d_alloc,
        :d_bft,
        :c_ucc_cd  /**ver 2.8 **/
      );

		if( SQLCODE != 0 )
		{
			fn_errlog( c_ServiceName, "L31145", SQLMSG, c_err_msg );
    	strcpy ( c_msg, "System error. Contact system support" );
    	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    	return(-1);
    }
  }
  return ( 0 ); /* Added by sangeet because there was no return */
}


int fn_pass_cls_entry ( char *c_ServiceName,
               					char *c_err_msg,
               					char *c_cln_mtch_accnt,
               					char *c_xchng_cd,
												char *c_run_dt,
               					char *c_tag,
               					char c_cls_out_typ,
												double d_amt_to_be_clsd, 
							 					char	c_int_pipo_flg,
												char	*c_reference ,
                        long  li_run_no,   /** Ver 1.7 li_run_no Added **/
                        char  c_mbs_flg,    /** Ver 2.3 **/
                        char  *c_bnk_accnt, /** Ver 2.3 **/
                        char  *c_trace,     /** Ver 2.3 ***/
                        char  c_model_flg) /** Ver 2.3 ***/
{
  char c_msg [ 256 ];
 
  fn_userlog(c_ServiceName,"Inside Pass class entry for MBS Flag :%c",c_mbs_flg);  /** Ver 2.3 **/
  fn_userlog(c_ServiceName,"Model Flag :%c:",c_model_flg);    /** Ver 2.3 ***/
 

  /***  Ver 2.3 Starts  ***/

  char c_bnk_accn[21];
  char c_instrument_typ='\0';

  char c_accntng_typ[20+1];
  char c_prdct_cd[21];
  char c_sgmnt_cd[20+1];
  char c_pipo_src[10];           /* size changed from 3 to 10 in Ver TOL */
  char c_tran_date[23];
  char c_instrument_nmbr[20+1];
  char c_mdc_crdt_nmbr[20+1];
  char c_accntng_for='\0';
  char c_dbcr_flg='\0';
  char c_narration[101];
  char c_mtch_series[51];
  char c_class_svc[20+1];
  char c_src_rowid[20+1];
  char c_run_nmbr[20+1];
  char c_run_nm[20+1];
  char c_tracee[13]; 

  double d_amount_rs=0.0;
  double d_dc_amt=0.0;

  MEMSET(c_bnk_accn);
  MEMSET(c_instrument_typ);
  MEMSET(c_accntng_typ);
  MEMSET(c_prdct_cd);
  MEMSET(c_sgmnt_cd);
  MEMSET(c_pipo_src);
  MEMSET(c_tran_date);
  MEMSET(c_instrument_nmbr);
  MEMSET(c_mdc_crdt_nmbr);
  MEMSET(c_narration);
  MEMSET(c_mtch_series);
  MEMSET(c_class_svc);
  MEMSET(c_src_rowid);
  MEMSET(c_run_nmbr);
  MEMSET(c_run_nm);
  MEMSET(c_tracee);
 
  /**** Ver 2.3 ends *****/


  int i_returncode;
  struct vw_upd_limits st_upd_lmts;
  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;             /* a cursor variable */
  	varchar c_bill_no[51];
  	char 		c_trd_dt[12];
		int 		i_grp_id;
  	double 	d_amount;
  	double 	d_adj_amt;
  	char c_lmt_prj_flg;
  EXEC SQL END DECLARE SECTION;

  EXEC SQL ALLOCATE :sys_cursor;

  fn_userlog(c_ServiceName,"Inside fn_pass_cls_entry");
  fn_userlog(c_ServiceName,"Value of c_cls_out_typ is [%c]",c_cls_out_typ);
  fn_userlog(c_ServiceName,"d_amt_to_be_clsd in fn_pass_cls_entry  is [%lf]",d_amt_to_be_clsd);
  fn_userlog(c_ServiceName,"MBS FLAG :%c:",c_mbs_flg);

	if ( c_cls_out_typ == DEBIT )
	{
  fn_userlog(c_ServiceName,"Inside debit");

    EXEC SQL EXECUTE
      BEGIN
          OPEN :sys_cursor FOR
   					SELECT 	to_char( FBD_TRD_DT , 'dd-Mon-yyyy' ),
          					FBD_GRP_ID,
          					FBD_DC_AMT - FBD_PI_PO_AMT - FBD_INT_ADJ_AMT,
          					FBD_BILL_NO,
                    ROWID,
                    FBD_DC_AMT /** Ver 2.4 **/
   					FROM 		FBD_FO_BNK_DRCR
   					WHERE  	FBD_XCHNG_CD = :c_xchng_cd
   					AND 		FBD_DC_FLG = :c_cls_out_typ
   					AND 		FBD_PAYIN_DT <= to_date(:c_run_dt, 'dd-Mon-yyyy' )
   					AND 		FBD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
   					AND 		FBD_DC_AMT != FBD_PI_PO_AMT + FBD_INT_ADJ_AMT;
      END;
    END-EXEC;
	}
	else
	{
  fn_userlog(c_ServiceName,"Inside else of debit");

    EXEC SQL EXECUTE
      BEGIN
          OPEN :sys_cursor FOR
   					SELECT 	to_char( FBD_TRD_DT , 'dd-Mon-yyyy' ),
          					FBD_GRP_ID,
          					FBD_DC_AMT - FBD_PI_PO_AMT - FBD_INT_ADJ_AMT,
          					FBD_BILL_NO,
                    ROWID,
                    FBD_DC_AMT /** Ver 2.4 **/
   					FROM 		FBD_FO_BNK_DRCR
   					WHERE  	FBD_XCHNG_CD = :c_xchng_cd
   					AND 		FBD_DC_FLG = :c_cls_out_typ
   					AND 		FBD_PAYOUT_DT  <= to_date(:c_run_dt, 'dd-Mon-yyyy' )
   					AND 		FBD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
   					AND 		FBD_DC_AMT != FBD_PI_PO_AMT + FBD_INT_ADJ_AMT;
      END;
    END-EXEC;
	}
  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31150",SQLMSG,c_err_msg);
    EXEC SQL FREE :sys_cursor;
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }
 int counter=0; 

  while( d_amt_to_be_clsd > 0.00F )   /****1.3****/
  {
  	fn_userlog(c_ServiceName,"____________________________________________");
  	fn_userlog(c_ServiceName,"=====================%lf========================",d_amt_to_be_clsd);
  	fn_userlog(c_ServiceName,"=====================%d=========================",counter++);
     
    MEMSET(c_src_rowid);
    d_dc_amt=0.0; /** Ver 2.4 **/
 
    EXEC SQL
      FETCH :sys_cursor
      INTO  :c_trd_dt,
            :i_grp_id,
            :d_adj_amt,
            :c_bill_no,
            :c_src_rowid, /***** Ver 2.3 *******/
            :d_dc_amt;     /***** Ver 2.4 *******/

    if( SQLCODE != 0 )  /* No data found is also a Failure */
    {
      fn_errlog( c_ServiceName, "L31155",SQLMSG,c_err_msg);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      return ( -1 );
    }

    SETNULL(c_bill_no);
	  rtrim(c_src_rowid);

   	fn_userlog(c_ServiceName,"==== d_amt_to_be_clsd >0 <%lf>",d_amt_to_be_clsd);
		fn_userlog(c_ServiceName,"==== d_adj_amt  <%lf>",d_adj_amt);

    if ( d_adj_amt > 0 )
    {
      d_amount = fn_mind( d_adj_amt , d_amt_to_be_clsd );
			fn_userlog(c_ServiceName,"+++++++ d_amount <%lf>",d_amount);
    }
    else
    {
      d_amount = fn_mind( d_adj_amt*-1.0 , d_amt_to_be_clsd );
      d_amount = d_amount * -1.0;
			fn_userlog(c_ServiceName,"------ d_amount <%lf>",d_amount);
    }

		if ( c_int_pipo_flg == INTERNAL_ADJUSTMENT )
		{
    	c_lmt_prj_flg = CLS_FOR_INT_ADJ;

			/*#ifdef DEBUG*/
			if(DEBUG_MSG_LVL_3)
  		{
				fn_userlog( c_ServiceName, "========INTERNAL_ADJUSTMENT =========== ");
			}
			/*#endif*/

			/** Ver 1.1 FNO-NRI Changes **/

			if (i_grp_id == 9)
			{
				/*#ifdef DEBUG*/
				if(DEBUG_MSG_LVL_3)
  			{
			 		fn_userlog( c_ServiceName, "Inside fn_pass_cls_entry GRP_D = 9 ");
				}
			/*	#endif*/
			 continue;
			}
			else
			{
				/*#ifdef DEBUG*/
				if(DEBUG_MSG_LVL_3)
 			  {
					fn_userlog( c_ServiceName, "Inside fn_pass_cls_entry GRP_D <> 9 ");
				}
			/*	#endif */
			}
			/** Ver change ends **/

		}
		else
		{
			/*#ifdef DEBUG*/
			if(DEBUG_MSG_LVL_3)
 			{
				fn_userlog( c_ServiceName, "========CLS_FOR_PIO_ADJ =========== ");
			/*#endif */
		  }
    	c_lmt_prj_flg = CLS_FOR_PIO_ADJ;
		}
		/*#ifdef DEBUG */
		if(DEBUG_MSG_LVL_3)
  	{
			fn_userlog( c_ServiceName, "SN1");
		}
		/*#endif */

    strcpy( st_upd_lmts.c_xchng_cd,c_xchng_cd);
    strcpy( st_upd_lmts.c_cln_mtch_accnt,c_cln_mtch_accnt);
    strcpy( st_upd_lmts.c_trd_dt,c_trd_dt);
    strcpy( st_upd_lmts.c_remarks,c_reference);

		/*#ifdef DEBUG*/
		if(DEBUG_MSG_LVL_3)
  	{
			fn_userlog( c_ServiceName, "SN2");
		}
		/*#endif*/

    if ( c_cls_out_typ == CREDIT )
    {
			/*#ifdef DEBUG */
		if(DEBUG_MSG_LVL_3)
  	{
			fn_userlog( c_ServiceName, "SN3 DB ");
		}
		/*	#endif */
      st_upd_lmts.c_dr_cr_flg = DEBIT;
    }
    else
    {
		/*	#ifdef DEBUG */
		if(DEBUG_MSG_LVL_3)
  	{
			fn_userlog( c_ServiceName, "SN4 CR");
		} /*#endif */
      st_upd_lmts.c_dr_cr_flg = CREDIT;
    }
    st_upd_lmts.c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;

		/*#ifdef DEBUG */
		if(DEBUG_MSG_LVL_3)
  	{
			fn_userlog( c_ServiceName, "SN5");
		}
		/*#endif*/
  
    st_upd_lmts.d_amount = -1.0 * d_amount;

  	fn_userlog(c_ServiceName,"Before calling fn_call_upd_limits-----I");

    i_returncode = fn_call_upd_limits(  c_ServiceName,
                                        &st_upd_lmts,
                                        c_err_msg,
                                        i_grp_id,
                                        c_lmt_prj_flg );

   if ( i_returncode != 0 )
    {
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      return ( -1 );
    }


  fn_userlog(c_ServiceName,"After calling fn_call_upd_limits-----I");

  fn_userlog(c_ServiceName,"Before calling fn_upd_bnk_drcr ----- I");

    i_returncode = fn_upd_bnk_drcr( c_ServiceName,
                                    c_xchng_cd,
                                    c_cln_mtch_accnt,
                                    c_trd_dt,
                                    c_cls_out_typ,
                                    i_grp_id,
                                    d_amount,
                                    c_int_pipo_flg ,
                                    d_dc_amt); /** ver 2.4 **/

    if ( i_returncode != 0 )
    {
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      return ( -1 );
    }


  fn_userlog(c_ServiceName,"After calling fn_upd_bnk_drcr ----- I");

		if ( c_int_pipo_flg == INTERNAL_ADJUSTMENT )
		{

        fn_userlog(c_ServiceName,"Before calling fn_ins_adj_dtls ----- II");

	    i_returncode = fn_ins_adj_dtls( c_xchng_cd ,
																			c_run_dt ,
	                                    (char *)c_bill_no.arr ,
	                                    d_amount , 
																			c_reference ,
                                      li_run_no);  /*** Ver 1.7 li_run_no Added **/
	    if ( i_returncode != 0 )
	    {
	      fn_errlog( c_ServiceName, "L31160",SQLMSG,c_err_msg);
      	EXEC SQL CLOSE :sys_cursor;
      	EXEC SQL FREE :sys_cursor;
	      strcpy ( c_msg, "System error. Contact system support" );
	      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
	      return ( -1 );
	    }
  fn_userlog(c_ServiceName,"After calling fn_ins_adj_dtls ----- II");

		}
		else
		{
  fn_userlog(c_ServiceName,"Before calling fn_ins_pipo_dtls ----- II");

			i_returncode = fn_ins_pipo_dtls(  c_xchng_cd ,
                                        c_run_dt ,
                                        (char *)c_bill_no.arr ,
                                        d_amount ,
                                        c_reference,
                                        li_run_no);  /*** Ver 1.7 li_run_no Added **/  
	    if ( i_returncode != 0 )
	    {
	      fn_errlog( c_ServiceName, "L31165",SQLMSG,c_err_msg);
      	EXEC SQL CLOSE :sys_cursor;
      	EXEC SQL FREE :sys_cursor;
	      strcpy ( c_msg, "System error. Contact system support" );
	      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
	      return ( -1 );
	    }
  fn_userlog(c_ServiceName,"After calling fn_ins_pipo_dtls ----- II");

		}


    /***** Ver 2.3 starts *********/

    MEMSET(c_run_nm);

    sprintf (c_run_nm, "%ld" ,li_run_no);

    fn_userlog(c_ServiceName,"-----------Run number----------------- :%s:",c_run_nm);
    fn_userlog(c_ServiceName,"-----------Reference number ---------- :%s:",c_reference);
    fn_userlog(c_ServiceName,"-----------Row id -------------   :%s:",c_src_rowid);

   if(c_model_flg == 'D')   /**** Deposit Model Parameters ***/
   {
    if ( c_mbs_flg=='W')    
    {
      c_instrument_typ='\0';
      c_accntng_for='I';
      c_dbcr_flg='D';
      sprintf(c_prdct_cd,"%s%c",c_xchng_cd,c_accntng_for);
      fn_userlog(c_ServiceName,"c_prdct_cd :%s:",c_prdct_cd);
     /* strcpy(c_prdct_cd,"NFOI");*/
      strcpy(c_pipo_src,"WALLET");
      strcpy(c_sgmnt_cd,"NFO");
      strcpy(c_tran_date,c_trd_dt);
      strcpy(c_run_nmbr,c_run_nm);
      strcpy(c_instrument_nmbr,c_reference);
      strcpy(c_mdc_crdt_nmbr,"");
      strcpy(c_bnk_accn,c_bnk_accnt);
      sprintf(c_narration,"Being Payin towards NSE :%s",c_trd_dt);
      rtrim(c_narration);
      fn_userlog(c_ServiceName,"Narration in mbs :%s:",c_narration);
      strcpy(c_mtch_series,c_bill_no.arr);
      strcpy(c_class_svc,"SFO_BILL_UPLD");
      strcpy(c_accntng_typ,"GENERAL");
    }
  
    if ( c_mbs_flg=='C')
    {
      c_instrument_typ='\0';
      c_accntng_for='I';
      c_dbcr_flg='D';
      sprintf(c_prdct_cd,"%s%c",c_xchng_cd,c_accntng_for);
      fn_userlog(c_ServiceName,"c_prdct_cd :%s:",c_prdct_cd);
    /*  strcpy(c_prdct_cd,"NFOI");*/
      strcpy(c_pipo_src,"CLEAR_BAL");
      strcpy(c_sgmnt_cd,"NFO");
      strcpy(c_tran_date,c_trd_dt);
      strcpy(c_run_nmbr,c_run_nm);
      strcpy(c_instrument_nmbr,c_reference);
      strcpy(c_mdc_crdt_nmbr,"");
      strcpy(c_bnk_accn,c_bnk_accnt);
      sprintf(c_narration,"Being Payin towards NSE :%s",c_trd_dt);
      rtrim(c_narration);
      fn_userlog(c_ServiceName,"Narration in mbs :%s:",c_narration);
      strcpy(c_mtch_series,c_bill_no.arr);
      strcpy(c_class_svc,"SFO_BILL_UPLD");
      strcpy(c_accntng_typ,"GENERAL");
    }
   }
   else   /**** For Block model  *******/
   {
    if(c_mbs_flg =='B')
    {
     /*****debit on bft ****/
   
      c_instrument_typ='\0';
      c_accntng_for='I';   /****ask ****/
      c_dbcr_flg='D';
      sprintf(c_prdct_cd,"%s%c",c_xchng_cd,c_accntng_for);
      fn_userlog(c_ServiceName,"c_prdct_cd :%s:",c_prdct_cd);
/*      strcpy(c_prdct_cd,"NFOI"); */
      strcpy(c_pipo_src,"DEBIT");
      strcpy(c_sgmnt_cd,"NFO");
      strcpy(c_tran_date,c_trd_dt);
      strcpy(c_run_nmbr,c_run_nm);
      strcpy(c_instrument_nmbr,c_reference);
      strcpy(c_mdc_crdt_nmbr,"");
      strcpy(c_bnk_accn,c_bnk_accnt);
      sprintf(c_narration,"Being Payin towards NSE :%s",c_trd_dt);
      rtrim(c_narration);
      fn_userlog(c_ServiceName,"Narration in mbs :%s:",c_narration);     
      strcpy(c_mtch_series,c_bill_no.arr);
      strcpy(c_class_svc,"SFO_BILL_UPLD");
      strcpy(c_accntng_typ,"GENERAL");

    }
    
    if(c_mbs_flg =='A')
    {
      /*** debit on alloc ****/ 
   
      c_instrument_typ='\0';
      c_accntng_for='I';   /****ask ****/
      c_dbcr_flg='D';
      sprintf(c_prdct_cd,"%s%c",c_xchng_cd,c_accntng_for);
      fn_userlog(c_ServiceName,"c_prdct_cd :%s:",c_prdct_cd);
 /*     strcpy(c_prdct_cd,"NFOI"); */
      strcpy(c_pipo_src,"DEBIT");
      strcpy(c_sgmnt_cd,"NFO");
      strcpy(c_tran_date,c_trd_dt);
      strcpy(c_run_nmbr,c_run_nm);
      strcpy(c_instrument_nmbr,c_reference);
      strcpy(c_mdc_crdt_nmbr,"");
      strcpy(c_bnk_accn,c_bnk_accnt);
      sprintf(c_narration,"Being Payin towards NSE :%s",c_trd_dt);
      rtrim(c_narration);
      fn_userlog(c_ServiceName,"Narration in mbs :%s:",c_narration);
      strcpy(c_mtch_series,c_bill_no.arr);
      strcpy(c_class_svc,"SFO_BILL_UPLD");
      strcpy(c_accntng_typ,"GENERAL");
     

    }
  
    if(c_mbs_flg =='C')
    {
     /** credit and debit to be decided **/ 
 
      c_instrument_typ='\0';
   
      fn_userlog(c_ServiceName,"-------Closeout type--------------- :%c:",c_cls_out_typ);

  
      if(c_cls_out_typ == CREDIT)
      {
       fn_userlog(c_ServiceName,"Inside credit parameters for mbs");
       c_accntng_for='O';   
       c_dbcr_flg='C';
       sprintf(c_prdct_cd,"%s%c",c_xchng_cd,c_accntng_for);
       fn_userlog(c_ServiceName,"c_prdct_cd :%s:",c_prdct_cd);     
   /*    strcpy(c_prdct_cd,"NFOO");*/
       strcpy(c_pipo_src,"CLEAR_BAL");
       sprintf(c_narration,"Being Payout towards NSE :%s",c_trd_dt);
       rtrim(c_narration);
       fn_userlog(c_ServiceName,"Narration in mbs :%s:",c_narration); 
       fn_userlog(c_ServiceName,"-------Inside CASE FOR CREDIT -------------------");


      }
      if(c_cls_out_typ == DEBIT)
      {
       fn_userlog(c_ServiceName,"Inside Debit parameters for mbs");


       c_accntng_for='I';  
       c_dbcr_flg='D';
      sprintf(c_prdct_cd,"%s%c",c_xchng_cd,c_accntng_for);
      fn_userlog(c_ServiceName,"c_prdct_cd :%s:",c_prdct_cd);
 /*      strcpy(c_prdct_cd,"NFOI");*/
       strcpy(c_pipo_src,"DEBIT");
       sprintf(c_narration,"Being Payin towards NSE :%s",c_trd_dt);
       rtrim(c_narration);
       fn_userlog(c_ServiceName,"Narration in mbs :%s:",c_narration);
       fn_userlog(c_ServiceName,"-------Inside CASE FOR DEBIT -------------------");

      }
      strcpy(c_sgmnt_cd,"NFO");
      strcpy(c_tran_date,c_trd_dt);
      fn_userlog(c_ServiceName,"c_run_nm :%s:",c_run_nm);
      strcpy(c_run_nmbr,c_run_nm);
      fn_userlog(c_ServiceName,"c_run_nmbr :%s:",c_run_nmbr);
      strcpy(c_instrument_nmbr,c_reference);
      strcpy(c_mdc_crdt_nmbr,"");
      strcpy(c_bnk_accn,c_bnk_accnt);
      strcpy(c_mtch_series,c_bill_no.arr);
      strcpy(c_class_svc,"SFO_BILL_UPLD");
      strcpy(c_accntng_typ,"GENERAL");
      

    
    }  
     /**** Ver 2.5 Starts here ***/ 
    if ( c_mbs_flg=='W')
    {
      c_instrument_typ='\0';
      c_accntng_for='I';
      c_dbcr_flg='D';
      sprintf(c_prdct_cd,"%s%c",c_xchng_cd,c_accntng_for);
      fn_userlog(c_ServiceName,"c_prdct_cd :%s:",c_prdct_cd);
     /* strcpy(c_prdct_cd,"NFOI");*/
      strcpy(c_pipo_src,"WALLET");
      strcpy(c_sgmnt_cd,"NFO");
      strcpy(c_tran_date,c_trd_dt);
      strcpy(c_run_nmbr,c_run_nm);
      strcpy(c_instrument_nmbr,c_reference);
      strcpy(c_mdc_crdt_nmbr,"");
      strcpy(c_bnk_accn,c_bnk_accnt);
      sprintf(c_narration,"Being Payin towards NSE :%s",c_trd_dt);
      rtrim(c_narration);
      fn_userlog(c_ServiceName,"Narration in mbs :%s:",c_narration);
      strcpy(c_mtch_series,c_bill_no.arr);
      strcpy(c_class_svc,"SFO_BILL_UPLD");
      strcpy(c_accntng_typ,"GENERAL");
    } 
    /**** Ver 2.5 Ends here ****/ 
   }


    if(c_mbs_flg=='I')
    {
       MEMSET(c_prdct_cd);
       MEMSET(c_accntng_for);
       MEMSET(c_dbcr_flg);
       MEMSET(c_instrument_nmbr);
       MEMSET(c_mdc_crdt_nmbr);
       MEMSET(c_narration);
       MEMSET(c_mtch_series);
       MEMSET(c_class_svc);
       MEMSET(c_accntng_typ);
       MEMSET(c_bnk_accn);
       MEMSET(c_trace);
       MEMSET(c_accntng_for);

     if(c_cls_out_typ==DEBIT)
     {
      if( strcmp(c_xchng_cd,"NFO")==0)
      {
       strcpy(c_prdct_cd,"NFOOADJ");
      }
      else
      {
       strcpy(c_prdct_cd,"BFOOADJ");
      }
      c_accntng_for='O';
      c_dbcr_flg='C';
     }

     if(c_cls_out_typ==CREDIT)
     {
      if( strcmp(c_xchng_cd,"NFO")==0)
      {
       strcpy(c_prdct_cd,"NFOIADJ");
      }
      else
      {
        strcpy(c_prdct_cd,"BFOIADJ");
      }
       c_accntng_for='I';
       c_dbcr_flg='D';
     }

     strcpy(c_pipo_src,"NA");
     strcpy(c_sgmnt_cd,"NFO");
     strcpy(c_tran_date,c_trd_dt);
     strcpy(c_instrument_nmbr,"");

     strcpy(c_mdc_crdt_nmbr,c_reference);
     fn_userlog(c_ServiceName,"Bill number :%s:",c_bill_no.arr);
     sprintf(c_narration,"BEING INTERNAL ADJUSTMENT FOR BILL NO %s",c_bill_no.arr); 
     rtrim(c_narration);
     fn_userlog(c_ServiceName,"Narration in mbs :%s:",c_narration);
     strcpy(c_mtch_series,c_bill_no.arr);
     strcpy(c_class_svc,"SFO_BILL_UPLD");
     strcpy(c_accntng_typ,"GENERAL");
     strcpy(c_run_nmbr,c_run_nm);
     strcpy(c_bnk_accn,c_bnk_accnt);
     fn_userlog(c_ServiceName,"---------------BANK ACCOUNT --------------:%s:",c_bnk_accn);
     fn_userlog(c_ServiceName,"--------------- Trace Number -------------%s:",c_trace);
     fn_userlog(c_ServiceName,"--------------Row id ----------------- :%s:",c_src_rowid);

    }

    
    fn_userlog(c_ServiceName,"MBS Flag :%c:",c_mbs_flg);
    fn_userlog(c_ServiceName,"Model Flag :%c:",c_model_flg);
   

    fn_userlog(c_ServiceName,"Instrument type :%c:",c_instrument_typ);


    fn_userlog(c_ServiceName,"Amount in pass class entry  :%lf:",d_amount);

    if(d_amount < 0)
    {
      d_amount_rs = d_amount * -1 ;
      fn_userlog(c_ServiceName," d_amount_rs :%lf:",d_amount_rs);
    }
    else
    {
     d_amount_rs = d_amount;
    }

    fn_userlog(c_ServiceName,"Amount before conversion into rupees :%lf:",d_amount_rs);
    d_amount_rs = (d_amount_rs)/100;
    fn_userlog(c_ServiceName,"Amount after conversion into rupees :%lf:",d_amount_rs);

   fn_userlog(c_ServiceName,"---------- Before calling fn_ins_mbs --------------");
   
 
   fn_userlog(c_ServiceName,"Trace number :%s:",c_trace);
   fn_userlog(c_ServiceName,"Run number :%s:",c_run_nmbr);

   rtrim(c_xchng_cd);
   rtrim(c_prdct_cd);
   rtrim(c_pipo_src);
   rtrim(c_sgmnt_cd);
   rtrim(c_run_nmbr);
   rtrim(c_instrument_nmbr);
   rtrim(c_mdc_crdt_nmbr);
   rtrim(c_narration);
   rtrim(c_class_svc);
   rtrim(c_src_rowid);

   fn_userlog(c_ServiceName,"Transcation date before MBS :%s:",c_tran_date);

 
   if ( (c_mbs_flg!='A') || (c_model_flg=='B'))
   {
    i_returncode = fn_ins_mbs ( c_ServiceName,
                             c_cln_mtch_accnt,
                             c_xchng_cd,
                             c_prdct_cd,
                             c_pipo_src,
                             c_sgmnt_cd,
                             0,
                             c_tran_date,
                             d_amount_rs,
                             c_run_nmbr,
                             c_instrument_nmbr,
                             c_instrument_typ,
                             c_mdc_crdt_nmbr,
                             c_accntng_for ,
                             c_accntng_typ,
                             c_trace,
                             c_bnk_accn,
                             c_narration,
                             c_dbcr_flg,
                             c_mtch_series,
                             c_class_svc,
                             c_src_rowid,
                             c_err_msg,
                             c_model_flg); 

    if( i_returncode != 0 )
    {
      fn_userlog(c_ServiceName,"Error in Calling fn_ins_mbs");
      fn_errlog(c_ServiceName,"S31015",LIBMSG,c_err_msg);
      return -1;
    }
   }

   /***** Ver 2.3 ends *****/


   fn_userlog(c_ServiceName,"----------After calling fn_ins_mbs--------------");
 
    if ( d_adj_amt > 0 )
    {
      d_amt_to_be_clsd = d_amt_to_be_clsd - d_amount;
   		fn_userlog(c_ServiceName," SUB ===%lf======",d_amt_to_be_clsd);

    }
    else
    {
      d_amt_to_be_clsd = d_amt_to_be_clsd + d_amount;
  		fn_userlog(c_ServiceName,"ADD =====%lf======",d_amt_to_be_clsd);
    }
  
    /*** Ver 2.0 Starts Here ***/
    EXEC SQL
    SELECT ROUND(:d_amt_to_be_clsd,2)
      INTO :d_amt_to_be_clsd
      FROM DUAL;
    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "L31170",SQLMSG,c_err_msg);
      EXEC SQL FREE :sys_cursor;
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      return ( -1 );
    }
    /*** Ver 2.0 Ends here **/

  } /*  while d_amt_to_be_clsd < 0 */

  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

	return ( 0 );
}

int fn_do_cr ( char *c_ServiceName,
               char *c_err_msg,
               char *c_cln_mtch_accnt,
               char *c_xchng_cd,
							 char *c_run_dt,
               char *c_tag,
               double d_amt,
               long li_run_no, /** Ver 1.7 li_run_no Added **/
               char *c_bnk_accnt,   /** Ver 2.3 ***/
               char *c_refrnce,  /*** Ver 2.3 ***/
               char c_model_flg) /*** Ver 2.3 ***/ 
{

  char c_msg [ 256 ];
  int i_trnsctn;
  int i_returncode;
 
  char    c_narration[61];  /** Ver 2.3 **/
  char c_sgmnt_cd[4]; /** Ver 2.3 **/
  char c_channel[4]; /** Ver 2.3 **/
  char c_seg_prdct_cd[5]; /** Ver 2.3 **/

  MEMSET(c_narration);   /** Ver 2.3 ***/
  MEMSET(c_sgmnt_cd);    /** Ver 2.3 ***/
  MEMSET(c_channel);     /** Ver 2.3 ***/
  MEMSET(c_seg_prdct_cd); /** Ver 2.3 ***/



  EXEC SQL BEGIN DECLARE SECTION;
  	char 		c_reference[16];
  EXEC SQL END DECLARE SECTION;

  double d_total_alctd_amt=0.0;  /** Ver 2.3 **/


  fn_userlog(c_ServiceName,"Inside fn_do_cr ----- II");

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "L31175", LIBMSG, c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  i_returncode = fn_lock_usr( c_ServiceName, c_cln_mtch_accnt );
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "L31180",LIBMSG,c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  /*** Ver 2.6 starts here ***/
  i_returncode = fn_lock_fno( c_ServiceName, c_cln_mtch_accnt );
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "L31185",LIBMSG,c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }
  /*** ver 2.6 Ends Here ***/

	EXEC SQL
    SELECT to_char(sysdate,'DDMONYYYY')||LPAD(piposeq.nextval,6,0)
    INTO : c_reference
    FROM   DUAL;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "L31190",SQLMSG,c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  fn_userlog(c_ServiceName,"before calling fn_pass_cls_entry ----- III");

  if(  c_model_flg =='B')  /*** Ver 2.3 **/
  {
	 i_returncode = fn_pass_cls_entry ( 	c_ServiceName, 
		  																	c_err_msg,
                												c_cln_mtch_accnt,
                												c_xchng_cd,
				 	  														c_run_dt,
                												c_tag,
                												CREDIT,
							  												d_amt,
								  											PAYIN_PAYOUT,
									  										c_reference ,
                                        li_run_no,   /** Ver 1.7 li_run_no added **/
                                        'C', /** Ver 2.3 **/
                                        c_bnk_accnt, /** Ver 2.3 **/
                                        c_refrnce, /** Ver 2.3 **/
                                        c_model_flg); /*** Ver 2.3 **/

   if ( i_returncode != 0 )
   {
     fn_errlog( c_ServiceName, "L31195",LIBMSG,c_err_msg);
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     strcpy ( c_msg, "System error. Contact system support" );
     fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
     return ( -1 );
   }
  }
 
  fn_userlog(c_ServiceName,"After calling fn_pass_cls_entry ----- III");  

  
  /************** Ver 2.3 starts here ****************/

  /*************  Update Allocation only for Deposit Model  ****************/

  
  if ( c_model_flg =='D')  
  {
     i_returncode = fn_pass_cls_entry (  c_ServiceName,
                                      c_err_msg,
                                      c_cln_mtch_accnt,
                                      c_xchng_cd,
                                      c_run_dt,
                                      c_tag,
                                      CREDIT,
                                      d_amt,
                                      PAYIN_PAYOUT,
                                      c_reference ,
                                      li_run_no,   /** Ver 1.7 li_run_no added **/
                                      'A', /** Ver 2.3 **/
                                      c_bnk_accnt, /** Ver 2.3 **/
                                      "", /** Ver 2.3 **/
                                      c_model_flg); /** Ver 2.3 **/

   if ( i_returncode != 0 )
   {
    fn_errlog( c_ServiceName, "L31200",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
   }


   fn_userlog(c_ServiceName,"Before Calling fn_updt_allctn_dtls ----IV");

   i_returncode = fn_updt_allctn_dtls (  c_ServiceName,
                                       c_err_msg,
                                       c_cln_mtch_accnt,
                                       c_bnk_accnt,
                                       c_tag,
                                       d_amt,
                                       &d_total_alctd_amt );
   if ( i_returncode != 0 )
   {
    fn_errlog( c_ServiceName, "L31205",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
   }

   fn_userlog(c_ServiceName,"After Calling fn_updt_allctn_dtls ----IV");
   fn_userlog(c_ServiceName,"Total allocation amount after fn_updt_allctn_dtls :%lf:",d_total_alctd_amt);

   strcpy(c_sgmnt_cd,c_xchng_cd);
   strcpy(c_channel,"SYS");

    fn_userlog(c_ServiceName,"Before calling fn_ins_seg");
    fn_userlog(c_ServiceName,"Segment code :%s:",c_sgmnt_cd);

    i_returncode = fn_ins_seg_log("system",
                                    0,
                                    c_ServiceName,
                                    c_cln_mtch_accnt,
                                    d_amt*0.01,
                                    'O', /**** To increase allocation **/
                                    c_sgmnt_cd,
                                    d_total_alctd_amt*0.01,
                                   'N',
                                   "SYS",  /**** Channel **/
                                   "Allocate to NFO Segment ",
                                    li_run_no,
                                    "ALLOC",
                                    "LIMIT");


     if(i_returncode!=0)
     {
      fn_userlog(c_ServiceName,"Error in updating segment details");
      fn_errlog(c_ServiceName,"L31210",LIBMSG,c_err_msg);
      return -1;
     }   

  } 



  /*************** Ver 2.3 Ends here *******************/

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "L31215",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  return ( 0 );
}

int fn_do_bft ( char *c_ServiceName,
               	char *c_err_msg,
               	char *c_cln_mtch_accnt,
							 	char *c_bnk_accnt,
               	char *c_tag,
               double d_amt,
               long  li_run_no)   /** Ver 1.7 li_run_no added **/
{

  char c_msg [ 256 ];
  int i_trnsctn;
  int i_returncode;


  fn_userlog(c_ServiceName,"Inside fn_do_bft ----");

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "L31220", LIBMSG, c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  i_returncode = fn_lock_usr( c_ServiceName, c_cln_mtch_accnt );
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "L31225",LIBMSG,c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  /**** Ver 2.6 stsrte here ****/
  i_returncode = fn_lock_fno( c_ServiceName, c_cln_mtch_accnt );
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "L31230",LIBMSG,c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  /**** Ver 2.6 Ends Here ***/
  fn_userlog(c_ServiceName,"Before Calling fn_upd_alloc_dtls ----A");

	i_returncode = fn_upd_alloc_dtls ( 	c_ServiceName, 
																			c_err_msg,
               												c_cln_mtch_accnt,
               												c_bnk_accnt,
               												c_tag,
																			d_amt,
																			0 );
  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "L31235",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  fn_userlog(c_ServiceName,"After Calling fn_upd_alloc_dtls ----A");

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "L31240",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  return ( 0 );
}

/**** Ver 2.5 Starts Here ***/
int fn_do_alloc ( char *c_ServiceName,
                char *c_err_msg,
                char *c_cln_mtch_accnt,
                char *c_bnk_accnt,
                char *c_tag,
               double d_amt,
               long  li_run_no) 
{

  char c_msg [ 256 ];
  int i_trnsctn;
  int i_returncode;


  fn_userlog(c_ServiceName,"Inside fn_do_alloc ----");

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "L31245", LIBMSG, c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  i_returncode = fn_lock_usr( c_ServiceName, c_cln_mtch_accnt );
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "L31250",LIBMSG,c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  /** Ver 2.6 Starts here **/
  i_returncode = fn_lock_fno( c_ServiceName, c_cln_mtch_accnt );
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "L31255",LIBMSG,c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }
  /*** Ver 2.6 Ends Here ***/

  fn_userlog(c_ServiceName,"Before Calling fn_upd_alloc_dtls ----A");

  i_returncode = fn_upd_alloc_dtls (  c_ServiceName,
                                      c_err_msg,
                                      c_cln_mtch_accnt,
                                      c_bnk_accnt,
                                      c_tag,
                                      0,
                                      d_amt );
  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "L31260",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  fn_userlog(c_ServiceName,"After Calling fn_upd_alloc_dtls ----A");

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "L31265",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  return ( 0 );
}

/**** Ver 2.5 Ends Here ****/

int fn_do_db_on_bft ( char *c_ServiceName,
               				char *c_err_msg,
               				char *c_cln_mtch_accnt,
               				char *c_xchng_cd,
							 				char *c_run_dt,
							 				char *c_bnk_accnt,
               				char *c_tag,
               				double d_amt,
                      long li_run_no,   /*** Ver 1.7 li_run_no Added ***/
                      char *c_refrnce,   /*** Ver 2.3 ****/
                      char c_model_flg) /*** Ver 2.3 ***/ 
{

  char c_msg [ 256 ];
  int i_trnsctn;
  int i_returncode;
  EXEC SQL BEGIN DECLARE SECTION;
  	char 		c_reference[16];
  EXEC SQL END DECLARE SECTION;

	EXEC SQL
    SELECT to_char(sysdate,'DDMONYYYY')||LPAD(piposeq.nextval,6,0)
    INTO : c_reference
    FROM   DUAL;

  fn_userlog(c_ServiceName,"Inside fn_do_db_on_bft ----A");

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "L31270",SQLMSG,c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "L31275", LIBMSG, c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  i_returncode = fn_lock_usr( c_ServiceName, c_cln_mtch_accnt );
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "L31280",LIBMSG,c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
 }

 /**** Ver 2.6 Starhs here ***/ 
 i_returncode = fn_lock_fno( c_ServiceName, c_cln_mtch_accnt );
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "L31285",LIBMSG,c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
 }
 /*** Ver 2.6 Ends Here ***/
 
  fn_userlog(c_ServiceName,"Before calling fn_upd_alloc_dtls -- A");

	i_returncode = fn_upd_alloc_dtls ( 	c_ServiceName, 
																			c_err_msg,
               												c_cln_mtch_accnt,
               												c_bnk_accnt,
               												c_tag,
																			d_amt * (-1.0),
																			0 );
  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "L31290",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  fn_userlog(c_ServiceName,"After calling fn_upd_alloc_dtls -- A");
  fn_userlog(c_ServiceName,"Before calling fn_pass_cls_entry -- B");

	i_returncode = fn_pass_cls_entry ( 	c_ServiceName, 
																			c_err_msg,
               												c_cln_mtch_accnt,
               												c_xchng_cd,
																			c_run_dt,
               												c_tag,
               												DEBIT,
																			d_amt,
																			PAYIN_PAYOUT,
																			c_reference ,
                                      li_run_no,  /** Ver 1.7 li_run_no Added **/
                                      'B', /** Ver 2.3 **/
                                      c_bnk_accnt, /** Ver 2.3 **/
                                      c_refrnce, /** Ver 2.3 **/
                                      c_model_flg); /** Ver 2.3 ***/                                        

  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "L31295",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  fn_userlog(c_ServiceName,"After calling fn_pass_cls_entry -- B");

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "L31300",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  return ( 0 );
}

int fn_do_db_on_alloc ( char *c_ServiceName,
               					char *c_err_msg,
               					char *c_cln_mtch_accnt,
               					char *c_xchng_cd,
							 					char *c_run_dt,
							 					char *c_bnk_accnt,
               					char *c_tag,
               					double d_amt,
                        long li_run_no,  /** Ver 1.7 li_run_no Added **/
                        char *c_refrnce,  /*** Ver 2.3 ***/
                        char c_model_flg) /*** Ver 2.3 ***/ 
                        
{

  char c_msg [ 256 ];
  int i_trnsctn;
  int i_returncode;

  char    c_narration[61];  /** Ver 2.3 **/
  char c_sgmnt_cd[4]; /** Ver 2.3 **/
  char c_channel[4]; /** Ver 2.3 **/
  char c_seg_prdct_cd[5]; /** Ver 2.3 **/
  char c_narrtion[101];  /*** Ver 2.3 **/

  MEMSET(c_narrtion);   /*** Ver 2.3 ***/
  MEMSET(c_sgmnt_cd);   /*** Ver 2.3 ***/
  MEMSET(c_channel);    /*** Ver 2.3 ***/
  MEMSET(c_seg_prdct_cd); /*** Ver 2.3 ***/
  MEMSET(c_narration);    /*** Ver 2.3 ***/

  
  double d_tot_alc_amt=0.0; /** Ver 2.3 **/

  EXEC SQL BEGIN DECLARE SECTION;
  	char 		c_reference[16];
  EXEC SQL END DECLARE SECTION;

  fn_userlog(c_ServiceName,"Inside fn_do_db_on_alloc -- C");

	EXEC SQL
    SELECT to_char(sysdate,'DDMONYYYY')||LPAD(piposeq.nextval,6,0)
    INTO : c_reference
    FROM   DUAL;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "L31305",SQLMSG,c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "L31310", LIBMSG, c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  i_returncode = fn_lock_usr( c_ServiceName, c_cln_mtch_accnt );
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "L31315",LIBMSG,c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  /** Ver 2.6 starts here **/
  i_returncode = fn_lock_fno( c_ServiceName, c_cln_mtch_accnt );
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "L31320",LIBMSG,c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }
  /*** Ver 2.6 Ends Here ***/

  fn_userlog(c_ServiceName,"Before calling fn_upd_alloc_dtls -- C");

  if( c_model_flg =='B')  /*** Added in Ver 2.3 ***/
  {
  	i_returncode = fn_upd_alloc_dtls ( 	c_ServiceName, 
	  																		c_err_msg,
                												c_cln_mtch_accnt,
                												c_bnk_accnt,
                												c_tag,
				 	 	    												0,
						 		  											d_amt * (-1.0));
  }
  else
  {
  
    i_returncode = fn_updt_allctn_dtls (  c_ServiceName,
                                          c_err_msg,
                                          c_cln_mtch_accnt,
                                          c_bnk_accnt,
                                          c_tag,
                                          d_amt*(-1.0),
                                          &d_tot_alc_amt );
  }


  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "L31325",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  fn_userlog(c_ServiceName,"After calling fn_upd_alloc_dtls -- C");

	i_returncode = fn_pass_cls_entry ( 	c_ServiceName, 
																			c_err_msg,
               												c_cln_mtch_accnt,
               												c_xchng_cd,
																			c_run_dt,
               												c_tag,
               												DEBIT,
																			d_amt,
																			PAYIN_PAYOUT,
																			c_reference ,
                                      li_run_no,   /*** Ver 1.7 li_run_no Added **/
                                      'A', /** Ver 2.3 **/
                                      c_bnk_accnt, /** Ver 2.3 **/
                                      c_refrnce, /** Ver 2.3 **/
                                      c_model_flg); /** Ver 2.3 ***/

  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "L31330",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  fn_userlog(c_ServiceName,"After calling fn_pass_cls_entry -- C");

  /***** Ver 2.3 starts  ****/

  if( c_model_flg =='D')
  {
     
     sprintf(c_narrtion,"NFO PI %s",c_run_dt);
     rtrim(c_narration);
     fn_userlog(c_ServiceName,"Narration :%s:",c_narration); 
     strcpy(c_sgmnt_cd,c_xchng_cd);
   
     i_returncode = fn_ins_seg_log("system",
                                   0,
                                   c_ServiceName,
                                   c_cln_mtch_accnt,
                                   d_amt*0.01,
                                  'I',
                                   c_sgmnt_cd,
                                   d_tot_alc_amt*0.01,
                                  'N',
                                  "SYS", /**** Channel **/
                                   c_narrtion,
                                   li_run_no,
                                   "DEALLOC",
                                   "LIMIT" );

   if(i_returncode!=0)
   {
    fn_userlog(c_ServiceName,"Error in updating segment details");
    fn_errlog(c_ServiceName,"L31335",LIBMSG,c_err_msg);
    return -1;
   }
  }

  /****** Ver 2.3 ends ******/

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "L31340",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  return ( 0 );
}

int fn_do_db_on_clr_bal ( char *c_ServiceName,
               						char *c_err_msg,
               						char *c_cln_mtch_accnt,
               						char *c_xchng_cd,
							 						char *c_run_dt,
							 						char *c_bnk_accnt,
               						char *c_tag,
               						double d_amt,
                          long  li_run_no, /** Ver 1.7 li_run_no Added **/
                          char *c_refernce, /*** ver 2.3 **/
                          char c_model_flg) /*** Ver 2.3 ***/
{

  char c_msg [ 256 ];
  int i_trnsctn;
  int i_returncode;
  EXEC SQL BEGIN DECLARE SECTION;
  	char 		c_reference[16];
  EXEC SQL END DECLARE SECTION;

  fn_userlog(c_ServiceName,"Inside fn_do_db_on_clr_bal -- C");

	EXEC SQL
    SELECT to_char(sysdate,'DDMONYYYY')||LPAD(piposeq.nextval,6,0)
    INTO : c_reference
    FROM   DUAL;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "L31345",SQLMSG,c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "L31350", LIBMSG, c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  i_returncode = fn_lock_usr( c_ServiceName, c_cln_mtch_accnt );
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "L31355",LIBMSG,c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  /*** Ver 2.6 Starts here ***/
  i_returncode = fn_lock_fno( c_ServiceName, c_cln_mtch_accnt );
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "L31360",LIBMSG,c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  } 
  /*** Ver 2.6 Ends Here ***/
  
  fn_userlog(c_ServiceName,"Inside do_db_on_clr_bal before calling fn_pass_cls_entry");
  fn_userlog(c_ServiceName,"System Trace number is :%s:", c_refernce);


	i_returncode = fn_pass_cls_entry ( 	c_ServiceName, 
																			c_err_msg,
               												c_cln_mtch_accnt,
               												c_xchng_cd,
																			c_run_dt,
               												c_tag,
               												DEBIT,
																			d_amt,
																			PAYIN_PAYOUT,
																			c_reference ,
                                      li_run_no, /*** Ver 1.7 li_run_no Added **/
                                      'C', /** Ver 2.3 **/
                                      c_bnk_accnt, /** Ver 2.3 **/
                                      c_refernce, /** Ver 2.3 **/
                                      c_model_flg); /*** Ver 2.3 ***/                  
                  
  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "L31365",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  fn_userlog(c_ServiceName,"After fn_pass_cls_entry -- D");

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "L31370",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  return ( 0 );
}

int fn_ins_adj_dtls( char *c_xchng_cd , char *c_run_dt , char *c_bill_no ,
                     double d_amount, char *c_reference , long  li_run_no) /** Ver 1.7 li_run_no Added **/
{            /* Add to the existing match bill upload record */

  userlog("Inside fn_ins_adj_dtls");

      EXEC SQL
           UPDATE FBS_FO_BILL_STLMNT
           SET    FBS_INT_ADJ_AMT = FBS_INT_ADJ_AMT + :d_amount
           WHERE  FBS_RUN_DT = :c_run_dt
           AND    FBS_BILL_NO = :c_bill_no
           AND    FBS_INTADJ_RFRNC = :c_reference
           AND    FBS_MTCH_UPLD_FLG = 'N'
           AND    FBS_XCHNG_CD = :c_xchng_cd;    /*** Ver 1.6 ***/

      if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
      {
          return -1;
      }

      if ( SQLCODE == NO_DATA_FOUND )
      {
         /* update if the payout record is there but adj data
          is not present  */

  userlog("STAGE -- D");

          EXEC SQL
             UPDATE FBS_FO_BILL_STLMNT
             SET    FBS_INT_ADJ_AMT = FBS_INT_ADJ_AMT + :d_amount ,
                    FBS_INTADJ_RFRNC = :c_reference
             WHERE  FBS_RUN_DT = :c_run_dt
             AND    FBS_BILL_NO = :c_bill_no
             AND    FBS_MTCH_UPLD_FLG = 'N'
             AND    FBS_INTADJ_RFRNC is NULL
             AND    FBS_XCHNG_CD = :c_xchng_cd;   /*** Ver 1.6 ***/

          if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
          {
             return -2;
          }

          if( SQLCODE == NO_DATA_FOUND )
          {
  userlog("STAGE -- E");

              EXEC SQL
                   INSERT INTO FBS_FO_BILL_STLMNT
                   (
                       FBS_XCHNG_CD,
                       FBS_RUN_DT,
                       FBS_BILL_NO,
                       FBS_INT_ADJ_AMT,
                       FBS_INTADJ_RFRNC,
                       FBS_MTCH_UPLD_FLG,
                       FBS_RUN_NO          /** Ver 1.7 Run No Added **/
                   )
                   VALUES
                   (
                       :c_xchng_cd,
                       :c_run_dt,
                       :c_bill_no,
                       :d_amount,
                       :c_reference,
                       'N',
                       :li_run_no          /** Ver 1.7 Run No Added **/
                   );

             if ( SQLCODE != 0 )
              {
                 return -3;
              }
         }
      }

   return 0;
}

int fn_ins_pipo_dtls( char *c_xchng_cd,
                      char *c_run_dt ,
                      char *c_bill_no ,
                      double d_amount,
                      char *c_reference ,
                      long li_run_no)      /** Ver 1.7 Added **/
{            /* Add to the existing match bill upload record */
  userlog("STAGE -- F");

      EXEC SQL
           UPDATE FBS_FO_BILL_STLMNT
           SET    FBS_PI_PO_AMT = FBS_PI_PO_AMT + :d_amount
           WHERE  FBS_RUN_DT = :c_run_dt
           AND    FBS_BILL_NO = :c_bill_no
           AND    FBS_PIPO_RFRNC = :c_reference
           AND    FBS_MTCH_UPLD_FLG = 'N'
           AND    FBS_XCHNG_CD = :c_xchng_cd;   /*** Ver 1.6 ***/

      if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
      {
          return -1;
      }

      if ( SQLCODE == NO_DATA_FOUND )
      {
         /* update if the payout record is there but adj data
          is not present  */

  userlog("STAGE -- G");

          EXEC SQL
             UPDATE FBS_FO_BILL_STLMNT
             SET    FBS_PI_PO_AMT = FBS_PI_PO_AMT + :d_amount ,
                    FBS_PIPO_RFRNC = :c_reference
             WHERE  FBS_RUN_DT = :c_run_dt
             AND    FBS_BILL_NO = :c_bill_no
             AND    FBS_MTCH_UPLD_FLG = 'N'
             AND    FBS_PIPO_RFRNC is NULL
             AND    FBS_XCHNG_CD = :c_xchng_cd;   /*** Ver 1.6 ***/

          if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
          {
             return -2;
          }
          if( SQLCODE == NO_DATA_FOUND )
          {
  userlog("STAGE -- H");

              EXEC SQL
                   INSERT INTO FBS_FO_BILL_STLMNT
                   (
                       FBS_XCHNG_CD,
                       FBS_RUN_DT,
                       FBS_BILL_NO,
                       FBS_PI_PO_AMT,
                       FBS_PIPO_RFRNC,
                       FBS_MTCH_UPLD_FLG,
                       FBS_RUN_NO             /** Ver 1.7 **/
                   )
                   VALUES
                   (
                       :c_xchng_cd,
                       :c_run_dt,
                       :c_bill_no,
                       :d_amount,
                       :c_reference,
                       'N',
                       :li_run_no             /** Ver 1.7 **/
                   );
              if ( SQLCODE != 0 )
              {
                 return -3;
              }
         }
      }

   return 0;
}

int fn_do_ublk ( 	char *c_ServiceName,
               		char *c_err_msg,
               		char *c_cln_mtch_accnt,
							 		char *c_bnk_accnt,
               		double d_bft_amt,
               		double d_alloc_amt)
{

  int i_trnsctn;
  int i_returncode;

  fn_userlog(c_ServiceName,"STAGE -- I");

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "L31375", LIBMSG, c_err_msg);
    return ( -1 );
  }

  i_returncode = fn_lock_usr( c_ServiceName, c_cln_mtch_accnt );
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "L31380",LIBMSG,c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    return ( -1 );
  }

  /*** Ver 2.6 Starts here ***/
  i_returncode = fn_lock_fno( c_ServiceName, c_cln_mtch_accnt );
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "L31385",LIBMSG,c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    return ( -1 );
  }
  /*** Ver 2.6 Ends Here ***/



  fn_userlog(c_ServiceName,"STAGE -- J");

	i_returncode = fn_upd_alloc_dtls ( 	c_ServiceName, 
																			c_err_msg,
               												c_cln_mtch_accnt,
               												c_bnk_accnt,
               												c_ServiceName,
																			d_bft_amt,
																			d_alloc_amt );
  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "L31390",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return ( -1 );
  }

  fn_userlog(c_ServiceName,"STAGE -- K");

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "L31395",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return ( -1 );
  }

  return ( 0 );
}

/*  Ver 1.4 Starts */

int fn_upd_adm_alloc_dtls (   char *c_ServiceName,
                              char *c_err_msg,
                              char *c_cln_mtch_accnt,
                              char *c_bnk_accnt,
                              char *c_tag,
                              double  d_bft,
                              double  d_alloc,
                              double  d_isec_mrgn,
                              double  d_bse_isec_mrgn,  /*** Ver 1.6 ***/
                              double  *d_tot_alc_amt   /** Added in Ver 2.3 **/ 
                           )
{
  char c_msg [ 256 ];
  int i_returncode;
  int i_trnsctn;
  char    c_narration[61];
  double d_tot_alc_amt_temp = 0.0;    /*** Ver 2.3 ***/

  *d_tot_alc_amt = 0.0;  /** Ver 2.3  **/

  fn_userlog(c_ServiceName,"Inside ADM EBA Update for Match :%s: bnk accnt :%s: BFT:%lf::Alloc:%lf::Isec:%lf:BSE Isec:%lf:",c_cln_mtch_accnt,c_bnk_accnt,d_bft,d_alloc,d_isec_mrgn,d_bse_isec_mrgn );
  if ( d_bft <  0 && d_isec_mrgn > 0 )
  {
   strcpy(c_narration, "UD from BFT & add to NSE Isec Mrgn amt");
  }
  else if(d_alloc < 0 && d_isec_mrgn > 0 )
  {
   strcpy(c_narration, "UD from Allocation & add to NSE Isec Mrgn amt");
  }
  else if ( d_bft <  0 && d_bse_isec_mrgn > 0 )  /** Ver 1.6 **/
  {
   strcpy(c_narration, "UD from BFT & add to BSE Isec Mrgn amt");
  }
  else if(d_alloc < 0 && d_bse_isec_mrgn > 0 )  /** Ver 1.6 **/ 
  {
   strcpy(c_narration, "UD from Allocation & add to BSE Isec Mrgn amt");
  }
  else if(d_alloc >  0 )
  {
   strcpy(c_narration, "Block in Allocation");
  }
  else if ( d_isec_mrgn < 0 )
  {
   strcpy(c_narration, "Release of NSE Isec Margin Amount");
  }
  else if( d_bse_isec_mrgn < 0 )  /** Ver 1.6 **/
  {
   strcpy(c_narration, "Release of BSE Isec Margin Amount");
  }

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "L31400", LIBMSG, c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_userlog(c_ServiceName,"Error in begin tran of fn_upd_adm_alloc_dtls");
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  i_returncode = fn_lock_usr( c_ServiceName, c_cln_mtch_accnt );
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "L31405",LIBMSG,c_err_msg);
    fn_userlog(c_ServiceName,"Error in lock of fn_upd_adm_alloc_dtls");
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }
  /** Ver 2.6 **/ 
  i_returncode = fn_lock_fno( c_ServiceName, c_cln_mtch_accnt );
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "L31410",LIBMSG,c_err_msg);
    fn_userlog(c_ServiceName,"Error in lock of fn_upd_adm_alloc_dtls");
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }
  /** Ver 2.6 Ends ***/ 
  EXEC SQL
    INSERT INTO FAL_FO_ALCBFT_LOG
    (
     FAL_CLM_MTCH_ACCNT,
     FAL_BNK_ACCNT,
     FAL_ALCTD_AMT,
     FAL_BFT_AMT,
     FAL_ISEC_MRGN_AMT,
     FAL_TRN_DT,
     FAL_NARRATION,
     FAL_ISEC_MRGN_AMT_BSE   /*** Ver 1.6 ***/
    )
    VALUES
    (
     :c_cln_mtch_accnt,
     :c_bnk_accnt,
     :d_alloc,
     :d_bft,
     :d_isec_mrgn,
     SYSDATE,
     :c_narration,
     :d_bse_isec_mrgn   /*** Ver 1.6 ***/
    );
  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31415",SQLMSG,c_err_msg);
    fn_userlog(c_ServiceName,"Error in insert in FAL");
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    return ( -1 );
  }

  EXEC SQL
    UPDATE FAB_FO_ALC_BFT_SMRY
    SET    FAB_BFT_AMT = FAB_BFT_AMT + :d_bft,
           FAB_ALCTD_AMT = FAB_ALCTD_AMT + :d_alloc,
           FAB_ISEC_MRGN_AMT = nvl(FAB_ISEC_MRGN_AMT,0) + :d_isec_mrgn,
           FAB_ISEC_MRGN_AMT_BSE = nvl(FAB_ISEC_MRGN_AMT_BSE,0) + :d_bse_isec_mrgn  /*** Ver 1.6 ***/
    WHERE  FAB_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
    AND    FAB_BNK_ACCNT = :c_bnk_accnt
    RETURNING FAB_ALCTD_AMT                     /**  Ver 2.3 **/
    INTO   :d_tot_alc_amt_temp;

  if( SQLCODE != 0 ) 
  {
    fn_errlog( c_ServiceName, "L31420",SQLMSG,c_err_msg);
    fn_userlog(c_ServiceName,"Error in updating FAB");
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    return(-1);
  }

   *d_tot_alc_amt=d_tot_alc_amt_temp;

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "L31425",LIBMSG,c_err_msg);
    fn_userlog(c_ServiceName,"Error in commit tran");
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }


  return ( 0 ); 
}

/*  Ver 1.4 End */

/** Ver 1.8 Start **/

int fn_upd_fdr_dtls ( char *c_ServiceName,
											char *c_err_msg, 
											char *c_cln_mtch_accnt,
                      char *c_fdr_no,
                      double d_old_qlfy_fd_amt,
                      double d_qlfy_fd_amt)
{

  char c_msg [ 256 ];
  int i_returncode;
  int i_trnsctn;
  char c_narration[61];
  char c_ucc_cd[13]; /**ver 2.8 **/
	strcpy(sql_fab_clm_mtch_accnt,c_cln_mtch_accnt);
  fn_userlog(c_ServiceName,"Inside FD Update for Match :%s:",sql_fab_clm_mtch_accnt);

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "L31430", LIBMSG, c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_userlog(c_ServiceName,"Error in begin tran of fn_upd_fdr_dtls");
    return ( -1 );
  }

  i_returncode = fn_lock_usr( c_ServiceName, c_cln_mtch_accnt );
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "L31435",LIBMSG,c_err_msg);
    fn_userlog(c_ServiceName,"Error in lock of fn_upd_fdr_dtls");
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    return ( -1 );
  }
   /** Ver 2.6 **/
  i_returncode = fn_lock_fno( c_ServiceName, c_cln_mtch_accnt );
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "L31440",LIBMSG,c_err_msg);
    fn_userlog(c_ServiceName,"Error in lock of fn_upd_fdr_dtls");
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    return ( -1 );
  }
  /*** Ver 2.6 **/


  EXEC SQL
    SELECT nvl(fab_fdr_amt,0)
    INTO :sql_fab_fdr_amt
    FROM fab_fo_alc_bft_smry
    WHERE FAB_CLM_MTCH_ACCNT = :sql_fab_clm_mtch_accnt;

  if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
    fn_errlog( c_ServiceName, "L31445",SQLMSG,c_err_msg);
    fn_userlog(c_ServiceName,"Error in selecting FAB");
    strcpy ( c_msg, "System error. Contact system support" );
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    return(-1);
  }

  if(SQLCODE == NO_DATA_FOUND)
  {
    sql_fab_fdr_amt = 0;

    EXEC SQL
        SELECT CLB_BNK_ACCT_NMBR
        INTO :sql_fab_bnk_accnt
        FROM CLB_BNK_ACCTS
        WHERE CLB_CLM_MTCH_ACCNT = :sql_fab_clm_mtch_accnt;

    if( SQLCODE != 0)
    {
      fn_errlog( c_ServiceName, "L31450",SQLMSG,c_err_msg);
      fn_userlog(c_ServiceName,"Error in selecting CLB");
      strcpy ( c_msg, "System error. Contact system support" );
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
      return(-1);
    }
    SETNULL(sql_fab_bnk_accnt);

        /**ver 2.8 starts **/
    MEMSET(c_ucc_cd);
    EXEC SQL
    SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
    INTO :c_ucc_cd
    FROM  CLM_CLNT_MSTR
    WHERE CLM_MTCH_ACCNT =:sql_fab_clm_mtch_accnt;

     if( SQLCODE != 0)
     {
       fn_errlog( c_ServiceName, "L31455",SQLMSG,c_err_msg);
       fn_userlog(c_ServiceName,"Error in selecting CLB");
       strcpy ( c_msg, "System error. Contact system support" );
       fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
       return(-1);
     }
    rtrim(c_ucc_cd);
    /**ver 2.8 ends **/

    EXEC SQL
        INSERT INTO FAB_FO_ALC_BFT_SMRY
        (FAB_CLM_MTCH_ACCNT,
        FAB_BNK_ACCNT,
        FAB_ALCTD_AMT,
        FAB_BFT_AMT,
        FAB_PLG_AMT,
        FAB_NWB_AMT,
        FAB_ISEC_MRGN_AMT,
        FAB_ISEC_MRGN_AMT_BSE,
        FAB_FDR_AMT,
        FAB_UCC_CD) /**ver 2.8 **/ 
        VALUES
        (:sql_fab_clm_mtch_accnt,
        :sql_fab_bnk_accnt,
        0,
        0,
        0,
        0,
        0,
        0,
        :sql_fab_fdr_amt,
        :c_ucc_cd); /**ver 2.8 **/
    if( SQLCODE != 0)
    {
      fn_errlog( c_ServiceName, "L31460",SQLMSG,c_err_msg);
      fn_userlog(c_ServiceName,"Error in inserting FAB");
      strcpy ( c_msg, "System error. Contact system support" );
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
      return(-1);
    }

  }

  fn_userlog(c_ServiceName,"Old FD-FAB Amount is :%lf:",sql_fab_fdr_amt);
  fn_userlog(c_ServiceName,"Old FD Amount is :%lf:",d_old_qlfy_fd_amt);

  sql_fal_fdr_chg_amt = (-1) * d_old_qlfy_fd_amt + d_qlfy_fd_amt;

  fn_userlog(c_ServiceName,"Changed FD Amount is :%lf:",sql_fal_fdr_chg_amt);
  fn_userlog(c_ServiceName,"New FD Amount is :%lf:",d_qlfy_fd_amt);

  EXEC SQL
    UPDATE FAB_FO_ALC_BFT_SMRY
    SET fab_fdr_amt = nvl(fab_fdr_amt,0) + :sql_fal_fdr_chg_amt
    WHERE FAB_CLM_MTCH_ACCNT = :sql_fab_clm_mtch_accnt
    RETURNING FAB_BNK_ACCNT,FAB_ALCTD_AMT,FAB_BFT_AMT,FAB_PLG_AMT,FAB_ISEC_MRGN_AMT,FAB_NWB_AMT,FAB_ISEC_MRGN_AMT_BSE
    INTO :sql_fab_bnk_accnt,:sql_fab_alctd_amt,:sql_fab_bft_amt,:sql_fab_plg_amt,:sql_fab_isec_mrgn_amt,:sql_fab_nwb_amt,:sql_fab_isec_mrgn_amt_bse;

  SETNULL(sql_fab_bnk_accnt);

  if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31465",SQLMSG,c_err_msg);
    fn_userlog(c_ServiceName,"Error in updating FAB");
    strcpy ( c_msg, "System error. Contact system support" );
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    return(-1);
  }

	sprintf(c_narration, "Change in FDR Amount for FD :%s:",c_fdr_no);

  EXEC SQL
      INSERT INTO FAL_FO_ALCBFT_LOG(
        FAL_CLM_MTCH_ACCNT,
        FAL_BNK_ACCNT,
        FAL_ALCTD_AMT,
        FAL_BFT_AMT,
        FAL_TRN_DT,
        FAL_OLD_PLG_AMT,
        FAL_NARRATION,
        FAL_NWB_AMT,
        FAL_ISEC_MRGN_AMT,
        FAL_ISEC_MRGN_AMT_BSE,
        FAL_FDR_AMT,
        FAL_FDR_CHG_AMT)
      VALUES
        (:sql_fab_clm_mtch_accnt,
        :sql_fab_bnk_accnt,
        :sql_fab_alctd_amt,
        :sql_fab_bft_amt,
        sysdate,
        :sql_fab_plg_amt,
        :c_narration,
        :sql_fab_nwb_amt,
        :sql_fab_isec_mrgn_amt,
        :sql_fab_isec_mrgn_amt_bse,
        :sql_fab_fdr_amt,
        :sql_fal_fdr_chg_amt);

  if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31470",SQLMSG,c_err_msg);
    fn_userlog(c_ServiceName,"Error in inserting FAL");
    strcpy ( c_msg, "System error. Contact system support" );
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    return(-1);
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "L31475",LIBMSG,c_err_msg);
    fn_userlog(c_ServiceName,"Error in commit tran");
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    return ( -1 );
  }
  return ( 0 );

}

/** Ver 1.8 End **/



/*** Ver 2.3 Starts ****/

int fn_updt_allctn_dtls ( char *c_ServiceName,
                          char *c_err_msg,
                          char *c_cln_mtch_accnt,
                          char *c_bnk_accnt,
                          char *c_tag,
                          double  d_alloc,
                          double  *d_tot_alc_amt)
{
  char c_msg [ 256 ];
  int i_returncode;

  /* (double *)d_tot_alc_amt = 0.0;  */
  *d_tot_alc_amt = 0.0;
  double d_tot_alc_amt_temp = 0.0;
   char c_ucc_cd[13];  /**ver 2.8 **/
  fn_userlog(c_ServiceName,"Inside fn_updt_allctn_dtls before INSERT");

  EXEC SQL
    INSERT INTO FAL_FO_ALCBFT_LOG
    (
     FAL_CLM_MTCH_ACCNT,
     FAL_BNK_ACCNT,
     FAL_ALCTD_AMT,
     FAL_TRN_DT
    )
    VALUES
    (
     :c_cln_mtch_accnt,
     :c_bnk_accnt,
     :d_alloc,
     SYSDATE
    );

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31480",SQLMSG,c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }


  fn_userlog(c_ServiceName,"Inside fn_updt_allctn_dtls before UPDATE");

  EXEC SQL
    UPDATE FAB_FO_ALC_BFT_SMRY
     SET   FAB_ALCTD_AMT = FAB_ALCTD_AMT + :d_alloc
    WHERE  FAB_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
    AND    FAB_BNK_ACCNT = :c_bnk_accnt
    RETURNING FAB_ALCTD_AMT
    INTO   :d_tot_alc_amt;

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog( c_ServiceName, "L31485",SQLMSG,c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return(-1);
  }
  else if( SQLCODE == NO_DATA_FOUND )
  {

  fn_userlog(c_ServiceName,"Before INSERT INTO fab_fo_alc_bft_smry");
  /**ver 2.8 starts**/
    MEMSET(c_ucc_cd);
    EXEC SQL
    SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
    INTO :c_ucc_cd
    FROM  CLM_CLNT_MSTR
    WHERE CLM_MTCH_ACCNT =:c_cln_mtch_accnt;

      if( SQLCODE != 0 )
   {
    fn_errlog( c_ServiceName, "L31490", SQLMSG, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return(-1);
  }
   rtrim(c_ucc_cd);
 /** ver 2.8 ends **/

    EXEC SQL
      INSERT INTO fab_fo_alc_bft_smry
      (
        fab_clm_mtch_accnt,
        fab_bnk_accnt,
        fab_alctd_amt,
        FAB_BFT_AMT,
        FAB_UCC_CD /**ver 2.8 **/
      )
      VALUES
      (
        :c_cln_mtch_accnt,
        :c_bnk_accnt,
        :d_alloc,
        0,
        :c_ucc_cd  /**ver 2.8 **/
      );

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "L31495", SQLMSG, c_err_msg );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      return(-1);
    }
  }
  fn_userlog(c_ServiceName,"After fab update");

  /* *d_tot_alc_amt = d_tot_alc_amt_temp; */

  fn_userlog(c_ServiceName,"Inside fn_updt_allctn_dtls after UPDATE");
  return ( 0 );
}

/*** Ver 2.3 Ends ****/


/***** Ver 2.7 starts ***********/
int fn_lock_usr_nowait ( char c_ServiceName [ 33 ],
                         char c_clm_mtch_accnt [ 10 + 1 ] )
{
  char c_err_msg [ 256 ];
  EXEC SQL BEGIN DECLARE SECTION;
    int sql_count;
    char  sql_clm_mtch_accnt[11] ;
  EXEC SQL END DECLARE SECTION;

  strcpy ( sql_clm_mtch_accnt, c_clm_mtch_accnt );

	fn_userlog(c_ServiceName,"In fn_lock_usr_nowait");

  EXEC SQL
    SELECT 1
    INTO :sql_count
    FROM clm_clnt_mstr
    WHERE clm_mtch_accnt = :sql_clm_mtch_accnt
    FOR UPDATE OF clm_mtch_accnt NOWAIT;

	if ( SQLCODE != 0 )
  {
    if( SQLCODE == DATABASE_LOCK_WTH_NOWAIT )
    {
			fn_errlog( c_ServiceName, "L31500", SQLMSG, c_err_msg );
      return -2;
    }
    else
    {
			fn_errlog( c_ServiceName, "L31505", SQLMSG, c_err_msg );
      return ( -1 );
    }
  }

  return ( 0 ) ;
}

/**** End of Ver 2.7 ****/
