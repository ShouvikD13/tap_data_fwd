/****************************************************************************************************/
/*			New function added fn_chk_closeout by shailesh for FNO NNF 803 							 								*/ 
/* 			Ver 1.1 IBM changes and debug level changes.( SD and RD)  									 								*/
/* 			Ver 1.2 New functions added for Future Plus. (SN and SD) 										 								*/	
/* 			Ver 1.3 Trading Password limit check introduced (Shailesh) 									 								*/	
/* 			Ver 1.4 02-Jan-2009 Extended Market enabled undrlyng &											 								*/ 
/*				                  contract check introduced (Shailesh) 										 								*/	
/* 			Ver 1.5 14-Jan-2009 Contract level check for future plus (Shamili) 					 								*/ 
/* 			Ver 1.6 New function for Derivative Strategy Added (Vidyayini)  			       								*/
/*		  Ver 1.7 16-Apr-2010 Changes for handling encrypted password (Prachi Panhale) 								*/
/*			Ver	1.8	22-Nov-2010	Silver Light Changes	(	Sandeep Patil	)									 								*/
/*      Ver 1.9 30-Aug-2011 CR-ISEC14-18343  Global 	Indices Chanes                 								*/
/*      Ver 2.0 20-Jan-2012 BSE ORS changes                                          								*/
/*      Ver 2.1 27-Jun-2012 Storing ip address (Navina)															 								*/
/*      Ver 2.2 04-Dec-2012 New functions added for SLTP Future Plus.(Bhushan)       								*/
/*      Ver 2.3 20-Dec-2012 Broker closeout changes (Mahesh Shinde)                  								*/
/*      Ver 2.4 28-Jan-2013 Consolidated Order Validation changes  (Swati A.B)       								*/
/*      Ver 2.5 30-Jan-2013 New function added to check Price range in Live feeds    */             /*                          - (Shamili Dalvi)       																 */
/*      Ver 2.6 17-May-2013 New function introduced to calculate Order Qty & Rate   Sandeep Patil  */
/*      Ver 2.7 11-Jun-2013 FNO BSE Closeout/RRM changes (Sandip Tambe )             */
/*      Ver 2.8 18-Jun-2013 Broker Closeout changes(RRM and closeout mode) (Mahesh Shinde)  				*/
/*      Ver 2.9 14-Jun-2013 Changes to allow modification of sqaure-off order when scrip under BAN  */
/*			Ver 3.0 01-Oct-2013 New function added to calculate avg price for option plus(Shailesh S.)  */
/*			Ver 3.1 13-Feb-2014 Price range function check added  for OptionPlus cover order (Shailesh S) */
/*			Ver 3.2 01-Apr-2014 Business Error Message Changed From B21041 To B21057 (Sandeep Patil)		*/
/*      Ver 3.4 02-Dec-2013 VTC Order Placement (Sachin Birje)                                      */
/*      Ver 3.5 24-Mar-2015 Changes in fn_avg_price_cal (Sonu Jalap)                                */ 
/*      Ver 3.7 03-Jul-2015 Contract Master & Trade Quote Merger Changes. ( Anand Dhopte )          */
/*      Ver 3.8 04-Aug-2015 Insider Trading restriction																							*/
/*      Ver 3.9 15-Mar-2016 Transaction Flag in Check Session IP                                    */
/*      Ver 4.0 29-Jun-2016 Check Session IP Common function																				*/
/*      Ver 4.1 05-Jul-2016 Log Maintenance (Navina D.)                                             */
/*      Ver 4.2 29-Aug-2016 Trail future changes(Kishor Borkar)																			*/
/*      Ver 4.3 24-Oct-2016 Check Session IP-PHASE_III(Kishor Borkar)                               */
/*      Ver 4.4 18-Oct-2016 Stop VTC feature (Tanmay Patel)                                         */
/*      Ver 4.6 14-Jun-2018 Disallow clients with outstanding from taking fresh exposure (Anand Dhopte) */
/*      Ver 4.7 18-Mar-2019 Rollover with Spread Changes ( Suchita Dabir )                          */
/*      Ver 4.8 28-Nov-2019 Sensibull (Tanmay Patel)                                                */
/*      Ver 4.9 17-May-2021 CR_ISEC04_152948 Derivative trading restriction(Sandip Tambe)           */
/*      Ver 5.0 12-Jul-2021 Check vendor for mutiple apps of same  vendor                           */
/*      Ver 5.1 12-Jul-2021 Physical settlemet of stock derivative ( Suchita , Kiran )              */ 
/*	Ver 5.2 20-Sep-2022 CR-ISEC04-170088- Derivative trading restriction for Ipru (Agam, Sumanth)*/
/*      Ver TOL 31-Jul-2023 Tux on Linux (Agam)                                                     */
/****************************************************************************************************/

#include <stdio.h>
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo_view_def.h>
#include <fml_def.h>
#include <fo_fml_def.h>     /***  Added In Ver  2.6 ***/
#include <stdlib.h>         /** Ver TOL tux on linux  **/
#include <fml_rout.h>
#include <fo.h>
#include <fn_session.h>
#include <fn_val_ord.h>
#include <userlog.h>										/* Ver 1.1 */
#include <fn_log.h>											/* Ver 1.1 */
#include <fn_read_debug_lvl.h>			 	  /* ver 1.1 -- debug level handling */	
#include <math.h>												/* Ver 2.3 */
#include <time.h>                       /* Ver 4.7 */
#include <ctype.h>                       /* Ver 4.7 */
int Encrypt(char * in, char * out);     /* Ver 1.1 */
EXEC SQL INCLUDE "table/exg_xchng_mstr.h";  /* Ver 2.4 */

#define   TEN_YRS_IN_SEC  315513000 /*** ver 4.7 ***/

/******** Commented in Ver 4.3 *********
int fn_check_user(char *c_ServiceName,
									struct vw_usr_prfl *ptr_st_usr_prfl,
									char *c_usr_psswrd,		
									char c_psswd_req_flg,		
                  struct vw_err_msg *ptr_st_err_msg )	
{

  EXEC SQL BEGIN DECLARE SECTION ;
    varchar c_userid[9] ;
  EXEC SQL END DECLARE SECTION ;

	int i_returncode ;
	int i_rowcount ;
  char  c_temp_psswrd[LEN_USR_TRDNG_PSSWRD];
	varchar v_temp_psswrd[LEN_USR_TRDNG_PSSWRD]; * ver 1.7 *


  i_returncode = fn_chk_sssn( c_ServiceName, ptr_st_usr_prfl,
                                             ptr_st_err_msg ) ;

  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "L31005", LIBMSG,ptr_st_err_msg->c_err_msg );
		return ( -1 ) ;
	}
	
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "c_psswd_req_flg:%c:", c_psswd_req_flg );
	}

	if( c_psswd_req_flg == YES)
	{
    strcpy((char *)c_userid.arr,ptr_st_usr_prfl->c_user_id) ;
    SETLEN(c_userid) ;
	
		v_temp_psswrd.len = strlen(c_usr_psswrd); * ver 1.7 *
    Encrypt(c_usr_psswrd,c_usr_psswrd);
		memcpy(v_temp_psswrd.arr,c_usr_psswrd,v_temp_psswrd.len); * ver 1.7 * 

    i_rowcount = 0;

    EXEC SQL  SELECT  count(*)
              INTO    :i_rowcount
              FROM    usr_user_master
              WHERE   usr_usr_id = :c_userid
              AND    ( usr_usr_psswrd = :c_usr_psswrd
										   OR usr_usr_psswrd = :v_temp_psswrd ); * ver 1.7 *
              *AND     usr_usr_psswrd = :c_temp_psswrd;*
    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
    	fn_errlog( c_ServiceName, "L31010", SQLMSG,ptr_st_err_msg->c_err_msg );
			return ( -1 ) ;
    }

    if(i_rowcount != 1 || SQLCODE == NO_DATA_FOUND)
    {
    	*** fn_errlog( c_ServiceName, "B21041", " ",ptr_st_err_msg->c_err_msg );	Commented In Ver 3.2	***
    	fn_errlog( c_ServiceName, "B21057", " ",ptr_st_err_msg->c_err_msg );	***	Ver 3.2	***
			return ( -1 ) ;
    }
	}
	return ( 0 );
}	
 Comment Ends ***** Ver 4.3 ******/


/*** Ver 4.8 Starts ***/

int  fn_chk_vendor ( char *c_ServiceName,
                     char  *c_user_id,  
                     char  *c_ven_id,
                     char  *c_ven_name,
                     struct vw_err_msg *ptr_st_err_msg )
{

  varchar c_ven_nm[100]; 
  int i_act_chk = 0;

  MEMSET(c_ven_nm); 

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Inside fn_chk_vendor for UserId :%s: VendorId :%s:",c_user_id,c_ven_id);
  }
    
  EXEC SQL
  SELECT UPPER(IAD_INDV_COMP_NAME)
  INTO   :c_ven_nm
  FROM   IAD_IDIRECT_API_DTLS
  WHERE  IAD_ECO_SYS_PRTNR_CD = :c_ven_id
	AND    ROWNUM = 1; /*** Ver 5.0 ***/

  if ( SQLCODE != 0 )
  {
     fn_errlog( c_ServiceName, "L31015", SQLMSG, ptr_st_err_msg->c_err_msg );
     return -1;
  }

  strcpy(c_ven_name,c_ven_nm.arr);
  fn_userlog(c_ServiceName," Vendor Name :%s:",c_ven_name); 

  return 1;
} 

int fn_chk_vendor_validity( char   *c_ServiceName,
                            char   *c_user_id,
                            struct vw_err_msg *ptr_st_err_msg )
{

		int i_act_chk = 0;

    fn_userlog(c_ServiceName,"Inside fn_chk_vendor_validity for c_userid :%s:",c_user_id);

    EXEC SQL
     SELECT count(1)
     INTO   :i_act_chk
     FROM   ACP_API_CURR_PLAN
     WHERE  ACP_ACTV_FLG ='A'
     AND    ACP_USER_ID  =:c_user_id ;

    if ( SQLCODE != 0 )
    {
       fn_errlog( c_ServiceName, "L31020", SQLMSG, ptr_st_err_msg->c_err_msg );
       return -1;
    }

    if (i_act_chk == 0)
    {
       fn_userlog( c_ServiceName, "User is not active for any plan..");
       fn_errlog( c_ServiceName, "B31080", "DEFMSG", ptr_st_err_msg->c_err_msg );
       return -1 ;
    }

		fn_userlog(c_ServiceName,"Vender_chk Successfull.");
		return 1;
}


int fn_chk_sensibull_tnc( char   *c_ServiceName,
                          char   *c_user_id,
                          struct vw_err_msg *ptr_st_err_msg )
{
	char c_fno_accpt_flg = '\0';
	char c_sen_accpt_flg = '\0';

	fn_userlog(c_ServiceName,"Inside fn_chk_sensibull_tnc for c_userid :%s:",c_user_id);

	EXEC SQL
		SELECT	NVL(USR_FNO_ACCPT_FLG,'N'),
						NVL(USR_SEN_ACCPT_FLG,'N')
		INTO		:c_fno_accpt_flg,
						:c_sen_accpt_flg
		FROM	USR_USER_MASTER
		WHERE	USR_USR_ID = :c_user_id;

	if ( SQLCODE != 0 )
	{
		fn_errlog( c_ServiceName, "L31025", SQLMSG, ptr_st_err_msg->c_err_msg );
		return -1;
	}

	if(c_fno_accpt_flg != 'Y' )
	{
		fn_errlog( c_ServiceName, "B31017", "DEFMSG", ptr_st_err_msg->c_err_msg );
		return -1 ;
	}
	else if(c_sen_accpt_flg != 'Y')
  {
    fn_errlog( c_ServiceName, "B99996", "DEFMSG", ptr_st_err_msg->c_err_msg );
    return -1 ;
  }
	fn_userlog(c_ServiceName,"TNC check successfull");
	return 1;
}
/*** Ver 4.8 Ends ***/

/*** Ver 4.6 Starts ***/

int fn_disallow_frsh_expsre( char *c_ServiceName,
                             char *c_cln_mtch_accnt,
                             char c_spn_flg,
                             char c_ord_flw,
                             long l_ord_qty,
														 long l_old_ord_qty,	
                             struct vw_contract *ptr_st_cntrct,
                             struct vw_err_msg *ptr_st_err_msg )
{
  
  char c_sqroff_mode_flag = 'N'; 
  char c_opnpstn_flw = 'N';
  long l_opnpstn_qty = 0;
  long l_ibuy_qty = 0;
  long l_isell_qty = 0;


  if(DEBUG_MSG_LVL_3)
  { 
   fn_userlog(c_ServiceName,"Inside function fn_frsh_expsre_restrict"); 
   fn_userlog(c_ServiceName,"ptr_st_cntrct->c_prd_typ :%c:", ptr_st_cntrct->c_prd_typ);
   fn_userlog(c_ServiceName,"ptr_st_cntrct->c_xchng_cd :%s:", ptr_st_cntrct->c_xchng_cd);
   fn_userlog(c_ServiceName,"ptr_st_cntrct->c_undrlyng :%s:", ptr_st_cntrct->c_undrlyng);
   fn_userlog(c_ServiceName,"ptr_st_cntrct->c_expry_dt :%s:", ptr_st_cntrct->c_expry_dt);
   fn_userlog(c_ServiceName,"ptr_st_cntrct->c_opt_typ :%c:", ptr_st_cntrct->c_opt_typ);
   fn_userlog(c_ServiceName,"ptr_st_cntrct->l_strike_prc :%ld:", ptr_st_cntrct->l_strike_prc);
   fn_userlog(c_ServiceName,"ptr_st_cntrct->c_exrc_typ :%c:", ptr_st_cntrct->c_exrc_typ); 
   fn_userlog(c_ServiceName,"c_cln_mtch_accnt :%s:", c_cln_mtch_accnt); 
   fn_userlog(c_ServiceName,"c_ord_flw :%c:", c_ord_flw);
   fn_userlog(c_ServiceName,"c_spn_flg :%c:", c_spn_flg);
   fn_userlog(c_ServiceName,"l_old_ord_qty :%ld:",l_old_ord_qty);
   fn_userlog(c_ServiceName,"c_sqroff_mode_flag :%c:", c_sqroff_mode_flag);
  } 

  EXEC SQL
  SELECT NVL(CLM_SQRFMD_STTS,'N')
    INTO :c_sqroff_mode_flag 
		FROM CLM_CLNT_MSTR
	 WHERE CLM_MTCH_ACCNT = :c_cln_mtch_accnt;

   if ( SQLCODE != 0 )
   {
     fn_errlog( c_ServiceName, "S31015", SQLMSG, ptr_st_err_msg->c_err_msg );
     strcpy(ptr_st_err_msg->c_err_msg, "Error in fetching SquareOff mode flag for FNO");
     return -1;
   } 

  if(DEBUG_MSG_LVL_3)
  {
   fn_userlog(c_ServiceName,"c_sqroff_mode_flag :%c:", c_sqroff_mode_flag);
  }
  if(c_sqroff_mode_flag == 'Y')
  {
 
	 if ( ptr_st_cntrct->c_prd_typ == 'U' || ptr_st_cntrct->c_prd_typ == 'I' )
	 {
    fn_userlog(c_ServiceName,"Inside Product Type U or I"); 
    fn_errlog( c_ServiceName, "B31076", " ", ptr_st_err_msg->c_err_msg );
    return -2 ; 
	 }

   if ( c_spn_flg == 'Y' && ptr_st_cntrct->c_prd_typ != 'P' )
   {  
    if(DEBUG_MSG_LVL_3)
    { 
     fn_userlog(c_ServiceName,"Inside SPAN FLAG Y and Product Type != P "); 
    }
 
       EXEC SQL 
       SELECT NVL(FCP_OPNPSTN_FLW,'N'),
              ABS(NVL(FCP_OPNPSTN_QTY,0)),
              GREATEST(NVL(ABS(FCP_IBUY_QTY),0),NVL(ABS(FCP_EXBUY_QTY),0)),
              GREATEST(NVL(ABS(FCP_ISELL_QTY),0),NVL(ABS(FCP_EXSELL_QTY),0))
         INTO :c_opnpstn_flw,
              :l_opnpstn_qty,
              :l_ibuy_qty,
              :l_isell_qty
         FROM FCP_FO_SPN_CNTRCT_PSTN
        WHERE FCP_CLM_MTCH_ACCNT= :c_cln_mtch_accnt 
          AND FCP_XCHNG_CD = :ptr_st_cntrct->c_xchng_cd
          AND FCP_PRDCT_TYP = :ptr_st_cntrct->c_prd_typ 
          AND FCP_UNDRLYNG = :ptr_st_cntrct->c_undrlyng
          AND FCP_EXPRY_DT= :ptr_st_cntrct->c_expry_dt
          AND FCP_EXER_TYP = :ptr_st_cntrct->c_exrc_typ
          AND FCP_OPT_TYP = :ptr_st_cntrct->c_opt_typ
          AND FCP_STRK_PRC = :ptr_st_cntrct->l_strike_prc
          AND FCP_OPNPSTN_FLW != 'N' ;

   }
   else if ( c_spn_flg == 'N' || ptr_st_cntrct->c_prd_typ == 'P' )
   {
    if ( ptr_st_cntrct->c_prd_typ == 'F' || ptr_st_cntrct->c_prd_typ == 'P' )
    {
      if(DEBUG_MSG_LVL_3)
      { 
       fn_userlog(c_ServiceName,"Inside SPAN FLAG N and Product Type P or F "); 
      }

         EXEC SQL
         SELECT NVL(FFP_OPNPSTN_FLW,'N'),
  		  		    NVL(ABS(FFP_OPNPSTN_QTY),0),
      				  GREATEST(NVL(ABS(FFP_IBUY_QTY),0), NVL(ABS(FFP_EXBUY_QTY),0)),
     					  GREATEST(NVL(ABS(FFP_ISELL_QTY),0),NVL(ABS(FFP_EXSELL_QTY),0))
           INTO :c_opnpstn_flw,
                :l_opnpstn_qty,
                :l_ibuy_qty,
                :l_isell_qty
           FROM FFP_FO_FUTURES_PSTN
  				WHERE FFP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt 
  				  AND FFP_XCHNG_CD = :ptr_st_cntrct->c_xchng_cd 
            AND FFP_PRDCT_TYP = :ptr_st_cntrct->c_prd_typ 
            AND FFP_UNDRLYNG = :ptr_st_cntrct->c_undrlyng
            AND FFP_EXPRY_DT = :ptr_st_cntrct->c_expry_dt
            AND FFP_OPNPSTN_FLW != 'N' ;
 
   }
   else if ( ptr_st_cntrct->c_prd_typ == 'O' )
   {
       if(DEBUG_MSG_LVL_3)
       {
        fn_userlog(c_ServiceName,"Inside SPAN FLAG N and Product Type O "); 
       }
 
         EXEC SQL
         SELECT NVL(FOP_OPNPSTN_FLW,'N'),
    	   		 	  NVL(ABS(FOP_OPNPSTN_QTY),0),
      					GREATEST(NVL(ABS(FOP_IBUY_QTY),0),NVL(ABS(FOP_EXBUY_QTY),0)),
      					GREATEST(NVL(ABS(FOP_ISELL_QTY),0),NVL(ABS(FOP_EXSELL_QTY),0))
           INTO :c_opnpstn_flw,
                :l_opnpstn_qty,
                :l_ibuy_qty,
                :l_isell_qty 
           FROM FOP_FO_OPTIONS_PSTN
					WHERE FOP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt 
					  AND FOP_XCHNG_CD = :ptr_st_cntrct->c_xchng_cd 
						AND FOP_PRDCT_TYP = :ptr_st_cntrct->c_prd_typ
						AND FOP_UNDRLYNG = :ptr_st_cntrct->c_undrlyng
            AND FOP_EXPRY_DT = :ptr_st_cntrct->c_expry_dt
            AND FOP_EXER_TYP = :ptr_st_cntrct->c_exrc_typ
						AND FOP_OPT_TYP = :ptr_st_cntrct->c_opt_typ 
						AND FOP_STRK_PRC = :ptr_st_cntrct->l_strike_prc 
						AND FOP_OPNPSTN_FLW !='N' ; 
    }
   } 

   if( SQLCODE != 0 )
   {
     if(SQLCODE == NO_DATA_FOUND)
     {
       fn_errlog( c_ServiceName, "B31076", " ", ptr_st_err_msg->c_err_msg );
       return -2;
     }
     fn_errlog( c_ServiceName, "S31015", SQLMSG, ptr_st_err_msg->c_err_msg );
     strcpy(ptr_st_err_msg->c_err_msg, "Error in fetching Position Details");
     return -1;
   }
  
   if(DEBUG_MSG_LVL_3)
   {   
    fn_userlog(c_ServiceName,"c_opnpstn_flw :%c:", c_opnpstn_flw);
    fn_userlog(c_ServiceName,"l_opnpstn_qty :%ld:", l_opnpstn_qty);
    fn_userlog(c_ServiceName,"l_ibuy_qty :%ld:", l_ibuy_qty);
    fn_userlog(c_ServiceName,"l_isell_qty :%ld:", l_isell_qty); 
   }

   /*** Check if it is Fresh Order ***/
   if ( c_ord_flw == c_opnpstn_flw || l_opnpstn_qty == 0)
   {
     fn_errlog( c_ServiceName, "B31076", " ", ptr_st_err_msg->c_err_msg );
     return -2; 
   }
   /*** If Sell position, then check if SquareOff qty(pending buy qty + SquareOff qty) is less than                                  or equal to open position qty ***/ 
   else if ( c_ord_flw == 'B' && ((l_ibuy_qty - l_old_ord_qty + l_ord_qty) > l_opnpstn_qty) ) 
   {
     fn_errlog( c_ServiceName, "B31076"," ",  ptr_st_err_msg->c_err_msg );
     return -2;
   }
   /*** If Buy Position, then check if SquareOff qty(pending buy qty + SquareOff qty) is less than 
        or equal to open position qty ***/ 
   else if ( c_ord_flw == 'S' && ((l_isell_qty - l_old_ord_qty + l_ord_qty) > l_opnpstn_qty) )
   {
     fn_errlog( c_ServiceName, "B31076", " ", ptr_st_err_msg->c_err_msg );
     return -2; 
   }
  }
  else
  fn_userlog(c_ServiceName,"SquareOff mode check successful."); 
  return 1;  
}

/*** Ver 4.6 Ends ***/

/*** Ver 5.1 starts ****/

int fn_disallow_frsh_ordr( char *c_ServiceName,
                             char *c_cln_mtch_accnt,
                             char c_spn_flg,
                             char c_ord_flw,
                             long l_ord_qty,
                             struct vw_contract *ptr_st_cntrct,
                             struct vw_err_msg *ptr_st_err_msg )
{

  char c_sqroff_mode_flag = 'N';
  char c_opnpstn_flw = 'N';
  long l_opnpstn_qty = 0;
  long l_ibuy_qty = 0;
  long l_isell_qty = 0;
  long l_cvr_qty = 0;
  int  i_count = 0;

  if(DEBUG_MSG_LVL_3)
  {
   fn_userlog(c_ServiceName,"Inside function fn_frsh_ordr_restrict");
   fn_userlog(c_ServiceName,"ptr_st_cntrct->c_prd_typ :%c:", ptr_st_cntrct->c_prd_typ);
   fn_userlog(c_ServiceName,"ptr_st_cntrct->c_xchng_cd :%s:", ptr_st_cntrct->c_xchng_cd);
   fn_userlog(c_ServiceName,"ptr_st_cntrct->c_undrlyng :%s:", ptr_st_cntrct->c_undrlyng);
   fn_userlog(c_ServiceName,"ptr_st_cntrct->c_expry_dt :%s:", ptr_st_cntrct->c_expry_dt);
   fn_userlog(c_ServiceName,"ptr_st_cntrct->c_opt_typ :%c:", ptr_st_cntrct->c_opt_typ);
   fn_userlog(c_ServiceName,"ptr_st_cntrct->l_strike_prc :%ld:", ptr_st_cntrct->l_strike_prc);
   fn_userlog(c_ServiceName,"ptr_st_cntrct->c_exrc_typ :%c:", ptr_st_cntrct->c_exrc_typ);
   fn_userlog(c_ServiceName,"c_cln_mtch_accnt :%s:", c_cln_mtch_accnt);
   fn_userlog(c_ServiceName,"c_ord_flw :%c:", c_ord_flw);
   fn_userlog(c_ServiceName,"c_spn_flg :%c:", c_spn_flg);
  }

  if ( c_spn_flg == 'N' )
  {
    if( ptr_st_cntrct->c_prd_typ == 'F' )
    {
      EXEC SQL
        select  count(rowid)
        into    :i_count
        from    FFP_FO_FUTURES_PSTN
        where   FFP_XCHNG_CD        =:ptr_st_cntrct->c_xchng_cd
        and     FFP_CLM_MTCH_ACCNT  =:c_cln_mtch_accnt
        and     FFP_PRDCT_TYP       =:ptr_st_cntrct->c_prd_typ
        and     FFP_UNDRLYNG        =:ptr_st_cntrct->c_undrlyng
        and     FFP_EXPRY_DT        =:ptr_st_cntrct->c_expry_dt
        and     FFP_DLVRY_MODE_FLAG ='Y'
        and     (NVL(FFP_DLVRY_OBLGAMT_BLCKD,0)>0
        OR      NVL(FFP_DLVRY_QTY_BLCKD,0)>0);
    }
    else if( ptr_st_cntrct->c_prd_typ == 'O' )
    {
      EXEC SQL
        select  count(rowid)
        into    :i_count
        from    FOP_FO_OPTIONS_PSTN
        where   FOP_XCHNG_CD        =:ptr_st_cntrct->c_xchng_cd
        and     FOP_CLM_MTCH_ACCNT  =:c_cln_mtch_accnt
        and     FOP_PRDCT_TYP       =:ptr_st_cntrct->c_prd_typ
        and     FOP_UNDRLYNG        =:ptr_st_cntrct->c_undrlyng
        and     FOP_EXPRY_DT        =:ptr_st_cntrct->c_expry_dt
        and     FOP_DLVRY_MODE_FLAG ='Y'
        and     FOP_OPT_TYP         =:ptr_st_cntrct->c_opt_typ
        and     FOP_STRK_PRC        =:ptr_st_cntrct->l_strike_prc
        and     (NVL(FOP_DLVRY_OBLGAMT_BLCKD,0)>0
        OR      NVL(FOP_DLVRY_QTY_BLCKD,0)>0);
    }
  }
  else if ( c_spn_flg == 'Y' )
  {
    EXEC SQL
        select  count(rowid)
        into    :i_count
        from    FCP_FO_SPN_CNTRCT_PSTN
        where   FCP_XCHNG_CD        =:ptr_st_cntrct->c_xchng_cd
        and     FCP_CLM_MTCH_ACCNT  =:c_cln_mtch_accnt
        and     FCP_PRDCT_TYP       =:ptr_st_cntrct->c_prd_typ
        and     FCP_UNDRLYNG        =:ptr_st_cntrct->c_undrlyng
        and     FCP_EXPRY_DT        =:ptr_st_cntrct->c_expry_dt
        and     FCP_OPT_TYP         =:ptr_st_cntrct->c_opt_typ
        and     FCP_STRK_PRC        =:ptr_st_cntrct->l_strike_prc
        and     FCP_DLVRY_MODE_FLAG ='Y'
        and     (NVL(FCP_DLVRY_OBLGAMT_BLCKD,0)>0
        OR      NVL(FCP_DLVRY_QTY_BLCKD,0)>0);
  }

  if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31015", SQLMSG, ptr_st_err_msg->c_err_msg );
    strcpy(ptr_st_err_msg->c_err_msg, "Error in fetching Position Details");
    return -1;
  }

  fn_userlog(c_ServiceName,"i_count :%d:",i_count);

  if ( i_count != 0 )
  {
    if ( c_spn_flg == 'Y' )
    {
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside SPAN FLAG Y");
      }

       EXEC SQL
       SELECT NVL(FCP_OPNPSTN_FLW,'N'),
              ABS(NVL(FCP_OPNPSTN_QTY,0)),
              DECODE(FCP_OPNPSTN_FLW,'S',GREATEST(ABS(FCP_IBUY_QTY),ABS(FCP_EXBUY_QTY)),'B',GREATEST( ABS(FCP_ISELL_QTY), ABS(FCP_EXSELL_QTY)),0)
         INTO :c_opnpstn_flw,
              :l_opnpstn_qty,
              :l_cvr_qty
         FROM FCP_FO_SPN_CNTRCT_PSTN
        WHERE FCP_CLM_MTCH_ACCNT= :c_cln_mtch_accnt
          AND FCP_XCHNG_CD = :ptr_st_cntrct->c_xchng_cd
          AND FCP_PRDCT_TYP = :ptr_st_cntrct->c_prd_typ
          AND FCP_UNDRLYNG = :ptr_st_cntrct->c_undrlyng
          AND FCP_EXPRY_DT= :ptr_st_cntrct->c_expry_dt
          AND FCP_EXER_TYP = :ptr_st_cntrct->c_exrc_typ
          AND FCP_OPT_TYP = :ptr_st_cntrct->c_opt_typ
          AND FCP_STRK_PRC = :ptr_st_cntrct->l_strike_prc
          AND FCP_OPNPSTN_FLW != 'N' ;

   }
   else if ( c_spn_flg == 'N' )
   {
    if ( ptr_st_cntrct->c_prd_typ == 'F' )
    {
      if(DEBUG_MSG_LVL_3)
      {
       fn_userlog(c_ServiceName,"Inside SPAN FLAG N and Product Type F ");
      }

         EXEC SQL
         SELECT NVL(FFP_OPNPSTN_FLW,'N'),
                NVL(ABS(FFP_OPNPSTN_QTY),0),
                DECODE(FFP_OPNPSTN_FLW,'S',GREATEST(ABS(FFP_IBUY_QTY),ABS(FFP_EXBUY_QTY)),'B',GREATEST( ABS(FFP_ISELL_QTY), ABS(FFP_EXSELL_QTY)),0)
           INTO :c_opnpstn_flw,
                :l_opnpstn_qty,
                :l_cvr_qty
           FROM FFP_FO_FUTURES_PSTN
          WHERE FFP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
            AND FFP_XCHNG_CD = :ptr_st_cntrct->c_xchng_cd
            AND FFP_PRDCT_TYP = :ptr_st_cntrct->c_prd_typ
            AND FFP_UNDRLYNG = :ptr_st_cntrct->c_undrlyng
            AND FFP_EXPRY_DT = :ptr_st_cntrct->c_expry_dt
            AND FFP_OPNPSTN_FLW != 'N' ;

   }
   else if ( ptr_st_cntrct->c_prd_typ == 'O' )
   {
       if(DEBUG_MSG_LVL_3)
       {
        fn_userlog(c_ServiceName,"Inside SPAN FLAG N and Product Type O ");
       }

         EXEC SQL
         SELECT NVL(FOP_OPNPSTN_FLW,'N'),
                NVL(ABS(FOP_OPNPSTN_QTY),0),
                DECODE(FOP_OPNPSTN_FLW,'S',GREATEST(ABS(FOP_IBUY_QTY),ABS(FOP_EXBUY_QTY)),'B',GREATEST( ABS(FOP_ISELL_QTY), ABS(FOP_EXSELL_QTY)),0)
           INTO :c_opnpstn_flw,
                :l_opnpstn_qty,
                :l_cvr_qty
           FROM FOP_FO_OPTIONS_PSTN
          WHERE FOP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
            AND FOP_XCHNG_CD = :ptr_st_cntrct->c_xchng_cd
            AND FOP_PRDCT_TYP = :ptr_st_cntrct->c_prd_typ
            AND FOP_UNDRLYNG = :ptr_st_cntrct->c_undrlyng
            AND FOP_EXPRY_DT = :ptr_st_cntrct->c_expry_dt
            AND FOP_EXER_TYP = :ptr_st_cntrct->c_exrc_typ
            AND FOP_OPT_TYP = :ptr_st_cntrct->c_opt_typ
            AND FOP_STRK_PRC = :ptr_st_cntrct->l_strike_prc
            AND FOP_OPNPSTN_FLW !='N' ;
     }
   }


   if( SQLCODE != 0 )
   {
     if(SQLCODE == NO_DATA_FOUND)
     {
       fn_errlog( c_ServiceName, "B31086", " ", ptr_st_err_msg->c_err_msg);
       return -1;
     }
     fn_errlog( c_ServiceName, "S31020", SQLMSG, ptr_st_err_msg->c_err_msg );
     strcpy(ptr_st_err_msg->c_err_msg, "Error in fetching Position Details");
     return -1;
   }

   if(DEBUG_MSG_LVL_3)
   {
    fn_userlog(c_ServiceName,"c_opnpstn_flw :%c:", c_opnpstn_flw);
    fn_userlog(c_ServiceName,"l_opnpstn_qty :%ld:", l_opnpstn_qty);
    fn_userlog(c_ServiceName,"l_ibuy_qty :%ld:", l_ibuy_qty);
    fn_userlog(c_ServiceName,"l_isell_qty :%ld:", l_isell_qty);
   }

   /*strcpy(ptr_st_err_msg->c_err_msg,"Currently you can not place order for this contract"); */

   if ( l_opnpstn_qty < ( l_ord_qty + l_cvr_qty ) )
   {
      fn_errlog( c_ServiceName, "B31086", " ", ptr_st_err_msg->c_err_msg);
      return -1;
   }
   if ( c_opnpstn_flw == c_ord_flw )
   {
      fn_errlog( c_ServiceName, "B31086", " ", ptr_st_err_msg->c_err_msg);
      return -1;
   }

  }
  return 1;
}

/*** Ver 5.1 ends ****/

/*** Ver 2.1 starts here ***/
int fn_check_user_ip (char *c_ServiceName,
											struct vw_usr_prfl *ptr_st_usr_prfl,
											char *c_usr_psswrd,		
											char c_psswd_req_flg,
											char *c_ip_address,
                      char c_txn_flg,                 /*** Ver 3.9 ***/
											struct vw_err_msg *ptr_st_err_msg )	
{
  EXEC SQL BEGIN DECLARE SECTION ;
    varchar c_userid[9] ;
		char		c_mtch_accnt[11] ;		/** Ver 4.0 **/
    int     sql_count ;						/** Ver 4.0 **/
  EXEC SQL END DECLARE SECTION ;

	int i_returncode ;
	int i_rowcount ;
  char  c_temp_psswrd[LEN_USR_TRDNG_PSSWRD];
	varchar v_temp_psswrd[LEN_USR_TRDNG_PSSWRD]; 

	/*** Ver 3.9 **/
	if(DEBUG_MSG_LVL_3)
	{
    fn_userlog( c_ServiceName, "Value of c_txn_flg :%c:",c_txn_flg); 
	}
	/*** Ver 3.9 **/

	/*** Commented for Ver 4.0 ****
 i_returncode = fn_chk_sssn_ip( c_ServiceName, ptr_st_usr_prfl, ptr_st_err_msg, c_ip_address,c_txn_flg ) ;  *** c_txn_flg added in Ver 3.9 ***

  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "L31030", LIBMSG,ptr_st_err_msg->c_err_msg );
		return ( -1 ) ;
	}
	*** Comment end for Ver 4.0 ***/

	/*** Added for Ver 4.0 ***/
	if (!(ptr_st_usr_prfl->l_usr_flg == 1 || 
				((strcmp(ptr_st_usr_prfl->c_user_id, DEF_USR) == 0) && (ptr_st_usr_prfl->l_session_id == DEF_SSSN))))
	{

		strcpy((char *)c_userid.arr,ptr_st_usr_prfl->c_user_id) ;
		SETLEN(c_userid) ;
		strcpy( c_mtch_accnt, ptr_st_usr_prfl->c_cln_mtch_accnt) ;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName,"EBA User id :%s:", ptr_st_usr_prfl->c_user_id );
			fn_userlog( c_ServiceName,"EBA session id :%ld:", ptr_st_usr_prfl->l_session_id );
			fn_userlog( c_ServiceName,"EBA Match a/c :%s:", ptr_st_usr_prfl->c_cln_mtch_accnt );
			fn_userlog( c_ServiceName, "Value of c_txn_flg :%c:",c_txn_flg);
		}

		i_returncode = chk_sssn_ip_fo( c_ServiceName,
																	ptr_st_usr_prfl->c_user_id,
																	ptr_st_usr_prfl->l_session_id,
																	c_ip_address,
																	c_txn_flg,	
																	ptr_st_err_msg->c_err_msg
																) ;

		if( i_returncode == -1 )
		{
			fn_errlog( c_ServiceName, "B21001", LIBMSG, ptr_st_err_msg->c_err_msg );
			return (-1) ;
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName,"Inside ffn_check_user_ip c_ip_address = :%s:",c_ip_address);  
		}

		if ( strcmp(ptr_st_usr_prfl->c_cln_mtch_accnt,"*") == 0 || strcmp(ptr_st_usr_prfl->c_cln_mtch_accnt,"ALL") == 0 )
		{
			ptr_st_usr_prfl->l_usr_flg = 1 ;
		}
		else
		{
			if(ptr_st_usr_prfl->c_user_id[0] == BPID)
			{
				fn_userlog( c_ServiceName,"User id INSIDE BP is :%s:", ptr_st_usr_prfl->c_user_id );

				EXEC SQL 	SELECT 1
									INTO 	:sql_count
									FROM	CLM_CLNT_MSTR
									WHERE	CLM_MTCH_ACCNT = 	:c_mtch_accnt
									AND		CLM_BP_ID			 =	:c_userid;

				if( SQLCODE != 0 )
				{
					if(SQLCODE == NO_DATA_FOUND)
					{
						fn_errlog( c_ServiceName, "B28512", " ", ptr_st_err_msg->c_err_msg );
						/*#ifdef DEBUG */
						if(DEBUG_MSG_LVL_3)
						{
							fn_userlog( c_ServiceName,"Error mesage :%s:",ptr_st_err_msg->c_err_msg );
						}
						 /* #endif */
						return ( -1 );
					}
					else
					{
						fn_errlog( c_ServiceName, "L31035", SQLMSG, ptr_st_err_msg->c_err_msg );
						return ( -1 );
					}
				}

			}
			else if(ptr_st_usr_prfl->c_user_id[0] != BPID)
			{
				fn_userlog( c_ServiceName,"User id INSIDE NON BP is :%s:", ptr_st_usr_prfl->c_user_id );

				EXEC SQL 	SELECT 1
									INTO 	:sql_count
									FROM 	UAC_USR_ACCNTS
									WHERE UAC_USR_ID 					= :c_userid 
									AND	 	UAC_CLM_MTCH_ACCNT 	= :c_mtch_accnt;

				if( SQLCODE != 0 )
				{
					if(SQLCODE == NO_DATA_FOUND)
					{
						fn_errlog( c_ServiceName, "B28512", " ", ptr_st_err_msg->c_err_msg );
						/*#ifdef DEBUG */
						if(DEBUG_MSG_LVL_3)
						{
							fn_userlog( c_ServiceName,"Error mesage :%s:", ptr_st_err_msg->c_err_msg );
						}
						/*#endif */
						return ( -1 );
					}
					else
					{
						fn_errlog( c_ServiceName, "L31040", SQLMSG, ptr_st_err_msg->c_err_msg );
						return ( -1 );
					}
				}
			}

			if(sql_count == 1)	
			{
				ptr_st_usr_prfl->l_usr_flg = 1 ;
			}
		}
	}
	/*** End for Ver 4.0 ***/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName,"Inside fn_check_user_ip c_ip_address = :%s:",c_ip_address);
		fn_userlog( c_ServiceName, "c_psswd_req_flg:%c:", c_psswd_req_flg );
	}

	if( c_psswd_req_flg == YES)
	{
    strcpy((char *)c_userid.arr,ptr_st_usr_prfl->c_user_id) ;
    SETLEN(c_userid) ;
	
		v_temp_psswrd.len = strlen(c_usr_psswrd);
    Encrypt(c_usr_psswrd,c_usr_psswrd);
		memcpy(v_temp_psswrd.arr,c_usr_psswrd,v_temp_psswrd.len);

    i_rowcount = 0;

    EXEC SQL  SELECT  count(*)
              INTO    :i_rowcount
              FROM    usr_user_master
              WHERE   usr_usr_id = :c_userid
              AND    ( usr_usr_psswrd = :c_usr_psswrd
										   OR usr_usr_psswrd = :v_temp_psswrd );
    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
    	fn_errlog( c_ServiceName, "L31045", SQLMSG,ptr_st_err_msg->c_err_msg );
			return ( -1 ) ;
    }

    if(i_rowcount != 1 || SQLCODE == NO_DATA_FOUND)
    {
    	/**fn_errlog( c_ServiceName, "B21041", " ",ptr_st_err_msg->c_err_msg ); Commented In Ver 3.2	***/
    	fn_errlog( c_ServiceName, "B21057", " ",ptr_st_err_msg->c_err_msg );			/***	Added In Ver 3.2	***/
			return ( -1 ) ;
    }
	}
	return ( 0 );
}	
/*** Ver 2.1 Ends here ***/

int fn_chk_cntrct(char * c_ServiceName,
									struct vw_contract *ptr_st_cntrct,
									char *c_fum_mkt_typ,					/*ver 1.4 */
									char *c_fcm_mkt_typ,					/*Ver 1.4 */
                  struct vw_err_msg *ptr_st_err_msg )	
{

  EXEC SQL BEGIN DECLARE SECTION ;
    char 	c_exchng_cd[4];
		char	c_prdct_type;
		char	c_underlyng[7];
		char	c_exercise_type ;
    varchar c_expiry_dt[ LEN_DATE ];
		char	c_option_type ;
		long	l_strike_price ;
		int		i_rec_exists ;
		char	c_qt_trdng_flg ;
		char	c_act_stts ;
		char  c_fum_mrkt_typ;			/*Ver 1.4 */
		char  c_fcm_mrkt_typ;			/*Ver 1.4 */
  EXEC SQL END DECLARE SECTION ;


	strcpy(c_exchng_cd,ptr_st_cntrct->c_xchng_cd);
	c_prdct_type = ptr_st_cntrct->c_prd_typ ;
	strcpy(c_underlyng,ptr_st_cntrct->c_undrlyng);
	c_exercise_type = ptr_st_cntrct->c_exrc_typ ;
	c_option_type = ptr_st_cntrct->c_opt_typ ;
	l_strike_price = ptr_st_cntrct->l_strike_prc ;
  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_cntrct->c_expry_dt );
  SETLEN ( c_expiry_dt );
	rtrim ( (char *)c_expiry_dt.arr );

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "c_exchng_cd:%s:", c_exchng_cd );
		fn_userlog( c_ServiceName, "c_prdct_type:%c:",c_prdct_type);
		fn_userlog( c_ServiceName, "c_underlyng:%s:", c_underlyng );
		fn_userlog( c_ServiceName, "c_expiry_dt:%s", c_expiry_dt.arr );
		fn_userlog( c_ServiceName, "c_exercise_type:%c:", c_exercise_type );
		fn_userlog( c_ServiceName, "c_option_type:%c:", c_option_type);
		fn_userlog( c_ServiceName, "l_strike_price:%ld:", l_strike_price ); 
	}

	i_rec_exists = 0 ;
 
/**Commented for Ver 1.4	
  EXEC SQL
		SELECT  1
		INTO 		:i_rec_exists
		FROM 	 dual	
		WHERE 	EXISTS
		(SELECT 1
		 FROM 	fum_fo_undrlyng_mstr
		 WHERE  fum_xchng_cd =  :c_exchng_cd
		 AND  	fum_prdct_typ = decode(:c_prdct_type,'P','F',:c_prdct_type)     * Ver 1.2 * 
		 AND 		fum_undrlyng =  :c_underlyng
		 AND 		fum_qt_trdng_flg = 'T');
*****/

/**Added in Ver 1.4 ***/
  EXEC SQL
		SELECT  1,
						fum_mrkt_typ
		INTO    :i_rec_exists,
						:c_fum_mrkt_typ
		 FROM 	fum_fo_undrlyng_mstr
		 WHERE  fum_xchng_cd =  :c_exchng_cd
		 AND  	fum_prdct_typ = decode(:c_prdct_type,'P','F',:c_prdct_type)     /* Ver 1.2 */ 
		 AND 		fum_undrlyng =  :c_underlyng
		 AND 		fum_qt_trdng_flg = 'T';

    if( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
    	fn_errlog( c_ServiceName, "L31050", SQLMSG,ptr_st_err_msg->c_err_msg );
			return ( -1 ) ;
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "c_fum_mrkt_typ:%c:", c_fum_mrkt_typ);
		}
		
    if( (i_rec_exists != 1 ) || ( SQLCODE == NO_DATA_FOUND) )
    {
    	fn_errlog( c_ServiceName, "B28513", DEFMSG,ptr_st_err_msg->c_err_msg );
		  /***  return ( -1 ) ; Commeneted In Ver 2.9 ***/
      return ( -2 ) ;     /*** Ver 2.9 ***/	
    }
	
		*c_fum_mkt_typ	= c_fum_mrkt_typ;																				/*Ver 1.4 */

  /*** Commented In Ver 3.7  ***

  EXEC SQL
		SELECT fcm_qt_trdng_flg,
					 fcm_act_stts,
					 fcm_mrkt_typ
		INTO	 :c_qt_trdng_flg,
					 :c_act_stts,
					 :c_fcm_mrkt_typ																										*Ver 1.4 *
		FROM 	 fcm_fo_cntrct_mstr
		WHERE 	fcm_xchng_cd = :c_exchng_cd
		AND 		fcm_prdct_typ = decode(:c_prdct_type,'P','F',:c_prdct_type)        * Ver 1.2* 
		AND 		fcm_undrlyng = :c_underlyng
		AND 	 	fcm_expry_dt = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
		AND 		fcm_exer_typ = :c_exercise_type
		AND 		fcm_opt_typ =  :c_option_type
		AND 		fcm_strk_prc = :l_strike_price; 

   *** Ver 3.7 Comment Ends ***/

  /*** Ver 3.7 Starts ***/

  EXEC SQL
    SELECT ftq_qt_trdng_flg,
           ftq_act_stts,
           ftq_mrkt_typ
    INTO   :c_qt_trdng_flg,
           :c_act_stts,
           :c_fcm_mrkt_typ
    FROM   ftq_fo_trd_qt
    WHERE   ftq_xchng_cd = :c_exchng_cd
    AND     ftq_prdct_typ = decode(:c_prdct_type,'P','F',:c_prdct_type)
    AND     ftq_undrlyng = :c_underlyng
    AND     ftq_expry_dt = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
    AND     ftq_exer_typ = :c_exercise_type
    AND     ftq_opt_typ =  :c_option_type
    AND     ftq_strk_prc = :l_strike_price;

  /*** Ver 3.7 Ends ***/

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
    	fn_errlog( c_ServiceName, "L31055", SQLMSG,ptr_st_err_msg->c_err_msg );
			return ( -1 ) ;
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "c_fcm_mrkt_typ:%c:", c_fcm_mrkt_typ);
		}

    if( ( c_qt_trdng_flg != 'T' ) || ( SQLCODE == NO_DATA_FOUND ) )
    {
    	fn_errlog( c_ServiceName, "B28514", " ",ptr_st_err_msg->c_err_msg );
			return ( -1 ) ;
    }

    if( c_act_stts != 'A' )
    {
    	fn_errlog( c_ServiceName, "B28515", " ",ptr_st_err_msg->c_err_msg );
			return ( -1 ) ;
    }

		*c_fcm_mkt_typ	= c_fcm_mrkt_typ;																				/*Ver 1.4 */

		return ( 0 );
}

/*********  Ver 4.2 Starts ************/

int fn_chk_trail_cntrct(char * c_ServiceName,
				  struct vw_contract *ptr_st_cntrct,
          char c_usr_flg,
				  char *c_fum_mkt_typ,
				  char *c_fcm_mkt_typ,
          struct vw_err_msg *ptr_st_err_msg )	
{

  EXEC SQL BEGIN DECLARE SECTION ;
    char 	c_exchng_cd[4];
		char	c_prdct_type;
		char	c_underlyng[7];
		char	c_exercise_type ;
    varchar c_expiry_dt[ LEN_DATE ];
		char	c_option_type ;
		long	l_strike_price ;
		int		i_rec_exists ;
		char	c_qt_trdng_flg ;
		char	c_act_stts ;
		char  c_fum_mrkt_typ;	
		char  c_fcm_mrkt_typ;
		char  c_ftq_trail_flg;	
    char  c_fum_qt_trdng_flg;
    char  c_fum_sltp_trail_flg;
  EXEC SQL END DECLARE SECTION ;


	strcpy(c_exchng_cd,ptr_st_cntrct->c_xchng_cd);
	c_prdct_type = ptr_st_cntrct->c_prd_typ ;
	strcpy(c_underlyng,ptr_st_cntrct->c_undrlyng);
	c_exercise_type = ptr_st_cntrct->c_exrc_typ ;
	c_option_type = ptr_st_cntrct->c_opt_typ ;
	l_strike_price = ptr_st_cntrct->l_strike_prc ;
  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_cntrct->c_expry_dt );
  SETLEN ( c_expiry_dt );
	rtrim ( (char *)c_expiry_dt.arr );

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "c_exchng_cd:%s:", c_exchng_cd );
		fn_userlog( c_ServiceName, "c_prdct_type:%c:",c_prdct_type);
		fn_userlog( c_ServiceName, "c_underlyng:%s:", c_underlyng );
		fn_userlog( c_ServiceName, "c_expiry_dt:%s", c_expiry_dt.arr );
		fn_userlog( c_ServiceName, "c_exercise_type:%c:", c_exercise_type );
		fn_userlog( c_ServiceName, "c_option_type:%c:", c_option_type);
		fn_userlog( c_ServiceName, "l_strike_price:%ld:", l_strike_price ); 
	}

	i_rec_exists = 0 ;
 
  EXEC SQL
		SELECT  1,
				fum_mrkt_typ,
        NVL(fum_qt_trdng_flg,'Q'),
        NVL(fum_sltp_trail_flg,'N')
		INTO    :i_rec_exists,
						:c_fum_mrkt_typ,
            :c_fum_qt_trdng_flg,
            :c_fum_sltp_trail_flg
		 FROM 	fum_fo_undrlyng_mstr
		 WHERE  fum_xchng_cd =  :c_exchng_cd
		 AND  	fum_prdct_typ = decode(:c_prdct_type,'P','F',:c_prdct_type)     /* Ver 1.2 */ 
		 AND 		fum_undrlyng =  :c_underlyng;

    if( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
    	fn_errlog( c_ServiceName, "L31060", SQLMSG,ptr_st_err_msg->c_err_msg );
			return ( -1 ) ;
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "c_fum_mrkt_typ:%c:", c_fum_mrkt_typ);
		}
		
		MEMSET(ptr_st_err_msg->c_err_msg);

    if(c_usr_flg == 'P')
    {
      if(c_fum_qt_trdng_flg != 'T')
      {
     		fn_errlog( c_ServiceName, "L31065", "You cannot place orders as this underlying is disabled",ptr_st_err_msg->c_err_msg );
        strcpy( ptr_st_err_msg->c_err_msg, "You cannot place orders as this underlying is disabled" );
        return ( -2 ) ;
      }

      if(c_fum_sltp_trail_flg != 'Y')
      {
    		fn_errlog( c_ServiceName, "L31070", "You cannot place orders as Price Improvement Order is not allowed in this underlying",ptr_st_err_msg->c_err_msg);
				strcpy( ptr_st_err_msg->c_err_msg, "You cannot place orders as Price Improvement Order is not allowed in this underlying");
        return ( -2 ) ;
      }
    }
    else if(c_usr_flg == 'M')
    {
      if(c_fum_qt_trdng_flg != 'T')
      {
    		fn_errlog( c_ServiceName, "L31075", "Currently this Underlying has been disabled and you cannot modify the order. You may please cancel your order.",ptr_st_err_msg->c_err_msg );
      	strcpy( ptr_st_err_msg->c_err_msg, "Currently this Underlying has been disabled and you cannot modify the order. You may please cancel your order.");
        return ( -2 ) ;
      }

      if(c_fum_sltp_trail_flg != 'Y')
      {
    		fn_errlog( c_ServiceName, "L31080", "Currently Price Improvement Order in this Underlying has been disabled and you cannot modify the order. You may please cancel your order.",ptr_st_err_msg->c_err_msg);
       	strcpy( ptr_st_err_msg->c_err_msg, "Currently Price Improvement Order in this Underlying has been disabled and you cannot modify the order. You may please cancel your order.");
        return ( -2 ) ;
      }
    }

    if( (i_rec_exists != 1 ) || ( SQLCODE == NO_DATA_FOUND) )
    {
    	fn_errlog( c_ServiceName, "B28513", DEFMSG,ptr_st_err_msg->c_err_msg );
      return ( -2 ) ; 
    }
	
		*c_fum_mkt_typ	= c_fum_mrkt_typ;																				/*Ver 1.4 */

	EXEC SQL
    SELECT ftq_qt_trdng_flg,
           ftq_act_stts,
           ftq_mrkt_typ,
		       NVL(FTQ_TRAIL_FLG,'N')	
    INTO   :c_qt_trdng_flg,
           :c_act_stts,
           :c_fcm_mrkt_typ,
		   		 :c_ftq_trail_flg	
    FROM   ftq_fo_trd_qt
    WHERE   ftq_xchng_cd = :c_exchng_cd
    AND     ftq_prdct_typ = decode(:c_prdct_type,'P','F',:c_prdct_type)     
    AND     ftq_undrlyng = :c_underlyng
    AND     ftq_expry_dt = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
    AND     ftq_exer_typ = :c_exercise_type
    AND     ftq_opt_typ =  :c_option_type
    AND     ftq_strk_prc = :l_strike_price;


    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
    	fn_errlog( c_ServiceName, "L31085", SQLMSG,ptr_st_err_msg->c_err_msg );
			return ( -1 ) ;
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "c_fcm_mrkt_typ:%c:", c_fcm_mrkt_typ);
		}

    if(  (c_qt_trdng_flg != 'T') ||  (c_ftq_trail_flg != 'Y') || ( SQLCODE == NO_DATA_FOUND)  )
    {
    	fn_errlog( c_ServiceName, "B28514", " ",ptr_st_err_msg->c_err_msg );
			return ( -1 ) ;
    }

    if( c_act_stts != 'A' )
    {
    	fn_errlog( c_ServiceName, "B28515", " ",ptr_st_err_msg->c_err_msg );
			return ( -1 ) ;
    }

		*c_fcm_mkt_typ	= c_fcm_mrkt_typ;																				/*Ver 1.4 */

		return ( 0 );
}
/*********  Ver 4.2 Ends   ************/

/*********  Ver 1.2 Starts ************/

int fn_chk_cntrctfp(char * c_ServiceName,
                  struct vw_contract *ptr_st_cntrct,
									char *c_fum_mkt_typ,								/*ver 1.4 */
									char *c_fcm_mkt_typ,								/*ver 1.4 */
                  struct vw_err_msg *ptr_st_err_msg )
{

  EXEC SQL BEGIN DECLARE SECTION ;
    char  c_exchng_cd[4];
    char  c_prdct_type;
    char  c_underlyng[7];
    char  c_exercise_type ;
    varchar c_expiry_dt[ LEN_DATE ];
    char  c_option_type ;
    long  l_strike_price ;
    int   i_rec_exists ;
    char  c_qt_trdng_flg ;
    char  c_act_stts ;
		char  c_fum_mrkt_typ;							/*Ver 1.4 */
		char  c_fcm_mrkt_typ;							/*Ver 1.4 */
		char  c_fcm_fp_qt_trdng_flg;			/*Ver 1.5*/
  EXEC SQL END DECLARE SECTION ;

	strcpy(c_exchng_cd,ptr_st_cntrct->c_xchng_cd);
  c_prdct_type = ptr_st_cntrct->c_prd_typ ;
  strcpy(c_underlyng,ptr_st_cntrct->c_undrlyng);
  c_exercise_type = ptr_st_cntrct->c_exrc_typ ;
  c_option_type = ptr_st_cntrct->c_opt_typ ;
  l_strike_price = ptr_st_cntrct->l_strike_prc ;
  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_cntrct->c_expry_dt );
  SETLEN ( c_expiry_dt );
	rtrim ( (char *)c_expiry_dt.arr );

	if(DEBUG_MSG_LVL_3){
    fn_userlog( c_ServiceName, "c_exchng_cd:%s:", c_exchng_cd );
    fn_userlog( c_ServiceName, "c_prdct_type:%c:",c_prdct_type);
    fn_userlog( c_ServiceName, "c_underlyng:%s:", c_underlyng );
    fn_userlog( c_ServiceName, "c_expiry_dt:%s", c_expiry_dt.arr );
    fn_userlog( c_ServiceName, "c_exercise_type:%c:", c_exercise_type );
    fn_userlog( c_ServiceName, "c_option_type:%c:", c_option_type);
    fn_userlog( c_ServiceName, "l_strike_price:%ld:", l_strike_price );
	}
  i_rec_exists = 0 ;

/**Commented for Ver 1.4 ***	
	EXEC SQL
    SELECT  1
    INTO    :i_rec_exists
    FROM    dual
    WHERE   EXISTS
    (SELECT 1
     FROM   fum_fo_undrlyng_mstr
     WHERE  fum_xchng_cd =  :c_exchng_cd
     AND    fum_prdct_typ = decode(:c_prdct_type,'P','F',:c_prdct_type) 
     AND    fum_undrlyng =  :c_underlyng
     AND    fum_qt_trdng_flg = 'T'
     AND    fum_fp_trdng_flg = 'T'  );
******/


/**Added in Ver 1.4 **/
	EXEC SQL
    SELECT  1,
				  	fum_mrkt_typ
		 INTO		:i_rec_exists,
		 				:c_fum_mrkt_typ													
     FROM   fum_fo_undrlyng_mstr
     WHERE  fum_xchng_cd =  :c_exchng_cd
     AND    fum_prdct_typ = decode(:c_prdct_type,'P','F',:c_prdct_type) 
     AND    fum_undrlyng =  :c_underlyng
     AND    fum_qt_trdng_flg = 'T'
     AND    fum_fp_trdng_flg = 'T' ;

    if( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "L31090", SQLMSG,ptr_st_err_msg->c_err_msg );
			return ( -1 ) ; 
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "c_fum_mrkt_typ:%c:", c_fum_mrkt_typ);
		}

  if( (i_rec_exists != 1 ) || ( SQLCODE == NO_DATA_FOUND) )
    {
      fn_userlog( c_ServiceName, " FP ");
      fn_errlog( c_ServiceName, "B28513", DEFMSG,ptr_st_err_msg->c_err_msg );
			fn_userlog( c_ServiceName, "Inside BAN condition...");
			/***  return ( -1 ) ; Commeneted In Ver 2.9 ***/
      return ( -2 ) ;     /*** Ver 2.9 ***/
    }

		*c_fum_mkt_typ = c_fum_mrkt_typ;								/*Ver 1.4 */

   /*** Commented In Ver 3.7  ***

	EXEC SQL
    SELECT fcm_qt_trdng_flg,
           fcm_act_stts,
					 fcm_mrkt_typ,
					 fcm_fp_qt_trdng_flg											 					*Ver 1.5 *
    INTO   :c_qt_trdng_flg,
           :c_act_stts,
           :c_fcm_mrkt_typ,				  													*Ver 1.4 *
					 :c_fcm_fp_qt_trdng_flg															*Ver 1.5 *
    FROM  fcm_fo_cntrct_mstr
    WHERE   fcm_xchng_cd = :c_exchng_cd
    AND     fcm_prdct_typ = decode(:c_prdct_type,'P','F',:c_prdct_type) 
    AND     fcm_undrlyng = :c_underlyng
    AND     fcm_expry_dt = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
    AND     fcm_exer_typ = :c_exercise_type
    AND     fcm_opt_typ =  :c_option_type
    AND     fcm_strk_prc = :l_strike_price;

    *** Ver 3.7 Comment Ends ***/

  /*** Ver 3.7 Starts ***/

  EXEC SQL
    SELECT ftq_qt_trdng_flg,
           ftq_act_stts,
           ftq_mrkt_typ,
           ftq_fp_qt_trdng_flg
    INTO   :c_qt_trdng_flg,
           :c_act_stts,
           :c_fcm_mrkt_typ,
           :c_fcm_fp_qt_trdng_flg
    FROM  ftq_fo_trd_qt
    WHERE   ftq_xchng_cd = :c_exchng_cd
    AND     ftq_prdct_typ = decode(:c_prdct_type,'P','F',:c_prdct_type)
    AND     ftq_undrlyng = :c_underlyng
    AND     ftq_expry_dt = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
    AND     ftq_exer_typ = :c_exercise_type
    AND     ftq_opt_typ =  :c_option_type
    AND     ftq_strk_prc = :l_strike_price;

  /*** Ver 3.7 Ends ***/

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_userlog( c_ServiceName, " FP  fcm");
      fn_errlog( c_ServiceName, "L31095", SQLMSG,ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "c_fcm_mrkt_typ:%c:", c_fcm_mrkt_typ);
			fn_userlog( c_ServiceName, "c_fcm_fp_qt_trdng_flg:%c:", c_fcm_fp_qt_trdng_flg);
		}

    /*if( ( c_qt_trdng_flg != 'T' ) || ( SQLCODE == NO_DATA_FOUND ) )*/																		/* Ver 1.5 */
    if( ( c_qt_trdng_flg != 'T' ) || ( c_fcm_fp_qt_trdng_flg != 'T') || ( SQLCODE == NO_DATA_FOUND ) )			/* Ver 1.5 */
    {
      fn_errlog( c_ServiceName, "B28514", " ",ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }
		if( c_act_stts != 'A' )
    {
      fn_errlog( c_ServiceName, "B28515", " ",ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

		*c_fcm_mkt_typ = c_fcm_mrkt_typ;								/*Ver 1.4 */

 return ( 0 );
}	


/***** Ver 2.2 Starts *****/

int fn_check_cntrct_sltp_fp(char * c_ServiceName,
        struct vw_contract *ptr_st_cntrct,
        char *c_fum_mkt_typ,
        char *c_fcm_mkt_typ,
        struct vw_err_msg *ptr_st_err_msg )
{

  EXEC SQL BEGIN DECLARE SECTION ;
    char  c_exchng_cd[4];
    char  c_prdct_type;
    char  c_underlyng[7];
    char  c_exercise_type ;
    varchar c_expiry_dt[ LEN_DATE ];
    char  c_option_type ;
    long  l_strike_price ;
    int   i_rec_exists ;
    char  c_qt_trdng_flg ;
    char  c_act_stts ;
    char  c_fum_mrkt_typ;
    char  c_fcm_mrkt_typ;
    char  c_fcm_fp_qt_trdng_flg;
    char  c_fcm_sltp_fp_qt_trdng_flg;
  EXEC SQL END DECLARE SECTION ;

  strcpy(c_exchng_cd,ptr_st_cntrct->c_xchng_cd);
  c_prdct_type = ptr_st_cntrct->c_prd_typ ;
  strcpy(c_underlyng,ptr_st_cntrct->c_undrlyng);
  c_exercise_type = ptr_st_cntrct->c_exrc_typ ;
  c_option_type = ptr_st_cntrct->c_opt_typ ;
  l_strike_price = ptr_st_cntrct->l_strike_prc ;
  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_cntrct->c_expry_dt );
  SETLEN ( c_expiry_dt );
  rtrim ( (char *)c_expiry_dt.arr );

  if(DEBUG_MSG_LVL_3){
    fn_userlog( c_ServiceName, "c_exchng_cd:%s:", c_exchng_cd );
    fn_userlog( c_ServiceName, "c_prdct_type:%c:",c_prdct_type);
    fn_userlog( c_ServiceName, "c_underlyng:%s:", c_underlyng );
    fn_userlog( c_ServiceName, "c_expiry_dt:%s", c_expiry_dt.arr );
    fn_userlog( c_ServiceName, "c_exercise_type:%c:", c_exercise_type );
    fn_userlog( c_ServiceName, "c_option_type:%c:", c_option_type);
    fn_userlog( c_ServiceName, "l_strike_price:%ld:", l_strike_price );
  }
  i_rec_exists = 0 ;

  EXEC SQL
    SELECT  1,
            fum_mrkt_typ
     INTO   :i_rec_exists,
            :c_fum_mrkt_typ
     FROM   fum_fo_undrlyng_mstr
     WHERE  fum_xchng_cd =  :c_exchng_cd
     AND    fum_prdct_typ = decode(:c_prdct_type,'P','F','U','F','I','O',:c_prdct_type) /*** Ver 3.0 OptionPlus product handling  ***/
     AND    fum_undrlyng =  :c_underlyng
     AND    fum_qt_trdng_flg = 'T'
     AND    fum_sltp_fp_trdng_flg = 'T' ;

    if( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "L31100", SQLMSG,ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName, "c_fum_mrkt_typ:%c:", c_fum_mrkt_typ);
    }

  if( (i_rec_exists != 1 ) || ( SQLCODE == NO_DATA_FOUND) )
    {
      fn_userlog( c_ServiceName, " SLTP FP ");
      fn_errlog( c_ServiceName, "B28513", DEFMSG,ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

    *c_fum_mkt_typ = c_fum_mrkt_typ;

   /*** Commented In Ver 3.7  ***

  EXEC SQL
    SELECT fcm_qt_trdng_flg,
           fcm_act_stts,
           fcm_mrkt_typ,
           fcm_sltp_fp_qt_trdng_flg
    INTO   :c_qt_trdng_flg,
           :c_act_stts,
           :c_fcm_mrkt_typ,
           :c_fcm_sltp_fp_qt_trdng_flg
    FROM  fcm_fo_cntrct_mstr
    WHERE   fcm_xchng_cd = :c_exchng_cd
    AND     fcm_prdct_typ = decode(:c_prdct_type,'P','F','U','F','I','O',:c_prdct_type) *** Ver 3.0 OptionPlus product handling  ***
    AND     fcm_undrlyng = :c_underlyng
    AND     fcm_expry_dt = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
    AND     fcm_exer_typ = :c_exercise_type
    AND     fcm_opt_typ =  :c_option_type
    AND     fcm_strk_prc = :l_strike_price;

    *** Ver 3.7 Comment Ends ***/

  /*** Ver 3.7 Starts ***/

  EXEC SQL
    SELECT ftq_qt_trdng_flg,
           ftq_act_stts,
           ftq_mrkt_typ,
           ftq_sltp_fp_qt_trdng_flg
    INTO   :c_qt_trdng_flg,
           :c_act_stts,
           :c_fcm_mrkt_typ,
           :c_fcm_sltp_fp_qt_trdng_flg
    FROM  ftq_fo_trd_qt
    WHERE   ftq_xchng_cd = :c_exchng_cd
    AND     ftq_prdct_typ = decode(:c_prdct_type,'P','F','U','F','I','O',:c_prdct_type)
    AND     ftq_undrlyng = :c_underlyng
    AND     ftq_expry_dt = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
    AND     ftq_exer_typ = :c_exercise_type
    AND     ftq_opt_typ =  :c_option_type
    AND     ftq_strk_prc = :l_strike_price;

  /*** Ver 3.7 Ends ***/

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_userlog( c_ServiceName, " SLTP FP  fcm");
      fn_errlog( c_ServiceName, "L31105", SQLMSG,ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName, "c_fcm_mrkt_typ:%c:", c_fcm_mrkt_typ);
      fn_userlog( c_ServiceName, "c_fcm_sltp_fp_qt_trdng_flg:%c:", c_fcm_sltp_fp_qt_trdng_flg);
    }


    if( ( c_qt_trdng_flg != 'T' ) || ( c_fcm_sltp_fp_qt_trdng_flg != 'T') || ( SQLCODE == NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "B28514", " ",ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }
    if( c_act_stts != 'A' )
    {
      fn_errlog( c_ServiceName, "B28515", " ",ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

    *c_fcm_mkt_typ = c_fcm_mrkt_typ;

 return ( 0 );
}

int fn_chk_cntrct_sltpfp_sqoff(char * c_ServiceName,
                        struct vw_contract *ptr_st_cntrct,
												char *c_fum_mkt_typ,									
												char *c_fcm_mkt_typ,									
                        struct vw_err_msg *ptr_st_err_msg )
{

  EXEC SQL BEGIN DECLARE SECTION ;
    char  c_exchng_cd[4];
    char  c_prdct_type;
    char  c_underlyng[7];
    char  c_exercise_type ;
    varchar c_expiry_dt[ LEN_DATE ];
    char  c_option_type ;
    long  l_strike_price ;
    int   i_rec_exists ;
    char  c_qt_trdng_flg ;
    char  c_act_stts ;
		char  c_fcm_mrkt_typ;						
		char  c_fum_mrkt_typ;						
		char  c_fcm_sltpfp_qt_trdng_flg;		
  EXEC SQL END DECLARE SECTION ;


  strcpy(c_exchng_cd,ptr_st_cntrct->c_xchng_cd);
  c_prdct_type = ptr_st_cntrct->c_prd_typ ;
  strcpy(c_underlyng,ptr_st_cntrct->c_undrlyng);
  c_exercise_type = ptr_st_cntrct->c_exrc_typ ;
  c_option_type = ptr_st_cntrct->c_opt_typ ;
  l_strike_price = ptr_st_cntrct->l_strike_prc ;
  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_cntrct->c_expry_dt );
  SETLEN ( c_expiry_dt );
	rtrim ( (char *)c_expiry_dt.arr );

	if(DEBUG_MSG_LVL_3){
    fn_userlog( c_ServiceName, "FP c_exchng_cd:%s:", c_exchng_cd );
    fn_userlog( c_ServiceName, "FP c_prdct_type:%c:",c_prdct_type);
    fn_userlog( c_ServiceName, "FP c_underlyng:%s:", c_underlyng );
    fn_userlog( c_ServiceName, "FP c_expiry_dt:%s", c_expiry_dt.arr );
    fn_userlog( c_ServiceName, "FP c_exercise_type:%c:", c_exercise_type );
    fn_userlog( c_ServiceName, "FP c_option_type:%c:", c_option_type);
    fn_userlog( c_ServiceName, "FP l_strike_price:%ld:", l_strike_price );
	}

  i_rec_exists = 0 ;

	  EXEC SQL
    SELECT 1,
					 fum_mrkt_typ
		INTO  :i_rec_exists,
					:c_fum_mrkt_typ
     FROM   fum_fo_undrlyng_mstr
     WHERE  fum_xchng_cd =  :c_exchng_cd
/**     AND    fum_prdct_typ = 'F' **/
		 AND		fum_prdct_typ = decode(:c_prdct_type,'P','F','U','F','I','O',:c_prdct_type) /*** Ver 3.0 OptionPlus product handling  ***/ 
     AND    fum_undrlyng =  :c_underlyng
     AND    fum_qt_trdng_flg in ('Q','T')
     AND    fum_sltp_fp_trdng_flg in ('Q','T','S');

    if( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "L31110", SQLMSG,ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "c_fum_mrkt_typ:%c:", c_fum_mrkt_typ);
		}

    if( (i_rec_exists != 1 ) || ( SQLCODE == NO_DATA_FOUND) )
    {
      fn_errlog( c_ServiceName, "B28513", DEFMSG,ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }
		
		*c_fum_mkt_typ = c_fum_mrkt_typ;								

    /*** Commented In Ver 3.7  ***

		EXEC SQL
    SELECT fcm_qt_trdng_flg,
           fcm_act_stts,
					 fcm_mrkt_typ,
					 fcm_sltp_fp_qt_trdng_flg												
    INTO   :c_qt_trdng_flg,
           :c_act_stts,
					 :c_fcm_mrkt_typ,			  											
					 :c_fcm_sltpfp_qt_trdng_flg											
    FROM    fcm_fo_cntrct_mstr
    WHERE   fcm_xchng_cd = :c_exchng_cd
**    AND     fcm_prdct_typ = 'F'	**
		AND			fcm_prdct_typ = decode(:c_prdct_type,'P','F','U','F','I','O',:c_prdct_type) *** Ver 3.0 OptionPlus product handling  ***
    AND     fcm_undrlyng = :c_underlyng
    AND     fcm_expry_dt = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
    AND     fcm_exer_typ = :c_exercise_type
    AND     fcm_opt_typ =  :c_option_type
    AND     fcm_strk_prc = :l_strike_price;

     *** Ver 3.7 Comment Ends ***/

    /*** Ver 3.7 Starts ***/

   EXEC SQL
    SELECT ftq_qt_trdng_flg,
           ftq_act_stts,
           ftq_mrkt_typ,
           ftq_sltp_fp_qt_trdng_flg
    INTO   :c_qt_trdng_flg,
           :c_act_stts,
           :c_fcm_mrkt_typ,
           :c_fcm_sltpfp_qt_trdng_flg
    FROM    ftq_fo_trd_qt
    WHERE   ftq_xchng_cd = :c_exchng_cd
    AND     ftq_prdct_typ = decode(:c_prdct_type,'P','F','U','F','I','O',:c_prdct_type)
    AND     ftq_undrlyng = :c_underlyng
    AND     ftq_expry_dt = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
    AND     ftq_exer_typ = :c_exercise_type
    AND     ftq_opt_typ =  :c_option_type
    AND     ftq_strk_prc = :l_strike_price;

    /*** Ver 3.7 Ends ***/

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog( c_ServiceName, "L31115", SQLMSG,ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "c_fcm_mrkt_typ:%c:", c_fcm_mrkt_typ);
		}

    if( ( ( c_qt_trdng_flg != 'Q' ) && ( c_qt_trdng_flg != 'T' )) || 
				( ( c_fcm_sltpfp_qt_trdng_flg != 'Q' ) && ( c_fcm_sltpfp_qt_trdng_flg != 'T' ) && (c_fcm_sltpfp_qt_trdng_flg == 'N'))					
        || ( SQLCODE == NO_DATA_FOUND ) )                        
    {
      fn_errlog( c_ServiceName, "B28514", " ",ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

		*c_fcm_mkt_typ = c_fcm_mrkt_typ;								

    return ( 0 );

}

/***** Ver 2.2 Ends *****/


/*****************************************************************************/
/* Service name : fn_vrfy_prc_band                                           */
/*                                                                           */
/* Description  : This function will verify whether the limit order is in    */
/*                permissible limitis or not                                 */
/*                                                                           */
/* Input        : Service Name                                               */
/*                Exchange Code                                              */
/*                Product type                                               */
/*                Underlying                                                 */
/*                Limit Rate of the order                                    */
/*                Base Price of the underlying                               */
/*                                                                           */
/* Output       : Return Code                                                */
/*                Error Message                                              */
/*                                                                           */
/* Log          : 28-Nov-2001 1.0 New Release                                */
/*****************************************************************************/

int fn_vrfy_prc_band ( char c_ServiceName [ 33 ],
											 char	c_xchng_cd [ 4 ],
											 char	c_prd_typ,
											 char	c_undrlyng [ 7 ],
											 long	l_ord_limit_rt,
											 long	l_base_prc,
                  		 struct vw_err_msg *ptr_st_err_msg )	
{

  long l_upbnd_rt = 0;
  long l_lwbnd_rt = 0;

  EXEC SQL BEGIN DECLARE SECTION;
		char		sql_c_xchng_cd[4] ;
		char		sql_c_prd_typ ;
		char		sql_c_undrlyng[7] ;
		double	d_prc_bnd_prcntg;
  EXEC SQL END DECLARE SECTION;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "c_xchng_cd:%s:", c_xchng_cd );
		fn_userlog( c_ServiceName, "c_prd_typ:%c:",c_prd_typ);
		fn_userlog( c_ServiceName, "c_undrlyng:%s:", c_undrlyng );
		fn_userlog( c_ServiceName, "l_ord_limit_rt:%ld:", l_ord_limit_rt ); 
		fn_userlog( c_ServiceName, "l_base_prc:%ld:", l_base_prc ); 
	}

  strcpy ( sql_c_xchng_cd, c_xchng_cd );
	sql_c_prd_typ = c_prd_typ;
  strcpy ( sql_c_undrlyng, c_undrlyng );

  EXEC SQL
		SELECT 	NVL( fum_prc_bnd_prcntg, 0 )
		INTO		:d_prc_bnd_prcntg
		FROM		fum_fo_undrlyng_mstr
		WHERE		fum_xchng_cd = :sql_c_xchng_cd
		AND			fum_prdct_typ = :sql_c_prd_typ
		AND			fum_undrlyng = :sql_c_undrlyng;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31120", SQLMSG, c_err_msg );
    return ( -1 );
  }

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "d_prc_bnd_prcntg:%lf:", d_prc_bnd_prcntg ); 
	}

  if ( d_prc_bnd_prcntg == 0 )
  {
    return ( 0 );
  }

  l_upbnd_rt =  (long) ( l_base_prc + 
												 ( l_base_prc * d_prc_bnd_prcntg / 100.00 ) );

  l_lwbnd_rt =  (long) ( l_base_prc - 
												 ( l_base_prc * d_prc_bnd_prcntg / 100.00 ) );

	 if(DEBUG_MSG_LVL_0)
   {
 		fn_userlog( c_ServiceName, "l_upbnd_rt:%ld: | l_lwbnd_rt:%ld: ", l_upbnd_rt,l_lwbnd_rt ); 

		/*** 	fn_userlog( c_ServiceName, "l_upbnd_rt:%ld:", l_upbnd_rt ); 
					fn_userlog( c_ServiceName, "l_lwbnd_rt:%ld:", l_lwbnd_rt );  ***/
	 } /*** Ver 4.1 ***/

	if ( ( l_ord_limit_rt > l_upbnd_rt ) ||
			 ( l_ord_limit_rt < l_lwbnd_rt )  )
	{
   	fn_errlog( c_ServiceName, "B28006", " ",ptr_st_err_msg->c_err_msg );
		return ( -1 ) ;
	}

}

/*****************************************************************************/
/*	 Ver 2.5 Aded function to check price range in live feeds 	  					 */
/*****************************************************************************/

/*****************************************************************************/
/* Service name : fn_vrfy_prc_band_mkt                                       */
/*                                                                           */
/* Description  : This function will verify whether the limit order is in    */
/*                permissible limitis or not given by exchange               */
/*                                                                           */
/* Input        : Service Name                                               */
/*                Exchange Code                                              */
/*                Product type                                               */
/*                Underlying                                                 */
/*                Limit Rate of the order                                    */
/*                Expiry date of the contract 															 */
/*                                                                           */
/* Output       : Return Code                                                */
/*                Error Message                                              */
/*                                                                           */
/* Log          : 30-Jan-2013 1.0 New Release                                */
/*****************************************************************************/


int fn_vrfy_prc_band_mkt ( char c_ServiceName [ 33 ],
                       char c_xchng_cd [ 4 ],
                       char c_prd_typ,
                       char c_undrlyng [ 7 ],
                       long l_ord_limit_rt,
                       char c_expry_dt[ LEN_DATE ],
                       struct vw_err_msg *ptr_st_err_msg )
{

  long l_upbnd_rt = 0;
  long l_lwbnd_rt = 0;

  EXEC SQL BEGIN DECLARE SECTION;
    char    sql_c_xchng_cd[4] ;
    char    sql_c_prd_typ ;
    char    sql_c_undrlyng[7] ;
		char    sql_c_expry_dt[LEN_DATE];
  EXEC SQL END DECLARE SECTION;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "c_xchng_cd:%s:", c_xchng_cd );
    fn_userlog( c_ServiceName, "c_prd_typ:%c:",c_prd_typ);
    fn_userlog( c_ServiceName, "c_undrlyng:%s:", c_undrlyng );
    fn_userlog( c_ServiceName, "l_ord_limit_rt:%ld:", l_ord_limit_rt );
    fn_userlog( c_ServiceName, "c_expry_dt:%s:", c_expry_dt);
  }


	strcpy ( sql_c_xchng_cd, c_xchng_cd );
  sql_c_prd_typ = c_prd_typ;
  strcpy ( sql_c_undrlyng, c_undrlyng );
  strcpy ( sql_c_expry_dt,c_expry_dt);

  EXEC SQL
			 select FTQ_HGH_PRC_RNG,
							FTQ_LOW_PRC_RNG 
			 INTO   :l_upbnd_rt,
							:l_lwbnd_rt	
			 from   FTQ_FO_TRD_QT 
			 where  FTQ_XCHNG_CD =  :sql_c_xchng_cd
			 and 		FTQ_PRDCT_TYP = :sql_c_prd_typ
			 and 		FTQ_UNDRLYNG =  :sql_c_undrlyng
			 and    FTQ_EXPRY_DT =  to_date(:sql_c_expry_dt,'dd-Mon-yyyy' );

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31125", SQLMSG, c_err_msg );
    return ( -1 );
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "l_upbnd_rt :%ld:", l_upbnd_rt);
    fn_userlog( c_ServiceName, "l_lwbnd_rt :%ld:", l_lwbnd_rt);
    fn_userlog( c_ServiceName, "l_ord_limit_rt :%ld:", l_ord_limit_rt);
  }

  if ( ( l_ord_limit_rt > l_upbnd_rt ) ||
       ( l_ord_limit_rt < l_lwbnd_rt )  )
  {
    fn_errlog( c_ServiceName, "B28006", " ",ptr_st_err_msg->c_err_msg );
    return ( -1 ) ;
  }


}

/** Ver 3.1 Function added for option plus order check ***/
 
int fn_opls_vrfy_prc_band ( char * c_ServiceName, 
											 			long l_ord_limit_rt,
											 			struct	vw_orderbook *ptr_st_ordbook,
                       			struct vw_err_msg *ptr_st_err_msg )
{

  long l_upbnd_rt = 0;
  long l_lwbnd_rt = 0;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "c_xchng_cd:%s:", ptr_st_ordbook->c_xchng_cd );
    fn_userlog( c_ServiceName, "c_prd_typ:%c:", ptr_st_ordbook->c_prd_typ);
    fn_userlog( c_ServiceName, "c_undrlyng:%s:", ptr_st_ordbook->c_undrlyng );
    fn_userlog( c_ServiceName, "l_ord_limit_rt:%ld:", l_ord_limit_rt );
    fn_userlog( c_ServiceName, "c_expry_dt:%s:", ptr_st_ordbook->c_expry_dt);
		fn_userlog( c_ServiceName, "c_opt_typ	:%c:", ptr_st_ordbook->c_opt_typ);
		fn_userlog( c_ServiceName, "l_strike_prc :%ld:", ptr_st_ordbook->l_strike_prc );
  }



  EXEC SQL
       select FTQ_HGH_PRC_RNG,
              FTQ_LOW_PRC_RNG
       INTO   :l_upbnd_rt,
              :l_lwbnd_rt
       from   FTQ_FO_TRD_QT
       where  FTQ_XCHNG_CD =  :ptr_st_ordbook->c_xchng_cd 
       and    FTQ_PRDCT_TYP = decode(:ptr_st_ordbook->c_prd_typ,'I','O',:ptr_st_ordbook->c_prd_typ )
       and    FTQ_UNDRLYNG =  :ptr_st_ordbook->c_undrlyng
       and    FTQ_EXPRY_DT =  to_date ( :ptr_st_ordbook->c_expry_dt,'dd-Mon-yyyy' )
			 and    FTQ_EXER_TYP   = :ptr_st_ordbook->c_exrc_typ
			 and		FTQ_OPT_TYP	 =  :ptr_st_ordbook->c_opt_typ
			 and    FTQ_STRK_PRC =  :ptr_st_ordbook->l_strike_prc;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31130", SQLMSG, c_err_msg );
    return ( -1 );
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "l_upbnd_rt :%ld:", l_upbnd_rt);
    fn_userlog( c_ServiceName, "l_lwbnd_rt :%ld:", l_lwbnd_rt);
 		fn_userlog( c_ServiceName, "l_ord_lmt_rt :%ld:", l_ord_limit_rt);
  }


  if ( ( l_ord_limit_rt > l_upbnd_rt ) ||
       ( l_ord_limit_rt < l_lwbnd_rt )  )
  {
    fn_errlog( c_ServiceName, "B29033", " ",ptr_st_err_msg->c_err_msg );
    return ( -1 ) ;
  }
	return 0;

}

/**Ver 3.1 ends ***/ 

int fn_chk_cntrct_sqoff(char * c_ServiceName,
									      struct vw_contract *ptr_st_cntrct,
												char *c_fum_mkt_typ,										/*ver 1.4 */
												char *c_fcm_mkt_typ,										/*ver 1.4 */
                        struct vw_err_msg *ptr_st_err_msg )	
{

  EXEC SQL BEGIN DECLARE SECTION ;
    char 	c_exchng_cd[4];
		char	c_prdct_type;
		char	c_underlyng[7];
		char	c_exercise_type ;
    varchar c_expiry_dt[ LEN_DATE ];
		char	c_option_type ;
		long	l_strike_price ;
		int		i_rec_exists ;
		char	c_qt_trdng_flg ;
		char	c_act_stts ;
		char	c_fum_mrkt_typ;					/*Ver 1.4 */
		char	c_fcm_mrkt_typ;					/*Ver 1.4 */
  EXEC SQL END DECLARE SECTION ;


	strcpy(c_exchng_cd,ptr_st_cntrct->c_xchng_cd);
	c_prdct_type = ptr_st_cntrct->c_prd_typ ;
	strcpy(c_underlyng,ptr_st_cntrct->c_undrlyng);
	c_exercise_type = ptr_st_cntrct->c_exrc_typ ;
	c_option_type = ptr_st_cntrct->c_opt_typ ;
	l_strike_price = ptr_st_cntrct->l_strike_prc ;
  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_cntrct->c_expry_dt );
  SETLEN ( c_expiry_dt );
	rtrim ( (char *)c_expiry_dt.arr );

	 if(DEBUG_MSG_LVL_3)
   {	
		fn_userlog( c_ServiceName, "c_exchng_cd:%s:", c_exchng_cd );
		fn_userlog( c_ServiceName, "c_prdct_type:%c:",c_prdct_type);
		fn_userlog( c_ServiceName, "c_underlyng:%s:", c_underlyng );
		fn_userlog( c_ServiceName, "c_expiry_dt:%s", c_expiry_dt.arr );
		fn_userlog( c_ServiceName, "c_exercise_type:%c:", c_exercise_type );
		fn_userlog( c_ServiceName, "c_option_type:%c:", c_option_type);
		fn_userlog( c_ServiceName, "l_strike_price:%ld:", l_strike_price ); 
	}

	i_rec_exists = 0 ;

/**Commented in Ver 1.4  
  EXEC SQL
		SELECT  1
		INTO 		:i_rec_exists
		FROM 		dual
		WHERE 	EXISTS
		(SELECT 1
		 FROM 	fum_fo_undrlyng_mstr
		 WHERE  fum_xchng_cd =  :c_exchng_cd
		 AND  	fum_prdct_typ = :c_prdct_type
		 AND 		fum_undrlyng =  :c_underlyng
		 AND 		fum_qt_trdng_flg in ('Q','T') );
******/

/**Added for Ver 1.4 **/
  EXEC SQL
		SELECT  1,
						fum_mrkt_typ
		 INTO   :i_rec_exists,
		 			  :c_fum_mrkt_typ																	
		 FROM 	fum_fo_undrlyng_mstr
		 WHERE  fum_xchng_cd =  :c_exchng_cd
		 AND  	fum_prdct_typ = :c_prdct_type
		 AND 		fum_undrlyng =  :c_underlyng
		 AND 		fum_qt_trdng_flg in ('Q','T') ;

    if( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
    	fn_errlog( c_ServiceName, "L31135", SQLMSG,ptr_st_err_msg->c_err_msg );
			return ( -1 ) ;
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "c_fum_mrkt_typ:%c:", c_fum_mrkt_typ);
		}
		
    if( (i_rec_exists != 1 ) || ( SQLCODE == NO_DATA_FOUND) )
    {
    	fn_errlog( c_ServiceName, "B28513", DEFMSG,ptr_st_err_msg->c_err_msg );
			return ( -1 ) ;
    }

		*c_fum_mkt_typ = c_fum_mrkt_typ;				/*Ver 1.4*/

  /*** Commented In Ver 3.7  ***

  EXEC SQL
		SELECT fcm_qt_trdng_flg,
					 fcm_act_stts,	
					 fcm_mrkt_typ
		INTO	 :c_qt_trdng_flg,
					 :c_act_stts,
					 :c_fcm_mrkt_typ																*Ver 1.4 *
		FROM 	fcm_fo_cntrct_mstr
		WHERE 	fcm_xchng_cd = :c_exchng_cd
		AND 		fcm_prdct_typ = :c_prdct_type
		AND 		fcm_undrlyng = :c_underlyng
		AND 	 	fcm_expry_dt = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
		AND 		fcm_exer_typ = :c_exercise_type
		AND 		fcm_opt_typ =  :c_option_type
		AND 		fcm_strk_prc = :l_strike_price; 

    *** Ver 3.7 Comment Ends ***/

  /*** Ver 3.7 Starts ***/

  EXEC SQL
    SELECT ftq_qt_trdng_flg,
           ftq_act_stts,
           ftq_mrkt_typ
    INTO   :c_qt_trdng_flg,
           :c_act_stts,
           :c_fcm_mrkt_typ
    FROM  ftq_fo_trd_qt
    WHERE   ftq_xchng_cd = :c_exchng_cd
    AND     ftq_prdct_typ = :c_prdct_type
    AND     ftq_undrlyng = :c_underlyng
    AND     ftq_expry_dt = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
    AND     ftq_exer_typ = :c_exercise_type
    AND     ftq_opt_typ =  :c_option_type
    AND     ftq_strk_prc = :l_strike_price;

  /*** Ver 3.7 Ends	***/

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
    	fn_errlog( c_ServiceName, "L31140", SQLMSG,ptr_st_err_msg->c_err_msg );
			return ( -1 ) ;
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "c_fcm_mrkt_typ:%c:", c_fcm_mrkt_typ);
		}

    if( ( ( c_qt_trdng_flg != 'Q' ) && ( c_qt_trdng_flg != 'T' ) )
        || ( SQLCODE == NO_DATA_FOUND ) )
    {
    	fn_errlog( c_ServiceName, "B28514", " ",ptr_st_err_msg->c_err_msg );
			return ( -1 ) ;
    }

		*c_fcm_mkt_typ = c_fcm_mrkt_typ;				/*Ver 1.4*/

/****************************************************************************
  This is not valid for the Square Off Orders as whether the given
  underlyng is active 

    if( c_act_stts != 'A' )
    {
    	fn_errlog( c_ServiceName, "B28515", " ",ptr_st_err_msg->c_err_msg );
			return ( -1 ) ;
    }
****************************************************************************/

		return ( 0 );
}

/**** Ver 4.2 Starts Here ****/
int fn_chk_trail_cntrct_sqoff(char * c_ServiceName,
						struct vw_contract *ptr_st_cntrct,
						char *c_fum_mkt_typ,										
						char *c_fcm_mkt_typ,										
                        struct vw_err_msg *ptr_st_err_msg )	
{

  EXEC SQL BEGIN DECLARE SECTION ;
    char 	c_exchng_cd[4];
		char	c_prdct_type;
		char	c_underlyng[7];
		char	c_exercise_type ;
    varchar c_expiry_dt[ LEN_DATE ];
		char	c_option_type ;
		long	l_strike_price ;
		int		i_rec_exists ;
		char	c_qt_trdng_flg ;
		char	c_act_stts ;
		char	c_fum_mrkt_typ;				
		char	c_fcm_mrkt_typ;
		char  c_ftq_trail_flg;				
  EXEC SQL END DECLARE SECTION ;


	strcpy(c_exchng_cd,ptr_st_cntrct->c_xchng_cd);
	c_prdct_type = ptr_st_cntrct->c_prd_typ ;
	strcpy(c_underlyng,ptr_st_cntrct->c_undrlyng);
	c_exercise_type = ptr_st_cntrct->c_exrc_typ ;
	c_option_type = ptr_st_cntrct->c_opt_typ ;
	l_strike_price = ptr_st_cntrct->l_strike_prc ;
  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_cntrct->c_expry_dt );
  SETLEN ( c_expiry_dt );
	rtrim ( (char *)c_expiry_dt.arr );

	 if(DEBUG_MSG_LVL_3)
   {	
		fn_userlog( c_ServiceName, "c_exchng_cd:%s:", c_exchng_cd );
		fn_userlog( c_ServiceName, "c_prdct_type:%c:",c_prdct_type);
		fn_userlog( c_ServiceName, "c_underlyng:%s:", c_underlyng );
		fn_userlog( c_ServiceName, "c_expiry_dt:%s", c_expiry_dt.arr );
		fn_userlog( c_ServiceName, "c_exercise_type:%c:", c_exercise_type );
		fn_userlog( c_ServiceName, "c_option_type:%c:", c_option_type);
		fn_userlog( c_ServiceName, "l_strike_price:%ld:", l_strike_price ); 
	}

	i_rec_exists = 0 ;

  EXEC SQL
    SELECT  1,
        fum_mrkt_typ
     INTO   :i_rec_exists,
        :c_fum_mrkt_typ
     FROM   fum_fo_undrlyng_mstr
     WHERE  fum_xchng_cd =  :c_exchng_cd
     AND    fum_prdct_typ = :c_prdct_type
     AND  fum_undrlyng =  :c_underlyng
     AND  fum_qt_trdng_flg in ('Q','T')
     AND    FUM_SLTP_TRAIL_FLG in ('Y','N');

    if( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
    	fn_errlog( c_ServiceName, "L31145", SQLMSG,ptr_st_err_msg->c_err_msg );
			return ( -1 ) ;
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "c_fum_mrkt_typ:%c:", c_fum_mrkt_typ);
		}
		
    if( (i_rec_exists != 1 ) || ( SQLCODE == NO_DATA_FOUND) )
    {
    	fn_errlog( c_ServiceName, "B28513", DEFMSG,ptr_st_err_msg->c_err_msg );
			return ( -1 ) ;
    }

		*c_fum_mkt_typ = c_fum_mrkt_typ;

	EXEC SQL	
	  SELECT ftq_qt_trdng_flg,
           ftq_act_stts,
           ftq_mrkt_typ,
		       NVL(ftq_trail_flg,'N')
    INTO   :c_qt_trdng_flg,
           :c_act_stts,
           :c_fcm_mrkt_typ  ,
		   :c_ftq_trail_flg
    FROM  ftq_fo_trd_qt
    WHERE   ftq_xchng_cd = :c_exchng_cd
    AND     ftq_prdct_typ = :c_prdct_type
    AND     ftq_undrlyng = :c_underlyng
    AND     ftq_expry_dt = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
    AND     ftq_exer_typ = :c_exercise_type
    AND     ftq_opt_typ =  :c_option_type
    AND     ftq_strk_prc = :l_strike_price;


    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
    	fn_errlog( c_ServiceName, "L31150", SQLMSG,ptr_st_err_msg->c_err_msg );
			return ( -1 ) ;
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "c_fcm_mrkt_typ:%c:", c_fcm_mrkt_typ);
			      fn_userlog( c_ServiceName, "FTQ QT Trading Flag :%c:",c_qt_trdng_flg);
		}

    if( ( ( c_qt_trdng_flg != 'Q' ) && ( c_qt_trdng_flg != 'T' )) || 
				( ( c_ftq_trail_flg != 'Y' )&& ( c_ftq_trail_flg != 'N'))  || 
          ( SQLCODE == NO_DATA_FOUND ) )
    {
    	fn_errlog( c_ServiceName, "B28514", " ",ptr_st_err_msg->c_err_msg );
			return ( -1 ) ;
    }

		*c_fcm_mkt_typ = c_fcm_mrkt_typ;	
		return ( 0 );
}

/*** Ver 4.2 Ends ***/
/*****FNO NNF 803 *******/
int fn_chk_closeout(char *c_ServiceName,
                    char *c_cln_mtch_accnt,                         /*** Added in ver 2.3 ***/
                    char  c_req_typ,                         				/*** Added in ver 2.3 ***/
                    struct vw_contract st_cntrct,           				/*** Added in ver 2.3 ***/
                    struct vw_xchngbook *ptr_st_xchngbook,
                    struct vw_err_msg *ptr_st_err_msg )
{
  char c_brkr_stts;
  char c_brkr_clsout_flg = '\0';      /*** Added in ver 2.3 ***/
	long l_open_pos_qty	=	0;						/*** Added in ver 2.3 ***/	
	long l_pending_qty	=	0;						/*** Added in ver 2.3 ***/	
	long l_total_qty		=	0;						/*** Added in ver 2.3 ***/	
  char c_clsout_stts  = '\0';         /*** Added in ver 2.8 ***/

  EXEC SQL
    SELECT EXG_BRKR_STTS,
           EXG_CLS_STTS               /*** Added in ver 2.8 ***/
    INTO   :c_brkr_stts,
           :c_clsout_stts             /*** Added in ver 2.8 ***/
    FROM   EXG_XCHNG_MSTR
    WHERE  EXG_XCHNG_CD=:ptr_st_xchngbook->c_xchng_cd;

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "L31155", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

	/*** Ver 2.3 Starts ***/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Broker check sucess:status:%c", c_brkr_stts);
    fn_userlog(c_ServiceName,"Broker check closeout:status:%c", c_clsout_stts);  /*** Ver 2.8 ***/
    fn_userlog(c_ServiceName,"Underlying name is        :%s", st_cntrct.c_undrlyng);
    fn_userlog(c_ServiceName,"st_xchngbook->c_slm_flg   :%c", ptr_st_xchngbook->c_slm_flg);
    fn_userlog(c_ServiceName,"c_req_typ   							:%c", c_req_typ);
    fn_userlog(c_ServiceName,"st_xchngbook->c_spl_flg   :%c", ptr_st_xchngbook->c_spl_flg);/* Ver 2.7 **/
    fn_userlog(c_ServiceName,"ptr_st_xchngbook->c_xchng_cd   :%s", ptr_st_xchngbook->c_xchng_cd);/*Ver 2.7 **/ 
  }

	/******** Commented in ver 2.8 ***************************************************************

  if(c_brkr_stts == CLOSE_OUT && ptr_st_xchngbook->c_slm_flg == 'S' && c_req_typ != 'M' && c_req_typ != 'C')
  {
    	fn_errlog( c_ServiceName, "B35015", DEFMSG, ptr_st_err_msg->c_err_msg );
    	return FAILURE;
  }
  
	if(c_brkr_stts == CLOSE_OUT && ( ptr_st_xchngbook->c_spl_flg == '2' || ptr_st_xchngbook->c_spl_flg == '3') )
  {
    fn_errlog( c_ServiceName, "B35016", DEFMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }


	if(c_brkr_stts == CLOSE_OUT)
  **********************************************************************************************/
  if(c_brkr_stts == CLOSE_OUT || c_clsout_stts == CLOSE_OUT || c_clsout_stts == RRM_MODE)  /* condition changed Ver 2.8 */
	{
		if(DEBUG_MSG_LVL_3)
  	{
    	fn_userlog(c_ServiceName,"Broker check sucess:status:%c", c_brkr_stts);
    	fn_userlog(c_ServiceName,"match account is        	:%s", c_cln_mtch_accnt);
    	fn_userlog(c_ServiceName,"Underlying name is        :%s", st_cntrct.c_undrlyng);
    	fn_userlog(c_ServiceName,"Exchange code is        	:%s", st_cntrct.c_xchng_cd);
    	fn_userlog(c_ServiceName,"Expiry date is        		:%s", st_cntrct.c_expry_dt);
    	fn_userlog(c_ServiceName,"Product type is        		:%c", st_cntrct.c_prd_typ);
    	fn_userlog(c_ServiceName,"Option type is        		:%c", st_cntrct.c_opt_typ);
    	fn_userlog(c_ServiceName,"Transaction flow is    		:%c", ptr_st_xchngbook->c_ordr_flw);
    	fn_userlog(c_ServiceName,"Excirsize Type  is    		:%c", st_cntrct.c_exrc_typ);
    	fn_userlog(c_ServiceName,"Catogory index is	    		:%c", st_cntrct.c_ctgry_indstk);
    	fn_userlog(c_ServiceName,"Strike price is        		:%ld",st_cntrct.l_strike_prc);
  	}

  	EXEC SQL
    	SELECT  NVL(FUM_BRKR_CLSOUT_FLG,'N')
    	INTO    :c_brkr_clsout_flg
    	FROM    FUM_FO_UNDRLYNG_MSTR
    	WHERE   FUM_UNDRLYNG  = :st_cntrct.c_undrlyng
    	AND     FUM_PRDCT_TYP = decode(:st_cntrct.c_prd_typ,'P','F','U','F','I','O',:st_cntrct.c_prd_typ) /** Ver 3.0 Option Plus Product handled **/
			AND			FUM_XCHNG_CD	=	:st_cntrct.c_xchng_cd;
	
  	if ( SQLCODE != 0 )
  	{
    	fn_errlog ( c_ServiceName, "L31160", SQLMSG, ptr_st_err_msg->c_err_msg );
    	return FAILURE;
  	}
	
  	if(DEBUG_MSG_LVL_3)
  	{
    	fn_userlog(c_ServiceName,"Broker closeout :status   :%c",c_brkr_clsout_flg);
			fn_userlog(c_ServiceName,"c_req_typ                 :%c", c_req_typ);
  	}

		if (c_brkr_clsout_flg == 'Y' && c_req_typ == 'C')
		{
			fn_errlog( c_ServiceName, "B56045", DEFMSG, ptr_st_err_msg->c_err_msg );
    	return FAILURE;
		}

		if (st_cntrct.c_prd_typ == 'O')
		{
			EXEC SQL
        SELECT FOP_OPNPSTN_QTY,
               DECODE(:ptr_st_xchngbook->c_ordr_flw,'B',GREATEST(ABS(FOP_IBUY_QTY),ABS(FOP_EXBUY_QTY)),GREATEST(ABS(FOP_ISELL_QTY),ABS(FOP_EXSELL_QTY)))
        INTO  :l_open_pos_qty,
              :l_pending_qty
        FROM FOP_FO_OPTIONS_PSTN
        WHERE FOP_CLM_MTCH_ACCNT =:c_cln_mtch_accnt
        AND   FOP_XCHNG_CD       =:st_cntrct.c_xchng_cd
        AND   FOP_PRDCT_TYP      =:st_cntrct.c_prd_typ
        AND   FOP_OPT_TYP      	 =:st_cntrct.c_opt_typ
        AND   FOP_STRK_PRC       =:st_cntrct.l_strike_prc
        AND   FOP_INDSTK         =:st_cntrct.c_ctgry_indstk
        AND   FOP_UNDRLYNG       =:st_cntrct.c_undrlyng
        AND   FOP_EXPRY_DT       =:st_cntrct.c_expry_dt
        AND   FOP_EXER_TYP       =:st_cntrct.c_exrc_typ
        AND   FOP_OPNPSTN_FLW    =(DECODE(:ptr_st_xchngbook->c_ordr_flw,'B','S','B'))  ;

      if ( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
      {
        fn_errlog ( c_ServiceName, "L31165", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }

      if (SQLCODE == NO_DATA_FOUND)
      {
        l_open_pos_qty  = 0;
        l_pending_qty   = 0;
      }

      l_total_qty = labs(ptr_st_xchngbook->l_ord_tot_qty) + labs(l_pending_qty);

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Open position quantity is |%ld|",l_open_pos_qty);
        fn_userlog(c_ServiceName,"pending       quantity is |%ld|",l_pending_qty);
        fn_userlog(c_ServiceName,"Total         quantity is |%ld|",l_total_qty);
      }		
		}
		else
		{
			EXEC SQL
    		SELECT FFP_OPNPSTN_QTY,
          		 DECODE(:ptr_st_xchngbook->c_ordr_flw,'B',GREATEST(ABS(FFP_IBUY_QTY),ABS(FFP_EXBUY_QTY)),GREATEST(ABS(FFP_ISELL_QTY),ABS(FFP_EXSELL_QTY)))
       	INTO 	:l_open_pos_qty,
              :l_pending_qty
      	FROM FFP_FO_FUTURES_PSTN
      	WHERE FFP_CLM_MTCH_ACCNT =:c_cln_mtch_accnt
      	AND   FFP_XCHNG_CD       =:st_cntrct.c_xchng_cd
      	AND   FFP_PRDCT_TYP      =:st_cntrct.c_prd_typ
      	AND   FFP_INDSTK         =:st_cntrct.c_ctgry_indstk
      	AND   FFP_UNDRLYNG       =:st_cntrct.c_undrlyng
      	AND   FFP_EXPRY_DT       =:st_cntrct.c_expry_dt
      	AND   FFP_EXER_TYP       =:st_cntrct.c_exrc_typ
      	AND   FFP_OPNPSTN_FLW    =(DECODE(:ptr_st_xchngbook->c_ordr_flw,'B','S','B'))  ;
			
			if ( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
    	{
      	fn_errlog ( c_ServiceName, "L31170", SQLMSG, ptr_st_err_msg->c_err_msg );
      	return FAILURE;
    	}
			
			if (SQLCODE == NO_DATA_FOUND)
			{
				l_open_pos_qty	=	0;
				l_pending_qty		=	0;
			}
  
			l_total_qty =	labs(ptr_st_xchngbook->l_ord_tot_qty) + labs(l_pending_qty); 
	
			if(DEBUG_MSG_LVL_3)
  		{
    		fn_userlog(c_ServiceName,"Open position quantity is |%ld|",l_open_pos_qty);
    		fn_userlog(c_ServiceName,"pending 			quantity is |%ld|",l_pending_qty);
    		fn_userlog(c_ServiceName,"Total 				quantity is |%ld|",l_total_qty);
  		}
		}
	
	  /***************** Ver 2.8 starts****************/

    if ( c_clsout_stts == CLOSE_OUT && strcmp(ptr_st_xchngbook->c_xchng_cd,"NFO") == 0 )
    {
      if (ptr_st_xchngbook->c_ord_typ != IMMEDIATE_OR_CANCEL || l_total_qty > labs(l_open_pos_qty))
      {
        fn_userlog(c_ServiceName," Broker under closeout mode, can place only IOC square off order.");
        fn_errlog( c_ServiceName, "B56070", DEFMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
      else
      {
        fn_userlog(c_ServiceName," under closeout and IOC square off order allow to Place the order ");
      }
    }

    if ( c_clsout_stts == RRM_MODE && strcmp(ptr_st_xchngbook->c_xchng_cd,"NFO") == 0 )
    {
      if (ptr_st_xchngbook->c_ord_typ == IMMEDIATE_OR_CANCEL || c_req_typ == 'J')
      {
				fn_userlog(c_ServiceName," under RRM_MODE and IOC or spread order allow to Place the order ");
      }
      else
      {
				fn_userlog(c_ServiceName," Broker under RRM_MODE mode, can place only IOC and spread orders.");
        fn_errlog( c_ServiceName, "B56070", DEFMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
    }

    /*****************End Ver 2.8 ****************/

    /**if(c_brkr_stts == CLOSE_OUT && c_brkr_clsout_flg == 'Y' ) ** ver 2.7 ** comment **/
		if(c_brkr_stts == CLOSE_OUT && c_brkr_clsout_flg == 'Y' && strcmp(ptr_st_xchngbook->c_xchng_cd,"NFO") == 0)				 /**** Ver 2.7 xchng_cd handling added **/
  	{
			if ( ptr_st_xchngbook->c_ord_typ == IMMEDIATE_OR_CANCEL && labs(l_open_pos_qty) >= l_total_qty )	
			{
				fn_userlog(c_ServiceName," IOC square off order allow to Place the order ");
			}
			else
			{
				fn_userlog(c_ServiceName,"ERROR condition in lib");
   			fn_errlog( c_ServiceName, "B56070", DEFMSG, ptr_st_err_msg->c_err_msg );
   			return FAILURE;
			}
  	}
    /** Ver 2.7 starts ***/
    if(strcmp(ptr_st_xchngbook->c_xchng_cd,"BFO") == 0 )
    {
      if( c_clsout_stts == RRM_MODE && c_brkr_clsout_flg == 'N' )
      {
        if( ptr_st_xchngbook->c_ord_typ != IMMEDIATE_OR_CANCEL && ptr_st_xchngbook->c_spl_flg !='C')
        {
          fn_userlog(c_ServiceName," Only Squareoff Orders are allowed as Broker under RRM");
          fn_errlog( c_ServiceName, "B56044", DEFMSG, ptr_st_err_msg->c_err_msg );
          return FAILURE;
        }
      }
      if( ( c_clsout_stts == RRM_MODE && c_brkr_clsout_flg == 'Y' )  ||
          ( c_clsout_stts == CLOSE_OUT && c_brkr_stts == CLOSE_OUT ) ||
          ( c_clsout_stts == 'N' && c_brkr_stts == CLOSE_OUT && c_brkr_clsout_flg =='Y' ) 
        )
      {
        if( ptr_st_xchngbook->c_spl_flg !='C')
        {
          fn_userlog(c_ServiceName," Only Squareoff Orders are allowed ");
          fn_errlog( c_ServiceName, "B56044", DEFMSG, ptr_st_err_msg->c_err_msg );
          return FAILURE;
        }
      }
    }
    /**** Ver 2.7 Ends ***/
	}
  /*** Ver 2.3 Ends ***/

	/*** Commented in ver 2.3****
  if(c_brkr_stts == CLOSE_OUT && ptr_st_xchngbook->c_ord_typ!= IMMEDIATE_OR_CANCEL)
  {
    fn_errlog( c_ServiceName, "B56045", DEFMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }
  *****************************/
	 if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Broker check sucess:status:%c", c_brkr_stts);
	}
  return SUCCESS;
}

/*** Ver 1.2 ****/
int fn_chk_cntrct_fp_sqoff(char * c_ServiceName,
                        struct vw_contract *ptr_st_cntrct,
												char *c_fum_mkt_typ,									/*ver 1.4 */
												char *c_fcm_mkt_typ,									/*ver 1.4 */
                        struct vw_err_msg *ptr_st_err_msg )
{

  EXEC SQL BEGIN DECLARE SECTION ;
    char  c_exchng_cd[4];
    char  c_prdct_type;
    char  c_underlyng[7];
    char  c_exercise_type ;
    varchar c_expiry_dt[ LEN_DATE ];
    char  c_option_type ;
    long  l_strike_price ;
    int   i_rec_exists ;
    char  c_qt_trdng_flg ;
    char  c_act_stts ;
		char  c_fcm_mrkt_typ;						/*Ver 1.4 */
		char  c_fum_mrkt_typ;						/*Ver 1.4 */
		char  c_fcm_fp_qt_trdng_flg;		/*Ver 1.5 */
  EXEC SQL END DECLARE SECTION ;


  strcpy(c_exchng_cd,ptr_st_cntrct->c_xchng_cd);
  c_prdct_type = ptr_st_cntrct->c_prd_typ ;
  strcpy(c_underlyng,ptr_st_cntrct->c_undrlyng);
  c_exercise_type = ptr_st_cntrct->c_exrc_typ ;
  c_option_type = ptr_st_cntrct->c_opt_typ ;
  l_strike_price = ptr_st_cntrct->l_strike_prc ;
  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_cntrct->c_expry_dt );
  SETLEN ( c_expiry_dt );
	rtrim ( (char *)c_expiry_dt.arr );

	if(DEBUG_MSG_LVL_3){
    fn_userlog( c_ServiceName, "FP c_exchng_cd:%s:", c_exchng_cd );
    fn_userlog( c_ServiceName, "FP c_prdct_type:%c:",c_prdct_type);
    fn_userlog( c_ServiceName, "FP c_underlyng:%s:", c_underlyng );
    fn_userlog( c_ServiceName, "FP c_expiry_dt:%s", c_expiry_dt.arr );
    fn_userlog( c_ServiceName, "FP c_exercise_type:%c:", c_exercise_type );
    fn_userlog( c_ServiceName, "FP c_option_type:%c:", c_option_type);
    fn_userlog( c_ServiceName, "FP l_strike_price:%ld:", l_strike_price );
	}

  i_rec_exists = 0 ;
/**Commented for Ver 1.4 
	  EXEC SQL
    SELECT  1
    INTO    :i_rec_exists
    FROM    dual
    WHERE   EXISTS
    (SELECT 1
     FROM   fum_fo_undrlyng_mstr
     WHERE  fum_xchng_cd =  :c_exchng_cd
     AND    fum_prdct_typ = 'F'
     AND    fum_undrlyng =  :c_underlyng
     AND    fum_qt_trdng_flg in ('Q','T')
     AND    fum_fp_trdng_flg in ('Q','T','S'));
******/
/**Added for Ver 1.4 **/
	  EXEC SQL
    SELECT 1,
					 fum_mrkt_typ
		INTO  :i_rec_exists,
					:c_fum_mrkt_typ
     FROM   fum_fo_undrlyng_mstr
     WHERE  fum_xchng_cd =  :c_exchng_cd
     AND    fum_prdct_typ = 'F'
     AND    fum_undrlyng =  :c_underlyng
     AND    fum_qt_trdng_flg in ('Q','T')
     AND    fum_fp_trdng_flg in ('Q','T','S');

    if( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "L31175", SQLMSG,ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "c_fum_mrkt_typ:%c:", c_fum_mrkt_typ);
		}

    if( (i_rec_exists != 1 ) || ( SQLCODE == NO_DATA_FOUND) )
    {
      fn_errlog( c_ServiceName, "B28513", DEFMSG,ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }
		
		*c_fum_mkt_typ = c_fum_mrkt_typ;								/*Ver 1.4 */

    /*** Commented In Ver 3.7  ***

		EXEC SQL
    SELECT fcm_qt_trdng_flg,
           fcm_act_stts,
					 fcm_mrkt_typ,
					 fcm_fp_qt_trdng_flg														*Ver 1.5 *
    INTO   :c_qt_trdng_flg,
           :c_act_stts,
					 :c_fcm_mrkt_typ,			  												*Ver 1.4 *
					 :c_fcm_fp_qt_trdng_flg													*Ver 1.5 *
    FROM    fcm_fo_cntrct_mstr
    WHERE   fcm_xchng_cd = :c_exchng_cd
    AND     fcm_prdct_typ = 'F'
    AND     fcm_undrlyng = :c_underlyng
    AND     fcm_expry_dt = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
    AND     fcm_exer_typ = :c_exercise_type
    AND     fcm_opt_typ =  :c_option_type
    AND     fcm_strk_prc = :l_strike_price;

    *** Ver 3.7 Comment Ends ***/

    /*** Ver 3.7 Starts ***/

    EXEC SQL
    SELECT ftq_qt_trdng_flg,
           ftq_act_stts,
           ftq_mrkt_typ,
           ftq_fp_qt_trdng_flg
    INTO   :c_qt_trdng_flg,
           :c_act_stts,
           :c_fcm_mrkt_typ,
           :c_fcm_fp_qt_trdng_flg
    FROM    ftq_fo_trd_qt
    WHERE   ftq_xchng_cd = :c_exchng_cd
    AND     ftq_prdct_typ = 'F'
    AND     ftq_undrlyng = :c_underlyng
    AND     ftq_expry_dt = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
    AND     ftq_exer_typ = :c_exercise_type
    AND     ftq_opt_typ =  :c_option_type
    AND     ftq_strk_prc = :l_strike_price;

    /*** Ver 3.7 Ends ***/

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog( c_ServiceName, "L31180", SQLMSG,ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "c_fcm_mrkt_typ:%c:", c_fcm_mrkt_typ);
		}

    /*if( ( ( c_qt_trdng_flg != 'Q' ) && ( c_qt_trdng_flg != 'T' ))
        || ( SQLCODE == NO_DATA_FOUND ) )			*/													/* Ver 1.5 */

    if( ( ( c_qt_trdng_flg != 'Q' ) && ( c_qt_trdng_flg != 'T' )) || 
				( ( c_fcm_fp_qt_trdng_flg != 'Q' ) && ( c_fcm_fp_qt_trdng_flg != 'T' ) && (c_fcm_fp_qt_trdng_flg == 'N'))					
        || ( SQLCODE == NO_DATA_FOUND ) )                        /*Ver 1.5 */
    {
      fn_errlog( c_ServiceName, "B28514", " ",ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

		*c_fcm_mkt_typ = c_fcm_mrkt_typ;								/*Ver 1.4 */

    return ( 0 );

}
		
/** Ver 1.3 Trading Limit check function added **/

int fn_chk_trdng_limit(char *c_ServiceName,
                    long l_ord_tot_qty,
										long l_ord_lmt_rt,
							 			char *c_pass_req_flg,
										struct vw_usr_prfl *ptr_st_usr_prfl,
                    struct vw_err_msg *ptr_st_err_msg )
{
	double d_trd_pass_lmt;
	long l_clnt_ctgry;
	double	d_ord_lmt_rt;
	double d_ordr_val;

	if(DEBUG_MSG_LVL_0) {
	fn_userlog(c_ServiceName,"fn_chk_trdng_limit : Input Match Account Is :%s:",ptr_st_usr_prfl->c_cln_mtch_accnt);
	}	/*** Ver 4.1 ***/

	EXEC SQL 
	 SELECT NVL(CCG_FO_TRD_PSWD_LMT,0) ,
				  CCG_CLNT_CTGRY_ID
	 INTO  :d_trd_pass_lmt,    
				 :l_clnt_ctgry
	 FROM  clm_clnt_mstr clm,
				 ccg_clnt_ctgry ccg
	 WHERE clm.clm_clnt_ctgry_id=ccg.ccg_clnt_ctgry_id
	 AND	 clm.clm_mtch_accnt	= (SELECT uac_clm_mtch_accnt
										 					FROM     uac_usr_accnts
										 					WHERE    UAC_CLM_MTCH_ACCNT = :ptr_st_usr_prfl->c_cln_mtch_accnt
										 					AND      rownum = 1);
  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "L31185", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

	d_ord_lmt_rt = l_ord_lmt_rt;
	d_ordr_val   = (l_ord_tot_qty * d_ord_lmt_rt/100 ) ;

  if(DEBUG_MSG_LVL_3)
  {
		fn_userlog(c_ServiceName,"category id is:%ld:",l_clnt_ctgry);
		fn_userlog(c_ServiceName,"Total Ordered Qty:%ld:",l_ord_tot_qty);
		fn_userlog(c_ServiceName,"Ordered Limit Rate:%lf:",d_ord_lmt_rt);
		fn_userlog(c_ServiceName,"Trading Password Limit is:%lf:",d_trd_pass_lmt);
		fn_userlog(c_ServiceName,"Estimated Order Value:%lf:",d_ordr_val);
  }

  if(d_trd_pass_lmt < d_ordr_val)
  {
		*c_pass_req_flg = YES ;
  }
	else
	{
		*c_pass_req_flg = NO;
	}

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"c_pass_req_flg:%c", *c_pass_req_flg);
	}
  return SUCCESS;
}

int fn_chk_strtgy_ord(char *c_ServiceName,
                    	struct vw_orderbook *ptr_st_ordbook,
                    	struct vw_err_msg *ptr_st_err_msg )
{
  char c_strtgy_flg;
	char c_und_strtgy_flg;
	if(DEBUG_MSG_LVL_5)
	{
		fn_userlog( c_ServiceName,"ptr_st_ordbook->c_xchng_cd is :%s:",ptr_st_ordbook->c_xchng_cd );
		fn_userlog( c_ServiceName,"ptr_st_ordbook->c_prd_typ is :%c:",ptr_st_ordbook->c_prd_typ );
		fn_userlog( c_ServiceName,"ptr_st_ordbook->c_ctgry_indstk is :%c:",ptr_st_ordbook->c_ctgry_indstk );
		fn_userlog( c_ServiceName,"ptr_st_ordbook->c_undrlyng is :%s:",ptr_st_ordbook->c_undrlyng );
		fn_userlog( c_ServiceName,"ptr_st_ordbook->c_expry_dt is :%s:",ptr_st_ordbook->c_expry_dt );
		fn_userlog( c_ServiceName,"ptr_st_ordbook->c_exrc_typ is :%c:",ptr_st_ordbook->c_exrc_typ );
		fn_userlog( c_ServiceName,"ptr_st_ordbook->c_opt_typ is :%c:",ptr_st_ordbook->c_opt_typ );
		fn_userlog( c_ServiceName,"ptr_st_ordbook->l_strike_prc is :%ld:",ptr_st_ordbook->l_strike_prc );
	}

  /*** Commented In Ver 3.7  ***

  EXEC SQL
    SELECT fcm_ds_qt_trdng_flg
    INTO   :c_strtgy_flg
    FROM   fcm_fo_cntrct_mstr
    WHERE  fcm_xchng_cd = :ptr_st_ordbook->c_xchng_cd
		AND    fcm_prdct_typ = :ptr_st_ordbook->c_prd_typ
		AND    fcm_indstk = :ptr_st_ordbook->c_ctgry_indstk
		AND    fcm_undrlyng = :ptr_st_ordbook->c_undrlyng 
		AND    fcm_expry_dt = :ptr_st_ordbook->c_expry_dt
		AND    fcm_exer_typ = :ptr_st_ordbook->c_exrc_typ
		AND    fcm_opt_typ = :ptr_st_ordbook->c_opt_typ
		AND    fcm_strk_prc = :ptr_st_ordbook->l_strike_prc;

   *** Ver 3.7 Comment Ends ***/

  /*** Ver 3.7 Starts ***/

  EXEC SQL
    SELECT ftq_ds_qt_trdng_flg
    INTO   :c_strtgy_flg
    FROM   ftq_fo_trd_qt
    WHERE  ftq_xchng_cd = :ptr_st_ordbook->c_xchng_cd
    AND    ftq_prdct_typ = :ptr_st_ordbook->c_prd_typ
    AND    ftq_indstk = :ptr_st_ordbook->c_ctgry_indstk
    AND    ftq_undrlyng = :ptr_st_ordbook->c_undrlyng
    AND    ftq_expry_dt = :ptr_st_ordbook->c_expry_dt
    AND    ftq_exer_typ = :ptr_st_ordbook->c_exrc_typ
    AND    ftq_opt_typ = :ptr_st_ordbook->c_opt_typ
    AND    ftq_strk_prc = :ptr_st_ordbook->l_strike_prc;

  /*** Ver 3.7 Ends ***/

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "L31190", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

	EXEC SQL
			 SELECT nvl(fum_ds_trdng_flg,'N')
			 INTO   :c_und_strtgy_flg
			 FROM   fum_fo_undrlyng_mstr
			 WHERE  fum_undrlyng  = :ptr_st_ordbook->c_undrlyng
			 AND    fum_prdct_typ = :ptr_st_ordbook->c_prd_typ;

	if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "L31195", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  if(c_strtgy_flg == 'N' || c_und_strtgy_flg == 'N')
  {
    fn_errlog( c_ServiceName, "B66068", DEFMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }
   if(DEBUG_MSG_LVL_5)
  {
    fn_userlog( c_ServiceName,"Strategy check sucess:status:%c", c_strtgy_flg );
		fn_userlog( c_ServiceName,"Strategy Flag is :%c:",c_strtgy_flg );
  }
  return SUCCESS;
}

 /***  Ver 1.8 Starts  ***/
int fn_chk_dtallwd	(	char *c_ServiceName,		
											struct vw_usr_prfl	*ptr_usr_prfl,
											char *c_user_id,
                  		struct vw_err_msg *ptr_st_err_msg )
{

	char 	c_dt_allwd_flg;
	char  c_dl_setup_no[4];

	int		i_dl_setup_no;


	if(DEBUG_MSG_LVL_0) {
	fn_userlog(c_ServiceName,"fn_chk_dtallwd : User ID Is :%s:",ptr_usr_prfl->c_user_id);
	}	

	EXEC SQL
		SELECT	NVL(USR_DT_ALLWD_FLG,'N'),
						NVL(USR_DL_SETUP_NO,0)
		INTO		:c_dt_allwd_flg,
						:i_dl_setup_no
		FROM		USR_USER_MASTER
		WHERE 	USR_USR_ID =	:ptr_usr_prfl->c_user_id;

	if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "L31200", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

	strcpy(c_user_id,ptr_usr_prfl->c_user_id);

	if(DEBUG_MSG_LVL_3) {
	fn_userlog(c_ServiceName,"Order Book User ID Is :%s:",c_user_id);
	}	/*** Ver 4.1 ***/

	if ( c_dt_allwd_flg == 'Y')
	{
		strcat(c_user_id,"_");
		sprintf(c_dl_setup_no,"%d",i_dl_setup_no);
		strcat(c_user_id,c_dl_setup_no);

		if(DEBUG_MSG_LVL_3) {
		fn_userlog(c_ServiceName,"Userd ID With DL SetUp No. Is :%s:",c_user_id);
		}	/*** Ver 4.1 ***/
	}
	else
	{
		strcat(c_user_id,"_0");
	}


	return 0 ;
 }

/******** Ver 1.9 Change ******/
int fn_nri_validation( char *c_ServiceName,
                  char *c_underlying,
                  char c_prd_typ ,
									char *c_xchng_cd,											/*** Ver 2.0 ***/
                  struct vw_err_msg *ptr_st_err_msg) 
{
  int i_returncode ;
  char c_nri_alwd_flg;
  if(DEBUG_MSG_LVL_3)
  { 
   fn_userlog(c_ServiceName,"Inside fn_valdt_nri Function");
   fn_userlog(c_ServiceName,"Underlying :%s:",c_underlying);
   fn_userlog(c_ServiceName,"Product Typ :%c:",c_prd_typ); 
   fn_userlog(c_ServiceName,"c_xchng_cd :%s:",c_xchng_cd); 
  }
  
	/*** Commented in Ver 2.0 ***											
  EXEC SQL
  SELECT nvl(FUM_NRI_ALLWD_FLG,'Y')
  INTO   :c_nri_alwd_flg
  FROM   FUM_FO_UNDRLYNG_MSTR
  WHERE  FUM_UNDRLYNG = :c_underlying
  AND    FUM_PRDCT_TYP = :c_prd_typ;
	***/

	/*** Ver 2.0 start ***/
	EXEC SQL
  SELECT nvl(FUM_NRI_ALLWD_FLG,'Y')
  INTO   :c_nri_alwd_flg
  FROM   FUM_FO_UNDRLYNG_MSTR
  WHERE  FUM_PRDCT_TYP = :c_prd_typ
	AND		 FUM_UNDRLYNG = :c_underlying
	AND		 FUM_XCHNG_CD = :c_xchng_cd;
	/*** Ver 2.0 end ***/

  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog( c_ServiceName, "L31205", SQLMSG,ptr_st_err_msg->c_err_msg );
    return ( -1 ) ;
  }                                  
  if( c_nri_alwd_flg == 'N' )         
  {
    fn_errlog( c_ServiceName, "B91081",DEFMSG,ptr_st_err_msg->c_err_msg );
    return ( -2 ) ;
  }  
 return 0;          
}           

/*** Ver 2.4 Starts ***/

int fn_chk_ord_max_limit( char *c_ServiceName,
                          char c_mtch_accnt_no[10+1] ,
                          long l_ord_tot_qty,
                          long l_ord_lmt_rt,
                          double	d_netadj_ord_val,
                          char  c_call_flg,
                          char  c_ord_typ,
                          char c_xchng_cd [ 4 ],
                          char *c_ord_val_flg,
                          char *c_cumopn_val_flg,
                          struct vw_err_msg *ptr_st_err_msg )
{
  double  d_ord_lmt_rt = 0.0;
  double  d_ordr_val = 0.0 ;
  double  d_ord_max_val = 0.0;
  double  d_tot_open_val = 0.0;
  char    sql_c_xchng_cd[4] ;
	char    c_msg[100];
  MEMSET(c_msg);
  MEMSET(ptr_st_err_msg->c_err_msg);

  d_ord_lmt_rt = l_ord_lmt_rt;
  d_ordr_val   = (l_ord_tot_qty * d_ord_lmt_rt) ;   /*** This Value is in Paise ***/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"---Inside Function fn_chk_ord_max_limit ");
    fn_userlog(c_ServiceName,"Order Type :%c:",c_ord_typ);
    fn_userlog(c_ServiceName,"Exchange Code Is :%s:",c_xchng_cd);
    fn_userlog(c_ServiceName,"Total Ordered Qty:%ld:",l_ord_tot_qty);
    fn_userlog(c_ServiceName,"Ordered Limit Rate:%lf:",d_ord_lmt_rt);
    fn_userlog(c_ServiceName,"Estimated Order Value:%lf:",d_ordr_val);
    fn_userlog(c_ServiceName,"Net open value to be adjusted:%lf:",d_netadj_ord_val);
    fn_userlog(c_ServiceName," Service call flag :%c:",c_call_flg);
  }

  strcpy ( sql_c_xchng_cd, c_xchng_cd );

	if(DEBUG_MSG_LVL_3) {
  fn_userlog(c_ServiceName,"Exchange Code Is :%s:",sql_c_xchng_cd);
	}	/*** Ver 4.1 ***/

  EXEC SQL
   SELECT NVL(EXG_MKT_MAX_VAL,0) ,
          NVL(EXG_LMT_MAX_VAL,0) ,
          NVL(EXG_MAX_CUM_OPNORD_VAL,0)
   INTO  :sql_exg_mkt_max_val,
         :sql_exg_lmt_max_val,
         :sql_exg_max_cum_opnord_val
   FROM  EXG_XCHNG_MSTR
   WHERE EXG_XCHNG_CD = :c_xchng_cd ;

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "L31210", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  sql_exg_mkt_max_val = sql_exg_mkt_max_val * 100 ;  /*** Converting into Paise ***/
  sql_exg_lmt_max_val = sql_exg_lmt_max_val * 100 ;  /*** Converting into Paise ***/
  sql_exg_max_cum_opnord_val = sql_exg_max_cum_opnord_val * 100 ; /*** Converting into Paise ***/

  if ( c_ord_typ == 'M' || c_ord_typ == 'L' || c_ord_typ == 'S' )
  {
    if ( c_ord_typ == 'M')
    {
      d_ord_max_val = sql_exg_mkt_max_val ;
    }
    else if ( c_ord_typ == 'L' || c_ord_typ == 'S')
    {
      d_ord_max_val = sql_exg_lmt_max_val ;
    }
  }

  EXEC SQL
         /*** SELECT  NVL(SUM(DECODE(FOD_PRDCT_TYP,'O',(FOD_LMT_RT+FOD_STRK_PRC),FOD_LMT_RT)*(FOD_ORDR_TOT_QTY Commented In Ver 3.0 ***/ 
         SELECT  NVL(SUM(DECODE(FOD_PRDCT_TYP,'O',(FOD_LMT_RT+FOD_STRK_PRC),'I',(FOD_LMT_RT+FOD_STRK_PRC),FOD_LMT_RT)*(FOD_ORDR_TOT_QTY    /*** Ver 3.0 ***/ 
								 - NVL(FOD_EXEC_QTY,0) - NVL(FOD_CNCL_QTY,0))),0)
         INTO    :d_tot_open_val
         FROM    FOD_FO_ORDR_DTLS , EXG_XCHNG_MSTR
         WHERE   FOD_TRD_DT = EXG_NXT_TRD_DT
         AND     FOD_XCHNG_CD = EXG_XCHNG_CD
         AND     EXG_XCHNG_CD = :c_xchng_cd
         AND     FOD_ORDR_STTS IN ('R','O','Q','P')
         AND     FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no ;

   if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
   {
      fn_errlog ( c_ServiceName, "L31215", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
   }


  if( d_ordr_val > d_ord_max_val ) /*** COmparing in Paise ***/
  {
    *c_ord_val_flg = YES ;
		sprintf(c_msg," (Max val:%.2lf)",d_ord_max_val/100);
  }
  else
  {
    *c_ord_val_flg = NO;
  }

	/**** Following is done to identify if the call is from modification service       ****/
  /**** If the call is from mod service ,no need to add d_ordr_val as it is already  ****/
  /**** considered in the net effect                                                 ****/
  if( d_netadj_ord_val != 0 || c_call_flg == 'M')
  {
    d_ordr_val = 0.0 ;
  }


  if((d_tot_open_val + d_ordr_val + d_netadj_ord_val) > sql_exg_max_cum_opnord_val) /*** Comparing in Paise ***/
  {
    *c_cumopn_val_flg = YES ;
		sprintf(c_msg," (Max val:%.2lf)",sql_exg_max_cum_opnord_val/100);
  }
  else
  {
    *c_cumopn_val_flg = NO;
  }


  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"c_ord_val_flg Is :%c", *c_ord_val_flg);
    fn_userlog(c_ServiceName,"c_cumopn_val_flg Is :%c", *c_cumopn_val_flg);
    fn_userlog(c_ServiceName,"d_tot_open_val Is :%lf",d_tot_open_val );
    fn_userlog(c_ServiceName,"d_ordr_val	Is :%lf",d_ordr_val);
    fn_userlog(c_ServiceName,"d_netadj_ord_val Is :%lf",d_netadj_ord_val);
    fn_userlog(c_ServiceName,"sql_exg_max_cum_opnord_val Is :%lf",sql_exg_max_cum_opnord_val);
    fn_userlog(c_ServiceName,"c_msg Is :%s",c_msg);
  }

	strcat(ptr_st_err_msg->c_err_msg,c_msg);
  return SUCCESS;
}

/*** Ver 2.4 Ends		***/


/*** Ver 2.9 Starts ***/
int fn_chk_frsh_cover_ord  (  char *c_ServiceName,
                          struct vw_orderbook *st_ordbk ,
                          char  *c_fresh_ord_flg ,
                          struct vw_err_msg *ptr_st_err_msg
                       )    /** int added in tux on linux **/
{

    /*** Variable declartion Starts ***/
    long  l_open_pos_qty   = 0;
    long  l_tot_ord_qty = 0;
    char  c_fresh_order_flg = '\0';
    char  c_open_flw        = '\0';
    int   i_flw_same = 0;
    /*** Variable declartion Ends   ***/



		if(DEBUG_MSG_LVL_3) {
          fn_userlog(c_ServiceName," --  Inside function fn_chk_frsh_cover_ord");
          fn_userlog(c_ServiceName," --  st_ordbk->c_ordr_rfrnc Is [%s]",st_ordbk->c_ordr_rfrnc);
          fn_userlog(c_ServiceName," --  st_ordbk->c_cln_mtch_accnt Is [%s]",st_ordbk->c_cln_mtch_accnt);
          fn_userlog(c_ServiceName," --  st_ordbk->c_xchng_cd Is [%s]",st_ordbk->c_xchng_cd);
          fn_userlog(c_ServiceName," --  st_ordbk->c_undrlyng is [%s]",st_ordbk->c_undrlyng);
          fn_userlog(c_ServiceName," --  st_ordbk->c_prd_typ Is [%c]",st_ordbk->c_prd_typ);
          fn_userlog(c_ServiceName," --  st_ordbk->c_ctgry_indstk Is [%c]",st_ordbk->c_ctgry_indstk);
          fn_userlog(c_ServiceName," --  st_ordbk->c_expry_dt Is [%s]",st_ordbk->c_expry_dt);
          fn_userlog(c_ServiceName," --  st_ordbk->c_exrc_typ Is [%c]",st_ordbk->c_exrc_typ);
          fn_userlog(c_ServiceName," --  st_ordbk->c_opt_typ Is [%c]",st_ordbk->c_opt_typ);
          fn_userlog(c_ServiceName," --  st_ordbk->l_strike_prc Is [%ld]",st_ordbk->l_strike_prc);
          fn_userlog(c_ServiceName," --  st_ordbk->c_ordr_flw Is [%c]",st_ordbk->c_ordr_flw);
          fn_userlog(c_ServiceName," --  st_ordbk->c_ordr_stts Is [%c]",st_ordbk->c_ordr_stts);
          fn_userlog(c_ServiceName," --  st_ordbk->c_pipe_id Is [%s]",st_ordbk->c_pipe_id);
          fn_userlog(c_ServiceName," --  st_ordbk->l_ord_tot_qty Is [%ld]",st_ordbk->l_ord_tot_qty);
		}	/*** Ver 4.1 ***/

    if (st_ordbk->c_prd_typ == 'O')
    {

            l_open_pos_qty = 0;
            l_tot_ord_qty  = 0;

            if (DEBUG_MSG_LVL_3)
            {
              fn_userlog(c_ServiceName,"Checking if open position flw is same ...");
            }

            c_open_flw = '\0';

            EXEC SQL
              SELECT FOP_OPNPSTN_FLW
              INTO  :c_open_flw
              FROM  FOP_FO_OPTIONS_PSTN
              WHERE FOP_CLM_MTCH_ACCNT =:st_ordbk->c_cln_mtch_accnt
              AND   FOP_XCHNG_CD       =:st_ordbk->c_xchng_cd
              AND   FOP_PRDCT_TYP      =:st_ordbk->c_prd_typ
              AND   FOP_OPT_TYP        =:st_ordbk->c_opt_typ
              AND   FOP_STRK_PRC       =:st_ordbk->l_strike_prc
              AND   FOP_INDSTK         =:st_ordbk->c_ctgry_indstk
              AND   FOP_UNDRLYNG       =:st_ordbk->c_undrlyng
              AND   FOP_EXPRY_DT       =:st_ordbk->c_expry_dt
              AND   FOP_EXER_TYP       =:st_ordbk->c_exrc_typ ;

            if ( SQLCODE != 0)
            {
              fn_errlog ( c_ServiceName, "S31005", SQLMSG, ptr_st_err_msg->c_err_msg );
              return FAILURE;
            }

            if (DEBUG_MSG_LVL_3)
            {
              fn_userlog(c_ServiceName," c_open_flw Is :%c:" ,c_open_flw);
            }


            if ( (c_open_flw == st_ordbk->c_ordr_flw ) && c_open_flw !='N')
            {
              if (DEBUG_MSG_LVL_3)
              {
                fn_userlog(c_ServiceName," As open posiiton flw is same...this is fresh order...");
              }

              c_fresh_order_flg = 'Y' ;
            }
            else if ((c_open_flw != st_ordbk->c_ordr_flw ) && c_open_flw !='N' )
            {

							if(DEBUG_MSG_LVL_3) {
              fn_userlog(c_ServiceName,"  open posiiton flw is not same......");
							}	/*** Ver 4.1 ***/

              EXEC SQL
                SELECT FOP_OPNPSTN_QTY,
                       DECODE(:st_ordbk->c_ordr_flw,'B',GREATEST(ABS(FOP_IBUY_QTY),ABS(FOP_EXBUY_QTY)),GREATEST(ABS(FOP_ISELL_QTY),ABS(FOP_EXSELL_QTY)))
                INTO  :l_open_pos_qty,
                      :l_tot_ord_qty
                FROM FOP_FO_OPTIONS_PSTN
                WHERE FOP_CLM_MTCH_ACCNT =:st_ordbk->c_cln_mtch_accnt
                AND   FOP_XCHNG_CD       =:st_ordbk->c_xchng_cd
                AND   FOP_PRDCT_TYP      =:st_ordbk->c_prd_typ
                AND   FOP_OPT_TYP        =:st_ordbk->c_opt_typ
                AND   FOP_STRK_PRC       =:st_ordbk->l_strike_prc
                AND   FOP_INDSTK         =:st_ordbk->c_ctgry_indstk
                AND   FOP_UNDRLYNG       =:st_ordbk->c_undrlyng
                AND   FOP_EXPRY_DT       =:st_ordbk->c_expry_dt
                AND   FOP_EXER_TYP       =:st_ordbk->c_exrc_typ
                AND   FOP_OPNPSTN_FLW    =(DECODE(:st_ordbk->c_ordr_flw,'B','S','B'))  ;

              if ( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
              {
                fn_errlog ( c_ServiceName, "S31010", SQLMSG, ptr_st_err_msg->c_err_msg );
                return FAILURE;
              }

              if (SQLCODE == NO_DATA_FOUND)
              {
                l_open_pos_qty  = 0;
                l_tot_ord_qty   = 0;
              }


              if ( (labs(l_tot_ord_qty)+ st_ordbk->l_ord_tot_qty) <= labs(l_open_pos_qty) ) /*** Need to confirm ***/
              {
                c_fresh_order_flg = 'N' ;
              }
              else
              {
                /*** This is to handle case wherein client trying to modify square-off order for other than qty ***/
                if(st_ordbk->l_ord_tot_qty == 0 )
                {
                  c_fresh_order_flg = 'N' ;
                }
                else
                {
                  c_fresh_order_flg = 'Y' ;
                }
              }

              if(DEBUG_MSG_LVL_3)
              {
                fn_userlog(c_ServiceName,"Open position quantity is |%ld|",l_open_pos_qty);
                fn_userlog(c_ServiceName," Total Order quantity is |%ld|",l_tot_ord_qty);
                fn_userlog(c_ServiceName," c_fresh_order_flg is |%c|",c_fresh_order_flg);
              }
            }
            else if (  c_open_flw =='N' )
            {
              fn_userlog(c_ServiceName," No open posiiton exists ...this is fresh order...");
              c_fresh_order_flg = 'Y' ;
            }
            else
            {
              fn_userlog(c_ServiceName," In ERROR CASE ...");
            }
        }
        else if (st_ordbk->c_prd_typ == 'F' || st_ordbk->c_prd_typ == 'P')
        {

            l_open_pos_qty = 0;
            l_tot_ord_qty  = 0;


            c_open_flw = '\0';

            EXEC SQL
              SELECT FFP_OPNPSTN_FLW
              INTO  :c_open_flw
              FROM  FFP_FO_FUTURES_PSTN
              WHERE FFP_CLM_MTCH_ACCNT =:st_ordbk->c_cln_mtch_accnt
              AND   FFP_XCHNG_CD       =:st_ordbk->c_xchng_cd
              AND   FFP_PRDCT_TYP      =(DECODE(:st_ordbk->c_prd_typ,'F','F','P'))
              AND   FFP_INDSTK         =:st_ordbk->c_ctgry_indstk
              AND   FFP_UNDRLYNG       =:st_ordbk->c_undrlyng
              AND   FFP_EXPRY_DT       =:st_ordbk->c_expry_dt
              AND   FFP_EXER_TYP       =:st_ordbk->c_exrc_typ ;

            if ( SQLCODE != 0 )
            {
              fn_errlog ( c_ServiceName, "S31015", SQLMSG, ptr_st_err_msg->c_err_msg );
              return FAILURE;
            }

            if (DEBUG_MSG_LVL_3)
            {
              fn_userlog(c_ServiceName," For Futures of NORMAL Client:c_open_flw Is :%c:" ,c_open_flw);
            }

            if ( ( c_open_flw == st_ordbk->c_ordr_flw) && c_open_flw !='N' )
            {
							if(DEBUG_MSG_LVL_3) {
              fn_userlog(c_ServiceName," As open posiiton flw is same...this is fresh order...");
							} /*** ver 4.1 ***/
              c_fresh_order_flg = 'Y' ;
            }
            else if (( c_open_flw != st_ordbk->c_ordr_flw ) && c_open_flw != 'N')
            {
							if(DEBUG_MSG_LVL_3) {
              fn_userlog(c_ServiceName,"  open posiiton flw is not same......");
							}	/*** Ver 4.1 ***/
              EXEC SQL
                SELECT FFP_OPNPSTN_QTY,
                       DECODE(:st_ordbk->c_ordr_flw,'B',GREATEST(ABS(FFP_IBUY_QTY),ABS(FFP_EXBUY_QTY)),GREATEST(ABS(FFP_ISELL_QTY),ABS(FFP_EXSELL_QTY)))
                INTO  :l_open_pos_qty,
                      :l_tot_ord_qty
                FROM FFP_FO_FUTURES_PSTN
                WHERE FFP_CLM_MTCH_ACCNT =:st_ordbk->c_cln_mtch_accnt
                AND   FFP_XCHNG_CD       =:st_ordbk->c_xchng_cd
                AND   FFP_PRDCT_TYP      = (DECODE(:st_ordbk->c_prd_typ,'F','F','P'))
                AND   FFP_INDSTK         =:st_ordbk->c_ctgry_indstk
                AND   FFP_UNDRLYNG       =:st_ordbk->c_undrlyng
                AND   FFP_EXPRY_DT       =to_date(:st_ordbk->c_expry_dt,'dd-Mon-yyyy')
                AND   FFP_EXER_TYP       =:st_ordbk->c_exrc_typ
                AND   FFP_OPNPSTN_FLW    =(DECODE(:st_ordbk->c_ordr_flw,'B','S','B'))  ;

              if ( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
              {
                fn_errlog ( c_ServiceName, "S31020", SQLMSG, ptr_st_err_msg->c_err_msg );
                return FAILURE;
              }

              if (SQLCODE == NO_DATA_FOUND)
              {
                l_open_pos_qty  = 0;
                l_tot_ord_qty   = 0;
              }


              if ( (labs(l_tot_ord_qty)+ st_ordbk->l_ord_tot_qty) <= labs(l_open_pos_qty) )
              {
                c_fresh_order_flg = 'N' ;
              }
              else
              {
                /*** This is to handle case wherein client trying to modify square-off order for other than qty ***/
                if(st_ordbk->l_ord_tot_qty == 0 )
                {
                  c_fresh_order_flg = 'N' ;
                }
                else
                {
                  c_fresh_order_flg = 'Y' ;
                }
              }


              if(DEBUG_MSG_LVL_3)
              {
                fn_userlog(c_ServiceName,"Open position quantity is |%ld|",l_open_pos_qty);
                fn_userlog(c_ServiceName," Total Order quantity is |%ld|",l_tot_ord_qty);
                fn_userlog(c_ServiceName," c_fresh_order_flg is |%c|",c_fresh_order_flg);
              }
            }
            else if (  c_open_flw == 'N' )
            {
              if (DEBUG_MSG_LVL_3)
              {
                fn_userlog(c_ServiceName," No open posiiton exists ...this is fresh order...");
              }

              c_fresh_order_flg = 'Y' ;
            }
            else
            {
              fn_userlog(c_ServiceName," In ERROR CASE ...");
            }
        }

    *c_fresh_ord_flg = c_fresh_order_flg ;
    return 0 ;

}
/*** Ver 2.9 Ends   ***/

/*** Ver 3.0 Starts ***/

void fn_avg_price_cal( char *c_ServiceName,
									 long *l_arr_qty,
									 long *l_arr_price, 
									 double *d_avg_price,
									 int sql_ord_ordr_qty)
{
  int     i_loop;
  long    l_total_qty;
  double  d_total_value;

  l_total_qty = 0;
  d_total_value = 0;

  for(i_loop = 0; i_loop < 5; i_loop++)
  {
    if(sql_ord_ordr_qty == l_total_qty)
      break;
    else if((sql_ord_ordr_qty - l_total_qty) >= l_arr_qty[i_loop])
    {
      d_total_value = d_total_value + ((double)l_arr_qty[i_loop] * (double)l_arr_price[i_loop]);  /* typecast to double in Ver 3.5 */
      l_total_qty += l_arr_qty[i_loop];
    }
    else if((sql_ord_ordr_qty - l_total_qty) < l_arr_qty[i_loop])
    {
      d_total_value = d_total_value + (((double)sql_ord_ordr_qty - (double)l_total_qty) * (double)l_arr_price[i_loop]); /* typecast to double in Ver 3.5 */
      l_total_qty += sql_ord_ordr_qty - l_total_qty;
    }
  }
   *d_avg_price = d_total_value/l_total_qty;

 
	 fn_round2_cal( c_ServiceName,d_avg_price);
}

void fn_round2_cal( char *c_ServiceName,
							  double *d_vl)
{
  char c_temp[30];
  long l_temp;

  *d_vl = (*d_vl + 0.005) * 100;

  sprintf(c_temp, "%lf", *d_vl);
  sscanf(c_temp, "%ld", &l_temp);

  *d_vl = ((double)l_temp)/100;
}
/*** Ver 3.0 ends ***/

/***  Ver 2.6 Starts  ***/

int fn_lmt_excd_qty_rt  ( char    *c_ServiceName,
                          FBFR32  *ptr_fml_Ibuffer,
                          char    *c_psswrd_flg,
                          struct  vw_usr_prfl *ptr_st_usr_prfl,
                          int     i_cnt,
                          char    *c_err_msg
                        )
{
  char c_xchng_cd[4];
  char c_prdct_typ;
  char c_undrlyng[7];
  char c_exrc_typ;
  char c_opt_typ;
  char c_xpry_dt[12];
  char c_lmtmrkt_flg;
  char c_trdng_psswrd_flg = YES;

  int i = 0;
  int i_ch_val  = 0;
  int i_rtrncd  = 0;
  int i_ordr_cnt=0;
  int i_err[10];
  int i_ferr[10];

  long  l_strk_prc    = 0;
  long  l_ordr_qty    = 0;
  long  l_ordr_rt     = 0;
  long  l_lst_trd_prc = 0;

  struct vw_usr_prfl st_usr_prfl;
  struct vw_err_msg st_err_msg;

  if(DEBUG_MSG_LVL_3)	/*** Ver 4.1 ***/
  {
    fn_userlog(c_ServiceName,"Inside Function fn_lmt_excd_qty_rt .");
    fn_userlog(c_ServiceName,"Inside Function i_cnt is :%ld",i_cnt);
    fn_userlog(c_ServiceName,"Inside Function Before i_ordr_cnt is :%d:",i_ordr_cnt);
  }

  for ( i_ordr_cnt  = 0 ; i_ordr_cnt  < i_cnt ; i_ordr_cnt++  )
  {
	  if(DEBUG_MSG_LVL_3)	{ 
	    fn_userlog(c_ServiceName,"Inside Function i_ordr_cnt is :%d:",i_ordr_cnt);
	  } /*** Ver 4.1 ***/

    l_ordr_qty    = 0;
    l_ordr_rt     = 0;
    l_strk_prc    = 0;
    l_lst_trd_prc = 0;

    i_err[0]      = Fget32(ptr_fml_Ibuffer,FFO_XCHNG_CD,i_ordr_cnt,(char *)c_xchng_cd,0);
    i_ferr [ 0 ]  = Ferror32;
    i_err[1]      = Fget32(ptr_fml_Ibuffer,FFO_PRDCT_TYP,i_ordr_cnt,(char *)&c_prdct_typ,0);
    i_ferr [ 1 ]  = Ferror32;
    i_err[2]      = Fget32(ptr_fml_Ibuffer,FFO_UNDRLYNG,i_ordr_cnt,(char *)c_undrlyng,0);
    i_ferr [ 2 ]  = Ferror32;
    i_err[3]      = Fget32(ptr_fml_Ibuffer,FFO_EXPRY_DT,i_ordr_cnt,(char *)c_xpry_dt,0);
    i_ferr [ 3 ]  = Ferror32;
    i_err[4]      = Fget32(ptr_fml_Ibuffer,FFO_EXER_TYP,i_ordr_cnt,(char *)&c_exrc_typ,0);
    i_ferr [ 4 ]  = Ferror32;
    i_err[5]      = Fget32(ptr_fml_Ibuffer,FFO_OPT_TYP,i_ordr_cnt,(char *)&c_opt_typ,0);
    i_ferr [ 5 ]  = Ferror32;
    i_err[6]      = Fget32(ptr_fml_Ibuffer,FFO_STRK_PRC,i_ordr_cnt,(char *)&l_strk_prc,0);
    i_ferr [ 6 ]  = Ferror32;
    i_err[7]      = Fget32(ptr_fml_Ibuffer,FFO_LMT_MKT_SL_FLG,i_ordr_cnt,(char *)&c_lmtmrkt_flg,0);
    i_ferr [ 7 ]  = Ferror32;
    i_err[8]      = Fget32(ptr_fml_Ibuffer,FFO_ORD_TOT_QTY,i_ordr_cnt,(char *)&l_ordr_qty,0);
    i_ferr [ 8 ]  = Ferror32;
    i_err[9]      = Fget32(ptr_fml_Ibuffer,FFO_LMT_RT,i_ordr_cnt,(char *)&l_ordr_rt,0);
    i_ferr [ 9 ]  = Ferror32;

    for ( i = 0 ; i <= 10 ; i++ )
    {
      if ( (i_err[ i ] == -1 ) && i_ferr[ i ] != FNOTPRES  )
      {
        fn_errlog( c_ServiceName, "L31220",Fstrerror32(i_ferr[i]),c_err_msg);
        fn_userlog(c_ServiceName,"Error in field %d in record no %d",i_ordr_cnt,i_cnt );
        return -1;
      }
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName," Input Exchange Code Is :%s:",c_xchng_cd);
      fn_userlog(c_ServiceName," Input Product Type Is :%c:",c_prdct_typ);
      fn_userlog(c_ServiceName," Input Underlying Is :%s:",c_undrlyng);
      fn_userlog(c_ServiceName," Input Expiry Date Is :%s:",c_xpry_dt);
      fn_userlog(c_ServiceName," Input Exercise Type Is :%c:",c_exrc_typ);
      fn_userlog(c_ServiceName," Input Option Type Is :%c:",c_opt_typ);
      fn_userlog(c_ServiceName," Input Strike Price Is :%ld:",l_strk_prc);
      fn_userlog(c_ServiceName," Input Limit/Market Flag Is :%c:",c_lmtmrkt_flg);
      fn_userlog(c_ServiceName," Input Total Order Qty Is :%ld:",l_ordr_qty);
      fn_userlog(c_ServiceName," Input Order Rate Is :%ld:", l_ordr_rt);
    }

    if ( c_prdct_typ == 'F' || c_prdct_typ == 'P' )
    {
      if ( c_lmtmrkt_flg == 'M')
      {
				if(DEBUG_MSG_LVL_3) {
	        fn_userlog(c_ServiceName,"Inside Future Market Check.");
				}	/*** ver 4.1 ***/

        EXEC SQL
          SELECT  FTQ_LST_TRD_PRC
          INTO    :l_lst_trd_prc
          FROM    FTQ_FO_TRD_QT
          WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
          AND     FTQ_PRDCT_TYP = decode (:c_prdct_typ,'P','F',:c_prdct_typ)
          AND     FTQ_UNDRLYNG  = :c_undrlyng
          AND     FTQ_EXPRY_DT  = :c_xpry_dt ;


        if ( SQLCODE != 0 )
        {
          fn_userlog(c_ServiceName,"Error while selecting Last Trade Price.");
          fn_errlog ( c_ServiceName, "L31225", SQLMSG, c_err_msg );
          return -1;
        }

        l_ordr_rt   = l_lst_trd_prc;

        if(DEBUG_MSG_LVL_3)
        {
				  if(DEBUG_MSG_LVL_0)	{ 
	          fn_userlog(c_ServiceName," Last Trade Price Is :%ld:",l_lst_trd_prc);
					}	/*** Ver 4.1 ***/
        }
      }
    }
    else if ( c_prdct_typ == 'O' )
    {
		  if(DEBUG_MSG_LVL_3)	{ 
	      fn_userlog(c_ServiceName,"Inside Option Product Type Check.");
			} /*** Ver 4.1 ***/

      l_ordr_rt   = l_strk_prc;
    }
    else
    {
      fn_userlog(c_ServiceName,"Invalid Product Type :%c:",c_prdct_typ);
      return -1;
    }

    i_ch_val  = fn_chk_trdng_limit  ( c_ServiceName,
                                      l_ordr_qty,
                                      l_ordr_rt,
                                      &c_trdng_psswrd_flg,
                                      ptr_st_usr_prfl,
                                      &st_err_msg
                                    );

    if (  i_ch_val  ==  -1  )
    {
      fn_userlog(c_ServiceName,"Error In fn_chk_trdng_limit.");
      return -1;
    }


    if ( c_trdng_psswrd_flg == YES )
    {
      fn_userlog(c_ServiceName,"Inside For Loop for Password Flag Check.");
      break;
    }

  }

  *c_psswrd_flg = c_trdng_psswrd_flg;

  return 0 ;
}

/***  Ver 2.6 Ends  ***/
/** Ver 3.8 Starts *******/
int fn_chk_und_insider(char *c_ServiceName,
												struct vw_usr_prfl ptr_st_usr_prfl,
												struct vw_contract st_cntrct,		/** Ver 4.9 **/
												/*char *c_underlying, ** Ver 4.9 comment **/
												int *ins_exists)
{
		EXEC SQL BEGIN DECLARE SECTION;
     int i_exist=0; 
		 int i_exist1=0;		
		 int i_ins_map_stts=0;					/** Ver 4.9 **/		
		 /* char c_comp_cd[4]={"\0"};			        ** Ver 4.9 **
		 char c_stck_cd[6]={"\0"};			        ** Ver 4.9 ** ** Ver 5.2 comment**/
	   char c_comp_cd[5]={"\0"};					/** Ver 5.2 **/	
	   char c_stck_cd[7]={"\0"};					/** Ver 5.2 **/ 
		 char c_der_trd_restr_stts='N'; /** Ver 4.9 **/
		 char c_stck_rstr_stts='N';     /** Ver 4.9 **/
		 char c_indx_rstr_stts='N';     /** Ver 4.9 **/
		EXEC SQL END DECLARE SECTION;

	  if(DEBUG_MSG_LVL_3)	{ 
    fn_userlog(c_ServiceName,"c_ServiceName :%s:",c_ServiceName);
    fn_userlog(c_ServiceName,"ptr_st_usr_prfl :%s:",ptr_st_usr_prfl.c_cln_mtch_accnt);
    fn_userlog(c_ServiceName,"c_undrlyng :%s:",st_cntrct.c_undrlyng);
		fn_userlog(c_ServiceName,"Inside function fn_chk_und_insider");
		} /*** Ver 4.1 ***/

	  if(DEBUG_MSG_LVL_0)	{ 
		fn_userlog(c_ServiceName,"fn_chk_und_insider :Match Account Is :%s: Underlying Is :%s:",ptr_st_usr_prfl.c_cln_mtch_accnt,st_cntrct.c_undrlyng);
		/*** fn_userlog(c_ServiceName,"Underlying in check :%s:",c_underlying); *** Ver 4.1 ***/
		} /*** Ver 4.1 ***/
		EXEC SQL
			SELECT count(IED.rowid)
			INTO  i_ins_map_stts
			FROM  IED_ITMS_EMP_DTLS IED,ITE_INSD_TRD_EMP_MSTR ITE,IOM_INFO_ORGANIZATION_MSTR IOM
			WHERE IED_COMP_CD=IOM_ORGANIZATION_CODE
			AND 	IED_COMP_CD=RTRIM(ITE_CMPY_ID)
			AND   (IED_MATCH_ID =ITE_MTCH_ACCNT
     				or IED_MATCH_ID=nvl(ITE_RELATIVE_MTCH,'NA'))
			AND 	IED_MATCH_ID=:ptr_st_usr_prfl.c_cln_mtch_accnt
			AND   nvl(IOM_DER_TRD_STTS,'N') in ('Y','D');	/* Ver 5.2 D added */
		if(SQLCODE != 0 )
		{
      fn_userlog(c_ServiceName,"Error while selecting Insider mapping details.");
      fn_errlog ( c_ServiceName, "L31230", SQLMSG, c_err_msg );
      return -1;
		}
		if( i_ins_map_stts == 0 )
		{
			fn_userlog(c_ServiceName,"customer not mapped to any insider restriction..continue order placement..");
			i_exist=0;
			*ins_exists = i_exist;                  /** Ver 5.2 **/
			return SUCCESS;                         /** Ver 5.2 **/
		}
		EXEC SQL
		 DECLARE cur_insdr_der CURSOR FOR
			SELECT IED_COMP_CD,
				nvl(IOM_STCK_CD,'NA'),
			       	/* 'Y',				*** Ver 5.2 comment**/
		   		case when nvl(IOM_DER_TRD_STTS,'N') = 'D' and nvl(IED_DESIGNATE_FLAG,'A') = 'D' then 'Y'
				     when nvl(IOM_DER_TRD_STTS,'N') = 'Y' then 'Y'
			             else 'N' end,						/*** Ver 5.2 **/
				case when nvl(IOM_STCK_RESTR_STTS,'N')='N' then 'N'
				     when nvl(IED_DESIGNATE_FLAG,'A') = 'A' and nvl(IOM_STCK_RESTR_STTS,'N') in ('Y','A') then 'Y' 
				     when nvl(IED_DESIGNATE_FLAG,'A') = 'D' and nvl(IOM_STCK_RESTR_STTS,'N') in ('Y','D') then 'Y'
				     else 'N' end,
				case when nvl(IOM_INDEX_RESTR_STTS,'N') ='N' then 'N'
				     when nvl(IED_DESIGNATE_FLAG,'A') = 'A' and nvl(IOM_INDEX_RESTR_STTS,'N') in ('Y','A') then 'Y' 
				     when nvl(IED_DESIGNATE_FLAG,'A') = 'D' and nvl(IOM_INDEX_RESTR_STTS,'N') in ('Y','D') then 'Y'
				     else 'N' end
			FROM 	IED_ITMS_EMP_DTLS,ITE_INSD_TRD_EMP_MSTR,IOM_INFO_ORGANIZATION_MSTR
			WHERE IED_COMP_CD=IOM_ORGANIZATION_CODE
			AND 	IED_COMP_CD=RTRIM(ITE_CMPY_ID)
			AND   (IED_MATCH_ID =ITE_MTCH_ACCNT
     				or IED_MATCH_ID=nvl(ITE_RELATIVE_MTCH,'NA'))
			AND 	IED_MATCH_ID=:ptr_st_usr_prfl.c_cln_mtch_accnt
			AND   nvl(IOM_DER_TRD_STTS,'N') in ('Y','D');			/*** Ver 5.2 D added */


		if(SQLCODE != 0 )
		{
      fn_userlog(c_ServiceName,"Error while selecting Insider mapping details.");
      fn_errlog ( c_ServiceName, "L31235", SQLMSG, c_err_msg );
      return -1;
		}
		EXEC SQL OPEN cur_insdr_der;
		if(SQLCODE !=  0 )
		{
      fn_userlog(c_ServiceName,"Error while selecting Insider mapping details.");
			exec sql close cur_insdr_der;
      fn_errlog ( c_ServiceName, "L31240", SQLMSG, c_err_msg );
      return -1;
		}
   while(1)
	 {	
		MEMSET(c_comp_cd);
		MEMSET(c_stck_cd);
		c_der_trd_restr_stts='N';
		c_stck_rstr_stts='N';
		c_indx_rstr_stts='N';

		EXEC SQL
		 FETCH cur_insdr_der
			INTO  :c_comp_cd,
						:c_stck_cd,
						:c_der_trd_restr_stts,
						:c_stck_rstr_stts,
						:c_indx_rstr_stts;
		if(SQLCODE !=0 && SQLCODE!= NO_DATA_FOUND )
		{
      fn_userlog(c_ServiceName,"Error while selecting Insider mapping details.");
			EXEC SQL close cur_insdr_der;
      fn_errlog ( c_ServiceName, "L31245", SQLMSG, c_err_msg );
      return -1;
		}
		if(SQLCODE == NO_DATA_FOUND )
		{
			fn_userlog(c_ServiceName,"No more records to process");
			break;
		}			
	  if(DEBUG_MSG_LVL_0)	{ 
    fn_userlog(c_ServiceName,"inside while c_comp_cd-c_stck_cd :%s-%s:",c_comp_cd,c_stck_cd);
    fn_userlog(c_ServiceName,"der_trd_restr_stts|stck_rstr_stts|indx_rstr_stts :%c|%c|%c:",c_der_trd_restr_stts,c_stck_rstr_stts,c_indx_rstr_stts);
		} /*** Ver 4.1 ***/
		if(c_der_trd_restr_stts == 'N' )
		{
			fn_userlog(c_ServiceName,"No Derivative trading restriction enabled.. Continue order placement..");	
			i_exist=0;
		}	
	  else if (c_der_trd_restr_stts == 'Y' && c_stck_rstr_stts == 'Y' && st_cntrct.c_ctgry_indstk =='S' )
		{
				fn_userlog(c_ServiceName,"Stock Derivative trading restriction enabled.. Restrict All product order placement in Stocks..");	
				i_exist=1;
		}
	  else if (c_der_trd_restr_stts == 'Y' && c_indx_rstr_stts == 'Y' && st_cntrct.c_ctgry_indstk =='I' )
		{
			fn_userlog(c_ServiceName,"Indices Derivative trading restriction enabled.. Restrict order placement for Indices..");	
			i_exist=1;
		}
	  else if (c_der_trd_restr_stts == 'Y' && strcmp(st_cntrct.c_undrlyng,c_stck_cd ) == 0  )
		{
			fn_userlog(c_ServiceName,"Derivative trading restriction enabled in self stock-%s:.. Restrict order placement..",c_stck_cd);	
			i_exist=1;
		}
		else
		{
			fn_userlog(c_ServiceName,"No Derivative trading restriction enabled.. Continue order placement..");	
			i_exist=0;
		}
	  if(i_exist == 1 )
		{
		  fn_userlog(c_ServiceName,"Order placement restricted in :%s: against :%s: insider policy",c_stck_cd,c_comp_cd);
			break;
		}	
	 }/** End of while **/
	 EXEC SQL close cur_insdr_der;
		/** Ver 4.9 ends **/	
		/** Ver 4.9 comment **
			if (strcmp(c_underlying,"ICIBAN") == 0)
			{
				EXEC SQL
				SELECT 1
					INTO :i_exist
					FROM ITE_INSD_TRD_EMP_MSTR
				 WHERE (ITE_MTCH_ACCNT = :ptr_st_usr_prfl.c_cln_mtch_accnt
						OR ITE_RELATIVE_MTCH = :ptr_st_usr_prfl.c_cln_mtch_accnt)
					AND RTRIM(ITE_CMPY_ID) = 'BANK';
			
			
			  if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    		{
      		fn_userlog(c_ServiceName,"Error while selecting From RLD_RST_LST_DTLS.");
      		fn_errlog ( c_ServiceName, "L31250", SQLMSG, c_err_msg );
      		return -1;
    		}
			}	
   
 	  if(DEBUG_MSG_LVL_3)	{ 
			fn_userlog(c_ServiceName,"function Excute sucessfully.............");
			fn_userlog(c_ServiceName,"i_exist :%d:",i_exist);
		} *** Ver 4.1 *** 
		***** ver 4.9 comment Ends **/
		*ins_exists = i_exist;

	  if(DEBUG_MSG_LVL_3)	{ 
			fn_userlog(c_ServiceName,"function Excute sucessfully1.............");
		} /*** Ver 4.1 ***/ 

		return SUCCESS;
}
/** Ver 3.8 Ends *******/

/*** Ver 3.4 Starts Here **/
int fn_chk_vtcord(char *c_ServiceName,
                  struct vw_xchngbook *ptr_st_xchngbook,
                  struct vw_contract  *ptr_st_cntrct_qt,
                  struct vw_err_msg   *ptr_st_err_msg )
{

 int i_exists=0;

 rtrim(ptr_st_cntrct_qt->c_expry_dt);

 if( ptr_st_xchngbook->c_slm_flg != LIMIT )
 {
   fn_errlog( c_ServiceName, "B28519",DEFMSG,ptr_st_err_msg->c_err_msg);
   return FAILURE;
 }

 EXEC SQL
 SELECT 1
   INTO :i_exists
   FROM DUAL
  WHERE ( ( to_date(:ptr_st_xchngbook->c_valid_dt,'dd-Mon-YYYY') < to_date(:ptr_st_xchngbook->c_mod_trd_dt,'dd-Mon-YYYY')) OR
          ( to_date(:ptr_st_xchngbook->c_valid_dt,'dd-Mon-YYYY') > to_date(:ptr_st_cntrct_qt->c_expry_dt,'dd-Mon-YYYY')));

 if( i_exists == 1 )
 {
   fn_errlog( c_ServiceName, "B91153",DEFMSG,ptr_st_err_msg->c_err_msg);
   return FAILURE;
 }

 if(ptr_st_xchngbook->l_stp_lss_tgr != 0)
 {
   fn_errlog( c_ServiceName, "B91154",DEFMSG,ptr_st_err_msg->c_err_msg);
   return FAILURE;
 }

return SUCCESS;
}
/*** Ver 3.4 Ends here ***/

/***** Ver 4.4 Start   ****/

int fn_stop_vtc (char *c_ServiceName,
                 char *c_ordr_rfrnc,
                 struct vw_orderbook *ptr_vw_ordbook,
                 struct vw_err_msg *ptr_st_err_msg
                )
 {
     fn_userlog(c_ServiceName,"In fn_stop_vtc Function .....");
     fn_userlog(c_ServiceName,"c_xchng_cd :%s:",ptr_vw_ordbook->c_xchng_cd);
     fn_userlog(c_ServiceName,"c_ordr_rfrnc:%s:",ptr_vw_ordbook->c_ordr_rfrnc);
     fn_userlog(c_ServiceName,"c_pipe_id:%s:",ptr_vw_ordbook->c_pipe_id);
     fn_userlog(c_ServiceName,"c_mod_trd_dt:%s:",ptr_vw_ordbook->c_trd_dt);
     fn_userlog(c_ServiceName,"c_valid_dt:%s",ptr_vw_ordbook->c_valid_dt);
     fn_userlog(c_ServiceName,"l_dsclsd_qty:%ld:",ptr_vw_ordbook->l_dsclsd_qty);
     fn_userlog(c_ServiceName,"l_ord_tot_qty:%ld:",ptr_vw_ordbook->l_ord_tot_qty);
     fn_userlog(c_ServiceName,"l_ord_lmt_rt:%ld:",ptr_vw_ordbook->l_ord_lmt_rt);
     fn_userlog(c_ServiceName,"l_stp_lss_tgr:%ld:",ptr_vw_ordbook->l_stp_lss_tgr);

     fn_userlog(c_ServiceName,"Inserting in FXB table.");

     EXEC SQL
     INSERT INTO FXB_FO_XCHNG_BOOK
      (
        FXB_XCHNG_CD,
        FXB_ORDR_RFRNC,
        FXB_PIPE_ID,
        FXB_MOD_TRD_DT,
        FXB_ORDR_SQNC,
        FXB_LMT_MRKT_SL_FLG,
        FXB_DSCLSD_QTY,
        FXB_ORDR_TOT_QTY,
        FXB_LMT_RT,
        FXB_STP_LSS_TGR,
        FXB_MDFCTN_CNTR,
        FXB_ORDR_VALID_DT,
        FXB_ORDR_TYPE,
        FXB_RQST_TYP,
        FXB_QUOTE,
        FXB_QT_TM,
        FXB_RQST_TM,
        FXB_PLCD_STTS,
        FXB_RMS_PRCSD_FLG,
        FXB_EX_ORDR_TYP,
        FXB_XCHNG_RMRKS,
        FXB_SPL_FLAG,
        FXB_MRKT_TYP,
        FXB_IP,
        FXB_SPN_FLG
      )
      VALUES
      ( :ptr_vw_ordbook->c_xchng_cd,
        :ptr_vw_ordbook->c_ordr_rfrnc,
        :ptr_vw_ordbook->c_pipe_id,
        :ptr_vw_ordbook->c_trd_dt,
         0,
         null,
        :ptr_vw_ordbook->l_dsclsd_qty,
        :ptr_vw_ordbook->l_ord_tot_qty,
        :ptr_vw_ordbook->l_ord_lmt_rt,
        :ptr_vw_ordbook->l_stp_lss_tgr,
         0,
        :ptr_vw_ordbook->c_valid_dt,
        :ptr_vw_ordbook->c_ord_typ,
        'N',
         0,
         SYSDATE,
         SYSDATE,
        'J',
        'P',
        'O',
        'VTC order stopped and closed by User/CNT',
        'C',
        'N',
        '',
        'N'
      );

     if ( SQLCODE != 0 )
     {
      fn_userlog(c_ServiceName,"Error while Inserting in FXB table.");
      fn_errlog ( c_ServiceName, "L31255", SQLMSG, c_err_msg );
      return -1;
     }

    EXEC SQL
     UPDATE FOD_FO_ORDR_DTLS
     SET   FOD_FC_FLAG = 'Y'
     WHERE FOD_ORDR_RFRNC = :c_ordr_rfrnc;


     if ( SQLCODE != 0 )
     {
      fn_userlog(c_ServiceName,"Error while updating FOD table.");
      fn_errlog ( c_ServiceName, "L31260", SQLMSG, c_err_msg );
      return -1;
     }

   fn_userlog(c_ServiceName,"fn_stop_vtc Function end .....");

   return 0 ;
 }
/***** Ver 4.4 End   ****/

/*** ver 4.7 started ***/
int fn_vrfy_prc_band_mkt_rws ( char c_ServiceName [ 33 ],
                       char c_xchng_cd [ 4 ],
                       char c_prd_typ,
                       char c_undrlyng [ 7 ],
                       long l_ord_limit_rt,
                       char *c_spd_expry_dt1,
                       char *c_spd_expry_dt2,
                       struct vw_err_msg *ptr_st_err_msg )
{

  long l_upbnd_rt = 0;
  long l_lwbnd_rt = 0;

  EXEC SQL BEGIN DECLARE SECTION;
    char    sql_c_xchng_cd[4] ;
    char    sql_c_prd_typ ;
    char    sql_c_undrlyng[7] ;
  EXEC SQL END DECLARE SECTION;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "c_xchng_cd:%s:", c_xchng_cd );
    fn_userlog( c_ServiceName, "c_prd_typ:%c:",c_prd_typ);
    fn_userlog( c_ServiceName, "c_undrlyng:%s:", c_undrlyng );
    fn_userlog( c_ServiceName, "l_ord_limit_rt:%ld:", l_ord_limit_rt );
    fn_userlog( c_ServiceName, "c_spd_expry_dt1 is :%s:",c_spd_expry_dt1 );
    fn_userlog( c_ServiceName, "c_spd_expry_dt2 is :%s:",c_spd_expry_dt2);
  }


  strcpy ( sql_c_xchng_cd, c_xchng_cd );
  sql_c_prd_typ = c_prd_typ;
  strcpy ( sql_c_undrlyng, c_undrlyng );

  EXEC SQL
       select NVL(FTQ_HGH_PRC_RNG,0),
              NVL(FTQ_LOW_PRC_RNG,0)
       INTO   :l_upbnd_rt,
              :l_lwbnd_rt
       from   FTQ_FO_TRD_QT
       where  FTQ_XCHNG_CD =  :sql_c_xchng_cd
       and    FTQ_PRDCT_TYP = decode(:sql_c_prd_typ,'F','S',:sql_c_prd_typ)
       and    FTQ_UNDRLYNG =  :sql_c_undrlyng
       and    FTQ_EXPRY_DT =  to_date(:c_spd_expry_dt1,'dd-Mon-yyyy' )
       and    FTQ_EXPRY_DT2 =  to_date(:c_spd_expry_dt2,'dd-Mon-yyyy' );

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31265", SQLMSG, c_err_msg );
    return ( -1 );
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "l_upbnd_rt :%ld:", l_upbnd_rt);
    fn_userlog( c_ServiceName, "l_lwbnd_rt :%ld:", l_lwbnd_rt);
    fn_userlog( c_ServiceName, "l_ord_limit_rt :%ld:", l_ord_limit_rt);
  }

  if ( ( l_ord_limit_rt > l_upbnd_rt ) ||
       ( l_ord_limit_rt < l_lwbnd_rt )  )
  {
    fn_errlog( c_ServiceName, "B28006", " ",ptr_st_err_msg->c_err_msg );
    return ( -1 ) ;
  }


}

/** COMMNETED IN VER TOL : TUX on LINUX -- moved definition to eba_common.c (Ravindra) ***
void fn_timearr_to_long(char *c_tm_stmp,
                        long int *ptr_li_dest)
{
  int  i_srcindex;
  int  i_arrayindex;
  char c_tmp;
  char c_day[3];
  char c_mon[4];
  char c_yr[5];
  char c_hr[3];
  char c_min[3];
  char c_sec[3];

  struct tm temp_tm;

  if(strcmp(c_tm_stmp, "0") == 0)
  {
   *ptr_li_dest = 0;
   return;
  }

	  for(i_arrayindex = 0, i_srcindex = 0; i_srcindex < 2; i_srcindex++, i_arrayindex++)
  {
    *(c_day + i_arrayindex) = *(c_tm_stmp + i_srcindex);
  }
  c_day[2] = '\0';

  for(i_arrayindex = 0, i_srcindex = 3; i_srcindex < 6; i_srcindex++, i_arrayindex++)
  {
    *(c_mon + i_arrayindex) = *(c_tm_stmp + i_srcindex);
  }
  c_mon[3] = '\0';

  for(i_arrayindex = 0, i_srcindex = 7; i_srcindex < 11; i_srcindex++, i_arrayindex++)
  {
    *(c_yr + i_arrayindex) = *(c_tm_stmp + i_srcindex);
  }
  c_yr[4] = '\0';

  for(i_arrayindex = 0, i_srcindex = 12; i_srcindex < 14; i_srcindex++, i_arrayindex++)
  {
    *(c_hr + i_arrayindex) = *(c_tm_stmp + i_srcindex);
  }
  c_hr[2] = '\0';
  for(i_arrayindex = 0, i_srcindex = 15; i_srcindex < 17; i_srcindex++, i_arrayindex++)
  {
  *(c_min + i_arrayindex) = *(c_tm_stmp + i_srcindex);
  }
  c_min[2] = '\0';

  for(i_arrayindex = 0, i_srcindex = 18; i_srcindex < 20; i_srcindex++, i_arrayindex++)
  {
    *(c_sec + i_arrayindex) = *(c_tm_stmp + i_srcindex);
  }
  c_sec[2] = '\0';

	  *Get the month number for the month string name*
  temp_tm.tm_mday = atoi(c_day);
  switch(toupper(c_mon[0]))
  {
    case 'J' :
    {
      if(strcasecmp(c_mon, "JAN") == 0)
      {
        temp_tm.tm_mon = 0;
      }
      else if(strcasecmp(c_mon, "JUN") == 0)
      {
        temp_tm.tm_mon = 5;
      }
      else if(strcasecmp(c_mon, "JUL") == 0)
      {
        temp_tm.tm_mon = 6;
      }
      break;
    }
	     case 'A' :
   { 
      if(strcasecmp(c_mon, "APR") == 0)
      {
        temp_tm.tm_mon = 3;
      }
      else if(strcasecmp(c_mon, "AUG") == 0)
      {
        temp_tm.tm_mon = 7;
      }
      break;
    }
    case 'M' :
    {
      if(strcasecmp(c_mon, "MAR") == 0)
      {
        temp_tm.tm_mon = 2;
      }
      else if(strcasecmp(c_mon, "MAY") == 0)
      {
        temp_tm.tm_mon = 4;
      }
      break;
    }
    case 'F' :
    {
      temp_tm.tm_mon = 1;
      break;
    }
        case 'S' :
    {
      temp_tm.tm_mon = 8;
      break;
    }
    case 'O' :
    {
      temp_tm.tm_mon = 9;
      break;
   }
    case 'N' :
    {
      temp_tm.tm_mon = 10;
      break;
    }
    case 'D' :
    {
      temp_tm.tm_mon = 11;
      break;
    }
  }
	  temp_tm.tm_year = atoi(c_yr) - 1900;
  temp_tm.tm_hour = atoi(c_hr);
  temp_tm.tm_min  = atoi(c_min);
  temp_tm.tm_sec  = atoi(c_sec);
  temp_tm.tm_wday = 0;
  temp_tm.tm_yday = 0;
  temp_tm.tm_isdst = 0;

  *ptr_li_dest = mktime(&temp_tm) - TEN_YRS_IN_SEC; *Exchange time is since 1980*

  return;
}
*** COMMNET OF VER TOL : TUX on LINUX ends here ****/

/***  ver 4.7 ends ***/

/*** ver 5.1 starts **/

int fn_call_dp_dealloc(char *c_ServiceName,char *c_match_acc,char *c_undrlyng,long l_qty_to_unblock)
{
  FBFR32  *ptr_fml_Sbuffer;
  FBFR32  *ptr_fml_Rbuffer;
  EXEC SQL INCLUDE "table/dbd_dp_blck_dtls.h";
  int i_ferr[11];
  long l_total_shares_tobe_blocked = 0;
  long l_shares_alreay_blocked = 0;
  long l_shares_to_block_now = 0;
  double d_qty = 0.0;
  long l_rcv_length = 0;
  int i_rec_len = 0;
  char c_cln_mtch_accnt[21]="\0";
  int i_prdct_nm = 0;
  int i = 0;
  int i_returncode = 0;
  long l_err_cd = 0;
  char c_usr_id[9] = "\0";
  strcpy(c_usr_id,DEF_USR);
  long l_sssn_id = DEF_SSSN;
  int i_err[11];
  char c_isin_no[21]="\0";
  long l_final_blked_qty = 0;
  char c_blk_ublk = 'U';
  i_rec_len = MIN_FML_BUF_LEN;
  char c_err_msg[253]="\0";
  fn_userlog(c_ServiceName,"fn_call_dp_dealloc :%s: c_match_acc",c_match_acc);
  fn_userlog(c_ServiceName,"fn_call_dp_dealloc :%s: c_undrlyng",c_undrlyng);
  fn_userlog(c_ServiceName,"fn_call_dp_dealloc :%ld: l_qty_to_unblock",l_qty_to_unblock);
  d_qty = (double)l_qty_to_unblock;
  fn_userlog(c_ServiceName,"fn_call_dp_dealloc :%lf:",d_qty);

  ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if (ptr_fml_Sbuffer == NULL)
  {
              fn_errlog( c_ServiceName, "S31075", LIBMSG, c_err_msg  );
              return -1;
  }

  ptr_fml_Rbuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if (ptr_fml_Rbuffer == NULL)
  {
             fn_errlog( c_ServiceName, "S31080", LIBMSG, c_err_msg  );
             return -1;
  }


        EXEC SQL
             SELECT SEM_MAP_VL
               INTO :c_isin_no
              FROM sem_stck_map
           WHERE  SEM_STCK_CD = :c_undrlyng
             and SEM_ENTTY = 10;
   if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31135", SQLMSG, c_err_msg );
    tpfree ( ( char * ) ptr_fml_Sbuffer );
    tpfree ( ( char * ) ptr_fml_Rbuffer );
     return -1;
  }
rtrim(c_isin_no);
fn_userlog(c_ServiceName,"BKUBK : ISIN :%s: match :%s:",c_isin_no,c_match_acc);

        EXEC SQL
        SELECT  DBD_CLM_MTCH_ACCNT,
                DBD_DP_ID,
                DBD_DP_CLNT_ID,
                DBD_ISIN_NMBR,
                DBD_STCK_CD,
                DBD_TOT_QTY,
                NVL(DBD_QTY_BLCKD,0)
         INTO   :sql_dbd_clm_mtch_accnt,
            :sql_dbd_dp_id,
            :sql_dbd_dp_clnt_id,
            :sql_dbd_isin_nmbr,
            :sql_dbd_stck_cd,
            :sql_dbd_tot_qty,
            :sql_dbd_qty_blckd
        FROM    DBD_DP_BLCK_DTLS,CLD_DP_ACCTS
        WHERE  DBD_CLM_MTCH_ACCNT = :c_match_acc
        AND     DBD_STCK_CD   = :c_undrlyng
        AND     DBD_ISIN_NMBR = :c_isin_no
        AND     DBD_CLM_MTCH_ACCNT = CLD_CLM_MTCH_ACCNT
        AND     DBD_DP_ID = CLD_DP_ID
        AND     DBD_DP_CLNT_ID = CLD_DP_CLNT_ID;

if(SQLCODE != 0 )
{
    fn_errlog( c_ServiceName, "L31270", SQLMSG, c_err_msg );
    tpfree ( ( char * ) ptr_fml_Sbuffer );
    tpfree ( ( char * ) ptr_fml_Rbuffer );
  return -1 ;
}

      Finit32(ptr_fml_Sbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Sbuffer));
      Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));


      i_err[0]= Fadd32(ptr_fml_Sbuffer,FML_USR_ID, (char *)c_usr_id,0);
      i_ferr [ 0 ]  = Ferror32;
      i_err[1]= Fadd32(ptr_fml_Sbuffer,FML_SSSN_ID,(char *)&l_sssn_id,0);
      i_ferr [ 1 ]  = Ferror32;
      i_err[2]= Fadd32(ptr_fml_Sbuffer,FML_DPID,(char *)sql_dbd_dp_id, 0);
      i_ferr [ 2 ]  = Ferror32;
      i_err[3]= Fadd32(ptr_fml_Sbuffer,FML_ORD_DP_CLNT_ID, (char *)sql_dbd_dp_clnt_id,0);
      i_ferr [ 3 ]  = Ferror32;
      i_err[4]= Fadd32(ptr_fml_Sbuffer,FML_GMS_ID, (char *)&i_prdct_nm,0);
      i_ferr [ 4 ]  = Ferror32;
      i_err[5]= Fadd32(ptr_fml_Sbuffer,FML_DPQTY,(char *)&d_qty,0);
      i_ferr [ 5 ]  = Ferror32;
      i_err[6]= Fadd32(ptr_fml_Sbuffer,FML_BLOCK_UNBLOCK,(char *)&c_blk_ublk,0);
      i_ferr [ 6 ]  = Ferror32;
      i_err[7]= Fadd32(ptr_fml_Sbuffer,FML_STCK_CD, (char *)sql_dbd_stck_cd,0);
      i_ferr [ 7 ]  = Ferror32;
      i_err[8]= Fadd32(ptr_fml_Sbuffer,FML_ISIN, (char *)sql_dbd_isin_nmbr,0);
      i_ferr [ 8 ]  = Ferror32;
      i_err[9]= Fadd32(ptr_fml_Sbuffer,FML_MATCH_ACCNT, (char *)sql_dbd_clm_mtch_accnt,0);
      i_ferr [ 9 ]  = Ferror32;

    for ( i = 0 ; i < 10 ; i++ )
    {
      if ( (i_err[ i ] == -1 ) )
      {
        fn_errlog( c_ServiceName, "L31275",Fstrerror32(i_ferr[i]),c_err_msg);
	tpfree ( ( char * ) ptr_fml_Sbuffer );
	tpfree ( ( char * ) ptr_fml_Rbuffer );
        return -1;
      }
    }
      i_returncode = tpcall("SVC_DP_BKUBK",(char *)ptr_fml_Sbuffer,0,(char **)&ptr_fml_Rbuffer,&l_rcv_length,TPNOTRAN);
      if (i_returncode == -1)
      {
          Fget32(ptr_fml_Rbuffer, FML_ERR_MSG, 0, c_err_msg, 0);
	  i_returncode = Fget32(ptr_fml_Rbuffer, FML_ACTN_ID, 0, (char*)&l_err_cd, 0);

          if (i_returncode == -1)
          {
           fn_userlog(c_ServiceName,"Action code returned by service :%ld:",l_err_cd);
          }
	  tpfree ( ( char * ) ptr_fml_Sbuffer );
	  tpfree ( ( char * ) ptr_fml_Rbuffer );
          return -1;
      }

EXEC SQL
        UPDATE    DBD_DP_BLCK_DTLS
        SET  DBD_FODLVRY_BLCKD_QTY = NVL(DBD_FODLVRY_BLCKD_QTY,0) - :l_qty_to_unblock
        WHERE  DBD_CLM_MTCH_ACCNT = :c_match_acc
        AND     DBD_STCK_CD   = :c_undrlyng
        AND    DBD_DP_ID = :sql_dbd_dp_id
        AND    DBD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
        AND   DBD_ISIN_NMBR = :sql_dbd_isin_nmbr;

if(SQLCODE != 0 )
{
    fn_errlog( c_ServiceName, "L31280", SQLMSG, c_err_msg );
    tpfree ( ( char * ) ptr_fml_Sbuffer );
    tpfree ( ( char * ) ptr_fml_Rbuffer );
  return -1 ;
}

    tpfree ( ( char * ) ptr_fml_Sbuffer );
    tpfree ( ( char * ) ptr_fml_Rbuffer );
    return 0;
}


/** ver 5.1 ends ***/
