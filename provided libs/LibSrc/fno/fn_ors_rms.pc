/********************************************************************************/
/*  Version 1.0 - 25-Aug-2016 Function added For 2L and 3L acceptance (Kishor B)*/
/*  Version 1.1 - 21-Sep-2016 Future Trail   Bhupendra Malik                    */
/*  Version 1.2 - 07-Nov-2016 Trade processing on Functional Exit (Kishor B)    */
/*  Version 1.3 - 07-Dec-2016 Fill Qty Fetch	(Tanmay W.)												*/
/*  Version 1.4 - 19-Nov-2019 Rollover With spread ( Suchita Dabir )            */
/********************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <time.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_log.h>
#include <fn_read_debug_lvl.h>
#include <fo.h>
#include <fn_ddr.h>
#include <fn_tuxlib.h>
#include <fml_rout.h>
#include <eba_to_ors.h> /*** Ver 1.2 ***/

int fn_spd_acpt(char *c_ServiceName,char *c_ipord_ref,long l_ors_msg_typ)
{
  sql_cursor     sys_cursor;
  struct vw_spdxchbk st_spd_xchbk;

  char c_xchng_cd[4];
  char c_ordr_rfrnc[19];
  char c_pipe_id[3];
  char c_mod_trd_dt[23];
  char c_slm_flg = '\0';
  char c_valid_dt[23];
  char c_ord_typ = '\0';
  char c_sprd_ord_ind = '\0';
  char c_req_typ = '\0';
  char c_qt_tm[23];
  char c_rqst_tm[23];
  char c_frwrd_tm[23];
  char c_plcd_stts = '\0';
  char c_rms_prcsd_flg = '\0';
  char c_ack_tm[23];
  char c_xchng_rmrks[257];
  char c_ex_ordr_typ ='\0';
  char c_spl_flg1 = '\0';
  char c_ordr_flw = '\0';
  char  c_err_msg[256];

  long l_ord_seq=0;
  long l_dsclsd_qty=0;
  long l_ord_tot_qty=0;
  long l_ord_lmt_rt=0;
  long l_stp_lss_tgr=0;
  long l_mdfctn_cntr1=0;
  long l_quote=0;
  long l_xchng_can_qty=0;
  long l_bit_flg=0;
  long l_fsd_ord_exe_qty = 0;

  int i_cnt = 0;
  int i_returncode = 0;

  double d_jiffy=0.0;

  if(DEBUG_MSG_LVL_3) 
  {
     fn_userlog(c_ServiceName, " Inside function fn_spd_acpt********");
     fn_userlog(c_ServiceName,"l_ors_msg_typ*****:%ld:",l_ors_msg_typ);
  }
   fn_userlog(c_ServiceName," fn_spd_acpt:: c_ipord_ref :%s: ",c_ipord_ref); /*** ver 1.4 ***/
  EXEC SQL ALLOCATE :sys_cursor;


        EXEC SQL EXECUTE
          BEGIN
            OPEN :sys_cursor FOR
          SELECT  FXB_XCHNG_CD,
                  FXB_ORDR_RFRNC,
                  FXB_PIPE_ID,
                  FXB_MOD_TRD_DT,
                  FXB_ORDR_SQNC,
                  FXB_LMT_MRKT_SL_FLG,
                  FXB_DSCLSD_QTY,
                  FXB_ORDR_TOT_QTY,
                  FXB_LMT_RT,
                  FXB_STP_LSS_TGR,
                  FXB_MDFCTN_CNTR,
                  NVL (to_char(FXB_ORDR_VALID_DT,'dd-Mon-yyyy hh24:mi:ss'), '*' ),
                  FXB_ORDR_TYPE,
                  FXB_SPRD_ORD_IND,
                  FXB_RQST_TYP,
                  FXB_QUOTE,
                  NVL (to_char(FXB_QT_TM,'dd-Mon-yyyy hh24:mi:ss'), '*' ),
                  NVL (to_char(FXB_RQST_TM,'dd-Mon-yyyy hh24:mi:ss'), '*' ),
                  NVL (to_char(FXB_FRWD_TM,'dd-Mon-yyyy hh24:mi:ss'), '*' ),
                  FXB_PLCD_STTS,
                  FXB_RMS_PRCSD_FLG,
                  FXB_ORS_MSG_TYP,
                  NVL (to_char(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'), '*' ),
                  FXB_XCHNG_RMRKS,
                  FXB_EX_ORDR_TYP,
                  FXB_SPL_FLAG,
                  FXB_JIFFY,
                  FXB_STREAM_NO,
                  FOD_ORDR_FLW,
                  NVL(FSD_EXEC_QTY,0)
         FROM   FXB_FO_XCHNG_BOOK,FOD_FO_ORDR_DTLS,FSD_FO_SPRD_DTLS
         WHERE  FXB_ORDR_RFRNC = FOD_ORDR_RFRNC
         AND    FXB_ORDR_RFRNC = FSD_ORDR_RFRNC
         AND    FXB_ORS_MSG_TYP =:l_ors_msg_typ
         AND    FSD_SPRD_RFRNC=(SELECT FSD_SPRD_RFRNC
                                  FROM FSD_FO_SPRD_DTLS
                                 WHERE FSD_ORDR_RFRNC =:c_ipord_ref)
         ORDER BY FXB_ORDR_SQNC desc; /*** ver 1.4 ***/                                        

          END;
        END-EXEC;

   if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
   {
     return -1;
   }

        MEMSET(st_spd_xchbk);

   for ( i_cnt = 0; i_cnt <= 2; i_cnt++ )
   {
          EXEC SQL  FETCH :sys_cursor
                    INTO  :c_xchng_cd,
                          :c_ordr_rfrnc,
                          :c_pipe_id,
                          :c_mod_trd_dt,
                          :l_ord_seq,
                          :c_slm_flg,
                          :l_dsclsd_qty,
                          :l_ord_tot_qty,
                          :l_ord_lmt_rt,
                          :l_stp_lss_tgr,
                          :l_mdfctn_cntr1,
                          :c_valid_dt,
                          :c_ord_typ,
                          :c_sprd_ord_ind,
                          :c_req_typ,
                          :l_quote,
                          :c_qt_tm,
                          :c_rqst_tm,
                          :c_frwrd_tm,
                          :c_plcd_stts,
                          :c_rms_prcsd_flg,
                          :l_ors_msg_typ,
                          :c_ack_tm,
                          :c_xchng_rmrks,
                          :c_ex_ordr_typ,
                          :c_spl_flg1,
                          :d_jiffy,
                          :l_bit_flg,
                          :c_ordr_flw,
                          :l_fsd_ord_exe_qty;

        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
            break;
          }
          return -1;
        }

          strcpy ( st_spd_xchbk.c_xchng_cd[i_cnt], c_xchng_cd);
          strcpy ( st_spd_xchbk.c_ordr_rfrnc[i_cnt], c_ordr_rfrnc);
          strcpy ( st_spd_xchbk.c_pipe_id[i_cnt], c_pipe_id);
          strcpy ( st_spd_xchbk.c_mod_trd_dt[i_cnt], c_mod_trd_dt);
          st_spd_xchbk.l_ord_seq[i_cnt] = l_ord_seq;
          st_spd_xchbk.c_slm_flg[i_cnt] = c_slm_flg;
          st_spd_xchbk.l_dsclsd_qty[i_cnt] = l_dsclsd_qty;
          st_spd_xchbk.l_ord_tot_qty[i_cnt] =l_ord_tot_qty;
          st_spd_xchbk.l_ord_lmt_rt[i_cnt] = l_ord_lmt_rt;
          st_spd_xchbk.l_stp_lss_tgr[i_cnt] = l_stp_lss_tgr;
          st_spd_xchbk.l_mdfctn_cntr[i_cnt] = l_mdfctn_cntr1;
          strcpy ( st_spd_xchbk.c_valid_dt[i_cnt], c_valid_dt);
          st_spd_xchbk.c_ord_typ[i_cnt] = c_ord_typ;
          st_spd_xchbk.c_sprd_ord_ind[i_cnt] = c_sprd_ord_ind;
          st_spd_xchbk.c_req_typ[i_cnt] = c_req_typ;
          st_spd_xchbk.l_quote[i_cnt] = l_quote;
          strcpy ( st_spd_xchbk.c_qt_tm[i_cnt], c_qt_tm);
          strcpy ( st_spd_xchbk.c_rqst_tm[i_cnt], c_rqst_tm);
          strcpy ( st_spd_xchbk.c_frwrd_tm[i_cnt], c_frwrd_tm);
          st_spd_xchbk.c_plcd_stts[i_cnt] = c_plcd_stts;
          st_spd_xchbk.c_rms_prcsd_flg[i_cnt] = c_rms_prcsd_flg;
          st_spd_xchbk.l_ors_msg_typ[i_cnt] = l_ors_msg_typ;
          strcpy ( st_spd_xchbk.c_ack_tm[i_cnt], c_ack_tm);
          strcpy ( st_spd_xchbk.c_xchng_rmrks[i_cnt], c_xchng_rmrks);
          st_spd_xchbk.c_ex_ordr_typ[i_cnt] = c_ex_ordr_typ;
          st_spd_xchbk.c_spl_flg[i_cnt] = c_spl_flg1;
          st_spd_xchbk.d_jiffy[i_cnt] = d_jiffy;
          st_spd_xchbk.l_bit_flg[i_cnt] = l_bit_flg;
          st_spd_xchbk.c_ordr_flw[i_cnt] = c_ordr_flw;
          st_spd_xchbk.l_xchng_can_qty[i_cnt] = l_fsd_ord_exe_qty;

          st_spd_xchbk.c_oprn_typ[i_cnt] = UPDATION_ON_EXCHANGE_RESPONSE;
          strcpy ( st_spd_xchbk.c_entry_dt_tm[i_cnt],c_ack_tm);
          st_spd_xchbk.l_dwnld_flg[i_cnt] = 20;

          rtrim(st_spd_xchbk.c_entry_dt_tm[i_cnt]);

      if (DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_ordr_rfrnc**********:%s:",  st_spd_xchbk.c_ordr_rfrnc[i_cnt]);
      }

      if (DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_xchng_cd************:%s:",  st_spd_xchbk.c_xchng_cd[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_pipe_id*************:%s:",  st_spd_xchbk.c_pipe_id[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_mod_trd_dt**********:%s:",  st_spd_xchbk.c_mod_trd_dt[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.l_ord_seq*************:%ld:", st_spd_xchbk.l_ord_seq[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_slm_flg*************:%c:",  st_spd_xchbk.c_slm_flg[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.l_dsclsd_qty**********:%ld:", st_spd_xchbk.l_dsclsd_qty[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.l_ord_tot_qty*********:%ld:", st_spd_xchbk.l_ord_tot_qty[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.l_ord_lmt_rt**********:%ld:", st_spd_xchbk.l_ord_lmt_rt[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.l_stp_lss_tgr*********:%ld:", st_spd_xchbk.l_stp_lss_tgr[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.l_mdfctn_cntr*********:%ld:", st_spd_xchbk.l_mdfctn_cntr[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_valid_dt************:%s:",  st_spd_xchbk.c_valid_dt[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_ord_typ*************:%c:",  st_spd_xchbk.c_ord_typ[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_sprd_ord_ind********:%c:",  st_spd_xchbk.c_sprd_ord_ind[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_req_typ*************:%c:",  st_spd_xchbk.c_req_typ[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.l_quote***************:%ld:", st_spd_xchbk.l_quote[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_qt_tm***************:%s:",  st_spd_xchbk.c_qt_tm[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_rqst_tm*************:%s:",  st_spd_xchbk.c_rqst_tm[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_frwrd_tm************:%s:",  st_spd_xchbk.c_frwrd_tm[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_plcd_stts***********:%c:",  st_spd_xchbk.c_plcd_stts[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_rms_prcsd_flg*******:%c:",  st_spd_xchbk.c_rms_prcsd_flg[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.l_ors_msg_typ*********:%ld:", st_spd_xchbk.l_ors_msg_typ[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_ack_tm**************:%s:",  st_spd_xchbk.c_ack_tm[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_entry_dt_tm*********:%s:",  st_spd_xchbk.c_entry_dt_tm[i_cnt]);
        /*fn_userlog(c_ServiceName, "st_spd_xchbk.c_xchng_rmrks*********:%s:",  st_spd_xchbk.c_xchng_rmrks[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_ex_ordr_typ*********:%c:",  st_spd_xchbk.c_ex_ordr_typ[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.l_xchng_can_qty*******:%ld:", st_spd_xchbk.l_xchng_can_qty[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_spl_flg*************:%c:",  st_spd_xchbk.c_spl_flg[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.d_jiffy***************:%lf:", st_spd_xchbk.d_jiffy[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.l_bit_flg*************:%ld:", st_spd_xchbk.l_bit_flg[i_cnt]);*/
      }
    }
      fn_cpy_ddr (st_spd_xchbk.c_rout_crt);
    
			i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg,
                                &st_spd_xchbk,
                               &st_spd_xchbk,
                                "vw_spdxchbk",
                                "vw_spdxchbk",
                                sizeof ( st_spd_xchbk ),
                                sizeof ( st_spd_xchbk ),
                                0,
                                "SFO_SPD_ACK" );

    if(i_returncode == -1)
    {
      fn_userlog(c_ServiceName, "[ord_ref-%s] failed",c_ordr_rfrnc);
      return -1;
    }
}

/****** Ver 1.1 Started *************/
int fn_cal_incrmntl_price(char *c_ServiceName,
                          char c_flag,
                          char c_cep_action_flag,
                          char  *c_err_msg,
                          struct vw_orderbook *ptr_st_orderbook,
                          struct vw_xchngbook *ptr_st_xchngbook)
{
  char  c_exchng_cd[4];
  char  c_prdct_type;
  char  c_underlyng[7];
  char  c_ordr_flw;
  char  c_sem_map_vl[20];
  char  c_ctgry_indstk;
  char  c_expry_dt[12];
  char  c_exrc_typ;
  char  c_contract_desc[50];
  char  c_ordr_ref_no[21];
  char  c_cln_mtch_accnt[11];
  char  c_pipe_id[3];
  /*char  c_err_msg[256];*/
  char  c_xchng_stts;
  char  c_opt_type='*';
  char c_prcimpv_flg='\0';

  long l_sltp_update_cnd = 0;
  long l_ordrbk_mdfctn_cntr = 0;
  long l_xchngbk_mdfctn_cntr = 0;
  long l_incr_price = 0;
  long l_prev_incr_prc = 0;
  long l_lst_trd_prc = 0;
  long l_stp_lss_trgr_prc = 0;
  long l_trail_amnt = 0;
  long l_lmt_offset = 0;
  long l_strike_prc=0;
  long l_ord_tot_qty=0;
  long l_exctd_qty=0;
  long l_can_qty=0;
  long l_trail_amt=0;
  long d_lmt_offset=0;
  long l_prev_mod_cntr=0;

  MEMSET(c_exchng_cd);
  MEMSET(c_underlyng);
  MEMSET(c_sem_map_vl);
  MEMSET(c_expry_dt);
  MEMSET(c_contract_desc);
  MEMSET(c_ordr_ref_no);
  MEMSET(c_cln_mtch_accnt);

  strcpy(c_exchng_cd,ptr_st_orderbook->c_xchng_cd);
  strcpy(c_underlyng,ptr_st_orderbook->c_undrlyng);
  strcpy(c_expry_dt,ptr_st_orderbook->c_expry_dt);
  strcpy(c_ordr_ref_no,ptr_st_orderbook->c_ordr_rfrnc);
  strcpy(c_cln_mtch_accnt,ptr_st_orderbook->c_cln_mtch_accnt);
  strcpy(c_pipe_id,ptr_st_orderbook->c_pipe_id);
  c_opt_type=ptr_st_orderbook->c_opt_typ;

  c_prdct_type = ptr_st_orderbook->c_prd_typ ;
  c_ordr_flw = ptr_st_orderbook->c_ordr_flw;
  c_ctgry_indstk = ptr_st_orderbook->c_ctgry_indstk;
  c_exrc_typ = ptr_st_orderbook->c_exrc_typ;


  l_strike_prc=ptr_st_orderbook->l_strike_prc;
  l_ord_tot_qty=ptr_st_orderbook->l_ord_tot_qty;
  l_exctd_qty=ptr_st_orderbook->l_exctd_qty;
  l_can_qty=ptr_st_orderbook->l_can_qty;
  l_xchngbk_mdfctn_cntr=ptr_st_xchngbook->l_mdfctn_cntr;
  l_ordrbk_mdfctn_cntr=ptr_st_orderbook->l_mdfctn_cntr;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "c_exchng_cd:%s:", c_exchng_cd );
    fn_userlog( c_ServiceName, "c_underlyng:%s:", c_underlyng );
    fn_userlog( c_ServiceName, "c_expry_dt:%s:", c_expry_dt);
    fn_userlog( c_ServiceName, "c_ordr_ref_no:%s:", c_ordr_ref_no);
    fn_userlog( c_ServiceName, "c_prdct_type:%c:", c_prdct_type);
    fn_userlog( c_ServiceName, "c_ordr_flw:%c:", c_ordr_flw );
    fn_userlog( c_ServiceName, "c_cln_mtch_accnt:%s:", c_cln_mtch_accnt);
    fn_userlog( c_ServiceName, "l_xchngbk_mdfctn_cntr :%ld:",l_xchngbk_mdfctn_cntr);
  }

  if( c_cep_action_flag != 'A' && c_cep_action_flag !='R' && c_cep_action_flag !='J' )
  {
    fn_userlog( c_ServiceName, "Invalid CEP Action flag ");
    fn_errlog ( c_ServiceName, "L31005", LIBMSG,c_err_msg );
    return -1;
  }

  if( c_cep_action_flag == 'A' )
  {
    EXEC SQL
      SELECT NVL(FXB_LTP_RT,0),
             NVL(FXB_PRCIMPV_FLG,'N'),
             NVL(FXB_TRAIL_AMT,0),
             NVL(FXB_LMT_OFFSET,0)
        INTO :l_lst_trd_prc ,
             :c_prcimpv_flg,
             :l_trail_amt,
             :l_lmt_offset
        FROM FXB_FO_XCHNG_BOOK
       WHERE FXB_ORDR_RFRNC=:c_ordr_ref_no
         AND FXB_MDFCTN_CNTR=:l_ordrbk_mdfctn_cntr;
    if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "L31010", SQLMSG,c_err_msg );
      return -1;
    }

      EXEC SQL
         SELECT  NVL(FMM_SLTP_UPD_CND,0)*100
           INTO  :l_sltp_update_cnd
           FROM  FMM_FO_MRGN_MSTR
          WHERE  FMM_PRDCT_TYP = :c_prdct_type
           AND  FMM_UNDRLYNG  = :c_underlyng
            AND  FMM_XCHNG_CD  = :c_exchng_cd
          AND    FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
                                  FROM    FCB_FO_CLN_BSKT_ALLTD
                                  WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
                                                        FROM    CLM_CLNT_MSTR
                                                        WHERE   CLM_MTCH_ACCNT = :c_cln_mtch_accnt)) ;

      if ( SQLCODE  !=  0  && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog ( c_ServiceName, "L31015", SQLMSG,c_err_msg );
        return -1;
      }

    EXEC SQL
      SELECT NVL(FTO_INCR_PRC,0),
             FTO_MDFCTN_CNTR
        INTO :l_prev_incr_prc,
             :l_prev_mod_cntr
        FROM FTO_FO_TRAIL_ORD
       WHERE FTO_ORDR_RFRNC=:c_ordr_ref_no;
    if ( SQLCODE  !=  0  && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog ( c_ServiceName, "L31020", SQLMSG,c_err_msg );
      return -1;
    }

    if( SQLCODE == NO_DATA_FOUND )  /*** New Trail Order ***/
    {
      if(c_ordr_flw == 'S')
      {
        /*** Calculation of incremental Price at the time of order Placement. ***/
        l_incr_price = l_lst_trd_prc + l_sltp_update_cnd;
        fn_userlog( c_ServiceName, "Incremental Price for Sell is :%ld:",l_incr_price);
      }
      else if(c_ordr_flw == 'B') /*** Incr. price calculation for Buy order. ***/
      {
        l_incr_price = l_lst_trd_prc - l_sltp_update_cnd;
        fn_userlog( c_ServiceName, "Incremental Price for Buy is :%ld:",l_incr_price);
      }

      EXEC SQL
          INSERT INTO FTO_FO_TRAIL_ORD
          (
          FTO_CLM_MTCH_ACCNT,
          FTO_ORDR_RFRNC,
          FTO_PIPE_ID,
          FTO_XCHNG_CD,
          FTO_PRDCT_TYP,
          FTO_INDSTK,
          FTO_UNDRLYNG,
          FTO_EXPRY_DT,
          FTO_EXER_TYP,
          FTO_OPT_TYP,
          FTO_STRK_PRC,
          FTO_ORDR_FLW,
          FTO_ORDR_TOT_QTY,
          FTO_EXEC_QTY,
          FTO_CNCL_QTY,
          FTO_MDFCTN_CNTR,
          FTO_INCR_PRC,
          FTO_LTP_RT,
          FTO_STATUS_FLG,
          FTO_SEQUENCE_NO,
          FTO_CEP_RMV_FLG,
          FTO_CNTRCT_DESC
          )
          VALUES
          (
           :c_cln_mtch_accnt,
           :c_ordr_ref_no,
           :c_pipe_id,
           :c_exchng_cd,
           :c_prdct_type,
           :c_ctgry_indstk,
           :c_underlyng,
           :c_expry_dt,
           :c_exrc_typ,
           :c_opt_type,
           :l_strike_prc,
           :c_ordr_flw,
           :l_ord_tot_qty,
           :l_exctd_qty,
           :l_can_qty,
           :l_ordrbk_mdfctn_cntr,
           :l_incr_price,
           :l_lst_trd_prc,
           'N',
           fo_future_sltp_trail_seq.NEXTVAL,
           :c_cep_action_flag,
           :c_contract_desc
           );

      if( SQLCODE != 0 )
       {
        fn_errlog( c_ServiceName, "L31025",SQLMSG,c_err_msg);
        return FAILURE;
      }
      EXEC SQL
      UPDATE FXB_FO_XCHNG_BOOK
      SET    FXB_INCRMNT_PRC=:l_incr_price,
             FXB_TRL_UPD_COND_VAL=:l_sltp_update_cnd
      WHERE  FXB_XCHNG_CD=:c_exchng_cd
      AND    FXB_ORDR_RFRNC=:c_ordr_ref_no
      AND    FXB_MDFCTN_CNTR=:l_xchngbk_mdfctn_cntr;

      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "L31030",SQLMSG,c_err_msg);
        return FAILURE;
      }

      EXEC SQL
           UPDATE FOD_FO_ORDR_DTLS
              SET FOD_PRCIMPV_FLG = :c_prcimpv_flg,
                  FOD_TRAIL_AMT =:l_trail_amt,
                  FOD_LMT_OFFSET =:l_lmt_offset
                  /**FOD_INCRMNT_PRC = :l_incr_price **/
            WHERE FOD_ORDR_RFRNC=:c_ordr_ref_no;
      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "L31035",SQLMSG,c_err_msg);
        return FAILURE;
      }

    }
    else  /*** Subsequent Modifications ****/
    {
      if(c_ordr_flw == 'S')
      {
       /*** Calculation of incremental Price at the time of Modification and Modification Rejection of order. ***/
         if ( l_lst_trd_prc >= l_prev_incr_prc)
         {
           if( (l_lst_trd_prc-l_prev_incr_prc) >= l_sltp_update_cnd)
           {
             l_incr_price = l_lst_trd_prc + l_sltp_update_cnd;
           }
           else
           {
             l_incr_price=l_prev_incr_prc+l_sltp_update_cnd;
           }
         }
         else
         {
           l_incr_price = l_prev_incr_prc;
         }
         if(DEBUG_MSG_LVL_3)
				 {
         	fn_userlog( c_ServiceName, "Incremental Price for Sell is :%ld:",l_incr_price);
				 }
      }
      else if(c_ordr_flw == 'B') /*** Incr. price calculation for Buy order. ***/
      {
        if ( l_lst_trd_prc <= l_prev_incr_prc)
        {
          if( (l_prev_incr_prc-l_lst_trd_prc) >= l_sltp_update_cnd )
          {
            l_incr_price = l_lst_trd_prc - l_sltp_update_cnd;
          }
          else
          {
            l_incr_price=l_prev_incr_prc-l_sltp_update_cnd;
          }
        }
        else
        {
          l_incr_price = l_prev_incr_prc;
        }
				if(DEBUG_MSG_LVL_3)
			  {
        	fn_userlog( c_ServiceName, "Incremental Price for Buy is :%ld:",l_incr_price);
				}
      }

      EXEC SQL
      UPDATE FXB_FO_XCHNG_BOOK
      SET    FXB_INCRMNT_PRC=:l_incr_price,
             FXB_TRL_UPD_COND_VAL=:l_sltp_update_cnd
      WHERE  FXB_XCHNG_CD=:c_exchng_cd
      AND    FXB_ORDR_RFRNC=:c_ordr_ref_no
      AND    FXB_MDFCTN_CNTR=:l_xchngbk_mdfctn_cntr;

      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "L31040",SQLMSG,c_err_msg);
        return FAILURE;
      }

      EXEC SQL
           UPDATE FOD_FO_ORDR_DTLS
              SET FOD_PRCIMPV_FLG = :c_prcimpv_flg,
                  FOD_TRAIL_AMT =:l_trail_amt,
                  FOD_LMT_OFFSET =:l_lmt_offset
                  /**FOD_INCRMNT_PRC = :l_incr_price **/
            WHERE FOD_ORDR_RFRNC=:c_ordr_ref_no;
      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "L31045",SQLMSG,c_err_msg);
        return FAILURE;
      }

      EXEC SQL
      UPDATE FTO_FO_TRAIL_ORD
       SET   FTO_LTP_RT=:l_lst_trd_prc,
             FTO_INCR_PRC=:l_incr_price,
             FTO_ORDR_FLW=:c_ordr_flw,
             FTO_STATUS_FLG='N',
             FTO_CEP_RMV_FLG=:c_cep_action_flag,
             FTO_MDFCTN_CNTR=:l_ordrbk_mdfctn_cntr,
             FTO_ORDR_TOT_QTY=:l_ord_tot_qty,
             FTO_EXEC_QTY=:l_exctd_qty,
             FTO_CNCL_QTY=:l_can_qty
      WHERE  FTO_ORDR_RFRNC=:c_ordr_ref_no;

      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "L31050",SQLMSG,c_err_msg);
        return FAILURE;
      }
    }

  }
  else
  {
     EXEC SQL
      UPDATE FTO_FO_TRAIL_ORD
        SET  FTO_STATUS_FLG='N',
             FTO_CEP_RMV_FLG=DECODE(:c_cep_action_flag,'J','A',:c_cep_action_flag),
             FTO_MDFCTN_CNTR=DECODE(:c_cep_action_flag,'J',:l_ordrbk_mdfctn_cntr,FTO_MDFCTN_CNTR)
      WHERE  FTO_ORDR_RFRNC=:c_ordr_ref_no;

    if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog( c_ServiceName, "L31055",SQLMSG,c_err_msg);
      return FAILURE;
    }
  }

  return 0;
}
/************* Ver 1.1 Ends ***************/
/************* Ver 1.2 Starts *************/

int fn_prcs_trd(char *c_ServiceName,
                char *c_err_msg,
                char c_prd_typ,
                char *c_ordr_rfrnc
               )
{

    struct vw_tradebook st_tradebook;

    char c_sltp_ord_rfrnc[19];
    char c_spn_flg = '\0';

    int i_returncode = 0;
    int i = 0;
    int i_err[18];
    int i_ferr[18];

    FBFR32 *ptr_fml_Sbuf;
    ptr_fml_Sbuf  = ( FBFR32 *)NULL;

    short int si_null;

    MEMSET(c_sltp_ord_rfrnc);
    MEMSET(st_tradebook);
    MEMSET(i_ferr);
    MEMSET(i_err);

    if(DEBUG_MSG_LVL_4)
    {
        fn_userlog( c_ServiceName, "In fn_prcs_trd...............");
        fn_userlog( c_ServiceName, "c_prd_typ....:%c:",c_prd_typ);
        fn_userlog( c_ServiceName, "c_ordr_rfrnc :%s:",c_ordr_rfrnc);
    }

    EXEC SQL
      SELECT  NVL(FOD_SPN_FLG,'N')
      INTO    :c_spn_flg
      FROM    FOD_FO_ORDR_DTLS
      where FOD_ORDR_RFRNC =:c_ordr_rfrnc;

   if ( SQLCODE != 0 )
   {
       fn_userlog(c_ServiceName,"Error While Selecting Span Flag.");
       fn_errlog(c_ServiceName, "L31060", SQLMSG,  c_err_msg);
       return -1;
   }


    if(DEBUG_MSG_LVL_3)
    {
        fn_userlog( c_ServiceName, "Span flag :%c:",c_spn_flg);
    }


   if ( c_prd_typ != 'U' && c_prd_typ !='I' )
   {
    EXEC SQL
      SELECT  ftd_clm_mtch_accnt,
              ftd_xchng_cd,
              ftd_prdct_typ,
              ftd_indstk,
              ftd_undrlyng,
              to_char(ftd_expry_dt,'DD-Mon-YYYY'),
              ftd_exer_typ,
              ftd_opt_typ,
              ftd_strk_prc,
              ftd_ordr_rfrnc,
              ftd_eba_trd_ref,
              ftd_ord_ack_nmbr,
              ftd_xchng_trd_no,
              to_char(ftd_trd_dt,'DD-Mon-YYYY hh24:mi:ss'),
              ftd_trnsctn_typ,
              ftd_trd_flw,
              ftd_exctd_qty,
              ftd_exctd_rt
        INTO :st_tradebook.c_cln_mtch_accnt,
             :st_tradebook.c_xchng_cd,
             :st_tradebook.c_prd_typ,
             :st_tradebook.c_ctgry_indstk,
             :st_tradebook.c_undrlyng,
             :st_tradebook.c_expry_dt,
             :st_tradebook.c_exrc_typ,
             :st_tradebook.c_opt_typ,
             :st_tradebook.l_strike_prc,
             :st_tradebook.c_ordr_rfrnc,
             :st_tradebook.c_trd_rfrnc,
             :st_tradebook.c_xchng_ack,
             :st_tradebook.l_xchng_trd_no,
             :st_tradebook.c_trd_dt,
             :st_tradebook.c_trnsctn_typ:si_null,
             :st_tradebook.c_trd_flw,
             :st_tradebook.l_exctd_qty,
             :st_tradebook.l_exctd_rt
      FROM    ftd_fo_trd_dtls
      WHERE   ftd_ordr_rfrnc = :c_ordr_rfrnc
      AND     ftd_rms_prcsd_flg = 'N'
      AND     rownum < 2
      ORDER   BY FTD_TRD_DT;
    }
    else
    {

     EXEC SQL
      SELECT
           fod_sltp_ordr_rfrnc
      INTO
           :c_sltp_ord_rfrnc
      FROM  FOD_FO_ORDR_DTLS
      WHERE fod_ordr_rfrnc = :c_ordr_rfrnc;

      if(SQLCODE !=0)
      {
        fn_errlog ( c_ServiceName, "L31065", SQLMSG, c_err_msg );
        return -1;
      }

    if(DEBUG_MSG_LVL_4)
    {
        fn_userlog( c_ServiceName, "c_sltp_ord_rfrnc :%s:",c_sltp_ord_rfrnc);
		}

    EXEC SQL
      SELECT  ftd_clm_mtch_accnt,
              ftd_xchng_cd,
              ftd_prdct_typ,
              ftd_indstk,
              ftd_undrlyng,
              to_char(ftd_expry_dt,'DD-Mon-YYYY'),
              ftd_exer_typ,
              ftd_opt_typ,
              ftd_strk_prc,
              ftd_ordr_rfrnc,
              ftd_eba_trd_ref,
              ftd_ord_ack_nmbr,
              ftd_xchng_trd_no,
              to_char(ftd_trd_dt,'DD-Mon-YYYY hh24:mi:ss'),
              ftd_trnsctn_typ,
              ftd_trd_flw,
              ftd_exctd_qty,
              ftd_exctd_rt
        INTO  :st_tradebook.c_cln_mtch_accnt,
             :st_tradebook.c_xchng_cd,
             :st_tradebook.c_prd_typ,
             :st_tradebook.c_ctgry_indstk,
             :st_tradebook.c_undrlyng,
             :st_tradebook.c_expry_dt,
             :st_tradebook.c_exrc_typ,
             :st_tradebook.c_opt_typ,
             :st_tradebook.l_strike_prc,
             :st_tradebook.c_ordr_rfrnc,
             :st_tradebook.c_trd_rfrnc,
             :st_tradebook.c_xchng_ack,
             :st_tradebook.l_xchng_trd_no,
             :st_tradebook.c_trd_dt,
             :st_tradebook.c_trnsctn_typ:si_null,
             :st_tradebook.c_trd_flw,
             :st_tradebook.l_exctd_qty,
             :st_tradebook.l_exctd_rt
      FROM    ftd_fo_trd_dtls
      WHERE   ftd_ordr_rfrnc  in ( :c_ordr_rfrnc, :c_sltp_ord_rfrnc)
      AND     ftd_rms_prcsd_flg = 'N'
      AND     rownum < 2
      ORDER   BY FTD_TRD_DT;
    }

    if ( SQLCODE != 0  && SQLCODE !=  NO_DATA_FOUND  )
    {
      fn_errlog ( c_ServiceName, "L31070", SQLMSG, c_err_msg );
      return -1;
    }
		else if( SQLCODE ==  NO_DATA_FOUND)
		{
			fn_errlog ( c_ServiceName, "L31075", SQLMSG, c_err_msg );
      return 0; 
		}

         rtrim(st_tradebook.c_trd_dt);
      /*** Added for Order Routing ***/
      fn_cpy_ddr ( st_tradebook.c_rout_crt );

         if(DEBUG_MSG_LVL_3)
         {
          fn_userlog( c_ServiceName, "Calling Trade service");
         }

         if( c_spn_flg == 'N' || ( c_spn_flg == 'S' && c_prd_typ =='P' ) )
         {
          if((c_prd_typ =='F' || c_prd_typ =='P' || c_prd_typ =='U') && strcmp(c_ServiceName,"SFO_FUT_TCONF")==0 )
          {
           i_returncode = fn_acall_svc( c_ServiceName,
                               c_err_msg,
                               &st_tradebook,
                               "vw_tradebook",
                               sizeof( st_tradebook),
                               TPNOREPLY,
                               "SFO_FT_CVRTCONF" );

            if ( i_returncode != SUCC_BFR )
            {
               fn_errlog ( c_ServiceName, "L31080", LIBMSG, c_err_msg );
               return -1;
            }
          }
          else if((c_prd_typ =='F' || c_prd_typ =='P' || c_prd_typ =='U'))
          {
           i_returncode = fn_acall_svc( c_ServiceName,
                               c_err_msg,
                               &st_tradebook,
                               "vw_tradebook",
                               sizeof( st_tradebook),
                               TPNOREPLY,
                               "SFO_FUT_TCONF" );

            if ( i_returncode != SUCC_BFR )
            {
               fn_errlog ( c_ServiceName, "L31085", LIBMSG, c_err_msg );
               return -1;
            }
          }
          else if((c_prd_typ =='O' || c_prd_typ =='I') && strcmp(c_ServiceName,"SFO_OPT_TCONF")==0)
          {
           i_returncode = fn_acall_svc( c_ServiceName,
                          c_err_msg,
                          &st_tradebook,
                          "vw_tradebook",
                          sizeof( st_tradebook),
                          TPNOREPLY,
                          "SFO_OP_CVRTCONF" );

             if ( i_returncode != SUCC_BFR )
             {
              fn_errlog ( c_ServiceName, "L31090", LIBMSG, c_err_msg );
              return -1;
             }
           }
           else if(c_prd_typ =='O' || c_prd_typ =='I')
           {
           i_returncode = fn_acall_svc( c_ServiceName,
                          c_err_msg,
                          &st_tradebook,
                          "vw_tradebook",
                          sizeof( st_tradebook),
                          TPNOREPLY,
                          "SFO_OPT_TCONF" );

             if ( i_returncode != SUCC_BFR )
             {
              fn_errlog ( c_ServiceName, "L31095", LIBMSG, c_err_msg );
              return -1;
             }
           }
          }
          else if( c_spn_flg == 'S' && c_prd_typ !='P' )
          {

            ptr_fml_Sbuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

            if ( ptr_fml_Sbuf == NULL )
            {
                fn_userlog(c_ServiceName,"ptr_fml_Sbuf is NULL ");
                fn_errlog(c_ServiceName, "L31100", TPMSG,  c_err_msg);
                return -1;
            }
            i_err   [ 0 ]     = Fadd32( ptr_fml_Sbuf ,FFO_ROUT_CRT,(char *) st_tradebook.c_rout_crt,0);
            i_ferr  [ 0 ]     = Ferror32;
            i_err   [ 1 ]     = Fadd32( ptr_fml_Sbuf ,FFO_ORDR_RFRNC,(char *) st_tradebook.c_ordr_rfrnc,0);
            i_ferr  [ 1 ]     = Ferror32;
            i_err   [ 2 ]     = Fadd32( ptr_fml_Sbuf ,FFO_TRD_RFRNC,(char *) st_tradebook.c_trd_rfrnc,0);
            i_ferr  [ 2 ]     = Ferror32;
            i_err   [ 3 ]     = Fadd32( ptr_fml_Sbuf ,FFO_EBA_MTCH_ACT_NO,(char *) st_tradebook.c_cln_mtch_accnt,0);
            i_ferr  [ 3 ]     = Ferror32;
            i_err   [ 4 ]     = Fadd32( ptr_fml_Sbuf ,FFO_EBA_CNTRCT_ID,(char *) &st_tradebook.l_eba_cntrct_id,0);
            i_ferr  [ 4 ]     = Ferror32;
            i_err   [ 5 ]     = Fadd32( ptr_fml_Sbuf ,FFO_XCHNG_CD,(char *) st_tradebook.c_xchng_cd,0);
            i_ferr  [ 5 ]     = Ferror32;
            i_err   [ 6 ]     = Fadd32( ptr_fml_Sbuf ,FFO_PRDCT_TYP,(char *) &st_tradebook.c_prd_typ,0);
            i_ferr  [ 6 ]     = Ferror32;
            i_err   [ 7 ]     = Fadd32( ptr_fml_Sbuf ,FFO_UNDRLYNG,(char *) st_tradebook.c_undrlyng,0);
            i_ferr  [ 7 ]     = Ferror32;
            i_err   [ 8 ]     = Fadd32( ptr_fml_Sbuf ,FFO_EXPRY_DT,(char *) st_tradebook.c_expry_dt,0);
            i_ferr  [ 8 ]     = Ferror32;
            i_err   [ 9 ]     = Fadd32( ptr_fml_Sbuf ,FFO_EXER_TYP,(char *) &st_tradebook.c_exrc_typ,0);
            i_ferr  [ 9 ]     = Ferror32;
            i_err   [ 10  ]   = Fadd32( ptr_fml_Sbuf  ,FFO_OPT_TYP,(char *) &st_tradebook.c_opt_typ,0);
            i_ferr  [ 10  ]   = Ferror32;
            i_err   [ 11  ]   = Fadd32( ptr_fml_Sbuf ,FFO_STRK_PRC,(char *) &st_tradebook.l_strike_prc,0);
            i_ferr  [ 11  ]   = Ferror32;
            i_err   [ 12  ]   = Fadd32( ptr_fml_Sbuf ,FFO_CTGRY_INDSTK,(char *) &st_tradebook.c_ctgry_indstk,0);
            i_ferr  [ 12  ]   = Ferror32;
            i_err   [ 13  ]   = Fadd32( ptr_fml_Sbuf  ,FFO_CA_LVL,(char *) &st_tradebook.l_ca_lvl,0);
            i_ferr  [ 13  ]   = Ferror32;
            i_err   [ 14  ]   = Fadd32( ptr_fml_Sbuf ,FFO_TRD_FLW,(char *) &st_tradebook.c_trd_flw,0);
            i_ferr  [ 14  ]   = Ferror32;
            i_err   [ 15  ]   = Fadd32( ptr_fml_Sbuf ,FFO_EXEC_QTY,(char *) &st_tradebook.l_exctd_qty,0);
            i_ferr  [ 15  ]   = Ferror32;
            i_err   [ 16  ]   = Fadd32( ptr_fml_Sbuf  ,FFO_EXCTD_RT,(char *) &st_tradebook.l_exctd_rt,0);
            i_ferr  [ 16  ]   = Ferror32;
            i_err   [ 17  ]   = Fadd32( ptr_fml_Sbuf ,FFO_TRD_DT,(char *) st_tradebook.c_trd_dt,0);
            i_ferr  [ 17  ]   = Ferror32;

            for ( i=0 ; i < 18 ;  i++ )
            {
              if ( (i_err[ i ] == -1 ) && (i_ferr[ i ]  != FNOTPRES ) )
              {
                fn_userlog( c_ServiceName, "Error in :%d:",i );
                fn_errlog( c_ServiceName, "L31105", Fstrerror32( i_ferr[i]),c_err_msg );
                tpfree((char *)ptr_fml_Sbuf);
                Fadd32( ptr_fml_Sbuf, FFO_ERR_MSG, c_err_msg, 0 );
                return -1;
              }
            }

           if(strcmp(c_ServiceName,"SFO_PRCS_TRD")==0)
           {
              i_returncode = tpacall ( "SFO_PRCS_CVRTRD", (char *)ptr_fml_Sbuf,0, TPNOTRAN|TPNOREPLY);

              if ( i_returncode != SUCC_BFR )
               {
                  fn_errlog ( c_ServiceName, "L31110", LIBMSG, c_err_msg );
                  tpfree((char *)ptr_fml_Sbuf);
                  return -1;
               }
           }
           else
           {
              i_returncode = tpacall ( "SFO_PRCS_TRD", (char *)ptr_fml_Sbuf,0, TPNOTRAN|TPNOREPLY);

              if ( i_returncode != SUCC_BFR )
               {
                  fn_errlog ( c_ServiceName, "L31115", LIBMSG, c_err_msg );
                  tpfree((char *)ptr_fml_Sbuf);
                  return -1;
               }
           }
      }
  return 0;
}

int fn_prcs_ack ( char *c_ServiceName,
                 char *c_err_msg,
                 char c_prd_typ,
                 char *c_ordr_rfrnc)
{
    int i = 0;
    int i_ferr[7];
    int i_xchngbkerr[7];
    int i_returncode = 0;
    int i_status = 0;
    char c_spn_flg = '\0';
    char c_sltp_ord_rfrnc[19]= "\0";
    char c_ipord_ref[19] = "\0";
    /** long l_ftd_ord_exe_qty= 0; ** Commented in Ver 1.3 ***/
    long l_ors_msg_typ= 0;

    struct vw_xchngbook st_cvr_xchngbk;

    FBFR32 *ptr_fml_Sbuf;
    ptr_fml_Sbuf  = ( FBFR32 *)NULL;
    MEMSET(st_cvr_xchngbk);
    MEMSET(i_xchngbkerr);
    MEMSET(i_ferr);

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName," c_ordr_rfrnc is :%s:",c_ordr_rfrnc ) ;
      fn_userlog(c_ServiceName," c_prd_typ is :%c:",c_prd_typ ) ;
    }

    EXEC SQL
    SELECT
         FXB_ORS_MSG_TYP,
         FXB_MDFCTN_CNTR,
         nvl(to_char(FXB_ACK_TM, 'dd-mon-yyyy hh24:mi:ss'),'*'),
         NVL(FXB_XCHNG_CNCLD_QTY,0)                                            /***** Ver 1.3 ***/
    INTO  :st_cvr_xchngbk.l_ors_msg_typ,
          :st_cvr_xchngbk.l_mdfctn_cntr,
          :st_cvr_xchngbk.c_ack_tm,
          :st_cvr_xchngbk.l_xchng_can_qty                               /***** Ver 1.3 ***/
    FROM  FXB_FO_XCHNG_BOOK
    WHERE FXB_ORDR_RFRNC = :c_ordr_rfrnc
    AND   FXB_MDFCTN_CNTR =
                          ( SELECT min(FXB_MDFCTN_CNTR)
                            FROM   FXB_FO_XCHNG_BOOK
                            WHERE  FXB_ORDR_RFRNC =   :c_ordr_rfrnc
                            AND    FXB_JIFFY =
                                              (select min(FXB_JIFFY)
                                               from   FXB_FO_XCHNG_BOOK
                                               where  FXB_ORDR_RFRNC = :c_ordr_rfrnc
                                               AND    FXB_RMS_PRCSD_FLG = 'N')
                             AND    FXB_RMS_PRCSD_FLG = 'N'
                           )
    AND   FXB_RMS_PRCSD_FLG = 'N';

    if(SQLCODE != 0 && SQLCODE !=  NO_DATA_FOUND )
    {
       fn_errlog(c_ServiceName, "L31120", SQLMSG,  c_err_msg);
       return -1;
    }
    else if( SQLCODE ==  NO_DATA_FOUND )
    {
        fn_userlog( c_ServiceName, "No unprocessed fresh record checking for cover");

        if(c_prd_typ == 'U' || c_prd_typ == 'I')
        {

          EXEC SQL
          SELECT
            fod_sltp_ordr_rfrnc,
            FOD_PRDCT_TYP
          INTO
              :c_sltp_ord_rfrnc,
              :c_prd_typ
          FROM  FOD_FO_ORDR_DTLS
          WHERE fod_ordr_rfrnc =:c_ordr_rfrnc;

          if(SQLCODE !=0)
          {
            fn_errlog ( c_ServiceName, "L31125", SQLMSG, c_err_msg );
            return -1;
          }

          EXEC SQL
          SELECT
               FXB_ORS_MSG_TYP,
               FXB_MDFCTN_CNTR,
               nvl(to_char(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'),'-'),
           		 NVL(FXB_XCHNG_CNCLD_QTY,0)                                /***** Ver 1.3 ***/
        INTO   :st_cvr_xchngbk.l_ors_msg_typ,
               :st_cvr_xchngbk.l_mdfctn_cntr,
               :st_cvr_xchngbk.c_ack_tm,
          		 :st_cvr_xchngbk.l_xchng_can_qty                                 /***** Ver 1.3 ***/
          FROM FXB_FO_XCHNG_BOOK
          WHERE FXB_ORDR_RFRNC = :c_sltp_ord_rfrnc
          AND   FXB_MDFCTN_CNTR =
                              ( SELECT min(FXB_MDFCTN_CNTR)
                                FROM   FXB_FO_XCHNG_BOOK
                                WHERE  FXB_ORDR_RFRNC =   :c_sltp_ord_rfrnc
                                AND    FXB_JIFFY =
                                                  (select min(FXB_JIFFY)
                                                   from   FXB_FO_XCHNG_BOOK
                                                   where  FXB_ORDR_RFRNC = :c_sltp_ord_rfrnc
                                                   AND    FXB_RMS_PRCSD_FLG = 'N')
                                 AND    FXB_RMS_PRCSD_FLG = 'N'
                               )
          AND    FXB_RMS_PRCSD_FLG = 'N';

          if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND)
          {
              fn_errlog(c_ServiceName, "L31130", SQLMSG, c_err_msg);
              return -1 ;
          }
          if(SQLCODE == NO_DATA_FOUND )
          {
              fn_userlog( c_ServiceName, "No unprocessed cover record ");
              return 0 ;
          }
          else
          {
            i_status = 1;
            fn_userlog( c_ServiceName, "unprocessed cover record so process it");
            strcpy(st_cvr_xchngbk.c_ordr_rfrnc,c_sltp_ord_rfrnc) ;
          }
       }
    }
    else
    {
      i_status = 1;
      strcpy(st_cvr_xchngbk.c_ordr_rfrnc, c_ordr_rfrnc);
    }

    if(i_status == 1)
    {
      if(st_cvr_xchngbk.l_ors_msg_typ == ORS_2LN_ORD_ACPT || st_cvr_xchngbk.l_ors_msg_typ == ORS_3LN_ORD_ACPT ||
          st_cvr_xchngbk.l_ors_msg_typ == ORS_2L_ORD_CNCL || st_cvr_xchngbk.l_ors_msg_typ == ORS_3L_ORD_CNCL)
      {
        l_ors_msg_typ = st_cvr_xchngbk.l_ors_msg_typ;
        strcpy(c_ipord_ref,st_cvr_xchngbk.c_ordr_rfrnc);

        i_returncode = fn_spd_acpt(c_ServiceName,c_ipord_ref,l_ors_msg_typ);
        if( i_returncode == -1)
        {
           fn_userlog( c_ServiceName, "Error while calling fn_spd_acpt");
           fn_errlog( c_ServiceName, "L31135",LIBMSG, c_err_msg);
           return -1 ;
        }
				return 0;
      }

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog( c_ServiceName, "Before Calling  Ack processing for Order Ref:%s:", st_cvr_xchngbk.c_ordr_rfrnc);
      }

      strcpy(st_cvr_xchngbk.c_entry_dt_tm , st_cvr_xchngbk.c_ack_tm);

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog( c_ServiceName, "st_cvr_xchngbk.c_entry_dt_tm:%s:", st_cvr_xchngbk.c_entry_dt_tm);
        fn_userlog( c_ServiceName, "st_cvr_xchngbk.c_ack_tm:%s:", st_cvr_xchngbk.c_ack_tm);
        fn_userlog( c_ServiceName, "st_cvr_xchngbk.l_mdfctn_cntrm:%ld:", st_cvr_xchngbk.l_mdfctn_cntr);
        fn_userlog( c_ServiceName, "st_cvr_xchngbk.l_ors_msg_typ:%ld:", st_cvr_xchngbk.l_ors_msg_typ);
      }
      st_cvr_xchngbk.d_jiffy       = 0;
      st_cvr_xchngbk.l_dwnld_flg   = 0;
      fn_cpy_ddr ( st_cvr_xchngbk.c_rout_crt );
      strcpy(st_cvr_xchngbk.c_xchng_rmrks,"*");

      if ( SQLCODE != 0 )
      {
            fn_userlog(c_ServiceName,"Error While Selecting Span Flag.");
            fn_errlog(c_ServiceName, "L31140", SQLMSG,  c_err_msg);
            return -1;
      }

      if(DEBUG_MSG_LVL_3)
      {
         fn_userlog( c_ServiceName, "st_cvr_xchngbk.c_entry_dt_tm:%s:", st_cvr_xchngbk.c_entry_dt_tm);
         fn_userlog( c_ServiceName, "st_cvr_xchngbk.l_mdfctn_cntrm:%ld:", st_cvr_xchngbk.l_mdfctn_cntr);
         fn_userlog( c_ServiceName, "st_cvr_xchngbk.l_ors_msg_typ:%ld:", st_cvr_xchngbk.l_ors_msg_typ);
      }

			/**** Commented in Ver 1.3 *****
		
      EXEC SQL
      SELECT  NVL(SUM(ftd_exctd_qty),0)
			INTO		:l_ftd_ord_exe_qty
      FROM    ftd_fo_trd_dtls
      WHERE   ftd_ordr_rfrnc = :st_cvr_xchngbk.c_ordr_rfrnc;

      if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
      {
        fn_errlog ( c_ServiceName, "L31145", SQLMSG, c_err_msg );
        fn_userlog(c_ServiceName,"Error While Selecting executed qty .");
        return -1;
      }

      if( DEBUG_MSG_LVL_3 )
      {
         fn_userlog( c_ServiceName, "l_ftd_ord_exe_qty: %ld",l_ftd_ord_exe_qty);
      }

      st_cvr_xchngbk.l_xchng_can_qty = l_ftd_ord_exe_qty;

			******** Commented Ver 1.3 Ends **********/

        if( DEBUG_MSG_LVL_0 )
        {
           fn_userlog( c_ServiceName, "unprocessed record exist so process it...");
        }

        st_cvr_xchngbk.d_jiffy       = 0;
        st_cvr_xchngbk.l_dwnld_flg   = 0;
        strcpy(st_cvr_xchngbk.c_xchng_rmrks,"*");

        if(c_prd_typ =='I' || c_prd_typ =='O')
        {
           i_returncode = fn_acall_svc ( c_ServiceName,
                                         c_err_msg,
                                         &st_cvr_xchngbk,
                                         "vw_xchngbook",
                                         sizeof ( st_cvr_xchngbk),
                                         TPNOREPLY,
                                         "SFO_OPT_ACK" );

          if ( i_returncode != 0 )
          {
           fn_userlog( c_ServiceName, "Error while calling SFO_OPT_ACK");
           fn_errlog( c_ServiceName, "L31150",LIBMSG, c_err_msg);
           return -1 ;
          }
        }
        else if(c_prd_typ =='U' || c_prd_typ =='P' || c_prd_typ =='F' )
        {
         i_returncode = fn_acall_svc ( c_ServiceName,
                                     c_err_msg,
                                     &st_cvr_xchngbk,
                                     "vw_xchngbook",
                                     sizeof ( st_cvr_xchngbk),
                                     TPNOREPLY,
                                     "SFO_FUT_ACK" );

             if ( i_returncode != 0 )
             {
                  fn_userlog( c_ServiceName, "Error while calling SFO_FUT_ACK");
                  fn_errlog( c_ServiceName, "L31155", LIBMSG, c_err_msg);
                  return -1 ;

             }
         }
     }
   return 0;
}
/****************** Ver 1.2 Ends ******************/


/**** Ver 1.4 Starts Here *********/
int fn_prcs_trd_rollover(char *c_ServiceName,
                char *c_err_msg,
                char c_prd_typ,
                char *c_ordr_rfrnc
               )
{

    struct vw_tradebook st_tradebook;

    char c_sltp_ord_rfrnc[19];
    char c_spn_flg = '\0';

    int i_returncode = 0;
    int i = 0;
    int i_err[18];
    int i_ferr[18];

    FBFR32 *ptr_fml_Sbuf;
    ptr_fml_Sbuf  = ( FBFR32 *)NULL;

    short int si_null;

    MEMSET(c_sltp_ord_rfrnc);
    MEMSET(st_tradebook);
    MEMSET(i_ferr);
    MEMSET(i_err);

    if(DEBUG_MSG_LVL_4)
    {
        fn_userlog( c_ServiceName, "In fn_prcs_trd...............");
        fn_userlog( c_ServiceName, "c_prd_typ....:%c:",c_prd_typ);
        fn_userlog( c_ServiceName, "c_ordr_rfrnc :%s:",c_ordr_rfrnc);
    }


        EXEC SQL
      SELECT  NVL(FOD_SPN_FLG,'N')
      INTO    :c_spn_flg
      FROM    FOD_FO_ORDR_DTLS
      where FOD_ORDR_RFRNC =:c_ordr_rfrnc;

   if ( SQLCODE != 0 )
   {
       fn_userlog(c_ServiceName,"Error While Selecting Span Flag.");
       fn_errlog(c_ServiceName, "L31160", SQLMSG,  c_err_msg);
       return -1;
   }


   if(DEBUG_MSG_LVL_3)
   {
       fn_userlog( c_ServiceName, "Span flag :%c:",c_spn_flg);
   }

     EXEC SQL
      SELECT
           fod_sltp_ordr_rfrnc
      INTO
           :c_sltp_ord_rfrnc
      FROM  FOD_FO_ORDR_DTLS
      WHERE fod_ordr_rfrnc = :c_ordr_rfrnc;

      if(SQLCODE !=0)
      {
        fn_errlog ( c_ServiceName, "L31165", SQLMSG, c_err_msg );
        return -1;
      }

    if(DEBUG_MSG_LVL_4)
    {
        fn_userlog( c_ServiceName, "c_sltp_ord_rfrnc :%s:",c_sltp_ord_rfrnc);
    }

    EXEC SQL
      SELECT  ftd_clm_mtch_accnt,
              ftd_xchng_cd,
              ftd_prdct_typ,
              ftd_indstk,
              ftd_undrlyng,
              to_char(ftd_expry_dt,'DD-Mon-YYYY'),
              ftd_exer_typ,
              ftd_opt_typ,
              ftd_strk_prc,
              ftd_ordr_rfrnc,
              ftd_eba_trd_ref,
              ftd_ord_ack_nmbr,
              ftd_xchng_trd_no,
              to_char(ftd_trd_dt,'DD-Mon-YYYY hh24:mi:ss'),
              ftd_trnsctn_typ,
              ftd_trd_flw,
              ftd_exctd_qty,
              ftd_exctd_rt
        INTO  :st_tradebook.c_cln_mtch_accnt,
             :st_tradebook.c_xchng_cd,
             :st_tradebook.c_prd_typ,
             :st_tradebook.c_ctgry_indstk,
             :st_tradebook.c_undrlyng,
             :st_tradebook.c_expry_dt,
             :st_tradebook.c_exrc_typ,
             :st_tradebook.c_opt_typ,
             :st_tradebook.l_strike_prc,
             :st_tradebook.c_ordr_rfrnc,
             :st_tradebook.c_trd_rfrnc,
             :st_tradebook.c_xchng_ack,
             :st_tradebook.l_xchng_trd_no,
             :st_tradebook.c_trd_dt,
             :st_tradebook.c_trnsctn_typ:si_null,
             :st_tradebook.c_trd_flw,
             :st_tradebook.l_exctd_qty,
             :st_tradebook.l_exctd_rt
      FROM    ftd_fo_trd_dtls
      WHERE   ftd_ordr_rfrnc  in ( :c_ordr_rfrnc, :c_sltp_ord_rfrnc)
      AND     ftd_rms_prcsd_flg = 'N'
      AND     rownum < 2
      ORDER   BY FTD_TRD_DT;

    if ( SQLCODE != 0  && SQLCODE !=  NO_DATA_FOUND  )
    {
      fn_errlog ( c_ServiceName, "L31170", SQLMSG, c_err_msg );
      return -1;
    }
    else if( SQLCODE ==  NO_DATA_FOUND)
    {
      fn_errlog ( c_ServiceName, "L31175", SQLMSG, c_err_msg );
      return 0;
    }

         rtrim(st_tradebook.c_trd_dt);
      /*** Added for Order Routing ***/
      fn_cpy_ddr ( st_tradebook.c_rout_crt );

         if(DEBUG_MSG_LVL_3)
         {
          fn_userlog( c_ServiceName, "Calling Trade service");
         }

         if( c_spn_flg == 'N' || ( c_spn_flg == 'S' && c_prd_typ =='P' ) )
         {
          if((c_prd_typ =='F' || c_prd_typ =='P' || c_prd_typ =='U') && strcmp(c_ServiceName,"SFO_FUT_TCONF")==0 )
          {
           i_returncode = fn_acall_svc( c_ServiceName,
                               c_err_msg,
                               &st_tradebook,
                               "vw_tradebook",
                               sizeof( st_tradebook),
                               TPNOREPLY,
                               "SFO_FT_CVRTCONF" );

            if ( i_returncode != SUCC_BFR )
            {
               fn_errlog ( c_ServiceName, "L31180", LIBMSG, c_err_msg );
               return -1;
            }
          }
          else if((c_prd_typ =='F' || c_prd_typ =='P' || c_prd_typ =='U'))
          {
           i_returncode = fn_acall_svc( c_ServiceName,
                               c_err_msg,
                               &st_tradebook,
                               "vw_tradebook",
                               sizeof( st_tradebook),
                               TPNOREPLY,
                               "SFO_FUT_TCONF" );

            if ( i_returncode != SUCC_BFR )
            {
               fn_errlog ( c_ServiceName, "L31185", LIBMSG, c_err_msg );
               return -1;
            }
          }
          else if((c_prd_typ =='O' || c_prd_typ =='I') && strcmp(c_ServiceName,"SFO_OPT_TCONF")==0)
          {
           i_returncode = fn_acall_svc( c_ServiceName,
                          c_err_msg,
                          &st_tradebook,
                          "vw_tradebook",
                          sizeof( st_tradebook),
                          TPNOREPLY,
                          "SFO_OP_CVRTCONF" );

             if ( i_returncode != SUCC_BFR )
             {
              fn_errlog ( c_ServiceName, "L31190", LIBMSG, c_err_msg );
              return -1;
             }
           }
           else if(c_prd_typ =='O' || c_prd_typ =='I')
           {
           i_returncode = fn_acall_svc( c_ServiceName,
                          c_err_msg,
                          &st_tradebook,
                          "vw_tradebook",
                          sizeof( st_tradebook),
                          TPNOREPLY,
                          "SFO_OPT_TCONF" );

             if ( i_returncode != SUCC_BFR )
             {
              fn_errlog ( c_ServiceName, "L31195", LIBMSG, c_err_msg );
              return -1;
             }
           }
          }
          else if( c_spn_flg == 'S' && c_prd_typ !='P' )
          {

            ptr_fml_Sbuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

            if ( ptr_fml_Sbuf == NULL )
            {
                fn_userlog(c_ServiceName,"ptr_fml_Sbuf is NULL ");
                fn_errlog(c_ServiceName, "L31200", TPMSG,  c_err_msg);
                return -1;
            }
            i_err   [ 0 ]     = Fadd32( ptr_fml_Sbuf ,FFO_ROUT_CRT,(char *) st_tradebook.c_rout_crt,0);
            i_ferr  [ 0 ]     = Ferror32;
            i_err   [ 1 ]     = Fadd32( ptr_fml_Sbuf ,FFO_ORDR_RFRNC,(char *) st_tradebook.c_ordr_rfrnc,0);
            i_ferr  [ 1 ]     = Ferror32;
            i_err   [ 2 ]     = Fadd32( ptr_fml_Sbuf ,FFO_TRD_RFRNC,(char *) st_tradebook.c_trd_rfrnc,0);
            i_ferr  [ 2 ]     = Ferror32;
            i_err   [ 3 ]     = Fadd32( ptr_fml_Sbuf ,FFO_EBA_MTCH_ACT_NO,(char *) st_tradebook.c_cln_mtch_accnt,0);
            i_ferr  [ 3 ]     = Ferror32;
            i_err   [ 4 ]     = Fadd32( ptr_fml_Sbuf ,FFO_EBA_CNTRCT_ID,(char *) &st_tradebook.l_eba_cntrct_id,0);
            i_ferr  [ 4 ]     = Ferror32;
            i_err   [ 5 ]     = Fadd32( ptr_fml_Sbuf ,FFO_XCHNG_CD,(char *) st_tradebook.c_xchng_cd,0);
            i_ferr  [ 5 ]     = Ferror32;
            i_err   [ 6 ]     = Fadd32( ptr_fml_Sbuf ,FFO_PRDCT_TYP,(char *) &st_tradebook.c_prd_typ,0);
            i_ferr  [ 6 ]     = Ferror32;
            i_err   [ 7 ]     = Fadd32( ptr_fml_Sbuf ,FFO_UNDRLYNG,(char *) st_tradebook.c_undrlyng,0);
            i_ferr  [ 7 ]     = Ferror32;
            i_err   [ 8 ]     = Fadd32( ptr_fml_Sbuf ,FFO_EXPRY_DT,(char *) st_tradebook.c_expry_dt,0);
            i_ferr  [ 8 ]     = Ferror32;
            i_err   [ 9 ]     = Fadd32( ptr_fml_Sbuf ,FFO_EXER_TYP,(char *) &st_tradebook.c_exrc_typ,0);
            i_ferr  [ 9 ]     = Ferror32;
            i_err   [ 10  ]   = Fadd32( ptr_fml_Sbuf  ,FFO_OPT_TYP,(char *) &st_tradebook.c_opt_typ,0);
            i_ferr  [ 10  ]   = Ferror32;
            i_err   [ 11  ]   = Fadd32( ptr_fml_Sbuf ,FFO_STRK_PRC,(char *) &st_tradebook.l_strike_prc,0);
            i_ferr  [ 11  ]   = Ferror32;
            i_err   [ 12  ]   = Fadd32( ptr_fml_Sbuf ,FFO_CTGRY_INDSTK,(char *) &st_tradebook.c_ctgry_indstk,0);
            i_ferr  [ 12  ]   = Ferror32;
            i_err   [ 13  ]   = Fadd32( ptr_fml_Sbuf  ,FFO_CA_LVL,(char *) &st_tradebook.l_ca_lvl,0);
            i_ferr  [ 13  ]   = Ferror32;
            i_err   [ 14  ]   = Fadd32( ptr_fml_Sbuf ,FFO_TRD_FLW,(char *) &st_tradebook.c_trd_flw,0);
            i_ferr  [ 14  ]   = Ferror32;
            i_err   [ 15  ]   = Fadd32( ptr_fml_Sbuf ,FFO_EXEC_QTY,(char *) &st_tradebook.l_exctd_qty,0);
            i_ferr  [ 15  ]   = Ferror32;
            i_err   [ 16  ]   = Fadd32( ptr_fml_Sbuf  ,FFO_EXCTD_RT,(char *) &st_tradebook.l_exctd_rt,0);
            i_ferr  [ 16  ]   = Ferror32;
            i_err   [ 17  ]   = Fadd32( ptr_fml_Sbuf ,FFO_TRD_DT,(char *) st_tradebook.c_trd_dt,0);
            i_ferr  [ 17  ]   = Ferror32;
            for ( i=0 ; i < 18 ;  i++ )
            {
              if ( (i_err[ i ] == -1 ) && (i_ferr[ i ]  != FNOTPRES ) )
              {
                fn_userlog( c_ServiceName, "Error in :%d:",i );
                fn_errlog( c_ServiceName, "L31205", Fstrerror32( i_ferr[i]),c_err_msg );
                tpfree((char *)ptr_fml_Sbuf);
                Fadd32( ptr_fml_Sbuf, FFO_ERR_MSG, c_err_msg, 0 );
                return -1;
              }
            }

           if(strcmp(c_ServiceName,"SFO_PRCS_TRD")==0)
           {
              i_returncode = tpacall ( "SFO_PRCS_CVRTRD", (char *)ptr_fml_Sbuf,0, TPNOTRAN|TPNOREPLY);

              if ( i_returncode != SUCC_BFR )
               {
                  fn_errlog ( c_ServiceName, "L31210", LIBMSG, c_err_msg );
                  tpfree((char *)ptr_fml_Sbuf);
                  return -1;
               }
           }
           else
           {
              i_returncode = tpacall ( "SFO_PRCS_TRD", (char *)ptr_fml_Sbuf,0, TPNOTRAN|TPNOREPLY);

              if ( i_returncode != SUCC_BFR )
               {
                  fn_errlog ( c_ServiceName, "L31215", LIBMSG, c_err_msg );
                  tpfree((char *)ptr_fml_Sbuf);
                  return -1;
               }
           }
      }
  return 0;
}          


int fn_prcs_ack_spdrl ( char *c_ServiceName,
                 char *c_err_msg,
                 char c_prd_typ,
                 char *c_ordr_rfrnc)
{
    int i = 0;
    int i_ferr[7];
    int i_xchngbkerr[7];
    int i_returncode = 0;
    int i_status = 0;
    char c_spn_flg = '\0';
    char c_sltp_ord_rfrnc[19]= "\0";
    char c_ipord_ref[19] = "\0";
    long l_ors_msg_typ= 0;

    struct vw_xchngbook st_cvr_xchngbk;

    FBFR32 *ptr_fml_Sbuf;
    ptr_fml_Sbuf  = ( FBFR32 *)NULL;
    MEMSET(st_cvr_xchngbk);
    MEMSET(i_xchngbkerr);
    MEMSET(i_ferr);

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName," c_ordr_rfrnc is :%s:",c_ordr_rfrnc ) ;
      fn_userlog(c_ServiceName," c_prd_typ is :%c:",c_prd_typ ) ;
    }

    EXEC SQL
    SELECT
         FXB_ORS_MSG_TYP,
         FXB_MDFCTN_CNTR,
         nvl(to_char(FXB_ACK_TM, 'dd-mon-yyyy hh24:mi:ss'),'*'),
         NVL(FXB_XCHNG_CNCLD_QTY,0)                          
    INTO  :st_cvr_xchngbk.l_ors_msg_typ,
          :st_cvr_xchngbk.l_mdfctn_cntr,
          :st_cvr_xchngbk.c_ack_tm,
          :st_cvr_xchngbk.l_xchng_can_qty                   
    FROM  FXB_FO_XCHNG_BOOK
    WHERE FXB_ORDR_RFRNC = :c_ordr_rfrnc
    AND   FXB_MDFCTN_CNTR =
                          ( SELECT min(FXB_MDFCTN_CNTR)
                            FROM   FXB_FO_XCHNG_BOOK
                            WHERE  FXB_ORDR_RFRNC =   :c_ordr_rfrnc
                            AND    FXB_JIFFY =
                                              (select min(FXB_JIFFY)
                                               from   FXB_FO_XCHNG_BOOK
                                               where  FXB_ORDR_RFRNC = :c_ordr_rfrnc
                                               AND    FXB_RMS_PRCSD_FLG = 'N')
                             AND    FXB_RMS_PRCSD_FLG = 'N'
                           )
    AND   FXB_RMS_PRCSD_FLG = 'N';

    if(SQLCODE != 0 && SQLCODE !=  NO_DATA_FOUND )
    {
       fn_errlog(c_ServiceName, "L31220", SQLMSG,  c_err_msg);
       return -1;
    }
    else if( SQLCODE ==  NO_DATA_FOUND )
    {
        fn_userlog( c_ServiceName, "No unprocessed fresh record checking for cover");

          EXEC SQL
          SELECT
            fod_sltp_ordr_rfrnc,
            FOD_PRDCT_TYP
          INTO
              :c_sltp_ord_rfrnc,
              :c_prd_typ
          FROM  FOD_FO_ORDR_DTLS
          WHERE fod_ordr_rfrnc =:c_ordr_rfrnc;

          if(SQLCODE !=0)
          {
            fn_errlog ( c_ServiceName, "L31225", SQLMSG, c_err_msg );
            return -1;
          }

          EXEC SQL
          SELECT
               FXB_ORS_MSG_TYP,
               FXB_MDFCTN_CNTR,
               nvl(to_char(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'),'-'),
               NVL(FXB_XCHNG_CNCLD_QTY,0)              
        INTO   :st_cvr_xchngbk.l_ors_msg_typ,
               :st_cvr_xchngbk.l_mdfctn_cntr,
               :st_cvr_xchngbk.c_ack_tm,
               :st_cvr_xchngbk.l_xchng_can_qty                    
          FROM FXB_FO_XCHNG_BOOK
          WHERE FXB_ORDR_RFRNC = :c_sltp_ord_rfrnc
          AND   FXB_MDFCTN_CNTR =
                              ( SELECT min(FXB_MDFCTN_CNTR)
                                FROM   FXB_FO_XCHNG_BOOK
                                WHERE  FXB_ORDR_RFRNC =   :c_sltp_ord_rfrnc
                                AND    FXB_JIFFY =
                                                  (select min(FXB_JIFFY)
                                                   from   FXB_FO_XCHNG_BOOK
                                                   where  FXB_ORDR_RFRNC = :c_sltp_ord_rfrnc
                                                   AND    FXB_RMS_PRCSD_FLG = 'N')
                                 AND    FXB_RMS_PRCSD_FLG = 'N'
                               )
          AND    FXB_RMS_PRCSD_FLG = 'N';
 
          if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND)
          {
              fn_errlog(c_ServiceName, "L31230", SQLMSG, c_err_msg);
              return -1 ;
          }
          if(SQLCODE == NO_DATA_FOUND )
          {
              fn_userlog( c_ServiceName, "No unprocessed cover record ");
              return 0 ;
          }
          else
          {
            i_status = 1;
            fn_userlog( c_ServiceName, "unprocessed cover record so process it");
            strcpy(st_cvr_xchngbk.c_ordr_rfrnc,c_sltp_ord_rfrnc) ;
          }
    }
    else
    {
      i_status = 1;
      strcpy(st_cvr_xchngbk.c_ordr_rfrnc, c_ordr_rfrnc);
    }

    if(i_status == 1)
    {
        l_ors_msg_typ = st_cvr_xchngbk.l_ors_msg_typ;
        strcpy(c_ipord_ref,st_cvr_xchngbk.c_ordr_rfrnc);

        i_returncode = fn_spd_acpt(c_ServiceName,c_ipord_ref,l_ors_msg_typ);
        if( i_returncode == -1)
        {
           fn_userlog( c_ServiceName, "Error while calling fn_spd_acpt");
           fn_errlog( c_ServiceName, "L31235",LIBMSG, c_err_msg);
           return -1 ;
        }

    }
   return 0;
}

/**** Ver 1.4 Ends here ***********/
