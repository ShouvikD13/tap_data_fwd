/************************************************************************************************************/
/*	Ver 1.0	-	28-Feb-2014		New Function introduced to replace service calls by SQL queries. Sandeep Patil	*/
/*  Ver 1.1 - 04-Apr-2014   To display OptionPLUS link for enabled contracts only (Navina D)                */
/*  Ver 1.2 - 11-Dec-2014   NNF:Introduction of Trade execution range brdcast data (Navina D)               */
/*  Ver 1.4 - 03-Jul-2015   FCM-FTQ Merger Changes (Anand Dhopte)                                           */
/*  Ver 1.5 - 19-Jul-2016   Debug Level Changes  (Sachin Birje)                                             */
/*  Ver 1.6 - 22-Nov-2016   New Function introduced to replace service calls by SQL queries.(Vishal B.)     */
/*	Ver 1.7 - 07-Sep-2017   Handling for No Data Found introduced (Anand Dhopte)	                          */
/*	Ver 1.8 - 05-Jul-2018		New Function introduced. (Parag)																								*/
/*	Ver 1.9 - 18-Mar-2019		New Function introduced for Rollover with Spread	(Parag)												*/
/*	ver 2.0 - 09-Feb-2022 CR-ISEC14-165712 Enhancements to Physical settlement Stocks disable contracts and EOS for Options Buy (Shlok Ghan) */
/*  ver 2.1 - 07-Mar-2022  CR-ISEC14-163069 Disable market order placement for illiquid options contracts under F&O segment (Roshni Pawar) */
/************************************************************************************************************/

#include <stdio.h>
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo_view_def.h>
#include <fml_def.h>
#include <fo.h>
#include <fn_log.h>              
#include <fn_read_debug_lvl.h>  
#include <fo_get_records.h>  

int fn_get_qt( char   *c_ServiceName,    
               struct vw_contract   *ptr_st_contract,
               struct vw_cntrct_qt  *ptr_st_cntrct_qt,
               char   *c_err_msg
             )
{

  varchar c_expiry_dt [ LEN_DATE ];
  varchar c_exp_dt [ LEN_DATE ];
  varchar c_lst_trd_dt [ LEN_DATE ];
  short i_trd_tm;

	if(DEBUG_MSG_LVL_3)  /*** Ver 1.5, debug changed from 0 to 3 **/
	{
		fn_userlog(c_ServiceName,"Inside fn_get_qt Function.");
	}

  rtrim ( ptr_st_contract->c_expry_dt );
  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_contract->c_expry_dt );
 	SETLEN ( c_expiry_dt );

	if(DEBUG_MSG_LVL_5)
	{
		fn_userlog(c_ServiceName,"expiry date:%s:",ptr_st_contract->c_expry_dt);
		fn_userlog(c_ServiceName,"XCHNG CODE:%s:",ptr_st_contract->c_xchng_cd);
		fn_userlog(c_ServiceName,"product type:%c:",ptr_st_contract->c_prd_typ);
		fn_userlog(c_ServiceName,"Underlyng :%s:",ptr_st_contract->c_undrlyng);
		fn_userlog(c_ServiceName,"Exercise type:%c:",ptr_st_contract->c_exrc_typ);
		fn_userlog(c_ServiceName,"Option type:%c:",ptr_st_contract->c_opt_typ);
		fn_userlog(c_ServiceName,"Strike Price:%ld:",ptr_st_contract->l_strike_prc);
	}	

	EXEC SQL
		SELECT	FTQ_XCHNG_CD,
            FTQ_PRDCT_TYP,
            FTQ_UNDRLYNG,
            TO_CHAR ( FTQ_EXPRY_DT, 'dd-Mon-yyyy' ),
            FTQ_EXER_TYP,
            FTQ_OPT_TYP,
            NVL(FTQ_STRK_PRC, 0 ),
            FTQ_INDSTK,
            NVL( FTQ_LST_TRD_PRC, 0 ),
            TO_CHAR ( FTQ_LST_TRD_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
            NVL( FTQ_LST_TRD_QTY, 0 ),
            NVL( FTQ_BST1_BID_PRC, 0 ),
            NVL( FTQ_BST1_BID_QTY, 0 ),
            NVL( FTQ_BST1_OFFR_PRC, 0 ),
            NVL( FTQ_BST1_OFFR_QTY, 0 ),
            NVL( FTQ_CLS_PRC, 0 ),
            NVL( FTQ_OPN_PRC, 0 ),
            NVL( FTQ_HGH_PRC, 0 ),
            NVL( FTQ_LOW_PRC, 0 ),
            NVL( FTQ_PRVS_CLS_PRC, 0 ),
            NVL( FTQ_CHNG_PRVS_CLS, 0 ),
            NVL(FTQ_INDCTR,'+'),
            NVL( FTQ_HGH_PRC_RNG, 0 ),
            NVL( FTQ_LOW_PRC_RNG, 0 ),
            NVL( FTQ_AVRG_TRD_PRC, 0 ),
            NVL( FTQ_TOT_QTY_TRDD, 0 ),
            NVL( FTQ_TOT_VAL_TRDD, 0 ),
            NVL( FTQ_BASE_PRC, 0 ),
            NVL( FTQ_CRNT_OI, 0 ),
            NVL( FTQ_CHNG_OI, 0 ),
            NVL( FTQ_OI_HIGH, 0 ),
            NVL( FTQ_OI_LOW, 0 ),
            NVL( FTQ_OI_INDCTR, '+' ),
            '*',
            NVL( FTQ_MIN_LOT_QTY,'0'),
  /***	(case when NVL(fcm_qt_trdng_flg,'*') = 'T' and  NVL(fcm_sltp_fp_qt_trdng_flg,'*') =  'T' then '1' else '0' end),   *** Ver 1.1 *** Commented in Ver 1.4 ***/
  (case when NVL(ftq_qt_trdng_flg,'*') = 'T' and NVL(ftq_sltp_fp_qt_trdng_flg,'*') = 'T' then '1' else '0' end),/*Ver 1.4*/
						NVL( ftq_hgh_trd_exec_rng, 0 ),   /*** Ver 1.2 ***/
            NVL( ftq_low_trd_exec_rng, 0 )    /*** Ver 1.2 ***/
			INTO	:ptr_st_cntrct_qt->c_xchng_cd,
            :ptr_st_cntrct_qt->c_prd_typ,
            :ptr_st_cntrct_qt->c_undrlyng,
            :c_exp_dt,
            :ptr_st_cntrct_qt->c_exrc_typ,
            :ptr_st_cntrct_qt->c_opt_typ,
            :ptr_st_cntrct_qt->l_strike_prc,
            :ptr_st_cntrct_qt->c_ctgry_indstk,
            :ptr_st_cntrct_qt->l_lst_trdd_prc,
            :c_lst_trd_dt:i_trd_tm,
            :ptr_st_cntrct_qt->l_lst_trdd_qty,
            :ptr_st_cntrct_qt->l_bst_bid_prc,
            :ptr_st_cntrct_qt->l_bst_bid_qty,
            :ptr_st_cntrct_qt->l_bst_offr_prc,
            :ptr_st_cntrct_qt->l_bst_offr_qty,
            :ptr_st_cntrct_qt->l_close_prc,
            :ptr_st_cntrct_qt->l_open_prc,
            :ptr_st_cntrct_qt->l_high_prc,
            :ptr_st_cntrct_qt->l_low_prc,
            :ptr_st_cntrct_qt->l_prev_close_prc,
            :ptr_st_cntrct_qt->l_chng_prvs_close_prc,
            :ptr_st_cntrct_qt->c_indctr,
            :ptr_st_cntrct_qt->l_high_prc_rng,
            :ptr_st_cntrct_qt->l_low_prc_rng,
            :ptr_st_cntrct_qt->l_avg_trdd_prc,
            :ptr_st_cntrct_qt->l_tot_qty_trdd,
            :ptr_st_cntrct_qt->d_tot_val_trdd,
            :ptr_st_cntrct_qt->l_base_prc,
            :ptr_st_cntrct_qt->d_crnt_oi,
            :ptr_st_cntrct_qt->d_chng_oi,
            :ptr_st_cntrct_qt->d_oi_high,
            :ptr_st_cntrct_qt->d_oi_low,
            :ptr_st_cntrct_qt->c_oi_indctr,
            :ptr_st_cntrct_qt->c_rqst_typ,
            :ptr_st_cntrct_qt->l_min_lot_qty,
						:ptr_st_cntrct_qt->l_ca_lvl,				 /*** Ver 1.1 ***/
            :ptr_st_cntrct_qt->l_eba_cntrct_id,   /*** Ver 1.2 ***/
            :ptr_st_cntrct_qt->l_tot_val_trdd     /*** Ver 1.2 ***/
			FROM	 FTQ_FO_TRD_QT /*** , fcm_fo_cntrct_mstr *** FCM table added in Ver 1.1*** Commented in Ver 1.4 ***/
			WHERE	 FTQ_XCHNG_CD  = :ptr_st_contract->c_xchng_cd
      AND    FTQ_PRDCT_TYP = decode(:ptr_st_contract->c_prd_typ,'P','F','U','F','I','O',:ptr_st_contract->c_prd_typ) 
      AND    FTQ_UNDRLYNG  = :ptr_st_contract->c_undrlyng
      AND    FTQ_EXPRY_DT  = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
      AND    FTQ_EXER_TYP  = :ptr_st_contract->c_exrc_typ
      AND    FTQ_OPT_TYP   = :ptr_st_contract->c_opt_typ
      AND    FTQ_STRK_PRC  = :ptr_st_contract->l_strike_prc;
     /*** Commented in Ver 1.4 ***
			AND			fcm_xchng_cd  = ftq_xchng_cd
			AND			fcm_undrlyng  = ftq_undrlyng
			AND			fcm_prdct_typ = ftq_prdct_typ
			AND			fcm_expry_dt	= ftq_expry_dt
			AND			fcm_opt_typ   = ftq_opt_typ
			AND			fcm_strk_prc	= ftq_strk_prc
			AND			fcm_exer_typ	= ftq_exer_typ;		*** FCM join added in Ver 1.1 ***/

			if ( SQLCODE != 0 )
			{
        if ( SQLCODE == NO_DATA_FOUND )   /*** Ver 1.7 proper error msg displayed in case of no data found ***/
        {
          fn_userlog(c_ServiceName,"Invalid contract");
          strcpy(c_err_msg,"Record does not exist for selected contract.");                          
        }
        else
        {
				  fn_userlog(c_ServiceName,"Failed To Get Trade Quotes."); 
	    	  fn_errlog( c_ServiceName, "L31005", SQLMSG, c_err_msg  );
        }			
				return -1;
			}

	SETNULL ( c_exp_dt );
	SETNULL ( c_lst_trd_dt );

  strcpy ( ptr_st_cntrct_qt->c_expry_dt , ( char * ) c_exp_dt.arr );
  strcpy ( ptr_st_cntrct_qt->c_lst_trdd_time , ( char * ) c_lst_trd_dt.arr );

	return 0 ;
}


int fn_get_spotprc  ( char *c_ServiceName,
                      char *c_undrlyng,
                      char *c_xchng_cd,
                      double *d_quote,
                      char *c_quote_tm,
                      char *c_err_msg
                    )
{

char c_quote_tm1[23];

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Inside Function fn_get_spotprc.");
    fn_userlog(c_ServiceName,"Input Exchange Code Is :%s:",c_xchng_cd);
    fn_userlog(c_ServiceName,"Input Underlying Is :%s:",c_undrlyng);
  }

  rtrim(c_undrlyng);

  EXEC SQL
    SELECT
      LTQ_RT,
      NVL(TO_CHAR(LTQ_DT, 'DD-Mon-YYYY HH24:MI:SS'),sysdate)
    INTO
      :d_quote,
      :c_quote_tm1
    FROM LTQ_TRD_QT
    WHERE LTQ_STCK_CD   = :c_undrlyng
    AND   LTQ_XCHNG_CD  = :c_xchng_cd;

	if ( SQLCODE != 0 )
  {
    fn_userlog(c_ServiceName,"Error In Spot Price Selection.");
		fn_errlog( c_ServiceName, "L31010", SQLMSG, c_err_msg  );
    return -1;
  }

	strcpy(c_quote_tm,c_quote_tm1);

  return 0;
}

/*** Ver 1.6 Starts here ***/

int fn_get_ordrdtls( struct vw_orderbook *ptr_st_orderbook,
                       char *c_ServiceName,
                       char *c_err_msg )
{

  EXEC SQL BEGIN DECLARE SECTION;
  short i_sprd_ord_rfrnc = 0;
  short i_settlor = 0;
  short i_ack_tm = 0;
  short i_prev_ack_tm = 0;
  short i_xchng_ack = 0;
  short i_valid_dt = 0;
  EXEC SQL END DECLARE SECTION;

  if( DEBUG_MSG_LVL_0)
  {
    fn_userlog( c_ServiceName,"c_ordr_rfrnc:%s:",ptr_st_orderbook->c_ordr_rfrnc);
    fn_userlog( c_ServiceName,"Requested Operation :%c:",ptr_st_orderbook->c_oprn_typ);
  }

  MEMSET( ptr_st_orderbook->c_ctcl_id);

  if ( ptr_st_orderbook->c_oprn_typ == FOR_VIEW )
  {
    EXEC SQL
      SELECT  fod_clm_mtch_accnt,
              fod_ctcl_id ,
              fod_clnt_ctgry,
              fod_pipe_id,
              fod_xchng_cd,
              fod_prdct_typ,
              fod_undrlyng,
              to_char ( fod_expry_dt, 'dd-Mon-yyyy' ),
              fod_exer_typ,
              fod_opt_typ,
              fod_strk_prc,
              fod_ordr_flw,
              fod_lmt_mrkt_sl_flg,
              fod_dsclsd_qty,
              fod_ordr_tot_qty,
              fod_lmt_rt,
              fod_stp_lss_tgr,
              fod_ordr_type,
              to_char ( fod_ordr_valid_dt, 'dd-Mon-yyyy' ),
              to_char ( fod_trd_dt, 'dd-Mon-yyyy' ),
              fod_ordr_stts,
              fod_exec_qty,
              NVL(fod_exec_qty_day,0),
              fod_cncl_qty,
              fod_exprd_qty,
              fod_sprd_ordr_ref,
              fod_mdfctn_cntr,
              fod_settlor,
              fod_ack_nmbr,
              fod_spl_flag,
              fod_indstk,
              to_char ( fod_ord_ack_tm, 'dd-Mon-yyyy hh24:mi:ss' ),
              to_char ( fod_lst_rqst_ack_tm, 'dd-Mon-yyyy hh24:mi:ss' ),
              fod_pro_cli_ind ,
              fod_channel
        INTO  :ptr_st_orderbook->c_cln_mtch_accnt,
              :ptr_st_orderbook->c_ctcl_id,
              :ptr_st_orderbook->l_clnt_ctgry,
              :ptr_st_orderbook->c_pipe_id,
              :ptr_st_orderbook->c_xchng_cd,
              :ptr_st_orderbook->c_prd_typ,
              :ptr_st_orderbook->c_undrlyng,
              :ptr_st_orderbook->c_expry_dt,
              :ptr_st_orderbook->c_exrc_typ,
              :ptr_st_orderbook->c_opt_typ,
              :ptr_st_orderbook->l_strike_prc,
              :ptr_st_orderbook->c_ordr_flw,
              :ptr_st_orderbook->c_slm_flg,
              :ptr_st_orderbook->l_dsclsd_qty,
              :ptr_st_orderbook->l_ord_tot_qty,
              :ptr_st_orderbook->l_ord_lmt_rt,
              :ptr_st_orderbook->l_stp_lss_tgr,
              :ptr_st_orderbook->c_ord_typ,
              :ptr_st_orderbook->c_valid_dt:i_valid_dt,
              :ptr_st_orderbook->c_trd_dt,
              :ptr_st_orderbook->c_ordr_stts,
              :ptr_st_orderbook->l_exctd_qty,
              :ptr_st_orderbook->l_exctd_qty_day,
              :ptr_st_orderbook->l_can_qty,
              :ptr_st_orderbook->l_exprd_qty,
              :ptr_st_orderbook->c_sprd_ord_rfrnc:i_sprd_ord_rfrnc,
              :ptr_st_orderbook->l_mdfctn_cntr,
              :ptr_st_orderbook->c_settlor:i_settlor,
              :ptr_st_orderbook->c_xchng_ack:i_xchng_ack,
              :ptr_st_orderbook->c_spl_flg,
              :ptr_st_orderbook->c_ctgry_indstk,
              :ptr_st_orderbook->c_ack_tm:i_ack_tm,
              :ptr_st_orderbook->c_prev_ack_tm:i_prev_ack_tm,
              :ptr_st_orderbook->c_pro_cli_ind,
              :ptr_st_orderbook->c_channel
        FROM  fod_fo_ordr_dtls
        WHERE fod_ordr_rfrnc = :ptr_st_orderbook->c_ordr_rfrnc;
  }
  else if( ptr_st_orderbook->c_oprn_typ == FOR_UPDATE )
  {
    EXEC SQL
      SELECT  fod_clm_mtch_accnt,
              fod_clnt_ctgry,
              fod_pipe_id,
              fod_xchng_cd,
              decode(:ptr_st_orderbook->c_oprn_typ,'S',(decode(fod_prdct_typ,'P','F',fod_prdct_typ)),fod_prdct_typ),
              fod_undrlyng,
              to_char ( fod_expry_dt, 'dd-Mon-yyyy' ),
              fod_exer_typ,
              fod_opt_typ,
              fod_strk_prc,
              fod_ordr_flw,
              fod_lmt_mrkt_sl_flg,
              fod_dsclsd_qty,
              fod_ordr_tot_qty,
              fod_lmt_rt,
              fod_stp_lss_tgr,
              fod_ordr_type,
              to_char ( fod_ordr_valid_dt, 'dd-Mon-yyyy' ),
              to_char ( fod_trd_dt, 'dd-Mon-yyyy' ),
              fod_ordr_stts,
              fod_exec_qty,
              NVL(fod_exec_qty_day,0),
              fod_cncl_qty,
              fod_exprd_qty,
              fod_sprd_ordr_ref,
              fod_mdfctn_cntr,
              fod_settlor,
              fod_ack_nmbr,
              fod_spl_flag,
              fod_indstk,
              to_char ( fod_ord_ack_tm, 'dd-Mon-yyyy hh24:mi:ss' ),
              to_char ( fod_lst_rqst_ack_tm, 'dd-Mon-yyyy hh24:mi:ss' ),
              fod_pro_cli_ind,
              nvl(fod_ctcl_id,' '),
              fod_channel
        INTO  :ptr_st_orderbook->c_cln_mtch_accnt,
              :ptr_st_orderbook->l_clnt_ctgry,
              :ptr_st_orderbook->c_pipe_id,
              :ptr_st_orderbook->c_xchng_cd,
              :ptr_st_orderbook->c_prd_typ,
              :ptr_st_orderbook->c_undrlyng,
              :ptr_st_orderbook->c_expry_dt,
              :ptr_st_orderbook->c_exrc_typ,
              :ptr_st_orderbook->c_opt_typ,
              :ptr_st_orderbook->l_strike_prc,
              :ptr_st_orderbook->c_ordr_flw,
              :ptr_st_orderbook->c_slm_flg,
              :ptr_st_orderbook->l_dsclsd_qty,
              :ptr_st_orderbook->l_ord_tot_qty,
              :ptr_st_orderbook->l_ord_lmt_rt,
              :ptr_st_orderbook->l_stp_lss_tgr,
              :ptr_st_orderbook->c_ord_typ,
              :ptr_st_orderbook->c_valid_dt:i_valid_dt,
              :ptr_st_orderbook->c_trd_dt,
              :ptr_st_orderbook->c_ordr_stts,
              :ptr_st_orderbook->l_exctd_qty,
              :ptr_st_orderbook->l_exctd_qty_day,
              :ptr_st_orderbook->l_can_qty,
              :ptr_st_orderbook->l_exprd_qty,
              :ptr_st_orderbook->c_sprd_ord_rfrnc:i_sprd_ord_rfrnc,
              :ptr_st_orderbook->l_mdfctn_cntr,
              :ptr_st_orderbook->c_settlor:i_settlor,
              :ptr_st_orderbook->c_xchng_ack:i_xchng_ack,
              :ptr_st_orderbook->c_spl_flg,
              :ptr_st_orderbook->c_ctgry_indstk,
              :ptr_st_orderbook->c_ack_tm:i_ack_tm,
              :ptr_st_orderbook->c_prev_ack_tm:i_prev_ack_tm,
              :ptr_st_orderbook->c_pro_cli_ind,
              :ptr_st_orderbook->c_ctcl_id,
              :ptr_st_orderbook->c_channel
        FROM  fod_fo_ordr_dtls
        WHERE fod_ordr_rfrnc = :ptr_st_orderbook->c_ordr_rfrnc
        FOR   UPDATE OF fod_ordr_rfrnc ;
  }
  else
  {
     sprintf( c_err_msg, "Invalid Operation Type:%c:",
                                       ptr_st_orderbook->c_oprn_typ );
     fn_errlog ( c_ServiceName, "S31005", DEFMSG, c_err_msg );
     return -1;
  }

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31010", SQLMSG, c_err_msg );
    return -1;
  }

  rtrim ( ptr_st_orderbook->c_expry_dt );
  rtrim ( ptr_st_orderbook->c_ctcl_id );

  if( DEBUG_MSG_LVL_0 )
  {
    fn_userlog( c_ServiceName, "match account after is :%s:",ptr_st_orderbook->c_cln_mtch_accnt);
    fn_userlog( c_ServiceName, "cp after is :%s:",ptr_st_orderbook->c_settlor);
  }

  return 0;
}

/*** Ver 1.6 Ends  here ***/

/*** Ver 1.8 Starts here ***/

int fn_get_quote( char   *c_ServiceName,
               		struct vw_contract   *ptr_st_contract,
               		struct vw_cntrct_qt  *ptr_st_cntrct_qt,
									char   *c_setlmnt_flg,
                  char   *c_dlvry_pos_allwd,
								  char   *c_buy_allwd,	/*** ver 2.0 ***/
  								char   *c_sell_allwd, /*** ver 2.0 ***/
                  char   *c_mrkt_ordr_flg,/*** ver 2.1 ***/
               		char   *c_err_msg
             		)
{

  varchar c_expiry_dt [ LEN_DATE ];
  varchar c_exp_dt [ LEN_DATE ];
  varchar c_lst_trd_dt [ LEN_DATE ];
  short i_trd_tm;
	char c_setlmnt_flg_new = '\0';
	char c_dlvry_pos_allwd_new = '\0';

	char c_buy_allwd_new = '\0';	/*** ver 2.0 ***/
	char c_sell_allwd_new = '\0';	/*** ver 2.0 ***/
  char c_mrkt_ordr_flg_new = '\0'; /*** ver 2.1 ***/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Inside fn_get_qt Function.");
  }

  rtrim ( ptr_st_contract->c_expry_dt );
  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_contract->c_expry_dt );
  SETLEN ( c_expiry_dt );

  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"expiry date:%s:",ptr_st_contract->c_expry_dt);
    fn_userlog(c_ServiceName,"XCHNG CODE:%s:",ptr_st_contract->c_xchng_cd);
    fn_userlog(c_ServiceName,"product type:%c:",ptr_st_contract->c_prd_typ);
    fn_userlog(c_ServiceName,"Underlyng :%s:",ptr_st_contract->c_undrlyng);
    fn_userlog(c_ServiceName,"Exercise type:%c:",ptr_st_contract->c_exrc_typ);
    fn_userlog(c_ServiceName,"Option type:%c:",ptr_st_contract->c_opt_typ);
    fn_userlog(c_ServiceName,"Strike Price:%ld:",ptr_st_contract->l_strike_prc);
  }

  EXEC SQL
    SELECT  FTQ_XCHNG_CD,
            FTQ_PRDCT_TYP,
            FTQ_UNDRLYNG,
            TO_CHAR ( FTQ_EXPRY_DT, 'dd-Mon-yyyy' ),
            FTQ_EXER_TYP,
            FTQ_OPT_TYP,
            NVL(FTQ_STRK_PRC, 0 ),
            FTQ_INDSTK,
            NVL( FTQ_LST_TRD_PRC, 0 ),
            TO_CHAR ( FTQ_LST_TRD_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
            NVL( FTQ_LST_TRD_QTY, 0 ),
            NVL( FTQ_BST1_BID_PRC, 0 ),
            NVL( FTQ_BST1_BID_QTY, 0 ),
            NVL( FTQ_BST1_OFFR_PRC, 0 ),
            NVL( FTQ_BST1_OFFR_QTY, 0 ),
            NVL( FTQ_CLS_PRC, 0 ),
            NVL( FTQ_OPN_PRC, 0 ),
            NVL( FTQ_HGH_PRC, 0 ),
            NVL( FTQ_LOW_PRC, 0 ),
            NVL( FTQ_PRVS_CLS_PRC, 0 ),
            NVL( FTQ_CHNG_PRVS_CLS, 0 ),
            NVL(FTQ_INDCTR,'+'),
            NVL( FTQ_HGH_PRC_RNG, 0 ),
            NVL( FTQ_LOW_PRC_RNG, 0 ),
            NVL( FTQ_AVRG_TRD_PRC, 0 ),
            NVL( FTQ_TOT_QTY_TRDD, 0 ),
            NVL( FTQ_TOT_VAL_TRDD, 0 ),
            NVL( FTQ_BASE_PRC, 0 ),
            NVL( FTQ_CRNT_OI, 0 ),
            NVL( FTQ_CHNG_OI, 0 ),
            NVL( FTQ_OI_HIGH, 0 ),
            NVL( FTQ_OI_LOW, 0 ),
            NVL( FTQ_OI_INDCTR, '+' ),
            '*',
            NVL( FTQ_MIN_LOT_QTY,'0'),
  					(case when NVL(ftq_qt_trdng_flg,'*') = 'T' and NVL(ftq_sltp_fp_qt_trdng_flg,'*') = 'T' then '1' else '0' end),
            NVL( ftq_hgh_trd_exec_rng, 0 ),
            NVL( ftq_low_trd_exec_rng, 0 ),
						NVL( ftq_setlmnt_flg, 'C' ),
						NVL( ftq_dlvry_pos_allwd, 'Y' ),
						NVL( FTQ_BUY_ALLWD , 'Y'),		/*** ver 2.0 ***/
						NVL( FTQ_SELL_ALLWD, 'Y'),			/*** ver 2.0 ***/ 
            NVL( FTQ_MRKT_ORDR_FLG,'Y') /** ver 2.1 ***/
      INTO  :ptr_st_cntrct_qt->c_xchng_cd,
            :ptr_st_cntrct_qt->c_prd_typ,
            :ptr_st_cntrct_qt->c_undrlyng,
            :c_exp_dt,
            :ptr_st_cntrct_qt->c_exrc_typ,
            :ptr_st_cntrct_qt->c_opt_typ,
            :ptr_st_cntrct_qt->l_strike_prc,
            :ptr_st_cntrct_qt->c_ctgry_indstk,
            :ptr_st_cntrct_qt->l_lst_trdd_prc,
            :c_lst_trd_dt:i_trd_tm,
            :ptr_st_cntrct_qt->l_lst_trdd_qty,
            :ptr_st_cntrct_qt->l_bst_bid_prc,
            :ptr_st_cntrct_qt->l_bst_bid_qty,
            :ptr_st_cntrct_qt->l_bst_offr_prc,
            :ptr_st_cntrct_qt->l_bst_offr_qty,
            :ptr_st_cntrct_qt->l_close_prc,
            :ptr_st_cntrct_qt->l_open_prc,
            :ptr_st_cntrct_qt->l_high_prc,
            :ptr_st_cntrct_qt->l_low_prc,
            :ptr_st_cntrct_qt->l_prev_close_prc,
            :ptr_st_cntrct_qt->l_chng_prvs_close_prc,
            :ptr_st_cntrct_qt->c_indctr,
            :ptr_st_cntrct_qt->l_high_prc_rng,
            :ptr_st_cntrct_qt->l_low_prc_rng,
            :ptr_st_cntrct_qt->l_avg_trdd_prc,
            :ptr_st_cntrct_qt->l_tot_qty_trdd,
            :ptr_st_cntrct_qt->d_tot_val_trdd,
            :ptr_st_cntrct_qt->l_base_prc,
            :ptr_st_cntrct_qt->d_crnt_oi,
            :ptr_st_cntrct_qt->d_chng_oi,
            :ptr_st_cntrct_qt->d_oi_high,
            :ptr_st_cntrct_qt->d_oi_low,
            :ptr_st_cntrct_qt->c_oi_indctr,
            :ptr_st_cntrct_qt->c_rqst_typ,
            :ptr_st_cntrct_qt->l_min_lot_qty,
            :ptr_st_cntrct_qt->l_ca_lvl,
            :ptr_st_cntrct_qt->l_eba_cntrct_id,
            :ptr_st_cntrct_qt->l_tot_val_trdd,
						:c_setlmnt_flg_new,
						:c_dlvry_pos_allwd_new,
						:c_buy_allwd_new, /*** ver 2.0 ***/
						:c_sell_allwd_new, /*** ver 2.0 ***/
            :c_mrkt_ordr_flg_new /** ver 2.1 ***/  
      FROM   FTQ_FO_TRD_QT
      WHERE  FTQ_XCHNG_CD  = :ptr_st_contract->c_xchng_cd
      AND    FTQ_PRDCT_TYP = decode(:ptr_st_contract->c_prd_typ,'P','F','U','F','I','O',:ptr_st_contract->c_prd_typ)
      AND    FTQ_UNDRLYNG  = :ptr_st_contract->c_undrlyng
      AND    FTQ_EXPRY_DT  = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
      AND    FTQ_EXER_TYP  = :ptr_st_contract->c_exrc_typ
      AND    FTQ_OPT_TYP   = :ptr_st_contract->c_opt_typ
      AND    FTQ_STRK_PRC  = :ptr_st_contract->l_strike_prc;

      if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          fn_userlog(c_ServiceName,"Invalid contract");
          strcpy(c_err_msg,"Record does not exist for selected contract.");
        }
        else
        {
          fn_userlog(c_ServiceName,"Failed To Get Trade Quotes.");
          fn_errlog( c_ServiceName, "L31015", SQLMSG, c_err_msg  );
        }
        return -1;
      }

			*c_setlmnt_flg = c_setlmnt_flg_new;
			*c_dlvry_pos_allwd = c_dlvry_pos_allwd_new;

			/*** ver 2.0 ***/
			*c_buy_allwd =  c_buy_allwd_new;
			*c_sell_allwd = c_sell_allwd_new;
			/*** ver 2.0 End ***/
     *c_mrkt_ordr_flg = c_mrkt_ordr_flg_new;  /** ver 2.1 ***/

  SETNULL ( c_exp_dt );
  SETNULL ( c_lst_trd_dt );

  strcpy ( ptr_st_cntrct_qt->c_expry_dt , ( char * ) c_exp_dt.arr );
  strcpy ( ptr_st_cntrct_qt->c_lst_trdd_time , ( char * ) c_lst_trd_dt.arr );

  return 0 ;
}

/*** Ver 1.8 Ends here ***/

/*** Ver 1.9 Starts ***/

int fn_get_qt_rws(char   *c_ServiceName,
               		struct vw_contract   *ptr_st_contract,
               		struct vw_cntrct_qt  *ptr_st_cntrct_qt,
									char	 *c_expry_dt1,
									char	 *c_expry_dt2,
               		char   *c_err_msg
             		 )
{
  varchar c_exp_dt [ LEN_DATE ];
  varchar c_lst_trd_dt [ LEN_DATE ];
  short i_trd_tm;

  if(DEBUG_MSG_LVL_3)  /*** Ver 1.5, debug changed from 0 to 3 **/
  {
    fn_userlog(c_ServiceName,"Inside fn_get_qt Function.");
  }

  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"expiry date:%s:",ptr_st_contract->c_expry_dt);
    fn_userlog(c_ServiceName,"XCHNG CODE:%s:",ptr_st_contract->c_xchng_cd);
    fn_userlog(c_ServiceName,"product type:%c:",ptr_st_contract->c_prd_typ);
    fn_userlog(c_ServiceName,"Underlyng :%s:",ptr_st_contract->c_undrlyng);
    fn_userlog(c_ServiceName,"Exercise type:%c:",ptr_st_contract->c_exrc_typ);
    fn_userlog(c_ServiceName,"Option type:%c:",ptr_st_contract->c_opt_typ);
    fn_userlog(c_ServiceName,"Strike Price:%ld:",ptr_st_contract->l_strike_prc);
  }

	EXEC SQL
    SELECT  FTQ_XCHNG_CD,
            FTQ_PRDCT_TYP,
            FTQ_UNDRLYNG,
            TO_CHAR ( FTQ_EXPRY_DT, 'dd-Mon-yyyy' ),
            FTQ_EXER_TYP,
            FTQ_OPT_TYP,
            NVL(FTQ_STRK_PRC, 0 ),
            FTQ_INDSTK,
            NVL( FTQ_LST_TRD_PRC, 0 ),
            TO_CHAR ( FTQ_LST_TRD_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
            NVL( FTQ_LST_TRD_QTY, 0 ),
            NVL( FTQ_BST1_BID_PRC, 0 ),
            NVL( FTQ_BST1_BID_QTY, 0 ),
            NVL( FTQ_BST1_OFFR_PRC, 0 ),
            NVL( FTQ_BST1_OFFR_QTY, 0 ),
            NVL( FTQ_CLS_PRC, 0 ),
            NVL( FTQ_OPN_PRC, 0 ),
            NVL( FTQ_HGH_PRC, 0 ),
            NVL( FTQ_LOW_PRC, 0 ),
            NVL( FTQ_PRVS_CLS_PRC, 0 ),
            NVL( FTQ_CHNG_PRVS_CLS, 0 ),
            NVL(FTQ_INDCTR,'+'),
            NVL( FTQ_HGH_PRC_RNG, 0 ),
            NVL( FTQ_LOW_PRC_RNG, 0 ),
            NVL( FTQ_AVRG_TRD_PRC, 0 ),
            NVL( FTQ_TOT_QTY_TRDD, 0 ),
            NVL( FTQ_TOT_VAL_TRDD, 0 ),
            NVL( FTQ_BASE_PRC, 0 ),
            NVL( FTQ_CRNT_OI, 0 ),
            NVL( FTQ_CHNG_OI, 0 ),
            NVL( FTQ_OI_HIGH, 0 ),
            NVL( FTQ_OI_LOW, 0 ),
            NVL( FTQ_OI_INDCTR, '+' ),
						'*',
            NVL( FTQ_MIN_LOT_QTY,'0'),
  					(case when NVL(ftq_qt_trdng_flg,'*') = 'T' and NVL(ftq_sltp_fp_qt_trdng_flg,'*') = 'T' then '1' else '0' end),
            NVL( ftq_hgh_trd_exec_rng, 0 ),
            NVL( ftq_low_trd_exec_rng, 0 )
      INTO  :ptr_st_cntrct_qt->c_xchng_cd,
            :ptr_st_cntrct_qt->c_prd_typ,
            :ptr_st_cntrct_qt->c_undrlyng,
            :c_exp_dt,
            :ptr_st_cntrct_qt->c_exrc_typ,
            :ptr_st_cntrct_qt->c_opt_typ,
            :ptr_st_cntrct_qt->l_strike_prc,
            :ptr_st_cntrct_qt->c_ctgry_indstk,
            :ptr_st_cntrct_qt->l_lst_trdd_prc,
            :c_lst_trd_dt:i_trd_tm,
            :ptr_st_cntrct_qt->l_lst_trdd_qty,
            :ptr_st_cntrct_qt->l_bst_bid_prc,
            :ptr_st_cntrct_qt->l_bst_bid_qty,
            :ptr_st_cntrct_qt->l_bst_offr_prc,
            :ptr_st_cntrct_qt->l_bst_offr_qty,
            :ptr_st_cntrct_qt->l_close_prc,
            :ptr_st_cntrct_qt->l_open_prc,
            :ptr_st_cntrct_qt->l_high_prc,
            :ptr_st_cntrct_qt->l_low_prc,
            :ptr_st_cntrct_qt->l_prev_close_prc,
            :ptr_st_cntrct_qt->l_chng_prvs_close_prc,
            :ptr_st_cntrct_qt->c_indctr,
            :ptr_st_cntrct_qt->l_high_prc_rng,
            :ptr_st_cntrct_qt->l_low_prc_rng,
            :ptr_st_cntrct_qt->l_avg_trdd_prc,
						:ptr_st_cntrct_qt->l_tot_qty_trdd,
            :ptr_st_cntrct_qt->d_tot_val_trdd,
            :ptr_st_cntrct_qt->l_base_prc,
            :ptr_st_cntrct_qt->d_crnt_oi,
            :ptr_st_cntrct_qt->d_chng_oi,
            :ptr_st_cntrct_qt->d_oi_high,
            :ptr_st_cntrct_qt->d_oi_low,
            :ptr_st_cntrct_qt->c_oi_indctr,
            :ptr_st_cntrct_qt->c_rqst_typ,
            :ptr_st_cntrct_qt->l_min_lot_qty,
            :ptr_st_cntrct_qt->l_ca_lvl,
            :ptr_st_cntrct_qt->l_eba_cntrct_id,
            :ptr_st_cntrct_qt->l_tot_val_trdd
      FROM   FTQ_FO_TRD_QT
      WHERE  FTQ_XCHNG_CD  = :ptr_st_contract->c_xchng_cd
      AND    FTQ_PRDCT_TYP = DECODE(:ptr_st_contract->c_prd_typ,'F','S',:ptr_st_contract->c_prd_typ)
      AND    FTQ_UNDRLYNG  = :ptr_st_contract->c_undrlyng
      AND    FTQ_EXPRY_DT  = to_date ( :c_expry_dt1,'dd-Mon-yyyy' )
      AND    FTQ_EXPRY_DT2  = to_date ( :c_expry_dt2,'dd-Mon-yyyy' )
      AND    FTQ_EXER_TYP  = :ptr_st_contract->c_exrc_typ
      AND    FTQ_OPT_TYP   = :ptr_st_contract->c_opt_typ
      AND    FTQ_STRK_PRC  = :ptr_st_contract->l_strike_prc;

			if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          fn_userlog(c_ServiceName,"Invalid contract");
          strcpy(c_err_msg,"Record does not exist for selected contract.");

        }
        else
        {
          fn_userlog(c_ServiceName,"Failed To Get Trade Quotes.");
          fn_errlog( c_ServiceName, "L31020", SQLMSG, c_err_msg  );
        }
        return -1;
      }

  SETNULL ( c_exp_dt );
  SETNULL ( c_lst_trd_dt );

  strcpy ( ptr_st_cntrct_qt->c_expry_dt , ( char * ) c_exp_dt.arr );
  strcpy ( ptr_st_cntrct_qt->c_lst_trdd_time , ( char * ) c_lst_trd_dt.arr );

	return 0 ;
}

int fn_get_quote_rws( char   *c_ServiceName,
                  		struct vw_contract   *ptr_st_contract,
                  		struct vw_cntrct_qt  *ptr_st_cntrct_qt,
                  		char   *c_setlmnt_flg,
                  		char   *c_dlvry_pos_allwd,
											char   *c_expry_dt1,
											char   *c_expry_dt2,
                  		char   *c_err_msg
                		)
{
  varchar c_exp_dt [ LEN_DATE ];
  varchar c_lst_trd_dt [ LEN_DATE ];
  short i_trd_tm;
  char c_setlmnt_flg_new = '\0';
  char c_dlvry_pos_allwd_new = '\0';

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Inside fn_get_qt Function.");
  }

  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"expiry date:%s:",ptr_st_contract->c_expry_dt);
    fn_userlog(c_ServiceName,"XCHNG CODE:%s:",ptr_st_contract->c_xchng_cd);
    fn_userlog(c_ServiceName,"product type:%c:",ptr_st_contract->c_prd_typ);
    fn_userlog(c_ServiceName,"Underlyng :%s:",ptr_st_contract->c_undrlyng);
    fn_userlog(c_ServiceName,"Exercise type:%c:",ptr_st_contract->c_exrc_typ);
    fn_userlog(c_ServiceName,"Option type:%c:",ptr_st_contract->c_opt_typ);
		fn_userlog(c_ServiceName,"Strike Price:%ld:",ptr_st_contract->l_strike_prc);
  }

  EXEC SQL
    SELECT  FTQ_XCHNG_CD,
            FTQ_PRDCT_TYP,
            FTQ_UNDRLYNG,
            TO_CHAR ( FTQ_EXPRY_DT, 'dd-Mon-yyyy' ),
            FTQ_EXER_TYP,
            FTQ_OPT_TYP,
            NVL(FTQ_STRK_PRC, 0 ),
            FTQ_INDSTK,
            NVL( FTQ_LST_TRD_PRC, 0 ),
            TO_CHAR ( FTQ_LST_TRD_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
            NVL( FTQ_LST_TRD_QTY, 0 ),
            NVL( FTQ_BST1_BID_PRC, 0 ),
            NVL( FTQ_BST1_BID_QTY, 0 ),
            NVL( FTQ_BST1_OFFR_PRC, 0 ),
            NVL( FTQ_BST1_OFFR_QTY, 0 ),
            NVL( FTQ_CLS_PRC, 0 ),
            NVL( FTQ_OPN_PRC, 0 ),
            NVL( FTQ_HGH_PRC, 0 ),
            NVL( FTQ_LOW_PRC, 0 ),
            NVL( FTQ_PRVS_CLS_PRC, 0 ),
            NVL( FTQ_CHNG_PRVS_CLS, 0 ),
            NVL(FTQ_INDCTR,'+'),
            NVL( FTQ_HGH_PRC_RNG, 0 ),
            NVL( FTQ_LOW_PRC_RNG, 0 ),
            NVL( FTQ_AVRG_TRD_PRC, 0 ),
            NVL( FTQ_TOT_QTY_TRDD, 0 ),
            NVL( FTQ_TOT_VAL_TRDD, 0 ),
            NVL( FTQ_BASE_PRC, 0 ),
            NVL( FTQ_CRNT_OI, 0 ),
            NVL( FTQ_CHNG_OI, 0 ),
            NVL( FTQ_OI_HIGH, 0 ),
            NVL( FTQ_OI_LOW, 0 ),
						NVL( FTQ_OI_INDCTR, '+' ),
            '*',
            NVL( FTQ_MIN_LOT_QTY,'0'),
            (case when NVL(ftq_qt_trdng_flg,'*') = 'T' and NVL(ftq_sltp_fp_qt_trdng_flg,'*') = 'T' then '1' else '0' end),
            NVL( ftq_hgh_trd_exec_rng, 0 ),
            NVL( ftq_low_trd_exec_rng, 0 ),
            NVL( ftq_setlmnt_flg, 'C' ),
            NVL( ftq_dlvry_pos_allwd, 'Y' )
      INTO  :ptr_st_cntrct_qt->c_xchng_cd,
            :ptr_st_cntrct_qt->c_prd_typ,
            :ptr_st_cntrct_qt->c_undrlyng,
            :c_exp_dt,
            :ptr_st_cntrct_qt->c_exrc_typ,
            :ptr_st_cntrct_qt->c_opt_typ,
            :ptr_st_cntrct_qt->l_strike_prc,
            :ptr_st_cntrct_qt->c_ctgry_indstk,
            :ptr_st_cntrct_qt->l_lst_trdd_prc,
            :c_lst_trd_dt:i_trd_tm,
            :ptr_st_cntrct_qt->l_lst_trdd_qty,
            :ptr_st_cntrct_qt->l_bst_bid_prc,
            :ptr_st_cntrct_qt->l_bst_bid_qty,
            :ptr_st_cntrct_qt->l_bst_offr_prc,
            :ptr_st_cntrct_qt->l_bst_offr_qty,
            :ptr_st_cntrct_qt->l_close_prc,
            :ptr_st_cntrct_qt->l_open_prc,
            :ptr_st_cntrct_qt->l_high_prc,
            :ptr_st_cntrct_qt->l_low_prc,
            :ptr_st_cntrct_qt->l_prev_close_prc,
            :ptr_st_cntrct_qt->l_chng_prvs_close_prc,
            :ptr_st_cntrct_qt->c_indctr,
            :ptr_st_cntrct_qt->l_high_prc_rng,
            :ptr_st_cntrct_qt->l_low_prc_rng,
            :ptr_st_cntrct_qt->l_avg_trdd_prc,
						:ptr_st_cntrct_qt->l_tot_qty_trdd,
            :ptr_st_cntrct_qt->d_tot_val_trdd,
            :ptr_st_cntrct_qt->l_base_prc,
            :ptr_st_cntrct_qt->d_crnt_oi,
            :ptr_st_cntrct_qt->d_chng_oi,
            :ptr_st_cntrct_qt->d_oi_high,
            :ptr_st_cntrct_qt->d_oi_low,
            :ptr_st_cntrct_qt->c_oi_indctr,
            :ptr_st_cntrct_qt->c_rqst_typ,
            :ptr_st_cntrct_qt->l_min_lot_qty,
            :ptr_st_cntrct_qt->l_ca_lvl,
            :ptr_st_cntrct_qt->l_eba_cntrct_id,
            :ptr_st_cntrct_qt->l_tot_val_trdd,
            :c_setlmnt_flg_new,
            :c_dlvry_pos_allwd_new
      FROM   FTQ_FO_TRD_QT
      WHERE  FTQ_XCHNG_CD  = :ptr_st_contract->c_xchng_cd
      AND    FTQ_PRDCT_TYP = DECODE(:ptr_st_contract->c_prd_typ,'F','S',:ptr_st_contract->c_prd_typ)
      AND    FTQ_UNDRLYNG  = :ptr_st_contract->c_undrlyng
      AND    FTQ_EXPRY_DT  = to_date ( :c_expry_dt1,'dd-Mon-yyyy' )
      AND    FTQ_EXPRY_DT2  = to_date ( :c_expry_dt2,'dd-Mon-yyyy' )
      AND    FTQ_EXER_TYP  = :ptr_st_contract->c_exrc_typ
      AND    FTQ_OPT_TYP   = :ptr_st_contract->c_opt_typ
      AND    FTQ_STRK_PRC  = :ptr_st_contract->l_strike_prc;

      if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          fn_userlog(c_ServiceName,"Invalid contract");
          strcpy(c_err_msg,"Record does not exist for selected contract.");
        }
				else
        {
          fn_userlog(c_ServiceName,"Failed To Get Trade Quotes.");
          fn_errlog( c_ServiceName, "L31025", SQLMSG, c_err_msg  );
        }
        return -1;
      }

      *c_setlmnt_flg = c_setlmnt_flg_new;
      *c_dlvry_pos_allwd = c_dlvry_pos_allwd_new;

  SETNULL ( c_exp_dt );
  SETNULL ( c_lst_trd_dt );

  strcpy ( ptr_st_cntrct_qt->c_expry_dt , ( char * ) c_exp_dt.arr );
  strcpy ( ptr_st_cntrct_qt->c_lst_trdd_time , ( char * ) c_lst_trd_dt.arr );

  return 0 ;
}

/*** Ver 1.9 Ends ***/
