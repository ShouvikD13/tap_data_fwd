/*******************************************************************************/
/*  Program           : FO_BSE_RCV_LIB                                         */
/*                                                                             */
/*  Input             :                                                        */
/*                                                                             */
/*  Output            :                                                        */
/*                                                                             */
/*  Description       :                                                        */
/*                                                                             */
/*  Log               : 1.0   19-Jan-2012     Sandeep Patil                    */
/*  Log               : 1.1   18-Jul-2012     Sandeep Patil                    */
/*	Log								:	1.2		14-Feb-2013			Sandeep Patil										 */
/*  Log               : 1.3   18-Dec-2012     Navina D.                        */
/*  Log               : 1.4   05-Feb-2013     Sandeep Patil                    */
/*  Log               : 1.5   19-Sep-2013     Swati A.B                        */
/*  Log               : 1.6   06-Feb-2014     Sandip Tambe                     */
/*	Log								: 1.7   27-Jun-2014     Bhushan Sonwane									 */
/*  Log               : 1.8   13-Jan-2015     Sandeep Patil                    */
/*  Log               : 1.9   03-Jul-2015     Ritesh Deolekar                  */
/*  Log               : 2.1   20-Jun-2016     Sachin Birje                     */
/*  Log               : 2.2   07-Mar-2023     Sachin Birje                     */
/*  Log               : TOL   04-Aug-2023     Agam                             */
/*******************************************************************************/
/*  Version 1.0 - New Release with modified SLTP structure (28-Jun-2012)       */
/*	Version	1.1	-	SLTP Modification Handling In Case Of Download							 */
/*	Version 1.2	- SLTP To Limit Conversion & Market To Limit Conversion Changes*/
/*  Version 1.3 - SLTP FuturePLUS handling                                     */
/*  Version 1.4 - Cancel UMS Handling                                          */
/*  Version 1.5 - OptionPLUS Handling                                          */
/*  Version 1.6 - BSE NEW IML for EQ Derivative changes                        */
/*  Version 1.7 - Display SLTP Remark With Time																 */
/*  Version 1.8 - New Error Message introduced for Self Trade in 3233 Response */
/*  Version 1.9 - Contract Master & Trade Quote Merger Changes.                */
/*  Version 2.1 - Trade time and process time update                           */
/*  Version 2.2 - Minor Change Client Lock Changes                             */
/*  Version TOL - Tux on Linux                                                 */
/*******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>
#include <brd_cln_srvr.h>
#include <fn_scklib_tap.h>
#include <time.h>

#include <atmi.h>
#include <fml32.h>
#include <Usysflds.h>

#include <sqlca.h>

#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fo.h>
#include <fn_env.h>
#include <fn_tuxlib.h>
#include <fn_fil_log.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fml_rout.h>
#include <userlog.h>
#include <fn_session.h>
#include <fn_fo_bse_convrtn.h>
#include <fo_bse_rcv_lib.h>
#include <fn_read_debug_lvl.h>
#include <eba_to_ors.h>        /* Added in Ver TOL */

# define LEN_ORD_REFACK 30     /* Added in Ver TOL */

int fn_Bref_to_ord	(	struct vw_orderbook *ptr_st_orderbook,
                  		char *c_ServiceName,
                  		char *c_err_msg
										);

int fn_Bseq_to_omd	(	struct vw_xchngbook *ptr_st_xchngbook,
                  		char *c_ServiceName,
                  		char *c_err_msg
										);

int fn_Bref_to_omd  ( struct vw_xchngbook *ptr_st_xchngbook,      /***  Ver 1.4 ***/
                      char *c_ServiceName,
                      char *c_err_msg
                    );

int fn_Bupd_xchngbk	( struct vw_xchngbook *ptr_st_xchngbook,
                    	char *c_ServiceName,
                    	char *c_err_msg
										);

int fn_Bupd_ordrbk	(	struct vw_orderbook *ptr_st_orderbook,
                  		char *c_ServiceName,
                  		char *c_err_msg
										);

int fn_Back_to_ord	( struct vw_orderbook *ptr_st_orderbook,
                    	char *c_ServiceName,
                    	char *c_usr_id,                  
                    	char *c_err_msg
										);

int fn_Bupd_trdbk	( char *c_ServiceName,     
                   	char *c_err_msg,
                   	char *c_usr_id,
                   	struct vw_tradebook *ptr_st_i_trdbk
									);

int fn_Bac_to_ord ( char *c_ServiceName,    
                    char *c_err_msg,
                    char *c_usr_id,
                    struct vw_orderbook *ptr_st_orderbook
                 	);

int fn_conv_iwtl_pos ( struct vw_orderbook *ptr_st_orderbook,
                       long l_new_rate,  
                       char *c_ServiceName,
                       char *c_err_msg
                    );

int  fn_rej_ord  ( struct vw_xchngbook  st_xchngbook ,			/***	Ver	1.4	***/
                   char   c_prdct_typ,
                   char   *c_ServiceName,
                   char   *c_err_msg
                 );

char c_upd_modifctn_cntr ;			

int fn_bse_ord_confirmation ( struct st_ord_rqst_rply *ptr_ord_rply,
                              char   *c_xchng_cd,
                              char   *c_pipe_id,
                              char   *c_rout_str,
                              char   *c_trd_dt,
                              char   *c_skpord_ref,
                              int    i_dwnld_flg,
                              char   *c_ServiceName,
                              char   *c_err_msg
                            )

{

	char c_ordr_rfrnc [19];
  char c_xchng_rmrks[256];

  char c_ordr_actn_cd ;

  int i_ch_val;

  long l_xchng_can_qty;

  struct vw_xchngbook st_i_xchngbk;

  MEMSET(st_i_xchngbk);
  MEMSET(c_xchng_rmrks);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Inside Function fn_ord_cnfrmtn");
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"I/P Exchange Code Is :%s:",c_xchng_cd);
    fn_userlog(c_ServiceName,"I/P Pipe ID Is :%s:",c_pipe_id);
    fn_userlog(c_ServiceName,"I/P Trade Date :%s:",c_trd_dt);
  }

  strcpy(st_i_xchngbk.c_xchng_cd,c_xchng_cd);
  strcpy(st_i_xchngbk.c_pipe_id,c_pipe_id);
  strcpy(st_i_xchngbk.c_mod_trd_dt,c_trd_dt);

  st_i_xchngbk.l_ord_seq  = fn_swap_long(ptr_ord_rply->l_msg_tag1);
  ptr_ord_rply->s_rply_cd = fn_swap_short(ptr_ord_rply->s_rply_cd);
  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Sequence Number Is :%ld:",st_i_xchngbk.l_ord_seq);
  }

  st_i_xchngbk.c_oprn_typ = FOR_RCV;

	i_ch_val = fn_Bseq_to_omd (&st_i_xchngbk,c_ServiceName,c_err_msg);

  if ( i_ch_val != 0 )
  {
    fn_errlog(c_ServiceName,"L31005", LIBMSG, c_err_msg);
    return -1;
  }

  strcpy(c_ordr_rfrnc,st_i_xchngbk.c_ordr_rfrnc);
	
	if ( i_dwnld_flg == DOWNLOAD  )
  {
    fn_userlog(c_ServiceName,"BSE Inside Download Case.");

    if (  st_i_xchngbk.c_req_typ  ==  'N' )
    {
      c_ordr_actn_cd  = ADD_LMTMRKT_ORDR;
    }
    else if ( st_i_xchngbk.c_req_typ  ==  'M')
    {
      c_ordr_actn_cd  = UPD_LMTMRKT_ORDR;

    }
    else if ( st_i_xchngbk.c_req_typ  ==  'C')
    {
      c_ordr_actn_cd  = DEL_LMTMRKT_ORDR  ;

    }

  }
  else
  {
    c_ordr_actn_cd  = ptr_ord_rply->c_ordr_actn_cd  ;
  }

	if( ptr_ord_rply->s_rply_cd > 0 )
  {
    fn_userlog(c_ServiceName,"Inside Order Confirmation Reply Code Is :%d:",ptr_ord_rply->s_rply_cd);
    fn_userlog(c_ServiceName,"Inside Order Confirmation Action Code Is :%c:", ptr_ord_rply->c_ordr_actn_cd);

    c_ordr_actn_cd  = ORDER_EXCH_REJCTN;

    fn_userlog(c_ServiceName,"Inside Order Confirmation Action Code Is :%c:", ptr_ord_rply->c_ordr_actn_cd);

  }

	switch(c_ordr_actn_cd)
	{
		case ADD_LMTMRKT_ORDR :
    case UPD_LMTMRKT_ORDR :
    case DEL_LMTMRKT_ORDR :

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"Inside ORDER ACCEPT/REJECT Case");
      }

      if ( i_dwnld_flg == DOWNLOAD && (strcmp(st_i_xchngbk.c_ordr_rfrnc,c_skpord_ref) == 0) )
      {
        break;
      }

      i_ch_val = fn_bseord_acpt ( ptr_ord_rply,
                                  c_ordr_actn_cd,
                                  c_xchng_cd,
                                  c_pipe_id,
                                  c_rout_str,
                                  c_trd_dt,
                                  c_ordr_rfrnc,
                                  i_dwnld_flg,
                                  c_ServiceName,
                                  c_err_msg
                                );

      if (i_ch_val == -1)
      {
        fn_userlog(c_ServiceName,"Failed While Calling Function fn_bseord_acpt.");
        return -1;
      }

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"After Successful Call To fn_bseord_acpt.");
      }

    break;

		 case ORDER_EXCH_REJCTN :


       i_ch_val = fn_bseord_acpt ( ptr_ord_rply,
                                  c_ordr_actn_cd,
                                  c_xchng_cd,
                                  c_pipe_id,
                                  c_rout_str,
                                  c_trd_dt,
                                  c_ordr_rfrnc,
                                  i_dwnld_flg,
                                  c_ServiceName,
                                  c_err_msg
                                );

      if (i_ch_val == -1)
      {
        fn_userlog(c_ServiceName,"Failed While Calling Function fn_bseord_acpt.");
        return -1;
      }

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"After Successful Call To fn_bseord_acpt For ORDER_EXCH_REJCTN.");
      }


    break;

    default :

     fn_userlog( c_ServiceName, "Protocol error %c",ptr_ord_rply->c_ordr_actn_cd );
     break;

	}

	return 0 ;

}

int fn_bseord_acpt  ( struct st_ord_rqst_rply *ptr_ord_rply,
                      char c_ordr_actn_cd,
                      char *c_xchng_cd,
                      char *c_pipe_id,
                      char *c_rout_str,
                      char *c_trd_dt,
                      char *c_ordr_rfrnc,
                      int  i_dwnld_flg,
                      char *c_ServiceName,
                      char *c_err_msg)
{
	struct vw_xchngbook st_i_xchngbk;
 	struct vw_orderbook st_i_ordrbk;
  struct st_sltp_ord_ums st_sltp_ord_ums_data;
  struct st_mkrt_to_lmt_ord st_mkrt_to_lmt_ord_data;

 	char c_tmp[8];
 	char c_svc_name[15+1];
 	char c_xchng_rmrks[256];
 	char c_mtch_accnt[11];
 	char c_xchng_err_msg[256];
 	char c_spn_allwd_flg;
  char c_skpord_ref[18 + 1];

 	int i_ch_val;
 	int i_trnsctn;
  int i_sltp_rtrn;
  int i_ret_val;

 	long int li_ors_msg_typ;
 	long long ll_log_tm_stmp;
  long long  l_ack_nmbr;
  long l_seqnc_no;
  long l_fxd_lmt_rt;

 	if(DEBUG_MSG_LVL_0)
 	{
   	fn_userlog(c_ServiceName,"Inside fn_ord_acpt_rjct Function");
 	}

 	MEMSET(st_i_xchngbk);
 	MEMSET(st_i_ordrbk);
 	MEMSET(c_xchng_rmrks);
 	MEMSET(c_xchng_err_msg);

 	strcpy ( st_i_ordrbk.c_ordr_rfrnc ,c_ordr_rfrnc);

 	if(DEBUG_MSG_LVL_0)
 	{
   	fn_userlog(c_ServiceName,"Order Reference Is :%s:",st_i_ordrbk.c_ordr_rfrnc);
 	}

	switch(c_ordr_actn_cd)
	{
		 case  ADD_LMTMRKT_ORDR  :

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"BSE - Inside ADD_LMTMRKT_ORDR Case");
      }

      fn_tmstmp_dmyhms_to_arr(ptr_ord_rply->st_tmstmp_dmyhms,st_i_xchngbk.c_ack_tm);
      strcpy(st_i_xchngbk.c_entry_dt_tm,st_i_xchngbk.c_ack_tm);

      fn_userlog(c_ServiceName,"BSE Exchange Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);


      st_i_xchngbk.l_ors_msg_typ = ORS_NEW_ORD_ACPT;

    break;


    case  UPD_LMTMRKT_ORDR  :

      st_i_xchngbk.l_ors_msg_typ = ORS_MOD_ORD_ACPT ;

      fn_tmstmp_dmyhms_to_arr(ptr_ord_rply->st_tmstmp_dmyhms,st_i_xchngbk.c_ack_tm);

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Message Type Is :%ld:",st_i_xchngbk.l_ors_msg_typ);
        fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
      }

    break;

	 case DEL_LMTMRKT_ORDR  :

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName," BSE ORDER CANCEL Case");
      }

      st_i_xchngbk.l_ors_msg_typ =  ORS_CAN_ORD_ACPT;

      fn_tmstmp_dmyhms_to_arr(ptr_ord_rply->st_tmstmp_dmyhms,st_i_xchngbk.c_ack_tm);

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Message Type Is :%ld:",st_i_xchngbk.l_ors_msg_typ);
        fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
      }

    break;

		case ORDER_EXCH_REJCTN :

      if ( ptr_ord_rply->c_ordr_actn_cd == ADD_LMTMRKT_ORDR )
      {
        fn_userlog(c_ServiceName,"BSE Order Rejection Case For New Order Request.");

        fn_tmstmp_dmyhms_to_arr(ptr_ord_rply->st_tmstmp_dmyhms,st_i_xchngbk.c_ack_tm);

        strcpy(st_i_xchngbk.c_entry_dt_tm,st_i_xchngbk.c_ack_tm);

        st_i_xchngbk.l_ors_msg_typ = ORS_NEW_ORD_RJCT;

      }
      else if (  ptr_ord_rply->c_ordr_actn_cd ==  UPD_LMTMRKT_ORDR  )
      {
        fn_userlog(c_ServiceName,"BSE Order Rejection Case For Order modification Request.");

        st_i_xchngbk.l_ors_msg_typ = ORS_MOD_ORD_RJCT ;

        fn_tmstmp_dmyhms_to_arr(ptr_ord_rply->st_tmstmp_dmyhms,st_i_xchngbk.c_ack_tm);

      }
      else if ( ptr_ord_rply->c_ordr_actn_cd == DEL_LMTMRKT_ORDR  )
      {
        fn_userlog(c_ServiceName,"BSE Order Rejection Case For Order Cancellation Request.");

        st_i_xchngbk.l_ors_msg_typ = ORS_CAN_ORD_RJCT;

        fn_tmstmp_dmyhms_to_arr(ptr_ord_rply->st_tmstmp_dmyhms,st_i_xchngbk.c_ack_tm);

      }

      strcpy(c_xchng_rmrks,ptr_ord_rply->c_rply_txt);

      fn_userlog(c_ServiceName,"BSE Exchange Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
      fn_userlog(c_ServiceName,"BSE Exchange ORS MSG Typ Is :%ld:",st_i_xchngbk.l_ors_msg_typ);
      fn_userlog(c_ServiceName,"BSE Exchange Reply Msg Is :%s:",c_xchng_rmrks);


    break;

		default :

      fn_userlog(c_ServiceName, "Protocol error %d", ptr_ord_rply->c_ordr_actn_cd);
      break;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_ordrbk.c_rout_crt,c_rout_str);

	
  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName, "Before Call To SFO_REF_TO_ORD");
  }

  st_i_ordrbk.c_oprn_typ = FOR_VIEW;

	i_ch_val = fn_Bref_to_ord (&st_i_ordrbk,c_ServiceName,c_err_msg);

  if ( i_ch_val != 0)
  {
    fn_errlog(c_ServiceName,"L31010", LIBMSG, c_err_msg);
    return -1;
  }

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Order Reference Is :%s:",st_i_ordrbk.c_ordr_rfrnc);
    fn_userlog(c_ServiceName,"Modification Counter Is :%ld:", st_i_ordrbk.l_mdfctn_cntr);
    fn_userlog(c_ServiceName,"Exchange Code Is :%s:",st_i_ordrbk.c_xchng_cd);
    fn_userlog(c_ServiceName,"Pipe ID Is :%s:",st_i_ordrbk.c_pipe_id);
    fn_userlog(c_ServiceName,"Match Account Is :%s:",st_i_ordrbk.c_cln_mtch_accnt);
  }
	
	strcpy ( st_i_xchngbk.c_ordr_rfrnc, st_i_ordrbk.c_ordr_rfrnc );
  st_i_xchngbk.l_mdfctn_cntr = st_i_ordrbk.l_mdfctn_cntr;
  strcpy ( st_i_xchngbk.c_xchng_cd, st_i_ordrbk.c_xchng_cd );
  strcpy ( st_i_xchngbk.c_pipe_id, st_i_ordrbk.c_pipe_id );
  strcpy(c_mtch_accnt, st_i_ordrbk.c_cln_mtch_accnt);

	/*** if ( st_i_ordrbk.c_prd_typ == FUTURES || st_i_ordrbk.c_prd_typ	== FUTURE_PLUS ) *** Commented in Ver 1.3 ***/
	if ( st_i_ordrbk.c_prd_typ == FUTURES || st_i_ordrbk.c_prd_typ	== FUTURE_PLUS || st_i_ordrbk.c_prd_typ	== SLTP_FUTUREPLUS ) /*** Ver 1.3 ***/
  {
    strcpy( c_svc_name , "SFO_FUT_ACK" );
  }
  else
  {
    strcpy( c_svc_name , "SFO_OPT_ACK" );
  }

  switch (st_i_xchngbk.l_ors_msg_typ)
  {
    case  ORS_NEW_ORD_ACPT :
    case  ORS_MOD_ORD_ACPT :
    case  ORS_CAN_ORD_ACPT :

      st_i_xchngbk.c_plcd_stts = ACCEPT;
    break;

    case  ORS_NEW_ORD_RJCT :
    case  ORS_MOD_ORD_RJCT :
    case  ORS_CAN_ORD_RJCT :

      st_i_xchngbk.c_plcd_stts = REJECT;
    break;
  }

  st_i_xchngbk.c_rms_prcsd_flg = NOT_PROCESSED;
  strcpy ( st_i_xchngbk.c_xchng_rmrks ,c_xchng_rmrks );
	st_i_xchngbk.l_ord_seq =  fn_swap_long(ptr_ord_rply->l_msg_tag1);

  EXEC SQL
    SELECT  BSE_EBA_JIFFY.nextval
    INTO    :st_i_xchngbk.d_jiffy
    FROM    DUAL;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName,"L31015", SQLMSG, c_err_msg);
    return -1;
  }


  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Sequence Number Is :%ld:",st_i_xchngbk.l_ord_seq);
    fn_userlog(c_ServiceName,"Jiffy Is :%lf:",st_i_xchngbk.d_jiffy);
  }

  st_i_xchngbk.l_dwnld_flg = i_dwnld_flg;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Down Load Flag Is :%ld:",st_i_xchngbk.l_dwnld_flg);
  }

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_xchngbk.c_rout_crt,c_rout_str);
	
	st_i_xchngbk.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;

  st_i_xchngbk.l_bit_flg  = 0 ;       /***  Stream No. Hard Coded To 0 ***/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Before Call To SFO_UPD_XCHNGBK");
  }

  i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1)
  {
    fn_errlog(c_ServiceName,"L31020", LIBMSG, c_err_msg);
    return -1;
  }

	i_ch_val = fn_Bupd_xchngbk(&st_i_xchngbk,c_ServiceName,c_err_msg);

  if( ( i_ch_val != 0) && ( i_ch_val != RECORD_ALREADY_PRCSD ) )
  {
    fn_errlog(c_ServiceName,"L31025", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }
  else if ( i_ch_val == RECORD_ALREADY_PRCSD )
  {
    if(DEBUG_MSG_LVL_3)
    {
     fn_userlog ( c_ServiceName, "Record already processed" );
     fn_userlog ( c_ServiceName, " ptr_ord_rply->l_msg_typ :%ld:",ptr_ord_rply->l_msg_typ);
     fn_userlog ( c_ServiceName, " st_i_ordrbk.c_slm_flg :%c:",st_i_ordrbk.c_slm_flg);
     fn_userlog ( c_ServiceName, " st_i_ordrbk.l_stp_lss_tgr :%ld:",st_i_ordrbk.l_stp_lss_tgr);
    }

    /***** Process the trigger of an SLTP order *****/
    if( ( ptr_ord_rply->l_msg_typ == PRSNL_ORDR_DWNLD || ptr_ord_rply->l_msg_typ == PRSNL_TRD_DWNLD ) && 
        ( st_i_ordrbk.c_slm_flg == 'S'  || st_i_ordrbk.l_stp_lss_tgr > 0 )
      )
    {
      st_sltp_ord_ums_data.ll_ordr_id                       = ptr_ord_rply->ll_ord_id;
      st_sltp_ord_ums_data.l_msg_tag                        = ptr_ord_rply->l_msg_tag1;
      st_sltp_ord_ums_data.st_timestamp_dmyhms.c_year       = ptr_ord_rply->st_tmstmp_dmyhms.c_year;
      st_sltp_ord_ums_data.st_timestamp_dmyhms.c_month      = ptr_ord_rply->st_tmstmp_dmyhms.c_month;
      st_sltp_ord_ums_data.st_timestamp_dmyhms.c_day        = ptr_ord_rply->st_tmstmp_dmyhms.c_day;
      st_sltp_ord_ums_data.st_timestamp_dmyhms.c_hour       = ptr_ord_rply->st_tmstmp_dmyhms.c_hour;
      st_sltp_ord_ums_data.st_timestamp_dmyhms.c_min        = ptr_ord_rply->st_tmstmp_dmyhms.c_min;
      st_sltp_ord_ums_data.st_timestamp_dmyhms.c_sec        = ptr_ord_rply->st_tmstmp_dmyhms.c_sec;

      i_sltp_rtrn =  fn_bsesltp_trggrd  ( &st_sltp_ord_ums_data,
                                          c_xchng_cd,
                                          c_pipe_id,
                                          c_rout_str,
                                          c_trd_dt,
                                          TRIGGERED,
                                          c_ServiceName,
                                          i_dwnld_flg,
                                          c_err_msg
                                        );

      if ( i_sltp_rtrn  != 0 )
      {
        fn_errlog(c_ServiceName,"L31030", LIBMSG, c_err_msg);
        return -1;
      }

       fn_userlog(c_ServiceName,"BSE After Successfull SLTP Trigger processing in Download.");
 
    }
    
    i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);

    if ( i_ch_val == -1 )
    {
     fn_errlog(c_ServiceName,"L31035", LIBMSG, c_err_msg);
     return -1;
    }
    return 0;
  }

	l_ack_nmbr =  fn_swap_ulnglng(ptr_ord_rply->ll_ord_id);

  sprintf( st_i_ordrbk.c_xchng_ack,"%lld",l_ack_nmbr);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Exchange Ack Is :%lld:",l_ack_nmbr);
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
    fn_userlog(c_ServiceName,"Order Book Exchange Ack Is :%s:",st_i_ordrbk.c_xchng_ack);
  }

  strcpy(st_i_ordrbk.c_rout_crt,c_rout_str);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Before Call To SFO_UPD_ORDRBK");
  }

  st_i_ordrbk.c_oprn_typ = UPDATE_XCHNG_RESPONSE;

	i_ch_val = fn_Bupd_ordrbk (&st_i_ordrbk,c_ServiceName,c_err_msg);

  if ( i_ch_val != 0)
  {
    fn_errlog(c_ServiceName,"L31040", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }

	i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);

  if ( i_ch_val == -1 )
  {
    fn_errlog(c_ServiceName,"L31045", LIBMSG, c_err_msg);
    return -1;
  }

	strcpy(st_i_xchngbk.c_rout_crt,c_rout_str);

	i_ch_val = fn_acall_svc ( c_ServiceName,
                             c_err_msg,
                             &st_i_xchngbk,
                             "vw_xchngbook",
                             sizeof ( st_i_xchngbk ),
                             TPNOREPLY,
                             c_svc_name );
  if ( i_ch_val != 0 )
  {
    fn_errlog(c_ServiceName,"L31050", LIBMSG, c_err_msg);
    return -1;
  }

  /***** Process the trigger of an SLTP order *****/
  if(DEBUG_MSG_LVL_3)
  {
   fn_userlog ( c_ServiceName, "After call to Fut Ack Opt Ack" );
   fn_userlog ( c_ServiceName, " ptr_ord_rply->l_msg_typ :%ld:",ptr_ord_rply->l_msg_typ);
   fn_userlog ( c_ServiceName, " st_i_ordrbk.c_slm_flg :%c:",st_i_ordrbk.c_slm_flg);
   fn_userlog ( c_ServiceName, " st_i_ordrbk.l_stp_lss_tgr :%ld:",st_i_ordrbk.l_stp_lss_tgr);
  }

  if( ( ptr_ord_rply->l_msg_typ == PRSNL_ORDR_DWNLD || ptr_ord_rply->l_msg_typ == PRSNL_TRD_DWNLD ) &&  
      ( st_i_ordrbk.c_slm_flg == 'S'   || st_i_ordrbk.l_stp_lss_tgr > 0 )
    )
  {
    fn_userlog(c_ServiceName,"Trigger processing in PRSNL_ORDR_DWNLD for SLTP ");
    st_sltp_ord_ums_data.ll_ordr_id                       = ptr_ord_rply->ll_ord_id;
    st_sltp_ord_ums_data.l_msg_tag                        = ptr_ord_rply->l_msg_tag1;
    st_sltp_ord_ums_data.st_timestamp_dmyhms.c_year       = ptr_ord_rply->st_tmstmp_dmyhms.c_year;
    st_sltp_ord_ums_data.st_timestamp_dmyhms.c_month      = ptr_ord_rply->st_tmstmp_dmyhms.c_month;
    st_sltp_ord_ums_data.st_timestamp_dmyhms.c_day        = ptr_ord_rply->st_tmstmp_dmyhms.c_day;
    st_sltp_ord_ums_data.st_timestamp_dmyhms.c_hour       = ptr_ord_rply->st_tmstmp_dmyhms.c_hour;
    st_sltp_ord_ums_data.st_timestamp_dmyhms.c_min        = ptr_ord_rply->st_tmstmp_dmyhms.c_min;
    st_sltp_ord_ums_data.st_timestamp_dmyhms.c_sec        = ptr_ord_rply->st_tmstmp_dmyhms.c_sec;

    sleep(3);  /*** bcoz , it was giving  deadlock detected while waiting for resource in SFO PRCS_RESP" ***/

    i_sltp_rtrn =  fn_bsesltp_trggrd  ( &st_sltp_ord_ums_data,
                                        c_xchng_cd,
                                        c_pipe_id,
                                        c_rout_str,
                                        c_trd_dt,
                                        TRIGGERED,
                                        c_ServiceName,
                                        i_dwnld_flg,
                                        c_err_msg
                                      );

    if ( i_sltp_rtrn  != 0 )
    {
      fn_errlog(c_ServiceName,"L31055", LIBMSG, c_err_msg);
      return -1;
    }

     fn_userlog(c_ServiceName,"BSE After Successfull SLTP Trigger processing in Download.");

  }
  
	fn_userlog(c_ServiceName,"After Complition Of fn_ord_acpt_rjct");

	return 0;

}

int fn_bse_ioc_confirmation ( struct st_del_ord_rply  *ptr_ioc_rply,
                              char   *c_xchng_cd,
                              char   *c_pipe_id,
                              char   *c_rout_str,
                              char   *c_trd_dt,
                              char   *c_skpord_ref,
                              int    i_dwnld_flg,
                              char   *c_ServiceName,
                              char   *c_err_msg
                            )
{

	char c_ordr_rfrnc [19];
  char c_xchng_rmrks[256];
  char c_svc_name[15+1];
  char c_tmp[8];
  char c_mtch_accnt[11];
  char c_xchng_err_msg[256];
  char c_ordr_actn_cd ;

  int i_ch_val;
  int i_trnsctn;
  int i;
  int i_err  [6];
  int i_ferr [6];

  long int li_ors_msg_typ;
  long l_xchng_can_qty;
  long l_msg_typ;

  long long l_ack_nmbr;

	struct vw_xchngbook st_i_xchngbk;
  struct vw_orderbook st_i_ordrbk;

  MEMSET(st_i_xchngbk);
  MEMSET(c_xchng_rmrks);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Inside Function fn_ioc_cnfrmtn");
  }

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"I/P Exchange Code Is :%s:",c_xchng_cd);
    fn_userlog(c_ServiceName,"I/P Pipe ID Is :%s:",c_pipe_id);
    fn_userlog(c_ServiceName,"I/P Trade Date :%s:",c_trd_dt);
  }

  strcpy(st_i_xchngbk.c_xchng_cd,c_xchng_cd);
  strcpy(st_i_xchngbk.c_pipe_id,c_pipe_id);
  strcpy(st_i_xchngbk.c_mod_trd_dt,c_trd_dt);
  st_i_xchngbk.l_ord_seq = fn_swap_long(ptr_ioc_rply->l_msg_tag);
  ptr_ioc_rply->s_rply_cd = fn_swap_short(ptr_ioc_rply->s_rply_cd);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Sequence Number Is :%ld:",st_i_xchngbk.l_ord_seq);
  }

  st_i_xchngbk.c_oprn_typ = FOR_RCV;

	i_ch_val = fn_Bseq_to_omd	( &st_i_xchngbk,
                              c_ServiceName,
                              c_err_msg
                            );


  if ( i_ch_val != 0 )
  {
    fn_errlog(c_ServiceName,"L31060", LIBMSG, c_err_msg);
    return -1;
  }

	MEMSET(st_i_ordrbk);
  MEMSET(c_xchng_err_msg);

  strcpy ( st_i_ordrbk.c_ordr_rfrnc , st_i_xchngbk.c_ordr_rfrnc);


  if( ptr_ioc_rply->s_rply_cd > 0 )
  {
    fn_userlog(c_ServiceName,"Inside Order Confirmation Reply Code Is :%d:",ptr_ioc_rply->s_rply_cd);

    c_ordr_actn_cd  = ORDER_EXCH_REJCTN;

    fn_userlog(c_ServiceName,"Inside Order Confirmation Action Code Is :%c:", c_ordr_actn_cd);

  }
  else
  {
    l_msg_typ = fn_swap_long(ptr_ioc_rply->l_msg_typ);

    fn_userlog(c_ServiceName,"BSE IOC MSG TYP IS :%ld:",l_msg_typ);

    c_ordr_actn_cd  = IOC_BUYSELL_ORDER;

  }

  fn_userlog(c_ServiceName,"BSE ACTION CODE IS :%c:",c_ordr_actn_cd);

	switch(c_ordr_actn_cd)
  {
    case  IOC_BUYSELL_ORDER :

      fn_userlog(c_ServiceName,"BSE IOC ADD_IOC_BUY_ORDR / ADD_IOC_SELL_ORDR .");
			
			if ( st_i_xchngbk.c_req_typ == 'M' )	
			{
				fn_userlog(c_ServiceName,"BSE Modification IOC Response.");
				st_i_xchngbk.l_ors_msg_typ = ORS_MOD_ORD_ACPT;
			}
			else
			{
      	st_i_xchngbk.l_ors_msg_typ = ORS_NEW_ORD_ACPT;
			}

    break;

    case ORDER_EXCH_REJCTN  :

      st_i_xchngbk.l_ors_msg_typ  = ORS_NEW_ORD_RJCT;

    break ;

  }

  fn_userlog(c_ServiceName,"BSE st_i_xchngbk.l_ors_msg_typ Is :%ld:",st_i_xchngbk.l_ors_msg_typ);

  fn_tmstmp_dmyhms_to_arr(ptr_ioc_rply->st_timestmp_dmyhms,st_i_xchngbk.c_ack_tm);
  strcpy(st_i_xchngbk.c_entry_dt_tm,st_i_xchngbk.c_ack_tm);

  fn_userlog(c_ServiceName,"BSE Exchange Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_ordrbk.c_rout_crt,c_rout_str);

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName, "Before Call To SFO_REF_TO_ORD");
  }

  st_i_ordrbk.c_oprn_typ = FOR_VIEW;

	i_ch_val = fn_Bref_to_ord	( &st_i_ordrbk,
                              c_ServiceName,
                              c_err_msg
                            );

  if ( i_ch_val != 0)
  {
    fn_errlog(c_ServiceName,"L31065", LIBMSG, c_err_msg);
    return -1;
  }

  if(DEBUG_MSG_LVL_3)
  {

    fn_userlog(c_ServiceName,"Order Reference Is :%s:",st_i_ordrbk.c_ordr_rfrnc);
    fn_userlog(c_ServiceName,"Modification Counter Is :%ld:", st_i_ordrbk.l_mdfctn_cntr);
    fn_userlog(c_ServiceName,"Exchange Code Is :%s:",st_i_ordrbk.c_xchng_cd);
    fn_userlog(c_ServiceName,"Pipe ID Is :%s:",st_i_ordrbk.c_pipe_id);
    fn_userlog(c_ServiceName,"Match Account Is :%s:",st_i_ordrbk.c_cln_mtch_accnt);
  }
	
	strcpy ( st_i_xchngbk.c_ordr_rfrnc, st_i_ordrbk.c_ordr_rfrnc );
  st_i_xchngbk.l_mdfctn_cntr = st_i_ordrbk.l_mdfctn_cntr;
  strcpy ( st_i_xchngbk.c_xchng_cd, st_i_ordrbk.c_xchng_cd );
  strcpy ( st_i_xchngbk.c_pipe_id, st_i_ordrbk.c_pipe_id );
  strcpy(c_mtch_accnt, st_i_ordrbk.c_cln_mtch_accnt);

	/*** if ( st_i_ordrbk.c_prd_typ == FUTURES || st_i_ordrbk.c_prd_typ	==	FUTURE_PLUS	)  *** Commented in ver 1.3 ***/
	if ( st_i_ordrbk.c_prd_typ == FUTURES || st_i_ordrbk.c_prd_typ	==	FUTURE_PLUS || st_i_ordrbk.c_prd_typ	==	SLTP_FUTUREPLUS	)	/*** Ver 1.3 ***/
	{
		strcpy( c_svc_name , "SFO_FUT_ACK" );
	}
	else
	{
		strcpy( c_svc_name , "SFO_OPT_ACK" );
	}

	

  switch(c_ordr_actn_cd)
  {
		case  IOC_BUYSELL_ORDER :

      st_i_xchngbk.c_plcd_stts = ACCEPT;

    break;

    case ORDER_EXCH_REJCTN  :

      st_i_xchngbk.c_plcd_stts = REJECT;

    break ;

  }

  st_i_xchngbk.c_rms_prcsd_flg = NOT_PROCESSED;
  strcpy ( st_i_xchngbk.c_xchng_rmrks ,c_xchng_rmrks );

  st_i_xchngbk.l_ord_seq =  fn_swap_long(ptr_ioc_rply->l_msg_tag);

	 EXEC SQL
    SELECT  BSE_EBA_JIFFY.nextval
    INTO    :st_i_xchngbk.d_jiffy
    FROM    DUAL;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName,"L31070", SQLMSG, c_err_msg);
    return -1;
  }


  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Sequence Number Is :%ld:",st_i_xchngbk.l_ord_seq);
    fn_userlog(c_ServiceName,"Sequence Number Is :%lf:",st_i_xchngbk.d_jiffy);
  }

  st_i_xchngbk.l_dwnld_flg = i_dwnld_flg;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Down Load Flag Is :%ld:",st_i_xchngbk.l_dwnld_flg);
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_xchngbk.c_rout_crt,c_rout_str);

  st_i_xchngbk.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;

  st_i_xchngbk.l_bit_flg  = 0 ;       /***  Stream No. Hard Coded To 0 ***/

	 if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Before Call To SFO_UPD_XCHNGBK");
  }

  i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1)
  {
    fn_errlog(c_ServiceName,"L31075", LIBMSG, c_err_msg);
    return -1;
  }

	 i_ch_val = fn_Bupd_xchngbk	( &st_i_xchngbk,
                                c_ServiceName,
                                c_err_msg
                              );

  if( ( i_ch_val != 0) && ( i_ch_val != RECORD_ALREADY_PRCSD ) )
  {
    fn_errlog(c_ServiceName,"L31080", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }
  else if ( i_ch_val == RECORD_ALREADY_PRCSD )
  {
    fn_userlog ( c_ServiceName, "Record already processed" );
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return 0;
  }

  l_ack_nmbr =  fn_swap_ulnglng(ptr_ioc_rply->ll_transn_id);

  sprintf( st_i_ordrbk.c_xchng_ack,"%lld",l_ack_nmbr);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Exchange Ack Is :%lld:",l_ack_nmbr);
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
    fn_userlog(c_ServiceName,"Order Book Exchange Ack Is :%s:",st_i_ordrbk.c_xchng_ack);
  }

  strcpy(st_i_ordrbk.c_rout_crt,c_rout_str);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Before Call To SFO_UPD_ORDRBK");
  }

  st_i_ordrbk.c_oprn_typ = UPDATE_XCHNG_RESPONSE;

  i_ch_val = fn_Bupd_ordrbk	( &st_i_ordrbk,
                              c_ServiceName,
                              c_err_msg
                            );

	if ( i_ch_val != 0)
  {
    fn_errlog(c_ServiceName,"L31085", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }

  i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);

  if ( i_ch_val == -1 )
  {
    fn_errlog(c_ServiceName,"L31090", LIBMSG, c_err_msg);
    return -1;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_xchngbk.c_rout_crt,c_rout_str);

	i_ch_val = fn_acall_svc ( c_ServiceName,
                             c_err_msg,
                             &st_i_xchngbk,
                             "vw_xchngbook",
                             sizeof ( st_i_xchngbk ),
                             TPNOREPLY,
                             c_svc_name );
  if ( i_ch_val != 0 )
  {
    fn_errlog(c_ServiceName,"L31095", LIBMSG, c_err_msg);
    return -1;
  }

	fn_userlog(c_ServiceName,"After Successful Call To IOC Confirmation.");

	return 0;

}


int fn_bse_ioc_cancellation ( struct st_kill_min_fill_ordr *ptr_ioc_cncl,
                              char   *c_xchng_cd,
                              char   *c_pipe_id,
                              char   *c_rout_str,
                              char   *c_trd_dt,
                              char   *c_skpord_ref,
                              int    i_dwnld_flg,
                              char   *c_ServiceName,
                              char   *c_err_msg
                            )
{

	char c_ordr_rfrnc [19];
  char c_xchng_rmrks[256];
  char c_tmp[8];
  char c_mtch_accnt[11];
  char c_svc_name[15+1];
  char c_usr_id[16];
  char c_xchng_err_msg[256];
  char c_prcsng_time[23];
  char c_ordr_actn_cd ;

  int i_ch_val;
  int i_trnsctn;
  int i;
  int i_err  [6];
  int i_ferr [6];

  long int li_ors_msg_typ;
  long l_total_qty;
  long l_cncl_qty;
  long l_msg_typ;
  long l_token_id;

  long long l_ack_nmbr;


	struct vw_xchngbook st_i_xchngbk;
  struct vw_orderbook st_i_ordbk;
  struct vw_contract st_cntrct;

	MEMSET(st_i_xchngbk);
  MEMSET(st_i_ordbk);
  MEMSET(st_cntrct);
  MEMSET(c_xchng_rmrks);

	if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Inside Function IOC Cancellation");
  }

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"I/P Exchange Code Is :%s:",c_xchng_cd);
    fn_userlog(c_ServiceName,"I/P Pipe ID Is :%s:",c_pipe_id);
    fn_userlog(c_ServiceName,"I/P Trade Date :%s:",c_trd_dt);
  }

  strcpy(st_i_xchngbk.c_xchng_cd,c_xchng_cd);
  strcpy(st_i_xchngbk.c_pipe_id,c_pipe_id);
  strcpy(st_i_xchngbk.c_mod_trd_dt,c_trd_dt);

  st_i_xchngbk.l_ord_seq =  fn_swap_long(ptr_ioc_cncl->l_msg_tag);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Sequence Number Is :%ld:",st_i_xchngbk.l_ord_seq);
  }

  st_i_xchngbk.c_oprn_typ = FOR_RCV;

	i_ch_val = fn_Bseq_to_omd	( &st_i_xchngbk,
                              c_ServiceName,
                              c_err_msg
                            );


  if ( i_ch_val != 0 )
  {
    fn_errlog(c_ServiceName,"L31100", LIBMSG, c_err_msg);
    return -1;
  }

  strcpy ( st_i_ordbk.c_ordr_rfrnc , st_i_xchngbk.c_ordr_rfrnc);

	st_i_xchngbk.l_ors_msg_typ = ORS_IOC_CAN_ACPT;

  l_cncl_qty  = fn_swap_long(ptr_ioc_cncl->l_killed_qty);


  EXEC SQL
    SELECT  FOD_ORDR_TOT_QTY
    INTO    :l_total_qty
    FROM    FOD_FO_ORDR_DTLS
    WHERE   FOD_ORDR_RFRNC  = :st_i_ordbk.c_ordr_rfrnc;


  if ( SQLCODE  !=  0 )
  {
    fn_errlog(c_ServiceName,"L31105", SQLMSG, c_err_msg);
    return -1;
  }

  st_i_xchngbk.l_xchng_can_qty  = l_total_qty - l_cncl_qty;

  fn_userlog(c_ServiceName,"BSE - Exchange Killed Qty Is :%ld:",l_cncl_qty);
  fn_userlog(c_ServiceName,"BSE - EBA Cancel Qty  Is :%ld:",st_i_xchngbk.l_xchng_can_qty);

  EXEC SQL
    SELECT  to_char(SYSDATE,'dd-Mon-yyyy hh24:mi:ss')
    INTO    :c_prcsng_time
    FROM    DUAL;


  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName,"L31110", SQLMSG, c_err_msg);
    return -1;
  }

  fn_userlog(c_ServiceName,"BSE IOC Processing Time Is :%s:",c_prcsng_time);

	strcpy(st_i_xchngbk.c_ack_tm,c_prcsng_time);

  fn_userlog(c_ServiceName,"BSE IOC ACK Time Is :%s:",st_i_xchngbk.c_ack_tm);

  strcpy(c_xchng_rmrks , "IOC order cancelled" );

  l_ack_nmbr = fn_swap_ulnglng(ptr_ioc_cncl->ll_ordr_id);

  sprintf( st_i_ordbk.c_xchng_ack,"%lld",l_ack_nmbr);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Order Book Exchange Ack Is :%s:",st_i_ordbk.c_xchng_ack);
  }

  strcpy ( st_i_ordbk.c_pipe_id , c_pipe_id );

  strcpy(st_i_ordbk.c_rout_crt,c_rout_str);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Before Call To SFO_ACK_TO_ORD");
  }

  st_i_ordbk.c_oprn_typ = FOR_VIEW;

	i_ch_val  =  fn_Back_to_ord	( &st_i_ordbk,
                                c_ServiceName,
                                c_usr_id,
                                c_err_msg
                              );


  if ( i_ch_val != SUCC_BFR)
  {
    fn_errlog(c_ServiceName,"L31115", LIBMSG, c_err_msg);
    return -1;

  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Code Is :%s:",st_i_ordbk.c_xchng_cd);
  }

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Order Reference No. Is :%s:",st_i_ordbk.c_ordr_rfrnc);
  }

	
  /*** if ( st_i_ordbk.c_prd_typ == FUTURES	||	st_i_ordbk.c_prd_typ ==	FUTURE_PLUS )	*** Commented in Ver 1.3 ***/
	if ( st_i_ordbk.c_prd_typ == FUTURES	||	st_i_ordbk.c_prd_typ ==	FUTURE_PLUS || st_i_ordbk.c_prd_typ ==	SLTP_FUTUREPLUS )		/*** Ver 1.3 ***/
   {
    strcpy( c_svc_name , "SFO_FUT_ACK" );
  }
  else
  {
    strcpy( c_svc_name , "SFO_OPT_ACK" );
  }

  strcpy(st_i_xchngbk.c_pipe_id,c_pipe_id);
  strcpy ( st_i_xchngbk.c_ordr_rfrnc , st_i_ordbk.c_ordr_rfrnc );
  strcpy ( st_i_xchngbk.c_xchng_cd , st_i_ordbk.c_xchng_cd );
  strcpy ( st_i_xchngbk.c_mod_trd_dt , ( char * )c_trd_dt);
  strcpy ( c_mtch_accnt , st_i_ordbk.c_cln_mtch_accnt );
  strcpy(st_i_xchngbk.c_xchng_rmrks,c_xchng_rmrks);
  strcpy (c_ordr_rfrnc,st_i_ordbk.c_ordr_rfrnc );
  strcpy (st_i_xchngbk.c_valid_dt,st_i_xchngbk.c_mod_trd_dt);
  st_i_xchngbk.l_ord_tot_qty = st_i_ordbk.l_ord_tot_qty;
  st_i_xchngbk.l_ord_lmt_rt = st_i_ordbk.l_ord_lmt_rt;
  st_i_xchngbk.l_ord_seq = 0;
  st_i_xchngbk.l_mdfctn_cntr = EXPIRY_MDFCTN_CNTR;
  st_i_xchngbk.c_plcd_stts = CANCELLED;
  st_i_xchngbk.c_rms_prcsd_flg = NOT_PROCESSED;

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Book Modification Counter Is :%ld:",st_i_xchngbk.l_mdfctn_cntr);
    fn_userlog(c_ServiceName,"Exchange Book Placed Status Is :%c:",st_i_xchngbk.c_plcd_stts);
    fn_userlog(c_ServiceName,"Exchange Book RMS Processed Flag :%c:",st_i_xchngbk.c_rms_prcsd_flg);
    fn_userlog(c_ServiceName,"Exchange Book ORS Msg Is :%ld:",st_i_xchngbk.l_ors_msg_typ);
    fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
    fn_userlog(c_ServiceName,"Exchange Book Remark Is :%s:",st_i_xchngbk.c_xchng_rmrks);
    fn_userlog(c_ServiceName,"Exchange Book Pipe ID Is :%s:",st_i_xchngbk.c_pipe_id);
    fn_userlog(c_ServiceName,"Exchange Book Order Reference Is :%s:",st_i_xchngbk.c_ordr_rfrnc);
    fn_userlog(c_ServiceName,"Exchange Book Exchange Code Is :%s:",st_i_xchngbk.c_xchng_cd);
    fn_userlog(c_ServiceName,"Exchange Book Trade Date Is :%s:",st_i_xchngbk.c_mod_trd_dt);
    fn_userlog(c_ServiceName,"Exchange Book Total Order Qty Is :%ld:",st_i_xchngbk.l_ord_tot_qty);
    fn_userlog(c_ServiceName,"Exchange Book Limit Rate Is :%ld:",st_i_xchngbk.l_ord_lmt_rt);
  }

  EXEC SQL
    SELECT  BSE_EBA_JIFFY.nextval
    INTO    :st_i_xchngbk.d_jiffy
    FROM    DUAL;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName,"L31120", SQLMSG, c_err_msg);
    return -1;
  }

  fn_userlog(c_ServiceName,"BSE IOC JIFFY Is :%lf:",st_i_xchngbk.d_jiffy);


  st_i_xchngbk.l_dwnld_flg = i_dwnld_flg;

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Book DownLoad Flag Is :%ld:",st_i_xchngbk.l_dwnld_flg);
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_xchngbk.c_rout_crt,c_rout_str);


  st_i_xchngbk.l_bit_flg  = 0;    /***  STERAM NO. HARD CODED TO 0  ***/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"IN ORD_CNCL, the stream number receievd from exchange is:%ld:",st_i_xchngbk.l_bit_flg);
    fn_userlog(c_ServiceName,"Before Call To SFO_UPD_XCHNGBK For INSERTION_ON_ORDER_FTE");
  }

  st_i_xchngbk.c_oprn_typ = INSERTION_ON_ORDER_FTE;
  st_i_xchngbk.c_spl_flg      = '*';
  st_i_xchngbk.c_sprd_ord_ind = '*';

  i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );

  if ( i_trnsctn ==  -1 )
  {
    fn_errlog(c_ServiceName,"L31125", LIBMSG, c_err_msg);
    return -1;
  }

  i_ch_val = fn_Bupd_xchngbk	( &st_i_xchngbk,
                                c_ServiceName,
                                c_err_msg
                              );


  if ( ( i_ch_val != SUCC_BFR) && ( i_ch_val != RECORD_ALREADY_PRCSD ) )
  {
    fn_errlog(c_ServiceName,"L31130", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }

	else if ( i_ch_val == RECORD_ALREADY_PRCSD )
  {
    fn_userlog ( c_ServiceName, "Record already processed" );
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return 0;
  }

  i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);
  if ( i_ch_val == -1 )
  {
    fn_errlog(c_ServiceName,"L31135", LIBMSG, c_err_msg);
    return -1;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_xchngbk.c_rout_crt,c_rout_str);

	i_ch_val = fn_acall_svc ( c_ServiceName,
                             c_err_msg,
                             &st_i_xchngbk,
                             "vw_xchngbook",
                             sizeof ( st_i_xchngbk ),
                             TPNOREPLY,
                             c_svc_name );
  if ( i_ch_val != 0 )
  {
    fn_errlog(c_ServiceName,"L31140", LIBMSG, c_err_msg);
    return -1;
  }

  fn_userlog(c_ServiceName,"After Successful Call To IOC Cancellation.");

	return 0;

}

int fn_bsesltp_cnfrmtn  ( struct  st_stoploss_ord_rply  *ptr_st_sltp_rply,
                          char *c_xchng_cd,
                          char *c_pipe_id,
                          char *c_rout_str,
                          char *c_trd_dt,
                          char *c_trd_ref,
                          int i_dwnld_flg,
                          char *c_ServiceName,
                          char *c_err_msg
                        )
{
	char c_ordr_rfrnc [19];
  char c_xchng_rmrks[256];
  char c_tmp[8];
  char c_mtch_accnt[11];
  char c_svc_name[15+1];
  char c_xchng_err_msg[256];
  char c_ordr_actn_cd ;
  char c_ordr_flw;

  int i_ch_val;
  int i_trnsctn;
  int i;
  int i_err  [6];
  int i_ferr [6];
  int i_rply_cd;
  int i_sltp_rtrn;
  long int li_ors_msg_typ;
  long l_xchng_can_qty;
  long l_msg_typ;
  long l_msg_typ1;

  long long l_ack_nmbr;

  struct vw_xchngbook st_i_xchngbk;
  struct vw_orderbook st_i_ordrbk;
  struct st_sltp_ord_ums st_sltp_ord_ums_data;

  MEMSET(st_i_xchngbk);
  MEMSET(st_i_ordrbk);
  MEMSET(c_xchng_err_msg);
  MEMSET(c_xchng_rmrks);
  MEMSET(st_sltp_ord_ums_data);

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"I/P Exchange Code Is :%s:",c_xchng_cd);
    fn_userlog(c_ServiceName,"I/P Pipe ID Is :%s:",c_pipe_id);
    fn_userlog(c_ServiceName,"I/P Trade Date :%s:",c_trd_dt);
  }

  fn_userlog(c_ServiceName,"BSE Inside SLTP Confirmation.");

  strcpy(st_i_xchngbk.c_xchng_cd,c_xchng_cd);
  strcpy(st_i_xchngbk.c_pipe_id,c_pipe_id);
  strcpy(st_i_xchngbk.c_mod_trd_dt,c_trd_dt);
  st_i_xchngbk.l_ord_seq =  fn_swap_long(ptr_st_sltp_rply->l_msg_tag);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Sequence Number Is :%ld:",st_i_xchngbk.l_ord_seq);
  }

  st_i_xchngbk.c_oprn_typ = FOR_RCV;

  i_ch_val = fn_Bseq_to_omd	( &st_i_xchngbk,
                              c_ServiceName,
                              c_err_msg
                            );

  if ( i_ch_val != 0 )
  {
    fn_errlog(c_ServiceName,"L31145", LIBMSG, c_err_msg);
    return -1;
  }

	strcpy(st_i_ordrbk.c_ordr_rfrnc,st_i_xchngbk.c_ordr_rfrnc);

  l_msg_typ = fn_swap_long(ptr_st_sltp_rply->l_msg_typ);
  i_rply_cd = fn_swap_short(ptr_st_sltp_rply->s_rply_cd);

	if ( i_dwnld_flg == DOWNLOAD  )
  {
    l_msg_typ1 = ptr_st_sltp_rply->l_msg_typ;

    EXEC SQL
      SELECT  FOD_ORDR_FLW
      INTO    :c_ordr_flw
      FROM    FOD_FO_ORDR_DTLS
      WHERE   FOD_ORDR_RFRNC  = :st_i_ordrbk.c_ordr_rfrnc;

    if ( SQLCODE  !=  0 )
    {
      fn_errlog(c_ServiceName,"L31150", SQLMSG, c_err_msg);
      return -1;
    }

    if (  st_i_xchngbk.c_req_typ  ==  'N' )
    {
      if (c_ordr_flw == 'B' )
      {
        l_msg_typ = ADD_STOPLOSS_BUY_ORD;
      }
      else
      {
        l_msg_typ = ADD_STOPLOSS_SELL_ORD;
      }
    }
    else if ( st_i_xchngbk.c_req_typ  ==  'M')
    {
      if (c_ordr_flw == 'B' )
      {
        l_msg_typ = UPD_STOPLOSS_BUY_ORD;
      }
      else
      {
        l_msg_typ = UPD_STOPLOSS_SELL_ORD;
      }

    }
		else if ( st_i_xchngbk.c_req_typ  ==  'C')
    {
      if (c_ordr_flw == 'B' )
      {
        l_msg_typ = DEL_STOPLOSS_BUY_ORD;
      }
      else
      {
        l_msg_typ = DEL_STOPLOSS_SELL_ORD;
      }

    }
  }

  fn_userlog(c_ServiceName,"BSE SLTP MSG TYP Is ;%ld:",l_msg_typ);

	switch  ( l_msg_typ )
  {
    case  ADD_STOPLOSS_BUY_ORD  :
    case  ADD_STOPLOSS_SELL_ORD :

      if( i_rply_cd >  0 )
      {
       fn_userlog(c_ServiceName,"Inside BSE STOP LOSS Rejection ");
       st_i_xchngbk.l_ors_msg_typ = ORS_NEW_ORD_RJCT;
       fn_tmstmp_dmyhms_to_arr(ptr_st_sltp_rply->st_timestmp_dmyhms,st_i_xchngbk.c_ack_tm);
       strcpy(st_i_xchngbk.c_entry_dt_tm,st_i_xchngbk.c_ack_tm);

       fn_userlog(c_ServiceName,"BSE Exchange Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
      }
      else
      {
       if(DEBUG_MSG_LVL_0)
       {
        fn_userlog(c_ServiceName,"Inside BSE STOP LOSS Confirmation Case");
       }

       st_i_xchngbk.l_ors_msg_typ = ORS_NEW_ORD_ACPT;

       fn_tmstmp_dmyhms_to_arr(ptr_st_sltp_rply->st_timestmp_dmyhms,st_i_xchngbk.c_ack_tm);
       strcpy(st_i_xchngbk.c_entry_dt_tm,st_i_xchngbk.c_ack_tm);

       fn_userlog(c_ServiceName,"BSE Exchange Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
      }
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Message Type Is :%ld:",st_i_xchngbk.l_ors_msg_typ);
        fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
        fn_userlog(c_ServiceName,"Exchange Book Entry Date Time :%s:",st_i_xchngbk.c_entry_dt_tm);
      }


    break;
	
		case  UPD_STOPLOSS_BUY_ORD  :
    case  UPD_STOPLOSS_SELL_ORD :
    case  UPD_SLTP_BUY_AFTER_TRG  :
    case  UPD_SLTP_SELL_AFTER_TRG :
      if( i_rply_cd  >  0 )
      {
       fn_userlog(c_ServiceName,"Inside BSE STOP LOSS Modification Rejection ");
       st_i_xchngbk.l_ors_msg_typ = ORS_MOD_ORD_RJCT;
       fn_tmstmp_dmyhms_to_arr(ptr_st_sltp_rply->st_timestmp_dmyhms,st_i_xchngbk.c_ack_tm);
       strcpy(st_i_xchngbk.c_entry_dt_tm,st_i_xchngbk.c_ack_tm);

       fn_userlog(c_ServiceName,"BSE Exchange Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
      }
      else
      {
       if(DEBUG_MSG_LVL_0)
       {
        fn_userlog(c_ServiceName,"Inside BSE STOP LOSS Modification Case");
       }

       st_i_xchngbk.l_ors_msg_typ = ORS_MOD_ORD_ACPT ;

       fn_tmstmp_dmyhms_to_arr(ptr_st_sltp_rply->st_timestmp_dmyhms,st_i_xchngbk.c_ack_tm);

       fn_userlog(c_ServiceName,"BSE Exchange Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
      }

    break ;

    case  DEL_STOPLOSS_BUY_ORD  :
    case  DEL_STOPLOSS_SELL_ORD :
    case  DEL_SLTP_BUY_AFTER_TRIGGER :
    case  DEL_SLTP_SELL_AFTER_TRIGGER :
      if( i_rply_cd >  0 )
      {
       fn_userlog(c_ServiceName,"Inside BSE STOP LOSS Cancelation Rejection ");
       st_i_xchngbk.l_ors_msg_typ = ORS_CAN_ORD_RJCT;
       fn_tmstmp_dmyhms_to_arr(ptr_st_sltp_rply->st_timestmp_dmyhms,st_i_xchngbk.c_ack_tm);
       strcpy(st_i_xchngbk.c_entry_dt_tm,st_i_xchngbk.c_ack_tm);

       fn_userlog(c_ServiceName,"BSE Exchange Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
      }
      else
      {
       	if(DEBUG_MSG_LVL_0)
       	{
        	fn_userlog(c_ServiceName,"Inside BSE STOP LOSS Modification Case");
       	}

       	st_i_xchngbk.l_ors_msg_typ =  ORS_CAN_ORD_ACPT;
			
			 	fn_tmstmp_dmyhms_to_arr(ptr_st_sltp_rply->st_timestmp_dmyhms,st_i_xchngbk.c_ack_tm);

       	fn_userlog(c_ServiceName,"BSE Exchange Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
      }

    break;

    default :

      fn_userlog( c_ServiceName, "Protocol error %d", ptr_st_sltp_rply->l_msg_typ);
      return -1;

    break;

  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_ordrbk.c_rout_crt,c_rout_str);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName, "Before Call To SFO_REF_TO_ORD");
  }

  st_i_ordrbk.c_oprn_typ = FOR_VIEW;

	i_ch_val = fn_Bref_to_ord ( &st_i_ordrbk,
                              c_ServiceName,
                              c_err_msg
                            );

  if ( i_ch_val != 0)
  {
    fn_errlog(c_ServiceName,"L31155", LIBMSG, c_err_msg);
    return -1;
  }


  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Order Reference Is :%s:",st_i_ordrbk.c_ordr_rfrnc);
    fn_userlog(c_ServiceName,"Modification Counter Is :%ld:", st_i_ordrbk.l_mdfctn_cntr);
    fn_userlog(c_ServiceName,"Exchange Code Is :%s:",st_i_ordrbk.c_xchng_cd);
    fn_userlog(c_ServiceName,"Pipe ID Is :%s:",st_i_ordrbk.c_pipe_id);
    fn_userlog(c_ServiceName,"Match Account Is :%s:",st_i_ordrbk.c_cln_mtch_accnt);
  }

  strcpy ( st_i_xchngbk.c_ordr_rfrnc, st_i_ordrbk.c_ordr_rfrnc );
  st_i_xchngbk.l_mdfctn_cntr = st_i_ordrbk.l_mdfctn_cntr;
  strcpy ( st_i_xchngbk.c_xchng_cd, st_i_ordrbk.c_xchng_cd );
  strcpy ( st_i_xchngbk.c_pipe_id, st_i_ordrbk.c_pipe_id );
  strcpy(c_mtch_accnt, st_i_ordrbk.c_cln_mtch_accnt);

	/*** if ( st_i_ordrbk.c_prd_typ == FUTURES || st_i_ordrbk.c_prd_typ	==	FUTURE_PLUS ) *** Commented in Ver 1.3 ***/
	if ( st_i_ordrbk.c_prd_typ == FUTURES || st_i_ordrbk.c_prd_typ	==	FUTURE_PLUS || st_i_ordrbk.c_prd_typ	==	SLTP_FUTUREPLUS )	/*** Ver 1.3 ***/
    {
    strcpy( c_svc_name , "SFO_FUT_ACK" );
  }
  else
  {
    strcpy( c_svc_name , "SFO_OPT_ACK" );
  }

	switch (st_i_xchngbk.l_ors_msg_typ)
  {
    case  ORS_NEW_ORD_ACPT :
    case  ORS_MOD_ORD_ACPT :
    case  ORS_CAN_ORD_ACPT :

      st_i_xchngbk.c_plcd_stts = ACCEPT;

    break;

    case  ORS_NEW_ORD_RJCT :
    case  ORS_MOD_ORD_RJCT :
    case  ORS_CAN_ORD_RJCT :

     st_i_xchngbk.c_plcd_stts = REJECT;

    break;
  }

  st_i_xchngbk.c_rms_prcsd_flg = NOT_PROCESSED;
  strcpy ( st_i_xchngbk.c_xchng_rmrks ,c_xchng_rmrks );

  st_i_xchngbk.l_ord_seq =  fn_swap_long(ptr_st_sltp_rply->l_msg_tag);

  EXEC SQL
    SELECT  BSE_EBA_JIFFY.nextval
    INTO    :st_i_xchngbk.d_jiffy
    FROM    DUAL;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName,"L31160", SQLMSG, c_err_msg);
    return -1;
  }

	if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Sequence Number Is :%ld:",st_i_xchngbk.l_ord_seq);
    fn_userlog(c_ServiceName,"Jiffy Is :%lf:",st_i_xchngbk.d_jiffy);
  }

  st_i_xchngbk.l_dwnld_flg = i_dwnld_flg;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Down Load Flag Is :%ld:",st_i_xchngbk.l_dwnld_flg);
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_xchngbk.c_rout_crt,c_rout_str);

  st_i_xchngbk.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;

  st_i_xchngbk.l_bit_flg  = 0 ;       /***  Stream No. Hard Coded To 0 ***/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Before Call To SFO_UPD_XCHNGBK");
  }

  i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1)
  {
    fn_errlog(c_ServiceName,"L31165", LIBMSG, c_err_msg);
    return -1;
  }

	i_ch_val = fn_Bupd_xchngbk	( &st_i_xchngbk,
                              	c_ServiceName,
                              	c_err_msg
                            	);

  if( ( i_ch_val != 0) && ( i_ch_val != RECORD_ALREADY_PRCSD ) )
  {
    fn_errlog(c_ServiceName,"L31170", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }

	else if ( i_ch_val == RECORD_ALREADY_PRCSD )
  {
   	fn_userlog ( c_ServiceName, "Record already processed" );
   	fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);

   /**** Ack of SLTP order already processed but trigger not procesed & the order came in download ( 1092 ) ****/

   	fn_userlog ( c_ServiceName, " i_dwnld_flg  :%d:",i_dwnld_flg);
   	fn_userlog ( c_ServiceName, " l_msg_typ    :%ld:",l_msg_typ1);

   	if ( i_dwnld_flg == DOWNLOAD &&  l_msg_typ1 == PRSNL_ORDR_DWNLD )
   	{
    	fn_userlog ( c_ServiceName, " Inside Record already processed & Sltp triggering ");

     	st_sltp_ord_ums_data.ll_ordr_id                       = ptr_st_sltp_rply->ll_transn_id;
     	st_sltp_ord_ums_data.l_msg_tag                        = ptr_st_sltp_rply->l_msg_tag;
     	st_sltp_ord_ums_data.st_timestamp_dmyhms.c_year       = ptr_st_sltp_rply->st_timestmp_dmyhms.c_year;
     	st_sltp_ord_ums_data.st_timestamp_dmyhms.c_month      = ptr_st_sltp_rply->st_timestmp_dmyhms.c_month;
     	st_sltp_ord_ums_data.st_timestamp_dmyhms.c_day        = ptr_st_sltp_rply->st_timestmp_dmyhms.c_day;
     	st_sltp_ord_ums_data.st_timestamp_dmyhms.c_hour       = ptr_st_sltp_rply->st_timestmp_dmyhms.c_hour;
     	st_sltp_ord_ums_data.st_timestamp_dmyhms.c_min        = ptr_st_sltp_rply->st_timestmp_dmyhms.c_min;
     	st_sltp_ord_ums_data.st_timestamp_dmyhms.c_sec        = ptr_st_sltp_rply->st_timestmp_dmyhms.c_sec;

     	i_sltp_rtrn =  fn_bsesltp_trggrd	( &st_sltp_ord_ums_data,
                                          c_xchng_cd,
      	                                  c_pipe_id,
                                          c_rout_str,
                                          c_trd_dt,
                                          TRIGGERED,
                                          c_ServiceName,
                                          i_dwnld_flg,
                                          c_err_msg
                                        );

     	if ( i_sltp_rtrn  != 0 )
     	{	
      	fn_errlog(c_ServiceName,"L31175", LIBMSG, c_err_msg);
      	return -1;
     	}

    	 fn_userlog(c_ServiceName,"BSE After Successfull SLTP Ack Processing For Trade In Download.");

   	}

  	 return 0;
	}

  l_ack_nmbr  = fn_swap_ulnglng(ptr_st_sltp_rply->ll_transn_id);

  sprintf( st_i_ordrbk.c_xchng_ack,"%lld",l_ack_nmbr);

	if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Exchange Ack Is :%lld:",l_ack_nmbr);
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
    fn_userlog(c_ServiceName,"Order Book Exchange Ack Is :%s:",st_i_ordrbk.c_xchng_ack);
  }

  strcpy(st_i_ordrbk.c_rout_crt,c_rout_str);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Before Call To SFO_UPD_ORDRBK");
  }

  st_i_ordrbk.c_oprn_typ = UPDATE_XCHNG_RESPONSE;

  i_ch_val = fn_Bupd_ordrbk	( &st_i_ordrbk,
                              c_ServiceName,
                              c_err_msg
                            );

  if ( i_ch_val != 0)
  {
    fn_errlog(c_ServiceName,"L31180", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }


  i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);

  if ( i_ch_val == -1 )
  {
    fn_errlog(c_ServiceName,"L31185", LIBMSG, c_err_msg);
    return -1;
  }

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_xchngbk.c_rout_crt,c_rout_str);

	i_ch_val = fn_acall_svc ( c_ServiceName,
                             c_err_msg,
                             &st_i_xchngbk,
                             "vw_xchngbook",
                             sizeof ( st_i_xchngbk ),
                             TPNOREPLY,
                             c_svc_name );
  if ( i_ch_val != 0 )
  {
    fn_errlog(c_ServiceName,"L31190", LIBMSG, c_err_msg);
    return -1;
  }

	fn_userlog(c_ServiceName,"BSE Afterr Successful Processing Of SLTP Confirmation Response.");

	/** In case of SLTP ack & Trigger not processed & it comes in download ****/
  if ( i_dwnld_flg == DOWNLOAD &&  l_msg_typ1 == PRSNL_ORDR_DWNLD )
  {
     fn_userlog(c_ServiceName," Inside SLTP Trigger ");
     st_sltp_ord_ums_data.ll_ordr_id                       = ptr_st_sltp_rply->ll_transn_id;
     st_sltp_ord_ums_data.l_msg_tag                        = ptr_st_sltp_rply->l_msg_tag;
     st_sltp_ord_ums_data.st_timestamp_dmyhms.c_year       = ptr_st_sltp_rply->st_timestmp_dmyhms.c_year;
     st_sltp_ord_ums_data.st_timestamp_dmyhms.c_month      = ptr_st_sltp_rply->st_timestmp_dmyhms.c_month;
     st_sltp_ord_ums_data.st_timestamp_dmyhms.c_day        = ptr_st_sltp_rply->st_timestmp_dmyhms.c_day;
     st_sltp_ord_ums_data.st_timestamp_dmyhms.c_hour       = ptr_st_sltp_rply->st_timestmp_dmyhms.c_hour;
     st_sltp_ord_ums_data.st_timestamp_dmyhms.c_min        = ptr_st_sltp_rply->st_timestmp_dmyhms.c_min;
     st_sltp_ord_ums_data.st_timestamp_dmyhms.c_sec        = ptr_st_sltp_rply->st_timestmp_dmyhms.c_sec;

     sleep(3);  /*** bcoz , it was giving  deadlock detected while waiting for resource in SFO PRCS_RESP" ***/

     i_sltp_rtrn =  fn_bsesltp_trggrd  ( &st_sltp_ord_ums_data,
                                              c_xchng_cd,
                                              c_pipe_id,
                                              c_rout_str,
                                              c_trd_dt,
                                              TRIGGERED,
                                              c_ServiceName,
                                              i_dwnld_flg,
                                              c_err_msg
                                            );

     if ( i_sltp_rtrn  != 0 )
     {
      fn_errlog(c_ServiceName,"L31195", LIBMSG, c_err_msg);
      return -1;
     }

     fn_userlog(c_ServiceName,"BSE After Successfull SLTP Ack Processing For Trade In Download.");

   }
	return 0;
}


int fn_bsesltp_trggrd ( struct  st_sltp_ord_ums *ptr_st_sltp_ums,
                        char *c_xchng_cd,
                        char *c_pipe_id,
                        char *c_rout_str,
                        char *c_trd_dt,
                        char c_ord_res_stts,
                        char *c_ServiceName,
                        int  i_dwnld_flg,
                        char *c_err_msg )
{
	int i_trnsctn;
 	int i_ch_val;
 	int i_returncode;
 	int i_sltp_rtrn;

 	char c_svc_name [ 16 ];
 	char c_xchng_rmrks[256];
 	char c_ordr_rfrnc [19];
 	char c_refack_tmp[LEN_ORD_REFACK];
 	char c_mtch_accnt [10 + 1];
 	char c_skpord_ref[18 + 1];
 	char c_usr_id[16];
  char c_slm_flg;
	char c_plcd_stts;			/***	Ver	1.1	***/
   
 	long long l_ack_nmbr;
  long l_sltp_trg_prc;
  long l_ord_seq;

 	struct vw_xchngbook st_i_xchngbk;
 	struct vw_orderbook st_i_ordbk;
 	struct st_stoploss_ord_rply st_stoploss_ord_rply_data;

 	MEMSET(st_i_xchngbk);
 	MEMSET(st_i_ordbk);
 	MEMSET(c_xchng_rmrks);


 	if(DEBUG_MSG_LVL_0)
 	{
   	fn_userlog(c_ServiceName,"Inside fn_stpls_trg");
 	}

	fn_tmstmp_dmyhms_to_arr(ptr_st_sltp_ums->st_timestamp_dmyhms,st_i_xchngbk.c_ack_tm);  /*** Ver 1.7 ***/
  
  if ( i_dwnld_flg == DOWNLOAD ) 
  {
   
   l_ord_seq = fn_swap_long(ptr_st_sltp_ums->l_msg_tag );
   fn_userlog(c_ServiceName," Order Sequence in Download :%ld:",l_ord_seq);

   EXEC SQL
   SELECT FXB_LMT_MRKT_SL_FLG,
          FXB_STP_LSS_TGR
     INTO :c_slm_flg,
          :l_sltp_trg_prc
     FROM fxb_fo_xchng_book
    WHERE FXB_XCHNG_CD = :c_xchng_cd
          AND FXB_PIPE_ID  = :c_pipe_id
          AND FXB_MOD_TRD_DT = to_date(:c_trd_dt,'dd-Mon-YYYY')
          AND FXB_ORDR_SQNC  = :l_ord_seq;
   if ( SQLCODE != 0 )
   {
    fn_errlog ( c_ServiceName, "S31005", SQLMSG, c_err_msg );
    return -1;
   }

   if( c_slm_flg != 'S' &&  l_sltp_trg_prc == 0 )		/***	Ver	1.2	Condition Changed From == To !=	***/ 
   {
     /***strcpy( c_xchng_rmrks , "Stop Loss Order Converted To Normal By User." );	Commented In Ver 1.2	***/

     strcpy( c_xchng_rmrks , "*" );			/***	Added In Ver	1.2	***/
   }
   else
   {
     /*** strcpy( c_xchng_rmrks , "Stop Loss Order Triggered" );   ** Commented In 1.7 ***/
		 strcpy( c_xchng_rmrks , "Stop Loss Order Triggered at ");     /*** Ver 1.7 ***/
		 strcat( c_xchng_rmrks , st_i_xchngbk.c_ack_tm );							 /*** Ver 1.7 ***/
   }

  }
  else
  {
 
	 fn_userlog(c_ServiceName,"SLTP Conversion Flag Is :%ld:",ptr_st_sltp_ums->l_cust_cd);
 
	 ptr_st_sltp_ums->l_cust_cd	=	fn_swap_long(ptr_st_sltp_ums->l_cust_cd);

	 fn_userlog(c_ServiceName,"SLTP Conversion Flag Is :%ld:",ptr_st_sltp_ums->l_cust_cd);
 
	 if ( ptr_st_sltp_ums->l_cust_cd 	==	2	)
	 {
    strcpy( c_xchng_rmrks , "Stop Loss Order Converted To Normal By User." );
	 }
	 else
	 {
 		/*** strcpy( c_xchng_rmrks , "Stop Loss Order Triggered" );   			** Commented In 1.7 ***/
		strcpy( c_xchng_rmrks , "Stop Loss Order Triggered at ");     /*** Ver 1.7 ***/
    strcat( c_xchng_rmrks , st_i_xchngbk.c_ack_tm );              /*** Ver 1.7 ***/
	 }
  }
  

	l_ack_nmbr  = fn_swap_ulnglng(ptr_st_sltp_ums->ll_ordr_id);

  sprintf(st_i_ordbk.c_xchng_ack,"%lld",l_ack_nmbr);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Order Book Exchange Ack Is :%s:",st_i_ordbk.c_xchng_ack);
  }

	 strcpy ( st_i_ordbk.c_pipe_id , c_pipe_id );

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Order Book Pipe ID Is :%s:",st_i_ordbk.c_pipe_id);
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_ordbk.c_rout_crt,c_rout_str);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Before Call To SFO_ACK_TO_ORD With FOR_UPDATE");
  }

  st_i_ordbk.c_oprn_typ = FOR_UPDATE;

  i_ch_val = fn_Back_to_ord	( &st_i_ordbk,
                              c_ServiceName,
                              c_usr_id,
                              c_err_msg
                            );

	if ( i_ch_val != SUCC_BFR)
  {
    if ( i_dwnld_flg == DOWNLOAD )
    {
      fn_userlog(c_ServiceName,"BSE Inside SLTP Download Ack not Processed.");


      st_stoploss_ord_rply_data.l_msg_tag     = ptr_st_sltp_ums->l_msg_tag;
      st_stoploss_ord_rply_data.ll_transn_id  = ptr_st_sltp_ums->ll_ordr_id;
      st_stoploss_ord_rply_data.st_timestmp_dmyhms.c_year   = ptr_st_sltp_ums->st_timestamp_dmyhms.c_year;
      st_stoploss_ord_rply_data.st_timestmp_dmyhms.c_month  = ptr_st_sltp_ums->st_timestamp_dmyhms.c_month;
      st_stoploss_ord_rply_data.st_timestmp_dmyhms.c_day    = ptr_st_sltp_ums->st_timestamp_dmyhms.c_day;
      st_stoploss_ord_rply_data.st_timestmp_dmyhms.c_hour   = ptr_st_sltp_ums->st_timestamp_dmyhms.c_hour;
      st_stoploss_ord_rply_data.st_timestmp_dmyhms.c_min    = ptr_st_sltp_ums->st_timestamp_dmyhms.c_min;
      st_stoploss_ord_rply_data.st_timestmp_dmyhms.c_sec    = ptr_st_sltp_ums->st_timestamp_dmyhms.c_sec;

      st_stoploss_ord_rply_data.s_rply_cd = 0;

      i_sltp_rtrn =  fn_bsesltp_cnfrmtn	( &st_stoploss_ord_rply_data,
																					c_xchng_cd,
																					c_pipe_id,
																					c_rout_str,
																					c_trd_dt,
																					c_skpord_ref,
																					i_dwnld_flg,
																					c_ServiceName,
																					c_err_msg
																				);

      if ( i_sltp_rtrn  ==  -1  )
      {
        fn_errlog(c_ServiceName,"L31200", LIBMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }

			sleep(3);		/***	Sleep added here to avoid deadlock detected while waiting for resource Scenario	***/

      i_ch_val = fn_Back_to_ord	( &st_i_ordbk,
                                  c_ServiceName,
                                  c_usr_id,
                                  c_err_msg
                                );
      if ( i_ch_val == -1 )
      {
        fn_errlog(c_ServiceName,"L31205", LIBMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;

      }

		}
    else
    {
      fn_errlog(c_ServiceName,"L31210", LIBMSG, c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }
  }

	/***	Ver	1.1	Starts	***/

	if ( i_dwnld_flg == DOWNLOAD	&&	st_i_ordbk.l_stp_lss_tgr	!=	0	&&	st_i_ordbk.c_slm_flg	==	'S' )
	{
		fn_userlog(c_ServiceName,"Inside SLTP Modification Handling Case.");
		fn_userlog(c_ServiceName,"Order Reference Is :%s:",st_i_ordbk.c_ordr_rfrnc);
		fn_userlog(c_ServiceName,"Modification Counter Is :%ld:",st_i_ordbk.l_mdfctn_cntr);

		EXEC SQL
			SELECT	FXB_PLCD_STTS
			INTO		:c_plcd_stts
			FROM		FXB_FO_XCHNG_BOOK
			WHERE		FXB_ORDR_RFRNC	=	:st_i_ordbk.c_ordr_rfrnc
			AND			FXB_MDFCTN_CNTR	=	:st_i_ordbk.l_mdfctn_cntr;

		if ( SQLCODE	!=	0	)
		{
			fn_errlog(c_ServiceName,"L31215", SQLMSG, c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
		}

		if ( c_plcd_stts	==	'Q'	)
		{

			st_stoploss_ord_rply_data.l_msg_tag     = ptr_st_sltp_ums->l_msg_tag;
   		st_stoploss_ord_rply_data.ll_transn_id  = ptr_st_sltp_ums->ll_ordr_id;
   		st_stoploss_ord_rply_data.st_timestmp_dmyhms.c_year   = ptr_st_sltp_ums->st_timestamp_dmyhms.c_year;
   		st_stoploss_ord_rply_data.st_timestmp_dmyhms.c_month  = ptr_st_sltp_ums->st_timestamp_dmyhms.c_month;
   		st_stoploss_ord_rply_data.st_timestmp_dmyhms.c_day    = ptr_st_sltp_ums->st_timestamp_dmyhms.c_day;
   		st_stoploss_ord_rply_data.st_timestmp_dmyhms.c_hour   = ptr_st_sltp_ums->st_timestamp_dmyhms.c_hour;
   		st_stoploss_ord_rply_data.st_timestmp_dmyhms.c_min    = ptr_st_sltp_ums->st_timestamp_dmyhms.c_min;
   		st_stoploss_ord_rply_data.st_timestmp_dmyhms.c_sec    = ptr_st_sltp_ums->st_timestamp_dmyhms.c_sec;

   		st_stoploss_ord_rply_data.s_rply_cd = 0;

   		i_sltp_rtrn =  fn_bsesltp_cnfrmtn ( &st_stoploss_ord_rply_data,
                                       		c_xchng_cd,
                                       		c_pipe_id,
                                       		c_rout_str,
                                       		c_trd_dt,
                                       		c_skpord_ref,
                                       		i_dwnld_flg,
                                       		c_ServiceName,
                                       		c_err_msg
                                     		);

   		if ( i_sltp_rtrn  ==  -1  )
   		{
     		fn_errlog(c_ServiceName,"L31220", LIBMSG, c_err_msg);
     		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     		return -1;
   		}

   		sleep(3);   /***  Sleep added here to avoid deadlock detected while waiting for resource Scenario ***/

   		i_ch_val = fn_Back_to_ord	( &st_i_ordbk,
          		                    c_ServiceName,
      		                        c_usr_id,
              		                c_err_msg
                  		          );
   		if ( i_ch_val == -1 )
   		{
     		fn_errlog(c_ServiceName,"L31225", LIBMSG, c_err_msg);
     		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     		return -1;
   		}

		}
	}

	/***	Ver	1.1	Ends	***/

	i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );

  if ( i_trnsctn ==  -1 )
  {
    fn_errlog(c_ServiceName,"L31230", LIBMSG, c_err_msg);
    return -1;
  }


	strcpy(c_ordr_rfrnc,st_i_ordbk.c_ordr_rfrnc);

  /** i_returncode = fn_lock_usr( c_ServiceName,  st_i_ordbk.c_cln_mtch_accnt ); ** Ver 2.2 **/
  i_returncode = fn_lock_fno( c_ServiceName,  st_i_ordbk.c_cln_mtch_accnt ); /** Ver 2.2 **/

  if ( i_returncode != 0 )
  {
    fn_errlog ( c_ServiceName, "L31235", LIBMSG, c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }

  strcpy ( st_i_xchngbk.c_ordr_rfrnc , st_i_ordbk.c_ordr_rfrnc );
  strcpy ( st_i_xchngbk.c_xchng_cd , st_i_ordbk.c_xchng_cd );
  strcpy ( c_mtch_accnt , st_i_ordbk.c_cln_mtch_accnt );
  strcpy ( st_i_xchngbk.c_pipe_id , st_i_ordbk.c_pipe_id );
  strcpy ( st_i_xchngbk.c_mod_trd_dt , ( char * )c_trd_dt );
  strcpy (st_i_xchngbk.c_valid_dt,st_i_xchngbk.c_mod_trd_dt);
  st_i_xchngbk.l_ord_tot_qty = st_i_ordbk.l_ord_tot_qty;
  st_i_xchngbk.l_ord_lmt_rt = st_i_ordbk.l_ord_lmt_rt;
  st_i_xchngbk.l_ord_seq = 0;
  st_i_xchngbk.c_sprd_ord_ind   = '*';
  st_i_xchngbk.c_ord_typ = '*';
  st_i_xchngbk.l_mdfctn_cntr = 0;

  /** fn_tmstmp_dmyhms_to_arr(ptr_st_sltp_ums->st_timestamp_dmyhms,st_i_xchngbk.c_ack_tm);  ** Commented in Ver 1.7 ***/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
    fn_userlog(c_ServiceName,"Order Status Is :%c:",c_ord_res_stts);
  }

  st_i_xchngbk.c_plcd_stts = c_ord_res_stts;

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Book Placed Status Is :%c:",st_i_xchngbk.c_plcd_stts);
  }

  st_i_xchngbk.c_rms_prcsd_flg  = PROCESSED;
  st_i_xchngbk.l_ors_msg_typ    = ORS_ORD_TRG;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Remark Is :%s:",c_xchng_rmrks);
  }

  strcpy( st_i_xchngbk.c_xchng_rmrks ,c_xchng_rmrks);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Book Remark Is :%s:",st_i_xchngbk.c_xchng_rmrks);
  }

  st_i_xchngbk.l_dwnld_flg = i_dwnld_flg;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Book DownLoad Flag Is :%ld:",st_i_xchngbk.l_dwnld_flg);
  }

	EXEC SQL
    SELECT  BSE_EBA_JIFFY.nextval
    INTO    :st_i_xchngbk.d_jiffy
    FROM    DUAL;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName,"L31240", SQLMSG, c_err_msg);
    return -1;
  }


  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Jiffy Is :%lf:",st_i_xchngbk.d_jiffy);
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_xchngbk.c_rout_crt,c_rout_str);

  st_i_xchngbk.l_bit_flg  = 0;
  st_i_xchngbk.c_oprn_typ = INSERTION_ON_ORDER_FTE;

  fn_userlog(c_ServiceName,"Before Call To SFO_UPD_XCHNGBK With INSERTION_ON_ORDER_FTE");

  i_ch_val = fn_Bupd_xchngbk	( &st_i_xchngbk,
                                c_ServiceName,
                                c_err_msg
                              );

  if( ( i_ch_val != 0) && ( i_ch_val != RECORD_ALREADY_PRCSD ) )
  {
    fn_errlog(c_ServiceName,"L31245", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }

	else if ( i_ch_val == RECORD_ALREADY_PRCSD )
  {
    fn_userlog ( c_ServiceName, "Record already processed" );
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return 0;
  }

  fn_tmstmp_dmyhms_to_arr(ptr_st_sltp_ums->st_timestamp_dmyhms,st_i_ordbk.c_ack_tm);

  strcpy(st_i_ordbk.c_rout_crt,c_rout_str);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Before Call To SFO_UPD_ORDRBK With UPDATE_XCHNG_RESP_DTLS_OT");
  }

  st_i_ordbk.c_oprn_typ = UPDATE_XCHNG_RESP_DTLS_OT;

  i_ch_val = fn_Bupd_ordrbk	( &st_i_ordbk,
                              c_ServiceName,
                              c_err_msg
                            );

  if ( i_ch_val != 0)
  {
    fn_errlog(c_ServiceName,"L31250", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }

  i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);

  if ( i_ch_val == -1 )
  {
    fn_errlog(c_ServiceName,"L31255", LIBMSG, c_err_msg);
    return -1;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"After Complition Of fn_bsesltp_trggrd");
  }

  return 0;

}


/******************************************************************************/
/*  This Updates Trade Conformation Details.                                  */
/*  INPUT PARAMETERS                                                          */
/*      ptr_st_trd_rply- Pointer to a message structure got from Exchange     */
/*      c_pipe_id      - Pipe Id                                              */
/*      i_dwnld_flg    - Download Flag                                        */
/*      c_ServiceName  - Service Name currently running                       */
/*      c_err_msg      - Error message to be returned                         */
/*  OUTPUT PARAMETERS                                                         */
/*        0   - Success                                                       */
/*        -1  - Failure                                                       */
/******************************************************************************/


int fn_bsetrd_cnfrmtn ( struct st_trade_rply *ptr_st_trd_rply,
                        char *c_xchng_cd,
                        char *c_pipe_id,
                        char *c_rout_str,
                        char *c_trd_dt,
                        char *c_trd_ref,
                        int i_dwnld_flg,
                        char *c_ServiceName,
                        char *c_err_msg )
{

	int i_trnsctn;
  int i_ch_val;
  int i_rtn_val;
  int i_rec_cnt=0;   
  int i_sltp_rtrn = 0;
  int i_ioc_rtrn  = 0;
  int i_ftt_count = 0;

  long long ll_log_tm_stmp;
  long long ll_log_tm_stmp_1;
  long long ll_ack_nmbr;

  long li_ftt_stream_no;        
  long l_trd_nmbr;
  long l_exctd_qty;
  long l_exctd_rt;
  long l_scrip_cd=0;
  long l_msg_tag;           
  double d_tm_stmp;

  struct vw_orderbook st_i_ordbk;
  struct vw_tradebook st_i_trdbk;
  struct vw_sequence st_seq;
  struct vw_contract st_cntrct;

	struct st_ord_rqst_rply st_ord_rqst_rply_data;
  struct st_sltp_ord_ums st_sltp_ord_ums_data;
  struct st_del_ord_rply st_del_ord_rply_data;

  char c_svc_name [ 16 ];
  char c_refack_tmp[LEN_ORD_REFACK];
  char rfrnc[19],c_date[5] ;
  char ack[LEN_XCHNG_ACK];
  char c_skpord_ref[18 + 1];
  char c_mtch_accnt [10 + 1];
  char c_xchng_ack[17];
  char c_utrd_dt[23];
  char c_tmpjiffy[16];
  char c_trg_filter[17];
  char c_usr_id[16];        

  int i2,i3 =0 ;

  MEMSET(st_i_ordbk);
  MEMSET(st_i_trdbk);
  MEMSET(st_seq);
  MEMSET(st_cntrct);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Inside Trade Confirmation Function.");
  }
	
	strcpy (st_i_ordbk.c_pipe_id , c_pipe_id );

  ll_ack_nmbr = fn_swap_ulnglng(ptr_st_trd_rply->ll_transaction_id);

  sprintf(st_i_ordbk.c_xchng_ack,"%lld",ll_ack_nmbr);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Exchange Ack Is :%lld:",ll_ack_nmbr);
    fn_userlog(c_ServiceName,"Pipe ID Is :%s:",st_i_ordbk.c_pipe_id);
  }

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_ordbk.c_rout_crt,c_rout_str);

  st_i_ordbk.c_oprn_typ = FOR_VIEW;

	while (i_rec_cnt != 2)
	{
		i_ch_val = fn_Back_to_ord	(	&st_i_ordbk,
																c_ServiceName,
																c_usr_id,
																c_err_msg
															);

	
		if ( i_ch_val != 0)
    {

      if ( i_dwnld_flg == DOWNLOAD )
      {
        fn_userlog(c_ServiceName,"BSE Inside Trade Download Ack not Processed.");

        if ( ptr_st_trd_rply->c_trnsctn_type  ==  'C' )
        {
          fn_userlog(c_ServiceName,"BSE Inside IOC Trade Download Ack Not Processed.");
					st_del_ord_rply_data.ll_transn_id                     = ptr_st_trd_rply->ll_transaction_id;
          st_del_ord_rply_data.l_msg_tag                        = ptr_st_trd_rply->l_msg_tag;
          st_del_ord_rply_data.st_timestmp_dmyhms.c_year        = ptr_st_trd_rply->st_timestmp_dmyhms.c_year;
          st_del_ord_rply_data.st_timestmp_dmyhms.c_month       = ptr_st_trd_rply->st_timestmp_dmyhms.c_month;
          st_del_ord_rply_data.st_timestmp_dmyhms.c_day         = ptr_st_trd_rply->st_timestmp_dmyhms.c_day;
          st_del_ord_rply_data.st_timestmp_dmyhms.c_hour        = ptr_st_trd_rply->st_timestmp_dmyhms.c_hour;
          st_del_ord_rply_data.st_timestmp_dmyhms.c_min         = ptr_st_trd_rply->st_timestmp_dmyhms.c_min;
          st_del_ord_rply_data.st_timestmp_dmyhms.c_sec         = ptr_st_trd_rply->st_timestmp_dmyhms.c_sec;

          i_ioc_rtrn  = fn_bse_ioc_confirmation ( &st_del_ord_rply_data,
                                                  c_xchng_cd,
                                                  c_pipe_id,
                                                  c_rout_str,
                                                  c_trd_dt,
                                                  c_skpord_ref,
                                                  i_dwnld_flg,
                                                  c_ServiceName,
                                                  c_err_msg
                                                );

          if ( i_ioc_rtrn  != 0 )
          {
            fn_errlog(c_ServiceName,"L31260", LIBMSG, c_err_msg);
            return -1;
          }

          fn_userlog(c_ServiceName,"BSE After Successfull IOC Ack Processing For Trade In Download.");

        }
				else
        {
          fn_userlog(c_ServiceName,"BSE Inside Normal Trade Download Ack not Processed.");

          st_ord_rqst_rply_data.l_msg_typ                 = PRSNL_TRD_DWNLD;
          st_ord_rqst_rply_data.l_msg_tag1                = ptr_st_trd_rply->l_msg_tag;
          st_ord_rqst_rply_data.ll_ord_id                 = ptr_st_trd_rply->ll_transaction_id;
          st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_year   = ptr_st_trd_rply->st_timestmp_dmyhms.c_year;
          st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_month  = ptr_st_trd_rply->st_timestmp_dmyhms.c_month;
          st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_day    = ptr_st_trd_rply->st_timestmp_dmyhms.c_day;
          st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_hour   = ptr_st_trd_rply->st_timestmp_dmyhms.c_hour;
          st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_min    = ptr_st_trd_rply->st_timestmp_dmyhms.c_min;
          st_ord_rqst_rply_data.st_tmstmp_dmyhms.c_sec    = ptr_st_trd_rply->st_timestmp_dmyhms.c_sec;

          st_ord_rqst_rply_data.s_rply_cd = 0;


          fn_userlog(c_ServiceName,"BSE Before call to Order Confirmation For Trade.");

          i_rtn_val = fn_bse_ord_confirmation( &st_ord_rqst_rply_data,
                                                c_xchng_cd,
                                                c_pipe_id,
                                                c_rout_str,
                                                c_trd_dt,
                                                c_skpord_ref,
                                                i_dwnld_flg,
                                                c_ServiceName,
                                                c_err_msg );
          if ( i_rtn_val != 0 )
          {
            fn_errlog(c_ServiceName,"L31265", LIBMSG, c_err_msg);
            return -1;
          }

          	fn_userlog(c_ServiceName,"BSE After Successfull Ack Processing For Trade In Download.");
					}
        }
			 	else
      	{
        	if(DEBUG_MSG_LVL_3)
        	{
          	fn_userlog(c_ServiceName,"Order Confirmation Is Not Processed");
          	fn_userlog(c_ServiceName,"Before Going To Sleep For 2.5 Seconds");
        	}

        	sleep (2.5);
        	i_rec_cnt ++;
      	}

      	if(DEBUG_MSG_LVL_3)
      	{
        	fn_userlog(c_ServiceName,"Record Count Is :%d:",i_rec_cnt);
      	}

      }
			else if ( i_dwnld_flg == DOWNLOAD )
    	{
     		/*** Scenario : It is handled bcoz ack already processed , trigger missed out & direct trade comes in download
         Steps : In such scenario first process the trigger & then trade ***************/

         fn_userlog(c_ServiceName," Trade: st_i_ordbk.c_slm_flg :%c:",st_i_ordbk.c_slm_flg);
         fn_userlog(c_ServiceName," Trade: st_i_ordbk.l_stp_lss_tgr :%ld:",st_i_ordbk.l_stp_lss_tgr);
 
         if( st_i_ordbk.c_slm_flg == 'S' || st_i_ordbk.l_stp_lss_tgr > 0 )
         {
          fn_userlog(c_ServiceName,"BSE Inside SLTP Trade Download Ack Not Processed.");

          st_sltp_ord_ums_data.ll_ordr_id                       = ptr_st_trd_rply->ll_transaction_id;
          st_sltp_ord_ums_data.l_msg_tag                        = ptr_st_trd_rply->l_msg_tag;
          st_sltp_ord_ums_data.st_timestamp_dmyhms.c_year       = ptr_st_trd_rply->st_timestmp_dmyhms.c_year;
          st_sltp_ord_ums_data.st_timestamp_dmyhms.c_month      = ptr_st_trd_rply->st_timestmp_dmyhms.c_month;
          st_sltp_ord_ums_data.st_timestamp_dmyhms.c_day        = ptr_st_trd_rply->st_timestmp_dmyhms.c_day;
          st_sltp_ord_ums_data.st_timestamp_dmyhms.c_hour       = ptr_st_trd_rply->st_timestmp_dmyhms.c_hour;
          st_sltp_ord_ums_data.st_timestamp_dmyhms.c_min        = ptr_st_trd_rply->st_timestmp_dmyhms.c_min;
          st_sltp_ord_ums_data.st_timestamp_dmyhms.c_sec        = ptr_st_trd_rply->st_timestmp_dmyhms.c_sec;

          i_sltp_rtrn =  fn_bsesltp_trggrd  ( &st_sltp_ord_ums_data,
                                              c_xchng_cd,
                                              c_pipe_id,
                                              c_rout_str,
                                              c_trd_dt,
                                              TRIGGERED,
                                              c_ServiceName,
                                              i_dwnld_flg,
                                              c_err_msg
                                            );

          if ( i_sltp_rtrn  != 0 )
          {
            fn_errlog(c_ServiceName,"L31270", LIBMSG, c_err_msg);
            return -1;
          }

          fn_userlog(c_ServiceName,"BSE After Successfull SLTP Ack Processing For Trade In Download."); 
         }
    	}
    	if(i_ch_val == 0)
    	{
	
      	if(DEBUG_MSG_LVL_3)
      	{
          fn_userlog(c_ServiceName,"i_dwnld_flg :%d:",i_dwnld_flg);
        	fn_userlog(c_ServiceName,"Inside Success Condition");
      	}

      	break;
    	}

	}

  l_trd_nmbr  = fn_swap_long(ptr_st_trd_rply->l_trd_id);
  l_exctd_qty = fn_swap_long(ptr_st_trd_rply->l_trd_qty);
  l_exctd_rt  = fn_swap_long(ptr_st_trd_rply->l_rt);
  l_scrip_cd   = fn_swap_long(ptr_st_trd_rply->l_scrp_cd);
  l_msg_tag   = fn_swap_long(ptr_st_trd_rply->l_msg_tag);

  fn_tmstmp_ymdhms_to_arr(ptr_st_trd_rply->st_timestmp_dmyhms,st_i_trdbk.c_trd_dt);
  
  if(i_rec_cnt == 2)
  {
    if(DEBUG_MSG_LVL_3)
    {
     fn_userlog(c_ServiceName,"Inside FTT insert ");
    }
    sprintf ( c_trg_filter, "FFO_FILTER=='BFO'" );    
    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Inserting Exchange Ack :%sl",st_i_ordbk.c_xchng_ack);
      fn_userlog(c_ServiceName,"Before Inserting Pipe Id      :%s:",c_pipe_id);
      fn_userlog(c_ServiceName,"Before Inserting Token id     :%ld:",l_scrip_cd);
      fn_userlog(c_ServiceName,"Before Inserting Trade No     :%ld:",l_trd_nmbr);
      fn_userlog(c_ServiceName,"Before Inserting Trd Dt       :%s:",st_i_trdbk.c_trd_dt);
      fn_userlog(c_ServiceName,"Before Inserting Executed Qty :%ld:",l_exctd_qty);
      fn_userlog(c_ServiceName,"Before Inserting Executed Rate:%ld:",l_exctd_rt);
      fn_userlog(c_ServiceName,"Before Inserting Jiffy        :%lf:",st_i_trdbk.d_jiffy);
    } 
    
    EXEC SQL
      SELECT count(1)
        INTO :i_ftt_count
        FROM FTT_FO_TMP_TRD
       WHERE FTT_ACK_NMBR = :st_i_ordbk.c_xchng_ack
        AND  FTT_PIPE_ID  = :c_pipe_id
        AND  FTT_XCHNGTRD_NO = :l_trd_nmbr
        AND  FTT_PRCSD_FLG ='N'; 
    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
     fn_errlog ( c_ServiceName, "S31010",SQLMSG, c_err_msg);
     return -1;
    }      
    if( i_ftt_count > 0 )
    {
     fn_userlog(c_ServiceName," UnProcessed Record already exists in FTT ");
     return 2; 
    }
    i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );
    if ( i_trnsctn == -1)
    {
      fn_errlog(c_ServiceName,"L31275", LIBMSG, c_err_msg);
      return -1;
    }
 
    EXEC SQL
     INSERT INTO ftt_fo_tmp_trd
                 (FTT_ACK_NMBR,
                  FTT_PIPE_ID,
                  FTT_TOKEN_NO,
                  FTT_XCHNGTRD_NO,
                  FTT_TRD_TM,
                  FTT_EXCTD_QTY,
                  FTT_EXCTD_RT,
                  FTT_JIFFY,
                  FTT_PRCSD_FLG,
                  FTT_STREAM_NO,
                  FTT_XCHNG_CD)
     				VALUES
     						 ( 
       						:st_i_ordbk.c_xchng_ack,
       						:c_pipe_id,
      					  :l_scrip_cd,
     						  :l_trd_nmbr,
       						to_date ( :st_i_trdbk.c_trd_dt, 'DD-Mon-yyyy hh24:mi:ss' ),
      				  	:l_exctd_qty,
       						:l_exctd_rt,
      					  :l_msg_tag,
      						'N',
       						'0',
      						:c_xchng_cd 
     						 );
    if ( SQLCODE != 0 )
    {
     fn_errlog ( c_ServiceName, "S31015",SQLMSG, c_err_msg);
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     return -1;
    } 
    i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);
    if ( i_ch_val == -1 )
    {
      fn_errlog(c_ServiceName,"L31280", LIBMSG, c_err_msg);
      return -1;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Posting Trigger TRG_PRCS_TRD");
    }

    fn_pst_trg(c_ServiceName,"TRG_PRCS_TRD","TRG_PRCS_TRD",c_trg_filter);

    return 0;

	} /*** End of i_rec_cnt == 2 ***/ 

	i_trnsctn = fn_begintran(c_ServiceName, c_err_msg ); 
  if ( i_trnsctn == -1)
  {
    fn_errlog(c_ServiceName,"L31285", LIBMSG, c_err_msg);
    return -1;
  }

	strcpy ( st_seq.c_pipe_id, st_i_ordbk.c_pipe_id );
  strcpy ( st_seq.c_trd_dt, ( char * )c_trd_dt );

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Pipe ID Is :%s:",st_seq.c_pipe_id);
    fn_userlog(c_ServiceName,"Trade Date Is :%s:",st_seq.c_trd_dt);
  }


  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_seq.c_rout_crt,c_rout_str);
  st_seq.c_rqst_typ = GET_TRD_SEQ;

	i_ch_val = fn_call_svc ( c_ServiceName,
                           c_err_msg,
                           &st_seq,
                           &st_seq,
                           "vw_sequence",
                           "vw_sequence",
                           sizeof ( st_seq ),
                           sizeof ( st_seq ),
                           0,
                           "SFO_GET_SEQ" );

  if ( i_ch_val != SUCC_BFR )
  {
    fn_errlog(c_ServiceName,"L31290", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }

	if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Sequence Number Is :%ld:",st_seq.l_seq_num);
    fn_userlog(c_ServiceName,"Trade Reference Is :%s:",c_trd_ref);
    fn_userlog(c_ServiceName,"Pipe ID Is :%s:",c_pipe_id);
  	fn_userlog(c_ServiceName,"Sequence Number Is :%ld:",st_seq.l_seq_num);
  	fn_userlog(c_ServiceName,"Trade Reference Is :%s:",c_trd_ref);
  	fn_userlog(c_ServiceName,"Pipe ID Is :%s:",c_pipe_id);
  }


	sprintf ( st_i_trdbk.c_trd_rfrnc, "%s%s%08ld",c_trd_ref, c_pipe_id, st_seq.l_seq_num );
  strcpy ( st_i_trdbk.c_cln_mtch_accnt , st_i_ordbk.c_cln_mtch_accnt );
  strcpy ( c_mtch_accnt , st_i_ordbk.c_cln_mtch_accnt );
  strcpy ( st_i_trdbk.c_xchng_cd , st_i_ordbk.c_xchng_cd );
  st_i_trdbk.c_prd_typ = st_i_ordbk.c_prd_typ;
  strcpy ( st_i_trdbk.c_undrlyng , st_i_ordbk.c_undrlyng );
  strcpy ( st_i_trdbk.c_expry_dt , st_i_ordbk.c_expry_dt );
  st_i_trdbk.c_exrc_typ = st_i_ordbk.c_exrc_typ;
  st_i_trdbk.c_opt_typ = st_i_ordbk.c_opt_typ;
  st_i_trdbk.l_strike_prc = st_i_ordbk.l_strike_prc;
  st_i_trdbk.c_ctgry_indstk = st_i_ordbk.c_ctgry_indstk;
  strcpy ( st_i_trdbk.c_ordr_rfrnc , st_i_ordbk.c_ordr_rfrnc );
  strcpy ( st_i_trdbk.c_xchng_ack , st_i_ordbk.c_xchng_ack );
  st_i_trdbk.l_xchng_trd_no = l_trd_nmbr;

  /** fn_tmstmp_ymdhms_to_arr(ptr_st_trd_rply->st_timestmp_dmyhms,st_i_trdbk.c_trd_dt); ****/

  st_i_trdbk.c_trd_flw    = st_i_ordbk.c_ordr_flw;
  st_i_trdbk.l_exctd_qty  = l_exctd_qty;
  st_i_trdbk.l_exctd_rt   = l_exctd_rt;
  st_i_trdbk.l_dwnld_flg  = i_dwnld_flg;

  MEMSET(st_i_trdbk.d_jiffy);


  EXEC SQL
    SELECT  BSE_EBA_JIFFY.nextval
    INTO    :st_i_trdbk.d_jiffy
    FROM    DUAL;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName,"L31295", SQLMSG, c_err_msg);
    return -1;
  }
 
  
  fn_userlog(c_ServiceName,"BSE Trade Book Jiffy Is :%lf:",st_i_trdbk.d_jiffy);

  st_i_trdbk.l_ca_lvl =  0 ;      /***  STREAM NO. IS HARD CODED TO 0 ***/

  strcpy(st_i_trdbk.c_rout_crt,c_rout_str);

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Trade Reference Is :%s:",st_i_trdbk.c_trd_rfrnc);
    fn_userlog(c_ServiceName,"Match Account Is :%s:",st_i_trdbk.c_cln_mtch_accnt);
    fn_userlog(c_ServiceName,"Exchange Code Is :%s:",st_i_trdbk.c_xchng_cd);
    fn_userlog(c_ServiceName,"Product Type Is :%c:",st_i_trdbk.c_prd_typ);
    fn_userlog(c_ServiceName,"Underlying Is :%s:",st_i_trdbk.c_undrlyng);
    fn_userlog(c_ServiceName,"Expiry Date Is :%s:",st_i_trdbk.c_expry_dt);
    fn_userlog(c_ServiceName,"Exercise Type Is :%c:",st_i_trdbk.c_exrc_typ);
    fn_userlog(c_ServiceName,"Option Type Is :%c:",st_i_trdbk.c_opt_typ);
    fn_userlog(c_ServiceName,"Strike Price is :%ld:",st_i_trdbk.l_strike_prc);
    fn_userlog(c_ServiceName,"IndexStock Is :%c:",st_i_trdbk.c_ctgry_indstk);
    fn_userlog(c_ServiceName,"Order Reference No. Is :%s:",st_i_trdbk.c_ordr_rfrnc);
    fn_userlog(c_ServiceName,"Exchange Ack Is :%s:",st_i_trdbk.c_xchng_ack);
    fn_userlog(c_ServiceName,"Trade No. Is :%ld:",st_i_trdbk.l_xchng_trd_no);
    fn_userlog(c_ServiceName,"Trade Date Is :%s:",st_i_trdbk.c_trd_dt);
    fn_userlog(c_ServiceName,"Trade Flow Is :%c:",st_i_trdbk.c_trd_flw);
    fn_userlog(c_ServiceName,"In TRD_CONF, the stream number receieved from exchange is :%ld:",st_i_trdbk.l_ca_lvl);
    fn_userlog(c_ServiceName,"Executed Qty Is :%ld:",st_i_trdbk.l_exctd_qty);
    fn_userlog(c_ServiceName,"Executed Rate Is :%ld:",st_i_trdbk.l_exctd_rt);
    fn_userlog(c_ServiceName,"DownLoad flag Is :%ld:",st_i_trdbk.l_dwnld_flg);
    fn_userlog(c_ServiceName,"Jiffy Is :%lf:",st_i_trdbk.d_jiffy);
  }


  strcpy(st_i_trdbk.c_user_id,st_i_ordbk.c_user_id);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"USER ID IS  :%s:",st_i_trdbk.c_user_id);
    fn_userlog(c_ServiceName,"CALLING SFO_UPD_TRDBK");
  }

  st_i_trdbk.c_oprn_typ = INSERT_TRADE_CONF;

	i_ch_val = fn_Bupd_trdbk	( c_ServiceName, 
                           		c_err_msg,
                           		c_usr_id,
                           		&st_i_trdbk
                        		);

 	if ( ( i_ch_val != SUCC_BFR ) &&
  	    ( i_ch_val != RECORD_ALREADY_PRCSD ) )
 	{
   	fn_errlog(c_ServiceName,"L31300", LIBMSG, c_err_msg);
   	fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
   	return -1;
 	}
 	else if ( i_ch_val == RECORD_ALREADY_PRCSD )
 	{
   	fn_userlog ( c_ServiceName, "Record already processed" );
   	fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
   	return 0;
 	}

	i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);

  if ( i_ch_val == -1 )
  {
    fn_errlog(c_ServiceName,"L31305", LIBMSG, c_err_msg);
    return -1;
  }
	
	/*** if ( st_i_trdbk.c_prd_typ == OPTIONS ) Commented In Ver 1.5 ***/
	if ( st_i_trdbk.c_prd_typ == OPTIONS || st_i_trdbk.c_prd_typ == OPTIONPLUS )  /*** Ver 1.5 ***/
  {
    strcpy ( c_svc_name , "SFO_OPT_TCONF" );
  }
  /*** else if ( st_i_trdbk.c_prd_typ == FUTURES || st_i_trdbk.c_prd_typ	==	FUTURE_PLUS ) *** Commented in Ver 1.3 ***/
	else if ( st_i_trdbk.c_prd_typ == FUTURES || st_i_trdbk.c_prd_typ	==	FUTURE_PLUS  || st_i_trdbk.c_prd_typ	==	SLTP_FUTUREPLUS) /*** Ver 1.3 ***/
  {
    strcpy ( c_svc_name , "SFO_FUT_TCONF" );
  }

	strcpy(st_i_trdbk.c_rout_crt,c_rout_str);

	i_ch_val = fn_acall_svc ( c_ServiceName,
                            c_err_msg,
                            &st_i_trdbk,
                            "vw_tradebook",
                            sizeof ( st_i_trdbk ),
                            TPNOREPLY,
                            c_svc_name );
  if ( i_ch_val != 0 )
  {
    fn_errlog(c_ServiceName,"L31310", LIBMSG, c_err_msg);
    return -1;
  }

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName, "After futopt tconf");
  }

  return 0;
}

	
int fn_cnvrt_mrkttolmt (  struct st_mkrt_to_lmt_ord *ptr_cnvrt_mrkt_limt,
                          char *c_xchng_cd,
                          char *c_pipe_id,
                          char *c_rout_str,
                          char *c_trd_dt,
                          char *c_trd_ref,
                          int i_dwnld_flg,
                          char *c_ServiceName,
                          char *c_err_msg )

{
	int i_trnsctn;
  int i_ch_val;
  int i = 0;
  int i_err  [18];
  int i_ferr [18];

  long long  l_ack_nmbr;

  struct vw_orderbook st_i_ordbk;
  struct vw_xchngbook st_i_xchngbk;

  char c_svc_name [ 16 ];
  char c_mtch_accnt [10 + 1];
  char c_usr_id[16];
  char c_xchng_rmrks[256];

	c_upd_modifctn_cntr ='Y';			/***	Ver	1.1	***/

	MEMSET(st_i_xchngbk);
  MEMSET(c_xchng_rmrks);
  MEMSET(st_i_ordbk);

  if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"BSE Inside Function Convert Market To Limit.");
	}

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"I/P Exchange Code Is :%s:",c_xchng_cd);
    fn_userlog(c_ServiceName,"I/P Pipe ID Is :%s:",c_pipe_id);
    fn_userlog(c_ServiceName,"I/P Trade Date :%s:",c_trd_dt);
  }
	sleep(1);                     /** ver 1.6 sleep added **/
  strcpy(st_i_xchngbk.c_xchng_cd,c_xchng_cd);
  strcpy(st_i_xchngbk.c_pipe_id,c_pipe_id);
  strcpy(st_i_xchngbk.c_mod_trd_dt,c_trd_dt);

  st_i_xchngbk.l_ord_seq =  fn_swap_long(ptr_cnvrt_mrkt_limt->l_msg_tag);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Sequence Number Is :%ld:",st_i_xchngbk.l_ord_seq);
  }

  st_i_xchngbk.c_oprn_typ = FOR_RCV;

	i_ch_val = fn_Bseq_to_omd	( &st_i_xchngbk,
                              c_ServiceName,
                              c_err_msg
                            );

  if ( i_ch_val != 0 )
  {
    fn_errlog(c_ServiceName,"L31315", LIBMSG, c_err_msg);
    return -1;
  }

  strcpy(st_i_ordbk.c_ordr_rfrnc,st_i_xchngbk.c_ordr_rfrnc);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Order Reference Is :%s:",st_i_ordbk.c_ordr_rfrnc);
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
    fn_userlog(c_ServiceName,"RMS Processed FLG :%c:",st_i_xchngbk.c_rms_prcsd_flg); /** Ver 1.1 ***/
  }
  
  /*** Ver 1.1 *** Before processing conversion msg, first check whether ack is processed,
                   If not processed then write conversion msg in ERROR Q *****/
 
  if( st_i_xchngbk.c_rms_prcsd_flg =='N')
  {
   fn_userlog(c_ServiceName,"Error: Ack not Processed");
   return -1;
  }
  /**** Ver 1.1 *** Ends ****/
  
  strcpy(st_i_ordbk.c_rout_crt,c_rout_str);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName, "Before Call To SFO_REF_TO_ORD");
  }

  st_i_ordbk.c_oprn_typ = FOR_VIEW;


  i_ch_val = fn_Bref_to_ord ( &st_i_ordbk,
                              c_ServiceName,
                              c_err_msg
                            );

  if ( i_ch_val != 0)
  {
    fn_errlog(c_ServiceName,"L31320", LIBMSG, c_err_msg);
    return -1;
  }

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Order Reference Is :%s:",st_i_ordbk.c_ordr_rfrnc);
    fn_userlog(c_ServiceName,"Modification Counter Is :%ld:", st_i_ordbk.l_mdfctn_cntr);
    fn_userlog(c_ServiceName,"Exchange Code Is :%s:",st_i_ordbk.c_xchng_cd);
    fn_userlog(c_ServiceName,"Pipe ID Is :%s:",st_i_ordbk.c_pipe_id);
    fn_userlog(c_ServiceName,"Match Account Is :%s:",st_i_ordbk.c_cln_mtch_accnt);
  }
  
  fn_userlog(c_ServiceName,"Before Call to fn_conv_iwtl_pos ");
 
  i_ch_val = fn_conv_iwtl_pos( &st_i_ordbk,
                               ptr_cnvrt_mrkt_limt->l_cnvtdrate,
                               c_ServiceName,
                               c_err_msg
                               );
  if ( i_ch_val != 0)
  {
   fn_errlog(c_ServiceName,"L31325", LIBMSG, c_err_msg);
   return -1;
  }
  fn_userlog(c_ServiceName,"After Call to fn_conv_iwtl_pos ");
 
  strcpy ( st_i_xchngbk.c_ordr_rfrnc, st_i_ordbk.c_ordr_rfrnc );
  strcpy ( st_i_xchngbk.c_xchng_cd, st_i_ordbk.c_xchng_cd );
  strcpy ( st_i_xchngbk.c_pipe_id, st_i_ordbk.c_pipe_id );
  strcpy ( c_mtch_accnt, st_i_ordbk.c_cln_mtch_accnt);
  strcpy (st_i_xchngbk.c_valid_dt,st_i_xchngbk.c_mod_trd_dt);
  st_i_xchngbk.l_mdfctn_cntr    =	st_i_xchngbk.l_mdfctn_cntr + 1 ;
  st_i_xchngbk.c_plcd_stts      = ACCEPT;
  st_i_xchngbk.c_rms_prcsd_flg  = NOT_PROCESSED;
  st_i_xchngbk.l_ors_msg_typ    = ORS_MOD_ORD_ACPT;
  st_i_xchngbk.l_ord_seq        = 0;
  st_i_xchngbk.c_ord_typ        = '*';
  st_i_xchngbk.c_sprd_ord_ind   = '*';
  st_i_xchngbk.l_ord_tot_qty    = st_i_ordbk.l_ord_tot_qty;
  st_i_xchngbk.l_ord_lmt_rt     = fn_swap_long(ptr_cnvrt_mrkt_limt->l_cnvtdrate);
  st_i_xchngbk.l_bit_flg        = 0;
  st_i_xchngbk.c_slm_flg        = 'L';
  st_i_ordbk.l_ord_lmt_rt      	= st_i_xchngbk.l_ord_lmt_rt;
	st_i_ordbk.l_mdfctn_cntr			=	st_i_xchngbk.l_mdfctn_cntr;
  strcpy(st_i_xchngbk.c_xchng_rmrks,"Converted from Market to limit order");

	/*** if ( st_i_ordbk.c_prd_typ == FUTURES	||	st_i_ordbk.c_prd_typ	==	FUTURE_PLUS )	*** Commented in Ver 1.3 ***/
	if ( st_i_ordbk.c_prd_typ == FUTURES	||	st_i_ordbk.c_prd_typ	==	FUTURE_PLUS ||	st_i_ordbk.c_prd_typ	==	SLTP_FUTUREPLUS )	/*** Ver 1.3 ***/
   {
    strcpy( c_svc_name , "SFO_FUT_ACK" );
  }
  else
  {
    strcpy( c_svc_name , "SFO_OPT_ACK" );
  }

  fn_userlog(c_ServiceName,"Sequence Number Is :%ld:",st_i_xchngbk.l_ord_seq);

  st_i_xchngbk.l_dwnld_flg = i_dwnld_flg;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Down Load Flag Is :%ld:",st_i_xchngbk.l_dwnld_flg);
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }


  st_i_xchngbk.c_oprn_typ = INSERTION_ON_ORDER_FTE;

  if(DEBUG_MSG_LVL_3)
  {
   	fn_userlog(c_ServiceName," st_i_xchngbk.c_ordr_rfrn :%s:",st_i_xchngbk.c_ordr_rfrnc);
   	fn_userlog(c_ServiceName," st_i_xchngbk.c_xchng_cd  ;%s:",st_i_xchngbk.c_xchng_cd);
   	fn_userlog(c_ServiceName," st_i_xchngbk.c_pipe_id   :%s:",st_i_xchngbk.c_pipe_id);
   	fn_userlog(c_ServiceName," st_i_xchngbk.l_mdfctn_cntr :%ld:",st_i_xchngbk.l_mdfctn_cntr);
   	fn_userlog(c_ServiceName," st_i_xchngbk.c_plcd_stts   :%c:",st_i_xchngbk.c_plcd_stts);
   	fn_userlog(c_ServiceName," st_i_xchngbk.c_rms_prcsd_flg :%c:",st_i_xchngbk.c_rms_prcsd_flg);
   	fn_userlog(c_ServiceName," st_i_xchngbk.l_ors_msg_typ :%ld:",st_i_xchngbk.l_ors_msg_typ);
   	fn_userlog(c_ServiceName," st_i_xchngbk.l_ord_seq :%ld:",st_i_xchngbk.l_ord_seq);
   	fn_userlog(c_ServiceName," st_i_xchngbk.l_ord_tot_qty :%ld:",st_i_xchngbk.l_ord_tot_qty);
   	fn_userlog(c_ServiceName," st_i_xchngbk.l_ord_lmt_rt  :%ld:",st_i_xchngbk.l_ord_lmt_rt);
   	fn_userlog(c_ServiceName," st_i_xchngbk.l_bit_flg   :%ld:",st_i_xchngbk.l_bit_flg);
   	fn_userlog(c_ServiceName," st_i_xchngbk.c_xchng_rmrks :%s:",st_i_xchngbk.c_xchng_rmrks);
   	fn_userlog(c_ServiceName," st_i_xchngbk.l_dwnld_flg  :%ld:",st_i_xchngbk.l_dwnld_flg);
   	fn_userlog(c_ServiceName," st_i_xchngbk.c_mod_trd_dt :%s:",st_i_xchngbk.c_mod_trd_dt);
   	fn_userlog(c_ServiceName," st_i_xchngbk.c_valid_dt   :%s:",st_i_xchngbk.c_valid_dt);
   	fn_userlog(c_ServiceName," st_i_xchngbk.c_ack_tm     :%s:",st_i_xchngbk.c_ack_tm);
   	fn_userlog(c_ServiceName," st_i_xchngbk.d_jiffy      :%lf:",st_i_xchngbk.d_jiffy);
   	fn_userlog(c_ServiceName," st_i_xchngbk.l_xchng_can_qty :%ld:",st_i_xchngbk.l_xchng_can_qty);
   	fn_userlog(c_ServiceName," st_i_xchngbk.c_ord_typ :%c:",st_i_xchngbk.c_ord_typ);
  }

  fn_userlog(c_ServiceName,"Before Call To Exchange Book Update.");

  i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1)
  {
    fn_errlog(c_ServiceName,"L31330", LIBMSG, c_err_msg);
    return -1;
  }

	i_ch_val = fn_Bupd_xchngbk	( &st_i_xchngbk,
                                c_ServiceName,
                                c_err_msg
                              );

  if( ( i_ch_val != 0) && ( i_ch_val != RECORD_ALREADY_PRCSD ) )
  {
    fn_errlog(c_ServiceName,"L31335", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }
  else if ( i_ch_val == RECORD_ALREADY_PRCSD )
  {
    fn_userlog ( c_ServiceName, "Record already processed" );
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return 0;
  }

  l_ack_nmbr =  fn_swap_ulnglng(ptr_cnvrt_mrkt_limt->ll_order_id);

  sprintf( st_i_ordbk.c_xchng_ack,"%lld",l_ack_nmbr);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Exchange Ack Is :%lld:",l_ack_nmbr);
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
    fn_userlog(c_ServiceName,"Order Book Exchange Ack Is :%s:",st_i_ordbk.c_xchng_ack);
		fn_userlog(c_ServiceName,"Cnvrt Market To Limit st_i_ordbk.l_mdfctn_cntr Is :%ld:",st_i_ordbk.l_mdfctn_cntr);
		fn_userlog(c_ServiceName,"Cnvrt Market To Limit st_i_ordbk.c_ordr_rfrnc Is :%s:",st_i_ordbk.c_ordr_rfrnc);
  }

  if( c_upd_modifctn_cntr == 'Y' )
  {
   EXEC SQL
		UPDATE	FOD_FO_ORDR_DTLS
		SET			FOD_MDFCTN_CNTR	=	:st_i_ordbk.l_mdfctn_cntr
		WHERE		FOD_ORDR_RFRNC	=	:st_i_ordbk.c_ordr_rfrnc;
 
 	 if ( SQLCODE !=	0	)
	 {
		fn_errlog(c_ServiceName,"L31340", SQLMSG, c_err_msg);
 		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
 		return -1;
	 }
  }
  
  i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);

  if ( i_ch_val == -1 )
  {
    fn_errlog(c_ServiceName,"L31345", LIBMSG, c_err_msg);
    return -1;
  }
	
	strcpy(st_i_xchngbk.c_rout_crt,c_rout_str);
	
	i_ch_val = fn_acall_svc (	c_ServiceName,
                            c_err_msg,
                            &st_i_xchngbk,
                            "vw_xchngbook",
                            sizeof ( st_i_xchngbk ),
                            TPNOREPLY,
                            c_svc_name
 													);
  if ( i_ch_val != 0 )
  {
    fn_errlog(c_ServiceName,"L31350", LIBMSG, c_err_msg);
    return -1;
  }

  fn_userlog(c_ServiceName,"After Complition Of Conversion From Market To Limit.");
	

	return 0;
}


int fn_Bupd_xchngbk	( struct vw_xchngbook *ptr_st_xchngbook,
                    	char *c_ServiceName,
                    	char *c_err_msg
										)
{

	EXEC SQL BEGIN DECLARE SECTION;
    varchar c_xchng_rmrks [ 256 ];
  EXEC SQL END DECLARE SECTION;


  int i_rec_exists = 0;

  long  l_seq_prsnt = 0;

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Inside Function fn_upd_Bxchngbk");
    fn_userlog(c_ServiceName,"Order Reference Is :%s:",ptr_st_xchngbook->c_ordr_rfrnc);
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Modification Counter Is :%ld:",ptr_st_xchngbook->l_mdfctn_cntr);
    fn_userlog(c_ServiceName,"Placed Status Is ;%c:",ptr_st_xchngbook->c_plcd_stts);
    fn_userlog(c_ServiceName,"RMS Processed Flag Is :%c:",ptr_st_xchngbook->c_rms_prcsd_flg);
    fn_userlog(c_ServiceName,"ORS Msg Typ Is :%ld:",ptr_st_xchngbook->l_ors_msg_typ);
    fn_userlog(c_ServiceName,"Ack Time Is :%s:",ptr_st_xchngbook->c_ack_tm);
    fn_userlog(c_ServiceName,"Stream No. Is :%ld:",ptr_st_xchngbook->l_bit_flg);
  }

	switch ( ptr_st_xchngbook->c_oprn_typ )
  {
  	case UPDATION_ON_EXCHANGE_RESPONSE:

    	if ( ptr_st_xchngbook->l_dwnld_flg == DOWNLOAD )
      {
				if(DEBUG_MSG_LVL_0)
				{
        	fn_userlog(c_ServiceName,"BSE INSIDE DOWNLOAD.");
        	fn_userlog(c_ServiceName,"BSE c_xchng_cd Is :%s:",ptr_st_xchngbook->c_xchng_cd);
        	fn_userlog(c_ServiceName,"BSE c_pipe_id Is :%s:",ptr_st_xchngbook->c_pipe_id);
        	fn_userlog(c_ServiceName,"BSE l_ord_seq Is :%ld:",ptr_st_xchngbook->l_ord_seq);
        	fn_userlog(c_ServiceName,"BSE l_bit_flg Is :%ld:",ptr_st_xchngbook->l_bit_flg);
        	fn_userlog(c_ServiceName,"BSE Order Reference Is :%s:",ptr_st_xchngbook->c_ordr_rfrnc);
				}

        EXEC SQL
          SELECT 1
          INTO :i_rec_exists
          FROM  FXB_FO_XCHNG_BOOK
          WHERE FXB_XCHNG_CD  		= :ptr_st_xchngbook->c_xchng_cd
          AND   FXB_PIPE_ID   		= :ptr_st_xchngbook->c_pipe_id
          AND   FXB_ORDR_SQNC 		= :ptr_st_xchngbook->l_ord_seq
					AND		FXB_ORDR_RFRNC		=	:ptr_st_xchngbook->c_ordr_rfrnc			/***	Ver	1.1	***/
          AND   FXB_STREAM_NO 		= :ptr_st_xchngbook->l_bit_flg
          AND   FXB_RMS_PRCSD_FLG = 'P';

        if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
        {
          fn_errlog ( c_ServiceName, "S31020", SQLMSG, c_err_msg );
          return -1;
        }
        if ( i_rec_exists == 1 )
        {
          strcpy( c_err_msg, "Record already Processed" );
          return RECORD_ALREADY_PRCSD;
        }

			}

    	if(DEBUG_MSG_LVL_3)
    	{
      	fn_userlog(c_ServiceName,"ptr_st_xchngbook->c_xchng_rmrks :%s:",ptr_st_xchngbook->c_xchng_rmrks);
    	}

    	strcpy ( (char *)c_xchng_rmrks.arr,ptr_st_xchngbook->c_xchng_rmrks );
    	rtrim ( c_xchng_rmrks.arr );
    	SETLEN ( c_xchng_rmrks );
		
			if(DEBUG_MSG_LVL_3)
			{
		 		fn_userlog(c_ServiceName,"BSE ptr_st_xchngbook->c_plcd_stts Is :%c:",ptr_st_xchngbook->c_plcd_stts);
    		fn_userlog(c_ServiceName,"BSE ptr_st_xchngbook->c_rms_prcsd_flg Is :%c:",ptr_st_xchngbook->c_rms_prcsd_flg);
    		fn_userlog(c_ServiceName,"BSE ptr_st_xchngbook->l_ors_msg_typ Is :%ld:",ptr_st_xchngbook->l_ors_msg_typ);
    		fn_userlog(c_ServiceName,"BSE ptr_st_xchngbook->c_ack_tm Is :%s:",ptr_st_xchngbook->c_ack_tm);
    		fn_userlog(c_ServiceName,"BSE ptr_st_xchngbook->c_xchng_rmrks Is :%s:",ptr_st_xchngbook->c_xchng_rmrks);
    		fn_userlog(c_ServiceName,"BSE ptr_st_xchngbook->d_jiffy Is :%lf:",ptr_st_xchngbook->d_jiffy);
    		fn_userlog(c_ServiceName,"BSE ptr_st_xchngbook->l_bit_flg Is :%ld:",ptr_st_xchngbook->l_bit_flg);
			}

    	EXEC SQL
      	UPDATE  FXB_FO_XCHNG_BOOK
      	SET  		FXB_PLCD_STTS       = :ptr_st_xchngbook->c_plcd_stts,
           			FXB_RMS_PRCSD_FLG   = :ptr_st_xchngbook->c_rms_prcsd_flg,
           			FXB_ORS_MSG_TYP     = :ptr_st_xchngbook->l_ors_msg_typ,
           			FXB_ACK_TM          = to_date( :ptr_st_xchngbook->c_ack_tm,'DD-Mon-yyyy hh24:mi:ss' ),
           			FXB_XCHNG_RMRKS     = rtrim(fxb_xchng_rmrks)||:ptr_st_xchngbook->c_xchng_rmrks,
           			FXB_JIFFY           = :ptr_st_xchngbook->d_jiffy,
           			FXB_STREAM_NO       = :ptr_st_xchngbook->l_bit_flg
      	WHERE  	FXB_ORDR_RFRNC    = :ptr_st_xchngbook->c_ordr_rfrnc
      	AND  		FXB_MDFCTN_CNTR     = :ptr_st_xchngbook->l_mdfctn_cntr;

    break;

		case UPDATE_PLACED_STTS:

      i_rec_exists = 0;

      if ( ptr_st_xchngbook->l_dwnld_flg == DOWNLOAD )
      {
        EXEC SQL
          SELECT 1
          INTO :i_rec_exists
          FROM dual
          WHERE EXISTS (  SELECT FXB_ORDR_RFRNC
                          FROM FXB_FO_XCHNG_BOOK
                          WHERE FXB_ORDR_RFRNC = :ptr_st_xchngbook->c_ordr_rfrnc
                          AND   FXB_JIFFY >= :ptr_st_xchngbook->d_jiffy
                          AND  FXB_STREAM_NO = :ptr_st_xchngbook->l_bit_flg);

        if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
        {
          fn_errlog ( c_ServiceName, "S31025",SQLMSG, c_err_msg );
          return -1;
        }

        if ( i_rec_exists == 1 )
        {
          strcpy(c_err_msg, "Record already Processed" );
          return RECORD_ALREADY_PRCSD;
        }

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"The Order reference is :%s:",ptr_st_xchngbook->c_ordr_rfrnc);
        }

        EXEC SQL
          SELECT FOD_MDFCTN_CNTR
          INTO :ptr_st_xchngbook->l_mdfctn_cntr
          FROM FOD_FO_ORDR_DTLS
          WHERE FOD_ORDR_RFRNC = :ptr_st_xchngbook->c_ordr_rfrnc;
		
				 if ( SQLCODE != 0 )
        {
          if (SQLCODE == NO_DATA_FOUND)
          {
            EXEC SQL
              SELECT FEB_MDFCTN_CNTR
              INTO :ptr_st_xchngbook->l_mdfctn_cntr
              FROM FEB_FO_EXRC_RQST_BOOK
              WHERE FEB_EXRC_RFRNC_NO = :ptr_st_xchngbook->c_ordr_rfrnc;

            if ( SQLCODE != 0 )
            {
              fn_errlog ( c_ServiceName, "S31030",SQLMSG, c_err_msg );
              fn_userlog(c_ServiceName,"Failed for Order reference :%s:",ptr_st_xchngbook->c_ordr_rfrnc);
              return -1;
            }
          }
          else
          {
              fn_errlog ( c_ServiceName, "S31035",SQLMSG, c_err_msg );
              fn_userlog(c_ServiceName,"Failed for Order reference :%s:",ptr_st_xchngbook->c_ordr_rfrnc);
              return -1;
          }
        }
      }

    EXEC SQL
      UPDATE  FXB_FO_XCHNG_BOOK
      SET  FXB_PLCD_STTS   = 'E',
           FXB_JIFFY       = :ptr_st_xchngbook->d_jiffy,
           FXB_STREAM_NO   = :ptr_st_xchngbook->l_bit_flg
      WHERE  FXB_ORDR_RFRNC  = :ptr_st_xchngbook->c_ordr_rfrnc
      AND  FXB_MDFCTN_CNTR = :ptr_st_xchngbook->l_mdfctn_cntr;

     if ( SQLCODE != 0 )
     {
        fn_errlog ( c_ServiceName, "S31040",SQLMSG, c_err_msg );
        return -1;
     }


  break;

	case  INSERTION_ON_ORDER_FTE  :

    fn_userlog(c_ServiceName,"BSE Inside INSERTION_ON_ORDER_FTE.");

    if ( ptr_st_xchngbook->l_dwnld_flg == DOWNLOAD  &&  ptr_st_xchngbook->l_ord_seq !=  0 )
    {
      fn_userlog(c_ServiceName,"BSE DownLoad Flag Is :%ld:", ptr_st_xchngbook->l_dwnld_flg);
      fn_userlog(c_ServiceName,"BSE Order Sequence Number Is :%ld:",ptr_st_xchngbook->l_ord_seq);

      EXEC SQL
        SELECT 1
        INTO :i_rec_exists
        FROM	FXB_FO_XCHNG_BOOK
        WHERE	FXB_ORDR_SQNC 		= :ptr_st_xchngbook->l_ord_seq
        AND 	FXB_XCHNG_CD 			= :ptr_st_xchngbook->c_xchng_cd
        AND 	FXB_PIPE_ID 			= :ptr_st_xchngbook->c_pipe_id
        AND 	FXB_ORDR_RFRNC    = :ptr_st_xchngbook->c_ordr_rfrnc     /***  Ver 1.1 ***/
        AND 	FXB_STREAM_NO 		= :ptr_st_xchngbook->l_bit_flg
        AND 	FXB_RMS_PRCSD_FLG = 'P';

      if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
      {
        fn_errlog ( c_ServiceName, "S31045", SQLMSG, c_err_msg );
        tpfree ( ( char * ) ptr_st_xchngbook );
        return -1;
      }

      if ( i_rec_exists == 1 )
      {
				tpfree ( ( char * ) ptr_st_xchngbook );
        strcpy( c_err_msg, "Record already Processed" );
        fn_errlog ( c_ServiceName, "S31050", DEFMSG, c_err_msg );
        /***	return -1;	Commented In Ver 1.1	***/
				return	RECORD_ALREADY_PRCSD;			/***	Added In Ver	1.1	***/
      }
   }

	 if(DEBUG_MSG_LVL_3)
	 {
     fn_userlog(c_ServiceName," ptr_st_xchngbook->l_xchng_can_qty :%ld:",ptr_st_xchngbook->l_xchng_can_qty);
	 }
	
	 if ( ptr_st_xchngbook->l_dwnld_flg == DOWNLOAD  &&  ptr_st_xchngbook->l_ord_seq ==  0 )
    {
      EXEC SQL
        SELECT  count(*)
        INTO    :l_seq_prsnt
        FROM    FXB_FO_XCHNG_BOOK
        WHERE   FXB_ORDR_RFRNC  = :ptr_st_xchngbook->c_ordr_rfrnc
        AND     FXB_ORDR_SQNC   = 0
        AND     FXB_PIPE_ID     = :ptr_st_xchngbook->c_pipe_id;

      if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
      {
        fn_errlog ( c_ServiceName, "S31055", SQLMSG, c_err_msg );
        tpfree ( ( char * ) ptr_st_xchngbook );
        return -1;
      }

      if ( l_seq_prsnt > 0 )
      {
        c_upd_modifctn_cntr = 'N';  
        
        EXEC SQL
          UPDATE  FXB_FO_XCHNG_BOOK
          SET     FXB_XCHNG_RMRKS = rtrim(fxb_xchng_rmrks)||:ptr_st_xchngbook->c_xchng_rmrks
          WHERE   FXB_ORDR_RFRNC  = :ptr_st_xchngbook->c_ordr_rfrnc
          AND     FXB_MOD_TRD_DT  = :ptr_st_xchngbook->c_mod_trd_dt
          AND     FXB_ORDR_SQNC   = 0;
      }
			else
      {
        EXEC SQL
          INSERT INTO FXB_FO_XCHNG_BOOK
              (
                FXB_XCHNG_CD,
                FXB_ORDR_RFRNC,
                FXB_LMT_MRKT_SL_FLG,
                FXB_MDFCTN_CNTR,
                FXB_ORDR_VALID_DT,
                FXB_PIPE_ID,
                FXB_MOD_TRD_DT,
                FXB_ORDR_SQNC,
                FXB_PLCD_STTS,
                FXB_RMS_PRCSD_FLG,
                FXB_ORS_MSG_TYP,
                FXB_ACK_TM,
                FXB_XCHNG_RMRKS,
                FXB_RQST_TYP,
                FXB_JIFFY,
                FXB_ORDR_TOT_QTY,
                FXB_LMT_RT,
                FXB_XCHNG_CNCLD_QTY,
                FXB_STREAM_NO,
								FXB_ORDR_TYPE,
								FXB_SPRD_ORD_IND
              )
              VALUES
              (
                :ptr_st_xchngbook->c_xchng_cd,
                :ptr_st_xchngbook->c_ordr_rfrnc,
                :ptr_st_xchngbook->c_slm_flg,
                :ptr_st_xchngbook->l_mdfctn_cntr,
                to_date(:ptr_st_xchngbook->c_valid_dt,'DD-Mon-yyyy'),
                :ptr_st_xchngbook->c_pipe_id,
                to_date (:ptr_st_xchngbook->c_mod_trd_dt,'DD-Mon-yyyy'),
                0,
                :ptr_st_xchngbook->c_plcd_stts,
                :ptr_st_xchngbook->c_rms_prcsd_flg,
                :ptr_st_xchngbook->l_ors_msg_typ,
                to_date (:ptr_st_xchngbook->c_ack_tm,'DD-Mon-yyyy hh24:mi:ss'),
                :ptr_st_xchngbook->c_xchng_rmrks,
                'T',
                :ptr_st_xchngbook->d_jiffy,
                :ptr_st_xchngbook->l_ord_tot_qty,
                :ptr_st_xchngbook->l_ord_lmt_rt,
                :ptr_st_xchngbook->l_xchng_can_qty,
                :ptr_st_xchngbook->l_bit_flg,
								:ptr_st_xchngbook->c_ord_typ,
								:ptr_st_xchngbook->c_sprd_ord_ind
              );
        }
		  }
    else
    {
      EXEC SQL
          INSERT INTO FXB_FO_XCHNG_BOOK
              (
                FXB_XCHNG_CD,
                FXB_ORDR_RFRNC,
                FXB_LMT_MRKT_SL_FLG,
                FXB_MDFCTN_CNTR,
                FXB_ORDR_VALID_DT,
                FXB_PIPE_ID,
                FXB_MOD_TRD_DT,
                FXB_ORDR_SQNC,
                FXB_PLCD_STTS,
                FXB_RMS_PRCSD_FLG,
                FXB_ORS_MSG_TYP,
                FXB_ACK_TM,
                FXB_XCHNG_RMRKS,
                FXB_RQST_TYP,
                FXB_JIFFY,
                FXB_ORDR_TOT_QTY,
                FXB_LMT_RT,
                FXB_XCHNG_CNCLD_QTY,
                FXB_STREAM_NO,
		            FXB_ORDR_TYPE,
								FXB_SPRD_ORD_IND
              )
              VALUES
              (
                :ptr_st_xchngbook->c_xchng_cd,
                :ptr_st_xchngbook->c_ordr_rfrnc,
                :ptr_st_xchngbook->c_slm_flg,
                :ptr_st_xchngbook->l_mdfctn_cntr,
                to_date(:ptr_st_xchngbook->c_valid_dt,'DD-Mon-yyyy'),
                :ptr_st_xchngbook->c_pipe_id,
                to_date (:ptr_st_xchngbook->c_mod_trd_dt,'DD-Mon-yyyy'),
                0,
                :ptr_st_xchngbook->c_plcd_stts,
                :ptr_st_xchngbook->c_rms_prcsd_flg,
                :ptr_st_xchngbook->l_ors_msg_typ,
                to_date (:ptr_st_xchngbook->c_ack_tm,'DD-Mon-yyyy hh24:mi:ss'),
                :ptr_st_xchngbook->c_xchng_rmrks,
                'T',
                :ptr_st_xchngbook->d_jiffy,
                :ptr_st_xchngbook->l_ord_tot_qty,
                :ptr_st_xchngbook->l_ord_lmt_rt,
                :ptr_st_xchngbook->l_xchng_can_qty,
                :ptr_st_xchngbook->l_bit_flg,
			          :ptr_st_xchngbook->c_ord_typ,
                :ptr_st_xchngbook->c_sprd_ord_ind
              );
      }

	 break;

	default :

    strcpy( c_err_msg, "Invalid Operation Type" );
    fn_errlog ( c_ServiceName, "S31060", DEFMSG, c_err_msg );
    return -1;
    break;

  }

  if(SQLCODE != 0)
  {
    fn_errlog ( c_ServiceName, "S31065", SQLMSG, c_err_msg );
    return -1;
  }

  return 0;
}

int fn_Bupd_ordrbk  ( struct vw_orderbook *ptr_st_orderbook,
                      char *c_ServiceName,
                      char *c_err_msg
                    )
{
  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog( c_ServiceName,"Function UPD_ORDRBK");
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName,"c_ordr_rfrnc:%s:", ptr_st_orderbook->c_ordr_rfrnc );
  	fn_userlog(c_ServiceName,"BSE ptr_st_orderbook->c_oprn_typ Is :%c:",ptr_st_orderbook->c_oprn_typ);
    fn_userlog ( c_ServiceName,"c_xchng_ack:%s:",ptr_st_orderbook->c_xchng_ack);
  }

	switch (ptr_st_orderbook->c_oprn_typ )
  {
    case UPDATE_XCHNG_RESPONSE :

      EXEC SQL
        UPDATE  FOD_FO_ORDR_DTLS
        SET     FOD_ACK_NMBR  = :ptr_st_orderbook->c_xchng_ack
        WHERE   FOD_ORDR_RFRNC= :ptr_st_orderbook->c_ordr_rfrnc;

    case UPDATE_ORDER_STATUS:

       EXEC SQL
        UPDATE  FOD_FO_ORDR_DTLS
        SET     FOD_ORDR_STTS = :ptr_st_orderbook->c_ordr_stts
        WHERE   FOD_ORDR_RFRNC= :ptr_st_orderbook->c_ordr_rfrnc;

      break;

    case UPDATE_XCHNG_RESP_DTLS_OT:

      EXEC SQL
        UPDATE  FOD_FO_ORDR_DTLS
        SET     FOD_LST_RQST_ACK_TM = to_date (:ptr_st_orderbook->c_ack_tm,'dd-mon-yyyy hh24:mi:ss' ),
                FOD_LMT_MRKT_SL_FLG = 'L',
                FOD_STP_LSS_TGR     = 0
        WHERE   FOD_ORDR_RFRNC      = :ptr_st_orderbook->c_ordr_rfrnc;

    break;

    case  UPDATION_ON_MRKTTOLMT :

     if( c_upd_modifctn_cntr == 'Y')
     {
				ptr_st_orderbook->l_mdfctn_cntr	=	ptr_st_orderbook->l_mdfctn_cntr	+	1;
		 }

		 fn_userlog(c_ServiceName,"Modification Flag Is :%c:",c_upd_modifctn_cntr);

     EXEC SQL
       UPDATE  FOD_FO_ORDR_DTLS
       SET     FOD_LMT_MRKT_SL_FLG = 'L',
               FOD_LMT_RT          = :ptr_st_orderbook->l_ord_lmt_rt,
          		 FOD_MDFCTN_CNTR     = :ptr_st_orderbook->l_mdfctn_cntr 
       WHERE   FOD_ORDR_RFRNC      = :ptr_st_orderbook->c_ordr_rfrnc;
    break;

    default :

    strcpy( c_err_msg, "Invalid Operation Type" );
    fn_errlog ( c_ServiceName, "S31070", DEFMSG, c_err_msg );
    return -1;
   break;

  }

	if(SQLCODE != 0)
  {
    fn_errlog ( c_ServiceName, "S31075", SQLMSG, c_err_msg );
    return -1;
  }

  return 0;

}
	

int fn_Bref_to_ord  ( struct vw_orderbook *ptr_st_orderbook,
                      char *c_ServiceName,
                      char *c_err_msg
                    )
{
	 EXEC SQL BEGIN DECLARE SECTION;
    short i_sprd_ord_rfrnc;
    short i_settlor;
    short i_ack_tm;
    short i_prev_ack_tm;
    short i_xchng_ack;
    short i_valid_dt;
  EXEC SQL END DECLARE SECTION;


  if( DEBUG_MSG_LVL_0 )
  {
    fn_userlog( c_ServiceName,"Inside Function fn_ref_to_ord");
    fn_userlog( c_ServiceName,"c_ordr_rfrnc:%s:",ptr_st_orderbook->c_ordr_rfrnc);
    fn_userlog( c_ServiceName,"Requested Operation :%c:",ptr_st_orderbook->c_oprn_typ);
  }

  MEMSET( ptr_st_orderbook->c_ctcl_id);

	EXEC SQL
      SELECT  FOD_CLM_MTCH_ACCNT,
              FOD_CTCL_ID ,
              FOD_CLNT_CTGRY,
              FOD_PIPE_ID,
              FOD_XCHNG_CD,
              FOD_PRDCT_TYP,
              FOD_UNDRLYNG,
              to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ),
              FOD_EXER_TYP,
              FOD_OPT_TYP,
              FOD_STRK_PRC,
              FOD_ORDR_FLW,
              FOD_LMT_MRKT_SL_FLG,
              FOD_DSCLSD_QTY,
              FOD_ORDR_TOT_QTY,
              FOD_LMT_RT,
              FOD_STP_LSS_TGR,
              FOD_ORDR_TYPE,
              to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
              to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ),
              FOD_ORDR_STTS,
              FOD_EXEC_QTY,
              NVL(FOD_EXEC_QTY_DAY,0),
              FOD_CNCL_QTY,
              FOD_EXPRD_QTY,
              FOD_SPRD_ORDR_REF,
              FOD_MDFCTN_CNTR,
              FOD_SETTLOR,
              FOD_ACK_NMBR,
              FOD_SPL_FLAG,
              FOD_INDSTK,
              to_char ( FOD_ORD_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              to_char ( FOD_LST_RQST_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              FOD_PRO_CLI_IND ,
              FOD_CHANNEL
        INTO  :ptr_st_orderbook->c_cln_mtch_accnt,
              :ptr_st_orderbook->c_ctcl_id,
              :ptr_st_orderbook->l_clnt_ctgry,
              :ptr_st_orderbook->c_pipe_id,
              :ptr_st_orderbook->c_xchng_cd,
              :ptr_st_orderbook->c_prd_typ,
              :ptr_st_orderbook->c_undrlyng,
              :ptr_st_orderbook->c_expry_dt,
              :ptr_st_orderbook->c_exrc_typ,
              :ptr_st_orderbook->c_opt_typ,
              :ptr_st_orderbook->l_strike_prc,
              :ptr_st_orderbook->c_ordr_flw,
							:ptr_st_orderbook->c_slm_flg,
              :ptr_st_orderbook->l_dsclsd_qty,
              :ptr_st_orderbook->l_ord_tot_qty,
              :ptr_st_orderbook->l_ord_lmt_rt,
              :ptr_st_orderbook->l_stp_lss_tgr,
              :ptr_st_orderbook->c_ord_typ,
              :ptr_st_orderbook->c_valid_dt:i_valid_dt,
              :ptr_st_orderbook->c_trd_dt,
              :ptr_st_orderbook->c_ordr_stts,
              :ptr_st_orderbook->l_exctd_qty,
              :ptr_st_orderbook->l_exctd_qty_day,
              :ptr_st_orderbook->l_can_qty,
              :ptr_st_orderbook->l_exprd_qty,
              :ptr_st_orderbook->c_sprd_ord_rfrnc:i_sprd_ord_rfrnc,
              :ptr_st_orderbook->l_mdfctn_cntr,
              :ptr_st_orderbook->c_settlor:i_settlor,
              :ptr_st_orderbook->c_xchng_ack:i_xchng_ack,
              :ptr_st_orderbook->c_spl_flg,
              :ptr_st_orderbook->c_ctgry_indstk,
              :ptr_st_orderbook->c_ack_tm:i_ack_tm,
              :ptr_st_orderbook->c_prev_ack_tm:i_prev_ack_tm,
              :ptr_st_orderbook->c_pro_cli_ind,
              :ptr_st_orderbook->c_channel
        FROM  fod_fo_ordr_dtls
        WHERE fod_ordr_rfrnc = :ptr_st_orderbook->c_ordr_rfrnc;

        if ( SQLCODE != 0 )
        {
          fn_errlog ( c_ServiceName, "S31080", SQLMSG, c_err_msg );
          return -1;
        }

  rtrim ( ptr_st_orderbook->c_expry_dt );
  rtrim ( ptr_st_orderbook->c_ctcl_id );

	if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Match Account :%s:",ptr_st_orderbook->c_cln_mtch_accnt);
    fn_userlog(c_ServiceName,"CTCL ID :%s:",ptr_st_orderbook->c_ctcl_id);
    fn_userlog(c_ServiceName,"CLient Category :%ld:",ptr_st_orderbook->l_clnt_ctgry);
    fn_userlog(c_ServiceName,"Pipe Id :%s:",ptr_st_orderbook->c_pipe_id);
    fn_userlog(c_ServiceName,"Exchange Code Is :%s:",ptr_st_orderbook->c_xchng_cd);
    fn_userlog(c_ServiceName,"Product Typ Is :%c:",ptr_st_orderbook->c_prd_typ);
    fn_userlog(c_ServiceName,"Underlying Is :%s:",ptr_st_orderbook->c_undrlyng);
    fn_userlog(c_ServiceName,"Expiry Date Is :%s:",ptr_st_orderbook->c_expry_dt);
    fn_userlog(c_ServiceName,"Exercise Type Is :%c:",ptr_st_orderbook->c_exrc_typ);
    fn_userlog(c_ServiceName,"Option Type Is :%c:",ptr_st_orderbook->c_opt_typ);
    fn_userlog(c_ServiceName,"Strike Price Is :%ld:",ptr_st_orderbook->l_strike_prc);
    fn_userlog(c_ServiceName,"Order Flow Is :%c:",ptr_st_orderbook->c_ordr_flw);
    fn_userlog(c_ServiceName,"LMT/MKT/SL Flag Is :%c:",ptr_st_orderbook->c_slm_flg);
    fn_userlog(c_ServiceName,"Disclosed Qty Is :%ld:",ptr_st_orderbook->l_dsclsd_qty);
    fn_userlog(c_ServiceName,"Total Order Qty Is :%ld:",ptr_st_orderbook->l_ord_tot_qty);
    fn_userlog(c_ServiceName,"Order Limit Rate :%ld:",ptr_st_orderbook->l_ord_lmt_rt);
    fn_userlog(c_ServiceName,"SLTP Is :%ld:",ptr_st_orderbook->l_stp_lss_tgr);
    fn_userlog(c_ServiceName,"Order Type Is :%c:",ptr_st_orderbook->c_ord_typ);
    fn_userlog(c_ServiceName,"Valid Date Is :%s:",ptr_st_orderbook->c_valid_dt);
    fn_userlog(c_ServiceName,"Trade Date Is :%s:",ptr_st_orderbook->c_trd_dt);
    fn_userlog(c_ServiceName,"Order status Is :%c:",ptr_st_orderbook->c_ordr_stts);
    fn_userlog(c_ServiceName,"Executed Qty Is :%ld:", ptr_st_orderbook->l_exctd_qty);
    fn_userlog(c_ServiceName,"Executed Qty Per Day :%ld:",ptr_st_orderbook->l_exctd_qty_day);
    fn_userlog(c_ServiceName,"Cancelled Qty Is :%ld:",ptr_st_orderbook->l_can_qty);
    fn_userlog(c_ServiceName,"Expired Qty Is :%ld:",ptr_st_orderbook->l_exprd_qty);
    fn_userlog(c_ServiceName,"Sprd Ord Rfrnc Is ;%s:",ptr_st_orderbook->c_sprd_ord_rfrnc);
    fn_userlog(c_ServiceName,"Modification Counter Is :%ld:",ptr_st_orderbook->l_mdfctn_cntr);
    fn_userlog(c_ServiceName,"Settlor Is :%s:",ptr_st_orderbook->c_settlor);
    fn_userlog(c_ServiceName,"Exchange Ack Is ;%s:",ptr_st_orderbook->c_xchng_ack);
    fn_userlog(c_ServiceName,"SPL Flag is :%c:",ptr_st_orderbook->c_spl_flg);
    fn_userlog(c_ServiceName,"Category IND/STK Is :%c:",ptr_st_orderbook->c_ctgry_indstk);
    fn_userlog(c_ServiceName,"Ack Time Is :%s:",ptr_st_orderbook->c_ack_tm);
    fn_userlog(c_ServiceName,"Prv Ack Time Is :%s:",ptr_st_orderbook->c_prev_ack_tm);
    fn_userlog(c_ServiceName,"Pro Cli Ind :%c:",ptr_st_orderbook->c_pro_cli_ind);
    fn_userlog(c_ServiceName,"Channel is :%s:",ptr_st_orderbook->c_channel);
  }

  return 0;
}

int fn_Bseq_to_omd  ( struct vw_xchngbook *ptr_st_xchngbook,
                      char *c_ServiceName,
                      char *c_err_msg
                    )
{
	EXEC SQL BEGIN DECLARE SECTION;
    short i_qt_tm;
    short i_frwrd_tm;
    short i_rms_prcs_flg;
    short i_ors_msg_typ;
    short i_ack_tm;
    short i_xchng_rmrks;
    short i_xchng_can_qty;
    varchar c_rmrks [ 256 ];
  EXEC SQL END DECLARE SECTION;

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog( c_ServiceName,"Function fn_seq_to_omd");
    fn_userlog( c_ServiceName,"Exchnage Code Is :%s:",ptr_st_xchngbook->c_xchng_cd);
    fn_userlog( c_ServiceName,"Pipe ID Is :%s:",ptr_st_xchngbook->c_pipe_id);
    fn_userlog( c_ServiceName,"Order Sequence Is :%ld:",ptr_st_xchngbook->l_ord_seq);
  }

	EXEC SQL
     SELECT  FXB_ORDR_RFRNC,
             FXB_LMT_MRKT_SL_FLG,
             FXB_DSCLSD_QTY,
             FXB_ORDR_TOT_QTY,
             FXB_LMT_RT,
             FXB_STP_LSS_TGR,
             FXB_MDFCTN_CNTR,
             to_char( FXB_ORDR_VALID_DT, 'dd-mon-yyyy' ),
             FXB_ORDR_TYPE,
             FXB_SPRD_ORD_IND,
             FXB_RQST_TYP,
             FXB_QUOTE,
             to_char( FXB_QT_TM, 'dd-mon-yyyy hh24:mi:ss' ),
             to_char( FXB_RQST_TM, 'dd-mon-yyyy hh24:mi:ss' ),
             to_char( FXB_FRWD_TM, 'dd-mon-yyyy hh24:mi:ss' ),
             FXB_PLCD_STTS,
             FXB_RMS_PRCSD_FLG,
             FXB_ORS_MSG_TYP,
             to_char ( FXB_ACK_TM, 'dd-mon-yyyy hh24:mi:ss' ),
             FXB_XCHNG_RMRKS,
             FXB_EX_ORDR_TYP,
             FXB_XCHNG_CNCLD_QTY,
             FXB_SPL_FLAG,
             FXB_ORDR_SQNC
     INTO    :ptr_st_xchngbook->c_ordr_rfrnc,
             :ptr_st_xchngbook->c_slm_flg,
             :ptr_st_xchngbook->l_dsclsd_qty,
             :ptr_st_xchngbook->l_ord_tot_qty,
             :ptr_st_xchngbook->l_ord_lmt_rt,
             :ptr_st_xchngbook->l_stp_lss_tgr,
             :ptr_st_xchngbook->l_mdfctn_cntr,
             :ptr_st_xchngbook->c_valid_dt,
             :ptr_st_xchngbook->c_ord_typ,
             :ptr_st_xchngbook->c_sprd_ord_ind,
             :ptr_st_xchngbook->c_req_typ,
             :ptr_st_xchngbook->l_quote,
             :ptr_st_xchngbook->c_qt_tm:i_qt_tm,
             :ptr_st_xchngbook->c_rqst_tm,
             :ptr_st_xchngbook->c_frwrd_tm:i_frwrd_tm,
             :ptr_st_xchngbook->c_plcd_stts,
             :ptr_st_xchngbook->c_rms_prcsd_flg:i_rms_prcs_flg,
             :ptr_st_xchngbook->l_ors_msg_typ:i_ors_msg_typ,
             :ptr_st_xchngbook->c_ack_tm:i_ack_tm,
             :c_rmrks:i_xchng_rmrks,
             :ptr_st_xchngbook->c_ex_ordr_typ,
						 :ptr_st_xchngbook->l_xchng_can_qty:i_xchng_can_qty,
             :ptr_st_xchngbook->c_spl_flg,
             :ptr_st_xchngbook->l_ord_seq
     FROM    FXB_FO_XCHNG_BOOK
     WHERE   FXB_XCHNG_CD  = :ptr_st_xchngbook->c_xchng_cd
     AND     FXB_PIPE_ID   = :ptr_st_xchngbook->c_pipe_id
     AND     FXB_ORDR_SQNC = :ptr_st_xchngbook->l_ord_seq
     AND     FXB_MOD_TRD_DT =  to_date(:ptr_st_xchngbook->c_mod_trd_dt,'dd-Mon-yyyy');

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31085", SQLMSG, c_err_msg );
    return -1;

  }

  if ( i_xchng_rmrks == -1 )
  {
    memset ( ptr_st_xchngbook->c_xchng_rmrks, 0,sizeof ( ptr_st_xchngbook->c_xchng_rmrks ) );
  }
  else
  {
    SETNULL ( c_rmrks );
    strcpy ( ptr_st_xchngbook->c_xchng_rmrks, (char *)c_rmrks.arr );
  }

	return 0;
}

int fn_Bref_to_omd  ( struct vw_xchngbook *ptr_st_xchngbook,          /***  Ver 1.4 ***/
                      char *c_ServiceName,
                      char *c_err_msg
                    )
{

  EXEC SQL BEGIN DECLARE SECTION;
    short i_slm_flg;
    short i_dsclsd_qty;
    short i_ord_lmt_rt;
    short i_stp_lss_tgr;
    short i_valid_dt;
    short i_ord_typ;
    short i_sprd_ord_ind;
    short i_quote;
    short i_qt_tm;
    short i_frwrd_tm;
    short i_rms_prcsd_flg;
    short i_ors_msg_typ;
    short i_ack_tm;
    short i_xchng_rmrks;
    short i_xchng_can_qty;
    short i_spl_flg;
    short i_req_typ;
    short i_ord_tot_qty;
    short i_rqst_tm;
    short i_ex_ordr_typ;
  EXEC SQL END DECLARE SECTION;

	fn_userlog(c_ServiceName,"Order Reference Is :%s:",ptr_st_xchngbook->c_ordr_rfrnc);
  fn_userlog(c_ServiceName,"Operation Type Is :%ld:",ptr_st_xchngbook->c_oprn_typ);
  fn_userlog(c_ServiceName,"Modification Counter Is :%ld:",ptr_st_xchngbook->l_mdfctn_cntr );

	EXEC SQL
    SELECT    FXB_XCHNG_CD,
              FXB_PIPE_ID,
              TO_CHAR ( FXB_MOD_TRD_DT, 'dd-mon-yyyy' ),
              FXB_ORDR_SQNC,
              FXB_LMT_MRKT_SL_FLG,
              FXB_DSCLSD_QTY,
              FXB_ORDR_TOT_QTY,
              FXB_LMT_RT,
              FXB_STP_LSS_TGR,
              TO_CHAR( FXB_ORDR_VALID_DT, 'dd-mon-yyyy' ),
              FXB_ORDR_TYPE,
              FXB_SPRD_ORD_IND,
              FXB_RQST_TYP,
              FXB_QUOTE,
              TO_CHAR ( FXB_QT_TM, 'dd-mon-yyyy hh24:mi:ss' ),
              TO_CHAR ( FXB_RQST_TM, 'dd-mon-yyyy hh24:mi:ss' ),
              TO_CHAR ( FXB_FRWD_TM, 'dd-mon-yyyy hh24:mi:ss' ),
              FXB_PLCD_STTS,
              FXB_RMS_PRCSD_FLG,
              TO_CHAR ( FXB_ACK_TM, 'dd-mon-yyyy hh24:mi:ss' ),
              FXB_XCHNG_RMRKS,
              FXB_EX_ORDR_TYP,
              FXB_XCHNG_CNCLD_QTY,
              FXB_SPL_FLAG
      INTO    :ptr_st_xchngbook->c_xchng_cd,
              :ptr_st_xchngbook->c_pipe_id,
              :ptr_st_xchngbook->c_mod_trd_dt,
              :ptr_st_xchngbook->l_ord_seq,
              :ptr_st_xchngbook->c_slm_flg:i_slm_flg,
              :ptr_st_xchngbook->l_dsclsd_qty:i_dsclsd_qty,
              :ptr_st_xchngbook->l_ord_tot_qty:i_ord_tot_qty,
              :ptr_st_xchngbook->l_ord_lmt_rt:i_ord_lmt_rt,
              :ptr_st_xchngbook->l_stp_lss_tgr:i_stp_lss_tgr,
							:ptr_st_xchngbook->c_valid_dt:i_valid_dt,
              :ptr_st_xchngbook->c_ord_typ:i_ord_typ,
              :ptr_st_xchngbook->c_sprd_ord_ind:i_sprd_ord_ind,
              :ptr_st_xchngbook->c_req_typ:i_req_typ,
              :ptr_st_xchngbook->l_quote:i_quote,
              :ptr_st_xchngbook->c_qt_tm:i_qt_tm,
              :ptr_st_xchngbook->c_rqst_tm:i_rqst_tm,
              :ptr_st_xchngbook->c_frwrd_tm:i_frwrd_tm,
              :ptr_st_xchngbook->c_plcd_stts,
              :ptr_st_xchngbook->c_rms_prcsd_flg:i_rms_prcsd_flg,
              :ptr_st_xchngbook->c_ack_tm:i_ack_tm,
              :ptr_st_xchngbook->c_xchng_rmrks:i_xchng_rmrks,
              :ptr_st_xchngbook->c_ex_ordr_typ:i_ex_ordr_typ,
              :ptr_st_xchngbook->l_xchng_can_qty:i_xchng_can_qty,
              :ptr_st_xchngbook->c_spl_flg:i_spl_flg
      FROM    fxb_fo_xchng_book
      WHERE   fxb_ordr_rfrnc = :ptr_st_xchngbook->c_ordr_rfrnc
      AND     fxb_mdfctn_cntr = :ptr_st_xchngbook->l_mdfctn_cntr;

      if ( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31090", SQLMSG, c_err_msg );
        return -1;
      }

			return 0;
}


int fn_Back_to_ord  ( struct vw_orderbook *ptr_st_orderbook,
                      char *c_ServiceName,
                      char *c_usr_id,
                      char *c_err_msg
                    )
{
	 varchar c_user_id[16];

   EXEC SQL BEGIN DECLARE SECTION;
    short  i_settlor;
    short  i_sprd_ord_ref;
    short  i_ack_tm;
    short  i_prev_ack_tm;
  EXEC SQL END DECLARE SECTION;

  if (DEBUG_MSG_LVL_0)
  {
    fn_userlog ( c_ServiceName,"Inside Function fn_bseack_to_ord");
    fn_userlog ( c_ServiceName,"c_xchng_ack:%s:", ptr_st_orderbook->c_xchng_ack );
    fn_userlog ( c_ServiceName,"c_pipe_id:%s:", ptr_st_orderbook->c_pipe_id );
  }

	EXEC SQL
      SELECT  FOD_CLM_MTCH_ACCNT,
              FOD_CLNT_CTGRY,
              FOD_ORDR_RFRNC,
              FOD_XCHNG_CD,
              FOD_PRDCT_TYP,
              FOD_UNDRLYNG,
              to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ),
              FOD_EXER_TYP,
              FOD_OPT_TYP,
              FOD_STRK_PRC,
              FOD_ORDR_FLW,
              FOD_LMT_MRKT_SL_FLG,
              NVL( FOD_DSCLSD_QTY, 0 ),
              NVL ( FOD_ORDR_TOT_QTY, 0 ),
              NVL( FOD_LMT_RT, 0 ),
              FOD_STP_LSS_TGR,
              FOD_ORDR_TYPE,
              to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
              to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ),
              FOD_ORDR_STTS,
              NVL( FOD_EXEC_QTY, 0 ),
              NVL( FOD_EXEC_QTY_DAY, 0 ),
              NVL( FOD_CNCL_QTY, 0 ),
              NVL( FOD_EXPRD_QTY, 0 ),
              FOD_SPRD_ORDR_REF,
              FOD_MDFCTN_CNTR,
              FOD_SETTLOR,
              FOD_SPL_FLAG,
              FOD_INDSTK,
              to_char ( FOD_ORD_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              to_char ( FOD_LST_RQST_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              NVL( trim(FOD_USR_ID), '*' )
      INTO    :ptr_st_orderbook->c_cln_mtch_accnt,
              :ptr_st_orderbook->l_clnt_ctgry,
              :ptr_st_orderbook->c_ordr_rfrnc,
              :ptr_st_orderbook->c_xchng_cd,
              :ptr_st_orderbook->c_prd_typ,
              :ptr_st_orderbook->c_undrlyng,
              :ptr_st_orderbook->c_expry_dt,
              :ptr_st_orderbook->c_exrc_typ,
              :ptr_st_orderbook->c_opt_typ,
              :ptr_st_orderbook->l_strike_prc,
              :ptr_st_orderbook->c_ordr_flw,
              :ptr_st_orderbook->c_slm_flg,
              :ptr_st_orderbook->l_dsclsd_qty,
							:ptr_st_orderbook->l_ord_tot_qty,
              :ptr_st_orderbook->l_ord_lmt_rt,
              :ptr_st_orderbook->l_stp_lss_tgr,
              :ptr_st_orderbook->c_ord_typ,
              :ptr_st_orderbook->c_valid_dt,
              :ptr_st_orderbook->c_trd_dt,
              :ptr_st_orderbook->c_ordr_stts,
              :ptr_st_orderbook->l_exctd_qty,
              :ptr_st_orderbook->l_exctd_qty_day,
              :ptr_st_orderbook->l_can_qty,
              :ptr_st_orderbook->l_exprd_qty,
              :ptr_st_orderbook->c_sprd_ord_rfrnc :i_sprd_ord_ref,
              :ptr_st_orderbook->l_mdfctn_cntr,
              :ptr_st_orderbook->c_settlor :i_settlor,
              :ptr_st_orderbook->c_req_typ,
              :ptr_st_orderbook->c_ctgry_indstk,
              :ptr_st_orderbook->c_ack_tm :i_ack_tm,
              :ptr_st_orderbook->c_prev_ack_tm :i_prev_ack_tm,
              :c_user_id
      FROM    FOD_FO_ORDR_DTLS
      WHERE   FOD_ACK_NMBR = :ptr_st_orderbook->c_xchng_ack
      AND     FOD_PIPE_ID  = :ptr_st_orderbook->c_pipe_id;

  if (  SQLCODE != 0 )
  {
    if ( SQLCODE == TOO_MANY_ROWS_FETCHED )
    {
      return TOO_MANY_ROWS_FETCHED;
    }

    fn_errlog ( c_ServiceName, "S31095", SQLMSG, c_err_msg );
  	return -1;
  }

  rtrim ( ptr_st_orderbook->c_expry_dt );

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "Values Inside Function fn_Sack_to_ord");
    fn_userlog ( c_ServiceName, "Match Account Is :%s:",ptr_st_orderbook->c_cln_mtch_accnt);
    fn_userlog ( c_ServiceName, "CLNT Ctgry :%ld:",ptr_st_orderbook->l_clnt_ctgry);
    fn_userlog ( c_ServiceName, "Order Reference Is :%s:",ptr_st_orderbook->c_ordr_rfrnc);
    fn_userlog ( c_ServiceName, "Exchnage Code Is :%s:",ptr_st_orderbook->c_xchng_cd);
    fn_userlog ( c_ServiceName, "Product Type Is :%c:",ptr_st_orderbook->c_prd_typ);
    fn_userlog ( c_ServiceName, "Underlying Is :%s:",ptr_st_orderbook->c_undrlyng);
    fn_userlog ( c_ServiceName, "Expiry Date Is :%s:",ptr_st_orderbook->c_expry_dt);
    fn_userlog ( c_ServiceName, "Exercise Type Is :%c:",ptr_st_orderbook->c_exrc_typ);
    fn_userlog ( c_ServiceName, "Option Type Is :%c:",ptr_st_orderbook->c_opt_typ);
    fn_userlog ( c_ServiceName, "Strike Price Is :%ld:",ptr_st_orderbook->l_strike_prc);
    fn_userlog ( c_ServiceName, "Order Flow Is :%c:",ptr_st_orderbook->c_ordr_flw);
    fn_userlog ( c_ServiceName, "SLM Flag Is :%c:",ptr_st_orderbook->c_slm_flg);
    fn_userlog ( c_ServiceName, "Disclosed Qty Is :%ld:",ptr_st_orderbook->l_dsclsd_qty);
    fn_userlog ( c_ServiceName, "Total Order Qty Is :%ld:",ptr_st_orderbook->l_ord_tot_qty);
    fn_userlog ( c_ServiceName, "Order Limit Rate Is :%ld:",ptr_st_orderbook->l_ord_lmt_rt);
    fn_userlog ( c_ServiceName, "SLTP is :%ld:",ptr_st_orderbook->l_stp_lss_tgr);
    fn_userlog ( c_ServiceName, "Order Type Is :%c:",ptr_st_orderbook->c_ord_typ);
    fn_userlog ( c_ServiceName, "Valid Date Is :%s:",ptr_st_orderbook->c_valid_dt);
    fn_userlog ( c_ServiceName, "Trade date IS :%s:",ptr_st_orderbook->c_trd_dt);
    fn_userlog ( c_ServiceName, "Order Status Is :%c:",ptr_st_orderbook->c_ordr_stts);
    fn_userlog ( c_ServiceName, "Executed Qty Is :%ld:",ptr_st_orderbook->l_exctd_qty);
    fn_userlog ( c_ServiceName, "Executed Qty Day Is :%ld:",ptr_st_orderbook->l_exctd_qty_day);
    fn_userlog ( c_ServiceName, "Cancel Qty is :%ld:",ptr_st_orderbook->l_can_qty);
    fn_userlog ( c_ServiceName, "Expired Qty Is :%ld:",ptr_st_orderbook->l_exprd_qty);
    fn_userlog ( c_ServiceName, "Sprd Ord Rfrnc Is :%s:",ptr_st_orderbook->c_sprd_ord_rfrnc);
    fn_userlog ( c_ServiceName, "Modification Counter Is :%ld:",ptr_st_orderbook->l_mdfctn_cntr);
    fn_userlog ( c_ServiceName, "Settlor Is :%c:",ptr_st_orderbook->c_settlor );
    fn_userlog ( c_ServiceName, "Req Type Is :%c:",ptr_st_orderbook->c_req_typ);
    fn_userlog ( c_ServiceName, "IND/STK :%c:",ptr_st_orderbook->c_ctgry_indstk);
    fn_userlog ( c_ServiceName, "Ack Time Is :%s:",ptr_st_orderbook->c_ack_tm );
    fn_userlog ( c_ServiceName, "Prv Ack Time Is :%s:",ptr_st_orderbook->c_prev_ack_tm );
    fn_userlog ( c_ServiceName, "OUTSIDE c_usr_id :%s:", c_user_id.arr);
  }

  SETNULL(c_user_id);
  strcpy(c_usr_id,c_user_id.arr);

	return 0;

}



int fn_Bupd_trdbk ( char *c_ServiceName,
                    char *c_err_msg,
                    char *c_usr_id,
                    struct vw_tradebook *ptr_st_i_trdbk
                  )
{
	int i_rec_found = 0;

  fn_userlog(c_ServiceName,"Inside Function fn_upd_bsetrdbk.");

  if ( ptr_st_i_trdbk->l_dwnld_flg == DOWNLOAD )
  {

		if (DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"BSE TRADE DOWNLOAD.");
    	fn_userlog(c_ServiceName,"BSE c_xchng_cd  Is :%s:",ptr_st_i_trdbk->c_xchng_cd);
    	fn_userlog(c_ServiceName,"BSE c_xchng_ack Is :%s:",ptr_st_i_trdbk->c_xchng_ack);
    	fn_userlog(c_ServiceName,"BSE c_trd_rfrnc Is :%s:",ptr_st_i_trdbk->c_trd_rfrnc);
    	fn_userlog(c_ServiceName,"BSE l_xchng_trd_no Is :%ld:",ptr_st_i_trdbk->l_xchng_trd_no);
    	fn_userlog(c_ServiceName,"BSE l_ca_lvl Is :%ld:",ptr_st_i_trdbk->l_ca_lvl);
		}

    EXEC SQL
      SELECT 1
      INTO  :i_rec_found
      FROM  FTD_FO_TRD_DTLS
      WHERE FTD_XCHNG_CD      = :ptr_st_i_trdbk->c_xchng_cd
      AND   FTD_ORD_ACK_NMBR  = :ptr_st_i_trdbk->c_xchng_ack
      AND   FTD_XCHNG_TRD_NO  = :ptr_st_i_trdbk->l_xchng_trd_no
      AND   FTD_STREAM_NO     = :ptr_st_i_trdbk->l_ca_lvl;

    if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog(c_ServiceName,"S31100",SQLMSG,c_err_msg );
      tpfree ( ( char * ) ptr_st_i_trdbk );
      return -1;
    }

  }

  if ( i_rec_found == 1 )
  {
    fn_userlog(c_ServiceName,"Record Already Processed.");
    tpfree ( ( char * ) ptr_st_i_trdbk );
    return RECORD_ALREADY_PRCSD;
  }

	else
  {
		if ( DEBUG_MSG_LVL_3	)
		{
     	fn_userlog(c_ServiceName,"BSE TRADE INSERT ");
     	fn_userlog(c_ServiceName,"BSE c_cln_mtch_accnt :%s:",ptr_st_i_trdbk->c_cln_mtch_accnt);
     	fn_userlog(c_ServiceName,"BSE c_xchng_cd  Is :%s:",ptr_st_i_trdbk->c_xchng_cd);
     	fn_userlog(c_ServiceName,"BSE c_xchng_ack Is :%s:",ptr_st_i_trdbk->c_xchng_ack);
    	fn_userlog(c_ServiceName,"BSE c_trd_rfrnc Is :%s:",ptr_st_i_trdbk->c_trd_rfrnc);
     	fn_userlog(c_ServiceName,"BSE l_xchng_trd_no Is :%ld:",ptr_st_i_trdbk->l_xchng_trd_no);
     	fn_userlog(c_ServiceName,"BSE l_ca_lvl Is :%ld:",ptr_st_i_trdbk->l_ca_lvl);
     	fn_userlog(c_ServiceName,"BSE c_ordr_rfrnc :%s:",ptr_st_i_trdbk->c_ordr_rfrnc);
     	fn_userlog(c_ServiceName,"BSE c_prd_typ    :%c:",ptr_st_i_trdbk->c_prd_typ);
     	fn_userlog(c_ServiceName,"BSE c_ctgry_indstk :%c:",ptr_st_i_trdbk->c_ctgry_indstk);
     	fn_userlog(c_ServiceName,"BSE c_undrlyng  :%s:",ptr_st_i_trdbk->c_undrlyng);
     	fn_userlog(c_ServiceName,"BSE c_expry_dt  :%s:",ptr_st_i_trdbk->c_expry_dt);
     	fn_userlog(c_ServiceName,"BSE c_exrc_typ  :%c:",ptr_st_i_trdbk->c_exrc_typ);
     	fn_userlog(c_ServiceName,"BSE c_opt_typ   :%c:",ptr_st_i_trdbk->c_opt_typ);
     	fn_userlog(c_ServiceName,"BSE l_strike_prc :%ld:",ptr_st_i_trdbk->l_strike_prc);
     	fn_userlog(c_ServiceName,"BSE c_trd_dt     :%s:",ptr_st_i_trdbk->c_trd_dt);
     	fn_userlog(c_ServiceName,"BSE c_trd_flw    :%c:",ptr_st_i_trdbk->c_trd_flw);
     	fn_userlog(c_ServiceName,"BSE l_exctd_qty  :%ld:",ptr_st_i_trdbk->l_exctd_qty);
     	fn_userlog(c_ServiceName,"BSE l_exctd_rt   :%ld:",ptr_st_i_trdbk->l_exctd_rt);
     	fn_userlog(c_ServiceName,"BSE d_jiffy      :%lf:",ptr_st_i_trdbk->d_jiffy);
     	fn_userlog(c_ServiceName,"BSE c_usr_id     :%s:",c_usr_id);
     	fn_userlog(c_ServiceName,"BSE l_ca_lvl     :%ld:",ptr_st_i_trdbk->l_ca_lvl);
		}

     EXEC SQL
        INSERT INTO FTD_FO_TRD_DTLS
        (
          FTD_XCHNG_CD,
          FTD_CLM_MTCH_ACCNT,
          FTD_EBA_TRD_REF,
          FTD_ORDR_RFRNC,
          FTD_ORD_ACK_NMBR,
          FTD_XCHNG_TRD_NO,
          FTD_PRDCT_TYP,
          FTD_INDSTK,
          FTD_UNDRLYNG,
          FTD_EXPRY_DT,
          FTD_EXER_TYP,
          FTD_OPT_TYP,
          FTD_STRK_PRC,
          FTD_TRD_DT,
          FTD_TRD_FLW,
          FTD_EXCTD_QTY,
					FTD_EXCTD_RT,
          FTD_RMS_PRCSD_FLG,
          FTD_UPLD_MTCH_FLG,
          FTD_JIFFY,
          FTD_USR_ID,
          FTD_STREAM_NO,
          FTD_INSRT_TM           /** Ver 2.1 **/
        )
        VALUES
        (
          :ptr_st_i_trdbk->c_xchng_cd,
          :ptr_st_i_trdbk->c_cln_mtch_accnt,
          :ptr_st_i_trdbk->c_trd_rfrnc,
          :ptr_st_i_trdbk->c_ordr_rfrnc,
          :ptr_st_i_trdbk->c_xchng_ack,
          :ptr_st_i_trdbk->l_xchng_trd_no,
          :ptr_st_i_trdbk->c_prd_typ,
          :ptr_st_i_trdbk->c_ctgry_indstk,
          :ptr_st_i_trdbk->c_undrlyng,
          to_date ( :ptr_st_i_trdbk->c_expry_dt, 'DD-Mon-yyyy' ),
          :ptr_st_i_trdbk->c_exrc_typ,
          :ptr_st_i_trdbk->c_opt_typ,
          :ptr_st_i_trdbk->l_strike_prc,
          to_date ( :ptr_st_i_trdbk->c_trd_dt, 'DD-Mon-yyyy hh24:mi:ss' ),
          :ptr_st_i_trdbk->c_trd_flw,
          :ptr_st_i_trdbk->l_exctd_qty,
          :ptr_st_i_trdbk->l_exctd_rt,
          'N',
          'N',
          :ptr_st_i_trdbk->d_jiffy,
          :c_usr_id,
          :ptr_st_i_trdbk->l_ca_lvl,
          sysdate                   /** Ver 2.1 **/
         );

        if ( SQLCODE != 0 )
        {
          fn_errlog ( c_ServiceName, "S31105", SQLMSG, c_err_msg );
          tpfree ( ( char * ) ptr_st_i_trdbk );
          return -1;
        }
  }

  return 0;
}

int fn_conv_iwtl_pos ( struct vw_orderbook *ptr_st_orderbook,
                       long l_new_rate,
                       char *c_ServiceName,
                       char *c_err_msg
                    )
{
  char c_contract_tag; 
  double d_ibuy_ord_val=0;
  double d_isell_ord_val=0;
  long  l_new_ord_rate;
  int i_ch_val;
  int i_trnsctn;
  
  l_new_ord_rate = fn_swap_long(l_new_rate);

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName,"Inside fn_conv_iwtl_pos ");
  	fn_userlog(c_ServiceName," Total Order Quantity :%ld:",ptr_st_orderbook->l_ord_tot_qty);
  	fn_userlog(c_ServiceName," Total Executed Qty   :%ld:",ptr_st_orderbook->l_exctd_qty);
  	fn_userlog(c_ServiceName," New Rate             :%ld:",l_new_ord_rate);
  	fn_userlog(c_ServiceName," Order Flow           :%c:",ptr_st_orderbook->c_ordr_flw);
  	fn_userlog(c_ServiceName," Match acc            :%s:",ptr_st_orderbook->c_cln_mtch_accnt);
  	fn_userlog(c_ServiceName," Exchange code        :%s:",ptr_st_orderbook->c_xchng_cd);
  	fn_userlog(c_ServiceName," Product type         :%c:",ptr_st_orderbook->c_prd_typ);
  	fn_userlog(c_ServiceName," Underlying           :%s:",ptr_st_orderbook->c_undrlyng);
  	fn_userlog(c_ServiceName," Expiry date          :%s:",ptr_st_orderbook->c_expry_dt);
  	fn_userlog(c_ServiceName," Exrc TYp             :%c:",ptr_st_orderbook->c_exrc_typ);
  	fn_userlog(c_ServiceName," OPT Type             :%c:",ptr_st_orderbook->c_opt_typ);
  	fn_userlog(c_ServiceName," Strike price          :%ld:",ptr_st_orderbook->l_strike_prc);   
	}
 
  if(ptr_st_orderbook->c_ordr_flw == BUY )
  {
    d_ibuy_ord_val = ( ( ptr_st_orderbook->l_ord_tot_qty - ptr_st_orderbook->l_exctd_qty ) * l_new_ord_rate); 
  }
  else
  {
    d_isell_ord_val = ( (-1) * ( ptr_st_orderbook->l_ord_tot_qty  - ptr_st_orderbook->l_exctd_qty ) * l_new_ord_rate );
  }

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName," Calculated d_ibuy_ord_val :%lf:",d_ibuy_ord_val);
  	fn_userlog(c_ServiceName," Calculated d_isell_ord_val :%lf:",d_isell_ord_val);
	}

  i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1)
  {
    fn_errlog(c_ServiceName,"L31355", LIBMSG, c_err_msg);
    return -1;
  }

  if( ptr_st_orderbook->c_prd_typ == FUTURES  || ptr_st_orderbook->c_prd_typ == FUTURE_PLUS )
  {
  	if( ptr_st_orderbook->c_prd_typ == FUTURES )
   	{
		
		/*** Commented In Ver 1.9  ***
 
    	EXEC SQL
    		SELECT  FCM_CNTRCT_TAG
      	INTO  :c_contract_tag
      	FROM  fcm_fo_cntrct_mstr
     		WHERE  FCM_XCHNG_CD =:ptr_st_orderbook->c_xchng_cd
      	AND   FCM_PRDCT_TYP = :ptr_st_orderbook->c_prd_typ
      	AND   FCM_UNDRLYNG  = :ptr_st_orderbook->c_undrlyng
      	AND   FCM_EXPRY_DT  = to_date(:ptr_st_orderbook->c_expry_dt,'DD-Mon-YYYY')
      	AND   FCM_EXER_TYP  = :ptr_st_orderbook->c_exrc_typ
      	AND   FCM_OPT_TYP   = :ptr_st_orderbook->c_opt_typ
      	AND   FCM_STRK_PRC  = :ptr_st_orderbook->l_strike_prc;

		*** Ver 1.9 Comment Ends ***/

		/*** Ver 1.9 Starts ***/

			EXEC SQL
        SELECT  FTQ_CNTRCT_TAG
        INTO  :c_contract_tag
        FROM  ftq_fo_trd_qt
        WHERE  FTQ_XCHNG_CD =:ptr_st_orderbook->c_xchng_cd
        AND   FTQ_PRDCT_TYP = :ptr_st_orderbook->c_prd_typ
        AND   FTQ_UNDRLYNG  = :ptr_st_orderbook->c_undrlyng
        AND   FTQ_EXPRY_DT  = to_date(:ptr_st_orderbook->c_expry_dt,'DD-Mon-YYYY')
        AND   FTQ_EXER_TYP  = :ptr_st_orderbook->c_exrc_typ
        AND   FTQ_OPT_TYP   = :ptr_st_orderbook->c_opt_typ
        AND   FTQ_STRK_PRC  = :ptr_st_orderbook->l_strike_prc;

    /*** Ver 1.9 Ends ***/

   	}
   	else if(  ptr_st_orderbook->c_prd_typ == FUTURE_PLUS )
   	{
		/*** Commented In Ver 1.9  ***

    	EXEC SQL
    		SELECT  FCM_FP_CNTRCT_TAG 
      	INTO  :c_contract_tag
      	FROM  fcm_fo_cntrct_mstr
     		WHERE  FCM_XCHNG_CD =:ptr_st_orderbook->c_xchng_cd
      	AND   FCM_PRDCT_TYP = DECODE(:ptr_st_orderbook->c_prd_typ,'P','F') *** Ver 1.1, Decode added ***
      	AND   FCM_UNDRLYNG  = :ptr_st_orderbook->c_undrlyng
      	AND   FCM_EXPRY_DT  = to_date(:ptr_st_orderbook->c_expry_dt,'DD-Mon-YYYY')
      	AND   FCM_EXER_TYP  = :ptr_st_orderbook->c_exrc_typ
      	AND   FCM_OPT_TYP   = :ptr_st_orderbook->c_opt_typ
      	AND   FCM_STRK_PRC  = :ptr_st_orderbook->l_strike_prc;

		*** Ver 1.9 Comment Ends ***/

		/*** Ver 1.9 Starts ***/

			EXEC SQL
        SELECT  FTQ_FP_CNTRCT_TAG
        INTO  :c_contract_tag
        FROM  ftq_fo_trd_qt
        WHERE  FTQ_XCHNG_CD =:ptr_st_orderbook->c_xchng_cd
        AND   FTQ_PRDCT_TYP = DECODE(:ptr_st_orderbook->c_prd_typ,'P','F') 
        AND   FTQ_UNDRLYNG  = :ptr_st_orderbook->c_undrlyng
        AND   FTQ_EXPRY_DT  = to_date(:ptr_st_orderbook->c_expry_dt,'DD-Mon-YYYY')
        AND   FTQ_EXER_TYP  = :ptr_st_orderbook->c_exrc_typ
        AND   FTQ_OPT_TYP   = :ptr_st_orderbook->c_opt_typ
        AND   FTQ_STRK_PRC  = :ptr_st_orderbook->l_strike_prc;

		/*** Ver 1.9 Ends ***/

   }

		if(SQLCODE !=0 )
   	{
   		fn_errlog(c_ServiceName,"L31360", SQLMSG, c_err_msg);
    	fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    	return -1;
   	} 

		if(DEBUG_MSG_LVL_3)
		{
   		fn_userlog(c_ServiceName," Contrct Tag :%c:",c_contract_tag);
		}

		if ( ptr_st_orderbook->c_ordr_flw == BUY	)			/***	Ver	1.2	***/
		{
   		EXEC SQL
   			UPDATE  FUP_FUT_UNDRLYNG_PSTN
     		SET     FUP_UIBUY_VAL   =  :d_ibuy_ord_val 
            /**	FUP_UISELL_VAL  =  :d_isell_ord_val Commentted In Ver	1.2		***/
   			WHERE   FUP_CLM_MTCH_ACCNT = :ptr_st_orderbook->c_cln_mtch_accnt 
   			AND     FUP_XCHNG_CD       = :ptr_st_orderbook->c_xchng_cd
   			AND     FUP_PRDCT_TYP      = :ptr_st_orderbook->c_prd_typ
   			AND     FUP_UNDRLYNG       = :ptr_st_orderbook->c_undrlyng
   			AND     FUP_CNTRCT_TAG     = :c_contract_tag;
   
  	 	if(SQLCODE !=0 )
   		{
    		fn_errlog(c_ServiceName,"L31365", SQLMSG, c_err_msg);
    		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    		return -1;
   		}

   		EXEC SQL
   			UPDATE  FFP_FO_FUTURES_PSTN
   			SET     FFP_IBUY_ORD_VAL   =  :d_ibuy_ord_val
           /**	FFP_ISELL_ORD_VAL  =  :d_isell_ord_val		Commented In Ver 1.2	***/
   			WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_orderbook->c_cln_mtch_accnt
   			AND     FFP_XCHNG_CD       = :ptr_st_orderbook->c_xchng_cd
   			AND     FFP_PRDCT_TYP      = :ptr_st_orderbook->c_prd_typ
   			AND     FFP_UNDRLYNG       = :ptr_st_orderbook->c_undrlyng
   			AND     FFP_EXPRY_DT       = to_date(:ptr_st_orderbook->c_expry_dt,'DD-Mon-YYYY')
   			AND     FFP_EXER_TYP       = :ptr_st_orderbook->c_exrc_typ
   			AND     FFP_CNTRCT_TAG     = :c_contract_tag;

   		if(SQLCODE !=0 )
   		{
    		fn_errlog(c_ServiceName,"L31370", SQLMSG, c_err_msg);
    		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    		return -1;
   		}

		}
		else			/***	Ver	1.2			***/
		{
			EXEC SQL
        UPDATE  FUP_FUT_UNDRLYNG_PSTN
        SET     FUP_UISELL_VAL  	 =  :d_isell_ord_val
        WHERE   FUP_CLM_MTCH_ACCNT = :ptr_st_orderbook->c_cln_mtch_accnt
        AND     FUP_XCHNG_CD       = :ptr_st_orderbook->c_xchng_cd
        AND     FUP_PRDCT_TYP      = :ptr_st_orderbook->c_prd_typ
        AND     FUP_UNDRLYNG       = :ptr_st_orderbook->c_undrlyng
        AND     FUP_CNTRCT_TAG     = :c_contract_tag;

      if(SQLCODE !=0 )
      {
        fn_errlog(c_ServiceName,"L31375", SQLMSG, c_err_msg);
        fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
        return -1;
      }

      EXEC SQL
        UPDATE  FFP_FO_FUTURES_PSTN
        SET     FFP_ISELL_ORD_VAL  =  :d_isell_ord_val   
        WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_orderbook->c_cln_mtch_accnt
        AND     FFP_XCHNG_CD       = :ptr_st_orderbook->c_xchng_cd
        AND     FFP_PRDCT_TYP      = :ptr_st_orderbook->c_prd_typ
        AND     FFP_UNDRLYNG       = :ptr_st_orderbook->c_undrlyng
        AND     FFP_EXPRY_DT       = to_date(:ptr_st_orderbook->c_expry_dt,'DD-Mon-YYYY')
        AND     FFP_EXER_TYP       = :ptr_st_orderbook->c_exrc_typ
        AND     FFP_CNTRCT_TAG     = :c_contract_tag;

      if(SQLCODE !=0 )
      {
        fn_errlog(c_ServiceName,"L31380", SQLMSG, c_err_msg);
        fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
        return -1;
			}
		}
  
  }
  else 
  {
		if ( ptr_st_orderbook->c_ordr_flw == BUY  )			/***	Ver	1.2	***/
		{
   		EXEC SQL
   			UPDATE	fop_fo_options_pstn
    		SET    	fop_ibuy_ord_val 		= :d_ibuy_ord_val
           /**	fop_isell_ord_val 	= :d_isell_ord_val		Commented In Ver 1.2	***/
    		WHERE  	fop_clm_mtch_accnt  =	:ptr_st_orderbook->c_cln_mtch_accnt 
      	AND  		fop_xchng_cd        = :ptr_st_orderbook->c_xchng_cd
      	AND  		fop_prdct_typ       = :ptr_st_orderbook->c_prd_typ
      	AND  		fop_undrlyng        = :ptr_st_orderbook->c_undrlyng
      	AND  		fop_exer_typ        = :ptr_st_orderbook->c_exrc_typ
      	AND  		fop_opt_typ         = :ptr_st_orderbook->c_opt_typ
      	AND  		fop_expry_dt        = to_date(:ptr_st_orderbook->c_expry_dt,'DD-Mon-YYYY')
      	AND  		fop_strk_prc        = :ptr_st_orderbook->l_strike_prc;  

   		if(SQLCODE !=0 )
   		{
    		fn_errlog(c_ServiceName,"L31385", SQLMSG, c_err_msg);
    		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    		return -1;
   		}
   
		}
		else
		{
			 EXEC SQL
        UPDATE  fop_fo_options_pstn
        SET     fop_isell_ord_val 	= :d_isell_ord_val  
        WHERE   fop_clm_mtch_accnt  =	:ptr_st_orderbook->c_cln_mtch_accnt
        AND     fop_xchng_cd        = :ptr_st_orderbook->c_xchng_cd
        AND     fop_prdct_typ       = :ptr_st_orderbook->c_prd_typ
        AND     fop_undrlyng        = :ptr_st_orderbook->c_undrlyng
        AND     fop_exer_typ        = :ptr_st_orderbook->c_exrc_typ
        AND     fop_opt_typ         = :ptr_st_orderbook->c_opt_typ
        AND     fop_expry_dt        = to_date(:ptr_st_orderbook->c_expry_dt,'DD-Mon-YYYY')
        AND     fop_strk_prc        = :ptr_st_orderbook->l_strike_prc;

      if(SQLCODE !=0 )
      {
        fn_errlog(c_ServiceName,"L31390", SQLMSG, c_err_msg);
        fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
        return -1;
      }


		}
  }

  i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);

  if ( i_ch_val == -1 )
  {
    fn_errlog(c_ServiceName,"L31395", LIBMSG, c_err_msg);
    return -1;
  }

return 0;
}

/***  Ver 1.4 Starts  ***/

int fn_bse_cncl_ums ( struct st_cancel_sub_ums  *ptr_bse_cncl_ums,
                      char   *c_xchng_cd,
                      char   *c_pipe_id,
                      char   *c_rout_str,
                      char   *c_trd_dt,
                      char   *c_skpord_ref,
                      int    i_dwnld_flg,
                      char   *c_ServiceName,
                      char   *c_err_msg
                    )
{

  char c_xchng_rmrks[256];
  char c_svc_name[15+1];
  char c_usr_id[16];
  char c_ordr_stts;
  char c_prdct_typ;

  int i_ch_val	=	0;
  int i_trnsctn	=	0;
  int i_ret_val	=	0;

  long l_reason_code		=	0;
  long l_cncl_qty				=	0;
  long l_rmng_qty				=	0;
  long long ll_ack_nmbr	=	0;

  struct vw_xchngbook st_i_xchngbk;
  struct vw_orderbook st_i_ordrbk;

  MEMSET(st_i_xchngbk);
  MEMSET(st_i_ordrbk);
  MEMSET(c_xchng_rmrks);
	
	if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Inside Function fn_bse_cncl_ums.");
  }

  strcpy(st_i_xchngbk.c_xchng_cd,c_xchng_cd);
  strcpy(st_i_xchngbk.c_pipe_id,c_pipe_id);
  strcpy(st_i_xchngbk.c_mod_trd_dt,c_trd_dt);

  st_i_xchngbk.l_ord_seq  = fn_swap_long(ptr_bse_cncl_ums->li_msg_tag);
  l_reason_code           = fn_swap_long(ptr_bse_cncl_ums->li_reason);
  l_cncl_qty              = fn_swap_long(ptr_bse_cncl_ums->li_qntity);

  fn_userlog(c_ServiceName,"Cancel UMS Msg Tag Is :%ld:",st_i_xchngbk.l_ord_seq);
  fn_userlog(c_ServiceName,"Cancel UMS Reason Code Is :%ld:",l_reason_code);
  fn_userlog(c_ServiceName,"Cancel UMS Quantity Is :%ld:",l_cncl_qty);

  ll_ack_nmbr = fn_swap_ulnglng ( ptr_bse_cncl_ums->ll_ordr_id);

  sprintf(st_i_ordrbk.c_xchng_ack,"%lld",ll_ack_nmbr);
  strcpy(st_i_ordrbk.c_pipe_id,c_pipe_id);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Cancel UMS Exchange Ack Is :%s:",st_i_ordrbk.c_xchng_ack);
  }

  st_i_ordrbk.c_oprn_typ = FOR_VIEW;

	i_ret_val = fn_Back_to_ord  ( &st_i_ordrbk,
                                c_ServiceName,
                                c_usr_id,
                                c_err_msg
                              );

  fn_userlog(c_ServiceName,"Return Value is :%d:",i_ret_val);

  if ( i_ret_val != SUCC_BFR)
  {
    fn_errlog(c_ServiceName,"L31400", LIBMSG, c_err_msg);
    return -1;

  }

  c_prdct_typ = st_i_ordrbk.c_prd_typ;

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Order Reference No. Is :%s:",st_i_ordrbk.c_ordr_rfrnc);
  }

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName,"Modification Counter Is :%ld:", st_i_ordrbk.l_mdfctn_cntr);
  	fn_userlog(c_ServiceName,"Exchange Code Is :%s:",st_i_ordrbk.c_xchng_cd);
  	fn_userlog(c_ServiceName,"Pipe ID Is :%s:",st_i_ordrbk.c_pipe_id);
  	fn_userlog(c_ServiceName,"Match Account Is :%s:",st_i_ordrbk.c_cln_mtch_accnt);
  	fn_userlog(c_ServiceName,"Product Type Is :%c:",c_prdct_typ);
	}

	strcpy ( st_i_xchngbk.c_ordr_rfrnc, st_i_ordrbk.c_ordr_rfrnc );
	st_i_xchngbk.c_oprn_typ     = WITH_ORS_MSG_TYP;
	st_i_xchngbk.l_mdfctn_cntr  = st_i_ordrbk.l_mdfctn_cntr;

	fn_userlog(c_ServiceName,"Exchange Book Order Refernce Is :%s:",st_i_xchngbk.c_ordr_rfrnc);
	fn_userlog(c_ServiceName,"Exchange Book ORS Msg Type Is :%c:",st_i_xchngbk.c_oprn_typ);
	fn_userlog(c_ServiceName,"Exchange Book Modification Cntr Is :%ld:",st_i_xchngbk.l_mdfctn_cntr);

	i_ch_val = fn_Bref_to_omd ( &st_i_xchngbk,
  	                          c_ServiceName,
    	                        c_err_msg
      	                    );

	if ( i_ch_val != 0 )
  {
    fn_errlog(c_ServiceName,"L31405", LIBMSG, c_err_msg);
    return -1;
  }

	if( st_i_xchngbk.c_plcd_stts == 'R' )
 	{
  	i_ch_val  = fn_rej_ord  ( st_i_xchngbk,
                             c_prdct_typ,
                             c_ServiceName,
                             c_err_msg
                           );

   	if ( i_ch_val != 0 )
   	{
    	fn_userlog(c_ServiceName,"Failed While Rejecting Order. ");
     	return 0;
   	}
		else if ( i_ch_val == 0 )
   	{
     	EXEC SQL
       	SELECT FOD_ORDR_STTS
       	INTO   :c_ordr_stts
       	FROM   FOD_FO_ORDR_DTLS
       	WHERE  FOD_ORDR_RFRNC = :st_i_xchngbk.c_ordr_rfrnc;

     	if ( SQLCODE != 0 )
     	{
       	fn_errlog( c_ServiceName, "S31110",SQLMSG,c_err_msg);
       	return -1;
     	}

     	if ( c_ordr_stts ==  'J' )
     	{
       	fn_userlog(c_ServiceName,"No Need To Expire Order");
       	return 0;
     	}
		}	
	}
	
	strcpy ( st_i_xchngbk.c_xchng_cd, st_i_ordrbk.c_xchng_cd );
	strcpy ( st_i_xchngbk.c_pipe_id, st_i_ordrbk.c_pipe_id );
	strcpy ( st_i_xchngbk.c_mod_trd_dt , ( char * )c_trd_dt );
	strcpy (st_i_xchngbk.c_valid_dt,st_i_xchngbk.c_mod_trd_dt);
	strcpy(st_i_xchngbk.c_rout_crt,c_rout_str);
	st_i_xchngbk.l_ord_tot_qty    = st_i_ordrbk.l_ord_tot_qty;
	st_i_xchngbk.l_ord_lmt_rt     = st_i_ordrbk.l_ord_lmt_rt;
	st_i_xchngbk.l_mdfctn_cntr    = 99;
	st_i_xchngbk.c_sprd_ord_ind   = '*';
	st_i_xchngbk.c_ord_typ        = '*';
	st_i_xchngbk.l_ors_msg_typ    = ORS_ORD_EXP;
	st_i_xchngbk.c_plcd_stts      = ACCEPT;
	st_i_xchngbk.c_rms_prcsd_flg  = NOT_PROCESSED;
	st_i_xchngbk.c_oprn_typ       = INSERTION_ON_ORDER_FTE;
	st_i_xchngbk.l_dwnld_flg      = i_dwnld_flg;
	st_i_xchngbk.l_xchng_can_qty  = l_cncl_qty;
	st_i_xchngbk.l_bit_flg        = 0 ;

	switch ( l_reason_code )
  {
    case  2 :

      fn_userlog(c_ServiceName,"Inside Security Suspended Case.");
      sprintf(c_xchng_rmrks,"%ld Qty Expired By Exchange Due To Security Suspended.",l_cncl_qty);

    break;

    case  19  :

      fn_userlog(c_ServiceName,"Inside Out Of Price Band Order Case.");
      sprintf(c_xchng_rmrks,"%ld Qty Expired By Exchange Due To Out Of Price Band Order.",l_cncl_qty);

    break;

    case  20  :

      fn_userlog(c_ServiceName,"Inside Insufficient Collateral Case.");
      sprintf(c_xchng_rmrks,"%ld Qty Expired By Exchange Due To Insufficient Collateral.",l_cncl_qty);

    break;

		case  21  :

      fn_userlog(c_ServiceName,"Inside Position Limit Exceeded Case.");
      sprintf(c_xchng_rmrks,"%ld Qty Expired By Exchange Due To Position Limit Exceeded.",l_cncl_qty);

    break;

    case  149 :

      fn_userlog(c_ServiceName,"Inside Member Or Trader Suspended Case.");
      sprintf(c_xchng_rmrks,"%ld Qty Expired By Exchange Due To Member Or Trader Suspended.",l_cncl_qty);

    break;

    case  150 :

      fn_userlog(c_ServiceName,"Inside Market Halt Case.");
      sprintf(c_xchng_rmrks,"%ld Qty Expired By Exchange Due To Market Halt.",l_cncl_qty);

    break;

    case 151  :

      fn_userlog(c_ServiceName,"Inside Member Suspended Case.");
      sprintf(c_xchng_rmrks,"%ld Qty Expired By Exchange Due To Member Suspended.",l_cncl_qty);

    break;

		case 152  :

      fn_userlog(c_ServiceName,"Inside Trader Suspended Case.");
      sprintf(c_xchng_rmrks,"%ld Qty Expired By Exchange Due To Trader Suspended.",l_cncl_qty);

    break;

    case 246  :     /***  Added In Ver 1.8  ***/

      fn_userlog(c_ServiceName,"Inside Self Trade Prevention Case.");
      sprintf(c_xchng_rmrks,"%ld Qty Expired By Exchange Due To Self Trade Prevention.",l_cncl_qty);

    break;

    case  420 :

      fn_userlog(c_ServiceName,"Inside End Of Session Expiry Case.");
      sprintf(c_xchng_rmrks,"%ld Qty Expired By Exchange Due To End Of Session Expiry.",l_cncl_qty);

    break;

    case  425 :

      fn_userlog(c_ServiceName,"Inside End Of Session Expiry Case.");
      sprintf(c_xchng_rmrks,"%ld Qty Expired By Exchange Due To End Of Session Expiry.",l_cncl_qty);

    break;

    default :

      fn_userlog(c_ServiceName," Reason Code :%ld: Not Handeled.",l_reason_code);

    break;

	}

	strcpy( st_i_xchngbk.c_xchng_rmrks ,c_xchng_rmrks);
  fn_tmstmp_ymdhms_to_arr(ptr_bse_cncl_ums->st_timestmp_dmyhms,st_i_xchngbk.c_ack_tm);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Book Remark Is :%s",st_i_xchngbk.c_xchng_rmrks);
  }

  EXEC SQL
    SELECT  BSE_EBA_JIFFY.nextval
    INTO    :st_i_xchngbk.d_jiffy
    FROM    DUAL;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName,"L31410", SQLMSG, c_err_msg);
    return -1;
  }

  if ( st_i_ordrbk.c_prd_typ == FUTURES || st_i_ordrbk.c_prd_typ  == FUTURE_PLUS )
  {
    strcpy( c_svc_name , "SFO_FUT_ACK" );
  }
  else
  {
    strcpy( c_svc_name , "SFO_OPT_ACK" );
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Before Call To SFO_UPD_XCHNGBK");
  }

	i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1)
  {
    fn_errlog(c_ServiceName,"L31415", LIBMSG, c_err_msg);
    return -1;
  }

  i_ch_val = fn_Bupd_xchngbk(&st_i_xchngbk,c_ServiceName,c_err_msg);

  if( ( i_ch_val != 0) && ( i_ch_val != RECORD_ALREADY_PRCSD ) )
  {
    fn_errlog(c_ServiceName,"L31420", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }
	else if ( i_ch_val == RECORD_ALREADY_PRCSD )
  {
    fn_userlog ( c_ServiceName, "Record already processed" );
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return 0;
  }

  sprintf( st_i_ordrbk.c_xchng_ack,"%lld",ll_ack_nmbr);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Exchange Ack Is :%lld:",ll_ack_nmbr);
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
    fn_userlog(c_ServiceName,"Order Book Exchange Ack Is :%s:",st_i_ordrbk.c_xchng_ack);
  }

  strcpy(st_i_ordrbk.c_rout_crt,c_rout_str);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Before Call To SFO_UPD_ORDRBK");
  }

  st_i_ordrbk.c_oprn_typ = UPDATE_XCHNG_RESPONSE;

	i_ch_val = fn_Bupd_ordrbk (&st_i_ordrbk,c_ServiceName,c_err_msg);

  if ( i_ch_val != 0)
  {
    fn_errlog(c_ServiceName,"L31425", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }

  l_rmng_qty  = st_i_ordrbk.l_ord_tot_qty - st_i_ordrbk.l_exctd_qty - st_i_ordrbk.l_exprd_qty ;

  fn_userlog(c_ServiceName,"Total Order Qty Is :%ld:",st_i_ordrbk.l_ord_tot_qty);
  fn_userlog(c_ServiceName,"Total Executed Qty Is :%ld:",st_i_ordrbk.l_exctd_qty);
  fn_userlog(c_ServiceName,"Total Expired Qty Is :%ld:",st_i_ordrbk.l_exprd_qty);
  fn_userlog(c_ServiceName,"Total Remaining Qty Is :%ld:",l_rmng_qty);
  fn_userlog(c_ServiceName,"Total Cancel Qty Is :%ld:",l_cncl_qty);

  if (l_rmng_qty  ==  l_cncl_qty)
  {
    fn_userlog(c_ServiceName,"Inside Remainig & Cancel Qty check.");

  }

  i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);

  if ( i_ch_val == -1 )
  {
    fn_errlog(c_ServiceName,"L31430", LIBMSG, c_err_msg);
    return -1;
  }

  strcpy(st_i_xchngbk.c_rout_crt,c_rout_str);

	i_ch_val = fn_acall_svc ( c_ServiceName,
                             c_err_msg,
                             &st_i_xchngbk,
                             "vw_xchngbook",
                             sizeof ( st_i_xchngbk ),
                             TPNOREPLY,
                             c_svc_name );
  if ( i_ch_val != 0 )
  {
    fn_errlog(c_ServiceName,"L31435", LIBMSG, c_err_msg);
    return -1;
  }

  fn_userlog(c_ServiceName,"After Complition Of fn_bse_cncl_ums.");

  return 0;
}

int  fn_rej_ord  ( struct vw_xchngbook st_xchngbook ,
                   char   c_prdct_typ,
                   char   *c_ServiceName,
                   char   *c_err_msg
                 )
{
  char c_rej_flg;
  char c_svc_name[18];
  char c_ordr_rfrnc[19];

  int i_trnsctn;
  int i_ip_len;
  int i_op_len;
  int i_ch_val;

  long  l_rec_cnt;
  long  l_cnt;

  struct vw_orderbook   st_orderbook;

  if( DEBUG_MSG_LVL_0 )
  {
    fn_userlog(c_ServiceName,"Inside Function fn_rej_ord");
  }

  i_trnsctn= fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    fn_errlog ( c_ServiceName, "S31115", LIBMSG, c_err_msg );
    return -1;
  }

	strcpy(st_xchngbook.c_ack_tm,st_xchngbook.c_rqst_tm);
  strcpy(st_xchngbook.c_entry_dt_tm,st_xchngbook.c_rqst_tm);
  rtrim(st_xchngbook.c_rqst_tm);
  rtrim(st_xchngbook.c_ack_tm);
  rtrim(st_xchngbook.c_entry_dt_tm);
  st_xchngbook.c_rms_prcsd_flg=NOT_PROCESSED;
  st_xchngbook.l_bit_flg  = 99  ;

  if ( st_xchngbook.c_req_typ ==  'N' )
  {
    st_xchngbook.l_ors_msg_typ  = 5304;
  }
  else if ( st_xchngbook.c_req_typ == 'M' )
  {
    st_xchngbook.l_ors_msg_typ  = 5307;
  }
  else if ( st_xchngbook.c_req_typ == 'C')
  {
    st_xchngbook.l_ors_msg_typ  = 5310;
  }

	if( DEBUG_MSG_LVL_0 )
  {
    fn_userlog(c_ServiceName,"The Modification Counter is :%ld:",st_xchngbook.l_mdfctn_cntr);
    fn_userlog(c_ServiceName,"The Request Type is :%c:",st_xchngbook.c_req_typ);
    fn_userlog(c_ServiceName,"The Product Type is :%c:",c_prdct_typ);
    fn_userlog(c_ServiceName,"The Request Time is :%s:",st_xchngbook.c_rqst_tm);
    fn_userlog(c_ServiceName,"The ORS Message Type is :%d:",st_xchngbook.l_ors_msg_typ);
    fn_userlog(c_ServiceName,"The Ack Time is :%s:",st_xchngbook.c_ack_tm);
    fn_userlog(c_ServiceName,"The Stream No. :%ld:",st_xchngbook.l_bit_flg);
  }

  i_ip_len = sizeof ( struct vw_xchngbook);
  i_op_len = sizeof ( struct vw_xchngbook);

  if(c_prdct_typ==FUTURES  || c_prdct_typ==FUTURE_PLUS)
  {
    strcpy(c_svc_name, "SFO_FUT_ACK");
  }
  else
  {
    strcpy(c_svc_name,"SFO_OPT_ACK");
  }

  fn_cpy_ddr(st_xchngbook.c_rout_crt);

	i_ch_val=fn_call_svc(c_ServiceName,
                       c_err_msg,
                       &st_xchngbook,
                       &st_xchngbook,
                       "vw_xchngbook",
                       "vw_xchngbook",
                       i_ip_len,
                       i_op_len,
                       0,
                       c_svc_name);


  if ( i_ch_val !=0)
  {
    fn_userlog(c_ServiceName,"The record %ld failed in Fut/Opt ack:%s|%d|%s|%c|%c:",l_cnt,st_xchngbook.c_ordr_rfrnc,st_xchngbook.l_mdfctn_cntr,st_orderbook.c_undrlyng,st_orderbook.c_prd_typ);
      fn_errlog ( c_ServiceName, "S31120", LIBMSG, c_err_msg );
      return -1;
  }

	st_xchngbook.c_plcd_stts=REJECT;
  st_xchngbook.d_jiffy=0;
  st_xchngbook.l_dwnld_flg=20;
  st_xchngbook.c_oprn_typ=UPDATION_ON_EXCHANGE_RESPONSE;
  strcpy(st_xchngbook.c_xchng_rmrks,"..Reject");

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"The Modification Counter is :%d:",st_xchngbook.l_mdfctn_cntr);
    fn_userlog(c_ServiceName,"The Request Type is :%c:",st_xchngbook.c_req_typ);
    fn_userlog(c_ServiceName,"The Order Status is :%c:",st_orderbook.c_ordr_stts);
    fn_userlog(c_ServiceName,"The Request Time is :%s:",st_xchngbook.c_rqst_tm);
    fn_userlog(c_ServiceName,"The ORS Message Type is :%d:",st_xchngbook.l_ors_msg_typ);
    fn_userlog(c_ServiceName,"The Placed Status is  :%c:",st_xchngbook.c_plcd_stts);
    fn_userlog(c_ServiceName,"The RMS Processed Flag is :%c:",st_xchngbook.c_rms_prcsd_flg);
    fn_userlog(c_ServiceName,"The Operation Type is :%c:",st_xchngbook.c_oprn_typ);
    fn_userlog(c_ServiceName,"Jiffy :%lf:",st_xchngbook.d_jiffy);
    fn_userlog(c_ServiceName,"The Ack Time is :%s:",st_xchngbook.c_ack_tm);
    fn_userlog(c_ServiceName,"The Download Flag is :%d:",st_xchngbook.l_dwnld_flg);
  }

	 i_ch_val=fn_call_svc(c_ServiceName,
                       c_err_msg,
                       &st_xchngbook,
                       &st_xchngbook,
                       "vw_xchngbook",
                       "vw_xchngbook",
                       i_ip_len,
                       i_op_len,
                       0,
                       "SFO_UPD_XCHNGBK");

  if(i_ch_val != 0 )
  {
    fn_userlog(c_ServiceName,"The record %ld failed in updating xchng book:%s|%d|%s|%c|%c:",l_cnt,
    st_xchngbook.c_ordr_rfrnc,st_xchngbook.l_mdfctn_cntr,st_orderbook.c_undrlyng,st_orderbook.c_prd_typ);
    fn_errlog(c_ServiceName,"S31125",LIBMSG,c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
  }

  if ( fn_committran( c_ServiceName, i_trnsctn,c_err_msg ) == -1 )
  {
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    fn_errlog ( c_ServiceName, "S31130", LIBMSG, c_err_msg );
    return -1;
  }

  return 0;

}

/***  Ver 1.4 Ends  ***/
	
		
