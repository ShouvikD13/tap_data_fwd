/******************************************************************************/
/*  Program           : FO_SPN_RCV_LIB                                        */
/*                                                                            */
/*  Input             : 																											*/
/*                                                                            */
/*  Output            :                                                       */
/*                                                                            */
/*  Description       :                                                       */
/*                                                                            */
/*  Log               : 1.0   20-Jun-2011     																*/
/*                    : 1.1   18-May-2012                                     */
/*                    : 1.2   21-May-2012                                     */
/*                    : 1.3   22-Jan-2013                                     */
/*                    : 1.4   24-Jan-2013                                     */
/*                    : 1.6   18-Feb-2013                                     */
/*										:	1.7		22-Apr-2014																			*/
/*										:	1.8		05-May-2014																			*/
/*										:	1.9		20-May-2014																			*/
/*                    : 2.0   27-Jun-2014                                     */
/*                    : 2.1   28-Oct-2014                                     */
/*                    : 2.2   03-Jul-2015                                     */  
/*                    : 2.3   31-Aug-2015                                     */
/*                    : 2.4   16-Dec-2015                                     */
/*                    : 2.6   26-Apr-2016                                     */
/*                    : 2.7   01-Jun-2016                                     */
/*                    : 2.8   01-Jun-2016                                     */  
/*                    : 2.9   20-Jun-2016                                     */
/*                    : 3.0   20-Jun-2016                                     */
/*                    : 3.1   22-Jun-2016                                     */
/*                    : 3.2   23-Jun-2016                                     */
/*                    : 3.3   07-Jul-2016                                     */
/*                    : 3.4   25-Jul-2016                                     */
/*                    : 3.5   25-Aug-2016                                     */
/*                    : 3.6   12-Sep-2016                                     */
/*                    : 3.7   25-Sep-2016                                     */
/*                    : 3.8   23-Nov-2016                                     */
/*                    : 3.9   25-Nov-2016                                     */
/*                    : 4.0   06-Oct-2017                                     */
/*                    : 4.1   24-Apr-2018                                     */
/*                    : 4.3   24-May-2018                                     */
/*                    : 4.4   06-Jun-2018                                     */
/*                    : 4.5   06-Feb-2018                                     */
/*                    : 4.6   19-Feb-2019                                     */
/*                    : 4.8   14-May-2019                                     */
/*                    : 4.9   03-Sep-2019                                     */
/*										: 5.0   20-Sep-2019																			*/
/*										: 5.1   27-Apr-2020																			*/
/*										: 5.2   28-May-2020																			*/
/*										: 5.3   08-Nov-2020																			*/
/*										: 5.4   08-Nov-2020																			*/
/*                    : 5.5   04-Nov-2020                                     */
/*                    : 5.6   26-Aug-2021                                     */
/*                    : 5.7   03-nov-2022                                     */
/*                    : 5.8   05-Feb-2023                                     */
/*                    : 5.9   07-Mar-2023                                     */
/******************************************************************************/
/*  Version 1.0 - New Release                                                 */
/*  Version 1.1 - Fix for Trade Mismatch and solicited						Navina D.   */
/*                cancellation response received in download                  */
/*  Version 1.2 - Exchange Code Handling (Swati A.B )                         */
/*  Version 1.3 - CR-ISEC14-33503 (IOC/2L/3L/Freeze Order Handling) Swati A.B */
/*  Version 1.4 - SPAN FuturePLUS (Navina D.)                                 */
/*  Version 1.5 - Histry call on Order NDF removed               :  Sangeet   */
/*  Version 1.6 - Exchange initiated expiry (Navina D.)                       */
/*  Version 1.7 - "=" Replaced by "=="																				*/ 
/*								for IOC order cancellation  (Bhushan S.)                    */  
/*  Version 1.8 - Trade Execution range hndlng    Vishnu N                    */ 
/*	Version	1.9	- Funtion call fn_Sref_to_ord and fn_spnseq_to_omd commented  */
/*								data is fetched while updating exchange book 								*/
/*								and order book (Vishnu Nair)																*/
/*  Version 2.0 - Display SLTP Remark With Time   (Bhushan Sonwane)           */
/*  Version 2.1 - Check added to restrict processing of expiry response(Anand)*/
/*                received from exchange if order is already expired in EBA   */
/*  Version 2.2 - FCM-FTQ Merger Changes | Anand Dhopte                       */
/*  Version 2.3 - Cancellation due to SELF Trade | Navina D.                  */
/*  Version 2.4 - Trade sleep time changed  | Sachin Birje                    */ 
/*  Version 2.6 - Break added to update xchng response in ordr book & sleep time reduced | Tanmay W*/ 
/*  Version 2.7 - Order Reference number selected from FXB for order          */
/*                            freez response processing (Sachin birje)        */
/*	Version 2.8 - Update Ack Number only for New Order Accept &	Reject 				*/
/*								Response	Received From Exchange. |  (Ritesh D).						*/
/*	Version 2.9 - Trade insert time and process time changes | Sachin Birje   */
/*  Version 3.0 -  Function added For 2L and 3L acceptance for span customer  */
/*                 & Change sfo_prcs_rsp call to acall (Bhupendra Malik)      */
/*  Version 3.1 -  Log Maintenance (Bhupendra Malik)                          */
/*  Version 3.2 - Spread Ack check in history table commented (Sachin Birje)  */
/*  Version 3.3 - Added for update condition in sltp trg function (Sachin Birje) */
/*  Version 3.4 - Duplicate trigger changes 																	*/
/*  Version 3.5 - Future SLTP trail Order Changes                             */
/*  Version 3.6 - 12-Sep-2016 16388 error code handling from error queue (Tanmay .W)         */
/*  Version 3.7 -   26-Sep-2016 ORS handelling for unprocessed trg and trade at same time (Tanmay .W)*/
/*  Version 3.8 -   Trade processing on Functional Exit (Kishor B)           */
/*  Version 3.9 -    ORS handelling(seq zero & 16388 with spread seq && FILL Qty insertion )(Tanmay W. )     */
/*  Version 4.0 - Core Fix ( Sachin Birje)                                   */
/*  Version 4.1 - Processing solicited cancellation response in download ( Suchita D. ) */
/*  Version 4.2 - FO Rollover with spread changes ( Sachin Birje )  */
/*  Version 4.3 - Processing ORDER_ERROR_OUT response which remained unprocessed
                  due to "Resource Busy" in case of freezed order response( Suchita D. ) */
/*  Version 4.4 - Skipping fn_seq_to_omd for 2L/3L Order partial cancellation ( Suchita D. )*/
/*  Version 4.5 - Using traded qty available in cancellation response packet for solicited 
                  cancellation response processing.(Suchita Dabir)             */
/*  Version 4.6 - Trimmed Protocol for Non-NEAT Front End ( Suchita Dabir / Bhushan H.)   */
/*  Version 4.8 - Order not expired in exchange initiated expiry               */
/*                due to multiple 99 modification counter( Suchita Dabir )     */
/*  Version 4.9 - li_ftt_stream_no is assigned to 0 ( Suchita Dabir )          */
/*  Version 5.0 - Last activity reference changes LIVE BUG FIX FOR SLTP ( kiran Itkar ) */ 
/*  Version 5.1 - Stream Number check removed in download message check (Sachin Birje)  */ 
/*  Version 5.3 - Handling cancellation with error code 0   ( Suchita Dabir )          */
/*  Version 5.4 - 07-Sep-2020 CR-ISEC18-138913 IOC cancellation display (Suchita Dabir ) */
/*  Version 5.5 - Rollover with Spread P-Executed Cancellation Bug Fix (Mrinal Kishore) */
/*  Version 5.6 - Stream No Changes                                                */
/*  Version 5.7 - LPP Error messages Changes (Sachin Birje)                        */
/*  Version 5.8 - Minor Change1200 Sleep value parametrized (Sachin Birje)         */
/*  Version 5.9 - Minor Change Client Lock Changes (Sachin Birje)                  */
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>
#include <brd_cln_srvr.h>
#include <fn_scklib_tap.h>
#include <time.h>

#include <atmi.h>
#include <fml32.h>
#include <Usysflds.h>

#include <sqlca.h>

#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fo.h>
#include <fn_pos.h>
#include <fn_env.h>
#include <fn_tuxlib.h>
#include <fn_fil_log.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fml_rout.h>
#include <userlog.h>
#include <fn_session.h>
#include <fo_exg_rcv_lib.h>
#include <fo_spn_rcv_lib.h>		/**Added by Shailesh on 28-Feb-2012, before CUG Movement **/
#include <fn_span_lib.h>
#include <fn_read_debug_lvl.h>

EXEC SQL INCLUDE "table/fxb_fo_xchng_book.h"; /***  Ver 1.9 ***/

/***Commented by Shailesh on 28-Feb-2012, before CUG Movement
int fn_spnseq_to_omd(	struct st_xchngbook *ptr_st_xchngbook,
                  		char *c_ServiceName,
                  		char *c_err_msg
										);

int fn_Sref_to_ord(	struct st_orderbook *ptr_st_orderbook,
                  	char *c_ServiceName,
                  	char *c_err_msg
									);


int fn_qry_spdbk	(	struct st_spdordbk *ptr_st_spdordbk,
                  	char *c_ServiceName,
                  	char *c_err_msg
									);

int fn_spd_ack	(	struct st_spdxchbk *ptr_st_spdxchbk,
                  char *c_ServiceName,
                  char *c_err_msg
								);

int fn_upd_Sxchngbk( struct st_xchngbook *ptr_st_xchngbook,
                    char *c_ServiceName,
                    char *c_err_msg);

int fn_upd_Sordrbk(struct st_orderbook *ptr_st_orderbook,
                  char *c_ServiceName,
                  char *c_err_msg);


int fn_Sack_to_ord ( struct st_orderbook *ptr_st_orderbook,
                    char *c_ServiceName,
                    char *c_usr_id,        
                    char *c_err_msg);

int fn_upd_Strdbk  ( char *c_ServiceName,    
                    char *c_err_msg,
                    char *c_usr_id,
                    struct st_tradebook *ptr_st_i_trdbk);

int fn_Sac_to_ord (  char *c_ServiceName, 
                    char *c_err_msg,
                    char *c_usr_id,
                    struct st_orderbook *ptr_st_orderbook
                 );

int fn_snse_to_eba_tkn (long int li_tkn,
                        struct st_contract *ptr_cntrct,
                        char *c_rout_str,
                        char *c_ServiceName,
                        char *c_err_msg );

**********/


int fn_fxb_rms(  char *c_ServiceName,      /***  Ver 3.7 ***/
                    char *c_err_msg,
                    char c_prd_typ,
                    char *c_ordr_rfrnc
                 );

int fn_ftd_rms (char *c_ServiceName,       /**** ver 3.7 ****/
                    char *c_err_msg,
                    char c_prd_typ,
                    char *c_ordr_rfrnc);

/* VER TOL : TUX on LINUX -- redefining function "fn_get_errmsg" with new name "fn_get_errmsg_srl" (Ravindra) */
int fn_get_errmsg_srl( int i_error_cd,
                       int i_reason_cd ,
                       char *c_remarks,
                       char *c_ServiceName );

/******************************************************************************/
/* To update the accept and reject responses from Exchange.                   */
/*  INPUT PARAMETERS                                                          */
/*      ptr_oe_reqres - Pointer to a message structure got from Exchange      */
/*      c_pipe_id     - Pipe Id                                               */
/*      i_dwnld_flg   - Down Load Flag                                        */
/*      c_ServiceName - Service Name currently running                        */
/*      c_err_msg     - Error message to be returned                          */
/*  OUTPUT PARAMETERS                                                         */
/*        0   - Success                                                       */
/*        -1  - Failure                                                       */
/******************************************************************************/

int fn_spnord_confirmation (  struct st_oe_reqres *ptr_oe_reqres,
                              char   *c_xchng_cd,
                              char   *c_pipe_id,
                              char   *c_rout_str,
                              char   *c_trd_dt,
                              char   *c_skpord_ref,
                              int    i_dwnld_flg,
                              char   *c_ServiceName,
                              char   *c_err_msg )
{

	char c_ordr_rfrnc [19];
  char c_xchng_rmrks[256];

  int i_ch_val;

  long l_xchng_can_qty;
  /*** ver 5.3 starts ***/
  char c_fod_spec_flg='\0';
  char c_fod_order_ref[30]="\0";
  char c_ord_ack_nse[20]="\0";
  /*** ver 5.3 ends ***/
  int i_ord_ack=0;  /** Ver 5.7 **/
  int i_sleep_sec=0;  /** Ver 5.8 **/

  struct st_xchngbook st_i_xchngbk;
  char c_prd_typ = '\0'; /** Version 4.3 **/

  MEMSET(st_i_xchngbk);
  MEMSET(c_xchng_rmrks);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Inside Function fn_ord_cnfrmtn");
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"I/P Exchange Code Is :%s:",c_xchng_cd);
    fn_userlog(c_ServiceName,"I/P Pipe ID Is :%s:",c_pipe_id);
    fn_userlog(c_ServiceName,"I/P Trade Date :%s:",c_trd_dt);
  }

  strcpy(st_i_xchngbk.c_xchng_cd,c_xchng_cd);
  strcpy(st_i_xchngbk.c_pipe_id,c_pipe_id);
  strcpy(st_i_xchngbk.c_mod_trd_dt,c_trd_dt);
  st_i_xchngbk.l_ord_seq = ptr_oe_reqres->i_ordr_sqnc;

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Sequence Number Is :%ld:",st_i_xchngbk.l_ord_seq);
  }

  /** Commented in ver 1.9 ***

  st_i_xchngbk.c_oprn_typ = FOR_RCV;

	i_ch_val = fn_spnseq_to_omd	(	&st_i_xchngbk,
																c_ServiceName,
																c_err_msg
															);

  if ( i_ch_val != 0 )
  {
    fn_errlog(c_ServiceName,"L31005", LIBMSG, c_err_msg);
    return -1;
  }


  strcpy(c_ordr_rfrnc,st_i_xchngbk.c_ordr_rfrnc);

  *************/

	switch (ptr_oe_reqres->st_hdr.si_transaction_code)
  {
    case ORDER_CONFIRMATION_OUT :
    case ORDER_MOD_CONFIRM_OUT :
    /**case ORDER_ERROR_OUT :  ** Ver 5.7 ***/
    case ORDER_MOD_REJ_OUT :
    case ORDER_CXL_REJ_OUT :

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside ORDER ACCEPT/REJECT Case");
      }

      if ( i_dwnld_flg == DOWNLOAD && (strcmp(st_i_xchngbk.c_ordr_rfrnc,c_skpord_ref) == 0) )
      {
        break;
      }

      i_ch_val = fn_spnord_acpt_rjct(ptr_oe_reqres,
                                  c_xchng_cd,
                                  c_pipe_id,
                                  c_rout_str,
                                  c_trd_dt,
                                  c_ordr_rfrnc,
                                  i_dwnld_flg,
																	c_skpord_ref,		/** Ver 1.9 **/
                                  c_ServiceName,
                                  c_err_msg);

      if (i_ch_val == -1)
      {
        fn_userlog(c_ServiceName,"Failed While Calling Function fn_spnord_acpt_rjct ");
        return -1;
      }

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"After Successful Call To fn_spnord_acpt_rjct");
      }

      break;

    case ORDER_ERROR_OUT :    /*** Ver 5.7 Starts Here ****/

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside ORDER_ERROR_OUT Case :%d:",ptr_oe_reqres->st_ord_flg.flg_modified);
      }

      if ( i_dwnld_flg == DOWNLOAD && (strcmp(st_i_xchngbk.c_ordr_rfrnc,c_skpord_ref) == 0) )
      {
        break;
      }

      if (  ptr_oe_reqres->st_hdr.si_error_code == 17070 ) /** Rejection After Order Modification ***/
      {
       memset(c_ord_ack_nse,'\0',sizeof(c_ord_ack_nse));
       sprintf(c_ord_ack_nse,"%16.0lf",ptr_oe_reqres->d_order_number);
       /** sleep(2);   ** Sleep added to wait for stop loss trigger message to process ** Ver 5.8 commented in*/
       /** Ver 5.8 Starts here ***/
       EXEC SQL
            SELECT NVL(FSP_LPP_SLEEPSEC,0)
              INTO :i_sleep_sec
              FROM FSP_FO_SYSTM_PRMTR;
       if ( SQLCODE != 0 )
       {
        fn_errlog(c_ServiceName,"L91910", SQLMSG, c_err_msg);
        fn_userlog(c_ServiceName,"CR_139156 ERROR IN FXB FETCH");
        return -1;
       }

       fn_userlog(c_ServiceName,"LPP Sleeping for :%d: Sec",i_sleep_sec);
       if( i_sleep_sec > 0 )
       {
         sleep(i_sleep_sec);
       }
       /** Ver 5.8 Ends here ****/
 
       EXEC SQL
         SELECT  count(1)
           INTO  :i_ord_ack
           FROM  FXB_FO_XCHNG_BOOK
          WHERE  FXB_XCHNG_CD  = :st_i_xchngbk.c_xchng_cd
            AND  FXB_PIPE_ID   = :st_i_xchngbk.c_pipe_id
            AND  FXB_ORDR_RFRNC IN ( SELECT FOD_ORDR_RFRNC
                                       FROM FOD_FO_ORDR_DTLS
                                      WHERE FOD_ACK_NMBR  =:c_ord_ack_nse
                                        AND FOD_PIPE_ID =:st_i_xchngbk.c_pipe_id)
            AND  FXB_MOD_TRD_DT = to_date(:st_i_xchngbk.c_mod_trd_dt,'dd-Mon-yyyy')
            AND  upper(FXB_XCHNG_RMRKS) like upper('%Stop Loss Order Triggered%');
            if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
            {
              /*fn_errlog(c_ServiceName,"L91910", LIBMSG, c_err_msg); ** Ver 5.8**/
              fn_errlog(c_ServiceName,"L91910", SQLMSG, c_err_msg);   /** Ver 5.8 **/
              fn_userlog(c_ServiceName,"CR_139156 ERROR IN FXB FETCH");
              return -1;
           }

           fn_userlog(c_ServiceName,"i_ord_ack :%d:",i_ord_ack);

           if( i_ord_ack > 0 )
           {
             i_ch_val = fn_spnord_can ( ptr_oe_reqres,
                                c_xchng_cd,
                                c_pipe_id,
                                c_rout_str,
                                c_trd_dt,
                                c_ordr_rfrnc,
                                i_dwnld_flg,
                                c_ServiceName,
                                c_err_msg);

            if (i_ch_val == -1)
            {
              fn_userlog(c_ServiceName,"Failed While Calling Function fn_spnord_can ");
              return -1;
            }
           }
           else
           {
             i_ch_val = fn_spnord_acpt_rjct(ptr_oe_reqres,
                                  c_xchng_cd,
                                  c_pipe_id,
                                  c_rout_str,
                                  c_trd_dt,
                                  c_ordr_rfrnc,
                                  i_dwnld_flg,
                                  c_skpord_ref,
                                  c_ServiceName,
                                  c_err_msg);

             if (i_ch_val == -1)
             {
                fn_userlog(c_ServiceName,"Failed While Calling Function fn_spnord_acpt_rjct ");
                return -1;
             }
           }
      }
      else
      {
        i_ch_val = fn_spnord_acpt_rjct(ptr_oe_reqres,
                                  c_xchng_cd,
                                  c_pipe_id,
                                  c_rout_str,
                                  c_trd_dt,
                                  c_ordr_rfrnc,
                                  i_dwnld_flg,
                                  c_skpord_ref, 
                                  c_ServiceName,
                                  c_err_msg);

        if (i_ch_val == -1)
        {
          fn_userlog(c_ServiceName,"Failed While Calling Function fn_spnord_acpt_rjct ");
          return -1;
        }
      }

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"After Successful Call To fn_spnord_acpt_rjct");
      }

      break;
      /*** Ver 5.7 Ends Here ***/
		case ORDER_CANCEL_CONFIRM_OUT :

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside ORDER_CANCEL_CONFIRM_OUT Case");
				fn_userlog(c_ServiceName,"st_i_xchngbk.c_req_typ = :%c:", st_i_xchngbk.c_req_typ);		/*** Ver 1.1 ***/
				fn_userlog(c_ServiceName,"The ERROR CODE ORDER_CANCEL_CONFIRM_OUT IS :%d:",ptr_oe_reqres->st_hdr.si_error_code); /* Ver 1.8 */
      }

      /*** version 4.1 starts *** commented in ver 5.3 ***
      if( i_dwnld_flg == DOWNLOAD && ( ptr_oe_reqres->st_hdr.si_error_code != 17070 && ptr_oe_reqres->st_hdr.si_error_code != 17071 && ptr_oe_reqres->st_hdr.si_error_code != 16388  && ptr_oe_reqres->i_ordr_sqnc != 0 ))  ** checks for error code added in ver 4.4 ** 
      {
           st_i_xchngbk.c_oprn_typ = FOR_RCV;

           i_ch_val = fn_spnseq_to_omd ( &st_i_xchngbk,
                                         c_ServiceName,
                                         c_err_msg
                                       );

           if ( i_ch_val != 0 )
           {
                fn_errlog(c_ServiceName,"L31010", LIBMSG, c_err_msg);
                return -1;
           }
       }
      *** version 4.1 ends ***
      
			*** ver 1.1 start here ***
			if ( (i_dwnld_flg == DOWNLOAD) && (st_i_xchngbk.c_req_typ != 'C') && 
				(ptr_oe_reqres->st_hdr.si_error_code != 17070 && ptr_oe_reqres->st_hdr.si_error_code != 17071  && ptr_oe_reqres->st_hdr.si_error_code != 16388 && ptr_oe_reqres->i_ordr_sqnc != 0 ) ) 
				* Ver 3.9 seq number zero handled ** * Ver 3.6 16388 error code  handled **  * Ver 1.8 17070 error code  handled * * Ver 2.3 17071 error code handled *	
			{
				fn_userlog(c_ServiceName,"solicited cancellation response received in download");
				fn_userlog(c_ServiceName,"Order Reference = :%s:",st_i_xchngbk.c_ordr_rfrnc); 
				break;
			}
			*** ver 1.1 Ends here ***
ver 5.3 ends ***/


       /********** ver 5.3 starts *************/
       /** Earlier seq to omd was called ***
           1. in case of download
           2. solicited cancellation
        ****************/

        /*** Now we are calling it for both cancellations to find
             request type ********/

          fn_userlog(c_ServiceName,"CR_139156 : before seqtomd i_ordr_sqnc :%d:",ptr_oe_reqres->i_ordr_sqnc);

           /*** loop executes in case of solicited cancellation and unsolicited with reason code 0 ***/

           if( ptr_oe_reqres->i_ordr_sqnc != 0 && ptr_oe_reqres->st_hdr.si_error_code != 17070 && ptr_oe_reqres->st_hdr.si_error_code != 17071 && ptr_oe_reqres->st_hdr.si_error_code != 16388 && ptr_oe_reqres->st_ord_flg.flg_ioc != 1)
           {

             memset(c_ord_ack_nse,'\0',sizeof(c_ord_ack_nse));
             sprintf(c_ord_ack_nse,"%16.0lf",ptr_oe_reqres->d_order_number);
             fn_userlog(c_ServiceName,"CR_139156 c_ord_ack_nse:%s:",c_ord_ack_nse);


            EXEC SQL
                 SELECT FOD_SPL_FLAG
                  INTO :c_fod_spec_flg
                  FROM FOD_FO_ORDR_DTLS
                 WHERE FOD_ACK_NMBR  = :c_ord_ack_nse
                   AND ROWNUM < 2;

            if ( SQLCODE != 0 )
            {
                fn_errlog(c_ServiceName,"L91910", SQLMSG, c_err_msg);
                fn_userlog(c_ServiceName,"CR_139156 ERROR IN FOD FETCH");
                return -1;
            }
            fn_userlog(c_ServiceName,"CR_139156  c_fod_spec_flg :%c:",c_fod_spec_flg);
            if( c_fod_spec_flg == 'R' || c_fod_spec_flg == 'O' || c_fod_spec_flg == '2' || c_fod_spec_flg == '3' || c_fod_spec_flg == 'J')
            {
                 st_i_xchngbk.c_req_typ = '\0';

                 EXEC SQL
                 SELECT  Fxb_rqst_typ
                   INTO  :st_i_xchngbk.c_req_typ
                   FROM  FXB_FO_XCHNG_BOOK
                  WHERE  FXB_XCHNG_CD  = :st_i_xchngbk.c_xchng_cd
                    AND  FXB_PIPE_ID   = :st_i_xchngbk.c_pipe_id
                    AND  FXB_ORDR_RFRNC IN ( SELECT FOD_ORDR_RFRNC FROM FOD_FO_ORDR_DTLS WHERE FOD_ACK_NMBR  = :c_ord_ack_nse )
                    AND  FXB_MOD_TRD_DT = to_date(:st_i_xchngbk.c_mod_trd_dt,'dd-Mon-yyyy')
                    AND  FXB_RMS_PRCSD_FLG = 'N'
                    AND  ROWNUM < 2;
             if ( SQLCODE != 0 &&  SQLCODE != NO_DATA_FOUND )
             {
                  fn_errlog(c_ServiceName,"L91910", SQLMSG, c_err_msg);
                  fn_userlog(c_ServiceName,"CR_139156 ERROR IN FXB FETCH");
                  return -1;
             }
             else if ( SQLCODE == NO_DATA_FOUND )
             {
                 fn_userlog(c_ServiceName,"NO UNPROCESSED RECORD");
             }
           }
           else
           {
           st_i_xchngbk.c_oprn_typ = FOR_RCV;

           i_ch_val = fn_spnseq_to_omd ( &st_i_xchngbk,
                                         c_ServiceName,
                                         c_err_msg
                                       );

           if ( i_ch_val != 0 )
           {
                fn_errlog(c_ServiceName,"L31015", LIBMSG, c_err_msg);
                return -1;
           }
          }
          }
          fn_userlog(c_ServiceName,"CR_139156 : st_i_xchngbk.c_req_typ :%c: c_ordr_rfrnc :%s:",st_i_xchngbk.c_req_typ,st_i_xchngbk.c_ordr_rfrnc);

       /************ ver 5.3 ends ***********/

			/** Ver 1.8 Error code 17070 send for trade price exceeding trade excution range specified by exchange **/
      if((ptr_oe_reqres->st_ord_flg.flg_ioc == 1) || (ptr_oe_reqres->st_hdr.si_error_code == 17070) || (ptr_oe_reqres->st_hdr.si_error_code == 17071) || 
			  ( ptr_oe_reqres->i_ordr_sqnc == 0) || ( ptr_oe_reqres->st_hdr.si_error_code == 16388 ) || ( st_i_xchngbk.c_req_typ != 'C') )  /* Ver 1.8 17070 error code check added ***/ /* Ver 2.3 17071 error code  handled */ /** Ver 3.9 Seq zero and 16388 code added  **//*** ver 5.3 request typ added***/
      {
        if(DEBUG_MSG_LVL_0)
        {
          fn_userlog(c_ServiceName,"Inside IOC Flag Check Condition");
					fn_userlog(c_ServiceName,"The IOC flag    Is :%d:",ptr_oe_reqres->st_ord_flg.flg_ioc);    /** Ver 1.8 **/
          fn_userlog(c_ServiceName,"The error code  Is :%d:",ptr_oe_reqres->st_hdr.si_error_code); /** Ver  1.8 **/
        }
        i_ch_val = fn_spnord_can ( ptr_oe_reqres,
                                c_xchng_cd,
                                c_pipe_id,
                                c_rout_str,
                                c_trd_dt,
                                c_ordr_rfrnc,
                                i_dwnld_flg,
                                c_ServiceName,
                                c_err_msg);

        if (i_ch_val == -1)
        {
          fn_userlog(c_ServiceName,"Failed While Calling Function fn_spnord_can ");
          return -1;
        }
      }
			else
      {
        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Inside Normal Cancellation Handling");
        }
        i_ch_val = fn_spnord_acpt_rjct(ptr_oe_reqres,
                                    c_xchng_cd,
                                    c_pipe_id,
                                    c_rout_str,
                                    c_trd_dt,
                                    c_ordr_rfrnc,
                                    i_dwnld_flg,
																		c_skpord_ref,   /** Ver 1.9 **/
                                    c_ServiceName,
                                    c_err_msg);

        if (i_ch_val == -1)
        {
          fn_userlog(c_ServiceName,"Failed While Calling Function fn_spnord_acpt_rjct ");
          return -1;
        }
      }

      break;

		 case FREEZE_TO_CONTROL :

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside FREEZE_TO_CONTROL Case");
      }

      i_ch_val = fn_spnord_frz_exp ( ptr_oe_reqres,
                                  c_xchng_cd,
                                  c_pipe_id,
                                  c_rout_str,
                                  c_trd_dt,
                                  c_ordr_rfrnc,
                                  i_dwnld_flg,
                                  c_ServiceName,
                                  c_err_msg);

      if (i_ch_val == -1)
      {
        fn_userlog(c_ServiceName,"Failed While Calling Function fn_spnord_acpt_rjct ");
        return -1;
      }
      /*** Version 4.3 started ***/
     
      EXEC SQL
      SELECT FOD_PRDCT_TYP
      INTO   :c_prd_typ
      FROM   FOD_FO_ORDR_DTLS
      WHERE  FOD_ORDR_RFRNC = :c_ordr_rfrnc;

      if( SQLCODE != 0 )
      {
         fn_userlog(c_ServiceName,"Failed While Fetching FOD_PRDCT_TYP :%d:",c_prd_typ);
         return -1;
      }

      if(DEBUG_MSG_LVL_3)
      {
          fn_userlog(c_ServiceName,"The c_prd_typ is :%c: for c_ordr_rfrnc :%s: ",c_prd_typ,c_ordr_rfrnc);
      }
      i_ch_val =  fn_fxb_rms ( c_ServiceName,
                               c_err_msg,
                               c_prd_typ,
                               c_ordr_rfrnc );
      if( i_ch_val != 0 )
      {
         fn_userlog(c_ServiceName," Failed for fn_fxb_rms " );
         return -1;
      } 
      /** Version 4.3 ended **/
      break;

		case BATCH_ORDER_CXL_OUT :

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside BATCH_ORDER_CXL_OUT Case");
      }

      if(ptr_oe_reqres->st_ord_flg.flg_frozen == 1 )
      {
        if(DEBUG_MSG_LVL_0)
        {
          fn_userlog(c_ServiceName, "Freezed order got cancelled");
        }
			} /*** Ver 1.6 ***/

        i_ch_val = fn_spnord_can ( ptr_oe_reqres,
                                c_xchng_cd,
                                c_pipe_id,
                                c_rout_str,
                                c_trd_dt,
                                c_ordr_rfrnc,
                                i_dwnld_flg,
                                c_ServiceName,
                                c_err_msg);

        if (i_ch_val == -1)
        {
          fn_userlog(c_ServiceName,"Failed While Calling Function fn_spnord_can ");
          return -1;
        }
      /*** }  Commented in Ver 1.6 ***/

      break;

    default :
      fn_userlog( c_ServiceName, "Protocol error %d", ptr_oe_reqres->st_hdr.si_transaction_code);
      break;

  }		

	return 0 ;
}

int fn_spnord_acpt_rjct(struct st_oe_reqres *ptr_oe_reqres,
                      	char *c_xchng_cd,
                      	char *c_pipe_id,
                      	char *c_rout_str,
                      	char *c_trd_dt,
                      	char *c_ordr_rfrnc,
                      	int  i_dwnld_flg,
												char *c_skpord_ref,	/** Ver 1.9 **/
                      	char *c_ServiceName,
                      	char *c_err_msg)
{
  FBFR32 *ptr_fml_Ibuf;


  char c_tmp[8];
  char c_xchng_rmrks[256];
  char c_mtch_accnt[11];
  char c_xchng_err_msg[256];
	char c_lst_act_ref[22];  	 /*** Ver 4.6 ***/
  char c_spn_allwd_flg;

  int i_ch_val;
  int i_trnsctn;
	int	i;
	int i_err  [7]; /*** In ver 4.5 array size changed to 7 from 6 ***/
	int	i_ferr [7]; /*** In ver 4.5 array size changed to 7 from 6 ***/
  int i_rec_exists = 0; /***  Ver 1.9 ***/

  long int li_ors_msg_typ;
  long long ll_log_tm_stmp;

  struct st_xchngbook st_i_xchngbk;
  struct st_orderbook st_i_ordrbk;
	struct vw_xchngbook vw_i_xchngbk;		/*** Ver 1.4 ***/

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Inside SPAN fn_spnord_acpt_rjct Function");
  }

  ptr_fml_Ibuf = (FBFR32 *)NULL;

  MEMSET(st_i_xchngbk);
  MEMSET(st_i_ordrbk);
  MEMSET(c_xchng_rmrks);
  MEMSET(c_xchng_err_msg);
	MEMSET(c_lst_act_ref);		/*** Ver 4.6 ***/

	/*** Commented Ver 1.9 **

  strcpy ( st_i_ordrbk.c_ordr_rfrnc ,c_ordr_rfrnc);

	***/

	/*** ver 1.9 ***/

	strcpy(st_i_xchngbk.c_xchng_cd,c_xchng_cd);
  strcpy(st_i_xchngbk.c_pipe_id,c_pipe_id);
  strcpy(st_i_xchngbk.c_mod_trd_dt,c_trd_dt);
  st_i_xchngbk.l_ord_seq = ptr_oe_reqres->i_ordr_sqnc;
	
	/** ver 1.9 Ends **/ 
 if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Order Reference Is :%s:",st_i_ordrbk.c_ordr_rfrnc);
  }

	switch (ptr_oe_reqres->st_hdr.si_transaction_code)
  {
    case ORDER_CONFIRMATION_OUT :

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"ORDER_CONFIRMATION_OUT Case");
      }

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Exchange Ack Time Is :%ld:",ptr_oe_reqres->li_last_modified);
        fn_userlog(c_ServiceName,"Exchange Entry Date Time Is :%ld:",ptr_oe_reqres->li_entry_date_time);
      }

      st_i_xchngbk.l_ors_msg_typ = ORS_NEW_ORD_ACPT;
      fn_long_to_timearr ( st_i_xchngbk.c_ack_tm,ptr_oe_reqres->li_last_modified );
      fn_long_to_timearr ( st_i_xchngbk.c_entry_dt_tm,ptr_oe_reqres->li_entry_date_time );

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Message Type Is :%ld:",st_i_xchngbk.l_ors_msg_typ);
        fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
        fn_userlog(c_ServiceName,"Exchange Book Entry Date Time :%s:",st_i_xchngbk.c_entry_dt_tm);
      }

      break;

		case ORDER_MOD_CONFIRM_OUT :

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"ORDER_MOD_CONFIRM_OUT Case");
      }

      st_i_xchngbk.l_ors_msg_typ = ORS_MOD_ORD_ACPT ;

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Exchange Ack Time Is :%ld:",ptr_oe_reqres->li_last_modified);
      }

      fn_long_to_timearr (st_i_xchngbk.c_ack_tm,ptr_oe_reqres->li_last_modified);

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Message Type Is :%ld:",st_i_xchngbk.l_ors_msg_typ);
        fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
      }

      break;

    case ORDER_CANCEL_CONFIRM_OUT :

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"ORDER_CANCEL_CONFIRM_OUT Case");
      }

      st_i_xchngbk.l_ors_msg_typ = ORS_CAN_ORD_ACPT ;

      /*** ver 4.5 starts ****/
      st_i_xchngbk.l_xchng_can_qty = ptr_oe_reqres->li_volume_filled_today;

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"In span cancellation acceptance, st_i_xchngbk.l_xchng_can_qty is :%ld:",st_i_xchngbk.l_xchng_can_qty );
      }

      /*** ver 4.5 ends ***/

      fn_long_to_timearr (st_i_xchngbk.c_ack_tm,ptr_oe_reqres->li_last_modified);

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Exchange Ack Time Is :%ld:",ptr_oe_reqres->li_last_modified);
        fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
      }

      break;

		 case ORDER_ERROR_OUT :

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"ORDER_ERROR_OUT Case");
      }

      st_i_xchngbk.l_ors_msg_typ = ORS_NEW_ORD_RJCT;


      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Message Type Is :%ld:",st_i_xchngbk.l_ors_msg_typ);
        fn_userlog(c_ServiceName,"Exchange Ack Time Is :%ld:",ptr_oe_reqres->li_entry_date_time);
        fn_userlog(c_ServiceName,"Exchange Entry date Time Is :%ld:",ptr_oe_reqres->li_entry_date_time);
      }

      fn_long_to_timearr (st_i_xchngbk.c_ack_tm,ptr_oe_reqres->li_entry_date_time);
      fn_long_to_timearr ( st_i_xchngbk.c_entry_dt_tm,ptr_oe_reqres->li_entry_date_time );


      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
        fn_userlog(c_ServiceName,"Exchange Book Entry date Time Is :%s:", st_i_xchngbk.c_entry_dt_tm);
        fn_userlog(c_ServiceName,"The ERROR CODE FOR ORDER RJCT IS :%d:",ptr_oe_reqres->st_hdr.si_error_code);
      }

      i_ch_val = fn_get_errmsg_srl( ptr_oe_reqres->st_hdr.si_error_code,ptr_oe_reqres->si_reason_code,c_xchng_err_msg,c_ServiceName);

      if(i_ch_val == -1 )
      {
        fn_userlog(c_ServiceName,"Failed while fetching the Error Code ");
        return -1;
      }

      strcpy(c_xchng_rmrks,c_xchng_err_msg);

      break;


		 case ORDER_MOD_REJ_OUT :

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"Inside ORDER_MOD_REJ_OUT Case");
      }

      st_i_xchngbk.l_ors_msg_typ = ORS_MOD_ORD_RJCT ;

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Exchange Ack Time Is :%ld:",ptr_oe_reqres->li_last_modified);
      }

      fn_long_to_timearr (st_i_xchngbk.c_ack_tm,ptr_oe_reqres->li_last_modified);

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
        fn_userlog(c_ServiceName,"The ERROR CODE FOR MOD RJCT IS :%d:",ptr_oe_reqres->st_hdr.si_error_code);
      }

      i_ch_val = fn_get_errmsg_srl( ptr_oe_reqres->st_hdr.si_error_code,ptr_oe_reqres->si_reason_code,(char *)c_xchng_err_msg,c_ServiceName);

      if(i_ch_val == -1 )
      {
        fn_userlog(c_ServiceName,"Failed while fetching the Error Code ");
        return -1;
      }

      strcpy(c_xchng_rmrks,c_xchng_err_msg);

      break;

		
    case ORDER_CXL_REJ_OUT :

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"Inside ORDER_CXL_REJ_OUT Case");
      }

      st_i_xchngbk.l_ors_msg_typ = ORS_CAN_ORD_RJCT;

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Exchange Ack Time Is :%ld:",ptr_oe_reqres->li_last_modified);
      }

      fn_long_to_timearr (st_i_xchngbk.c_ack_tm,ptr_oe_reqres->li_last_modified);

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
        fn_userlog(c_ServiceName,"The ERROR CODE FOR MOD RJCT IS :%d:",ptr_oe_reqres->st_hdr.si_error_code);
      }

      i_ch_val = fn_get_errmsg_srl( ptr_oe_reqres->st_hdr.si_error_code,ptr_oe_reqres->si_reason_code,(char *)c_xchng_err_msg,c_ServiceName);

      if(i_ch_val == -1 )
      {
        fn_userlog(c_ServiceName,"Failed while fetching the Error Code ");
        return -1;
      }

      strcpy(c_xchng_rmrks,c_xchng_err_msg);

      break;

    default :

      fn_userlog(c_ServiceName, "Protocol error %d", ptr_oe_reqres->st_hdr.si_transaction_code);
      break;
  }

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_ordrbk.c_rout_crt,c_rout_str);  

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName, "Before Call To SFO_REF_TO_ORD");
  }

	/******** Commented in ver 1.9 **

  st_i_ordrbk.c_oprn_typ = FOR_VIEW;


	i_ch_val = fn_Sref_to_ord	(	&st_i_ordrbk,
															c_ServiceName,
															c_err_msg
														);

  if ( i_ch_val != 0)
  {
    fn_errlog(c_ServiceName,"L31020", LIBMSG, c_err_msg);
    return -1;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Order Reference Is :%s:",st_i_ordrbk.c_ordr_rfrnc);
    fn_userlog(c_ServiceName,"Modification Counter Is :%ld:", st_i_ordrbk.l_mdfctn_cntr);
    fn_userlog(c_ServiceName,"Exchange Code Is :%s:",st_i_ordrbk.c_xchng_cd);
    fn_userlog(c_ServiceName,"Pipe ID Is :%s:",st_i_ordrbk.c_pipe_id);
    fn_userlog(c_ServiceName,"Match Account Is :%s:",st_i_ordrbk.c_cln_mtch_accnt);
  }

  strcpy ( st_i_xchngbk.c_ordr_rfrnc, st_i_ordrbk.c_ordr_rfrnc );
  st_i_xchngbk.l_mdfctn_cntr = st_i_ordrbk.l_mdfctn_cntr;
  strcpy ( st_i_xchngbk.c_xchng_cd, st_i_ordrbk.c_xchng_cd );
  strcpy ( st_i_xchngbk.c_pipe_id, st_i_ordrbk.c_pipe_id );
  strcpy(c_mtch_accnt, st_i_ordrbk.c_cln_mtch_accnt);

	*************/

	switch (st_i_xchngbk.l_ors_msg_typ)
  {
    case  ORS_NEW_ORD_ACPT :
    case  ORS_MOD_ORD_ACPT :
    case  ORS_CAN_ORD_ACPT :

      st_i_xchngbk.c_plcd_stts = ACCEPT;
      break;

    case  ORS_NEW_ORD_RJCT :
    case  ORS_MOD_ORD_RJCT :
    case  ORS_CAN_ORD_RJCT :

      st_i_xchngbk.c_plcd_stts = REJECT;
      break;
  }

  st_i_xchngbk.c_rms_prcsd_flg = NOT_PROCESSED;
  strcpy ( st_i_xchngbk.c_xchng_rmrks ,c_xchng_rmrks );
  memcpy ( &ll_log_tm_stmp,ptr_oe_reqres->st_hdr.c_time_stamp_1, 8 );

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Remark Is :%s:",st_i_xchngbk.c_xchng_rmrks);
    fn_userlog(c_ServiceName,"Log time Stamp Is :%lld:",ll_log_tm_stmp);
  }

  st_i_xchngbk.d_jiffy = (double) ll_log_tm_stmp;

  if(DEBUG_MSG_LVL_3) /**** Ver 3.1 ****/
	{
		fn_userlog(c_ServiceName,"Jiffy Is :%lf:",st_i_xchngbk.d_jiffy);
	}
  st_i_xchngbk.l_dwnld_flg = i_dwnld_flg;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Down Load Flag Is :%ld:",st_i_xchngbk.l_dwnld_flg);
  }


	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_xchngbk.c_rout_crt,c_rout_str);

  st_i_xchngbk.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;

  st_i_xchngbk.l_bit_flg = ptr_oe_reqres->st_hdr.c_time_stamp_2[LEN_TIME_STAMP -1];

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"IN NORM_ACPT_RJCT, the stream number receievd from exchange is:%ld:",st_i_xchngbk.l_bit_flg); 
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Before Call To SFO_UPD_XCHNGBK");
  }

  i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1)
  {
    fn_errlog(c_ServiceName,"L31025", LIBMSG, c_err_msg);
    return -1;
  }

	/** Commented in Ver 1.9***

	i_ch_val = fn_upd_Sxchngbk	( &st_i_xchngbk,
															c_ServiceName,
															c_err_msg
														);

  if( ( i_ch_val != 0) && ( i_ch_val != RECORD_ALREADY_PRCSD ) )
  {
    fn_errlog(c_ServiceName,"L31030", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }

  else if ( i_ch_val == RECORD_ALREADY_PRCSD )
  {
    fn_userlog ( c_ServiceName, "Record already processed" );
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return 0;
  }
		
	**********/

	/*** Ver 1.9 Starts****/
		
	if ( st_i_xchngbk.l_dwnld_flg == DOWNLOAD )
  {
		EXEC SQL
			SELECT 1
      INTO :i_rec_exists
      FROM FXB_FO_XCHNG_BOOK
      WHERE FXB_JIFFY   = :st_i_xchngbk.d_jiffy
      AND FXB_XCHNG_CD  = :st_i_xchngbk.c_xchng_cd
      AND FXB_PIPE_ID   = :st_i_xchngbk.c_pipe_id
      AND FXB_ORDR_SQNC     = :st_i_xchngbk.l_ord_seq;  /** Ver 5.2**/ 
      /*** AND FXB_STREAM_NO = :st_i_xchngbk.l_bit_flg; ***COmmented Ver 5.1 **/

    if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
    {
      fn_errlog ( c_ServiceName, "S31005", SQLMSG, c_err_msg );
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);		
      return -1;
    }
		if ( i_rec_exists == 1 )
   	{
			fn_userlog ( c_ServiceName, "Record already processed" );
   		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    	return 0;
   	}

  }

	fn_userlog(c_ServiceName,"ll_lastactivityref :%lld:",ptr_oe_reqres->ll_lastactivityref); /** Ver 4.6 Test */

	sprintf(c_lst_act_ref,"%lld",ptr_oe_reqres->ll_lastactivityref);  /** Ver 4.6 **/
	rtrim(c_lst_act_ref);	/** Ver 4.6 **/

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"st_i_xchngbk.c_xchng_rmrks :%s:",st_i_xchngbk.c_xchng_rmrks);
		fn_userlog(c_ServiceName,"c_lst_act_ref :%s:",c_lst_act_ref);  /** Ver 4.6 **/
  }

	sql_fxb_mdfctn_cntr = 0;
	MEMSET(sql_fxb_ordr_rfrnc);

  /*** ver 4.5 starts ***/
 if( ptr_oe_reqres->st_hdr.si_transaction_code == ORDER_CANCEL_CONFIRM_OUT )
 {
  EXEC SQL
    UPDATE  FXB_FO_XCHNG_BOOK
    SET  FXB_PLCD_STTS       = :st_i_xchngbk.c_plcd_stts,
         FXB_RMS_PRCSD_FLG   = :st_i_xchngbk.c_rms_prcsd_flg,
         FXB_ORS_MSG_TYP     = :st_i_xchngbk.l_ors_msg_typ,
         FXB_ACK_TM          = to_date( :st_i_xchngbk.c_ack_tm,'DD-Mon-yyyy hh24:mi:ss' ),
         FXB_XCHNG_RMRKS     = rtrim(fxb_xchng_rmrks)||:st_i_xchngbk.c_xchng_rmrks,
         FXB_JIFFY           = :st_i_xchngbk.d_jiffy,
         FXB_STREAM_NO       = :st_i_xchngbk.l_bit_flg,
         FXB_XCHNG_CNCLD_QTY = :st_i_xchngbk.l_xchng_can_qty,
         FXB_LST_ACT_REF     = :c_lst_act_ref             /*** Ver 4.6 ***/
    WHERE FXB_XCHNG_CD      = :st_i_xchngbk.c_xchng_cd
    AND   FXB_ORDR_SQNC     = :st_i_xchngbk.l_ord_seq
    AND   FXB_PIPE_ID       = :st_i_xchngbk.c_pipe_id
    AND   FXB_MOD_TRD_DT    = :c_trd_dt
    RETURNING FXB_ORDR_RFRNC,
              FXB_MDFCTN_CNTR
    INTO      :sql_fxb_ordr_rfrnc,
              :sql_fxb_mdfctn_cntr;

 }/*** ver 4.5 ends ***/
 else
 {
  EXEC SQL
    UPDATE  FXB_FO_XCHNG_BOOK
    SET  FXB_PLCD_STTS       = :st_i_xchngbk.c_plcd_stts,
         FXB_RMS_PRCSD_FLG   = :st_i_xchngbk.c_rms_prcsd_flg,
         FXB_ORS_MSG_TYP     = :st_i_xchngbk.l_ors_msg_typ,
         FXB_ACK_TM          = to_date( :st_i_xchngbk.c_ack_tm,'DD-Mon-yyyy hh24:mi:ss' ),
         FXB_XCHNG_RMRKS     = rtrim(fxb_xchng_rmrks)||:st_i_xchngbk.c_xchng_rmrks,
         FXB_JIFFY           = :st_i_xchngbk.d_jiffy,
         FXB_STREAM_NO       = :st_i_xchngbk.l_bit_flg,
				 FXB_LST_ACT_REF     = :c_lst_act_ref							/*** Ver 4.6 ***/
		WHERE FXB_XCHNG_CD      = 	:st_i_xchngbk.c_xchng_cd
 		AND   FXB_ORDR_SQNC     = :st_i_xchngbk.l_ord_seq
 		AND   FXB_PIPE_ID       = :st_i_xchngbk.c_pipe_id
 		AND   FXB_MOD_TRD_DT    = :c_trd_dt
 		RETURNING FXB_ORDR_RFRNC,
   		        FXB_MDFCTN_CNTR
 		INTO      :sql_fxb_ordr_rfrnc,
    		      :sql_fxb_mdfctn_cntr;
 }

	if (  SQLCODE != 0  )
    {
      fn_errlog ( c_ServiceName, "S31010", SQLMSG, c_err_msg );
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      return -1;
    }

	if(DEBUG_MSG_LVL_0)
	{
		/** fn_userlog(c_ServiceName,"Order reference:%s:,Modification cnt :%ld:",sql_fxb_ordr_rfrnc,sql_fxb_mdfctn_cntr); *** ver 4.0 **/
		fn_userlog(c_ServiceName,"Order reference:%s:,Modification cnt :%d:",sql_fxb_ordr_rfrnc,sql_fxb_mdfctn_cntr); /*** ver 4.0 **/
	}

	if ( i_dwnld_flg == DOWNLOAD && (strcmp(st_i_xchngbk.c_ordr_rfrnc,c_skpord_ref) == 0) )
  {
 		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
		return 0; 
	}

	/*** ver 1.9 ends ***/	


	sprintf( st_i_ordrbk.c_xchng_ack,"%16.0lf", ptr_oe_reqres->d_order_number );

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Ack Is :%lf:",ptr_oe_reqres->d_order_number);
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
    fn_userlog(c_ServiceName,"Order Book Exchange Ack Is :%s:",st_i_ordrbk.c_xchng_ack);
  }

	/******* Commented in Ver 1.9 **********
 
  strcpy(st_i_ordrbk.c_rout_crt,c_rout_str); 

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Before Call To SFO_UPD_ORDRBK");
  }

	st_i_ordrbk.c_oprn_typ = UPDATE_XCHNG_RESPONSE;

	 i_ch_val = fn_upd_Sordrbk	(	&st_i_ordrbk,
															c_ServiceName,
															c_err_msg
														);

  if ( i_ch_val != 0)
  {
    fn_errlog(c_ServiceName,"L31035", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }

	****************/
	
	/***** Ver 1.9 ****/

	st_i_ordrbk.c_prd_typ = '\0';

	/*** Update taken inside if condition in Ver 2.8 ***/

  if(DEBUG_MSG_LVL_0) /*** Ver 3.1 ***/
	{
		fn_userlog(c_ServiceName,"st_i_xchngbk.l_ors_msg_typ is :%ld:",st_i_xchngbk.l_ors_msg_typ);	
	}
	if(st_i_xchngbk.l_ors_msg_typ == ORS_NEW_ORD_ACPT || st_i_xchngbk.l_ors_msg_typ ==  ORS_NEW_ORD_RJCT)
  {
		if(DEBUG_MSG_LVL_0)
		{
    	fn_userlog(c_ServiceName,"Before Ack Number Updation In Order Book.");
		}

    EXEC SQL
      UPDATE  FOD_FO_ORDR_DTLS
      SET     FOD_ACK_NMBR  = :st_i_ordrbk.c_xchng_ack
      WHERE   FOD_ORDR_RFRNC = :sql_fxb_ordr_rfrnc
      RETURNING FOD_PRDCT_TYP
      INTO    :st_i_ordrbk.c_prd_typ;

    if(SQLCODE != 0)
    {
      fn_errlog ( c_ServiceName, "S31015", SQLMSG, c_err_msg );
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      return -1;
    }
  }
  else
  {
		if(DEBUG_MSG_LVL_0)
		{
    	fn_userlog(c_ServiceName,"Inside Order Book Product Selection.");
		}

    EXEC SQL
      SELECT  FOD_PRDCT_TYP
      INTO    :st_i_ordrbk.c_prd_typ
      FROM    FOD_FO_ORDR_DTLS
      WHERE   FOD_ORDR_RFRNC = :sql_fxb_ordr_rfrnc;

    if(SQLCODE != 0)
    {
      fn_errlog ( c_ServiceName, "S31020", SQLMSG, c_err_msg );
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      return -1;
    }
  }	
	
	/*** Ver 2.8 .Ends ***/

	strcpy(st_i_xchngbk.c_ordr_rfrnc,sql_fxb_ordr_rfrnc); 
	st_i_xchngbk.l_mdfctn_cntr = sql_fxb_mdfctn_cntr;

	if(DEBUG_MSG_LVL_0)
  {
		fn_userlog(c_ServiceName,"Product type :%c:",st_i_ordrbk.c_prd_typ);
	}	
	/**** ver 1.9 Ends ***/	

  i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);

  if ( i_ch_val == -1 )
  {
    fn_errlog(c_ServiceName,"L31040", LIBMSG, c_err_msg);
    return -1;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_xchngbk.c_rout_crt,c_rout_str);  

	ptr_fml_Ibuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

	if ( ptr_fml_Ibuf == NULL )
	{
  	fn_errlog( c_ServiceName, "S31025", TPMSG, c_err_msg  );
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		return -1;
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"SPAN st_i_xchngbk.c_rout_crt Is :%s:",st_i_xchngbk.c_rout_crt);
		fn_userlog(c_ServiceName,"SPAN st_i_xchngbk.c_ordr_rfrnc Is :%s:",st_i_xchngbk.c_ordr_rfrnc);
		fn_userlog(c_ServiceName,"SPAN st_i_xchngbk.l_ors_msg_typ Is :%ld:",st_i_xchngbk.l_ors_msg_typ);
		fn_userlog(c_ServiceName,"SPAN st_i_xchngbk.l_mdfctn_cntr Is :%ld:",st_i_xchngbk.l_mdfctn_cntr);
		fn_userlog(c_ServiceName,"SPAN st_i_xchngbk.c_ack_tm Is :%s:",st_i_xchngbk.c_ack_tm);
		fn_userlog(c_ServiceName,"SPAN st_i_xchngbk.c_entry_dt_tm Is :%s:",st_i_xchngbk.c_entry_dt_tm);
	}

	i_err [0] = Fadd32(ptr_fml_Ibuf,FFO_ROUT_CRT, (char *)st_i_xchngbk.c_rout_crt,0);
  i_ferr[0] = Ferror32;
	i_err [1] = Fadd32(ptr_fml_Ibuf,FFO_ORDR_RFRNC, (char *)st_i_xchngbk.c_ordr_rfrnc,0);
  i_ferr[1] = Ferror32;
	i_err [2] = Fadd32(ptr_fml_Ibuf,FFO_ORS_MSG_TYP, (char *)&st_i_xchngbk.l_ors_msg_typ,0);
  i_ferr[2] = Ferror32;
	i_err [3] = Fadd32(ptr_fml_Ibuf,FFO_MDFCTN_CNTR, (char *)&st_i_xchngbk.l_mdfctn_cntr,0);
  i_ferr[3] = Ferror32;
	i_err [4] = Fadd32(ptr_fml_Ibuf,FFO_ACK_TM, (char *)st_i_xchngbk.c_ack_tm,0);
  i_ferr[4] = Ferror32;
	i_err [5] = Fadd32(ptr_fml_Ibuf,FFO_PREV_ACK_TM, (char *)st_i_xchngbk.c_entry_dt_tm,0);
  i_ferr[5] = Ferror32;
  /*** ver 4.5 starts ****/
  i_err [6] = Fadd32(ptr_fml_Ibuf,FFO_XCHNG_CAN_QTY,(char *)&st_i_xchngbk.l_xchng_can_qty,0);
  i_ferr[6] = Ferror32;
  /*** ver 4.5 ends ****/
	for (i = 0;i < 7 ;i++)
  {
  	if(i_err[i] == -1)
    {
			fn_userlog( c_ServiceName, "Error in :%d:",i );
      fn_errlog( c_ServiceName, "S31030", Fstrerror32( i_ferr[i]),c_err_msg );
      tpfree((char *)ptr_fml_Ibuf);
			return -1;
    }
  }

	/*** Ver 1.4 starts ***/
	if (st_i_ordrbk.c_prd_typ == 'P')	
	{
		i_ch_val = Fvftos32( ptr_fml_Ibuf,
												 (char *) &vw_i_xchngbk,
												 "vw_xchngbook" );


		if ( i_ch_val == -1 )
		{
			fn_errlog( c_ServiceName, "S31035", FMLMSG, c_err_msg  );
		  tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}
		i_ch_val = fn_acall_svc ( c_ServiceName,
															c_err_msg,
															&vw_i_xchngbk,
															"vw_xchngbook",
															sizeof ( vw_i_xchngbk ),
															TPNOREPLY,
															"SFO_FUT_ACK" );
	}
	else
	{
	/*** Ver 1.4 ends ***/
		i_ch_val	=	tpacall ( "SFO_PRCS_RSP", (char *)ptr_fml_Ibuf,0, TPNOTRAN|TPNOREPLY);
	}	 /*** Ver 1.4 ***/

  if ( i_ch_val != 0 )
  {
    fn_errlog(c_ServiceName,"L31045", TPMSG, c_err_msg);
 		tpfree ( ( char * )ptr_fml_Ibuf);
    return -1;
  }

  tpfree((char *)ptr_fml_Ibuf);  /*** Ver 4.0 ***/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"After Complition Of fn_spnord_acpt_rjct");
  }

  return 0;

}

int fn_spnord_can ( struct st_oe_reqres *ptr_oe_reqres,
                 char *c_xchng_cd,
                 char *c_pipe_id,
                 char *c_rout_str,
                 char *c_trd_dt,
                 char *c_ordr_rfrnc,
                 int  i_dwnld_flg,
                 char *c_ServiceName,
                 char *c_err_msg)
{

  FBFR32 *ptr_fml_Ibuf;

  char c_xchng_rmrks[256];
  char c_mtch_accnt[10 + 1];
  char c_usr_id[16];   
	char c_lst_act_ref[22];		/*** Ver 4.6 ***/

  int i_trnsctn;
  int i_ch_val;
	int i;
  int i_err  [7]; /*** Ver 1.3 -- array sixe changed from 6 to 7 ***/
  int i_ferr [7]; /*** Ver 1.3 -- array sixe changed from 6 to 7 ***/

  long l_token_id;
  long long ll_log_tm_stmp;

  struct st_xchngbook st_i_xchngbk;
  struct st_orderbook st_i_ordbk;
  struct st_contract st_cntrct;
	struct vw_xchngbook vw_i_xchngbk;		/*** Ver 1.4 ***/

  ptr_fml_Ibuf = (FBFR32 *)NULL;

  MEMSET(st_i_xchngbk);
  MEMSET(st_i_ordbk);
  MEMSET(st_cntrct);
  MEMSET(c_xchng_rmrks);
	MEMSET(c_lst_act_ref);   /*** Ver 4.6 ***/

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Inside Function fn_spnord_can");
  }

  switch (ptr_oe_reqres->st_hdr.si_transaction_code)
  {
		 case ORDER_CANCEL_CONFIRM_OUT :
		 case ORDER_ERROR_OUT :  /** Ver 5.7 **/

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside ORDER_CANCEL_CONFIRM_OUT Case");
      }
      st_i_xchngbk.l_ors_msg_typ = ORS_IOC_CAN_ACPT;

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Message Type Is :%ld:",st_i_xchngbk.l_ors_msg_typ);
        fn_userlog(c_ServiceName,"Exchange Ack Time Is :%ld:",ptr_oe_reqres->li_last_modified);
        fn_userlog(c_ServiceName,"Exchange Volume Filled Today Is :%ld:",ptr_oe_reqres->li_volume_filled_today);
        fn_userlog(c_ServiceName,"Exchange Token NO. Is :%ld:",ptr_oe_reqres->l_token_no);
				fn_userlog(c_ServiceName,"Error code Is :%d:",ptr_oe_reqres->st_hdr.si_error_code);  /*** Ver 1.8 **/
      }

      fn_long_to_timearr (st_i_xchngbk.c_ack_tm,ptr_oe_reqres->li_last_modified);

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
      }

      st_i_xchngbk.l_xchng_can_qty = ptr_oe_reqres->li_volume_filled_today;

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Exchange Book Cancelled Qty Is :%ld:",st_i_xchngbk.l_xchng_can_qty);
      }

      /* strcpy(c_xchng_rmrks , "IOC order cancelled" );  Commented in Ver 1.8 */
		
			if ( ptr_oe_reqres->st_hdr.si_error_code == 17070 ) /*** Ver 1.8 ***/
      {
        /***strcpy(c_xchng_rmrks , "The Price is out of the current execution range" ); 5.7**/
        strcpy(c_xchng_rmrks , "The Price is out of the current LPP range" );  /** Ver 5.7 **/
      }
      else if ( ptr_oe_reqres->st_hdr.si_error_code == 17071 ) /*** Ver 2.3 ***/
      {
        strcpy(c_xchng_rmrks , "The order could have resulted in self trade" );
      }
      /** added in ver 5.4 ***/
      else if ( ptr_oe_reqres->st_hdr.si_error_code == 16388 && ptr_oe_reqres->st_ord_flg.flg_ioc == 1 )
      {
        strcpy(c_xchng_rmrks , "IOC order cancelled by system");
      }
      /*** ver 5.4 ends ***/
      else if ( ptr_oe_reqres->st_hdr.si_error_code == 16388 ) /*** Ver 3.9 ***/
      {
        strcpy(c_xchng_rmrks , "Order Cancelled By System"); 
      }
      /** added in ver 5.4 ***/
      else if ( ptr_oe_reqres->st_ord_flg.flg_ioc == 1 )
      {
        strcpy(c_xchng_rmrks , "IOC order has been cancelled by Exchange" );
      }
      /*** ver 5.4 ends ***/
      else
      {
        /** strcpy(c_xchng_rmrks , "IOC order cancelled" ); commented in ver 5.3 ****/
        strcpy(c_xchng_rmrks , "Order has been cancelled by Exchange" ); /*** ver 5.3 ***/ 
      }

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Exchange Remark Is :%s:",c_xchng_rmrks);
      }

      l_token_id  =  ptr_oe_reqres->l_token_no;

      break;

    case BATCH_ORDER_CXL_OUT :

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside BATCH_ORDER_CXL_OUT Case");
      }

      if (ptr_oe_reqres->st_ord_flg.flg_frozen == 1 )
			{
        if(DEBUG_MSG_LVL_0)
        {
          fn_userlog(c_ServiceName, "Freezed order got cancelled");
        }

        st_i_xchngbk.l_ors_msg_typ = ORS_ORD_FRZ_CNCL;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Exchange Ack Time Is :%ld:",ptr_oe_reqres->li_last_modified);
          fn_userlog(c_ServiceName,"Exchange Volume Filled Today Is :%ld:", ptr_oe_reqres->li_volume_filled_today);
        }

        fn_long_to_timearr (st_i_xchngbk.c_ack_tm,ptr_oe_reqres->li_last_modified);

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
        }

        st_i_xchngbk.l_xchng_can_qty = ptr_oe_reqres->li_volume_filled_today;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Exchange Book Cancelled Qty Is :%ld:",st_i_xchngbk.l_xchng_can_qty);
        }

        strcpy(c_xchng_rmrks ,"Order Cancelled by Exchange");

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Exchange Remark Is :%s:",c_xchng_rmrks);
        }
      }
			/*** Ver 1.6 starts ***/
      else
      {
        if(DEBUG_MSG_LVL_0)
        {
          fn_userlog(c_ServiceName, "Exchange initiated expiry");
        }

        st_i_xchngbk.l_ors_msg_typ = ORS_ORD_EXP;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Exchange Ack Time Is :%ld:",ptr_oe_reqres->li_last_modified);
        }

        fn_long_to_timearr (st_i_xchngbk.c_ack_tm,ptr_oe_reqres->li_last_modified);

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
        }

        strcpy(c_xchng_rmrks ,"Exchange Expiry");

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Exchange Remark Is :%s:",c_xchng_rmrks);
        }
      }
      /*** Ver 1.6 ends ***/

      break;

    default :
      fn_userlog( c_ServiceName, "Protocol error %d", ptr_oe_reqres->st_hdr.si_transaction_code);
      break;
  }

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Ack Is :%lf:",ptr_oe_reqres->d_order_number );
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  sprintf (st_i_ordbk.c_xchng_ack, "%16.0lf", ptr_oe_reqres->d_order_number );

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Order Book Exchange Ack Is :%s:",st_i_ordbk.c_xchng_ack);
  }

  strcpy ( st_i_ordbk.c_pipe_id , c_pipe_id );

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Pipe ID Is :%s:",st_i_ordbk.c_pipe_id);
  }

	strcpy(st_i_ordbk.c_rout_crt,c_rout_str); 

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Before Call To SFO_ACK_TO_ORD");
  }

  st_i_ordbk.c_oprn_typ = FOR_VIEW;

	i_ch_val = fn_Sack_to_ord	(	&st_i_ordbk,
															c_ServiceName,
															c_usr_id,
															c_err_msg
														);  

  if ( i_ch_val != SUCC_BFR)
  {
    if ( i_ch_val == TOO_MANY_ROWS_FETCHED )
    {
      fn_userlog(c_ServiceName,"Inside TOO_MANY_ROWS_FETCHED");
      if ( strcmp ( c_xchng_cd, "NFO" ) == 0 )
      {
        i_ch_val = fn_snse_to_eba_tkn ( l_token_id,
                                       &st_cntrct,
                                       c_rout_str,
                                       c_ServiceName,
                                       c_err_msg );
        if ( i_ch_val != 0 )
        {
          return -1;
        }

        strcpy ( st_i_ordbk.c_xchng_cd, st_cntrct.c_xchng_cd );
        st_i_ordbk.c_prd_typ = st_cntrct.c_prd_typ;
        strcpy ( st_i_ordbk.c_expry_dt, st_cntrct.c_expry_dt );
        st_i_ordbk.c_exrc_typ = st_cntrct.c_exrc_typ;
        st_i_ordbk.c_opt_typ = st_cntrct.c_opt_typ;
        st_i_ordbk.l_strike_prc = st_cntrct.l_strike_prc;
        st_i_ordbk.c_ctgry_indstk = st_cntrct.c_ctgry_indstk;
        strcpy ( st_i_ordbk.c_undrlyng, st_cntrct.c_undrlyng );
        st_i_ordbk.l_ca_lvl = st_cntrct.l_ca_lvl;
        sprintf (st_i_ordbk.c_xchng_ack, "%16.0lf", ptr_oe_reqres->d_order_number );
        strcpy ( st_i_ordbk.c_pipe_id , c_pipe_id );

				if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
        }
        strcpy(st_i_ordbk.c_rout_crt,c_rout_str); 
        st_i_ordbk.c_oprn_typ = FOR_VIEW;

				i_ch_val  = fn_Sac_to_ord (  c_ServiceName,    
                                    c_err_msg,
                                    c_usr_id,
                                    &st_i_ordbk
                                 );

          if ( i_ch_val !=  0 )
          {
            fn_errlog(c_ServiceName,"L31050", LIBMSG, c_err_msg);
            return -1;
          }


        strcpy (c_ordr_rfrnc,st_i_ordbk.c_ordr_rfrnc );
      }
      else
      {
        fn_errlog(c_ServiceName,"S31040", "Logic error", c_err_msg);
        return -1;
      }
    }
    else
    {
      fn_errlog(c_ServiceName,"L31055", LIBMSG, c_err_msg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      return -1;
    }
  }


  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Code Is :%s:",st_i_ordbk.c_xchng_cd);
  }

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Order Reference No. Is :%s:",st_i_ordbk.c_ordr_rfrnc);
  }

  strcpy(st_i_xchngbk.c_pipe_id,c_pipe_id);
  strcpy ( st_i_xchngbk.c_ordr_rfrnc , st_i_ordbk.c_ordr_rfrnc );
  strcpy ( st_i_xchngbk.c_xchng_cd , st_i_ordbk.c_xchng_cd );
  strcpy ( st_i_xchngbk.c_mod_trd_dt , ( char * )c_trd_dt);
  strcpy ( c_mtch_accnt , st_i_ordbk.c_cln_mtch_accnt );
  strcpy(st_i_xchngbk.c_xchng_rmrks,c_xchng_rmrks);
  strcpy (c_ordr_rfrnc,st_i_ordbk.c_ordr_rfrnc );
  st_i_xchngbk.l_ord_tot_qty = st_i_ordbk.l_ord_tot_qty;
  st_i_xchngbk.l_ord_lmt_rt = st_i_ordbk.l_ord_lmt_rt;
  st_i_xchngbk.l_ord_seq = 0;

  /*** ver 4.8 starts ***/
  if( ptr_oe_reqres->st_hdr.si_transaction_code == BATCH_ORDER_CXL_OUT )
  {
      st_i_xchngbk.l_mdfctn_cntr = st_i_ordbk.l_mdfctn_cntr+1;
      if(DEBUG_MSG_LVL_0)
      {
         fn_userlog(c_ServiceName,"Order Book Modification counter is :%ld:,Exchange Book Modification counter is :%ld: and Order Ref num is :%s: for BATCH_ORDER_CXL_OUT",st_i_ordbk.l_mdfctn_cntr,st_i_xchngbk.l_mdfctn_cntr,st_i_ordbk.c_ordr_rfrnc );
      }
  }/*** ver 4.8 ends ***/
  else
  {
      st_i_xchngbk.l_mdfctn_cntr = EXPIRY_MDFCTN_CNTR;
  }
  /*** st_i_xchngbk.c_plcd_stts = CANCELLED;  -Commented in Ver 1.6 ***/
	/*** Ver 1.6 starts ***/
  if (st_i_xchngbk.l_ors_msg_typ == ORS_ORD_EXP)  /*** Ver 1.7 ** "=" Replaced by "=="  The condition was always true for IOC order cancellation ***/
  {
		if(st_i_ordbk.c_ordr_stts == EXPIRED || st_i_ordbk.c_ordr_stts == PARTIALLY_EXECUTED_AND_EXPIRED )   /*** Ver 2.1 ***/
    {
      fn_userlog(c_ServiceName," Order Reference No. :%s: Is Already Expired. ",st_i_ordbk.c_ordr_rfrnc);
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      return 0;
    }
    st_i_xchngbk.c_plcd_stts = EXPIRED;
  }
  else
  {
    st_i_xchngbk.c_plcd_stts = CANCELLED;
  }
  /*** Ver 1.6 ends ***/

  st_i_xchngbk.c_rms_prcsd_flg = NOT_PROCESSED;


	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Book Modification Counter Is :%ld:",st_i_xchngbk.l_mdfctn_cntr);
    fn_userlog(c_ServiceName,"Exchange Book Placed Status Is :%c:",st_i_xchngbk.c_plcd_stts);
    fn_userlog(c_ServiceName,"Exchange Book RMS Processed Flag :%c:",st_i_xchngbk.c_rms_prcsd_flg);
    fn_userlog(c_ServiceName,"Exchange Book ORS Msg Is :%ld:",st_i_xchngbk.l_ors_msg_typ);
    fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
    fn_userlog(c_ServiceName,"Exchange Book Remark Is :%s:",st_i_xchngbk.c_xchng_rmrks);
    fn_userlog(c_ServiceName,"Exchange Book Pipe ID Is :%s:",st_i_xchngbk.c_pipe_id);
    fn_userlog(c_ServiceName,"Exchange Book Order Reference Is :%s:",st_i_xchngbk.c_ordr_rfrnc);
    fn_userlog(c_ServiceName,"Exchange Book Exchange Code Is :%s:",st_i_xchngbk.c_xchng_cd);
    fn_userlog(c_ServiceName,"Exchange Book Trade Date Is :%s:",st_i_xchngbk.c_mod_trd_dt);
    fn_userlog(c_ServiceName,"Exchange Book Total Order Qty Is :%ld:",st_i_xchngbk.l_ord_tot_qty);
    fn_userlog(c_ServiceName,"Exchange Book Limit Rate Is :%ld:",st_i_xchngbk.l_ord_lmt_rt);
  }

  memcpy ( &ll_log_tm_stmp,ptr_oe_reqres->st_hdr.c_time_stamp_1, 8 );

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Log Time Stamp Is :%lld:",ll_log_tm_stmp);
  }

  st_i_xchngbk.d_jiffy = (double) ll_log_tm_stmp;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Jiffy Is :%lf:",st_i_xchngbk.d_jiffy);
  }

  st_i_xchngbk.l_dwnld_flg = i_dwnld_flg;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Book DownLoad Flag Is :%ld:",st_i_xchngbk.l_dwnld_flg);
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

	strcpy(st_i_xchngbk.c_rout_crt,c_rout_str); 

  st_i_xchngbk.l_bit_flg  = ptr_oe_reqres->st_hdr.c_time_stamp_2[LEN_TIME_STAMP -1];   

	sprintf(c_lst_act_ref,"%lld",ptr_oe_reqres->ll_lastactivityref);  /*** Ver 4.6 ***/
	rtrim(c_lst_act_ref);		/*** Ver 4.6 ***/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"IN ORD_CNCL, the stream number receievd from exchange is:%ld:",st_i_xchngbk.l_bit_flg);
		fn_userlog(c_ServiceName,"c_lst_act_ref :%s:",c_lst_act_ref);   /*** Ver 4.6 ***/
    fn_userlog(c_ServiceName,"Before Call To SFO_UPD_XCHNGBK For INSERTION_ON_ORDER_FTE");
  }

  st_i_xchngbk.c_oprn_typ = INSERTION_ON_ORDER_FTE;

  i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );

  if ( i_trnsctn ==  -1 )
  {
    fn_errlog(c_ServiceName,"L31060", LIBMSG, c_err_msg);
    return -1;
  }

	i_ch_val = fn_upd_Sxchngbk ( &st_i_xchngbk,
															c_lst_act_ref,			/*** Ver 4.6 ***/
                              c_ServiceName,
                              c_err_msg
                            );


  if ( ( i_ch_val != SUCC_BFR) && ( i_ch_val != RECORD_ALREADY_PRCSD ) )
  {
    fn_errlog(c_ServiceName,"L31065", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }

  else if ( i_ch_val == RECORD_ALREADY_PRCSD )
  {
    fn_userlog ( c_ServiceName, "Record already processed" );
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return 0;
  }

  i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);
  if ( i_ch_val == -1 )
  {
    fn_errlog(c_ServiceName,"L31070", LIBMSG, c_err_msg);
    return -1;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_xchngbk.c_rout_crt,c_rout_str); 

	ptr_fml_Ibuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  if ( ptr_fml_Ibuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31045", TPMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    return -1;
  }

	if(DEBUG_MSG_LVL_3) /**** Ver 3.1 ***/
	{
		fn_userlog(c_ServiceName," st_i_xchngbk.l_xchng_can_qty Is :%ld:",st_i_xchngbk.l_xchng_can_qty); /*** Ver 1.3 ***/
	}
	i_err [0] = Fadd32(ptr_fml_Ibuf,FFO_ROUT_CRT, (char *)st_i_xchngbk.c_rout_crt,0);
  i_ferr[0] = Ferror32;
  i_err [1] = Fadd32(ptr_fml_Ibuf,FFO_ORDR_RFRNC, (char *)st_i_xchngbk.c_ordr_rfrnc,0);
  i_ferr[1] = Ferror32;
  i_err [2] = Fadd32(ptr_fml_Ibuf,FFO_ORS_MSG_TYP, (char *)&st_i_xchngbk.l_ors_msg_typ,0);
  i_ferr[2] = Ferror32;
  i_err [3] = Fadd32(ptr_fml_Ibuf,FFO_MDFCTN_CNTR, (char *)&st_i_xchngbk.l_mdfctn_cntr,0);
  i_ferr[3] = Ferror32;
  i_err [4] = Fadd32(ptr_fml_Ibuf,FFO_ACK_TM, (char *)st_i_xchngbk.c_ack_tm,0);
  i_ferr[4] = Ferror32;
  i_err [5] = Fadd32(ptr_fml_Ibuf,FFO_PREV_ACK_TM, (char *)st_i_xchngbk.c_entry_dt_tm,0);
  i_ferr[5] = Ferror32;
	/*** Ver 1.3 Starts ***/
	i_err [6] = Fadd32(ptr_fml_Ibuf,FFO_XCHNG_CAN_QTY, (char *)&st_i_xchngbk.l_xchng_can_qty,0);
  i_ferr[6] = Ferror32;
	/*** Ver 1.3 Ends   ***/

  for (i = 0;i < 7 ;i++)   /*** Ver 1.3 -- count changed from 7 to 8 ***/
  {
    if(i_err[i] == -1)
    {
      fn_userlog( c_ServiceName, "Error in :%d:",i );
      fn_errlog( c_ServiceName, "S31050", Fstrerror32( i_ferr[i]),c_err_msg );
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }
  }

	/*** Ver 1.4 starts ***/
	if (st_i_ordbk.c_prd_typ == 'P')	
	{
		i_ch_val = Fvftos32( ptr_fml_Ibuf,
												 (char *) &vw_i_xchngbk,
												 "vw_xchngbook" );

		if ( i_ch_val == -1 )
		{
			fn_errlog( c_ServiceName, "S31055", FMLMSG, c_err_msg  );
		  tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}
	
		i_ch_val = fn_acall_svc ( c_ServiceName,
															c_err_msg,
															&vw_i_xchngbk,
															"vw_xchngbook",
															sizeof ( vw_i_xchngbk ),
															TPNOREPLY,
															"SFO_FUT_ACK" );
	}
	else
	{
	/*** Ver 1.4 ends ***/
		i_ch_val  = tpacall ( "SFO_PRCS_RSP", (char *)ptr_fml_Ibuf,0, TPNOTRAN|TPNOREPLY);
	} /*** Ver 1.4 ***/

  if ( i_ch_val != 0 )
  {
    fn_errlog(c_ServiceName,"L31075", TPMSG, c_err_msg);
    tpfree ( ( char * )ptr_fml_Ibuf);
    return -1;
  }

  tpfree ( ( char * )ptr_fml_Ibuf);  /*** Ver 4.0 ***/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"After Complition Of fn_spnord_can");
  }

  return 0;

}

/******************************************************************************/
/*  To update details about order freeze / order tiggered / order expired     */
/*  INPUT PARAMETERS                                                          */
/*      ptr_oe_reqres - Pointer to a message structure got from Exchange      */
/*      c_pipe_id     - Pipe Id                                               */
/*      c_ordr_rfrnc  - Order Reference                                       */
/*      i_dwnld_flg   - Download Flag                                         */
/*      c_ServiceName - Service Name currently running                        */
/*      c_err_msg     - Error message to be returned                          */
/*  OUTPUT PARAMETERS                                                         */
/*        0   - Success                                                       */
/*        -1  - Failure                                                       */
/******************************************************************************/

int fn_spnord_frz_exp ( struct st_oe_reqres *ptr_oe_reqres,
                     char   *c_xchng_cd,
                     char *c_pipe_id,
                     char *c_rout_str,
                     char *c_trd_dt,
                     char *c_ordr_rfrnc,
                     int  i_dwnld_flg,
                     char *c_ServiceName,
                     char *c_err_msg)
{

	FBFR32 *ptr_fml_Ibuf;

	char c_xchng_rmrks[256];
  char c_ord_res_stts;
  char c_usr_id[16];
  char c_ordr_rfrnc_tmp[19];  /** ver 2.7 **/
	char c_lst_act_ref[22];			/*** Ver 4.6 ***/

  int i_trnsctn;
  int i_ch_val;
	int i_err[6];
	int	i_ferr[6];
	int	i;
  int  i_ordr_sqnc=0;  /** ver 2.7 **/

  long long ll_log_tm_stmp;

  struct st_xchngbook st_i_xchngbk;
  struct st_xchngbook st_tmp_xchngbk;
  struct st_orderbook st_i_ordbk;
	struct vw_xchngbook vw_i_xchngbk;		/*** Ver 1.4 ***/

  MEMSET(st_i_xchngbk);
  MEMSET(st_tmp_xchngbk);
  MEMSET(st_i_ordbk);
  MEMSET(c_xchng_rmrks);
  MEMSET(c_ordr_rfrnc_tmp); /** Ver 2.7 **/
	MEMSET(c_lst_act_ref);		/** Ver 4.6 **/

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Inside fn_spnord_frz_exp");
  }

  ptr_fml_Ibuf = (FBFR32 *)NULL;

	switch (ptr_oe_reqres->st_hdr.si_transaction_code)
  {
    case FREEZE_TO_CONTROL :

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"FREEZE_TO_CONTROL Case");
      }

      st_i_xchngbk.l_ors_msg_typ = ORS_ORD_FRZ ;
      c_ord_res_stts = FREEZED;

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Message Type Is :%ld:",st_i_xchngbk.l_ors_msg_typ);
        fn_userlog(c_ServiceName,"Order Status Is :%c:",c_ord_res_stts);
      }

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Exchange Ack Time Is :%ld:",ptr_oe_reqres->st_hdr.li_log_time );
      }

      fn_long_to_timearr(st_i_xchngbk.c_ack_tm,ptr_oe_reqres->st_hdr.li_log_time );

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
      }

      if ( ptr_oe_reqres->si_reason_code == 18 )
      {
        strcpy(c_xchng_rmrks , "Order Freeze - Quantity");

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Exchange Remark Is :%s:",c_xchng_rmrks);
        }
      }
      else
      {
        strcpy(c_xchng_rmrks , "Order Freeze - Price");

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Exchange Remark Is :%s:",c_xchng_rmrks);
        }
      }

	    break;

    case  ORS_ORD_EXP :

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"ORS_ORD_EXP Case");
      }

      c_ord_res_stts = EXPIRED;

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Order Status Is :%c:",c_ord_res_stts);
      }

      break;

    default :
      fn_userlog( c_ServiceName, "Protocol error %d", ptr_oe_reqres->st_hdr.si_transaction_code);
      break;
  }

	if ( c_ord_res_stts == EXPIRED )
  {
    sprintf (st_i_ordbk.c_xchng_ack, "%16.0lf", ptr_oe_reqres->d_order_number );
    strcpy ( st_i_ordbk.c_pipe_id , c_pipe_id );


    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
    }

    strcpy(st_i_ordbk.c_rout_crt,c_rout_str); 

    st_i_ordbk.c_oprn_typ = FOR_VIEW;

		i_ch_val =  fn_Sack_to_ord	( &st_i_ordbk,
                              	c_ServiceName,
                              	c_usr_id,
                              	c_err_msg
                            	);
							

    if ( i_ch_val != SUCC_BFR)
    {
      fn_errlog(c_ServiceName,"L31080", LIBMSG, c_err_msg);
      return -1;
    }

		strcpy ( st_i_xchngbk.c_ordr_rfrnc , st_i_ordbk.c_ordr_rfrnc );
    strcpy ( st_i_xchngbk.c_xchng_cd , st_i_ordbk.c_xchng_cd );
    strcpy ( st_i_xchngbk.c_pipe_id , st_i_ordbk.c_pipe_id );
    strcpy ( st_i_xchngbk.c_mod_trd_dt , ( char * )c_trd_dt );
    st_i_xchngbk.l_ord_tot_qty = st_i_ordbk.l_ord_tot_qty;
    st_i_xchngbk.l_ord_lmt_rt = st_i_ordbk.l_ord_lmt_rt;
    st_i_xchngbk.l_ord_seq = 0;
    st_i_xchngbk.l_mdfctn_cntr = EXPIRY_MDFCTN_CNTR;
    st_i_xchngbk.c_rms_prcsd_flg = NOT_PROCESSED;
  }
  else
  {

    /*** ver 2.7 Starts Here ***/
    i_ordr_sqnc=0;
    i_ordr_sqnc = ptr_oe_reqres->i_ordr_sqnc;

    EXEC SQL
      SELECT FXB_ORDR_RFRNC
        INTO :c_ordr_rfrnc_tmp
        FROM FXB_FO_XCHNG_BOOK
       WHERE FXB_XCHNG_CD = :c_xchng_cd
         AND FXB_ORDR_SQNC = :i_ordr_sqnc
         AND FXB_PIPE_ID = :c_pipe_id
         AND FXB_MOD_TRD_DT = :c_trd_dt;
    if( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName,"L31085", SQLMSG, c_err_msg);
      return -1;
    }

    strcpy(c_ordr_rfrnc,c_ordr_rfrnc_tmp);
    /**** Ver 2.7 Ends here ****/

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"I/P Order Reference No. Is :%s:",c_ordr_rfrnc);
      fn_userlog(c_ServiceName,"I/P Exchange Code Is :%s:",c_xchng_cd);
      fn_userlog(c_ServiceName,"I/P Pipe ID Is :%s:",c_pipe_id);
    }

    strcpy ( st_i_xchngbk.c_ordr_rfrnc , c_ordr_rfrnc );
    strcpy ( st_i_xchngbk.c_xchng_cd , c_xchng_cd );
    strcpy ( st_i_xchngbk.c_pipe_id , c_pipe_id );
    strcpy ( st_i_xchngbk.c_mod_trd_dt , ( char * )c_trd_dt );
    st_i_xchngbk.l_ord_seq = 0;
    st_i_xchngbk.l_mdfctn_cntr = 0;
    st_i_xchngbk.c_rms_prcsd_flg = PROCESSED;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Exchange Volume Is :%ld:",ptr_oe_reqres->li_volume);
      fn_userlog(c_ServiceName,"Exchange Price Is :%ld:",ptr_oe_reqres->li_price);
    }

		  st_i_xchngbk.l_ord_tot_qty = ptr_oe_reqres->li_volume;
    st_i_xchngbk.l_ord_lmt_rt = ptr_oe_reqres->li_price;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Exchange Book Total Order Qty Is :%ld:",st_i_xchngbk.l_ord_tot_qty);
      fn_userlog(c_ServiceName,"Exchange Book Order Limit Rate Is :%ld:",st_i_xchngbk.l_ord_lmt_rt);
    }
  }

  st_i_xchngbk.c_plcd_stts = c_ord_res_stts;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Placed Status Is :%c:",st_i_xchngbk.c_plcd_stts);
  }

  memcpy ( &ll_log_tm_stmp,ptr_oe_reqres->st_hdr.c_time_stamp_1, 8 );

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Log Time Stamp Is :%lld:",ll_log_tm_stmp);
  }

  st_i_xchngbk.d_jiffy = (double) ll_log_tm_stmp;
  strcpy(st_i_xchngbk.c_xchng_rmrks,c_xchng_rmrks);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Jiffy Is :%lf:",st_i_xchngbk.d_jiffy);
  }

  st_i_xchngbk.l_dwnld_flg = i_dwnld_flg;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Book DownLoad Flag Is :%ld:",st_i_xchngbk.l_dwnld_flg);
  }

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_xchngbk.c_rout_crt,c_rout_str); 

  st_i_xchngbk.l_bit_flg  = ptr_oe_reqres->st_hdr.c_time_stamp_2[LEN_TIME_STAMP -1];     

	sprintf(c_lst_act_ref,"%lld",ptr_oe_reqres->ll_lastactivityref);		/*** Ver 4.6 ***/
	rtrim(c_lst_act_ref);			/*** Ver 4.6 ***/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"IN FRZ_EXP, the stream number receievd from exchange is:%ld:",st_i_xchngbk.l_bit_flg);  
    fn_userlog(c_ServiceName,"Before Call To SFO_UPD_XCHNGBK With INSERTION_ON_ORDER_FTE");
  }

  st_i_xchngbk.c_oprn_typ = INSERTION_ON_ORDER_FTE;

  i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );
  if ( i_trnsctn ==  -1 )
  {
    fn_errlog(c_ServiceName,"L31090", LIBMSG, c_err_msg);
    return -1;
  }

	i_ch_val = fn_upd_Sxchngbk ( &st_i_xchngbk,
															c_lst_act_ref,					/*** Ver 4.6 ***/
                              c_ServiceName,
                              c_err_msg
                            );

	if ( ( i_ch_val != SUCC_BFR) && ( i_ch_val != RECORD_ALREADY_PRCSD ) )
  {
    fn_errlog(c_ServiceName,"L31095", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }
  else if ( i_ch_val == RECORD_ALREADY_PRCSD )
  {
    fn_userlog ( c_ServiceName, "Record already processed" );
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return 0;
  }

	if ( c_ord_res_stts == FREEZED )
  {
    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"Order Reference No. Is :%s:",c_ordr_rfrnc);
    }

    strcpy ( st_i_ordbk.c_ordr_rfrnc ,c_ordr_rfrnc);

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"Order Book Order Reference No. Is :%s:",st_i_ordbk.c_ordr_rfrnc);
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Exchange Ack Is :%lf:",ptr_oe_reqres->d_order_number);
    }

    sprintf (st_i_ordbk.c_xchng_ack, "%16.0lf", ptr_oe_reqres->d_order_number );

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"Order Book Ack No. Is :%s:",st_i_ordbk.c_xchng_ack);
    }


    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
    }

    strcpy(st_i_ordbk.c_rout_crt,c_rout_str); 

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Call To SFO_UPD_ORDRBK With UPDATE_XCHNG_RESPONSE");
    }

		st_i_ordbk.c_oprn_typ = UPDATE_XCHNG_RESPONSE;

		i_ch_val = fn_upd_Sordrbk ( &st_i_ordbk,
															c_lst_act_ref,	/*** Ver 4.6 ***/
                              c_ServiceName,
                              c_err_msg
                            );


    if ( i_ch_val != SUCC_BFR)
    {
      fn_errlog(c_ServiceName,"L31100", LIBMSG, c_err_msg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      return -1;
    }

    strcpy ( st_i_ordbk.c_ordr_rfrnc ,c_ordr_rfrnc);
    st_i_ordbk.c_ordr_stts = FREEZED ;


    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
    }

    strcpy(st_i_ordbk.c_rout_crt,c_rout_str);

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Call To SFO_UPD_ORDRBK With UPDATE_ORDER_STATUS");
    }

    st_i_ordbk.c_oprn_typ = UPDATE_ORDER_STATUS;

		i_ch_val = fn_upd_Sordrbk ( &st_i_ordbk,
															c_lst_act_ref,		/*** Ver 4.6 ***/
                              c_ServiceName,
                              c_err_msg
                            );

    if ( i_ch_val != SUCC_BFR)
    {
      fn_errlog(c_ServiceName,"L31105", LIBMSG, c_err_msg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      return -1;
    }

  }

  i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);

  if ( i_ch_val == -1 )
  {
    fn_errlog(c_ServiceName,"L31110", LIBMSG, c_err_msg);
    return -1;
  }

	if (c_ord_res_stts == EXPIRED )
  {
    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
    }

    strcpy(st_i_xchngbk.c_rout_crt,c_rout_str); 

		i_err [0] = Fadd32(ptr_fml_Ibuf,FFO_ROUT_CRT, (char *)st_i_xchngbk.c_rout_crt,0);
  	i_ferr[0] = Ferror32;
  	i_err [1] = Fadd32(ptr_fml_Ibuf,FFO_ORDR_RFRNC, (char *)st_i_xchngbk.c_ordr_rfrnc,0);
  	i_ferr[1] = Ferror32;
  	i_err [2] = Fadd32(ptr_fml_Ibuf,FFO_ORS_MSG_TYP, (char *)&st_i_xchngbk.l_ors_msg_typ,0);
  	i_ferr[2] = Ferror32;
  	i_err [3] = Fadd32(ptr_fml_Ibuf,FFO_MDFCTN_CNTR, (char *)&st_i_xchngbk.l_mdfctn_cntr,0);
  	i_ferr[3] = Ferror32;
  	i_err [4] = Fadd32(ptr_fml_Ibuf,FFO_ACK_TM, (char *)st_i_xchngbk.c_ack_tm,0);
  	i_ferr[4] = Ferror32;
  	i_err [5] = Fadd32(ptr_fml_Ibuf,FFO_PREV_ACK_TM, (char *)st_i_xchngbk.c_entry_dt_tm,0);
  	i_ferr[5] = Ferror32;

  	for (i = 0;i < 7 ;i++)
  	{
    	if(i_err[i] == -1)
    	{
      	fn_userlog( c_ServiceName, "Error in :%d:",i );
      	fn_errlog( c_ServiceName, "S31060", Fstrerror32( i_ferr[i]),c_err_msg );
      	tpfree((char *)ptr_fml_Ibuf);
      	return -1;
    	}
  	}

		/*** Ver 1.4 starts ***/
		if (st_i_ordbk.c_prd_typ == 'P')	
		{
			i_ch_val = Fvftos32( ptr_fml_Ibuf,
										 (char *) &vw_i_xchngbk,
										 "vw_xchngbook" );


			if ( i_ch_val == -1 )
			{
				fn_errlog( c_ServiceName, "S31065", FMLMSG, c_err_msg  );
				tpfree((char *)ptr_fml_Ibuf);
				return -1;
			}

			i_ch_val = fn_acall_svc ( c_ServiceName,
																c_err_msg,
																&vw_i_xchngbk,
																"vw_xchngbook",
																sizeof ( vw_i_xchngbk ),
																TPNOREPLY,
																"SFO_FUT_ACK" );
		}
		else
		{
		/*** Ver 1.4 ends ***/
			i_ch_val  = tpacall ( "SFO_PRCS_RSP", (char *)ptr_fml_Ibuf,0, TPNOTRAN|TPNOREPLY);
		} /*** Ver 1.4 ***/

    if ( i_ch_val != SUCC_BFR )
    {
      fn_errlog(c_ServiceName,"L31115", LIBMSG, c_err_msg);
      return -1;
    }

  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"After Complition Of fn_spnord_frz_exp");
  }

  return 0;
}

/******************************************************************************/
/*  This Handels Stop Loss Order Triggered Response.                          */
/*  INPUT PARAMETERS                                                          */
/*      ptr_st_trd_conf- Pointer to a message structure got from Exchange     */
/*      c_pipe_id      - Pipe Id                                              */
/*      c_ord_res_stts - Order Response Status                                */
/*      i_dwnld_flg    - Download Flag                                        */
/*      c_ServiceName  - Service Name currently running                       */
/*      c_err_msg      - Error message to be returned                         */
/*  OUTPUT PARAMETERS                                                         */
/*        0   - Success                                                       */
/*        -1  - Failure                                                       */
/******************************************************************************/

int fn_spnstpls_trg ( struct st_trade_confirm *ptr_st_trd_conf,
                   char *c_xchng_cd,
                   char *c_pipe_id,
                   char *c_rout_str,
                   char *c_trd_dt,
                   char c_ord_res_stts,
                   char *c_ServiceName,
                   int  i_dwnld_flg,
                   char *c_err_msg )
{

	int i_trnsctn;
  int i_ch_val;
  int i_returncode;

  char c_svc_name [ 16 ];
  char c_xchng_rmrks[256];
  char c_ordr_rfrnc [19];
  char c_refack_tmp[LEN_ORD_REFACK];
  char c_mtch_accnt [10 + 1];
	char c_lst_act_ref[22];			/*** Ver 4.6 ***/
	char c_usr_id[16];
	char c_cep_flg='\0';  /*** Ver 3.5 **/
  char c_addmod_flg='\0';  /*** Ver 3.5 **/
  char c_prd_typ='\0';        /*** ver 3.7 ****/
  char c_ordr_stts = '\0'; 		/** Ver 3.7 **/
  long long ll_log_tm_stmp;

  struct st_xchngbook st_i_xchngbk;
  struct st_orderbook st_i_ordbk;

  MEMSET(st_i_xchngbk);
  MEMSET(st_i_ordbk);
  MEMSET(c_xchng_rmrks);
	MEMSET(c_lst_act_ref); /*** Ver 4.6 ***/

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Inside fn_stpls_trg");
  }

  /*** strcpy( c_xchng_rmrks , "Stop Loss Order Triggered" ); *** Commented in Ver 2.0 ***/

  i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );
  if ( i_trnsctn ==  -1 )
  {
    fn_errlog(c_ServiceName,"L31120", LIBMSG, c_err_msg);
    return -1;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Ack Is :%lf:",ptr_st_trd_conf->d_response_order_number);
  }

  sprintf(st_i_ordbk.c_xchng_ack,"%16.0lf",ptr_st_trd_conf->d_response_order_number);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Order Book Exchange Ack Is :%s:",st_i_ordbk.c_xchng_ack);
  }

  strcpy ( st_i_ordbk.c_pipe_id , c_pipe_id );

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Order Book Pipe ID Is :%s:",st_i_ordbk.c_pipe_id);
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_ordbk.c_rout_crt,c_rout_str); 

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Before Call To SFO_ACK_TO_ORD With FOR_UPDATE");
  }

  /**Ver 3.7 Starts ***/

  fn_userlog( c_ServiceName, "Trying to take lock for Xchange Ack :%s: for pipe id :%s:",st_i_ordbk.c_xchng_ack, st_i_ordbk.c_pipe_id);

   c_ordr_stts ='\0';

   EXEC SQL
      SELECT FOD_ORDR_STTS,
             FOD_ORDR_RFRNC ,
             FOD_PRDCT_TYP                   
      INTO :c_ordr_stts,
           :c_ordr_rfrnc,
           :c_prd_typ             
      FROM FOD_FO_ORDR_DTLS
      WHERE FOD_ACK_NMBR   = :st_i_ordbk.c_xchng_ack
      AND FOD_PIPE_ID   = :st_i_ordbk.c_pipe_id
    FOR   UPDATE OF FOD_ORDR_RFRNC NOWAIT;

    if ( SQLCODE != 0)
    {
      if (SQLCODE == -54)
      {
        fn_userlog( c_ServiceName, "Resource busy and acquire with NOWAIT specified or timeout expired");
      }

      fn_errlog(c_ServiceName,"L31125", SQLMSG, c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }
    else
    {
      fn_userlog( c_ServiceName, "Sucessfully acquired FOR UPDATE NOWAIT on :%s: for pipe id  :%s:",st_i_ordbk.c_xchng_ack, st_i_ordbk.c_pipe_id);
    }
    if( c_ordr_stts == 'Q' )
    {
      fn_userlog(c_ServiceName,"Order in Queued Status, trigger write in error queue");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );

      i_returncode =  fn_fxb_rms ( c_ServiceName, 
                                        c_err_msg,
                                        c_prd_typ,
                                        c_ordr_rfrnc) ;

      return -1;
    }

	/****** ver 3.7 added *********/

  st_i_ordbk.c_oprn_typ = FOR_UPDATE;

	i_ch_val = fn_Sack_to_ord  ( &st_i_ordbk,
                              c_ServiceName,
                              c_usr_id,
                              c_err_msg
                            );


  if ( i_ch_val != SUCC_BFR)
  {
    fn_errlog(c_ServiceName,"L31130", LIBMSG, c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }

  strcpy(c_ordr_rfrnc,st_i_ordbk.c_ordr_rfrnc);

  /** i_returncode = fn_lock_usr( c_ServiceName,  st_i_ordbk.c_cln_mtch_accnt ); ** Ver 5.9 **/
  i_returncode = fn_lock_fno( c_ServiceName,  st_i_ordbk.c_cln_mtch_accnt ); /** Ver 5.9 **/

  if ( i_returncode != 0 )
  {
    fn_errlog ( c_ServiceName, "L31135", LIBMSG, c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }

  strcpy ( st_i_xchngbk.c_ordr_rfrnc , st_i_ordbk.c_ordr_rfrnc );
  strcpy ( st_i_xchngbk.c_xchng_cd , st_i_ordbk.c_xchng_cd );
  strcpy ( c_mtch_accnt , st_i_ordbk.c_cln_mtch_accnt );
  strcpy ( st_i_xchngbk.c_pipe_id , st_i_ordbk.c_pipe_id );
  strcpy ( st_i_xchngbk.c_mod_trd_dt , ( char * )c_trd_dt );
  st_i_xchngbk.l_ord_tot_qty = st_i_ordbk.l_ord_tot_qty;
  st_i_xchngbk.l_ord_lmt_rt = st_i_ordbk.l_ord_lmt_rt;
  st_i_xchngbk.l_ord_seq = 0;
  st_i_xchngbk.l_mdfctn_cntr = 0;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Ack Time Is :%ld:",ptr_st_trd_conf->li_activity_time);
  }

  fn_long_to_timearr ( st_i_xchngbk.c_ack_tm, ptr_st_trd_conf->li_activity_time );

  strcpy( c_xchng_rmrks , "Stop Loss Order Triggered at " );    /*** Ver 2.0 ***/
  strcat( c_xchng_rmrks , st_i_xchngbk.c_ack_tm );            /*** Ver 2.0 ***/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
    fn_userlog(c_ServiceName,"Order Status Is :%c:",c_ord_res_stts);
  }

  st_i_xchngbk.c_plcd_stts = c_ord_res_stts;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Book Placed Status Is :%c:",st_i_xchngbk.c_plcd_stts);
  }

	st_i_xchngbk.c_rms_prcsd_flg	= PROCESSED;
  st_i_xchngbk.l_ors_msg_typ 		= ORS_ORD_TRG;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Remark Is :%s:",c_xchng_rmrks);
  }

  strcpy( st_i_xchngbk.c_xchng_rmrks ,c_xchng_rmrks);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Book Remark Is :%s:",st_i_xchngbk.c_xchng_rmrks);
  }

  st_i_xchngbk.l_dwnld_flg = i_dwnld_flg;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Book DownLoad Flag Is :%ld:",st_i_xchngbk.l_dwnld_flg);
  }

  memcpy(&ll_log_tm_stmp,ptr_st_trd_conf->st_hdr.c_time_stamp_1, 8);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Log Time Stamp Is :%lld:",ll_log_tm_stmp);
  }

  st_i_xchngbk.d_jiffy = (double) ll_log_tm_stmp;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Jiffy Is :%lf:",st_i_xchngbk.d_jiffy);
  }


  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_xchngbk.c_rout_crt,c_rout_str); 

  st_i_xchngbk.l_bit_flg  = ptr_st_trd_conf->st_hdr.c_time_stamp_2[LEN_TIME_STAMP -1]; 

	sprintf("c_lst_act_ref","%lld",ptr_st_trd_conf->ll_lastactivityref); /*** Ver 4.6 ***/
	rtrim(c_lst_act_ref);		/*** Ver 4.6 ***/

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"IN SLTP_TRG, the stream number receievd from exchange is:%ld:",st_i_xchngbk.l_bit_flg);
		fn_userlog(c_ServiceName,"c_lst_act_ref :%s:",c_lst_act_ref);		/*** Ver 4.6 ***/
    fn_userlog(c_ServiceName,"Before Call To SFO_UPD_XCHNGBK With INSERTION_ON_ORDER_FTE");
  }

  st_i_xchngbk.c_oprn_typ = INSERTION_ON_ORDER_FTE;

	i_ch_val = fn_upd_Sxchngbk ( &st_i_xchngbk,
															c_lst_act_ref,			/*** Ver 4.6 ***/
                              c_ServiceName,
                              c_err_msg
                            );


  if ( ( i_ch_val != SUCC_BFR ) && ( i_ch_val != RECORD_ALREADY_PRCSD ) )
  {
    fn_errlog(c_ServiceName,"L31140", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }

  else if ( i_ch_val == RECORD_ALREADY_PRCSD )
  {
    fn_userlog ( c_ServiceName, "Record already processed" );
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return 0;
  }


  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Ack Time Is :%ld:",ptr_st_trd_conf->li_activity_time);
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  fn_long_to_timearr ( st_i_ordbk.c_ack_tm, ptr_st_trd_conf->li_activity_time );

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Order Book Ack Time Is :%s:",st_i_ordbk.c_ack_tm);
  }

	strcpy(st_i_ordbk.c_rout_crt,c_rout_str); 

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Before Call To SFO_UPD_ORDRBK With UPDATE_XCHNG_RESP_DTLS_OT");
  }

  st_i_ordbk.c_oprn_typ = UPDATE_XCHNG_RESP_DTLS_OT;

  i_returncode	= fn_upd_Sordrbk ( &st_i_ordbk,
																	c_lst_act_ref,			/*** Ver 4.6 ***/
                              		c_ServiceName,
                              		c_err_msg
                            		);


  if ( i_returncode != SUCC_BFR )
  {
    fn_errlog ( c_ServiceName, "L31145", LIBMSG, c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }

	 /*** Ver 3.5 Starts here ***/
  c_cep_flg='\0';
  c_addmod_flg='\0';
  if(st_i_ordbk.c_prd_typ =='F' )
  {
    if( st_i_ordbk.c_slm_flg == 'S' && st_i_ordbk.c_prcimpv_flg == 'Y' )
    {
      /*** Send the instruction to CEP to delete the record from CEP MAP ****/
       c_cep_flg ='R';
       c_addmod_flg ='\0';
       i_returncode  = fn_cal_spn_incrmntl_price(c_ServiceName,
                              c_addmod_flg,
                              c_cep_flg,
                              c_err_msg,
                              &st_i_ordbk,
                              &st_i_xchngbk
                              );
       if ( i_returncode != 0 )
       {
          fn_errlog ( c_ServiceName, "L31150", LIBMSG, c_err_msg );
          fn_userlog( c_ServiceName, "Error while calling fn_cal_incrmntl_price");
       }
    }
  }
  /*** Ver 3.5 Ends Here ***/

  i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);

  if ( i_ch_val == -1 )
  {
    fn_errlog(c_ServiceName,"L31155", LIBMSG, c_err_msg);
    return -1;
  }

    i_returncode =  fn_fxb_rms  (  c_ServiceName,        /****** Function calling added in ver 3.7 ********/
                                   c_err_msg,
                                   c_prd_typ,
                                   c_ordr_rfrnc) ;

    if ( i_returncode == -1 )
    {
      fn_errlog ( c_ServiceName, "L31160", LIBMSG, c_err_msg );
      return -1;
    }


   i_returncode =  fn_ftd_rms ( c_ServiceName,        /** Function calling added in ver 3.7 **/
                                c_err_msg,
                                c_prd_typ,
                                c_ordr_rfrnc) ;

    if ( i_returncode == -1 )
    {
      fn_errlog ( c_ServiceName, "L31165", LIBMSG, c_err_msg );
      return -1;
    }

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"After Complition Of fn_stpls_trg");
  }

  return 0;
}

int fn_spnsprd_ord_confirmation ( struct st_spd_oe_reqres *ptr_st_spdoe_reqres,
                               char   *c_xchng_cd,
                               char   *c_pipe_id,
                               char   *c_rout_str,
                               char   *c_trd_dt,
                               int    i_dwnld_flg,
                               char   *c_ServiceName,
                               char   *c_err_msg )
{
  int i_ch_val;

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Inside fn_sprd_ord_confirmation ");
  }

	switch (ptr_st_spdoe_reqres->st_hdr.si_transaction_code)
  {
    case SP_ORDER_CONFIRMATION :
    case SP_ORDER_ERROR :
    case TWOL_ORDER_CONFIRMATION :
    case TWOL_ORDER_ERROR :
    case THRL_ORDER_CONFIRMATION :
    case THRL_ORDER_ERROR :
    case SP_ORDER_MOD_CON_OUT:   /** Ver 4.2 ***/
    case SP_ORDER_MOD_REJ_OUT:  /** Ver 4.2 ***/

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Before Call To fn_spnspd_acpt_rjct");
      }


      i_ch_val = fn_spnspd_acpt_rjct(ptr_st_spdoe_reqres,
                                  c_xchng_cd,
                                  c_pipe_id,
                                  c_rout_str,
                                  c_trd_dt,
                                  i_dwnld_flg,
                                  c_ServiceName,
                                  c_err_msg);

      if (i_ch_val == -1)
      {
        fn_userlog(c_ServiceName,"Failed While Calling Function fn_spnspd_acpt_rjct");
        return -1;
      }

      break;

    case SP_ORDER_CXL_CONFIRM_OUT :
    case TWOL_ORDER_CXL_CONFIRMATION :
    case THRL_ORDER_CXL_CONFIRMATION :
    case SP_ORDER_CANCEL_REJ_OUT:  /** ver 4.2 **/

				sleep(3);          /*** 2L Order OEREMARK Change ***/

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Before Call To fn_spnspd_ord_cncl");
      }

      if ( ptr_st_spdoe_reqres->st_order_flgs.flg_ioc == 1 )  /** Ver 4.2 if condition added **/
      {
			 i_ch_val = fn_spnspd_ord_cncl ( ptr_st_spdoe_reqres,
                                   c_xchng_cd,
                                   c_pipe_id,
                                   c_rout_str,
                                   c_trd_dt,
                                   i_dwnld_flg,
                                   c_ServiceName,
                                   c_err_msg);

      if (i_ch_val == -1)
      {
        fn_userlog(c_ServiceName,"Failed While Calling Function fn_spnspd_ord_cncl");
        return -1;
      }
     }
      else  /** Ver 4.2 starts here ***/
      {
        i_ch_val = fn_spnspd_acpt_rjct(ptr_st_spdoe_reqres,
                                  c_xchng_cd,
                                  c_pipe_id,
                                  c_rout_str,
                                  c_trd_dt,
                                  i_dwnld_flg,
                                  c_ServiceName,
                                  c_err_msg);

        if (i_ch_val == -1)
        {
          fn_userlog(c_ServiceName,"Failed While Calling Function fn_spd_acpt_rjct");
          return -1;
        }
       }  /*** ver 4.2 Ends Here ***/
      break;
    case BATCH_SPREAD_CXL_OUT: /*** ver 4.2 ***/
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside BATCH_SPREAD_CXL_OUT Case");
      }

       i_ch_val = fn_spnspd_ord_cncl ( ptr_st_spdoe_reqres,
                                   c_xchng_cd,
                                   c_pipe_id,
                                   c_rout_str,
                                   c_trd_dt,
                                   i_dwnld_flg,
                                   c_ServiceName,
                                   c_err_msg);

      if (i_ch_val == -1)
      {
        fn_userlog(c_ServiceName,"Failed While Calling Function fn_spnspd_ord_cncl");
        return -1;
      }

        break; /*** ver 4.2 ends ***/


    default :
      fn_userlog( c_ServiceName, "Protocol error %d", ptr_st_spdoe_reqres->st_hdr.si_transaction_code);
      break;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"After Complition Of fn_sprd_ord_confirmation");
  }

  return 0;
}

/******************************************************************************/
/*  To Update Accept Reject Response From Exchange.                           */
/*  INPUT PARAMETERS                                                          */
/*      ptr_st_spdoe_reqres- Pointer to a message structure got from Exchange */
/*      c_pipe_id      - Pipe Id                                              */
/*      i_dwnld_flg    - Download Flag                                        */
/*      c_ServiceName  - Service Name currently running                       */
/*      c_err_msg      - Error message to be returned                         */
/*  OUTPUT PARAMETERS                                                         */
/*        0   - Success                                                       */
/*        -1  - Failure                                                       */
/******************************************************************************/

int fn_spnspd_acpt_rjct ( struct st_spd_oe_reqres *ptr_st_spdoe_reqres,
                       		char   *c_xchng_cd,
                       		char   *c_pipe_id,
                       		char   *c_rout_str,
                       		char   *c_trd_dt,
                       		int    i_dwnld_flg,
                       		char   *c_ServiceName,
                       		char   *c_err_msg )
{
  char c_svc_name [15+1];
  char c_refack_tmp[LEN_ORD_REFACK];
  char c_xchng_rmrks [256];
  char c_mtch_accnt [10 + 1];
  char c_xchng_err_msg [256];
	char c_spd_ord_seq[10 +1 ];     /** 2L Order OEREMARK Change **/
	char c_lst_act_ref[22];					/** Ver 4.6 **/

  int i_ch_val;
  int i_trnsctn;
  int i_cnt;
  int i_rec_cnt;
  int i_rec_exists = 0;     /*** Ver 5.5 ***/

  long long ll_tmp_log_tm_stmp;

  long li_temp_bit_flg;      

  struct st_xchngbook st_i_xchngbk;
  struct st_orderbook st_i_ordrbk;
  struct st_exrcbook st_i_exrcbk;
  struct st_spdordbk st_spd_ordbk;
  struct st_spdxchbk st_spd_xchbk;

  MEMSET(st_i_xchngbk);
  MEMSET(st_i_ordrbk);
	MEMSET(st_i_exrcbk);
  MEMSET(st_spd_ordbk);
  MEMSET(st_spd_xchbk);
  MEMSET(c_xchng_rmrks);
  MEMSET(c_xchng_err_msg);
	MEMSET(c_spd_ord_seq);          /*** 2L Order OEREMARK Change ***/
	MEMSET(c_lst_act_ref);					/*** Ver 4.6 ***/

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Inside Function fn_spnspd_acpt_rjct");
  }

  memcpy ( &ll_tmp_log_tm_stmp, ptr_st_spdoe_reqres->st_hdr.c_time_stamp_1, 8 );

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Log Time stamp Is :%lld:",ll_tmp_log_tm_stmp);
  }
	
	 /**** Comment Starts  for 2L Order OEREMARK Change *****************************

  fn_nsetoors_char ( st_spd_ordbk.c_sprd_ord_rfrnc[0],
                     LEN_ORDR_RFRNC,
                     ptr_st_spdoe_reqres->c_oe_remarks,
                     LEN_REMARKS );
	********************* 2L Order OEREMARK Change Comment ends *******************/

	/******** 2L Order OEREMARK Changes Starts ************/
  EXEC SQL
    SELECT to_char(sysdate ,'yyyymmdd') ||:c_pipe_id
    INTO :c_spd_ord_seq
    FROM DUAL;
  if(SQLCODE != 0)
  {
    fn_errlog(c_ServiceName,"S31070",SQLMSG,c_err_msg);
    return -1;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"spread order seq before sprintf=:%s:",st_spd_ordbk.c_sprd_ord_rfrnc);
  }
  memset ( st_spd_ordbk.c_sprd_ord_rfrnc, 0,sizeof (st_spd_ordbk.c_sprd_ord_rfrnc) );
  sprintf(st_spd_ordbk.c_sprd_ord_rfrnc[0],"%s%08d",c_spd_ord_seq,ptr_st_spdoe_reqres->i_sprd_seq_no);
  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"spread order seq after sprintf=:%s:",st_spd_ordbk.c_sprd_ord_rfrnc);
  }

  /*** 2L Order OEREMARK Changes Ends ***/


  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_spd_ordbk.c_rout_crt,c_rout_str); 

  st_spd_ordbk.c_rqst_typ[0] = SPDREF_TO_ORDREF;

	i_ch_val	=	fn_qry_spdbk	( &st_spd_ordbk,
                              c_ServiceName,
                              c_err_msg
                            );

  if ( i_ch_val != 0	)
  {
    fn_errlog(c_ServiceName,"L31170", LIBMSG, c_err_msg);
    return -1;
  }


  sprintf(st_spd_ordbk.c_xchng_ack[0],"%16.0lf",ptr_st_spdoe_reqres->d_order_number );

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Spread Order Reference Is :%s:",st_spd_ordbk.c_sprd_ord_rfrnc[0]);
    fn_userlog(c_ServiceName,"Exchange Ack Is :%s:",st_spd_ordbk.c_xchng_ack[0]);
  }

  switch (ptr_st_spdoe_reqres->st_hdr.si_transaction_code)
  {
    case  SP_ORDER_CONFIRMATION :

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside SP_ORDER_CONFIRMATION Case");
      }

      for ( i_cnt=0; i_cnt<=1; i_cnt++ )
      {
        st_spd_ordbk.l_ors_msg_typ[i_cnt] = ORS_SPN_ORD_ACPT;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Msg Type Is :%ld:",st_spd_ordbk.l_ors_msg_typ[i_cnt]);
        }
      }

      break;

    case  SP_ORDER_ERROR :

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside SP_ORDER_ERROR Case");
        fn_userlog(c_ServiceName,"The ERROR CODE FOR ORDER RJCT IS :%d:",ptr_st_spdoe_reqres->st_hdr.si_error_code);
      }

      i_ch_val = fn_get_errmsg_srl( ptr_st_spdoe_reqres->st_hdr.si_error_code,ptr_st_spdoe_reqres->si_reason_code,(char *)c_xchng_err_msg,c_ServiceName);

      if(i_ch_val == -1 )
      {
        fn_userlog(c_ServiceName,"Failed while fetching the Error Code ");
				      return -1;
      }

      strcpy(c_xchng_rmrks,c_xchng_err_msg);

      for ( i_cnt=0; i_cnt<=1; i_cnt++ )
      {
        st_spd_ordbk.l_ors_msg_typ[i_cnt] = ORS_SPN_ORD_RJCT;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Msg Type Is :%ld:",st_spd_ordbk.l_ors_msg_typ[i_cnt]);
        }
      }

      break;

    case  TWOL_ORDER_CONFIRMATION :

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside TWOL_ORDER_CONFIRMATION Case");
      }

      for ( i_cnt=0; i_cnt<=1; i_cnt++ )
      {
        st_spd_ordbk.l_ors_msg_typ[i_cnt] = ORS_2LN_ORD_ACPT;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Msg Type Is :%ld:",st_spd_ordbk.l_ors_msg_typ[i_cnt]);
        }
      }
      break;

    case  TWOL_ORDER_ERROR :


      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside TWOL_ORDER_ERROR Case");
        fn_userlog(c_ServiceName,"The ERROR CODE FOR ORDER RJCT IS :%d:",ptr_st_spdoe_reqres->st_hdr.si_error_code);
      }

      i_ch_val = fn_get_errmsg_srl( ptr_st_spdoe_reqres->st_hdr.si_error_code,ptr_st_spdoe_reqres->si_reason_code,(char *)c_xchng_err_msg,c_ServiceName);

      if(i_ch_val == -1 )
      {
        fn_userlog(c_ServiceName,"Failed while fetching the Error Code ");
        return -1;
			}

			 strcpy(c_xchng_rmrks,c_xchng_err_msg);

      for ( i_cnt=0; i_cnt<=1; i_cnt++ )
      {
        st_spd_ordbk.l_ors_msg_typ[i_cnt] = ORS_2LN_ORD_RJCT;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Msg Type Is :%ld:",st_spd_ordbk.l_ors_msg_typ[i_cnt]);
        }
      }
      break;

    case  THRL_ORDER_CONFIRMATION :  

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside THRL_ORDER_CONFIRMATION Case");
      }

      for ( i_cnt=0; i_cnt<=2; i_cnt++ )
      {
        st_spd_ordbk.l_ors_msg_typ[i_cnt] = ORS_3LN_ORD_ACPT;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Msg Type Is :%ld:",st_spd_ordbk.l_ors_msg_typ[i_cnt]);
        }
      }
      break;

    case  THRL_ORDER_ERROR :


      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside THRL_ORDER_ERROR Case");
        fn_userlog(c_ServiceName,"The ERROR CODE FOR ORDER RJCT IS :%d:",ptr_st_spdoe_reqres->st_hdr.si_error_code);
      }

      i_ch_val = fn_get_errmsg_srl( ptr_st_spdoe_reqres->st_hdr.si_error_code,ptr_st_spdoe_reqres->si_reason_code,(char *)c_xchng_err_msg,c_ServiceName);

      if(i_ch_val == -1 )
      {
        fn_userlog(c_ServiceName,"Failed while fetching the Error Code ");
				      return -1;
      }

      strcpy(c_xchng_rmrks,c_xchng_err_msg);

      for ( i_cnt=0; i_cnt<=2; i_cnt++ )   
      {
        st_spd_ordbk.l_ors_msg_typ[i_cnt] = ORS_3LN_ORD_RJCT;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Msg Type Is :%ld:",st_spd_ordbk.l_ors_msg_typ[i_cnt]);
        }
      }
      break;
     /***** Ver 4.2 Starts Here ****/
    case SP_ORDER_MOD_CON_OUT:
    if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside SP_ORDER_MOD_CON_OUT Case");
      }

      for ( i_cnt=0; i_cnt<=1; i_cnt++ )
      {
        st_spd_ordbk.l_ors_msg_typ[i_cnt] = ORS_SPRD_MOD_ACPT;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Msg Type Is :%ld:",st_spd_ordbk.l_ors_msg_typ[i_cnt]);
        }
      }
      break;

    case  SP_ORDER_MOD_REJ_OUT:

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside SP_ORDER_MOD_REJ_OUT Case");
        fn_userlog(c_ServiceName,"The ERROR CODE FOR ORDER RJCT IS :%d:",ptr_st_spdoe_reqres->st_hdr.si_error_code);
      }
      i_ch_val = fn_get_errmsg_srl( ptr_st_spdoe_reqres->st_hdr.si_error_code,ptr_st_spdoe_reqres->si_reason_code,(char *)c_xchng_err_msg,c_ServiceName);

      if(i_ch_val == -1 )
      {
        fn_userlog(c_ServiceName,"Failed while fetching the Error Code ");
        return -1;
      }

      strcpy(c_xchng_rmrks,c_xchng_err_msg);

      for ( i_cnt=0; i_cnt<=1; i_cnt++ )
      {
        st_spd_ordbk.l_ors_msg_typ[i_cnt] = ORS_SPRD_MOD_RJCT;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Msg Type Is :%ld:",st_spd_ordbk.l_ors_msg_typ[i_cnt]);
        }
      }
      break;
     case  SP_ORDER_CANCEL_REJ_OUT:

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside SP_ORDER_CANCEL_REJ_OUT Case");
        fn_userlog(c_ServiceName,"The ERROR CODE FOR ORDER RJCT IS :%d:",ptr_st_spdoe_reqres->st_hdr.si_error_code);
      }

      i_ch_val = fn_get_errmsg_srl( ptr_st_spdoe_reqres->st_hdr.si_error_code,ptr_st_spdoe_reqres->si_reason_code,(char *)c_xchng_err_msg,c_ServiceName);

      if(i_ch_val == -1 )
      {
        fn_userlog(c_ServiceName,"Failed while fetching the Error Code ");
        return -1;
      }

      strcpy(c_xchng_rmrks,c_xchng_err_msg);

      for ( i_cnt=0; i_cnt<=1; i_cnt++ )
      {
        st_spd_ordbk.l_ors_msg_typ[i_cnt] = ORS_SPRD_CAN_RJCT;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Msg Type Is :%ld:",st_spd_ordbk.l_ors_msg_typ[i_cnt]);
        }
      }
      break;
      case  SP_ORDER_CXL_CONFIRM_OUT:

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside SP_ORDER_CXL_CONFIRM_OUT Case");
        fn_userlog(c_ServiceName,"The ERROR CODE FOR ORDER RJCT IS :%d:",ptr_st_spdoe_reqres->st_hdr.si_error_code);
      }

      i_ch_val = fn_get_errmsg_srl( ptr_st_spdoe_reqres->st_hdr.si_error_code,ptr_st_spdoe_reqres->si_reason_code,(char *)c_xchng_err_msg,c_ServiceName);

      if(i_ch_val == -1 )
      {
        fn_userlog(c_ServiceName,"Failed while fetching the Error Code ");
        return -1;
      }

      strcpy(c_xchng_rmrks,c_xchng_err_msg);

      for ( i_cnt=0; i_cnt<=1; i_cnt++ )
      {
        st_spd_ordbk.l_ors_msg_typ[i_cnt] = ORS_SPRD_CAN_ACPT;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Msg Type Is :%ld:",st_spd_ordbk.l_ors_msg_typ[i_cnt]);
        }
      }
      break;
    /*** Ver 4.2 Ends Here *****/

    default :
      fn_userlog( c_ServiceName, "Protocol error %d", ptr_st_spdoe_reqres->st_hdr.si_transaction_code);
      break;
  }

  if (st_spd_ordbk.l_ors_msg_typ[0] == ORS_3LN_ORD_RJCT || st_spd_ordbk.l_ors_msg_typ[0] == ORS_3LN_ORD_ACPT)
  {
     i_rec_cnt = 3;

     if(DEBUG_MSG_LVL_3)
     {
       fn_userlog(c_ServiceName,"For ORS_3LN_ORD_RJCTORS_3LN_ORD_ACPT Count Is :%d:",i_rec_cnt);
     }
  }
  else
  {
    i_rec_cnt = 2;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Count Is :%d:",i_rec_cnt);
    }
  }

  i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1)
  {
    fn_errlog(c_ServiceName,"L31175", LIBMSG, c_err_msg);
    return -1;
  }

  for ( i_cnt=0; i_cnt<i_rec_cnt; i_cnt++ )
	{
		 strcpy ( st_i_ordrbk.c_ordr_rfrnc, st_spd_ordbk.c_ordr_rfrnc[i_cnt] );


    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
    }

    strcpy(st_i_ordrbk.c_rout_crt,c_rout_str); 
    st_i_ordrbk.c_oprn_typ = FOR_VIEW;

  	i_ch_val = fn_Sref_to_ord ( &st_i_ordrbk,
                              	c_ServiceName,
                              	c_err_msg
                            	);


    if ( i_ch_val != SUCC_BFR )
    {
      fn_errlog(c_ServiceName,"L31180", LIBMSG, c_err_msg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      return -1;
    }


    strcpy ( st_i_xchngbk.c_ordr_rfrnc, st_i_ordrbk.c_ordr_rfrnc );

    st_i_xchngbk.l_mdfctn_cntr = st_i_ordrbk.l_mdfctn_cntr;
    strcpy ( st_i_xchngbk.c_xchng_cd, st_i_ordrbk.c_xchng_cd );
    strcpy ( c_mtch_accnt, st_i_ordrbk.c_cln_mtch_accnt );
    strcpy ( st_i_xchngbk.c_pipe_id, st_i_ordrbk.c_pipe_id );

    switch ( st_spd_ordbk.l_ors_msg_typ[0])
    {
      case ORS_SPN_ORD_ACPT :
      case ORS_2LN_ORD_ACPT :
      case ORS_3LN_ORD_ACPT :
      case ORS_SPRD_MOD_ACPT:  /** Ver 4.2 ***/
      case ORS_SPRD_CAN_ACPT:  /** Ver 4.2 ***/
				st_i_xchngbk.c_plcd_stts = ACCEPT;

        break;

      case ORS_SPN_ORD_RJCT :
      case ORS_2LN_ORD_RJCT :
      case ORS_3LN_ORD_RJCT :
      case ORS_SPRD_MOD_RJCT:  /** Ver 4.2 ***/
      case ORS_SPRD_CAN_RJCT:  /** Ver 4.2 ***/

        st_i_xchngbk.c_plcd_stts = REJECT;

        break;
    }

    st_spd_xchbk.l_dwnld_flg[i_cnt] = i_dwnld_flg;
    st_i_xchngbk.c_rms_prcsd_flg = NOT_PROCESSED;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Spread Book ORS Msg Type :%ld:",st_spd_ordbk.l_ors_msg_typ[i_cnt]);
    }

    st_i_xchngbk.l_ors_msg_typ = st_spd_ordbk.l_ors_msg_typ[i_cnt];
    fn_long_to_timearr (st_spd_ordbk.c_ack_tm[i_cnt] , ptr_st_spdoe_reqres->li_entry_date_time );
    strcpy(st_i_xchngbk.c_ack_tm,st_spd_ordbk.c_ack_tm[i_cnt]);
    fn_long_to_timearr(st_i_xchngbk.c_entry_dt_tm, ptr_st_spdoe_reqres->li_entry_date_time );

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Exchange Book Entry Date Time :%s:",st_i_xchngbk.c_entry_dt_tm);
    }

    strcpy ( st_i_xchngbk.c_xchng_rmrks ,c_xchng_rmrks);
    st_i_xchngbk.d_jiffy = (double) ll_tmp_log_tm_stmp + i_cnt;
    st_i_xchngbk.l_dwnld_flg = st_spd_xchbk.l_dwnld_flg[i_cnt];
    fn_long_to_timearr (st_spd_xchbk.c_entry_dt_tm[i_cnt],ptr_st_spdoe_reqres->li_entry_date_time );

    /*** Ver 5.5 Starts ***/

    if( ptr_st_spdoe_reqres->st_hdr.si_transaction_code  == SP_ORDER_CXL_CONFIRM_OUT )
    {
      if( i_cnt == 0)
      {
        st_i_xchngbk.l_xchng_can_qty = ptr_st_spdoe_reqres->li_volume_filled_today;
      }
      else
      {
        st_i_xchngbk.l_xchng_can_qty = ptr_st_spdoe_reqres->st_spd_lg_inf[i_cnt - 1].li_volume_filled_today;
      }
    }
    /*** Ver 5.5 Ends ***/

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Modification Counter is :%ld:",st_i_xchngbk.l_mdfctn_cntr);
      fn_userlog(c_ServiceName,"RMS Processed Flag Is :%c:",st_i_xchngbk.c_rms_prcsd_flg);
      fn_userlog(c_ServiceName,"ORS Message Type Is :%ld:",st_i_xchngbk.l_ors_msg_typ);
      fn_userlog(c_ServiceName,"Remarks :%s:",st_i_xchngbk.c_xchng_rmrks);
      fn_userlog(c_ServiceName,"Jiffy :%lf:",st_i_xchngbk.d_jiffy);
      fn_userlog(c_ServiceName,"Placed Status Is :%c:",st_i_xchngbk.c_plcd_stts);
      fn_userlog(c_ServiceName,"Order Reference Is :%s:",st_i_xchngbk.c_ordr_rfrnc);
    }

		if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
    }

    strcpy(st_i_xchngbk.c_rout_crt,c_rout_str);
    st_i_xchngbk.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;

    li_temp_bit_flg = st_i_xchngbk.l_bit_flg;
    st_i_xchngbk.l_bit_flg  = ptr_st_spdoe_reqres->st_hdr.c_time_stamp_2[LEN_TIME_STAMP -1];

		sprintf(c_lst_act_ref,"%lld",ptr_st_spdoe_reqres->ll_lastactivityref);		/** Ver 4.6 **/
		rtrim(c_lst_act_ref);		/*** Ver 4.6 ***/

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"IN SPD_ACPT_RJCT, the stream number receieved from exchange is:%ld:",st_i_xchngbk.l_bit_flg);
    }

    /*** Ver 5.5 Starts ***/
    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"fn_upd_xchngbk:Order Reference Is :%s:",st_i_xchngbk.c_ordr_rfrnc);
      fn_userlog(c_ServiceName,"st_i_xchngbk.l_xchng_can_qty:%ld:",st_i_xchngbk.l_xchng_can_qty);
    }

    if ( st_i_xchngbk.l_dwnld_flg == DOWNLOAD )
    {
      EXEC SQL
        SELECT 1
        INTO :i_rec_exists
        FROM FXB_FO_XCHNG_BOOK
        WHERE FXB_JIFFY   = :st_i_xchngbk.d_jiffy
        AND FXB_XCHNG_CD  = :st_i_xchngbk.c_xchng_cd
        AND FXB_PIPE_ID   = :st_i_xchngbk.c_pipe_id
        AND FXB_ORDR_RFRNC    = :st_i_xchngbk.c_ordr_rfrnc;

      if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
      {
        fn_errlog(c_ServiceName,"S31075", SQLMSG, c_err_msg);
        fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
        return -1;
      }
      if ( i_rec_exists == 1 )
      {
        fn_userlog ( c_ServiceName, "Record already processed for order confirmation" );
        strcpy( c_err_msg, "Record already Processed" );
        fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
        return 0;
      }
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"st_i_xchngbk.c_xchng_rmrks :%s:",st_i_xchngbk.c_xchng_rmrks);
    }

    if (st_i_xchngbk.l_ors_msg_typ == ORS_SPRD_CAN_ACPT)
    {
      EXEC SQL
        UPDATE  FXB_FO_XCHNG_BOOK
        SET  FXB_PLCD_STTS       = :st_i_xchngbk.c_plcd_stts,
           FXB_RMS_PRCSD_FLG   = :st_i_xchngbk.c_rms_prcsd_flg,
           FXB_ORS_MSG_TYP     = :st_i_xchngbk.l_ors_msg_typ,
           FXB_ACK_TM          = to_date( :st_i_xchngbk.c_ack_tm,'DD-Mon-yyyy hh24:mi:ss' ),
           FXB_XCHNG_RMRKS     = rtrim(fxb_xchng_rmrks)||:st_i_xchngbk.c_xchng_rmrks,
           FXB_JIFFY           = :st_i_xchngbk.d_jiffy,
           FXB_STREAM_NO       = :st_i_xchngbk.l_bit_flg,
           FXB_XCHNG_CNCLD_QTY = :st_i_xchngbk.l_xchng_can_qty,
           FXB_LST_ACT_REF     = :c_lst_act_ref
        WHERE  FXB_ORDR_RFRNC    = :st_i_xchngbk.c_ordr_rfrnc
        AND  FXB_MDFCTN_CNTR     = :st_i_xchngbk.l_mdfctn_cntr;
    }
    else
    {
      EXEC SQL
        UPDATE  FXB_FO_XCHNG_BOOK
        SET  FXB_PLCD_STTS       = :st_i_xchngbk.c_plcd_stts,
           FXB_RMS_PRCSD_FLG   = :st_i_xchngbk.c_rms_prcsd_flg,
           FXB_ORS_MSG_TYP     = :st_i_xchngbk.l_ors_msg_typ,
           FXB_ACK_TM          = to_date( :st_i_xchngbk.c_ack_tm,'DD-Mon-yyyy hh24:mi:ss' ),
           FXB_XCHNG_RMRKS     = rtrim(fxb_xchng_rmrks)||:st_i_xchngbk.c_xchng_rmrks,
           FXB_JIFFY           = :st_i_xchngbk.d_jiffy,
           FXB_STREAM_NO       = :st_i_xchngbk.l_bit_flg,
           FXB_LST_ACT_REF     = :c_lst_act_ref
        WHERE  FXB_ORDR_RFRNC    = :st_i_xchngbk.c_ordr_rfrnc
        AND  FXB_MDFCTN_CNTR     = :st_i_xchngbk.l_mdfctn_cntr;
    }
    if(SQLCODE != 0)
    {
      fn_errlog(c_ServiceName,"S31080", SQLMSG, c_err_msg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      return -1;
    }
    /*** Ver 5.5 Ends ***/

		/* i_ch_val = fn_upd_Sxchngbk	( &st_i_xchngbk,
																	c_lst_act_ref,			*** Ver 4.6 ***
                              		c_ServiceName,
                              		c_err_msg
                           	 		);
		
    if ( ( i_ch_val != SUCC_BFR ) && ( i_ch_val != RECORD_ALREADY_PRCSD ) )
    {
      fn_errlog(c_ServiceName,"L31185", LIBMSG, c_err_msg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      return -1;
    }
    else if ( i_ch_val == RECORD_ALREADY_PRCSD )
    {
      fn_userlog ( c_ServiceName, "Record already processed" );
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      return 0;
    }
    *** commented in ver 5.5 ***/

    st_i_xchngbk.l_bit_flg = li_temp_bit_flg ;     

    sprintf( st_i_ordrbk.c_xchng_ack ,"%16.0lf",ptr_st_spdoe_reqres->d_order_number);

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"Spread Exchange Ack Is :%s:",st_spd_ordbk.c_xchng_ack[i_cnt]);
      fn_userlog(c_ServiceName,"Order Book Exchng Ack Is :%s:",st_i_ordrbk.c_xchng_ack);
    }

    strcpy ( st_i_ordrbk.c_ordr_rfrnc,st_spd_ordbk.c_ordr_rfrnc[i_cnt] );

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"Order Book Ref. :%s:",st_i_ordrbk.c_ordr_rfrnc);
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
    }

    strcpy(st_i_ordrbk.c_rout_crt,c_rout_str);  

    st_i_ordrbk.c_oprn_typ = UPDATE_XCHNG_RESPONSE;

	 	i_ch_val = fn_upd_Sordrbk ( &st_i_ordrbk,
																c_lst_act_ref,	/*** Ver 4.6 ***/
                              	c_ServiceName,
                              	c_err_msg
                            	);
		
    if ( i_ch_val != SUCC_BFR)
    {
      fn_errlog(c_ServiceName,"L31190", LIBMSG, c_err_msg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      return -1;
    }

		strcpy ( st_spd_xchbk.c_xchng_cd[i_cnt], st_i_xchngbk.c_xchng_cd );
    strcpy ( st_spd_xchbk.c_ordr_rfrnc[i_cnt], st_i_xchngbk.c_ordr_rfrnc );
    strcpy ( st_spd_xchbk.c_pipe_id[i_cnt], st_i_xchngbk.c_pipe_id );
    strcpy ( st_spd_xchbk.c_mod_trd_dt[i_cnt], st_i_xchngbk.c_mod_trd_dt );
    st_spd_xchbk.l_ord_seq[i_cnt] = st_i_xchngbk.l_ord_seq;
    st_spd_xchbk.c_slm_flg[i_cnt] = st_i_xchngbk.c_slm_flg;
    st_spd_xchbk.l_dsclsd_qty[i_cnt] = st_i_xchngbk.l_dsclsd_qty;
    st_spd_xchbk.l_ord_tot_qty[i_cnt] = st_i_xchngbk.l_ord_tot_qty;
    st_spd_xchbk.l_ord_lmt_rt[i_cnt] = st_i_xchngbk.l_ord_lmt_rt;
    st_spd_xchbk.l_stp_lss_tgr[i_cnt] = st_i_xchngbk.l_stp_lss_tgr;
    st_spd_xchbk.l_mdfctn_cntr[i_cnt] = st_i_xchngbk.l_mdfctn_cntr;
    strcpy ( st_spd_xchbk.c_valid_dt[i_cnt], st_i_xchngbk.c_valid_dt );
    st_spd_xchbk.c_ord_typ[i_cnt] = st_i_xchngbk.c_ord_typ;
    st_spd_xchbk.c_sprd_ord_ind[i_cnt] = st_i_xchngbk.c_sprd_ord_ind;
    st_spd_xchbk.c_req_typ[i_cnt] = st_i_xchngbk.c_req_typ;
    st_spd_xchbk.l_quote[i_cnt] = st_i_xchngbk.l_quote;
    strcpy ( st_spd_xchbk.c_qt_tm[i_cnt], st_i_xchngbk.c_qt_tm );
    strcpy ( st_spd_xchbk.c_rqst_tm[i_cnt], st_i_xchngbk.c_rqst_tm );
    strcpy ( st_spd_xchbk.c_frwrd_tm[i_cnt], st_i_xchngbk.c_frwrd_tm );
    st_spd_xchbk.c_plcd_stts[i_cnt] = st_i_xchngbk.c_plcd_stts;
    st_spd_xchbk.c_rms_prcsd_flg[i_cnt] = st_i_xchngbk.c_rms_prcsd_flg;
    strcpy ( st_spd_xchbk.c_ack_tm[i_cnt], st_i_xchngbk.c_ack_tm );
    strcpy ( st_spd_xchbk.c_xchng_rmrks[i_cnt], st_i_xchngbk.c_xchng_rmrks );
    st_spd_xchbk.c_ex_ordr_typ[i_cnt] = st_i_xchngbk.c_ex_ordr_typ;
    /*** ver 4.2 starts ** ** Comment starts in Ver 5.5 ***
    if( ptr_st_spdoe_reqres->st_hdr.si_transaction_code == SP_ORDER_CXL_CONFIRM_OUT )
    {
      if( i_cnt == 0)
      {
         st_spd_xchbk.l_xchng_can_qty[i_cnt] = ptr_st_spdoe_reqres->li_volume - ptr_st_spdoe_reqres->li_total_vol_remaining;
      }
      else
      {
         st_spd_xchbk.l_xchng_can_qty[i_cnt] = ptr_st_spdoe_reqres->st_spd_lg_inf[i_cnt - 1].li_volume - ptr_st_spdoe_reqres->st_spd_lg_inf[i_cnt - 1].li_total_vol_remaining;
      }
      fn_userlog( c_ServiceName,"SPAN CANCELLATION RWS st_spd_xchbk.l_xchng_can_qty :%ld: i_cnt :%d:",st_spd_xchbk.l_xchng_can_qty[i_cnt],i_cnt);
    }
    else *** ver 4.2 ends ** ** Comment starts in Ver 5.5 **/
    /*** starts in Ver 5.5 ***/
    if( ptr_st_spdoe_reqres->st_hdr.si_transaction_code == SP_ORDER_CXL_CONFIRM_OUT )
    {
      if( i_cnt == 0)
      {
         st_spd_xchbk.l_xchng_can_qty[i_cnt] = ptr_st_spdoe_reqres->li_volume_filled_today;
      }
      else
      {
         st_spd_xchbk.l_xchng_can_qty[i_cnt] = ptr_st_spdoe_reqres->st_spd_lg_inf[i_cnt - 1].li_volume_filled_today;
      }
      fn_userlog( c_ServiceName,"SPAN CANCELLATION RWS st_spd_xchbk.l_xchng_can_qty :%ld: i_cnt :%d: ",st_spd_xchbk.l_xchng_can_qty[i_cnt],i_cnt);
    }
    else /*** Ver 5.5 Ends ***/
    {
     st_spd_xchbk.l_xchng_can_qty[i_cnt] = st_i_xchngbk.l_xchng_can_qty;
    }
    st_spd_xchbk.l_bit_flg[i_cnt] = st_i_xchngbk.l_bit_flg;
    st_spd_xchbk.c_spl_flg[i_cnt] = st_i_xchngbk.c_spl_flg;
    st_spd_xchbk.c_ordr_flw[i_cnt] = st_i_xchngbk.c_ordr_flw;
    st_spd_xchbk.c_oprn_typ[i_cnt] = st_i_xchngbk.c_oprn_typ;
    st_spd_xchbk.l_ors_msg_typ[i_cnt] = st_i_xchngbk.l_ors_msg_typ;
    st_spd_xchbk.d_jiffy[i_cnt] = st_i_xchngbk.d_jiffy;
    st_spd_xchbk.l_dwnld_flg[i_cnt] = st_i_xchngbk.l_dwnld_flg;
    strcpy ( st_spd_xchbk.c_entry_dt_tm[i_cnt], st_i_xchngbk.c_entry_dt_tm );

  }


  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_spd_ordbk.c_rout_crt,c_rout_str); 

  st_spd_ordbk.c_rqst_typ[0] = UPDATE_XCHNG_RESPONSE;

	EXEC SQL
		UPDATE	FSD_FO_SPRD_DTLS
		SET			FSD_ACK_NMBR 		= :st_spd_ordbk.c_xchng_ack[0]
    WHERE   FSD_SPRD_RFRNC	= :st_spd_ordbk.c_sprd_ord_rfrnc[0];

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31085", SQLMSG, c_err_msg );
    fn_errlog(c_ServiceName,"L31195", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }


  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_spd_xchbk.c_rout_crt,c_rout_str); 

  i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);
  if ( i_ch_val == -1 )
  {
    fn_errlog(c_ServiceName,"L31200", LIBMSG, c_err_msg);
    return -1;
  }
	
	/**********************
	i_ch_val = fn_acall_svc ( c_ServiceName,
                            c_err_msg,
                            &st_spd_xchbk,
                            "vw_spdxchbk",
                            sizeof ( st_spd_xchbk ),
                            TPNOREPLY,
                            "SFO_SPD_ACK" );

	****************************************************/

	i_ch_val  = fn_spd_ack  ( &st_spd_xchbk,
                            c_ServiceName,
                            c_err_msg
                          );
  if ( i_ch_val != 0 )
  {
    fn_errlog(c_ServiceName,"L31205", LIBMSG, c_err_msg);
    return -1;
  }

  return 0;
}


/******************************************************************************/
/*  This handels Spread Order Cancellation Response.                          */
/*  INPUT PARAMETERS                                                          */
/*      ptr_st_spdoe_reqres- Pointer to a message structure got from Exchange */
/*      c_pipe_id      - Pipe Id                                              */
/*      i_dwnld_flg    - Download Flag                                        */
/*      c_ServiceName  - Service Name currently running                       */
/*      c_err_msg      - Error message to be returned                         */
/*  OUTPUT PARAMETERS                                                         */
/*        0   - Success                                                       */
/*        -1  - Failure                                                       */
/******************************************************************************/


int fn_spnspd_ord_cncl ( struct st_spd_oe_reqres *ptr_st_spdoe_reqres,
                      char   *c_xchng_cd,
                      char   *c_pipe_id,
                      char   *c_rout_str,
                      char   *c_trd_dt,
                      int    i_dwnld_flg,
                      char   *c_ServiceName,
                      char   *c_err_msg )
{
  struct 	st_xchngbook st_i_xchngbk;
  struct 	st_orderbook st_i_ordrbk;
  struct	st_exrcbook st_i_exrcbk;
  struct 	st_spdordbk st_spd_ordbk;
  struct 	st_spdxchbk st_spd_xchbk;

  char c_svc_name [15+1];
  char c_refack_tmp[LEN_ORD_REFACK];
  char c_xchng_rmrks [256];
  char c_mtch_accnt [10 + 1];
  char c_xchng_err_msg [ 256 ];   /*** Ver 4.2 ***/
	char c_lst_act_ref[22];				/*** Ver 4.6 ***/

  int i_ch_val;
  int i_trnsctn;
  int i_cnt;
  int i_rec_cnt;

  long int li_exctd_qty;

  long li_temp_bit_flg;          

  long long ll_tmp_log_tm_stmp;

	MEMSET(st_i_xchngbk);
  MEMSET(st_i_ordrbk);
  MEMSET(st_i_exrcbk);
  MEMSET(st_spd_ordbk);
  MEMSET(st_spd_xchbk);
	MEMSET(c_lst_act_ref);			/*** Ver 4.6 ***/

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Inside Function fn_spnspd_ord_cncl");
  }

  memcpy ( &ll_tmp_log_tm_stmp, ptr_st_spdoe_reqres->st_hdr.c_time_stamp_1, 8 );

  sprintf(st_spd_ordbk.c_xchng_ack[0],"%16.0lf",ptr_st_spdoe_reqres->d_order_number );
  strcpy ( st_spd_ordbk.c_pipe_id[0], c_pipe_id );

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_spd_ordbk.c_rout_crt,c_rout_str); 

   st_spd_ordbk.c_rqst_typ[0] = ACK_TO_ORD; 

	i_ch_val  = fn_qry_spdbk  ( &st_spd_ordbk,
                              c_ServiceName,
                              c_err_msg
                            );


  if ( i_ch_val != SUCC_BFR )
  {
    fn_errlog(c_ServiceName,"L31210", LIBMSG, c_err_msg);
    return -1;
  }

	switch (ptr_st_spdoe_reqres->st_hdr.si_transaction_code)
  {
    case SP_ORDER_CXL_CONFIRM_OUT:

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside SP_ORDER_CXL_CONFIRM_OUT Case");
      }

      for(i_cnt=0; i_cnt<=1; i_cnt++ )
      {
        st_spd_ordbk.l_ors_msg_typ[i_cnt] = ORS_SPD_ORD_CNCL;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Msg Type Is :%ld:",st_spd_ordbk.l_ors_msg_typ[i_cnt]);
        }

        strcpy(st_spd_xchbk.c_xchng_rmrks[i_cnt],"Spread order cancelled" );
        i_rec_cnt = 2;
      }
      break;

    case TWOL_ORDER_CXL_CONFIRMATION:

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside TWOL_ORDER_CXL_CONFIRMATION Case");
      }

      for( i_cnt=0; i_cnt<=1; i_cnt++ )
      {
        st_spd_ordbk.l_ors_msg_typ[i_cnt] = ORS_2L_ORD_CNCL;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Msg Type Is :%ld:",st_spd_ordbk.l_ors_msg_typ[i_cnt]);
        }
        strcpy(st_spd_xchbk.c_xchng_rmrks[i_cnt],"2L order cancelled" );
        i_rec_cnt = 2;
      }

      break;

    case THRL_ORDER_CXL_CONFIRMATION:

      for ( i_cnt=0; i_cnt<=2; i_cnt++ )
      {
				    st_spd_ordbk.l_ors_msg_typ[i_cnt] = ORS_3L_ORD_CNCL;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Msg Type Is :%ld:",st_spd_ordbk.l_ors_msg_typ[i_cnt]);
        }

        strcpy(st_spd_xchbk.c_xchng_rmrks[i_cnt],"3L order cancelled" );
        i_rec_cnt = 3;
      }
      break;
      /*** Ver 4.2 Starts here ****/
     case SP_ORDER_CANCEL_REJ_OUT:

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside SP_ORDER_CANCEL_REJ_OUT Case");
      }

      for(i_cnt=0; i_cnt<=1; i_cnt++ )
      {
        st_spd_ordbk.l_ors_msg_typ[i_cnt] = ORS_SPRD_CAN_RJCT;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Msg Type Is :%ld:",st_spd_ordbk.l_ors_msg_typ[i_cnt]);
        }

        i_ch_val = fn_get_errmsg_srl( ptr_st_spdoe_reqres->st_hdr.si_error_code,ptr_st_spdoe_reqres->si_reason_code,(char *)c_xchng_err_msg,c_ServiceName);
        if(i_ch_val == -1 )
        {
          fn_userlog(c_ServiceName,"Failed while fetching the Error Code ");
          return -1;
        }

        strcpy(st_spd_xchbk.c_xchng_rmrks[i_cnt],c_xchng_err_msg);
        i_rec_cnt = 2;
       }
      break;
      case BATCH_SPREAD_CXL_OUT:
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside BATCH_SPREAD_CXL_OUT Case");
        fn_userlog(c_ServiceName, "Exchange initiated expiry");
      }

      for(i_cnt=0; i_cnt<=1; i_cnt++ )
      {
        st_spd_ordbk.l_ors_msg_typ[i_cnt] = ORS_ORD_EXP;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Exchange Ack Time Is :%ld:",ptr_st_spdoe_reqres->li_last_modified);
        }

        fn_long_to_timearr (st_spd_xchbk.c_ack_tm[i_cnt],ptr_st_spdoe_reqres->li_last_modified);

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_spd_xchbk.c_ack_tm[i_cnt]);
        }

        strcpy(c_xchng_rmrks ,"Exchange Expiry");

        strcpy(st_spd_xchbk.c_xchng_rmrks[i_cnt],"Exchange Expiry");
        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Exchange Remark Is :%s:",c_xchng_rmrks);
        }
        i_rec_cnt = 2;
      }
      break;
      /**** Ver 4.2 Ends here ***/

  }


  i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1)
  {
    fn_errlog(c_ServiceName,"L31215", LIBMSG, c_err_msg);
    return -1;
  }


  for ( i_cnt=0; i_cnt<i_rec_cnt; i_cnt++ )
  {
    strcpy ( st_i_ordrbk.c_ordr_rfrnc, st_spd_ordbk.c_ordr_rfrnc[i_cnt] );

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"Order Book Order Reference Is :%s:",st_i_ordrbk.c_ordr_rfrnc);
    }


    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
    }
    strcpy(st_i_ordrbk.c_rout_crt,c_rout_str);
    st_i_ordrbk.c_oprn_typ = FOR_VIEW;
		
		i_ch_val = fn_Sref_to_ord ( &st_i_ordrbk,
                                c_ServiceName,
                                c_err_msg
                              );

    if ( i_ch_val != SUCC_BFR)
    {
      fn_errlog(c_ServiceName,"L31220", LIBMSG, c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }

    strcpy ( c_mtch_accnt, st_i_ordrbk.c_cln_mtch_accnt);
    strcpy ( st_i_xchngbk.c_ordr_rfrnc , st_i_ordrbk.c_ordr_rfrnc );
    strcpy ( st_i_xchngbk.c_xchng_cd , st_i_ordrbk.c_xchng_cd );
    strcpy ( st_i_xchngbk.c_pipe_id , st_i_ordrbk.c_pipe_id );
    strcpy ( st_i_xchngbk.c_mod_trd_dt , ( char * )c_trd_dt );
    st_i_xchngbk.l_ord_tot_qty = st_i_ordrbk.l_ord_tot_qty;
    st_i_xchngbk.l_ord_lmt_rt = st_i_ordrbk.l_ord_lmt_rt;
    st_i_xchngbk.l_ord_seq = 0;
    st_i_xchngbk.l_mdfctn_cntr = EXPIRY_MDFCTN_CNTR;
    /** st_i_xchngbk.c_plcd_stts = CANCELLED; *** ver 4.2 ***/
    st_i_xchngbk.c_rms_prcsd_flg = NOT_PROCESSED;

    /*** Ver 4.2 starts here ***/
    if ( st_spd_ordbk.l_ors_msg_typ[0] == ORS_SPRD_CAN_RJCT )
    {
       st_i_xchngbk.c_plcd_stts = REJECT;
    }
    else if ( st_spd_ordbk.l_ors_msg_typ[0] ==  ORS_ORD_EXP )
    {
       st_i_xchngbk.c_plcd_stts = EXPIRED; 
    }
    else
    {
       st_i_xchngbk.c_plcd_stts = CANCELLED;
    }
    /*** ver 4.2 ends here ***/

    fn_long_to_timearr (st_i_xchngbk.c_ack_tm,ptr_st_spdoe_reqres->li_entry_date_time );

    st_i_xchngbk.l_ors_msg_typ = st_spd_ordbk.l_ors_msg_typ[i_cnt];
    strcpy ( st_i_xchngbk.c_xchng_rmrks ,st_spd_xchbk.c_xchng_rmrks[i_cnt]);
    st_i_xchngbk.d_jiffy = (double)ll_tmp_log_tm_stmp + i_cnt ;    
    st_spd_xchbk.l_dwnld_flg[i_cnt] = i_dwnld_flg;
    st_i_xchngbk.l_dwnld_flg = st_spd_xchbk.l_dwnld_flg[i_cnt];

		if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Match Account Is :%s:",c_mtch_accnt);
      fn_userlog(c_ServiceName,"Exchange Book Order Reference Is :%s:",st_i_xchngbk.c_ordr_rfrnc);
      fn_userlog(c_ServiceName,"Exchange Code Is :%s:",st_i_xchngbk.c_xchng_cd);
      fn_userlog(c_ServiceName,"Pipe ID Is :%s:",st_i_xchngbk.c_pipe_id);
      fn_userlog(c_ServiceName,"Mod Trade Date Is :%s:",st_i_xchngbk.c_mod_trd_dt);
      fn_userlog(c_ServiceName,"Total Order Qty Is :%ld:",st_i_xchngbk.l_ord_tot_qty);
      fn_userlog(c_ServiceName,"Order Limit Rate Is :%ld:",st_i_xchngbk.l_ord_lmt_rt);
      fn_userlog(c_ServiceName,"Order Seq Is :%ld:",st_i_xchngbk.l_ord_seq);
      fn_userlog(c_ServiceName,"Modification Counter Is :%ld:",st_i_xchngbk.l_mdfctn_cntr);
      fn_userlog(c_ServiceName,"Placed Status Is :%c:",st_i_xchngbk.c_plcd_stts);
    }

    li_temp_bit_flg = st_i_xchngbk.l_bit_flg;
    st_i_xchngbk.l_bit_flg  = ptr_st_spdoe_reqres->st_hdr.c_time_stamp_2[LEN_TIME_STAMP -1];

		sprintf(c_lst_act_ref,"%lld",ptr_st_spdoe_reqres->ll_lastactivityref);	/** Ver 4.6 **/
		rtrim(c_lst_act_ref);  /** Ver 4.6 **/

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"IN SPD_CNCL, the stream number receieved from exchange is:%ld:",st_i_xchngbk.l_bit_flg);
    }

    st_i_xchngbk.c_oprn_typ = INSERTION_ON_ORDER_FTE;


		i_ch_val = fn_upd_Sxchngbk	( &st_i_xchngbk,
																	c_lst_act_ref,		/*** Ver 4.6 ***/
                              		c_ServiceName,
                              		c_err_msg
                            		);


		if ( ( i_ch_val != SUCC_BFR ) && ( i_ch_val != RECORD_ALREADY_PRCSD ) )
    {
      fn_errlog(c_ServiceName,"L31225", LIBMSG, c_err_msg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      return -1;
    }
    else if ( i_ch_val == RECORD_ALREADY_PRCSD )
    {
      fn_userlog ( c_ServiceName, "Record already processed" );
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      return 0;
    }

    st_i_xchngbk.l_bit_flg = li_temp_bit_flg ;  

    strcpy ( st_spd_xchbk.c_xchng_cd[i_cnt], st_i_xchngbk.c_xchng_cd );
    strcpy ( st_spd_xchbk.c_ordr_rfrnc[i_cnt], st_i_xchngbk.c_ordr_rfrnc );
    strcpy ( st_spd_xchbk.c_pipe_id[i_cnt], st_i_xchngbk.c_pipe_id );
    strcpy ( st_spd_xchbk.c_mod_trd_dt[i_cnt], st_i_xchngbk.c_mod_trd_dt );
    st_spd_xchbk.l_ord_seq[i_cnt] = st_i_xchngbk.l_ord_seq;
    st_spd_xchbk.c_slm_flg[i_cnt] = st_i_xchngbk.c_slm_flg;
    st_spd_xchbk.l_dsclsd_qty[i_cnt] = st_i_xchngbk.l_dsclsd_qty;
    st_spd_xchbk.l_ord_tot_qty[i_cnt] = st_i_xchngbk.l_ord_tot_qty;
    st_spd_xchbk.l_ord_lmt_rt[i_cnt] = st_i_xchngbk.l_ord_lmt_rt;
    st_spd_xchbk.l_stp_lss_tgr[i_cnt] = st_i_xchngbk.l_stp_lss_tgr;
    st_spd_xchbk.l_mdfctn_cntr[i_cnt] = st_i_xchngbk.l_mdfctn_cntr;
    strcpy ( st_spd_xchbk.c_valid_dt[i_cnt], st_i_xchngbk.c_valid_dt );
    st_spd_xchbk.c_ord_typ[i_cnt] = st_i_xchngbk.c_ord_typ;
    st_spd_xchbk.c_sprd_ord_ind[i_cnt] = st_i_xchngbk.c_sprd_ord_ind;
    st_spd_xchbk.c_req_typ[i_cnt] = st_i_xchngbk.c_req_typ;
    st_spd_xchbk.l_quote[i_cnt] = st_i_xchngbk.l_quote;
    strcpy ( st_spd_xchbk.c_qt_tm[i_cnt], st_i_xchngbk.c_qt_tm );
    strcpy ( st_spd_xchbk.c_rqst_tm[i_cnt], st_i_xchngbk.c_rqst_tm );
    strcpy ( st_spd_xchbk.c_frwrd_tm[i_cnt], st_i_xchngbk.c_frwrd_tm );
    st_spd_xchbk.c_plcd_stts[i_cnt] = st_i_xchngbk.c_plcd_stts;
    st_spd_xchbk.c_rms_prcsd_flg[i_cnt] = st_i_xchngbk.c_rms_prcsd_flg;
    strcpy ( st_spd_xchbk.c_ack_tm[i_cnt], st_i_xchngbk.c_ack_tm );
    st_spd_xchbk.c_ex_ordr_typ[i_cnt] = st_i_xchngbk.c_ex_ordr_typ;
    st_spd_xchbk.l_bit_flg[i_cnt] = st_i_xchngbk.l_bit_flg;
		st_spd_xchbk.c_spl_flg[i_cnt] = st_i_xchngbk.c_spl_flg;
    st_spd_xchbk.c_ordr_flw[i_cnt] = st_i_xchngbk.c_ordr_flw;
    st_spd_xchbk.c_oprn_typ[i_cnt] = st_i_xchngbk.c_oprn_typ;
    st_spd_xchbk.l_ors_msg_typ[i_cnt] = st_i_xchngbk.l_ors_msg_typ;
    st_spd_xchbk.d_jiffy[i_cnt] = st_i_xchngbk.d_jiffy;
    st_spd_xchbk.l_dwnld_flg[i_cnt] = st_i_xchngbk.l_dwnld_flg;
    strcpy ( st_spd_xchbk.c_entry_dt_tm[i_cnt], st_i_xchngbk.c_entry_dt_tm );


    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Spread Book Exchange Code Is :%s:",st_spd_xchbk.c_xchng_cd[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Order Reference Is :%s:",st_spd_xchbk.c_ordr_rfrnc[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Pipe Id Is :%s:",st_spd_xchbk.c_pipe_id[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Trade Date Is :%s:",st_spd_xchbk.c_mod_trd_dt[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Order Sequence Is :%ld:",st_spd_xchbk.l_ord_seq[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book LimitMarket Flag :%c:",st_spd_xchbk.c_slm_flg[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Disclosed Qty Is :%ld:",st_spd_xchbk.l_dsclsd_qty[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Total Order Qty Is :%ld:",st_spd_xchbk.l_ord_tot_qty[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Order Limit Rate Is :%ld:",st_spd_xchbk.l_ord_lmt_rt[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Stop Loss Trigger Is :%ld:",st_spd_xchbk.l_stp_lss_tgr[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Modification Counter Is :%ld:",st_spd_xchbk.l_mdfctn_cntr[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Order Type Is :%c:",st_spd_xchbk.c_ord_typ[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Request Type Is :%c:",st_spd_xchbk.c_req_typ[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Quote Time Is :%s:",st_spd_xchbk.c_qt_tm[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Request Time Is :%s:",st_spd_xchbk.c_rqst_tm[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Forward Time Is :%s:",st_spd_xchbk.c_frwrd_tm[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Placed Status Is :%c:",st_spd_xchbk.c_plcd_stts[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book RMS Processed Flag Is :%c:",st_spd_xchbk.c_rms_prcsd_flg[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Ack Time Is :%s:",st_spd_xchbk.c_ack_tm[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Order Type Is :%c:",st_spd_xchbk.c_ex_ordr_typ[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Bit Flag Is :%ld:",st_spd_xchbk.l_bit_flg[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book SPL Flag Is :%c:",st_spd_xchbk.c_spl_flg[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Order Flow Is :%c:",st_spd_xchbk.c_ordr_flw[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Operation Type Is :%c:",st_spd_xchbk.c_oprn_typ[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Msg Type Is :%ld:",st_spd_xchbk.l_ors_msg_typ[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Jiffy Is :%lf:",st_spd_xchbk.d_jiffy[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book DownLoad Flag is :%ld:",st_spd_xchbk.l_dwnld_flg[i_cnt]);
      fn_userlog(c_ServiceName,"Spread Book Entry Date Time :%s:",st_spd_xchbk.c_entry_dt_tm[i_cnt]);
    }

    if( i_cnt == 0)
    {
      st_spd_xchbk.l_xchng_can_qty[i_cnt] = ptr_st_spdoe_reqres->li_volume - ptr_st_spdoe_reqres->li_total_vol_remaining;
    }		
		else
    {
      st_spd_xchbk.l_xchng_can_qty[i_cnt] =
        ptr_st_spdoe_reqres->st_spd_lg_inf[i_cnt - 1].li_volume -
        ptr_st_spdoe_reqres->st_spd_lg_inf[i_cnt - 1].li_total_vol_remaining;
    }

    st_spd_ordbk.l_exctd_qty[i_cnt] = st_spd_xchbk.l_xchng_can_qty[i_cnt];
    st_spd_ordbk.l_can_qty[i_cnt]   = st_spd_ordbk.l_ord_tot_qty[i_cnt] - st_spd_xchbk.l_xchng_can_qty[i_cnt];

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Executed Qty Is :%ld:",st_spd_ordbk.l_exctd_qty[i_cnt]);
      fn_userlog(c_ServiceName,"Cancel Qty Is :%ld:",st_spd_ordbk.l_can_qty[i_cnt]);
    }
  }


  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }
  strcpy(st_spd_ordbk.c_rout_crt,c_rout_str); 
  st_spd_ordbk.c_rqst_typ[0] = UPDATE_XCHNG_RESPONSE_RC;
	
	if(st_spd_ordbk.l_ors_msg_typ[0]	==	ORS_3L_ORD_CNCL	)
	{
  	i_rec_cnt = 3;
	}
	else
	{
  	i_rec_cnt = 2;
	}

	for ( i_cnt = 0; i_cnt < i_rec_cnt; i_cnt++ )
  {
  	EXEC SQL
      UPDATE  FSD_FO_SPRD_DTLS
      SET     FSD_EXEC_QTY 		= :st_spd_ordbk.l_exctd_qty[i_cnt],
              FSD_CNCL_QTY 		= :st_spd_ordbk.l_can_qty[i_cnt]
      WHERE   FSD_ORDR_RFRNC	= :st_spd_ordbk.c_ordr_rfrnc[i_cnt];

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31090", SQLMSG, c_err_msg );
			fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    	return -1;
    }
  }

  i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);

  if ( i_ch_val == -1 )
  {
    fn_errlog(c_ServiceName,"L31230", LIBMSG, c_err_msg);
    return -1;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_spd_xchbk.c_rout_crt,c_rout_str); 

	/**********************
  i_ch_val = fn_acall_svc ( c_ServiceName,
                            c_err_msg,
                            &st_spd_xchbk,
                            "vw_spdxchbk",
                            sizeof ( st_spd_xchbk ),
                            TPNOREPLY,
                            "SFO_SPD_ACK" );

	***********************************************************/


	i_ch_val  = fn_spd_ack  ( &st_spd_xchbk,
                            c_ServiceName,
                            c_err_msg
                          );
  if ( i_ch_val != 0 )
  {
    fn_errlog(c_ServiceName,"L31235", LIBMSG, c_err_msg);
    return -1;
  }


  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"After Complition Of fn_spnspd_ord_cncl");
  }

  return 0;
}


/******************************************************************************/
/*  This Updates Trade Conformation Details.                                  */
/*  INPUT PARAMETERS                                                          */
/*      ptr_st_trd_conf- Pointer to a message structure got from Exchange     */
/*      c_pipe_id      - Pipe Id                                              */
/*      i_dwnld_flg    - Download Flag                                        */
/*      c_ServiceName  - Service Name currently running                       */
/*      c_err_msg      - Error message to be returned                         */
/*  OUTPUT PARAMETERS                                                         */
/*        0   - Success                                                       */
/*        -1  - Failure                                                       */
/******************************************************************************/


int fn_spntrd_cnfrmtn ( struct st_trade_confirm *ptr_st_trd_conf,
                        char *c_xchng_cd,
                        char *c_pipe_id,
                        char *c_rout_str,
                        char *c_trd_dt,
                        char *c_trd_ref,
                        int i_dwnld_flg,
                        char *c_ServiceName,
                        char *c_err_msg )
{
	FBFR32 *ptr_fml_Ibuf;

  int i_trnsctn;
  int i_ch_val;
  int i_rec_cnt=0;    
	int i =0 ;
  int i_err  [18];
  int i_ferr [18];

  long long ll_log_tm_stmp;
  long long ll_log_tm_stmp_1;

  long li_ftt_stream_no;     

  double d_tm_stmp;

  struct st_orderbook st_i_ordbk;
  struct st_tradebook st_i_trdbk;
  struct st_sequence st_seq;
  struct st_contract st_cntrct;
	struct vw_tradebook vw_i_trdbk;		/*** Ver 1.4 ***/

  char c_svc_name [ 16 ];
  char c_refack_tmp[LEN_ORD_REFACK];
  char rfrnc[19],c_date[5] ;
  char ack[LEN_XCHNG_ACK];
  char c_mtch_accnt [10 + 1];
  char c_xchng_ack[17];
  char c_utrd_dt[23];
  char c_tmpjiffy[16];
  char c_trg_filter[17];
  char c_usr_id[16];      
	char c_lst_act_ref[22];   /*** Ver 4.6 ***/

  ptr_fml_Ibuf = (FBFR32 *)NULL;

  MEMSET(st_i_ordbk);
  MEMSET(st_i_trdbk);
  MEMSET(st_seq);
  MEMSET(st_cntrct);
	MEMSET(c_lst_act_ref);	/*** Ver 4.6 ***/

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Inside Function fn_spntrd_cnfrmtn");
  }

  sprintf(st_i_ordbk.c_xchng_ack,"%16.0lf",ptr_st_trd_conf->d_response_order_number);
  strcpy (st_i_ordbk.c_pipe_id , c_pipe_id );

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Exchange Ack Is :%s:",st_i_ordbk.c_xchng_ack);
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Pipe ID Is :%s:",st_i_ordbk.c_pipe_id);
    fn_userlog(c_ServiceName,"EXCHANGE JIFFY IS :%lld:",ptr_st_trd_conf->st_hdr.c_time_stamp_1);
  }

  strcpy(c_tmpjiffy,ptr_st_trd_conf->st_hdr.c_time_stamp_1);


  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_ordbk.c_rout_crt,c_rout_str); 
  st_i_ordbk.c_oprn_typ = FOR_VIEW;

  memcpy (&ll_log_tm_stmp_1, ptr_st_trd_conf->st_hdr.c_time_stamp_1, 8 );
  d_tm_stmp = (double)ll_log_tm_stmp_1;

	sprintf(c_lst_act_ref,"%lld",ptr_st_trd_conf->ll_lastactivityref); /** Ver 4.6 **//** Bhushan **/
  rtrim(c_lst_act_ref);     /*** Ver 4.6 ***/

	while (i_rec_cnt != 2)    
  {
    i_ch_val = fn_Sack_to_ord	(	&st_i_ordbk,
																c_ServiceName,
																c_usr_id,
																c_err_msg
															);   

    if ( i_ch_val != 0)
    {
      if ( i_ch_val == TOO_MANY_ROWS_FETCHED )
      {
        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"TOO_MANY_ROWS_FETCHED");
        }
        if ( strcmp ( c_xchng_cd, "NFO" ) == 0 )
        {
          fn_userlog(c_ServiceName,"Before Call To SFO_AC_TO_ORD");
          i_ch_val = fn_snse_to_eba_tkn ( ptr_st_trd_conf->l_token,
                                         &st_cntrct,
                                         c_rout_str,
                                         c_ServiceName,
                                         c_err_msg );
          if ( i_ch_val != 0 )
          {
            fn_errlog(c_ServiceName,"L31240", LIBMSG, c_err_msg);
            return -1;
          }

          strcpy ( st_i_ordbk.c_xchng_cd, st_cntrct.c_xchng_cd );
          st_i_ordbk.c_prd_typ = st_cntrct.c_prd_typ;
          strcpy ( st_i_ordbk.c_expry_dt, st_cntrct.c_expry_dt );
          st_i_ordbk.c_exrc_typ = st_cntrct.c_exrc_typ;
          st_i_ordbk.c_opt_typ = st_cntrct.c_opt_typ;
          st_i_ordbk.l_strike_prc = st_cntrct.l_strike_prc;
          st_i_ordbk.c_ctgry_indstk = st_cntrct.c_ctgry_indstk;
          strcpy ( st_i_ordbk.c_undrlyng, st_cntrct.c_undrlyng );
          st_i_ordbk.l_ca_lvl = st_cntrct.l_ca_lvl;
          sprintf(st_i_ordbk.c_xchng_ack,"%16.0lf",ptr_st_trd_conf->d_response_order_number);

					 strcpy ( st_i_ordbk.c_pipe_id , c_pipe_id );


          if(DEBUG_MSG_LVL_3)
          {
            fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
          }

          strcpy(st_i_ordbk.c_rout_crt,c_rout_str);

          st_i_ordbk.c_oprn_typ = FOR_VIEW;

          i_ch_val  = fn_Sac_to_ord (  c_ServiceName,    
                                      c_err_msg,
                                      c_usr_id,
                                      &st_i_ordbk
                                   );

          if ( i_ch_val !=  0 )
          {
            fn_errlog(c_ServiceName,"L31245", LIBMSG, c_err_msg);
            return -1;
          }
        }
        else
        {
          fn_errlog(c_ServiceName,"S31095", "Logic error", c_err_msg);
          return -1;
        }
			 }
      else
      {
        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Order Confirmation Is Not Processed");
          /** fn_userlog(c_ServiceName,"Before Going To Sleep For 2.5 Seconds"); ** Ver 2.4 ***/
          /**fn_userlog(c_ServiceName,"Before Going To Sleep For 5 MiliSeconds"); ** Ver 2.6 ***/
          fn_userlog(c_ServiceName,"Before Going To Sleep For 100 microseconds"); /** Ver 2.6 ***/ 
        }

        /**** sleep (2.5); **** ver 2.4 ****/
        /*** usleep(5000);  *** Ver 2.4 *** 5 milliseconds *** commented in Ver 2.6 ***/
        usleep(5000);      /*** Ver 2.6 ***/ 
        i_rec_cnt ++;

        if(DEBUG_MSG_LVL_0)   /*** Ver 2.6 *** Debug level set to 0 ***/
        {
          fn_userlog(c_ServiceName,"Record Count Is :%d: for :%s:",i_rec_cnt,st_i_ordbk.c_xchng_ack); /** ver 2.6 Ack added **/ 
        }
      }

    }

    if(i_ch_val == 0)
    {
      /*** Here Value of i_ch_val depends on call to SFO_ACK_TO_ORD For Normal Order & SFO_AC_TO_ORD For Spread Order ***/

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside Success Condition");
      }

      break;
    }
  }

  if(i_rec_cnt == 2)   
  {

		sprintf ( c_trg_filter, "FFO_FILTER=='NFO'" ); 

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Inserting Into FTT Table");
      fn_userlog(c_ServiceName,"Before Inserting Order Number Is :%lf:",ptr_st_trd_conf->d_response_order_number);
      fn_userlog(c_ServiceName,"Before Inserting Pipe ID Is :%s:",c_pipe_id);
      fn_userlog(c_ServiceName,"Before Inserting Token No. Is :%ld:",ptr_st_trd_conf->l_token);
      fn_userlog(c_ServiceName,"Before Inserting Trade Date Is :%s:",c_trd_dt);
      fn_userlog(c_ServiceName,"Before Inserting Trade Ref Is :%s:",c_trd_ref);
      fn_userlog(c_ServiceName,"Before Inserting Fill No. Is :%ld:",ptr_st_trd_conf->li_fill_number);
      fn_userlog(c_ServiceName,"Before Inserting Activity Time Is :%ld:",ptr_st_trd_conf->li_activity_time);
      fn_userlog(c_ServiceName,"Before Inserting Fill Qty Is ;%ld:",ptr_st_trd_conf->li_fill_quantity);
      fn_userlog(c_ServiceName,"Before Inserting Fill Price Is :%ld:",ptr_st_trd_conf->li_fill_price);
      fn_userlog(c_ServiceName,"Before Inserting Time Stamp Is :%lf:",d_tm_stmp);
      fn_userlog(c_ServiceName,"Trigger Filter Is :%s:",c_trg_filter);
    }

    fn_long_to_timearr(c_utrd_dt,ptr_st_trd_conf->li_activity_time);
    sprintf(c_xchng_ack,"%16.0lf",ptr_st_trd_conf->d_response_order_number);

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Inserting Activity Time Is ;%s:",c_utrd_dt);
      fn_userlog(c_ServiceName,"Before Inserting Ack Is :%s:",c_xchng_ack);
    }

    i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );
    if ( i_trnsctn == -1)
    {
      fn_errlog(c_ServiceName,"L31250", LIBMSG, c_err_msg);
      return -1;
    }

    li_ftt_stream_no = (long) ptr_st_trd_conf->st_hdr.c_time_stamp_2[LEN_TIME_STAMP -1];

		/*** Following COmmented In Ver 1.2
		EXEC SQL
      INSERT INTO ftt_fo_tmp_trd
      VALUES
      (
        to_char(:st_i_ordbk.c_xchng_ack),
        :c_pipe_id,
        :ptr_st_trd_conf->l_token,
        :ptr_st_trd_conf->li_fill_number,
        to_date(:c_utrd_dt,'DD-Mon-yyyy hh24:mi:ss'),
        :ptr_st_trd_conf->li_fill_quantity,
        :ptr_st_trd_conf->li_fill_price,
        :d_tm_stmp,
        'N',
        :li_ftt_stream_no        
      );
			COmmented In Ver 1.2 Ends ***/

			/**** Ver 1.2  Starts here *****/
    	EXEC SQL
      	   INSERT INTO ftt_fo_tmp_trd
        	             (FTT_ACK_NMBR,
          	            FTT_PIPE_ID,
            	          FTT_TOKEN_NO,
              	        FTT_XCHNGTRD_NO,
                	      FTT_TRD_TM,
                  	    FTT_EXCTD_QTY,
                    	  FTT_EXCTD_RT,
                      	FTT_JIFFY,
                      	FTT_PRCSD_FLG,
                      	FTT_STREAM_NO,
                      	FTT_XCHNG_CD,
												FTT_LST_ACT_REF,		/*** Ver 4.6 ***/
												FTT_TRANS_CD				/*** Ver 4.6 ***/
                     		)
          	VALUES(
                    	  to_char(:st_i_ordbk.c_xchng_ack),
                      	:c_pipe_id,
                      	:ptr_st_trd_conf->l_token,
                      	:ptr_st_trd_conf->li_fill_number,
                      	to_date(:c_utrd_dt,'DD-Mon-yyyy hh24:mi:ss'),
                      	:ptr_st_trd_conf->li_fill_quantity,
                      	:ptr_st_trd_conf->li_fill_price,
                      	:d_tm_stmp,
                      	'N',
                      	:li_ftt_stream_no,
                      	:c_xchng_cd,
												:c_lst_act_ref,			/*** Ver 4.6 ***/
												:ptr_st_trd_conf->st_hdr.si_transaction_code  /*** Ver 4.6 ***/
                     	);

    /***** Ver 1.2 Ends Here ******/

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31100",SQLMSG, c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }

    i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);
    if ( i_ch_val == -1 )
    {
      fn_errlog(c_ServiceName,"L31255", LIBMSG, c_err_msg);
      return -1;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Posting Trigger TRG_PRCS_TRD");
    }

    fn_pst_trg(c_ServiceName,"TRG_PRCS_TRD","TRG_PRCS_TRD",c_trg_filter);

    return 0;     
  }

  i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );  

  if ( i_trnsctn == -1)
  {
    fn_errlog(c_ServiceName,"L31260", LIBMSG, c_err_msg);
    return -1;
  }

	strcpy ( st_seq.c_pipe_id, st_i_ordbk.c_pipe_id );
  strcpy ( st_seq.c_trd_dt, ( char * )c_trd_dt );

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Pipe ID Is :%s:",st_seq.c_pipe_id);
    fn_userlog(c_ServiceName,"Trade Date Is :%s:",st_seq.c_trd_dt);
  }

  

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }
  strcpy(st_seq.c_rout_crt,c_rout_str); 
  st_seq.c_rqst_typ = GET_TRD_SEQ;

	i_ch_val	= fn_get_fno_seq  (c_ServiceName,
                               &st_seq,
                               c_err_msg
                              );


  if ( i_ch_val != SUCC_BFR )
  {
    fn_errlog(c_ServiceName,"L31265", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }


  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Sequence Number Is :%ld:",st_seq.l_seq_num);
    fn_userlog(c_ServiceName,"Trade Reference Is :%s:",c_trd_ref);
    fn_userlog(c_ServiceName,"Pipe ID Is :%s:",c_pipe_id);
  }

  sprintf ( st_i_trdbk.c_trd_rfrnc, "%s%s%08ld",c_trd_ref, c_pipe_id, st_seq.l_seq_num );
  strcpy ( st_i_trdbk.c_cln_mtch_accnt , st_i_ordbk.c_cln_mtch_accnt );
  strcpy ( c_mtch_accnt , st_i_ordbk.c_cln_mtch_accnt );
  strcpy ( st_i_trdbk.c_xchng_cd , st_i_ordbk.c_xchng_cd );
  st_i_trdbk.c_prd_typ = st_i_ordbk.c_prd_typ;
  strcpy ( st_i_trdbk.c_undrlyng , st_i_ordbk.c_undrlyng );
  strcpy ( st_i_trdbk.c_expry_dt , st_i_ordbk.c_expry_dt );
  st_i_trdbk.c_exrc_typ = st_i_ordbk.c_exrc_typ;
  st_i_trdbk.c_opt_typ = st_i_ordbk.c_opt_typ;
  st_i_trdbk.l_strike_prc = st_i_ordbk.l_strike_prc;
  st_i_trdbk.c_ctgry_indstk = st_i_ordbk.c_ctgry_indstk;
  strcpy ( st_i_trdbk.c_ordr_rfrnc , st_i_ordbk.c_ordr_rfrnc );
  strcpy ( st_i_trdbk.c_xchng_ack , st_i_ordbk.c_xchng_ack );
  st_i_trdbk.l_xchng_trd_no = ptr_st_trd_conf->li_fill_number;
  fn_long_to_timearr(st_i_trdbk.c_trd_dt,ptr_st_trd_conf->li_activity_time);
  st_i_trdbk.c_trd_flw = st_i_ordbk.c_ordr_flw;
  st_i_trdbk.l_exctd_qty = ptr_st_trd_conf->li_fill_quantity;
  st_i_trdbk.l_exctd_rt = ptr_st_trd_conf->li_fill_price;
  st_i_trdbk.l_dwnld_flg = i_dwnld_flg;
  memcpy (&ll_log_tm_stmp, ptr_st_trd_conf->st_hdr.c_time_stamp_1, 8 );
  st_i_trdbk.d_jiffy = (double) ll_log_tm_stmp;

  st_i_trdbk.l_ca_lvl =  (long) ptr_st_trd_conf->st_hdr.c_time_stamp_2[LEN_TIME_STAMP -1];    

	strcpy(st_i_trdbk.c_rout_crt,c_rout_str);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Trade Reference Is :%s:",st_i_trdbk.c_trd_rfrnc);
    fn_userlog(c_ServiceName,"Match Account Is :%s:",st_i_trdbk.c_cln_mtch_accnt);
    fn_userlog(c_ServiceName,"Exchange Code Is :%s:",st_i_trdbk.c_xchng_cd);
    fn_userlog(c_ServiceName,"Product Type Is :%c:",st_i_trdbk.c_prd_typ);
    fn_userlog(c_ServiceName,"Underlying Is :%s:",st_i_trdbk.c_undrlyng);
    fn_userlog(c_ServiceName,"Expiry Date Is :%s:",st_i_trdbk.c_expry_dt);
    fn_userlog(c_ServiceName,"Exercise Type Is :%c:",st_i_trdbk.c_exrc_typ);
    fn_userlog(c_ServiceName,"Option Type Is :%c:",st_i_trdbk.c_opt_typ);
    fn_userlog(c_ServiceName,"Strike Price is :%ld:",st_i_trdbk.l_strike_prc);
    fn_userlog(c_ServiceName,"IndexStock Is :%c:",st_i_trdbk.c_ctgry_indstk);
    fn_userlog(c_ServiceName,"Order Reference No. Is :%s:",st_i_trdbk.c_ordr_rfrnc);
    fn_userlog(c_ServiceName,"Exchange Ack Is :%s:",st_i_trdbk.c_xchng_ack);
    fn_userlog(c_ServiceName,"Exchange Trade No. Is :%ld:", ptr_st_trd_conf->li_fill_number);
    fn_userlog(c_ServiceName,"Trade No. Is :%ld:",st_i_trdbk.l_xchng_trd_no);
    fn_userlog(c_ServiceName,"Exchange Trade Date Is :%ld:",ptr_st_trd_conf->li_activity_time);
    fn_userlog(c_ServiceName,"Trade Date Is :%s:",st_i_trdbk.c_trd_dt);
    fn_userlog(c_ServiceName,"Trade Flow Is :%c:",st_i_trdbk.c_trd_flw);
    fn_userlog(c_ServiceName,"In TRD_CONF, the stream number receieved from exchange is :%ld:",st_i_trdbk.l_ca_lvl);
    fn_userlog(c_ServiceName,"Exchange Executed Qty Is :%ld:", ptr_st_trd_conf->li_fill_quantity);
    fn_userlog(c_ServiceName,"Exchange Executed Rate Is :%ld:",ptr_st_trd_conf->li_fill_price);
    fn_userlog(c_ServiceName,"Executed Qty Is :%ld:",st_i_trdbk.l_exctd_qty);
    fn_userlog(c_ServiceName,"Executed Rate Is :%ld:",st_i_trdbk.l_exctd_rt);
    fn_userlog(c_ServiceName,"DownLoad flag Is :%ld:",st_i_trdbk.l_dwnld_flg);
    fn_userlog(c_ServiceName,"Exchange Log Time Stamp Is :%lld:",ll_log_tm_stmp);
    fn_userlog(c_ServiceName,"Jiffy Is :%lf:",st_i_trdbk.d_jiffy);
  }


  strcpy(st_i_trdbk.c_user_id,st_i_ordbk.c_user_id);

	sprintf(c_lst_act_ref,"%lld",ptr_st_trd_conf->ll_lastactivityref);  /*** Ver 4.6 ***/
	rtrim(c_lst_act_ref);	/*** Ver 4.6 ***/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"USER ID IS  :%s:",st_i_trdbk.c_user_id);
		fn_userlog(c_ServiceName,"c_lst_act_ref :%s:",c_lst_act_ref);       /*** Ver 4.6 ***/
    fn_userlog(c_ServiceName,"CALLING SFO_UPD_TRDBK");
  }

	st_i_trdbk.c_oprn_typ = INSERT_TRADE_CONF;

  i_ch_val = fn_upd_Strdbk ( c_ServiceName,       
                            c_err_msg,
                            c_usr_id,
														c_lst_act_ref,			/*** Ver 4.6 ***/
                            &st_i_trdbk
                         );

  if ( ( i_ch_val != SUCC_BFR ) && ( i_ch_val != RECORD_ALREADY_PRCSD ) )
  {
    fn_errlog(c_ServiceName,"L31270", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }

  else if ( i_ch_val == RECORD_ALREADY_PRCSD )
  {
    fn_userlog ( c_ServiceName, "Record already processed" );
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return 0;
  }

	
	i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);

  if ( i_ch_val == -1 )
  {
    fn_errlog(c_ServiceName,"L31275", LIBMSG, c_err_msg);
    return -1;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

	ptr_fml_Ibuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  if ( ptr_fml_Ibuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31105", TPMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    return -1;
  }


	i_err [0] = Fadd32(ptr_fml_Ibuf,FFO_ROUT_CRT, (char *)st_i_trdbk.c_rout_crt,0);
  i_ferr[0] = Ferror32;
	i_err [1] = Fadd32(ptr_fml_Ibuf,FFO_ORDR_RFRNC, (char *)st_i_trdbk.c_ordr_rfrnc,0);
  i_ferr[1] = Ferror32;
	i_err [2] = Fadd32(ptr_fml_Ibuf,FFO_TRD_RFRNC, (char *)st_i_trdbk.c_trd_rfrnc,0);
  i_ferr[2] = Ferror32;
	i_err [3] = Fadd32(ptr_fml_Ibuf,FFO_EBA_MTCH_ACT_NO, (char *)st_i_trdbk.c_cln_mtch_accnt,0);
  i_ferr[3] = Ferror32;
	i_err [4] = Fadd32(ptr_fml_Ibuf,FFO_EBA_CNTRCT_ID, (char *)&st_i_trdbk.l_eba_cntrct_id,0);
  i_ferr[4] = Ferror32;
	i_err [5] = Fadd32(ptr_fml_Ibuf,FFO_XCHNG_CD, (char *)st_i_trdbk.c_xchng_cd,0);
  i_ferr[5] = Ferror32;
	i_err [6] = Fadd32(ptr_fml_Ibuf,FFO_PRDCT_TYP, (char *)&st_i_trdbk.c_prd_typ,0);
  i_ferr[6] = Ferror32;
	i_err [7] = Fadd32(ptr_fml_Ibuf,FFO_UNDRLYNG, (char *)st_i_trdbk.c_undrlyng,0);
  i_ferr[7] = Ferror32;
	i_err [8] = Fadd32(ptr_fml_Ibuf,FFO_EXPRY_DT, (char *)st_i_trdbk.c_expry_dt,0);
  i_ferr[8] = Ferror32;
	i_err [9] = Fadd32(ptr_fml_Ibuf,FFO_EXER_TYP, (char *)&st_i_trdbk.c_exrc_typ,0);
  i_ferr[9] = Ferror32;
	i_err [10] = Fadd32(ptr_fml_Ibuf,FFO_OPT_TYP, (char *)&st_i_trdbk.c_opt_typ,0);
  i_ferr[10] = Ferror32;
	i_err [11] = Fadd32(ptr_fml_Ibuf,FFO_STRK_PRC, (char *)&st_i_trdbk.l_strike_prc,0);
  i_ferr[11] = Ferror32;
	i_err [12] = Fadd32(ptr_fml_Ibuf,FFO_CTGRY_INDSTK, (char *)&st_i_trdbk.c_ctgry_indstk,0);
  i_ferr[12] = Ferror32;
	i_err [13] = Fadd32(ptr_fml_Ibuf,FFO_CA_LVL, (char *)&st_i_trdbk.l_ca_lvl,0);
  i_ferr[13] = Ferror32;
	i_err [14] = Fadd32(ptr_fml_Ibuf,FFO_TRD_FLW, (char *)&st_i_trdbk.c_trd_flw,0);
  i_ferr[14] = Ferror32;
	i_err [15] = Fadd32(ptr_fml_Ibuf,FFO_EXEC_QTY, (char *)&st_i_trdbk.l_exctd_qty,0);
  i_ferr[15] = Ferror32;
	i_err [16] = Fadd32(ptr_fml_Ibuf,FFO_EXCTD_RT, (char *)&st_i_trdbk.l_exctd_rt,0);
  i_ferr[16] = Ferror32;
	i_err [17] = Fadd32(ptr_fml_Ibuf,FFO_TRD_DT, (char *)st_i_trdbk.c_trd_dt,0);
  i_ferr[17] = Ferror32;

  for (i = 0;i < 19 ;i++)
  {
    if(i_err[i] == -1)
    {
      fn_userlog( c_ServiceName, "Error in :%d:",i );
      fn_errlog( c_ServiceName, "S31110", Fstrerror32( i_ferr[i]),c_err_msg );
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }
  }

	/*** Ver 1.4 Check added since SPAN FuturePlus trades to be processed in normal trade service ***/
	if (st_i_trdbk.c_prd_typ == 'P')
	{
		i_ch_val = Fvftos32( ptr_fml_Ibuf,
										 (char *) &vw_i_trdbk,
										 "vw_tradebook" );


		if ( i_ch_val == -1 )
		{
			fn_errlog( c_ServiceName, "S31115", FMLMSG, c_err_msg  );
		  tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}
	
		i_ch_val = fn_acall_svc ( c_ServiceName,
															c_err_msg,
															&vw_i_trdbk,
															"vw_tradebook",
															sizeof ( vw_i_trdbk ),
															TPNOREPLY,
															"SFO_FUT_TCONF" );
	}
	else 
	{
	/*** Ver 1.4 Ends ***/
		i_ch_val  = tpacall ( "SFO_PRCS_TRD", (char *)ptr_fml_Ibuf,0, TPNOTRAN|TPNOREPLY);
	} /*** Ver 1.4 ***/

  if ( i_ch_val != 0 )
  {
    fn_errlog(c_ServiceName,"L31280", TPMSG, c_err_msg);
    tpfree ( ( char * )ptr_fml_Ibuf);
    return -1;
  }

  tpfree ( ( char * )ptr_fml_Ibuf);   /**** ver 1.4 ****/

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName, "After Prcs Trd");
  }

  return 0;
}

int fn_spnseq_to_omd( struct st_xchngbook *ptr_st_xchngbook,
                      char *c_ServiceName,
                      char *c_err_msg)
{
  EXEC SQL BEGIN DECLARE SECTION;
    short i_qt_tm;
    short i_frwrd_tm;
    short i_rms_prcs_flg;
    short i_ors_msg_typ;
    short i_ack_tm;
    short i_xchng_rmrks;
    short i_xchng_can_qty;
    varchar c_rmrks [ 256 ];
  EXEC SQL END DECLARE SECTION;

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog( c_ServiceName,"Function fn_seq_to_omd");
    fn_userlog( c_ServiceName,"Exchnage Code Is :%s:",ptr_st_xchngbook->c_xchng_cd);
    fn_userlog( c_ServiceName,"Pipe ID Is :%s:",ptr_st_xchngbook->c_pipe_id);
    fn_userlog( c_ServiceName,"Order Sequence Is :%ld:",ptr_st_xchngbook->l_ord_seq);
  }

   EXEC SQL
     SELECT  FXB_ORDR_RFRNC,
             FXB_LMT_MRKT_SL_FLG,
             FXB_DSCLSD_QTY,
             FXB_ORDR_TOT_QTY,
             FXB_LMT_RT,
             FXB_STP_LSS_TGR,
             FXB_MDFCTN_CNTR,
             to_char( FXB_ORDR_VALID_DT, 'dd-mon-yyyy' ),
             FXB_ORDR_TYPE,
             FXB_SPRD_ORD_IND,
             FXB_RQST_TYP,
             FXB_QUOTE,
             to_char( FXB_QT_TM, 'dd-mon-yyyy hh24:mi:ss' ),
             to_char( FXB_RQST_TM, 'dd-mon-yyyy hh24:mi:ss' ),
             to_char( FXB_FRWD_TM, 'dd-mon-yyyy hh24:mi:ss' ),
             FXB_PLCD_STTS,
             FXB_RMS_PRCSD_FLG,
             FXB_ORS_MSG_TYP,
             to_char ( FXB_ACK_TM, 'dd-mon-yyyy hh24:mi:ss' ),
             FXB_XCHNG_RMRKS,
             FXB_EX_ORDR_TYP,
             FXB_XCHNG_CNCLD_QTY,
             FXB_SPL_FLAG,
             FXB_ORDR_SQNC
		 INTO    :ptr_st_xchngbook->c_ordr_rfrnc,
             :ptr_st_xchngbook->c_slm_flg,
             :ptr_st_xchngbook->l_dsclsd_qty,
             :ptr_st_xchngbook->l_ord_tot_qty,
             :ptr_st_xchngbook->l_ord_lmt_rt,
             :ptr_st_xchngbook->l_stp_lss_tgr,
             :ptr_st_xchngbook->l_mdfctn_cntr,
             :ptr_st_xchngbook->c_valid_dt,
             :ptr_st_xchngbook->c_ord_typ,
             :ptr_st_xchngbook->c_sprd_ord_ind,
             :ptr_st_xchngbook->c_req_typ,
             :ptr_st_xchngbook->l_quote,
             :ptr_st_xchngbook->c_qt_tm:i_qt_tm,
             :ptr_st_xchngbook->c_rqst_tm,
             :ptr_st_xchngbook->c_frwrd_tm:i_frwrd_tm,
             :ptr_st_xchngbook->c_plcd_stts,
             :ptr_st_xchngbook->c_rms_prcsd_flg:i_rms_prcs_flg,
             :ptr_st_xchngbook->l_ors_msg_typ:i_ors_msg_typ,
             :ptr_st_xchngbook->c_ack_tm:i_ack_tm,
             :c_rmrks:i_xchng_rmrks,
             :ptr_st_xchngbook->c_ex_ordr_typ,
             :ptr_st_xchngbook->l_xchng_can_qty:i_xchng_can_qty,
             :ptr_st_xchngbook->c_spl_flg,
             :ptr_st_xchngbook->l_ord_seq
     FROM    FXB_FO_XCHNG_BOOK
     WHERE   FXB_XCHNG_CD  = :ptr_st_xchngbook->c_xchng_cd
     AND     FXB_PIPE_ID   = :ptr_st_xchngbook->c_pipe_id
     AND     FXB_ORDR_SQNC = :ptr_st_xchngbook->l_ord_seq
     AND     FXB_MOD_TRD_DT =  to_date(:ptr_st_xchngbook->c_mod_trd_dt,'dd-Mon-yyyy');

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31120", SQLMSG, c_err_msg );
    return -1;

  }

  if ( i_xchng_rmrks == -1 )
  {
    memset ( ptr_st_xchngbook->c_xchng_rmrks, 0,sizeof ( ptr_st_xchngbook->c_xchng_rmrks ) );
  }
  else
  {
    SETNULL ( c_rmrks );
    strcpy ( ptr_st_xchngbook->c_xchng_rmrks, (char *)c_rmrks.arr );
  }

  return 0;
}

int fn_Sref_to_ord(struct st_orderbook *ptr_st_orderbook,
                  char *c_ServiceName,
                  char *c_err_msg)
{
  EXEC SQL BEGIN DECLARE SECTION;
    short i_sprd_ord_rfrnc;
    short i_settlor;
    short i_ack_tm;
    short i_prev_ack_tm;
    short i_xchng_ack;
    short i_valid_dt;
  EXEC SQL END DECLARE SECTION;


  if( DEBUG_MSG_LVL_0 )
  {
    fn_userlog( c_ServiceName,"Inside Function fn_Sref_to_ord");
    fn_userlog( c_ServiceName,"c_ordr_rfrnc:%s:",ptr_st_orderbook->c_ordr_rfrnc);
    fn_userlog( c_ServiceName,"Requested Operation :%c:",ptr_st_orderbook->c_oprn_typ);
  }

  MEMSET( ptr_st_orderbook->c_ctcl_id);

  EXEC SQL
      SELECT  FOD_CLM_MTCH_ACCNT,
              FOD_CTCL_ID ,
              FOD_CLNT_CTGRY,
              FOD_PIPE_ID,
              FOD_XCHNG_CD,
              FOD_PRDCT_TYP,
              FOD_UNDRLYNG,
              to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ),
              FOD_EXER_TYP,
              FOD_OPT_TYP,
              FOD_STRK_PRC,
              FOD_ORDR_FLW,
              FOD_LMT_MRKT_SL_FLG,
              FOD_DSCLSD_QTY,
              FOD_ORDR_TOT_QTY,
              FOD_LMT_RT,
              FOD_STP_LSS_TGR,
              FOD_ORDR_TYPE,
              to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
              to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ),
              FOD_ORDR_STTS,
              FOD_EXEC_QTY,
              NVL(FOD_EXEC_QTY_DAY,0),
              FOD_CNCL_QTY,
              FOD_EXPRD_QTY,
							 FOD_SPRD_ORDR_REF,
              FOD_MDFCTN_CNTR,
              FOD_SETTLOR,
              FOD_ACK_NMBR,
              FOD_SPL_FLAG,
              FOD_INDSTK,
              to_char ( FOD_ORD_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              to_char ( FOD_LST_RQST_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              FOD_PRO_CLI_IND ,
              FOD_CHANNEL
        INTO  :ptr_st_orderbook->c_cln_mtch_accnt,
              :ptr_st_orderbook->c_ctcl_id,
              :ptr_st_orderbook->l_clnt_ctgry,
              :ptr_st_orderbook->c_pipe_id,
              :ptr_st_orderbook->c_xchng_cd,
              :ptr_st_orderbook->c_prd_typ,
              :ptr_st_orderbook->c_undrlyng,
              :ptr_st_orderbook->c_expry_dt,
              :ptr_st_orderbook->c_exrc_typ,
              :ptr_st_orderbook->c_opt_typ,
              :ptr_st_orderbook->l_strike_prc,
              :ptr_st_orderbook->c_ordr_flw,
              :ptr_st_orderbook->c_slm_flg,
              :ptr_st_orderbook->l_dsclsd_qty,
              :ptr_st_orderbook->l_ord_tot_qty,
              :ptr_st_orderbook->l_ord_lmt_rt,
              :ptr_st_orderbook->l_stp_lss_tgr,
              :ptr_st_orderbook->c_ord_typ,
              :ptr_st_orderbook->c_valid_dt:i_valid_dt,
              :ptr_st_orderbook->c_trd_dt,
              :ptr_st_orderbook->c_ordr_stts,
              :ptr_st_orderbook->l_exctd_qty,
              :ptr_st_orderbook->l_exctd_qty_day,
              :ptr_st_orderbook->l_can_qty,
              :ptr_st_orderbook->l_exprd_qty,
              :ptr_st_orderbook->c_sprd_ord_rfrnc:i_sprd_ord_rfrnc,
              :ptr_st_orderbook->l_mdfctn_cntr,
              :ptr_st_orderbook->c_settlor:i_settlor,
              :ptr_st_orderbook->c_xchng_ack:i_xchng_ack,
              :ptr_st_orderbook->c_spl_flg,
              :ptr_st_orderbook->c_ctgry_indstk,
              :ptr_st_orderbook->c_ack_tm:i_ack_tm,
              :ptr_st_orderbook->c_prev_ack_tm:i_prev_ack_tm,
              :ptr_st_orderbook->c_pro_cli_ind,
              :ptr_st_orderbook->c_channel
        FROM  fod_fo_ordr_dtls
        WHERE fod_ordr_rfrnc = :ptr_st_orderbook->c_ordr_rfrnc;

				if ( SQLCODE != 0 )
        {
          fn_errlog ( c_ServiceName, "S31125", SQLMSG, c_err_msg );
          return -1;
        }

  rtrim ( ptr_st_orderbook->c_expry_dt );
  rtrim ( ptr_st_orderbook->c_ctcl_id );

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Match Account :%s:",ptr_st_orderbook->c_cln_mtch_accnt);
    fn_userlog(c_ServiceName,"CTCL ID :%s:",ptr_st_orderbook->c_ctcl_id);
    fn_userlog(c_ServiceName,"CLient Category :%ld:",ptr_st_orderbook->l_clnt_ctgry);
    fn_userlog(c_ServiceName,"Pipe Id :%s:",ptr_st_orderbook->c_pipe_id);
    fn_userlog(c_ServiceName,"Exchange Code Is :%s:",ptr_st_orderbook->c_xchng_cd);
    fn_userlog(c_ServiceName,"Product Typ Is :%c:",ptr_st_orderbook->c_prd_typ);
    fn_userlog(c_ServiceName,"Underlying Is :%s:",ptr_st_orderbook->c_undrlyng);
    fn_userlog(c_ServiceName,"Expiry Date Is :%s:",ptr_st_orderbook->c_expry_dt);
    fn_userlog(c_ServiceName,"Exercise Type Is :%c:",ptr_st_orderbook->c_exrc_typ);
    fn_userlog(c_ServiceName,"Option Type Is :%c:",ptr_st_orderbook->c_opt_typ);
    fn_userlog(c_ServiceName,"Strike Price Is :%ld:",ptr_st_orderbook->l_strike_prc);
    fn_userlog(c_ServiceName,"Order Flow Is :%c:",ptr_st_orderbook->c_ordr_flw);
    fn_userlog(c_ServiceName,"LMT/MKT/SL Flag Is :%c:",ptr_st_orderbook->c_slm_flg);
    fn_userlog(c_ServiceName,"Disclosed Qty Is :%ld:",ptr_st_orderbook->l_dsclsd_qty);
    fn_userlog(c_ServiceName,"Total Order Qty Is :%ld:",ptr_st_orderbook->l_ord_tot_qty);
    fn_userlog(c_ServiceName,"Order Limit Rate :%ld:",ptr_st_orderbook->l_ord_lmt_rt);
    fn_userlog(c_ServiceName,"SLTP Is :%ld:",ptr_st_orderbook->l_stp_lss_tgr);
    fn_userlog(c_ServiceName,"Order Type Is :%c:",ptr_st_orderbook->c_ord_typ);
    fn_userlog(c_ServiceName,"Valid Date Is :%s:",ptr_st_orderbook->c_valid_dt);
    fn_userlog(c_ServiceName,"Trade Date Is :%s:",ptr_st_orderbook->c_trd_dt);
    fn_userlog(c_ServiceName,"Order status Is :%c:",ptr_st_orderbook->c_ordr_stts);
    fn_userlog(c_ServiceName,"Executed Qty Is :%ld:", ptr_st_orderbook->l_exctd_qty);
    fn_userlog(c_ServiceName,"Executed Qty Per Day :%ld:",ptr_st_orderbook->l_exctd_qty_day);
    fn_userlog(c_ServiceName,"Cancelled Qty Is :%ld:",ptr_st_orderbook->l_can_qty);
    fn_userlog(c_ServiceName,"Expired Qty Is :%ld:",ptr_st_orderbook->l_exprd_qty);
    fn_userlog(c_ServiceName,"Sprd Ord Rfrnc Is ;%s:",ptr_st_orderbook->c_sprd_ord_rfrnc);
    fn_userlog(c_ServiceName,"Modification Counter Is :%ld:",ptr_st_orderbook->l_mdfctn_cntr);
    fn_userlog(c_ServiceName,"Settlor Is :%s:",ptr_st_orderbook->c_settlor);
    fn_userlog(c_ServiceName,"Exchange Ack Is ;%s:",ptr_st_orderbook->c_xchng_ack);
    fn_userlog(c_ServiceName,"SPL Flag is :%c:",ptr_st_orderbook->c_spl_flg);
    fn_userlog(c_ServiceName,"Category IND/STK Is :%c:",ptr_st_orderbook->c_ctgry_indstk);
    fn_userlog(c_ServiceName,"Ack Time Is :%s:",ptr_st_orderbook->c_ack_tm);
    fn_userlog(c_ServiceName,"Prv Ack Time Is :%s:",ptr_st_orderbook->c_prev_ack_tm);
    fn_userlog(c_ServiceName,"Pro Cli Ind :%c:",ptr_st_orderbook->c_pro_cli_ind);
    fn_userlog(c_ServiceName,"Channel is :%s:",ptr_st_orderbook->c_channel);
  }

  return 0;

}

int fn_upd_Sordrbk(struct st_orderbook *ptr_st_orderbook,
									char *c_last_act_ref,						/*** Ver 4.6 ***/
                  char *c_ServiceName,
                  char *c_err_msg)
{
	 int  i_recent_act_ref = 0;					/*** Ver 5.0 ***/
   char c_fod_last_act_no[22];				/*** Ver 5.0 ***/
   long long ll_fod_last_act_no = 0;	/*** Ver 5.0 ***/
   long long ll_last_act_ref  = 0;		/*** Ver 5.0 ***/
   MEMSET(c_fod_last_act_no);	 				/*** Ver 5.0 ***/


	  if(DEBUG_MSG_LVL_0)
   {
     fn_userlog( c_ServiceName,"Inside function UPD_ORDRBK");
		 
   }

	 /********* Ver 5.0 started **********/
 
	 EXEC SQL
    SELECT   NVL(FOD_LST_ACT_REF,'0')
    INTO     :c_fod_last_act_no
    FROM     FOD_FO_ORDR_DTLS
    WHERE    FOD_ORDR_RFRNC = :ptr_st_orderbook->c_ordr_rfrnc;

	 if ( SQLCODE != 0 )
	 {
		 fn_errlog ( c_ServiceName, "S31130", SQLMSG, c_err_msg );
		 return -1;	
	 }
	
		rtrim(c_fod_last_act_no);
    sscanf(c_fod_last_act_no,"%lld",&ll_fod_last_act_no);
    sscanf(c_last_act_ref,"%lld",&ll_last_act_ref);

	 i_recent_act_ref = ( ll_fod_last_act_no < ll_last_act_ref ) ? 1 : 0;
	
	 if(DEBUG_MSG_LVL_3)
	 {
	
		 fn_userlog( c_ServiceName,"kiran order reference no is :%s:",ptr_st_orderbook->c_ordr_rfrnc);
		 fn_userlog( c_ServiceName,"kiran i_recent_act_ref flag :%d:", i_recent_act_ref);
	 	 fn_userlog( c_ServiceName,"kiran ll_last_act_ref :%lld:",ll_last_act_ref);
	   fn_userlog( c_ServiceName,"kiran ll_fod_last_act_no :%lld:",ll_fod_last_act_no);
	 }
	 
	 /*********** Ver 5.0 Ended ***********/


  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName,"c_ordr_rfrnc:%s:", ptr_st_orderbook->c_ordr_rfrnc );
    fn_userlog ( c_ServiceName,"c_xchng_ack:%s:",ptr_st_orderbook->c_xchng_ack);
		fn_userlog ( c_ServiceName,"c_last_act_ref :%s:",c_last_act_ref);		/*** Ver 4.6 ***/
  }
		if(DEBUG_MSG_LVL_0) /**** Ver 3.1***/
	{
   		fn_userlog ( c_ServiceName,"ptr_st_orderbook->c_oprn_typ :%c:",ptr_st_orderbook->c_oprn_typ);
	}
	switch (ptr_st_orderbook->c_oprn_typ )
	{
		case UPDATE_XCHNG_RESPONSE :

  		EXEC SQL
        UPDATE  FOD_FO_ORDR_DTLS
        SET     FOD_ACK_NMBR  = :ptr_st_orderbook->c_xchng_ack
        WHERE   FOD_ORDR_RFRNC= :ptr_st_orderbook->c_ordr_rfrnc;

		case UPDATE_ORDER_STATUS:

			 EXEC SQL
        UPDATE  FOD_FO_ORDR_DTLS
        SET     FOD_ORDR_STTS = :ptr_st_orderbook->c_ordr_stts,
 							/*	FOD_LST_ACT_REF = :c_last_act_ref								*** Ver 4.6 *** commented in Ver 5.0 */
                 FOD_LST_ACT_REF  = DECODE(:i_recent_act_ref,1,:c_last_act_ref,FOD_LST_ACT_REF) /*** Added in Ver 5.0 ***/
	 WHERE   FOD_ORDR_RFRNC= :ptr_st_orderbook->c_ordr_rfrnc;

      break;

		case UPDATE_XCHNG_RESP_DTLS_OT:

			EXEC SQL
        UPDATE  FOD_FO_ORDR_DTLS
        SET     FOD_LST_RQST_ACK_TM = to_date (:ptr_st_orderbook->c_ack_tm,'dd-mon-yyyy hh24:mi:ss' ),
                FOD_LMT_MRKT_SL_FLG = 'L',
                FOD_STP_LSS_TGR     = 0,
				        FOD_PRCIMPV_FLG = DECODE(FOD_PRCIMPV_FLG,'Y','N',FOD_PRCIMPV_FLG),  /** Ver 3.5 **/
 							/*	FOD_LST_ACT_REF = :c_last_act_ref				*** Ver 4.6 commented in ver Ver 5.0***/
								FOD_LST_ACT_REF     = DECODE(:i_recent_act_ref,1,:c_last_act_ref,FOD_LST_ACT_REF) /*** Added in Ver 5.0 ***/
	 WHERE   FOD_ORDR_RFRNC			= :ptr_st_orderbook->c_ordr_rfrnc;
 
        break ; /** Ver 2.6 **/
		default :

    strcpy( c_err_msg, "Invalid Operation Type" );
    fn_errlog ( c_ServiceName, "S31135", DEFMSG, c_err_msg );
    return -1;
    break;

  }

  if(SQLCODE != 0)
  {
    fn_errlog ( c_ServiceName, "S31140", SQLMSG, c_err_msg );
    return -1;
  }

  	return 0;
}

int fn_upd_Sxchngbk( struct st_xchngbook *ptr_st_xchngbook,
										char *c_last_act_ref,	 /*** Ver 4.6 ***/
                    char *c_ServiceName,
                    char *c_err_msg)
{

  EXEC SQL BEGIN DECLARE SECTION;
    varchar c_xchng_rmrks [ 256 ];
  EXEC SQL END DECLARE SECTION;


  int i_rec_exists = 0;

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Inside Function fn_upd_Sxchngbk");
    fn_userlog(c_ServiceName,"Order Reference Is :%s:",ptr_st_xchngbook->c_ordr_rfrnc);
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Modification Counter Is :%ld:",ptr_st_xchngbook->l_mdfctn_cntr);
    fn_userlog(c_ServiceName,"Placed Status Is ;%c:",ptr_st_xchngbook->c_plcd_stts);
    fn_userlog(c_ServiceName,"RMS Processed Flag Is :%c:",ptr_st_xchngbook->c_rms_prcsd_flg);
    fn_userlog(c_ServiceName,"ORS Msg Typ Is :%ld:",ptr_st_xchngbook->l_ors_msg_typ);
    fn_userlog(c_ServiceName,"Ack Time Is :%s:",ptr_st_xchngbook->c_ack_tm);
    fn_userlog(c_ServiceName,"Stream No. Is :%ld:",ptr_st_xchngbook->l_bit_flg);
		fn_userlog(c_ServiceName,"c_last_act_ref :%s:",c_last_act_ref);								/*** Ver 4.6 ***/
  }

	switch ( ptr_st_xchngbook->c_oprn_typ )
  {
    case UPDATION_ON_EXCHANGE_RESPONSE:

      if ( ptr_st_xchngbook->l_dwnld_flg == DOWNLOAD )
      {
        EXEC SQL
          SELECT 1
          INTO :i_rec_exists
          FROM FXB_FO_XCHNG_BOOK
          WHERE FXB_JIFFY   = :ptr_st_xchngbook->d_jiffy
          AND FXB_XCHNG_CD  = :ptr_st_xchngbook->c_xchng_cd
          AND FXB_PIPE_ID   = :ptr_st_xchngbook->c_pipe_id
          AND FXB_ORDR_RFRNC    = :ptr_st_xchngbook->c_ordr_rfrnc;  /** Ver 5.2 **/
         /*** AND FXB_STREAM_NO = :ptr_st_xchngbook->l_bit_flg;  **Commented in ver 5.1 **/ 

        if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
        {
          fn_errlog ( c_ServiceName, "S31145", SQLMSG, c_err_msg );
          return -1;
        }
        if ( i_rec_exists == 1 )
        {
          strcpy( c_err_msg, "Record already Processed" );
          return RECORD_ALREADY_PRCSD;
        }

      }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"ptr_st_xchngbook->c_xchng_rmrks :%s:",ptr_st_xchngbook->c_xchng_rmrks);
    }

    /*strcpy ( (char *)c_xchng_rmrks.arr,ptr_st_xchngbook->c_xchng_rmrks );
    rtrim ( c_xchng_rmrks.arr );
    SETLEN ( c_xchng_rmrks );*/

		EXEC SQL
      UPDATE  FXB_FO_XCHNG_BOOK
      SET  FXB_PLCD_STTS       = :ptr_st_xchngbook->c_plcd_stts,
           FXB_RMS_PRCSD_FLG   = :ptr_st_xchngbook->c_rms_prcsd_flg,
           FXB_ORS_MSG_TYP     = :ptr_st_xchngbook->l_ors_msg_typ,
           FXB_ACK_TM          = to_date( :ptr_st_xchngbook->c_ack_tm,'DD-Mon-yyyy hh24:mi:ss' ),
           FXB_XCHNG_RMRKS     = rtrim(fxb_xchng_rmrks)||:ptr_st_xchngbook->c_xchng_rmrks,
           FXB_JIFFY           = :ptr_st_xchngbook->d_jiffy,
           FXB_STREAM_NO       = :ptr_st_xchngbook->l_bit_flg,
					 FXB_LST_ACT_REF		 = :c_last_act_ref								/*** Ver 4.6 ***/     
      WHERE  FXB_ORDR_RFRNC    = :ptr_st_xchngbook->c_ordr_rfrnc
      AND  FXB_MDFCTN_CNTR     = :ptr_st_xchngbook->l_mdfctn_cntr;

    break;

    case UPDATE_PLACED_STTS:

      i_rec_exists = 0;
      if ( ptr_st_xchngbook->l_dwnld_flg == DOWNLOAD )
      {
        EXEC SQL
          SELECT 1
          INTO :i_rec_exists
          FROM dual
          WHERE EXISTS ( SELECT FXB_ORDR_RFRNC
                         FROM FXB_FO_XCHNG_BOOK
                         WHERE FXB_ORDR_RFRNC = :ptr_st_xchngbook->c_ordr_rfrnc
                         AND   FXB_JIFFY >= :ptr_st_xchngbook->d_jiffy );
                        /***  AND  FXB_STREAM_NO = :ptr_st_xchngbook->l_bit_flg); *** COmmented in ver 5.1 **/ 

        if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
        {
          fn_errlog ( c_ServiceName, "S31150",SQLMSG, c_err_msg );
          return -1;
        }

        if ( i_rec_exists == 1 )
        {
          strcpy(c_err_msg, "Record already Processed" );
          return RECORD_ALREADY_PRCSD;
        }

			  if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"The Order reference is :%s:",ptr_st_xchngbook->c_ordr_rfrnc);
        }

        EXEC SQL
          SELECT FOD_MDFCTN_CNTR
          INTO :ptr_st_xchngbook->l_mdfctn_cntr
          FROM FOD_FO_ORDR_DTLS
          WHERE FOD_ORDR_RFRNC = :ptr_st_xchngbook->c_ordr_rfrnc;

        if ( SQLCODE != 0 )
        {
          if (SQLCODE == NO_DATA_FOUND)
          {
            EXEC SQL
              SELECT FEB_MDFCTN_CNTR
              INTO :ptr_st_xchngbook->l_mdfctn_cntr
              FROM FEB_FO_EXRC_RQST_BOOK
              WHERE FEB_EXRC_RFRNC_NO = :ptr_st_xchngbook->c_ordr_rfrnc;

            if ( SQLCODE != 0 )
            {
              fn_errlog ( c_ServiceName, "S31155",SQLMSG, c_err_msg );
              fn_userlog(c_ServiceName,"Failed for Order reference :%s:",ptr_st_xchngbook->c_ordr_rfrnc);
              return -1;
            }
          }
          else
          {
              fn_errlog ( c_ServiceName, "S31160",SQLMSG, c_err_msg );
              fn_userlog(c_ServiceName,"Failed for Order reference :%s:",ptr_st_xchngbook->c_ordr_rfrnc);
              return -1;
            }
         }
      }

    EXEC SQL
      UPDATE  FXB_FO_XCHNG_BOOK
      SET  FXB_PLCD_STTS   = 'E',
           FXB_JIFFY       = :ptr_st_xchngbook->d_jiffy,
           FXB_STREAM_NO   = :ptr_st_xchngbook->l_bit_flg    
      WHERE  FXB_ORDR_RFRNC  = :ptr_st_xchngbook->c_ordr_rfrnc
      AND  FXB_MDFCTN_CNTR = :ptr_st_xchngbook->l_mdfctn_cntr;

		 if ( SQLCODE != 0 ) 
     {
    		fn_errlog ( c_ServiceName, "S31165",SQLMSG, c_err_msg );
        return -1;
     }

  break;

	case	INSERTION_ON_ORDER_FTE	:

		if ( ptr_st_xchngbook->l_dwnld_flg == DOWNLOAD )
    {
    	if ( ptr_st_xchngbook->l_ors_msg_typ == ORS_2L_ORD_CNCL ||  ptr_st_xchngbook->l_ors_msg_typ ==  ORS_3L_ORD_CNCL  || ptr_st_xchngbook->l_ors_msg_typ == ORS_ORD_TRG )    /** ver 3.4 ** Added ORS_ORD_TRG **/
      {
      	if(DEBUG_MSG_LVL_3) /**** Ver 3.1 ****/
				{
					fn_userlog(c_ServiceName,"Inside DOWNLOAD For ORS_2L_ORD_CNCL & ORS_3L_ORD_CNCL");
					fn_userlog(c_ServiceName,"Jiffy Is :%lf:",ptr_st_xchngbook->d_jiffy);
					fn_userlog(c_ServiceName,"Order Sequence Is :%ld:",ptr_st_xchngbook->l_ord_seq);
				}
        EXEC SQL
          SELECT 1
          INTO :i_rec_exists
          FROM FXB_FO_XCHNG_BOOK
          WHERE FXB_JIFFY = :ptr_st_xchngbook->d_jiffy
          AND FXB_XCHNG_CD = :ptr_st_xchngbook->c_xchng_cd
          AND FXB_PIPE_ID = :ptr_st_xchngbook->c_pipe_id
          AND FXB_ORDR_SQNC = :ptr_st_xchngbook->l_ord_seq;
          /*** AND FXB_STREAM_NO = :ptr_st_xchngbook->l_bit_flg; ** Ver 5.1 **/

         if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
         {
           fn_errlog ( c_ServiceName, "S31170",SQLMSG, c_err_msg );
           tpfree ( ( char * ) ptr_st_xchngbook );
					 return -1;
         }

      }
			else
      {
      	EXEC SQL
            SELECT 1
            INTO :i_rec_exists
            FROM FXB_FO_XCHNG_BOOK
            WHERE FXB_JIFFY = :ptr_st_xchngbook->d_jiffy
            AND FXB_XCHNG_CD = :ptr_st_xchngbook->c_xchng_cd
            AND FXB_PIPE_ID = :ptr_st_xchngbook->c_pipe_id
            AND FXB_ORDR_RFRNC = :ptr_st_xchngbook->c_ordr_rfrnc;  /** Ver 5.2 **/
            /** AND FXB_STREAM_NO = :ptr_st_xchngbook->l_bit_flg; ** Ver 5.1 **/ 

          if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
          {
            fn_errlog ( c_ServiceName, "S31175", SQLMSG, c_err_msg );
            tpfree ( ( char * ) ptr_st_xchngbook );
						return -1;
          }
      }

      if ( i_rec_exists == 1 )
      {
        tpfree ( ( char * ) ptr_st_xchngbook );
        strcpy( c_err_msg, "Record already Processed" );
    		fn_errlog ( c_ServiceName, "S31180", DEFMSG, c_err_msg );
				return -1;
      }
    }

		EXEC SQL
      INSERT INTO FXB_FO_XCHNG_BOOK
          (
            FXB_XCHNG_CD,
            FXB_ORDR_RFRNC,
            FXB_MDFCTN_CNTR,
            FXB_PIPE_ID,
            FXB_MOD_TRD_DT,
            FXB_ORDR_SQNC,
            FXB_PLCD_STTS,
            FXB_RMS_PRCSD_FLG,
            FXB_ORS_MSG_TYP,
            FXB_ACK_TM,
            FXB_XCHNG_RMRKS,
            FXB_RQST_TYP,
            FXB_JIFFY,
            FXB_ORDR_TOT_QTY,
            FXB_LMT_RT,
            FXB_STREAM_NO,
						FXB_XCHNG_CNCLD_QTY,    /** Ver 3.9 ***/
						FXB_LST_ACT_REF					/** Ver 4.6 **/
          )
          VALUES
          (
            :ptr_st_xchngbook->c_xchng_cd,
            :ptr_st_xchngbook->c_ordr_rfrnc,
            :ptr_st_xchngbook->l_mdfctn_cntr,
            :ptr_st_xchngbook->c_pipe_id,
            to_date (:ptr_st_xchngbook->c_mod_trd_dt,'DD-Mon-yyyy'),
            0,
            :ptr_st_xchngbook->c_plcd_stts,
            :ptr_st_xchngbook->c_rms_prcsd_flg,
            :ptr_st_xchngbook->l_ors_msg_typ,
            to_date (:ptr_st_xchngbook->c_ack_tm,'DD-Mon-yyyy hh24:mi:ss'),
            :ptr_st_xchngbook->c_xchng_rmrks,
            'T',
            :ptr_st_xchngbook->d_jiffy,
            :ptr_st_xchngbook->l_ord_tot_qty,
            :ptr_st_xchngbook->l_ord_lmt_rt,
            :ptr_st_xchngbook->l_bit_flg,
            :ptr_st_xchngbook->l_xchng_can_qty,        /** Ver 3.9 **/
						:c_last_act_ref														 /** Ver 4.6 **/
          );

      break;
				
  default :

	  strcpy( c_err_msg, "Invalid Operation Type" );
    fn_errlog ( c_ServiceName, "S31185", DEFMSG, c_err_msg );
    return -1;
    break;

  }

  if(SQLCODE != 0)
  {
    fn_errlog ( c_ServiceName, "S31190", SQLMSG, c_err_msg );
    return -1;
  }

  return 0;
}

int fn_Sac_to_ord (  char *c_ServiceName,  
                    char *c_err_msg,
                    char *c_usr_id,
                    struct st_orderbook *ptr_st_orderbook
                 )
{

  varchar c_user_id [16];

  short  i_sprd_ord_ref;
  short  i_ack_tm;
  short  i_settlor;
  short  i_prev_ack_tm;

  if(DEBUG_MSG_LVL_3) /*** Ver 3.1 ***/
	{
		fn_userlog(c_ServiceName,"Inside Function fn_Sac_to_ord.");
	}
  EXEC SQL
      SELECT  FOD_CLM_MTCH_ACCNT,
              FOD_CLNT_CTGRY,
              FOD_ORDR_RFRNC,
              FOD_XCHNG_CD,
              FOD_PRDCT_TYP,
              FOD_UNDRLYNG,
              TO_CHAR ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ),
              FOD_EXER_TYP,
              FOD_OPT_TYP,
              FOD_STRK_PRC,
              FOD_ORDR_FLW,
              FOD_LMT_MRKT_SL_FLG,
              NVL( FOD_DSCLSD_QTY, 0 ),
              NVL ( FOD_ORDR_TOT_QTY, 0 ),
              NVL( FOD_LMT_RT, 0 ),
              FOD_STP_LSS_TGR,
              FOD_ORDR_TYPE,
              TO_CHAR ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
              TO_CHAR ( FOD_TRD_DT, 'dd-Mon-yyyy' ),
              FOD_ORDR_STTS,
              NVL( FOD_EXEC_QTY, 0 ),
              NVL( FOD_EXEC_QTY_DAY, 0 ),
              NVL( FOD_CNCL_QTY, 0 ),
              NVL( FOD_EXPRD_QTY, 0 ),
              FOD_SPRD_ORDR_REF,
              FOD_MDFCTN_CNTR,
              FOD_SETTLOR,
              FOD_SPL_FLAG,
              FOD_INDSTK,
              TO_CHAR ( FOD_ORD_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              TO_CHAR ( FOD_LST_RQST_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              NVL( TRIM(FOD_USR_ID), '*')

				INTO  :ptr_st_orderbook->c_cln_mtch_accnt,
              :ptr_st_orderbook->l_clnt_ctgry,
              :ptr_st_orderbook->c_ordr_rfrnc,
              :ptr_st_orderbook->c_xchng_cd,
              :ptr_st_orderbook->c_prd_typ,
              :ptr_st_orderbook->c_undrlyng,
              :ptr_st_orderbook->c_expry_dt,
              :ptr_st_orderbook->c_exrc_typ,
              :ptr_st_orderbook->c_opt_typ,
              :ptr_st_orderbook->l_strike_prc,
              :ptr_st_orderbook->c_ordr_flw,
              :ptr_st_orderbook->c_slm_flg,
              :ptr_st_orderbook->l_dsclsd_qty,
              :ptr_st_orderbook->l_ord_tot_qty,
              :ptr_st_orderbook->l_ord_lmt_rt,
              :ptr_st_orderbook->l_stp_lss_tgr,
              :ptr_st_orderbook->c_ord_typ,
              :ptr_st_orderbook->c_valid_dt,
              :ptr_st_orderbook->c_trd_dt,
              :ptr_st_orderbook->c_ordr_stts,
              :ptr_st_orderbook->l_exctd_qty,
              :ptr_st_orderbook->l_exctd_qty_day,
              :ptr_st_orderbook->l_can_qty,
              :ptr_st_orderbook->l_exprd_qty,
              :ptr_st_orderbook->c_sprd_ord_rfrnc :i_sprd_ord_ref,
              :ptr_st_orderbook->l_mdfctn_cntr,
              :ptr_st_orderbook->c_settlor :i_settlor,
              :ptr_st_orderbook->c_req_typ,
              :ptr_st_orderbook->c_ctgry_indstk,
              :ptr_st_orderbook->c_ack_tm :i_ack_tm,
              :ptr_st_orderbook->c_prev_ack_tm :i_prev_ack_tm,
              :c_user_id
      FROM    FOD_FO_ORDR_DTLS
      WHERE   FOD_ACK_NMBR   = :ptr_st_orderbook->c_xchng_ack
      AND     FOD_PIPE_ID    = :ptr_st_orderbook->c_pipe_id
      AND     FOD_XCHNG_CD   = :ptr_st_orderbook->c_xchng_cd
      AND     FOD_PRDCT_TYP  = :ptr_st_orderbook->c_prd_typ
      AND     FOD_INDSTK     = :ptr_st_orderbook->c_ctgry_indstk
      AND     FOD_UNDRLYNG   = :ptr_st_orderbook->c_undrlyng
      AND     FOD_EXPRY_DT   = to_date ( :ptr_st_orderbook->c_expry_dt,'dd-mon-yyyy' )
      AND     FOD_EXER_TYP   = :ptr_st_orderbook->c_exrc_typ
      AND     FOD_OPT_TYP    = :ptr_st_orderbook->c_opt_typ
      AND     FOD_STRK_PRC   = :ptr_st_orderbook->l_strike_prc;

  if ( SQLCODE != 0 )
  {
    fn_userlog ( c_ServiceName,"HISTORY call removed on NDF");
    fn_errlog ( c_ServiceName, "S31195", SQLMSG,c_err_msg );
    return -1;
	}
/*****************************************************************************************************************
	 if ( SQLCODE == NO_DATA_FOUND )
  {
    fn_userlog ( c_ServiceName,"INSIDE HISTORY");


    EXEC SQL
      SELECT  FOD_CLM_MTCH_ACCNT,
              FOD_CLNT_CTGRY,
              FOD_ORDR_RFRNC,
              FOD_XCHNG_CD,
              FOD_PRDCT_TYP,
              FOD_UNDRLYNG,
              TO_CHAR ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ),
              FOD_EXER_TYP,
              FOD_OPT_TYP,
              FOD_STRK_PRC,
              FOD_ORDR_FLW,
              FOD_LMT_MRKT_SL_FLG,
              NVL( FOD_DSCLSD_QTY, 0 ),
              NVL ( FOD_ORDR_TOT_QTY, 0 ),
              NVL( FOD_LMT_RT, 0 ),
              FOD_STP_LSS_TGR,
              FOD_ORDR_TYPE,
              TO_CHAR ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
              TO_CHAR ( FOD_TRD_DT, 'dd-Mon-yyyy' ),
              FOD_ORDR_STTS,
              NVL( FOD_EXEC_QTY, 0 ),
              NVL( FOD_CNCL_QTY, 0 ),
              NVL( FOD_EXPRD_QTY, 0 ),
              NVL( FOD_SPRD_ORDR_REF, '*' ),
              FOD_MDFCTN_CNTR,
              NVL( FOD_SETTLOR, '*' ),
              NVL( FOD_SPL_FLAG, ' ' ),
              NVL( FOD_INDSTK, '*' ),
              TO_CHAR ( FOD_ORD_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              TO_CHAR ( FOD_LST_RQST_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              NVL( TRIM(FOD_USR_ID), '*' )
      INTO    :ptr_st_orderbook->c_cln_mtch_accnt,
              :ptr_st_orderbook->l_clnt_ctgry,
              :ptr_st_orderbook->c_ordr_rfrnc,
              :ptr_st_orderbook->c_xchng_cd,
              :ptr_st_orderbook->c_prd_typ,
              :ptr_st_orderbook->c_undrlyng,
              :ptr_st_orderbook->c_expry_dt,
              :ptr_st_orderbook->c_exrc_typ,
              :ptr_st_orderbook->c_opt_typ,
              :ptr_st_orderbook->l_strike_prc,
              :ptr_st_orderbook->c_ordr_flw,
              :ptr_st_orderbook->c_slm_flg,
							:ptr_st_orderbook->l_dsclsd_qty,
              :ptr_st_orderbook->l_ord_tot_qty,
              :ptr_st_orderbook->l_ord_lmt_rt,
              :ptr_st_orderbook->l_stp_lss_tgr,
              :ptr_st_orderbook->c_ord_typ,
              :ptr_st_orderbook->c_valid_dt,
              :ptr_st_orderbook->c_trd_dt,
              :ptr_st_orderbook->c_ordr_stts,
              :ptr_st_orderbook->l_exctd_qty,
              :ptr_st_orderbook->l_can_qty,
              :ptr_st_orderbook->l_exprd_qty,
              :ptr_st_orderbook->c_sprd_ord_rfrnc,
              :ptr_st_orderbook->l_mdfctn_cntr,
              :ptr_st_orderbook->c_settlor,
              :ptr_st_orderbook->c_req_typ,
              :ptr_st_orderbook->c_ctgry_indstk,
              :ptr_st_orderbook->c_ack_tm,
              :ptr_st_orderbook->c_prev_ack_tm,
              :c_user_id
      FROM    FOD_FO_ORDR_DTLS_HSTRY
      WHERE   FOD_ACK_NMBR = :ptr_st_orderbook->c_xchng_ack
      AND     FOD_PIPE_ID  = :ptr_st_orderbook->c_pipe_id
      AND     FOD_XCHNG_CD   = :ptr_st_orderbook->c_xchng_cd
      AND     FOD_PRDCT_TYP  = :ptr_st_orderbook->c_prd_typ
      AND     FOD_INDSTK     = :ptr_st_orderbook->c_ctgry_indstk
      AND     FOD_UNDRLYNG   = :ptr_st_orderbook->c_undrlyng
      AND     FOD_EXPRY_DT   = to_date ( :ptr_st_orderbook->c_expry_dt,'dd-mon-yyyy' )
      AND     FOD_EXER_TYP   = :ptr_st_orderbook->c_exrc_typ
      AND     FOD_OPT_TYP    = :ptr_st_orderbook->c_opt_typ
      AND     FOD_STRK_PRC   = :ptr_st_orderbook->l_strike_prc;

      if ( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName,"S31200", SQLMSG,c_err_msg );
        return -1;
      }
  }
*****************************************************************************************************************/

  SETNULL(c_user_id);
  strcpy(c_usr_id,c_user_id.arr);

  return 0;
}
int fn_Sack_to_ord ( struct	st_orderbook *ptr_st_orderbook,
                    char *c_ServiceName,
                    char *c_usr_id, 
                    char *c_err_msg)
{

  varchar c_user_id[16];      

   EXEC SQL BEGIN DECLARE SECTION;
    short  i_settlor;
    short  i_sprd_ord_ref;
    short  i_ack_tm;
    short  i_prev_ack_tm;
  EXEC SQL END DECLARE SECTION;

  if (DEBUG_MSG_LVL_0)
  {
    fn_userlog ( c_ServiceName,"Inside Function fn_Sack_to_ord");
    fn_userlog ( c_ServiceName,"c_xchng_ack:%s:", ptr_st_orderbook->c_xchng_ack );
    fn_userlog ( c_ServiceName,"c_pipe_id:%s:", ptr_st_orderbook->c_pipe_id );
  }

 if( ptr_st_orderbook->c_oprn_typ == FOR_UPDATE )  /*** ver 3.3 starts here ***/
 {
  EXEC SQL
      SELECT  FOD_CLM_MTCH_ACCNT,
              FOD_CLNT_CTGRY,
              FOD_ORDR_RFRNC,
              FOD_XCHNG_CD,
              FOD_PRDCT_TYP,
              FOD_UNDRLYNG,
              to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ),
              FOD_EXER_TYP,
              FOD_OPT_TYP,
              FOD_STRK_PRC,
              FOD_ORDR_FLW,
              FOD_LMT_MRKT_SL_FLG,
              NVL( FOD_DSCLSD_QTY, 0 ),
              NVL ( FOD_ORDR_TOT_QTY, 0 ),
              NVL( FOD_LMT_RT, 0 ),
              FOD_STP_LSS_TGR,
              FOD_ORDR_TYPE,
              to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
              to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ),
              FOD_ORDR_STTS,
              NVL( FOD_EXEC_QTY, 0 ),
              NVL( FOD_EXEC_QTY_DAY, 0 ),
              NVL( FOD_CNCL_QTY, 0 ),
              NVL( FOD_EXPRD_QTY, 0 ),
              FOD_SPRD_ORDR_REF,
              FOD_MDFCTN_CNTR,
							FOD_SETTLOR,
              FOD_SPL_FLAG,
              FOD_INDSTK,
              to_char ( FOD_ORD_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              to_char ( FOD_LST_RQST_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              NVL( trim(FOD_USR_ID), '*' ),
							NVL(FOD_PRCIMPV_FLG,'N'),               /*** Ver 3.5 ***/
              NVL(FOD_TRAIL_AMT,0),                   /*** Ver 3.5 ***/
              NVL(FOD_LMT_OFFSET,0)                   /*** Ver 3.5 ***/
      INTO    :ptr_st_orderbook->c_cln_mtch_accnt,
              :ptr_st_orderbook->l_clnt_ctgry,
              :ptr_st_orderbook->c_ordr_rfrnc,
              :ptr_st_orderbook->c_xchng_cd,
              :ptr_st_orderbook->c_prd_typ,
              :ptr_st_orderbook->c_undrlyng,
              :ptr_st_orderbook->c_expry_dt,
              :ptr_st_orderbook->c_exrc_typ,
              :ptr_st_orderbook->c_opt_typ,
              :ptr_st_orderbook->l_strike_prc,
              :ptr_st_orderbook->c_ordr_flw,
              :ptr_st_orderbook->c_slm_flg,
              :ptr_st_orderbook->l_dsclsd_qty,
              :ptr_st_orderbook->l_ord_tot_qty,
              :ptr_st_orderbook->l_ord_lmt_rt,
              :ptr_st_orderbook->l_stp_lss_tgr,
              :ptr_st_orderbook->c_ord_typ,
              :ptr_st_orderbook->c_valid_dt,
              :ptr_st_orderbook->c_trd_dt,
              :ptr_st_orderbook->c_ordr_stts,
              :ptr_st_orderbook->l_exctd_qty,
              :ptr_st_orderbook->l_exctd_qty_day,
              :ptr_st_orderbook->l_can_qty,
              :ptr_st_orderbook->l_exprd_qty,
              :ptr_st_orderbook->c_sprd_ord_rfrnc :i_sprd_ord_ref,
              :ptr_st_orderbook->l_mdfctn_cntr,
              :ptr_st_orderbook->c_settlor :i_settlor,
              :ptr_st_orderbook->c_req_typ,
              :ptr_st_orderbook->c_ctgry_indstk,
              :ptr_st_orderbook->c_ack_tm :i_ack_tm,
              :ptr_st_orderbook->c_prev_ack_tm :i_prev_ack_tm,
              :c_user_id,
							:ptr_st_orderbook->c_prcimpv_flg,        /*** Ver 3.5 ***/
              :ptr_st_orderbook->l_trail_amt,          /*** Ver 3.5 ***/
              :ptr_st_orderbook->l_lmt_offset          /*** Ver 3.5 ***/ 
      FROM    FOD_FO_ORDR_DTLS
      WHERE   FOD_ACK_NMBR = :ptr_st_orderbook->c_xchng_ack
      AND     FOD_PIPE_ID  = :ptr_st_orderbook->c_pipe_id
      FOR UPDATE OF fod_ordr_rfrnc NOWAIT;
   }  /*** ver 3.3 ends here ***/
   else
  {
     EXEC SQL
      SELECT  FOD_CLM_MTCH_ACCNT,
              FOD_CLNT_CTGRY,
              FOD_ORDR_RFRNC,
              FOD_XCHNG_CD,
              FOD_PRDCT_TYP,
              FOD_UNDRLYNG,
              to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ),
              FOD_EXER_TYP,
              FOD_OPT_TYP,
              FOD_STRK_PRC,
              FOD_ORDR_FLW,
              FOD_LMT_MRKT_SL_FLG,
              NVL( FOD_DSCLSD_QTY, 0 ),
              NVL ( FOD_ORDR_TOT_QTY, 0 ),
              NVL( FOD_LMT_RT, 0 ),
              FOD_STP_LSS_TGR,
              FOD_ORDR_TYPE,
              to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
              to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ),
              FOD_ORDR_STTS,
              NVL( FOD_EXEC_QTY, 0 ),
              NVL( FOD_EXEC_QTY_DAY, 0 ),
              NVL( FOD_CNCL_QTY, 0 ),
              NVL( FOD_EXPRD_QTY, 0 ),
              FOD_SPRD_ORDR_REF,
              FOD_MDFCTN_CNTR,
              FOD_SETTLOR,
              FOD_SPL_FLAG,
              FOD_INDSTK,
              to_char ( FOD_ORD_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              to_char ( FOD_LST_RQST_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              NVL( trim(FOD_USR_ID), '*' ),
							NVL(FOD_PRCIMPV_FLG,'N'),               /*** Ver 3.5 ***/
              NVL(FOD_TRAIL_AMT,0),                   /*** Ver 3.5 ***/
              NVL(FOD_LMT_OFFSET,0)                   /*** Ver 3.5 ***/
      INTO    :ptr_st_orderbook->c_cln_mtch_accnt,
              :ptr_st_orderbook->l_clnt_ctgry,
              :ptr_st_orderbook->c_ordr_rfrnc,
              :ptr_st_orderbook->c_xchng_cd,
              :ptr_st_orderbook->c_prd_typ,
              :ptr_st_orderbook->c_undrlyng,
              :ptr_st_orderbook->c_expry_dt,
              :ptr_st_orderbook->c_exrc_typ,
              :ptr_st_orderbook->c_opt_typ,
              :ptr_st_orderbook->l_strike_prc,
              :ptr_st_orderbook->c_ordr_flw,
              :ptr_st_orderbook->c_slm_flg,
              :ptr_st_orderbook->l_dsclsd_qty,
              :ptr_st_orderbook->l_ord_tot_qty,
              :ptr_st_orderbook->l_ord_lmt_rt,
              :ptr_st_orderbook->l_stp_lss_tgr,
              :ptr_st_orderbook->c_ord_typ,
              :ptr_st_orderbook->c_valid_dt,
              :ptr_st_orderbook->c_trd_dt,
              :ptr_st_orderbook->c_ordr_stts,
              :ptr_st_orderbook->l_exctd_qty,
              :ptr_st_orderbook->l_exctd_qty_day,
              :ptr_st_orderbook->l_can_qty,
              :ptr_st_orderbook->l_exprd_qty,
              :ptr_st_orderbook->c_sprd_ord_rfrnc :i_sprd_ord_ref,
              :ptr_st_orderbook->l_mdfctn_cntr,
              :ptr_st_orderbook->c_settlor :i_settlor,
              :ptr_st_orderbook->c_req_typ,
              :ptr_st_orderbook->c_ctgry_indstk,
              :ptr_st_orderbook->c_ack_tm :i_ack_tm,
              :ptr_st_orderbook->c_prev_ack_tm :i_prev_ack_tm,
              :c_user_id,
							:ptr_st_orderbook->c_prcimpv_flg,        /*** Ver 3.5 ***/
              :ptr_st_orderbook->l_trail_amt,          /*** Ver 3.5 ***/
              :ptr_st_orderbook->l_lmt_offset          /*** Ver 3.5 ***/
      FROM    FOD_FO_ORDR_DTLS
      WHERE   FOD_ACK_NMBR = :ptr_st_orderbook->c_xchng_ack
      AND     FOD_PIPE_ID  = :ptr_st_orderbook->c_pipe_id;
   }
   

			if (  SQLCODE != 0 )
    	{
      	if ( SQLCODE == TOO_MANY_ROWS_FETCHED )
      	{
       		return TOO_MANY_ROWS_FETCHED;
      	}

      	fn_errlog ( c_ServiceName, "S31205", SQLMSG, c_err_msg );
      	return -1;
    	}

	rtrim ( ptr_st_orderbook->c_expry_dt );

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "Values Inside Function fn_Sack_to_ord");
    fn_userlog ( c_ServiceName, "Match Account Is :%s:",ptr_st_orderbook->c_cln_mtch_accnt);
    fn_userlog ( c_ServiceName, "CLNT Ctgry :%ld:",ptr_st_orderbook->l_clnt_ctgry);
    fn_userlog ( c_ServiceName, "Order Reference Is :%s:",ptr_st_orderbook->c_ordr_rfrnc);
    fn_userlog ( c_ServiceName, "Exchnage Code Is :%s:",ptr_st_orderbook->c_xchng_cd);
    fn_userlog ( c_ServiceName, "Product Type Is :%c:",ptr_st_orderbook->c_prd_typ);
    fn_userlog ( c_ServiceName, "Underlying Is :%s:",ptr_st_orderbook->c_undrlyng);
    fn_userlog ( c_ServiceName, "Expiry Date Is :%s:",ptr_st_orderbook->c_expry_dt);
    fn_userlog ( c_ServiceName, "Exercise Type Is :%c:",ptr_st_orderbook->c_exrc_typ);
    fn_userlog ( c_ServiceName, "Option Type Is :%c:",ptr_st_orderbook->c_opt_typ);
    fn_userlog ( c_ServiceName, "Strike Price Is :%ld:",ptr_st_orderbook->l_strike_prc);
    fn_userlog ( c_ServiceName, "Order Flow Is :%c:",ptr_st_orderbook->c_ordr_flw);
    fn_userlog ( c_ServiceName, "SLM Flag Is :%c:",ptr_st_orderbook->c_slm_flg);
    fn_userlog ( c_ServiceName, "Disclosed Qty Is :%ld:",ptr_st_orderbook->l_dsclsd_qty);
    fn_userlog ( c_ServiceName, "Total Order Qty Is :%ld:",ptr_st_orderbook->l_ord_tot_qty);
    fn_userlog ( c_ServiceName, "Order Limit Rate Is :%ld:",ptr_st_orderbook->l_ord_lmt_rt);
    fn_userlog ( c_ServiceName, "SLTP is :%ld:",ptr_st_orderbook->l_stp_lss_tgr);
    fn_userlog ( c_ServiceName, "Order Type Is :%c:",ptr_st_orderbook->c_ord_typ);
    fn_userlog ( c_ServiceName, "Valid Date Is :%s:",ptr_st_orderbook->c_valid_dt);
    fn_userlog ( c_ServiceName, "Trade date IS :%s:",ptr_st_orderbook->c_trd_dt);
    fn_userlog ( c_ServiceName, "Order Status Is :%c:",ptr_st_orderbook->c_ordr_stts);
    fn_userlog ( c_ServiceName, "Executed Qty Is :%ld:",ptr_st_orderbook->l_exctd_qty);
    fn_userlog ( c_ServiceName, "Executed Qty Day Is :%ld:",ptr_st_orderbook->l_exctd_qty_day);
    fn_userlog ( c_ServiceName, "Cancel Qty is :%ld:",ptr_st_orderbook->l_can_qty);
    fn_userlog ( c_ServiceName, "Expired Qty Is :%ld:",ptr_st_orderbook->l_exprd_qty);
    fn_userlog ( c_ServiceName, "Sprd Ord Rfrnc Is :%s:",ptr_st_orderbook->c_sprd_ord_rfrnc);
    fn_userlog ( c_ServiceName, "Modification Counter Is :%ld:",ptr_st_orderbook->l_mdfctn_cntr);
    fn_userlog ( c_ServiceName, "Settlor Is :%c:",ptr_st_orderbook->c_settlor );
    fn_userlog ( c_ServiceName, "Req Type Is :%c:",ptr_st_orderbook->c_req_typ);
    fn_userlog ( c_ServiceName, "IND/STK :%c:",ptr_st_orderbook->c_ctgry_indstk);
    fn_userlog ( c_ServiceName, "Ack Time Is :%s:",ptr_st_orderbook->c_ack_tm );
    fn_userlog ( c_ServiceName, "Prv Ack Time Is :%s:",ptr_st_orderbook->c_prev_ack_tm );
    fn_userlog ( c_ServiceName, "OUTSIDE c_usr_id :%s:", c_user_id.arr);
  }

	SETNULL(c_user_id);    
  strcpy(c_usr_id,c_user_id.arr);  


  return 0;
}

int fn_snse_to_eba_tkn (long int li_tkn,
                        struct st_contract *ptr_cntrct,
                        char *c_rout_str,
                        char *c_ServiceName,
                        char *c_err_msg )
{
  int i_ch_val;

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Inside Function fn_nse_to_eba_tkn");
  }


  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Token ID Is :%ld:",li_tkn);
  }

  /*** Commented in Ver 2.2 ***
	EXEC SQL
   	SELECT  fcm_xchng_cd,
           	fcm_prdct_typ,
          	fcm_undrlyng,
          	to_char(fcm_expry_dt,'DD-Mon-YYYY'),
           	fcm_exer_typ,
           	fcm_opt_typ,
           	fcm_strk_prc,
           	fcm_ca_lvl,
           	fcm_indstk
   	INTO    :ptr_cntrct->c_xchng_cd,
           	:ptr_cntrct->c_prd_typ,
           	:ptr_cntrct->c_undrlyng,
           	:ptr_cntrct->c_expry_dt,
           	:ptr_cntrct->c_exrc_typ,
           	:ptr_cntrct->c_opt_typ,
           	:ptr_cntrct->l_strike_prc,
           	:ptr_cntrct->l_ca_lvl,
           	:ptr_cntrct->c_ctgry_indstk
   	FROM    fcm_fo_cntrct_mstr
   	WHERE   fcm_token_no  = :li_tkn;

   ***/
  
   /*** Ver 2.2 Starts ***/
   
  EXEC SQL
    SELECT ftq_xchng_cd,
           ftq_prdct_typ,
           ftq_undrlyng,
           to_char(ftq_expry_dt,'DD-Mon-YYYY'),
           ftq_exer_typ,
           ftq_opt_typ,
           ftq_strk_prc,
           ftq_ca_lvl,
           ftq_indstk
      INTO :ptr_cntrct->c_xchng_cd,
           :ptr_cntrct->c_prd_typ,
           :ptr_cntrct->c_undrlyng,
           :ptr_cntrct->c_expry_dt,
           :ptr_cntrct->c_exrc_typ,
           :ptr_cntrct->c_opt_typ,
           :ptr_cntrct->l_strike_prc,
           :ptr_cntrct->l_ca_lvl,
           :ptr_cntrct->c_ctgry_indstk
      FROM ftq_fo_trd_qt     
     WHERE ftq_token_no  = :li_tkn;

   /*** Ver 2.2 Ends   ***/

 	if ( SQLCODE != 0 )
 	{
		fn_errlog ( c_ServiceName, "L31285", LIBMSG, c_err_msg );
 		fn_userlog ( c_ServiceName, "Token id |%ld|", li_tkn );
		return -1;
 	}

 	rtrim( ptr_cntrct->c_xchng_cd);
 	rtrim( ptr_cntrct->c_undrlyng);
 	rtrim( ptr_cntrct->c_expry_dt);

  return 0;
}

int fn_upd_Strdbk  ( char *c_ServiceName, 
                    char *c_err_msg,
                    char *c_usr_id,
										char *c_last_act_ref,			/*** Ver 4.6 ***/
                    struct st_tradebook *ptr_st_i_trdbk)
{

  int i_rec_found = 0;
  long l_stream_no=0;


  if(DEBUG_MSG_LVL_3) /*** Ver 3.1 ***/
	{
		fn_userlog(c_ServiceName,"Inside Function fn_upd_Strdbk.");
	}
  if ( ptr_st_i_trdbk->l_dwnld_flg == DOWNLOAD )
  {
	
      /*** Ver 4.6 starts ***/
    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"INSIDE DOWNLOAD CASE IN fn_upd_Strdbk.");
    }
      l_stream_no=0;

      EXEC SQL
      SELECT nvl(MAX( FXB_STREAM_NO ),0)
      INTO   :l_stream_no
      FROM   FXB_FO_XCHNG_BOOK
      WHERE  FXB_ORDR_RFRNC = :ptr_st_i_trdbk->c_ordr_rfrnc
        AND  FXB_STREAM_NO NOT IN ('-1','99');

      if ( SQLCODE != 0 )
      {
          fn_errlog ( c_ServiceName, "S31210", SQLMSG, c_err_msg );
          tpfree ( ( char * ) ptr_st_i_trdbk );
          return -1;
      }

      ptr_st_i_trdbk->l_ca_lvl=l_stream_no;

      /*** Ver 4.6 ends ***/	
		if(DEBUG_MSG_LVL_3)		/*** ver 1.1 ***/
		{
  		fn_userlog(c_ServiceName,"Jiffy :%lf:",ptr_st_i_trdbk->d_jiffy);
			fn_userlog(c_ServiceName,"Stream Number :%ld:",ptr_st_i_trdbk->l_ca_lvl);
			fn_userlog(c_ServiceName,"Order ack :%s:",ptr_st_i_trdbk-> c_xchng_ack);
		}

    EXEC SQL
      SELECT 1
      INTO  :i_rec_found
      FROM  FTD_FO_TRD_DTLS
      WHERE FTD_JIFFY = :ptr_st_i_trdbk->d_jiffy
      AND   FTD_XCHNG_CD = :ptr_st_i_trdbk->c_xchng_cd
      /** AND   FTD_STREAM_NO = :ptr_st_i_trdbk->l_ca_lvl ** Ver 5.1 **/
      AND   FTD_XCHNG_TRD_NO = :ptr_st_i_trdbk->l_xchng_trd_no /***  Ver 4.2 ***/ 
		  AND   FTD_ORD_ACK_NMBR = :ptr_st_i_trdbk-> c_xchng_ack;	 /***  Ver 1.1 ***/

    if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog(c_ServiceName,"S31215",SQLMSG,c_err_msg );
      tpfree ( ( char * ) ptr_st_i_trdbk );
      return -1;
    }
  }

  if ( i_rec_found == 1 )
  {
    fn_userlog(c_ServiceName,"Record Already Processed.");
    tpfree ( ( char * ) ptr_st_i_trdbk );
    return RECORD_ALREADY_PRCSD;
  }
  else
  {

      /*** Ver 4.6 starts ***/
      l_stream_no=0;

      EXEC SQL
      SELECT nvl(MAX( FXB_STREAM_NO ),0)
      INTO   :l_stream_no
      FROM   FXB_FO_XCHNG_BOOK
      WHERE  FXB_ORDR_RFRNC = :ptr_st_i_trdbk->c_ordr_rfrnc
        AND  FXB_STREAM_NO NOT IN ('-1','99');

      if ( SQLCODE != 0 )
      {
          fn_errlog ( c_ServiceName, "S31220", SQLMSG, c_err_msg );
          tpfree ( ( char * ) ptr_st_i_trdbk );
          return -1;
      }
      
      ptr_st_i_trdbk->l_ca_lvl=l_stream_no;

      if ( l_stream_no == 0 )
      {
        fn_userlog(c_ServiceName,"INSERTING TRADE DETAILS WITH STREAM NO ZERO!!!");
      }
      /*** Ver 4.6 ends ***/

		 EXEC SQL
        INSERT INTO FTD_FO_TRD_DTLS
        (
          FTD_XCHNG_CD,
          FTD_CLM_MTCH_ACCNT,
          FTD_EBA_TRD_REF,
          FTD_ORDR_RFRNC,
          FTD_ORD_ACK_NMBR,
          FTD_XCHNG_TRD_NO,
          FTD_PRDCT_TYP,
          FTD_INDSTK,
          FTD_UNDRLYNG,
          FTD_EXPRY_DT,
          FTD_EXER_TYP,
          FTD_OPT_TYP,
          FTD_STRK_PRC,
          FTD_TRD_DT,
          FTD_TRD_FLW,
          FTD_EXCTD_QTY,
          FTD_EXCTD_RT,
          FTD_RMS_PRCSD_FLG,
          FTD_UPLD_MTCH_FLG,
          FTD_JIFFY,
          FTD_USR_ID,
          FTD_STREAM_NO,
          FTD_INSRT_TM,         /*** Ver 2.9 ***/
					FTD_LST_ACT_REF				/*** Ver 4.6 ***/
        )
        VALUES
        (
          :ptr_st_i_trdbk->c_xchng_cd,
          :ptr_st_i_trdbk->c_cln_mtch_accnt,
          :ptr_st_i_trdbk->c_trd_rfrnc,
          :ptr_st_i_trdbk->c_ordr_rfrnc,
          :ptr_st_i_trdbk->c_xchng_ack,
          :ptr_st_i_trdbk->l_xchng_trd_no,
          :ptr_st_i_trdbk->c_prd_typ,
          :ptr_st_i_trdbk->c_ctgry_indstk,
          :ptr_st_i_trdbk->c_undrlyng,
          to_date ( :ptr_st_i_trdbk->c_expry_dt, 'DD-Mon-yyyy' ),
          :ptr_st_i_trdbk->c_exrc_typ,
          :ptr_st_i_trdbk->c_opt_typ,
          :ptr_st_i_trdbk->l_strike_prc,
          to_date ( :ptr_st_i_trdbk->c_trd_dt, 'DD-Mon-yyyy hh24:mi:ss' ),
          :ptr_st_i_trdbk->c_trd_flw,
          :ptr_st_i_trdbk->l_exctd_qty,
          :ptr_st_i_trdbk->l_exctd_rt,
          'N',
          'N',
          :ptr_st_i_trdbk->d_jiffy,
          :c_usr_id,
          :ptr_st_i_trdbk->l_ca_lvl,
          sysdate,                    /** Ver 2.9 **/
					:c_last_act_ref							/** Ver 4.6 **/
			   );

        if ( SQLCODE != 0 )
        {
          fn_errlog ( c_ServiceName, "S31225", SQLMSG, c_err_msg );
          tpfree ( ( char * ) ptr_st_i_trdbk );
          return -1;
        }
  }

  return 0;
}

int fn_qry_spdbk  ( struct st_spdordbk *ptr_st_spdordbk,
                    char *c_ServiceName,
                    char *c_err_msg)
{

  char  c_errmsg[256];
  int i_cnt;

	if(DEBUG_MSG_LVL_3) /*** Ver 3.1 ****/
	{
		fn_userlog(c_ServiceName,"Inside Function fn_qry_spdbk."); 
	}
  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;             
    short i_ind;
    char c_xchng_ack[ LEN_XCHNG_ACK ]; 
    char c_pipe_id[2+1];
    char c_ordr_rfrnc[18+1];
    varchar c_last_mod_tm[ LEN_DATE ];
    varchar c_ack_tm[ LEN_DATE ];
    char c_sprd_ord_rfrnc[18+1];
    char c_ordr_rfrnc_tmp[18+1];
    char c_sprd_ord_ind;
    char c_xchng_ack_tmp[ LEN_XCHNG_ACK ]; 
    char c_pipe_id_tmp[2+1];
    long int l_mdfctn_cntr;
    long int l_ors_msg_typ;
    long int l_ord_tot_qty;
    long int l_exctd_qty;
    long int l_can_qty;
  EXEC SQL END DECLARE SECTION;

	
	EXEC SQL ALLOCATE :sys_cursor;

	switch( ptr_st_spdordbk->c_rqst_typ[0] )
	{
		case	ACK_TO_ORD	:
			if(DEBUG_MSG_LVL_0)  /*** Ver 3.1 ***/
			{
				fn_userlog(c_ServiceName,"Inside CASE ACK_TO_ORD.");
			}
			strcpy( c_xchng_ack, (char *)ptr_st_spdordbk->c_xchng_ack[0] );
      strcpy( c_pipe_id, (char *)ptr_st_spdordbk->c_pipe_id[0] );

		
			if(DEBUG_MSG_LVL_3) /**** Ver 3.1 ***/
			{
				fn_userlog(c_ServiceName,"ptr_st_spdordbk->c_xchng_ack[0] Is :%s:",ptr_st_spdordbk->c_xchng_ack[0]);
				fn_userlog(c_ServiceName,"ptr_st_spdordbk->c_pipe_id[0] Is :%s:",ptr_st_spdordbk->c_pipe_id[0]);
				fn_userlog(c_ServiceName,"c_xchng_ack Is :%s:",c_xchng_ack);
				fn_userlog(c_ServiceName,"c_pipe_id Is :%s:",c_pipe_id);
			}
      EXEC SQL EXECUTE
        BEGIN
            OPEN :sys_cursor FOR
              SELECT  FSD_SPRD_RFRNC,
                      FSD_ORDR_RFRNC,
                      FSD_SPRD_ORD_IND,
                      NVL(TO_CHAR ( FSD_LST_MOD_TM, 'dd-mon-yyyy hh24:mi:ss' ),'*'),
                      NVL(FSD_ACK_NMBR,' '),
                      FSD_PIPE_ID,
                      FSD_MDFCTN_CNTR,
                      NVL(FSD_ORS_MSG_TYP,0),
                      NVL ( FSD_ORD_QTY, 0 ),
                      NVL ( FSD_EXEC_QTY, 0 ),
                      NVL ( FSD_CNCL_QTY, 0 ),
                      NVL ( TO_CHAR ( FSD_ACK_TM, 'dd-mon-yyyy hh24:mi:ss' ), '*' )
              FROM    FSD_FO_SPRD_DTLS
              WHERE   FSD_ACK_NMBR 	= :c_xchng_ack
              AND     FSD_PIPE_ID 	= :c_pipe_id;
          END;
        END-EXEC;

		break;
	/* New case added by Mahesh  */	
		case ORDREF_TO_SPDREF :
        strcpy( c_ordr_rfrnc, (char *)ptr_st_spdordbk->c_ordr_rfrnc[0] );
        EXEC SQL EXECUTE
          BEGIN
            OPEN :sys_cursor FOR
              SELECT  fsd_sprd_rfrnc,
                      fsd_ordr_rfrnc,
                      fsd_sprd_ord_ind,
                      NVL(to_char(fsd_lst_mod_tm,'dd-mon-yyyy hh24:mi:ss'),'*'),
                      NVL(fsd_ack_nmbr,' '),
                      fsd_pipe_id,
                      fsd_mdfctn_cntr,
                      NVL(fsd_ors_msg_typ,0),
                      NVL ( fsd_ord_qty, 0 ),
                      NVL ( fsd_exec_qty, 0 ),
                      NVL ( fsd_cncl_qty, 0 ),
                      NVL ( to_char(fsd_ack_tm,'dd-mon-yyyy hh24:mi:ss'),'*')
              FROM    fsd_fo_sprd_dtls
              WHERE   fsd_ordr_rfrnc = :c_ordr_rfrnc;
          END;
        END-EXEC;
        break;

		case	SPDREF_TO_ORDREF	:
	
			if(DEBUG_MSG_LVL_0) /*** Ver 3.1 ***/
			{
				fn_userlog(c_ServiceName,"Inside CASE SPDREF_TO_ORDREF.");
			}
			strcpy( c_ordr_rfrnc, (char *)ptr_st_spdordbk->c_sprd_ord_rfrnc[0] );
			
			if(DEBUG_MSG_LVL_3) /*** Ver 3.1 ***/
			{
				fn_userlog(c_ServiceName,"c_ordr_rfrnc |%s|",c_ordr_rfrnc);
			}
      EXEC SQL EXECUTE
        BEGIN
            OPEN :sys_cursor FOR
              SELECT  FSD_SPRD_RFRNC,
                      FSD_ORDR_RFRNC,
                      FSD_SPRD_ORD_IND,
                      NVL(TO_CHAR ( FSD_LST_MOD_TM, 'dd-mon-yyyy hh24:mi:ss' ),'*'),
                      NVL(FSD_ACK_NMBR,' '),
                      FSD_PIPE_ID,
                      FSD_MDFCTN_CNTR,
                      NVL(FSD_ORS_MSG_TYP,0),
                      NVL ( FSD_ORD_QTY, 0 ),
                      NVL ( FSD_EXEC_QTY, 0 ),
                      NVL ( FSD_CNCL_QTY, 0 ),
                      NVL ( TO_CHAR ( FSD_ACK_TM, 'dd-mon-yyyy hh24:mi:ss' ), '*' )
              FROM    FSD_FO_SPRD_DTLS
              WHERE   FSD_SPRD_RFRNC	= :c_ordr_rfrnc
              ORDER BY FSD_ORDR_RFRNC;  
          END;
        END-EXEC;

    break;

		default :

			  strcpy( c_err_msg, "Invalid Operation Type" );
        fn_errlog ( c_ServiceName, "S31230", DEFMSG, c_err_msg );
        EXEC SQL FREE :sys_cursor;
				return -1;
        break;
	}

	if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31235", SQLMSG, c_err_msg );
    EXEC SQL FREE :sys_cursor;
  	return -1;
  }

	for ( i_cnt = 0; i_cnt <= 2; i_cnt++ )
  {
    EXEC SQL  FETCH :sys_cursor
              INTO  :c_sprd_ord_rfrnc,
                    :c_ordr_rfrnc_tmp,
                    :c_sprd_ord_ind,
                    :c_last_mod_tm,
                    :c_xchng_ack_tmp,
                    :c_pipe_id_tmp,
                    :l_mdfctn_cntr,
                    :l_ors_msg_typ,
                    :l_ord_tot_qty,
                    :l_exctd_qty,
                    :l_can_qty,
                    :c_ack_tm;

    if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
				fn_userlog(c_ServiceName,"Inside NO DATA FOUND i_cnt Is :%d:",i_cnt);
        break;
      }

			fn_userlog(c_ServiceName,"i_cnt |%d|",i_cnt);

      fn_errlog ( c_ServiceName, "S31240", SQLMSG, c_err_msg );
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
			return -1;
    }
		
		strcpy( ptr_st_spdordbk->c_sprd_ord_rfrnc[i_cnt],c_sprd_ord_rfrnc);
    strcpy( ptr_st_spdordbk->c_ordr_rfrnc[i_cnt],c_ordr_rfrnc_tmp);
    ptr_st_spdordbk->c_sprd_ord_ind[i_cnt] = c_sprd_ord_ind;
    strcpy( ptr_st_spdordbk->c_xchng_ack[i_cnt], c_xchng_ack_tmp);
    strcpy( ptr_st_spdordbk->c_pipe_id[i_cnt], c_pipe_id_tmp);
    ptr_st_spdordbk->l_mdfctn_cntr[i_cnt] = l_mdfctn_cntr;
    ptr_st_spdordbk->l_ors_msg_typ[i_cnt] = l_ors_msg_typ;
    ptr_st_spdordbk->l_ord_tot_qty[i_cnt] = l_ord_tot_qty;
    ptr_st_spdordbk->l_exctd_qty[i_cnt] 	= l_exctd_qty;
    ptr_st_spdordbk->l_can_qty[i_cnt] 		= l_can_qty;

    SETNULL ( c_last_mod_tm );
    SETNULL ( c_ack_tm );
    if(strcmp((char *)c_last_mod_tm.arr,"*")== 0)
    {
      strcpy ( ptr_st_spdordbk->c_lst_md_tm[i_cnt] ," ");
    }
    else
    {
      strcpy ( ptr_st_spdordbk->c_lst_md_tm[i_cnt] ,( char * ) c_last_mod_tm.arr );
    }
    if(strcmp((char *)c_ack_tm.arr,"*")== 0)
    {
      strcpy ( ptr_st_spdordbk->c_ack_tm[i_cnt] ," ");
    }
    else
    {
      strcpy ( ptr_st_spdordbk->c_ack_tm[i_cnt] ,( char * ) c_ack_tm.arr );
    }

  }

  /***** Commented in Ver 3.2 *********************************************
	if ( i_cnt == 0 )
  {

		fn_userlog(c_ServiceName,"INSIDE i_cnt = 0");
    switch( ptr_st_spdordbk->c_rqst_typ[0] )
    {
      case ACK_TO_ORD :
          EXEC SQL EXECUTE
            BEGIN
              OPEN :sys_cursor FOR
                SELECT  fsd_sprd_rfrnc,
                        fsd_ordr_rfrnc,
                        fsd_sprd_ord_ind,
                        NVL(to_char ( fsd_lst_mod_tm, 'dd-mon-yyyy hh24:mi:ss' ),'*'),
                        NVL(fsd_ack_nmbr,' '),
                        fsd_pipe_id,
                        fsd_mdfctn_cntr,
                        NVL(fsd_ors_msg_typ,0),
                        NVL ( fsd_ord_qty, 0 ),
                        NVL ( fsd_exec_qty, 0 ),
                        NVL ( fsd_cncl_qty, 0 ),
                        NVL (to_char ( fsd_ack_tm, 'dd-mon-yyyy hh24:mi:ss' ), '*' )
                FROM    fsd_fo_sprd_dtls_hstry
                WHERE   fsd_ack_nmbr = :c_xchng_ack
                AND     fsd_pipe_id = :c_pipe_id;
            END;
          END-EXEC;

      break;
		 New case added by Mahesh 
		case ORDREF_TO_SPDREF :
          EXEC SQL EXECUTE
            BEGIN
              OPEN :sys_cursor FOR
                SELECT  fsd_sprd_rfrnc,
                        fsd_ordr_rfrnc,
                        fsd_sprd_ord_ind,
                        NVL(to_char ( fsd_lst_mod_tm, 'dd-mon-yyyy hh24:mi:ss' ),'*'),
                        NVL(fsd_ack_nmbr,' '),
                        fsd_pipe_id,
                        fsd_mdfctn_cntr,
                        NVL(fsd_ors_msg_typ,0),
                        NVL ( fsd_ord_qty, 0 ),
                        NVL ( fsd_exec_qty, 0 ),
                        NVL ( fsd_cncl_qty, 0 ),
                        NVL ( to_char ( fsd_ack_tm, 'dd-mon-yyyy hh24:mi:ss' ), '*' )
                FROM    fsd_fo_sprd_dtls_hstry
                WHERE   fsd_ordr_rfrnc = :c_ordr_rfrnc;
            END;
          END-EXEC;
          break;

		 case SPDREF_TO_ORDREF :

      EXEC SQL EXECUTE
        BEGIN
            OPEN :sys_cursor FOR
              SELECT  fsd_sprd_rfrnc,
                      fsd_ordr_rfrnc,
                      fsd_sprd_ord_ind,
                      NVL(to_char ( fsd_lst_mod_tm, 'dd-mon-yyyy hh24:mi:ss' ),'*'),
                      NVL(fsd_ack_nmbr,' '),
                      fsd_pipe_id,
                      fsd_mdfctn_cntr,
                      NVL(fsd_ors_msg_typ,0),
                      NVL ( fsd_ord_qty, 0 ),
                      NVL ( fsd_exec_qty, 0 ),
                      NVL ( fsd_cncl_qty, 0 ),
                      NVL ( to_char ( fsd_ack_tm, 'dd-mon-yyyy hh24:mi:ss' ), '*' )
              FROM    fsd_fo_sprd_dtls_hstry
              WHERE   fsd_sprd_rfrnc = :c_ordr_rfrnc;
          END;
        END-EXEC;

     break;

      default:
        strcpy( c_err_msg, "Invalid Operation Type" );
        fn_errlog ( c_ServiceName, "S31245", DEFMSG,c_err_msg );
        EXEC SQL FREE :sys_cursor;
				return -1;
        break;
    }

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31250", SQLMSG, c_err_msg );
      EXEC SQL FREE :sys_cursor;
			return -1;
    }

		for ( i_cnt = 0; i_cnt <= 2; i_cnt++ )
    {
      EXEC SQL  FETCH :sys_cursor
                INTO  :ptr_st_spdordbk->c_sprd_ord_rfrnc[i_cnt],
                      :ptr_st_spdordbk->c_ordr_rfrnc[i_cnt],
                      :ptr_st_spdordbk->c_sprd_ord_ind[i_cnt],
                      :c_last_mod_tm,
                      :ptr_st_spdordbk->c_xchng_ack[i_cnt]:i_ind,
                      :ptr_st_spdordbk->c_pipe_id[i_cnt],
                      :ptr_st_spdordbk->l_mdfctn_cntr[i_cnt],
                      :ptr_st_spdordbk->l_ors_msg_typ[i_cnt]:i_ind,
                      :ptr_st_spdordbk->l_ord_tot_qty[i_cnt],
                      :ptr_st_spdordbk->l_exctd_qty[i_cnt],
                      :ptr_st_spdordbk->l_can_qty[i_cnt],
                      :c_ack_tm;

      if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          break;
        }

        fn_errlog ( c_ServiceName, "S31255",SQLMSG, c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
     		return -1;
      }

			SETNULL ( c_last_mod_tm );
      SETNULL ( c_ack_tm );

      if(strcmp((char *)c_last_mod_tm.arr,"*")== 0)
      {
        strcpy ( ptr_st_spdordbk->c_lst_md_tm[i_cnt] ," ");
      }
      else
      {
        strcpy ( ptr_st_spdordbk->c_lst_md_tm[i_cnt] ,( char * ) c_last_mod_tm.arr );
      }
      if(strcmp((char *)c_ack_tm.arr,"*")== 0)
      {
        strcpy ( ptr_st_spdordbk->c_ack_tm[i_cnt] ," ");
      }
      else
      {
        strcpy ( ptr_st_spdordbk->c_ack_tm[i_cnt] ,( char * ) c_ack_tm.arr );
      }
    }

    if ( i_cnt == 0 )
    {
      fn_errlog ( c_ServiceName, "S31260", DEFMSG, c_err_msg );
      EXEC SQL FREE :sys_cursor;
			return -1;
    }
  }

  ******************* Ver 3.2 Ends here **************************/

  /*** Ver 3.2 Starts here ***/
  if ( i_cnt == 0 )
  {
     fn_errlog ( c_ServiceName, "S31265", DEFMSG, c_err_msg );
     fn_userlog(c_ServiceName,"NO data found in Main FSD table");
     EXEC SQL CLOSE :sys_cursor;
     EXEC SQL FREE :sys_cursor;
     return -1;
  }
  /*** ver 3.2 Ends Here ***/


  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

	return	0;
}

/************** Ver 3.0  Starts Here ***************************************/
int fn_spn_spd_acpt(char *c_ServiceName,char *c_ipord_ref,long l_ors_msg_typ )
{
  struct st_spdxchbk st_spd_xchbk;

  char c_xchng_cd[4];
  char c_ordr_rfrnc[19];
  char c_pipe_id[3];
  char c_mod_trd_dt[23];
  char c_slm_flg = '\0';
  char c_valid_dt[23];
  char c_ord_typ = '\0';
  char c_sprd_ord_ind = '\0';
  char c_req_typ = '\0';
  char c_qt_tm[23];
  char c_rqst_tm[23];
  char c_frwrd_tm[23];
  char c_plcd_stts = '\0';
  char c_rms_prcsd_flg = '\0';
  char c_ack_tm[23];
  char c_xchng_rmrks[257];
  char c_ex_ordr_typ ='\0';
  char c_spl_flg1 = '\0';
  char c_ordr_flw = '\0';
  char c_err_msg[256]= "\0";

    long l_ord_seq=0;
		long l_dsclsd_qty=0;
  long l_ord_tot_qty=0;
  long l_ord_lmt_rt=0;
  long l_stp_lss_tgr=0;
  long l_mdfctn_cntr1=0;
  long l_quote=0;
  long l_xchng_can_qty=0;
  long l_bit_flg=0;

  int i_cnt = 0;

  double d_jiffy=0.0;
  long l_fsd_ord_exe_qty = 0;
  int  i_ch_val=0;
  
  sql_cursor     sys_cursor;


  EXEC SQL ALLOCATE :sys_cursor;


        if(DEBUG_MSG_LVL_0) 
        {
          fn_userlog(c_ServiceName, " Inside function fn_spn_spd_acpt********");
  			  fn_userlog(c_ServiceName,"l_ors_msg_typ*****:%ld:",l_ors_msg_typ);
          fn_userlog(c_ServiceName,"c_ipord_ref :%s:",c_ipord_ref); /** ver 4.2 ***/
				}

        EXEC SQL EXECUTE
          BEGIN
            OPEN :sys_cursor FOR
          SELECT  FXB_XCHNG_CD,
                  FXB_ORDR_RFRNC,
                  FXB_PIPE_ID,
                  FXB_MOD_TRD_DT,
                  FXB_ORDR_SQNC,
                  FXB_LMT_MRKT_SL_FLG,
                  FXB_DSCLSD_QTY,
                  FXB_ORDR_TOT_QTY,
                  FXB_LMT_RT,
                  FXB_STP_LSS_TGR,
                  FXB_MDFCTN_CNTR,
                  NVL (to_char(FXB_ORDR_VALID_DT,'dd-Mon-yyyy hh24:mi:ss'), '*' ),
                  FXB_ORDR_TYPE,
                  FXB_SPRD_ORD_IND,
                  FXB_RQST_TYP,
                  FXB_QUOTE,
                  NVL (to_char(FXB_QT_TM,'dd-Mon-yyyy hh24:mi:ss'), '*' ),
                  NVL (to_char(FXB_RQST_TM,'dd-Mon-yyyy hh24:mi:ss'), '*' ),
                  NVL (to_char(FXB_FRWD_TM,'dd-Mon-yyyy hh24:mi:ss'), '*' ),
                  FXB_PLCD_STTS,
                  FXB_RMS_PRCSD_FLG,
                  FXB_ORS_MSG_TYP,
                  NVL (to_char(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'), '*' ),
									FXB_XCHNG_RMRKS,
                  FXB_EX_ORDR_TYP,
                  FXB_SPL_FLAG,
                  FXB_JIFFY,
                  FXB_STREAM_NO,
                  FOD_ORDR_FLW,
                  NVL(FSD_EXEC_QTY,0)
         FROM   FXB_FO_XCHNG_BOOK,FOD_FO_ORDR_DTLS,FSD_FO_SPRD_DTLS
         WHERE  FXB_ORDR_RFRNC = FOD_ORDR_RFRNC
         AND    FXB_ORDR_RFRNC = FSD_ORDR_RFRNC
         AND    FXB_ORS_MSG_TYP =:l_ors_msg_typ
         AND    FSD_SPRD_RFRNC=(SELECT FSD_SPRD_RFRNC
                                  FROM FSD_FO_SPRD_DTLS
                                 WHERE FSD_ORDR_RFRNC =:c_ipord_ref)
                ORDER BY FXB_ORDR_SQNC desc; /** ver 4.2 ***/

          END;
        END-EXEC;

      if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
      {
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        return -1;
      }

      MEMSET(st_spd_xchbk);
      
			 for ( i_cnt = 0; i_cnt <= 2; i_cnt++ )
      {
        
         EXEC SQL  FETCH :sys_cursor
           INTO  :c_xchng_cd,
                          :c_ordr_rfrnc,
                          :c_pipe_id,
                          :c_mod_trd_dt,
                          :l_ord_seq,
                          :c_slm_flg,
                          :l_dsclsd_qty,
                          :l_ord_tot_qty,
                          :l_ord_lmt_rt,
                          :l_stp_lss_tgr,
                          :l_mdfctn_cntr1,
                          :c_valid_dt,
                          :c_ord_typ,
                          :c_sprd_ord_ind,
                          :c_req_typ,
                          :l_quote,
                          :c_qt_tm,
                          :c_rqst_tm,
                          :c_frwrd_tm,
                          :c_plcd_stts,
                          :c_rms_prcsd_flg,
                          :l_ors_msg_typ,
                          :c_ack_tm,
													:c_xchng_rmrks,
                          :c_ex_ordr_typ,
                          :c_spl_flg1,
                          :d_jiffy,
                          :l_bit_flg,
                          :c_ordr_flw,
                          :l_fsd_ord_exe_qty;

          if ( SQLCODE != 0 )
          {
            if ( SQLCODE == NO_DATA_FOUND )
            {
               fn_userlog(c_ServiceName,"Inside BREAK***********");
               break;
            }

            EXEC SQL CLOSE :sys_cursor;
            EXEC SQL FREE :sys_cursor;

						return -1;
          }

          strcpy ( st_spd_xchbk.c_xchng_cd[i_cnt], c_xchng_cd);
          strcpy ( st_spd_xchbk.c_ordr_rfrnc[i_cnt], c_ordr_rfrnc);
          strcpy ( st_spd_xchbk.c_pipe_id[i_cnt], c_pipe_id);
          strcpy ( st_spd_xchbk.c_mod_trd_dt[i_cnt], c_mod_trd_dt);
          st_spd_xchbk.l_ord_seq[i_cnt] = l_ord_seq;
          st_spd_xchbk.c_slm_flg[i_cnt] = c_slm_flg;
          st_spd_xchbk.l_dsclsd_qty[i_cnt] = l_dsclsd_qty;
          st_spd_xchbk.l_ord_tot_qty[i_cnt] =l_ord_tot_qty;
          st_spd_xchbk.l_ord_lmt_rt[i_cnt] = l_ord_lmt_rt;
          st_spd_xchbk.l_stp_lss_tgr[i_cnt] = l_stp_lss_tgr;
          st_spd_xchbk.l_mdfctn_cntr[i_cnt] = l_mdfctn_cntr1;
          strcpy ( st_spd_xchbk.c_valid_dt[i_cnt], c_valid_dt);
					st_spd_xchbk.c_ord_typ[i_cnt] = c_ord_typ;
          st_spd_xchbk.c_sprd_ord_ind[i_cnt] = c_sprd_ord_ind;
          st_spd_xchbk.c_req_typ[i_cnt] = c_req_typ;
          st_spd_xchbk.l_quote[i_cnt] = l_quote;
          strcpy ( st_spd_xchbk.c_qt_tm[i_cnt], c_qt_tm);
          strcpy ( st_spd_xchbk.c_rqst_tm[i_cnt], c_rqst_tm);
          strcpy ( st_spd_xchbk.c_frwrd_tm[i_cnt], c_frwrd_tm);
          st_spd_xchbk.c_plcd_stts[i_cnt] = c_plcd_stts;
          st_spd_xchbk.c_rms_prcsd_flg[i_cnt] = c_rms_prcsd_flg;
          st_spd_xchbk.l_ors_msg_typ[i_cnt] = l_ors_msg_typ;
          strcpy ( st_spd_xchbk.c_ack_tm[i_cnt], c_ack_tm);
          strcpy ( st_spd_xchbk.c_xchng_rmrks[i_cnt], c_xchng_rmrks);
          st_spd_xchbk.c_ex_ordr_typ[i_cnt] = c_ex_ordr_typ;
          st_spd_xchbk.c_spl_flg[i_cnt] = c_spl_flg1;
          st_spd_xchbk.d_jiffy[i_cnt] = d_jiffy;
          st_spd_xchbk.l_bit_flg[i_cnt] = l_bit_flg;
          st_spd_xchbk.c_ordr_flw[i_cnt] = c_ordr_flw;
          st_spd_xchbk.l_xchng_can_qty[i_cnt] = l_fsd_ord_exe_qty;

          st_spd_xchbk.c_oprn_typ[i_cnt] = UPDATION_ON_EXCHANGE_RESPONSE;
          strcpy ( st_spd_xchbk.c_entry_dt_tm[i_cnt],c_ack_tm);
					st_spd_xchbk.l_dwnld_flg[i_cnt] = 20;

          rtrim(st_spd_xchbk.c_entry_dt_tm[i_cnt]);

				if(DEBUG_MSG_LVL_0)
				{
				  fn_userlog(c_ServiceName, "st_spd_xchbk.c_ordr_rfrnc**********:%s:",  st_spd_xchbk.c_ordr_rfrnc[i_cnt]);
				}

				if(DEBUG_MSG_LVL_5) /**** Ver 3.1 ***/
				{
					fn_userlog(c_ServiceName, "st_spd_xchbk.c_xchng_cd************:%s:",  st_spd_xchbk.c_xchng_cd[i_cnt]);
					fn_userlog(c_ServiceName, "st_spd_xchbk.c_pipe_id*************:%s:",  st_spd_xchbk.c_pipe_id[i_cnt]);
					fn_userlog(c_ServiceName, "st_spd_xchbk.c_mod_trd_dt**********:%s:",  st_spd_xchbk.c_mod_trd_dt[i_cnt]);
					fn_userlog(c_ServiceName, "st_spd_xchbk.l_ord_seq*************:%ld:", st_spd_xchbk.l_ord_seq[i_cnt]);
					fn_userlog(c_ServiceName, "st_spd_xchbk.c_slm_flg*************:%c:",  st_spd_xchbk.c_slm_flg[i_cnt]);
					fn_userlog(c_ServiceName, "st_spd_xchbk.l_dsclsd_qty**********:%ld:", st_spd_xchbk.l_dsclsd_qty[i_cnt]);
					fn_userlog(c_ServiceName, "st_spd_xchbk.l_ord_tot_qty*********:%ld:", st_spd_xchbk.l_ord_tot_qty[i_cnt]);
					fn_userlog(c_ServiceName, "st_spd_xchbk.l_ord_lmt_rt**********:%ld:", st_spd_xchbk.l_ord_lmt_rt[i_cnt]);
					fn_userlog(c_ServiceName, "st_spd_xchbk.l_stp_lss_tgr*********:%ld:", st_spd_xchbk.l_stp_lss_tgr[i_cnt]);
					fn_userlog(c_ServiceName, "st_spd_xchbk.l_mdfctn_cntr*********:%ld:", st_spd_xchbk.l_mdfctn_cntr[i_cnt]);
					fn_userlog(c_ServiceName, "st_spd_xchbk.c_valid_dt************:%s:",  st_spd_xchbk.c_valid_dt[i_cnt]);
					fn_userlog(c_ServiceName, "st_spd_xchbk.c_ord_typ*************:%c:",  st_spd_xchbk.c_ord_typ[i_cnt]);
					fn_userlog(c_ServiceName, "st_spd_xchbk.c_sprd_ord_ind********:%c:",  st_spd_xchbk.c_sprd_ord_ind[i_cnt]);
					fn_userlog(c_ServiceName, "st_spd_xchbk.c_req_typ*************:%c:",  st_spd_xchbk.c_req_typ[i_cnt]);
					fn_userlog(c_ServiceName, "st_spd_xchbk.l_quote***************:%ld:", st_spd_xchbk.l_quote[i_cnt]);
					fn_userlog(c_ServiceName, "st_spd_xchbk.c_qt_tm***************:%s:",  st_spd_xchbk.c_qt_tm[i_cnt]);
					fn_userlog(c_ServiceName, "st_spd_xchbk.c_rqst_tm*************:%s:",  st_spd_xchbk.c_rqst_tm[i_cnt]);
					fn_userlog(c_ServiceName, "st_spd_xchbk.c_frwrd_tm************:%s:",  st_spd_xchbk.c_frwrd_tm[i_cnt]);
					fn_userlog(c_ServiceName, "st_spd_xchbk.c_plcd_stts***********:%c:",  st_spd_xchbk.c_plcd_stts[i_cnt]);
					fn_userlog(c_ServiceName, "st_spd_xchbk.c_rms_prcsd_flg*******:%c:",  st_spd_xchbk.c_rms_prcsd_flg[i_cnt]);
					fn_userlog(c_ServiceName, "st_spd_xchbk.l_ors_msg_typ*********:%ld:", st_spd_xchbk.l_ors_msg_typ[i_cnt]);
					fn_userlog(c_ServiceName, "st_spd_xchbk.c_ack_tm**************:%s:",  st_spd_xchbk.c_ack_tm[i_cnt]);
					fn_userlog(c_ServiceName, "st_spd_xchbk.c_entry_dt_tm*********:%s:",  st_spd_xchbk.c_entry_dt_tm[i_cnt]);
				}
			}
      fn_cpy_ddr (st_spd_xchbk.c_rout_crt);

      i_ch_val  = fn_spd_ack  ( &st_spd_xchbk,
                                c_ServiceName,
                                c_err_msg
                              );
      if ( i_ch_val != 0 )
      {
        fn_userlog(c_ServiceName, "[ord_ref-%s] failed",c_ordr_rfrnc);
        return -1;
      }

      return 0;
  }

/******************* Ver 3.0 Ends Here ***************************************************/

int fn_spd_ack  ( struct st_spdxchbk *ptr_st_spdxchbk,
                  char *c_ServiceName,
                  char *c_err_msg
                )
{

	FBFR32 *ptr_fml_Sbuf;
  /*** FBFR32 *ptr_fml_Rbuf; *** ver 4.0 ***/

  int	i_ch_val;
  int i_rec_cnt;
	int	i_trnsctn;
	int i_err[7] = { 0 }; /** SIZE changed in ver 4.2 ***/
	int i_ferr[7] = { 0 };	/** SIZE changed in ver 4.2 ***/
	int	i_returncode;
  int i;
	int j;/* added by Mahesh */

	long l_recvbuf;

	struct st_xchngbook st_xchngbook;
  struct st_orderbook st_i_ordrbk;
	struct vw_xchngbook vw_i_xchngbk;		/*** Ver 1.4 ***/

	ptr_fml_Sbuf  = ( FBFR32 *)NULL;
  /*** ptr_fml_Rbuf  = ( FBFR32 *)NULL; *** Ver 4.0 ***/

	if(DEBUG_MSG_LVL_3) /*** Ver 3.1 ***/
	{
		fn_userlog(c_ServiceName,"SPAN - Insdie Function fn_spd_ack.");
	}
/* Commented by Mahesh
	ptr_fml_Sbuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  if ( ptr_fml_Sbuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31270", TPMSG, c_err_msg  );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		return -1;
  }
*/
  /**** Commented in Ver 4.0 ****************************************
  ptr_fml_Rbuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  if ( ptr_fml_Rbuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31275", TPMSG, c_err_msg  );
    tpfree((char *)ptr_fml_Rbuf);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		return -1;
  }
  ************ Ver 4.0 Comment ends here ***************************/

	fn_init_ddr_val ( ptr_st_spdxchbk->c_rout_crt );

  if ( ( ptr_st_spdxchbk->l_ors_msg_typ[0] == ORS_3LN_ORD_ACPT ) ||
       ( ptr_st_spdxchbk->l_ors_msg_typ[0] == ORS_3LN_ORD_RJCT ) ||
       ( ptr_st_spdxchbk->l_ors_msg_typ[0] == ORS_3L_ORD_CNCL )   )
  {
    i_rec_cnt = 3;
  }
  else
  {
    i_rec_cnt = 2;
  }

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName,"SPAN - Count Is :%d:", i_rec_cnt );
	}

	for ( i = 0; i < i_rec_cnt; i++ )
  {
		/**** Mahesh ***/	
		if(DEBUG_MSG_LVL_3) /*** Ver 3.1 ***/
		{
			fn_userlog(c_ServiceName,"SPAN - Insdie Function fn_spd_ack.");
		}
  	ptr_fml_Sbuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  	if ( ptr_fml_Sbuf == NULL )
  	{
    	fn_errlog( c_ServiceName, "S31280", TPMSG, c_err_msg  );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	return -1;
  	}

    if(DEBUG_MSG_LVL_3) /*** Ver 3.1 *****/
		{
			fn_userlog(c_ServiceName,"i |%d|",i); 
			fn_userlog(c_ServiceName,"IN FOR LOOP.");
		}
    strcpy ( st_i_ordrbk.c_ordr_rfrnc, ptr_st_spdxchbk->c_ordr_rfrnc[i] );

    st_i_ordrbk.c_oprn_typ = FOR_VIEW;

    if( DEBUG_MSG_LVL_3 )
 		{       
      fn_userlog( c_ServiceName, "ptr_st_spdxchbk->c_ordr_rfrnc[i] is :%s:", ptr_st_spdxchbk->c_ordr_rfrnc[i] );
      fn_userlog( c_ServiceName, "st_i_ordrbk.c_ordr_rfrnc is :%s:", st_i_ordrbk.c_ordr_rfrnc );
    }

		i_ch_val = fn_Sref_to_ord ( &st_i_ordrbk,
                                c_ServiceName,
                                c_err_msg
                              );


    if ( i_ch_val != 0 )
    {
      fn_errlog ( c_ServiceName, "S31285", LIBMSG, c_err_msg );
      tpfree((char *)ptr_fml_Sbuf);  /*** Ver 4.0 ***/ 
    	return -1;
    }

		strcpy ( st_xchngbook.c_xchng_cd,ptr_st_spdxchbk->c_xchng_cd[i] );
    strcpy ( st_xchngbook.c_ordr_rfrnc,ptr_st_spdxchbk->c_ordr_rfrnc[i] );
    strcpy ( st_xchngbook.c_pipe_id,ptr_st_spdxchbk->c_pipe_id[i] );
    strcpy ( st_xchngbook.c_mod_trd_dt,ptr_st_spdxchbk->c_mod_trd_dt[i] );
    st_xchngbook.l_ord_seq = ptr_st_spdxchbk->l_ord_seq[i];
    st_xchngbook.c_slm_flg = ptr_st_spdxchbk->c_slm_flg[i];
    st_xchngbook.l_dsclsd_qty = ptr_st_spdxchbk->l_dsclsd_qty[i];
    st_xchngbook.l_ord_tot_qty = ptr_st_spdxchbk->l_ord_tot_qty[i];
    st_xchngbook.l_ord_lmt_rt = ptr_st_spdxchbk->l_ord_lmt_rt[i];
    st_xchngbook.l_stp_lss_tgr = ptr_st_spdxchbk->l_stp_lss_tgr[i];
    st_xchngbook.l_mdfctn_cntr = ptr_st_spdxchbk->l_mdfctn_cntr[i];
    strcpy ( st_xchngbook.c_valid_dt,ptr_st_spdxchbk->c_valid_dt[i] );
    st_xchngbook.c_ord_typ = ptr_st_spdxchbk->c_ord_typ[i];
    st_xchngbook.c_sprd_ord_ind = ptr_st_spdxchbk->c_sprd_ord_ind[i];
    st_xchngbook.c_req_typ = ptr_st_spdxchbk->c_req_typ[i];
    st_xchngbook.l_quote = ptr_st_spdxchbk->l_quote[i];
    strcpy ( st_xchngbook.c_qt_tm,ptr_st_spdxchbk->c_qt_tm[i] );
    strcpy ( st_xchngbook.c_rqst_tm,ptr_st_spdxchbk->c_rqst_tm[i] );
    strcpy ( st_xchngbook.c_frwrd_tm,ptr_st_spdxchbk->c_frwrd_tm[i] );
    st_xchngbook.c_plcd_stts = ptr_st_spdxchbk->c_plcd_stts[i];
    st_xchngbook.c_rms_prcsd_flg = ptr_st_spdxchbk->c_rms_prcsd_flg[i];
    strcpy ( st_xchngbook.c_ack_tm,ptr_st_spdxchbk->c_ack_tm[i] );
    strcpy ( st_xchngbook.c_xchng_rmrks,ptr_st_spdxchbk->c_xchng_rmrks[i] );
    st_xchngbook.c_ex_ordr_typ = ptr_st_spdxchbk->c_ex_ordr_typ[i];
    st_xchngbook.l_xchng_can_qty = ptr_st_spdxchbk->l_xchng_can_qty[i];
    st_xchngbook.l_bit_flg = ptr_st_spdxchbk->l_bit_flg[i];
    st_xchngbook.c_spl_flg = ptr_st_spdxchbk->c_spl_flg[i];
    st_xchngbook.c_ordr_flw = ptr_st_spdxchbk->c_ordr_flw[i];
    st_xchngbook.c_oprn_typ = ptr_st_spdxchbk->c_oprn_typ[i];
    st_xchngbook.d_jiffy = ptr_st_spdxchbk->d_jiffy[i];
    st_xchngbook.l_dwnld_flg = ptr_st_spdxchbk->l_dwnld_flg[i];
    strcpy ( st_xchngbook.c_entry_dt_tm,ptr_st_spdxchbk->c_entry_dt_tm[i] );

		if ( ( ptr_st_spdxchbk->l_ors_msg_typ[i] == ORS_SPN_ORD_ACPT ) ||
         ( ptr_st_spdxchbk->l_ors_msg_typ[i] == ORS_2LN_ORD_ACPT ) ||
         ( ptr_st_spdxchbk->l_ors_msg_typ[i] == ORS_3LN_ORD_ACPT ) )
    {
      st_xchngbook.l_ors_msg_typ = ORS_NEW_ORD_ACPT;
    }
    else if ( ( ptr_st_spdxchbk->l_ors_msg_typ[i] == ORS_SPN_ORD_RJCT ) ||
              ( ptr_st_spdxchbk->l_ors_msg_typ[i] == ORS_2LN_ORD_RJCT ) ||
              ( ptr_st_spdxchbk->l_ors_msg_typ[i] == ORS_3LN_ORD_RJCT ) )
    {
      st_xchngbook.l_ors_msg_typ = ORS_NEW_ORD_RJCT;
    }  /*** Ver 4.2 ****/ 
    else if( ptr_st_spdxchbk->l_ors_msg_typ[i] == ORS_SPRD_MOD_ACPT )
    {
      st_xchngbook.l_ors_msg_typ = ORS_MOD_ORD_ACPT;
    }
    else if( ptr_st_spdxchbk->l_ors_msg_typ[i] == ORS_SPRD_MOD_RJCT )
    {
      st_xchngbook.l_ors_msg_typ = ORS_MOD_ORD_RJCT;
    }
    else if( ptr_st_spdxchbk->l_ors_msg_typ[i] == ORS_SPRD_CAN_RJCT )
    {
      st_xchngbook.l_ors_msg_typ = ORS_CAN_ORD_RJCT;
    }
    else if( ptr_st_spdxchbk->l_ors_msg_typ[i] == ORS_SPRD_CAN_ACPT )
    {
      st_xchngbook.l_ors_msg_typ = ORS_CAN_ORD_ACPT;
    } /** Ver 4.2 Ends Here ***/
    else
    {
      st_xchngbook.l_ors_msg_typ = ptr_st_spdxchbk->l_ors_msg_typ[i];
    }
		
	  fn_cpy_ddr ( st_xchngbook.c_rout_crt );
	
		if(DEBUG_MSG_LVL_3) /*** Ver 3.1 ***/
		{
			fn_userlog( c_ServiceName, "st_xchngbook.c_ordr_rfrnc   |%s|",st_xchngbook.c_ordr_rfrnc);	
		}
		i_err [0] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)st_xchngbook.c_rout_crt,0);
    i_ferr[0] = Ferror32;
    i_err [1] = Fadd32(ptr_fml_Sbuf,FFO_ORDR_RFRNC, (char *)st_xchngbook.c_ordr_rfrnc,0);
    i_ferr[1] = Ferror32;
    i_err [2] = Fadd32(ptr_fml_Sbuf,FFO_ORS_MSG_TYP, (char *)&st_xchngbook.l_ors_msg_typ,0);
    i_ferr[2] = Ferror32;
    i_err [3] = Fadd32(ptr_fml_Sbuf,FFO_MDFCTN_CNTR, (char *)&st_xchngbook.l_mdfctn_cntr,0);
    i_ferr[3] = Ferror32;
    i_err [4] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM, (char *)st_xchngbook.c_ack_tm,0);
    i_ferr[4] = Ferror32;
    i_err [5] = Fadd32(ptr_fml_Sbuf,FFO_PREV_ACK_TM, (char *)st_xchngbook.c_entry_dt_tm,0);
    i_ferr[5] = Ferror32;
    /***** ver 4.2 starts suchita ***/
    if( st_xchngbook.l_ors_msg_typ == ORS_CAN_ORD_ACPT )
    {
     i_err [6] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CAN_QTY, (char *)&st_xchngbook.l_xchng_can_qty,0);
     i_ferr[6] = Ferror32;
     fn_userlog( c_ServiceName,"IN SPAN CANCELLATION ::::: l_xchng_can_qty :%ld:",st_xchngbook.l_xchng_can_qty);
    }
    /*** 4.2 ends ***/
    for (j = 0;j < 7 ;j++)
    {
      if(i_err[j] == -1 )
      {
        fn_userlog( c_ServiceName, "Error in :%d:",j );
        fn_errlog( c_ServiceName, "S31290", Fstrerror32( i_ferr[j]),c_err_msg );
        tpfree((char *)ptr_fml_Sbuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				return -1;
      }
    }

		/*** Ver 1.4 starts ***/
		if (st_i_ordrbk.c_prd_typ == 'P')	
		{
			i_ch_val = Fvftos32( ptr_fml_Sbuf,
										 (char *) &vw_i_xchngbk,
										 "vw_xchngbook" );

			if ( i_ch_val == -1 )
			{
				fn_errlog( c_ServiceName, "S31295", FMLMSG, c_err_msg  );
				tpfree((char *)ptr_fml_Sbuf);
				return -1;
			}

			i_ch_val = fn_acall_svc ( c_ServiceName,
																c_err_msg,
																&vw_i_xchngbk,
																"vw_xchngbook",
																sizeof ( vw_i_xchngbk ),
																TPNOREPLY,
	  														"SFO_FUT_ACK" );
		}
		else
		{
		/*** Ver 1.4 ends ***/
			/*********** Commented in Ver 3.0 ***
			i_returncode = tpcall("SFO_PRCS_RSP",( char *)ptr_fml_Sbuf,0,( char **)&ptr_fml_Rbuf,&l_recvbuf,0 ); ***/
			/****** Added in Ver 3.0 **************/
			i_ch_val  = tpacall ( "SFO_PRCS_RSP", (char *)ptr_fml_Sbuf,0, TPNOTRAN|TPNOREPLY);
			/******* Ver 3.0 Ends *******/
		} /*** Ver 1.4 ***/

    /** if ( i_returncode != SUCC_BFR ) ** commented in ver 4.2 ***/
    if ( i_ch_val != SUCC_BFR ) /*** ver 4.2 ***/
    {
      fn_errlog( c_ServiceName, "S31300",TPMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpfree((char*)ptr_fml_Sbuf);
			return -1;
    }
		if(DEBUG_MSG_LVL_3) /*** Ver 3.1 ***/
		{
			fn_userlog( c_ServiceName,"After Call SFO_PRCS_RSP i_rec_cnt |%d|",i_rec_cnt);
			fn_userlog(c_ServiceName,"After SFO_PRCS_RSP i |%d|",i); 
		}
		tpfree((char*)ptr_fml_Sbuf);
	}

	return 0;
}
/*** Added function in Ver 3.7 Starts  ***/

int fn_fxb_rms (    char *c_ServiceName,
                    char *c_err_msg,
                    char c_prd_typ,
                    char *c_ordr_rfrnc)
{
    int i = 0;
    int i_ferr[7];
    int i_xchngbkerr[7];
    int i_returncode = 0;
    int i_status = 0;
    char c_spn_flg = '\0';
    char c_sltp_ord_rfrnc[19];
    /**** long l_ftd_ord_exe_qty= 0;   ***** Commented in ver 3.9 ******/
    struct vw_xchngbook st_cvr_xchngbk;

    FBFR32 *ptr_fml_Sbuf;
    ptr_fml_Sbuf  = ( FBFR32 *)NULL;
    MEMSET(st_cvr_xchngbk);

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName," c_ordr_rfrnc is :%s:",c_ordr_rfrnc ) ;
    	fn_userlog(c_ServiceName," c_prd_typ is :%c:",c_prd_typ ) ;
		}
    EXEC SQL
    SELECT
         FXB_ORS_MSG_TYP,
         FXB_MDFCTN_CNTR,
         nvl(to_char(FXB_ACK_TM, 'dd-mon-yyyy hh24:mi:ss'),'*'),
				 NVL(FXB_XCHNG_CNCLD_QTY, 0)																		/***** Ver 3.9 ****/
  INTO   :st_cvr_xchngbk.l_ors_msg_typ,
         :st_cvr_xchngbk.l_mdfctn_cntr,
         :st_cvr_xchngbk.c_ack_tm,
				 :st_cvr_xchngbk.l_xchng_can_qty                                 /***** Ver 3.9 ****/
    FROM FXB_FO_XCHNG_BOOK
    WHERE FXB_ORDR_RFRNC = :c_ordr_rfrnc
    AND   FXB_MDFCTN_CNTR =
                          ( SELECT min(FXB_MDFCTN_CNTR)
                            FROM   FXB_FO_XCHNG_BOOK
                            WHERE  FXB_ORDR_RFRNC =   :c_ordr_rfrnc
                            AND    FXB_JIFFY =
                                              (select min(FXB_JIFFY)
                                               from   FXB_FO_XCHNG_BOOK
                                               where  FXB_ORDR_RFRNC = :c_ordr_rfrnc
                                               AND    FXB_RMS_PRCSD_FLG = 'N')
                             AND    FXB_RMS_PRCSD_FLG = 'N'
                           )
    AND    FXB_RMS_PRCSD_FLG = 'N';
    
    if(SQLCODE != 0 && SQLCODE !=  NO_DATA_FOUND )
    {
       fn_errlog(c_ServiceName, "L31290", SQLMSG,  c_err_msg);
       return -1;
    }
    else if( SQLCODE ==  NO_DATA_FOUND )
    {
       fn_userlog( c_ServiceName, "No unprocessed fresh record checking for cover");

     if(c_prd_typ == 'U' || c_prd_typ == 'I')
     {

      EXEC SQL
      SELECT
        fod_sltp_ordr_rfrnc,
        FOD_PRDCT_TYP
      INTO
          :c_sltp_ord_rfrnc,
          :c_prd_typ
      FROM  FOD_FO_ORDR_DTLS
      WHERE fod_ordr_rfrnc =:c_ordr_rfrnc;

      if(SQLCODE !=0)
      {
        fn_errlog ( c_ServiceName, "L31295", SQLMSG, c_err_msg );
        return -1;
      }

      EXEC SQL
      SELECT
           FXB_ORS_MSG_TYP,
           FXB_MDFCTN_CNTR,
           nvl(to_char(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'),'-'),
					 NVL(FXB_XCHNG_CNCLD_QTY, 0)                                    /***** Ver 3.9 ****/
    INTO   :st_cvr_xchngbk.l_ors_msg_typ,
           :st_cvr_xchngbk.l_mdfctn_cntr,
           :st_cvr_xchngbk.c_ack_tm,
         	 :st_cvr_xchngbk.l_xchng_can_qty                                 /***** Ver 3.9 ****/
      FROM FXB_FO_XCHNG_BOOK
      WHERE FXB_ORDR_RFRNC = :c_sltp_ord_rfrnc
      AND   FXB_MDFCTN_CNTR =
                          ( SELECT min(FXB_MDFCTN_CNTR)
                            FROM   FXB_FO_XCHNG_BOOK
                            WHERE  FXB_ORDR_RFRNC =   :c_sltp_ord_rfrnc
                            AND    FXB_JIFFY =
                                              (select min(FXB_JIFFY)
					                                                     from   FXB_FO_XCHNG_BOOK
                                               where  FXB_ORDR_RFRNC = :c_sltp_ord_rfrnc
                                               AND    FXB_RMS_PRCSD_FLG = 'N')
                             AND    FXB_RMS_PRCSD_FLG = 'N'
                           )
      AND    FXB_RMS_PRCSD_FLG = 'N';

    if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND)
    {
        fn_errlog(c_ServiceName, "L31300", SQLMSG, c_err_msg);
        return -1 ;
    }
    if(SQLCODE == NO_DATA_FOUND )
    {
        fn_userlog( c_ServiceName, "No unprocessed cover record ");
        return 0 ;
    }
    else
    {
        i_status = 1;
       fn_userlog( c_ServiceName, "unprocessed cover record so process it");
      strcpy(st_cvr_xchngbk.c_ordr_rfrnc,c_sltp_ord_rfrnc) ;
    }
   }
  }
  else
  {
    i_status = 1;
    strcpy(st_cvr_xchngbk.c_ordr_rfrnc, c_ordr_rfrnc);
  }
  if(i_status == 1)
  {
      if(DEBUG_MSG_LVL_0)
      {
				fn_userlog( c_ServiceName, "Before Calling  Ack processing for Order Ref:%s:", st_cvr_xchngbk.c_ordr_rfrnc);
      }

      fn_cpy_ddr ( st_cvr_xchngbk.c_rout_crt );
  		strcpy(st_cvr_xchngbk.c_entry_dt_tm , st_cvr_xchngbk.c_ack_tm);
      st_cvr_xchngbk.d_jiffy       = 0;
      st_cvr_xchngbk.l_dwnld_flg   = 0;
      strcpy(st_cvr_xchngbk.c_xchng_rmrks,"*");

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog( c_ServiceName, "st_cvr_xchngbk.c_entry_dt_tm:%s:", st_cvr_xchngbk.c_entry_dt_tm);
        fn_userlog( c_ServiceName, "st_cvr_xchngbk.c_ack_tm:%s:", st_cvr_xchngbk.c_ack_tm);
        fn_userlog( c_ServiceName, "st_cvr_xchngbk.l_mdfctn_cntr:%ld:", st_cvr_xchngbk.l_mdfctn_cntr);
        fn_userlog( c_ServiceName, "st_cvr_xchngbk.l_ors_msg_typ:%ld:", st_cvr_xchngbk.l_ors_msg_typ);
      }

  EXEC SQL
  SELECT  NVL(FOD_SPN_FLG,'N')
  INTO    :c_spn_flg
  FROM    FOD_FO_ORDR_DTLS
  where FOD_ORDR_RFRNC =:st_cvr_xchngbk.c_ordr_rfrnc;
  if ( SQLCODE != 0 )
  {
     fn_userlog(c_ServiceName,"Error While Selecting Span Flag.");
     fn_errlog(c_ServiceName, "L31305", SQLMSG,  c_err_msg);
     return -1;
  }

  if(DEBUG_MSG_LVL_3)
  {
     fn_userlog( c_ServiceName, "st_cvr_xchngbk.c_entry_dt_tm:%s:", st_cvr_xchngbk.c_entry_dt_tm);
     fn_userlog( c_ServiceName, "st_cvr_xchngbk.l_mdfctn_cntrm:%ld:", st_cvr_xchngbk.l_mdfctn_cntr);
     fn_userlog( c_ServiceName, "st_cvr_xchngbk.l_ors_msg_typ:%ld:", st_cvr_xchngbk.l_ors_msg_typ);
  }

	/********* Commented in ver 3.9 ************

  EXEC SQL
  SELECT  NVL(SUM(ftd_exctd_qty),0)
  INTO    :l_ftd_ord_exe_qty
  FROM    ftd_fo_trd_dtls
  WHERE   ftd_ordr_rfrnc = :st_cvr_xchngbk.c_ordr_rfrnc;

  if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
   fn_errlog ( c_ServiceName, "L31310", SQLMSG, c_err_msg );
   fn_userlog(c_ServiceName,"Error While Selecting executed qty .");
   return -1;
  }

  if( DEBUG_MSG_LVL_3 ) 
  {
     fn_userlog( c_ServiceName, "l_ftd_ord_exe_qty: %ld",l_ftd_ord_exe_qty);
  }

  st_cvr_xchngbk.l_xchng_can_qty = l_ftd_ord_exe_qty;

  *********** Commented in ver 3.9 ************/

  if ( c_spn_flg == 'N' || ( c_spn_flg == 'S'  && c_prd_typ == 'P' ) )
  {
    if( DEBUG_MSG_LVL_0 ) 
    {
       fn_userlog( c_ServiceName, "unprocessed record exist so process it...");
    }

   st_cvr_xchngbk.d_jiffy       = 0;
   st_cvr_xchngbk.l_dwnld_flg   = 0;
   strcpy(st_cvr_xchngbk.c_xchng_rmrks,"*");

   if(c_prd_typ =='I' || c_prd_typ =='O')
   {
         i_returncode = fn_acall_svc ( c_ServiceName,
                                       c_err_msg,
                                       &st_cvr_xchngbk,
                                       "vw_xchngbook",
                                       sizeof ( st_cvr_xchngbk),
                                       TPNOREPLY,
                                       "SFO_OPT_ACK" );
     if ( i_returncode != 0 )
     {
         fn_userlog( c_ServiceName, "Error while calling SFO_OPT_ACK");
         fn_errlog( c_ServiceName, "L31315",LIBMSG, c_err_msg);
         return -1 ;

     }


    }
    else if(c_prd_typ =='U' || c_prd_typ =='P' || c_prd_typ =='F' )
    {
     i_returncode = fn_acall_svc ( c_ServiceName,
                                   c_err_msg,
                                   &st_cvr_xchngbk,
                                   "vw_xchngbook",
                                   sizeof ( st_cvr_xchngbk),
                                   TPNOREPLY,
                                   "SFO_FUT_ACK" );

      if ( i_returncode != 0 )
      {
              fn_userlog( c_ServiceName, "Error while calling SFO_FUT_ACK");
              fn_errlog( c_ServiceName, "L31320", LIBMSG, c_err_msg);
              return -1 ;

      }

    }
  }
  else if ( c_spn_flg == 'S'  &&  c_prd_typ != 'P' )
  {
     ptr_fml_Sbuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

       if ( ptr_fml_Sbuf == NULL )
       {
        fn_userlog(c_ServiceName,"ptr_fml_Sbuf is NULL ");
        fn_errlog(c_ServiceName, "L31325", TPMSG,  c_err_msg);
        return -1;
       }

        i_xchngbkerr [0] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)st_cvr_xchngbk.c_rout_crt,0);
        i_ferr[0] = Ferror32;
        i_xchngbkerr [1] = Fadd32(ptr_fml_Sbuf,FFO_ORDR_RFRNC, (char *)st_cvr_xchngbk.c_ordr_rfrnc ,0);
        i_ferr[1] = Ferror32;
        i_xchngbkerr [2] = Fadd32(ptr_fml_Sbuf,FFO_ORS_MSG_TYP, (char *)&st_cvr_xchngbk.l_ors_msg_typ,0);
        i_ferr[2] = Ferror32;
        i_xchngbkerr [3] = Fadd32(ptr_fml_Sbuf,FFO_MDFCTN_CNTR, (char *)&st_cvr_xchngbk.l_mdfctn_cntr,0);
        i_ferr[3] = Ferror32;
        i_xchngbkerr [4] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM, (char *)st_cvr_xchngbk.c_ack_tm,0);
        i_ferr[4] = Ferror32;
        i_xchngbkerr [5] = Fadd32(ptr_fml_Sbuf,FFO_PREV_ACK_TM, (char *)st_cvr_xchngbk.c_entry_dt_tm,0);
	        i_ferr[5] = Ferror32;
        i_xchngbkerr [6] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CAN_QTY , (char *)&st_cvr_xchngbk.l_xchng_can_qty,0);
        i_ferr[6] = Ferror32;

        for (i = 0;i < 6 ;i++)
        {
          if(i_xchngbkerr[i] == -1 )
          {
            fn_userlog( c_ServiceName, "Error in :%d:",i );
            tpfree((char *)ptr_fml_Sbuf);
            fn_errlog(c_ServiceName, "L31330", FMLMSG,  c_err_msg);
            return -1;
          }
        }

        i_returncode  = tpacall ( "SFO_PRCS_RSP", (char *)ptr_fml_Sbuf,0, TPNOTRAN|TPNOREPLY);

        if ( i_returncode != SUCC_BFR )
        {
          fn_userlog( c_ServiceName, "Error while calling SFO_PRCS_RSP");
          fn_errlog ( c_ServiceName, "L31335", LIBMSG, c_err_msg );
          tpfree((char *)ptr_fml_Sbuf); 
          return -1;
        }

        tpfree((char *)ptr_fml_Sbuf);  /** Ver 4.0 ***/  
		 }
   }
	 return 0;
}
int fn_ftd_rms  (char *c_ServiceName,
                    char *c_err_msg,
                    char c_prd_typ,
                    char *c_ordr_rfrnc)
{
    int i = 0;
		int i_err[18];
    int i_ferr[18];
    int i_returncode = 0;
    char c_spn_flg = '\0';
    char c_sltp_ord_rfrnc[19];
    struct vw_tradebook st_tradebook;
    short int si_null;

    FBFR32 *ptr_fml_Sbuf;
    ptr_fml_Sbuf  = ( FBFR32 *)NULL;
		MEMSET(st_tradebook);
		MEMSET(i_ferr);
		MEMSET(i_err);

	  EXEC SQL
    SELECT  NVL(FOD_SPN_FLG,'N')
    INTO    :c_spn_flg
    FROM    FOD_FO_ORDR_DTLS
    where FOD_ORDR_RFRNC =:c_ordr_rfrnc;

    if ( SQLCODE != 0 )
    {
       fn_userlog(c_ServiceName,"Error While Selecting Span Flag.");
       fn_errlog(c_ServiceName, "L31340", SQLMSG,  c_err_msg);
       return -1;
    }

 		if(c_prd_typ =='U' || c_prd_typ =='I')
 		{

 		 EXEC SQL
      SELECT
        fod_sltp_ordr_rfrnc
      INTO
        :c_sltp_ord_rfrnc
      FROM  FOD_FO_ORDR_DTLS
      WHERE fod_ordr_rfrnc = :c_ordr_rfrnc;
    	if(SQLCODE !=0)
    	{
      	fn_errlog ( c_ServiceName, "L31345", SQLMSG, c_err_msg );
      	return -1;
    	}

			EXEC SQL
    	SELECT  ftd_clm_mtch_accnt,
              ftd_xchng_cd,
              ftd_prdct_typ,
              ftd_indstk,
              ftd_undrlyng,
              to_char(ftd_expry_dt,'DD-Mon-YYYY'),
              ftd_exer_typ,
              ftd_opt_typ,
              ftd_strk_prc,
              ftd_ordr_rfrnc,
              ftd_eba_trd_ref,
              ftd_ord_ack_nmbr,
              ftd_xchng_trd_no,
              to_char(ftd_trd_dt,'DD-Mon-YYYY hh24:mi:ss'),
              ftd_trnsctn_typ,
              ftd_trd_flw,
              ftd_exctd_qty,
              ftd_exctd_rt
        INTO  :st_tradebook.c_cln_mtch_accnt,
              :st_tradebook.c_xchng_cd,
              :st_tradebook.c_prd_typ,
              :st_tradebook.c_ctgry_indstk,
              :st_tradebook.c_undrlyng,
              :st_tradebook.c_expry_dt,
              :st_tradebook.c_exrc_typ,
              :st_tradebook.c_opt_typ,
              :st_tradebook.l_strike_prc,
              :st_tradebook.c_ordr_rfrnc,
              :st_tradebook.c_trd_rfrnc,
              :st_tradebook.c_xchng_ack,
              :st_tradebook.l_xchng_trd_no,
              :st_tradebook.c_trd_dt,
              :st_tradebook.c_trnsctn_typ:si_null,
              :st_tradebook.c_trd_flw,
              :st_tradebook.l_exctd_qty,
              :st_tradebook.l_exctd_rt
      FROM    ftd_fo_trd_dtls
      WHERE   ftd_ordr_rfrnc IN(:c_ordr_rfrnc,:c_sltp_ord_rfrnc)
      AND     ftd_rms_prcsd_flg = 'N'
      AND     ROWNUM < 2
      ORDER   BY FTD_TRD_DT;

    if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog ( c_ServiceName, "L31350", SQLMSG, c_err_msg );
      return -1;
    }
    if( SQLCODE != NO_DATA_FOUND )
    {
      rtrim(st_tradebook.c_trd_dt);

      fn_cpy_ddr ( st_tradebook.c_rout_crt );

     if(DEBUG_MSG_LVL_3)   
     {
				fn_userlog( c_ServiceName, "Calling Trade service");
     }
     if( c_spn_flg == 'N')
     {
      if(c_prd_typ =='U' )
      {
        i_returncode = fn_acall_svc( c_ServiceName,
                                     c_err_msg,
                                    &st_tradebook,
                                    "vw_tradebook",
                                    sizeof( struct vw_tradebook),
                                    TPNOREPLY,
                                    "SFO_FUT_TCONF" );
       	 if ( i_returncode != SUCC_BFR )
       	 {
           fn_errlog ( c_ServiceName, "L31355", LIBMSG, c_err_msg );
           return -1;
	     	 }
      }
      else if(c_prd_typ =='I' )
      {
       i_returncode = fn_acall_svc( c_ServiceName,
                      c_err_msg,
                      &st_tradebook,
                      "vw_tradebook",
                      sizeof( struct vw_tradebook),
                      TPNOREPLY,
                      "SFO_OPT_TCONF" );

 		       if ( i_returncode != SUCC_BFR )
    		   {
        		  fn_errlog ( c_ServiceName, "L31360", LIBMSG, c_err_msg );
          		return -1;
        	 }
       	}
      }
			else if( c_spn_flg == 'S')
      {
        ptr_fml_Sbuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

        if ( ptr_fml_Sbuf == NULL )
        {
           fn_userlog(c_ServiceName,"ptr_fml_Sbuf is NULL ");
           fn_errlog(c_ServiceName, "L31365", TPMSG,  c_err_msg);
           return -1;
        }

        i_err   [ 0 ]     = Fadd32( ptr_fml_Sbuf ,FFO_ROUT_CRT,(char *) st_tradebook.c_rout_crt,0);
        i_ferr  [ 0 ]     = Ferror32;
        i_err   [ 1 ]     = Fadd32( ptr_fml_Sbuf ,FFO_ORDR_RFRNC,(char *) st_tradebook.c_ordr_rfrnc,0);
        i_ferr  [ 1 ]     = Ferror32;
        i_err   [ 2 ]     = Fadd32( ptr_fml_Sbuf ,FFO_TRD_RFRNC,(char *) st_tradebook.c_trd_rfrnc,0);
        i_ferr  [ 2 ]     = Ferror32;
        i_err   [ 3 ]     = Fadd32( ptr_fml_Sbuf ,FFO_EBA_MTCH_ACT_NO,(char *) st_tradebook.c_cln_mtch_accnt,0);
        i_ferr  [ 3 ]     = Ferror32;
        i_err   [ 4 ]     = Fadd32( ptr_fml_Sbuf ,FFO_EBA_CNTRCT_ID,(char *) &st_tradebook.l_eba_cntrct_id,0);
        i_ferr  [ 4 ]     = Ferror32;
        i_err   [ 5 ]     = Fadd32( ptr_fml_Sbuf ,FFO_XCHNG_CD,(char *) st_tradebook.c_xchng_cd,0);
        i_ferr  [ 5 ]     = Ferror32;
        i_err   [ 6 ]     = Fadd32( ptr_fml_Sbuf ,FFO_PRDCT_TYP,(char *) &st_tradebook.c_prd_typ,0);
        i_ferr  [ 6 ]     = Ferror32;
        i_err   [ 7 ]     = Fadd32( ptr_fml_Sbuf ,FFO_UNDRLYNG,(char *) st_tradebook.c_undrlyng,0);
        i_ferr  [ 7 ]     = Ferror32;
        i_err   [ 8 ]     = Fadd32( ptr_fml_Sbuf ,FFO_EXPRY_DT,(char *) st_tradebook.c_expry_dt,0);
        i_ferr  [ 8 ]     = Ferror32;
        i_err   [ 9 ]     = Fadd32( ptr_fml_Sbuf ,FFO_EXER_TYP,(char *) &st_tradebook.c_exrc_typ,0);
        i_ferr  [ 9 ]     = Ferror32;
        i_err   [ 10  ]   = Fadd32( ptr_fml_Sbuf  ,FFO_OPT_TYP,(char *) &st_tradebook.c_opt_typ,0);
        i_ferr  [ 10  ]   = Ferror32;
        i_err   [ 11  ]   = Fadd32( ptr_fml_Sbuf ,FFO_STRK_PRC,(char *) &st_tradebook.l_strike_prc,0);
        i_ferr  [ 11  ]   = Ferror32;
        i_err   [ 12  ]   = Fadd32( ptr_fml_Sbuf ,FFO_CTGRY_INDSTK,(char *) &st_tradebook.c_ctgry_indstk,0);
        i_ferr  [ 12  ]   = Ferror32;
        i_err   [ 13  ]   = Fadd32( ptr_fml_Sbuf  ,FFO_CA_LVL,(char *) &st_tradebook.l_ca_lvl,0);
        i_ferr  [ 13  ]   = Ferror32;
        i_err   [ 14  ]   = Fadd32( ptr_fml_Sbuf ,FFO_TRD_FLW,(char *) &st_tradebook.c_trd_flw,0);
        i_ferr  [ 14  ]   = Ferror32;
        i_err   [ 15  ]   = Fadd32( ptr_fml_Sbuf ,FFO_EXEC_QTY,(char *) &st_tradebook.l_exctd_qty,0);
        i_ferr  [ 15  ]   = Ferror32;
        i_err   [ 16  ]   = Fadd32( ptr_fml_Sbuf  ,FFO_EXCTD_RT,(char *) &st_tradebook.l_exctd_rt,0);
	      i_ferr  [ 16  ]   = Ferror32;
        i_err   [ 17  ]   = Fadd32( ptr_fml_Sbuf ,FFO_TRD_DT,(char *) st_tradebook.c_trd_dt,0);
        i_ferr  [ 17  ]   = Ferror32;

        for ( i=0 ; i < 18 ;  i++ )
        {
           if ( (i_err[ i ] == -1 ) && (i_ferr[ i ]  != FNOTPRES ) )
           {
             fn_userlog( c_ServiceName, "Error in :%d:",i );
             fn_errlog( c_ServiceName, "L31370", Fstrerror32( i_ferr[i]),c_err_msg );
          	 tpfree((char *)ptr_fml_Sbuf);
             Fadd32( ptr_fml_Sbuf, FFO_ERR_MSG,c_err_msg, 0 );
             return -1;
           }
        }

        i_returncode = tpacall ( "SFO_PRCS_TRD", (char *)ptr_fml_Sbuf,0, TPNOTRAN|TPNOREPLY);

        if ( i_returncode != SUCC_BFR )
        {
          fn_errlog ( c_ServiceName, "L31375", LIBMSG, c_err_msg );
          tpfree((char *)ptr_fml_Sbuf);
          return -1;
        }

        tpfree((char *)ptr_fml_Sbuf);  /** Ver 4.0 ***/ 
      }
    }
 }
 else if(c_prd_typ =='F' || c_prd_typ =='O' || c_prd_typ =='P' )
 {
    EXEC SQL
    SELECT  ftd_clm_mtch_accnt,
              ftd_xchng_cd,
              ftd_prdct_typ,
              ftd_indstk,
              ftd_undrlyng,
              to_char(ftd_expry_dt,'DD-Mon-YYYY'),
              ftd_exer_typ,
              ftd_opt_typ,
              ftd_strk_prc,
              ftd_ordr_rfrnc,
              ftd_eba_trd_ref,
              ftd_ord_ack_nmbr,
              ftd_xchng_trd_no,
              to_char(ftd_trd_dt,'DD-Mon-YYYY hh24:mi:ss'),
              ftd_trnsctn_typ,
              ftd_trd_flw,
              ftd_exctd_qty,
              ftd_exctd_rt
          INTO  :st_tradebook.c_cln_mtch_accnt,
              :st_tradebook.c_xchng_cd,
              :st_tradebook.c_prd_typ,
              :st_tradebook.c_ctgry_indstk,
              :st_tradebook.c_undrlyng,
              :st_tradebook.c_expry_dt,
              :st_tradebook.c_exrc_typ,
              :st_tradebook.c_opt_typ,
              :st_tradebook.l_strike_prc,
              :st_tradebook.c_ordr_rfrnc,
              :st_tradebook.c_trd_rfrnc,
              :st_tradebook.c_xchng_ack,
              :st_tradebook.l_xchng_trd_no,
              :st_tradebook.c_trd_dt,
              :st_tradebook.c_trnsctn_typ:si_null,
              :st_tradebook.c_trd_flw,
              :st_tradebook.l_exctd_qty,
              :st_tradebook.l_exctd_rt
      FROM    ftd_fo_trd_dtls
      WHERE   ftd_ordr_rfrnc = :c_ordr_rfrnc
      AND     ftd_rms_prcsd_flg = 'N'
      AND     ROWNUM < 2
      ORDER   BY FTD_TRD_DT;

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND  )
    {
       fn_errlog(c_ServiceName, "L31380", SQLMSG,  c_err_msg);
				 return -1;
    }

   if( SQLCODE != NO_DATA_FOUND )
   {
     rtrim(st_tradebook.c_trd_dt);
     fn_cpy_ddr ( st_tradebook.c_rout_crt );

     if(DEBUG_MSG_LVL_3)
     {
					fn_userlog( c_ServiceName, "Calling Trade service");
     }
     if( c_spn_flg == 'N' || ( c_spn_flg == 'S' && c_prd_typ =='P' ) )
     {
      if(c_prd_typ =='F' || c_prd_typ =='P' )
      {

       i_returncode = fn_acall_svc( c_ServiceName,
                           c_err_msg,
                           &st_tradebook,
                           "vw_tradebook",
                           sizeof( struct vw_tradebook),
                           TPNOREPLY,
                           "SFO_FUT_TCONF" );


     
        if ( i_returncode != SUCC_BFR )
        {
           fn_errlog ( c_ServiceName, "L31385", LIBMSG, c_err_msg );
           return -1;
        }
      }
      else if(c_prd_typ =='O' )
      {

       i_returncode = fn_acall_svc( c_ServiceName,
                      c_err_msg,
                      &st_tradebook,
                      "vw_tradebook",
                      sizeof( struct vw_tradebook),
                      TPNOREPLY,
                      "SFO_OPT_TCONF" );

         if ( i_returncode != SUCC_BFR )
         {
          fn_errlog ( c_ServiceName, "L31390", LIBMSG, c_err_msg );
          return -1;
         }
       }
      }
      else if( c_spn_flg == 'S' && c_prd_typ !='P' )
      {
         ptr_fml_Sbuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

         if ( ptr_fml_Sbuf == NULL )
         {
              fn_userlog(c_ServiceName,"ptr_fml_Sbuf is NULL ");
              fn_errlog(c_ServiceName, "L31395", TPMSG,  c_err_msg);
              return -1;
         }

            i_err   [ 0 ]     = Fadd32( ptr_fml_Sbuf ,FFO_ROUT_CRT,(char *) st_tradebook.c_rout_crt,0);
            i_ferr  [ 0 ]     = Ferror32;
            i_err   [ 1 ]     = Fadd32( ptr_fml_Sbuf ,FFO_ORDR_RFRNC,(char *) st_tradebook.c_ordr_rfrnc,0);
            i_ferr  [ 1 ]     = Ferror32;
            i_err   [ 2 ]     = Fadd32( ptr_fml_Sbuf ,FFO_TRD_RFRNC,(char *) st_tradebook.c_trd_rfrnc,0);
            i_ferr  [ 2 ]     = Ferror32;
            i_err   [ 3 ]     = Fadd32( ptr_fml_Sbuf ,FFO_EBA_MTCH_ACT_NO,(char *) st_tradebook.c_cln_mtch_accnt,0);
            i_ferr  [ 3 ]     = Ferror32;
            i_err   [ 4 ]     = Fadd32( ptr_fml_Sbuf ,FFO_EBA_CNTRCT_ID,(char *) &st_tradebook.l_eba_cntrct_id,0);
            i_ferr  [ 4 ]     = Ferror32;
            i_err   [ 5 ]     = Fadd32( ptr_fml_Sbuf ,FFO_XCHNG_CD,(char *) st_tradebook.c_xchng_cd,0);
            i_ferr  [ 5 ]     = Ferror32;
            i_err   [ 6 ]     = Fadd32( ptr_fml_Sbuf ,FFO_PRDCT_TYP,(char *) &st_tradebook.c_prd_typ,0);
            i_ferr  [ 6 ]     = Ferror32;
            i_err   [ 7 ]     = Fadd32( ptr_fml_Sbuf ,FFO_UNDRLYNG,(char *) st_tradebook.c_undrlyng,0);
            i_ferr  [ 7 ]     = Ferror32;
            i_err   [ 8 ]     = Fadd32( ptr_fml_Sbuf ,FFO_EXPRY_DT,(char *) st_tradebook.c_expry_dt,0);
            i_ferr  [ 8 ]     = Ferror32;
            i_err   [ 9 ]     = Fadd32( ptr_fml_Sbuf ,FFO_EXER_TYP,(char *) &st_tradebook.c_exrc_typ,0);
            i_ferr  [ 9 ]     = Ferror32;
            i_err   [ 10  ]   = Fadd32( ptr_fml_Sbuf  ,FFO_OPT_TYP,(char *) &st_tradebook.c_opt_typ,0);
            i_ferr  [ 10  ]   = Ferror32;
            i_err   [ 11  ]   = Fadd32( ptr_fml_Sbuf ,FFO_STRK_PRC,(char *) &st_tradebook.l_strike_prc,0);
            i_ferr  [ 11  ]   = Ferror32;
            i_err   [ 12  ]   = Fadd32( ptr_fml_Sbuf ,FFO_CTGRY_INDSTK,(char *) &st_tradebook.c_ctgry_indstk,0);
            i_ferr  [ 12  ]   = Ferror32;
            i_err   [ 13  ]   = Fadd32( ptr_fml_Sbuf  ,FFO_CA_LVL,(char *) &st_tradebook.l_ca_lvl,0);
            i_ferr  [ 13  ]   = Ferror32;
            i_err   [ 14  ]   = Fadd32( ptr_fml_Sbuf ,FFO_TRD_FLW,(char *) &st_tradebook.c_trd_flw,0);
            i_ferr  [ 14  ]   = Ferror32;
            i_err   [ 15  ]   = Fadd32( ptr_fml_Sbuf ,FFO_EXEC_QTY,(char *) &st_tradebook.l_exctd_qty,0);
            i_ferr  [ 15  ]   = Ferror32;
            i_err   [ 16  ]   = Fadd32( ptr_fml_Sbuf  ,FFO_EXCTD_RT,(char *) &st_tradebook.l_exctd_rt,0);
	          i_ferr  [ 16  ]   = Ferror32;
            i_err   [ 17  ]   = Fadd32( ptr_fml_Sbuf ,FFO_TRD_DT,(char *) st_tradebook.c_trd_dt,0);
            i_ferr  [ 17  ]   = Ferror32;


            for ( i=0 ; i < 18 ;  i++ )
            {
              if ( (i_err[ i ] == -1 ) && (i_ferr[ i ]  != FNOTPRES ) )
              {
                fn_userlog( c_ServiceName, "Error in :%d:",i );
                fn_errlog( c_ServiceName, "L31400", Fstrerror32( i_ferr[i]),c_err_msg );
          			tpfree((char *)ptr_fml_Sbuf);
                Fadd32( ptr_fml_Sbuf, FFO_ERR_MSG,c_err_msg, 0 );
                return -1;
              }
            }

           i_returncode = tpacall ( "SFO_PRCS_TRD", (char *)ptr_fml_Sbuf,0, TPNOTRAN|TPNOREPLY);

         if ( i_returncode != SUCC_BFR )
         {
            fn_errlog ( c_ServiceName, "L31405", LIBMSG, c_err_msg );
          	tpfree((char *)ptr_fml_Sbuf);
            return -1;
         }

         tpfree((char *)ptr_fml_Sbuf);  /** Ver 4.0 ***/
      }
   }
 }
		return 0; 
}
/*** Added function in Ver 3.7 Ends  ***/

/*** Added Function in Ver 3.8 ***/
int fn_spn_prcs_ack ( char *c_ServiceName,
                      char *c_err_msg,
                      char c_prd_typ,
                      char *c_ordr_rfrnc)
{
    int i = 0;
    int i_ferr[7];
    int i_xchngbkerr[7];
    int i_returncode = 0;
    int i_status = 0;
    char c_sltp_ord_rfrnc[19]= "\0";
    char c_ipord_ref[19] = "\0";
    /*** long l_ftd_ord_exe_qty= 0;    *** Commented in Ver 3.9 *****/
    long l_ors_msg_typ= 0;

    struct vw_xchngbook st_cvr_xchngbk;

    FBFR32 *ptr_fml_Sbuf;
    ptr_fml_Sbuf  = ( FBFR32 *)NULL;
    MEMSET(st_cvr_xchngbk);
    MEMSET(i_xchngbkerr);
    MEMSET(i_ferr);

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName," c_ordr_rfrnc is :%s:",c_ordr_rfrnc ) ;
      fn_userlog(c_ServiceName," c_prd_typ is :%c:",c_prd_typ ) ;
    }

    EXEC SQL
    SELECT
         FXB_ORS_MSG_TYP,
         FXB_MDFCTN_CNTR,
         nvl(to_char(FXB_ACK_TM, 'dd-mon-yyyy hh24:mi:ss'),'*'),
         NVL(FXB_XCHNG_CNCLD_QTY, 0)                                    /***** Ver 3.9 ****/
    INTO  :st_cvr_xchngbk.l_ors_msg_typ,
          :st_cvr_xchngbk.l_mdfctn_cntr,
          :st_cvr_xchngbk.c_ack_tm,
          :st_cvr_xchngbk.l_xchng_can_qty                                 /***** Ver 3.9 ****/
    FROM  FXB_FO_XCHNG_BOOK
    WHERE FXB_ORDR_RFRNC = :c_ordr_rfrnc
    AND   FXB_MDFCTN_CNTR =
                          ( SELECT min(FXB_MDFCTN_CNTR)
                            FROM   FXB_FO_XCHNG_BOOK
                            WHERE  FXB_ORDR_RFRNC =   :c_ordr_rfrnc
                            AND    FXB_JIFFY =
                                              (select min(FXB_JIFFY)
                                               from   FXB_FO_XCHNG_BOOK
                                               where  FXB_ORDR_RFRNC = :c_ordr_rfrnc
                                               AND    FXB_RMS_PRCSD_FLG = 'N')
                             AND    FXB_RMS_PRCSD_FLG = 'N'
                           )
    AND   FXB_RMS_PRCSD_FLG = 'N';

    if(SQLCODE != 0 && SQLCODE !=  NO_DATA_FOUND )
    {
       fn_errlog(c_ServiceName, "L31410", SQLMSG,  c_err_msg);
       return -1;
    }
    else if( SQLCODE ==  NO_DATA_FOUND )
    {
        fn_userlog( c_ServiceName, "No unprocessed fresh record checking for cover");

        if(c_prd_typ == 'U' || c_prd_typ == 'I')
        {

          EXEC SQL
          SELECT
            fod_sltp_ordr_rfrnc,
            FOD_PRDCT_TYP
          INTO
              :c_sltp_ord_rfrnc,
              :c_prd_typ
          FROM  FOD_FO_ORDR_DTLS
          WHERE fod_ordr_rfrnc =:c_ordr_rfrnc;

          if(SQLCODE !=0)
          {
            fn_errlog ( c_ServiceName, "L31415", SQLMSG, c_err_msg );
            return -1;
          }

          EXEC SQL
          SELECT
               FXB_ORS_MSG_TYP,
               FXB_MDFCTN_CNTR,
               nvl(to_char(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'),'-'),
         			 NVL(FXB_XCHNG_CNCLD_QTY, 0)                                    /***** Ver 3.9 ****/
        INTO   :st_cvr_xchngbk.l_ors_msg_typ,
               :st_cvr_xchngbk.l_mdfctn_cntr,
               :st_cvr_xchngbk.c_ack_tm,
         			 :st_cvr_xchngbk.l_xchng_can_qty                                 /***** Ver 3.9 ****/
          FROM FXB_FO_XCHNG_BOOK
          WHERE FXB_ORDR_RFRNC = :c_sltp_ord_rfrnc
          AND   FXB_MDFCTN_CNTR =
                              ( SELECT min(FXB_MDFCTN_CNTR)
                                FROM   FXB_FO_XCHNG_BOOK
                                WHERE  FXB_ORDR_RFRNC =   :c_sltp_ord_rfrnc
                                AND    FXB_JIFFY =
                                                  (select min(FXB_JIFFY)
                                                   from   FXB_FO_XCHNG_BOOK
                                                   where  FXB_ORDR_RFRNC = :c_sltp_ord_rfrnc
                                                   AND    FXB_RMS_PRCSD_FLG = 'N')
                                 AND    FXB_RMS_PRCSD_FLG = 'N'
                               )
          AND    FXB_RMS_PRCSD_FLG = 'N';

          if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND)
          {
              fn_errlog(c_ServiceName, "L31420", SQLMSG, c_err_msg);
              return -1 ;
          }
          if(SQLCODE == NO_DATA_FOUND )
          {
              fn_userlog( c_ServiceName, "No unprocessed cover record ");
              return 0 ;
          }
          else
          {
            i_status = 1;
            fn_userlog( c_ServiceName, "unprocessed cover record so process it");
            strcpy(st_cvr_xchngbk.c_ordr_rfrnc,c_sltp_ord_rfrnc) ;
          }
       }
    }
    else
    {
      i_status = 1;
      strcpy(st_cvr_xchngbk.c_ordr_rfrnc, c_ordr_rfrnc);
    }

    if(i_status == 1)
    {
      if(st_cvr_xchngbk.l_ors_msg_typ == ORS_2LN_ORD_ACPT || st_cvr_xchngbk.l_ors_msg_typ == ORS_3LN_ORD_ACPT ||
          st_cvr_xchngbk.l_ors_msg_typ == ORS_2L_ORD_CNCL || st_cvr_xchngbk.l_ors_msg_typ == ORS_3L_ORD_CNCL)
      {
        l_ors_msg_typ = st_cvr_xchngbk.l_ors_msg_typ;
        strcpy(c_ipord_ref,st_cvr_xchngbk.c_ordr_rfrnc);

        i_returncode = fn_spn_spd_acpt(c_ServiceName,c_ipord_ref,l_ors_msg_typ);
        if( i_returncode == -1)
        {
           fn_userlog( c_ServiceName, "Error while calling fn_spd_acpt");
           fn_errlog( c_ServiceName, "L31425",LIBMSG, c_err_msg);
           return -1 ;
        }
				return 0;
      }

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog( c_ServiceName, "Before Calling  Ack processing for Order Ref:%s:", st_cvr_xchngbk.c_ordr_rfrnc);
      }

      strcpy(st_cvr_xchngbk.c_entry_dt_tm , st_cvr_xchngbk.c_ack_tm);

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog( c_ServiceName, "st_cvr_xchngbk.c_entry_dt_tm:%s:", st_cvr_xchngbk.c_entry_dt_tm);
        fn_userlog( c_ServiceName, "st_cvr_xchngbk.c_ack_tm:%s:", st_cvr_xchngbk.c_ack_tm);
        fn_userlog( c_ServiceName, "st_cvr_xchngbk.l_mdfctn_cntrm:%ld:", st_cvr_xchngbk.l_mdfctn_cntr);
        fn_userlog( c_ServiceName, "st_cvr_xchngbk.l_ors_msg_typ:%ld:", st_cvr_xchngbk.l_ors_msg_typ);
      }
      st_cvr_xchngbk.d_jiffy       = 0;
      st_cvr_xchngbk.l_dwnld_flg   = 0;
      fn_cpy_ddr ( st_cvr_xchngbk.c_rout_crt );
      strcpy(st_cvr_xchngbk.c_xchng_rmrks,"*");

      if(DEBUG_MSG_LVL_3)
      {
         fn_userlog( c_ServiceName, "st_cvr_xchngbk.c_entry_dt_tm:%s:", st_cvr_xchngbk.c_entry_dt_tm);
         fn_userlog( c_ServiceName, "st_cvr_xchngbk.l_mdfctn_cntrm:%ld:", st_cvr_xchngbk.l_mdfctn_cntr);
         fn_userlog( c_ServiceName, "st_cvr_xchngbk.l_ors_msg_typ:%ld:", st_cvr_xchngbk.l_ors_msg_typ);
      }

			/***************** Commented in ver 3.9 ****************

      EXEC SQL
      SELECT  NVL(SUM(ftd_exctd_qty),0)
      INTO    :l_ftd_ord_exe_qty
      FROM    ftd_fo_trd_dtls
      WHERE   ftd_ordr_rfrnc = :st_cvr_xchngbk.c_ordr_rfrnc;

      if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
      {
        fn_errlog ( c_ServiceName, "L31430", SQLMSG, c_err_msg );
        fn_userlog(c_ServiceName,"Error While Selecting executed qty .");
        return -1;
      }

      if( DEBUG_MSG_LVL_3 )
      {
         fn_userlog( c_ServiceName, "l_ftd_ord_exe_qty: %ld",l_ftd_ord_exe_qty);
      }

      st_cvr_xchngbk.l_xchng_can_qty = l_ftd_ord_exe_qty;

			*********** Commented in Ver 3.9 ************/

       ptr_fml_Sbuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

       if ( ptr_fml_Sbuf == NULL )
       {
        fn_userlog(c_ServiceName,"ptr_fml_Sbuf is NULL ");
        fn_errlog(c_ServiceName, "L31435", TPMSG,  c_err_msg);
        return -1;
       }

        i_xchngbkerr [0] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)st_cvr_xchngbk.c_rout_crt,0);
        i_ferr[0] = Ferror32;
        i_xchngbkerr [1] = Fadd32(ptr_fml_Sbuf,FFO_ORDR_RFRNC, (char *)st_cvr_xchngbk.c_ordr_rfrnc ,0);
        i_ferr[1] = Ferror32;
        i_xchngbkerr [2] = Fadd32(ptr_fml_Sbuf,FFO_ORS_MSG_TYP, (char *)&st_cvr_xchngbk.l_ors_msg_typ,0);
        i_ferr[2] = Ferror32;
        i_xchngbkerr [3] = Fadd32(ptr_fml_Sbuf,FFO_MDFCTN_CNTR, (char *)&st_cvr_xchngbk.l_mdfctn_cntr,0);
        i_ferr[3] = Ferror32;
        i_xchngbkerr [4] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM, (char *)st_cvr_xchngbk.c_ack_tm,0);
        i_ferr[4] = Ferror32;
        i_xchngbkerr [5] = Fadd32(ptr_fml_Sbuf,FFO_PREV_ACK_TM, (char *)st_cvr_xchngbk.c_entry_dt_tm,0);
        i_ferr[5] = Ferror32;
        i_xchngbkerr [6] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CAN_QTY , (char *)&st_cvr_xchngbk.l_xchng_can_qty,0);
        i_ferr[6] = Ferror32;

        for (i = 0;i < 6 ;i++)
        {
          if(i_xchngbkerr[i] == -1 )
          {
            fn_userlog( c_ServiceName, "Error in :%d:",i );
            tpfree((char *)ptr_fml_Sbuf);
            fn_errlog(c_ServiceName, "L31440", FMLMSG,  c_err_msg);
            return -1;
          }
        }

        i_returncode  = tpacall ( "SFO_PRCS_RSP", (char *)ptr_fml_Sbuf,0, TPNOTRAN|TPNOREPLY);

        if ( i_returncode != SUCC_BFR )
        {
          fn_userlog( c_ServiceName, "Error while calling SFO_PRCS_RSP");
          fn_errlog ( c_ServiceName, "L31445", LIBMSG, c_err_msg );
          tpfree((char *)ptr_fml_Sbuf);
          return -1;
        }

        tpfree((char *)ptr_fml_Sbuf);  /** Ver 4.0 ***/
   }
   return 0;
}

/*** Added Function in Ver 3.8 Ends***/


/*************** ver 4.6 starts *******************/

/******************************************************************************/
/* To update the accept and reject responses from Exchange for trimmed        */
/*  protocol.                                                                 */
/*  INPUT PARAMETERS                                                          */
/*      ptr_oe_reqres - Pointer to a message structure got from Exchange      */
/*      c_pipe_id     - Pipe Id                                               */
/*      i_dwnld_flg   - Down Load Flag                                        */
/*      c_ServiceName - Service Name currently running                        */
/*      c_err_msg     - Error message to be returned                          */
/*  OUTPUT PARAMETERS                                                         */
/*        0   - Success                                                       */
/*        -1  - Failure                                                       */
/******************************************************************************/

int fn_spnord_confirmation_trim (  struct st_oe_rspn_tr *ptr_oe_res_tr,
                              char   *c_xchng_cd,
                              char   *c_pipe_id,
                              char   *c_rout_str,
                              char   *c_trd_dt,
                              char   *c_skpord_ref,
                              int    i_dwnld_flg,
                              char   *c_ServiceName,
                              char   *c_err_msg )
{

	char c_ordr_rfrnc [19];
  char c_xchng_rmrks[256];

  int i_ch_val;

  long l_xchng_can_qty;

  /*** ver 5.3 starts ***/
  char c_fod_spec_flg='\0';
  char c_fod_order_ref[30]="\0";
  char c_ord_ack_nse[20]="\0";
  /*** ver 5.3 ends ***/

  struct st_xchngbook st_i_xchngbk;
  char c_prd_typ = '\0'; 

  MEMSET(st_i_xchngbk);
  MEMSET(c_xchng_rmrks);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Inside Function fn_ord_cnfrmtn");
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"I/P Exchange Code Is :%s:",c_xchng_cd);
    fn_userlog(c_ServiceName,"I/P Pipe ID Is :%s:",c_pipe_id);
    fn_userlog(c_ServiceName,"I/P Trade Date :%s:",c_trd_dt);
  }

  strcpy(st_i_xchngbk.c_xchng_cd,c_xchng_cd);
  strcpy(st_i_xchngbk.c_pipe_id,c_pipe_id);
  strcpy(st_i_xchngbk.c_mod_trd_dt,c_trd_dt);
  st_i_xchngbk.l_ord_seq = ptr_oe_res_tr->li_ordr_sqnc;

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Sequence Number Is :%ld:",st_i_xchngbk.l_ord_seq);
  }


	switch (ptr_oe_res_tr->si_transaction_code)
  {
    case ORDER_CONFIRMATION_OUT_TR :
    case ORDER_MOD_CONFIRM_OUT_TR :

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside ORDER ACCEPT/REJECT Case");
      }

      if ( i_dwnld_flg == DOWNLOAD && (strcmp(st_i_xchngbk.c_ordr_rfrnc,c_skpord_ref) == 0) )
      {
        break;
      }

      i_ch_val = fn_spnord_acpt_rjct_trim(ptr_oe_res_tr,
                                  c_xchng_cd,
                                  c_pipe_id,
                                  c_rout_str,
                                  c_trd_dt,
                                  c_ordr_rfrnc,
                                  i_dwnld_flg,
																	c_skpord_ref,		
                                  c_ServiceName,
                                  c_err_msg);

      if (i_ch_val == -1)
      {
        fn_userlog(c_ServiceName,"Failed While Calling Function fn_spnord_acpt_rjct_trim ");
        return -1;
      }

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"After Successful Call To fn_spnord_acpt_rjct_trim");
      }

      break;

		case ORDER_CXL_CONFIRMATION_TR :

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside ORDER_CANCEL_CONFIRM_OUT_TR Case");
				fn_userlog(c_ServiceName,"st_i_xchngbk.c_req_typ = :%c:", st_i_xchngbk.c_req_typ);		
				fn_userlog(c_ServiceName,"The ERROR CODE ORDER_CANCEL_CONFIRM_OUT_TR IS :%d:",ptr_oe_res_tr->si_error_code); 
        fn_userlog(c_ServiceName,"1.Stream no in Xchng pkt is :%c:",ptr_oe_res_tr->c_time_stamp_2);/*** Ver 5.3 ***/
      }

      /*** commented in ver 5.3 **
      if( i_dwnld_flg == DOWNLOAD && ( ptr_oe_res_tr->si_error_code!= 17070 && ptr_oe_res_tr->si_error_code!= 17071 && ptr_oe_res_tr->si_error_code!= 16388  && ptr_oe_res_tr->li_ordr_sqnc != 0 )) 
      {
           st_i_xchngbk.c_oprn_typ = FOR_RCV;

           i_ch_val = fn_spnseq_to_omd ( &st_i_xchngbk,
                                         c_ServiceName,
                                         c_err_msg
                                       );

           if ( i_ch_val != 0 )
           {
                fn_errlog(c_ServiceName,"L31450", LIBMSG, c_err_msg);
                return -1;
           }
       }

			if ( (i_dwnld_flg == DOWNLOAD) && (st_i_xchngbk.c_req_typ != 'C') && 
				(ptr_oe_res_tr->si_error_code!= 17070 && ptr_oe_res_tr->si_error_code!= 17071  && ptr_oe_res_tr->si_error_code!= 16388 && ptr_oe_res_tr->li_ordr_sqnc != 0 ) ) 
			{
				fn_userlog(c_ServiceName,"solicited cancellation response received in download");
				fn_userlog(c_ServiceName,"Order Reference = :%s:",st_i_xchngbk.c_ordr_rfrnc); 
				break;
			}
********** comment 5.3 ends ****/

         /*** ver 5.3 starts ****************/
       /** Earlier seq to omd was called ***
           1. in case of download
           2. solicited cancellation
        ****************/

        /*** Now we are calling it for both cancellations to find
             request type ********/

        fn_userlog(c_ServiceName,"CR_139156 : before seqtomd i_ordr_sqnc :%ld:",ptr_oe_res_tr->li_ordr_sqnc); 
        fn_userlog(c_ServiceName,"CR_139156 : :%d: error code",ptr_oe_res_tr->si_error_code);
       /*** loop executes in case of solicited cancellation and unsolicited with reason code 0 ***/

        if( ptr_oe_res_tr->li_ordr_sqnc != 0 && ( ptr_oe_res_tr->si_error_code!= 17070 && ptr_oe_res_tr->si_error_code!= 17071 && ptr_oe_res_tr->si_error_code!= 16388  &&  ptr_oe_res_tr->st_ord_flg.flg_ioc != 1 )) 
        {
            memset(c_ord_ack_nse,'\0',sizeof(c_ord_ack_nse));
            sprintf(c_ord_ack_nse,"%16.0lf",ptr_oe_res_tr->d_order_number);
            fn_userlog(c_ServiceName,"CR_139156 c_ord_ack_nse:%s:",c_ord_ack_nse);

            EXEC SQL
                 SELECT FOD_SPL_FLAG
                  INTO :c_fod_spec_flg
                  FROM FOD_FO_ORDR_DTLS
                 WHERE FOD_ACK_NMBR  = :c_ord_ack_nse
                   AND ROWNUM < 2;
           if ( SQLCODE != 0 )
           {
                fn_errlog(c_ServiceName,"L91910", SQLMSG, c_err_msg);
                fn_userlog(c_ServiceName,"CR_139156 ERROR IN FOD FETCH");
                return -1;
           }
           fn_userlog(c_ServiceName,"CR_139156 c_fod_spec_flg :%c:",c_fod_spec_flg);
           if( c_fod_spec_flg == 'R' || c_fod_spec_flg == 'O' || c_fod_spec_flg == '2' || c_fod_spec_flg == '3' || c_fod_spec_flg == 'J')
           {
            st_i_xchngbk.c_req_typ = '\0';


            EXEC SQL
                 SELECT  Fxb_rqst_typ
                   INTO  :st_i_xchngbk.c_req_typ
                   FROM  FXB_FO_XCHNG_BOOK
                  WHERE  FXB_XCHNG_CD  = :st_i_xchngbk.c_xchng_cd
                    AND  FXB_PIPE_ID   = :st_i_xchngbk.c_pipe_id
                    AND  FXB_ORDR_RFRNC in ( select FOD_ORDR_RFRNC FROM FOD_FO_ORDR_DTLS WHERE FOD_ACK_NMBR  = :c_ord_ack_nse )
                    AND  FXB_MOD_TRD_DT = to_date(:st_i_xchngbk.c_mod_trd_dt,'dd-Mon-yyyy')
                    AND  FXB_RMS_PRCSD_FLG = 'N'
                    AND  ROWNUM < 2;
             if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
             {
                  fn_errlog(c_ServiceName,"L91910", SQLMSG, c_err_msg);
                  fn_userlog(c_ServiceName,"CR_139156 ERROR IN FXB FETCH");
                  return -1;
             }
             else if ( SQLCODE == NO_DATA_FOUND )
             {
                 fn_userlog(c_ServiceName,"NO UNPROCESSED RECORD");
             }
           }
           else
           {
           st_i_xchngbk.c_oprn_typ = FOR_RCV;

           i_ch_val = fn_spnseq_to_omd ( &st_i_xchngbk,
                                         c_ServiceName,
                                         c_err_msg
                                       );

           if ( i_ch_val != 0 )
           {
                fn_errlog(c_ServiceName,"L31455", LIBMSG, c_err_msg);
                return -1;
           }
          }
        }

       fn_userlog(c_ServiceName,"CR_139156 : st_i_xchngbk.c_req_typ :%c: c_ordr_rfrnc :%s:",st_i_xchngbk.c_req_typ,st_i_xchngbk.c_ordr_rfrnc); 
       /** ver 5.3 ends **/
			
      if((ptr_oe_res_tr->st_ord_flg.flg_ioc == 1) || (ptr_oe_res_tr->si_error_code== 17070) || (ptr_oe_res_tr->si_error_code== 17071) || 
			  ( ptr_oe_res_tr->li_ordr_sqnc == 0) || ( ptr_oe_res_tr->si_error_code== 16388 )  || (st_i_xchngbk.c_req_typ != 'C')) /*** req typ added in ver 5.3 **/
      {
        if(DEBUG_MSG_LVL_0)
        {
          fn_userlog(c_ServiceName,"Inside IOC Flag Check Condition");
					fn_userlog(c_ServiceName,"The IOC flag    Is :%d:",ptr_oe_res_tr->st_ord_flg.flg_ioc);   
          fn_userlog(c_ServiceName,"The error code  Is :%d:",ptr_oe_res_tr->si_error_code); 
          fn_userlog(c_ServiceName,"2.Stream no in Xchng pkt is :%c:",ptr_oe_res_tr->c_time_stamp_2); /*** Ver 5.3 ***/
        }
       i_ch_val = fn_spnord_can_trim ( ptr_oe_res_tr,
                       				         c_xchng_cd,
                              				 c_pipe_id,
                                			 c_rout_str,
                                			 c_trd_dt,
                                			 c_ordr_rfrnc,
                                			 i_dwnld_flg,
                                			 c_ServiceName,
                                			 c_err_msg);

        if (i_ch_val == -1)
        {
          fn_userlog(c_ServiceName,"Failed While Calling Function fn_spnord_can_trim ");
          return -1;
        } 
          fn_userlog(c_ServiceName,"5.Stream no in Xchng pkt is :%c:",ptr_oe_res_tr->c_time_stamp_2); /*** Ver 5.3 ***/
      }
			else
      {
        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Inside Normal Cancellation Handling");
        }
        i_ch_val = fn_spnord_acpt_rjct_trim(ptr_oe_res_tr,
                                    c_xchng_cd,
                                    c_pipe_id,
                                    c_rout_str,
                                    c_trd_dt,
                                    c_ordr_rfrnc,
                                    i_dwnld_flg,
																		c_skpord_ref,   
                                    c_ServiceName,
                                    c_err_msg);

        if (i_ch_val == -1)
        {
          fn_userlog(c_ServiceName,"Failed While Calling Function fn_spnord_acpt_rjct ");
          return -1;
        }
      }

      break;

    default :
      fn_userlog( c_ServiceName, "Protocol error %d", ptr_oe_res_tr->si_transaction_code);
      break;

  }		

	return 0 ;
}

int fn_spnord_acpt_rjct_trim(struct st_oe_rspn_tr *ptr_oe_res_tr,
                      	char *c_xchng_cd,
                      	char *c_pipe_id,
                      	char *c_rout_str,
                      	char *c_trd_dt,
                      	char *c_ordr_rfrnc,
                      	int  i_dwnld_flg,
												char *c_skpord_ref,	
                      	char *c_ServiceName,
                      	char *c_err_msg)
{
  FBFR32 *ptr_fml_Ibuf;


  char c_tmp[8];
  char c_xchng_rmrks[256];
  char c_mtch_accnt[11];
  char c_xchng_err_msg[256];
	char c_lst_act_ref[22] = "\0";
  char c_spn_allwd_flg;

  char c_stream_no='\0';
  char c_stream_no_str[2]="\0"; /** 5.3 ver **/
  int i_ch_val;
  int i_trnsctn;
	int	i;
	int i_err  [7];
	int	i_ferr [7];
  int i_rec_exists = 0; 

  long int li_ors_msg_typ;
  long long ll_log_tm_stmp;

  struct st_xchngbook st_i_xchngbk;
  struct st_orderbook st_i_ordrbk;
	struct vw_xchngbook vw_i_xchngbk;		

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Inside SPAN fn_spnord_acpt_rjct_trim Function");
  }

  ptr_fml_Ibuf = (FBFR32 *)NULL;

  MEMSET(st_i_xchngbk);
  MEMSET(st_i_ordrbk);
  MEMSET(c_xchng_rmrks);
  MEMSET(c_xchng_err_msg);

	

	strcpy(st_i_xchngbk.c_xchng_cd,c_xchng_cd);
  strcpy(st_i_xchngbk.c_pipe_id,c_pipe_id);
  strcpy(st_i_xchngbk.c_mod_trd_dt,c_trd_dt);
  st_i_xchngbk.l_ord_seq = ptr_oe_res_tr->li_ordr_sqnc;
	

 if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Order Reference Is :%s:",st_i_ordrbk.c_ordr_rfrnc);
  }

	switch (ptr_oe_res_tr->si_transaction_code)
  {
    case ORDER_CONFIRMATION_OUT_TR :

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"ORDER_CONFIRMATION_OUT/REJ Case Trimmed protocol");
				fn_userlog(c_ServiceName,"Exchange Entry Date Time Is :%ld:",ptr_oe_res_tr->li_entry_date_time); /*** This field contains the date and time when the order entered the trading system. ***/
      }

      fn_long_to_timearr ( st_i_xchngbk.c_entry_dt_tm,ptr_oe_res_tr->li_entry_date_time );

			if( ptr_oe_res_tr->si_error_code != 0 || ptr_oe_res_tr->si_reason_code != 0)
		  {
						if(DEBUG_MSG_LVL_0)
					  {
					    fn_userlog(c_ServiceName,"SPAN TRIM ORS_NEW_ORD_RJCT Case");
					  }

					  st_i_xchngbk.l_ors_msg_typ = ORS_NEW_ORD_RJCT;
            

					  if(DEBUG_MSG_LVL_3)
					  {
					    fn_userlog(c_ServiceName,"Exchange Ack Time Is :%ld:",ptr_oe_res_tr->li_entry_date_time);
					  }

					  fn_long_to_timearr (st_i_xchngbk.c_ack_tm,ptr_oe_res_tr->li_entry_date_time);


					  if(DEBUG_MSG_LVL_3)
					  {
					    fn_userlog(c_ServiceName,"The ERROR CODE FOR ORDER RJCT IS :%d:",ptr_oe_res_tr->si_error_code);
					  }

					  i_ch_val = fn_get_errmsg_srl( ptr_oe_res_tr->si_error_code,ptr_oe_res_tr->si_reason_code,c_xchng_err_msg,c_ServiceName);

					  if(i_ch_val == -1 )
					  {
					    fn_userlog(c_ServiceName,"Failed while fetching the Error Code ");
					    return -1;
					  }

					  strcpy(c_xchng_rmrks,c_xchng_err_msg);

			}
			else
		  {
            if(DEBUG_MSG_LVL_0)
            {
              fn_userlog(c_ServiceName,"SPAN TRIM ORS_NEW_ORD_ACPT Case");
            }

					  if(DEBUG_MSG_LVL_3)
					  {
					    fn_userlog(c_ServiceName,"Exchange Ack Time Is :%ld:",ptr_oe_res_tr->li_last_modified); /** In the case of order entry, this field will be same as Entry Date Time. After the order is modified it contains the time when the Order was last modified. **/		
					  }

					  st_i_xchngbk.l_ors_msg_typ = ORS_NEW_ORD_ACPT;
					  fn_long_to_timearr ( st_i_xchngbk.c_ack_tm,ptr_oe_res_tr->li_last_modified );

			}
      if(DEBUG_MSG_LVL_0)
      {
		    fn_userlog(c_ServiceName,"Message Type Is :%ld:",st_i_xchngbk.l_ors_msg_typ);
        fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
			  fn_userlog(c_ServiceName,"Exchange Book Entry date Time Is :%s:", st_i_xchngbk.c_entry_dt_tm);
      }
      break;

		case ORDER_MOD_CONFIRM_OUT_TR :

			if(DEBUG_MSG_LVL_0)
			{
			   fn_userlog(c_ServiceName,"ORDER_MOD_CONFIRM_OUT Case");
			}

			if(DEBUG_MSG_LVL_3)
			{
					  fn_userlog(c_ServiceName,"Exchange Ack Time Is :%ld:",ptr_oe_res_tr->li_last_modified);
			}

			fn_long_to_timearr (st_i_xchngbk.c_ack_tm,ptr_oe_res_tr->li_last_modified);


			if( ptr_oe_res_tr->si_error_code != 0 || ptr_oe_res_tr->si_reason_code != 0 )
		  {
					if(DEBUG_MSG_LVL_0)
					{
					  fn_userlog(c_ServiceName,"Inside SPAN TRIM ORS_MOD_ORD_RJCT Case");
					}

					st_i_xchngbk.l_ors_msg_typ = ORS_MOD_ORD_RJCT ;


					if(DEBUG_MSG_LVL_3)
					{
					  fn_userlog(c_ServiceName,"The ERROR CODE FOR MOD RJCT IS :%d:",ptr_oe_res_tr->si_error_code);
					}

					i_ch_val = fn_get_errmsg_srl( ptr_oe_res_tr->si_error_code,ptr_oe_res_tr->si_reason_code,(char *)c_xchng_err_msg,c_ServiceName);

					if(i_ch_val == -1 )
					{
					  fn_userlog(c_ServiceName,"Failed while fetching the Error Code ");
					  return -1;
					}

					strcpy(c_xchng_rmrks,c_xchng_err_msg);
			}
			else
		  {
          if(DEBUG_MSG_LVL_0)
          {
            fn_userlog(c_ServiceName,"Inside SPAN TRIM ORS_MOD_ORD_ACPT Case");
          }

			    st_i_xchngbk.l_ors_msg_typ = ORS_MOD_ORD_ACPT ;   

      }

			if(DEBUG_MSG_LVL_3)
			{
			      fn_userlog(c_ServiceName,"Message Type Is :%ld:",st_i_xchngbk.l_ors_msg_typ);
			      fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
			}


      break;

    case ORDER_CXL_CONFIRMATION_TR :

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"ORDER_CXL_CONFIRMATION_TR Case");
      }
			fn_userlog(c_ServiceName,"Exchange Ack Time Is :%ld:",ptr_oe_res_tr->li_last_modified);

			fn_long_to_timearr (st_i_xchngbk.c_ack_tm,ptr_oe_res_tr->li_last_modified);



			if( ptr_oe_res_tr->si_error_code != 0 || ptr_oe_res_tr->si_reason_code != 0 )
		  {
					  if(DEBUG_MSG_LVL_0)
					  {
					    fn_userlog(c_ServiceName,"Inside SPAN TRIM ORS_CAN_ORD_RJCT Case");
					  }

					  st_i_xchngbk.l_ors_msg_typ = ORS_CAN_ORD_RJCT;


					  if(DEBUG_MSG_LVL_3)
					  {
					    fn_userlog(c_ServiceName,"The ERROR CODE FOR CAN RJCT IS :%d:",ptr_oe_res_tr->si_error_code);
					  }

					  i_ch_val = fn_get_errmsg_srl( ptr_oe_res_tr->si_error_code,ptr_oe_res_tr->si_reason_code,(char *)c_xchng_err_msg,c_ServiceName);

					  if(i_ch_val == -1 )
					  {
					    fn_userlog(c_ServiceName,"Failed while fetching the Error Code ");
					    return -1;
					  }

					  strcpy(c_xchng_rmrks,c_xchng_err_msg);
			}
			else
		  {
            if(DEBUG_MSG_LVL_0)
            {
              fn_userlog(c_ServiceName,"Inside SPAN TRIM ORS_CAN_ORD_ACPT Case");
            }								 
						st_i_xchngbk.l_ors_msg_typ = ORS_CAN_ORD_ACPT ;
						st_i_xchngbk.l_xchng_can_qty = ptr_oe_res_tr->li_volume_filled_today;

						if(DEBUG_MSG_LVL_0)
						{
								fn_userlog(c_ServiceName,"In span cancellation acceptance, st_i_xchngbk.l_xchng_can_qty is :%ld:",st_i_xchngbk.l_xchng_can_qty );
						 }

      }
      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
      }

      break;
	

    default :

      fn_userlog(c_ServiceName, "Protocol error %d", ptr_oe_res_tr->si_transaction_code);
      break;
  }

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_ordrbk.c_rout_crt,c_rout_str);  

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName, "Before Call To SFO_REF_TO_ORD");
  }


	switch (st_i_xchngbk.l_ors_msg_typ)
  {
    case  ORS_NEW_ORD_ACPT :
    case  ORS_MOD_ORD_ACPT :
    case  ORS_CAN_ORD_ACPT :

      st_i_xchngbk.c_plcd_stts = ACCEPT;
      break;

    case  ORS_NEW_ORD_RJCT :
    case  ORS_MOD_ORD_RJCT :
    case  ORS_CAN_ORD_RJCT :

      st_i_xchngbk.c_plcd_stts = REJECT;
      break;
  }

  st_i_xchngbk.c_rms_prcsd_flg = NOT_PROCESSED;
  strcpy ( st_i_xchngbk.c_xchng_rmrks ,c_xchng_rmrks );
  memcpy ( &ll_log_tm_stmp,ptr_oe_res_tr->c_time_stamp_1, 8 );

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Remark Is :%s:",st_i_xchngbk.c_xchng_rmrks);
    fn_userlog(c_ServiceName,"Log time Stamp Is :%lld:",ll_log_tm_stmp);
  }

  st_i_xchngbk.d_jiffy = (double) ll_log_tm_stmp ; 

  if(DEBUG_MSG_LVL_3) 
	{
		fn_userlog(c_ServiceName,"Check Jiffy Is :%lf:",st_i_xchngbk.d_jiffy);
	}
  st_i_xchngbk.l_dwnld_flg = i_dwnld_flg;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Down Load Flag Is :%ld:",st_i_xchngbk.l_dwnld_flg);
  }


	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_xchngbk.c_rout_crt,c_rout_str);

  st_i_xchngbk.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;

  /** st_i_xchngbk.l_bit_flg =  (long)ptr_oe_res_tr->c_time_stamp_2; **/
  /** ptr_oe_reqres->st_hdr.c_time_stamp_2[LEN_TIME_STAMP -1]; **/
   c_stream_no = ptr_oe_res_tr->c_time_stamp_2;
   /**st_i_xchngbk.l_bit_flg = atol(&c_stream_no);  ***commented in 5.3 ***/

   /** c_stream_no_str[0] = c_stream_no; ** ver 5.3 ** Commented in 5.6 **/

   /** st_i_xchngbk.l_bit_flg = atol(c_stream_no_str); ** ver 5.3 ** commented in Ver 5.6 */
   fn_userlog(c_ServiceName,"ptr_oe_res_tr->c_time_stamp_2 :%ld:",(long)ptr_oe_res_tr->c_time_stamp_2 ); /** ver 5.3 **/ 
   st_i_xchngbk.l_bit_flg = (long)ptr_oe_res_tr->c_time_stamp_2; /** ver 5.6 **/

   fn_userlog(c_ServiceName,"CR_139156 BIT BIT :%ld:",st_i_xchngbk.l_bit_flg ); /** ver 5.3 **/ 

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"check IN NORM_ACPT_RJCT, the stream number receievd from exchange is:%ld:",st_i_xchngbk.l_bit_flg); 
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Before Call To SFO_UPD_XCHNGBK");
  }

  i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1)
  {
    fn_errlog(c_ServiceName,"L31460", LIBMSG, c_err_msg);
    return -1;
  }


	if ( st_i_xchngbk.l_dwnld_flg == DOWNLOAD )
  {
		EXEC SQL
			SELECT 1
      INTO :i_rec_exists
      FROM FXB_FO_XCHNG_BOOK
      WHERE FXB_JIFFY   = :st_i_xchngbk.d_jiffy
      AND FXB_XCHNG_CD  = :st_i_xchngbk.c_xchng_cd
      AND FXB_PIPE_ID   = :st_i_xchngbk.c_pipe_id
      AND   FXB_ORDR_SQNC      = :st_i_xchngbk.l_ord_seq;  /** Ver 5.2 **/
      /*** AND FXB_STREAM_NO = :st_i_xchngbk.l_bit_flg; ** Ver 5.1 **/

    if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
    {
      fn_errlog ( c_ServiceName, "S31305", SQLMSG, c_err_msg );
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);		
      return -1;
    }
		if ( i_rec_exists == 1 )
   	{
			fn_userlog ( c_ServiceName, "Record already processed" );
   		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    	return 0;
   	}

  }

  if(DEBUG_MSG_LVL_3)
  {
	   fn_userlog(c_ServiceName,"ll_lastactivityref :%lld:",ptr_oe_res_tr->ll_lastactivityref); /** Ver 4.6 Test */
  }

	sprintf(c_lst_act_ref,"%lld",ptr_oe_res_tr->ll_lastactivityref);
	rtrim(c_lst_act_ref);

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"st_i_xchngbk.c_xchng_rmrks :%s:",st_i_xchngbk.c_xchng_rmrks);
		fn_userlog(c_ServiceName,"c_lst_act_ref :%s:", c_lst_act_ref);
  }

	sql_fxb_mdfctn_cntr = 0;
	MEMSET(sql_fxb_ordr_rfrnc);

  if( st_i_xchngbk.l_ors_msg_typ == ORS_CAN_ORD_ACPT )
  {
  EXEC SQL
    UPDATE  FXB_FO_XCHNG_BOOK
    SET  FXB_PLCD_STTS       = :st_i_xchngbk.c_plcd_stts,
         FXB_RMS_PRCSD_FLG   = :st_i_xchngbk.c_rms_prcsd_flg,
         FXB_ORS_MSG_TYP     = :st_i_xchngbk.l_ors_msg_typ,
         FXB_ACK_TM          = to_date( :st_i_xchngbk.c_ack_tm,'DD-Mon-yyyy hh24:mi:ss' ),
         FXB_XCHNG_RMRKS     = rtrim(fxb_xchng_rmrks)||:st_i_xchngbk.c_xchng_rmrks,
         FXB_JIFFY           = :st_i_xchngbk.d_jiffy,
         FXB_STREAM_NO       = :st_i_xchngbk.l_bit_flg,
         FXB_XCHNG_CNCLD_QTY = :st_i_xchngbk.l_xchng_can_qty,
         FXB_LST_ACT_REF     = :c_lst_act_ref
    WHERE FXB_XCHNG_CD       = :st_i_xchngbk.c_xchng_cd
    AND   FXB_ORDR_SQNC      = :st_i_xchngbk.l_ord_seq
    AND   FXB_PIPE_ID        = :st_i_xchngbk.c_pipe_id
    AND   FXB_MOD_TRD_DT     = :c_trd_dt
    RETURNING FXB_ORDR_RFRNC,
              FXB_MDFCTN_CNTR
    INTO      :sql_fxb_ordr_rfrnc,
              :sql_fxb_mdfctn_cntr;
 }
 else
 {
  EXEC SQL
    UPDATE  FXB_FO_XCHNG_BOOK
    SET  FXB_PLCD_STTS       = :st_i_xchngbk.c_plcd_stts,
         FXB_RMS_PRCSD_FLG   = :st_i_xchngbk.c_rms_prcsd_flg,
         FXB_ORS_MSG_TYP     = :st_i_xchngbk.l_ors_msg_typ,
         FXB_ACK_TM          = to_date( :st_i_xchngbk.c_ack_tm,'DD-Mon-yyyy hh24:mi:ss' ),
         FXB_XCHNG_RMRKS     = rtrim(fxb_xchng_rmrks)||:st_i_xchngbk.c_xchng_rmrks,
         FXB_JIFFY           = :st_i_xchngbk.d_jiffy,
         FXB_STREAM_NO       = :st_i_xchngbk.l_bit_flg,
				 FXB_LST_ACT_REF		 = :c_lst_act_ref
		WHERE FXB_XCHNG_CD       = :st_i_xchngbk.c_xchng_cd
 		AND   FXB_ORDR_SQNC      = :st_i_xchngbk.l_ord_seq
 		AND   FXB_PIPE_ID        = :st_i_xchngbk.c_pipe_id
 		AND   FXB_MOD_TRD_DT     = :c_trd_dt
 		RETURNING FXB_ORDR_RFRNC,
   		        FXB_MDFCTN_CNTR
 		INTO      :sql_fxb_ordr_rfrnc,
    		      :sql_fxb_mdfctn_cntr;
  }

	if (  SQLCODE != 0  )
    {
      fn_errlog ( c_ServiceName, "S31310", SQLMSG, c_err_msg );
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      return -1;
    }

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"Order reference:%s:,Modification cnt :%d:",sql_fxb_ordr_rfrnc,sql_fxb_mdfctn_cntr); 
	}

	if ( i_dwnld_flg == DOWNLOAD && (strcmp(st_i_xchngbk.c_ordr_rfrnc,c_skpord_ref) == 0) )
  {
 		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
		return 0; 
	}


	sprintf( st_i_ordrbk.c_xchng_ack,"%16.0lf", ptr_oe_res_tr->d_order_number );

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Ack Is :%lf:",ptr_oe_res_tr->d_order_number);
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
    fn_userlog(c_ServiceName,"Order Book Exchange Ack Is :%s:",st_i_ordrbk.c_xchng_ack);
  }


	st_i_ordrbk.c_prd_typ = '\0';


  if(DEBUG_MSG_LVL_0) 
	{
		fn_userlog(c_ServiceName,"st_i_xchngbk.l_ors_msg_typ is :%ld:",st_i_xchngbk.l_ors_msg_typ);	
	}
	if(st_i_xchngbk.l_ors_msg_typ == ORS_NEW_ORD_ACPT || st_i_xchngbk.l_ors_msg_typ ==  ORS_NEW_ORD_RJCT)
  {
		if(DEBUG_MSG_LVL_0)
		{
    	fn_userlog(c_ServiceName,"Before Ack Number Updation In Order Book.");
		}

    EXEC SQL
      UPDATE  FOD_FO_ORDR_DTLS
      SET     FOD_ACK_NMBR  = :st_i_ordrbk.c_xchng_ack
      WHERE   FOD_ORDR_RFRNC = :sql_fxb_ordr_rfrnc
      RETURNING FOD_PRDCT_TYP
      INTO    :st_i_ordrbk.c_prd_typ;

    if(SQLCODE != 0)
    {
      fn_errlog ( c_ServiceName, "S31315", SQLMSG, c_err_msg );
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      return -1;
    }
  }
  else
  {
		if(DEBUG_MSG_LVL_0)
		{
    	fn_userlog(c_ServiceName,"Inside Order Book Product Selection.");
		}

    EXEC SQL
      SELECT  FOD_PRDCT_TYP
      INTO    :st_i_ordrbk.c_prd_typ
      FROM    FOD_FO_ORDR_DTLS
      WHERE   FOD_ORDR_RFRNC = :sql_fxb_ordr_rfrnc;

    if(SQLCODE != 0)
    {
      fn_errlog ( c_ServiceName, "S31320", SQLMSG, c_err_msg );
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      return -1;
    }
  }	
	


	strcpy(st_i_xchngbk.c_ordr_rfrnc,sql_fxb_ordr_rfrnc); 
	st_i_xchngbk.l_mdfctn_cntr = sql_fxb_mdfctn_cntr;

	if(DEBUG_MSG_LVL_0)
  {
		fn_userlog(c_ServiceName,"Product type :%c:",st_i_ordrbk.c_prd_typ);
	}	


  i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);

  if ( i_ch_val == -1 )
  {
    fn_errlog(c_ServiceName,"L31465", LIBMSG, c_err_msg);
    return -1;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_xchngbk.c_rout_crt,c_rout_str);  

	ptr_fml_Ibuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

	if ( ptr_fml_Ibuf == NULL )
	{
  	fn_errlog( c_ServiceName, "S31325", TPMSG, c_err_msg  );
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		return -1;
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"SPAN st_i_xchngbk.c_rout_crt Is :%s:",st_i_xchngbk.c_rout_crt);
		fn_userlog(c_ServiceName,"SPAN st_i_xchngbk.c_ordr_rfrnc Is :%s:",st_i_xchngbk.c_ordr_rfrnc);
		fn_userlog(c_ServiceName,"SPAN st_i_xchngbk.l_ors_msg_typ Is :%ld:",st_i_xchngbk.l_ors_msg_typ);
		fn_userlog(c_ServiceName,"SPAN st_i_xchngbk.l_mdfctn_cntr Is :%ld:",st_i_xchngbk.l_mdfctn_cntr);
		fn_userlog(c_ServiceName,"SPAN st_i_xchngbk.c_ack_tm Is :%s:",st_i_xchngbk.c_ack_tm);
		fn_userlog(c_ServiceName,"SPAN st_i_xchngbk.c_entry_dt_tm Is :%s:",st_i_xchngbk.c_entry_dt_tm);
	}

	i_err [0] = Fadd32(ptr_fml_Ibuf,FFO_ROUT_CRT, (char *)st_i_xchngbk.c_rout_crt,0);
  i_ferr[0] = Ferror32;
	i_err [1] = Fadd32(ptr_fml_Ibuf,FFO_ORDR_RFRNC, (char *)st_i_xchngbk.c_ordr_rfrnc,0);
  i_ferr[1] = Ferror32;
	i_err [2] = Fadd32(ptr_fml_Ibuf,FFO_ORS_MSG_TYP, (char *)&st_i_xchngbk.l_ors_msg_typ,0);
  i_ferr[2] = Ferror32;
	i_err [3] = Fadd32(ptr_fml_Ibuf,FFO_MDFCTN_CNTR, (char *)&st_i_xchngbk.l_mdfctn_cntr,0);
  i_ferr[3] = Ferror32;
	i_err [4] = Fadd32(ptr_fml_Ibuf,FFO_ACK_TM, (char *)st_i_xchngbk.c_ack_tm,0);
  i_ferr[4] = Ferror32;
	i_err [5] = Fadd32(ptr_fml_Ibuf,FFO_PREV_ACK_TM, (char *)st_i_xchngbk.c_entry_dt_tm,0);
  i_ferr[5] = Ferror32;
  i_err [6] = Fadd32(ptr_fml_Ibuf,FFO_XCHNG_CAN_QTY,(char *)&st_i_xchngbk.l_xchng_can_qty,0);
  i_ferr[6] = Ferror32;

	for (i = 0;i < 7 ;i++)
  {
  	if(i_err[i] == -1)
    {
			fn_userlog( c_ServiceName, "Error in :%d:",i );
      fn_errlog( c_ServiceName, "S31330", Fstrerror32( i_ferr[i]),c_err_msg );
      tpfree((char *)ptr_fml_Ibuf);
			return -1;
    }
  }

	if (st_i_ordrbk.c_prd_typ == 'P')	
	{
		i_ch_val = Fvftos32( ptr_fml_Ibuf,
												 (char *) &vw_i_xchngbk,
												 "vw_xchngbook" );


		if ( i_ch_val == -1 )
		{
			fn_errlog( c_ServiceName, "S31335", FMLMSG, c_err_msg  );
		  tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}
		i_ch_val = fn_acall_svc ( c_ServiceName,
															c_err_msg,
															&vw_i_xchngbk,
															"vw_xchngbook",
															sizeof ( vw_i_xchngbk ),
															TPNOREPLY,
															"SFO_FUT_ACK" );
	}
	else
	{
		i_ch_val	=	tpacall ( "SFO_PRCS_RSP", (char *)ptr_fml_Ibuf,0, TPNOTRAN|TPNOREPLY);
	}	 

  if ( i_ch_val != 0 )
  {
    fn_errlog(c_ServiceName,"L31470", TPMSG, c_err_msg);
 		tpfree ( ( char * )ptr_fml_Ibuf);
    return -1;
  }

  tpfree((char *)ptr_fml_Ibuf); 

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"After Complition Of fn_spnord_acpt_rjct");
  }

  return 0;

}

/******************************************************************************/
/*  This Updates Trade Conformation Details For Trim Protocol.                */
/*  INPUT PARAMETERS                                                          */
/*      ptr_st_trd_conf- Pointer to a message structure got from Exchange     */
/*      c_pipe_id      - Pipe Id                                              */
/*      i_dwnld_flg    - Download Flag                                        */
/*      c_ServiceName  - Service Name currently running                       */
/*      c_err_msg      - Error message to be returned                         */
/*  OUTPUT PARAMETERS                                                         */
/*        0   - Success                                                       */
/*        -1  - Failure                                                       */
/******************************************************************************/


int fn_spntrd_cnfrmtn_trim ( struct st_trade_confirm_tr *ptr_trade_confirm_tr,
                        char *c_xchng_cd,
                        char *c_pipe_id,
                        char *c_rout_str,
                        char *c_trd_dt,
                        char *c_trd_ref,
                        int i_dwnld_flg,
                        char *c_ServiceName,
                        char *c_err_msg )
{
	FBFR32 *ptr_fml_Ibuf;

  int i_trnsctn;
  int i_ch_val;
  int i_rec_cnt=0;    
	int i =0 ;
  int i_err  [18];
  int i_ferr [18];

  long long ll_log_tm_stmp;
  long long ll_log_tm_stmp_1;

  long li_ftt_stream_no;     

  double d_tm_stmp;

  struct st_orderbook st_i_ordbk;
  struct st_tradebook st_i_trdbk;
  struct st_sequence st_seq;
  struct st_contract st_cntrct;
	struct vw_tradebook vw_i_trdbk;		

  char c_svc_name [ 16 ];
  char c_refack_tmp[LEN_ORD_REFACK];
  char rfrnc[19],c_date[5] ;
  char ack[LEN_XCHNG_ACK];
  char c_mtch_accnt [10 + 1];
  char c_xchng_ack[17];
  char c_utrd_dt[23];
  char c_tmpjiffy[16];
  char c_trg_filter[17];
  char c_usr_id[16];      
	char c_lst_act_ref[22];	

  ptr_fml_Ibuf = (FBFR32 *)NULL;

  MEMSET(st_i_ordbk);
  MEMSET(st_i_trdbk);
  MEMSET(st_seq);
  MEMSET(st_cntrct);
	MEMSET(c_lst_act_ref);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Inside Function fn_spntrd_cnfrmtn");
  }

  sprintf(st_i_ordbk.c_xchng_ack,"%16.0lf",ptr_trade_confirm_tr->d_response_order_number);
  strcpy (st_i_ordbk.c_pipe_id , c_pipe_id );

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Exchange Ack Is :%s:",st_i_ordbk.c_xchng_ack);
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Pipe ID Is :%s:",st_i_ordbk.c_pipe_id);
    fn_userlog(c_ServiceName,"EXCHANGE JIFFY IS :%s:",ptr_trade_confirm_tr->c_timestamp1);
  }

  /** strcpy(c_tmpjiffy,ptr_st_trd_conf->st_hdr.c_time_stamp_1); **/


  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_ordbk.c_rout_crt,c_rout_str); 
  st_i_ordbk.c_oprn_typ = FOR_VIEW;

  memcpy (&ll_log_tm_stmp_1,ptr_trade_confirm_tr->c_timestamp1, 8 );

  d_tm_stmp = (double)ll_log_tm_stmp_1;

	while (i_rec_cnt != 2)    
  {
    i_ch_val = fn_Sack_to_ord	(	&st_i_ordbk,
																c_ServiceName,
																c_usr_id,
																c_err_msg
															);   

    if ( i_ch_val != 0)
    {
      if ( i_ch_val == TOO_MANY_ROWS_FETCHED )
      {
        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"TOO_MANY_ROWS_FETCHED");
        }
        if ( strcmp ( c_xchng_cd, "NFO" ) == 0 )
        {
          fn_userlog(c_ServiceName,"Before Call To SFO_AC_TO_ORD");
          i_ch_val = fn_snse_to_eba_tkn ( ptr_trade_confirm_tr->l_token,
                                         &st_cntrct,
                                         c_rout_str,
                                         c_ServiceName,
                                         c_err_msg );
          if ( i_ch_val != 0 )
          {
            fn_errlog(c_ServiceName,"L31475", LIBMSG, c_err_msg);
            return -1;
          }

          strcpy ( st_i_ordbk.c_xchng_cd, st_cntrct.c_xchng_cd );
          st_i_ordbk.c_prd_typ = st_cntrct.c_prd_typ;
          strcpy ( st_i_ordbk.c_expry_dt, st_cntrct.c_expry_dt );
          st_i_ordbk.c_exrc_typ = st_cntrct.c_exrc_typ;
          st_i_ordbk.c_opt_typ = st_cntrct.c_opt_typ;
          st_i_ordbk.l_strike_prc = st_cntrct.l_strike_prc;
          st_i_ordbk.c_ctgry_indstk = st_cntrct.c_ctgry_indstk;
          strcpy ( st_i_ordbk.c_undrlyng, st_cntrct.c_undrlyng );
          st_i_ordbk.l_ca_lvl = st_cntrct.l_ca_lvl;
          sprintf(st_i_ordbk.c_xchng_ack,"%16.0lf",ptr_trade_confirm_tr->d_response_order_number);

					 strcpy ( st_i_ordbk.c_pipe_id , c_pipe_id );


          if(DEBUG_MSG_LVL_3)
          {
            fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
          }

          strcpy(st_i_ordbk.c_rout_crt,c_rout_str);

          st_i_ordbk.c_oprn_typ = FOR_VIEW;

          i_ch_val  = fn_Sac_to_ord (  c_ServiceName,    
                                      c_err_msg,
                                      c_usr_id,
                                      &st_i_ordbk
                                   );

          if ( i_ch_val !=  0 )
          {
            fn_errlog(c_ServiceName,"L31480", LIBMSG, c_err_msg);
            return -1;
          }
        }
        else
        {
          fn_errlog(c_ServiceName,"S31340", "Logic error", c_err_msg);
          return -1;
        }
			 }
      else
      {
        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Order Confirmation Is Not Processed");
          fn_userlog(c_ServiceName,"Before Going To Sleep For 100 microseconds"); 
        }


        usleep(5000);      
        i_rec_cnt ++;

        if(DEBUG_MSG_LVL_0)   
        {
          fn_userlog(c_ServiceName,"Record Count Is :%d: for :%s:",i_rec_cnt,st_i_ordbk.c_xchng_ack); 
        }
      }

    }

    if(i_ch_val == 0)
    {
      /*** Here Value of i_ch_val depends on call to SFO_ACK_TO_ORD For Normal Order & SFO_AC_TO_ORD For Spread Order ***/

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside Success Condition");
      }

      break;
    }
  }

  if(i_rec_cnt == 2)   
  {

		sprintf ( c_trg_filter, "FFO_FILTER=='NFO'" ); 

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Inserting Into FTT Table");
      fn_userlog(c_ServiceName,"Before Inserting Order Number Is :%lf:",ptr_trade_confirm_tr->d_response_order_number);
      fn_userlog(c_ServiceName,"Before Inserting Pipe ID Is :%s:",c_pipe_id);
      fn_userlog(c_ServiceName,"Before Inserting Token No. Is :%ld:",ptr_trade_confirm_tr->l_token);
      fn_userlog(c_ServiceName,"Before Inserting Trade Date Is :%s:",c_trd_dt);
      fn_userlog(c_ServiceName,"Before Inserting Trade Ref Is :%s:",c_trd_ref);
      fn_userlog(c_ServiceName,"Before Inserting Fill No. Is :%ld:",ptr_trade_confirm_tr->li_fill_number);
      fn_userlog(c_ServiceName,"Before Inserting Activity Time Is :%ld:",ptr_trade_confirm_tr->li_activity_time);
      fn_userlog(c_ServiceName,"Before Inserting Fill Qty Is ;%ld:",ptr_trade_confirm_tr->li_fill_quantity);
      fn_userlog(c_ServiceName,"Before Inserting Fill Price Is :%ld:",ptr_trade_confirm_tr->li_fill_price);
      fn_userlog(c_ServiceName,"Before Inserting Time Stamp Is :%lf:",d_tm_stmp);
      fn_userlog(c_ServiceName,"Trigger Filter Is :%s:",c_trg_filter);
    }

    fn_long_to_timearr(c_utrd_dt,ptr_trade_confirm_tr->li_activity_time);
    sprintf(c_xchng_ack,"%16.0lf",ptr_trade_confirm_tr->d_response_order_number);

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Inserting Activity Time Is ;%s:",c_utrd_dt);
      fn_userlog(c_ServiceName,"Before Inserting Ack Is :%s:",c_xchng_ack);
    }

    i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );
    if ( i_trnsctn == -1)
    {
      fn_errlog(c_ServiceName,"L31485", LIBMSG, c_err_msg);
      return -1;
    }

    /** li_ftt_stream_no = (long) ptr_st_trd_conf->st_hdr.c_time_stamp_2[LEN_TIME_STAMP -1]; **/
     /***li_ftt_stream_no = (long)ptr_trade_confirm_tr->d_timestamp2; ***/

		sprintf(c_lst_act_ref,"%lld",ptr_trade_confirm_tr->ll_lastactivityref); /** Bhushan **/
		rtrim(c_lst_act_ref);

    /**** Ver 4.9 Starts ***/
    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Inserting c_lst_act_ref is :%s:",c_lst_act_ref);
      fn_userlog(c_ServiceName,"Before Inserting li_ftt_stream_no :%ld:",li_ftt_stream_no);
    }
    /*** We are assigning li_ftt_stream_no as 0 because while final processing of the trade **
      ** stream number gets inserted from FXB table ***/

    li_ftt_stream_no = 0;
    /*** Ver 4.9 Ends ***/

    	EXEC SQL
      	   INSERT INTO ftt_fo_tmp_trd
        	             (FTT_ACK_NMBR,
          	            FTT_PIPE_ID,
            	          FTT_TOKEN_NO,
              	        FTT_XCHNGTRD_NO,
                	      FTT_TRD_TM,
                  	    FTT_EXCTD_QTY,
                    	  FTT_EXCTD_RT,
                      	FTT_JIFFY,
                      	FTT_PRCSD_FLG,
                      	FTT_STREAM_NO,
                      	FTT_XCHNG_CD,
												FTT_LST_ACT_REF,
												FTT_TRANS_CD
                     		)
          	VALUES(
                    	  to_char(:st_i_ordbk.c_xchng_ack),
                      	:c_pipe_id,
                      	:ptr_trade_confirm_tr->l_token,
                      	:ptr_trade_confirm_tr->li_fill_number,
                      	to_date(:c_utrd_dt,'DD-Mon-yyyy hh24:mi:ss'),
                      	:ptr_trade_confirm_tr->li_fill_quantity,
                      	:ptr_trade_confirm_tr->li_fill_price,
                      	:d_tm_stmp,
                      	'N',
                      	:li_ftt_stream_no,
                      	:c_xchng_cd,
												:c_lst_act_ref,
												:ptr_trade_confirm_tr->si_transaction_code
                     	);


    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31345",SQLMSG, c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }

    i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);
    if ( i_ch_val == -1 )
    {
      fn_errlog(c_ServiceName,"L31490", LIBMSG, c_err_msg);
      return -1;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Posting Trigger TRG_PRCS_TRD");
    }

    fn_pst_trg(c_ServiceName,"TRG_PRCS_TRD","TRG_PRCS_TRD",c_trg_filter);

    return 0;     
  }

  i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );  

  if ( i_trnsctn == -1)
  {
    fn_errlog(c_ServiceName,"L31495", LIBMSG, c_err_msg);
    return -1;
  }

	strcpy ( st_seq.c_pipe_id, st_i_ordbk.c_pipe_id );
  strcpy ( st_seq.c_trd_dt, ( char * )c_trd_dt );

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Pipe ID Is :%s:",st_seq.c_pipe_id);
    fn_userlog(c_ServiceName,"Trade Date Is :%s:",st_seq.c_trd_dt);
  }

  

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }
  strcpy(st_seq.c_rout_crt,c_rout_str); 
  st_seq.c_rqst_typ = GET_TRD_SEQ;

	i_ch_val	= fn_get_fno_seq  (c_ServiceName,
                               &st_seq,
                               c_err_msg
                              );


  if ( i_ch_val != SUCC_BFR )
  {
    fn_errlog(c_ServiceName,"L31500", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }


  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Sequence Number Is :%ld:",st_seq.l_seq_num);
    fn_userlog(c_ServiceName,"Trade Reference Is :%s:",c_trd_ref);
    fn_userlog(c_ServiceName,"Pipe ID Is :%s:",c_pipe_id);
  }

  sprintf ( st_i_trdbk.c_trd_rfrnc, "%s%s%08ld",c_trd_ref, c_pipe_id, st_seq.l_seq_num );
  strcpy ( st_i_trdbk.c_cln_mtch_accnt , st_i_ordbk.c_cln_mtch_accnt );
  strcpy ( c_mtch_accnt , st_i_ordbk.c_cln_mtch_accnt );
  strcpy ( st_i_trdbk.c_xchng_cd , st_i_ordbk.c_xchng_cd );
  st_i_trdbk.c_prd_typ = st_i_ordbk.c_prd_typ;
  strcpy ( st_i_trdbk.c_undrlyng , st_i_ordbk.c_undrlyng );
  strcpy ( st_i_trdbk.c_expry_dt , st_i_ordbk.c_expry_dt );
  st_i_trdbk.c_exrc_typ = st_i_ordbk.c_exrc_typ;
  st_i_trdbk.c_opt_typ = st_i_ordbk.c_opt_typ;
  st_i_trdbk.l_strike_prc = st_i_ordbk.l_strike_prc;
  st_i_trdbk.c_ctgry_indstk = st_i_ordbk.c_ctgry_indstk;
  strcpy ( st_i_trdbk.c_ordr_rfrnc , st_i_ordbk.c_ordr_rfrnc );
  strcpy ( st_i_trdbk.c_xchng_ack , st_i_ordbk.c_xchng_ack );
  st_i_trdbk.l_xchng_trd_no = ptr_trade_confirm_tr->li_fill_number;
  fn_long_to_timearr(st_i_trdbk.c_trd_dt,ptr_trade_confirm_tr->li_activity_time);
  st_i_trdbk.c_trd_flw = st_i_ordbk.c_ordr_flw;
  st_i_trdbk.l_exctd_qty = ptr_trade_confirm_tr->li_fill_quantity;
  st_i_trdbk.l_exctd_rt = ptr_trade_confirm_tr->li_fill_price;
  st_i_trdbk.l_dwnld_flg = i_dwnld_flg;

  memcpy (&ll_log_tm_stmp, ptr_trade_confirm_tr->c_timestamp1, 8 );
  st_i_trdbk.d_jiffy = (double) ll_log_tm_stmp;
  
 /* st_i_trdbk.l_ca_lvl =  (long) ptr_st_trd_conf->st_hdr.c_time_stamp_2[LEN_TIME_STAMP -1];    */

 /* st_i_trdbk.d_jiffy = ptr_trade_confirm_tr->d_timestamp1; */
 /* ll_log_tm_stmp     = (long long)ptr_trade_confirm_tr->d_timestamp1; */
 st_i_trdbk.l_ca_lvl =  (long) ptr_trade_confirm_tr->d_timestamp2;

	strcpy(st_i_trdbk.c_rout_crt,c_rout_str);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Trade Reference Is :%s:",st_i_trdbk.c_trd_rfrnc);
    fn_userlog(c_ServiceName,"Match Account Is :%s:",st_i_trdbk.c_cln_mtch_accnt);
    fn_userlog(c_ServiceName,"Exchange Code Is :%s:",st_i_trdbk.c_xchng_cd);
    fn_userlog(c_ServiceName,"Product Type Is :%c:",st_i_trdbk.c_prd_typ);
    fn_userlog(c_ServiceName,"Underlying Is :%s:",st_i_trdbk.c_undrlyng);
    fn_userlog(c_ServiceName,"Expiry Date Is :%s:",st_i_trdbk.c_expry_dt);
    fn_userlog(c_ServiceName,"Exercise Type Is :%c:",st_i_trdbk.c_exrc_typ);
    fn_userlog(c_ServiceName,"Option Type Is :%c:",st_i_trdbk.c_opt_typ);
    fn_userlog(c_ServiceName,"Strike Price is :%ld:",st_i_trdbk.l_strike_prc);
    fn_userlog(c_ServiceName,"IndexStock Is :%c:",st_i_trdbk.c_ctgry_indstk);
    fn_userlog(c_ServiceName,"Order Reference No. Is :%s:",st_i_trdbk.c_ordr_rfrnc);
    fn_userlog(c_ServiceName,"Exchange Ack Is :%s:",st_i_trdbk.c_xchng_ack);
    fn_userlog(c_ServiceName,"Exchange Trade No. Is :%ld:", ptr_trade_confirm_tr->li_fill_number);
    fn_userlog(c_ServiceName,"Trade No. Is :%ld:",st_i_trdbk.l_xchng_trd_no);
    fn_userlog(c_ServiceName,"Exchange Trade Date Is :%ld:",ptr_trade_confirm_tr->li_activity_time);
    fn_userlog(c_ServiceName,"Trade Date Is :%s:",st_i_trdbk.c_trd_dt);
    fn_userlog(c_ServiceName,"Trade Flow Is :%c:",st_i_trdbk.c_trd_flw);
    fn_userlog(c_ServiceName,"In TRD_CONF, the stream number receieved from exchange is :%ld:",st_i_trdbk.l_ca_lvl);
    fn_userlog(c_ServiceName,"Exchange Executed Qty Is :%ld:", ptr_trade_confirm_tr->li_fill_quantity);
    fn_userlog(c_ServiceName,"Exchange Executed Rate Is :%ld:",ptr_trade_confirm_tr->li_fill_price);
    fn_userlog(c_ServiceName,"Executed Qty Is :%ld:",st_i_trdbk.l_exctd_qty);
    fn_userlog(c_ServiceName,"Executed Rate Is :%ld:",st_i_trdbk.l_exctd_rt);
    fn_userlog(c_ServiceName,"DownLoad flag Is :%ld:",st_i_trdbk.l_dwnld_flg);
    fn_userlog(c_ServiceName,"Exchange Log Time Stamp Is :%lld:",ll_log_tm_stmp);
    fn_userlog(c_ServiceName,"Jiffy Is :%lf:",st_i_trdbk.d_jiffy);
  }


  strcpy(st_i_trdbk.c_user_id,st_i_ordbk.c_user_id);

	sprintf(c_lst_act_ref,"%lld",ptr_trade_confirm_tr->ll_lastactivityref);
	rtrim(c_lst_act_ref);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"USER ID IS  :%s:",st_i_trdbk.c_user_id);
		fn_userlog(c_ServiceName,"c_lst_act_ref :%s:",c_lst_act_ref);
    fn_userlog(c_ServiceName,"CALLING SFO_UPD_TRDBK");
  }

	st_i_trdbk.c_oprn_typ = INSERT_TRADE_CONF;

  i_ch_val = fn_upd_Strdbk ( c_ServiceName,       
                            c_err_msg,
                            c_usr_id,
														c_lst_act_ref,
                            &st_i_trdbk
                         );

  if ( ( i_ch_val != SUCC_BFR ) && ( i_ch_val != RECORD_ALREADY_PRCSD ) )
  {
    fn_errlog(c_ServiceName,"L31505", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }

  else if ( i_ch_val == RECORD_ALREADY_PRCSD )
  {
    fn_userlog ( c_ServiceName, "Record already processed" );
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return 0;
  }

	
	i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);

  if ( i_ch_val == -1 )
  {
    fn_errlog(c_ServiceName,"L31510", LIBMSG, c_err_msg);
    return -1;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

	ptr_fml_Ibuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  if ( ptr_fml_Ibuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31350", TPMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    return -1;
  }


	i_err [0] = Fadd32(ptr_fml_Ibuf,FFO_ROUT_CRT, (char *)st_i_trdbk.c_rout_crt,0);
  i_ferr[0] = Ferror32;
	i_err [1] = Fadd32(ptr_fml_Ibuf,FFO_ORDR_RFRNC, (char *)st_i_trdbk.c_ordr_rfrnc,0);
  i_ferr[1] = Ferror32;
	i_err [2] = Fadd32(ptr_fml_Ibuf,FFO_TRD_RFRNC, (char *)st_i_trdbk.c_trd_rfrnc,0);
  i_ferr[2] = Ferror32;
	i_err [3] = Fadd32(ptr_fml_Ibuf,FFO_EBA_MTCH_ACT_NO, (char *)st_i_trdbk.c_cln_mtch_accnt,0);
  i_ferr[3] = Ferror32;
	i_err [4] = Fadd32(ptr_fml_Ibuf,FFO_EBA_CNTRCT_ID, (char *)&st_i_trdbk.l_eba_cntrct_id,0);
  i_ferr[4] = Ferror32;
	i_err [5] = Fadd32(ptr_fml_Ibuf,FFO_XCHNG_CD, (char *)st_i_trdbk.c_xchng_cd,0);
  i_ferr[5] = Ferror32;
	i_err [6] = Fadd32(ptr_fml_Ibuf,FFO_PRDCT_TYP, (char *)&st_i_trdbk.c_prd_typ,0);
  i_ferr[6] = Ferror32;
	i_err [7] = Fadd32(ptr_fml_Ibuf,FFO_UNDRLYNG, (char *)st_i_trdbk.c_undrlyng,0);
  i_ferr[7] = Ferror32;
	i_err [8] = Fadd32(ptr_fml_Ibuf,FFO_EXPRY_DT, (char *)st_i_trdbk.c_expry_dt,0);
  i_ferr[8] = Ferror32;
	i_err [9] = Fadd32(ptr_fml_Ibuf,FFO_EXER_TYP, (char *)&st_i_trdbk.c_exrc_typ,0);
  i_ferr[9] = Ferror32;
	i_err [10] = Fadd32(ptr_fml_Ibuf,FFO_OPT_TYP, (char *)&st_i_trdbk.c_opt_typ,0);
  i_ferr[10] = Ferror32;
	i_err [11] = Fadd32(ptr_fml_Ibuf,FFO_STRK_PRC, (char *)&st_i_trdbk.l_strike_prc,0);
  i_ferr[11] = Ferror32;
	i_err [12] = Fadd32(ptr_fml_Ibuf,FFO_CTGRY_INDSTK, (char *)&st_i_trdbk.c_ctgry_indstk,0);
  i_ferr[12] = Ferror32;
	i_err [13] = Fadd32(ptr_fml_Ibuf,FFO_CA_LVL, (char *)&st_i_trdbk.l_ca_lvl,0);
  i_ferr[13] = Ferror32;
	i_err [14] = Fadd32(ptr_fml_Ibuf,FFO_TRD_FLW, (char *)&st_i_trdbk.c_trd_flw,0);
  i_ferr[14] = Ferror32;
	i_err [15] = Fadd32(ptr_fml_Ibuf,FFO_EXEC_QTY, (char *)&st_i_trdbk.l_exctd_qty,0);
  i_ferr[15] = Ferror32;
	i_err [16] = Fadd32(ptr_fml_Ibuf,FFO_EXCTD_RT, (char *)&st_i_trdbk.l_exctd_rt,0);
  i_ferr[16] = Ferror32;
	i_err [17] = Fadd32(ptr_fml_Ibuf,FFO_TRD_DT, (char *)st_i_trdbk.c_trd_dt,0);
  i_ferr[17] = Ferror32;

  for (i = 0;i < 19 ;i++)
  {
    if(i_err[i] == -1)
    {
      fn_userlog( c_ServiceName, "Error in :%d:",i );
      fn_errlog( c_ServiceName, "S31355", Fstrerror32( i_ferr[i]),c_err_msg );
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }
  }

	if (st_i_trdbk.c_prd_typ == 'P')
	{
		i_ch_val = Fvftos32( ptr_fml_Ibuf,
										 (char *) &vw_i_trdbk,
										 "vw_tradebook" );


		if ( i_ch_val == -1 )
		{
			fn_errlog( c_ServiceName, "S31360", FMLMSG, c_err_msg  );
		  tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}
	
		i_ch_val = fn_acall_svc ( c_ServiceName,
															c_err_msg,
															&vw_i_trdbk,
															"vw_tradebook",
															sizeof ( vw_i_trdbk ),
															TPNOREPLY,
															"SFO_FUT_TCONF" );
	}
	else 
	{
		i_ch_val  = tpacall ( "SFO_PRCS_TRD", (char *)ptr_fml_Ibuf,0, TPNOTRAN|TPNOREPLY);
	} 

  if ( i_ch_val != 0 )
  {
    fn_errlog(c_ServiceName,"L31515", TPMSG, c_err_msg);
    tpfree ( ( char * )ptr_fml_Ibuf);
    return -1;
  }

  tpfree ( ( char * )ptr_fml_Ibuf);   
	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName, "After Prcs Trd");
  }

  return 0;
}

int fn_spnord_can_trim ( struct st_oe_rspn_tr *ptr_oe_rspn_tr,
                 			 char *c_xchng_cd,
                 			 char *c_pipe_id,
                 			 char *c_rout_str,
                 		   char *c_trd_dt,
                 			 char *c_ordr_rfrnc,
                 			 int  i_dwnld_flg,
                 			 char *c_ServiceName,
                 			 char *c_err_msg)
{

  FBFR32 *ptr_fml_Ibuf;

  char c_xchng_rmrks[256];
  char c_mtch_accnt[10 + 1];
  char c_usr_id[16];
  char c_lst_act_ref[22];

  char c_stream_no='\0'; 
  char c_stream_no_str[2]="\0"; /** 5.3 ver ***/
  int i_trnsctn;
  int i_ch_val;
  int i;
  int i_err  [7];
  int i_ferr [7];

  long l_token_id;
  long long ll_log_tm_stmp;

  struct st_xchngbook st_i_xchngbk;
  struct st_orderbook st_i_ordbk;
  struct st_contract st_cntrct;
  struct vw_xchngbook vw_i_xchngbk; 

  ptr_fml_Ibuf = (FBFR32 *)NULL;

  MEMSET(st_i_xchngbk);
  MEMSET(st_i_ordbk);
  MEMSET(st_cntrct);
  MEMSET(c_xchng_rmrks);
  MEMSET(c_lst_act_ref); 

	  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Inside Function fn_spnord_can_trim");
  }

  switch (ptr_oe_rspn_tr->si_transaction_code)
  {
     case ORDER_CXL_CONFIRMATION_TR:

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside ORDER_CXL_CONFIRMATION_TR Case");
      }
      st_i_xchngbk.l_ors_msg_typ = ORS_IOC_CAN_ACPT;

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Message Type Is :%ld:",st_i_xchngbk.l_ors_msg_typ);
        fn_userlog(c_ServiceName,"Exchange Ack Time Is :%ld:",ptr_oe_rspn_tr->li_last_modified);
        fn_userlog(c_ServiceName,"Exchange Volume Filled Today Is :%ld:",ptr_oe_rspn_tr->li_volume_filled_today);
        fn_userlog(c_ServiceName,"Exchange Token NO. Is :%ld:",ptr_oe_rspn_tr->l_token_no);
        fn_userlog(c_ServiceName,"Error code Is :%d:",ptr_oe_rspn_tr->si_error_code);
      }

      fn_long_to_timearr (st_i_xchngbk.c_ack_tm,ptr_oe_rspn_tr->li_last_modified);

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
      }

      st_i_xchngbk.l_xchng_can_qty = ptr_oe_rspn_tr->li_volume_filled_today;

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Exchange Book Cancelled Qty Is :%ld:",st_i_xchngbk.l_xchng_can_qty);
      }

      if ( ptr_oe_rspn_tr->si_error_code == 17070 ) 
      {
        strcpy(c_xchng_rmrks , "The Price is out of the current execution range" );
      }
      else if ( ptr_oe_rspn_tr->si_error_code == 17071 ) 
      {
        strcpy(c_xchng_rmrks , "The order could have resulted in self trade" );
      }
      /** added in ver 5.4 ***/
      else if( ptr_oe_rspn_tr->si_error_code == 16388 && ptr_oe_rspn_tr->st_ord_flg.flg_ioc == 1)
      {
        strcpy(c_xchng_rmrks , "IOC order cancelled by system");
      }
      /*** ver 5.4 ends ***/
      else if ( ptr_oe_rspn_tr->si_error_code == 16388 ) 
      {
        strcpy(c_xchng_rmrks , "Order Cancelled By System");
      }
      /** added in ver 5.4 ***/
      else if ( ptr_oe_rspn_tr->st_ord_flg.flg_ioc == 1 )
      {
        strcpy(c_xchng_rmrks , "IOC order has been cancelled by Exchange" );
      }
      /*** ver 5.4 ends ***/
      else
      {
        /*** strcpy(c_xchng_rmrks , "IOC order cancelled" ); commented in ver 5.3 ***/
        strcpy(c_xchng_rmrks , "Order has been cancelled by Exchange"); /** ver 5.3 **/
      }

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Exchange Remark Is :%s:",c_xchng_rmrks);
      }

      l_token_id  =  ptr_oe_rspn_tr->l_token_no;

      break;

    case BATCH_ORDER_CXL_OUT :

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside BATCH_ORDER_CXL_OUT Case");
      }

      if (ptr_oe_rspn_tr->st_ord_flg.flg_frozen == 1 )
      {
        if(DEBUG_MSG_LVL_0)
        {
          fn_userlog(c_ServiceName, "Freezed order got cancelled");
        }

        st_i_xchngbk.l_ors_msg_typ = ORS_ORD_FRZ_CNCL;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Exchange Ack Time Is :%ld:",ptr_oe_rspn_tr->li_last_modified);
          fn_userlog(c_ServiceName,"Exchange Volume Filled Today Is :%ld:", ptr_oe_rspn_tr->li_volume_filled_today);
        }

        fn_long_to_timearr (st_i_xchngbk.c_ack_tm,ptr_oe_rspn_tr->li_last_modified);

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
        }

        st_i_xchngbk.l_xchng_can_qty = ptr_oe_rspn_tr->li_volume_filled_today;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Exchange Book Cancelled Qty Is :%ld:",st_i_xchngbk.l_xchng_can_qty);
        }

        strcpy(c_xchng_rmrks ,"Order Cancelled by Exchange");

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Exchange Remark Is :%s:",c_xchng_rmrks);
        }
      }
      else
      {
        if(DEBUG_MSG_LVL_0)
        {
          fn_userlog(c_ServiceName, "Exchange initiated expiry");
        }

        st_i_xchngbk.l_ors_msg_typ = ORS_ORD_EXP;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Exchange Ack Time Is :%ld:",ptr_oe_rspn_tr->li_last_modified);
        }

        fn_long_to_timearr (st_i_xchngbk.c_ack_tm,ptr_oe_rspn_tr->li_last_modified);

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
        }

        strcpy(c_xchng_rmrks ,"Exchange Expiry");

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Exchange Remark Is :%s:",c_xchng_rmrks);
        }
      }

      break;

    default :
      fn_userlog( c_ServiceName, "Protocol error %d", ptr_oe_rspn_tr->si_transaction_code);
      break;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Ack Is :%lf:",ptr_oe_rspn_tr->d_order_number );
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  sprintf (st_i_ordbk.c_xchng_ack, "%16.0lf", ptr_oe_rspn_tr->d_order_number );

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Order Book Exchange Ack Is :%s:",st_i_ordbk.c_xchng_ack);
  }

  strcpy ( st_i_ordbk.c_pipe_id , c_pipe_id );

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Pipe ID Is :%s:",st_i_ordbk.c_pipe_id);
  }

  strcpy(st_i_ordbk.c_rout_crt,c_rout_str);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Before Call To SFO_ACK_TO_ORD");
  }

  st_i_ordbk.c_oprn_typ = FOR_VIEW;

  i_ch_val = fn_Sack_to_ord ( &st_i_ordbk,
                              c_ServiceName,
                              c_usr_id,
                              c_err_msg
                            );

  if ( i_ch_val != SUCC_BFR)
  {
    if ( i_ch_val == TOO_MANY_ROWS_FETCHED )
    {
      fn_userlog(c_ServiceName,"Inside TOO_MANY_ROWS_FETCHED");
      if ( strcmp ( c_xchng_cd, "NFO" ) == 0 )
      {
        i_ch_val = fn_snse_to_eba_tkn ( l_token_id,
                                       &st_cntrct,
                                       c_rout_str,
                                       c_ServiceName,
                                       c_err_msg );
        if ( i_ch_val != 0 )
        {
          return -1;
        }

        strcpy ( st_i_ordbk.c_xchng_cd, st_cntrct.c_xchng_cd );
        st_i_ordbk.c_prd_typ = st_cntrct.c_prd_typ;
        strcpy ( st_i_ordbk.c_expry_dt, st_cntrct.c_expry_dt );
        st_i_ordbk.c_exrc_typ = st_cntrct.c_exrc_typ;
        st_i_ordbk.c_opt_typ = st_cntrct.c_opt_typ;
        st_i_ordbk.l_strike_prc = st_cntrct.l_strike_prc;
        st_i_ordbk.c_ctgry_indstk = st_cntrct.c_ctgry_indstk;
        strcpy ( st_i_ordbk.c_undrlyng, st_cntrct.c_undrlyng );
        st_i_ordbk.l_ca_lvl = st_cntrct.l_ca_lvl;
        sprintf (st_i_ordbk.c_xchng_ack, "%16.0lf", ptr_oe_rspn_tr->d_order_number );
        strcpy ( st_i_ordbk.c_pipe_id , c_pipe_id );

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
        }
        strcpy(st_i_ordbk.c_rout_crt,c_rout_str);
        st_i_ordbk.c_oprn_typ = FOR_VIEW;

        i_ch_val  = fn_Sac_to_ord (  c_ServiceName,
                                    c_err_msg,
                                    c_usr_id,
                                    &st_i_ordbk
                                 );

          if ( i_ch_val !=  0 )
          {
            fn_errlog(c_ServiceName,"L31520", LIBMSG, c_err_msg);
            return -1;
          }


        strcpy (c_ordr_rfrnc,st_i_ordbk.c_ordr_rfrnc );
      }
      else
      {
        fn_errlog(c_ServiceName,"S31365", "Logic error", c_err_msg);
        return -1;
      }
    }
    else
    {
      fn_errlog(c_ServiceName,"L31525", LIBMSG, c_err_msg);
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      return -1;
    }
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Code Is :%s:",st_i_ordbk.c_xchng_cd);
  }

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Order Reference No. Is :%s:",st_i_ordbk.c_ordr_rfrnc);
  }

  strcpy(st_i_xchngbk.c_pipe_id,c_pipe_id);
  strcpy ( st_i_xchngbk.c_ordr_rfrnc , st_i_ordbk.c_ordr_rfrnc );
  strcpy ( st_i_xchngbk.c_xchng_cd , st_i_ordbk.c_xchng_cd );
  strcpy ( st_i_xchngbk.c_mod_trd_dt , ( char * )c_trd_dt);
  strcpy ( c_mtch_accnt , st_i_ordbk.c_cln_mtch_accnt );
  strcpy(st_i_xchngbk.c_xchng_rmrks,c_xchng_rmrks);
  strcpy (c_ordr_rfrnc,st_i_ordbk.c_ordr_rfrnc );
  st_i_xchngbk.l_ord_tot_qty = st_i_ordbk.l_ord_tot_qty;
  st_i_xchngbk.l_ord_lmt_rt = st_i_ordbk.l_ord_lmt_rt;
  st_i_xchngbk.l_ord_seq = 0;

  if (st_i_xchngbk.l_ors_msg_typ == ORS_ORD_EXP)
  {
      st_i_xchngbk.l_mdfctn_cntr = st_i_ordbk.l_mdfctn_cntr+1;
      if(DEBUG_MSG_LVL_0)
      {
         fn_userlog(c_ServiceName,"SPAN TRIM Ordr Bk Mod cntr is :%ld:,Exch Bk Mod cntr is :%ld: and Ordr Ref num is :%s: for ORS_ORD_EXP",st_i_ordbk.l_mdfctn_cntr,st_i_xchngbk.l_mdfctn_cntr,st_i_ordbk.c_ordr_rfrnc );
      }
  }
  else
  {
    st_i_xchngbk.l_mdfctn_cntr = EXPIRY_MDFCTN_CNTR;
  }
  if (st_i_xchngbk.l_ors_msg_typ == ORS_ORD_EXP) 
  {
    if(st_i_ordbk.c_ordr_stts == EXPIRED || st_i_ordbk.c_ordr_stts == PARTIALLY_EXECUTED_AND_EXPIRED ) 
    {
      fn_userlog(c_ServiceName," Order Reference No. :%s: Is Already Expired. ",st_i_ordbk.c_ordr_rfrnc);
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      return 0;
    }
    st_i_xchngbk.c_plcd_stts = EXPIRED;
  }
  else
  {
    st_i_xchngbk.c_plcd_stts = CANCELLED;
  }

  st_i_xchngbk.c_rms_prcsd_flg = NOT_PROCESSED;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Book Modification Counter Is :%ld:",st_i_xchngbk.l_mdfctn_cntr);
    fn_userlog(c_ServiceName,"Exchange Book Placed Status Is :%c:",st_i_xchngbk.c_plcd_stts);
    fn_userlog(c_ServiceName,"Exchange Book RMS Processed Flag :%c:",st_i_xchngbk.c_rms_prcsd_flg);
    fn_userlog(c_ServiceName,"Exchange Book ORS Msg Is :%ld:",st_i_xchngbk.l_ors_msg_typ);
    fn_userlog(c_ServiceName,"Exchange Book Ack Time Is :%s:",st_i_xchngbk.c_ack_tm);
    fn_userlog(c_ServiceName,"Exchange Book Remark Is :%s:",st_i_xchngbk.c_xchng_rmrks);
    fn_userlog(c_ServiceName,"Exchange Book Pipe ID Is :%s:",st_i_xchngbk.c_pipe_id);
    fn_userlog(c_ServiceName,"Exchange Book Order Reference Is :%s:",st_i_xchngbk.c_ordr_rfrnc);
    fn_userlog(c_ServiceName,"Exchange Book Exchange Code Is :%s:",st_i_xchngbk.c_xchng_cd);
    fn_userlog(c_ServiceName,"Exchange Book Trade Date Is :%s:",st_i_xchngbk.c_mod_trd_dt);
    fn_userlog(c_ServiceName,"Exchange Book Total Order Qty Is :%ld:",st_i_xchngbk.l_ord_tot_qty);
    fn_userlog(c_ServiceName,"Exchange Book Limit Rate Is :%ld:",st_i_xchngbk.l_ord_lmt_rt);
  }

  memcpy ( &ll_log_tm_stmp,ptr_oe_rspn_tr->c_time_stamp_1, 8 ); 

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Log Time Stamp Is :%lld:",ll_log_tm_stmp);
  }

  st_i_xchngbk.d_jiffy = (double) ll_log_tm_stmp; 

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Jiffy Is :%lf:",st_i_xchngbk.d_jiffy);
  }

  st_i_xchngbk.l_dwnld_flg = i_dwnld_flg;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Book DownLoad Flag Is :%ld:",st_i_xchngbk.l_dwnld_flg);
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_xchngbk.c_rout_crt,c_rout_str);

  /** st_i_xchngbk.l_bit_flg  = ptr_oe_rspn_tr->c_time_stamp_2; **/
  /** c_stream_no = ptr_oe_rspn_tr->c_time_stamp_2; *** Commented in 5.6 **/
  /** commented in ver 5.3
  st_i_xchngbk.l_bit_flg = atol(&c_stream_no);
  ***/

  /** c_stream_no_str[0] = c_stream_no; ** ver 5.3 ***Commented in 5.6 **/

  /**st_i_xchngbk.l_bit_flg = atol(c_stream_no_str); ** ver 5.3 ** commented in 5.6 **/
  st_i_xchngbk.l_bit_flg = (long)ptr_oe_rspn_tr->c_time_stamp_2; /** ver 5.6 **/

  fn_userlog(c_ServiceName,"CR_139156 Stream Number :%ld:",st_i_xchngbk.l_bit_flg ); /** ver 5.3 **/

  sprintf(c_lst_act_ref,"%lld",ptr_oe_rspn_tr->ll_lastactivityref);  
  rtrim(c_lst_act_ref);  

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Stream no is :%c:",c_stream_no); /*** Ver 5.3 ***/
    fn_userlog(c_ServiceName,"IN ORD_CNCL, the stream number receievd from exchange is:%ld:",st_i_xchngbk.l_bit_flg);
    fn_userlog(c_ServiceName,"c_lst_act_ref :%s:",c_lst_act_ref);
    fn_userlog(c_ServiceName,"Before Call To SFO_UPD_XCHNGBK For INSERTION_ON_ORDER_FTE");
  }

  st_i_xchngbk.c_oprn_typ = INSERTION_ON_ORDER_FTE;

  i_trnsctn = fn_begintran(c_ServiceName, c_err_msg );

  if ( i_trnsctn ==  -1 )
  {
    fn_errlog(c_ServiceName,"L31530", LIBMSG, c_err_msg);
    return -1;
  }

  i_ch_val = fn_upd_Sxchngbk ( &st_i_xchngbk,
                              c_lst_act_ref,  
                              c_ServiceName,
                              c_err_msg
                            );


  if ( ( i_ch_val != SUCC_BFR) && ( i_ch_val != RECORD_ALREADY_PRCSD ) )
  {
    fn_errlog(c_ServiceName,"L31535", LIBMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return -1;
  }

  else if ( i_ch_val == RECORD_ALREADY_PRCSD )
  {
    fn_userlog ( c_ServiceName, "Record already processed" );
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    return 0;
  }

  i_ch_val = fn_committran (c_ServiceName, i_trnsctn, c_err_msg);
  if ( i_ch_val == -1 )
  {
    fn_errlog(c_ServiceName,"L31540", LIBMSG, c_err_msg);
    return -1;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Rout String Is :%s:",c_rout_str);
  }

  strcpy(st_i_xchngbk.c_rout_crt,c_rout_str);

  ptr_fml_Ibuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  if ( ptr_fml_Ibuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31370", TPMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    return -1;
  }

  if(DEBUG_MSG_LVL_3) 
  {
    fn_userlog(c_ServiceName," st_i_xchngbk.l_xchng_can_qty Is :%ld:",st_i_xchngbk.l_xchng_can_qty);
  }
  i_err [0] = Fadd32(ptr_fml_Ibuf,FFO_ROUT_CRT, (char *)st_i_xchngbk.c_rout_crt,0);
  i_ferr[0] = Ferror32;
  i_err [1] = Fadd32(ptr_fml_Ibuf,FFO_ORDR_RFRNC, (char *)st_i_xchngbk.c_ordr_rfrnc,0);
  i_ferr[1] = Ferror32;
  i_err [2] = Fadd32(ptr_fml_Ibuf,FFO_ORS_MSG_TYP, (char *)&st_i_xchngbk.l_ors_msg_typ,0);
  i_ferr[2] = Ferror32;
  i_err [3] = Fadd32(ptr_fml_Ibuf,FFO_MDFCTN_CNTR, (char *)&st_i_xchngbk.l_mdfctn_cntr,0);
  i_ferr[3] = Ferror32;
  i_err [4] = Fadd32(ptr_fml_Ibuf,FFO_ACK_TM, (char *)st_i_xchngbk.c_ack_tm,0);
  i_ferr[4] = Ferror32;
  i_err [5] = Fadd32(ptr_fml_Ibuf,FFO_PREV_ACK_TM, (char *)st_i_xchngbk.c_entry_dt_tm,0);
  i_ferr[5] = Ferror32;
  i_err [6] = Fadd32(ptr_fml_Ibuf,FFO_XCHNG_CAN_QTY, (char *)&st_i_xchngbk.l_xchng_can_qty,0);
  i_ferr[6] = Ferror32;

  for (i = 0;i < 7 ;i++) 
  {
    if(i_err[i] == -1)
    {
      fn_userlog( c_ServiceName, "Error in :%d:",i );
      fn_errlog( c_ServiceName, "S31375", Fstrerror32( i_ferr[i]),c_err_msg );
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }
  }

  if (st_i_ordbk.c_prd_typ == 'P')
  {
    i_ch_val = Fvftos32( ptr_fml_Ibuf,
                         (char *) &vw_i_xchngbk,
                         "vw_xchngbook" );

    if ( i_ch_val == -1 )
    {
      fn_errlog( c_ServiceName, "S31380", FMLMSG, c_err_msg  );
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    i_ch_val = fn_acall_svc ( c_ServiceName,
                              c_err_msg,
                              &vw_i_xchngbk,
                              "vw_xchngbook",
                              sizeof ( vw_i_xchngbk ),
                              TPNOREPLY,
                              "SFO_FUT_ACK" );
  }
  else
  {
    i_ch_val  = tpacall ( "SFO_PRCS_RSP", (char *)ptr_fml_Ibuf,0, TPNOTRAN|TPNOREPLY);
  } 

  if ( i_ch_val != 0 )
  {
    fn_errlog(c_ServiceName,"L31545", TPMSG, c_err_msg);
    tpfree ( ( char * )ptr_fml_Ibuf);
    return -1;
  }

  tpfree ( ( char * )ptr_fml_Ibuf); 

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"After Complition Of fn_spnord_can");
  }

  return 0;

}
/**** ver 4.6 ends *************************/ 

/**** Ver 4.2 Starts Here ****/
int fn_spn_prcs_ack_spdrl ( char *c_ServiceName,
                      char *c_err_msg,
                      char c_prd_typ,
                      char *c_ordr_rfrnc)
{
    int i = 0;
    int i_ferr[7];
    int i_xchngbkerr[7];
    int i_returncode = 0;
    int i_status = 0;
    char c_sltp_ord_rfrnc[19]= "\0";
    char c_ipord_ref[19] = "\0";
    long l_ors_msg_typ= 0;

    struct vw_xchngbook st_cvr_xchngbk;

    FBFR32 *ptr_fml_Sbuf;
    ptr_fml_Sbuf  = ( FBFR32 *)NULL;
    MEMSET(st_cvr_xchngbk);
    MEMSET(i_xchngbkerr);
    MEMSET(i_ferr);

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName," c_ordr_rfrnc is :%s:",c_ordr_rfrnc ) ;
      fn_userlog(c_ServiceName," c_prd_typ is :%c:",c_prd_typ ) ;
    }

    EXEC SQL
    SELECT
         FXB_ORS_MSG_TYP,
         FXB_MDFCTN_CNTR,
         nvl(to_char(FXB_ACK_TM, 'dd-mon-yyyy hh24:mi:ss'),'*'),
         NVL(FXB_XCHNG_CNCLD_QTY, 0)                
    INTO  :st_cvr_xchngbk.l_ors_msg_typ,
          :st_cvr_xchngbk.l_mdfctn_cntr,
          :st_cvr_xchngbk.c_ack_tm,
          :st_cvr_xchngbk.l_xchng_can_qty           
    FROM  FXB_FO_XCHNG_BOOK
    WHERE FXB_ORDR_RFRNC = :c_ordr_rfrnc
    AND   FXB_MDFCTN_CNTR =
                          ( SELECT min(FXB_MDFCTN_CNTR)
                            FROM   FXB_FO_XCHNG_BOOK
                            WHERE  FXB_ORDR_RFRNC =   :c_ordr_rfrnc
                            AND    FXB_JIFFY =
                                              (select min(FXB_JIFFY)
                                               from   FXB_FO_XCHNG_BOOK
                                               where  FXB_ORDR_RFRNC = :c_ordr_rfrnc
                                               AND    FXB_RMS_PRCSD_FLG = 'N')
                             AND    FXB_RMS_PRCSD_FLG = 'N'
                           )
    AND   FXB_RMS_PRCSD_FLG = 'N';

    if(SQLCODE != 0 && SQLCODE !=  NO_DATA_FOUND )
    {
       fn_errlog(c_ServiceName, "L31550", SQLMSG,  c_err_msg);
       return -1;
    }
    else if( SQLCODE ==  NO_DATA_FOUND )
    {
        fn_userlog( c_ServiceName, "No unprocessed fresh record checking for cover");

          EXEC SQL
          SELECT
            fod_sltp_ordr_rfrnc,
            FOD_PRDCT_TYP
          INTO
              :c_sltp_ord_rfrnc,
              :c_prd_typ
          FROM  FOD_FO_ORDR_DTLS
          WHERE fod_ordr_rfrnc =:c_ordr_rfrnc;

          if(SQLCODE !=0)
          {
            fn_errlog ( c_ServiceName, "L31555", SQLMSG, c_err_msg );
            return -1;
          }

          EXEC SQL
          SELECT
               FXB_ORS_MSG_TYP,
               FXB_MDFCTN_CNTR,
               nvl(to_char(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'),'-'),
               NVL(FXB_XCHNG_CNCLD_QTY, 0)         
        INTO   :st_cvr_xchngbk.l_ors_msg_typ,
               :st_cvr_xchngbk.l_mdfctn_cntr,
               :st_cvr_xchngbk.c_ack_tm,
               :st_cvr_xchngbk.l_xchng_can_qty     
          FROM FXB_FO_XCHNG_BOOK
          WHERE FXB_ORDR_RFRNC = :c_sltp_ord_rfrnc
          AND   FXB_MDFCTN_CNTR =
                              ( SELECT min(FXB_MDFCTN_CNTR)
                                FROM   FXB_FO_XCHNG_BOOK
                                WHERE  FXB_ORDR_RFRNC =   :c_sltp_ord_rfrnc
                                AND    FXB_JIFFY =
                                                  (select min(FXB_JIFFY)
                                                   from   FXB_FO_XCHNG_BOOK
                                                   where  FXB_ORDR_RFRNC = :c_sltp_ord_rfrnc
                                                   AND    FXB_RMS_PRCSD_FLG = 'N')
                                 AND    FXB_RMS_PRCSD_FLG = 'N'
                               )
          AND    FXB_RMS_PRCSD_FLG = 'N';

          if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND)
          {
              fn_errlog(c_ServiceName, "L31560", SQLMSG, c_err_msg);
              return -1 ;
          }
          if(SQLCODE == NO_DATA_FOUND )
          {
              fn_userlog( c_ServiceName, "No unprocessed cover record ");
              return 0 ;
          }
          else
          {
            i_status = 1;
            fn_userlog( c_ServiceName, "unprocessed cover record so process it");
            strcpy(st_cvr_xchngbk.c_ordr_rfrnc,c_sltp_ord_rfrnc) ;
          }
    }
    else
    {
      i_status = 1;
      strcpy(st_cvr_xchngbk.c_ordr_rfrnc, c_ordr_rfrnc);
    }

    if(i_status == 1)
    {
        l_ors_msg_typ = st_cvr_xchngbk.l_ors_msg_typ;
        strcpy(c_ipord_ref,st_cvr_xchngbk.c_ordr_rfrnc);

        i_returncode = fn_spn_spd_acpt(c_ServiceName,c_ipord_ref,l_ors_msg_typ);
        if( i_returncode == -1)
        {
           fn_userlog( c_ServiceName, "Error while calling fn_spd_acpt");
           fn_errlog( c_ServiceName, "L31565",LIBMSG, c_err_msg);
           return -1 ;
       }
   }
   return 0;
}

/**** Ver 4.2 Ends Here *******/

/* VER TOL : TUX on LINUX -- Added local definition of function "fn_get_errmsg_srl" with name "fn_get_errmsg_srl" (Ravindra) */

int fn_get_errmsg_srl( int i_error_cd,
                                                                         int i_reason_cd ,
                                                                   char *c_remarks,
                   char *c_ServiceName )
{

EXEC SQL BEGIN DECLARE SECTION;
  varchar c_errcd_msg [ 256 ];
        varchar c_rsn_err_msg [ 256 ];
        char c_err_msg [256];
EXEC SQL END DECLARE SECTION;


        MEMSET(c_errcd_msg);
        MEMSET(c_rsn_err_msg);

        if(DEBUG_MSG_LVL_3)
        {
        fn_userlog(c_ServiceName, " ERROR code :%d:, Reason code :%d:", i_error_cd, i_reason_cd );
        }

        EXEC SQL
                SELECT FNO_ERR_MSG
                INTO     :c_errcd_msg
                FROM     FNO_EXCHNG_ERR_MSG
                WHERE    FNO_ERR_CD = :i_error_cd;

        if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
        {
                fn_errlog(c_ServiceName, "S31075", SQLMSG, c_err_msg);
                return -1;
        }

        SETNULL(c_errcd_msg);

        EXEC SQL
                SELECT FNO_ERR_MSG
                INTO     :c_rsn_err_msg
                FROM   FNO_EXCHNG_ERR_MSG
                WHERE  FNO_ERR_CD = :i_reason_cd;

        if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
    fn_errlog(c_ServiceName, "S31080", SQLMSG, c_err_msg);
    return -1;
  }

        SETNULL(c_rsn_err_msg);

        if(DEBUG_MSG_LVL_3)
        {
                fn_userlog(c_ServiceName,"Error Code Remark Is :%s:",c_errcd_msg.arr);
                fn_userlog(c_ServiceName,"Reason Code Remark Is :%s:",c_rsn_err_msg.arr);
        }

        strcpy(c_remarks,c_errcd_msg.arr);

        strcat(c_remarks,"-");

        strcat(c_remarks,c_rsn_err_msg.arr);

        if(DEBUG_MSG_LVL_0)
        {
                fn_userlog(c_ServiceName,"Error Message Is :%s:",c_remarks);
        }

        return 0;
}
/* VER TOL : TUX on LINUX -- Ends Here */
