/*********************************************************************************************
 Function Name     : fn_sltp_neglmt                                                           
                                                                                                   
 Description       : This function is used to validate and return negative sam limit for           
                     MarginPlus order.                                                             
                                                                                                   
 Author            : Rakesh Patil                                                                  
                                                                                                   
 Created Date      : 16-Sep-2021                                                                   
                                                                                                   
 Log               : 1.0 New Release
                   : 1.1   01-Feb-2022  Marginplus SAM - Phase 1  (Rakesh Patil)
                   : 1.2   27-Apr-2022  Bugfix (Rakesh Patil)                                
*********************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <userlog.h>
#include <fml32.h>
#include <Usysflds.h>
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>
#include <eba.h>
#include <fml_def.h>

int fn_sltp_neglmt ( char   *c_ServiceName,
                     char   *c_match_acc,
                     char   c_rqst_typ,
                     double *d_neg_lmt,
                     double *d_threshold_lmt,  /*Ver 1.1*/
                     double *d_plg_lmt,        /*Ver 1.1*/
                     double *d_ssb_lmt,        /*Ver 1.1*/
                     char   *c_err_msg
                   )
{
   int    i_neglmt_chk;
   double d_negative_limit;
   double d_eab_plg_amt;
   double d_ssb_nt_blncs;
   double d_sltp_neg_thrsld_lmt;

   i_neglmt_chk = 0;
   d_negative_limit = 0.0;
   d_eab_plg_amt = 0.0;
   d_ssb_nt_blncs = 0.0;
   d_sltp_neg_thrsld_lmt = 0.0;

   if(DEBUG_MSG_LVL_3) {
     userlog(":%s: Inside fn_sltp_neglmt for c_match_acc :%s: c_rqst_typ :%c:", c_ServiceName, c_match_acc, c_rqst_typ);  
   }

   /*** Get the pledge amount ***/ 
   EXEC SQL
      SELECT  NVL(EAB_PLG_AMT,0)
      INTO    :d_eab_plg_amt
      FROM    EAB_EQ_ALC_BFT_SMRY
      WHERE   EAB_CLM_MTCH_ACCNT= :c_match_acc;

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      userlog(":%s: Unable to plg amt",c_ServiceName);
      errlog(c_ServiceName, "L31005", SQLMSG, DEF_USR, DEF_SSSN, c_err_msg);
      strcpy(c_err_msg, "System Error : Contact system support");
      return -1;
    }

    if(DEBUG_MSG_LVL_3) {
      userlog(":%s: For match :%s: d_eab_plg_amt :%lf:", c_ServiceName,c_match_acc, d_eab_plg_amt);
    }

    *d_plg_lmt = d_eab_plg_amt;    /*Ver 1.1*/

    d_ssb_nt_blncs = 0.0;

    EXEC SQL
        SELECT  NVL(SUM(SSB_NT_BLNCS),0)   /*Ver 1.2 - added nvl*/
        INTO    :d_ssb_nt_blncs
        FROM    SSB_STTLMNT_BLNCS
        WHERE   SSB_NT_BLNCS > 0
        AND     SSB_CLM_MTCH_ACCNT = :c_match_acc;

    if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
    {
       if(SQLCODE == NULL_RETURN)  /*Added if block in Ver 1.2*/
       {
         d_ssb_nt_blncs = 0.0;
       }
       else
       {
         userlog(":%s: Unable to plg amt utlz",c_ServiceName);
         errlog(c_ServiceName, "L31010", SQLMSG, DEF_USR, DEF_SSSN, c_err_msg);
         strcpy(c_err_msg, "System Error : Contact system support");
         return -1;
       }
    }

    *d_ssb_lmt = d_ssb_nt_blncs;     /*Ver 1.1*/

    d_negative_limit = 0.0;
    d_negative_limit = d_eab_plg_amt - d_ssb_nt_blncs;

    *d_neg_lmt = d_negative_limit;   /*Ver 1.1*/

    /*** Processing only allowed if actual negative limit is beyond negative threshold limit ***/
    d_sltp_neg_thrsld_lmt = 0.0;

    EXEC SQL
      SELECT  NVL(PAR_SLTP_NEG_THRSLD_LMT,0) 
      INTO    :d_sltp_neg_thrsld_lmt
      FROM    PAR_SYSTM_PRMTR;

    if(SQLCODE != 0)
    {
      userlog(":%s: Unable to chk negative threshold limit",c_ServiceName);
      errlog(c_ServiceName, "L31015", SQLMSG, DEF_USR, DEF_SSSN, c_err_msg);
      strcpy(c_err_msg, "System Error : Contact system support");
      return -1;
    }

    if(DEBUG_MSG_LVL_3) {
      userlog(":%s: SAM negative limit c_match_acc :%s: d_negative_limit :%lf: d_sltp_neg_thrsld_lmt :%lf: d_eab_plg_amt :%lf: d_ssb_nt_blncs :%lf:", c_ServiceName, c_match_acc, d_negative_limit,d_sltp_neg_thrsld_lmt,d_eab_plg_amt,d_ssb_nt_blncs);   /*Ver 1.1 - added d_eab_plg_amt d_ssb_nt_blncs */
    }

    *d_threshold_lmt = d_sltp_neg_thrsld_lmt;    /*Ver 1.1*/ 

    /*** Ver 1.1 - starts ***/

    i_neglmt_chk = 0;

    /*** Check that limit is negative or not ***/
    EXEC SQL
      SELECT  1
      INTO    :i_neglmt_chk
      FROM    DUAL
      WHERE   :d_negative_limit >= 0;

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      userlog(":%s: Unable to chk if limit is negative or not",c_ServiceName);
      errlog(c_ServiceName, "L31020", SQLMSG, DEF_USR, DEF_SSSN, c_err_msg);
      strcpy(c_err_msg, "System Error : Contact system support");
      return -1;
    }

    if(i_neglmt_chk == 1)
    {
      userlog(":%s: For match :%s: Limit is not NEGATIVE :%lf: hence skipping processing", c_ServiceName, c_match_acc, d_negative_limit);
      errlog(c_ServiceName, "L31025", DEFMSG, DEF_USR, DEF_SSSN, c_err_msg);
      sprintf(c_err_msg, "For match :%s: Limit is not NEGATIVE :%lf: hence skipping processing.", c_match_acc,d_negative_limit);
      return 2;
    }
    /*** Ver 1.1 - ends ***/

    i_neglmt_chk = 0;

    EXEC SQL
      SELECT  1
      INTO    :i_neglmt_chk
      FROM    DUAL 
      WHERE   ROUND(ABS(:d_sltp_neg_thrsld_lmt),2) >= ROUND(ABS(:d_negative_limit),2);

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      userlog(":%s: Unable to chk negative threshold limit",c_ServiceName);
      errlog(c_ServiceName, "L31030", SQLMSG, DEF_USR, DEF_SSSN, c_err_msg);
      strcpy(c_err_msg, "System Error : Contact system support");
      return -1;
    }

    if(i_neglmt_chk == 1)
    {
      userlog(":%s: Negative threshold limit is greater than actual negative limit d_negative_limit :%lf: i_neglmt_chk :%d:", c_ServiceName, d_negative_limit, i_neglmt_chk);
      errlog(c_ServiceName, "L31035", DEFMSG, DEF_USR, DEF_SSSN, c_err_msg);
      sprintf(c_err_msg, "Skipping: Match :%s: as Negative threshold limit :%lf: is greater than actual negative limit :%lf:",c_match_acc,d_sltp_neg_thrsld_lmt,d_negative_limit);
      return 1; 
    }

    /* *d_neg_lmt = d_negative_limit; ** Ver 1.1*/

    if(DEBUG_MSG_LVL_3) { 
      userlog(":%s: Negative sam limit returned is d_neg_lmt :%lf: d_negative_limit :%lf:", c_ServiceName, *d_neg_lmt, d_negative_limit);
    }

    return 0;
}

