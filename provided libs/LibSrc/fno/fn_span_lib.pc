/********************************************************************************************************/
/*  Program             : FO_SPN_LIB			                                                              */
/*                                                                                                      */
/*                                                                                                      */
/*  Log                 : 1.0     03-Mar-2011     																											*/
/*  										: 1.1     02-Apr-2012     																											*/
/*                      : 1.2     04-Apr-2012                                                           */
/*                      : 1.3     01-Aug-2012                                                           */
/*                      : 1.4     06_Aug-2012                                                           */
/*                      : 1.5     06-Aug-2012                                                           */
/*                      : 1.6     05-Dec-2012                                                           */
/*                      : 1.7     03-Dec-2012                                                           */
/*                      : 1.8     04-Dec-2012                                                           */
/*                      : 1.9     20-Dec-2012                                                           */
/*                      : 2.0     28-Jan-2013                                                           */
/*                      : 2.1     31-Jan-2013                                                           */
/*                      : 2.2     08-Feb-2013                                                           */
/*                      : 2.3     11-Jun-2013                                                           */
/*                      : 2.4     12-Jun-2013                                                           */
/*                      : 2.5     28-Jun-2013                                                           */
/* 										  : 2.6     04-Oct-2013	                                                          */
/* 										  : 2.7     13-Feb-2014	                                                          */
/*                      : 2.8     01-Apr-2014                                                           */
/*                      : 3.0     12-Feb-2014                                                           */
/*                      : 3.1     21-Aug-2014                                                           */
/*                      : 3.2     28-Oct-2013                                                           */
/*                      : 3.3     28-Oct-2013                                                           */
/*                      : 3.5     20-Mar-2015                                                           */
/*                      : 3.7     03-Jul-2015                                                           */
/*                      : 3.9     20-Jan-2016                                                           */
/*                      : 4.0     01-Mar-2016                                                           */
/*                      : 4.1     16-Mar-2016																														*/
/*                      : 4.2     05-Jul-2016																														*/
/*											:	4.3			29-Jun-2016																														*/
/*                      : 4.4     23-Aug-2016                                                           */
/*                      : 4.5     29-Aug-2016                                                           */
/*                      : 4.6     27-Oct-2016                                                           */
/*                      : 4.7     31-Oct-2017                                                           */
/*                      : 4.8     09-Feb-2018                                                           */
/*                      : 4.9     04-May-2018																												    */
/*											: 5.0     05-Jul-2018																														*/
/*                      : 5.1                                                                           */
/*											: 5.2			01-Apr-2019																														*/
/*                      : 5.3     20-Mar-2018                                                           */
/*                      : 5.5     30-Aug-2019                                                           */
/*                      : 5.6     28-Nov-2019                                                           */
/*                      : 5.7     10-Sep-2020                                                           */
/*                      : 5.8     18-Nov-2020                                                           */
/*                      : 5.9     10-Sep-2020					*/
/*                      : 6.0     12-Dec-2020                                                           */
/*                      : 6.1     21-Jan-2021                                                           */
/*                      : 6.2     21-Jun-2021                                                           */
/*                      : 6.3     10-Dec-2021                                                           */
/*                      : 6.4     26-Nov-2021                                                           */
/*											: 6.5			09-Feb-2022																														*/
/*											: 6.6			15-Mar-2022																														*/
/*											: 6.7			28-Apr-2022																														*/
/*                      : 6.8     16-May-2022                                                           */
/*                      : 6.9     23-May-2022                                                           */
/*                      : 7.0     12-Jul-2022                                                           */
/*                      : 7.1     15-Jul-2022                                                           */
/*                      : 7.2     16-Jun-2022                                                           */
/*                      : 7.3     16-Jul-2022                                                           */
/*                      : 7.4     16-Sep-2022                                                           */
/*                      : 7.5     13-Sep-2022                                                           */
/*                    	: 7.6     10-Oct-2022                                                           */
/*                      : 7.7     28-Feb-2023                                                           */
/*                      : 7.8     07-Mar-2023                                                           */
/*                      : 7.9     24-Mar-2023                                                           */
/*	         	: 8.0   	31-Mar-2023                                                     */
/*                      : TOL     01-Aug-2023								*/
/********************************************************************************************************/
/*                                                                                                      */
/*  1.0   -   New Release                                                                               */
/*  1.1   -   Balance amt initilization & Decimal strike price bug fix (Navina D.)                      */
/*  1.2   -   Exchange Code Handling (Swati A.B )                    																		*/
/*  1.3   -   NSE Pipe 18 changes (SH)                                                                  */
/*  1.4   - 	Use Of Database Sequence For Request Type GET_ORDR_SEQ          													*/
/*  1.5   -	  Storing ip address in Exchange book (Navina D.)																						*/
/*  1.6   -	  CR-Overnight Orders @3:30 Changes  (Swati A.B)																						*/
/*  1.7   -	  FNO BSE Changes 					                     																						*/
/*  1.8   -	  SLTP FuturePLUS Handling (Navina D.)																						          */
/*  1.9   -   Broker Closeout changes  (Mahesh Shinde)                                                  */
/*  2.0   -   Consolidated Order Validation changes  (Swati A.B)                                        */
/*  2.1   -   Price band relaxation changes  (Shamili Dalvi.)                                           */
/*  2.2   -   SPAN Future Plus Changes																																	*/ 
/*  2.3   -   BSE RRM changes(Sandip Tambe)          																										*/ 
/*  2.4   -   Broker Closeout changes(RRM and closeout mode) (Mahesh Shinde)                            */
/*  2.5   -   Changes to allow modification of sqaure-off order when scrip under BAN(Swati A.B)         */
/*  2.6   -   OptionPlus product handling  (Shailesh Sabale)                                            */
/*  2.7   -   Price range function check added  for OptionPlus cover order(Swati A.B) 									*/
/*  2.8   -   Business Error Message Changed From B21041 To B21057 (Sandeep Patil)                      */  
/*  3.0   -   Structure Variable change for total_val_trded (Sachin Birje)                              */
/*  3.1   -   CR-ISEC14-54563 Correction of Average Price on conversion       													*/
/*            Future to Fut PLUS  Mahesh Shinde                                 												*/
/*  3.2   -   FNO limit logging (Swati A.B)                                                             */
/*  3.3   -   FNO VTC Order Placement (Sachin Birje)                                                    */
/*  3.5   -   Changes in query for FNO limit logging.  (20-Mar-2015 - Sonu Jalap )                      */
/*  3.7   -   Contract Master & Trade Quote Merger Changes. ( Ritesh Deolekar )                         */
/*  3.9   -   update trade insert time and process time    ( Sachin Birje )                             */
/*  4.0   -   Cloud Order Changes   (Kishor B.)                                                         */
/*  4.1   -   Transaction Flag in Check Session IP (Kishor B.)																					*/
/*  4.2   -   Log Maintenance (Navina D.)																					                      */
/*  4.3  	-  	Check Session IP Common function (Samip M)           																			*/
/*  4.4   -   MY EOS changes( Tanmay W. )                                                               */
/*  4.5   -   Trail future sltp ( Bhupendra Malik)                                                      */
/*  4.6   -   Check Session IP - PHASE_III (Kishor Borkar)                                              */
/*  4.7   -    Stop VTC feature (Tanmay Patel)                                                          */ 
/*  4.8   -   RNA on SPAN order placement (Navina)                                                      */ 
/*  4.9   -   PAN Number is added in the FOD_FO_ORDR_DTLS table ( Suchita Dabir )												*/
/*	5.0		-		New function fn_get_quote added										( Bhushan Harekar )											*/
/*  5.1   -   Using traded quantity available in cancellation response packet                           */
/*            for solicited cancellation response processing( Suchita Dabir )                           */
/*	5.2		-		New function fn_spnupd_ordrbook_ors and fn_spnref_to_omd_ors added  ( Bhushan Harekar ) 	*/
/*  5.3   -   Rollover With Spread                              ( Bhushan Harekar )                     */
/*  5.4   -   Delivery Margin Changes            ( Suchita Dabir )                                      */
/*  5.5   -   NVL Changes for last activity Ref ( Suchita Dabir )                                       */ 
/*  5.6   -   Sensibull integration (Navina D. )                                                        */ 
/*  5.7   -   Trigger Price Calc functn for Trigger Price ( Suchita Dabir )                             */
/*  5.8   -   CR-ISEC04-145019 Peak Margin Reporting Changes - ( Anuj Pancholi )                        */
/*  5.9   -   RSpread Part-Exec Modification bug fix (Mrinal Kishore)				*/
/*  6.0   -   Different ELM% for Deep OTM Option for SPAN and Non SPAN CR-ISEC14-141383 (Anuj Pancholi) */
/*  6.1   -   Minor Change for Deep OTM option strikes  (Anuj Pancholi)                                 */      
/*  6.2   -   Changes for CR-ISEC14-152927 ( Suchita Dabir )                                            */      
/*  6.3   -   CR-ISEC14-158350 Revamping of Open Positions Page (Naveena)                               */
/*  6.4   -   CR-ISEC14-162094_NRI_TDS_UNSETTLED_PROFIT                                                 */
/*	6.5	  -   CR-ISEC14-165712 Enhancements to Physical settlement Stocks disable contracts and EOS for Options Buy (Shlok Ghan)	*/
/*	6.6	  -   Peak margin  Changes ( Gaurav Chinawale )                                                	*/
/*  6.7   -   CR-ISEC14-169739 -Introduction of Algorithm Trading Strategies(Sachin Birje)              */ 
/*  6.8   -   CR-ISEC14-170192 Allowing customers to use Options premium for Fresh Option buy (Sachin Birje )*/
/*  6.9   -   CR-ISEC14-163069 Disable market order placement for illiquid options contracts under F&O segment (Roshni Pawar) */
/*  7.0   -   SPAN_BOD_MRGN_CR-ISEC14-172812 (Sachin Birje)                                             */
/*  7.1   -   CR-ISEC14-170021 Revision of Margin logic of FPSL, Oplus & Opt                            */
/*  7.2   -   Flash Trade (Naveena)                                                                     */
/*  7.3   -   Minor changes LODM ( Suchita Dabir )                                                      */
/*  7.4   -   Unique Iddentifier Changes (Dipin )                                                       */
/*  7.5   -   CR-ISEC14-172673 System squareoff for illiquid contracts (Edwin Thomas)                   */
/*  7.6   -   CR-ISEC14-175879_Pre-Trade_risk_controls_for_futures_contracts (Bhavana)									*/
/*  7.7   -   Pipe ID 21, 22, 23 and 24 Sequence       (Devesh Chawda)                                  */
/*  7.8   -   Minor Change Client Lock Changes   (Sachin Birje)                                         */
/*  7.9   -   Pipe ID 25, 26, 27, 28, 31 and 32 Sequence           (Devesh Chawda)                      */
/*  8.0   -   SPIRA_986 : Regulatory CR : Real time reporting of margin ( Ravindra/Sachin Birje )       */
/*  TOL   -   Tux on Linux  (Agam)                                                                      */
/********************************************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>
#include <math.h>
#include <atmi.h>
#include <fml32.h>
#include <fn_tuxlib.h>
#include <fo.h>
#include <fn_pos.h>
#include <eba_to_ors.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_log.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_val_ord.h>
#include <fn_span_lib.h>
#include <fn_session.h>
#define FAILED 'Y'
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>
int Encrypt(char * in, char * out);     
EXEC SQL INCLUDE "table/exg_xchng_mstr.h";      /* Added in Ver 2.0  */
#define MAX_PACKET_SIZE -100                    /** Ver 7.0 **/

/*** Commented in Ver 4.6 ****
int fn_check_spnuser	(	char *c_ServiceName,
                  			struct st_usr_prfl *ptr_st_usr_prfl,
                  			char *c_usr_psswrd,
                  			char c_psswd_req_flg,
                  			struct st_err_msg *ptr_st_err_msg )
{


  int i_returncode ;
  int i_rowcount ;

  char  c_temp_psswrd[LEN_USR_TRDNG_PSSWRD];
  varchar c_userid[9] ;
  varchar v_temp_psswrd[LEN_USR_TRDNG_PSSWRD]; 

  i_returncode = fn_chkspn_sssn	( c_ServiceName,
																	ptr_st_usr_prfl,
                              		ptr_st_err_msg
	 															);

  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "L31005", LIBMSG,ptr_st_err_msg->c_err_msg );
    return ( -1 ) ;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "c_psswd_req_flg:%c:", c_psswd_req_flg );
  }

  if( c_psswd_req_flg == YES)
  {
    strcpy((char *)c_userid.arr,ptr_st_usr_prfl->c_user_id) ;
    SETLEN(c_userid) ;

    v_temp_psswrd.len = strlen(c_usr_psswrd); 
    Encrypt(c_usr_psswrd,c_usr_psswrd);
    memcpy(v_temp_psswrd.arr,c_usr_psswrd,v_temp_psswrd.len); 

    i_rowcount = 0;

    EXEC SQL  SELECT  count(*)
              INTO    :i_rowcount
              FROM    usr_user_master
              WHERE   usr_usr_id = :c_userid
              AND    ( usr_usr_psswrd = :c_usr_psswrd
                       OR usr_usr_psswrd = :v_temp_psswrd ); 
            
		if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog( c_ServiceName, "L31010", SQLMSG,ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

    if(i_rowcount != 1 || SQLCODE == NO_DATA_FOUND)
    {
      *** fn_errlog( c_ServiceName, "B21041", " ",ptr_st_err_msg->c_err_msg ); Commented In Ver 2.8  ***
      fn_errlog( c_ServiceName, "B21057", " ",ptr_st_err_msg->c_err_msg );    ***  Added In Ver 2.8  ***
      return ( -1 ) ;
    }
  }
  return ( 0 );
}

***** Commented in Ver 4.6 *******
int fn_chkspn_sssn	( char * c_servicename,
                 			struct st_usr_prfl *ptr_st_usr_prfl,
                 			struct st_err_msg *ptr_st_err_msg
 										)
{

	char	c_mtch_accnt[11] ;
  char  c_err_msg[256] ;

  varchar c_userid[9] ;

	int   sql_count ;
  int 	i_return_code ;

  if ( ptr_st_usr_prfl->l_usr_flg == 1)
    return 0;

  if( (strcmp(ptr_st_usr_prfl->c_user_id, DEF_USR) == 0) && (ptr_st_usr_prfl->l_session_id == DEF_SSSN) )
    return 0;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_servicename,"EBA User id :%s:", ptr_st_usr_prfl->c_user_id );
    fn_userlog( c_servicename,"EBA session id :%ld:", ptr_st_usr_prfl->l_session_id );
    fn_userlog( c_servicename,"EBA Match a/c :%s:", ptr_st_usr_prfl->c_cln_mtch_accnt );
  }

  i_return_code = chk_sssn( c_servicename,
														ptr_st_usr_prfl->c_user_id,
                            ptr_st_usr_prfl->l_session_id,
                            ptr_st_err_msg->c_err_msg
													) ;

  if( i_return_code == -1 )
  {
    fn_errlog( c_servicename, "B21001", LIBMSG,ptr_st_err_msg->c_err_msg );
    return (-1) ;
  }

  if ( strcmp(ptr_st_usr_prfl->c_cln_mtch_accnt,"*") == 0 || strcmp(ptr_st_usr_prfl->c_cln_mtch_accnt,"ALL") == 0 )
  {
  	ptr_st_usr_prfl->l_usr_flg = 1 ;
    return 0;
  }

  strcpy((char *)c_userid.arr,ptr_st_usr_prfl->c_user_id) ;
  SETLEN(c_userid) ;
  strcpy( c_mtch_accnt, ptr_st_usr_prfl->c_cln_mtch_accnt) ;

  if(ptr_st_usr_prfl->c_user_id[0] == BPID)
  {
		if(DEBUG_MSG_LVL_3)
		{
  		fn_userlog( c_servicename,"User id INSIDE BP is :%s:", ptr_st_usr_prfl->c_user_id );
		}

    EXEC SQL  SELECT 1
      INTO  	:sql_count
      FROM  CLM_CLNT_MSTR
      WHERE CLM_MTCH_ACCNT =  :c_mtch_accnt
      AND   CLM_BP_ID      =  :c_userid;

    if( SQLCODE != 0 )
    {
      if(SQLCODE == NO_DATA_FOUND)
      {
        fn_errlog( c_servicename, "B28512", " ", ptr_st_err_msg->c_err_msg );

      	if(DEBUG_MSG_LVL_3)
      	{
        	fn_userlog( c_servicename,"Error mesage :%s:", ptr_st_err_msg->c_err_msg );
        }

        return ( -1 );
      }
      else
      {
      	fn_errlog( c_servicename, "L31015", SQLMSG, ptr_st_err_msg->c_err_msg );
            return ( -1 );
      }
    }
  } 
  else if(ptr_st_usr_prfl->c_user_id[0] != BPID)
	{
		if(DEBUG_MSG_LVL_3)
		{
  		fn_userlog( c_servicename,"User id INSIDE NON BP is :%s:", ptr_st_usr_prfl->c_user_id );
		}

    EXEC SQL  SELECT 1
      INTO  	:sql_count
      FROM  UAC_USR_ACCNTS
      WHERE UAC_USR_ID          = :c_userid
      AND   UAC_CLM_MTCH_ACCNT  = :c_mtch_accnt;

    if( SQLCODE != 0 )
    {
    	if(SQLCODE == NO_DATA_FOUND)
      {
      	fn_errlog( c_servicename, "B28512", " ", ptr_st_err_msg->c_err_msg );

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog( c_servicename,"Error mesage :%s:", ptr_st_err_msg->c_err_msg );
        }

        return ( -1 );
      }
      else
      {
      	fn_errlog( c_servicename, "L31020", SQLMSG, ptr_st_err_msg->c_err_msg );
        return ( -1 );
      }
    }
	}

  if(sql_count == 1) 
  {
  	ptr_st_usr_prfl->l_usr_flg = 1 ;
    return 0;
  }

  return -1; 
}
 ***** Ver 4.6 ********/
/*** Ver 1.5 starts here ***/
/*** Commented for Ver 4.3 *****
int fn_check_spnuser_ip	(	char *c_ServiceName,
													struct st_usr_prfl *ptr_st_usr_prfl,
													char *c_usr_psswrd,
													char c_psswd_req_flg,
													char *c_ip_address,
                          char c_txn_flg,                             *** Ver 4.1 ***
													struct st_err_msg *ptr_st_err_msg )
{
  int i_returncode ;
  int i_rowcount ;

  char  c_temp_psswrd[LEN_USR_TRDNG_PSSWRD];
  varchar c_userid[9] ;
  varchar v_temp_psswrd[LEN_USR_TRDNG_PSSWRD]; 

  i_returncode = fn_chkspn_sssn_ip	( c_ServiceName,
																			ptr_st_usr_prfl,
																			ptr_st_err_msg,
																			c_ip_address,
                                      c_txn_flg                     *** Ver 4.1 ***
																		);

  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "L31025", LIBMSG,ptr_st_err_msg->c_err_msg );
    return ( -1 ) ;
  }

  if(DEBUG_MSG_LVL_3)
  {
		fn_userlog( c_ServiceName,"Inside fn_check_spnuser_ip c_ip_address = :%s:",c_ip_address);
    fn_userlog( c_ServiceName, "c_psswd_req_flg:%c:", c_psswd_req_flg );
  }

  if( c_psswd_req_flg == YES)
  {
    strcpy((char *)c_userid.arr,ptr_st_usr_prfl->c_user_id) ;
    SETLEN(c_userid) ;

    v_temp_psswrd.len = strlen(c_usr_psswrd); 
    Encrypt(c_usr_psswrd,c_usr_psswrd);
    memcpy(v_temp_psswrd.arr,c_usr_psswrd,v_temp_psswrd.len); 

    i_rowcount = 0;

    EXEC SQL  SELECT  count(*)
              INTO    :i_rowcount
              FROM    usr_user_master
              WHERE   usr_usr_id = :c_userid
              AND    ( usr_usr_psswrd = :c_usr_psswrd
                       OR usr_usr_psswrd = :v_temp_psswrd ); 
            
		if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog( c_ServiceName, "L31030", SQLMSG,ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

    if(i_rowcount != 1 || SQLCODE == NO_DATA_FOUND)
    {
      **fn_errlog( c_ServiceName, "B21041", " ",ptr_st_err_msg->c_err_msg ); Commented In Ver 2.8  ***
      fn_errlog( c_ServiceName, "B21057", " ",ptr_st_err_msg->c_err_msg );    ***  Ver 2.8 ***
      return ( -1 ) ;
    }
  }
  return ( 0 );
}
*** Commented for Ver 4.3 ***/

/*** Commented for Ver 4.3 ***
int fn_chkspn_sssn_ip	( char * c_servicename,
												struct st_usr_prfl *ptr_st_usr_prfl,
												struct st_err_msg *ptr_st_err_msg,
												char *c_ip_address,
                        char c_txn_flg                    *** Ver 4.1 ***
 										)
{

	char	c_mtch_accnt[11] ;
  char  c_err_msg[256] ;

  varchar c_userid[9] ;

	int   sql_count ;
  int 	i_return_code ;

  if ( ptr_st_usr_prfl->l_usr_flg == 1)
    return 0;

  if( (strcmp(ptr_st_usr_prfl->c_user_id, DEF_USR) == 0) && (ptr_st_usr_prfl->l_session_id == DEF_SSSN) )
    return 0;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_servicename,"EBA User id :%s:", ptr_st_usr_prfl->c_user_id );
    fn_userlog( c_servicename,"EBA session id :%ld:", ptr_st_usr_prfl->l_session_id );
    fn_userlog( c_servicename,"EBA Match a/c :%s:", ptr_st_usr_prfl->c_cln_mtch_accnt );
		fn_userlog( c_servicename,"Inside fn_chkspn_sssn_ip c_ip_address = :%s:",c_ip_address);
    fn_userlog( c_servicename,"Value of c_txn_flg inside fn_chkspn_sssn_ip :%c:", c_txn_flg );  ** Ver 4.1 **
	}

  i_return_code = chk_sssn_ip (	c_servicename,
																ptr_st_usr_prfl->c_user_id,
																ptr_st_usr_prfl->l_session_id,
																c_ip_address,
                                c_txn_flg,                  *** Ver 4.1 ***
																ptr_st_err_msg->c_err_msg
															) ;

  if( i_return_code == -1 )
  {
    fn_errlog( c_servicename, "B21001", LIBMSG,ptr_st_err_msg->c_err_msg );
    return (-1) ;
  }

  if ( strcmp(ptr_st_usr_prfl->c_cln_mtch_accnt,"*") == 0 || strcmp(ptr_st_usr_prfl->c_cln_mtch_accnt,"ALL") == 0 )
  {
  	ptr_st_usr_prfl->l_usr_flg = 1 ;
    return 0;
  }

  strcpy((char *)c_userid.arr,ptr_st_usr_prfl->c_user_id) ;
  SETLEN(c_userid) ;
  strcpy( c_mtch_accnt, ptr_st_usr_prfl->c_cln_mtch_accnt) ;

  if(ptr_st_usr_prfl->c_user_id[0] == BPID)
  {
		if(DEBUG_MSG_LVL_3)
		{
  		fn_userlog( c_servicename,"User id INSIDE BP is :%s:", ptr_st_usr_prfl->c_user_id );
		}

    EXEC SQL  SELECT 1
      INTO  	:sql_count
      FROM  CLM_CLNT_MSTR
      WHERE CLM_MTCH_ACCNT =  :c_mtch_accnt
      AND   CLM_BP_ID      =  :c_userid;

    if( SQLCODE != 0 )
    {
      if(SQLCODE == NO_DATA_FOUND)
      {
        fn_errlog( c_servicename, "B28512", " ", ptr_st_err_msg->c_err_msg );

      	if(DEBUG_MSG_LVL_3)
      	{
        	fn_userlog( c_servicename,"Error mesage :%s:", ptr_st_err_msg->c_err_msg );
        }

        return ( -1 );
      }
      else
      {
      	fn_errlog( c_servicename, "L31035", SQLMSG, ptr_st_err_msg->c_err_msg );
            return ( -1 );
      }
    }
  } 
  else if(ptr_st_usr_prfl->c_user_id[0] != BPID)
	{
		if(DEBUG_MSG_LVL_3)
		{
  		fn_userlog( c_servicename,"User id INSIDE NON BP is :%s:", ptr_st_usr_prfl->c_user_id );
		}

    EXEC SQL  SELECT 1
      INTO  	:sql_count
      FROM  UAC_USR_ACCNTS
      WHERE UAC_USR_ID          = :c_userid
      AND   UAC_CLM_MTCH_ACCNT  = :c_mtch_accnt;

    if( SQLCODE != 0 )
    {
    	if(SQLCODE == NO_DATA_FOUND)
      {
      	fn_errlog( c_servicename, "B28512", " ", ptr_st_err_msg->c_err_msg );

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog( c_servicename,"Error mesage :%s:", ptr_st_err_msg->c_err_msg );
        }

        return ( -1 );
      }
      else
      {
      	fn_errlog( c_servicename, "L31040", SQLMSG, ptr_st_err_msg->c_err_msg );
        return ( -1 );
      }
    }
	}

  if(sql_count == 1) 
  {
  	ptr_st_usr_prfl->l_usr_flg = 1 ;
    return 0;
  }

  return -1; 
}
****** Commented for Ver 4.3 ***/
/*** Ver 1.5 Ends here ***/

int fn_chk_spncloseout	(	char *c_ServiceName,
													char *c_cln_mtch_accnt,                         /*** Added in ver 1.9 ***/
													char  c_req_typ,                         				/*** Added in ver 1.9 ***/
													struct st_contract st_cntrct,										/*** Added in ver 1.9 ***/
                    			struct st_xchngbook *ptr_st_xchngbook,
                    			struct st_err_msg *ptr_st_err_msg
							 					)
{
  char c_brkr_stts;
  char c_brkr_clsout_flg = '\0';      /*** Added in ver 1.9 ***/	
  char c_clsout_stts  = '\0';         /*** Added in ver 2.4 ***/

	long l_open_pos_qty = 0;            /*** Added in ver 1.9 ***/
  long l_pending_qty  = 0;            /*** Added in ver 1.9 ***/
  long l_total_qty    = 0;            /*** Added in ver 1.9 ***/

	 if(DEBUG_MSG_LVL_3)
 	 {
    	fn_userlog(c_ServiceName,"ptr_st_xchngbook->c_xchng_cd :%s", ptr_st_xchngbook->c_xchng_cd);
	 }

  EXEC SQL
    SELECT EXG_BRKR_STTS,
		       EXG_CLS_STTS               /*** Added in ver 2.4 ***/
    INTO   :c_brkr_stts,
           :c_clsout_stts             /*** Added in ver 2.4 ***/
    FROM   EXG_XCHNG_MSTR
    WHERE  EXG_XCHNG_CD=:ptr_st_xchngbook->c_xchng_cd;

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "L31045", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

	/*** Ver 1.9 Starts ***/

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Broker check sucess:status:%c", c_brkr_stts);
    fn_userlog(c_ServiceName,"Broker check closeout:status:%c", c_clsout_stts);  /*** Ver 2.4 ***/
    fn_userlog(c_ServiceName,"Underlying name is        :%s", st_cntrct.c_undrlyng);
    fn_userlog(c_ServiceName,"st_xchngbook->c_slm_flg   :%c", ptr_st_xchngbook->c_slm_flg);
  }

  /******** Commented in ver 2.4 ***************************************************************
  if(c_brkr_stts == CLOSE_OUT && ptr_st_xchngbook->c_slm_flg == 'S' && c_req_typ != 'M' && c_req_typ != 'C') 
  {
    	fn_errlog( c_ServiceName, "B35015", DEFMSG, ptr_st_err_msg->c_err_msg );
    	return FAILURE;
  }

	if(c_brkr_stts == CLOSE_OUT && ( ptr_st_xchngbook->c_spl_flg == '2' || ptr_st_xchngbook->c_spl_flg == '3') )
  {
    fn_errlog( c_ServiceName, "B35016", DEFMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  if(c_brkr_stts == CLOSE_OUT)
  {
  **********************************************************************************************/

	if(c_brkr_stts == CLOSE_OUT || c_clsout_stts == CLOSE_OUT || c_clsout_stts == RRM_MODE)  /* condition changed Ver 2.4 */
  {
    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Broker check sucess:status:%c", c_brkr_stts);
      fn_userlog(c_ServiceName,"match account is          :%s", c_cln_mtch_accnt);
      fn_userlog(c_ServiceName,"Underlying name is        :%s", st_cntrct.c_undrlyng);
      fn_userlog(c_ServiceName,"Exchange code is          :%s", st_cntrct.c_xchng_cd);
      fn_userlog(c_ServiceName,"Expiry date is            :%s", st_cntrct.c_expry_dt);
      fn_userlog(c_ServiceName,"Product type is           :%c", st_cntrct.c_prd_typ);
      fn_userlog(c_ServiceName,"Option type is            :%c", st_cntrct.c_undrlyng);
      fn_userlog(c_ServiceName,"Transaction flow is       :%c", ptr_st_xchngbook->c_ordr_flw); 
      fn_userlog(c_ServiceName,"Excirsize Type  is        :%c", st_cntrct.c_exrc_typ);
      fn_userlog(c_ServiceName,"Catogory index is         :%c", st_cntrct.c_ctgry_indstk);
      fn_userlog(c_ServiceName,"option type is         		:%c", st_cntrct.c_opt_typ);
      fn_userlog(c_ServiceName,"Strike price is           :%ld",st_cntrct.l_strike_prc);
    }

    EXEC SQL
      SELECT  NVL(FUM_BRKR_CLSOUT_FLG,'N')
      INTO    :c_brkr_clsout_flg
      FROM    FUM_FO_UNDRLYNG_MSTR
      WHERE   FUM_UNDRLYNG  = :st_cntrct.c_undrlyng
  /**    AND     FUM_PRDCT_TYP = decode(:st_cntrct.c_prd_typ,'P','F','U','F',:st_cntrct.c_prd_typ) Commented in Ver 2.6 **/
			AND     FUM_PRDCT_TYP = decode(:st_cntrct.c_prd_typ,'P','F','U','F','I','O',:st_cntrct.c_prd_typ) /** Ver 2.6 Option Plus Product handled **/
			AND			FUM_XCHNG_CD	= :st_cntrct.c_xchng_cd;

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "L31050", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Broker closeout :status   :%c",c_brkr_clsout_flg);
      fn_userlog(c_ServiceName,"Broker request type  is 	:%c",c_req_typ);
    }
	
		if ( c_brkr_clsout_flg == 'Y' && c_req_typ == 'C')
		{
			fn_errlog( c_ServiceName, "B56045", DEFMSG, ptr_st_err_msg->c_err_msg );
    	return FAILURE;	
		}

		if ( st_cntrct.c_prd_typ == 'F' )
		{
	
		EXEC SQL
        SELECT FCP_OPNPSTN_QTY,
               DECODE(:ptr_st_xchngbook->c_ordr_flw,'B',GREATEST(ABS(FCP_IBUY_QTY),ABS(FCP_EXBUY_QTY)),GREATEST(ABS(FCP_ISELL_QTY),ABS(FCP_EXSELL_QTY)))
        INTO  :l_open_pos_qty,
              :l_pending_qty
        FROM FCP_FO_SPN_CNTRCT_PSTN
        WHERE FCP_CLM_MTCH_ACCNT =:c_cln_mtch_accnt
        AND   FCP_XCHNG_CD       =:st_cntrct.c_xchng_cd
        AND   FCP_PRDCT_TYP      =:st_cntrct.c_prd_typ
        AND   FCP_INDSTK         =:st_cntrct.c_ctgry_indstk
        AND   FCP_UNDRLYNG       =:st_cntrct.c_undrlyng
        AND   FCP_EXPRY_DT       =:st_cntrct.c_expry_dt
        AND   FCP_EXER_TYP       =:st_cntrct.c_exrc_typ
        AND   FCP_OPNPSTN_FLW    =(DECODE(:ptr_st_xchngbook->c_ordr_flw,'B','S','B'))  ;

      if ( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
      {
        fn_errlog ( c_ServiceName, "L31055", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }

      if (SQLCODE == NO_DATA_FOUND)
      {
        l_open_pos_qty  = 0;
        l_pending_qty   = 0;
      }
			}
			else
			{
				EXEC SQL
        SELECT FCP_OPNPSTN_QTY,
               DECODE(:ptr_st_xchngbook->c_ordr_flw,'B',GREATEST(ABS(FCP_IBUY_QTY),ABS(FCP_EXBUY_QTY)),GREATEST(ABS(FCP_ISELL_QTY),ABS(FCP_EXSELL_QTY)))
        INTO  :l_open_pos_qty,
              :l_pending_qty
        FROM FCP_FO_SPN_CNTRCT_PSTN
        WHERE FCP_CLM_MTCH_ACCNT =:c_cln_mtch_accnt
        AND   FCP_XCHNG_CD       =:st_cntrct.c_xchng_cd
        AND   FCP_PRDCT_TYP      =:st_cntrct.c_prd_typ
				AND		FCP_OPT_TYP				 =:st_cntrct.c_opt_typ
				AND		FCP_STRK_PRC			 =:st_cntrct.l_strike_prc
        AND   FCP_INDSTK         =:st_cntrct.c_ctgry_indstk
        AND   FCP_UNDRLYNG       =:st_cntrct.c_undrlyng
        AND   FCP_EXPRY_DT       =:st_cntrct.c_expry_dt
        AND   FCP_EXER_TYP       =:st_cntrct.c_exrc_typ
        AND   FCP_OPNPSTN_FLW    =(DECODE(:ptr_st_xchngbook->c_ordr_flw,'B','S','B'))  ;

      if ( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
      {
        fn_errlog ( c_ServiceName, "L31060", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }

      if (SQLCODE == NO_DATA_FOUND)
      {
        l_open_pos_qty  = 0;
        l_pending_qty   = 0;
      }
			}

      l_total_qty = labs(ptr_st_xchngbook->l_ord_tot_qty) + labs(l_pending_qty);

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Open position quantity is |%ld|",l_open_pos_qty);
        fn_userlog(c_ServiceName,"pending       quantity is |%ld|",l_pending_qty);
        fn_userlog(c_ServiceName,"Total         quantity is |%ld|",l_total_qty);
      }

			 /***************** Ver 2.4 starts****************/

      if ( c_clsout_stts == CLOSE_OUT && strcmp(ptr_st_xchngbook->c_xchng_cd,"NFO") == 0 )
      {
        if (ptr_st_xchngbook->c_ord_typ != IMMEDIATE_OR_CANCEL || l_total_qty > labs(l_open_pos_qty))
        {
          fn_userlog(c_ServiceName," Broker under closeout mode, can place only IOC square off order.");
          fn_errlog( c_ServiceName, "B56070", DEFMSG, ptr_st_err_msg->c_err_msg );
          return FAILURE;
        }
        else
        {
          fn_userlog(c_ServiceName," under closeout and IOC square off order allow to Place the order ");
        }
      }

      if ( c_clsout_stts == RRM_MODE && strcmp(ptr_st_xchngbook->c_xchng_cd,"NFO") == 0 )
      {
        if (ptr_st_xchngbook->c_ord_typ == IMMEDIATE_OR_CANCEL || c_req_typ == 'J')
        {
					fn_userlog(c_ServiceName," under RRM_MODE and IOC or spread order allow to Place the order ");
        }
        else
        {
					fn_userlog(c_ServiceName," Broker under RRM_MODE mode, can place only IOC and spread orders.");
          fn_errlog( c_ServiceName, "B56070", DEFMSG, ptr_st_err_msg->c_err_msg );
          return FAILURE;
        }
      }

      /*****************End Ver 2.4 ****************/

			/**if(c_brkr_stts == CLOSE_OUT && c_brkr_clsout_flg == 'Y' ) *** ver 2.3 comment ***/ 
			if(c_brkr_stts == CLOSE_OUT && c_brkr_clsout_flg == 'Y' && strcmp(ptr_st_xchngbook->c_xchng_cd,"NFO") == 0 ) /**** Ver 2.3 xchng_cd handling added **/
    	{
      	if ( ptr_st_xchngbook->c_ord_typ == IMMEDIATE_OR_CANCEL && labs(l_open_pos_qty) >= l_total_qty )
      	{
        	fn_userlog(c_ServiceName," IOC square off order allow to Place the order ");
      	}
      	else
      	{
        	fn_userlog(c_ServiceName," Broker under closeout ");
        	fn_errlog( c_ServiceName, "B56070", DEFMSG, ptr_st_err_msg->c_err_msg );
        	return FAILURE;
      	}
    	}
			/** Ver 2.3 starts ***/

    	if(strcmp(ptr_st_xchngbook->c_xchng_cd,"BFO") == 0 )
    	{
      	if( c_clsout_stts == RRM_MODE && c_brkr_clsout_flg == 'N' )
      	{
        	if( ptr_st_xchngbook->c_ord_typ != IMMEDIATE_OR_CANCEL && ptr_st_xchngbook->c_spl_flg !='C')
        	{
          	fn_userlog(c_ServiceName," Only Squareoff Orders are allowed as Broker under RRM");
          	fn_errlog( c_ServiceName, "B56044", DEFMSG, ptr_st_err_msg->c_err_msg );
          	return FAILURE;
        	}
      	}
      	if( ( c_clsout_stts == RRM_MODE && c_brkr_clsout_flg == 'Y' ) ||
          	( c_clsout_stts == CLOSE_OUT && c_brkr_stts == CLOSE_OUT ) ||
						( c_clsout_stts == 'N' && c_brkr_stts == CLOSE_OUT && c_brkr_clsout_flg =='Y' )
        	)
      	{
        	if( ptr_st_xchngbook->c_spl_flg !='C')
        	{
          	fn_userlog(c_ServiceName," Only Squareoff Orders are allowed ");
          	fn_errlog( c_ServiceName, "B56044", DEFMSG, ptr_st_err_msg->c_err_msg );
          	return FAILURE;
        	}
      	}
    	}
		/**** Ver 2.3 Ends ***/
	}
  /*** Ver 1.9 Ends ***/

  /*** Commented in ver 1.9
  if(c_brkr_stts == CLOSE_OUT && ptr_st_xchngbook->c_ord_typ!= IMMEDIATE_OR_CANCEL)
  {
    fn_errlog( c_ServiceName, "B56045", DEFMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }
  *************************************/
   if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Broker check sucess:status:%c", c_brkr_stts);
  }
  return SUCCESS;
}

int fn_chk_spncntrct	(	char * c_ServiceName,
                  			struct st_contract *ptr_st_cntrct,
                  			char *c_fum_mkt_typ,    
                  			char *c_fcm_mkt_typ,   
                  			struct st_err_msg *ptr_st_err_msg
 											)
{

  EXEC SQL BEGIN DECLARE SECTION ;
    char  c_exchng_cd[4];
    char  c_prdct_type;
    char  c_underlyng[7];
    char  c_exercise_type ;
    varchar c_expiry_dt[ LEN_DATE ];
    char  c_option_type ;
    long  l_strike_price ;
    int   i_rec_exists ;
    char  c_qt_trdng_flg ;
    char  c_act_stts ;
    char  c_fum_mrkt_typ;     
    char  c_fcm_mrkt_typ;    
  EXEC SQL END DECLARE SECTION ;


  strcpy(c_exchng_cd,ptr_st_cntrct->c_xchng_cd);
  c_prdct_type = ptr_st_cntrct->c_prd_typ ;
  strcpy(c_underlyng,ptr_st_cntrct->c_undrlyng);
  c_exercise_type = ptr_st_cntrct->c_exrc_typ ;
  c_option_type = ptr_st_cntrct->c_opt_typ ;
  l_strike_price = ptr_st_cntrct->l_strike_prc ;
  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_cntrct->c_expry_dt );
  SETLEN ( c_expiry_dt );
  rtrim ( (char *)c_expiry_dt.arr );

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "c_exchng_cd:%s:", c_exchng_cd );
    fn_userlog( c_ServiceName, "c_prdct_type:%c:",c_prdct_type);
    fn_userlog( c_ServiceName, "c_underlyng:%s:", c_underlyng );
    fn_userlog( c_ServiceName, "c_expiry_dt:%s", c_expiry_dt.arr );
    fn_userlog( c_ServiceName, "c_exercise_type:%c:", c_exercise_type );
    fn_userlog( c_ServiceName, "c_option_type:%c:", c_option_type);
    fn_userlog( c_ServiceName, "l_strike_price:%ld:", l_strike_price );
  }

  i_rec_exists = 0 ;

	EXEC SQL
    SELECT  1,
            fum_mrkt_typ
    INTO    :i_rec_exists,
            :c_fum_mrkt_typ
     FROM   fum_fo_undrlyng_mstr
     WHERE  fum_xchng_cd =  :c_exchng_cd
     /*** AND    fum_prdct_typ = decode(:c_prdct_type,'P','F',:c_prdct_type) ** Commented in Ver 1.8 ***/   
 /*   AND    fum_prdct_typ = decode(:c_prdct_type,'P','F','U','F',:c_prdct_type)  Ver 1.8 ***/
		 AND    fum_prdct_typ = decode(:c_prdct_type,'P','F','U','F','I','O',:c_prdct_type)  /** Ver 2.6 Option Plus product handled **/
		 AND    fum_undrlyng =  :c_underlyng
     AND    fum_qt_trdng_flg = 'T';

    if( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "L31065", SQLMSG,ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName, "c_fum_mrkt_typ:%c:", c_fum_mrkt_typ);
    }

    if( (i_rec_exists != 1 ) || ( SQLCODE == NO_DATA_FOUND) )
    {
      fn_errlog( c_ServiceName, "B28513", DEFMSG,ptr_st_err_msg->c_err_msg );
			/*** return ( -1 ) ; Commented In Ver 2.5 ***/
      return ( -2 ) ;      /*** Ver 2.5 ***/
    }

    *c_fum_mkt_typ  = c_fum_mrkt_typ;                                    

    /*** Commented In Ver 3.7  ***

		EXEC SQL
    SELECT fcm_qt_trdng_flg,
           fcm_act_stts,
           fcm_mrkt_typ
    INTO   :c_qt_trdng_flg,
           :c_act_stts,
           :c_fcm_mrkt_typ                                              
    FROM   fcm_fo_cntrct_mstr
    WHERE   fcm_xchng_cd = :c_exchng_cd
    *** AND     fcm_prdct_typ = decode(:c_prdct_type,'P','F',:c_prdct_type) ** Commented in Ver 1.8 ***      
	* 	AND     fcm_prdct_typ = decode(:c_prdct_type,'P','F','U','F',:c_prdct_type)  Ver 1.8 *** 
		AND     fcm_prdct_typ = decode(:c_prdct_type,'P','F','U','F','I','O',:c_prdct_type) ** Ver 2.6 Option Plus product handled **
    AND     fcm_undrlyng = :c_underlyng
    AND     fcm_expry_dt = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
    AND     fcm_exer_typ = :c_exercise_type
    AND     fcm_opt_typ =  :c_option_type
    AND     fcm_strk_prc = :l_strike_price;

    
    *** Ver 3.7 Comment Ends ***/

    /*** Ver 3.7 Starts ***/

    EXEC SQL
    SELECT ftq_qt_trdng_flg,
           ftq_act_stts,
           ftq_mrkt_typ
    INTO   :c_qt_trdng_flg,
           :c_act_stts,
           :c_fcm_mrkt_typ
    FROM   ftq_fo_trd_qt
    WHERE   ftq_xchng_cd = :c_exchng_cd
    AND     ftq_prdct_typ = decode(:c_prdct_type,'P','F','U','F','I','O',:c_prdct_type)
    AND     ftq_undrlyng = :c_underlyng
    AND     ftq_expry_dt = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
    AND     ftq_exer_typ = :c_exercise_type
    AND     ftq_opt_typ =  :c_option_type
    AND     ftq_strk_prc = :l_strike_price;

    /*** Ver 3.7 Ends ***/

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog( c_ServiceName, "L31070", SQLMSG,ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName, "c_fcm_mrkt_typ:%c:", c_fcm_mrkt_typ);
    }

    if( ( c_qt_trdng_flg != 'T' ) || ( SQLCODE == NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "B28514", " ",ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

    if( c_act_stts != 'A' )
    {
      fn_errlog( c_ServiceName, "B28515", " ",ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

    *c_fcm_mkt_typ  = c_fcm_mrkt_typ;                                       

    return ( 0 );
}

/****** Ver 4.5 Starts ***********/

int fn_chk_trail_spncntrct	(	char * c_ServiceName,
															struct st_contract *ptr_st_cntrct,
                              char c_usr_flg,
															char *c_fum_mkt_typ,    
															char *c_fcm_mkt_typ,   
															struct st_err_msg *ptr_st_err_msg
 														)
{

  EXEC SQL BEGIN DECLARE SECTION ;
    char  c_exchng_cd[4];
    char  c_prdct_type;
    char  c_underlyng[7];
    char  c_exercise_type ;
    varchar c_expiry_dt[ LEN_DATE ];
    char  c_option_type ;
    long  l_strike_price ;
    int   i_rec_exists ;
    char  c_qt_trdng_flg ;
    char  c_act_stts ;
    char  c_fum_mrkt_typ;     
    char  c_fcm_mrkt_typ;
		char  c_ftq_trail_flg;
    char  c_fum_qt_trdng_flg;
    char  c_fum_sltp_trail_flg;
  EXEC SQL END DECLARE SECTION ;


  strcpy(c_exchng_cd,ptr_st_cntrct->c_xchng_cd);
  c_prdct_type = ptr_st_cntrct->c_prd_typ ;
  strcpy(c_underlyng,ptr_st_cntrct->c_undrlyng);
  c_exercise_type = ptr_st_cntrct->c_exrc_typ ;
  c_option_type = ptr_st_cntrct->c_opt_typ ;
  l_strike_price = ptr_st_cntrct->l_strike_prc ;
  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_cntrct->c_expry_dt );
  SETLEN ( c_expiry_dt );
  rtrim ( (char *)c_expiry_dt.arr );

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "c_exchng_cd:%s:", c_exchng_cd );
    fn_userlog( c_ServiceName, "c_prdct_type:%c:",c_prdct_type);
    fn_userlog( c_ServiceName, "c_underlyng:%s:", c_underlyng );
    fn_userlog( c_ServiceName, "c_expiry_dt:%s", c_expiry_dt.arr );
    fn_userlog( c_ServiceName, "c_exercise_type:%c:", c_exercise_type );
    fn_userlog( c_ServiceName, "c_option_type:%c:", c_option_type);
    fn_userlog( c_ServiceName, "l_strike_price:%ld:", l_strike_price );
  }

  i_rec_exists = 0 ;

	EXEC SQL
    SELECT  1,
            fum_mrkt_typ,
            NVL(fum_qt_trdng_flg,'Q'),
            NVL(fum_sltp_trail_flg,'N')
    INTO    :i_rec_exists,
            :c_fum_mrkt_typ,
            :c_fum_qt_trdng_flg,
            :c_fum_sltp_trail_flg
     FROM   fum_fo_undrlyng_mstr
     WHERE  fum_xchng_cd =  :c_exchng_cd
		 AND    fum_prdct_typ = decode(:c_prdct_type,'P','F','U','F','I','O',:c_prdct_type) 
		 AND    fum_undrlyng =  :c_underlyng;

    if( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "L31075", SQLMSG,ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName, "c_fum_mrkt_typ:%c:", c_fum_mrkt_typ);
    }

    if(c_usr_flg == 'P')
    {
      if(c_fum_qt_trdng_flg != 'T')
      {
    		fn_errlog( c_ServiceName, "L31080", "You cannot place orders as this underlying is disabled",ptr_st_err_msg->c_err_msg );
        strcpy( ptr_st_err_msg->c_err_msg, "You cannot place orders as this underlying is disabled" );
        return ( -2 ) ;
      }

      if(c_fum_sltp_trail_flg != 'Y')
      {
   			fn_errlog( c_ServiceName, "L31085", "You cannot place orders as Price Improvement Order is not allowed in this underlying",ptr_st_err_msg->c_err_msg);
      	strcpy( ptr_st_err_msg->c_err_msg, "You cannot place orders as Price Improvement Order is not allowed in this underlying");
        return ( -2 ) ;
      }
    }
    else if(c_usr_flg == 'M')
    {
      if(c_fum_qt_trdng_flg != 'T')
      {
     		fn_errlog( c_ServiceName, "L31090", "Currently this Underlying has been disabled and you cannot modify the order. Youmay please cancel your order.",ptr_st_err_msg->c_err_msg );
        strcpy( ptr_st_err_msg->c_err_msg, "Currently this Underlying has been disabled and you cannot modify the order. You may please cancel your order.");
        return ( -2 ) ;
      }

      if(c_fum_sltp_trail_flg != 'Y')
      {
      	fn_errlog( c_ServiceName, "L31095", "Currently Price Improvement Order in this Underlying has been disabled and you cannot modify the order. You may please cancel your order.",ptr_st_err_msg->c_err_msg);
        strcpy( ptr_st_err_msg->c_err_msg, "Currently Price Improvement Order in this Underlying has been disabled and you cannot modify the order. You may please cancel your order.");
        return ( -2 ) ;
      }
    }

    if( (i_rec_exists != 1 ) || ( SQLCODE == NO_DATA_FOUND) )
    {
      fn_errlog( c_ServiceName, "B28513", DEFMSG,ptr_st_err_msg->c_err_msg );
      return ( -2 ) ;     
    }

    *c_fum_mkt_typ  = c_fum_mrkt_typ;                                    

		EXEC SQL
    SELECT ftq_qt_trdng_flg,
           ftq_act_stts,
           ftq_mrkt_typ,
					 NVL(FTQ_TRAIL_FLG,'N')
    INTO   :c_qt_trdng_flg,
           :c_act_stts,
           :c_fcm_mrkt_typ,
					 :c_ftq_trail_flg
    FROM   ftq_fo_trd_qt
    WHERE   ftq_xchng_cd = :c_exchng_cd
    AND     ftq_prdct_typ = decode(:c_prdct_type,'P','F','U','F','I','O',:c_prdct_type) 
    AND     ftq_undrlyng = :c_underlyng
    AND     ftq_expry_dt = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
    AND     ftq_exer_typ = :c_exercise_type
    AND     ftq_opt_typ =  :c_option_type
    AND     ftq_strk_prc = :l_strike_price;



    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog( c_ServiceName, "L31100", SQLMSG,ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName, "FTQ Market Type     :%c:", c_fcm_mrkt_typ);
      fn_userlog( c_ServiceName, "FTQ Act Stts        :%c:", c_act_stts);
      fn_userlog( c_ServiceName, "FTQ QT Trading Flag :%c:",c_qt_trdng_flg);
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName, "c_fcm_mrkt_typ:%c:", c_fcm_mrkt_typ);
    }

    if( ( c_qt_trdng_flg != 'T')  || ( c_ftq_trail_flg != 'Y') || ( SQLCODE == NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "B28514", " ",ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

    if( c_act_stts != 'A' )
    {
      fn_errlog( c_ServiceName, "B28515", " ",ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

    *c_fcm_mkt_typ  = c_fcm_mrkt_typ;                                       

    return ( 0 );
}

/******* Ver 4.5 Ends ***************/


int fn_chk_spncntrct_sqoff(	char * c_ServiceName,
                        		struct st_contract *ptr_st_cntrct,
                        		char *c_fum_mkt_typ,              
                        		char *c_fcm_mkt_typ,             
                        		struct st_err_msg *ptr_st_err_msg
 													)
{

  EXEC SQL BEGIN DECLARE SECTION ;
    char  c_exchng_cd[4];
    char  c_prdct_type;
    char  c_underlyng[7];
    char  c_exercise_type ;
    varchar c_expiry_dt[ LEN_DATE ];
    char  c_option_type ;
    long  l_strike_price ;
    int   i_rec_exists ;
    char  c_qt_trdng_flg ;
    char  c_act_stts ;
    char  c_fum_mrkt_typ;         
    char  c_fcm_mrkt_typ;         
  EXEC SQL END DECLARE SECTION ;


  strcpy(c_exchng_cd,ptr_st_cntrct->c_xchng_cd);
  c_prdct_type = ptr_st_cntrct->c_prd_typ ;
  strcpy(c_underlyng,ptr_st_cntrct->c_undrlyng);
  c_exercise_type = ptr_st_cntrct->c_exrc_typ ;
  c_option_type = ptr_st_cntrct->c_opt_typ ;
  l_strike_price = ptr_st_cntrct->l_strike_prc ;
  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_cntrct->c_expry_dt );
  SETLEN ( c_expiry_dt );
  rtrim ( (char *)c_expiry_dt.arr );

   if(DEBUG_MSG_LVL_3)
   {
    fn_userlog( c_ServiceName, "c_exchng_cd:%s:", c_exchng_cd );
    fn_userlog( c_ServiceName, "c_prdct_type:%c:",c_prdct_type);
    fn_userlog( c_ServiceName, "c_underlyng:%s:", c_underlyng );
    fn_userlog( c_ServiceName, "c_expiry_dt:%s", c_expiry_dt.arr );
    fn_userlog( c_ServiceName, "c_exercise_type:%c:", c_exercise_type );
    fn_userlog( c_ServiceName, "c_option_type:%c:", c_option_type);
    fn_userlog( c_ServiceName, "l_strike_price:%ld:", l_strike_price );
  }

  i_rec_exists = 0 ;

	 EXEC SQL
    SELECT  1,
            fum_mrkt_typ
     INTO   :i_rec_exists,
            :c_fum_mrkt_typ
     FROM   fum_fo_undrlyng_mstr
     WHERE  fum_xchng_cd =  :c_exchng_cd
     AND    fum_prdct_typ = :c_prdct_type
     AND    fum_undrlyng =  :c_underlyng
     AND    fum_qt_trdng_flg in ('Q','T') ;

    if( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "L31105", SQLMSG,ptr_st_err_msg->c_err_msg);
      return ( -1 ) ;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName, "c_fum_mrkt_typ:%c:", c_fum_mrkt_typ);
    }

    if( (i_rec_exists != 1 ) || ( SQLCODE == NO_DATA_FOUND) )
    {
      fn_errlog( c_ServiceName, "B28513", DEFMSG,ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

    *c_fum_mkt_typ = c_fum_mrkt_typ;  

  /*** Commented In Ver 3.7  ***

  EXEC SQL
    SELECT fcm_qt_trdng_flg,
           fcm_act_stts,
           fcm_mrkt_typ
    INTO   :c_qt_trdng_flg,
           :c_act_stts,
           :c_fcm_mrkt_typ           
    FROM  fcm_fo_cntrct_mstr
    WHERE   fcm_xchng_cd = :c_exchng_cd
    AND     fcm_prdct_typ = :c_prdct_type
    AND     fcm_undrlyng = :c_underlyng
    AND     fcm_expry_dt = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
    AND     fcm_exer_typ = :c_exercise_type
    AND     fcm_opt_typ =  :c_option_type
    AND     fcm_strk_prc = :l_strike_price;

   *** Ver 3.7 Comment Ends ***/

    /*** Ver 3.7 Starts ***/

  EXEC SQL
    SELECT ftq_qt_trdng_flg,
           ftq_act_stts,
           ftq_mrkt_typ
    INTO   :c_qt_trdng_flg,
           :c_act_stts,
           :c_fcm_mrkt_typ
    FROM  ftq_fo_trd_qt
    WHERE   ftq_xchng_cd = :c_exchng_cd
    AND     ftq_prdct_typ = :c_prdct_type
    AND     ftq_undrlyng = :c_underlyng
    AND     ftq_expry_dt = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
    AND     ftq_exer_typ = :c_exercise_type
    AND     ftq_opt_typ =  :c_option_type
    AND     ftq_strk_prc = :l_strike_price;

    /*** Ver 3.7 Ends ***/

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog( c_ServiceName, "L31110", SQLMSG,ptr_st_err_msg->c_err_msg );
			  return ( -1 ) ;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName, "c_fcm_mrkt_typ:%c:", c_fcm_mrkt_typ);
    }

    if( ( ( c_qt_trdng_flg != 'Q' ) && ( c_qt_trdng_flg != 'T' ) )
        || ( SQLCODE == NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "B28514", " ",ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

    *c_fcm_mkt_typ = c_fcm_mrkt_typ;     

    return ( 0 );
}


/****** Ver 4.5 Starts *****************/

int fn_chk_trail_spncntrct_sqoff(	char * c_ServiceName,
																	struct st_contract *ptr_st_cntrct,
																	char *c_fum_mkt_typ,              
																	char *c_fcm_mkt_typ,             
																	struct st_err_msg *ptr_st_err_msg
 																)
{

  EXEC SQL BEGIN DECLARE SECTION ;
    char  c_exchng_cd[4];
    char  c_prdct_type;
    char  c_underlyng[7];
    char  c_exercise_type ;
    varchar c_expiry_dt[ LEN_DATE ];
    char  c_option_type ;
    long  l_strike_price ;
    int   i_rec_exists ;
    char  c_qt_trdng_flg ;
    char  c_act_stts ;
    char  c_fum_mrkt_typ;         
    char  c_fcm_mrkt_typ;
		char  c_ftq_trail_flg;
  EXEC SQL END DECLARE SECTION ;


  strcpy(c_exchng_cd,ptr_st_cntrct->c_xchng_cd);
  c_prdct_type = ptr_st_cntrct->c_prd_typ ;
  strcpy(c_underlyng,ptr_st_cntrct->c_undrlyng);
  c_exercise_type = ptr_st_cntrct->c_exrc_typ ;
  c_option_type = ptr_st_cntrct->c_opt_typ ;
  l_strike_price = ptr_st_cntrct->l_strike_prc ;
  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_cntrct->c_expry_dt );
  SETLEN ( c_expiry_dt );
  rtrim ( (char *)c_expiry_dt.arr );

   if(DEBUG_MSG_LVL_3)
   {
    fn_userlog( c_ServiceName, "c_exchng_cd:%s:", c_exchng_cd );
    fn_userlog( c_ServiceName, "c_prdct_type:%c:",c_prdct_type);
    fn_userlog( c_ServiceName, "c_underlyng:%s:", c_underlyng );
    fn_userlog( c_ServiceName, "c_expiry_dt:%s", c_expiry_dt.arr );
    fn_userlog( c_ServiceName, "c_exercise_type:%c:", c_exercise_type );
    fn_userlog( c_ServiceName, "c_option_type:%c:", c_option_type);
    fn_userlog( c_ServiceName, "l_strike_price:%ld:", l_strike_price );
  }

  i_rec_exists = 0 ;

   EXEC SQL
    SELECT  1,
            fum_mrkt_typ
     INTO   :i_rec_exists,
            :c_fum_mrkt_typ
     FROM   fum_fo_undrlyng_mstr
     WHERE  fum_xchng_cd =  :c_exchng_cd
     AND    fum_prdct_typ = :c_prdct_type
     AND    fum_undrlyng =  :c_underlyng
     AND    fum_qt_trdng_flg in ('Q','T')
     AND    FUM_SLTP_TRAIL_FLG  in ('Y','N');

    if( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "L31115", SQLMSG,ptr_st_err_msg->c_err_msg);
      return ( -1 ) ;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName, "c_fum_mrkt_typ:%c:", c_fum_mrkt_typ);
    }

    if( (i_rec_exists != 1 ) || ( SQLCODE == NO_DATA_FOUND) )
    {
      fn_errlog( c_ServiceName, "B28513", DEFMSG,ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

    *c_fum_mkt_typ = c_fum_mrkt_typ;  


	EXEC SQL
    SELECT ftq_qt_trdng_flg,
           ftq_act_stts,
           ftq_mrkt_typ,
					 NVL(ftq_trail_flg,'N')
    INTO   :c_qt_trdng_flg,
           :c_act_stts,
           :c_fcm_mrkt_typ,
					 :c_ftq_trail_flg
    FROM  ftq_fo_trd_qt
    WHERE   ftq_xchng_cd = :c_exchng_cd
    AND     ftq_prdct_typ = :c_prdct_type
    AND     ftq_undrlyng = :c_underlyng
    AND     ftq_expry_dt = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
    AND     ftq_exer_typ = :c_exercise_type
    AND     ftq_opt_typ =  :c_option_type
    AND     ftq_strk_prc = :l_strike_price;

    /*** Ver 3.7 Ends ***/

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog( c_ServiceName, "L31120", SQLMSG,ptr_st_err_msg->c_err_msg );
			  return ( -1 ) ;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName, "FTQ Market Type     :%c:", c_fcm_mrkt_typ);
      fn_userlog( c_ServiceName, "FTQ Act Stts        :%c:", c_act_stts);
      fn_userlog( c_ServiceName, "FTQ QT Trading Flag :%c:",c_qt_trdng_flg);

    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName, "c_fcm_mrkt_typ:%c:", c_fcm_mrkt_typ);
    }

    if( ( ( c_qt_trdng_flg != 'Q' ) && ( c_qt_trdng_flg != 'T' )) ||  
				(	( c_ftq_trail_flg != 'Y'  ) && ( c_ftq_trail_flg != 'N' )) ||
         ( SQLCODE == NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "B28514", " ",ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

    *c_fcm_mkt_typ = c_fcm_mrkt_typ;     

    return ( 0 );
}


int fn_cal_spn_incrmntl_price(char *c_ServiceName,
                          char c_flag,
                          char c_cep_action_flag,
                          char *c_err_msg,
                          struct st_orderbook *ptr_st_orderbook,
                          struct st_xchngbook *ptr_st_xchngbook)
{
  char  c_exchng_cd[4];
  char  c_prdct_type;
  char  c_underlyng[7];
	char  c_pipe_id[3];
  char  c_ordr_flw;
  char  c_sem_map_vl[20];
  char  c_ctgry_indstk;
  char  c_expry_dt[12];
  char  c_cln_mtch_accnt[11];
  char  c_exrc_typ;
  char  c_contract_desc[50];
  char  c_ordr_ref_no[21];
	 char  c_xchng_stts;
  char  c_opt_type='*';

  char c_prcimpv_flg='\0';

  long  l_sltp_update_cnd = 0;

  long l_incr_price = 0;
  long l_prev_incr_prc = 0;
  long l_lst_trd_prc = 0;
  long l_stp_lss_trgr_prc = 0;
  long l_trail_amnt = 0;
  long l_lmt_offset = 0;
  long l_strike_prc=0;
  long l_ord_tot_qty=0; 
  long l_exctd_qty=0;
	long l_can_qty=0;
  long l_ordrbk_mdfctn_cntr=0;
	long l_xchngbk_mdfctn_cntr=0;
  long l_trail_amt=0;
  long d_lmt_offset=0;
  long l_prev_mod_cntr=0;

  MEMSET(c_exchng_cd);
  MEMSET(c_underlyng);
  MEMSET(c_sem_map_vl);
  MEMSET(c_expry_dt);
  MEMSET(c_contract_desc);
  MEMSET(c_ordr_ref_no);
  MEMSET(c_cln_mtch_accnt);

  strcpy(c_exchng_cd,ptr_st_orderbook->c_xchng_cd);
  strcpy(c_underlyng,ptr_st_orderbook->c_undrlyng);
  strcpy(c_expry_dt,ptr_st_orderbook->c_expry_dt);
  strcpy(c_ordr_ref_no,ptr_st_orderbook->c_ordr_rfrnc);
  strcpy(c_cln_mtch_accnt,ptr_st_orderbook->c_cln_mtch_accnt);
  strcpy(c_pipe_id,ptr_st_orderbook->c_pipe_id);
  c_opt_type=ptr_st_orderbook->c_opt_typ;

  c_prdct_type = ptr_st_orderbook->c_prd_typ ;
  c_ordr_flw = ptr_st_orderbook->c_ordr_flw;
  c_ctgry_indstk = ptr_st_orderbook->c_ctgry_indstk;
  c_exrc_typ = ptr_st_orderbook->c_exrc_typ;


  l_strike_prc=ptr_st_orderbook->l_strike_prc;
  l_ord_tot_qty=ptr_st_orderbook->l_ord_tot_qty;
	l_exctd_qty=ptr_st_orderbook->l_exctd_qty;
	l_can_qty=ptr_st_orderbook->l_can_qty;
	l_ordrbk_mdfctn_cntr=ptr_st_orderbook->l_mdfctn_cntr;
	l_xchngbk_mdfctn_cntr=ptr_st_xchngbook->l_mdfctn_cntr; 

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "c_exchng_cd:%s:", c_exchng_cd );
    fn_userlog( c_ServiceName, "c_underlyng:%s:", c_underlyng );
    fn_userlog( c_ServiceName, "c_expry_dt:%s:", c_expry_dt);
		fn_userlog( c_ServiceName, "c_ordr_ref_no:%s:", c_ordr_ref_no);
    fn_userlog( c_ServiceName, "c_prdct_type:%c:", c_prdct_type);
    fn_userlog( c_ServiceName, "c_ordr_flw:%c:", c_ordr_flw );
		fn_userlog( c_ServiceName, "c_cln_mtch_accnt:%s:", c_cln_mtch_accnt);
		fn_userlog( c_ServiceName, "l_xchngbk_mdfctn_cntr :%ld:",l_xchngbk_mdfctn_cntr);
  }

  if( c_cep_action_flag != 'A' && c_cep_action_flag !='R' && c_cep_action_flag !='J' )
  {
     fn_userlog( c_ServiceName, "Invalid CEP Action flag ");
     return -1;
  } 


  if( c_cep_action_flag == 'A' )
  {
   EXEC SQL
      SELECT NVL(FXB_LTP_RT,0),
             NVL(FXB_PRCIMPV_FLG,'N'),
             NVL(FXB_TRAIL_AMT,0),
             NVL(FXB_LMT_OFFSET,0)
        INTO :l_lst_trd_prc ,
             :c_prcimpv_flg,
             :l_trail_amt,
             :l_lmt_offset
        FROM FXB_FO_XCHNG_BOOK
       WHERE FXB_ORDR_RFRNC=:c_ordr_ref_no
         AND FXB_MDFCTN_CNTR=:l_ordrbk_mdfctn_cntr;
    if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31005", SQLMSG,c_err_msg );
      return -1;
    }

      EXEC SQL
         SELECT  NVL(FMM_SLTP_UPD_CND,0)*100
           INTO  :l_sltp_update_cnd
           FROM  FMM_FO_MRGN_MSTR
          WHERE  FMM_PRDCT_TYP = :c_prdct_type
           AND  FMM_UNDRLYNG  = :c_underlyng
            AND  FMM_XCHNG_CD  = :c_exchng_cd
          AND    FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
                                  FROM    FCB_FO_CLN_BSKT_ALLTD
                                  WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
                                                        FROM    CLM_CLNT_MSTR
                                                        WHERE   CLM_MTCH_ACCNT = :c_cln_mtch_accnt)) ;

      if ( SQLCODE  !=  0  && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog ( c_ServiceName, "S31010", SQLMSG,c_err_msg );
        return -1;
      }

    EXEC SQL
      SELECT NVL(FTO_INCR_PRC,0),
             FTO_MDFCTN_CNTR
        INTO :l_prev_incr_prc,
             :l_prev_mod_cntr
        FROM FTO_FO_TRAIL_ORD
       WHERE FTO_ORDR_RFRNC=:c_ordr_ref_no;
    if ( SQLCODE  !=  0  && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog ( c_ServiceName, "S31015", SQLMSG,c_err_msg );
      return -1;
    }

    if( SQLCODE == NO_DATA_FOUND )  /*** New Trail Order ***/
    {

      if(c_ordr_flw == 'S')
      {
        /*** Calculation of incremental Price at the time of order Placement. ***/
        l_incr_price = l_lst_trd_prc + l_sltp_update_cnd;
        fn_userlog( c_ServiceName, "Incremental Price for Sell is :%ld:",l_incr_price);
      }
      else if(c_ordr_flw == 'B') /*** Incr. price calculation for Buy order. ***/
      {
        l_incr_price = l_lst_trd_prc - l_sltp_update_cnd;
        fn_userlog( c_ServiceName, "Incremental Price for Buy is :%ld:",l_incr_price);
      }
  
      EXEC SQL
          INSERT INTO FTO_FO_TRAIL_ORD
          (
          FTO_CLM_MTCH_ACCNT,
          FTO_ORDR_RFRNC,
          FTO_PIPE_ID,
          FTO_XCHNG_CD,
          FTO_PRDCT_TYP,
          FTO_INDSTK,
          FTO_UNDRLYNG,
          FTO_EXPRY_DT,
          FTO_EXER_TYP,
          FTO_OPT_TYP,
          FTO_STRK_PRC,
          FTO_ORDR_FLW,
          FTO_ORDR_TOT_QTY,
          FTO_EXEC_QTY,
          FTO_CNCL_QTY,
          FTO_MDFCTN_CNTR,
          FTO_INCR_PRC,
          FTO_LTP_RT,
          FTO_STATUS_FLG,
          FTO_SEQUENCE_NO,
          FTO_CEP_RMV_FLG,
          FTO_CNTRCT_DESC
          )
          VALUES
          (
           :c_cln_mtch_accnt,
           :c_ordr_ref_no,
           :c_pipe_id,
           :c_exchng_cd,
           :c_prdct_type,
           :c_ctgry_indstk,
           :c_underlyng,
           :c_expry_dt,
           :c_exrc_typ,
           :c_opt_type,
           :l_strike_prc,
           :c_ordr_flw,
           :l_ord_tot_qty,
           :l_exctd_qty,
           :l_can_qty,
           :l_ordrbk_mdfctn_cntr,
           :l_incr_price,
           :l_lst_trd_prc,
           'N',
           fo_future_sltp_trail_seq.NEXTVAL,
           :c_cep_action_flag,
           :c_contract_desc
           );

       if( SQLCODE != 0 )
       {
        fn_errlog( c_ServiceName, "S31020",SQLMSG,c_err_msg);
        return FAILURE;
      }
      EXEC SQL
      UPDATE FXB_FO_XCHNG_BOOK
      SET    FXB_INCRMNT_PRC=:l_incr_price,
             FXB_TRL_UPD_COND_VAL=:l_sltp_update_cnd
      WHERE  FXB_XCHNG_CD=:c_exchng_cd
      AND    FXB_ORDR_RFRNC=:c_ordr_ref_no
      AND    FXB_MDFCTN_CNTR=:l_xchngbk_mdfctn_cntr;

      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31025",SQLMSG,c_err_msg);
        return FAILURE;
      }

      EXEC SQL
           UPDATE FOD_FO_ORDR_DTLS
              SET FOD_PRCIMPV_FLG = :c_prcimpv_flg,
                  FOD_TRAIL_AMT =:l_trail_amt,
                  FOD_LMT_OFFSET =:l_lmt_offset
                  /**FOD_INCRMNT_PRC = :l_incr_price **/
            WHERE FOD_ORDR_RFRNC=:c_ordr_ref_no;
      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31030",SQLMSG,c_err_msg);
        return FAILURE;
      }

    }
    else  /*** Subsequent Modifications ****/
    {

      /**************
      EXEC SQL
        SELECT NVL(FXB_TRL_UPD_COND_VAL,0)
          INTO :l_sltp_update_cnd
          FROM FXB_FO_XCHNG_BOOK
         WHERE FXB_ORDR_RFRNC=:c_ordr_ref_no
           AND FXB_MDFCTN_CNTR=:l_prev_mod_cntr;
      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31035",SQLMSG,c_err_msg);
        return FAILURE;
      }
      *****************/

      if(c_ordr_flw == 'S')
      {
       /*** Calculation of incremental Price at the time of Modification and Modification Rejection of order. ***/
         if ( l_lst_trd_prc >= l_prev_incr_prc)
         {
           if( (l_lst_trd_prc-l_prev_incr_prc) >= l_sltp_update_cnd)
           {
             l_incr_price = l_lst_trd_prc + l_sltp_update_cnd;
           }
           else
           {
             l_incr_price=l_prev_incr_prc+l_sltp_update_cnd;
           }
         }
         else
         {
           l_incr_price = l_prev_incr_prc;
         }
         if(DEBUG_MSG_LVL_3)
         {
           fn_userlog( c_ServiceName, "Incremental Price for Sell is :%ld:",l_incr_price);
         }
      }
      else if(c_ordr_flw == 'B') /*** Incr. price calculation for Buy order. ***/
      {
        if ( l_lst_trd_prc <= l_prev_incr_prc)
        {
          if( (l_prev_incr_prc-l_lst_trd_prc) >= l_sltp_update_cnd )
          {
            l_incr_price = l_lst_trd_prc - l_sltp_update_cnd;
          }
          else
          {
            l_incr_price=l_prev_incr_prc-l_sltp_update_cnd;
          }
        }
        else
        {
          l_incr_price = l_prev_incr_prc;
        }
        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog( c_ServiceName, "Incremental Price for Buy is :%ld:",l_incr_price);
        }
      }

      EXEC SQL
      UPDATE FXB_FO_XCHNG_BOOK
      SET    FXB_INCRMNT_PRC=:l_incr_price,
             FXB_TRL_UPD_COND_VAL=:l_sltp_update_cnd
      WHERE  FXB_XCHNG_CD=:c_exchng_cd
      AND    FXB_ORDR_RFRNC=:c_ordr_ref_no
      AND    FXB_MDFCTN_CNTR=:l_xchngbk_mdfctn_cntr;

      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31040",SQLMSG,c_err_msg);
        return FAILURE;
      }

      EXEC SQL
           UPDATE FOD_FO_ORDR_DTLS
              SET FOD_PRCIMPV_FLG = :c_prcimpv_flg,
                  FOD_TRAIL_AMT =:l_trail_amt,
                  FOD_LMT_OFFSET =:l_lmt_offset
                  /**FOD_INCRMNT_PRC = :l_incr_price **/
            WHERE FOD_ORDR_RFRNC=:c_ordr_ref_no;
      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31045",SQLMSG,c_err_msg);
        return FAILURE;
      }

      EXEC SQL
      UPDATE FTO_FO_TRAIL_ORD
       SET   FTO_LTP_RT=:l_lst_trd_prc,
             FTO_INCR_PRC=:l_incr_price,
             FTO_ORDR_FLW=:c_ordr_flw,
             FTO_STATUS_FLG='N',
             FTO_CEP_RMV_FLG=:c_cep_action_flag,
             FTO_MDFCTN_CNTR=:l_ordrbk_mdfctn_cntr,
             FTO_ORDR_TOT_QTY=:l_ord_tot_qty,
             FTO_EXEC_QTY=:l_exctd_qty,
             FTO_CNCL_QTY=:l_can_qty
      WHERE  FTO_ORDR_RFRNC=:c_ordr_ref_no;

      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31050",SQLMSG,c_err_msg);
        return FAILURE;
      }
    }

  }
  else
  {
    EXEC SQL
      UPDATE FTO_FO_TRAIL_ORD
        SET  FTO_STATUS_FLG='N',
             FTO_CEP_RMV_FLG=DECODE(:c_cep_action_flag,'J','A',:c_cep_action_flag),
             FTO_MDFCTN_CNTR=DECODE(:c_cep_action_flag,'J',:l_ordrbk_mdfctn_cntr,FTO_MDFCTN_CNTR)
      WHERE  FTO_ORDR_RFRNC=:c_ordr_ref_no;

    if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog( c_ServiceName, "S31055",SQLMSG,c_err_msg);
      return FAILURE;
    }
  }

  return 0;
}

/****** Ver 4.5 Ends *******************/

int fn_chk_spndtallwd (	char *c_ServiceName,
                      	struct st_usr_prfl  *ptr_usr_prfl,
                      	char *c_user_id,
                      	struct st_err_msg *ptr_st_err_msg
 											)
{

  char  c_dt_allwd_flg;
  char  c_dl_setup_no[4];

  int   i_dl_setup_no;


	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"User ID Is :%s:",ptr_usr_prfl->c_user_id);
	}

  EXEC SQL
    SELECT  NVL(USR_DT_ALLWD_FLG,'N'),
            NVL(USR_DL_SETUP_NO,0)
    INTO    :c_dt_allwd_flg,
            :i_dl_setup_no
    FROM    USR_USER_MASTER
    WHERE   USR_USR_ID =  :ptr_usr_prfl->c_user_id;

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "L31125", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  strcpy(c_user_id,ptr_usr_prfl->c_user_id);

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Order Book User ID Is :%s:",c_user_id);
	}

  if ( c_dt_allwd_flg == 'Y')
  {
    strcat(c_user_id,"_");
    sprintf(c_dl_setup_no,"%d",i_dl_setup_no);
    strcat(c_user_id,c_dl_setup_no);
		
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Userd ID With DL SetUp No. Is :%s:",c_user_id);
		}
  }
  else
  {
    strcat(c_user_id,"_0");
  }


  return 0 ;
}


int fn_chk_spntrdng_limit	(	char *c_ServiceName,
                    				long l_ord_tot_qty,
                    				long l_ord_lmt_rt,
                    				char *c_pass_req_flg,
                    				struct st_usr_prfl *ptr_st_usr_prfl,
                    				struct st_err_msg *ptr_st_err_msg
 													)
{
 
  double  d_trd_pass_lmt;
 	long l_clnt_ctgry;
  double  d_ord_lmt_rt;
  double d_ordr_val;


  EXEC SQL
   SELECT NVL(CCG_FO_TRD_PSWD_LMT,0) ,
          CCG_CLNT_CTGRY_ID
   INTO  :d_trd_pass_lmt,
         :l_clnt_ctgry
   FROM  clm_clnt_mstr clm,
         ccg_clnt_ctgry ccg
   WHERE clm.clm_clnt_ctgry_id=ccg.ccg_clnt_ctgry_id
   AND   clm.clm_mtch_accnt = (SELECT uac_clm_mtch_accnt
                              FROM     uac_usr_accnts
                              WHERE    UAC_CLM_MTCH_ACCNT = :ptr_st_usr_prfl->c_cln_mtch_accnt
                              AND      rownum = 1);
  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "L31130", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  d_ord_lmt_rt = l_ord_lmt_rt;
  d_ordr_val   = (l_ord_tot_qty * d_ord_lmt_rt/100 ) ;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"category id is:%ld:",l_clnt_ctgry);
    fn_userlog(c_ServiceName,"Total Ordered Qty:%ld:",l_ord_tot_qty);
    fn_userlog(c_ServiceName,"Ordered Limit Rate:%lf:",d_ord_lmt_rt);
    fn_userlog(c_ServiceName,"Trading Password Limit is:%lf:",d_trd_pass_lmt);
    fn_userlog(c_ServiceName,"Estimated Order Value:%lf:",d_ordr_val);
  }

  if(d_trd_pass_lmt < d_ordr_val)
  {
    *c_pass_req_flg = YES ;
  }
	else
  {
    *c_pass_req_flg = NO;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"c_pass_req_flg:%c", *c_pass_req_flg);
  }
  return SUCCESS;
}


int fn_vrfy_spnprc_band ( char c_ServiceName [ 33 ],
                       		char c_xchng_cd [ 4 ],
                       		char c_prd_typ,
                       		char c_undrlyng [ 7 ],
                       		long l_ord_limit_rt,
                       		long l_base_prc,
                       		struct st_err_msg *ptr_st_err_msg
 												)
{

  long l_upbnd_rt = 0;
  long l_lwbnd_rt = 0;

  EXEC SQL BEGIN DECLARE SECTION;
    char    sql_c_xchng_cd[4] ;
    char    sql_c_prd_typ ;
    char    sql_c_undrlyng[7] ;
    double  d_prc_bnd_prcntg;
  EXEC SQL END DECLARE SECTION;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "c_xchng_cd:%s:", c_xchng_cd );
    fn_userlog( c_ServiceName, "c_prd_typ:%c:",c_prd_typ);
    fn_userlog( c_ServiceName, "c_undrlyng:%s:", c_undrlyng );
    fn_userlog( c_ServiceName, "l_ord_limit_rt:%ld:", l_ord_limit_rt );
    fn_userlog( c_ServiceName, "l_base_prc:%ld:", l_base_prc );
  }

  strcpy ( sql_c_xchng_cd, c_xchng_cd );
  sql_c_prd_typ = c_prd_typ;
  strcpy ( sql_c_undrlyng, c_undrlyng );

  EXEC SQL
    SELECT  NVL( fum_prc_bnd_prcntg, 0 )
    INTO    :d_prc_bnd_prcntg
    FROM    fum_fo_undrlyng_mstr
    WHERE   fum_xchng_cd = :sql_c_xchng_cd
    AND     fum_prdct_typ = :sql_c_prd_typ
    AND     fum_undrlyng = :sql_c_undrlyng;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31135", SQLMSG, c_err_msg );
    return ( -1 );
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "d_prc_bnd_prcntg:%lf:", d_prc_bnd_prcntg );
	}

  if ( d_prc_bnd_prcntg == 0 )
  {
    return ( 0 );
  }

  l_upbnd_rt =  (long) ( l_base_prc + ( l_base_prc * d_prc_bnd_prcntg / 100.00 ) );

  l_lwbnd_rt =  (long) ( l_base_prc - ( l_base_prc * d_prc_bnd_prcntg / 100.00 ) );

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "l_upbnd_rt:%ld:", l_upbnd_rt );
    fn_userlog( c_ServiceName, "l_lwbnd_rt:%ld:", l_lwbnd_rt );
  }

  if ( ( l_ord_limit_rt > l_upbnd_rt ) || ( l_ord_limit_rt < l_lwbnd_rt )  )
  {
    fn_errlog( c_ServiceName, "B28006", " ",ptr_st_err_msg->c_err_msg );
    return ( -1 ) ;
  }

}

/***************** Ver 2.1 Starts ***************/

int fn_vrfy_spnprc_band_mkt ( char c_ServiceName [ 33 ],
                          char c_xchng_cd [ 4 ],
                          char c_prd_typ,
                          char c_undrlyng [ 7 ],
                          long l_ord_limit_rt,
                          char c_expry_dt [ 21 ],
                          struct st_err_msg *ptr_st_err_msg
                        )
{

  long l_upbnd_rt = 0;
  long l_lwbnd_rt = 0;

  EXEC SQL BEGIN DECLARE SECTION;
    char    sql_c_xchng_cd[4] ;
    char    sql_c_prd_typ ;
    char    sql_c_undrlyng[7] ;
    char    sql_c_expry_dt[21] ;
  EXEC SQL END DECLARE SECTION;


	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "c_xchng_cd:%s:", c_xchng_cd );
    fn_userlog( c_ServiceName, "c_prd_typ:%c:",c_prd_typ);
    fn_userlog( c_ServiceName, "c_undrlyng:%s:", c_undrlyng );
    fn_userlog( c_ServiceName, "l_ord_limit_rt:%ld:", l_ord_limit_rt );
    fn_userlog( c_ServiceName, "c_expry_dt:%s:", c_expry_dt);
  }

  strcpy ( sql_c_xchng_cd, c_xchng_cd );
  sql_c_prd_typ = c_prd_typ;
  strcpy ( sql_c_undrlyng, c_undrlyng );
  strcpy ( sql_c_expry_dt, c_expry_dt);

  EXEC SQL
       select FTQ_HGH_PRC_RNG,
              FTQ_LOW_PRC_RNG
       INTO   :l_upbnd_rt,
              :l_lwbnd_rt
       from   FTQ_FO_TRD_QT
       where  FTQ_XCHNG_CD =  :sql_c_xchng_cd
       and    FTQ_PRDCT_TYP = :sql_c_prd_typ
       and    FTQ_UNDRLYNG =  :sql_c_undrlyng
       and    FTQ_EXPRY_DT =  to_date(:sql_c_expry_dt,'dd-Mon-yyyy' );


  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31140", SQLMSG, c_err_msg );
    return ( -1 );
  }

  if(DEBUG_MSG_LVL_3)
  {
		fn_userlog( c_ServiceName, "l_upbnd_rt :%ld:", l_upbnd_rt);
    fn_userlog( c_ServiceName, "l_lwbnd_rt :%ld:", l_lwbnd_rt);
    fn_userlog( c_ServiceName, "l_ord_limit_rt :%ld:", l_ord_limit_rt);
  }


  if ( ( l_ord_limit_rt > l_upbnd_rt ) || ( l_ord_limit_rt < l_lwbnd_rt )  )
  {
    fn_errlog( c_ServiceName, "B28006", " ",ptr_st_err_msg->c_err_msg );
    return ( -1 ) ;
  }

}


/***************** Ver 2.1 Ends   ***************/

int fn_sum_spnpos	(	struct st_fcp_cntrct_pstn	st_cntfut_pos,
                 		struct st_fus_undrlyng_pstn	*ptr_st_undfut_pos
								 	)
{


  ptr_st_undfut_pos->l_uibuy_qty 			= ptr_st_undfut_pos->l_uibuy_qty + st_cntfut_pos.l_ibuy_qty;

  ptr_st_undfut_pos->d_uibuy_val			= ptr_st_undfut_pos->d_uibuy_val + st_cntfut_pos.d_ibuy_ord_val;

  ptr_st_undfut_pos->l_uisell_qty 		= ptr_st_undfut_pos->l_uisell_qty + st_cntfut_pos.l_isell_qty;

  ptr_st_undfut_pos->d_uisell_val			= ptr_st_undfut_pos->d_uisell_val + st_cntfut_pos.d_isell_ord_val;

  ptr_st_undfut_pos->l_uexbuy_qty 		= ptr_st_undfut_pos->l_uexbuy_qty + st_cntfut_pos.l_exbuy_qty;

  ptr_st_undfut_pos->d_uexbuy_val			= ptr_st_undfut_pos->d_uexbuy_val	+ st_cntfut_pos.d_exbuy_ord_val;

  ptr_st_undfut_pos->l_uexsell_qty 		= ptr_st_undfut_pos->l_uexsell_qty + st_cntfut_pos.l_exsell_qty;

  ptr_st_undfut_pos->d_uexsell_val		= ptr_st_undfut_pos->d_uexsell_val	+ st_cntfut_pos.d_exsell_ord_val;

  ptr_st_undfut_pos->l_ubuy_exctd_qty	= ptr_st_undfut_pos->l_ubuy_exctd_qty + st_cntfut_pos.l_buy_exctd_qty;

  ptr_st_undfut_pos->l_usell_exctd_qty	= ptr_st_undfut_pos->l_usell_exctd_qty + st_cntfut_pos.l_sell_exctd_qty;

  ptr_st_undfut_pos->l_uopnpstn_qty 		= ptr_st_undfut_pos->l_uopnpstn_qty + st_cntfut_pos.l_opnpstn_qty;

  ptr_st_undfut_pos->d_uopnpstn_val			= ptr_st_undfut_pos->d_uopnpstn_val	+ st_cntfut_pos.d_opnpstn_val;

  ptr_st_undfut_pos->d_umtm_opn_val 		= ptr_st_undfut_pos->d_umtm_opn_val + st_cntfut_pos.d_mtm_opn_val;

  ptr_st_undfut_pos->d_uimtm_opn_val 	= ptr_st_undfut_pos->d_uimtm_opn_val + st_cntfut_pos.d_imtm_opn_val;

	return 0;

}

int fn_get_qt ( char *c_ServiceName,
                struct st_contract *ptr_st_contract,
                struct st_cntrct_qt *ptr_st_cntrct_qt,
                char *c_err_msg
              )
{

  char  c_errmsg[256];

  varchar c_expiry_dt [ LEN_DATE ];
  varchar c_exp_dt [ LEN_DATE ];
  varchar c_lst_trd_dt [ LEN_DATE ];
  short i_trd_tm;

  rtrim ( ptr_st_contract->c_expry_dt );
  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_contract->c_expry_dt );
  SETLEN ( c_expiry_dt );

  EXEC SQL
     SELECT FTQ_XCHNG_CD,
                FTQ_PRDCT_TYP,
                FTQ_UNDRLYNG,
                TO_CHAR ( FTQ_EXPRY_DT, 'dd-Mon-yyyy' ),
                FTQ_EXER_TYP,
                FTQ_OPT_TYP,
                NVL(FTQ_STRK_PRC, 0 ),
                FTQ_INDSTK,
                NVL( FTQ_LST_TRD_PRC, 0 ),
                TO_CHAR ( FTQ_LST_TRD_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
                NVL( FTQ_LST_TRD_QTY, 0 ),
                NVL( FTQ_BST1_BID_PRC, 0 ),
                NVL( FTQ_BST1_BID_QTY, 0 ),
                NVL( FTQ_BST1_OFFR_PRC, 0 ),
                NVL( FTQ_BST1_OFFR_QTY, 0 ),
                NVL( FTQ_CLS_PRC, 0 ),
                NVL( FTQ_OPN_PRC, 0 ),
                NVL( FTQ_HGH_PRC, 0 ),
                NVL( FTQ_LOW_PRC, 0 ),
                NVL( FTQ_PRVS_CLS_PRC, 0 ),
                NVL( FTQ_CHNG_PRVS_CLS, 0 ),
                NVL( FTQ_INDCTR,'+'),
                NVL( FTQ_HGH_PRC_RNG, 0 ),
                NVL( FTQ_LOW_PRC_RNG, 0 ),
                NVL( FTQ_AVRG_TRD_PRC, 0 ),
                NVL( FTQ_TOT_QTY_TRDD, 0 ),
                NVL( FTQ_TOT_VAL_TRDD, 0 ),
                NVL( FTQ_BASE_PRC, 0 ),
                NVL( FTQ_CRNT_OI, 0 ),
                NVL( FTQ_CHNG_OI, 0 ),
								 NVL( FTQ_OI_HIGH, 0 ),
                NVL( FTQ_OI_LOW, 0 ),
                NVL( FTQ_OI_INDCTR, '+' ),
                '*',
                NVL( FTQ_MIN_LOT_QTY,'0')
      INTO      :ptr_st_cntrct_qt->c_xchng_cd,
                :ptr_st_cntrct_qt->c_prd_typ,
                :ptr_st_cntrct_qt->c_undrlyng,
                :c_exp_dt,
                :ptr_st_cntrct_qt->c_exrc_typ,
                :ptr_st_cntrct_qt->c_opt_typ,
                :ptr_st_cntrct_qt->l_strike_prc,
                :ptr_st_cntrct_qt->c_ctgry_indstk,
                :ptr_st_cntrct_qt->l_lst_trdd_prc,
                :c_lst_trd_dt:i_trd_tm,
                :ptr_st_cntrct_qt->l_lst_trdd_qty,
                :ptr_st_cntrct_qt->l_bst_bid_prc,
                :ptr_st_cntrct_qt->l_bst_bid_qty,
                :ptr_st_cntrct_qt->l_bst_offr_prc,
                :ptr_st_cntrct_qt->l_bst_offr_qty,
                :ptr_st_cntrct_qt->l_close_prc,
                :ptr_st_cntrct_qt->l_open_prc,
                :ptr_st_cntrct_qt->l_high_prc,
                :ptr_st_cntrct_qt->l_low_prc,
                :ptr_st_cntrct_qt->l_prev_close_prc,
                :ptr_st_cntrct_qt->l_chng_prvs_close_prc,
                :ptr_st_cntrct_qt->c_indctr,
                :ptr_st_cntrct_qt->l_high_prc_rng,
                :ptr_st_cntrct_qt->l_low_prc_rng,
                :ptr_st_cntrct_qt->l_avg_trdd_prc,
                :ptr_st_cntrct_qt->l_tot_qty_trdd, 
                /** :ptr_st_cntrct_qt->l_tot_val_trdd, ** Ver 3.0 **/
                :ptr_st_cntrct_qt->d_tot_val_trdd,   /** Ver 3.0 **/
                :ptr_st_cntrct_qt->l_base_prc,
                :ptr_st_cntrct_qt->d_crnt_oi,
                :ptr_st_cntrct_qt->d_chng_oi,
                :ptr_st_cntrct_qt->d_oi_high,
                :ptr_st_cntrct_qt->d_oi_low,
                :ptr_st_cntrct_qt->c_oi_indctr,
                :ptr_st_cntrct_qt->c_rqst_typ,
                :ptr_st_cntrct_qt->l_min_lot_qty
     FROM       FTQ_FO_TRD_QT
     WHERE      FTQ_XCHNG_CD  = :ptr_st_contract->c_xchng_cd
 /*  AND      FTQ_PRDCT_TYP = decode(:ptr_st_contract->c_prd_typ,'P','F',:ptr_st_contract->c_prd_typ) ** Commented in Ver 1.8 **/
    /*   AND      FTQ_PRDCT_TYP = decode(:ptr_st_contract->c_prd_typ,'P','F','U','F',:ptr_st_contract->c_prd_typ)  Ver 1.8  Commented in Ver 2.6  **/
		 AND        FTQ_PRDCT_TYP = decode(:ptr_st_contract->c_prd_typ,'P','F','U','F','I','O',:ptr_st_contract->c_prd_typ)   /** Ver 2.6 OptionPlus product handled **/
       AND      FTQ_UNDRLYNG  = :ptr_st_contract->c_undrlyng
       AND      FTQ_EXPRY_DT  = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
       AND      FTQ_EXER_TYP  = :ptr_st_contract->c_exrc_typ
       AND      FTQ_OPT_TYP   = :ptr_st_contract->c_opt_typ
       AND      FTQ_STRK_PRC  = :ptr_st_contract->l_strike_prc;

		if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
   	{
      return -1;
    }
    else if ( SQLCODE == NO_DATA_FOUND )
    {
      return -2;
    }

    SETNULL ( c_exp_dt );
    SETNULL ( c_lst_trd_dt );

    strcpy ( ptr_st_cntrct_qt->c_expry_dt , ( char * ) c_exp_dt.arr );
    strcpy ( ptr_st_cntrct_qt->c_lst_trdd_time , ( char * ) c_lst_trd_dt.arr );

    return 0;

}

int fn_upd_spnlimits  ( char *c_ServiceName,
                        struct st_pstn_actn *ptr_st_pstn_actn,
                        struct st_err_msg *ptr_st_err_msg,
                        char *c_narration_id,
                        char  c_lmt_flg,
                        double  d_amount,
                        double  *d_balance_amt
                      )
{

    struct st_upd_limits st_upd_lmts;
    int i_returncode;
    char double_val[40];
    char *temp_ptr_to_err;
    char *ptr_str_double_val = (char *)double_val;
    varchar c_trade_dt[LEN_DATE];

  EXEC SQL
    SELECT to_char(exg_nxt_trd_dt,'DD-Mon-YYYY')
    INTO   :c_trade_dt
    FROM   exg_xchng_mstr
    WHERE  exg_xchng_cd = :ptr_st_pstn_actn->c_xchng_cd
    AND    exg_mkt_typ = 'D';

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "L31145", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

	MEMSET(st_upd_lmts);

  SETNULL(c_trade_dt);

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"fn_upd_spnlimits : c_narration_id<%s>",c_narration_id); /*** ver 4.2 ***/
	}

  strcpy( st_upd_lmts.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd);
  strcpy( st_upd_lmts.c_cln_mtch_accnt, ptr_st_pstn_actn->c_cln_mtch_accnt);
  strcpy( st_upd_lmts.c_trd_dt, (char *)c_trade_dt.arr);
  strcpy( st_upd_lmts.c_narration_id , c_narration_id);
  strcpy( st_upd_lmts.c_remarks, ptr_st_pstn_actn->c_ref_rmrks);

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"fn_upd_limits2:c_narration_id<%s>",st_upd_lmts.c_narration_id);
	}

	 /*** Added for Order Routing ***/
  strcpy( st_upd_lmts.c_rout_crt, ptr_st_pstn_actn->c_rout_crt);

  if (d_amount < 0)
  {
    st_upd_lmts.c_dr_cr_flg = DEBIT;
  }
  else
  {
    st_upd_lmts.c_dr_cr_flg = CREDIT;
  }

  st_upd_lmts.d_amount = d_amount;
  st_upd_lmts.c_dr_without_lmt_flg = c_lmt_flg;

  i_returncode = fn_update_limits ( c_ServiceName,
                                    &st_upd_lmts,
                                    ptr_st_err_msg  );

  if ( i_returncode != 0 )
  {
    switch ( i_returncode )
    {
      case INSUFFICIENT_LIMITS :

				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"Inside INSUFFICIENT_LIMITS .");
        }

				*d_balance_amt = st_upd_lmts.d_amount ;

        /** Retriving limit from error message  **/

        temp_ptr_to_err = (char *)strstr(ptr_st_err_msg->c_err_msg,"##");

         if (DEBUG_MSG_LVL_3)
         {
          fn_userlog(c_ServiceName,"Returned Error Message is :%s:",ptr_st_err_msg->c_err_msg);
         }

        memset(double_val,0,sizeof(double_val));
        temp_ptr_to_err = temp_ptr_to_err+3;

        while(*ptr_str_double_val++ = *temp_ptr_to_err++);

        *ptr_str_double_val++ = '\0';

        if (DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"In string format limit is :%s:",double_val);
        }

				sscanf(double_val,"%lf",d_balance_amt);
        
				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"Available Limit returned fn_upd_limits :%lf:",*d_balance_amt);
	        fn_userlog(c_ServiceName,"Required Limit - Insufficient limit is  :%lf:",st_upd_lmts.d_amount);
				}
        /** Retriving limit from error message  **/

        return INSUFFICIENT_LIMITS;
        break;

      default :
				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"SPAN Inside DEFAULT CASE.");
				}
				return FAILURE;
        break;
    }
  }

 *d_balance_amt = st_upd_lmts.d_bal_amt;
    /** Ver 4.6 add log **/

    fn_userlog ( c_ServiceName,"fn_upd_spnlimits :MatchAccnt,d_bal_amt:%s:%lf:",st_upd_lmts.c_cln_mtch_accnt,d_balance_amt);
  return SUCCESS;

}


int fn_update_limits ( char *c_ServiceName,
                       struct st_upd_limits *ptr_st_upd_limits,
                       struct st_err_msg *ptr_st_err_msg )
{
  char c_errmsg[256];
  char c_msg[256];
  double d_limits;
  double d_bal_amt;
  double d_round_amt;
  double d_initial_amt;
  int i_returncode;
  int i_trnsctn;
  long long ll_total_amt;
  long long ll_limits;
  long long ll_current_amount;
  long long ll_amount;
  long long ll_bal_amt = 0;

  char c_mtch_acnt[11];
  char c_rqst_type;
  char c_trade_date[LEN_DATE];
  char c_xchng_code[4];
  char c_fll_enty_flg = 'Y';  
  long l_grpid;
  double d_amnt;

  double d_fcb_isec_witheld_amt = 0.0 ; /** ver 6.2 **/
  double d_updated_isec_withheld_amt = 0.0 ; /** ver 6.2 **/

  double d_prem_rcvbl=0.0;  /*** ver 6.8 ***/
  double d_prem_utilised=0.0;  /*** ver 6.8 ***/
  double d_fcp_prem= 0.0; /*** ver 6.8 ***/
  double d_upd_prem_rcvbl=0.0;  /*** ver 6.8 ***/


  double d_fcb_day_peak_mrgn = 0.0 ; /** ver 6.6 **/
  double d_updated_peak_mrgn = 0.0 ; /** ver 6.6 **/
  double d_total_amt_peak=0;  /** ver 6.6 **/

  /** Ver 6.4 starts here ***/
  double d_pnl_dts=0.0;
  double d_fcb_witheld_tds=0.0;
  char c_mon_trade[12];
  double d_monthly_cum_pl=0;
  double d_tds_withheld_amt=0;
  double d_tds_rt=0;
  EXEC SQL INCLUDE "table/iai_info_account_info.h";
  /** Ver 6.4 Ends Here **/


  EXEC SQL BEGIN DECLARE SECTION;
    varchar c_payin_date [ LEN_DATE ];
    varchar c_payout_date [ LEN_DATE ];
    char c_brnch[5];
    char c_current_drcr_flg;
    char c_new_dr_cr_flg;
    double d_current_amount;
    double d_total_amt;
    double d_drcr_amt;
    int i_gid;
  EXEC SQL END DECLARE SECTION;

  char c_fnm_lmt_prj_flg ='\0';/*** ver 6.2 **/ 
	char c_ucc_cd[13] = "\0";  /*** Added in VER 8.0 ***/
 
  struct st_gt_lmt_dtls st_get_limits;
  MEMSET(st_get_limits); /****** ver 5.4 ********/
   /*** Added for Order Routing ***/
  fn_init_ddr_val ( ptr_st_upd_limits->c_rout_crt );

	strcpy( st_get_limits.c_xchng_cd, ptr_st_upd_limits->c_xchng_cd );
  strcpy( st_get_limits.c_cln_mtch_accnt, ptr_st_upd_limits->c_cln_mtch_accnt );
  strcpy( st_get_limits.c_trd_dt, ptr_st_upd_limits->c_trd_dt );

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog ( c_ServiceName,"c_dr_without_lmt_flg :%c:", ptr_st_upd_limits->c_dr_without_lmt_flg );
    fn_userlog ( c_ServiceName,"c_dr_cr_flg :%c:", ptr_st_upd_limits->c_dr_cr_flg );
    fn_userlog ( c_ServiceName,"c_narration_id :%s:", ptr_st_upd_limits->c_narration_id );
    fn_userlog ( c_ServiceName,"c_cln_mtch_accnt :%s:", ptr_st_upd_limits->c_cln_mtch_accnt );
  }

  if( ptr_st_upd_limits->d_amount == 0 )
  {
		fn_userlog( c_ServiceName,"** Amount value is 0 - ERROR **");
		return FAILURE;
  }

  if(( ptr_st_upd_limits->c_dr_cr_flg != 'D') && (ptr_st_upd_limits->c_dr_cr_flg != 'C' ))
  {
      fn_userlog( c_ServiceName,"**Improper DR CR flg - ERROR **");
      return FAILURE;
  }

  if( ( ptr_st_upd_limits->c_dr_cr_flg == 'D' ) && ( ptr_st_upd_limits->d_amount >= 0 ) )
  {
      fn_userlog( c_ServiceName,"**Amount is greater than zero for DR - ERROR **");
      return FAILURE;
  }

  if( ( ptr_st_upd_limits->c_dr_cr_flg == 'C' ) && ( ptr_st_upd_limits->d_amount <= 0 ) )
  {
      fn_userlog( c_ServiceName,"**Amount is less than zero for CR - ERROR **");
      return FAILURE;
  }

  d_round_amt = ptr_st_upd_limits->d_amount;
  d_initial_amt = ptr_st_upd_limits->d_amount;

  if ( ( (long long) ( d_round_amt * 100.0 ) % 100 > 50 ) && ptr_st_upd_limits->c_dr_cr_flg == 'C' )
  {
    ptr_st_upd_limits->d_amount = ptr_st_upd_limits->d_amount + 1.0 ;
		if(DEBUG_MSG_LVL_3) /*** ver 4.2 ***/
		{
			fn_userlog( c_ServiceName,"**Amount rounded to[%lf]**", ptr_st_upd_limits->d_amount);
		}
  }

	if ( ( (long long) ( d_round_amt * -100.0 ) % 100 > 50 ) && ptr_st_upd_limits->c_dr_cr_flg == 'D' )
  {
    ptr_st_upd_limits->d_amount = ptr_st_upd_limits->d_amount - 1.0 ;
		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog( c_ServiceName,"**Amount rounded to[%lf]**", ptr_st_upd_limits->d_amount);
		}
  }

   EXEC SQL
    SELECT fnm_grp_id,
           fnm_lmt_prj_flg /** ver 6.2 **/ 
    INTO   :i_gid,
           :c_fnm_lmt_prj_flg /*** ver 6.2 **/
  FROM fnm_fo_narration_mstr
  WHERE fnm_narration_id = :ptr_st_upd_limits->c_narration_id;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31150",SQLMSG,ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName,"i_gid :%d:",i_gid );
  }

  st_get_limits.l_gid = i_gid;
  st_get_limits.c_rqst_typ = LIMIT_X_GID;

  i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );

  if ( i_trnsctn == -1 )
  {
    return FAILURE;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName,"c_cln_mtch_accnt :%s:", ptr_st_upd_limits->c_cln_mtch_accnt );
  }

  /** i_returncode = fn_lock_usr( c_ServiceName, ptr_st_upd_limits->c_cln_mtch_accnt); ** ver 7.8 **/
  i_returncode = fn_lock_fno( c_ServiceName, ptr_st_upd_limits->c_cln_mtch_accnt); /** Ver 7.8 **/
  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName,"ptr.c_trd_dt :%s:", ptr_st_upd_limits->c_trd_dt );
    fn_userlog ( c_ServiceName,"c_xchng_cd :%s:", ptr_st_upd_limits->c_xchng_cd );
  }
   d_current_amount = 0.0;

  EXEC SQL
    SELECT  to_char( fcb_payin_dt, 'DD-Mon-YYYY' ),
            to_char( fcb_payout_dt, 'DD-Mon-YYYY' ),
            fcb_dc_flg,
            fcb_dc_amt,
            NVL(Fcb_ISEC_WITHHELD_AMT,0), /** 6.2 ver **/
            NVL(FCB_WITHHELD_TDSADJAMT,0),  /** Ver 6.4 **/
            NVL(FCB_DAY_PEAK_MARGIN,0),    /** 6.6 ver **/
            NVL(FCB_PRMUM_UTILISED,0), /*** ver 6.8 **/
            NVL(FCB_PRMUM_RCVBL,0)  /*** ver 6.8 **/
    INTO    :c_payin_date,
            :c_payout_date,
            :c_current_drcr_flg,
            :d_current_amount,
            :d_fcb_isec_witheld_amt, /*** ver 6.2 ***/
            :d_fcb_witheld_tds,     /** Ver 6.4 **/
            :d_fcb_day_peak_mrgn,     /** ver 6.6 **/
            :d_prem_utilised, /*** ver 6.8 ***/
            :d_prem_rcvbl  /*** ver 6.8 ***/
    FROM  fcb_fo_clnt_blncs
    WHERE fcb_xchng_cd = :ptr_st_upd_limits->c_xchng_cd
    AND fcb_trd_dt  = to_date( :ptr_st_upd_limits->c_trd_dt, 'DD-Mon-yyyy')
    AND fcb_grp_id  = :i_gid
    AND fcb_clm_mtch_accnt  = :ptr_st_upd_limits->c_cln_mtch_accnt;

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
      fn_errlog( c_ServiceName, "L31155", SQLMSG, ptr_st_err_msg->c_err_msg  );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      return FAILURE;
  }

	if ( SQLCODE == NO_DATA_FOUND )
  {

      EXEC SQL
        INSERT INTO fcb_fo_clnt_blncs
                (FCB_XCHNG_CD,
                FCB_TRD_DT,
                FCB_GRP_ID,
                FCB_CLM_MTCH_ACCNT,
                FCB_PAYIN_DT,
                FCB_PAYOUT_DT,
                FCB_DC_FLG,
                FCB_DC_AMT,
                Fcb_ISEC_WITHHELD_AMT,    /** ver 6.2 **/
                FCB_WITHHELD_TDSADJAMT, /** Ver 6.4 **/
                FCB_DAY_PEAK_MARGIN,      /** ver 6.6 **/
                FCB_PEAK_MARGIN_DEBIT,    /** ver 6.6 **/
                FCB_PRMUM_UTILISED, /*** ver 6.8 **/
                FCB_PRMUM_RCVBL)  /*** ver 6.8 ***/
        SELECT   fbc_xchng_cd,
                 fbc_trd_dt,
                 fbc_grp_id,
                 :ptr_st_upd_limits->c_cln_mtch_accnt,
                 to_char( fbc_cln_pyin_dt, 'DD-Mon-YYYY' ),
                 to_char( fbc_cln_pyout_dt, 'DD-Mon-YYYY' ),
                 :ptr_st_upd_limits->c_dr_cr_flg,
                 0,
                 0, /** ver 6.2 ***/
                 0,   /** Ver 6.4 **/
                 0, /** ver 6.6  **/
                 0, /** ver 6.6  **/
                 0, /** ver 6.8 ***/
                 0  /*** ver 6.8 **/
        FROM   fbc_fo_brnch_cal
        WHERE  fbc_xchng_cd = :ptr_st_upd_limits->c_xchng_cd
        AND    fbc_trd_dt = to_date(:ptr_st_upd_limits->c_trd_dt,'dd-Mon-yyyy')
        AND    fbc_grp_id  = :i_gid
        AND    fbc_branch = '0004';

        if( SQLCODE != 0 )
        {
            fn_errlog( c_ServiceName, "L31160",SQLMSG, ptr_st_err_msg->c_err_msg);
            fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
            return FAILURE;
        }


        EXEC SQL
          SELECT  to_char( fcb_payin_dt, 'DD-Mon-YYYY' ),
                  to_char( fcb_payout_dt, 'DD-Mon-YYYY' ),
                  fcb_dc_flg,
                  fcb_dc_amt,
                  NVL(Fcb_ISEC_WITHHELD_AMT,0), /*** ver 6.2 ***/
                  NVL(FCB_WITHHELD_TDSADJAMT,0), /** ver 6.4 ***/
                  NVL(FCB_DAY_PEAK_MARGIN,0)    /** 6.6 ver **/
          INTO    :c_payin_date,
                  :c_payout_date,
                  :c_current_drcr_flg,
                  :d_current_amount,
                  :d_fcb_isec_witheld_amt, /*** ver 6.2 ***/
                  :d_fcb_witheld_tds,     /** Ver 6.4 **/ 
                  :d_fcb_day_peak_mrgn     /** ver 6.6 **/ 
          FROM  fcb_fo_clnt_blncs
          WHERE fcb_xchng_cd = :ptr_st_upd_limits->c_xchng_cd
          AND fcb_trd_dt  = to_date( :ptr_st_upd_limits->c_trd_dt,'DD-Mon-yyyy')
					    AND fcb_grp_id  = :i_gid
          AND fcb_clm_mtch_accnt  = :ptr_st_upd_limits->c_cln_mtch_accnt;

        if( (  SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
        {
            fn_errlog( c_ServiceName, "L31165", SQLMSG, ptr_st_err_msg->c_err_msg  );
            fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
            return FAILURE;
        }
        if(  SQLCODE == NO_DATA_FOUND  )
        {
            fn_errlog( c_ServiceName, "B21044", DEFMSG, ptr_st_err_msg->c_err_msg  );
            fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
            return FAILURE;
        }
  }

  SETNULL(c_payin_date);
  SETNULL(c_payout_date);

  if(DEBUG_MSG_LVL_1) /*** Ver 4.2 ***/
  {
    fn_userlog ( c_ServiceName,"c_payin_date      :%s:",c_payin_date.arr );
    fn_userlog ( c_ServiceName,"c_payout_date     :%s:",c_payout_date.arr );
    fn_userlog ( c_ServiceName,"c_current_drcr_flg:%c:",c_current_drcr_flg );
    fn_userlog ( c_ServiceName,"d_current_amount  :%lf:",d_current_amount );
  }

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog ( c_ServiceName,"ptr_st_upd_limits->d_amount  :%lf:",ptr_st_upd_limits->d_amount );
	}

  ll_current_amount = (long long) d_current_amount;
  ll_amount = (long long) ptr_st_upd_limits->d_amount;

  if(DEBUG_MSG_LVL_1)
  {
    fn_userlog ( c_ServiceName,"ll_current_amount :%lld:",ll_current_amount );
    fn_userlog ( c_ServiceName,"ll_amount         :%lld:",ll_amount );
  }

	if(DEBUG_MSG_LVL_3)
	{
	 fn_userlog ( c_ServiceName,"ll_amount         :%lld:",ll_amount );
	}

	if(ptr_st_upd_limits->c_dr_cr_flg == 'C')
  {
      ll_total_amt = (ll_current_amount + ll_amount);
      if( ll_total_amt >= 0 )
      {
          c_new_dr_cr_flg = 'C';
      }
      else
      {
          c_new_dr_cr_flg = 'D';
      }
    if(DEBUG_MSG_LVL_3)
    {
     fn_userlog ( c_ServiceName," 1 ** ll_total_amt   :%lld:",ll_total_amt );
     fn_userlog ( c_ServiceName,"c_new_dr_cr_flg:%c:",c_new_dr_cr_flg );
    }
  }
  else
  {

    if(DEBUG_MSG_LVL_3)
    {
     fn_userlog ( c_ServiceName,"c_dr_without_lmt_flg :%c:", ptr_st_upd_limits->c_dr_without_lmt_flg);
    }
    if((ptr_st_upd_limits->c_dr_without_lmt_flg != DEBIT_WITHOUT_LIMIT ) &&
       (ptr_st_upd_limits->c_dr_without_lmt_flg != DEBIT_WHEN_LIMIT )  &&
       (ptr_st_upd_limits->c_dr_without_lmt_flg != DEBIT_TILL_LIMIT ) )
    {
        fn_userlog ( c_ServiceName, "** Improper DWL Flag -ERROR ***");
        fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
        return FAILURE;
    }

		 if( ptr_st_upd_limits->c_dr_without_lmt_flg == DEBIT_WITHOUT_LIMIT )
      {
          ll_total_amt = (ll_current_amount + ll_amount);
          if( ll_total_amt >= 0 )
          {
              c_new_dr_cr_flg = 'C';
          }
          else
          {
              c_new_dr_cr_flg = 'D';
          }
        if(DEBUG_MSG_LVL_0)
        {
           fn_userlog ( c_ServiceName,"2 ** ll_total_amt:%lld:",ll_total_amt );
           fn_userlog ( c_ServiceName,"c_new_dr_cr_flg:%c:",c_new_dr_cr_flg );
        }
      }
      else
      {

      strcpy( c_mtch_acnt,st_get_limits.c_cln_mtch_accnt);
      strcpy( c_trade_date,st_get_limits.c_trd_dt);
      strcpy( c_xchng_code,st_get_limits.c_xchng_cd);
      l_grpid = st_get_limits.l_gid;
      /*** d_amnt = st_get_limits.d_amt; *** Ver 5.4 ***/
      d_amnt = 0;  /*** Ver 5.4 ***/

      /*** ver 6.8 Start ***/
      if(DEBUG_MSG_LVL_0)
      {
         fn_userlog ( c_ServiceName,"CR170192 d_prem_rcvbl Existing :%lf:",d_prem_rcvbl);
      }
      if( DEBUG_MSG_LVL_4 )
      {
         fn_userlog ( c_ServiceName,"CR170192 c_remarks :%s:",ptr_st_upd_limits->c_remarks);
         fn_userlog ( c_ServiceName,"CR170192 d_amount :%lf:",ptr_st_upd_limits->d_amount);
         fn_userlog ( c_ServiceName,"CR170192 st_get_limits.d_amt :%lf:",st_get_limits.d_amt);
      }
      if ((strstr(ptr_st_upd_limits->c_remarks,"OPTPREMBUYALLWD") != NULL )   && (ptr_st_upd_limits->d_amount < 0))
      {
          c_rqst_type = LIMIT_X_GID_OPTB;
      }
      else
      {
          c_rqst_type = LIMIT_X_GID;
      }
      /** ver 6.8 ends ***/

      /** commented in ver 6.8
      c_rqst_type = LIMIT_X_GID;
      ***/

        /*** Added for Order Routing ***/
        fn_cpy_ddr ( st_get_limits.c_rout_crt );

        /*** calling procedure to get limit ***/

			 EXEC SQL
          EXECUTE
            BEGIN
            LIMIT_CAL
              ( :c_mtch_acnt,
                :c_trade_date,
                :c_rqst_type,
                :l_grpid,
                :c_xchng_code,
                :d_amnt,
                :i_returncode
              );
            END;
          END-EXEC;

          if ( i_returncode == -1 )
        {
          fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
          return FAILURE;
        }
        st_get_limits.d_amt = d_amnt;

        ptr_st_upd_limits->d_amount = st_get_limits.d_amt;
        fn_userlog ( c_ServiceName,"*** check lodm d_amnt :%lf:",d_amnt); /*** ver 5.4 ***/      

        ll_limits = ( long long )ptr_st_upd_limits->d_amount;

          if((ll_limits< (-1) * ll_amount ) && ( ptr_st_upd_limits->c_dr_without_lmt_flg == DEBIT_WHEN_LIMIT))
          {

            if(DEBUG_MSG_LVL_1) /*** Ver 4.2 ***/
            {
             fn_userlog ( c_ServiceName,"ll_limits inside error condition:%lld:",ll_limits );
             fn_userlog ( c_ServiceName,"limits from function:%lf:",st_get_limits.d_amt);
             fn_userlog ( c_ServiceName,"ll_amount inside error condition:%ld:",(-1)*ll_amount );
            }

            fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
          	return INSUFFICIENT_LIMITS;
          }

					else
          {
            if ((ptr_st_upd_limits->c_dr_without_lmt_flg == DEBIT_TILL_LIMIT) && (ll_limits < 0 ))
            {
              fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
              ptr_st_upd_limits->d_bal_amt = d_initial_amt;
              if(DEBUG_MSG_LVL_3)
              {
                fn_userlog(c_ServiceName ,"*** Completed Till Limit <-ve>***");
              }

            return SUCCESS;

            }
            else if((ptr_st_upd_limits->c_dr_without_lmt_flg == DEBIT_TILL_LIMIT) && (ll_limits < (-1) * ll_amount ) )
            {
               /* Block limits to the extent possible if limit is positive
               and less than the amount to debit  */

							 if(DEBUG_MSG_LVL_0)
							 {
								fn_userlog(c_ServiceName,"SPAN ll_limits Is :%lld:",ll_limits);
								fn_userlog(c_ServiceName,"SPAN ll_amount Is :%lld:",ll_amount);
							 }
               ll_bal_amt = ll_amount  + ll_limits;
							
							 	if( ll_bal_amt == ll_amount)
								{
									if(DEBUG_MSG_LVL_3)
									{
										fn_userlog(c_ServiceName,"-- Inside 'll_bal_amt == ll_amount' condition -- ");
									}
									c_fll_enty_flg = 'N';
								}
               ll_amount  = (-1) * ll_limits;
            }

            /* If the limit is positive and sufficient enough to debit
               the new ll_amount */

            ll_total_amt = ll_current_amount + ll_amount;

            if( ll_total_amt >= 0 )
            {
               c_new_dr_cr_flg = 'C';
            }
            else
            {
               c_new_dr_cr_flg = 'D';
            }
            if(DEBUG_MSG_LVL_0)
            {
             fn_userlog ( c_ServiceName,"3 ** ll_total_amt:%lld:" ,ll_total_amt );
             fn_userlog ( c_ServiceName,"c_new_dr_cr_flg:%c:" ,c_new_dr_cr_flg );
            }
          }
      }
  }

  d_total_amt = 0.0;
  d_total_amt_peak = 0.0;  /** Ver 6.6 **/
  d_total_amt = (double) ll_total_amt;
  d_total_amt_peak = (double) ll_total_amt;  /** ver 6.6 **/

  d_drcr_amt = 0.0;

	d_drcr_amt = (double) ll_amount;

  d_bal_amt = 0.0;
  d_bal_amt = (double) ll_bal_amt;

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog ( c_ServiceName,"d_total_amt:%lf:",d_total_amt );
    fn_userlog ( c_ServiceName,"d_bal_amt  :%lf:",d_bal_amt );
  }
 
  /*** added in ver 6.2 starts **/
  if(DEBUG_MSG_LVL_3)
  {
   fn_userlog ( c_ServiceName,"lmtprj_flg :%c: isecwithed :%lf: drcr :%lf: tot :%lf",c_fnm_lmt_prj_flg,d_fcb_isec_witheld_amt,d_drcr_amt,d_total_amt);
  }
  
  if(c_fnm_lmt_prj_flg == 'P' )
  {
    d_updated_isec_withheld_amt = d_fcb_isec_witheld_amt + d_drcr_amt;
  }
  else
  {
    d_updated_isec_withheld_amt = d_fcb_isec_witheld_amt;
  }
  /*** ver 6.2 ends ***/

  /** Ver 6.4 Starts Here ***/
  if( c_fnm_lmt_prj_flg == 'P' )
  {
     MEMSET(sql_iai_type.arr);

      EXEC SQL
      SELECT  IAI_TYPE,
              to_char(last_day(to_date(:ptr_st_upd_limits->c_trd_dt,'dd-Mon-YYYY')),'dd-Mon-yyyy')
      INTO    :sql_iai_type,
              :c_mon_trade
      FROM    IAI_INFO_ACCOUNT_INFO
      WHERE   IAI_MATCH_ACCOUNT_NO  = :ptr_st_upd_limits->c_cln_mtch_accnt;

      if ( SQLCODE != 0 )
      {
         fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
          return FAILURE;
      }
    if(strcmp(sql_iai_type.arr,"NRO_NON_PINS") == 0)
    {
     EXEC SQL
       SELECT nvl(mts_curr_pl,0)
         INTO :d_monthly_cum_pl
         from mts_mon_tds_smry
        where mts_clm_mtch_accnt=:ptr_st_upd_limits->c_cln_mtch_accnt
          and to_char(mts_trd_date,'Mon-YYYY')  = to_char(to_date(:c_mon_trade),'Mon-YYYY');
       if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
       {
         fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
          return FAILURE;
       }

       fn_userlog(c_ServiceName,"d_tds_rt :%lf:",d_tds_rt);
       fn_userlog(c_ServiceName,"d_monthly_cum_pl :%lf:",d_monthly_cum_pl);
       fn_userlog(c_ServiceName,"d_updated_isec_withheld_amt :%lf:",d_updated_isec_withheld_amt);
       if( d_monthly_cum_pl <= 0 )
       {
          d_tds_withheld_amt=0;
       }
       else if( d_updated_isec_withheld_amt <= 0 )
       {
          d_tds_withheld_amt=0;
       }
       else
       {
         EXEC SQL
           SELECT PAR_FNO_TDS_RT
             INTO :d_tds_rt
             FROM PAR_SYSTM_PRMTR;
          if ( SQLCODE != 0 )
          {
            fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
            return FAILURE;
          }
          fn_userlog(c_ServiceName,"d_tds_rt :%lf:",d_tds_rt);
          d_pnl_dts = fn_mind(d_monthly_cum_pl,d_updated_isec_withheld_amt);
          d_tds_withheld_amt=d_pnl_dts * (d_tds_rt/100) ;
        }
      }
      else
      {
          d_tds_withheld_amt = d_fcb_witheld_tds;
      }
  }
  else
  {
      d_tds_withheld_amt = d_fcb_witheld_tds;
  }
  fn_userlog(c_ServiceName ,"d_tds_withheld_amt :%lf:",d_tds_withheld_amt);
  /** Ver 6.4 ** Ends Here **/

  /*** ver 6.6 starts ***/
  if(DEBUG_MSG_LVL_3)
  {
   fn_userlog(c_ServiceName ,"d_total_amt_peak:%lf: d_updated_isec_withheld_amt:%lf:",d_total_amt_peak,d_updated_isec_withheld_amt);
  }

  if( ptr_st_upd_limits->c_dr_cr_flg == 'D' )
  {
   if( d_updated_isec_withheld_amt > 0 )
   {
     d_total_amt_peak = d_total_amt_peak - d_updated_isec_withheld_amt;
   }

   if( (long long)d_total_amt_peak < 0 )
   {
      if(d_fcb_day_peak_mrgn == 0 )
      {
          d_updated_peak_mrgn = -1 * d_total_amt_peak;
      }
      else if( (long long)(d_fcb_day_peak_mrgn ) < (long long)d_total_amt_peak * -1)
      {
          d_updated_peak_mrgn = -1 * d_total_amt_peak;
          if(DEBUG_MSG_LVL_3)
          {
            fn_userlog ( c_ServiceName,"d_updated_peak_mrgn1 :%lf: if ", d_updated_peak_mrgn);
          }
      }
      else
      {
          d_updated_peak_mrgn = d_fcb_day_peak_mrgn;
          if(DEBUG_MSG_LVL_3)
          {
            fn_userlog ( c_ServiceName,"d_updated_peak_mrgn2 :%lf: if ", d_updated_peak_mrgn);
          } 
      }
    }
    else
    {
       d_updated_peak_mrgn=d_fcb_day_peak_mrgn;
    }
  }
  else
  {
     d_updated_peak_mrgn=d_fcb_day_peak_mrgn;
  }

  /*** ver 6.6 ends ***/ 
  /*** ver 6.8 Start***/
  if ( strcmp(ptr_st_upd_limits->c_narration_id,"PA") == 0 )
  {
     d_upd_prem_rcvbl = d_prem_rcvbl  + ptr_st_upd_limits->d_amount;
   }
   else
   {
      d_upd_prem_rcvbl = d_prem_rcvbl;
   }
   if(DEBUG_MSG_LVL_4)
   {
      fn_userlog ( c_ServiceName,"CR170192 d_upd_prem_rcvbl :%lf:",d_upd_prem_rcvbl);
      fn_userlog ( c_ServiceName,"CR170192 d_prem_utilised :%lf:",d_prem_utilised);
   }
  /*** ver 6.8 end ***/


 
  EXEC SQL
  UPDATE    fcb_fo_clnt_blncs
     SET    fcb_dc_flg  =  :c_new_dr_cr_flg,
            fcb_dc_amt  =  :d_total_amt,
            Fcb_ISEC_WITHHELD_AMT = :d_updated_isec_withheld_amt, /** ver 6.2 **/
            FCB_WITHHELD_TDSADJAMT = :d_tds_withheld_amt,  /** Ver 6.4 **/
            FCB_DAY_PEAK_MARGIN = :d_updated_peak_mrgn, /** Ver 6.6 **/
            FCB_PRMUM_RCVBL = :d_upd_prem_rcvbl /*** ver 6.8 ***/
     WHERE fcb_xchng_cd = :ptr_st_upd_limits->c_xchng_cd
     AND  fcb_trd_dt    = to_date(:ptr_st_upd_limits->c_trd_dt,'DD-Mon-yyyy')
     AND  fcb_grp_id    = :i_gid
     AND  fcb_clm_mtch_accnt  = :ptr_st_upd_limits->c_cln_mtch_accnt;

  if( SQLCODE != 0 )
  {
      fn_errlog( c_ServiceName, "L31170",SQLMSG,ptr_st_err_msg->c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      return FAILURE;
  }


	if ( c_fll_enty_flg == 'Y')
	{
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog ( c_ServiceName,"c_fll_enty_flg Is :%c:",c_fll_enty_flg);
			fn_userlog ( c_ServiceName,"Before FLL INSERT");
			fn_userlog ( c_ServiceName,"Following Are the Values:");
			fn_userlog ( c_ServiceName,"d_drcr_amt Is :%lf:",d_drcr_amt);
			fn_userlog ( c_ServiceName,"ptr_st_upd_limits->c_dr_cr_flg Is :%c:",ptr_st_upd_limits->c_dr_cr_flg);
			fn_userlog ( c_ServiceName,"ptr_st_upd_limits->c_narration_id Is :%s:",ptr_st_upd_limits->c_narration_id);
			fn_userlog ( c_ServiceName,"ptr_st_upd_limits->c_remarks Is :%s:",ptr_st_upd_limits->c_remarks);
		}

		/*** Added in VER 8.0 : Real time margin reporting ( Fetching UCC code ) ***/
    MEMSET(c_ucc_cd);
    EXEC SQL
    SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
    INTO  :c_ucc_cd
    FROM  CLM_CLNT_MSTR
    WHERE CLM_MTCH_ACCNT = :ptr_st_upd_limits->c_cln_mtch_accnt;

    if ( SQLCODE != 0 )
    {
      fn_userlog(c_ServiceName,"fn_update_limits : Error while fetching UCC code for :%s:", ptr_st_upd_limits->c_cln_mtch_accnt);
      fn_errlog( c_ServiceName, "S39325",SQLMSG,c_err_msg);
      return -1;
    }

    rtrim(c_ucc_cd);

    if(DEBUG_MSG_LVL_3)
      fn_userlog(c_ServiceName,"VER 8.0 -- fn_update_limits : MAtch ID :%s: have ucc code :%s:", ptr_st_upd_limits->c_cln_mtch_accnt, c_ucc_cd);

  /*** VER 8.0 ends here ***/


  	EXEC SQL
  	INSERT INTO fll_fo_lmtupd_log
  	( FLL_XCHNG_CD,
    	FLL_TRD_DT,
    	FLL_GRP_ID,
    	FLL_CLM_MTCH_ACCNT,
    	FLL_TRN_DT,
    	FLL_SEQ_NUM,
    	FLL_NARRATION_ID,
    	FLL_DC_FLG,
    	FLL_DC_AMT,
    	FLL_REF_RMRKS,
      FLL_NET_BAL,    /** 5.8 **/
    	FLL_ISEC_WITHHELD_AMT, /** ver 6.2 **/
      FLL_WITHHELD_TDSADJAMT,  /*** ver 6.4 **/
			FLL_UCC_CD      /*** Added in VER 8.0 ***/
     )

    	 VALUES

     	(   :ptr_st_upd_limits->c_xchng_cd,
         	:ptr_st_upd_limits->c_trd_dt,
         	:i_gid,
         	:ptr_st_upd_limits->c_cln_mtch_accnt,
          SYSDATE,
          fll_ora_seq.nextval,
				 	:ptr_st_upd_limits->c_narration_id,
         	:ptr_st_upd_limits->c_dr_cr_flg,
         	:d_drcr_amt,
         	:ptr_st_upd_limits->c_remarks,
          :d_total_amt,  /** ver 5.8 **/
      :d_updated_isec_withheld_amt, /** ver 6.2 ***/
          :d_tds_withheld_amt, /** ver 6.4 **/
     			:c_ucc_cd				/*** Added in VER 8.0 ***/
			);

  	if( SQLCODE != 0 )
  	{
    	  fn_errlog( c_ServiceName, "L31175",SQLMSG,ptr_st_err_msg->c_err_msg);
      	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      	return FAILURE;
  	}
	}

  if( fn_committran( c_ServiceName,i_trnsctn,ptr_st_err_msg->c_err_msg ) == -1 )
  {
    strcpy( ptr_st_err_msg->c_err_msg, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  ptr_st_upd_limits->d_bal_amt = 0.0;
  ptr_st_upd_limits->d_bal_amt = d_bal_amt;

   if(DEBUG_MSG_LVL_0)
   {
     fn_userlog(c_ServiceName ,"*** Completed successfully ***");
   }

		/** Ver 4.6 add log **/

		fn_userlog ( c_ServiceName,"fn_update_limits :MatchAccnt,d_total_amt,d_bal_amt,d_drcr_amt:%s:%lf:%lf:%lf:",ptr_st_upd_limits->c_cln_mtch_accnt,d_total_amt,d_bal_amt,d_drcr_amt);
   return SUCCESS;

}

	

int fn_spnupd_xchngbk  ( char  *c_ServiceName,
                      struct st_xchngbook *ptr_st_xchngbook,
                      char   *c_err_msg
                    )
{
  varchar c_xchng_rmrks [ 768 ];

  int i_rec_exists  = 0 ;
	int	i_trnsctn;

	if(DEBUG_MSG_LVL_0) /*** Ver 4.2 ***/
	{
		/*** fn_userlog(c_ServiceName,"Inside Function fn_upd_xchngbk.");
		fn_userlog(c_ServiceName,"Operation Type Is :%c:",ptr_st_xchngbook->c_oprn_typ); ***/
		fn_userlog(c_ServiceName,"fn_spnupd_xchngbk : Operation Type Is :%c: ",ptr_st_xchngbook->c_oprn_typ);
	}
	
  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    fn_errlog( c_ServiceName, "L31180", TPMSG, c_err_msg );
    tpfree ( ( char * ) ptr_st_xchngbook );
		return -1;
  }

	MEMSET(c_xchng_rmrks);


  switch(ptr_st_xchngbook->c_oprn_typ)
  {
    case  UPDATION_ON_EXCHANGE_RESPONSE :

      if ( ptr_st_xchngbook->l_dwnld_flg == DOWNLOAD )
      {
        EXEC SQL
          SELECT 1
          INTO  :i_rec_exists
          FROM  FXB_FO_XCHNG_BOOK
          WHERE FXB_JIFFY     = :ptr_st_xchngbook->d_jiffy
          AND   FXB_XCHNG_CD  = :ptr_st_xchngbook->c_xchng_cd
          AND   FXB_PIPE_ID   = :ptr_st_xchngbook->c_pipe_id
          AND   FXB_STREAM_NO = :ptr_st_xchngbook->l_bit_flg;

        if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
        {
          fn_errlog ( c_ServiceName, "L31185",SQLMSG, c_err_msg );
          tpfree ( ( char * ) ptr_st_xchngbook );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          return -1;
        }

        if ( i_rec_exists == 1 )
        {
          tpfree ( ( char * ) ptr_st_xchngbook );
          strcpy( c_err_msg, "Record already Processed" );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          return -1;
        }
      }


      strcpy ( ( char * )c_xchng_rmrks.arr, ptr_st_xchngbook->c_xchng_rmrks );

      rtrim ( c_xchng_rmrks.arr );

      SETLEN ( c_xchng_rmrks );

      EXEC SQL
        UPDATE FXB_FO_XCHNG_BOOK
				 SET   FXB_PLCD_STTS       = :ptr_st_xchngbook->c_plcd_stts,
               FXB_RMS_PRCSD_FLG   = :ptr_st_xchngbook->c_rms_prcsd_flg,
               FXB_ORS_MSG_TYP     = :ptr_st_xchngbook->l_ors_msg_typ,
               FXB_ACK_TM          = to_date( :ptr_st_xchngbook->c_ack_tm,'DD-Mon-yyyy hh24:mi:ss' ),
               FXB_XCHNG_RMRKS     = rtrim(FXB_XCHNG_RMRKS)||:c_xchng_rmrks,
               FXB_JIFFY           = :ptr_st_xchngbook->d_jiffy,
               FXB_STREAM_NO       = :ptr_st_xchngbook->l_bit_flg
         WHERE FXB_ORDR_RFRNC      = :ptr_st_xchngbook->c_ordr_rfrnc
         AND   FXB_MDFCTN_CNTR     = :ptr_st_xchngbook->l_mdfctn_cntr;

      break;

    case  INSERTION_ON_ORDER_MODIFICATION :

      if ( ptr_st_xchngbook->c_slm_flg != MARKET )
      {
        ptr_st_xchngbook->l_quote = 0;
        strcpy( ptr_st_xchngbook->c_qt_tm, "\0" );
      }

      strcpy ( ( char * )c_xchng_rmrks.arr, ptr_st_xchngbook->c_xchng_rmrks );

      SETLEN ( c_xchng_rmrks );

      EXEC SQL
        INSERT INTO FXB_FO_XCHNG_BOOK
        (
          FXB_XCHNG_CD,
          FXB_ORDR_RFRNC,
          FXB_PIPE_ID,
          FXB_MOD_TRD_DT,
          FXB_ORDR_SQNC,
          FXB_LMT_MRKT_SL_FLG,
          FXB_DSCLSD_QTY,
          FXB_ORDR_TOT_QTY,
          FXB_LMT_RT,
          FXB_STP_LSS_TGR,
          FXB_MDFCTN_CNTR,
          FXB_ORDR_VALID_DT,
          FXB_ORDR_TYPE,
          FXB_SPRD_ORD_IND,
          FXB_RQST_TYP,
          FXB_QUOTE,
          FXB_QT_TM,
          FXB_RQST_TM,
          FXB_PLCD_STTS,
          FXB_EX_ORDR_TYP,
          FXB_XCHNG_RMRKS,
          FXB_SPL_FLAG,
				  FXB_MRKT_TYP,
          FXB_SPN_FLG,
					FXB_IP,		/*** Ver 1.5 ***/
					FXB_INIT_SLTP_RT,  /*** Ver 4.5 **/
					FXB_INIT_LMT_RT, /*** Ver 4.5 **/
					FXB_LTP_RT,      /*** Ver 4.5 **/
					FXB_TRAIL_AMT,   /*** Ver 4.5 **/
					FXB_LMT_OFFSET,  /*** Ver 4.5 **/
					FXB_PRCIMPV_FLG,  /*** Ver 4.5 **/
          FXB_SSSN_ID       /** Ver 7.4 **/
        )
        VALUES
        (
          :ptr_st_xchngbook->c_xchng_cd,
          :ptr_st_xchngbook->c_ordr_rfrnc,
          :ptr_st_xchngbook->c_pipe_id,
          to_date (:ptr_st_xchngbook->c_mod_trd_dt,'DD-Mon-yyyy'),
          :ptr_st_xchngbook->l_ord_seq,
          :ptr_st_xchngbook->c_slm_flg,
          :ptr_st_xchngbook->l_dsclsd_qty,
          :ptr_st_xchngbook->l_ord_tot_qty,
          :ptr_st_xchngbook->l_ord_lmt_rt,
          :ptr_st_xchngbook->l_stp_lss_tgr,
          :ptr_st_xchngbook->l_mdfctn_cntr,
          to_date(:ptr_st_xchngbook->c_valid_dt, 'DD-Mon-yyyy' ),
          :ptr_st_xchngbook->c_ord_typ,
          :ptr_st_xchngbook->c_sprd_ord_ind,
          :ptr_st_xchngbook->c_req_typ,
          :ptr_st_xchngbook->l_quote,
          to_date(:ptr_st_xchngbook->c_qt_tm, 'DD-Mon-yyyy hh24:mi:ss' ),
          to_date(:ptr_st_xchngbook->c_rqst_tm, 'DD-Mon-yyyy hh24:mi:ss' ),
          :ptr_st_xchngbook->c_plcd_stts,
          :ptr_st_xchngbook->c_ex_ordr_typ,
          :c_xchng_rmrks,
          :ptr_st_xchngbook->c_spl_flg,
          :ptr_st_xchngbook->c_mkrt_typ,
          :ptr_st_xchngbook->c_spn_flg,
					:ptr_st_xchngbook->c_ip_address,		/*** Ver 1.5 ***/
					:ptr_st_xchngbook->l_init_sltp_rt,  /* Ver 4.5 */
					:ptr_st_xchngbook->l_init_lmt_rt,    /* Ver 4.5 */
					:ptr_st_xchngbook->l_lTP,         /* Ver 4.5 */
					:ptr_st_xchngbook->l_trail_amt,   /* Ver 4.5 */
					:ptr_st_xchngbook->l_lmt_offset,   /* Ver 4.5 */
					:ptr_st_xchngbook->c_prcimpv_flg,   /* Ver 4.5 */
					:ptr_st_xchngbook->l_session_id   /* Ver 7.4 */
        );
      break;

		case INSERTION_ON_ORDER_FTE	:

			i_rec_exists = 0;

      if ( ptr_st_xchngbook->l_dwnld_flg == DOWNLOAD )
      {
        if ( ptr_st_xchngbook->l_ors_msg_typ == ORS_2L_ORD_CNCL ||  ptr_st_xchngbook->l_ors_msg_typ ==  ORS_3L_ORD_CNCL )    
        {
					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"Inside DOWNLOAD For ORS_2L_ORD_CNCL & ORS_3L_ORD_CNCL");
						fn_userlog(c_ServiceName,"Jiffy Is :%lf:",ptr_st_xchngbook->d_jiffy);
						fn_userlog(c_ServiceName,"Order Sequence Is :%ld:",ptr_st_xchngbook->l_ord_seq);
					}

          EXEC SQL
            SELECT 1
            INTO :i_rec_exists
            FROM FXB_FO_XCHNG_BOOK
            WHERE FXB_JIFFY = :ptr_st_xchngbook->d_jiffy
            AND FXB_XCHNG_CD = :ptr_st_xchngbook->c_xchng_cd
            AND FXB_PIPE_ID = :ptr_st_xchngbook->c_pipe_id
            AND FXB_ORDR_SQNC = :ptr_st_xchngbook->l_ord_seq
            AND FXB_STREAM_NO = :ptr_st_xchngbook->l_bit_flg;

          if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
          {
            fn_errlog ( c_ServiceName, "L31190",SQLMSG, c_err_msg );
            tpfree ( ( char * ) ptr_st_xchngbook );
						return -1;
          }

        }
       else
       {
          EXEC SQL
            SELECT 1
            INTO :i_rec_exists
            FROM FXB_FO_XCHNG_BOOK
            WHERE FXB_JIFFY = :ptr_st_xchngbook->d_jiffy
            AND FXB_XCHNG_CD = :ptr_st_xchngbook->c_xchng_cd
            AND FXB_PIPE_ID = :ptr_st_xchngbook->c_pipe_id
            AND FXB_STREAM_NO = :ptr_st_xchngbook->l_bit_flg;     

          if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
          {
            fn_errlog ( c_ServiceName, "L31195", SQLMSG, c_err_msg );
            tpfree ( ( char * ) ptr_st_xchngbook );
						return -1;
          }
        }

        if ( i_rec_exists == 1 )
        {
          tpfree ( ( char * ) ptr_st_xchngbook );
          strcpy( c_err_msg, "Record already Processed" );
					return -1;
        }
     }
	
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"ptr_st_xchngbook->c_mod_trd_dt     |%s|",ptr_st_xchngbook->c_mod_trd_dt);
			fn_userlog(c_ServiceName,"ptr_st_xchngbook->c_ack_tm         |%s|",ptr_st_xchngbook->c_ack_tm);
		}

		EXEC SQL
      INSERT INTO FXB_FO_XCHNG_BOOK
      (
            FXB_XCHNG_CD,
            FXB_ORDR_RFRNC,
            FXB_MDFCTN_CNTR,
            FXB_PIPE_ID,
            FXB_MOD_TRD_DT,
            FXB_ORDR_SQNC,
            FXB_PLCD_STTS,
            FXB_RMS_PRCSD_FLG,
            FXB_ORS_MSG_TYP,
            FXB_ACK_TM,
            FXB_XCHNG_RMRKS,
            FXB_RQST_TYP,
            FXB_JIFFY,
            FXB_ORDR_TOT_QTY,
            FXB_LMT_RT,
            FXB_STREAM_NO
          )
          VALUES
          (
            :ptr_st_xchngbook->c_xchng_cd,
            :ptr_st_xchngbook->c_ordr_rfrnc,
            :ptr_st_xchngbook->l_mdfctn_cntr,
            :ptr_st_xchngbook->c_pipe_id,
            to_date (:ptr_st_xchngbook->c_mod_trd_dt,'DD-Mon-yyyy'),
            0,
            :ptr_st_xchngbook->c_plcd_stts,
            :ptr_st_xchngbook->c_rms_prcsd_flg,
            :ptr_st_xchngbook->l_ors_msg_typ,
            to_date (:ptr_st_xchngbook->c_ack_tm,'DD-Mon-yyyy hh24:mi:ss'),
            :ptr_st_xchngbook->c_xchng_rmrks,
            'T',
            :ptr_st_xchngbook->d_jiffy,
            :ptr_st_xchngbook->l_ord_tot_qty,
            :ptr_st_xchngbook->l_ord_lmt_rt,
            :ptr_st_xchngbook->l_bit_flg
          );

      break;

		case	UPDATE_RMS_PRCSD_FLG	:
		
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Inside Case UPDATE_RMS_PRCSD_FLG.");
				fn_userlog(c_ServiceName,"Inside Case c_rms_prcsd_flg Is :%c:",ptr_st_xchngbook->c_rms_prcsd_flg);
				fn_userlog(c_ServiceName,"Inside Case c_xchng_rmrks Is :%s:",c_xchng_rmrks.arr);
				fn_userlog(c_ServiceName,"Inside Case c_ordr_rfrnc Is :%s:",ptr_st_xchngbook->c_ordr_rfrnc);
				fn_userlog(c_ServiceName,"Inside Case l_mdfctn_cntr Is :%ld:",ptr_st_xchngbook->l_mdfctn_cntr);
			}

		  strcpy ( ( char * )c_xchng_rmrks.arr, ptr_st_xchngbook->c_xchng_rmrks );
  		rtrim ( c_xchng_rmrks.arr );
  		SETLEN ( c_xchng_rmrks );

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Inside Case1 c_rms_prcsd_flg Is :%c:",ptr_st_xchngbook->c_rms_prcsd_flg);
				fn_userlog(c_ServiceName,"Inside Case1 c_xchng_rmrks Is :%s:",c_xchng_rmrks.arr);
				fn_userlog(c_ServiceName,"Inside Case1 c_ordr_rfrnc Is :%s:",ptr_st_xchngbook->c_ordr_rfrnc);
				fn_userlog(c_ServiceName,"Inside Case1 l_mdfctn_cntr Is :%ld:",ptr_st_xchngbook->l_mdfctn_cntr);
			}

			EXEC SQL
    		UPDATE  FXB_FO_XCHNG_BOOK
    		SET     FXB_RMS_PRCSD_FLG   = :ptr_st_xchngbook->c_rms_prcsd_flg,
   			        FXB_XCHNG_RMRKS     = rtrim(fxb_xchng_rmrks)||'-'||:c_xchng_rmrks
    		WHERE   FXB_ORDR_RFRNC      = :ptr_st_xchngbook->c_ordr_rfrnc
    		AND     FXB_MDFCTN_CNTR     = :ptr_st_xchngbook->l_mdfctn_cntr;

		break;

    default :

			fn_userlog(c_ServiceName,"INSIDE default.");
      strcpy( c_err_msg, "Invalid Operation Type" );
      fn_errlog ( c_ServiceName, "L31200", DEFMSG, c_err_msg );
			tpfree ( ( char * ) ptr_st_xchngbook );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;

    break;
  }

	if (	SQLCODE	!=	0	)
	{
		fn_errlog( c_ServiceName, "L31205", SQLMSG, c_err_msg );
		tpfree ( ( char * ) ptr_st_xchngbook );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		return	-1;
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"BEFORE COMMIT.");
	}

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
		fn_errlog( c_ServiceName, "L31210", TPMSG, c_err_msg );
    tpfree ( ( char * ) ptr_st_xchngbook );
		return -1;
  }
	
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"AFTER COMMIT.");
		fn_userlog(c_ServiceName,"After Update Xchange Book.");
  }
	return 0;
}

int fn_spnupd_ordrbook	(	char  *c_ServiceName,
                      		struct st_orderbook *ptr_st_ordbook,
                      		struct st_err_msg *ptr_st_err_msg
                    		)
{
  char c_err_msg[256];
  char c_source_flg='\0';                   /*** Ver 4.0 ***/
	char c_ucc_cd[13] = "\0";  /*** Added in VEr 8.0 ***/

	int	i_trnsctn;
  c_source_flg  = ptr_st_ordbook->c_bnk_accnt_nmbr[0][0];             /*** Ver 4.0 ***/

	if(DEBUG_MSG_LVL_0)
	{
		/*** fn_userlog(c_ServiceName,"Inside Function fn_upd_ordrbook .");
		fn_userlog(c_ServiceName,"Operation Type Is :%c:",ptr_st_ordbook->c_oprn_typ); 
		fn_userlog(c_ServiceName,"Order ReferenceIs :%s:",ptr_st_ordbook->c_ordr_rfrnc); *** Ver 4.2 ***/
		fn_userlog(c_ServiceName,"fn_spnupd_ordrbook : Order Ref Is :%s: Operation Type Is :%c:",ptr_st_ordbook->c_ordr_rfrnc,ptr_st_ordbook->c_oprn_typ);	/*** Ver 4.2 ***/
		fn_userlog(c_ServiceName,"SPL FLG IS :%c:",ptr_st_ordbook->c_spl_flg);
    fn_userlog(c_ServiceName,"After getting source flag.....:%c:",c_source_flg);        /*** Ver 4.0 ***/
	}

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    strcpy( ptr_st_err_msg->c_err_msg, c_err_msg );
		return -1;
  }

  switch(ptr_st_ordbook->c_oprn_typ)
  {
		case	INSERT_ON_ORDER_PLACEMENT	:

		/*** Added in VER 8.0 : Real time margin reporting ( Fetching UCC code ) ***/

    MEMSET(c_ucc_cd);

    EXEC SQL
    SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
    INTO  :c_ucc_cd
    FROM  CLM_CLNT_MSTR
    WHERE CLM_MTCH_ACCNT = :ptr_st_ordbook->c_cln_mtch_accnt;

    if ( SQLCODE != 0 )
    {
      fn_userlog(c_ServiceName,"fn_spnupd_ordrbook : Error while fetching UCC code for :%s:", ptr_st_ordbook->c_cln_mtch_accnt);
      fn_errlog( c_ServiceName, "S39425",SQLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }

    rtrim(c_ucc_cd);

    if(DEBUG_MSG_LVL_3)
      fn_userlog(c_ServiceName,"VER 8.0 -- fn_spnupd_ordrbook : MAtch ID :%s: have ucc code :%s:", ptr_st_ordbook->c_cln_mtch_accnt, c_ucc_cd);

    /*** VER 8.0 ends here ***/

  	EXEC SQL
    	INSERT INTO FOD_FO_ORDR_DTLS
    	(
      	FOD_CLM_MTCH_ACCNT,
      	FOD_CLNT_CTGRY,
      	FOD_ORDR_RFRNC,
      	FOD_PIPE_ID,
      	FOD_XCHNG_CD,
      	FOD_PRDCT_TYP,
      	FOD_UNDRLYNG,
      	FOD_EXPRY_DT,
      	FOD_EXER_TYP,
      	FOD_OPT_TYP,
      	FOD_STRK_PRC,
      	FOD_ORDR_FLW,
      	FOD_LMT_MRKT_SL_FLG,
      	FOD_DSCLSD_QTY,
      	FOD_ORDR_TOT_QTY,
     	 	FOD_LMT_RT,
      	FOD_STP_LSS_TGR,
      	FOD_ORDR_TYPE,
      	FOD_ORDR_VALID_DT,
      	FOD_TRD_DT,
      	FOD_ORDR_STTS,
      	FOD_SPRD_ORDR_REF,
      	FOD_MDFCTN_CNTR,
      	FOD_SETTLOR,
      	FOD_SPL_FLAG,
      	FOD_INDSTK,
      	FOD_PRO_CLI_IND,
      	FOD_CHANNEL,
      	FOD_BP_ID,
      	FOD_CTCL_ID,
      	FOD_USR_ID,
      	FOD_MRKT_TYP,
      	FOD_CSE_ID,
      	FOD_SPN_FLG,
        FOD_SOURCE_FLG,                /** Ver 4.0 **/
        FOD_SLTP_ORDR_RFRNC,          /** Ver 3.3 **/
        FOD_EOS_FLG,                   /** Ver 4.4 **/
				FOD_PRCIMPV_FLG,              /** Ver 4.5 **/
				FOD_TRAIL_AMT,								/** Ver 4.5 **/
				FOD_LMT_OFFSET,								/** Ver 4.5 **/
        FOD_PAN_NO,                    /** Ver 4.9 **/
				FOD_ESP_ID,									  /*** Ver 5.6 ***/
        FOD_ALGO_ID,                 /*** Ver 6.7 ***/
        FOD_APIREMARKS,              /*** Ver 6.7 ***/ 
        FOD_SQROFF_TM,                /*** Ver 7.2 ***/
        FOD_FC_FLAG,                   /*** Ver 7.2 ***/
				FOD_UCC_CD                    /*** Added in VER 8.0 ***/
    	)
    	VALUES
    	(
      	:ptr_st_ordbook->c_cln_mtch_accnt,
      	:ptr_st_ordbook->l_clnt_ctgry,
      	:ptr_st_ordbook->c_ordr_rfrnc,
      	:ptr_st_ordbook->c_pipe_id,
			 	:ptr_st_ordbook->c_xchng_cd,
      	:ptr_st_ordbook->c_prd_typ,
      	:ptr_st_ordbook->c_undrlyng,
      	to_date( :ptr_st_ordbook->c_expry_dt, 'dd-mon-yyyy' ),
      	:ptr_st_ordbook->c_exrc_typ,
      	:ptr_st_ordbook->c_opt_typ,
      	:ptr_st_ordbook->l_strike_prc,
      	:ptr_st_ordbook->c_ordr_flw,
      	:ptr_st_ordbook->c_slm_flg,
      	:ptr_st_ordbook->l_dsclsd_qty,
      	:ptr_st_ordbook->l_ord_tot_qty,
      	:ptr_st_ordbook->l_ord_lmt_rt,
      	:ptr_st_ordbook->l_stp_lss_tgr,
      	:ptr_st_ordbook->c_ord_typ,
      	to_date( :ptr_st_ordbook->c_valid_dt,'dd-mon-yyyy' ),
      	to_date( :ptr_st_ordbook->c_trd_dt,'dd-mon-yyyy' ),
      	:ptr_st_ordbook->c_ordr_stts,
      	:ptr_st_ordbook->c_sprd_ord_rfrnc,
      	:ptr_st_ordbook->l_mdfctn_cntr,
      	:ptr_st_ordbook->c_settlor,
      	:ptr_st_ordbook->c_spl_flg,
      	:ptr_st_ordbook->c_ctgry_indstk,
      	:ptr_st_ordbook->c_pro_cli_ind,
      	:ptr_st_ordbook->c_channel,
      	:ptr_st_ordbook->c_bp_id,
      	:ptr_st_ordbook->c_ctcl_id,
      	:ptr_st_ordbook->c_user_id,
      	:ptr_st_ordbook->c_mrkt_typ,
      	:ptr_st_ordbook->l_cse_id,
      	:ptr_st_ordbook->c_spn_flg,
        :c_source_flg,                                             /** Ver 4.0 **/
        DECODE(:ptr_st_ordbook->c_ord_typ,'V',:ptr_st_ordbook->c_ordr_rfrnc,NULL),  /*** Ver 3.3 **/
        :ptr_st_ordbook->c_req_typ,   /** ver 4.4 **/
				:ptr_st_ordbook->c_prcimpv_flg,  /** Ver 4.5 **/
				:ptr_st_ordbook->l_trail_amt,    /** Ver 4.5 **/
				:ptr_st_ordbook->l_lmt_offset,   /** Ver 4.5 **/
        :ptr_st_ordbook->c_pan_no,        /** Ver 4.9 **/
				:ptr_st_ordbook->c_esp_id,					/** Ver 5.6 **/
        :ptr_st_ordbook->c_algo_id,         /** Ver 6.7 **/
        :ptr_st_ordbook->c_algo_ord_rmrks,   /** Ver 6.7 **/ 
        :ptr_st_ordbook->l_sqroff_tm,        /** Ver 7.2  **/
        :ptr_st_ordbook->c_fc_flg,           /** Ver 7.2 **/
				:c_ucc_cd														/*** Added in Ver 8.0 ***/
    	);

			break;

		case  UPDATE_MOD_CNTR:

      EXEC SQL
        UPDATE  FOD_FO_ORDR_DTLS
        SET     FOD_MDFCTN_CNTR   = FOD_MDFCTN_CNTR + 1,
                FOD_EOS_FLG       = :ptr_st_ordbook->c_req_typ  /*** Ver 4.4 ***/
        WHERE   FOD_ORDR_RFRNC		= :ptr_st_ordbook->c_ordr_rfrnc;

      break;

		case  UPDATE_ORDER_MODIFICATION:

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN c_slm_flg Is :%c:",ptr_st_ordbook->c_slm_flg);
			fn_userlog(c_ServiceName,"SPAN l_dsclsd_qty Is :%c:",ptr_st_ordbook->l_dsclsd_qty);
			fn_userlog(c_ServiceName,"SPAN c_ord_typ Is :%c:",ptr_st_ordbook->c_ord_typ);
			fn_userlog(c_ServiceName,"SPAN l_stp_lss_tgr Is :%ld:",ptr_st_ordbook->l_stp_lss_tgr);
			fn_userlog(c_ServiceName,"SPAN l_ord_tot_qty Is :%ld:",ptr_st_ordbook->l_ord_tot_qty);
			fn_userlog(c_ServiceName,"SPAN l_ord_lmt_rt Is :%ld:",ptr_st_ordbook->l_ord_lmt_rt);
			fn_userlog(c_ServiceName,"SPAN c_ordr_stts Is :%c:",ptr_st_ordbook->c_ordr_stts);
			fn_userlog(c_ServiceName,"SPAN c_ordr_stts Is :%s:",ptr_st_ordbook->c_ordr_rfrnc);
		}
    
		EXEC SQL
        UPDATE  FOD_FO_ORDR_DTLS
        SET     FOD_LMT_MRKT_SL_FLG = :ptr_st_ordbook->c_slm_flg,
                FOD_DSCLSD_QTY      = :ptr_st_ordbook->l_dsclsd_qty,
                FOD_ORDR_TYPE       = :ptr_st_ordbook->c_ord_typ,
                FOD_STP_LSS_TGR     = :ptr_st_ordbook->l_stp_lss_tgr,
                FOD_ORDR_TOT_QTY    = :ptr_st_ordbook->l_ord_tot_qty,
                FOD_LMT_RT          = :ptr_st_ordbook->l_ord_lmt_rt,
                FOD_ORDR_STTS       = :ptr_st_ordbook->c_ordr_stts,
                FOD_ORDR_VALID_DT   = to_date (:ptr_st_ordbook->c_valid_dt,'dd-mon-yyyy' ),
                FOD_TRD_DT          = to_date (:ptr_st_ordbook->c_trd_dt,'dd-mon-yyyy' ),
                FOD_LST_RQST_ACK_TM = to_date (:ptr_st_ordbook->c_ack_tm,'dd-mon-yyyy hh24:mi:ss' ),
								FOD_PRCIMPV_FLG     = :ptr_st_ordbook->c_prcimpv_flg   /*** Ver 4.5 ***/
        WHERE   FOD_ORDR_RFRNC      = :ptr_st_ordbook->c_ordr_rfrnc;

      break;

		case UPDATE_STATUS_ACK_TM:

      EXEC SQL
        UPDATE  FOD_FO_ORDR_DTLS
        SET     FOD_ORDR_STTS = :ptr_st_ordbook->c_ordr_stts,
                FOD_ORD_ACK_TM = TO_DATE (:ptr_st_ordbook->c_prev_ack_tm,'dd-mon-yyyy hh24:mi:ss' ),
                FOD_LST_RQST_ACK_TM = TO_DATE (:ptr_st_ordbook->c_ack_tm,'dd-mon-yyyy hh24:mi:ss' )
        WHERE   FOD_ORDR_RFRNC= :ptr_st_ordbook->c_ordr_rfrnc;

        break;

    case  UPDATE_XCHNG_RESP_DTLS:

      EXEC SQL
        UPDATE  FOD_FO_ORDR_DTLS
        SET     FOD_ORDR_STTS       = :ptr_st_ordbook->c_ordr_stts,
                FOD_CNCL_QTY        = :ptr_st_ordbook->l_can_qty,
                FOD_EXPRD_QTY       = :ptr_st_ordbook->l_exprd_qty,
                FOD_TRD_DT          = to_date (:ptr_st_ordbook->c_trd_dt,'dd-mon-yyyy' )
        WHERE   FOD_ORDR_RFRNC= :ptr_st_ordbook->c_ordr_rfrnc;
      break;

		 case  UPDATE_XCHNG_RESP_DTLS_CA:

      EXEC SQL
        UPDATE  FOD_FO_ORDR_DTLS
        SET     FOD_ORDR_STTS       = :ptr_st_ordbook->c_ordr_stts,
                FOD_CNCL_QTY        = :ptr_st_ordbook->l_can_qty,
                FOD_EXPRD_QTY       = :ptr_st_ordbook->l_exprd_qty,
                FOD_TRD_DT          = to_date (:ptr_st_ordbook->c_trd_dt,'dd-mon-yyyy' ),
                FOD_LST_RQST_ACK_TM = to_date (:ptr_st_ordbook->c_ack_tm,'dd-mon-yyyy hh24:mi:ss' )
        WHERE   FOD_ORDR_RFRNC      = :ptr_st_ordbook->c_ordr_rfrnc;

    	break;

		case  UPDATE_TRADE_CONFIRMATION:

      EXEC SQL
        UPDATE  FOD_FO_ORDR_DTLS
        SET     FOD_EXEC_QTY        = :ptr_st_ordbook->l_exctd_qty,
                FOD_EXEC_QTY_DAY    = :ptr_st_ordbook->l_exctd_qty_day,
                FOD_ORDR_STTS       = :ptr_st_ordbook->c_ordr_stts,
                FOD_LST_RQST_ACK_TM = to_date (:ptr_st_ordbook->c_ack_tm,'dd-mon-yyyy hh24:mi:ss' )
        WHERE   FOD_ORDR_RFRNC      = :ptr_st_ordbook->c_ordr_rfrnc;
      break;

    case  UPDATE_XCHNG_RESPONSE:		/*** Operation type added for offline trade ***/

      EXEC SQL
        UPDATE  FOD_FO_ORDR_DTLS
        SET     FOD_ACK_NMBR  = :ptr_st_ordbook->c_xchng_ack
        WHERE   FOD_ORDR_RFRNC= :ptr_st_ordbook->c_ordr_rfrnc;
      break;

    default:

      strcpy( c_err_msg, "Invalid Operation Type" );
      fn_userlog ( c_ServiceName, "ERROR :%s:", c_err_msg );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
      break;
	}

  if (  SQLCODE !=  0 )
  {
    fn_errlog( c_ServiceName, "L31215", SQLMSG, ptr_st_err_msg->c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return  -1;
  }

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    strcpy( ptr_st_err_msg->c_err_msg, c_err_msg );
		return	-1;
  }

	return	0;
}

int fn_spnupd_trdbook ( char  *c_ServiceName,
                     		char  *c_user_id,
    								 		struct st_tradebook *ptr_st_tradebook,
                     		struct st_err_msg *ptr_st_err_msg
                   		)
{
	int   i_rec_found = 0; /*** Added on 12-Dec-2011 ***/

	if(DEBUG_MSG_LVL_5)	/*** Ver 4.2 ***/
	{
		fn_userlog(c_ServiceName,"SPAN	-	Inside Function fn_spnupd_trdbook.");
	}

	if(DEBUG_MSG_LVL_0){	/*** Ver 4.2 ***/
		fn_userlog(c_ServiceName,"fn_spnupd_trdbook : Trade Ref:%s: Operation Type :%c:",ptr_st_tradebook->c_trd_rfrnc,ptr_st_tradebook->c_oprn_typ);
	}

	switch ( ptr_st_tradebook->c_oprn_typ	)
	{
		 case INSERT_TRADE_CONF:		/*** Operation type added for offline trade 12-Dec-2011 ***/
      i_rec_found = 0;
			if ( ptr_st_tradebook->l_dwnld_flg == DOWNLOAD )
      {
        EXEC SQL
          SELECT 1
          INTO  :i_rec_found
          FROM ftd_fo_trd_dtls
          WHERE FTD_JIFFY = :ptr_st_tradebook->d_jiffy
          AND FTD_XCHNG_CD = :ptr_st_tradebook->c_xchng_cd
          AND FTD_STREAM_NO = :ptr_st_tradebook->l_ca_lvl;

        if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
        {
          fn_errlog(c_ServiceName,"S31060",SQLMSG,ptr_st_err_msg->c_err_msg );
					return  -1;
        }
      }
      break;

		case	UPDATE_TRADE_CONF	:
	
			EXEC SQL
        UPDATE  FTD_FO_TRD_DTLS
        SET     FTD_RMS_PRCSD_FLG = :ptr_st_tradebook->c_rms_prcsd_flg,
                FTD_FRESH_QTY 		= :ptr_st_tradebook->l_fresh_qty,
                FTD_COVER_QTY 		= :ptr_st_tradebook->l_cover_qty,
                FTD_PRCS_TM       = sysdate                           /*** Ver 3.9 ***/
        WHERE   FTD_ORDR_RFRNC 		= :ptr_st_tradebook->c_ordr_rfrnc
        AND     FTD_EBA_TRD_REF		= :ptr_st_tradebook->c_trd_rfrnc;

      if ( SQLCODE != 0 )			/*** Added on 12-Dec-2011 ***/
      {
        fn_errlog(c_ServiceName, "S31065", SQLMSG, ptr_st_err_msg->c_err_msg );
				return  -1;	
      }
		  break;

    default:

      strcpy( c_err_msg, "Invalid Operation Type" );
      fn_userlog ( c_ServiceName, "ERROR :%s:", c_err_msg );
      return -1;
      break;

	}

	/*** Commented on 12-Dec-2011 ***
	if (  SQLCODE !=  0 )
  {
    fn_errlog( c_ServiceName, "L31220", SQLMSG, ptr_st_err_msg->c_err_msg );
    return  -1;
  }
	*** Commented on 12-Dec-2011 ***/

	if ( ptr_st_tradebook->c_oprn_typ == INSERT_TRADE_CONF )		/***  Added for offline trade 12-Dec-2011 ***/
  {
    if (i_rec_found == 1 )
    {
      fn_errlog ( c_ServiceName, "S31070","Record Exists", ptr_st_err_msg->c_err_msg );
			return  -1;	
    }
    else
    {
      if( DEBUG_MSG_LVL_3 ) {         
        fn_userlog(c_ServiceName,"xchng cd [%s][%ld]",ptr_st_tradebook->c_xchng_cd,strlen(ptr_st_tradebook->c_xchng_cd));
        fn_userlog(c_ServiceName,"match  [%s][%ld]",ptr_st_tradebook->c_cln_mtch_accnt,strlen(ptr_st_tradebook->c_cln_mtch_accnt));
        fn_userlog(c_ServiceName,"trd_rfrnc  [%s][%ld]",ptr_st_tradebook->c_trd_rfrnc,strlen(ptr_st_tradebook->c_trd_rfrnc));
        fn_userlog(c_ServiceName,"c_ordr_rfrnc  [%s][%ld]",ptr_st_tradebook->c_ordr_rfrnc,strlen(ptr_st_tradebook->c_ordr_rfrnc));
        fn_userlog(c_ServiceName,"c_xchng_ack  [%s][%ld]",ptr_st_tradebook->c_xchng_ack,strlen(ptr_st_tradebook->c_xchng_ack));
        fn_userlog(c_ServiceName,"c_prd_typ  [%c]",ptr_st_tradebook->c_prd_typ);
        fn_userlog(c_ServiceName,"ptr_st_tradebook->c_ctgry_indstk  [%c]",ptr_st_tradebook->c_ctgry_indstk);
        fn_userlog(c_ServiceName,"c_undrlyng  [%s][%ld]",ptr_st_tradebook->c_undrlyng,strlen(ptr_st_tradebook->c_undrlyng));
        fn_userlog(c_ServiceName,"c_expry_dt  [%s][%ld]",ptr_st_tradebook->c_expry_dt,strlen(ptr_st_tradebook->c_expry_dt));
        fn_userlog(c_ServiceName,"c_exer_typ  [%c]",ptr_st_tradebook->c_exrc_typ);
        fn_userlog(c_ServiceName,"c_opt_typ  [%c]",ptr_st_tradebook->c_opt_typ);
        fn_userlog(c_ServiceName,"c_trd_dt  [%s][%ld]",ptr_st_tradebook->c_trd_dt,strlen(ptr_st_tradebook->c_trd_dt));
        fn_userlog(c_ServiceName,"c_trd_flw  [%c]",ptr_st_tradebook->c_trd_flw);
        fn_userlog(c_ServiceName,"c_user_id  [%s]",ptr_st_tradebook->c_user_id);        
      }
      EXEC SQL
        INSERT INTO ftd_fo_trd_dtls
        (
          ftd_xchng_cd,
          ftd_clm_mtch_accnt,
          ftd_eba_trd_ref,
          ftd_ordr_rfrnc,
          ftd_ord_ack_nmbr,
          ftd_xchng_trd_no,
          ftd_prdct_typ,
          ftd_indstk,
          ftd_undrlyng,
          ftd_expry_dt,
          ftd_exer_typ,
          ftd_opt_typ,
          ftd_strk_prc,
          ftd_trd_dt,
          ftd_trd_flw,
          ftd_exctd_qty,
          ftd_exctd_rt,
          ftd_rms_prcsd_flg,
          ftd_upld_mtch_flg,
          ftd_jiffy,
          ftd_usr_id,                            
          ftd_stream_no,
          ftd_insrt_tm     /** Ver 3.9 **/                          
        )
        VALUES
				(
          :ptr_st_tradebook->c_xchng_cd,
          :ptr_st_tradebook->c_cln_mtch_accnt,
          :ptr_st_tradebook->c_trd_rfrnc,
          :ptr_st_tradebook->c_ordr_rfrnc,
          :ptr_st_tradebook->c_xchng_ack,
          :ptr_st_tradebook->l_xchng_trd_no,
          :ptr_st_tradebook->c_prd_typ,
          :ptr_st_tradebook->c_ctgry_indstk,
          :ptr_st_tradebook->c_undrlyng,
          to_date ( :ptr_st_tradebook->c_expry_dt, 'DD-Mon-yyyy' ),
          :ptr_st_tradebook->c_exrc_typ,
          :ptr_st_tradebook->c_opt_typ,
          :ptr_st_tradebook->l_strike_prc,
          to_date ( :ptr_st_tradebook->c_trd_dt, 'DD-Mon-yyyy hh24:mi:ss' ),
          :ptr_st_tradebook->c_trd_flw,
          :ptr_st_tradebook->l_exctd_qty,
          :ptr_st_tradebook->l_exctd_rt,
          'N',
          'N',
          :ptr_st_tradebook->d_jiffy,
          :ptr_st_tradebook->c_user_id,        
          :ptr_st_tradebook->l_ca_lvl,
          sysdate                      /*** Ver 3.9 ***/          
        );

        if ( SQLCODE != 0 )
        {
          fn_errlog ( c_ServiceName, "S31075", SQLMSG, ptr_st_err_msg->c_err_msg );
					return -1;
				}
    } /*** i_rec_found == 1   ***/
  } /** c_oprn_typ == INSERT_TRADE_CONF ***/
	return	0;
}

int fn_spnref_to_ord	(	struct st_orderbook *ptr_ist_orderbook,
												struct st_orderbook *ptr_ost_orderbook,
                    		char *c_ServiceName,
                    		char *c_err_msg
											)
{
  short i_sprd_ord_rfrnc;
  short i_settlor;
  short i_ack_tm;
  short i_prev_ack_tm;
  short i_xchng_ack;
  short i_valid_dt;

	if(DEBUG_MSG_LVL_5) /*** Ver 4.2 ***/
	{
		fn_userlog(c_ServiceName,"SPAN	-	Inside Function fn_ref_to_ord.");
		fn_userlog(c_ServiceName,"SPAN	-	Operation Type Is :%c:",ptr_ist_orderbook->c_oprn_typ);
	}

  MEMSET( ptr_ist_orderbook->c_ctcl_id);

	switch	(	ptr_ist_orderbook->c_oprn_typ	)
	{
		case	FOR_UPDATE	:
			
			EXEC SQL
      	SELECT	FOD_CLM_MTCH_ACCNT,
              	FOD_CLNT_CTGRY,
              	FOD_PIPE_ID,
              	FOD_XCHNG_CD,
              	DECODE(:ptr_ist_orderbook->c_oprn_typ,'S',(DECODE(FOD_PRDCT_TYP,'P','F',FOD_PRDCT_TYP)),FOD_PRDCT_TYP),
              	FOD_UNDRLYNG,
              	TO_CHAR ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ),
              	FOD_EXER_TYP,
              	FOD_OPT_TYP,
              	FOD_STRK_PRC,
              	FOD_ORDR_FLW,
              	FOD_LMT_MRKT_SL_FLG,
              	FOD_DSCLSD_QTY,
              	FOD_ORDR_TOT_QTY,
              	FOD_LMT_RT,
              	FOD_STP_LSS_TGR,
              	FOD_ORDR_TYPE,
              	TO_CHAR ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
              	TO_CHAR ( FOD_TRD_DT, 'dd-Mon-yyyy' ),
              	FOD_ORDR_STTS,
              	FOD_EXEC_QTY,
              	NVL(FOD_EXEC_QTY_DAY,0),
              	FOD_CNCL_QTY,
              	FOD_EXPRD_QTY,
              	FOD_SPRD_ORDR_REF,
              	FOD_MDFCTN_CNTR,
              	FOD_SETTLOR,
              	FOD_ACK_NMBR,
              	FOD_SPL_FLAG,
              	FOD_INDSTK,
              	TO_CHAR ( FOD_ORD_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              	TO_CHAR ( FOD_LST_RQST_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              	FOD_PRO_CLI_IND,
              	NVL(FOD_CTCL_ID,' '),
              	FOD_CHANNEL,
								FOD_SPN_FLG,
								NVL(FOD_SLTP_ORDR_RFRNC,'*'),		/*** Ver 1.8 ***/
								NVL(FOD_AMT_BLCKD,0),						/*** Ver 1.8 ***/
								NVL(FOD_LSS_AMT_BLCKD,0),				/*** Ver 1.8 ***/
								NVL(FOD_FC_FLAG,'*'),						/*** Ver 1.8 ***/
								NVL(FOD_DIFF_AMT_BLCKD,0),			/*** Ver 1.8 ***/
								NVL(FOD_DIFF_LSS_AMT_BLCKD,0),		/*** Ver 1.8 ***/
								NVL(FOD_PRCIMPV_FLG,'N')          /*** Ver 4.5 ***/
       	INTO  	:ptr_ost_orderbook->c_cln_mtch_accnt,
        	     	:ptr_ost_orderbook->l_clnt_ctgry,
          	   	:ptr_ost_orderbook->c_pipe_id,
            	 	:ptr_ost_orderbook->c_xchng_cd,
      	       	:ptr_ost_orderbook->c_prd_typ,
        	     	:ptr_ost_orderbook->c_undrlyng,
      	       	:ptr_ost_orderbook->c_expry_dt,
        	     	:ptr_ost_orderbook->c_exrc_typ,
								:ptr_ost_orderbook->c_opt_typ,
		            :ptr_ost_orderbook->l_strike_prc,
     		        :ptr_ost_orderbook->c_ordr_flw,
     	        	:ptr_ost_orderbook->c_slm_flg,
             		:ptr_ost_orderbook->l_dsclsd_qty,
        	     	:ptr_ost_orderbook->l_ord_tot_qty,
             		:ptr_ost_orderbook->l_ord_lmt_rt,
             		:ptr_ost_orderbook->l_stp_lss_tgr,
             		:ptr_ost_orderbook->c_ord_typ,
             		:ptr_ost_orderbook->c_valid_dt:i_valid_dt,
             		:ptr_ost_orderbook->c_trd_dt,
             		:ptr_ost_orderbook->c_ordr_stts,
             		:ptr_ost_orderbook->l_exctd_qty,
             		:ptr_ost_orderbook->l_exctd_qty_day,
             		:ptr_ost_orderbook->l_can_qty,
             		:ptr_ost_orderbook->l_exprd_qty,
             		:ptr_ost_orderbook->c_sprd_ord_rfrnc:i_sprd_ord_rfrnc,
             		:ptr_ost_orderbook->l_mdfctn_cntr,
             		:ptr_ost_orderbook->c_settlor:i_settlor,
             		:ptr_ost_orderbook->c_xchng_ack:i_xchng_ack,
             		:ptr_ost_orderbook->c_spl_flg,
             		:ptr_ost_orderbook->c_ctgry_indstk,
             		:ptr_ost_orderbook->c_ack_tm:i_ack_tm,
             		:ptr_ost_orderbook->c_prev_ack_tm:i_prev_ack_tm,
             		:ptr_ost_orderbook->c_pro_cli_ind,
             		:ptr_ost_orderbook->c_ctcl_id,
             		:ptr_ost_orderbook->c_channel,
             		:ptr_ost_orderbook->c_spn_flg,
								:ptr_ost_orderbook->c_sltp_ord_rfrnc,				/*** Ver 1.8 ***/
								:ptr_ost_orderbook->d_amt_blkd,							/*** Ver 1.8 ***/
								:ptr_ost_orderbook->d_lss_amt_blkd,					/*** Ver 1.8 ***/
								:ptr_ost_orderbook->c_fc_flg,								/*** Ver 1.8 ***/
								:ptr_ost_orderbook->d_diff_amt_blkd,				/*** Ver 1.8 ***/
								:ptr_ost_orderbook->d_diff_lss_amt_blkd,			/*** Ver 1.8 ***/
								:ptr_ost_orderbook->c_prcimpv_flg            /*** Ver 4.5 ***/
       	FROM  	FOD_FO_ORDR_DTLS
       	WHERE 	FOD_ORDR_RFRNC = :ptr_ist_orderbook->c_ordr_rfrnc
       	FOR   UPDATE OF FOD_ORDR_RFRNC;

			break;		
		
		case	FOR_VIEW	:
	
			EXEC SQL
     		SELECT	FOD_CLM_MTCH_ACCNT,
              	FOD_CTCL_ID , 
              	FOD_CLNT_CTGRY,
              	FOD_PIPE_ID,
              	FOD_XCHNG_CD,
              	FOD_PRDCT_TYP,
              	FOD_UNDRLYNG,
              	TO_CHAR ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ),
              	FOD_EXER_TYP,
              	FOD_OPT_TYP,
              	FOD_STRK_PRC,
              	FOD_ORDR_FLW,
              	FOD_LMT_MRKT_SL_FLG,
              	FOD_DSCLSD_QTY,
              	FOD_ORDR_TOT_QTY,
              	FOD_LMT_RT,
              	FOD_STP_LSS_TGR,
              	FOD_ORDR_TYPE,
              	TO_CHAR ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
              	TO_CHAR ( FOD_TRD_DT, 'dd-Mon-yyyy' ),
              	FOD_ORDR_STTS,
              	FOD_EXEC_QTY,
              	NVL(FOD_EXEC_QTY_DAY,0),
              	FOD_CNCL_QTY,
              	FOD_EXPRD_QTY,
              	FOD_SPRD_ORDR_REF,
              	FOD_MDFCTN_CNTR,
              	FOD_SETTLOR,
              	FOD_ACK_NMBR,
              	FOD_SPL_FLAG,
              	FOD_INDSTK,
              	TO_CHAR ( FOD_ORD_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              	TO_CHAR ( FOD_LST_RQST_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              	FOD_PRO_CLI_IND ,
              	FOD_CHANNEL,
								FOD_SPN_FLG,
								NVL(FOD_SLTP_ORDR_RFRNC,'*'),		/*** Ver 1.8 ***/
								NVL(FOD_AMT_BLCKD,0),						/*** Ver 1.8 ***/
								NVL(FOD_LSS_AMT_BLCKD,0),				/*** Ver 1.8 ***/
								NVL(FOD_FC_FLAG,'*'),						/*** Ver 1.8 ***/
								NVL(FOD_DIFF_AMT_BLCKD,0),			/*** Ver 1.8 ***/
								NVL(FOD_DIFF_LSS_AMT_BLCKD,0),		/*** Ver 1.8 ***/                   
                NVL(FOD_PRCIMPV_FLG,'N')        /*** Ver 4.5 ***/
        	INTO  :ptr_ost_orderbook->c_cln_mtch_accnt,
              	:ptr_ost_orderbook->c_ctcl_id, 
              	:ptr_ost_orderbook->l_clnt_ctgry,
              	:ptr_ost_orderbook->c_pipe_id,
              	:ptr_ost_orderbook->c_xchng_cd,
              	:ptr_ost_orderbook->c_prd_typ,
              	:ptr_ost_orderbook->c_undrlyng,
              	:ptr_ost_orderbook->c_expry_dt,
              	:ptr_ost_orderbook->c_exrc_typ,
              	:ptr_ost_orderbook->c_opt_typ,
              	:ptr_ost_orderbook->l_strike_prc,
              	:ptr_ost_orderbook->c_ordr_flw,
              	:ptr_ost_orderbook->c_slm_flg,
  							:ptr_ost_orderbook->l_dsclsd_qty,
              	:ptr_ost_orderbook->l_ord_tot_qty,
              	:ptr_ost_orderbook->l_ord_lmt_rt,
              	:ptr_ost_orderbook->l_stp_lss_tgr,
              	:ptr_ost_orderbook->c_ord_typ,
              	:ptr_ost_orderbook->c_valid_dt:i_valid_dt,
              	:ptr_ost_orderbook->c_trd_dt,
              	:ptr_ost_orderbook->c_ordr_stts,
              	:ptr_ost_orderbook->l_exctd_qty,
              	:ptr_ost_orderbook->l_exctd_qty_day,
              	:ptr_ost_orderbook->l_can_qty,
              	:ptr_ost_orderbook->l_exprd_qty,
              	:ptr_ost_orderbook->c_sprd_ord_rfrnc:i_sprd_ord_rfrnc,
              	:ptr_ost_orderbook->l_mdfctn_cntr,
              	:ptr_ost_orderbook->c_settlor:i_settlor,
              	:ptr_ost_orderbook->c_xchng_ack:i_xchng_ack,
              	:ptr_ost_orderbook->c_spl_flg,
              	:ptr_ost_orderbook->c_ctgry_indstk,
              	:ptr_ost_orderbook->c_ack_tm:i_ack_tm,
              	:ptr_ost_orderbook->c_prev_ack_tm:i_prev_ack_tm,
              	:ptr_ost_orderbook->c_pro_cli_ind,
              	:ptr_ost_orderbook->c_channel,    
              	:ptr_ost_orderbook->c_spn_flg,
								:ptr_ost_orderbook->c_sltp_ord_rfrnc,				/*** Ver 1.8 ***/
								:ptr_ost_orderbook->d_amt_blkd,							/*** Ver 1.8 ***/
								:ptr_ost_orderbook->d_lss_amt_blkd,					/*** Ver 1.8 ***/
								:ptr_ost_orderbook->c_fc_flg,								/*** Ver 1.8 ***/
								:ptr_ost_orderbook->d_diff_amt_blkd,				/*** Ver 1.8 ***/
								:ptr_ost_orderbook->d_diff_lss_amt_blkd,			/*** Ver 1.8 ***/
                :ptr_ost_orderbook->c_prcimpv_flg           /*** Ver 4.5 ***/
        	FROM  FOD_FO_ORDR_DTLS
        	WHERE FOD_ORDR_RFRNC = :ptr_ist_orderbook->c_ordr_rfrnc;
	
			break;

		default :

			strcpy( c_err_msg, "Invalid Operation Type" );
      fn_userlog ( c_ServiceName, "ERROR :%s:", c_err_msg );
      return -1;
      break;
	}

	if (  SQLCODE !=  0 && SQLCODE	!=	NO_DATA_FOUND )
  {
    fn_errlog( c_ServiceName, "L31225", SQLMSG,c_err_msg );
    return  -1;
  }

	if ( SQLCODE == NO_DATA_FOUND &&  ptr_ist_orderbook->c_oprn_typ	==	FOR_VIEW	)
	{
		EXEC SQL
      SELECT  FOD_CLM_MTCH_ACCNT,
              FOD_CLNT_CTGRY,
              FOD_PIPE_ID,
              FOD_XCHNG_CD,
              FOD_PRDCT_TYP,
              FOD_UNDRLYNG,
              TO_CHAR ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ),
              FOD_EXER_TYP,
              FOD_OPT_TYP,
              FOD_STRK_PRC,
              FOD_ORDR_FLW,
              FOD_LMT_MRKT_SL_FLG,
              FOD_DSCLSD_QTY,
              FOD_ORDR_TOT_QTY,
              FOD_LMT_RT,
              FOD_STP_LSS_TGR,
              FOD_ORDR_TYPE,
              TO_CHAR ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
              TO_CHAR ( FOD_TRD_DT, 'dd-Mon-yyyy' ),
              FOD_ORDR_STTS,
              FOD_EXEC_QTY,
              NVL(FOD_EXEC_QTY_DAY,0),
              FOD_CNCL_QTY,
              FOD_EXPRD_QTY,
              NVL( FOD_SPRD_ORDR_REF, '*' ),
              FOD_MDFCTN_CNTR,
              NVL( FOD_SETTLOR, '*' ),
              FOD_ACK_NMBR,
              NVL( FOD_SPL_FLAG, ' ' ),
              FOD_INDSTK,
              TO_CHAR ( FOD_ORD_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              TO_CHAR ( FOD_LST_RQST_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              FOD_PRO_CLI_IND,
              FOD_CTCL_ID, 
              FOD_CHANNEL,
							FOD_SPN_FLG,
							NVL(FOD_SLTP_ORDR_RFRNC,'*'),		/*** Ver 1.8 ***/
							NVL(FOD_AMT_BLCKD,0),						/*** Ver 1.8 ***/
							NVL(FOD_LSS_AMT_BLCKD,0),				/*** Ver 1.8 ***/
							NVL(FOD_FC_FLAG,'*'),						/*** Ver 1.8 ***/
							NVL(FOD_DIFF_AMT_BLCKD,0),			/*** Ver 1.8 ***/
							NVL(FOD_DIFF_LSS_AMT_BLCKD,0)		/*** Ver 1.8 ***/    
      INTO    :ptr_ost_orderbook->c_cln_mtch_accnt,
              :ptr_ost_orderbook->l_clnt_ctgry,
              :ptr_ost_orderbook->c_pipe_id,
              :ptr_ost_orderbook->c_xchng_cd,
              :ptr_ost_orderbook->c_prd_typ,
              :ptr_ost_orderbook->c_undrlyng,
              :ptr_ost_orderbook->c_expry_dt,
              :ptr_ost_orderbook->c_exrc_typ,
              :ptr_ost_orderbook->c_opt_typ,
              :ptr_ost_orderbook->l_strike_prc,
              :ptr_ost_orderbook->c_ordr_flw,
              :ptr_ost_orderbook->c_slm_flg,
              :ptr_ost_orderbook->l_dsclsd_qty,
							:ptr_ost_orderbook->l_ord_tot_qty,
              :ptr_ost_orderbook->l_ord_lmt_rt,
              :ptr_ost_orderbook->l_stp_lss_tgr,
              :ptr_ost_orderbook->c_ord_typ,
              :ptr_ost_orderbook->c_valid_dt,
              :ptr_ost_orderbook->c_trd_dt,
              :ptr_ost_orderbook->c_ordr_stts,
              :ptr_ost_orderbook->l_exctd_qty,
              :ptr_ost_orderbook->l_exctd_qty_day,
              :ptr_ost_orderbook->l_can_qty,
              :ptr_ost_orderbook->l_exprd_qty,
              :ptr_ost_orderbook->c_sprd_ord_rfrnc :i_sprd_ord_rfrnc,
              :ptr_ost_orderbook->l_mdfctn_cntr,
              :ptr_ost_orderbook->c_settlor,
              :ptr_ost_orderbook->c_xchng_ack,
              :ptr_ost_orderbook->c_req_typ,
              :ptr_ost_orderbook->c_ctgry_indstk,
              :ptr_ost_orderbook->c_ack_tm:i_ack_tm,
              :ptr_ost_orderbook->c_prev_ack_tm:i_prev_ack_tm,
              :ptr_ost_orderbook->c_pro_cli_ind,
              :ptr_ost_orderbook->c_ctcl_id,  
              :ptr_ost_orderbook->c_channel ,
              :ptr_ost_orderbook->c_spn_flg,
							:ptr_ost_orderbook->c_sltp_ord_rfrnc,				/*** Ver 1.8 ***/
							:ptr_ost_orderbook->d_amt_blkd,							/*** Ver 1.8 ***/
							:ptr_ost_orderbook->d_lss_amt_blkd,					/*** Ver 1.8 ***/
							:ptr_ost_orderbook->c_fc_flg,								/*** Ver 1.8 ***/
							:ptr_ost_orderbook->d_diff_amt_blkd,				/*** Ver 1.8 ***/
							:ptr_ost_orderbook->d_diff_lss_amt_blkd			/*** Ver 1.8 ***/

      FROM    FOD_FO_ORDR_DTLS_HSTRY
      WHERE   FOD_ORDR_RFRNC = :ptr_ist_orderbook->c_ordr_rfrnc;

      if ( SQLCODE != 0 )
      {
				fn_errlog( c_ServiceName, "L31230", SQLMSG, c_err_msg );
    		return  -1;
      }
  }

	rtrim ( ptr_ost_orderbook->c_expry_dt );
  rtrim ( ptr_ost_orderbook->c_ctcl_id );

	return 0;
}

int fn_spnref_to_omd	( struct st_xchngbook *st_xchngbook,
                    		struct st_xchngbook *ptr_st_xchngbook,
                    		char *c_ServiceName,
                    		char *c_err_msg
											)
{

	short i_slm_flg;
 	short i_dsclsd_qty;
 	short i_ord_lmt_rt;
 	short i_stp_lss_tgr;
 	short i_valid_dt;
 	short i_ord_typ;
 	short i_sprd_ord_ind;
 	short i_quote;
 	short i_qt_tm;
 	short i_frwrd_tm;
 	short i_rms_prcsd_flg;
 	short i_ors_msg_typ;
 	short i_ack_tm;
 	short i_xchng_rmrks;
 	short i_xchng_can_qty;
 	short i_spl_flg;
 	short i_req_typ;
 	short i_ord_tot_qty;
 	short i_rqst_tm;
 	short i_ex_ordr_typ;
	short i_spn_flg;        

	if(DEBUG_MSG_LVL_5) /*** Ver 4.2 ***/
	{
		fn_userlog(c_ServiceName,"SPAN	-	Inside  Function fn_ref_to_omd.");
		fn_userlog(c_ServiceName,"SPAN	-	Inside  Function operation Type Is :%c: .",st_xchngbook->c_oprn_typ);
	}
	
	if(DEBUG_MSG_LVL_0) /*** Ver 4.2 ***/
	{
		fn_userlog(c_ServiceName,"fn_spnref_to_omd : operation Type Is :%c: ", st_xchngbook->c_oprn_typ);
	}
	
	switch(st_xchngbook->c_oprn_typ)
	{	
		case	WITH_ORS_MSG_TYP	:

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Inside WITH_ORS_MSG_TYP");
			fn_userlog(c_ServiceName,"st_xchngbook->c_ordr_rfrnc Is :%s:",st_xchngbook->c_ordr_rfrnc);
			fn_userlog(c_ServiceName,"st_xchngbook->l_mdfctn_cntr Is :%ld:",st_xchngbook->l_mdfctn_cntr);
		}
 		EXEC SQL
      	SELECT  FXB_XCHNG_CD,
        	      FXB_PIPE_ID,
          	    TO_CHAR ( FXB_MOD_TRD_DT, 'dd-Mon-yyyy' ),
            	  FXB_ORDR_SQNC,
              	NVL(FXB_LMT_MRKT_SL_FLG,'N'),
              	NVL(FXB_DSCLSD_QTY,0),
              	FXB_ORDR_TOT_QTY,
              	FXB_LMT_RT,
              	NVL(FXB_STP_LSS_TGR,0),
              	TO_CHAR( FXB_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
              	NVL(FXB_ORDR_TYPE,'*'),
              	NVL(FXB_SPRD_ORD_IND,'*'),
              	FXB_RQST_TYP,
              	FXB_QUOTE,
              	TO_CHAR ( FXB_QT_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              	TO_CHAR ( FXB_RQST_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              	TO_CHAR ( FXB_FRWD_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              	FXB_PLCD_STTS,
              	FXB_RMS_PRCSD_FLG,
              	TO_CHAR ( FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              	FXB_XCHNG_RMRKS,
              	FXB_EX_ORDR_TYP,
              	FXB_XCHNG_CNCLD_QTY,
              	NVL(FXB_SPL_FLAG,'*'),
								FXB_SPN_FLG,
								NVL(FXB_PRCIMPV_FLG,'N'),   /*** Ver 4.5 **/
								NVL(FXB_INIT_SLTP_RT,0),						/*** Ver 4.5 **/
								NVL(FXB_INIT_LMT_RT,0)							/*** Ver 4.5 **/
      	INTO    :ptr_st_xchngbook->c_xchng_cd,
        	      :ptr_st_xchngbook->c_pipe_id,
          	    :ptr_st_xchngbook->c_mod_trd_dt,
            	  :ptr_st_xchngbook->l_ord_seq,
              	:ptr_st_xchngbook->c_slm_flg:i_slm_flg,
              	:ptr_st_xchngbook->l_dsclsd_qty:i_dsclsd_qty,
    	          :ptr_st_xchngbook->l_ord_tot_qty:i_ord_tot_qty,
      	        :ptr_st_xchngbook->l_ord_lmt_rt:i_ord_lmt_rt,
        	      :ptr_st_xchngbook->l_stp_lss_tgr:i_stp_lss_tgr,
          	    :ptr_st_xchngbook->c_valid_dt:i_valid_dt,
            	  :ptr_st_xchngbook->c_ord_typ:i_ord_typ,
              	:ptr_st_xchngbook->c_sprd_ord_ind:i_sprd_ord_ind,
     	         	:ptr_st_xchngbook->c_req_typ:i_req_typ,
      	        :ptr_st_xchngbook->l_quote:i_quote,
        	      :ptr_st_xchngbook->c_qt_tm:i_qt_tm,
          	    :ptr_st_xchngbook->c_rqst_tm:i_rqst_tm,
            	  :ptr_st_xchngbook->c_frwrd_tm:i_frwrd_tm,
     		        :ptr_st_xchngbook->c_plcd_stts,
        	      :ptr_st_xchngbook->c_rms_prcsd_flg:i_rms_prcsd_flg,
              	:ptr_st_xchngbook->c_ack_tm:i_ack_tm,
              	:ptr_st_xchngbook->c_xchng_rmrks:i_xchng_rmrks,
             	 	:ptr_st_xchngbook->c_ex_ordr_typ:i_ex_ordr_typ,
              	:ptr_st_xchngbook->l_xchng_can_qty:i_xchng_can_qty,
								:ptr_st_xchngbook->c_spl_flg:i_spl_flg,
								:ptr_st_xchngbook->c_spn_flg:i_spn_flg,     
								:ptr_st_xchngbook->c_prcimpv_flg,   /*** ver 4.5 **/
								:ptr_st_xchngbook->l_init_sltp_rt,  /*** ver 4.5 **/
								:ptr_st_xchngbook->l_init_lmt_rt		/*** ver 4.5 **/
      	FROM    FXB_FO_XCHNG_BOOK
      	WHERE   FXB_ORDR_RFRNC = :st_xchngbook->c_ordr_rfrnc
      	AND     FXB_MDFCTN_CNTR = :st_xchngbook->l_mdfctn_cntr;

				break;

		case	WITHOUT_ORS_MSG_TYP	:

		if(DEBUG_MSG_LVL_3) /*** Ver 4.2 ***/
		{
			fn_userlog(c_ServiceName,"Inside WITHOUT_ORS_MSG_TYP");
		}

	 	EXEC SQL
      	SELECT  FXB_XCHNG_CD,
        	      FXB_PIPE_ID,
          	    TO_CHAR ( FXB_MOD_TRD_DT, 'dd-Mon-yyyy' ),
            	  FXB_ORDR_SQNC,
              	FXB_LMT_MRKT_SL_FLG,
        	      FXB_DSCLSD_QTY,
          	    FXB_ORDR_TOT_QTY,
            	  FXB_LMT_RT,
              	FXB_STP_LSS_TGR,
         	     	TO_CHAR( FXB_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
          	    FXB_ORDR_TYPE,
              	FXB_SPRD_ORD_IND,
              	FXB_RQST_TYP,
              	FXB_QUOTE,
              	TO_CHAR ( FXB_QT_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              	TO_CHAR ( FXB_RQST_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              	TO_CHAR ( FXB_FRWD_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              	FXB_PLCD_STTS,
              	FXB_RMS_PRCSD_FLG,
              	FXB_ORS_MSG_TYP,
              	TO_CHAR ( FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              	FXB_XCHNG_RMRKS,
              	FXB_EX_ORDR_TYP,
              	FXB_XCHNG_CNCLD_QTY,
              	FXB_SPL_FLAG,
								FXB_SPN_FLG,
								NVL(FXB_PRCIMPV_FLG,'N'),          /** Ver 4.5 ***/
                FXB_INIT_SLTP_RT,           			 /*** Ver 4.5 **/
                FXB_INIT_LMT_RT             			 /*** Ver 4.5 **/
      	INTO    :ptr_st_xchngbook->c_xchng_cd,
        	      :ptr_st_xchngbook->c_pipe_id,
          	    :ptr_st_xchngbook->c_mod_trd_dt,
            	  :ptr_st_xchngbook->l_ord_seq,
              	:ptr_st_xchngbook->c_slm_flg:i_slm_flg,
        	      :ptr_st_xchngbook->l_dsclsd_qty:i_dsclsd_qty,
          	    :ptr_st_xchngbook->l_ord_tot_qty:i_ord_tot_qty,
            	  :ptr_st_xchngbook->l_ord_lmt_rt:i_ord_lmt_rt,
              	:ptr_st_xchngbook->l_stp_lss_tgr:i_stp_lss_tgr,
        	      :ptr_st_xchngbook->c_valid_dt:i_valid_dt,
          	    :ptr_st_xchngbook->c_ord_typ:i_ord_typ,
            	  :ptr_st_xchngbook->c_sprd_ord_ind:i_sprd_ord_ind,
              	:ptr_st_xchngbook->c_req_typ:i_req_typ,
       	       	:ptr_st_xchngbook->l_quote:i_quote,
        	      :ptr_st_xchngbook->c_qt_tm:i_qt_tm,
              	:ptr_st_xchngbook->c_rqst_tm:i_rqst_tm,
              	:ptr_st_xchngbook->c_frwrd_tm:i_frwrd_tm,
              	:ptr_st_xchngbook->c_plcd_stts,
              	:ptr_st_xchngbook->c_rms_prcsd_flg:i_rms_prcsd_flg,
              	:ptr_st_xchngbook->l_ors_msg_typ:i_ors_msg_typ,
              	:ptr_st_xchngbook->c_ack_tm:i_ack_tm,
              	:ptr_st_xchngbook->c_xchng_rmrks:i_xchng_rmrks,
              	:ptr_st_xchngbook->c_ex_ordr_typ:i_ex_ordr_typ,
						   	:ptr_st_xchngbook->l_xchng_can_qty:i_xchng_can_qty,
              	:ptr_st_xchngbook->c_spl_flg:i_spl_flg,
              	:ptr_st_xchngbook->c_spn_flg,
								:ptr_st_xchngbook->c_prcimpv_flg,   /*** ver 4.5 **/
                :ptr_st_xchngbook->l_init_sltp_rt,  /*** ver 4.5 **/
                :ptr_st_xchngbook->l_init_lmt_rt    /*** ver 4.5 **/
      	FROM    FXB_FO_XCHNG_BOOK
      	WHERE   FXB_ORDR_RFRNC 	= :st_xchngbook->c_ordr_rfrnc
     	 	AND     FXB_MDFCTN_CNTR = :st_xchngbook->l_mdfctn_cntr;

      break;

		default :

      strcpy( c_err_msg, "fn_ref_to_omd Invalid Operation Type" );
      fn_userlog ( c_ServiceName, "ERROR :%s:", c_err_msg );
      return -1;
      break;
	}

	if (  SQLCODE !=  0 && SQLCODE  !=  NO_DATA_FOUND )
  {
    fn_errlog( c_ServiceName, "L31235", SQLMSG, c_err_msg );
    return  -1;
  }

	if ( SQLCODE 	==	NO_DATA_FOUND	&&	ptr_st_xchngbook->c_oprn_typ	==	WITHOUT_ORS_MSG_TYP	)
	{
		EXEC SQL
      SELECT  FXB_XCHNG_CD,
              FXB_PIPE_ID,
              TO_CHAR ( FXB_MOD_TRD_DT, 'dd-Mon-yyyy' ),
              FXB_ORDR_SQNC,
              FXB_LMT_MRKT_SL_FLG,
              FXB_DSCLSD_QTY,
              FXB_ORDR_TOT_QTY,
              FXB_LMT_RT,
              FXB_STP_LSS_TGR,
              TO_CHAR( FXB_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
              FXB_ORDR_TYPE,
              FXB_SPRD_ORD_IND,
              FXB_RQST_TYP,
              FXB_QUOTE,
              TO_CHAR ( FXB_QT_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              TO_CHAR ( FXB_RQST_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              TO_CHAR ( FXB_FRWD_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              FXB_PLCD_STTS,
              FXB_RMS_PRCSD_FLG,
              FXB_ORS_MSG_TYP,
              TO_CHAR ( FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              FXB_XCHNG_RMRKS,
              FXB_EX_ORDR_TYP,
              FXB_XCHNG_CNCLD_QTY,
              FXB_SPL_FLAG,
							FXB_SPN_FLG
      INTO    :ptr_st_xchngbook->c_xchng_cd,
              :ptr_st_xchngbook->c_pipe_id,
              :ptr_st_xchngbook->c_mod_trd_dt,
              :ptr_st_xchngbook->l_ord_seq,
              :ptr_st_xchngbook->c_slm_flg:i_slm_flg,
              :ptr_st_xchngbook->l_dsclsd_qty:i_dsclsd_qty,
              :ptr_st_xchngbook->l_ord_tot_qty:i_ord_tot_qty,
              :ptr_st_xchngbook->l_ord_lmt_rt:i_ord_lmt_rt,
              :ptr_st_xchngbook->l_stp_lss_tgr:i_stp_lss_tgr,
              :ptr_st_xchngbook->c_valid_dt:i_valid_dt,
              :ptr_st_xchngbook->c_ord_typ:i_ord_typ,
              :ptr_st_xchngbook->c_sprd_ord_ind:i_sprd_ord_ind,
              :ptr_st_xchngbook->c_req_typ:i_req_typ,
              :ptr_st_xchngbook->l_quote:i_quote,
              :ptr_st_xchngbook->c_qt_tm:i_qt_tm,
              :ptr_st_xchngbook->c_rqst_tm:i_rqst_tm,
              :ptr_st_xchngbook->c_frwrd_tm:i_frwrd_tm,
              :ptr_st_xchngbook->c_plcd_stts,
              :ptr_st_xchngbook->c_rms_prcsd_flg:i_rms_prcsd_flg,
              :ptr_st_xchngbook->l_ors_msg_typ:i_ors_msg_typ,
              :ptr_st_xchngbook->c_ack_tm:i_ack_tm,
              :ptr_st_xchngbook->c_xchng_rmrks:i_xchng_rmrks,
              :ptr_st_xchngbook->c_ex_ordr_typ:i_ex_ordr_typ,
						 	:ptr_st_xchngbook->l_xchng_can_qty:i_xchng_can_qty,
              :ptr_st_xchngbook->c_spl_flg:i_spl_flg,
              :ptr_st_xchngbook->c_spn_flg

      FROM    FXB_FO_XCHNG_BOOK_HSTRY
      WHERE   FXB_ORDR_RFRNC 	= :ptr_st_xchngbook->c_ordr_rfrnc
      AND     FXB_MDFCTN_CNTR = :ptr_st_xchngbook->l_mdfctn_cntr;

      if ( SQLCODE != 0 )
      {
    		fn_errlog( c_ServiceName, "L31240", SQLMSG, c_err_msg );
				return -1;
      }
	}
	else if ( SQLCODE	==	NO_DATA_FOUND	)
	{
		fn_errlog( c_ServiceName, "L31245", SQLMSG, c_err_msg );
		return -1;
	}

	rtrim(ptr_st_xchngbook->c_xchng_rmrks);


	return 0;
}


int	fn_getcnt_gen	(	char *c_ServiceName,
                		struct st_contract *ptr_st_contract,
                		struct st_cntrt_gen_inf	*ptr_st_cntrct_geninf,
                		char *c_err_msg
              		)

{
	

  varchar c_expiry_dt [ 23 ];
  varchar c_exp_dt [ 23 ];
  varchar c_rcrd_dt [ 23 ];
  varchar c_nd_start_dt [ 23 ];
  varchar c_nd_enddt [ 23 ];
  varchar c_bkcls_strt_dt [ 23 ];
  varchar c_bkcls_end_dt [ 23 ];

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Inside Function fn_getcnt_gen.");
		fn_userlog(c_ServiceName,"SPAN  c_xchng_cd Is :%s:",ptr_st_contract->c_xchng_cd);
		fn_userlog(c_ServiceName,"SPAN  c_prd_typ Is :%c:",ptr_st_contract->c_prd_typ);
		fn_userlog(c_ServiceName,"SPAN	c_undrlyng	Is :%s:",ptr_st_contract->c_undrlyng);
		fn_userlog(c_ServiceName,"SPAN  c_expiry_dt Is :%s:",ptr_st_contract->c_expry_dt);
		fn_userlog(c_ServiceName,"SPAN	c_exrc_typ	Is :%c:",ptr_st_contract->c_exrc_typ);
		fn_userlog(c_ServiceName,"SPAN	c_opt_typ		Is :%c:",ptr_st_contract->c_opt_typ);
		fn_userlog(c_ServiceName,"SPAN	l_strike_prc	Is :%ld:",ptr_st_contract->l_strike_prc);
	}


	EXEC SQL
    SELECT	FTQ_XCHNG_CD,
            FTQ_PRDCT_TYP,
            FTQ_INDSTK,
            FTQ_UNDRLYNG,
            TO_CHAR ( FTQ_EXPRY_DT, 'dd-Mon-yyyy' ),
            FTQ_EXER_TYP,
            FTQ_OPT_TYP,
            NVL(FTQ_STRK_PRC,0),
            NVL(FTQ_PRMTD_TO_TRD,0),
            NVL(FTQ_STTS,0),
            NVL(FTQ_BOARD_LOT_QTY,0),
            NVL(TO_CHAR (FTQ_RCRD_DT, 'dd-Mon-yyyy hh24:mi:ss' ),'*'),
            NVL(TO_CHAR (FTQ_ND_STRT_DT, 'dd-Mon-yyyy hh24:mi:ss' ),'*'),
            NVL(TO_CHAR (FTQ_ND_END_DT, 'dd-Mon-yyyy hh24:mi:ss' ),'*'),
            NVL(TO_CHAR(FTQ_BK_CLS_STRT_DT,'dd-Mon-yyyy hh24:mi:ss'),'*'),
            NVL(TO_CHAR (FTQ_BK_CLS_END_DT,'dd-Mon-yyyy hh24:mi:ss'),'*'),
            NVL(FTQ_SETL_SETLMNT_NO,0),
            '*',
            NVL( FTQ_EBA_CNTRCT_ID,0 ),                  /*** Added In Ver 3.7 ***/ /*** NVL added in Ver 4.8 ***/
            NVL( FTQ_CA_LVL,0 ),                        /*** Added In Ver 3.7 ***/
            NVL( FTQ_MULTPLR, 0 ),                      /*** Added In Ver 3.7 ***/
            FTQ_MIN_LOT_QTY,                            /*** Added In Ver 3.7 ***/
            FTQ_TCK_SZ                                  /*** Added In Ver 3.7 ***/
     INTO   :ptr_st_cntrct_geninf->c_xchng_cd,
            :ptr_st_cntrct_geninf->c_prd_typ,
            :ptr_st_cntrct_geninf->c_ctgry_indstk,
            :ptr_st_cntrct_geninf->c_undrlyng,
            :c_exp_dt,
            :ptr_st_cntrct_geninf->c_exrc_typ,
            :ptr_st_cntrct_geninf->c_opt_typ,
            :ptr_st_cntrct_geninf->l_strike_prc,
            :ptr_st_cntrct_geninf->l_prmtd_to_trd,
            :ptr_st_cntrct_geninf->l_stts,
            :ptr_st_cntrct_geninf->l_board_lot_qty,
            :c_rcrd_dt,
            :c_nd_start_dt,
            :c_nd_enddt,
            :c_bkcls_strt_dt,
            :c_bkcls_end_dt,
            :ptr_st_cntrct_geninf->l_setl_stlmnt_no,
            :ptr_st_cntrct_geninf->c_rqst_typ,
            :ptr_st_cntrct_geninf->l_eba_cntrct_id,     /*** Added In Ver 3.7 ***/
            :ptr_st_cntrct_geninf->l_ca_lvl,            /*** Added In Ver 3.7 ***/
            :ptr_st_cntrct_geninf->l_multplr,           /*** Added In Ver 3.7 ***/
            :ptr_st_cntrct_geninf->l_min_lot_qty,       /*** Added In Ver 3.7 ***/
            :ptr_st_cntrct_geninf->l_tick_sz            /*** Added In Ver 3.7 ***/
     FROM		FTQ_FO_TRD_QT
     WHERE  FTQ_XCHNG_CD  = :ptr_st_contract->c_xchng_cd
  /* AND    FTQ_PRDCT_TYP = decode(:ptr_st_contract->c_prd_typ,'P','F',:ptr_st_contract->c_prd_typ)   ** Commented in Ver 1.8 */
 /*    AND    FTQ_PRDCT_TYP = decode(:ptr_st_contract->c_prd_typ,'P','F','U','F',:ptr_st_contract->c_prd_typ)  Ver 1.8   Commented in Ver 2.6  **/ 
		 AND    FTQ_PRDCT_TYP = decode(:ptr_st_contract->c_prd_typ,'P','F','U','F','I','O',:ptr_st_contract->c_prd_typ)   /** Ver 2.6 OptionPlus product handled **/
     AND    FTQ_UNDRLYNG  = :ptr_st_contract->c_undrlyng
     AND    FTQ_EXPRY_DT  = to_date ( :ptr_st_contract->c_expry_dt, 'dd-Mon-yyyy' )
     AND    FTQ_EXER_TYP  = :ptr_st_contract->c_exrc_typ
     AND    FTQ_OPT_TYP   = :ptr_st_contract->c_opt_typ
     AND    FTQ_STRK_PRC  = :ptr_st_contract->l_strike_prc;

	 	if ( SQLCODE != 0 )
  	{
    	fn_errlog ( c_ServiceName, "S31080", SQLMSG, c_err_msg );
			return -1;
  	}

  SETNULL ( c_exp_dt );
  SETNULL ( c_rcrd_dt );
  SETNULL ( c_nd_start_dt );
  SETNULL ( c_nd_enddt );
  SETNULL ( c_bkcls_strt_dt );
  SETNULL ( c_bkcls_end_dt );

  strcpy ( 	ptr_st_cntrct_geninf->c_expry_dt , ( char * ) c_exp_dt.arr );
  strcpy ( 	ptr_st_cntrct_geninf->c_record_dt , ( char * ) c_rcrd_dt.arr );
  strcpy ( 	ptr_st_cntrct_geninf->c_nd_strt_dt ,( char * ) c_nd_start_dt.arr );
  strcpy ( 	ptr_st_cntrct_geninf->c_nd_end_dt , ( char * ) c_nd_enddt.arr );
  strcpy (	ptr_st_cntrct_geninf->c_bk_cls_strt_dt,(char *)c_bkcls_strt_dt.arr);
  strcpy (	ptr_st_cntrct_geninf->c_bk_cls_end_dt,(char *) c_bkcls_end_dt.arr);

  /*** Commented In Ver 3.7  ***

	EXEC SQL
    SELECT	FCM_EBA_CNTRCT_ID,
            NVL( fcm_ca_lvl,0 ),
            NVL( fcm_multplr, 0 ),
            FCM_LOT_SZ,
            FCM_TCK_SZ
    INTO    :ptr_st_cntrct_geninf->l_eba_cntrct_id,
            :ptr_st_cntrct_geninf->l_ca_lvl,
            :ptr_st_cntrct_geninf->l_multplr,
            :ptr_st_cntrct_geninf->l_min_lot_qty,
            :ptr_st_cntrct_geninf->l_tick_sz
    FROM    FCM_FO_CNTRCT_MSTR
    WHERE   FCM_XCHNG_CD    = :ptr_st_contract->c_xchng_cd
 * AND    	FCM_PRDCT_TYP   = decode(:ptr_st_contract->c_prd_typ,'P','F',:ptr_st_contract->c_prd_typ) ** Commented in Ver 1.8 * 
 *   AND    	FCM_PRDCT_TYP   = decode(:ptr_st_contract->c_prd_typ,'P','F','U','F',:ptr_st_contract->c_prd_typ)    Ver 1.8   Commented in Ver 2.6  **
		AND     FCM_PRDCT_TYP   = decode(:ptr_st_contract->c_prd_typ,'P','F','U','F','I','O',:ptr_st_contract->c_prd_typ)     ** Ver 2.6 OptionPlus product handled ** 
    AND     FCM_UNDRLYNG    = :ptr_st_contract->c_undrlyng
    AND    	FCM_EXPRY_DT    = to_date ( :ptr_st_contract->c_expry_dt, 'dd-Mon-yyyy' )
    AND    	FCM_EXER_TYP    = :ptr_st_contract->c_exrc_typ
    AND    	FCM_OPT_TYP     = :ptr_st_contract->c_opt_typ
    AND    	FCM_STRK_PRC    = :ptr_st_contract->l_strike_prc;

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "L31250", SQLMSG, c_err_msg );
    return -1;
  }

  *** Ver 3.7 Comment Ends ***/

	return	0;

}


int fn_get_fno_seq  ( char *c_ServiceName,
                      struct  st_sequence *ptr_st_i_seq,
                      char *c_errmsg
                    )
{

	varchar c_trd_dt [ 23 ];

	int	i_trnsctn;

	if(DEBUG_MSG_LVL_5) /*** Ver 4.2 ***/
	{
		fn_userlog(c_ServiceName,"SPAN	Inside Function fn_get_fno_seq.");
	}

	if(DEBUG_MSG_LVL_0) /*** Ver 4.2 ***/
	{
		fn_userlog(c_ServiceName,"fn_get_fno_seq : c_rqst_typ :%c:",ptr_st_i_seq->c_rqst_typ);
	}

	strcpy ( ( char * )c_trd_dt.arr, ptr_st_i_seq->c_trd_dt );
  SETLEN ( c_trd_dt );

	if( DEBUG_MSG_LVL_3 )   
	{
  	fn_userlog ( c_ServiceName, "c_pipe_id  :%s:", ptr_st_i_seq->c_pipe_id );
  	fn_userlog ( c_ServiceName, "c_trd_dt  :%s:", c_trd_dt.arr);
  	fn_userlog ( c_ServiceName, "c_rqst_typ  :%c:", ptr_st_i_seq->c_rqst_typ );
	}

	i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );

  if ( i_trnsctn == -1)
  {
	  fn_errlog( c_ServiceName, "L31255", TPMSG, c_err_msg );
		return -1;
  }

	switch(ptr_st_i_seq->c_rqst_typ)
	{
		case	GET_XCHNG_SEQ	:

			if(strcmp(ptr_st_i_seq->c_pipe_id,"11") == 0)
    	{
      	EXEC SQL
          SELECT GET_XCHNG_SEQ_11.NEXTVAL
          INTO   :ptr_st_i_seq->l_seq_num
          FROM   DUAL;

      	if( SQLCODE != 0 )
      	{
        	fn_errlog ( c_ServiceName, "L31260", SQLMSG, c_err_msg);
        	fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
       		return -1;
      	}
    	}
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"12") == 0)
    {

      EXEC SQL
           SELECT GET_XCHNG_SEQ_12.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31265", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
				return -1;
      }
    }
		else if(strcmp(ptr_st_i_seq->c_pipe_id,"13") == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_13.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31270", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
				return -1;
      }

    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"14") == 0)
    {

      EXEC SQL
           SELECT GET_XCHNG_SEQ_14.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31275", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
				return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"15") == 0)
    {

      EXEC SQL
           SELECT GET_XCHNG_SEQ_15.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31280", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
				return -1;
      }
    }  
		else if(strcmp(ptr_st_i_seq->c_pipe_id,"16") == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_16.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31285", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
				return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"17")  == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_17.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31290", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
				return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"18")  == 0)   /**Ver 1.3 **/
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_18.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31295", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }

    /*** Ver 7.7 Start ***/
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"21")  == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_21.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31300", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"22")  == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_22.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31305", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"23")  == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_23.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31310", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"24")  == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_24.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31315", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    /*** Ver 7.7 Ends ***/
    /** ver 7.9 starts ***/
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"25")  == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_25.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31320", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"26")  == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_26.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31325", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"27")  == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_27.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31330", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"28")  == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_28.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31335", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"31")  == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_31.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31340", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"32")  == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_32.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31345", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
   /*** ver 7.9 Ends ***/
		/*** Ver 1.6 Starts ***/
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"99")  == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_99.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31350", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"A9")  == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_A9.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31355", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    /*** Ver 1.6 Ends  ***/
		/**** Ver 1.7 starts *****/
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"A1")  == 0)   
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_A1.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31360", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"A2")  == 0)  
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_A2.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31365", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"A3")  == 0) 
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_A3.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31370", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }

		/**** Ver 1.7 Ends ****/
    else
    {
    	fn_errlog ( c_ServiceName, "L31375", "Invalid Pipe",c_err_msg);
			return -1;
    }
	
		
		break;

		case	GET_ORDER_SEQ	:

			/******* Commented in Ver 1.4 for using database sequence instead of table sequence
			EXEC SQL
        SELECT  fos_seq_num + 1
        INTO    :ptr_st_i_seq->l_seq_num
        FROM    fos_fo_ord_seq
        WHERE   fos_pipe_id = :ptr_st_i_seq->c_pipe_id
        AND     fos_trd_dt = to_date ( :c_trd_dt, 'dd-Mon-yyyy')
        FOR UPDATE OF fos_seq_num;

    	if( SQLCODE != 0 )
    	{
     		fn_errlog ( c_ServiceName, "L31380", SQLMSG, c_err_msg);
     		fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
     		return -1;
    	}

    EXEC SQL
      UPDATE  fos_fo_ord_seq
      SET     fos_seq_num = fos_seq_num + 1
      WHERE   fos_pipe_id = :ptr_st_i_seq->c_pipe_id
      AND     fos_trd_dt 	= to_date ( :c_trd_dt, 'dd-Mon-yyyy');

    if( SQLCODE != 0 )
    {
     fn_errlog ( c_ServiceName, "L31385", SQLMSG, c_err_msg);
     fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
  	 return -1;
    }
		*************************************************************************************/
		 /*** Added in ver 1.4 for database sequence ***/

    if(strcmp(ptr_st_i_seq->c_pipe_id,"11") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_11.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
				 fn_errlog ( c_ServiceName, "L31390", SQLMSG, c_err_msg);
         fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
         return -1;
      }
    }
    else if (strcmp(ptr_st_i_seq->c_pipe_id,"12") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_12.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
				 fn_errlog ( c_ServiceName, "L31395", SQLMSG, c_err_msg);
         fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
         return -1;	
      }

    }
    else if (strcmp(ptr_st_i_seq->c_pipe_id,"13") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_13.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
				 fn_errlog ( c_ServiceName, "L31400", SQLMSG, c_err_msg);
         fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
         return -1;
      }

    }
		 else if (strcmp(ptr_st_i_seq->c_pipe_id,"14") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_14.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
				 fn_errlog ( c_ServiceName, "L31405", SQLMSG, c_err_msg);
         fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
         return -1;
      }

    }
    else if (strcmp(ptr_st_i_seq->c_pipe_id,"15") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_15.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
				 fn_errlog ( c_ServiceName, "L31410", SQLMSG, c_err_msg);
         fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
         return -1;
      }

    }
    else if (strcmp(ptr_st_i_seq->c_pipe_id,"16") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_16.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
				 fn_errlog ( c_ServiceName, "L31415", SQLMSG, c_err_msg);
         fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
         return -1;
      }

    }
		 else if (strcmp(ptr_st_i_seq->c_pipe_id,"17") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_17.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
				 fn_errlog ( c_ServiceName, "L31420", SQLMSG, c_err_msg);
         fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
         return -1;
      }

    }
		 else if (strcmp(ptr_st_i_seq->c_pipe_id,"18") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_18.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
         fn_errlog ( c_ServiceName, "L31425", SQLMSG, c_err_msg);
         fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
         return -1;
      }

    }

    /*** Ver 7.7 Start ***/
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"21")  == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_21.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31430", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"22")  == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_22.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31435", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"23")  == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_23.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31440", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"24")  == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_24.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31445", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    /*** Ver 7.7 End ***/
    /*** Ver 7.9 starts ***/
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"25")  == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_25.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31450", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"26")  == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_26.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31455", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"27")  == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_27.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31460", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"28")  == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_28.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31465", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"31")  == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_31.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31470", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"32")  == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_32.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31475", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }

    /*** vefr 7.9 Ends ***/
    else if (strcmp(ptr_st_i_seq->c_pipe_id,"A1") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_A1.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
				 fn_errlog ( c_ServiceName, "L31480", SQLMSG, c_err_msg);
         fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
         return -1;
      }

    }
		else if (strcmp(ptr_st_i_seq->c_pipe_id,"A2") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_A2.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
         fn_errlog ( c_ServiceName, "L31485", SQLMSG, c_err_msg);
         fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
         return -1;
      }

    }
		else if (strcmp(ptr_st_i_seq->c_pipe_id,"A3") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_A3.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
         fn_errlog ( c_ServiceName, "L31490", SQLMSG, c_err_msg);
         fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
         return -1;
      }
		}
		/*** Ver 1.6 Starts ***/
    else if (strcmp(ptr_st_i_seq->c_pipe_id,"99") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_99.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
         fn_errlog ( c_ServiceName, "L31495", SQLMSG, c_err_msg);
         fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
         return -1;
      }
    }
    else if (strcmp(ptr_st_i_seq->c_pipe_id,"A9") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_A9.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
         fn_errlog ( c_ServiceName, "L31500", SQLMSG, c_err_msg);
         fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
         return -1;
      }
    }
    /*** Ver 1.6 Ends   ***/
    /******** Ver 1.4 Ended *******/

		break;

		case	GET_PLACED_SEQ	:

			EXEC SQL
        UPDATE  fsp_fo_seq_plcd
        SET     fsp_seq_num = fsp_seq_num + 1
        WHERE   fsp_pipe_id = :ptr_st_i_seq->c_pipe_id
        AND     fsp_trd_dt = to_date ( :c_trd_dt, 'dd-Mon-yyyy')
        RETURNING fsp_seq_num INTO    :ptr_st_i_seq->l_seq_num;

    	if( SQLCODE != 0 )
    	{
     		fn_errlog ( c_ServiceName, "L31505", SQLMSG, c_err_msg);
     		fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
     		return	-1;
    	}

		break;

		case	GET_TRD_SEQ:

			if(strcmp(ptr_st_i_seq->c_pipe_id,"11") == 0)
    	{
      	EXEC SQL
        	SELECT GET_TRD_SEQ_11.NEXTVAL
          INTO   :ptr_st_i_seq->l_seq_num
          FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31510", SQLMSG,c_errmsg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
				return -1;
      }
    }
    else if (strcmp(ptr_st_i_seq->c_pipe_id,"12") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_12.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31515", SQLMSG, c_errmsg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
				return	-1;
      }

    }
    else if (strcmp(ptr_st_i_seq->c_pipe_id,"13") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_13.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31520", SQLMSG, c_errmsg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
				return -1;
      }
		}
		else if (strcmp(ptr_st_i_seq->c_pipe_id,"14") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_14.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31525", SQLMSG, c_errmsg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
				return -1;
      }

    }
    else if (strcmp(ptr_st_i_seq->c_pipe_id,"15") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_15.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31530", SQLMSG, c_errmsg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
				return -1;
      }

    }
    else if (strcmp(ptr_st_i_seq->c_pipe_id,"16") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_16.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31535", SQLMSG, c_errmsg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
				return	-1;
      }

    }
		else if (strcmp(ptr_st_i_seq->c_pipe_id,"17") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_17.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31540", SQLMSG, c_errmsg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
				return -1;
      }

    }
    else if (strcmp(ptr_st_i_seq->c_pipe_id,"18") == 0)     /**Ver 1.3 **/
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_18.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31545", SQLMSG, c_errmsg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }

    }

    /*** Ver 7.7 Start ***/
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"21")  == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_21.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31550", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"22")  == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_22.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31555", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"23")  == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_23.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31560", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"24")  == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_24.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31565", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    /*** Ver 7.7 End ***/
    /*** Ver 7.9 Starts ***/
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"25")  == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_25.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31570", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"26")  == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_26.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31575", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"27")  == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_27.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31580", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"28")  == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_28.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31585", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"31")  == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_31.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31590", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if(strcmp(ptr_st_i_seq->c_pipe_id,"32")  == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_32.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31595", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    /*** Ver 7.9 Ends ***/
		/*** Ver 1.6 Starts ***/
    else if (strcmp(ptr_st_i_seq->c_pipe_id,"99") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_99.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31600", SQLMSG, c_errmsg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    else if (strcmp(ptr_st_i_seq->c_pipe_id,"A9") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_A9.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31605", SQLMSG, c_errmsg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
    }
    /*** Ver 1.6 Ends ***/
		/***** Ver 1.7 starts ****/
		else if (strcmp(ptr_st_i_seq->c_pipe_id,"A1") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_A1.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31610", SQLMSG, c_errmsg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
				return -1;
      }

    }
		else if (strcmp(ptr_st_i_seq->c_pipe_id,"A2") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_A2.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31615", SQLMSG, c_errmsg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
				return -1;
      }

    }
		else if (strcmp(ptr_st_i_seq->c_pipe_id,"A3") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_A3.NEXTVAL
           INTO   :ptr_st_i_seq->l_seq_num
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "L31620", SQLMSG, c_errmsg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
				return -1;
      }

    }
		/***** Ver 1.7 Ends *****/
    else
    {
      fn_errlog ( c_ServiceName, "L31625", "Invalid Pipe",c_err_msg);
      return -1;
    }

		break;

		default :
			
			strcpy(c_errmsg,"Invalid Operation Type");
			fn_errlog ( c_ServiceName, "L31630", DEFMSG, c_errmsg);
		  fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      return  -1;

	}

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "L31635", TPMSG, c_err_msg );
    return -1;
  }

	return	0;

}

int fn_ins_spn_rep_tbl (  char *c_ServiceName,
                          char *c_err_msg,
                          struct st_pstn_actn *ptr_st_pstn_actn,
                          char  *c_imtm_rmrks )
{

  EXEC SQL
    INSERT INTO fis_fo_imtm_stts
      (
        fis_clm_mtch_accnt,
        fis_xchng_cd,
        fis_prdct_typ,
        fis_indstk,
        fis_undrlyng,
        fis_expry_dt,
        fis_exer_typ,
        fis_opt_typ,
        fis_strk_prc,
        fis_tm_stmp,
        fis_remarks
      )
    VALUES
      (
        :ptr_st_pstn_actn->c_cln_mtch_accnt,
        :ptr_st_pstn_actn->c_xchng_cd,
        :ptr_st_pstn_actn->c_prd_typ,
        :ptr_st_pstn_actn->c_ctgry_indstk,
        :ptr_st_pstn_actn->c_undrlyng,
        to_date(:ptr_st_pstn_actn->c_expry_dt,'DD-Mon-YYYY'),
        :ptr_st_pstn_actn->c_exrc_typ,
        :ptr_st_pstn_actn->c_opt_typ,
        :ptr_st_pstn_actn->l_strike_prc,
        sysdate,
        :c_imtm_rmrks
      );

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31640",SQLMSG,c_err_msg);
    return FAILURE;
  }
    return SUCCESS;
}

int fn_apply_spn_actn (   char *c_ServiceName,
                          struct st_pstn_actn *ptr_st_pstn_actn,
                          struct st_fcp_cntrct_pstn *ptr_st_cntfut_pos,
                          struct st_err_msg *ptr_st_err_msg
                      )

{
	long int li_temp_qty;
  long int li_tmp_opnqty;
  long int li_cmp;
  long int li_flg_tmp_qty;
  long int li_temp_opn_qty;   /*** Ver 2.2 ***/

  double   d_exec_rt;         /*** Ver 2.2 ***/

  int i_returncode;
  int i_ip_len;
  int i_op_len;

	if(DEBUG_MSG_LVL_5) /*** Ver 4.2 ***/
	{
		fn_userlog(c_ServiceName,"SPAN - Inside Function fn_apply_spn_actn.");
	}

	if(DEBUG_MSG_LVL_0) /*** Ver 4.2 ***/
	{
		fn_userlog(c_ServiceName,"fn_apply_spn_actn : Action Type :%ld:",ptr_st_pstn_actn->l_actn_typ);
	}

	switch ( ptr_st_pstn_actn->l_actn_typ )
  {
    case  SYSTEM_PLACE_ORDER:
    case  JOINT_SQUARE_OFF_ORDER:
    case  ORS_NEW_ORD_REQ:
          /** Increase the IWTL position by the order qty and order rate **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
            fn_add_pos( ptr_st_pstn_actn->l_new_qty,
                        ptr_st_pstn_actn->l_new_rt,
                        &(ptr_st_cntfut_pos->l_ibuy_qty),
                        &(ptr_st_cntfut_pos->d_ibuy_ord_val ) );
          }
          else
          {
            fn_add_pos( ( ptr_st_pstn_actn->l_new_qty * (-1) ),
                        ptr_st_pstn_actn->l_new_rt,
                        &(ptr_st_cntfut_pos->l_isell_qty),
                        &(ptr_st_cntfut_pos->d_isell_ord_val ) );
          }
          break;

		 case  ORS_MOD_ORD_REQ:
          /** Decrease the IWTL position by the unexecuted order qty and **/
          /** order rate. Increase the IWTL position by the unexecuted   **/
          /** new qty and new rate                                       **/

          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
            fn_del_pos( ptr_st_pstn_actn->l_orgnl_qty -
                        ptr_st_pstn_actn->l_exec_qty,
                        ptr_st_pstn_actn->l_orgnl_rt,
                        &(ptr_st_cntfut_pos->l_ibuy_qty),
                        &(ptr_st_cntfut_pos->d_ibuy_ord_val ) );

            fn_add_pos( ptr_st_pstn_actn->l_new_qty -
                        ptr_st_pstn_actn->l_exec_qty,
                        ptr_st_pstn_actn->l_new_rt,
                        &(ptr_st_cntfut_pos->l_ibuy_qty),
                        &(ptr_st_cntfut_pos->d_ibuy_ord_val ) );
          }
          else
          {
            fn_del_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty -
                          ptr_st_pstn_actn->l_exec_qty) * (-1) ),
                        ptr_st_pstn_actn->l_orgnl_rt,
                        &(ptr_st_cntfut_pos->l_isell_qty),
                        &(ptr_st_cntfut_pos->d_isell_ord_val ) );

            fn_add_pos( ( ( ptr_st_pstn_actn->l_new_qty -
                          ptr_st_pstn_actn->l_exec_qty) * (-1) ),
                        ptr_st_pstn_actn->l_new_rt,
                        &(ptr_st_cntfut_pos->l_isell_qty),
                        &(ptr_st_cntfut_pos->d_isell_ord_val ) );
          }
          break;

		case  ORS_CAN_ORD_REQ:

          /** Decrease the IWTL position by the unexecuted order qty  **/
          /** and order rate                                          **/

          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
            fn_del_pos( ptr_st_pstn_actn->l_orgnl_qty -
                        ptr_st_pstn_actn->l_exec_qty,
                        ptr_st_pstn_actn->l_orgnl_rt,
                        &(ptr_st_cntfut_pos->l_ibuy_qty),
                        &(ptr_st_cntfut_pos->d_ibuy_ord_val ) );
          }
          else
          {
            fn_del_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty -
                          ptr_st_pstn_actn->l_exec_qty) * (-1) ),
                        ptr_st_pstn_actn->l_orgnl_rt,
                        &(ptr_st_cntfut_pos->l_isell_qty),
                        &(ptr_st_cntfut_pos->d_isell_ord_val ) );
          }

          break;

		case  ORS_NEW_ORD_ACPT:
          /** Increase the EXCH position by the order qty and order rate **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
            fn_add_pos( ptr_st_pstn_actn->l_new_qty,
                        ptr_st_pstn_actn->l_new_rt,
                        &(ptr_st_cntfut_pos->l_exbuy_qty),
                        &(ptr_st_cntfut_pos->d_exbuy_ord_val ) );
          }
          else
          {
            fn_add_pos( ( ptr_st_pstn_actn->l_new_qty * (-1) ),
                        ptr_st_pstn_actn->l_new_rt,
                        &(ptr_st_cntfut_pos->l_exsell_qty),
                        &(ptr_st_cntfut_pos->d_exsell_ord_val ) );
          }
          break;

		 case  ORS_NEW_ORD_RJCT:
          /** Decrease the IWTL position by the order qty and order rate **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
            fn_del_pos( ptr_st_pstn_actn->l_new_qty,
                        ptr_st_pstn_actn->l_new_rt,
                        &(ptr_st_cntfut_pos->l_ibuy_qty),
                        &(ptr_st_cntfut_pos->d_ibuy_ord_val ) );
          }
          else
          {
            fn_del_pos( ( ptr_st_pstn_actn->l_new_qty * (-1) ),
                        ptr_st_pstn_actn->l_new_rt,
                        &(ptr_st_cntfut_pos->l_isell_qty),
                        &(ptr_st_cntfut_pos->d_isell_ord_val ) );
          }
          break;
		 case  ORS_MOD_ORD_ACPT:
          /** Decrease the EXCH position by the unexecuted order qty and **/
          /** order rate. Increase the EXCH position by the unexecuted   **/
          /** new qty and new rate                                       **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {

            fn_del_pos( ptr_st_pstn_actn->l_orgnl_qty -
                        ptr_st_pstn_actn->l_exec_qty,
                        ptr_st_pstn_actn->l_orgnl_rt,
                        &(ptr_st_cntfut_pos->l_exbuy_qty),
                        &(ptr_st_cntfut_pos->d_exbuy_ord_val ) );



            fn_add_pos( ptr_st_pstn_actn->l_new_qty -
                        ptr_st_pstn_actn->l_exec_qty,
                        ptr_st_pstn_actn->l_new_rt,
                        &(ptr_st_cntfut_pos->l_exbuy_qty),
                        &(ptr_st_cntfut_pos->d_exbuy_ord_val ) );

          }
          else
          {
            fn_del_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty -
                          ptr_st_pstn_actn->l_exec_qty) * (-1) ),
                        ptr_st_pstn_actn->l_orgnl_rt,
                        &(ptr_st_cntfut_pos->l_exsell_qty),
                        &(ptr_st_cntfut_pos->d_exsell_ord_val ) );

            fn_add_pos( ( ( ptr_st_pstn_actn->l_new_qty -
                          ptr_st_pstn_actn->l_exec_qty) * (-1) ),
                        ptr_st_pstn_actn->l_new_rt,
                        &(ptr_st_cntfut_pos->l_exsell_qty),
                        &(ptr_st_cntfut_pos->d_exsell_ord_val ) );
          }
          break;


    case  ORS_MOD_ORD_RJCT:
          /** Decrease the IWTL position by the unexecuted new qty and **/
          /** new rate. Increase the IWTL position by the unexecuted   **/
          /** order qty and order rate                                 **/

					if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
            fn_del_pos( ptr_st_pstn_actn->l_new_qty -
                        ptr_st_pstn_actn->l_exec_qty,
                        ptr_st_pstn_actn->l_new_rt,
                        &(ptr_st_cntfut_pos->l_ibuy_qty),
                        &(ptr_st_cntfut_pos->d_ibuy_ord_val ) );

            fn_add_pos( ptr_st_pstn_actn->l_orgnl_qty -
                        ptr_st_pstn_actn->l_exec_qty,
                        ptr_st_pstn_actn->l_orgnl_rt,
                        &(ptr_st_cntfut_pos->l_ibuy_qty),
                        &(ptr_st_cntfut_pos->d_ibuy_ord_val ) );
          }
          else
          {
            fn_del_pos( ( ( ptr_st_pstn_actn->l_new_qty -
                          ptr_st_pstn_actn->l_exec_qty) * (-1) ),
                        ptr_st_pstn_actn->l_new_rt,
                        &(ptr_st_cntfut_pos->l_isell_qty),
                        &(ptr_st_cntfut_pos->d_isell_ord_val ) );

            fn_add_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty -
                          ptr_st_pstn_actn->l_exec_qty) * (-1) ),
                        ptr_st_pstn_actn->l_orgnl_rt,
                        &(ptr_st_cntfut_pos->l_isell_qty),
                        &(ptr_st_cntfut_pos->d_isell_ord_val ) );
          }
          break;

		 case  ORS_CAN_ORD_ACPT:
          /** Decrease the EXCH position by the unexecuted order qty  **/
          /** and order rate                                          **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
            fn_del_pos( ptr_st_pstn_actn->l_orgnl_qty -
                        ptr_st_pstn_actn->l_exec_qty,
                        ptr_st_pstn_actn->l_orgnl_rt,
                        &(ptr_st_cntfut_pos->l_exbuy_qty),
                        &(ptr_st_cntfut_pos->d_exbuy_ord_val ) );

            /** Following code added to handel position mismatch in case **/
            /** of partial execution & cancellation.Unprocessed executed **/
            /** quantity & rate added back to the IWTL side,to make IWTL **/
            /** & EXCH in sync.                                         ***/

            /* if(ptr_st_cntfut_pos->l_ibuy_qty != ptr_st_cntfut_pos->l_exbuy_qty) commented in ver 5.1 **/
            if( ptr_st_pstn_actn->l_new_qty > 0 ) /** ver 5.1 **/ 
            {
							if(DEBUG_MSG_LVL_3)
							{
								fn_userlog(c_ServiceName,"Inside Buy Qty Check For Position MisMatch Handling");
							}
              /** 5.1 starts **/
              if(DEBUG_MSG_LVL_0)
              {
                fn_userlog(c_ServiceName,"PosiTion MisMatch 1: SPAN iBuy Quantity before adding the unprocessed executed quantity is :%ld: and total unprocessed executed quantity is :%ld:",ptr_st_cntfut_pos->l_ibuy_qty,ptr_st_pstn_actn->l_new_qty);
              }
              /*** ver 5.1 ends ***/
              fn_add_pos(ptr_st_pstn_actn->l_new_qty,
                        ptr_st_pstn_actn->l_orgnl_rt,
                        &(ptr_st_cntfut_pos->l_ibuy_qty),
                        &(ptr_st_cntfut_pos->d_ibuy_ord_val ) );
              /*** ver 5.1 starts ***/
              if(DEBUG_MSG_LVL_0)
              {
                 fn_userlog(c_ServiceName,"PosiTion MisMatch 2: SPAN Corrected iBuy qty l_ibuy_qty is :%ld: Corrected exBuy qty l_exbuy_qty is :%ld:",ptr_st_cntfut_pos->l_ibuy_qty,ptr_st_cntfut_pos->l_exbuy_qty);
              }
              /*** ver 5.1 ends ***/
            }
          }
          else
          {
            fn_del_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty -
                          ptr_st_pstn_actn->l_exec_qty) * (-1) ),
                        ptr_st_pstn_actn->l_orgnl_rt,
                        &(ptr_st_cntfut_pos->l_exsell_qty),
                        &(ptr_st_cntfut_pos->d_exsell_ord_val ) );

            /** Following code added to handel position mismatch in case **/
            /** of partial execution & cancellation.Unprocessed executed **/
            /** quantity & rate added back to the IWTL side,to make IWTL **/
      			/** & EXCH in sync.                                         ***/

            /* if(ptr_st_cntfut_pos->l_isell_qty != ptr_st_cntfut_pos->l_exsell_qty)  commented in ver 5.1 **/
            if( ptr_st_pstn_actn->l_new_qty > 0 ) /*** ver 5.1 ***/
            {
							if(DEBUG_MSG_LVL_3)
							{
								fn_userlog(c_ServiceName,"Inside Sell Qty Check For Position MisMatch Handling");
							}

             /*** ver 5.1 starts ***/
              if(DEBUG_MSG_LVL_0)
              {
              fn_userlog(c_ServiceName,"PosiTion MisMatch a: SPAN iSell Quantity before adding the unprocessed executed quantity is :%ld: and total unprocessed executed quantity is :%ld:",ptr_st_cntfut_pos->l_isell_qty,ptr_st_pstn_actn->l_new_qty);
              }
             /*** ver 5.1 ends ***/

              fn_add_pos(ptr_st_pstn_actn->l_new_qty * (-1),
                         ptr_st_pstn_actn->l_orgnl_rt,
                         &(ptr_st_cntfut_pos->l_isell_qty),
                         &(ptr_st_cntfut_pos->d_isell_ord_val ) );

             /*** ver 5.1 starts ***/
              if(DEBUG_MSG_LVL_0)
              {
                 fn_userlog(c_ServiceName,"PosiTion MisMatch b: SPAN Corrected iSell Qty l_isell_qty is :%ld: and Corrected exSell Qty l_exsell_qty is :%ld:", ptr_st_cntfut_pos->l_isell_qty,ptr_st_cntfut_pos->l_exsell_qty);
              }
              /*** ver 5.1 ends ***/
            }
          }

      break;

		 case  ORS_CAN_ORD_RJCT:
          /** Increase the IWTL position by the unexecuted order qty  **/
          /** and order rate                                          **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
            fn_add_pos( ptr_st_pstn_actn->l_orgnl_qty -
                        ptr_st_pstn_actn->l_exec_qty,
                        ptr_st_pstn_actn->l_orgnl_rt,
                        &(ptr_st_cntfut_pos->l_ibuy_qty),
                        &(ptr_st_cntfut_pos->d_ibuy_ord_val ) );
          }
          else
          {

						if(DEBUG_MSG_LVL_3)
						{
							fn_userlog(c_ServiceName," ptr_st_pstn_actn->l_orgnl_qty :%ld:", ptr_st_pstn_actn->l_orgnl_qty);
							fn_userlog(c_ServiceName," ptr_st_pstn_actn->l_exec_qty :%ld:", ptr_st_pstn_actn->l_exec_qty);
						}

            fn_add_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty -
                          ptr_st_pstn_actn->l_exec_qty) * (-1) ),
                        ptr_st_pstn_actn->l_orgnl_rt,
                        &(ptr_st_cntfut_pos->l_isell_qty),
                        &(ptr_st_cntfut_pos->d_isell_ord_val ) );
          }
          break;

			case  ORS_ORD_EXP:
          /** Decrease the IWTL,EXCH position by the unexecuted order qty  **/
          /** and order rate                                               **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
            fn_del_pos( ptr_st_pstn_actn->l_orgnl_qty -
                        ptr_st_pstn_actn->l_exec_qty,
                        ptr_st_pstn_actn->l_orgnl_rt,
                        &(ptr_st_cntfut_pos->l_ibuy_qty),
                        &(ptr_st_cntfut_pos->d_ibuy_ord_val ) );

            fn_del_pos( ptr_st_pstn_actn->l_orgnl_qty -
                        ptr_st_pstn_actn->l_exec_qty,
                        ptr_st_pstn_actn->l_orgnl_rt,
                        &(ptr_st_cntfut_pos->l_exbuy_qty),
                        &(ptr_st_cntfut_pos->d_exbuy_ord_val ) );
          }
          else
          {
            fn_del_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty -
                          ptr_st_pstn_actn->l_exec_qty) * (-1) ),
                        ptr_st_pstn_actn->l_orgnl_rt,
                        &(ptr_st_cntfut_pos->l_isell_qty),
                        &(ptr_st_cntfut_pos->d_isell_ord_val ) );

            fn_del_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty -
                          ptr_st_pstn_actn->l_exec_qty) * (-1) ),
                        ptr_st_pstn_actn->l_orgnl_rt,
                        &(ptr_st_cntfut_pos->l_exsell_qty),
                        &(ptr_st_cntfut_pos->d_exsell_ord_val ) );

          }

          break;

			case	CLOSE_OUT_DEALS	:

					if(DEBUG_MSG_LVL_0)
					{
						fn_userlog(c_ServiceName,"ptr_st_cntfut_pos->l_opnpstn_qty Is :%ld:",ptr_st_cntfut_pos->l_opnpstn_qty);
					}

				  ptr_st_pstn_actn->l_cover_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

          li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

          li_flg_tmp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

					if(DEBUG_MSG_LVL_3)
					{	
						fn_userlog(c_ServiceName,"ptr_st_pstn_actn->l_cover_qty Is :%ld:",ptr_st_pstn_actn->l_cover_qty);
						fn_userlog(c_ServiceName,"li_temp_qty Is :%ld:",li_temp_qty);
						fn_userlog(c_ServiceName,"li_flg_tmp_qty Is :%ld:",li_flg_tmp_qty);
					}

          ptr_st_pstn_actn->l_orgnl_qty = ptr_st_cntfut_pos->l_opnpstn_qty * -1;
          ptr_st_pstn_actn->c_trnsctn_flw = ptr_st_cntfut_pos->c_opnpstn_flw;

					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"ptr_st_pstn_actn->l_orgnl_qty Is :%ld:",ptr_st_pstn_actn->l_orgnl_qty);
						fn_userlog(c_ServiceName,"ptr_st_pstn_actn->c_trnsctn_flw Is :%c:",ptr_st_pstn_actn->c_trnsctn_flw);
					}

          fn_add_pos_in_val(  li_temp_qty * (-1),
                              ptr_st_cntfut_pos->d_org_opn_val,
                              li_temp_qty,
                              &(ptr_st_cntfut_pos->l_opnpstn_qty),
                              &(ptr_st_cntfut_pos->d_org_opn_val ) );

          fn_add_pos_in_val(  li_temp_qty * (-1),
                              ptr_st_cntfut_pos->d_mtm_opn_val,
                              li_temp_qty,
                              &li_temp_qty,
                              &(ptr_st_cntfut_pos->d_mtm_opn_val ) );

          if ( li_flg_tmp_qty > 0 )
          {
						if(DEBUG_MSG_LVL_3)
						{
							fn_userlog(c_ServiceName,"Inside li_flg_tmp_qty > 0");
            }
						ptr_st_cntfut_pos->l_sell_exctd_qty = (-1) * ptr_st_cntfut_pos->l_buy_exctd_qty ;
          }
          else if ( li_flg_tmp_qty < 0 )
          {
						if(DEBUG_MSG_LVL_3)
						{
							fn_userlog(c_ServiceName,"Inside li_flg_tmp_qty < 0");
            }
						ptr_st_cntfut_pos->l_buy_exctd_qty = (-1) * ptr_st_cntfut_pos->l_sell_exctd_qty ;
          }
		
				break;

			/*** cases added in Ver 2.2 ***/

		case CLOSE_FUT :

          if(DEBUG_MSG_LVL_3)
          {
            fn_userlog ( c_ServiceName," ****** Inside Close fut.*******");
            fn_userlog ( c_ServiceName," ptr_st_pstn_actn->l_new_qty    |%ld|",ptr_st_pstn_actn->l_new_qty);
            fn_userlog ( c_ServiceName," ptr_st_cntfut_pos->l_opnpstn_qty |%ld|",ptr_st_cntfut_pos->l_opnpstn_qty);
            fn_userlog ( c_ServiceName," ptr_st_cntfut_pos->d_mtm_opn_val |%lf|",ptr_st_cntfut_pos->d_mtm_opn_val);
            fn_userlog ( c_ServiceName," ptr_st_cntfut_pos->d_opnpstn_val |%lf|",ptr_st_cntfut_pos->d_opnpstn_val);
            fn_userlog ( c_ServiceName," ptr_st_cntfut_pos->l_opnpstn_qty |%ld|",ptr_st_cntfut_pos->l_opnpstn_qty);
            fn_userlog ( c_ServiceName," ptr_st_cntfut_pos->c_opnpstn_flw |%c|",ptr_st_cntfut_pos->c_opnpstn_flw);
            fn_userlog ( c_ServiceName," ptr_st_pstn_actn->c_trnsctn_flw  |%c|",ptr_st_pstn_actn->c_trnsctn_flw);
          }

          li_temp_opn_qty = ptr_st_cntfut_pos->l_opnpstn_qty;
          li_flg_tmp_qty  = ptr_st_pstn_actn->l_new_qty;
          d_exec_rt       = ptr_st_cntfut_pos->d_mtm_opn_val / ptr_st_cntfut_pos->l_opnpstn_qty;
					ptr_st_pstn_actn->l_exec_rt = (long)d_exec_rt;

          if(DEBUG_MSG_LVL_3)
          {
            fn_userlog ( c_ServiceName," d_exec_rt      |%lf|",d_exec_rt);
          }

          if ( ptr_st_pstn_actn->c_trnsctn_flw == SELL )
          {

            fn_del_pos( ptr_st_pstn_actn->l_new_qty,
                        d_exec_rt,
                        &(ptr_st_cntfut_pos->l_opnpstn_qty),
                        &(ptr_st_cntfut_pos->d_opnpstn_val ) );

            fn_del_pos( ptr_st_pstn_actn->l_new_qty,
                        d_exec_rt,
                        &li_temp_opn_qty,
                        &(ptr_st_cntfut_pos->d_mtm_opn_val ) );
          }
          else
          {
            fn_del_pos( ptr_st_pstn_actn->l_new_qty,
                        d_exec_rt,
                        &(ptr_st_cntfut_pos->l_opnpstn_qty),
                        &(ptr_st_cntfut_pos->d_opnpstn_val ) );

            fn_del_pos( ptr_st_pstn_actn->l_new_qty,
                        d_exec_rt,
                        &li_temp_opn_qty,
                        &(ptr_st_cntfut_pos->d_mtm_opn_val ) );
          }

          if ( li_flg_tmp_qty > 0 )
          {
            ptr_st_cntfut_pos->l_sell_exctd_qty = ptr_st_cntfut_pos->l_sell_exctd_qty + ptr_st_pstn_actn->l_new_qty ;
          }
          else if ( li_flg_tmp_qty < 0 )
          {
            ptr_st_cntfut_pos->l_buy_exctd_qty  = ptr_st_cntfut_pos->l_buy_exctd_qty  + ptr_st_pstn_actn->l_new_qty ;
          }

          if(DEBUG_MSG_LVL_3)
          {
            fn_userlog ( c_ServiceName," ptr_st_cntfut_pos->l_sell_exctd_qty  |%ld|",ptr_st_cntfut_pos->l_sell_exctd_qty);
            fn_userlog ( c_ServiceName," ptr_st_cntfut_pos->l_buy_exctd_qty   |%ld|",ptr_st_cntfut_pos->l_buy_exctd_qty);
            fn_userlog ( c_ServiceName," ptr_st_cntfut_pos->l_opnpstn_qty     |%ld|",ptr_st_cntfut_pos->l_opnpstn_qty);
            fn_userlog ( c_ServiceName," ptr_st_cntfut_pos->d_mtm_opn_val     |%lf|",ptr_st_cntfut_pos->d_mtm_opn_val);
            fn_userlog ( c_ServiceName," ptr_st_cntfut_pos->d_opnpstn_val     |%lf|",ptr_st_cntfut_pos->d_opnpstn_val);
            fn_userlog ( c_ServiceName," ptr_st_cntfut_pos->c_opnpstn_flw     |%c|",ptr_st_cntfut_pos->c_opnpstn_flw);
          }

          break;

		case CLOSE_PART_FUT :

					if(DEBUG_MSG_LVL_3)
          {
            fn_userlog ( c_ServiceName," ****** Inside Close part fut.*******");
            fn_userlog ( c_ServiceName," ptr_st_pstn_actn->l_new_qty    |%ld|",ptr_st_pstn_actn->l_new_qty);
            fn_userlog ( c_ServiceName," ptr_st_cntfut_pos->l_opnpstn_qty |%ld|",ptr_st_cntfut_pos->l_opnpstn_qty);
            fn_userlog ( c_ServiceName," ptr_st_cntfut_pos->d_mtm_opn_val |%lf|",ptr_st_cntfut_pos->d_mtm_opn_val);
            fn_userlog ( c_ServiceName," ptr_st_cntfut_pos->d_opnpstn_val |%lf|",ptr_st_cntfut_pos->d_opnpstn_val);
            fn_userlog ( c_ServiceName," ptr_st_cntfut_pos->l_opnpstn_qty |%ld|",ptr_st_cntfut_pos->l_opnpstn_qty);
            fn_userlog ( c_ServiceName," ptr_st_cntfut_pos->c_opnpstn_flw |%c|",ptr_st_cntfut_pos->c_opnpstn_flw);
            fn_userlog ( c_ServiceName," ptr_st_pstn_actn->c_trnsctn_flw  |%c|",ptr_st_pstn_actn->c_trnsctn_flw);
          }

          li_temp_opn_qty = ptr_st_cntfut_pos->l_opnpstn_qty;
          li_flg_tmp_qty  = ptr_st_pstn_actn->l_new_qty;
          d_exec_rt       = ptr_st_cntfut_pos->d_mtm_opn_val / (double)ptr_st_cntfut_pos->l_opnpstn_qty;
					ptr_st_pstn_actn->l_exec_rt = (long)d_exec_rt;
					
					if(DEBUG_MSG_LVL_3)
          {
            fn_userlog ( c_ServiceName," d_exec_rt      |%lf|",d_exec_rt);
					}

					if ( ptr_st_pstn_actn->c_trnsctn_flw == SELL )
          {

            fn_del_pos( ptr_st_pstn_actn->l_new_qty,
                        d_exec_rt,
                        &(ptr_st_cntfut_pos->l_opnpstn_qty),
                        &(ptr_st_cntfut_pos->d_opnpstn_val ) );

						fn_del_pos( ptr_st_pstn_actn->l_new_qty,
                        d_exec_rt,
                        &li_temp_opn_qty,
                        &(ptr_st_cntfut_pos->d_mtm_opn_val ) );
          }
          else
          {
            fn_del_pos( ptr_st_pstn_actn->l_new_qty,
                        d_exec_rt,
                        &(ptr_st_cntfut_pos->l_opnpstn_qty),
                        &(ptr_st_cntfut_pos->d_opnpstn_val ) );
					
						fn_del_pos( ptr_st_pstn_actn->l_new_qty,
                        d_exec_rt,
                        &li_temp_opn_qty,
                        &(ptr_st_cntfut_pos->d_mtm_opn_val ) );
          }

          if ( li_flg_tmp_qty > 0 )
          {
            ptr_st_cntfut_pos->l_sell_exctd_qty = ptr_st_cntfut_pos->l_sell_exctd_qty + ptr_st_pstn_actn->l_new_qty * (-1);
          }
          else if ( li_flg_tmp_qty < 0 )
          {
            ptr_st_cntfut_pos->l_buy_exctd_qty  = ptr_st_cntfut_pos->l_buy_exctd_qty  + ptr_st_pstn_actn->l_new_qty * (-1);
          }

					if(DEBUG_MSG_LVL_3)
          {
            fn_userlog ( c_ServiceName," ptr_st_cntfut_pos->l_sell_exctd_qty  |%ld|",ptr_st_cntfut_pos->l_sell_exctd_qty);
            fn_userlog ( c_ServiceName," ptr_st_cntfut_pos->l_buy_exctd_qty   |%ld|",ptr_st_cntfut_pos->l_buy_exctd_qty);
            fn_userlog ( c_ServiceName," ptr_st_cntfut_pos->l_opnpstn_qty 		|%ld|",ptr_st_cntfut_pos->l_opnpstn_qty);
            fn_userlog ( c_ServiceName," ptr_st_cntfut_pos->d_mtm_opn_val 		|%lf|",ptr_st_cntfut_pos->d_mtm_opn_val);
            fn_userlog ( c_ServiceName," ptr_st_cntfut_pos->d_opnpstn_val 		|%lf|",ptr_st_cntfut_pos->d_opnpstn_val);
            fn_userlog ( c_ServiceName," ptr_st_cntfut_pos->c_opnpstn_flw 		|%c|",ptr_st_cntfut_pos->c_opnpstn_flw);
          }

          break;

		case CREATE_FUT:
					
					if( DEBUG_MSG_LVL_3 )
          {
            fn_userlog(c_ServiceName,"iptr_st_cntfut_pos->l_opnpstn_qty     |%ld|",ptr_st_cntfut_pos->l_opnpstn_qty);
            fn_userlog(c_ServiceName,"iptr_st_cntfut_pos->d_mtm_opn_val     |%lf|",ptr_st_cntfut_pos->d_mtm_opn_val);
					}

					/**** Commented in ver 3.1 ******
					if (ptr_st_cntfut_pos->l_opnpstn_qty == 0)
					{
						d_exec_rt = (double)ptr_st_pstn_actn->l_exec_rt;
					}
					else
					{
          	d_exec_rt = ptr_st_cntfut_pos->d_mtm_opn_val / ptr_st_cntfut_pos->l_opnpstn_qty;
					}
					***********************************/

					d_exec_rt = (double)ptr_st_pstn_actn->l_exec_rt; /*** Added in ver 3.1 ***/

          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {

						if( DEBUG_MSG_LVL_3 )
            {
               fn_userlog(c_ServiceName,"Inside BUY Transaction."); 
               fn_userlog(c_ServiceName,"ptr_st_cntfut_pos->l_opnpstn_qty 	|%ld|.",ptr_st_cntfut_pos->l_opnpstn_qty); 
               fn_userlog(c_ServiceName,"ptr_st_pstn_actn->l_exec_qty		 		|%ld|.",ptr_st_pstn_actn->l_exec_qty); 
               fn_userlog(c_ServiceName,"ptr_st_pstn_actn->l_cover_qty		 	|%ld|.",ptr_st_pstn_actn->l_cover_qty); 
               fn_userlog(c_ServiceName,"d_exec_rt		 	 										|%lf|.",d_exec_rt); 
						}	

            if( ptr_st_cntfut_pos->l_opnpstn_qty > 0 )
            {
              ptr_st_pstn_actn->l_fresh_qty = ptr_st_pstn_actn->l_exec_qty;
              ptr_st_pstn_actn->l_cover_qty = 0;
            }
            else
            {
              ptr_st_pstn_actn->l_cover_qty = fn_minl(ptr_st_pstn_actn->l_exec_qty, labs(ptr_st_cntfut_pos->l_opnpstn_qty) );

              ptr_st_pstn_actn->l_fresh_qty = fn_maxl(ptr_st_pstn_actn->l_exec_qty - ptr_st_pstn_actn->l_cover_qty, 0 );
            }
					
					if( DEBUG_MSG_LVL_3 )
          {
             fn_userlog(c_ServiceName,"ptr_st_pstn_actn->l_cover_qty      |%ld|",ptr_st_pstn_actn->l_cover_qty);
             fn_userlog(c_ServiceName,"ptr_st_pstn_actn->l_fresh_qty      |%ld|",ptr_st_pstn_actn->l_fresh_qty);
					}

          if ( ptr_st_pstn_actn->l_cover_qty > 0 )
          {
              li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

              fn_add_pos_in_val(  ptr_st_pstn_actn->l_cover_qty,
                                  ptr_st_cntfut_pos->d_opnpstn_val,
                                  li_temp_qty,
                                  &(ptr_st_cntfut_pos->l_opnpstn_qty),
                                  &(ptr_st_cntfut_pos->d_opnpstn_val ) );

              fn_add_pos_in_val(  ptr_st_pstn_actn->l_cover_qty,
                                  ptr_st_cntfut_pos->d_mtm_opn_val,
                                  li_temp_qty,
                                  &li_temp_qty,
																	&(ptr_st_cntfut_pos->d_mtm_opn_val ) );

						 if( DEBUG_MSG_LVL_3 )
          	 {
              fn_userlog(c_ServiceName,"cover quatity");
              fn_userlog(c_ServiceName,"ptr_st_pstn_actn->l_cover_qty      	 |%ld|",ptr_st_pstn_actn->l_cover_qty);
              fn_userlog(c_ServiceName,"ptr_st_cntfut_pos->l_opnpstn_qty      |%ld|",ptr_st_cntfut_pos->l_opnpstn_qty);
              fn_userlog(c_ServiceName,"ptr_st_cntfut_pos->d_opnpstn_val      |%ld|",ptr_st_cntfut_pos->d_opnpstn_val);
              fn_userlog(c_ServiceName,"ptr_st_cntfut_pos->d_mtm_opn_val      |%ld|",ptr_st_cntfut_pos->d_mtm_opn_val);
          	 }
          }
          if ( ptr_st_pstn_actn->l_fresh_qty > 0 )
          {
              li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

              fn_add_fplspos  ( ptr_st_pstn_actn->l_fresh_qty,  
                                d_exec_rt,
                                &(ptr_st_cntfut_pos->l_opnpstn_qty),
                                &(ptr_st_cntfut_pos->d_opnpstn_val ) );

              fn_add_fplspos( ptr_st_pstn_actn->l_fresh_qty,   
                              d_exec_rt,
                              &li_temp_qty,
                              &(ptr_st_cntfut_pos->d_mtm_opn_val ) );
						
						 if( DEBUG_MSG_LVL_3 )
             {
              fn_userlog(c_ServiceName,"fresh quantity");
              fn_userlog(c_ServiceName,"ptr_st_pstn_actn->l_cover_qty        |%ld|",ptr_st_pstn_actn->l_cover_qty);
              fn_userlog(c_ServiceName,"ptr_st_cntfut_pos->l_opnpstn_qty      |%ld|",ptr_st_cntfut_pos->l_opnpstn_qty);
              fn_userlog(c_ServiceName,"ptr_st_cntfut_pos->d_opnpstn_val      |%ld|",ptr_st_cntfut_pos->d_opnpstn_val);
              fn_userlog(c_ServiceName,"ptr_st_cntfut_pos->d_mtm_opn_val      |%ld|",ptr_st_cntfut_pos->d_mtm_opn_val);
             }
           }

            ptr_st_cntfut_pos->l_buy_exctd_qty = ptr_st_cntfut_pos->l_buy_exctd_qty + ptr_st_pstn_actn->l_exec_qty;
         }
         else
				 {
            if ( ptr_st_cntfut_pos->l_opnpstn_qty < 0 )
            {
              ptr_st_pstn_actn->l_fresh_qty = ptr_st_pstn_actn->l_exec_qty;
              ptr_st_pstn_actn->l_cover_qty = 0;
            }
            else
            {
             if( DEBUG_MSG_LVL_3 )
             {
                fn_userlog(c_ServiceName,"Inside CREATE FUT ptr_st_pstn_actn->l_exec_qty Is :%ld:",ptr_st_pstn_actn->l_exec_qty);
                fn_userlog(c_ServiceName,"Inside CREATE FUT ptr_st_cntfut_pos->l_opnpstn_qty Is :%ld:",ptr_st_cntfut_pos->l_opnpstn_qty);
             }
              ptr_st_pstn_actn->l_cover_qty = fn_minl(ptr_st_pstn_actn->l_exec_qty, ptr_st_cntfut_pos->l_opnpstn_qty );

              ptr_st_pstn_actn->l_fresh_qty = fn_maxl(ptr_st_pstn_actn->l_exec_qty - ptr_st_pstn_actn->l_cover_qty, 0 );
            }

            if ( ptr_st_pstn_actn->l_cover_qty > 0 )
            {
              li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

              fn_add_pos_in_val(  ptr_st_pstn_actn->l_cover_qty * ( -1 ),
                                  ptr_st_cntfut_pos->d_opnpstn_val,
                                  li_temp_qty,
                                  &(ptr_st_cntfut_pos->l_opnpstn_qty),
                                  &(ptr_st_cntfut_pos->d_opnpstn_val ) );

              fn_add_pos_in_val(  ptr_st_pstn_actn->l_cover_qty * ( -1 ),
                                  ptr_st_cntfut_pos->d_mtm_opn_val,
                                  li_temp_qty,
                                  &li_temp_qty,
                                  &(ptr_st_cntfut_pos->d_mtm_opn_val ) );

							if( DEBUG_MSG_LVL_3 )
              {
               fn_userlog(c_ServiceName,"cover quantity");
               fn_userlog(c_ServiceName,"ptr_st_pstn_actn->l_cover_qty        |%ld|",ptr_st_pstn_actn->l_cover_qty);
               fn_userlog(c_ServiceName,"ptr_st_cntfut_pos->l_opnpstn_qty      |%ld|",ptr_st_cntfut_pos->l_opnpstn_qty);
               fn_userlog(c_ServiceName,"ptr_st_cntfut_pos->d_opnpstn_val      |%ld|",ptr_st_cntfut_pos->d_opnpstn_val);
               fn_userlog(c_ServiceName,"ptr_st_cntfut_pos->d_mtm_opn_val      |%ld|",ptr_st_cntfut_pos->d_mtm_opn_val);
              }
            }

            if ( ptr_st_pstn_actn->l_fresh_qty > 0 )
            {
              li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

              fn_add_fplspos( ptr_st_pstn_actn->l_fresh_qty * (-1),    
                              d_exec_rt,
                              &(ptr_st_cntfut_pos->l_opnpstn_qty),
                              &(ptr_st_cntfut_pos->d_opnpstn_val ) );

              fn_add_fplspos( ptr_st_pstn_actn->l_fresh_qty * (-1),   
                              d_exec_rt,
                              &li_temp_qty,
                              &(ptr_st_cntfut_pos->d_mtm_opn_val ) );

							if( DEBUG_MSG_LVL_3 )
              {
               fn_userlog(c_ServiceName,"fresh quantity sell condition");
               fn_userlog(c_ServiceName,"ptr_st_pstn_actn->l_cover_qty        |%ld|",ptr_st_pstn_actn->l_cover_qty);
               fn_userlog(c_ServiceName,"ptr_st_cntfut_pos->l_opnpstn_qty      |%ld|",ptr_st_cntfut_pos->l_opnpstn_qty);
               fn_userlog(c_ServiceName,"ptr_st_cntfut_pos->d_opnpstn_val      |%ld|",ptr_st_cntfut_pos->d_opnpstn_val);
               fn_userlog(c_ServiceName,"ptr_st_cntfut_pos->d_mtm_opn_val      |%ld|",ptr_st_cntfut_pos->d_mtm_opn_val);
              }
            }

            ptr_st_cntfut_pos->l_sell_exctd_qty = ptr_st_cntfut_pos->l_sell_exctd_qty + (ptr_st_pstn_actn->l_exec_qty *(-1));
          }

          break;

			/*** Ver 2.2 Ends ***/	
  	}

  return 0;

}


int fn_cal_mrgn ( char  *c_ServiceName,
									double d_total_mrgn,
                  double d_mltplr,
                  double d_expsr,
                  double d_min_expsr,
                  double *d_min_mrgn,
                  double *d_intl_mrgn,
                  char   *c_err_msg
                )
{
	if(DEBUG_MSG_LVL_1)
	{
		fn_userlog(c_ServiceName,"Inside Margin Calculation Function For Span.");
		fn_userlog(c_ServiceName,"SPAN Multiplier is :%lf:",d_mltplr);
		fn_userlog(c_ServiceName,"SPAN Exposure IS :%lf:",d_expsr);
		fn_userlog(c_ServiceName,"SPAN Min. Exposure IS :%lf:",d_min_expsr);
	}

	*d_min_mrgn		=	d_total_mrgn	+	d_min_expsr	;

	*d_intl_mrgn	=	(d_total_mrgn	*	d_mltplr)  +	d_expsr	;

	if(DEBUG_MSG_LVL_1)
	{
		fn_userlog(c_ServiceName,"SPAN	-	SPAN Margin Is :%lf:",d_total_mrgn);
		fn_userlog(c_ServiceName,"SPAN	- Min. Margin	Is :%lf:",*d_min_mrgn);
		fn_userlog(c_ServiceName,"SPAN	- Initial Margin	Is :%lf:",*d_intl_mrgn);
	}

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"SPAN Margin Calculation- SPAN Margin :%lf: Min. Margin :%lf: Initial Margin :%lf:",d_total_mrgn,*d_min_mrgn,*d_intl_mrgn);
	}
	return	0	;
}

int fn_cal_expsr  ( char *c_ServiceName,
                    struct st_fcp_cntrct_pstn st_cntrct_pstn_crrnt ,
                    long l_basket_id,
                    double *d_expsr_mrgn,
                    double *d_min_expsr_mrgn,
                    double *d_mltplr,
                    char *c_err_msg
                  )
{

  double d_expsr_prcntg;
  double d_minexpsr_prcntg;
  double d_mrgnbl_prc;
  double d_option_spot  	= 0.0;
	double d_ibuy_expsr			=	0.0;
	double d_ibuy_minexpsr	= 0.0;
	double d_ebuy_expsr			=	0.0;
	double d_ebuy_minexpsr	=	0.0;
	double d_isell_expsr		=	0.0;
	double d_isell_minexpsr	=	0.0;
	double d_esell_expsr		=	0.0;
	double d_esell_minexpsr	=	0.0;
	double d_i_expsr				=	0.0;
	double d_i_minexpsr			=	0.0;
	double d_ex_expsr				=	0.0;
	double d_ex_minexpsr		=	0.0;
	double d_expsr					=	0.0;
	double d_min_expsr			=	0.0;
	double d_opn_expsr			=	0.0;
	double d_opn_minexpsr		=	0.0;
  double d_prev_und_quote = 0.0; /*** Ver 7.1 ***/

  long l_mrgnbl_qty;
  long l_ibuy_qty;
  long l_ebuy_qty;
  long l_isell_qty;
  long l_esell_qty;
	long l_obe_qty;
	long l_ose_qty;
	long l_sell_qty;
	long l_buy_qty;
  
  char c_otm_flg = 'N';     /** ver 6.0 **/

	if(DEBUG_MSG_LVL_1)
	{
		fn_userlog(c_ServiceName,"SPAN Inside Exposure Calculation Function.");
		fn_userlog(c_ServiceName,"SPAN Inside Exposure Calculation Function:l_basket_id:%ld",l_basket_id);
		fn_userlog(c_ServiceName,"SPAN Inside Exposure Calculation Function:st_cntrct_pstn_crrnt.c_undrlyng:%s:",st_cntrct_pstn_crrnt.c_undrlyng);
		fn_userlog(c_ServiceName,"SPAN Inside Exposure Calculation Function:st_cntrct_pstn_crrnt.c_prd_typ:%c:",st_cntrct_pstn_crrnt.c_prd_typ);
	}
 
  /** ver 6.0 starts **/
  
  fn_userlog(c_ServiceName,"Inside Expsr Calculation Function Contrct Recvd :%s:%s:%c:%s:%ld:%c:%c:",st_cntrct_pstn_crrnt.c_xchng_cd,st_cntrct_pstn_crrnt.c_undrlyng,st_cntrct_pstn_crrnt.c_prd_typ,st_cntrct_pstn_crrnt.c_expry_dt,st_cntrct_pstn_crrnt.l_strike_prc,st_cntrct_pstn_crrnt.c_opt_typ,st_cntrct_pstn_crrnt.c_exer_typ);  
  
  if ( st_cntrct_pstn_crrnt.c_prd_typ ==   'O' || st_cntrct_pstn_crrnt.c_prd_typ ==   'I' ) 
  {
   
   EXEC SQL
    SELECT NVL(FTQ_OTM_FLG,'N')
    INTO :c_otm_flg
    FROM FTQ_FO_TRD_QT
    WHERE FTQ_XCHNG_CD = :st_cntrct_pstn_crrnt.c_xchng_cd 
    AND FTQ_PRDCT_TYP  = :st_cntrct_pstn_crrnt.c_prd_typ 
    AND FTQ_UNDRLYNG   = :st_cntrct_pstn_crrnt.c_undrlyng 
    AND FTQ_EXPRY_DT   = to_date(:st_cntrct_pstn_crrnt.c_expry_dt,'dd-Mon-yyyy')
    AND FTQ_EXER_TYP   = :st_cntrct_pstn_crrnt.c_exer_typ
    AND FTQ_OPT_TYP    = :st_cntrct_pstn_crrnt.c_opt_typ
    AND FTQ_STRK_PRC   = :st_cntrct_pstn_crrnt.l_strike_prc;  

    if ( SQLCODE != 0 && SQLCODE !=  NO_DATA_FOUND )    /*** ver 6.1 No Data Found handled **/
    {
     fn_userlog(c_ServiceName,"SPAN  - Failed To Get OTM/OTH Flag.");
     return  -1;
    } 
    
    /** ver 6.1 starts **/ 
    if ( SQLCODE == NO_DATA_FOUND )
    {
      c_otm_flg = 'N';
      fn_userlog(c_ServiceName,"OTM/OTH Flag Set To Default for Contract :%s:%s:%c:%s:%ld:%c:%c:",st_cntrct_pstn_crrnt.c_xchng_cd,st_cntrct_pstn_crrnt.c_undrlyng,st_cntrct_pstn_crrnt.c_prd_typ,st_cntrct_pstn_crrnt.c_expry_dt,st_cntrct_pstn_crrnt.l_strike_prc,st_cntrct_pstn_crrnt.c_opt_typ,st_cntrct_pstn_crrnt.c_exer_typ);      
     
    }
    /** ver 6.1 Ends **/
  
  }
  
   fn_userlog(c_ServiceName,"ANUJ OTM/OTH FLag is :%c",c_otm_flg);
   
  /** ver 6.0 ends **/

  EXEC  SQL
    SELECT  /** FMM_EXPSR,  ** commented in ver 6.0  **/
            decode(:c_otm_flg,'Y',NVL(FMM_DEEP_OTM_EXPSR,0),NVL(FMM_EXPSR,0)),            /** ver 6.0 **/
            /** FMM_MIN_EXPSR, ** commented in ver 6.0 **/
            decode(:c_otm_flg,'Y',NVL(FMM_DEEP_OTM_MIN_EXPSR,0),NVL(FMM_MIN_EXPSR,0)),    /** ver 6.0 **/
            FMM_SPN_MULTPLR
    INTO    :d_expsr_prcntg,
            :d_minexpsr_prcntg,
            :d_mltplr
    FROM    FMM_FO_MRGN_MSTR
    WHERE   FMM_UNDRLYNG_BSKT_ID  = :l_basket_id
		AND     FMM_XCHNG_CD          = :st_cntrct_pstn_crrnt.c_xchng_cd    /***  Ver 1.2 ***/ 
    AND     FMM_UNDRLYNG          = :st_cntrct_pstn_crrnt.c_undrlyng
    AND     FMM_PRDCT_TYP         = :st_cntrct_pstn_crrnt.c_prd_typ
    AND     ROWNUM <2;


  if ( SQLCODE != 0 )
  {
    fn_userlog(c_ServiceName,"SPAN  - Failed To Get Exposure And  Multiplier.");
    return  -1;
  }


	if(DEBUG_MSG_LVL_1)
	{
		fn_userlog(c_ServiceName,"SPAN d_expsr_prcntg Is :%lf:",d_expsr_prcntg);
		fn_userlog(c_ServiceName,"SPAN d_minexpsr_prcntg Is :%lf:",d_minexpsr_prcntg);
		fn_userlog(c_ServiceName,"SPAN d_mltplr Is :%lf:",d_mltplr);
		fn_userlog(c_ServiceName,"SPAN ISell Qty Is :%ld:",st_cntrct_pstn_crrnt.l_isell_qty);
		fn_userlog(c_ServiceName,"SPAN ESell Qty Is :%ld:",st_cntrct_pstn_crrnt.l_exsell_qty);
		fn_userlog(c_ServiceName,"SPAN IBuy Qty Is :%ld:",st_cntrct_pstn_crrnt.l_ibuy_qty);
		fn_userlog(c_ServiceName,"SPAN EBuy Qty Is :%ld:",st_cntrct_pstn_crrnt.l_exbuy_qty);
		fn_userlog(c_ServiceName,"SPAN Open Position Qty Is :%ld:",st_cntrct_pstn_crrnt.l_opnpstn_qty);
	}

	if ( st_cntrct_pstn_crrnt.c_prd_typ == 'F')
	{
		if ( st_cntrct_pstn_crrnt.l_ibuy_qty != 0 )
		{
			l_ose_qty				=	fn_maxl(st_cntrct_pstn_crrnt.l_sell_exctd_qty * (-1) - st_cntrct_pstn_crrnt.l_buy_exctd_qty, 0 );
			l_ibuy_qty			=	fn_maxl(st_cntrct_pstn_crrnt.l_ibuy_qty	-	l_ose_qty,0);

			d_ibuy_expsr		=	l_ibuy_qty	*	(	st_cntrct_pstn_crrnt.d_ibuy_ord_val	/	(double) st_cntrct_pstn_crrnt.l_ibuy_qty ) * d_expsr_prcntg / 100;
		
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"SPAN IBuy Qty Is :%ld:",st_cntrct_pstn_crrnt.l_ibuy_qty);
				fn_userlog(c_ServiceName,"SPAN EBuy Qty Is :%ld:",st_cntrct_pstn_crrnt.l_exbuy_qty);
			}

			d_ibuy_minexpsr	=	l_ibuy_qty	*	(	st_cntrct_pstn_crrnt.d_ibuy_ord_val	/	(double) st_cntrct_pstn_crrnt.l_ibuy_qty ) * d_minexpsr_prcntg / 100;
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"d_ibuy_minexpsr :%lf:",d_ibuy_minexpsr);
			}
		}
		else
		{
			d_ibuy_expsr		=	0.0	;
			d_ibuy_minexpsr	=	0.0	;
		}

		if ( st_cntrct_pstn_crrnt.l_exbuy_qty != 0 ) 
		{
			l_ose_qty   		= fn_maxl(st_cntrct_pstn_crrnt.l_sell_exctd_qty * (-1) - st_cntrct_pstn_crrnt.l_buy_exctd_qty, 0 );
			l_ebuy_qty			=	fn_maxl( ( st_cntrct_pstn_crrnt.l_exbuy_qty - l_ose_qty ), 0 );

			d_ebuy_expsr    = l_ebuy_qty  * ( st_cntrct_pstn_crrnt.d_exbuy_ord_val / (double) st_cntrct_pstn_crrnt.l_exbuy_qty ) * d_expsr_prcntg / 100;

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"SPAN IBuy Qty Is :%ld:",st_cntrct_pstn_crrnt.l_ibuy_qty);
				fn_userlog(c_ServiceName,"SPAN EBuy Qty Is :%ld:",st_cntrct_pstn_crrnt.l_exbuy_qty);
			}
      d_ebuy_minexpsr = l_ebuy_qty  * ( st_cntrct_pstn_crrnt.d_exbuy_ord_val / (double) st_cntrct_pstn_crrnt.l_exbuy_qty ) * d_minexpsr_prcntg / 100;

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"d_ibuy_minexpsr :%lf:",d_ebuy_minexpsr);
			}
		}
		else
		{
			d_ebuy_expsr		=	0.0;
			d_ebuy_minexpsr	=	0.0;
		}

		if ( st_cntrct_pstn_crrnt.l_isell_qty != 0 )
		{
			l_obe_qty				=	fn_maxl( st_cntrct_pstn_crrnt.l_buy_exctd_qty -	st_cntrct_pstn_crrnt.l_sell_exctd_qty * (-1) , 0 );
			l_isell_qty			=	fn_maxl( st_cntrct_pstn_crrnt.l_isell_qty * (-1) - l_obe_qty,0	);

			d_isell_expsr			=	l_isell_qty	* ( st_cntrct_pstn_crrnt.d_isell_ord_val / (double) st_cntrct_pstn_crrnt.l_isell_qty) * d_expsr_prcntg / 100;	
			d_isell_minexpsr	=	l_isell_qty	* ( st_cntrct_pstn_crrnt.d_isell_ord_val / (double) st_cntrct_pstn_crrnt.l_isell_qty) * d_minexpsr_prcntg /100;

		}
		else
		{
			d_isell_expsr			=	0.0;
			d_isell_minexpsr	=	0.0	;
		}

		if ( st_cntrct_pstn_crrnt.l_exsell_qty != 0 )
    {
			l_obe_qty				=	fn_maxl( st_cntrct_pstn_crrnt.l_buy_exctd_qty - st_cntrct_pstn_crrnt.l_sell_exctd_qty * (-1) , 0 );
			l_esell_qty			=	fn_maxl( st_cntrct_pstn_crrnt.l_exsell_qty * (-1) - l_obe_qty,0 );

			d_esell_expsr			=	l_esell_qty	*	(st_cntrct_pstn_crrnt.d_exsell_ord_val / (double) st_cntrct_pstn_crrnt.l_exsell_qty ) * d_expsr_prcntg / 100;
			d_esell_minexpsr	= l_esell_qty * (st_cntrct_pstn_crrnt.d_exsell_ord_val / (double) st_cntrct_pstn_crrnt.l_exsell_qty ) * d_minexpsr_prcntg /100;

		}
		else
		{
			d_esell_expsr			=	0.0;
			d_esell_minexpsr	=	0.0;
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN d_ibuy_expsr Is :%lf:",d_ibuy_expsr);
			fn_userlog(c_ServiceName,"SPAN d_isell_expsr Is :%lf:",d_isell_expsr);
			fn_userlog(c_ServiceName,"SPAN d_ibuy_minexpsr Is :%lf:",d_ibuy_minexpsr);
			fn_userlog(c_ServiceName,"SPAN d_isell_minexpsr Is :%lf:",d_isell_minexpsr);
		}

		d_i_expsr			=	fn_maxd(d_ibuy_expsr,fabs(d_isell_expsr));
		d_i_minexpsr 	= fn_maxd(d_ibuy_minexpsr,fabs(d_isell_minexpsr));

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN d_i_expsr Is :%lf:",d_i_expsr);
			fn_userlog(c_ServiceName,"SPAN d_i_minexpsr  Is :%lf:",d_i_minexpsr);
		
			fn_userlog(c_ServiceName,"SPAN d_ebuy_expsr Is :%lf:",d_ebuy_expsr);
			fn_userlog(c_ServiceName,"SPAN d_esell_expsr Is :%lf:",d_esell_expsr);
			fn_userlog(c_ServiceName,"SPAN d_ebuy_minexpsr Is :%lf:",d_ebuy_minexpsr);
			fn_userlog(c_ServiceName,"SPAN d_esell_minexpsr Is :%lf:",d_esell_minexpsr);
		}

		d_ex_expsr		=	fn_maxd(d_ebuy_expsr,fabs(d_esell_expsr));
		d_ex_minexpsr	=	fn_maxd(d_ebuy_minexpsr,fabs(d_esell_minexpsr));

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN d_ex_expsr Is :%lf:",d_ex_expsr);
			fn_userlog(c_ServiceName,"SPAN d_ex_minexpsr Is :%lf:",d_ex_minexpsr);
		}

		d_expsr			=	fn_maxd(d_i_expsr,d_ex_expsr);
		d_min_expsr	= fn_maxd(d_i_minexpsr,d_ex_minexpsr);	

		if ( st_cntrct_pstn_crrnt.l_opnpstn_qty != 0 )
		{
			d_opn_expsr			=	fabs(st_cntrct_pstn_crrnt.d_opnpstn_val) * d_expsr_prcntg / 100;
			d_opn_minexpsr	=	fabs(st_cntrct_pstn_crrnt.d_opnpstn_val) * d_minexpsr_prcntg / 100;
		}
		else
		{
			d_opn_expsr			=	0.0;
			d_opn_minexpsr	=	0.0;
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN Exposure Is :%lf:",d_expsr);
			fn_userlog(c_ServiceName,"SPAN Min Exposure Is :%lf:",d_min_expsr);
			fn_userlog(c_ServiceName,"SPAN Open Position Exposure Is :%lf:",d_opn_expsr);
			fn_userlog(c_ServiceName,"SPAN Open Position Min Exposure Is :%lf:",d_opn_minexpsr);
		}

    *d_expsr_mrgn      =	d_expsr	+	d_opn_expsr	; 
    *d_min_expsr_mrgn  =	d_min_expsr	+	d_opn_minexpsr	;

		if(DEBUG_MSG_LVL_1)
		{
			fn_userlog(c_ServiceName,"SPAN Exposure Is :%lf:",*d_expsr_mrgn);
			fn_userlog(c_ServiceName,"SPAN Min Exposure Is :%lf:",*d_min_expsr_mrgn);
		}
	}

  if ( st_cntrct_pstn_crrnt.c_prd_typ == 'O')
	{
		if ( abs(st_cntrct_pstn_crrnt.l_isell_qty) > abs(st_cntrct_pstn_crrnt.l_exsell_qty) )
  	{
    	l_sell_qty = st_cntrct_pstn_crrnt.l_isell_qty;
  	}
  	else if ( abs(st_cntrct_pstn_crrnt.l_isell_qty) < abs(st_cntrct_pstn_crrnt.l_exsell_qty) )
  	{
    	l_sell_qty = st_cntrct_pstn_crrnt.l_exsell_qty;
  	}
		else
		{
			l_sell_qty = st_cntrct_pstn_crrnt.l_exsell_qty;			/**both quantities are same:in modification only price is changed :by shailesh on 08-Dec-2011 **/
		}

  	if ( st_cntrct_pstn_crrnt.l_ibuy_qty > st_cntrct_pstn_crrnt.l_exbuy_qty )
  	{
    	l_buy_qty = st_cntrct_pstn_crrnt.l_ibuy_qty;
  	}
  	else if ( st_cntrct_pstn_crrnt.l_ibuy_qty < st_cntrct_pstn_crrnt.l_exbuy_qty )
  	{
    	l_buy_qty = st_cntrct_pstn_crrnt.l_exbuy_qty;
  	}
		else
		{
    	l_buy_qty = st_cntrct_pstn_crrnt.l_exbuy_qty;			/**both quantities are same:in modification only price is changed
:by shailesh on 08-Dec-2011 **/
		}

		if(st_cntrct_pstn_crrnt.l_opnpstn_qty < 0 )
		{
     	l_mrgnbl_qty = st_cntrct_pstn_crrnt.l_isell_qty + st_cntrct_pstn_crrnt.l_opnpstn_qty;
		}
		else if ( st_cntrct_pstn_crrnt.l_opnpstn_qty > 0 )
		{
			l_mrgnbl_qty  = st_cntrct_pstn_crrnt.l_opnpstn_qty  ;
			
			if ( l_buy_qty > 0 )
 			{
   			l_mrgnbl_qty  = l_buy_qty + l_mrgnbl_qty ;
 			}

 			if ( l_sell_qty < 0 )
 			{
   			l_mrgnbl_qty  = l_sell_qty  + l_mrgnbl_qty  ;
 			}

		}
		else
		{
			l_mrgnbl_qty  = l_sell_qty ;
		}

		if ( l_mrgnbl_qty < 0 )
    {
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"SPAN Exchange Code Is :%s:",st_cntrct_pstn_crrnt.c_xchng_cd);
				fn_userlog(c_ServiceName,"SPAN Underlying Is :%s:",st_cntrct_pstn_crrnt.c_undrlyng);
			}

      if ( strcmp(st_cntrct_pstn_crrnt.c_xchng_cd,"NFO") == 0 )
      {
        strcpy(st_cntrct_pstn_crrnt.c_xchng_cd,"NSE");
      }
      else /*** Ver 1.7 ****/
      {
        strcpy(st_cntrct_pstn_crrnt.c_xchng_cd,"BSE");
      }   /*** Ver 1.7 ****/

      EXEC SQL
        SELECT  NVL(LTQ_RT,0.0),          /*** Ver 7.1 ***/
								NVL(LTQ_PREV_CLS_PRC,0.0) /*** Ver 7.1 ***/
        INTO    :d_option_spot,
			          :d_prev_und_quote  /*** Ver 7.1 ***/
        FROM    LTQ_TRD_QT
        WHERE   LTQ_XCHNG_CD  = :st_cntrct_pstn_crrnt.c_xchng_cd
        AND     LTQ_STCK_CD   = :st_cntrct_pstn_crrnt.c_undrlyng;

      if(SQLCODE  !=  0 )
      {
        fn_errlog ( c_ServiceName, "L31645", SQLMSG, c_err_msg );
        return -1;
      }

      d_option_spot = d_option_spot * 100 ;
      d_prev_und_quote = d_prev_und_quote * 100; /*** Ver 7.1 ***/

			if(DEBUG_MSG_LVL_1)
			{
				fn_userlog(c_ServiceName,"SPAN l_mrgnbl_qty Is :%ld:",l_mrgnbl_qty);
				fn_userlog(c_ServiceName,"SPAN d_option_spot Is :%lf:",d_option_spot);
			}

      *d_expsr_mrgn      = (double) abs(l_mrgnbl_qty) * fn_maxd(d_option_spot,d_prev_und_quote) * d_expsr_prcntg / 100 ; 
				/*** Max with prev closing taken in Ver 7.1 ***/
      *d_min_expsr_mrgn  = (double) abs(l_mrgnbl_qty) * fn_maxd(d_option_spot,d_prev_und_quote) * d_minexpsr_prcntg /100  ;
				/*** Max with prev closing taken in Ver 7.1 ***/
    }
	}
	return 0 ;
}

int fn_spntds( char *c_ServiceName,
						struct st_pstn_actn *ptr_st_pstn_actn,
						struct st_err_msg *ptr_st_err_msg,
						char *c_narration_id,
						char *c_reason_cd,
						char  c_lmt_flg,
						double  d_amount,
						double  *d_balance_amt)
{
	int i_returncode;
	double d_tds_incurred = 0.0;
	double d_par_tds_rt   = 0.0;
	double d_par_tds_srch = 0.0;
	double d_par_tds_cess = 0.0;
	double d_par_tds_it   = 0.0;
	double d_bal_amt      = 0.0;
	double d_amnt 				= 0.0;			

	long long ll_amnt     = 0;				

	char c_dr_without_lmt_flg;
	char c_sett_off_flg;

	EXEC SQL BEGIN DECLARE SECTION;
		varchar c_trade_dt[LEN_DATE];
		varchar c_mon_trade[LEN_DATE];
		varchar npl_due_to[50];
		varchar c_trd_dt[LEN_DATE];
	EXEC SQL END DECLARE SECTION;

	d_tds_incurred = 	0.0;

	if (DEBUG_MSG_LVL_3)       
	{
		fn_userlog(c_ServiceName,"STEP1");
	}

	EXEC SQL
		SELECT par_fno_tds_rt,
					 par_fno_tds_srch,
					 par_fno_tds_cess,
					 par_fno_tds_it
		INTO	 :d_par_tds_rt,
			 		 :d_par_tds_srch,
			 		 :d_par_tds_cess,
			 		 :d_par_tds_it
		FROM   PAR_SYSTM_PRMTR 	;

	if ( SQLCODE != 0 )
	{
		fn_userlog(c_ServiceName,"STEP1.1");
		fn_errlog ( c_ServiceName, "L31650", SQLMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"STEP1.2");
	}

	d_tds_incurred = 	(d_amount * d_par_tds_rt) /100 ;
	d_amnt	=	d_tds_incurred;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Before Rounding d_tds_incurred Is :%lf:",d_amnt);
	}

	if( (long long) ( d_amnt * 100.0 ) % 100 > 50 )
	{
		d_amnt =	d_amnt +	1.0	;
	}
	else if ( (long long) ( d_amnt * -100.0 ) % 100 > 50 )
	{
		d_amnt	=	d_amnt -	1.0	;
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"After Rounding d_tds_incurred Is :%lf:",d_amnt);
	}

	ll_amnt	=	( long long ) d_amnt;
	
	if(DEBUG_MSG_LVL_3) /*** ver 4.2 ***/
	{
		fn_userlog(c_ServiceName,"STEP1.3");
		fn_userlog(c_ServiceName,"c_reason_cd <%s>",c_reason_cd);
		fn_userlog(c_ServiceName,"c_narration_id<%s>",c_narration_id);
	}

	if(DEBUG_MSG_LVL_0) /*** ver 4.2 ***/
	{
		fn_userlog(c_ServiceName,"d_tds_incurred<%lf>",d_tds_incurred);
	}

	strcpy((char *)npl_due_to.arr,c_reason_cd);
	
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"STEP1.4");
	}

	SETLEN(npl_due_to);

	if (DEBUG_MSG_LVL_3)      
  {
		fn_userlog(c_ServiceName,"STEP2");
	}

	EXEC SQL
		SELECT EXG_SETT_OFF_FLG ,
					 to_char(EXG_NXT_TRD_DT, 'dd-Mon-yyyy')
		INTO   :c_sett_off_flg,
					 :c_trd_dt
		FROM   EXG_XCHNG_MSTR
		WHERE  EXG_XCHNG_CD=:ptr_st_pstn_actn->c_xchng_cd;

	if ( SQLCODE != 0 )
	{
		fn_errlog ( c_ServiceName, "L31655", SQLMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

	SETNULL(c_trd_dt);

	if (DEBUG_MSG_LVL_3)     
  {	
		fn_userlog(c_ServiceName,"STEP3");
	}

	EXEC SQL
		INSERT INTO npl_nri_pl_log
		(
			npl_clm_mtch_accnt,
			npl_trd_dt,
			npl_prft_loss,
			npl_tds_incurred,
			npl_due_to,
			npl_tds_rate,
			npl_tds_srch,
			npl_tds_cess,
			npl_tds_it
		)
		VALUES
		(
			:ptr_st_pstn_actn->c_cln_mtch_accnt,
			to_date(:c_trd_dt,'dd-Mon-YYYY'),
			:d_amount,
			:d_tds_incurred,
			:npl_due_to,
			:d_par_tds_rt,
			:d_par_tds_srch,
			:d_par_tds_cess,
			:d_par_tds_it
		);

	if ( SQLCODE != 0 )
	{
		fn_errlog ( c_ServiceName, "L31660", SQLMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

	if (DEBUG_MSG_LVL_3)       
  {
		fn_userlog(c_ServiceName,"STEP4");
	}

	EXEC SQL 
		SELECT to_char(last_day(to_date(:c_trd_dt,'dd-Mon-YYYY')),'dd-Mon-yyyy')
		INTO   :c_mon_trade
		FROM 	dual;

	if ( SQLCODE != 0 )
	{
		fn_errlog ( c_ServiceName, "L31665", SQLMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

	SETNULL(c_mon_trade);

	if (DEBUG_MSG_LVL_3)      
  {
		fn_userlog(c_ServiceName,"STEP5");
	}

	d_amnt	=	(double) ll_amnt;			

	EXEC SQL 
		UPDATE mts_mon_tds_smry
		SET    mts_cum_pl = mts_cum_pl + :d_amount,
					 mts_tds_liab	=	mts_tds_liab	+	:d_amnt,							
					 mts_cum_tds_liab	=	mts_cum_tds_liab	+	:d_amnt,			
					 mts_tds_rate =	:d_par_tds_rt	,
					 mts_trd_date = to_date(:c_mon_trade,'dd-Mon-YYYY'),
					 mts_tds_srch = :d_par_tds_srch,
					 mts_tds_cess = :d_par_tds_cess,
					 mts_tds_it 	= 	:d_par_tds_it,
					 mts_curr_pl	= mts_curr_pl +	:d_amount				
		WHERE  mts_clm_mtch_accnt =:ptr_st_pstn_actn->c_cln_mtch_accnt
		AND 	 to_char(mts_trd_date,'Mon-YYYY')  = to_char(to_date(:c_mon_trade),'Mon-YYYY');


	if ( SQLCODE != 0 )
	{
		if ( SQLCODE == NO_DATA_FOUND )
		{
			EXEC SQL
			INSERT INTO mts_mon_tds_smry
				(
					mts_clm_mtch_accnt,
					mts_trd_date,
					mts_cum_pl,
					mts_sett_off_flg,
					mts_tds_liab,
					mts_cum_tds_liab,
					mts_cum_tds_paid,
					mts_tds_rate,
					mts_tds_srch,
					mts_tds_cess,
					mts_tds_it,
					mts_upld_flg,
					mts_curr_pl
				)
				VALUES
				(
					:ptr_st_pstn_actn->c_cln_mtch_accnt,
					to_date(:c_mon_trade,'dd-Mon-YYYY'),
					:d_amount,
					:c_sett_off_flg,
					:d_amnt,			
					:d_amnt,		
					0,
					:d_par_tds_rt,
					:d_par_tds_srch,
					:d_par_tds_cess,
					:d_par_tds_it,
					'N',
					:d_amount			
				);

				if ( SQLCODE != 0 )
				{
					fn_errlog ( c_ServiceName, "L31670", SQLMSG, ptr_st_err_msg->c_err_msg );
					return FAILURE;
				}
		}
		else
		{
			fn_errlog ( c_ServiceName, "L31675", SQLMSG, ptr_st_err_msg->c_err_msg );
			return FAILURE;
		}
	}

	/*Update Limits accordingly for TDS applied */
	if (DEBUG_MSG_LVL_3)       
  {
		fn_userlog(c_ServiceName,"STEP6");
	}

	if (d_tds_incurred > 0)
	{
			/* Make all TDS on profit entries as -ve for Debit in FCB */
			d_tds_incurred = d_tds_incurred *(-1);
	}
	else
	{
		/*Make loss as +ve to sett off within that trade date in FCB  */
		d_tds_incurred = d_tds_incurred * (-1);
	}

	c_dr_without_lmt_flg = c_lmt_flg;

	if(DEBUG_MSG_LVL_3) /*** Ver 4.2 ***/
	{
		fn_userlog(c_ServiceName,"Before calling fn_upd_limits function");
		fn_userlog(c_ServiceName," fn_tds :c_narration_id<%s>",c_narration_id);
	}

	d_bal_amt = 0.0 ;							 /*** Ver 1.1 ***/
	i_returncode = fn_upd_spnlimits( c_ServiceName,
																ptr_st_pstn_actn,
																ptr_st_err_msg,
																c_narration_id,
																c_dr_without_lmt_flg,
																d_tds_incurred,
																&d_bal_amt);
	if ( i_returncode != 0 )
	{
		fn_userlog(c_ServiceName,"Inside error of fn_upd_limits");
		return i_returncode;
	}
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"After calling fn_upd_limits function");
	}
	/**To Be checked at Y3K time**/
	EXEC SQL
			 UPDATE 	fcb_fo_clnt_blncs 
			 SET			fcb_payout_dt = '01-Jan-3000'
			 WHERE 		fcb_clm_mtch_accnt = :ptr_st_pstn_actn->c_cln_mtch_accnt
			 AND 		  FCB_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd             /*** Ver 1.2 ***/ 
			 AND 		  fcb_grp_id= 9;

	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
	{
		fn_errlog ( c_ServiceName, "L31680", SQLMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

	if (DEBUG_MSG_LVL_3)       
  {
		fn_userlog(c_ServiceName,"STEP7");
	}
	return SUCCESS;
}


int fn_spn_nri_validation( char *c_ServiceName,
                  char *c_underlying,
                  char c_prd_typ ,
									char *c_xchng_cd,                     /*** Ver 1.2 ***/
									struct st_err_msg *ptr_st_err_msg )
{
  int i_returncode ;
  char c_nri_alwd_flg;
  if(DEBUG_MSG_LVL_3)
  {
   fn_userlog(c_ServiceName,"Inside fn_valdt_nri Function");
   fn_userlog(c_ServiceName,"Underlying :%s:",c_underlying);
   fn_userlog(c_ServiceName,"Product Typ :%c:",c_prd_typ);
  }

  EXEC SQL
  SELECT nvl(FUM_NRI_ALLWD_FLG,'Y')
  INTO   :c_nri_alwd_flg
  FROM   FUM_FO_UNDRLYNG_MSTR
  WHERE  FUM_UNDRLYNG = :c_underlying
	AND    FUM_XCHNG_CD = :c_xchng_cd                  /*** Ver 1.2 ***/
  AND    FUM_PRDCT_TYP = :c_prd_typ;
  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog( c_ServiceName, "L31685", SQLMSG,ptr_st_err_msg->c_err_msg );
    return ( -1 ) ;
  }
  if( c_nri_alwd_flg == 'N' )
  {
    fn_errlog( c_ServiceName, "B91081",DEFMSG,ptr_st_err_msg->c_err_msg );
    return ( -2 ) ;
  }
 return 0;
}

/*** Ver 1.1 starts here ***/
void fn_spn_rtrim(char* return_string, char to_trim)
{
  long i;  
  long str_length;
  str_length = strlen(return_string);

  for(i=(str_length-1);return_string[i]== to_trim; i--)
  {
    if ( i < 0 )
    {
       break;
    }
  }
  return_string[i+1]='\0';
  return;
}

char* fn_spn_ltrim(char* sSrc, char to_trim)
{
  int count = 0;
  while((sSrc[0] == to_trim))
  {
    int i = 0;
    count++;
    for(i = 0 ; i <= strlen(sSrc); i++)
      sSrc[i] = sSrc[i+1];
  }
  return sSrc;
}
/*** Ver 1.1 ends here ***/

/** Ver 1.8 Starts **/

int fn_chk_spncntrct_sltpfp_sqoff( char * c_ServiceName,
                            struct st_contract *ptr_st_cntrct,
                            char *c_fum_mkt_typ,
                            char *c_fcm_mkt_typ,
                            struct st_err_msg *ptr_st_err_msg
                          )
{

  EXEC SQL BEGIN DECLARE SECTION ;
    char  c_exchng_cd[4];
    char  c_prdct_type;
    char  c_underlyng[7];
    char  c_exercise_type ;
    varchar c_expiry_dt[ LEN_DATE ];
    char  c_option_type ;
    long  l_strike_price ;
    int   i_rec_exists ;
    char  c_qt_trdng_flg ;
    char  c_act_stts ;
    char  c_fum_mrkt_typ;
    char  c_fcm_mrkt_typ;
		char  c_fcm_sltpfp_qt_trdng_flg;
  EXEC SQL END DECLARE SECTION ;


  strcpy(c_exchng_cd,ptr_st_cntrct->c_xchng_cd);
  c_prdct_type = ptr_st_cntrct->c_prd_typ ;
  strcpy(c_underlyng,ptr_st_cntrct->c_undrlyng);
  c_exercise_type = ptr_st_cntrct->c_exrc_typ ;
  c_option_type = ptr_st_cntrct->c_opt_typ ;
  l_strike_price = ptr_st_cntrct->l_strike_prc ;
  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_cntrct->c_expry_dt );
  SETLEN ( c_expiry_dt );
  rtrim ( (char *)c_expiry_dt.arr );

   if(DEBUG_MSG_LVL_3)
   {
    fn_userlog( c_ServiceName, "c_exchng_cd:%s:", c_exchng_cd );
    fn_userlog( c_ServiceName, "c_prdct_type:%c:",c_prdct_type);
    fn_userlog( c_ServiceName, "c_underlyng:%s:", c_underlyng );
    fn_userlog( c_ServiceName, "c_expiry_dt:%s", c_expiry_dt.arr );
    fn_userlog( c_ServiceName, "c_exercise_type:%c:", c_exercise_type );
    fn_userlog( c_ServiceName, "c_option_type:%c:", c_option_type);
    fn_userlog( c_ServiceName, "l_strike_price:%ld:", l_strike_price );
  }

  i_rec_exists = 0 ;

   EXEC SQL
    SELECT  1,
            fum_mrkt_typ
     INTO   :i_rec_exists,
            :c_fum_mrkt_typ
     FROM   fum_fo_undrlyng_mstr
     WHERE  fum_xchng_cd =  :c_exchng_cd
 /*    AND    fum_prdct_typ = 'F'  Commented in Ver 2.6 **/
		 AND    fum_prdct_typ = decode(:c_prdct_type,'P','F','U','F','I','O',:c_prdct_type)   /** Ver 2.6 OptionPlus product handled **/
     AND    fum_undrlyng =  :c_underlyng
     AND    fum_qt_trdng_flg in ('Q','T') 
     AND    fum_sltp_fp_trdng_flg in ('Q','T','S');

    if( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "L31690", SQLMSG,ptr_st_err_msg->c_err_msg);
      return ( -1 ) ;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName, "c_fum_mrkt_typ:%c:", c_fum_mrkt_typ);
    }

    if( (i_rec_exists != 1 ) || ( SQLCODE == NO_DATA_FOUND) )
    {
      fn_errlog( c_ServiceName, "B28513", DEFMSG,ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

    *c_fum_mkt_typ = c_fum_mrkt_typ;

  /*** Commented In Ver 3.7  ** 

  EXEC SQL
    SELECT fcm_qt_trdng_flg,
           fcm_act_stts,
           fcm_mrkt_typ,
					 fcm_sltp_fp_qt_trdng_flg
    INTO   :c_qt_trdng_flg,
           :c_act_stts,
           :c_fcm_mrkt_typ,
					 :c_fcm_sltpfp_qt_trdng_flg	
    FROM  fcm_fo_cntrct_mstr
    WHERE   fcm_xchng_cd = :c_exchng_cd
 *   AND     fcm_prdct_typ = 'F'        Commented in Ver 2.6 **
		AND     fcm_prdct_typ = decode(:c_prdct_type,'P','F','U','F','I','O',:c_prdct_type)   ** Ver 2.
6 OptionPlus product handled **
    AND     fcm_undrlyng = :c_underlyng
    AND     fcm_expry_dt = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
    AND     fcm_exer_typ = :c_exercise_type
    AND     fcm_opt_typ =  :c_option_type
    AND     fcm_strk_prc = :l_strike_price;

    *** Ver 3.7 Comment Ends ***/

    /*** Ver 3.7 Starts ***/

  EXEC SQL
    SELECT ftq_qt_trdng_flg,
           ftq_act_stts,
           ftq_mrkt_typ,
           ftq_sltp_fp_qt_trdng_flg
    INTO   :c_qt_trdng_flg,
           :c_act_stts,
           :c_fcm_mrkt_typ,
           :c_fcm_sltpfp_qt_trdng_flg
    FROM  ftq_fo_trd_qt
    WHERE   ftq_xchng_cd = :c_exchng_cd
    AND     ftq_prdct_typ = decode(:c_prdct_type,'P','F','U','F','I','O',:c_prdct_type)
    AND     ftq_undrlyng = :c_underlyng
    AND     ftq_expry_dt = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
    AND     ftq_exer_typ = :c_exercise_type
    AND     ftq_opt_typ =  :c_option_type
    AND     ftq_strk_prc = :l_strike_price;

    /*** Ver 3.7 Ends	***/

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog( c_ServiceName, "L31695", SQLMSG,ptr_st_err_msg->c_err_msg );
        return ( -1 ) ;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName, "c_fcm_mrkt_typ:%c:", c_fcm_mrkt_typ);
    }

    if( ( ( c_qt_trdng_flg != 'Q' ) && ( c_qt_trdng_flg != 'T' ) )  ||
        ( ( c_fcm_sltpfp_qt_trdng_flg != 'Q' ) && ( c_fcm_sltpfp_qt_trdng_flg != 'T' ) && (c_fcm_sltpfp_qt_trdng_flg == 'N'))
        || ( SQLCODE == NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "B28514", " ",ptr_st_err_msg->c_err_msg );
      return ( -1 ) ;
    }

    *c_fcm_mkt_typ = c_fcm_mrkt_typ;

    return ( 0 );
}

/** Ver 1.8 Starts **/



/*** Ver 2.0 Starts ***/

int fn_chk_spnord_max_limit ( char *c_ServiceName,
                              char c_mtch_accnt_no[10+1] ,
                              long l_ord_tot_qty,
                              long l_ord_lmt_rt,
                              double  d_netadj_ord_val,
                              char  c_call_flg,
                              char c_ord_typ,
                              char c_xchng_cd [4],
                              char *c_ord_val_flg,
                              char *c_cumopn_val_flg,
                              struct st_err_msg *ptr_st_err_msg
                          )
{
  double  d_ord_lmt_rt = 0.0 ;
  double  d_ordr_val = 0.0 ;
  double  d_ord_max_val  = 0.0 ;
  double  d_tot_open_val = 0.0 ;
  char    sql_c_xchng_cd[4] ;
  char    c_msg[100];
  MEMSET(c_msg);
	MEMSET(ptr_st_err_msg->c_err_msg);


  d_ord_lmt_rt = l_ord_lmt_rt;
  d_ordr_val   = (l_ord_tot_qty * d_ord_lmt_rt ) ;   /*** This is in Paise ***/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"----Inside Function fn_chk_spnord_max_limit ");
    fn_userlog(c_ServiceName,"Exchange Code :%s:",c_xchng_cd);
    fn_userlog(c_ServiceName,"Order Type :%c:",c_ord_typ);
    fn_userlog(c_ServiceName,"Total Ordered Qty:%ld:",l_ord_tot_qty);
    fn_userlog(c_ServiceName,"Ordered Limit Rate:%lf:",d_ord_lmt_rt);
    fn_userlog(c_ServiceName,"Estimated Order Value:%lf:",d_ordr_val);
		fn_userlog(c_ServiceName,"Net open value to be adjusted:%lf:",d_netadj_ord_val);
    fn_userlog(c_ServiceName," Service call flag :%c:",c_call_flg);
  }

  strcpy ( sql_c_xchng_cd, c_xchng_cd );

  if(DEBUG_MSG_LVL_3){
	  fn_userlog(c_ServiceName,"Exchange Code :%s:",sql_c_xchng_cd);
	}	/*** Ver 4.2 ***/

  EXEC SQL
   SELECT NVL(EXG_MKT_MAX_VAL,0) ,
          NVL(EXG_LMT_MAX_VAL,0) ,
          NVL(EXG_MAX_CUM_OPNORD_VAL,0)
   INTO   :sql_exg_mkt_max_val,
          :sql_exg_lmt_max_val,
          :sql_exg_max_cum_opnord_val
   FROM  EXG_XCHNG_MSTR
   WHERE EXG_XCHNG_CD = :c_xchng_cd ;

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "L31700", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  sql_exg_mkt_max_val = sql_exg_mkt_max_val * 100 ; /*** Converting into Paise ***/
  sql_exg_lmt_max_val = sql_exg_lmt_max_val * 100 ; /*** Converting into Paise ***/
  sql_exg_max_cum_opnord_val = sql_exg_max_cum_opnord_val * 100 ; /*** Converting into Paise ***/

	if(DEBUG_MSG_LVL_3)
  {
  	fn_userlog(c_ServiceName,"sql_exg_lmt_max_val Is :%lf:",sql_exg_lmt_max_val);
  	fn_userlog(c_ServiceName,"sql_exg_lmt_max_val Is :%lf:",sql_exg_lmt_max_val);
  	fn_userlog(c_ServiceName,"sql_exg_max_cum_opnord_val Is :%lf:",sql_exg_max_cum_opnord_val);

	}

  if ( c_ord_typ == 'M' || c_ord_typ == 'L' || c_ord_typ == 'S')
  {
    if ( c_ord_typ == 'M')
    {
      d_ord_max_val = sql_exg_mkt_max_val ;
    }
    else if ( c_ord_typ == 'L' || c_ord_typ == 'S')
    {
      d_ord_max_val = sql_exg_lmt_max_val ;
    }
  }

   EXEC SQL
         /*** SELECT  NVL(SUM(DECODE(FOD_PRDCT_TYP,'O',(FOD_LMT_RT+FOD_STRK_PRC),FOD_LMT_RT)*(FOD_ORDR_TOT_QTY Commented In Ver 2.6 ***/
         SELECT  NVL(SUM(DECODE(FOD_PRDCT_TYP,'O',(FOD_LMT_RT+FOD_STRK_PRC),'I',(FOD_LMT_RT+FOD_STRK_PRC),FOD_LMT_RT)*(FOD_ORDR_TOT_QTY      /*** Ver 2.6 ***/
                 - NVL(FOD_EXEC_QTY,0) - NVL(FOD_CNCL_QTY,0))),0) 
         INTO    :d_tot_open_val
         FROM    FOD_FO_ORDR_DTLS , EXG_XCHNG_MSTR
         WHERE   FOD_TRD_DT = EXG_NXT_TRD_DT
         AND     FOD_XCHNG_CD = EXG_XCHNG_CD
         AND     EXG_XCHNG_CD = :c_xchng_cd
         AND     FOD_ORDR_STTS IN ('R','O','Q','P')
         AND     FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no ;

   if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
   {
      fn_errlog ( c_ServiceName, "L31705", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
   }



  if( d_ordr_val > d_ord_max_val )  /*** Comparing in Paise ***/
  {
    *c_ord_val_flg = YES ;
    sprintf(c_msg," (Max val:%.2lf)",d_ord_max_val/100);
  }
  else
  {
    *c_ord_val_flg = NO;
  }

	/**** Following is done to identify if the call is from modification service       ****/
  /**** If the call is from mod service ,no need to add d_ordr_val as it is already  ****/
  /**** considered in the net effect                                                 ****/
  if( d_netadj_ord_val != 0 || c_call_flg == 'M')
  {
    d_ordr_val = 0.0 ;
  }

  if((d_tot_open_val + d_ordr_val + d_netadj_ord_val ) > sql_exg_max_cum_opnord_val) /*** Comparing in Paise ***/
  {
    *c_cumopn_val_flg = YES ;
    sprintf(c_msg," (Max val:%.2lf)",sql_exg_max_cum_opnord_val/100);
  }
  else
  {
    *c_cumopn_val_flg = NO;
  }


  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"c_ord_val_flg Is :%c", *c_ord_val_flg);
    fn_userlog(c_ServiceName,"c_cumopn_val_flg Is :%c", *c_cumopn_val_flg);
		fn_userlog(c_ServiceName,"d_tot_open_val Is :%lf",d_tot_open_val );
    fn_userlog(c_ServiceName,"d_ordr_val  Is :%lf",d_ordr_val);
    fn_userlog(c_ServiceName,"d_netadj_ord_val Is :%lf",d_netadj_ord_val);
    fn_userlog(c_ServiceName,"sql_exg_max_cum_opnord_val Is :%lf",sql_exg_max_cum_opnord_val);
    fn_userlog(c_ServiceName,"c_msg Is :%s",c_msg);
  }

  strcat(ptr_st_err_msg->c_err_msg,c_msg);
  return SUCCESS;
}


/*** Ver 2.0 Ends		***/
/*** Ver 2.5 Starts ***/
int fn_spnchk_frsh_cover_ord  (  char   *c_ServiceName,
                             struct st_orderbook *st_ordbk ,
                             char   *c_fresh_ord_flg ,
                             struct st_err_msg *ptr_st_err_msg
                          ) /* int return type added in ver 8.1 tux on linux*/
{

    /*** Variable declartion Starts ***/
    long  l_open_pos_qty   = 0;
    long  l_tot_ord_qty = 0;
    char  c_fresh_order_flg = '\0';
    char  c_open_flw        = '\0';
    int   i_flw_same = 0;
    /*** Variable declartion Ends   ***/



    if(DEBUG_MSG_LVL_3)
    {
          fn_userlog(c_ServiceName," --  Inside function fn_spnchk_frsh_cover_ord");
          fn_userlog(c_ServiceName," --  st_ordbk->c_ordr_rfrnc Is [%s]",st_ordbk->c_ordr_rfrnc);
          fn_userlog(c_ServiceName," --  st_ordbk->c_cln_mtch_accnt Is [%s]",st_ordbk->c_cln_mtch_accnt);
          fn_userlog(c_ServiceName," --  st_ordbk->c_xchng_cd Is [%s]",st_ordbk->c_xchng_cd);
          fn_userlog(c_ServiceName," --  st_ordbk->c_undrlyng is [%s]",st_ordbk->c_undrlyng);
          fn_userlog(c_ServiceName," --  st_ordbk->c_prd_typ Is [%c]",st_ordbk->c_prd_typ);
          fn_userlog(c_ServiceName," --  st_ordbk->c_ctgry_indstk Is [%c]",st_ordbk->c_ctgry_indstk);
          fn_userlog(c_ServiceName," --  st_ordbk->c_expry_dt Is [%s]",st_ordbk->c_expry_dt);
          fn_userlog(c_ServiceName," --  st_ordbk->c_exrc_typ Is [%c]",st_ordbk->c_exrc_typ);
          fn_userlog(c_ServiceName," --  st_ordbk->c_opt_typ Is [%c]",st_ordbk->c_opt_typ);
          fn_userlog(c_ServiceName," --  st_ordbk->l_strike_prc Is [%ld]",st_ordbk->l_strike_prc);
          fn_userlog(c_ServiceName," --  st_ordbk->c_ordr_flw Is [%c]",st_ordbk->c_ordr_flw);
          fn_userlog(c_ServiceName," --  st_ordbk->c_ordr_stts Is [%c]",st_ordbk->c_ordr_stts);
          fn_userlog(c_ServiceName," --  st_ordbk->c_pipe_id Is [%s]",st_ordbk->c_pipe_id);
          fn_userlog(c_ServiceName," --  st_ordbk->l_ord_tot_qty Is [%ld]",st_ordbk->l_ord_tot_qty);

     }

     l_open_pos_qty = 0;
     l_tot_ord_qty  = 0;

      if (DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Checking if open position flw is same ...");
      }

      c_open_flw = '\0';

      EXEC SQL
        SELECT FCP_OPNPSTN_FLW
        INTO  :c_open_flw
        FROM  FCP_FO_SPN_CNTRCT_PSTN
        WHERE FCP_CLM_MTCH_ACCNT =:st_ordbk->c_cln_mtch_accnt
        AND   FCP_XCHNG_CD       =:st_ordbk->c_xchng_cd
        AND   FCP_PRDCT_TYP      =:st_ordbk->c_prd_typ
        AND   FCP_OPT_TYP        =:st_ordbk->c_opt_typ
        AND   FCP_STRK_PRC       =:st_ordbk->l_strike_prc
        AND   FCP_INDSTK         =:st_ordbk->c_ctgry_indstk
        AND   FCP_UNDRLYNG       =:st_ordbk->c_undrlyng
        AND   FCP_EXPRY_DT       =:st_ordbk->c_expry_dt
        AND   FCP_EXER_TYP       =:st_ordbk->c_exrc_typ ;

      if ( SQLCODE != 0)
      {
        fn_errlog ( c_ServiceName, "S31085", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }

      if (DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName," c_open_flw Is :%c:" ,c_open_flw);
      }


      if ( (c_open_flw == st_ordbk->c_ordr_flw ) && c_open_flw !='N')
      {
          if (DEBUG_MSG_LVL_3)
          {
            fn_userlog(c_ServiceName," As open posiiton flw is same...this is fresh order...");
          }

          c_fresh_order_flg = 'Y' ;
      }
      else if ((c_open_flw != st_ordbk->c_ordr_flw ) && c_open_flw !='N' )
      {

			  if(DEBUG_MSG_LVL_3){
	        fn_userlog(c_ServiceName,"  open posiiton flw is not same......");
				} /*** Ver 4.2 ***/

        EXEC SQL
          SELECT FCP_OPNPSTN_QTY,
                 DECODE(:st_ordbk->c_ordr_flw,'B',GREATEST(ABS(FCP_IBUY_QTY),ABS(FCP_EXBUY_QTY)),GREATEST(ABS(FCP_ISELL_QTY),
ABS(FCP_EXSELL_QTY)))
                      INTO  :l_open_pos_qty,
                            :l_tot_ord_qty
                      FROM FCP_FO_SPN_CNTRCT_PSTN
                      WHERE FCP_CLM_MTCH_ACCNT =:st_ordbk->c_cln_mtch_accnt
                      AND   FCP_XCHNG_CD       =:st_ordbk->c_xchng_cd
                      AND   FCP_PRDCT_TYP      =:st_ordbk->c_prd_typ
                      AND   FCP_OPT_TYP        =:st_ordbk->c_opt_typ
                      AND   FCP_STRK_PRC       =:st_ordbk->l_strike_prc
                      AND   FCP_INDSTK         =:st_ordbk->c_ctgry_indstk
                      AND   FCP_UNDRLYNG       =:st_ordbk->c_undrlyng
                      AND   FCP_EXPRY_DT       =:st_ordbk->c_expry_dt
                      AND   FCP_EXER_TYP       =:st_ordbk->c_exrc_typ
                      AND   FCP_OPNPSTN_FLW    =(DECODE(:st_ordbk->c_ordr_flw,'B','S','B'))  ;

        if ( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
        {
          fn_errlog ( c_ServiceName, "S31090", SQLMSG, ptr_st_err_msg->c_err_msg );
          return FAILURE;
        }

        if (SQLCODE == NO_DATA_FOUND)
        {
          l_open_pos_qty  = 0;
          l_tot_ord_qty   = 0;
        }


        if ( (labs(l_tot_ord_qty)+ st_ordbk->l_ord_tot_qty) <= labs(l_open_pos_qty) ) /*** Need to confirm ***/
        {
          c_fresh_order_flg = 'N' ;
        }
        else
        {
          /*** This is to handle case wherein client trying to modify square-off order for other than qty ***/
          if(st_ordbk->l_ord_tot_qty == 0 )
          {
            c_fresh_order_flg = 'N' ;
          }
          else
          {
            c_fresh_order_flg = 'Y' ;
          }
        }

         if(DEBUG_MSG_LVL_3)
         {
           fn_userlog(c_ServiceName,"Open position quantity is |%ld|",l_open_pos_qty);
           fn_userlog(c_ServiceName," Total Order quantity is |%ld|",l_tot_ord_qty);
           fn_userlog(c_ServiceName," c_fresh_order_flg is |%c|",c_fresh_order_flg);
         }
       }
       else if (  c_open_flw =='N' )
       {
			   if(DEBUG_MSG_LVL_3){
	         fn_userlog(c_ServiceName," No open posiiton exists ...this is fresh order...");
				 }	/*** ver 4.2 ***/
         c_fresh_order_flg = 'Y' ;
       }
       else
       {
         fn_userlog(c_ServiceName," In ERROR CASE ...");
       }


    *c_fresh_ord_flg = c_fresh_order_flg ;
    return 0 ;

}
/*** Ver 2.5 Ends   ***/
/***************** Ver 2.7 Starts ***************/

int fn_op_vrfy_spnprc_band_mkt ( char *c_ServiceName ,
																 long  l_ord_limit_rt ,
																 struct st_orderbook *ptr_st_ordbook ,
                          			 struct st_err_msg *ptr_st_err_msg
                        			 )
{

  long l_upbnd_rt = 0;
  long l_lwbnd_rt = 0;

	if(DEBUG_MSG_LVL_1)
	{
		fn_userlog( c_ServiceName, " Inside function fn_op_vrfy_spnprc_band_mkt ");
		fn_userlog( c_ServiceName, "ptr_st_ordbook->c_xchng_cd			Is :%s:",ptr_st_ordbook->c_xchng_cd);					                   fn_userlog( c_ServiceName, "ptr_st_ordbook->c_prd_typ       Is :%c:",ptr_st_ordbook->c_prd_typ);
		fn_userlog( c_ServiceName, "ptr_st_ordbook->c_undrlyng      Is :%s:",ptr_st_ordbook->c_undrlyng);                      
		fn_userlog( c_ServiceName, "ptr_st_ordbook->c_expry_dt      Is :%s:",ptr_st_ordbook->c_expry_dt);
		fn_userlog( c_ServiceName, "ptr_st_ordbook->c_exrc_typ      Is :%c:",ptr_st_ordbook->c_exrc_typ);
		fn_userlog( c_ServiceName, "ptr_st_ordbook->l_strike_prc    Is :%ld:",ptr_st_ordbook->l_strike_prc);
		fn_userlog( c_ServiceName, "l_ord_limit_rt									Is :%ld:", l_ord_limit_rt);
	}

  EXEC SQL
       SELECT FTQ_HGH_PRC_RNG,
              FTQ_LOW_PRC_RNG
       INTO   :l_upbnd_rt,
              :l_lwbnd_rt
			 FROM   FTQ_FO_TRD_QT
       WHERE  FTQ_XCHNG_CD  = :ptr_st_ordbook->c_xchng_cd
       AND   FTQ_PRDCT_TYP  = decode(:ptr_st_ordbook->c_prd_typ,'I','O',:ptr_st_ordbook->c_prd_typ)
       AND   FTQ_UNDRLYNG   = :ptr_st_ordbook->c_undrlyng
       AND   FTQ_EXPRY_DT   = to_date ( :ptr_st_ordbook->c_expry_dt,'dd-Mon-yyyy' )
       AND   FTQ_EXER_TYP   = :ptr_st_ordbook->c_exrc_typ
       AND   FTQ_OPT_TYP    = :ptr_st_ordbook->c_opt_typ
       AND   FTQ_STRK_PRC   = :ptr_st_ordbook->l_strike_prc;


  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31710", SQLMSG, c_err_msg );
    return ( -1 );
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "l_upbnd_rt :%ld:", l_upbnd_rt);
    fn_userlog( c_ServiceName, "l_lwbnd_rt :%ld:", l_lwbnd_rt);
		fn_userlog( c_ServiceName, "l_ord_limit_rt									Is :%ld:", l_ord_limit_rt);
  }


  if ( ( l_ord_limit_rt > l_upbnd_rt ) || ( l_ord_limit_rt < l_lwbnd_rt )  )
  {
    fn_errlog( c_ServiceName, "B29033", " ",ptr_st_err_msg->c_err_msg );
    return ( -1 ) ;
  }
	return 0;

}


/***************** Ver 2.7 Ends   ***************/
/** Ver 3.2 Starts **/
int fn_spn_ins_ffl_log_tbl  ( char    *c_ServiceName,
                              struct  st_orderbook st_ordbk,
                              char    *c_err_msg,
                              double  d_deficit ,
                              char   c_actn_flg
                            )

{
  char c_trade_dt[LEN_DATE];
  int i_trnsctn = 0;
  int i_gid = 0;
  char c_narration_id[4];
  char c_rqst_type;
  double d_available_amt = 0.0 ;
  double d_tot_req_amt   = 0.0 ;
  long l_grpid = 0 ;
  int i_returncode = 0;
  char c_mtch_acnt[11];
  char c_xchng_code[4];
  char c_remarks[256];

  EXEC SQL
         /* SELECT to_char(exg_nxt_trd_dt,'DD-Mon-YYYY')  Commented in Ver 3.5 */ 
         SELECT to_char( GREATEST(exg_nxt_trd_dt,exg_tmp_trd_dt), 'DD-Mon-YYYY' ) /* Added in ver 3.5 */
         INTO   :c_trade_dt
         FROM   exg_xchng_mstr
         WHERE  exg_xchng_cd = :st_ordbk.c_xchng_cd
         AND    exg_mkt_typ = 'D';

  if ( SQLCODE  !=  0 )
  {
    fn_errlog ( c_ServiceName, "S31095", SQLMSG, c_err_msg );
    return -1;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName,"------ Transcation Started for FFL_FO_FLR_LMTUPD_LOG Insert  ------- ");
  }

  if(c_actn_flg == 'P')
  {
    strcpy ( c_remarks ,"ON ORDER PLACEMENT");
  }
  else if(c_actn_flg == 'M')
  {
    strcpy ( c_remarks ,"ON ORDER MODIFICATION ");
  }
  else if(c_actn_flg == 'C')
  {
    strcpy ( c_remarks ,"ON ORDER CANCELLATION ");
  }


  c_rqst_type = 'B';
  l_grpid = 1;

  strcpy( c_mtch_acnt,st_ordbk.c_cln_mtch_accnt);
  strcpy( c_xchng_code,st_ordbk.c_xchng_cd);

  rtrim(c_trade_dt);

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    fn_errlog ( c_ServiceName, "L31715", LIBMSG, c_err_msg);
    return -1;
  }
  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName,"------ After Begin ------- ");
    fn_userlog ( c_ServiceName,"c_mtch_acnt |%s|",c_mtch_acnt);
    fn_userlog ( c_ServiceName,"c_trade_dt  |%s|",c_trade_dt);
    fn_userlog ( c_ServiceName,"c_xchng_code|%s|",c_xchng_code);
  }

  EXEC SQL
   EXECUTE
   BEGIN
   LIMIT_CAL
   ( :c_mtch_acnt,
     :c_trade_dt,
     :c_rqst_type,
     :l_grpid,
     :c_xchng_code,
     :d_available_amt,
     :i_returncode
   );
   END;
   END-EXEC;

   if ( i_returncode == -1 )
   {
     fn_errlog ( c_ServiceName, "S31100", SQLMSG, c_err_msg );
		 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     return -1;
   }

   if(DEBUG_MSG_LVL_3)
   {
    fn_userlog ( c_ServiceName,"------ After Limit cal :%lf:------- ",d_available_amt);
    fn_userlog ( c_ServiceName," d_available_amt Is :%lf:",d_available_amt);
   }

   if ( d_available_amt < 0 )
   {
      d_tot_req_amt =   d_deficit ;  /*** In case of negative limits , the returned deficit is only total required amnt ***/
   }
   else
   {
      d_tot_req_amt =  (d_available_amt/100)  + d_deficit ;
   }

   d_available_amt = (double) (d_available_amt/100) ;

   /*** Note :All values stored in Rs. ***/

   EXEC SQL
    INSERT INTO FFL_FO_FLR_LMTUPD_LOG
    ( FFL_XCHNG_CD,
      FFL_TRD_DT,
      FFL_CLM_MTCH_ACCNT,
      FFL_ORDR_RFRNC ,
      FFL_TRN_DT,
      FFL_AVAILBLE_AMT ,
      FFL_DEFICIT_AMT ,
      FFL_TOT_REQ_AMT ,
      FFL_REMARKS,
 			/* Ver 3.5 starts here*/
      FFL_PRDCT_TYP,
      FFL_INDSTK,
      FFL_UNDRLYNG,
      FFL_EXPRY_DT,
      FFL_EXER_TYP,
      FFL_OPT_TYP,
      FFL_STRK_PRC,
      FFL_ORDR_FLW,
      FFL_LMT_MRKT_SL_FLG,
      FFL_ORDR_TOT_QTY,
      FFL_LMT_RT,
      FFL_STP_LSS_TGR,
      FFL_ORDR_TYPE  /* Ver 3.5 ends here*/

    )
    VALUES
    ( :st_ordbk.c_xchng_cd,
      :c_trade_dt,
      :st_ordbk.c_cln_mtch_accnt,
      :st_ordbk.c_ordr_rfrnc,
      SYSDATE,
      :d_available_amt ,
      :d_deficit ,
      :d_tot_req_amt ,
      :c_remarks,
      /* Ver 3.5 starts here*/
      :st_ordbk.c_prd_typ,
      :st_ordbk.c_ctgry_indstk,
      :st_ordbk.c_undrlyng,
      :st_ordbk.c_expry_dt,
      :st_ordbk.c_exrc_typ,
      :st_ordbk.c_opt_typ,
      :st_ordbk.l_strike_prc,
      :st_ordbk.c_ordr_flw,
      :st_ordbk.c_slm_flg,
      :st_ordbk.l_ord_tot_qty,
      :st_ordbk.l_ord_lmt_rt,
      :st_ordbk.l_stp_lss_tgr,
      :st_ordbk.c_ord_typ  /* Ver 3.5 ends here*/
    );


    if ( SQLCODE  !=  0 )
    {
      fn_errlog ( c_ServiceName, "L31720", SQLMSG, c_err_msg);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }


    if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    {
      fn_errlog ( c_ServiceName, "L31725", TPMSG, c_err_msg);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog ( c_ServiceName,"------ Transcation Started for FFL_FO_FLR_LMTUPD_LOG Insert  ------- ");
    }

    return 0 ;
}
/** Ver 3.2 Ends   **/

/** Ver 3.3 Starts Here **/
int fn_chk_spnvtcord(char *c_ServiceName,
                  struct st_xchngbook *ptr_st_xchngbook,
                  struct st_contract  *ptr_st_cntrct_qt,
                  struct st_err_msg   *ptr_st_err_msg )
{

 int i_exists=0;

 rtrim(ptr_st_cntrct_qt->c_expry_dt);

 if( ptr_st_xchngbook->c_slm_flg != LIMIT )
 {
   fn_errlog( c_ServiceName, "B28519",DEFMSG,ptr_st_err_msg->c_err_msg);
   return FAILURE;
 }

 EXEC SQL
 SELECT 1
   INTO :i_exists
   FROM DUAL
  WHERE ( ( to_date(:ptr_st_xchngbook->c_valid_dt,'dd-Mon-YYYY') < to_date(:ptr_st_xchngbook->c_mod_trd_dt,'dd-Mon-YYYY')) OR
          ( to_date(:ptr_st_xchngbook->c_valid_dt,'dd-Mon-YYYY') > to_date(:ptr_st_cntrct_qt->c_expry_dt,'dd-Mon-YYYY')));
 if( i_exists == 1 )
 {
   fn_errlog( c_ServiceName, "B91153",DEFMSG,ptr_st_err_msg->c_err_msg);
   return FAILURE;
 }
 
 if(ptr_st_xchngbook->l_stp_lss_tgr != 0)
 {
   fn_errlog( c_ServiceName, "B91154",DEFMSG,ptr_st_err_msg->c_err_msg);
   return FAILURE;
 }

return SUCCESS;
}
/** Ver 3.3 Ends Here **/


/*** Ver 4.7 Start ***/

int fn_span_stop_vtc(char *c_ServiceName,
                     char *c_order_refno,
                     struct st_orderbook *ptr_st_ordbook,
                     struct st_err_msg *ptr_st_err_msg )
{
     fn_userlog(c_ServiceName,"In fn_span_stop_vtc Function .....");
     fn_userlog(c_ServiceName,"c_xchng_cd :%s:",ptr_st_ordbook->c_xchng_cd);
     fn_userlog(c_ServiceName,"c_ordr_rfrnc:%s:",ptr_st_ordbook->c_ordr_rfrnc);
     fn_userlog(c_ServiceName,"c_pipe_id:%s:",ptr_st_ordbook->c_pipe_id);
     fn_userlog(c_ServiceName,"c_mod_trd_dt:%s:",ptr_st_ordbook->c_trd_dt);
     fn_userlog(c_ServiceName,"c_valid_dt:%s",ptr_st_ordbook->c_valid_dt);
     fn_userlog(c_ServiceName,"l_dsclsd_qty:%ld:",ptr_st_ordbook->l_dsclsd_qty);
     fn_userlog(c_ServiceName,"l_ord_tot_qty:%ld:",ptr_st_ordbook->l_ord_tot_qty);
     fn_userlog(c_ServiceName,"l_ord_lmt_rt:%ld:",ptr_st_ordbook->l_ord_lmt_rt);
     fn_userlog(c_ServiceName,"l_stp_lss_tgr:%ld:",ptr_st_ordbook->l_stp_lss_tgr);



     EXEC SQL
     INSERT INTO FXB_FO_XCHNG_BOOK
      (
        FXB_XCHNG_CD,
        FXB_ORDR_RFRNC,
        FXB_PIPE_ID,
        FXB_MOD_TRD_DT,
        FXB_ORDR_SQNC,
        FXB_LMT_MRKT_SL_FLG,
        FXB_DSCLSD_QTY,
        FXB_ORDR_TOT_QTY,
        FXB_LMT_RT,
        FXB_STP_LSS_TGR,
        FXB_MDFCTN_CNTR,
        FXB_ORDR_VALID_DT,
        FXB_ORDR_TYPE,
        FXB_RQST_TYP,
        FXB_QUOTE,
        FXB_QT_TM,
        FXB_RQST_TM,
        FXB_PLCD_STTS,
        FXB_RMS_PRCSD_FLG,
        FXB_EX_ORDR_TYP,
        FXB_XCHNG_RMRKS,
        FXB_SPL_FLAG,
        FXB_MRKT_TYP,
        FXB_IP,
        FXB_SPN_FLG
      )
      VALUES
      ( :ptr_st_ordbook->c_xchng_cd,
        :c_order_refno,
        :ptr_st_ordbook->c_pipe_id,
        :ptr_st_ordbook->c_trd_dt,
         0,
         null,
        :ptr_st_ordbook->l_dsclsd_qty,
        :ptr_st_ordbook->l_ord_tot_qty,
        :ptr_st_ordbook->l_ord_lmt_rt,
        :ptr_st_ordbook->l_stp_lss_tgr,
         0,
        :ptr_st_ordbook->c_valid_dt,
        :ptr_st_ordbook->c_ord_typ,
        'N',
         0,
         SYSDATE,
         SYSDATE,
        'J',
        'P',
        'O',
        'VTC order stopped and closed by User/CNT',
        'C',
        'N',
        '',
        'S' 
      );

    if ( SQLCODE != 0 )
    {
     fn_userlog(c_ServiceName,"Error while Inserting in FXB table.");
     fn_errlog( c_ServiceName, "S31105",DEFMSG,ptr_st_err_msg->c_err_msg);
     return -1;
    }

    EXEC SQL
    UPDATE FOD_FO_ORDR_DTLS 
		SET   FOD_FC_FLAG = 'Y' 
    WHERE FOD_ORDR_RFRNC = :c_order_refno;

    if ( SQLCODE != 0 )
    {
     fn_userlog(c_ServiceName,"Error while updating FOD table.");
     fn_errlog( c_ServiceName, "S31110",DEFMSG,ptr_st_err_msg->c_err_msg);
     return -1;
    }
   fn_userlog(c_ServiceName,"fn_span_stop_vtc Function end .....");

 return 0 ;
}
/*** Ver 4.7 Ends ***/

/*** Ver 5.0 Starts ***/
int fn_get_quote ( char *c_ServiceName,
                   struct st_contract *ptr_st_contract,
                   struct st_cntrct_qt *ptr_st_cntrct_qt,
                   char *c_setlmnt_flg,
                   char *c_dlvry_pos_allwd,
									 char *c_buy_allwd,		/*** ver 6.5 ***/
									 char *c_sell_allwd,	/*** ver 6.5 ***/
                   char *c_mrkt_ordr_flg,  /*** ver 6.9 ***/
                   char *c_err_msg
                 )
{
	
  char  c_errmsg[256];

  varchar c_expiry_dt [ LEN_DATE ];
  varchar c_exp_dt [ LEN_DATE ];
  varchar c_lst_trd_dt [ LEN_DATE ];
  short i_trd_tm;
	char c_setlmnt_flg_new = '\0';
  char c_dlvry_pos_allwd_new = '\0';
	char c_buy_allwd_new = '\0'; /*** ver 6.5 ***/
	char c_sell_allwd_new = '\0';	/*** ver 6.5 ***/
  char c_mrkt_ordr_flg_new = '\0'; /*** ver 6.9 ***/

  rtrim ( ptr_st_contract->c_expry_dt );
  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_contract->c_expry_dt );
  SETLEN ( c_expiry_dt );

  EXEC SQL
     SELECT FTQ_XCHNG_CD,
                FTQ_PRDCT_TYP,
                FTQ_UNDRLYNG,
                TO_CHAR ( FTQ_EXPRY_DT, 'dd-Mon-yyyy' ),
                FTQ_EXER_TYP,
                FTQ_OPT_TYP,
                NVL(FTQ_STRK_PRC, 0 ),
                FTQ_INDSTK,
                NVL( FTQ_LST_TRD_PRC, 0 ),
                TO_CHAR ( FTQ_LST_TRD_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
                NVL( FTQ_LST_TRD_QTY, 0 ),
                NVL( FTQ_BST1_BID_PRC, 0 ),
                NVL( FTQ_BST1_BID_QTY, 0 ),
                NVL( FTQ_BST1_OFFR_PRC, 0 ),
                NVL( FTQ_BST1_OFFR_QTY, 0 ),
                NVL( FTQ_CLS_PRC, 0 ),
                NVL( FTQ_OPN_PRC, 0 ),
                NVL( FTQ_HGH_PRC, 0 ),
                NVL( FTQ_LOW_PRC, 0 ),
                NVL( FTQ_PRVS_CLS_PRC, 0 ),
                NVL( FTQ_CHNG_PRVS_CLS, 0 ),
                NVL( FTQ_INDCTR,'+'),
                NVL( FTQ_HGH_PRC_RNG, 0 ),
                NVL( FTQ_LOW_PRC_RNG, 0 ),
                NVL( FTQ_AVRG_TRD_PRC, 0 ),
                NVL( FTQ_TOT_QTY_TRDD, 0 ),
                NVL( FTQ_TOT_VAL_TRDD, 0 ),
                NVL( FTQ_BASE_PRC, 0 ),
                NVL( FTQ_CRNT_OI, 0 ),
                NVL( FTQ_CHNG_OI, 0 ),
                 NVL( FTQ_OI_HIGH, 0 ),
                NVL( FTQ_OI_LOW, 0 ),
                NVL( FTQ_OI_INDCTR, '+' ),
                '*',
                NVL( FTQ_MIN_LOT_QTY,'0'),
								NVL( FTQ_SETLMNT_FLG,'C'),
								NVL( FTQ_DLVRY_POS_ALLWD,'Y'),
								NVL( FTQ_BUY_ALLWD ,'Y'),		/*** ver 6.5 ***/
								NVL( FTQ_SELL_ALLWD ,'Y'),  /*** ver 6.5 ***/
                NVL(FTQ_MRKT_ORDR_FLG,'Y') /*** ver 6.9 ***/
      INTO      :ptr_st_cntrct_qt->c_xchng_cd,
                :ptr_st_cntrct_qt->c_prd_typ,
                :ptr_st_cntrct_qt->c_undrlyng,
                :c_exp_dt,
                :ptr_st_cntrct_qt->c_exrc_typ,
                :ptr_st_cntrct_qt->c_opt_typ,
                :ptr_st_cntrct_qt->l_strike_prc,
                :ptr_st_cntrct_qt->c_ctgry_indstk,
                :ptr_st_cntrct_qt->l_lst_trdd_prc,
                :c_lst_trd_dt:i_trd_tm,
                :ptr_st_cntrct_qt->l_lst_trdd_qty,
                :ptr_st_cntrct_qt->l_bst_bid_prc,
                :ptr_st_cntrct_qt->l_bst_bid_qty,
                :ptr_st_cntrct_qt->l_bst_offr_prc,
                :ptr_st_cntrct_qt->l_bst_offr_qty,
                :ptr_st_cntrct_qt->l_close_prc,
                :ptr_st_cntrct_qt->l_open_prc,
                :ptr_st_cntrct_qt->l_high_prc,
                :ptr_st_cntrct_qt->l_low_prc,
                :ptr_st_cntrct_qt->l_prev_close_prc,
                :ptr_st_cntrct_qt->l_chng_prvs_close_prc,
                :ptr_st_cntrct_qt->c_indctr,
                :ptr_st_cntrct_qt->l_high_prc_rng,
                :ptr_st_cntrct_qt->l_low_prc_rng,
                :ptr_st_cntrct_qt->l_avg_trdd_prc,
                :ptr_st_cntrct_qt->l_tot_qty_trdd,
                :ptr_st_cntrct_qt->d_tot_val_trdd,  
                :ptr_st_cntrct_qt->l_base_prc,
                :ptr_st_cntrct_qt->d_crnt_oi,
                :ptr_st_cntrct_qt->d_chng_oi,
                :ptr_st_cntrct_qt->d_oi_high,
                :ptr_st_cntrct_qt->d_oi_low,
                :ptr_st_cntrct_qt->c_oi_indctr,
                :ptr_st_cntrct_qt->c_rqst_typ,
                :ptr_st_cntrct_qt->l_min_lot_qty,
								:c_setlmnt_flg_new,
							  :c_dlvry_pos_allwd_new,
								:c_buy_allwd_new,		/*** ver 6.5 ***/
								:c_sell_allwd_new,   /*** ver 6.5 ***/
                :c_mrkt_ordr_flg_new /*** ver 6.9 ***/
     FROM       FTQ_FO_TRD_QT
     WHERE      FTQ_XCHNG_CD  = :ptr_st_contract->c_xchng_cd
     AND        FTQ_PRDCT_TYP = decode(:ptr_st_contract->c_prd_typ,'P','F','U','F','I','O',:ptr_st_contract->c_prd_typ)
       AND      FTQ_UNDRLYNG  = :ptr_st_contract->c_undrlyng
       AND      FTQ_EXPRY_DT  = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
       AND      FTQ_EXER_TYP  = :ptr_st_contract->c_exrc_typ
       AND      FTQ_OPT_TYP   = :ptr_st_contract->c_opt_typ
       AND      FTQ_STRK_PRC  = :ptr_st_contract->l_strike_prc;

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      return -1;
    }
    else if ( SQLCODE == NO_DATA_FOUND )
    {
      return -2;
    }

		*c_setlmnt_flg = c_setlmnt_flg_new;
  	*c_dlvry_pos_allwd = c_dlvry_pos_allwd_new;

		/*** ver 6.5 start ***/
		*c_buy_allwd = c_buy_allwd_new;
		*c_sell_allwd  = c_sell_allwd_new;
		/*** ver 6.5 End ***/ 
  
    *c_mrkt_ordr_flg = c_mrkt_ordr_flg_new;  /*** ver 6.9 ***/
 
	  SETNULL ( c_exp_dt );
    SETNULL ( c_lst_trd_dt );

    strcpy ( ptr_st_cntrct_qt->c_expry_dt , ( char * ) c_exp_dt.arr );
    strcpy ( ptr_st_cntrct_qt->c_lst_trdd_time , ( char * ) c_lst_trd_dt.arr );

    return 0;
}


/*** Ver 5.0 Ends ***/

/*** Ver 5.2 Started ***/

int fn_spnref_to_omd_ors ( struct st_xchngbook *st_xchngbook,
                       struct st_xchngbook *ptr_st_xchngbook,
											 char *c_lst_act_ref,
                       char *c_ServiceName,
                       char *c_err_msg
                      )
{
	short i_slm_flg;
  short i_dsclsd_qty;
  short i_ord_lmt_rt;
  short i_stp_lss_tgr;
  short i_valid_dt;
  short i_ord_typ;
  short i_sprd_ord_ind;
  short i_quote;
  short i_qt_tm;
  short i_frwrd_tm;
  short i_rms_prcsd_flg;
  short i_ors_msg_typ;
  short i_ack_tm;
  short i_xchng_rmrks;
  short i_xchng_can_qty;
  short i_spl_flg;
  short i_req_typ;
  short i_ord_tot_qty;
  short i_rqst_tm;
  short i_ex_ordr_typ;
  short i_spn_flg;

	char c_lst_act_ref_tmp[22] = "\0"; 

  if(DEBUG_MSG_LVL_5) 
  {
    fn_userlog(c_ServiceName,"SPAN  - Inside  Function fn_ref_to_omd_ors.");
    fn_userlog(c_ServiceName,"SPAN  - Inside  Function operation Type Is :%c: .",st_xchngbook->c_oprn_typ);
  }

  if(DEBUG_MSG_LVL_0) 
  {
    fn_userlog(c_ServiceName,"fn_spnref_to_omd : operation Type Is :%c: ", st_xchngbook->c_oprn_typ);
  }

	  switch(st_xchngbook->c_oprn_typ)
  {
    case  WITH_ORS_MSG_TYP  :

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Inside WITH_ORS_MSG_TYP");
      fn_userlog(c_ServiceName,"st_xchngbook->c_ordr_rfrnc Is :%s:",st_xchngbook->c_ordr_rfrnc);
      fn_userlog(c_ServiceName,"st_xchngbook->l_mdfctn_cntr Is :%ld:",st_xchngbook->l_mdfctn_cntr);
    }
    EXEC SQL
        SELECT  FXB_XCHNG_CD,
                FXB_PIPE_ID,
                TO_CHAR ( FXB_MOD_TRD_DT, 'dd-Mon-yyyy' ),
                FXB_ORDR_SQNC,
                NVL(FXB_LMT_MRKT_SL_FLG,'N'),
                NVL(FXB_DSCLSD_QTY,0),
                FXB_ORDR_TOT_QTY,
                FXB_LMT_RT,
                NVL(FXB_STP_LSS_TGR,0),
                TO_CHAR( FXB_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
                NVL(FXB_ORDR_TYPE,'*'),
                NVL(FXB_SPRD_ORD_IND,'*'),
                FXB_RQST_TYP,
                FXB_QUOTE,
                TO_CHAR ( FXB_QT_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
                TO_CHAR ( FXB_RQST_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
                TO_CHAR ( FXB_FRWD_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
                FXB_PLCD_STTS,
                FXB_RMS_PRCSD_FLG,
                TO_CHAR ( FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
                FXB_XCHNG_RMRKS,
                FXB_EX_ORDR_TYP,
                FXB_XCHNG_CNCLD_QTY,
                NVL(FXB_SPL_FLAG,'*'),
                FXB_SPN_FLG,
                NVL(FXB_PRCIMPV_FLG,'N'), 
                NVL(FXB_INIT_SLTP_RT,0), 
                NVL(FXB_INIT_LMT_RT,0),
								NVL(FXB_LST_ACT_REF,'0') /*** '*' changed to '0' in ver 5.5 ***/
        INTO    :ptr_st_xchngbook->c_xchng_cd,
                :ptr_st_xchngbook->c_pipe_id,
                :ptr_st_xchngbook->c_mod_trd_dt,
                :ptr_st_xchngbook->l_ord_seq,
                :ptr_st_xchngbook->c_slm_flg:i_slm_flg,
                :ptr_st_xchngbook->l_dsclsd_qty:i_dsclsd_qty,
                :ptr_st_xchngbook->l_ord_tot_qty:i_ord_tot_qty,
                :ptr_st_xchngbook->l_ord_lmt_rt:i_ord_lmt_rt,
                :ptr_st_xchngbook->l_stp_lss_tgr:i_stp_lss_tgr,
                :ptr_st_xchngbook->c_valid_dt:i_valid_dt,
                :ptr_st_xchngbook->c_ord_typ:i_ord_typ,
                :ptr_st_xchngbook->c_sprd_ord_ind:i_sprd_ord_ind,
                :ptr_st_xchngbook->c_req_typ:i_req_typ,
                :ptr_st_xchngbook->l_quote:i_quote,
                :ptr_st_xchngbook->c_qt_tm:i_qt_tm,
                :ptr_st_xchngbook->c_rqst_tm:i_rqst_tm,
                :ptr_st_xchngbook->c_frwrd_tm:i_frwrd_tm,
                :ptr_st_xchngbook->c_plcd_stts,
                :ptr_st_xchngbook->c_rms_prcsd_flg:i_rms_prcsd_flg,
                :ptr_st_xchngbook->c_ack_tm:i_ack_tm,
                :ptr_st_xchngbook->c_xchng_rmrks:i_xchng_rmrks,
                :ptr_st_xchngbook->c_ex_ordr_typ:i_ex_ordr_typ,
                :ptr_st_xchngbook->l_xchng_can_qty:i_xchng_can_qty,
                :ptr_st_xchngbook->c_spl_flg:i_spl_flg,
                :ptr_st_xchngbook->c_spn_flg:i_spn_flg,
                :ptr_st_xchngbook->c_prcimpv_flg,
                :ptr_st_xchngbook->l_init_sltp_rt,
                :ptr_st_xchngbook->l_init_lmt_rt,
								:c_lst_act_ref_tmp						
        FROM    FXB_FO_XCHNG_BOOK
        WHERE   FXB_ORDR_RFRNC = :st_xchngbook->c_ordr_rfrnc
        AND     FXB_MDFCTN_CNTR = :st_xchngbook->l_mdfctn_cntr;

        break;

    case  WITHOUT_ORS_MSG_TYP :

    if(DEBUG_MSG_LVL_3) /*** Ver 4.2 ***/
    {
      fn_userlog(c_ServiceName,"Inside WITHOUT_ORS_MSG_TYP");
    }

    EXEC SQL
        SELECT  FXB_XCHNG_CD,
                FXB_PIPE_ID,
                TO_CHAR ( FXB_MOD_TRD_DT, 'dd-Mon-yyyy' ),
                FXB_ORDR_SQNC,
                FXB_LMT_MRKT_SL_FLG,
                FXB_DSCLSD_QTY,
                FXB_ORDR_TOT_QTY,
                FXB_LMT_RT,
                FXB_STP_LSS_TGR,
                TO_CHAR( FXB_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
                FXB_ORDR_TYPE,
                FXB_SPRD_ORD_IND,
                FXB_RQST_TYP,
                FXB_QUOTE,
                TO_CHAR ( FXB_QT_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
                TO_CHAR ( FXB_RQST_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
                TO_CHAR ( FXB_FRWD_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
                FXB_PLCD_STTS,
                FXB_RMS_PRCSD_FLG,
                FXB_ORS_MSG_TYP,
                TO_CHAR ( FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
                FXB_XCHNG_RMRKS,
                FXB_EX_ORDR_TYP,
                FXB_XCHNG_CNCLD_QTY,
                FXB_SPL_FLAG,
                FXB_SPN_FLG,
                NVL(FXB_PRCIMPV_FLG,'N'),      
                FXB_INIT_SLTP_RT,             
                FXB_INIT_LMT_RT              
        INTO    :ptr_st_xchngbook->c_xchng_cd,
                :ptr_st_xchngbook->c_pipe_id,
                :ptr_st_xchngbook->c_mod_trd_dt,
                :ptr_st_xchngbook->l_ord_seq,
                :ptr_st_xchngbook->c_slm_flg:i_slm_flg,
                :ptr_st_xchngbook->l_dsclsd_qty:i_dsclsd_qty,
                :ptr_st_xchngbook->l_ord_tot_qty:i_ord_tot_qty,
                :ptr_st_xchngbook->l_ord_lmt_rt:i_ord_lmt_rt,
                :ptr_st_xchngbook->l_stp_lss_tgr:i_stp_lss_tgr,
                :ptr_st_xchngbook->c_valid_dt:i_valid_dt,
                :ptr_st_xchngbook->c_ord_typ:i_ord_typ,
                :ptr_st_xchngbook->c_sprd_ord_ind:i_sprd_ord_ind,
                :ptr_st_xchngbook->c_req_typ:i_req_typ,
                :ptr_st_xchngbook->l_quote:i_quote,
                :ptr_st_xchngbook->c_qt_tm:i_qt_tm,
                :ptr_st_xchngbook->c_rqst_tm:i_rqst_tm,
                :ptr_st_xchngbook->c_frwrd_tm:i_frwrd_tm,
                :ptr_st_xchngbook->c_plcd_stts,
                :ptr_st_xchngbook->c_rms_prcsd_flg:i_rms_prcsd_flg,
                :ptr_st_xchngbook->l_ors_msg_typ:i_ors_msg_typ,
                :ptr_st_xchngbook->c_ack_tm:i_ack_tm,
                :ptr_st_xchngbook->c_xchng_rmrks:i_xchng_rmrks,
                :ptr_st_xchngbook->c_ex_ordr_typ:i_ex_ordr_typ,
                :ptr_st_xchngbook->l_xchng_can_qty:i_xchng_can_qty,
                :ptr_st_xchngbook->c_spl_flg:i_spl_flg,
                :ptr_st_xchngbook->c_spn_flg,
                :ptr_st_xchngbook->c_prcimpv_flg,   /*** ver 4.5 **/
                :ptr_st_xchngbook->l_init_sltp_rt,  /*** ver 4.5 **/
                :ptr_st_xchngbook->l_init_lmt_rt    /*** ver 4.5 **/
        FROM    FXB_FO_XCHNG_BOOK
        WHERE   FXB_ORDR_RFRNC  = :st_xchngbook->c_ordr_rfrnc
        AND     FXB_MDFCTN_CNTR = :st_xchngbook->l_mdfctn_cntr;

      break;

    default :

      strcpy( c_err_msg, "fn_ref_to_omd Invalid Operation Type" );
      fn_userlog ( c_ServiceName, "ERROR :%s:", c_err_msg );
      return -1;
      break;
  }

  if (  SQLCODE !=  0 && SQLCODE  !=  NO_DATA_FOUND )
  {
    fn_errlog( c_ServiceName, "L31730", SQLMSG, c_err_msg );
    return  -1;
  }

  if ( SQLCODE  ==  NO_DATA_FOUND &&  ptr_st_xchngbook->c_oprn_typ  ==  WITHOUT_ORS_MSG_TYP )
  {
    EXEC SQL
      SELECT  FXB_XCHNG_CD,
              FXB_PIPE_ID,
              TO_CHAR ( FXB_MOD_TRD_DT, 'dd-Mon-yyyy' ),
              FXB_ORDR_SQNC,
              FXB_LMT_MRKT_SL_FLG,
              FXB_DSCLSD_QTY,
              FXB_ORDR_TOT_QTY,
              FXB_LMT_RT,
              FXB_STP_LSS_TGR,
              TO_CHAR( FXB_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
              FXB_ORDR_TYPE,
              FXB_SPRD_ORD_IND,
              FXB_RQST_TYP,
              FXB_QUOTE,
              TO_CHAR ( FXB_QT_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              TO_CHAR ( FXB_RQST_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              TO_CHAR ( FXB_FRWD_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              FXB_PLCD_STTS,
              FXB_RMS_PRCSD_FLG,
              FXB_ORS_MSG_TYP,
              TO_CHAR ( FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
              FXB_XCHNG_RMRKS,
              FXB_EX_ORDR_TYP,
              FXB_XCHNG_CNCLD_QTY,
              FXB_SPL_FLAG,
              FXB_SPN_FLG
      INTO    :ptr_st_xchngbook->c_xchng_cd,
              :ptr_st_xchngbook->c_pipe_id,
              :ptr_st_xchngbook->c_mod_trd_dt,
              :ptr_st_xchngbook->l_ord_seq,
              :ptr_st_xchngbook->c_slm_flg:i_slm_flg,
              :ptr_st_xchngbook->l_dsclsd_qty:i_dsclsd_qty,
              :ptr_st_xchngbook->l_ord_tot_qty:i_ord_tot_qty,
              :ptr_st_xchngbook->l_ord_lmt_rt:i_ord_lmt_rt,
              :ptr_st_xchngbook->l_stp_lss_tgr:i_stp_lss_tgr,
              :ptr_st_xchngbook->c_valid_dt:i_valid_dt,
              :ptr_st_xchngbook->c_ord_typ:i_ord_typ,
              :ptr_st_xchngbook->c_sprd_ord_ind:i_sprd_ord_ind,
              :ptr_st_xchngbook->c_req_typ:i_req_typ,
              :ptr_st_xchngbook->l_quote:i_quote,
              :ptr_st_xchngbook->c_qt_tm:i_qt_tm,
              :ptr_st_xchngbook->c_rqst_tm:i_rqst_tm,
              :ptr_st_xchngbook->c_frwrd_tm:i_frwrd_tm,
              :ptr_st_xchngbook->c_plcd_stts,
              :ptr_st_xchngbook->c_rms_prcsd_flg:i_rms_prcsd_flg,
              :ptr_st_xchngbook->l_ors_msg_typ:i_ors_msg_typ,
              :ptr_st_xchngbook->c_ack_tm:i_ack_tm,
              :ptr_st_xchngbook->c_xchng_rmrks:i_xchng_rmrks,
              :ptr_st_xchngbook->c_ex_ordr_typ:i_ex_ordr_typ,
              :ptr_st_xchngbook->l_xchng_can_qty:i_xchng_can_qty,
              :ptr_st_xchngbook->c_spl_flg:i_spl_flg,
              :ptr_st_xchngbook->c_spn_flg

      FROM    FXB_FO_XCHNG_BOOK_HSTRY
      WHERE   FXB_ORDR_RFRNC  = :ptr_st_xchngbook->c_ordr_rfrnc
      AND     FXB_MDFCTN_CNTR = :ptr_st_xchngbook->l_mdfctn_cntr;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "L31735", SQLMSG, c_err_msg );
        return -1;
      }
  }
  else if ( SQLCODE ==  NO_DATA_FOUND )
  {
    fn_errlog( c_ServiceName, "L31740", SQLMSG, c_err_msg );
    return -1;
  }

  rtrim(ptr_st_xchngbook->c_xchng_rmrks);
	rtrim(c_lst_act_ref_tmp);

	strcpy(c_lst_act_ref,c_lst_act_ref_tmp);
	fn_userlog( c_ServiceName ,"c_lst_act_ref-2 :%s:",c_lst_act_ref);	/** test **/

  return 0;
}

int fn_spnupd_ordrbook_ors  ( char  *c_ServiceName,
                          		struct st_orderbook *ptr_st_ordbook,
															char *c_lst_act_ref,
                          		struct st_err_msg *ptr_st_err_msg
                        		)
{
	char c_err_msg[256];
  char c_source_flg='\0';           
	char c_ucc_cd[13] = "\0";  /*** Added in VER 8.0 ***/

  int i_trnsctn;
  c_source_flg  = ptr_st_ordbook->c_bnk_accnt_nmbr[0][0];     

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"fn_spnupd_ordrbook : Order Ref Is :%s: Operation Type Is :%c:",ptr_st_ordbook->c_ordr_rfrnc,ptr_st_ordbook->c_oprn_typ);
    fn_userlog(c_ServiceName,"SPL FLG IS :%c:",ptr_st_ordbook->c_spl_flg);
    fn_userlog(c_ServiceName,"After getting source flag.....:%c:",c_source_flg);       
		fn_userlog(c_ServiceName,"c_lst_act_ref -2 :%s:",c_lst_act_ref);	/*** Test ***/
  }

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    strcpy( ptr_st_err_msg->c_err_msg, c_err_msg );
    return -1;
  }

  switch(ptr_st_ordbook->c_oprn_typ)
  {
    case  INSERT_ON_ORDER_PLACEMENT :

		/*** Added in VER 8.0 : Real time margin reporting ( Fetching UCC code ) ***/

    MEMSET(c_ucc_cd);

    EXEC SQL
    SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
    INTO  :c_ucc_cd
    FROM  CLM_CLNT_MSTR
    WHERE CLM_MTCH_ACCNT = :ptr_st_ordbook->c_cln_mtch_accnt;

    if ( SQLCODE != 0 )
    {
      fn_userlog(c_ServiceName,"fn_spnupd_ordrbook_ors : Error while fetching UCC code for :%s:", ptr_st_ordbook->c_cln_mtch_accnt);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName, "S39325",SQLMSG,c_err_msg);
      return -1;
    }

    rtrim(c_ucc_cd);

    if(DEBUG_MSG_LVL_3)
      fn_userlog(c_ServiceName,"VER 8.0 -- fn_spnupd_ordrbook_ors : MAtch ID :%s: have ucc code :%s:", ptr_st_ordbook->c_cln_mtch_accnt, c_ucc_cd);

    /*** VER 8.0 ends here ***/

    EXEC SQL
      INSERT INTO FOD_FO_ORDR_DTLS
      (
        FOD_CLM_MTCH_ACCNT,
        FOD_CLNT_CTGRY,
        FOD_ORDR_RFRNC,
        FOD_PIPE_ID,
        FOD_XCHNG_CD,
        FOD_PRDCT_TYP,
        FOD_UNDRLYNG,
        FOD_EXPRY_DT,
        FOD_EXER_TYP,
        FOD_OPT_TYP,
        FOD_STRK_PRC,
        FOD_ORDR_FLW,
        FOD_LMT_MRKT_SL_FLG,
        FOD_DSCLSD_QTY,
        FOD_ORDR_TOT_QTY,
        FOD_LMT_RT,
        FOD_STP_LSS_TGR,
        FOD_ORDR_TYPE,
        FOD_ORDR_VALID_DT,
        FOD_TRD_DT,
        FOD_ORDR_STTS,
        FOD_SPRD_ORDR_REF,
        FOD_MDFCTN_CNTR,
        FOD_SETTLOR,
        FOD_SPL_FLAG,
        FOD_INDSTK,
        FOD_PRO_CLI_IND,
        FOD_CHANNEL,
        FOD_BP_ID,
        FOD_CTCL_ID,
        FOD_USR_ID,
        FOD_MRKT_TYP,
        FOD_CSE_ID,
        FOD_SPN_FLG,
        FOD_SOURCE_FLG,          
        FOD_SLTP_ORDR_RFRNC,    
        FOD_EOS_FLG,           
        FOD_PRCIMPV_FLG,      
        FOD_TRAIL_AMT,       
        FOD_LMT_OFFSET,     
        FOD_PAN_NO,
				FOD_UCC_CD			/*** Added in VER 8.0 ***/         
      )
      VALUES
      (
        :ptr_st_ordbook->c_cln_mtch_accnt,
        :ptr_st_ordbook->l_clnt_ctgry,
        :ptr_st_ordbook->c_ordr_rfrnc,
        :ptr_st_ordbook->c_pipe_id,
        :ptr_st_ordbook->c_xchng_cd,
        :ptr_st_ordbook->c_prd_typ,
        :ptr_st_ordbook->c_undrlyng,
        to_date( :ptr_st_ordbook->c_expry_dt, 'dd-mon-yyyy' ),
        :ptr_st_ordbook->c_exrc_typ,
        :ptr_st_ordbook->c_opt_typ,
        :ptr_st_ordbook->l_strike_prc,
        :ptr_st_ordbook->c_ordr_flw,
        :ptr_st_ordbook->c_slm_flg,
        :ptr_st_ordbook->l_dsclsd_qty,
        :ptr_st_ordbook->l_ord_tot_qty,
        :ptr_st_ordbook->l_ord_lmt_rt,
        :ptr_st_ordbook->l_stp_lss_tgr,
        :ptr_st_ordbook->c_ord_typ,
        to_date( :ptr_st_ordbook->c_valid_dt,'dd-mon-yyyy' ),
        to_date( :ptr_st_ordbook->c_trd_dt,'dd-mon-yyyy' ),
        :ptr_st_ordbook->c_ordr_stts,
        :ptr_st_ordbook->c_sprd_ord_rfrnc,
        :ptr_st_ordbook->l_mdfctn_cntr,
        :ptr_st_ordbook->c_settlor,
        :ptr_st_ordbook->c_spl_flg,
        :ptr_st_ordbook->c_ctgry_indstk,
        :ptr_st_ordbook->c_pro_cli_ind,
        :ptr_st_ordbook->c_channel,
        :ptr_st_ordbook->c_bp_id,
        :ptr_st_ordbook->c_ctcl_id,
        :ptr_st_ordbook->c_user_id,
        :ptr_st_ordbook->c_mrkt_typ,
        :ptr_st_ordbook->l_cse_id,
        :ptr_st_ordbook->c_spn_flg,
        :c_source_flg,                                          
        DECODE(:ptr_st_ordbook->c_ord_typ,'V',:ptr_st_ordbook->c_ordr_rfrnc,NULL), 
        :ptr_st_ordbook->c_req_typ,  
        :ptr_st_ordbook->c_prcimpv_flg,
        :ptr_st_ordbook->l_trail_amt, 
        :ptr_st_ordbook->l_lmt_offset, 
        :ptr_st_ordbook->c_pan_no,
				:c_ucc_cd				/*** Added in VER 8.0 ***/     
      );

      break;

    case  UPDATE_MOD_CNTR:

      EXEC SQL
        UPDATE  FOD_FO_ORDR_DTLS
        SET     FOD_MDFCTN_CNTR   = FOD_MDFCTN_CNTR + 1,
                FOD_EOS_FLG       = :ptr_st_ordbook->c_req_typ  /*** Ver 4.4 ***/
        WHERE   FOD_ORDR_RFRNC    = :ptr_st_ordbook->c_ordr_rfrnc;

      break;

    case  UPDATE_ORDER_MODIFICATION:

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"SPAN c_slm_flg Is :%c:",ptr_st_ordbook->c_slm_flg);
      fn_userlog(c_ServiceName,"SPAN l_dsclsd_qty Is :%ld:",ptr_st_ordbook->l_dsclsd_qty);
      fn_userlog(c_ServiceName,"SPAN c_ord_typ Is :%c:",ptr_st_ordbook->c_ord_typ);
      fn_userlog(c_ServiceName,"SPAN l_stp_lss_tgr Is :%ld:",ptr_st_ordbook->l_stp_lss_tgr);
      fn_userlog(c_ServiceName,"SPAN l_ord_tot_qty Is :%ld:",ptr_st_ordbook->l_ord_tot_qty);
      fn_userlog(c_ServiceName,"SPAN l_ord_lmt_rt Is :%ld:",ptr_st_ordbook->l_ord_lmt_rt);
      fn_userlog(c_ServiceName,"SPAN c_ordr_stts Is :%c:",ptr_st_ordbook->c_ordr_stts);
      fn_userlog(c_ServiceName,"SPAN c_ordr_stts Is :%s:",ptr_st_ordbook->c_ordr_rfrnc);
			fn_userlog(c_ServiceName,"SPAN c_lst_act_ref :%s:",c_lst_act_ref);
    }

    EXEC SQL
        UPDATE  FOD_FO_ORDR_DTLS
        SET     FOD_LMT_MRKT_SL_FLG = :ptr_st_ordbook->c_slm_flg,
                FOD_DSCLSD_QTY      = :ptr_st_ordbook->l_dsclsd_qty,
                FOD_ORDR_TYPE       = :ptr_st_ordbook->c_ord_typ,
                FOD_STP_LSS_TGR     = :ptr_st_ordbook->l_stp_lss_tgr,
                FOD_ORDR_TOT_QTY    = :ptr_st_ordbook->l_ord_tot_qty,
                FOD_LMT_RT          = :ptr_st_ordbook->l_ord_lmt_rt,
                FOD_ORDR_STTS       = :ptr_st_ordbook->c_ordr_stts,
                FOD_ORDR_VALID_DT   = to_date (:ptr_st_ordbook->c_valid_dt,'dd-mon-yyyy' ),
                FOD_TRD_DT          = to_date (:ptr_st_ordbook->c_trd_dt,'dd-mon-yyyy' ),
                FOD_LST_RQST_ACK_TM = to_date (:ptr_st_ordbook->c_ack_tm,'dd-mon-yyyy hh24:mi:ss' ),
                FOD_PRCIMPV_FLG     = :ptr_st_ordbook->c_prcimpv_flg,
								FOD_LST_ACT_REF			= :c_lst_act_ref
        WHERE   FOD_ORDR_RFRNC      = :ptr_st_ordbook->c_ordr_rfrnc;

      break;

    case UPDATE_STATUS_ACK_TM:

      EXEC SQL
        UPDATE  FOD_FO_ORDR_DTLS
        SET     FOD_ORDR_STTS = :ptr_st_ordbook->c_ordr_stts,
                FOD_ORD_ACK_TM = TO_DATE (:ptr_st_ordbook->c_prev_ack_tm,'dd-mon-yyyy hh24:mi:ss' ),
                FOD_LST_RQST_ACK_TM = TO_DATE (:ptr_st_ordbook->c_ack_tm,'dd-mon-yyyy hh24:mi:ss' ),
								FOD_LST_ACT_REF = :c_lst_act_ref
        WHERE   FOD_ORDR_RFRNC= :ptr_st_ordbook->c_ordr_rfrnc;

        break;

    case  UPDATE_XCHNG_RESP_DTLS:

      EXEC SQL
        UPDATE  FOD_FO_ORDR_DTLS
        SET     FOD_ORDR_STTS       = :ptr_st_ordbook->c_ordr_stts,
                FOD_CNCL_QTY        = :ptr_st_ordbook->l_can_qty,
                FOD_EXPRD_QTY       = :ptr_st_ordbook->l_exprd_qty,
                FOD_TRD_DT          = to_date (:ptr_st_ordbook->c_trd_dt,'dd-mon-yyyy' )
        WHERE   FOD_ORDR_RFRNC= :ptr_st_ordbook->c_ordr_rfrnc;
      break;

     case  UPDATE_XCHNG_RESP_DTLS_CA:

      EXEC SQL
        UPDATE  FOD_FO_ORDR_DTLS
        SET     FOD_ORDR_STTS       = :ptr_st_ordbook->c_ordr_stts,
                FOD_CNCL_QTY        = :ptr_st_ordbook->l_can_qty,
                FOD_EXPRD_QTY       = :ptr_st_ordbook->l_exprd_qty,
                FOD_TRD_DT          = to_date (:ptr_st_ordbook->c_trd_dt,'dd-mon-yyyy' ),
                FOD_LST_RQST_ACK_TM = to_date (:ptr_st_ordbook->c_ack_tm,'dd-mon-yyyy hh24:mi:ss' ),
								FOD_LST_ACT_REF     = :c_lst_act_ref
        WHERE   FOD_ORDR_RFRNC      = :ptr_st_ordbook->c_ordr_rfrnc;

      break;

    case  UPDATE_TRADE_CONFIRMATION:

      EXEC SQL
        UPDATE  FOD_FO_ORDR_DTLS
        SET     FOD_EXEC_QTY        = :ptr_st_ordbook->l_exctd_qty,
                FOD_EXEC_QTY_DAY    = :ptr_st_ordbook->l_exctd_qty_day,
                FOD_ORDR_STTS       = :ptr_st_ordbook->c_ordr_stts,
                FOD_LST_RQST_ACK_TM = to_date (:ptr_st_ordbook->c_ack_tm,'dd-mon-yyyy hh24:mi:ss' ),
								FOD_LST_ACT_REF     = :c_lst_act_ref
        WHERE   FOD_ORDR_RFRNC      = :ptr_st_ordbook->c_ordr_rfrnc;
      break;

    case  UPDATE_XCHNG_RESPONSE:    /*** Operation type added for offline trade ***/

      EXEC SQL
        UPDATE  FOD_FO_ORDR_DTLS
        SET     FOD_ACK_NMBR  = :ptr_st_ordbook->c_xchng_ack
        WHERE   FOD_ORDR_RFRNC= :ptr_st_ordbook->c_ordr_rfrnc;
      break;

    default:

      strcpy( c_err_msg, "Invalid Operation Type" );
      fn_userlog ( c_ServiceName, "ERROR :%s:", c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
      break;
  }

  if (  SQLCODE !=  0 )
  {
    fn_errlog( c_ServiceName, "L31745", SQLMSG, ptr_st_err_msg->c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return  -1;
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    strcpy( ptr_st_err_msg->c_err_msg, c_err_msg );
    return  -1;
  }

  return  0;
}

/*** Ver 5.2 Ends ***/


/******* ver 5.4 starts ***********/
 
int fn_cal_spndlvry_mrgn( char *c_ServiceName,
                          struct st_pstn_actn *ptr_st_pstn_actn,
                          struct st_err_msg *ptr_st_err_msg
                        )

{
	int i_returncode = 0;
  double d_cntrct_val = 0;
  double d_spot_prc = 0.0;
  double d_ltq_cls_prc = 0.0;
  double d_dlvry_mrgn_prcnt = 0.0;
  double d_ISec_buff_mrgn_prcnt = 0.0;
  double d_dlvry_min_mrgn_prcnt = 0.0;
  double d_final_delvr_mrgn = 0.0;
  double d_current_delvry_mrgn_prcnt = 0.0;
  double d_var_mrgn = 0.0;
  double d_extrm_lss_mrgn = 0.0;
  double d_new_delvry_mrgn_val = 0.0;
  double d_diff_dlvry_mrgn = 0.0;
  double d_balance_amt = 0.0;
  double d_existing_dlvry_mrgn_val = 0.0;
  long   l_opnpos_qty = 0;
  char	 c_narration_id[4] = "\0";
	char   c_opnpos_flw = '\0';
  char   c_settlement_flag = '\0';

  fn_userlog( c_ServiceName, "*** Inside Function fn_cal_spndlvry_mrgn ***");

	EXEC SQL
     SELECT  NVL(FTQ_SETLMNT_FLG,'C')
       INTO  :c_settlement_flag
       FROM  FTQ_FO_TRD_QT
      WHERE  FTQ_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
        AND  FTQ_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
        AND  FTQ_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
        AND  FTQ_EXPRY_DT        = to_date( :ptr_st_pstn_actn->c_expry_dt,'dd-mon-yyyy' )
        AND  FTQ_EXER_TYP        = :ptr_st_pstn_actn->c_exrc_typ
        AND  FTQ_STRK_PRC        = :ptr_st_pstn_actn->l_strike_prc
        AND  FTQ_OPT_TYP         = :ptr_st_pstn_actn->c_opt_typ
        AND  FTQ_INDSTK          = :ptr_st_pstn_actn->c_ctgry_indstk;

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "L31750", SQLMSG, ptr_st_err_msg->c_err_msg );
    return -1;
  }
  fn_userlog( c_ServiceName,"span:c_settlement_flag :%c:",c_settlement_flag);

	if( c_settlement_flag != 'P')
	{
     return 0;
  }

  EXEC SQL
       SELECT ABS(FCP_OPNPSTN_QTY),
              NVL(FCP_UDLVRY_MRGN,0),
		          FCP_OPNPSTN_FLW
       INTO   :l_opnpos_qty,
              :d_existing_dlvry_mrgn_val,
		          :c_opnpos_flw
        FROM  FCP_FO_SPN_CNTRCT_PSTN
        WHERE FCP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
         AND FCP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
         AND FCP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
         AND FCP_OPT_TYP         = :ptr_st_pstn_actn->c_opt_typ
         AND FCP_EXER_TYP        = :ptr_st_pstn_actn->c_exrc_typ
         AND FCP_STRK_PRC        = :ptr_st_pstn_actn->l_strike_prc
         AND FCP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
         AND FCP_EXPRY_DT        = :ptr_st_pstn_actn->c_expry_dt;

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "L31755", SQLMSG, ptr_st_err_msg->c_err_msg );
    return -1;
  }

  fn_userlog( c_ServiceName, "Open position qty :%ld: d_existing_dlvry_mrgn_val :%lf: c_opnpos_flw :%c:",l_opnpos_qty,d_existing_dlvry_mrgn_val,c_opnpos_flw );

 /**** If 75 Buy 75 Sell / 75 Sell 75 Buy => N ******/
/**** If 75 Buy 150 Sell , 75 Buy 75 Sell => N and New 75 Sell ***/
  if ( ( c_opnpos_flw== 'S' || c_opnpos_flw== 'N' ) && d_existing_dlvry_mrgn_val != 0 )
  {
       strcpy( c_narration_id ,RELEASE_ON_PHYDLVRY_OPT_EOS );
       i_returncode = fn_upd_spnlimits(  c_ServiceName,
                                           ptr_st_pstn_actn,
                                           ptr_st_err_msg,
                                           c_narration_id,
                                           DEBIT_WITHOUT_LIMIT,
                                           d_existing_dlvry_mrgn_val,
                                           &d_balance_amt);
       if ( i_returncode != 0 )
       {
           fn_errlog ( c_ServiceName, "L31760", SQLMSG, ptr_st_err_msg->c_err_msg );
           return -1;
       }

       d_final_delvr_mrgn = 0;
       fn_userlog(c_ServiceName,"span:Credited The whole delivery margin :%lf:",d_existing_dlvry_mrgn_val);
  }
  else if ( c_opnpos_flw == 'B' ) /*** Buy Order ***/
  {
 
   EXEC SQL
    SELECT  NVL(LTQ_RT,0.0) * 100,
            NVL(LTQ_CLS_PRC,0.0) * 100
    INTO    :d_spot_prc,
            :d_ltq_cls_prc
    FROM    LTQ_TRD_QT
    WHERE   LTQ_XCHNG_CD  = :ptr_st_pstn_actn->c_xchng_cd
    AND     LTQ_STCK_CD   = :ptr_st_pstn_actn->c_undrlyng;

   if ( SQLCODE  !=  0 && SQLCODE  != NO_DATA_FOUND)
   {
    fn_errlog ( c_ServiceName, "L31765", SQLMSG, ptr_st_err_msg->c_err_msg );
    return -1;
   }

   if(DEBUG_MSG_LVL_0)
   {
        fn_userlog(c_ServiceName,"span:SPOT PRICE  Is :%lf:",d_spot_prc);
        fn_userlog(c_ServiceName,"span:LTQ CLOSING PRICE Is :%lf:",d_ltq_cls_prc);
   }
		

  d_cntrct_val = (double)l_opnpos_qty * (double)ptr_st_pstn_actn->l_strike_prc;
  fn_userlog( c_ServiceName, "Contract Value is :%lf:",d_cntrct_val );

  /********** Get the delivery margin percentage from the database ********/
  EXEC SQL
  SELECT NVL( FMM_ISEC_DLVRY_MRGN_BFFR_PRCNT, 0.0 ), /*** Defined at each stock level I-sec Buffer margin ***/
             NVL( FMM_DLVRY_MIN_MRGN_PRCNT , 0.0 ) /** Minimum Mrgn % **/
        INTO :d_ISec_buff_mrgn_prcnt,
             :d_dlvry_min_mrgn_prcnt /*** Minimum margin percentage ***/
        FROM FMM_FO_MRGN_MSTR
        WHERE  FMM_PRDCT_TYP= :ptr_st_pstn_actn->c_prd_typ
        AND    FMM_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
        AND    FMM_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
        AND    FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
                                      FROM    FCB_FO_CLN_BSKT_ALLTD
                                      WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
                                                            FROM   CLM_CLNT_MSTR
                                                         WHERE CLM_MTCH_ACCNT =:ptr_st_pstn_actn->c_cln_mtch_accnt));

        if( SQLCODE != 0 )
        {
            fn_userlog(c_ServiceName,"******Failed in FMM fetch*******");
            fn_errlog ( c_ServiceName, "L31770", SQLMSG, ptr_st_err_msg->c_err_msg );
            return -1;
        }

      /*********** Find Delivery Margin Percentage *******/
      /*********** Find Var and Extreme Loss margin ******/
      EXEC SQL
           SELECT NVL(VEM_VAR_MARGIN,0.0),
                  NVL(VEM_EXTRM_LOSS_RT,0.0),
                  NVL(FSP_DLVRY_MRGPRCNT,0.0)
            INTO :d_var_mrgn,
                 :d_extrm_lss_mrgn,
                 :d_current_delvry_mrgn_prcnt
            FROM  VEM_VAR_ELM_MSTR,FSP_FO_SYSTM_PRMTR
           WHERE  VEM_STCK_CD = ( SELECT SEM_MAP_VL
                                   FROM  SEM_STCK_MAP
                                  WHERE  SEM_STCK_CD = :ptr_st_pstn_actn->c_undrlyng
                                    AND  SEM_ENTTY = 3 );

      if ( SQLCODE != 0 )
      {
            fn_errlog ( c_ServiceName, "L31775", SQLMSG, ptr_st_err_msg->c_err_msg );
            return -1;
      }

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"span:d_ISec_buff_mrgn_prcnt is :%lf:",d_ISec_buff_mrgn_prcnt);
        fn_userlog(c_ServiceName,"span:d_dlvry_min_mrgn_prcnt is :%lf:",d_dlvry_min_mrgn_prcnt);
        fn_userlog(c_ServiceName,"span:d_existing_dlvry_mrgn_val is :%lf:",d_existing_dlvry_mrgn_val);
        fn_userlog(c_ServiceName,"span:l_opnpos_qty :%ld:",l_opnpos_qty);
        fn_userlog(c_ServiceName,"span:d_cntrct_val is :%lf:",d_cntrct_val);
        fn_userlog(c_ServiceName,"span:ptr_st_pstn_actn->l_strike_prc is :%ld:",ptr_st_pstn_actn->l_strike_prc);
        fn_userlog(c_ServiceName,"span:d_var_mrgn is :%lf:",d_var_mrgn);
        fn_userlog(c_ServiceName,"span:d_extrm_lss_mrgn is :%lf:",d_extrm_lss_mrgn);
        fn_userlog(c_ServiceName,"span:d_current_delvry_mrgn_prcnt :%lf:",d_current_delvry_mrgn_prcnt);
      }
      /******* Compute the New delivery margin  **********/
      d_new_delvry_mrgn_val = fn_maxd( ((d_cntrct_val *(d_var_mrgn+d_extrm_lss_mrgn+d_ISec_buff_mrgn_prcnt))/100.0) ,( (d_cntrct_val *d_dlvry_min_mrgn_prcnt)/100.0) ) * (d_current_delvry_mrgn_prcnt/100.0);

      EXEC SQL
      SELECT ROUND(:d_new_delvry_mrgn_val,2)
      INTO :d_new_delvry_mrgn_val
      FROM DUAL;

      if ( SQLCODE != 0 )
      {
            fn_errlog ( c_ServiceName, "L31780", SQLMSG, ptr_st_err_msg->c_err_msg );
            return -1;
      }

      d_diff_dlvry_mrgn = d_existing_dlvry_mrgn_val - d_new_delvry_mrgn_val;

      if( d_diff_dlvry_mrgn > 0 )
      {
       strcpy( c_narration_id ,RELEASE_ON_PHYDLVRY_OPT_EOS );
       i_returncode = fn_upd_spnlimits(  c_ServiceName,
                                           ptr_st_pstn_actn,
                                           ptr_st_err_msg,
                                           c_narration_id,
                                           DEBIT_WITHOUT_LIMIT,
                                           d_diff_dlvry_mrgn,
                                           &d_balance_amt);
       if ( i_returncode != 0 )
       {
           fn_errlog ( c_ServiceName, "L31785", SQLMSG, ptr_st_err_msg->c_err_msg );
           return -1;
       }
      }
      else
      {
               return 0;
      }
       d_final_delvr_mrgn = d_new_delvry_mrgn_val;
       fn_userlog(c_ServiceName,"Credited The REQUIRED NEW delivery margin :%ld:",d_final_delvr_mrgn);

    }
		else 
	  {
       return 0;
		}
        EXEC SQL
             UPDATE FCP_FO_SPN_CNTRCT_PSTN
             SET FCP_UDLVRY_MRGN = :d_final_delvr_mrgn
        WHERE FCP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
         AND FCP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
         AND FCP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
         AND FCP_OPT_TYP         = :ptr_st_pstn_actn->c_opt_typ
         AND FCP_EXER_TYP        = :ptr_st_pstn_actn->c_exrc_typ
         AND FCP_STRK_PRC        = :ptr_st_pstn_actn->l_strike_prc
         AND FCP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
         AND FCP_EXPRY_DT        = :ptr_st_pstn_actn->c_expry_dt;

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "L31790", SQLMSG, ptr_st_err_msg->c_err_msg );
    return -1;
  }
   fn_userlog( c_ServiceName, "*** Function fn_cal_spndlvry_mrgn ended ***");

   return 0;
}
/******* ver 5.4 ends ***********/

/*** Ver 5.3 Start ***/

int fn_chk_spn_mrgn (char *c_ServiceName,
                     struct vw_orderbook st_first_ordbk,
                     struct vw_orderbook st_next_ordbk,
                     struct st_pstn_actn *ptr_st_pstn_actn,
                     double *d_total_diff,
                     double *d_total_pnl,
                     char   c_rqst_typ, 
                     char *c_err_msg
                    )
{

	FBFR32 *ptr_fml_ibuf;
  FBFR32 *ptr_fml_obuf;

  char c_narration_id[4];
  char c_dr_without_lmt_flg;
  char c_prmum_dr_without_lmt_flg;
  char c_pos_avl;
  char c_tmp_rmrks [ 133 ] ;
  char c_inp_strng1[ 8000 ];
  char c_inp_strng11[ 8000 ];
  char c_inp_strng2[ 8000 ];
  char c_inp_strng22[ 8000 ];
  char c_inp_strng[ 16000 ];
  char c_op_strng[ 16000 ];
  char c_op_strng1[ 16000 ];
  char c_op_strng2[ 16000 ];
  char c_seq_num1[12000];
  char c_seq_num2[12000];
  char c_max_opn_qty[200];
  char c_min_opn_qty[200];
  char c_ltp[2000];
  char c_strk_prc[20];
  char c_mrgn_indctr[3];
  char c_opseq_num1[20];
  char c_opseq_num2[20];
  char c_mtch_accnt1[11];
  char c_mtch_accnt2[11];
  char c_spn_mrgn1[20];
  char c_spn_mrgn2[20];
  char c_nov1[20];
  char c_nov2[20];
  char c_total_mrgn1[20];
  char c_total_mrgn2[20];
  char c_expry_dt[10];
  char c_xchng_cd1[3];
  char c_frst_opnpstn_flw='\0';
  char c_temp_err_msg[20] = "\0";
	char c_ucc_cd[13] = "\0"; /** Added in Ver 8.0 **/
 
  char *null_ptr  = 0;

  int i_returncode;
  int i_rtrn_cd1;
  int i_expsr_rtrn;
  int i_cntrct_cnt = 0;

  long  l_max_opn_qty = 0;
  long  l_min_opn_qty = 0;
  long  l_temp_qty    = 0;
  long  l_prtfl_seq1  = 0;
  long  l_prtfl_seq2  = 0;
  long  li_len_tobuf  = 0;
  long  l_length1     = 0;
  long  l_length2     = 0;
  long  l_cntr        = 0;
  long  l_prmum_qty   = 0;
  long  l_basket_id   = 0;
  long  l_mrgnbl_qty  = 0;
  long  l_buy_qty     = 0;
  long  l_sell_qty    = 0;

  long l_ose_qty        = 0;
  long l_obe_qty        = 0;
  long l_ibuy_qty       = 0;
  long l_ebuy_qty       = 0;
  long l_isell_qty      = 0;
  long l_esell_qty      = 0;
  long l_total_buy_qty  = 0;
  long l_total_sell_qty = 0;
  long l_cover_qty      = 0;
  long l_open_pos_qty   = 0;
  long l_rem_qty        = 0;
  long l_no_of_lot      = 0;
  long l_opnpstn_qty    = 0;
  long l_pending_qty    = 0;
  long l_sprd_rate      = 0; 
  long l_opn_qty        = 0;
  long l_modified_qty = 0; 
  long int l_fod_ord_qty = 0;             /*** Ver 5.9 ***/

  long int l_pending_qty_ord  = 0;

  double d_cntrct_pl = 0.0;
  double d_opnpstn_val  = 0.0;
  double d_open_pos_val = 0.0;
  double d_base_rate    = 0.0;
  double d_diff_mrgn    = 0.0;
  double d_balance_amt  = 0.0;
  double d_bal_to_apply = 0.0 ;
  double d_first_ltp    = 0.0;
  double d_next_ltp     = 0.0;
  double d_spn_mrgn     = 0.0;
  double d_spn_mrgn1    = 0.0;
  double d_spn_mrgn2    = 0.0;
  double d_nov1         = 0.0;
  double d_nov2         = 0.0;
  double d_nov          = 0.0;
  double d_total_mrgn1  = 0.0;
  double d_total_mrgn2  = 0.0;
  double d_total_mrgn   = 0.0;
  double d_ntnl_pl      = 0.0;
  double d_blckd_amnt   = 0.0;
  double d_mrgn_blkd    = 0.0;
  double d_expsr_prcntg = 0.0;
  double d_minexpsr_prcntg = 0.0;
  double d_expsr_mrgn     = 0.0;
  double d_min_expsr_mrgn = 0.0;
  double d_expsr          = 0.0;
  double d_min_expsr      = 0.0;
  double d_mltplr         = 0.0;
  double d_upd_amount     = 0.0;
  double d_intl_mrgn      = 0.0;
  double d_min_mrgn       = 0.0;
  double d_undrlyng_pl    = 0.0;
  double d_ltp            = 0.0;
  double d_clsng_prc      = 0.0;
  double d_oblckd_amnt    = 0.0;
  double d_strike_prc     = 0.0;
  double d_required_amt   = 0.0; 
  double d_ltp_frst       = 0.0;

  /*** Ver 7.0  Starts Here ***/
  int    i_ret_val=0;

  double d_spn_bmrgn1=0;
  double d_bnov1=0;
  double d_total_bmrgn1=0;

  double d_spn_bmrgn2=0;
  double d_bnov2=0;
  double d_total_bmrgn2=0;

  double d_spn_bmrgn=0;
  double d_bnov=0;
  double d_total_bmrgn=0;
  /*** Ver 7.0  Ends here ***/


  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;
    char  sql_cln_mtch_accnt[11];
    char  sql_xchng_cd[4];
    char  sql_prd_typ;
    char  sql_undrlyng[7];
    varchar c_exp_dt[LEN_DATE];
    varchar c_trd_dt[12];
    varchar c_stock_cd [20];

  struct st_fcp_cntrct_pstn st_cntrct_pstn_crrnt  ;
  struct st_fcp_cntrct_pstn st_cntrct_pstn_md_rc;
  struct st_fcp_cntrct_pstn st_cntrct_pstn_prmum_sqroff;
  struct st_fus_undrlyng_pstn st_undpstn_tobe;
  struct st_fus_undrlyng_pstn st_undpstn_crrnt;
  struct st_err_msg *ptr_st_err_msg;

  EXEC SQL END DECLARE SECTION;

  ptr_fml_obuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if ( ptr_fml_obuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31115", TPMSG, c_err_msg);
    return -1;
  }

  ptr_fml_ibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN*10);

  if ( ptr_fml_ibuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31120", TPMSG, c_err_msg);
    tpfree((char *)ptr_fml_obuf);
    return -1;
  }

  strcpy( sql_cln_mtch_accnt,st_first_ordbk.c_cln_mtch_accnt);
  strcpy( sql_xchng_cd,st_first_ordbk.c_xchng_cd);
  strcpy( sql_undrlyng,st_first_ordbk.c_undrlyng);

  sql_prd_typ     = st_first_ordbk.c_prd_typ;

  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog ( c_ServiceName, "Building new underlying position" );
    fn_userlog ( c_ServiceName, "st_first_ordbk.c_cln_mtch_accnt        |%s|",st_first_ordbk.c_cln_mtch_accnt );
    fn_userlog ( c_ServiceName, "st_first_ordbk.c_xchng_cd              |%s|",st_first_ordbk.c_xchng_cd );
    fn_userlog ( c_ServiceName, "st_first_ordbk.c_undrlyng              |%s|",st_first_ordbk.c_undrlyng );
    fn_userlog ( c_ServiceName, "st_first_ordbk.c_expry_dt              |%s|",st_first_ordbk.c_expry_dt );
    fn_userlog ( c_ServiceName, "st_first_ordbk.c_prd_typ               |%c|",st_first_ordbk.c_prd_typ );
    fn_userlog ( c_ServiceName, "st_first_ordbk.c_ordr_flw              |%c|",st_first_ordbk.c_ordr_flw );
    fn_userlog ( c_ServiceName, "st_first_ordbk.l_ord_tot_qty           |%ld|",st_first_ordbk.l_ord_tot_qty );
    fn_userlog ( c_ServiceName, "st_next_ordbk.c_cln_mtch_accnt         |%s|",st_next_ordbk.c_cln_mtch_accnt );
    fn_userlog ( c_ServiceName, "st_next_ordbk.c_xchng_cd               |%s|",st_next_ordbk.c_xchng_cd );
    fn_userlog ( c_ServiceName, "st_next_ordbk.c_undrlyng               |%s|",st_next_ordbk.c_undrlyng );
    fn_userlog ( c_ServiceName, "st_next_ordbk.c_expry_dt               |%s|",st_next_ordbk.c_expry_dt );
    fn_userlog ( c_ServiceName, "st_next_ordbk.c_prd_typ                |%c|",st_next_ordbk.c_prd_typ );
    fn_userlog ( c_ServiceName, "st_next_ordbk.c_exrc_typ               |%c|",st_next_ordbk.c_exrc_typ );
  }

    int i_pos_avl = 0;

    EXEC SQL
        SELECT FCP_OPNPSTN_QTY,
               FCP_OPNPSTN_VAL,
               FCP_OPNPSTN_FLW,
               DECODE(:st_first_ordbk.c_ordr_flw,'B',GREATEST(ABS(FCP_IBUY_QTY),ABS(FCP_EXBUY_QTY)),GREATEST(ABS(FCP_ISELL_QTY),ABS(FCP_EXSELL_QTY)))
        INTO   :l_open_pos_qty,
               :d_open_pos_val,
               :c_frst_opnpstn_flw,
               :l_pending_qty
        FROM   FCP_FO_SPN_CNTRCT_PSTN
        WHERE  FCP_CLM_MTCH_ACCNT  = :st_first_ordbk.c_cln_mtch_accnt
        AND    FCP_XCHNG_CD        = :st_first_ordbk.c_xchng_cd
        AND    FCP_PRDCT_TYP       = :st_first_ordbk.c_prd_typ
        AND    FCP_UNDRLYNG        = :st_first_ordbk.c_undrlyng
        AND    FCP_EXPRY_DT        = :st_first_ordbk.c_expry_dt
        AND    FCP_EXER_TYP        = :st_first_ordbk.c_exrc_typ;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31125",FMLMSG,c_err_msg);
        tpfree ( ( char * ) ptr_fml_obuf );
        tpfree ( ( char * ) ptr_fml_ibuf );
        return -1;
      }

   if(DEBUG_MSG_LVL_3)
   {
      fn_userlog(c_ServiceName,"l_open_pos_qty :%ld:",l_open_pos_qty);
      fn_userlog(c_ServiceName,"d_open_pos_val :%lf:",d_open_pos_val);
      fn_userlog(c_ServiceName,"c_frst_opnpstn_flw :%c:",c_frst_opnpstn_flw);
      fn_userlog(c_ServiceName,"l_pending_qty :%ld:",l_pending_qty);
   }

        EXEC SQL
        SELECT NVL( SUM( FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY-FOD_EXPRD_QTY),0 )
        INTO   :l_pending_qty_ord
        FROM   FOD_FO_ORDR_DTLS
        WHERE  FOD_CLM_MTCH_ACCNT     = :st_first_ordbk.c_cln_mtch_accnt
               AND FOD_XCHNG_CD       = :st_first_ordbk.c_xchng_cd
               AND FOD_PRDCT_TYP      = :st_first_ordbk.c_prd_typ
               AND FOD_UNDRLYNG       = :st_first_ordbk.c_undrlyng
               AND FOD_EXPRY_DT       = :st_first_ordbk.c_expry_dt
               AND FOD_EXER_TYP       = :st_first_ordbk.c_exrc_typ
               AND FOD_ORDR_FLW       = :st_first_ordbk.c_ordr_flw
               AND FOD_SPL_FLAG       = 'O'
               AND FOD_ORDR_STTS      IN ('R','P','O','Q');

      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog( c_ServiceName, "S31130",FMLMSG,c_err_msg);
        tpfree ( ( char * ) ptr_fml_obuf );
        tpfree ( ( char * ) ptr_fml_ibuf );
        return -1;
      }


	if(  c_rqst_typ != EXG_RESPONSE ) /** suchita **/
	{
   if( st_first_ordbk.c_spl_flg == ROLLOVER_WITH_SPREAD && c_rqst_typ == MODIFY )
   {

      l_pending_qty = l_pending_qty + l_pending_qty_ord;

      if( st_first_ordbk.c_ordr_flw == 'B' )
      {
        l_opn_qty = l_open_pos_qty * (-1);
      }
      else
      {
        l_opn_qty = l_open_pos_qty;
      }

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"l_opn_qty :%ld:",l_opn_qty);
        fn_userlog(c_ServiceName,"First_ord_ref :%s:",st_first_ordbk.c_ordr_rfrnc); /** Ver 5.9 **/
      }
     
			/*** Ver 5.9 Starts ***/
      EXEC SQL
        SELECT  NVL(FOD_ORDR_TOT_QTY,0 )
        INTO  :l_fod_ord_qty
        FROM  FOD_FO_ORDR_DTLS
        WHERE FOD_CLM_MTCH_ACCNT  = :st_first_ordbk.c_cln_mtch_accnt
        AND FOD_ORDR_RFRNC    = :st_first_ordbk.c_ordr_rfrnc
        AND FOD_XCHNG_CD    = :st_first_ordbk.c_xchng_cd
        AND FOD_PRDCT_TYP   = :st_first_ordbk.c_prd_typ
        AND FOD_UNDRLYNG    = :st_first_ordbk.c_undrlyng
        AND FOD_EXPRY_DT    = :st_first_ordbk.c_expry_dt
        AND FOD_EXER_TYP    = :st_first_ordbk.c_exrc_typ
        AND FOD_ORDR_FLW    = :st_first_ordbk.c_ordr_flw
        AND FOD_SPL_FLAG    = 'O';
      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog( c_ServiceName, "S31135",FMLMSG,c_err_msg);
        tpfree ( ( char * ) ptr_fml_obuf );
        tpfree ( ( char * ) ptr_fml_ibuf );
        return -1;
      }
      fn_userlog(c_ServiceName,"l_fod_ord_qty:%ld: l_pending_qty_ord:%ld: st_first_ordbk.l_ord_tot_qty:%ld:",l_fod_ord_qty,l_pending_qty_ord,st_first_ordbk.l_ord_tot_qty);
      l_modified_qty = l_fod_ord_qty - st_first_ordbk.l_ord_tot_qty;
      fn_userlog(c_ServiceName,"l_modified_qty:%ld: l_pending_qty:%ld:",l_modified_qty,l_pending_qty);
      /*** Ver 5.9 ***/

      /* l_modified_qty= l_pending_qty - st_first_ordbk.l_ord_tot_qty;  * Ver 5.9 */

      if( l_modified_qty < 0 )
      {
        l_modified_qty = l_modified_qty * (-1);

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"l_modified_qty :%ld:",l_modified_qty);
      }

      if( l_opn_qty <  ( l_modified_qty  + l_pending_qty ))
      {
        fn_userlog ( c_ServiceName, "Rollover quantity greater than open position quantity.");
        strcpy(c_err_msg,"Rollover quantity can not be greater than open position quantity.");
        return -1;
      }
 }
   }
   else if ( labs(l_open_pos_qty) < (labs(st_first_ordbk.l_ord_tot_qty) + labs (l_pending_qty) + labs (l_pending_qty_ord) ) )
   {
      fn_userlog ( c_ServiceName, "Rollover quantity greater than open position quantity.");
      strcpy(c_err_msg,"Rollover quantity can not be greater than open position quantity.");
      tpfree ( ( char * ) ptr_fml_obuf );
      tpfree ( ( char * ) ptr_fml_ibuf );
      return -1;
   }
   fn_userlog ( c_ServiceName, "SUCHITA l_open_pos_qty :%ld: st_first_ordbk.l_ord_tot_qty :%ld: l_pending_qty:%ld: l_pending_qty_ord :%ld:",l_open_pos_qty,st_first_ordbk.l_ord_tot_qty,l_pending_qty,l_pending_qty_ord);
	}

    EXEC SQL
     SELECT  FTQ_LST_TRD_PRC
        INTO    :d_first_ltp
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :st_first_ordbk.c_xchng_cd
        AND     FTQ_PRDCT_TYP = :st_first_ordbk.c_prd_typ
        AND     FTQ_UNDRLYNG  = :st_first_ordbk.c_undrlyng
        AND     FTQ_EXPRY_DT  = :st_first_ordbk.c_expry_dt
        AND     FTQ_EXER_TYP  = :st_first_ordbk.c_exrc_typ;

      if(SQLCODE  !=  0 )
      {
        fn_errlog ( c_ServiceName, "S31140", SQLMSG, c_err_msg );
        tpfree ( ( char * ) ptr_fml_obuf );
        tpfree ( ( char * ) ptr_fml_ibuf );
        return FAILURE;
      }

  EXEC SQL
     SELECT  FTQ_LST_TRD_PRC
        INTO    :d_next_ltp
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :st_next_ordbk.c_xchng_cd
        AND     FTQ_PRDCT_TYP = :st_next_ordbk.c_prd_typ
        AND     FTQ_UNDRLYNG  = :st_next_ordbk.c_undrlyng
        AND     FTQ_EXPRY_DT  = :st_next_ordbk.c_expry_dt
        AND     FTQ_EXER_TYP  = :st_next_ordbk.c_exrc_typ;

      if(SQLCODE  !=  0 )
      {
        fn_errlog ( c_ServiceName, "S31145", SQLMSG, c_err_msg );
        tpfree ( ( char * ) ptr_fml_obuf );
        tpfree ( ( char * ) ptr_fml_ibuf );
        return FAILURE;
      }

      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog ( c_ServiceName, " d_first_ltp                   |%lf|",d_first_ltp);
        fn_userlog ( c_ServiceName, " d_next_ltp                    |%lf|",d_next_ltp);
      }

    if(st_first_ordbk.c_spl_flg == ROLLOVER_WITH_SPREAD)
    {
      if(st_first_ordbk.c_slm_flg == 'L')
      {
        l_sprd_rate = st_first_ordbk.l_ord_lmt_rt;

        if(l_sprd_rate >= 0)
        {
          st_first_ordbk.l_ord_lmt_rt = (long)d_first_ltp;
          st_next_ordbk.l_ord_lmt_rt = (long)d_first_ltp + l_sprd_rate;
        }
        else
        {
          st_first_ordbk.l_ord_lmt_rt = (long)d_first_ltp;

          if( d_first_ltp > d_next_ltp )
          {
            st_next_ordbk.l_ord_lmt_rt = (long)d_first_ltp;
          }
          else
          {
            st_next_ordbk.l_ord_lmt_rt = (long)d_next_ltp;
          }
        }
      }
      else
      {
        fn_errlog ( c_ServiceName, "S31150", "Only Limit Order is Allowed.", c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        return FAILURE;
      }

      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog ( c_ServiceName, "st_first_ordbk.c_slm_flg |%c|",st_first_ordbk.c_slm_flg);
        fn_userlog ( c_ServiceName, "st_first_ordbk.l_ord_lmt_rt |%ld|",st_first_ordbk.l_ord_lmt_rt);
        fn_userlog ( c_ServiceName, "st_next_ordbk.l_ord_lmt_rt  |%ld|",st_next_ordbk.l_ord_lmt_rt);
        fn_userlog ( c_ServiceName, "l_sprd_rate  |%ld|",l_sprd_rate);
      }
    }
    else
    {
      if (st_first_ordbk.c_slm_flg == 'M')
      {
        st_first_ordbk.l_ord_lmt_rt = d_first_ltp;
      }

      if (st_next_ordbk.c_slm_flg == 'M')
      {
        st_next_ordbk.l_ord_lmt_rt = d_next_ltp;
      }
    }

    if ( c_frst_opnpstn_flw == 'S' )
    {
      l_rem_qty   = l_open_pos_qty + st_first_ordbk.l_ord_tot_qty;
    }
    else
    {
      l_rem_qty   = l_open_pos_qty  - st_first_ordbk.l_ord_tot_qty;
    }

    d_base_rate = d_open_pos_val / (double)l_open_pos_qty;

    EXEC SQL
      UPDATE  FCP_FO_SPN_CNTRCT_PSTN
      SET FCP_BUY_EXCTD_QTY = DECODE(:st_first_ordbk.c_ordr_flw,'B',FCP_BUY_EXCTD_QTY + :st_first_ordbk.l_ord_tot_qty,FCP_BUY_EXCTD_QTY + 0),
          FCP_SELL_EXCTD_QTY= DECODE(:st_first_ordbk.c_ordr_flw,'S',FCP_SELL_EXCTD_QTY + (:st_first_ordbk.l_ord_tot_qty * -1 ) ,FCP_SELL_EXCTD_QTY + 0),
          FCP_OPNPSTN_QTY = FCP_OPNPSTN_QTY + DECODE(:st_first_ordbk.c_ordr_flw,'S',(:st_first_ordbk.l_ord_tot_qty * -1),:st_first_ordbk.l_ord_tot_qty),
          FCP_OPNPSTN_VAL = :l_rem_qty * :d_base_rate,
          FCP_MTM_OPN_VAL = :l_rem_qty * :d_base_rate
      WHERE FCP_CLM_MTCH_ACCNT    = :st_first_ordbk.c_cln_mtch_accnt
      AND     FCP_XCHNG_CD        = :st_first_ordbk.c_xchng_cd
      AND     FCP_PRDCT_TYP       = :st_first_ordbk.c_prd_typ
      AND     FCP_UNDRLYNG        = :st_first_ordbk.c_undrlyng
      AND     FCP_EXPRY_DT        = :st_first_ordbk.c_expry_dt
      AND     FCP_EXER_TYP        = :st_first_ordbk.c_exrc_typ;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31155",FMLMSG,c_err_msg);
        tpfree ( ( char * ) ptr_fml_obuf );
        tpfree ( ( char * ) ptr_fml_ibuf );
        return -1;
      }

    EXEC SQL
      SELECT 1
      INTO  :i_pos_avl
      FROM  FCP_FO_SPN_CNTRCT_PSTN
      WHERE FCP_CLM_MTCH_ACCNT    = :st_next_ordbk.c_cln_mtch_accnt
      AND     FCP_XCHNG_CD        = :st_next_ordbk.c_xchng_cd
      AND     FCP_PRDCT_TYP       = :st_next_ordbk.c_prd_typ
      AND     FCP_UNDRLYNG        = :st_next_ordbk.c_undrlyng
      AND     FCP_EXPRY_DT        = :st_next_ordbk.c_expry_dt
      AND     FCP_EXER_TYP        = :st_next_ordbk.c_exrc_typ;

      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog( c_ServiceName, "S31160",FMLMSG,c_err_msg);
        tpfree ( ( char * ) ptr_fml_obuf );
        tpfree ( ( char * ) ptr_fml_ibuf );
        return -1;
      }

    if ( i_pos_avl == 1 )
    {

    EXEC SQL
      UPDATE  FCP_FO_SPN_CNTRCT_PSTN
      SET   FCP_BUY_EXCTD_QTY     = DECODE (:st_next_ordbk.c_ordr_flw ,'B',FCP_BUY_EXCTD_QTY + :st_next_ordbk.l_ord_tot_qty,
                                            FCP_BUY_EXCTD_QTY + 0),
            FCP_SELL_EXCTD_QTY    = DECODE (:st_next_ordbk.c_ordr_flw ,'S',FCP_SELL_EXCTD_QTY +(:st_next_ordbk.l_ord_tot_qty * -1),FCP_SELL_EXCTD_QTY + 0),
            FCP_OPNPSTN_QTY = FCP_OPNPSTN_QTY + DECODE(:st_next_ordbk.c_ordr_flw,'S',(:st_next_ordbk.l_ord_tot_qty * -1),:st_next_ordbk.l_ord_tot_qty),
            FCP_OPNPSTN_VAL = FCP_OPNPSTN_VAL + (:st_next_ordbk.l_ord_lmt_rt * DECODE (:st_next_ordbk.c_ordr_flw ,'S',:st_next_ordbk.l_ord_tot_qty * (-1),:st_next_ordbk.l_ord_tot_qty)),
            FCP_MTM_OPN_VAL = FCP_MTM_OPN_VAL + (:st_next_ordbk.l_ord_lmt_rt * DECODE (:st_next_ordbk.c_ordr_flw,'S',:st_next_ordbk.l_ord_tot_qty * (-1),:st_next_ordbk.l_ord_tot_qty))
      WHERE FCP_CLM_MTCH_ACCNT    = :st_next_ordbk.c_cln_mtch_accnt
      AND     FCP_XCHNG_CD        = :st_next_ordbk.c_xchng_cd
      AND     FCP_PRDCT_TYP       = :st_next_ordbk.c_prd_typ
      AND     FCP_UNDRLYNG        = :st_next_ordbk.c_undrlyng
      AND     FCP_EXPRY_DT        = :st_next_ordbk.c_expry_dt
      AND     FCP_EXER_TYP        = :st_next_ordbk.c_exrc_typ;

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S31165", SQLMSG, c_err_msg );
        tpfree ( ( char * ) ptr_fml_obuf );
        tpfree ( ( char * ) ptr_fml_ibuf );
        return -1;
      }
    }
    else
    {

			/*** Added in VER 8.0 : Real time margin reporting ( Fetching UCC code ) ***/

      MEMSET(c_ucc_cd);

      EXEC SQL
      SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
      INTO  :c_ucc_cd
      FROM  CLM_CLNT_MSTR
      WHERE CLM_MTCH_ACCNT = :st_next_ordbk.c_cln_mtch_accnt;

      if ( SQLCODE != 0 )
      {
        fn_userlog(c_ServiceName,"fn_chk_spn_mrgn : Error while fetching UCC code for :%s:", st_next_ordbk.c_cln_mtch_accnt);
        fn_errlog( c_ServiceName, "S39225",SQLMSG,c_err_msg);
        tpfree ( ( char * ) ptr_fml_obuf );
        tpfree ( ( char * ) ptr_fml_ibuf );
        return -1;
      }

      rtrim(c_ucc_cd);

      if(DEBUG_MSG_LVL_3)
        fn_userlog(c_ServiceName,"VER 8.0 -- fn_chk_spn_mrgn : MAtch ID :%s: have ucc code :%s:", st_next_ordbk.c_cln_mtch_accnt, c_ucc_cd);

      /*** VER 8.0 ends here ***/
	
    EXEC SQL
      INSERT INTO FCP_FO_SPN_CNTRCT_PSTN
      (
        FCP_CLM_MTCH_ACCNT,
        FCP_XCHNG_CD,
        FCP_PRDCT_TYP,
        FCP_INDSTK,
        FCP_UNDRLYNG,
        FCP_EXPRY_DT,
        FCP_EXER_TYP,
        FCP_STRK_PRC,
        FCP_OPT_TYP,
        FCP_BUY_EXCTD_QTY,
        FCP_SELL_EXCTD_QTY,
        FCP_OPNPSTN_FLW,
        FCP_OPNPSTN_QTY,
        FCP_OPNPSTN_VAL,
        FCP_MTM_OPN_VAL,
				FCP_UCC_CD				/*** Added in VER 8.0 ***/
      )
      VALUES
      (
        :st_next_ordbk.c_cln_mtch_accnt,
        :st_next_ordbk.c_xchng_cd,
        :st_next_ordbk.c_prd_typ,
        :st_next_ordbk.c_ctgry_indstk,
        :st_next_ordbk.c_undrlyng,
        to_date(:st_next_ordbk.c_expry_dt,'DD-Mon-YYYY'),
        :st_next_ordbk.c_exrc_typ,
        :st_next_ordbk.l_strike_prc,
        :st_next_ordbk.c_opt_typ,
        DECODE (:st_next_ordbk.c_ordr_flw ,'B',:st_next_ordbk.l_ord_tot_qty, 0),
        DECODE (:st_next_ordbk.c_ordr_flw ,'S',:st_next_ordbk.l_ord_tot_qty * -1, 0),
        :st_next_ordbk.c_ordr_flw,
        DECODE (:st_next_ordbk.c_ordr_flw ,'S',(:st_next_ordbk.l_ord_tot_qty * -1 ),:st_next_ordbk.l_ord_tot_qty),
        DECODE(:st_next_ordbk.c_ordr_flw ,'S',(:st_next_ordbk.l_ord_lmt_rt * :st_next_ordbk.l_ord_tot_qty * -1), :st_next_ordbk.l_ord_lmt_rt * :st_next_ordbk.l_ord_tot_qty),
        DECODE(:st_next_ordbk.c_ordr_flw ,'S',(:st_next_ordbk.l_ord_lmt_rt * :st_next_ordbk.l_ord_tot_qty * -1), :st_next_ordbk.l_ord_lmt_rt * :st_next_ordbk.l_ord_tot_qty),
				:c_ucc_cd				/*** Added in VER 8.0 ***/
      );

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S31170", SQLMSG, c_err_msg );
        tpfree ( ( char * ) ptr_fml_obuf );
        tpfree ( ( char * ) ptr_fml_ibuf );
        return -1;
      }
   }

  EXEC SQL
   SELECT  FUS_CLM_MTCH_ACCNT,
           FUS_XCHNG_CD,
           FUS_INDSTK,
           FUS_UNDRLYNG,
           FUS_UIBUY_QTY,
           FUS_UIBUY_VAL,
           FUS_UISELL_QTY,
           FUS_UISELL_VAL,
           FUS_UEXBUY_QTY,
           FUS_UEXBUY_VAL,
           FUS_UEXSELL_QTY,
           FUS_UEXSELL_VAL,
           FUS_UBUY_EXCTD_QTY,
           FUS_USELL_EXCTD_QTY,
           FUS_UOPNPSTN_FLW,
           FUS_UOPNPSTN_QTY,
           FUS_UOPNPSTN_VAL,
           FUS_UMTM_OPN_VAL,
           FUS_INITIAL_MRGN,
           FUS_SPAN_WEMULT_MRGN,
           FUS_EBA_EXPR_MRGN,
           FUS_USPAN_WENOV_MRGN,
           FUS_MULTIPLIER,
           FUS_USPAN_NENOV_MRGN,
           FUS_NET_OPTN_VAL,
           NVL(FUS_MIN_MRGN,0),
           NVL(FUS_MTM_FLG,'O'),
           FUS_BLCKD_PL,
           FUS_REQD_INITIAL_MRGN
   INTO    :st_undpstn_crrnt.c_cln_mtch_accnt,
           :st_undpstn_crrnt.c_xchng_cd,
           :st_undpstn_crrnt.c_indstk,
           :st_undpstn_crrnt.c_undrlyng,
           :st_undpstn_crrnt.l_uibuy_qty,
           :st_undpstn_crrnt.d_uibuy_val,
           :st_undpstn_crrnt.l_uisell_qty,
           :st_undpstn_crrnt.d_uisell_val,
           :st_undpstn_crrnt.l_uexbuy_qty,
           :st_undpstn_crrnt.d_uexbuy_val,
           :st_undpstn_crrnt.l_uexsell_qty,
           :st_undpstn_crrnt.d_uexsell_val,
           :st_undpstn_crrnt.l_ubuy_exctd_qty,
           :st_undpstn_crrnt.l_usell_exctd_qty,
           :st_undpstn_crrnt.c_uopnpstn_flw,
           :st_undpstn_crrnt.l_uopnpstn_qty,
           :st_undpstn_crrnt.d_uopnpstn_val,
           :st_undpstn_crrnt.d_umtm_opn_val,
           :st_undpstn_crrnt.d_initial_mrgn,
           :st_undpstn_crrnt.d_span_wemult_mrgn,
           :st_undpstn_crrnt.d_eba_expr_mrgn,
           :st_undpstn_crrnt.d_uspan_wenov_mrgn,
           :st_undpstn_crrnt.d_multpr,
           :st_undpstn_crrnt.d_uspan_nenov_mrgn,
           :st_undpstn_crrnt.d_net_optn_val,
           :st_undpstn_crrnt.d_min_mrgn,
           :st_undpstn_crrnt.c_mtm_flg,
           :st_undpstn_crrnt.d_blckd_pl,
           :st_undpstn_crrnt.d_reqd_initial_mrgn
   FROM    FUS_FO_UNDRLYNG_SPN_PSTN
   WHERE   FUS_CLM_MTCH_ACCNT  = :st_first_ordbk.c_cln_mtch_accnt
   AND     FUS_XCHNG_CD        = :st_first_ordbk.c_xchng_cd
   AND     FUS_UNDRLYNG        = :st_first_ordbk.c_undrlyng;

   if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
   {
     fn_errlog ( c_ServiceName, "S31175", SQLMSG, c_err_msg );
     tpfree ( ( char * ) ptr_fml_obuf );
     tpfree ( ( char * ) ptr_fml_ibuf );
     return -1;
   }

   if(DEBUG_MSG_LVL_3)
   {
     fn_userlog(c_ServiceName, "1. st_undpstn_crrnt.c_mtm_flg = :%c:", st_undpstn_crrnt.c_mtm_flg );
   }

  /**** If a position doesnot exists, initialise the position values to default ****/

  if ( SQLCODE == NO_DATA_FOUND )
  {
    strcpy( st_undpstn_crrnt.c_cln_mtch_accnt, st_first_ordbk.c_cln_mtch_accnt );
    strcpy( st_undpstn_crrnt.c_xchng_cd, st_first_ordbk.c_xchng_cd );
    strcpy( st_undpstn_crrnt.c_undrlyng, st_first_ordbk.c_undrlyng );
    st_undpstn_crrnt.c_indstk  = st_first_ordbk.c_ctgry_indstk;
    st_undpstn_crrnt.l_uibuy_qty= 0;
    st_undpstn_crrnt.d_uibuy_val= 0;
    st_undpstn_crrnt.l_uisell_qty= 0;
    st_undpstn_crrnt.d_uisell_val= 0;
    st_undpstn_crrnt.l_uexbuy_qty= 0;
    st_undpstn_crrnt.d_uexbuy_val= 0;
    st_undpstn_crrnt.l_uexsell_qty= 0;
    st_undpstn_crrnt.d_uexsell_val= 0;
    st_undpstn_crrnt.l_ubuy_exctd_qty= 0;
    st_undpstn_crrnt.l_usell_exctd_qty = 0;
    st_undpstn_crrnt.c_uopnpstn_flw = 'N';
    st_undpstn_crrnt.l_uopnpstn_qty = 0;
    st_undpstn_crrnt.d_uopnpstn_val = 0;
    st_undpstn_crrnt.d_umtm_opn_val = 0;
    st_undpstn_crrnt.d_initial_mrgn = 0;
    st_undpstn_crrnt.d_span_wemult_mrgn = 0;
    st_undpstn_crrnt.d_eba_expr_mrgn  = 0;
    st_undpstn_crrnt.d_uspan_wenov_mrgn = 0;
    st_undpstn_crrnt.d_multpr = 0;
    st_undpstn_crrnt.d_uspan_nenov_mrgn = 0;
    st_undpstn_crrnt.d_net_optn_val = 0;
    st_undpstn_crrnt.d_min_mrgn = 0;
    st_undpstn_crrnt.d_blckd_pl = 0;
    st_undpstn_crrnt.d_reqd_initial_mrgn  = 0;
    st_undpstn_crrnt.d_umtm_opn_val= 0;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.c_cln_mtch_accnt          |%s|",st_undpstn_crrnt.c_cln_mtch_accnt);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.c_xchng_cd                |%s|",st_undpstn_crrnt.c_xchng_cd);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.c_undrlyng                |%s|",st_undpstn_crrnt.c_undrlyng);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.c_indstk                  |%c|",st_undpstn_crrnt.c_indstk);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.l_uibuy_qty               |%ld|",st_undpstn_crrnt.l_uibuy_qty);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.d_uibuy_val               |%lf|",st_undpstn_crrnt.d_uibuy_val);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.l_uisell_qty              |%ld|",st_undpstn_crrnt.l_uisell_qty);
    fn_userlog(c_ServiceName, "?st_undpstn_crrnt.d_uisell_val             |%lf|",st_undpstn_crrnt.d_uisell_val);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.l_uexbuy_qty              |%ld|",st_undpstn_crrnt.l_uexbuy_qty);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.d_uexbuy_val              |%lf|",st_undpstn_crrnt.d_uexbuy_val);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.l_uexsell_qty             |%ld|",st_undpstn_crrnt.l_uexsell_qty);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.d_uexsell_val             |%lf|",st_undpstn_crrnt.d_uexsell_val);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.l_ubuy_exctd_qty          |%ld|",st_undpstn_crrnt.l_ubuy_exctd_qty);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.l_usell_exctd_qty         |%ld|",st_undpstn_crrnt.l_usell_exctd_qty);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.c_uopnpstn_flw            |%c|",st_undpstn_crrnt.c_uopnpstn_flw);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.l_uopnpstn_qty            |%ld|",st_undpstn_crrnt.l_uopnpstn_qty);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.d_uopnpstn_val            |%lf|",st_undpstn_crrnt.d_uopnpstn_val);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.d_umtm_opn_val            |%lf|",st_undpstn_crrnt.d_umtm_opn_val);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.d_initial_mrgn            |%lf|",st_undpstn_crrnt.d_initial_mrgn);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.d_span_wemult_mrgn        |%lf|",st_undpstn_crrnt.d_span_wemult_mrgn);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.d_eba_expr_mrgn           |%lf|",st_undpstn_crrnt.d_eba_expr_mrgn);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.d_uspan_wenov_mrgn        |%lf|",st_undpstn_crrnt.d_uspan_wenov_mrgn);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.d_multpr                  |%lf|",st_undpstn_crrnt.d_multpr);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.d_uspan_nenov_mrgn        |%lf|",st_undpstn_crrnt.d_uspan_nenov_mrgn);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.d_net_optn_val            |%lf|",st_undpstn_crrnt.d_net_optn_val);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.d_min_mrgn                |%lf|",st_undpstn_crrnt.d_min_mrgn);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.d_blckd_pl                |%lf|",st_undpstn_crrnt.d_blckd_pl);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.d_reqd_initial_mrgn       |%lf|",st_undpstn_crrnt.d_reqd_initial_mrgn);
    fn_userlog(c_ServiceName, "st_undpstn_crrnt.d_umtm_opn_val            |%lf|",st_undpstn_crrnt.d_umtm_opn_val);
  }

  EXEC  SQL
    SELECT  SPN_PRTFL1_SEQ.nextval
    INTO    :l_prtfl_seq1
    FROM    DUAL;

  if ( SQLCODE  !=  0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31180",SQLMSG, c_err_msg);
    tpfree ( ( char * ) ptr_fml_ibuf );
    tpfree((char *)ptr_fml_obuf);
    return  -1;
  }

  EXEC  SQL
    SELECT  SPN_PRTFL1_SEQ.nextval
    INTO    :l_prtfl_seq2
    FROM    DUAL;

  if ( SQLCODE  !=  0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31185",SQLMSG, c_err_msg);
    tpfree ( ( char * ) ptr_fml_ibuf );
    tpfree((char *)ptr_fml_obuf);
    return  -1;
  }

  MEMSET(c_inp_strng);
  MEMSET(c_inp_strng11);
  MEMSET(c_inp_strng1);
  MEMSET(c_inp_strng2);
  MEMSET(c_inp_strng22);

  strcpy(c_inp_strng1,"1^");
  strcpy(c_inp_strng2,"|");

  if(strcmp(sql_xchng_cd,"NFO") == 0)
  {
    strcat(c_inp_strng1,"NSE^");
  }
  else if(strcmp(sql_xchng_cd,"BFO") == 0)
  {
    strcat(c_inp_strng1,"BSE^");
  }

  sprintf(c_seq_num1,"%ld",l_prtfl_seq1);
  sprintf(c_seq_num2,"%ld",l_prtfl_seq2);

  strcat( c_inp_strng1 , c_seq_num1 );
  strcat( c_inp_strng2 , c_seq_num2 );

  strcat(c_inp_strng1,"^");
  strcat(c_inp_strng2,"^");

  EXEC SQL
    SELECT  FCB_UNDRLYNG_BSKT_ID
    INTO    :l_basket_id
    FROM    FCB_FO_CLN_BSKT_ALLTD
    WHERE   FCB_CLN_LVL = ( SELECT  CLM_CLNT_LVL
                            FROM    CLM_CLNT_MSTR
                            WHERE   CLM_MTCH_ACCNT = :sql_cln_mtch_accnt);
  if ( SQLCODE != 0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31190",SQLMSG, c_err_msg);
    tpfree ( ( char * ) ptr_fml_ibuf );
    tpfree((char *)ptr_fml_obuf);
    return  -1;
  }

  /** Prepare a list of contracts from contract position table **/

  EXEC SQL ALLOCATE :sys_cursor;

  EXEC SQL EXECUTE
    BEGIN
      OPEN    :sys_cursor FOR
      SELECT  FCP_CLM_MTCH_ACCNT,
              FCP_XCHNG_CD,
              FCP_PRDCT_TYP,
              FCP_INDSTK,
              FCP_UNDRLYNG,
              TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
              FCP_EXER_TYP,
              FCP_STRK_PRC,
              FCP_OPT_TYP,
              FCP_IBUY_QTY,
              FCP_IBUY_ORD_VAL,
              FCP_ISELL_QTY,
              FCP_ISELL_ORD_VAL,
              FCP_EXBUY_QTY,
              FCP_EXBUY_ORD_VAL,
              FCP_EXSELL_QTY,
              FCP_EXSELL_ORD_VAL,
              FCP_BUY_EXCTD_QTY,
              FCP_SELL_EXCTD_QTY,
              FCP_OPNPSTN_FLW,
              FCP_OPNPSTN_QTY,
              FCP_OPNPSTN_VAL,
              FCP_MTM_OPN_VAL
        FROM  FCP_FO_SPN_CNTRCT_PSTN
        WHERE FCP_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
        AND   FCP_XCHNG_CD        = :sql_xchng_cd
        AND   FCP_UNDRLYNG        = :sql_undrlyng
        ORDER BY FCP_EXPRY_DT ASC;
      END;
    END-EXEC;

    if ( SQLCODE != 0 )
    {
      EXEC SQL FREE :sys_cursor;
      fn_errlog ( c_ServiceName, "S31195", SQLMSG, c_err_msg );
      tpfree ( ( char * ) ptr_fml_ibuf );
      tpfree((char *)ptr_fml_obuf);
      return -1;
    }

    c_pos_avl = 'N';

    /** Fetch one contract at a time from the list. If the fetched  **/
    /** contract is the one we need to apply the change apply it.   **/
    /** Else simply add the contract to  underlying level position  **/

    while ( 1 )
    {
      d_expsr_mrgn      = 0.0;
      d_min_expsr_mrgn  = 0.0;
      d_cntrct_pl       = 0.0;
      d_ltp             = 0.0;
      d_clsng_prc       = 0.0;
      d_strike_prc      = 0.0;
      st_cntrct_pstn_crrnt.l_ibuy_qty = 0;
      st_cntrct_pstn_crrnt.d_ibuy_ord_val = 0.0;
      st_cntrct_pstn_crrnt.l_isell_qty = 0;
      st_cntrct_pstn_crrnt.d_isell_ord_val= 0.0;
      st_cntrct_pstn_crrnt.l_exbuy_qty = 0;
      st_cntrct_pstn_crrnt.d_exbuy_ord_val= 0.0;
      st_cntrct_pstn_crrnt.l_exsell_qty = 0;
      st_cntrct_pstn_crrnt.d_exsell_ord_val = 0.0;
      st_cntrct_pstn_crrnt.l_buy_exctd_qty = 0;
      st_cntrct_pstn_crrnt.l_sell_exctd_qty=0;
      st_cntrct_pstn_crrnt.l_opnpstn_qty=0;
      st_cntrct_pstn_crrnt.d_opnpstn_val = 0.0;
      st_cntrct_pstn_crrnt.d_mtm_opn_val = 0.0;

      MEMSET(c_exp_dt);

      EXEC SQL FETCH  :sys_cursor
               INTO   :st_cntrct_pstn_crrnt.c_cln_mtch_accnt,
                      :st_cntrct_pstn_crrnt.c_xchng_cd,
                      :st_cntrct_pstn_crrnt.c_prd_typ,
                      :st_cntrct_pstn_crrnt.c_ctgry_indstk,
                      :st_cntrct_pstn_crrnt.c_undrlyng,
                      :c_exp_dt,
                      :st_cntrct_pstn_crrnt.c_exer_typ,
                      :st_cntrct_pstn_crrnt.l_strike_prc,
                      :st_cntrct_pstn_crrnt.c_opt_typ,
                      :st_cntrct_pstn_crrnt.l_ibuy_qty,
                      :st_cntrct_pstn_crrnt.d_ibuy_ord_val,
                      :st_cntrct_pstn_crrnt.l_isell_qty,
                      :st_cntrct_pstn_crrnt.d_isell_ord_val,
                      :st_cntrct_pstn_crrnt.l_exbuy_qty,
                      :st_cntrct_pstn_crrnt.d_exbuy_ord_val,
                      :st_cntrct_pstn_crrnt.l_exsell_qty,
                      :st_cntrct_pstn_crrnt.d_exsell_ord_val,
                      :st_cntrct_pstn_crrnt.l_buy_exctd_qty,
                      :st_cntrct_pstn_crrnt.l_sell_exctd_qty,
                      :st_cntrct_pstn_crrnt.c_opnpstn_flw,
                      :st_cntrct_pstn_crrnt.l_opnpstn_qty,
                      :st_cntrct_pstn_crrnt.d_opnpstn_val,
                      :st_cntrct_pstn_crrnt.d_mtm_opn_val;

      if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          fn_userlog(c_ServiceName," Inside NO_DATA_FOUND .");
          break;
        }

        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        fn_errlog ( c_ServiceName, "S31200", SQLMSG, c_err_msg );
        tpfree ( ( char * ) ptr_fml_ibuf );
        tpfree((char *)ptr_fml_obuf);
        return -1;
      }

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.c_cln_mtch_accnt |%s|",st_cntrct_pstn_crrnt.c_cln_mtch_accnt);
        fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.c_xchng_cd       |%s|",st_cntrct_pstn_crrnt.c_xchng_cd);
        fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.c_undrlyng       |%s|",st_cntrct_pstn_crrnt.c_undrlyng);
        fn_userlog(c_ServiceName,"SPAN  c_exp_dt                              |%s|",c_exp_dt.arr);
        fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.l_buy_exctd_qty:%ld:",st_cntrct_pstn_crrnt.l_buy_exctd_qty);
        fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.l_sel_exctd_qty%ld:",st_cntrct_pstn_crrnt.l_sell_exctd_qty);
        fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.l_ibuy_qty     :%ld:",st_cntrct_pstn_crrnt.l_ibuy_qty);
        fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.l_isell_qty    :%ld:",st_cntrct_pstn_crrnt.l_isell_qty);
        fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.l_exbuy_qty    :%ld:",st_cntrct_pstn_crrnt.l_exbuy_qty);
        fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.l_exsell_qty   :%ld:",st_cntrct_pstn_crrnt.l_exsell_qty);
        fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.d_ibuy_ord_val :%lf:",st_cntrct_pstn_crrnt.d_ibuy_ord_val);
        fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.d_isell_ord_val :%lf:",st_cntrct_pstn_crrnt.d_isell_ord_val);
        fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.d_exbuy_ord_val:%lf:",st_cntrct_pstn_crrnt.d_exbuy_ord_val);
        fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.d_exsell_ord_val:%lf:",st_cntrct_pstn_crrnt.d_exsell_ord_val);
        fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.d_opnpstn_val   :%lf:",st_cntrct_pstn_crrnt.d_opnpstn_val);
        fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.d_mtm_opn_val   :%lf:",st_cntrct_pstn_crrnt.d_mtm_opn_val);
        fn_userlog(c_ServiceName,"SPAN st_cntrct_pstn_crrnt.c_opnpstn_flw    |%c|",st_cntrct_pstn_crrnt.c_opnpstn_flw);
      }

      SETNULL( c_exp_dt );
      strcpy ( st_cntrct_pstn_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
      rtrim(st_cntrct_pstn_crrnt.c_xchng_cd);
      rtrim(st_cntrct_pstn_crrnt.c_undrlyng);
      rtrim(st_cntrct_pstn_crrnt.c_expry_dt);

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"ROLLOVER st_cntrct_pstn_crrnt.l_opnpstn_qty is :%ld:",st_cntrct_pstn_crrnt.l_opnpstn_qty);
        fn_userlog(c_ServiceName,"ROLLOVER st_cntrct_pstn_crrnt.l_ibuy_qty is :%ld:",st_cntrct_pstn_crrnt.l_ibuy_qty);
        fn_userlog(c_ServiceName,"ROLLOVER st_cntrct_pstn_crrnt.l_exbuy_qty is :%ld:",st_cntrct_pstn_crrnt.l_exbuy_qty);
        fn_userlog(c_ServiceName,"ROLLOVER st_cntrct_pstn_crrnt.l_isell_qty is :%ld:",st_cntrct_pstn_crrnt.l_isell_qty);
        fn_userlog(c_ServiceName,"ROLLOVER st_cntrct_pstn_crrnt.l_exsell_qty  is :%ld:",st_cntrct_pstn_crrnt.l_exsell_qty);
      }

      l_max_opn_qty = st_cntrct_pstn_crrnt.l_opnpstn_qty  +  fn_maxl(st_cntrct_pstn_crrnt.l_ibuy_qty,st_cntrct_pstn_crrnt.l_exbuy_qty) ;

      l_min_opn_qty = st_cntrct_pstn_crrnt.l_opnpstn_qty  +  fn_maxl(abs(st_cntrct_pstn_crrnt.l_isell_qty),abs(st_cntrct_pstn_crrnt.l_exsell_qty)) * -1  ;

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"ROLLOVER l_max_opn_qty is :%ld:",l_max_opn_qty);
        fn_userlog(c_ServiceName,"ROLLOVER l_min_opn_qty is :%ld:",l_min_opn_qty);
      }

      i_expsr_rtrn  = fn_cal_expsr  ( c_ServiceName,
                                      st_cntrct_pstn_crrnt,
                                      l_basket_id,
                                      &d_expsr_mrgn,
                                      &d_min_expsr_mrgn,
                                      &d_mltplr,
                                      c_err_msg
                                    );

      if ( i_expsr_rtrn != 0 )
      {
         fn_errlog(c_ServiceName, "S31205", LIBMSG, c_err_msg );
         EXEC SQL CLOSE :sys_cursor;
         tpfree((char *)ptr_fml_obuf);
         tpfree((char *)ptr_fml_ibuf);
         return -1;
      }

      EXEC SQL
        SELECT  NVL(FTQ_LST_TRD_PRC,0),
                NVL(FTQ_CLS_PRC,0)
        INTO    :d_ltp,
                :d_clsng_prc
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :st_cntrct_pstn_crrnt.c_xchng_cd
        AND     FTQ_PRDCT_TYP = :st_cntrct_pstn_crrnt.c_prd_typ
        AND     FTQ_UNDRLYNG  = :st_cntrct_pstn_crrnt.c_undrlyng
        AND     FTQ_EXPRY_DT  = :c_exp_dt
        AND     FTQ_EXER_TYP  = :st_cntrct_pstn_crrnt.c_exer_typ
        AND     FTQ_OPT_TYP   = :st_cntrct_pstn_crrnt.c_opt_typ
        AND     FTQ_STRK_PRC  = :st_cntrct_pstn_crrnt.l_strike_prc;

      if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog ( c_ServiceName, "S31210", SQLMSG, c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
        tpfree((char *)ptr_fml_obuf);
        tpfree((char *)ptr_fml_ibuf);
        return -1;
      }

      if( SQLCODE == NO_DATA_FOUND )
      {
        d_ltp = 0.0;
        d_clsng_prc = 0.0;
      }

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"SPAN - d_ltp |%lf|",d_ltp);
        fn_userlog(c_ServiceName,"SPAN - st_cntrct_pstn_crrnt.l_opnpstn_qty |%ld|",st_cntrct_pstn_crrnt.l_opnpstn_qty);
        fn_userlog(c_ServiceName,"SPAN - st_cntrct_pstn_crrnt.d_opnpstn_val |%lf|",st_cntrct_pstn_crrnt.d_opnpstn_val);
      }

      if ( st_cntrct_pstn_crrnt.l_opnpstn_qty != 0 )
      {
        if ( st_cntrct_pstn_crrnt.c_prd_typ == 'O')
        {
          if( st_cntrct_pstn_crrnt.l_opnpstn_qty < 0 )
          {
            if(DEBUG_MSG_LVL_3)
            {
              fn_userlog(c_ServiceName,"SPAN - Inside Option Profit / Loss Case.");
            }
            d_cntrct_pl = (double) abs(st_cntrct_pstn_crrnt.l_opnpstn_qty)  * ( d_clsng_prc - d_ltp);
          }

        }
        else
        {
          if (  st_cntrct_pstn_crrnt.c_prd_typ  ==  'F' )
          {
            if(DEBUG_MSG_LVL_3)
            {
              fn_userlog(c_ServiceName,"SPAN - Inside Option Profit / Loss Case.");
            }

            if( st_cntrct_pstn_crrnt.l_opnpstn_qty  > 0 )
            {

              d_cntrct_pl = ( d_ltp * (double) st_cntrct_pstn_crrnt.l_opnpstn_qty ) - st_cntrct_pstn_crrnt.d_opnpstn_val;

            }
            else if ( st_cntrct_pstn_crrnt.l_opnpstn_qty < 0 )
            {
              d_cntrct_pl = fabs(st_cntrct_pstn_crrnt.d_opnpstn_val)  -  ( d_ltp * (double) abs(st_cntrct_pstn_crrnt.l_opnpstn_qty) );
            }
          }
        }
      }

      d_ltp = d_ltp / 100;


      EXEC SQL
        SELECT  SEM_MAP_VL
        INTO    :c_stock_cd
        FROM    SEM_STCK_MAP
        WHERE   SEM_STCK_CD = :st_cntrct_pstn_crrnt.c_undrlyng
        AND     SEM_ENTTY   = decode(:sql_xchng_cd,'NFO',3,'BFO',14)  ;

      if ( SQLCODE  !=  0 )
      {
        fn_errlog ( c_ServiceName, "S31215", SQLMSG, c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
        tpfree((char *)ptr_fml_obuf);
        tpfree((char *)ptr_fml_ibuf);
        return -1;
      }

      SETNULL(c_stock_cd);

      EXEC SQL
        SELECT to_char(to_date(:st_cntrct_pstn_crrnt.c_expry_dt,'DD-Mon-YYYY'),'dd-Mon-YY')
        INTO  :c_expry_dt
        FROM  DUAL;

      if ( SQLCODE  !=  0 )
      {
        fn_errlog ( c_ServiceName, "S31220", SQLMSG, c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
        tpfree((char *)ptr_fml_obuf);
        tpfree((char *)ptr_fml_ibuf);
        return -1;
      }

      d_strike_prc  = (double) st_cntrct_pstn_crrnt.l_strike_prc / 100.00  ;
      sprintf(c_strk_prc,"%lf",d_strike_prc);
      fn_spn_rtrim(c_strk_prc,'0');
      fn_spn_rtrim(c_strk_prc,'.');

      if( l_cntr  ==  0 )
      {
        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"SPAN  - l_cntr Is :%ld:",l_cntr);
        }

        if(st_cntrct_pstn_crrnt.c_prd_typ ==  'F')
        {
          sprintf(c_inp_strng11,"%s^%s~%c:%s^%ld^%lf",st_cntrct_pstn_crrnt.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,l_max_opn_qty,d_first_ltp);

        strcat(c_inp_strng1,c_inp_strng11);

        sprintf(c_inp_strng22,"%s^%s~%c:%s^%ld^%lf",st_cntrct_pstn_crrnt.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,l_min_opn_qty,d_first_ltp);

        strcat(c_inp_strng2,c_inp_strng22);

        }
        else
        {
          sprintf(c_inp_strng11,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntrct_pstn_crrnt.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,st_cntrct_pstn_crrnt.c_opt_typ,st_cntrct_pstn_crrnt.c_exer_typ,c_strk_prc,l_max_opn_qty,d_first_ltp);

          strcat(c_inp_strng1,c_inp_strng11);


          sprintf(c_inp_strng22,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntrct_pstn_crrnt.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,st_cntrct_pstn_crrnt.c_opt_typ,st_cntrct_pstn_crrnt.c_exer_typ,c_strk_prc,l_min_opn_qty,d_first_ltp);

          strcat(c_inp_strng2,c_inp_strng22);

        }
      }
      else
      {
        if(st_cntrct_pstn_crrnt.c_prd_typ  ==  'F')
        {
          sprintf(c_inp_strng11,"%s~%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,l_max_opn_qty,d_first_ltp);

          strcat(c_inp_strng1,c_inp_strng11);

          sprintf(c_inp_strng22,"%s~%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,l_min_opn_qty,d_first_ltp);

          strcat(c_inp_strng2,c_inp_strng22);

        }
        else
        {
          sprintf(c_inp_strng11,"%s~%c:%s:%c%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,st_cntrct_pstn_crrnt.c_opt_typ,st_cntrct_pstn_crrnt.c_exer_typ,c_strk_prc,l_max_opn_qty,d_first_ltp);

          strcat(c_inp_strng1,c_inp_strng11);

          sprintf(c_inp_strng22,"%s~%c:%s:%c%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,st_cntrct_pstn_crrnt.c_opt_typ,st_cntrct_pstn_crrnt.c_exer_typ,c_strk_prc,l_min_opn_qty,d_first_ltp);

          strcat(c_inp_strng2,c_inp_strng22);

        }
      }

      if(DEBUG_MSG_LVL_5)
      {
        fn_userlog(c_ServiceName," Input String c_inp_strng11 is :%s:",c_inp_strng11);
        fn_userlog(c_ServiceName," Input String c_inp_strng22 is :%s:",c_inp_strng22);
        fn_userlog ( c_ServiceName, "Expiry date       :%s:", c_exp_dt.arr );
        fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntrct_pstn_crrnt.l_ibuy_qty );
        fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntrct_pstn_crrnt.d_ibuy_ord_val);
        fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntrct_pstn_crrnt.l_isell_qty );
        fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntrct_pstn_crrnt.d_isell_ord_val );
        fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntrct_pstn_crrnt.l_exbuy_qty );
        fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntrct_pstn_crrnt.d_exbuy_ord_val );
        fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntrct_pstn_crrnt.l_exsell_qty );
        fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", st_cntrct_pstn_crrnt.d_exsell_ord_val );
        fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntrct_pstn_crrnt.l_buy_exctd_qty );
        fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_cntrct_pstn_crrnt.l_sell_exctd_qty );
        fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntrct_pstn_crrnt.l_opnpstn_qty );
        fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntrct_pstn_crrnt.d_opnpstn_val);
        fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntrct_pstn_crrnt.d_mtm_opn_val );
        fn_userlog ( c_ServiceName, "d_undrlyng_pl val    :%lf:", d_undrlyng_pl );
        fn_userlog ( c_ServiceName, "d_cntrct_pl val    :%lf:", d_cntrct_pl );
      }

    strcat(c_inp_strng1,",");
    strcat(c_inp_strng2,",");

    fn_userlog ( c_ServiceName, " Expiry date :%s: d_cntrct_pl :%lf: d_expsr_mrgn :%lf:", c_exp_dt.arr,d_cntrct_pl,d_expsr_mrgn);
    l_cntr++;
    d_undrlyng_pl = d_undrlyng_pl + d_cntrct_pl ;
    d_expsr     = d_expsr_mrgn  + d_expsr ;
    d_min_expsr = d_min_expsr_mrgn  + d_min_expsr ;
  } /*** END of while loop ***/

  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

  
  l_length1 = strlen(c_inp_strng1);

  if( c_inp_strng1[l_length1  - 1 ] == ',')
  {
    c_inp_strng1[l_length1 -1]  ='\0';
  }

  l_length2 = strlen(c_inp_strng2);

  if( c_inp_strng2[l_length2  - 1 ] == ',')
  {
    c_inp_strng2[l_length2 -1]  ='\0';
  }

  if ( st_cntrct_pstn_md_rc.l_opnpstn_qty > 0 )
  {
    st_cntrct_pstn_md_rc.c_opnpstn_flw = BUY;
  }
  else if ( st_cntrct_pstn_md_rc.l_opnpstn_qty < 0 )
  {
    st_cntrct_pstn_md_rc.c_opnpstn_flw = SELL;
  }
  else
  {
    st_cntrct_pstn_md_rc.c_opnpstn_flw = NEUTRAL;
  }

  if(DEBUG_MSG_LVL_5) /*** debug level to avoid core ***/
  { 
    fn_userlog ( c_ServiceName, "c_inp_strng1 is :%s: and length :%ld:",c_inp_strng1,strlen(c_inp_strng1));
    fn_userlog ( c_ServiceName, "c_inp_strng2 is :%s: and length :%ld:",c_inp_strng2,strlen(c_inp_strng2));
  }
  strcpy(c_inp_strng,c_inp_strng1);
  strcat(c_inp_strng,c_inp_strng2);
  strcat(c_inp_strng,"\n");

  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"Input String |%s|",c_inp_strng);
  }

  if ( Fadd32 (ptr_fml_ibuf,FFO_PIPE_ID,(char *)st_first_ordbk.c_pipe_id,0) ==  -1 )
  {
    fn_errlog( c_ServiceName, "S31225",FMLMSG , c_err_msg );
    EXEC SQL CLOSE :sys_cursor;
    tpfree((char *)ptr_fml_obuf);
    tpfree((char *)ptr_fml_ibuf);
    return -1;
  }

  if ( Fadd32 (ptr_fml_ibuf,FFO_REMARKS,(char *)c_inp_strng,0)  ==  -1 )
  {
    fn_errlog( c_ServiceName, "S31230",FMLMSG , c_err_msg );
    EXEC SQL CLOSE :sys_cursor;
    tpfree((char *)ptr_fml_obuf);
    tpfree((char *)ptr_fml_ibuf);
    return -1;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
  }

  i_rtrn_cd1  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_ibuf,0,(char **)&ptr_fml_obuf,&li_len_tobuf,0);

  if( i_rtrn_cd1 != 0 )
  {
    fn_errlog( c_ServiceName, "S31235",TPMSG , c_err_msg );
    EXEC SQL CLOSE :sys_cursor;
    EXEC SQL FREE :sys_cursor;
    tpfree((char *)ptr_fml_obuf);
    tpfree((char *)ptr_fml_ibuf);
    return -1;
  }

  if ( Fget32 (ptr_fml_obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng,0)  ==  -1 )
  {
    fn_errlog( c_ServiceName, "S31240",FMLMSG , c_err_msg );
    EXEC SQL CLOSE :sys_cursor;
    tpfree((char *)ptr_fml_obuf);
    tpfree((char *)ptr_fml_ibuf);
    return -1;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Output String Is :%s:",c_op_strng);
  }

  /*** Ver 7.0 Starts Here ***/
  i_ret_val = fn_get_bodspan_mrgn(ptr_fml_ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31245",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_obuf);
      tpfree((char *)ptr_fml_ibuf);
      return -1;
    }

   if(DEBUG_MSG_LVL_4)
   {
     fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
   }
  /*** Ver 7.0  Ends here ***/

  strcpy(c_op_strng1,strtok(c_op_strng,"|"));
  strcpy(c_op_strng2,strtok(null_ptr,"|"));

  strcpy(c_mrgn_indctr,strtok(c_op_strng1,"^"));
  strcpy(c_seq_num1,strtok(null_ptr,"^"));
  strcpy(c_xchng_cd1,strtok(null_ptr,"^"));  
  strcpy(c_mtch_accnt1,strtok(null_ptr,"^"));
  strcpy(c_spn_mrgn1,strtok(null_ptr,"^"));
  strcpy(c_nov1,strtok(null_ptr,"^"));
  strcpy(c_total_mrgn1,strtok(null_ptr,"^"));

  strcpy(c_seq_num2,strtok(c_op_strng2,"^"));
  strcpy(c_mtch_accnt2,strtok(null_ptr,"^"));
  strcpy(c_spn_mrgn2,strtok(null_ptr,"^"));
  strcpy(c_nov2,strtok(null_ptr,"^"));
  strcpy(c_total_mrgn2,strtok(null_ptr,"^"));

  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"SPAN c_mtch_accnt1 Is :%s:",c_mtch_accnt1);
  }

  if ( c_mtch_accnt1[0] == '1' || c_mtch_accnt1[0] == '2' || c_mtch_accnt1[0] == '3' )
  {
    fn_errlog( c_ServiceName, "S31250",LIBMSG , c_err_msg );
    fn_userlog(c_ServiceName,"Service Return Error.");
    EXEC SQL CLOSE :sys_cursor;
    tpfree((char *)ptr_fml_obuf);
    tpfree((char *)ptr_fml_ibuf);
    return -1 ;
  }

  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"c_total_mrgn1 Is :%s:",c_total_mrgn1);
    fn_userlog(c_ServiceName,"c_total_mrgn2 Is :%s:",c_total_mrgn2);
  }

  /*** Ver 7.0  Starts here ***/
  d_spn_bmrgn = fn_maxd(d_spn_bmrgn1,d_spn_bmrgn2) * 100;
  d_bnov      = fn_maxd(d_bnov1,d_bnov2) * 100;
  d_total_bmrgn = fn_maxd(d_total_bmrgn1,d_total_bmrgn2) * 100;

  if(DEBUG_MSG_LVL_4)
  {
    fn_userlog(c_ServiceName,"d_spn_bmrgn :%lf: d_bnov :%lf: d_total_bmrgn:%lf:",d_spn_bmrgn,d_bnov,d_total_bmrgn);
  }
  /*** Ver 7.0  Ends here ***/


    d_spn_mrgn1   = atof(c_spn_mrgn1);
    d_spn_mrgn2   = atof(c_spn_mrgn2);
    d_nov1        = atof(c_nov1);
    d_nov2        = atof(c_nov2);
    d_total_mrgn1 = atof(c_total_mrgn1);
    d_total_mrgn2 = atof(c_total_mrgn2);

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"d_total_mrgn1 Is :%lf:",d_total_mrgn1);
      fn_userlog(c_ServiceName,"d_total_mrgn2 Is :%lf:",d_total_mrgn2);
    }

    st_undpstn_tobe.d_uspan_nenov_mrgn  = fn_maxd(d_spn_mrgn1,d_spn_mrgn2) * 100;
    st_undpstn_tobe.d_net_optn_val      = fn_maxd(d_nov1,d_nov2) * 100;
    st_undpstn_tobe.d_uspan_wenov_mrgn  = fn_maxd(d_total_mrgn1,d_total_mrgn2) * 100 ;

    /*** Ver 7.0  Starts Here ***/
    st_undpstn_tobe.d_uspan_nenov_mrgn  = fn_maxd(st_undpstn_tobe.d_uspan_nenov_mrgn,d_spn_bmrgn);
    st_undpstn_tobe.d_net_optn_val = fn_maxd(st_undpstn_tobe.d_net_optn_val,d_bnov);
    st_undpstn_tobe.d_uspan_wenov_mrgn = fn_maxd(st_undpstn_tobe.d_uspan_wenov_mrgn,d_total_bmrgn);
    /*** Ver 7.0  Ends Here ***/

    d_spn_mrgn    = st_undpstn_tobe.d_uspan_nenov_mrgn    ;
    d_nov         = st_undpstn_tobe.d_net_optn_val        ;
    d_total_mrgn  = st_undpstn_tobe.d_uspan_wenov_mrgn    ;

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"SPAN - SPAN MARGIN Is :%lf:",d_spn_mrgn);
      fn_userlog(c_ServiceName,"SPAN - SPAN MARGIN Is :%lf:",st_undpstn_tobe.d_uspan_wenov_mrgn);
    }

    i_returncode  = fn_cal_mrgn ( c_ServiceName,
                                  d_total_mrgn,
                                  d_mltplr,
                                  d_expsr,
                                  d_min_expsr,
                                  &d_min_mrgn,
                                  &d_intl_mrgn,
                                  c_err_msg
                                );

    if ( i_returncode !=  0 )
    {
      fn_errlog( c_ServiceName, "S31255",LIBMSG , c_err_msg );
      fn_userlog(c_ServiceName,"Service Return Error.");
      EXEC SQL CLOSE :sys_cursor;
      tpfree((char *)ptr_fml_obuf);
      tpfree((char *)ptr_fml_ibuf);
      return -1 ;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"SPAN  - SPAN MARGIN IS :%lf:",d_spn_mrgn);
      fn_userlog(c_ServiceName,"SPAN  - NOV IS :%lf:",d_nov);
      fn_userlog(c_ServiceName,"SPAN  - Total Margin  IS :%lf:",d_total_mrgn);
      fn_userlog(c_ServiceName,"SPAN  - Exposure  IS :%lf:",d_expsr);
      fn_userlog(c_ServiceName,"SPAN  - Min. Margin IS :%lf:",d_min_mrgn);
      fn_userlog(c_ServiceName,"SPAN  - Initial Margin IS :%lf:",d_intl_mrgn);
    }

    st_undpstn_tobe.d_multpr            = d_mltplr      ;
    st_undpstn_tobe.d_eba_expr_mrgn     = (long long)d_expsr    ;
    st_undpstn_tobe.d_span_wemult_mrgn  = (long long)d_total_mrgn * d_mltplr ;
    st_undpstn_tobe.d_min_mrgn          = d_min_mrgn ;
    st_undpstn_tobe.d_reqd_initial_mrgn = (long long)d_intl_mrgn ;

    strcpy( c_narration_id , ON_ROLLOVER_ORDER_PLACEMENT);
    c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog ( c_ServiceName, "NEW ORDER REQUEST");
      fn_userlog ( c_ServiceName,"st_undpstn_tobe.d_reqd_initial_mrgn |%lf|",st_undpstn_tobe.d_reqd_initial_mrgn);
    }

    EXEC SQL
      SELECT  NVL(FUS_BLCKD_PL,0)
      INTO    :d_oblckd_amnt
      FROM    FUS_FO_UNDRLYNG_SPN_PSTN
      WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
      AND     FUS_UNDRLYNG        = :sql_undrlyng
      AND     FUS_XCHNG_CD        = :sql_xchng_cd;

      if ( SQLCODE != 0 && SQLCODE  !=  NO_DATA_FOUND)
      {
        fn_errlog( c_ServiceName, "S31260",SQLMSG , c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
        tpfree((char *)ptr_fml_obuf);
        tpfree((char *)ptr_fml_ibuf);
        return -1;
      }

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"SPAN  - d_undrlyng_pl Is :%lf:",d_undrlyng_pl);
        fn_userlog(c_ServiceName,"SPAN  - d_oblckd_amnt Is :%lf:",d_oblckd_amnt);
        fn_userlog(c_ServiceName,"SPAN  - st_undpstn_crrnt.d_initial_mrgn Is :%lf:",st_undpstn_crrnt.d_initial_mrgn);
        fn_userlog(c_ServiceName,"SPAN  - st_undpstn_tobe.d_reqd_initial_mrgn Is :%lf:",st_undpstn_tobe.d_reqd_initial_mrgn);
      }

      if(st_first_ordbk.c_spl_flg == ROLLOVER_WITH_SPREAD)
      {
      
        fn_userlog(c_ServiceName,"**** SPAN LIB *** PROFIT AND LOSS COMPUTATION for :%s:",sql_cln_mtch_accnt);
        fn_userlog(c_ServiceName,"FLOW :%c:",st_first_ordbk.c_ordr_flw);
        fn_userlog(c_ServiceName,"BASE RATE :%lf:",d_base_rate);
        fn_userlog(c_ServiceName,"ORDER TOTAL QUANTITY :%ld:",st_first_ordbk.l_ord_tot_qty);
        fn_userlog(c_ServiceName,"DETAILS :%s: :%c: :%s: :%s: :%c:",st_first_ordbk.c_xchng_cd,st_first_ordbk.c_prd_typ,st_first_ordbk.c_undrlyng,st_first_ordbk.c_expry_dt,st_first_ordbk.c_exrc_typ);

    
      EXEC SQL
        SELECT  NVL(FTQ_LST_TRD_PRC,0)
        INTO    :d_ltp_frst
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :st_first_ordbk.c_xchng_cd
        AND     FTQ_PRDCT_TYP = :st_first_ordbk.c_prd_typ
        AND     FTQ_UNDRLYNG  = :st_first_ordbk.c_undrlyng
        AND     FTQ_EXPRY_DT  =  to_date(:st_first_ordbk.c_expry_dt,'DD-Mon-YYYY') 
        AND     FTQ_EXER_TYP  = :st_first_ordbk.c_exrc_typ;

      if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog ( c_ServiceName, "S31265", SQLMSG, c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
        tpfree((char *)ptr_fml_obuf);
        tpfree((char *)ptr_fml_ibuf);
        return -1;
      }

      if( SQLCODE == NO_DATA_FOUND )
      {
        d_ltp = 0.0;
      }
        fn_userlog(c_ServiceName,"LTP NOW :%lf:",d_ltp_frst);
 
        if( st_first_ordbk.c_ordr_flw == 'B' ) /*** Sell Position ***/
        {
          d_undrlyng_pl = (d_base_rate * st_first_ordbk.l_ord_tot_qty) -  ( d_ltp_frst * st_first_ordbk.l_ord_tot_qty); 
        }
        else
        {
          d_undrlyng_pl = ( d_ltp_frst * st_first_ordbk.l_ord_tot_qty) - (d_base_rate * st_first_ordbk.l_ord_tot_qty);
        }
        fn_userlog(c_ServiceName,"PROFIT LOSS :%lf:",d_undrlyng_pl);
        fn_userlog(c_ServiceName,"INITIAL MARGIN BLOCKED :%lf:",st_undpstn_crrnt.d_initial_mrgn);
        fn_userlog(c_ServiceName,"INITIAL MARGIN REQUIRED :%lf:",st_undpstn_tobe.d_reqd_initial_mrgn);

        *d_total_diff = st_undpstn_crrnt.d_initial_mrgn - st_undpstn_tobe.d_reqd_initial_mrgn ;
        fn_userlog(c_ServiceName,"TOTAL DIFFERENCE :%lf:",d_total_diff);
        fn_userlog(c_ServiceName,"****************SPAN LIB COMPUTATION ENDS *****************");

      }
      else
      {
        d_undrlyng_pl = d_oblckd_amnt + d_undrlyng_pl ;

        if( d_undrlyng_pl >= 0 )
        {
          *d_total_diff = st_undpstn_crrnt.d_initial_mrgn - st_undpstn_tobe.d_reqd_initial_mrgn + d_undrlyng_pl;
        }
        else
        {
          *d_total_diff = st_undpstn_crrnt.d_initial_mrgn - st_undpstn_tobe.d_reqd_initial_mrgn ;
        }
      }
       if(DEBUG_MSG_LVL_0)
       {
        fn_userlog(c_ServiceName,"SPAN  - d_undrlyng_pl Is :%lf:",d_undrlyng_pl);
        fn_userlog(c_ServiceName,"SPAN  - d_oblckd_amnt Is :%lf:",d_oblckd_amnt);
       }

    *d_total_pnl  = d_undrlyng_pl;

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog ( c_ServiceName, "SPAN Difference in MRGN :%lf:", *d_total_diff );
      fn_userlog ( c_ServiceName, "SPAN BEFORE BLOCKING MARGIN ON ROLLORD d_total_diff :%lf: and d_total_pnl :%lf: andn c_rqst_typ is :%c:",*d_total_diff,*d_total_pnl,c_rqst_typ);
    }

    d_required_amt = 0.0 ;   

 

		if(  c_rqst_typ != EXG_RESPONSE ) /** suchita **/
		{
    if ( *d_total_diff < 0  )
    {
      d_balance_amt  = 0.0;

      i_returncode = fn_upd_spnlimits( c_ServiceName,
                                    ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    c_narration_id,
                                    c_dr_without_lmt_flg,
                                    *d_total_diff,
                                    &d_balance_amt);

      if ( i_returncode != 0 )
      {
        switch ( i_returncode )
        {
          case  INSUFFICIENT_LIMITS :

            fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg );
            EXEC SQL CLOSE :sys_cursor;
            tpfree((char *)ptr_fml_obuf);
            tpfree((char *)ptr_fml_ibuf);

            fn_userlog(c_ServiceName,"The Balance amount :%lf:",d_balance_amt);

            d_required_amt = *d_total_diff + d_balance_amt ;
            if( *d_total_pnl < 0 )
            {
             d_required_amt = d_required_amt + *d_total_pnl;
            }

            d_required_amt = ( (-1) * d_required_amt ) / 100 ;

            sprintf( c_temp_err_msg," < %0.2lf >",d_required_amt);
            strcat(c_err_msg,c_temp_err_msg);
            fn_userlog(c_ServiceName,"PRINTING ERR MSG :%s:",c_err_msg); 
 
            return INSUFFICIENT_LIMITS  ;

         default:

            fn_errlog( c_ServiceName, "S31270",LIBMSG , c_err_msg );
            EXEC SQL CLOSE :sys_cursor;
            tpfree((char *)ptr_fml_obuf);
            tpfree((char *)ptr_fml_ibuf);
            return -1;
        }
      }
    }

    if ( *d_total_pnl < 0 )
    {
     MEMSET(c_narration_id);
     strcpy( c_narration_id , BLOCK_PNL_ON_ROLLOVER_ORDER_PLACEMENT );

      d_balance_amt  = 0.0;

      i_returncode = fn_upd_spnlimits(  c_ServiceName,
                                    ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    c_narration_id,
                                    c_dr_without_lmt_flg,
                                    *d_total_pnl,
                                    &d_balance_amt);

        if ( i_returncode != 0 )
        {
          switch ( i_returncode )
          {
              case  INSUFFICIENT_LIMITS :

                strcpy(c_err_msg,ptr_st_err_msg->c_err_msg);
                EXEC SQL CLOSE :sys_cursor;
                tpfree((char *)ptr_fml_obuf);
                tpfree((char *)ptr_fml_ibuf);

                fn_userlog(c_ServiceName,"The Balance amount :%lf:",d_balance_amt);
                d_required_amt = *d_total_pnl + d_balance_amt ;
                d_required_amt = ( (-1) * d_required_amt ) / 100;

                return INSUFFICIENT_LIMITS  ;

               default:

                fn_errlog( c_ServiceName, "S31275",LIBMSG , c_err_msg );
                EXEC SQL CLOSE :sys_cursor;
                tpfree((char *)ptr_fml_obuf);
                tpfree((char *)ptr_fml_ibuf);
                return -1;
          }
        }

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"SPAN  - d_total_pnl :%lf:",*d_total_pnl);
          fn_userlog(c_ServiceName,"SPAN  - d_balance_amt Is :%lf:",d_balance_amt);
        }
      }
		}	

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"SPAN  - d_total_pnl :%lf:",*d_total_pnl);
      fn_userlog(c_ServiceName, "End of function.");
    }

  tpfree((char *)ptr_fml_obuf);
  tpfree((char *)ptr_fml_ibuf);

  return 0;

}

int fn_upd_spnpos_rollover( char *c_ServiceName,
                            struct st_pstn_actn st_pstnactn
                          )
{
  struct st_fus_undrlyng_pstn st_undpstn_tobe;
  struct st_fcp_cntrct_pstn st_cntrct_pstn_md_rc;

  char  c_err_msg[256];
	char c_ucc_cd[13] = "\0";  /*** Added in VER 8.0 ***/

  MEMSET(st_undpstn_tobe);
  MEMSET(st_cntrct_pstn_md_rc);

  fn_userlog ( c_ServiceName,"Inside function fn_upd_spnpos_rollover");

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName,"c_user_id        :%s:",st_pstnactn.c_user_id );
    fn_userlog ( c_ServiceName,"l_session_id     :%ld:",st_pstnactn.l_session_id );
    fn_userlog ( c_ServiceName,"c_cln_mtch_accnt :%s:",st_pstnactn.c_cln_mtch_accnt );
    fn_userlog ( c_ServiceName,"c_xchng_cd       :%s:",st_pstnactn.c_xchng_cd );
    fn_userlog ( c_ServiceName,"c_undrlyng       :%s:",st_pstnactn.c_undrlyng );
    fn_userlog ( c_ServiceName,"c_prd_typ        :%c:",st_pstnactn.c_prd_typ  );
    fn_userlog ( c_ServiceName,"c_opt_typ        :%c:",st_pstnactn.c_opt_typ  );
    fn_userlog ( c_ServiceName,"l_strike_prc     :%ld:",st_pstnactn.l_strike_prc );
    fn_userlog ( c_ServiceName,"c_ctgry_indstk   :%c:",st_pstnactn.c_ctgry_indstk );
    fn_userlog ( c_ServiceName,"c_expry_dt       :%s:",st_pstnactn.c_expry_dt );
    fn_userlog ( c_ServiceName,"c_exrc_typ       :%c:",st_pstnactn.c_exrc_typ );
    fn_userlog ( c_ServiceName,"l_actn_typ       :%ld:",st_pstnactn.l_actn_typ );
    fn_userlog ( c_ServiceName,"c_trnsctn_flw    :%c:",st_pstnactn.c_trnsctn_flw );
    fn_userlog ( c_ServiceName,"l_orgnl_qty      :%ld:",st_pstnactn.l_orgnl_qty );
    fn_userlog ( c_ServiceName,"l_orgnl_rt       :%ld:",st_pstnactn.l_orgnl_rt );
    fn_userlog ( c_ServiceName,"l_new_qty        :%ld:",st_pstnactn.l_new_qty );
    fn_userlog ( c_ServiceName,"l_new_rt         :%ld:",st_pstnactn.l_new_rt );
    fn_userlog ( c_ServiceName,"l_exec_qty       :%ld:",st_pstnactn.l_exec_qty );
    fn_userlog ( c_ServiceName,"l_exec_rt        :%ld:",st_pstnactn.l_exec_rt );
    fn_userlog ( c_ServiceName,"l_fresh_qty      :%ld:",st_pstnactn.l_fresh_qty );
    fn_userlog ( c_ServiceName,"l_cover_qty      :%ld:",st_pstnactn.l_cover_qty );
    fn_userlog ( c_ServiceName,"l_curr_rt        :%ld:",st_pstnactn.l_curr_rt );
    fn_userlog ( c_ServiceName,"c_ref_rmrks      :%s:",st_pstnactn.c_ref_rmrks );
    fn_userlog ( c_ServiceName,"c_prc_flg        :%c:",st_pstnactn.c_nkd_blkd_flg );
  }

	/*** Added in VER 8.0 : Real time margin reporting ( Fetching UCC code ) ***/

  MEMSET(c_ucc_cd);

  EXEC SQL
  SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
  INTO  :c_ucc_cd
  FROM  CLM_CLNT_MSTR
  WHERE CLM_MTCH_ACCNT = :st_pstnactn.c_cln_mtch_accnt;

  if ( SQLCODE != 0 )
  {
    fn_userlog(c_ServiceName,"fn_upd_spnpos_rollover : Error while fetching UCC code for :%s:", st_pstnactn.c_cln_mtch_accnt);
    fn_errlog( c_ServiceName, "S39125",SQLMSG,c_err_msg);
    return -1;
  }

  rtrim(c_ucc_cd);

  if(DEBUG_MSG_LVL_3)
    fn_userlog(c_ServiceName,"VER 8.0 -- fn_upd_spnpos_rollover : MAtch ID :%s: have ucc code :%s:", st_pstnactn.c_cln_mtch_accnt, c_ucc_cd);

  /*** VER 8.0 ends here ***/

  EXEC SQL
    UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
    SET     FUS_UIBUY_QTY = DECODE(:st_pstnactn.c_trnsctn_flw,'B',NVL(FUS_UIBUY_QTY,0) + :st_pstnactn.l_exec_qty,FUS_UIBUY_QTY),
            FUS_UIBUY_VAL = DECODE(:st_pstnactn.c_trnsctn_flw,'B',NVL(FUS_UIBUY_VAL,0) + (:st_pstnactn.l_exec_qty * :st_pstnactn.l_exec_rt),FUS_UIBUY_VAL),
            FUS_UISELL_QTY= DECODE(:st_pstnactn.c_trnsctn_flw,'S',NVL(FUS_UISELL_QTY,0) + (:st_pstnactn.l_exec_qty * -1),FUS_UISELL_QTY),
            FUS_UISELL_VAL= DECODE(:st_pstnactn.c_trnsctn_flw,'S',NVL(FUS_UISELL_VAL,0) + (:st_pstnactn.l_exec_qty * :st_pstnactn.l_exec_rt * -1),FUS_UISELL_VAL),
            FUS_UEXBUY_QTY = DECODE(:st_pstnactn.c_trnsctn_flw,'B',NVL(FUS_UEXBUY_QTY,0) + :st_pstnactn.l_exec_qty,FUS_UEXBUY_QTY),
            FUS_UEXBUY_VAL = DECODE(:st_pstnactn.c_trnsctn_flw,'B',NVL(FUS_UEXBUY_VAL,0) + (:st_pstnactn.l_exec_qty * :st_pstnactn.l_exec_rt),FUS_UEXBUY_VAL),
            FUS_UEXSELL_QTY = DECODE(:st_pstnactn.c_trnsctn_flw,'S',NVL(FUS_UEXSELL_QTY,0) + (:st_pstnactn.l_exec_qty * -1),FUS_UEXSELL_QTY),
            FUS_UEXSELL_VAL = DECODE(:st_pstnactn.c_trnsctn_flw,'S',NVL(FUS_UEXSELL_VAL,0) + (:st_pstnactn.l_exec_qty * :st_pstnactn.l_exec_rt * -1),FUS_UEXSELL_VAL)
    WHERE   FUS_CLM_MTCH_ACCNT    =:st_pstnactn.c_cln_mtch_accnt
    AND     FUS_XCHNG_CD          =:st_pstnactn.c_xchng_cd
    AND     FUS_UNDRLYNG          =:st_pstnactn.c_undrlyng;

  if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
  {
    fn_errlog(c_ServiceName, "S31280", SQLMSG, c_err_msg);
    return FAILURE;
  }

  if ( SQLCODE == NO_DATA_FOUND )
  {
    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog (c_ServiceName,"Inside no data found for underlying position.");
    }

    /******** Set UPOS_to_be fields to default ********/

    strcpy( st_undpstn_tobe.c_cln_mtch_accnt, st_pstnactn.c_cln_mtch_accnt );
    strcpy( st_undpstn_tobe.c_xchng_cd, st_pstnactn.c_xchng_cd );
    strcpy( st_undpstn_tobe.c_undrlyng, st_pstnactn.c_undrlyng );
    st_undpstn_tobe.c_indstk = st_pstnactn.c_ctgry_indstk;

    if( st_pstnactn.c_trnsctn_flw == 'B' )
    {
      st_undpstn_tobe.l_uibuy_qty         = st_pstnactn.l_exec_qty;
      st_undpstn_tobe.d_uibuy_val         = (double) (st_pstnactn.l_exec_qty * st_pstnactn.l_exec_rt);
      st_undpstn_tobe.l_uisell_qty        = 0;
      st_undpstn_tobe.d_uisell_val        = 0;
      st_undpstn_tobe.l_uexbuy_qty        = st_pstnactn.l_exec_qty;
      st_undpstn_tobe.d_uexbuy_val        = (double) (st_pstnactn.l_exec_qty * st_pstnactn.l_exec_rt);
      st_undpstn_tobe.l_uexsell_qty       = 0;
      st_undpstn_tobe.d_uexsell_val       = 0;
    }
    else
    {
      st_undpstn_tobe.l_uibuy_qty         = 0;
      st_undpstn_tobe.d_uibuy_val         = 0;
      st_undpstn_tobe.l_uisell_qty        = st_pstnactn.l_exec_qty * (-1);
      st_undpstn_tobe.d_uisell_val        = (double) (st_pstnactn.l_exec_qty * st_pstnactn.l_exec_rt * -1 );
      st_undpstn_tobe.l_uexbuy_qty        = 0;
      st_undpstn_tobe.d_uexbuy_val        = 0;
      st_undpstn_tobe.l_uexsell_qty       = st_pstnactn.l_exec_qty * (-1);
      st_undpstn_tobe.d_uexsell_val       = (double) (st_pstnactn.l_exec_qty * st_pstnactn.l_exec_rt * -1 );

    }

    st_undpstn_tobe.l_ubuy_exctd_qty    = 0;
    st_undpstn_tobe.l_usell_exctd_qty   = 0;
    st_undpstn_tobe.c_uopnpstn_flw      = 'N';
    st_undpstn_tobe.l_uopnpstn_qty      = 0;
    st_undpstn_tobe.d_uopnpstn_val      = 0;
    st_undpstn_tobe.d_umtm_opn_val      = 0;
    st_undpstn_tobe.d_initial_mrgn      = 0;
    st_undpstn_tobe.d_span_wemult_mrgn  = 0;
    st_undpstn_tobe.d_eba_expr_mrgn     = 0;
    st_undpstn_tobe.d_uspan_wenov_mrgn  = 0;
    st_undpstn_tobe.d_multpr            = 0;
    st_undpstn_tobe.d_uspan_nenov_mrgn  = 0;
    st_undpstn_tobe.d_net_optn_val      = 0;
    st_undpstn_tobe.d_min_mrgn          = 0;
    st_undpstn_tobe.d_blckd_pl          = 0;
    st_undpstn_tobe.d_reqd_initial_mrgn = 0;
    st_undpstn_tobe.d_umtm_opn_val      = 0;
    st_undpstn_tobe.c_mtm_flg           = '\0';

    EXEC SQL
      SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY')
      INTO   :st_undpstn_tobe.c_trd_dt
      FROM   EXG_XCHNG_MSTR
      WHERE  EXG_XCHNG_CD = :st_pstnactn.c_xchng_cd
      AND    EXG_MKT_TYP ='D';

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31285", SQLMSG, c_err_msg );
      return FAILURE;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"c_trd_dt   :%s:",st_undpstn_tobe.c_trd_dt);
    }

    EXEC SQL
    INSERT INTO FUS_FO_UNDRLYNG_SPN_PSTN
    (
        FUS_CLM_MTCH_ACCNT,
        FUS_XCHNG_CD,
        FUS_UNDRLYNG,
        FUS_INDSTK,
        FUS_UIBUY_QTY,
        FUS_UIBUY_VAL,
        FUS_UISELL_QTY,
        FUS_UISELL_VAL,
        FUS_UEXBUY_QTY,
        FUS_UEXBUY_VAL,
        FUS_UEXSELL_QTY,
        FUS_UEXSELL_VAL,
        FUS_UBUY_EXCTD_QTY,
        FUS_USELL_EXCTD_QTY,
        FUS_UOPNPSTN_FLW,
        FUS_UOPNPSTN_QTY,
        FUS_UOPNPSTN_VAL,
        FUS_UMTM_OPN_VAL,
        FUS_INITIAL_MRGN,
        FUS_SPAN_WEMULT_MRGN,
        FUS_EBA_EXPR_MRGN,
        FUS_USPAN_WENOV_MRGN,
        FUS_MULTIPLIER,
        FUS_USPAN_NENOV_MRGN,
        FUS_NET_OPTN_VAL,
        FUS_MTM_FLG,
        FUS_TRD_DT,
        FUS_NTNL_PL,
        FUS_BLCKD_PL,
        FUS_MIN_MRGN,
        FUS_REQD_INITIAL_MRGN,
				FUS_UCC_CD				/*** Added in VER 8.0 ***/
     )
     VALUES
     (
        :st_undpstn_tobe.c_cln_mtch_accnt,
        :st_undpstn_tobe.c_xchng_cd,
        :st_undpstn_tobe.c_undrlyng,
        :st_undpstn_tobe.c_indstk,
        :st_undpstn_tobe.l_uibuy_qty,
        :st_undpstn_tobe.d_uibuy_val,
        :st_undpstn_tobe.l_uisell_qty,
        :st_undpstn_tobe.d_uisell_val,
        :st_undpstn_tobe.l_uexbuy_qty,
        :st_undpstn_tobe.d_uexbuy_val,
        :st_undpstn_tobe.l_uexsell_qty,
        :st_undpstn_tobe.d_uexsell_val,
        :st_undpstn_tobe.l_ubuy_exctd_qty,
        :st_undpstn_tobe.l_usell_exctd_qty,
        :st_undpstn_tobe.c_uopnpstn_flw,
        :st_undpstn_tobe.l_uopnpstn_qty,
        :st_undpstn_tobe.d_uopnpstn_val,
        :st_undpstn_tobe.d_umtm_opn_val,
        :st_undpstn_tobe.d_initial_mrgn,
        :st_undpstn_tobe.d_span_wemult_mrgn ,
        :st_undpstn_tobe.d_eba_expr_mrgn,
        :st_undpstn_tobe.d_uspan_wenov_mrgn,
        :st_undpstn_tobe.d_multpr,
        :st_undpstn_tobe.d_uspan_nenov_mrgn,
        :st_undpstn_tobe.d_net_optn_val,
        :st_undpstn_tobe.c_mtm_flg,
        :st_undpstn_tobe.c_trd_dt,
        :st_undpstn_tobe.d_ntnl_pl,
        :st_undpstn_tobe.d_blckd_pl ,
        :st_undpstn_tobe.d_min_mrgn,
        :st_undpstn_tobe.d_reqd_initial_mrgn,
				:c_ucc_cd				/*** Added in VER 8.0 ***/
     );

     if ( SQLCODE != 0 )
     {
       fn_errlog(c_ServiceName, "S31290", SQLMSG, c_err_msg );
       return FAILURE;
     }
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Before update contract level position.");
  }

  EXEC SQL
    UPDATE  FCP_FO_SPN_CNTRCT_PSTN
    SET     FCP_IBUY_QTY       = DECODE(:st_pstnactn.c_trnsctn_flw,'B',NVL(FCP_IBUY_QTY,0) + :st_pstnactn.l_exec_qty,FCP_IBUY_QTY),
            FCP_IBUY_ORD_VAL   = DECODE(:st_pstnactn.c_trnsctn_flw,'B',NVL(FCP_IBUY_ORD_VAL,0) + (:st_pstnactn.l_exec_qty * :st_pstnactn.l_exec_rt),FCP_IBUY_ORD_VAL),
            FCP_ISELL_QTY      = DECODE(:st_pstnactn.c_trnsctn_flw,'S',NVL(FCP_ISELL_QTY,0) + (:st_pstnactn.l_exec_qty * -1),FCP_ISELL_QTY),
            FCP_ISELL_ORD_VAL  =  DECODE(:st_pstnactn.c_trnsctn_flw,'S',NVL(FCP_ISELL_ORD_VAL,0) + (:st_pstnactn.l_exec_qty * :st_pstnactn.l_exec_rt * -1),FCP_ISELL_ORD_VAL),
            FCP_EXBUY_QTY      = DECODE(:st_pstnactn.c_trnsctn_flw,'B',NVL(FCP_EXBUY_QTY,0) + :st_pstnactn.l_exec_qty,FCP_EXBUY_QTY),
            FCP_EXBUY_ORD_VAL  = DECODE(:st_pstnactn.c_trnsctn_flw,'B',NVL(FCP_EXBUY_ORD_VAL,0) + (:st_pstnactn.l_exec_qty * :st_pstnactn.l_exec_rt),FCP_EXBUY_ORD_VAL),
            FCP_EXSELL_QTY     = DECODE(:st_pstnactn.c_trnsctn_flw,'S',NVL(FCP_EXSELL_QTY,0) + (:st_pstnactn.l_exec_qty * -1),FCP_EXSELL_QTY),
            FCP_EXSELL_ORD_VAL = DECODE(:st_pstnactn.c_trnsctn_flw,'S',NVL(FCP_EXSELL_ORD_VAL,0) + (:st_pstnactn.l_exec_qty  * :st_pstnactn.l_exec_rt * -1),FCP_EXSELL_ORD_VAL)
    WHERE   FCP_CLM_MTCH_ACCNT = :st_pstnactn.c_cln_mtch_accnt
    AND     FCP_XCHNG_CD       = :st_pstnactn.c_xchng_cd
    AND     FCP_PRDCT_TYP      = :st_pstnactn.c_prd_typ
    AND     FCP_UNDRLYNG       = :st_pstnactn.c_undrlyng
    AND     FCP_OPT_TYP        = :st_pstnactn.c_opt_typ
    AND     FCP_STRK_PRC       = :st_pstnactn.l_strike_prc
    AND     FCP_EXPRY_DT       = TO_DATE(:st_pstnactn.c_expry_dt,'DD-Mon-YYYY')
    AND     FCP_EXER_TYP       = :st_pstnactn.c_exrc_typ;

   if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
   {
     fn_errlog(c_ServiceName, "S31295", SQLMSG, c_err_msg );
     return FAILURE;
   }

  if ( SQLCODE == NO_DATA_FOUND )
  {
    if(DEBUG_MSG_LVL_3)
    {
       fn_userlog (c_ServiceName,"Inside no data found for contract level position.");
    }

    strcpy( st_cntrct_pstn_md_rc.c_cln_mtch_accnt,st_pstnactn.c_cln_mtch_accnt );
    strcpy( st_cntrct_pstn_md_rc.c_xchng_cd, st_pstnactn.c_xchng_cd );
    strcpy( st_cntrct_pstn_md_rc.c_undrlyng, st_pstnactn.c_undrlyng );
    strcpy( st_cntrct_pstn_md_rc.c_expry_dt, st_pstnactn.c_expry_dt );
    st_cntrct_pstn_md_rc.c_prd_typ        = st_pstnactn.c_prd_typ;
    st_cntrct_pstn_md_rc.c_exer_typ       = st_pstnactn.c_exrc_typ;
    st_cntrct_pstn_md_rc.c_opt_typ        = st_pstnactn.c_opt_typ;
    st_cntrct_pstn_md_rc.l_strike_prc     = st_pstnactn.l_strike_prc;
    st_cntrct_pstn_md_rc.c_ctgry_indstk   = st_pstnactn.c_ctgry_indstk;

    if( st_pstnactn.c_trnsctn_flw == 'B' )
    {
      st_cntrct_pstn_md_rc.l_ibuy_qty       = st_pstnactn.l_exec_qty;
      st_cntrct_pstn_md_rc.d_ibuy_ord_val   = (double) (st_pstnactn.l_exec_qty * st_pstnactn.l_exec_rt);
      st_cntrct_pstn_md_rc.l_isell_qty      = 0;
      st_cntrct_pstn_md_rc.d_isell_ord_val  = 0;
      st_cntrct_pstn_md_rc.l_exbuy_qty      = st_pstnactn.l_exec_qty;
      st_cntrct_pstn_md_rc.d_exbuy_ord_val  = (double) (st_pstnactn.l_exec_qty * st_pstnactn.l_exec_rt);
      st_cntrct_pstn_md_rc.l_exsell_qty     = 0;
      st_cntrct_pstn_md_rc.d_exsell_ord_val = 0;
    }
    else
    {
      st_cntrct_pstn_md_rc.l_ibuy_qty       = 0;
      st_cntrct_pstn_md_rc.d_ibuy_ord_val   = 0;
      st_cntrct_pstn_md_rc.l_isell_qty      = st_pstnactn.l_exec_qty * (-1);
      st_cntrct_pstn_md_rc.d_isell_ord_val  = (double) (st_pstnactn.l_exec_qty * st_pstnactn.l_exec_rt * -1);
      st_cntrct_pstn_md_rc.l_exbuy_qty      = 0;
      st_cntrct_pstn_md_rc.d_exbuy_ord_val  = 0;
      st_cntrct_pstn_md_rc.l_exsell_qty     = st_pstnactn.l_exec_qty * (-1);
      st_cntrct_pstn_md_rc.d_exsell_ord_val = (double) (st_pstnactn.l_exec_qty * st_pstnactn.l_exec_rt * -1);
    }

    st_cntrct_pstn_md_rc.l_buy_exctd_qty  = 0;
    st_cntrct_pstn_md_rc.l_sell_exctd_qty = 0;
    st_cntrct_pstn_md_rc.c_opnpstn_flw    = 'N';
    st_cntrct_pstn_md_rc.l_opnpstn_qty    = 0;
    st_cntrct_pstn_md_rc.d_opnpstn_val    = 0;
    st_cntrct_pstn_md_rc.d_mtm_opn_val    = 0;
    st_cntrct_pstn_md_rc.d_imtm_opn_val   = 0;

    EXEC SQL
      INSERT INTO FCP_FO_SPN_CNTRCT_PSTN
      (
        FCP_CLM_MTCH_ACCNT,
        FCP_XCHNG_CD,
        FCP_PRDCT_TYP,
        FCP_INDSTK,
        FCP_UNDRLYNG,
        FCP_EXPRY_DT,
        FCP_EXER_TYP,
        FCP_STRK_PRC,
        FCP_OPT_TYP,
        FCP_IBUY_QTY,
        FCP_IBUY_ORD_VAL,
        FCP_ISELL_QTY,
        FCP_ISELL_ORD_VAL,
        FCP_EXBUY_QTY,
        FCP_EXBUY_ORD_VAL,
        FCP_EXSELL_QTY,
        FCP_EXSELL_ORD_VAL,
        FCP_BUY_EXCTD_QTY,
        FCP_SELL_EXCTD_QTY,
        FCP_OPNPSTN_FLW,
        FCP_OPNPSTN_QTY,
        FCP_OPNPSTN_VAL,
        FCP_MTM_OPN_VAL,
        FCP_OPT_PREMIUM,
				FCP_UCC_CD			/*** Added in VER 8.0 ***/
      )
      VALUES
      (
        :st_cntrct_pstn_md_rc.c_cln_mtch_accnt,
        :st_cntrct_pstn_md_rc.c_xchng_cd,
        :st_cntrct_pstn_md_rc.c_prd_typ,
        :st_cntrct_pstn_md_rc.c_ctgry_indstk,
        :st_cntrct_pstn_md_rc.c_undrlyng,
        TO_DATE(:st_cntrct_pstn_md_rc.c_expry_dt,'DD-Mon-YYYY'),
        :st_cntrct_pstn_md_rc.c_exer_typ,
        :st_cntrct_pstn_md_rc.l_strike_prc,
        :st_cntrct_pstn_md_rc.c_opt_typ,
        :st_cntrct_pstn_md_rc.l_ibuy_qty,
        :st_cntrct_pstn_md_rc.d_ibuy_ord_val,
        :st_cntrct_pstn_md_rc.l_isell_qty,
        :st_cntrct_pstn_md_rc.d_isell_ord_val,
        :st_cntrct_pstn_md_rc.l_exbuy_qty,
        :st_cntrct_pstn_md_rc.d_exbuy_ord_val,
        :st_cntrct_pstn_md_rc.l_exsell_qty,
        :st_cntrct_pstn_md_rc.d_exsell_ord_val,
        :st_cntrct_pstn_md_rc.l_buy_exctd_qty,
        :st_cntrct_pstn_md_rc.l_sell_exctd_qty,
        :st_cntrct_pstn_md_rc.c_opnpstn_flw,
        :st_cntrct_pstn_md_rc.l_opnpstn_qty,
        :st_cntrct_pstn_md_rc.d_opnpstn_val,
        :st_cntrct_pstn_md_rc.d_mtm_opn_val,
        0,
				:c_ucc_cd 			/*** Added in VER 8.0 ***/
      );

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31300", SQLMSG, c_err_msg );
      return FAILURE;
    }
  }
  return SUCCESS;
}

int fn_get_qt_rws ( char *c_ServiceName,
                struct st_contract *ptr_st_contract,
                struct st_cntrct_qt *ptr_st_cntrct_qt,
                char   *c_expry_dt1,
                char   *c_expry_dt2,
                char *c_err_msg
              )
{
  char  c_errmsg[256];

  varchar c_exp_dt [ LEN_DATE ];
  varchar c_lst_trd_dt [ LEN_DATE ];
  short i_trd_tm;

    EXEC SQL
         SELECT FTQ_XCHNG_CD,
                FTQ_PRDCT_TYP,
                FTQ_UNDRLYNG,
                TO_CHAR ( FTQ_EXPRY_DT, 'dd-Mon-yyyy' ),
                FTQ_EXER_TYP,
                FTQ_OPT_TYP,
                NVL(FTQ_STRK_PRC, 0 ),
                FTQ_INDSTK,
                NVL( FTQ_LST_TRD_PRC, 0 ),
                TO_CHAR ( FTQ_LST_TRD_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
                NVL( FTQ_LST_TRD_QTY, 0 ),
                NVL( FTQ_BST1_BID_PRC, 0 ),
                NVL( FTQ_BST1_BID_QTY, 0 ),
                NVL( FTQ_BST1_OFFR_PRC, 0 ),
                NVL( FTQ_BST1_OFFR_QTY, 0 ),
                NVL( FTQ_CLS_PRC, 0 ),
                NVL( FTQ_OPN_PRC, 0 ),
                NVL( FTQ_HGH_PRC, 0 ),
                NVL( FTQ_LOW_PRC, 0 ),
                NVL( FTQ_PRVS_CLS_PRC, 0 ),
                NVL( FTQ_CHNG_PRVS_CLS, 0 ),
                NVL( FTQ_INDCTR,'+'),
                NVL( FTQ_HGH_PRC_RNG, 0 ),
                NVL( FTQ_LOW_PRC_RNG, 0 ),
                NVL( FTQ_AVRG_TRD_PRC, 0 ),
                NVL( FTQ_TOT_QTY_TRDD, 0 ),
                NVL( FTQ_TOT_VAL_TRDD, 0 ),
                NVL( FTQ_BASE_PRC, 0 ),
                NVL( FTQ_CRNT_OI, 0 ),
                NVL( FTQ_CHNG_OI, 0 ),
                NVL( FTQ_OI_HIGH, 0 ),
                NVL( FTQ_OI_LOW, 0 ),
                NVL( FTQ_OI_INDCTR, '+' ),
                '*',
                NVL( FTQ_MIN_LOT_QTY,'0')
      INTO      :ptr_st_cntrct_qt->c_xchng_cd,
                :ptr_st_cntrct_qt->c_prd_typ,
                :ptr_st_cntrct_qt->c_undrlyng,
                :c_exp_dt,
                :ptr_st_cntrct_qt->c_exrc_typ,
                :ptr_st_cntrct_qt->c_opt_typ,
                :ptr_st_cntrct_qt->l_strike_prc,
                :ptr_st_cntrct_qt->c_ctgry_indstk,
                :ptr_st_cntrct_qt->l_lst_trdd_prc,
                :c_lst_trd_dt:i_trd_tm,
                :ptr_st_cntrct_qt->l_lst_trdd_qty,
                :ptr_st_cntrct_qt->l_bst_bid_prc,
                :ptr_st_cntrct_qt->l_bst_bid_qty,
                :ptr_st_cntrct_qt->l_bst_offr_prc,
                :ptr_st_cntrct_qt->l_bst_offr_qty,
                :ptr_st_cntrct_qt->l_close_prc,
                :ptr_st_cntrct_qt->l_open_prc,
                :ptr_st_cntrct_qt->l_high_prc,
                :ptr_st_cntrct_qt->l_low_prc,
                :ptr_st_cntrct_qt->l_prev_close_prc,
                :ptr_st_cntrct_qt->l_chng_prvs_close_prc,
                :ptr_st_cntrct_qt->c_indctr,
                :ptr_st_cntrct_qt->l_high_prc_rng,
                :ptr_st_cntrct_qt->l_low_prc_rng,
                :ptr_st_cntrct_qt->l_avg_trdd_prc,
                :ptr_st_cntrct_qt->l_tot_qty_trdd,
                :ptr_st_cntrct_qt->d_tot_val_trdd,
                :ptr_st_cntrct_qt->l_base_prc,
                :ptr_st_cntrct_qt->d_crnt_oi,
                :ptr_st_cntrct_qt->d_chng_oi,
                :ptr_st_cntrct_qt->d_oi_high,
                :ptr_st_cntrct_qt->d_oi_low,
                :ptr_st_cntrct_qt->c_oi_indctr,
                :ptr_st_cntrct_qt->c_rqst_typ,
                :ptr_st_cntrct_qt->l_min_lot_qty
     FROM       FTQ_FO_TRD_QT
     WHERE      FTQ_XCHNG_CD  = :ptr_st_contract->c_xchng_cd
     AND        FTQ_PRDCT_TYP = decode(:ptr_st_contract->c_prd_typ,'F','S',:ptr_st_contract->c_prd_typ)
       AND      FTQ_UNDRLYNG  = :ptr_st_contract->c_undrlyng
       AND      FTQ_EXPRY_DT  = to_date ( :c_expry_dt1,'dd-Mon-yyyy' )
       AND      FTQ_EXPRY_DT2  = to_date ( :c_expry_dt2,'dd-Mon-yyyy' )
       AND      FTQ_EXER_TYP  = :ptr_st_contract->c_exrc_typ
       AND      FTQ_OPT_TYP   = :ptr_st_contract->c_opt_typ
       AND      FTQ_STRK_PRC  = :ptr_st_contract->l_strike_prc;

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      return -1;
    }
    else if ( SQLCODE == NO_DATA_FOUND )
    {
      return -2;
    }

    SETNULL ( c_exp_dt );
    SETNULL ( c_lst_trd_dt );

    strcpy ( ptr_st_cntrct_qt->c_expry_dt , ( char * ) c_exp_dt.arr );
    strcpy ( ptr_st_cntrct_qt->c_lst_trdd_time , ( char * ) c_lst_trd_dt.arr );

    return 0;
}

int fn_get_quote_rws ( char *c_ServiceName,
                   struct st_contract *ptr_st_contract,
                   struct st_cntrct_qt *ptr_st_cntrct_qt,
                   char *c_setlmnt_flg,
                   char *c_dlvry_pos_allwd,
                   char   *c_expry_dt1,
                   char   *c_expry_dt2,
                   char *c_err_msg
                 )
{

  varchar c_exp_dt [ LEN_DATE ];
  varchar c_lst_trd_dt [ LEN_DATE ];
  short i_trd_tm;
  char c_setlmnt_flg_new = '\0';
  char c_dlvry_pos_allwd_new = '\0';

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Inside fn_get_qt Function.");
  }

  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"expiry date:%s:",ptr_st_contract->c_expry_dt);
    fn_userlog(c_ServiceName,"XCHNG CODE:%s:",ptr_st_contract->c_xchng_cd);
    fn_userlog(c_ServiceName,"product type:%c:",ptr_st_contract->c_prd_typ);
    fn_userlog(c_ServiceName,"Underlyng :%s:",ptr_st_contract->c_undrlyng);
    fn_userlog(c_ServiceName,"Exercise type:%c:",ptr_st_contract->c_exrc_typ);
    fn_userlog(c_ServiceName,"Option type:%c:",ptr_st_contract->c_opt_typ);
    fn_userlog(c_ServiceName,"Strike Price:%ld:",ptr_st_contract->l_strike_prc);
  }

    EXEC SQL
    SELECT  FTQ_XCHNG_CD,
            FTQ_PRDCT_TYP,
            FTQ_UNDRLYNG,
            TO_CHAR ( FTQ_EXPRY_DT, 'dd-Mon-yyyy' ),
            FTQ_EXER_TYP,
            FTQ_OPT_TYP,
            NVL(FTQ_STRK_PRC, 0 ),
            FTQ_INDSTK,
            NVL( FTQ_LST_TRD_PRC, 0 ),
            TO_CHAR ( FTQ_LST_TRD_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
            NVL( FTQ_LST_TRD_QTY, 0 ),
            NVL( FTQ_BST1_BID_PRC, 0 ),
            NVL( FTQ_BST1_BID_QTY, 0 ),
            NVL( FTQ_BST1_OFFR_PRC, 0 ),
            NVL( FTQ_BST1_OFFR_QTY, 0 ),
            NVL( FTQ_CLS_PRC, 0 ),
            NVL( FTQ_OPN_PRC, 0 ),
            NVL( FTQ_HGH_PRC, 0 ),
            NVL( FTQ_LOW_PRC, 0 ),
            NVL( FTQ_PRVS_CLS_PRC, 0 ),
            NVL( FTQ_CHNG_PRVS_CLS, 0 ),
            NVL(FTQ_INDCTR,'+'),
            NVL( FTQ_HGH_PRC_RNG, 0 ),
            NVL( FTQ_LOW_PRC_RNG, 0 ),
            NVL( FTQ_AVRG_TRD_PRC, 0 ),
            NVL( FTQ_TOT_QTY_TRDD, 0 ),
            NVL( FTQ_TOT_VAL_TRDD, 0 ),
            NVL( FTQ_BASE_PRC, 0 ),
            NVL( FTQ_CRNT_OI, 0 ),
            NVL( FTQ_CHNG_OI, 0 ),
            NVL( FTQ_OI_HIGH, 0 ),
            NVL( FTQ_OI_LOW, 0 ),
            NVL( FTQ_OI_INDCTR, '+' ),
            '*',
            NVL( FTQ_MIN_LOT_QTY,'0'),
            (case when NVL(ftq_qt_trdng_flg,'*') = 'T' and NVL(ftq_sltp_fp_qt_trdng_flg,'*') = 'T' then '1' else '0' end),
            NVL( ftq_hgh_trd_exec_rng, 0 ),
            NVL( ftq_low_trd_exec_rng, 0 ),
            NVL( ftq_setlmnt_flg, 'C' ),
            NVL( ftq_dlvry_pos_allwd, 'Y' )
      INTO  :ptr_st_cntrct_qt->c_xchng_cd,
            :ptr_st_cntrct_qt->c_prd_typ,
            :ptr_st_cntrct_qt->c_undrlyng,
            :c_exp_dt,
            :ptr_st_cntrct_qt->c_exrc_typ,
            :ptr_st_cntrct_qt->c_opt_typ,
            :ptr_st_cntrct_qt->l_strike_prc,
            :ptr_st_cntrct_qt->c_ctgry_indstk,
            :ptr_st_cntrct_qt->l_lst_trdd_prc,
            :c_lst_trd_dt:i_trd_tm,
            :ptr_st_cntrct_qt->l_lst_trdd_qty,
            :ptr_st_cntrct_qt->l_bst_bid_prc,
            :ptr_st_cntrct_qt->l_bst_bid_qty,
            :ptr_st_cntrct_qt->l_bst_offr_prc,
            :ptr_st_cntrct_qt->l_bst_offr_qty,
            :ptr_st_cntrct_qt->l_close_prc,
            :ptr_st_cntrct_qt->l_open_prc,
            :ptr_st_cntrct_qt->l_high_prc,
            :ptr_st_cntrct_qt->l_low_prc,
            :ptr_st_cntrct_qt->l_prev_close_prc,
            :ptr_st_cntrct_qt->l_chng_prvs_close_prc,
            :ptr_st_cntrct_qt->c_indctr,
            :ptr_st_cntrct_qt->l_high_prc_rng,
            :ptr_st_cntrct_qt->l_low_prc_rng,
            :ptr_st_cntrct_qt->l_avg_trdd_prc,
            :ptr_st_cntrct_qt->l_tot_qty_trdd,
            :ptr_st_cntrct_qt->d_tot_val_trdd,
            :ptr_st_cntrct_qt->l_base_prc,
            :ptr_st_cntrct_qt->d_crnt_oi,
            :ptr_st_cntrct_qt->d_chng_oi,
            :ptr_st_cntrct_qt->d_oi_high,
            :ptr_st_cntrct_qt->d_oi_low,
            :ptr_st_cntrct_qt->c_oi_indctr,
            :ptr_st_cntrct_qt->c_rqst_typ,
            :ptr_st_cntrct_qt->l_min_lot_qty,
            :ptr_st_cntrct_qt->l_ca_lvl,
            :ptr_st_cntrct_qt->l_eba_cntrct_id,
            :ptr_st_cntrct_qt->l_tot_val_trdd,
            :c_setlmnt_flg_new,
            :c_dlvry_pos_allwd_new
      FROM   FTQ_FO_TRD_QT
      WHERE  FTQ_XCHNG_CD  = :ptr_st_contract->c_xchng_cd
      AND    FTQ_PRDCT_TYP = decode(:ptr_st_contract->c_prd_typ,'F','S',:ptr_st_contract->c_prd_typ)
      AND    FTQ_EXPRY_DT  = to_date ( :c_expry_dt1,'dd-Mon-yyyy' )
      AND    FTQ_EXPRY_DT2  = to_date ( :c_expry_dt2,'dd-Mon-yyyy' )
      AND    FTQ_UNDRLYNG  = :ptr_st_contract->c_undrlyng
      AND    FTQ_EXER_TYP  = :ptr_st_contract->c_exrc_typ
      AND    FTQ_OPT_TYP   = :ptr_st_contract->c_opt_typ
      AND    FTQ_STRK_PRC  = :ptr_st_contract->l_strike_prc;

      if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          fn_userlog(c_ServiceName,"Invalid contract");
          strcpy(c_err_msg,"Record does not exist for selected contract.");
        }
        else
        {
          fn_userlog(c_ServiceName,"Failed To Get Trade Quotes.");
          fn_errlog( c_ServiceName, "L31795", SQLMSG, c_err_msg  );
        }
        return -1;
      }

      *c_setlmnt_flg = c_setlmnt_flg_new;
      *c_dlvry_pos_allwd = c_dlvry_pos_allwd_new;

  SETNULL ( c_exp_dt );
  SETNULL ( c_lst_trd_dt );

  strcpy ( ptr_st_cntrct_qt->c_expry_dt , ( char * ) c_exp_dt.arr );
  strcpy ( ptr_st_cntrct_qt->c_lst_trdd_time , ( char * ) c_lst_trd_dt.arr );

  return 0 ;
}

int fn_vrfy_spnprc_band_mkt_rws ( char c_ServiceName [ 33 ],
                          char c_xchng_cd [ 4 ],
                          char c_prd_typ,
                          char c_undrlyng [ 7 ],
                          long l_ord_limit_rt,
                          char   *c_expry_dt1,
                          char   *c_expry_dt2,
                          struct st_err_msg *ptr_st_err_msg
                        )
{

  long l_upbnd_rt = 0;
  long l_lwbnd_rt = 0;

  EXEC SQL BEGIN DECLARE SECTION;
    char    sql_c_xchng_cd[4] ;
    char    sql_c_prd_typ ;
    char    sql_c_undrlyng[7] ;
  EXEC SQL END DECLARE SECTION;


  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "c_xchng_cd:%s:", c_xchng_cd );
    fn_userlog( c_ServiceName, "c_prd_typ:%c:",c_prd_typ);
    fn_userlog( c_ServiceName, "c_undrlyng:%s:", c_undrlyng );
    fn_userlog( c_ServiceName, "l_ord_limit_rt:%ld:", l_ord_limit_rt );
    fn_userlog( c_ServiceName, "c_expry_dt1:%s:", c_expry_dt1);
    fn_userlog( c_ServiceName, "c_expry_dt2:%s:", c_expry_dt2);
  }

  strcpy ( sql_c_xchng_cd, c_xchng_cd );
  sql_c_prd_typ = c_prd_typ;
  strcpy ( sql_c_undrlyng, c_undrlyng );


  EXEC SQL
       select FTQ_HGH_PRC_RNG,
              FTQ_LOW_PRC_RNG
       INTO   :l_upbnd_rt,
              :l_lwbnd_rt
       from   FTQ_FO_TRD_QT
       where  FTQ_XCHNG_CD =  :sql_c_xchng_cd
       and    FTQ_PRDCT_TYP = :sql_c_prd_typ
       and    FTQ_UNDRLYNG =  :sql_c_undrlyng
       and    FTQ_EXPRY_DT =  to_date(:c_expry_dt1,'dd-Mon-yyyy' )
       and    FTQ_EXPRY_DT2 = to_date(:c_expry_dt2,'dd-Mon-yyyy' );


  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31800", SQLMSG, c_err_msg );
    return ( -1 );
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "l_upbnd_rt :%ld:", l_upbnd_rt);
    fn_userlog( c_ServiceName, "l_lwbnd_rt :%ld:", l_lwbnd_rt);
    fn_userlog( c_ServiceName, "l_ord_limit_rt :%ld:", l_ord_limit_rt);
  }


  if ( ( l_ord_limit_rt > l_upbnd_rt ) || ( l_ord_limit_rt < l_lwbnd_rt )  )
  {
    fn_errlog( c_ServiceName, "B28006", " ",ptr_st_err_msg->c_err_msg );
    return ( -1 ) ;
  }

}

int fn_getcnt_gen_rws ( char *c_ServiceName,
                    struct st_contract *ptr_st_contract,
                    struct st_cntrt_gen_inf *ptr_st_cntrct_geninf,
                    char   *c_expry_dt1,
                    char   *c_expry_dt2,
                    char *c_err_msg
                  )

{


  varchar c_expiry_dt [ 23 ];
  varchar c_exp_dt [ 23 ];
  varchar c_rcrd_dt [ 23 ];
  varchar c_nd_start_dt [ 23 ];
  varchar c_nd_enddt [ 23 ];
  varchar c_bkcls_strt_dt [ 23 ];
  varchar c_bkcls_end_dt [ 23 ];

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Inside Function fn_getcnt_gen.");
    fn_userlog(c_ServiceName,"SPAN  c_xchng_cd Is :%s:",ptr_st_contract->c_xchng_cd);
    fn_userlog(c_ServiceName,"SPAN  c_prd_typ Is :%c:",ptr_st_contract->c_prd_typ);
    fn_userlog(c_ServiceName,"SPAN  c_undrlyng  Is :%s:",ptr_st_contract->c_undrlyng);
    fn_userlog(c_ServiceName,"SPAN  c_expiry_dt Is :%s:",ptr_st_contract->c_expry_dt);
    fn_userlog(c_ServiceName,"SPAN  c_exrc_typ  Is :%c:",ptr_st_contract->c_exrc_typ);
    fn_userlog(c_ServiceName,"SPAN  c_opt_typ   Is :%c:",ptr_st_contract->c_opt_typ);
    fn_userlog(c_ServiceName,"SPAN  l_strike_prc  Is :%ld:",ptr_st_contract->l_strike_prc);
  }

  EXEC SQL
    SELECT  FTQ_XCHNG_CD,
            FTQ_PRDCT_TYP,
            FTQ_INDSTK,
            FTQ_UNDRLYNG,
            TO_CHAR ( FTQ_EXPRY_DT, 'dd-Mon-yyyy' ),
            FTQ_EXER_TYP,
            FTQ_OPT_TYP,
            NVL(FTQ_STRK_PRC,0),
            NVL(FTQ_PRMTD_TO_TRD,0),
            NVL(FTQ_STTS,0),
            NVL(FTQ_BOARD_LOT_QTY,0),
            NVL(TO_CHAR (FTQ_RCRD_DT, 'dd-Mon-yyyy hh24:mi:ss' ),'*'),
            NVL(TO_CHAR (FTQ_ND_STRT_DT, 'dd-Mon-yyyy hh24:mi:ss' ),'*'),
            NVL(TO_CHAR (FTQ_ND_END_DT, 'dd-Mon-yyyy hh24:mi:ss' ),'*'),
            NVL(TO_CHAR(FTQ_BK_CLS_STRT_DT,'dd-Mon-yyyy hh24:mi:ss'),'*'),
            NVL(TO_CHAR (FTQ_BK_CLS_END_DT,'dd-Mon-yyyy hh24:mi:ss'),'*'),
            NVL(FTQ_SETL_SETLMNT_NO,0),
            '*',
            NVL( FTQ_EBA_CNTRCT_ID,0 ),
            NVL( FTQ_CA_LVL,0 ),
            NVL( FTQ_MULTPLR, 0 ),
            FTQ_MIN_LOT_QTY,
            FTQ_TCK_SZ
     INTO   :ptr_st_cntrct_geninf->c_xchng_cd,
            :ptr_st_cntrct_geninf->c_prd_typ,
            :ptr_st_cntrct_geninf->c_ctgry_indstk,
            :ptr_st_cntrct_geninf->c_undrlyng,
            :c_exp_dt,
            :ptr_st_cntrct_geninf->c_exrc_typ,
            :ptr_st_cntrct_geninf->c_opt_typ,
            :ptr_st_cntrct_geninf->l_strike_prc,
            :ptr_st_cntrct_geninf->l_prmtd_to_trd,
            :ptr_st_cntrct_geninf->l_stts,
            :ptr_st_cntrct_geninf->l_board_lot_qty,
            :c_rcrd_dt,
            :c_nd_start_dt,
            :c_nd_enddt,
            :c_bkcls_strt_dt,
            :c_bkcls_end_dt,
            :ptr_st_cntrct_geninf->l_setl_stlmnt_no,
            :ptr_st_cntrct_geninf->c_rqst_typ,
            :ptr_st_cntrct_geninf->l_eba_cntrct_id,
            :ptr_st_cntrct_geninf->l_ca_lvl,
            :ptr_st_cntrct_geninf->l_multplr,
            :ptr_st_cntrct_geninf->l_min_lot_qty,
            :ptr_st_cntrct_geninf->l_tick_sz
     FROM   FTQ_FO_TRD_QT
     WHERE  FTQ_XCHNG_CD  = :ptr_st_contract->c_xchng_cd
     AND    FTQ_PRDCT_TYP = decode(:ptr_st_contract->c_prd_typ,'F','S',:ptr_st_contract->c_prd_typ)
     AND    FTQ_UNDRLYNG  = :ptr_st_contract->c_undrlyng
     AND    FTQ_EXPRY_DT  = to_date(:c_expry_dt1,'dd-Mon-yyyy')
     AND    FTQ_EXPRY_DT2 = to_date(:c_expry_dt2,'dd-Mon-yyyy')
     AND    FTQ_EXER_TYP  = :ptr_st_contract->c_exrc_typ
     AND    FTQ_OPT_TYP   = :ptr_st_contract->c_opt_typ
     AND    FTQ_STRK_PRC  = :ptr_st_contract->l_strike_prc;

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31305", SQLMSG, c_err_msg );
      return -1;
    }

  SETNULL ( c_exp_dt );
  SETNULL ( c_rcrd_dt );
  SETNULL ( c_nd_start_dt );
  SETNULL ( c_nd_enddt );
  SETNULL ( c_bkcls_strt_dt );
  SETNULL ( c_bkcls_end_dt );

  strcpy (  ptr_st_cntrct_geninf->c_expry_dt , ( char * ) c_exp_dt.arr );
  strcpy (  ptr_st_cntrct_geninf->c_record_dt , ( char * ) c_rcrd_dt.arr );
  strcpy (  ptr_st_cntrct_geninf->c_nd_strt_dt ,( char * ) c_nd_start_dt.arr );
  strcpy (  ptr_st_cntrct_geninf->c_nd_end_dt , ( char * ) c_nd_enddt.arr );
  strcpy (  ptr_st_cntrct_geninf->c_bk_cls_strt_dt,(char *)c_bkcls_strt_dt.arr);
  strcpy (  ptr_st_cntrct_geninf->c_bk_cls_end_dt,(char *) c_bkcls_end_dt.arr);


  return  0;

}
/*** Ver 5.3 Ends ***/

/******* ver 5.7 starts  **********/

int fn_cal_trg_prc( char *c_ServiceName,
                    struct st_pstn_actn *ptr_st_pstn_actn,
                    char c_extra_update,
                    struct st_err_msg *ptr_st_err_msg
                   )
{
    long l_no_of_cntrcts = 0;
    long l_ibuy_qty = 0;
    long l_isell_qty = 0;
    long l_exbuy_qty = 0;
    long l_ex_sell_qty = 0;
    double d_min_margin_pctg = 0.0;
    double d_min_margin_pctg_1 = 0.0;
    double d_ers_prcntg = 0.0;
    double d_sprd_min_prcntg = 0.0;
    double d_sprd_min_trg_prcnt =0.0;
    double d_total_margin = 0.0;
    int i_tck_sz = 0;
    double d_trigger_prc = 0.0;
    double d_erstrigger_prc = 0.0;
    double d_trgr_prc = 0.0;
    double d_ers_trgr_prc = 0.0;
    int i_returncode = 0;
    char c_opn_pos_flw='\0';
    double d_opn_pos_val = 0.0;
    long l_open_pos_qty = 0;
		double d_wght_price = 0.0;
		double d_min_mrgn = 0.0;
		double d_cls_prc = 0.0;
	  int i_up_down = 0;
	  #define   UPPER 1
	  #define   LOWER 2
    double d_span_margin=0.0;
    char c_expry_dt[25]="\0";
    char c_exrc_typ='\0';
    long l_strike_prc=0;
    char c_opt_typ='\0';
    char c_prd_typ='\0';
    char c_ctgry_indstk='\0';

		long l_pending_ibuy=0;
		long l_pending_isell = 0;
		long l_pending_exbuy=0;
		long l_pending_exsell=0;
		long l_count=0;

	  int is_trg_computed = 0;

    if(DEBUG_MSG_LVL_3)
    {
 	   fn_userlog( c_ServiceName, "MATCH :%s:",ptr_st_pstn_actn->c_cln_mtch_accnt);
	   fn_userlog( c_ServiceName, "EXCH :%s:",ptr_st_pstn_actn->c_xchng_cd);
	   fn_userlog( c_ServiceName, "PRDCT TYP :%c:",ptr_st_pstn_actn->c_prd_typ);
	   fn_userlog( c_ServiceName, "OPT TYP :%c:",ptr_st_pstn_actn->c_opt_typ);
	   fn_userlog( c_ServiceName, "EXER TYP :%c:",ptr_st_pstn_actn->c_exrc_typ);
	   fn_userlog( c_ServiceName, "STRIKE :%ld:",ptr_st_pstn_actn->l_strike_prc);
	   fn_userlog( c_ServiceName, "UNDERLYING :%s:",ptr_st_pstn_actn->c_undrlyng);
    }

    /*** check if open position exists in input underlying ****/

     EXEC SQL
          SELECT COUNT(*)
            INTO :l_no_of_cntrcts
            FROM FCP_FO_SPN_CNTRCT_PSTN
           WHERE FCP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
             AND FCP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
             AND FCP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
             AND FCP_OPNPSTN_QTY    != 0;

  if ( SQLCODE != 0  && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "L31805", SQLMSG, ptr_st_err_msg->c_err_msg );
    return -1;
  }

  if(DEBUG_MSG_LVL_3)
  {
   fn_userlog( c_ServiceName, "CR_ISEC14_140009 l_no_of_cntrcts :%ld:",l_no_of_cntrcts);
  }

  /*** if only one open position exists then go ahead else update trg prc as 0 ***/

  if( l_no_of_cntrcts == 1 )
  {
 /*** find the details of open position ***/

  EXEC SQL
       SELECT NVL(FCP_IBUY_QTY,0),
              NVL(FCP_ISELL_QTY,0),
              NVL(FCP_EXBUY_QTY,0),
              NVL(FCP_EXSELL_QTY,0),
              abs(NVL(FCP_OPNPSTN_QTY,0)),
              FCP_OPNPSTN_FLW,
              abs(NVL(FCP_MTM_OPN_VAL,0)),
              FCP_EXPRY_DT,
              FCP_EXER_TYP,
              NVL(FCP_STRK_PRC,0),
              NVL(FCP_OPT_TYP,'*'),
              FCP_PRDCT_TYP,
              FCP_INDSTK
         INTO :l_ibuy_qty,
              :l_isell_qty,
              :l_exbuy_qty,
              :l_ex_sell_qty,
              :l_open_pos_qty,
              :c_opn_pos_flw,
              :d_opn_pos_val,
              :c_expry_dt,
              :c_exrc_typ,
              :l_strike_prc,
              :c_opt_typ,
              :c_prd_typ,
              :c_ctgry_indstk
         FROM FCP_FO_SPN_CNTRCT_PSTN
        WHERE FCP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
         AND FCP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
         AND FCP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
         AND FCP_OPNPSTN_QTY     != 0;

  if ( SQLCODE != 0 && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "L31810", SQLMSG, ptr_st_err_msg->c_err_msg );
    return -1;
  }
  else if( SQLCODE == NO_DATA_FOUND )
  {
    fn_userlog( c_ServiceName, "CR_ISEC14_140009 NO OPEN POSITION FOR THIS CONTRACT");
    return 0;
  }

  rtrim(c_expry_dt);

 /*** check if pending order exists in different contract than the open position contract ***/

  EXEC SQL
       SELECT COUNT(*)
         INTO :l_count
         FROM FCP_FO_SPN_CNTRCT_PSTN
        WHERE FCP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
         AND  FCP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
         AND  FCP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
         AND  FCP_EXPRY_DT != :c_expry_dt
         AND  (FCP_IBUY_QTY <> 0 OR FCP_ISELL_QTY <> 0 OR FCP_EXBUY_QTY <> 0 OR FCP_EXSELL_QTY <> 0);

   if ( SQLCODE != 0 && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "L31815", SQLMSG, ptr_st_err_msg->c_err_msg );
    return -1;
  }

  /*** check if pending order exists in different strike ****/

  EXEC SQL
       SELECT NVL(SUM(NVL(FCP_IBUY_QTY,0)),0),
              NVL(abs(SUM( NVL(FCP_ISELL_QTY,0))),0),
              NVL(SUM(NVL(FCP_EXBUY_QTY,0)),0),
              NVL(abs(SUM(NVL(FCP_EXSELL_QTY,0))),0)
        INTO :l_pending_ibuy,
             :l_pending_isell,
             :l_pending_exbuy,
             :l_pending_exsell
         FROM FCP_FO_SPN_CNTRCT_PSTN
        WHERE FCP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
         AND FCP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
         AND FCP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
         AND FCP_STRK_PRC        != :l_strike_prc
         AND FCP_OPT_TYP  != :c_opt_typ;

  if ( SQLCODE != 0 && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "L31820", SQLMSG, ptr_st_err_msg->c_err_msg );
    return -1;
  }

  if(DEBUG_MSG_LVL_3)
  {
   fn_userlog( c_ServiceName, "CR_ISEC14_140009 l_ibuy_qty :%ld:",l_ibuy_qty);
   fn_userlog( c_ServiceName, "CR_ISEC14_140009 l_isell_qty :%ld:",l_isell_qty);
   fn_userlog( c_ServiceName, "CR_ISEC14_140009 l_exbuy_qty :%ld:",l_exbuy_qty);
   fn_userlog( c_ServiceName, "CR_ISEC14_140009 l_ex_sell_qty :%ld:",l_ex_sell_qty);
   fn_userlog( c_ServiceName, "CR_ISEC14_140009 l_open_pos_qty :%ld:",l_open_pos_qty);
   fn_userlog( c_ServiceName, "CR_ISEC14_140009 c_opn_pos_flw :%c:",c_opn_pos_flw);
   fn_userlog( c_ServiceName, "CR_ISEC14_140009 d_opn_pos_val :%lf:",d_opn_pos_val);
	 fn_userlog( c_ServiceName, "CR_ISEC14_140009 PRDCT TYP :%c:",c_prd_typ);
	 fn_userlog( c_ServiceName, "CR_ISEC14_140009 OPT TYP :%c:",c_opt_typ);
	 fn_userlog( c_ServiceName, "CR_ISEC14_140009 EXER TYP :%c:",c_exrc_typ);
	 fn_userlog( c_ServiceName, "CR_ISEC14_140009 STRIKE :%ld:",l_strike_prc);
	 fn_userlog( c_ServiceName, "CR_ISEC14_140009 EXPIRY DATE :%s:",c_expry_dt);
   fn_userlog( c_ServiceName, "CR_ISEC14_140009 INDSTK :%c:",c_ctgry_indstk);
   fn_userlog( c_ServiceName, "CR_ISEC14_140009 PENDING QTY l_count :%ld:",l_count);
   fn_userlog( c_ServiceName, "CR_ISEC14_140009 l_pending_ibuy :%ld: l_pending_isell :%ld: l_pending_exbuy :%ld: l_pending_exsell :%ld:",l_pending_ibuy,l_pending_isell,l_pending_exbuy,l_pending_exsell);
 }

  if( l_pending_ibuy != 0 || l_pending_isell != 0 || l_pending_exbuy != 0 || l_pending_exsell!=0 ||l_count>0)
  {
     fn_userlog( c_ServiceName, "NO need to calculate trigger price pending qty");
     d_trigger_prc = 0.0;
     d_erstrigger_prc = 0.0;
  }
  else if( c_prd_typ == 'O' && c_opn_pos_flw == 'B' )
  {
     fn_userlog( c_ServiceName, "NO need to calculate trigger price OPTION BUY ");
     d_trigger_prc = 0.0;
     d_erstrigger_prc = 0.0;
  }
  else
  {

    d_total_margin = 0;
    EXEC SQL
     SELECT sum(NVL(FUS_INITIAL_MRGN,0) + NVL(FUS_BLCKD_PL,0)),
            sum(NVL(FUS_SPAN_WEMULT_MRGN,0)) ,
            sum(NVL(FUS_MIN_MRGN,0))
       INTO :d_total_margin,
            :d_span_margin,
            :d_min_mrgn
       FROM FUS_FO_UNDRLYNG_SPN_PSTN
      WHERE FUS_CLM_MTCH_ACCNT =:ptr_st_pstn_actn->c_cln_mtch_accnt
        AND FUS_XCHNG_CD  =:ptr_st_pstn_actn->c_xchng_cd
        AND FUS_INDSTK  =:c_ctgry_indstk
        AND FUS_UNDRLYNG  =:ptr_st_pstn_actn->c_undrlyng
        AND FUS_UOPNPSTN_QTY != 0;

    if ( ( SQLCODE != 0 ) &&
      ( SQLCODE != NO_DATA_FOUND ) )
     {
      fn_errlog( c_ServiceName, "S31310", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
     }

   if(DEBUG_MSG_LVL_3)
   {
    fn_userlog( c_ServiceName, "CR_ISEC14_140009 d_total_margin :%lf:",d_total_margin);
    fn_userlog( c_ServiceName, "CR_ISEC14_140009 d_span_margin :%lf:",d_span_margin);
    fn_userlog( c_ServiceName, "CR_ISEC14_140009 d_min_mrgn :%lf:",d_min_mrgn);
   }

    EXEC SQL
      SELECT FTQ_TCK_SZ,
             NVL(FTQ_CLS_PRC,0)
        INTO :i_tck_sz,
             :d_cls_prc
        FROM FTQ_FO_TRD_QT
       WHERE FTQ_XCHNG_CD=:ptr_st_pstn_actn->c_xchng_cd
         AND FTQ_PRDCT_TYP=DECODE(:c_prd_typ,'P','F',:c_prd_typ)
         AND FTQ_UNDRLYNG  =:ptr_st_pstn_actn->c_undrlyng
         AND FTQ_EXPRY_DT  =:c_expry_dt
         AND FTQ_OPT_TYP   = :c_opt_typ
         AND FTQ_STRK_PRC  = :l_strike_prc;

   if ( ( SQLCODE != 0 ) &&
      ( SQLCODE != NO_DATA_FOUND ) )
     {
      fn_errlog( c_ServiceName, "S31315", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
     }


     if(SQLCODE == NO_DATA_FOUND)
     {
       i_tck_sz=5;
     }

     if(DEBUG_MSG_LVL_3)
     {
      fn_userlog(c_ServiceName,"c_prd_typ :%c:",c_prd_typ);
     }


     if(  c_prd_typ  == 'O' )
     {
        d_wght_price = d_cls_prc;
        if(DEBUG_MSG_LVL_3)
        {
         fn_userlog( c_ServiceName, "CR_ISEC14_140009 d_cls_prc :%lf:",d_cls_prc);
        }
     }
     else if( c_prd_typ == 'F' )
     {
        d_wght_price = (double) d_opn_pos_val / l_open_pos_qty;
     }

     if(DEBUG_MSG_LVL_3)
     {
      fn_userlog(c_ServiceName,"d_wght_price :%lf:",d_wght_price);
     }

    if(c_opn_pos_flw == 'B')
    {

     d_trgr_prc = d_wght_price -((d_total_margin - (d_min_mrgn))/(double)l_open_pos_qty);
     if( c_prd_typ !='P' )
     {
       d_ers_trgr_prc = d_wght_price -((d_total_margin - (d_min_mrgn))/(double)l_open_pos_qty);
     }
     i_up_down = UPPER;
     if(DEBUG_MSG_LVL_3)
     { 
       fn_userlog( c_ServiceName, "CR_ISEC14_140009 d_wght_price :%lf: d_trgr_prc :%lf: d_ers_trgr_prc :%lf BUY",d_wght_price,d_trgr_prc,d_ers_trgr_prc);
     }

    }
    else if(c_opn_pos_flw == 'S')
    {
     d_trgr_prc = d_wght_price + ((d_total_margin - (d_min_mrgn))/(double)l_open_pos_qty);
     if( c_prd_typ !='P' )
     {
     d_ers_trgr_prc = d_wght_price + ((d_total_margin - (d_min_mrgn))/(double)l_open_pos_qty);
     }
     i_up_down = LOWER;

     if(DEBUG_MSG_LVL_3)
     {
      fn_userlog( c_ServiceName, "CR_ISEC14_140009 d_wght_price :%lf: d_trgr_prc :%lf: d_ers_trgr_prc :%lf SELL",d_wght_price,d_trgr_prc,d_ers_trgr_prc);
     }
    }
    else
    {
     fn_userlog(c_ServiceName,"Invalid Open Position Flw");
     return -1;
    }
    if(DEBUG_MSG_LVL_3)
    {
     fn_userlog( c_ServiceName, "CR_ISEC14_140009 i_tck_sz :%d:",i_tck_sz);
    }

     i_returncode = fn_nearest_paise_fno( c_ServiceName,
                                   d_trgr_prc,
                                   i_tck_sz,
                                   i_up_down,
                                   c_err_msg,
                                   &d_trigger_prc );
    if ( i_returncode != 0 )
    {
     fn_errlog( c_ServiceName, "S31320",LIBMSG,c_err_msg);
     return FAILURE;
    }


     i_returncode = fn_nearest_paise_fno( c_ServiceName,
                                   d_ers_trgr_prc,
                                   i_tck_sz,
                                   i_up_down,
                                   c_err_msg,
                                   &d_erstrigger_prc );
     if ( i_returncode != 0 )
     {
      fn_errlog( c_ServiceName, "S31325",LIBMSG,c_err_msg);
      return FAILURE;
     }
     is_trg_computed = 1;
    }
 }
 else
 {
    if(DEBUG_MSG_LVL_3)
    {
     fn_userlog( c_ServiceName, "NO need to calculate trigger price as in one underlying multiple contracts exist ");
    }
     d_trigger_prc = 0.0;
     d_erstrigger_prc = 0.0;
 }
    if(DEBUG_MSG_LVL_3)
    {
     fn_userlog( c_ServiceName, "CR_ISEC14_140009 FINAL :%lf: ers :%lf:",d_trigger_prc,d_erstrigger_prc);
    }

    if( is_trg_computed == 0)
    {
     EXEC SQL
        UPDATE FCP_FO_SPN_CNTRCT_PSTN
         SET   FCP_TRG_PRC       = :d_trigger_prc,
               FCP_MIN_TRG_PRC   = :d_erstrigger_prc
        WHERE  FCP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
         AND   FCP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
         AND   FCP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng;
    }
    else
    {
     EXEC SQL
        UPDATE FCP_FO_SPN_CNTRCT_PSTN
         SET   FCP_TRG_PRC       = :d_trigger_prc,
               FCP_MIN_TRG_PRC   = :d_erstrigger_prc
        WHERE  FCP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
         AND   FCP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
         AND   FCP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
         AND   FCP_EXPRY_DT        = :c_expry_dt
         AND   FCP_EXER_TYP        = :c_exrc_typ
         AND   FCP_STRK_PRC        = :l_strike_prc
         AND   FCP_OPT_TYP         = :c_opt_typ
         AND   FCP_PRDCT_TYP       = :c_prd_typ
         AND   FCP_INDSTK          = :c_ctgry_indstk;
     }

     if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
     {
      fn_errlog( c_ServiceName, "S31330", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
     }
    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName, "CR_ISEC14_140009 c_extra_update :%c:",c_extra_update);
    }

    if( c_extra_update == 'R' )
    {
       fn_userlog( c_ServiceName, "CR_ISEC14_140009 report table :%ld: trade date :%s:",ptr_st_pstn_actn->l_report_no,ptr_st_pstn_actn->c_imtm_rmrks);

      rtrim(ptr_st_pstn_actn->c_imtm_rmrks);

       EXEC SQL
            UPDATE SER_SPN_EODMTM_REP
              SET  SER_TRG_PRC = :d_trigger_prc,
                   SER_MIN_TRG_PRC = :d_erstrigger_prc
             WHERE SER_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
               AND SER_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
               AND SER_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
               AND SER_REPORT_NO      = :ptr_st_pstn_actn->l_report_no
               AND SER_TRD_DT         = :ptr_st_pstn_actn->c_imtm_rmrks
               AND trunc(SER_RPRT_TM_STMP) = trunc(sysdate);

     if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
     {
       fn_errlog( c_ServiceName, "S31335", SQLMSG, ptr_st_err_msg->c_err_msg );
       return FAILURE;
     }
   }
   else if (c_extra_update == 'M')
   {

     fn_userlog( c_ServiceName, "CR_ISEC14_140009 rep :%ld: indstk :%c:",ptr_st_pstn_actn->l_report_no,ptr_st_pstn_actn->c_ctgry_indstk);

       EXEC SQL
             UPDATE SIR_SPN_IMTM_REP
                SET SIR_TRG_PRC = :d_trigger_prc,
                    SIR_MIN_TRG_PRC = :d_erstrigger_prc
              WHERE SIR_CLM_MTCH_ACCNT= :ptr_st_pstn_actn->c_cln_mtch_accnt
                AND SIR_XCHNG_CD= :ptr_st_pstn_actn->c_xchng_cd
                AND SIR_REPORT_NO = :ptr_st_pstn_actn->l_report_no
                AND trunc(SIR_RPRT_TM_STMP) = TRUNC(sysdate)
                AND SIR_INDSTK = :ptr_st_pstn_actn->c_ctgry_indstk
                AND SIR_UNDRLYNG= :ptr_st_pstn_actn->c_undrlyng;

     if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
     {
      fn_errlog( c_ServiceName, "S31340", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
     }
   }
   if(DEBUG_MSG_LVL_3)
   {
    fn_userlog( c_ServiceName, "*** Function fn_cal_spndlvry_mrgn ended ***");
   }

   return 0;

}
/*** ver 5.7 ends **/

/*** Ver 6.3 starts ***/
int fn_spnavg_prc_cal(char *c_ServiceName,
                   struct st_pstn_actn st_pstnactn,
                   double  *d_prtfl_avgprc
                  )
{

  long int l_opnpstn_qty= 0;
  char   c_opnpstn_flw ='\0';
  double d_org_opn_val = 0.0;
  int i_returncode=0;
	double d_avg_pr = 0.0;

  varchar c_errmsg[256];
  struct vw_contract st_cntrct;
  struct vw_usr_prfl st_usr_prfl;
  MEMSET(st_cntrct);
  MEMSET(st_usr_prfl);

  strcpy(st_usr_prfl.c_cln_mtch_accnt,st_pstnactn.c_cln_mtch_accnt);
  strcpy(st_cntrct.c_xchng_cd,st_pstnactn.c_xchng_cd);
  st_cntrct.c_prd_typ = st_pstnactn.c_prd_typ;
  st_cntrct.c_ctgry_indstk= st_pstnactn.c_ctgry_indstk;
  strcpy(st_cntrct.c_undrlyng, st_pstnactn.c_undrlyng);
  strcpy(st_cntrct.c_expry_dt, st_pstnactn.c_expry_dt);
  st_cntrct.c_exrc_typ = st_pstnactn.c_exrc_typ;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName,"st_usr_prfl.c_cln_mtch_accnt is   |%s|",st_usr_prfl.c_cln_mtch_accnt);
      fn_userlog( c_ServiceName,"st_cntrct.c_xchng_cd is    |%s|",st_cntrct.c_xchng_cd);
      fn_userlog( c_ServiceName,"st_cntrct.c_prd_typ is     |%c|",st_cntrct.c_prd_typ);
      fn_userlog( c_ServiceName,"st_cntrct.c_ctgry_indstk is|%c|",st_cntrct.c_ctgry_indstk);
      fn_userlog( c_ServiceName," st_cntrct.c_undrlyng is   |%s|",st_cntrct.c_undrlyng);
      fn_userlog( c_ServiceName," st_cntrct.c_expry_dt is   |%s|",st_cntrct.c_expry_dt);
      fn_userlog( c_ServiceName," st_cntrct.c_exrc_typ is   |%c|",st_cntrct.c_exrc_typ);
    }

    EXEC SQL
        SELECT FCP_OPNPSTN_QTY,
               FCP_OPNPSTN_FLW,
               FCP_OPNPSTN_VAL
          INTO :l_opnpstn_qty,
               :c_opnpstn_flw,
               :d_org_opn_val
          FROM FCP_FO_SPN_CNTRCT_PSTN
        WHERE  FCP_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
          AND  FCP_XCHNG_CD       = :st_cntrct.c_xchng_cd
          AND  FCP_PRDCT_TYP      = :st_cntrct.c_prd_typ
          AND  FCP_INDSTK         = :st_cntrct.c_ctgry_indstk
          AND  FCP_UNDRLYNG       = :st_cntrct.c_undrlyng
          AND  FCP_EXPRY_DT       = :st_cntrct.c_expry_dt
          AND  FCP_EXER_TYP       = :st_cntrct.c_exrc_typ;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31345", SQLMSG, c_errmsg.arr  );
        return -1;
       }

     if (l_opnpstn_qty > 0 )
     {
       i_returncode = fn_spnbuy_opnpstn(c_ServiceName,
                                    st_usr_prfl.c_cln_mtch_accnt,
                                    st_cntrct.c_xchng_cd,
                                    st_cntrct.c_undrlyng,
                                    st_cntrct.c_expry_dt,
                                    st_cntrct.c_exrc_typ,
                                    st_cntrct.c_prd_typ,
																		&d_avg_pr);

        if(i_returncode == -1)
        {
          fn_errlog( c_ServiceName, "S31350", LIBMSG, c_errmsg.arr  );
          return -1;
        }
      }
      else if ( l_opnpstn_qty < 0 )
      {
        i_returncode = fn_spnsell_opnpstn(c_ServiceName,
                                      st_usr_prfl.c_cln_mtch_accnt,
                                      st_cntrct.c_xchng_cd,
                                      st_cntrct.c_undrlyng,
                                      st_cntrct.c_expry_dt,
                                      st_cntrct.c_exrc_typ,
                                      st_cntrct.c_prd_typ,
																			&d_avg_pr);
        if(i_returncode == -1)
        {
          fn_errlog( c_ServiceName, "S31355", LIBMSG, c_errmsg.arr  );
          return -1;
        }
      }
      else if ( l_opnpstn_qty == 0 )
      {
        d_avg_pr = 0.0;
        /***
        i_returncode = fn_sqroff_pstn (c_ServiceName,
                                    st_usr_prfl.c_cln_mtch_accnt,
                                    st_cntrct.c_xchng_cd,
                                    st_cntrct.c_undrlyng,
                                    st_cntrct.c_expry_dt,
                                    st_cntrct.c_exrc_typ,
                                    st_cntrct.c_prd_typ);

        if(i_returncode == -1)
        {
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }***/
      }

    *d_prtfl_avgprc = d_avg_pr;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName,"Average prize is  |%lf|",d_prtfl_avgprc);
    }

}

int fn_spnbuy_opnpstn(char *c_ServiceName,
                   char *c_cln_mtch_accnt,
                   char *c_xchng_cd,
                   char *c_undrlyng,
                   char *c_expry_dt,
                   char c_exrc_typ,
                   char c_prdct_typ,
									 double *d_avg_pr)
{

  sql_cursor trd_cursor;

  varchar c_trd_dt [ LEN_DATE ];
  varchar c_errmsg[256];

  long l_tot_sell_qty_m = 0;
  long l_tot_sell_qty_h = 0;
  double d_sell_val_m = 0;
  double d_sell_val_h = 0;
  double d_sell_val = 0;
  double d_buy_val = 0;
  double d_opn_buy_val = 0;
  double d_uncrst_prft = 0;
  long l_tot_sell_qty = 0;
  long int li_uncrst_qty = 0;
  long int li_exctd_qty = 0 ;
  long int li_exctd_rt = 0 ;

  long int li_qty_bal = 0;
  long int li_cum_exctd_qty = 0;
  long int li_net_qty_bal = 0;
  double d_net_avg_rt = 0;

  double d_frsh_brk = 0.0 ;
  double d_cvr_brk = 0.0 ;

  char c_sell_flw = 'S';
  char c_buy_flw  = 'B';
  long int li_bal_qty = 0 ;
  long int li_crst_qty = 0 ;

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Inside Function fn_buy_opnpstn");
  }

  if( DEBUG_MSG_LVL_5 )
  {
    fn_userlog(c_ServiceName,"Match Account Is ;%s:",c_cln_mtch_accnt);
    fn_userlog(c_ServiceName,"Exchnage Code Is :%s:",c_xchng_cd);
    fn_userlog(c_ServiceName,"Product Type Is :%c:",c_prdct_typ);
    fn_userlog(c_ServiceName,"Expiry Date Is :%s:",c_expry_dt);
    fn_userlog(c_ServiceName,"Exercise Type Is :%c:",c_exrc_typ);
    fn_userlog(c_ServiceName,"Underlying Is :%s:",c_undrlyng);
  }


  EXEC SQL
        SELECT  NVL ( SUM ( FTD_EXCTD_QTY ), 0),
                NVL ( SUM ( ( FTD_EXCTD_QTY * FTD_EXCTD_RT ) -
                            NVL ( FTD_FRS_BRKG,0 )           -
                            NVL ( FTD_CVR_BRKG,0 )             ), 0 )
        INTO    :l_tot_sell_qty_m,
                :d_sell_val_m
        FROM    FTD_FO_TRD_DTLS
        WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
        AND     FTD_XCHNG_CD        = :c_xchng_cd
        AND     FTD_PRDCT_TYP = :c_prdct_typ
        AND     FTD_UNDRLYNG        = :c_undrlyng
        AND     FTD_EXPRY_DT        = :c_expry_dt
        AND     FTD_EXER_TYP        = :c_exrc_typ
        AND     FTD_TRD_FLW         = :c_sell_flw ;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31360", SQLMSG, c_errmsg.arr  );
        return -1;
      }

   EXEC SQL
        SELECT  NVL ( SUM ( FTD_EXCTD_QTY ), 0),
                NVL ( SUM ( ( FTD_EXCTD_QTY * FTD_EXCTD_RT ) -
                            NVL ( FTD_FRS_BRKG,0 )           -
                            NVL ( FTD_CVR_BRKG,0 )             ), 0 )
        INTO    :l_tot_sell_qty_h,
                :d_sell_val_h
        FROM    FTD_FO_TRD_DTLS_HSTRY
        WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
        AND     FTD_XCHNG_CD        = :c_xchng_cd
        AND     FTD_PRDCT_TYP = :c_prdct_typ
        AND     FTD_UNDRLYNG        = :c_undrlyng
        AND     FTD_EXPRY_DT        = :c_expry_dt
        AND     FTD_EXER_TYP        = :c_exrc_typ
        AND     FTD_TRD_FLW         = :c_sell_flw ;

   if ( SQLCODE != 0 )
   {
    fn_errlog( c_ServiceName, "S31365", SQLMSG, c_errmsg.arr  );
    return -1;
   }

    l_tot_sell_qty = l_tot_sell_qty_m + l_tot_sell_qty_h;
    d_sell_val = d_sell_val_m + d_sell_val_h;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Total Sell Qty Is ;%ld:",l_tot_sell_qty);
      fn_userlog(c_ServiceName,"Total Sell Value Is ;%lf:",d_sell_val);
    }

    EXEC SQL ALLOCATE :trd_cursor;

    EXEC SQL  EXECUTE
          BEGIN
            OPEN  :trd_cursor FOR
              SELECT FTD_EXCTD_QTY,
                     FTD_EXCTD_RT,
                     NVL (FTD_FRS_BRKG, 0),
                     NVL (FTD_CVR_BRKG, 0),
                     FTD_TRD_DT
              FROM FTD_FO_TRD_DTLS
              WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
              AND     FTD_XCHNG_CD        = :c_xchng_cd
              AND     FTD_PRDCT_TYP = :c_prdct_typ
              AND     FTD_UNDRLYNG        = :c_undrlyng
              AND     FTD_EXPRY_DT        = :c_expry_dt
              AND     FTD_EXER_TYP        = :c_exrc_typ
              AND     FTD_TRD_FLW         = :c_buy_flw
              UNION ALL
              SELECT FTD_EXCTD_QTY,
                     FTD_EXCTD_RT,
                     NVL (FTD_FRS_BRKG, 0),
                     NVL (FTD_CVR_BRKG, 0),
                     FTD_TRD_DT
              FROM FTD_FO_TRD_DTLS_HSTRY
              WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
              AND     FTD_XCHNG_CD        = :c_xchng_cd
              AND     FTD_PRDCT_TYP = :c_prdct_typ
              AND     FTD_UNDRLYNG        = :c_undrlyng
              AND     FTD_EXPRY_DT        = :c_expry_dt
              AND     FTD_EXER_TYP        = :c_exrc_typ
              AND     FTD_TRD_FLW         = :c_buy_flw
              ORDER BY 5;
          END;
        END-EXEC;

      li_bal_qty = l_tot_sell_qty;

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Initial balance Qty Is ;%ld:",li_bal_qty);
      }

    while ( 1 )
      {
        li_qty_bal = 0;

        EXEC SQL
          FETCH :trd_cursor
          INTO :li_exctd_qty,
               :li_exctd_rt,
               :d_frsh_brk,
               :d_cvr_brk,
               :c_trd_dt;
        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {

            break;
          }
          else
          {
            fn_errlog( c_ServiceName, "S31370", SQLMSG, c_errmsg.arr  );
            EXEC SQL CLOSE :trd_cursor;
            EXEC SQL FREE :trd_cursor;

            return -1;
          }
        }

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"While loop Executed Qty Is ;%ld:",li_exctd_qty);
          fn_userlog(c_ServiceName,"While loop Executed Rate Is ;%ld:",li_exctd_rt);
          fn_userlog(c_ServiceName,"While loop Balance Qty Is ;%ld:",li_bal_qty);
        }

      if ( li_bal_qty > 0 )
        {
          if(DEBUG_MSG_LVL_5)
          {
            fn_userlog(c_ServiceName,"Inside li_bal_qty > 0");
            fn_userlog(c_ServiceName,"HERE li_bal_qty is :%ld:",li_bal_qty);
            fn_userlog(c_ServiceName,"HERE li_exctd_qty is :%ld:",li_exctd_qty);
          }

          li_crst_qty = fn_minl ( li_bal_qty, li_exctd_qty );
          d_buy_val = d_buy_val + ( (double) li_crst_qty * (double)  li_exctd_rt ) +
                      d_frsh_brk + d_cvr_brk;

          li_bal_qty = li_bal_qty - li_crst_qty;

          if ( li_bal_qty == 0 )
          {
            li_uncrst_qty = li_exctd_qty - li_crst_qty;
            d_opn_buy_val = d_opn_buy_val  + ( (double) li_uncrst_qty * (double) li_exctd_rt ) +
                            d_frsh_brk + d_cvr_brk;
          }
        }
        else
        {
          if(DEBUG_MSG_LVL_5)
          {
            fn_userlog(c_ServiceName,"Inside li_bal_qty = 0");
            fn_userlog(c_ServiceName,"Executed Qty Is :%ld:",li_exctd_qty);
          }

          li_uncrst_qty = li_uncrst_qty + li_exctd_qty;
          d_opn_buy_val = d_opn_buy_val  + ( (double) li_exctd_qty * (double)  li_exctd_rt ) +
                          d_frsh_brk + d_cvr_brk;

          if(DEBUG_MSG_LVL_5)
          {
            fn_userlog(c_ServiceName,"Uncrystalised Qty Is :%ld:",li_uncrst_qty);
          }
        }

        li_cum_exctd_qty = li_cum_exctd_qty + li_exctd_qty;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Cumulative Executed Qty Is ;%ld:",li_cum_exctd_qty);
        }

        if( (li_cum_exctd_qty  - l_tot_sell_qty) > 0)
        {
          li_qty_bal = fn_minl(li_cum_exctd_qty  - l_tot_sell_qty, li_exctd_qty);
          li_net_qty_bal = li_net_qty_bal + li_qty_bal;
        }

        if ( li_qty_bal > 0 )
        {
          d_net_avg_rt = d_net_avg_rt + (double) li_qty_bal * (double) li_exctd_rt;
        }

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"While loop Net Avg Rate Is ;%lf:",d_net_avg_rt);
          fn_userlog(c_ServiceName,"While loop Net Qty Bal Is ;%ld:",li_net_qty_bal);
        }
      }

      EXEC SQL CLOSE :trd_cursor;
      EXEC SQL FREE :trd_cursor;

      *d_avg_pr = d_net_avg_rt/(double)li_net_qty_bal;

      if( DEBUG_MSG_LVL_0 )
      {
        fn_userlog(c_ServiceName,"Avgtrd Pr=============d_avg_pr is :%lf:",*d_avg_pr);
      }
}

int fn_spnsell_opnpstn(char *c_ServiceName,
                   char *c_cln_mtch_accnt,
                   char *c_xchng_cd,
                   char *c_undrlyng,
                   char *c_expry_dt,
                   char c_exrc_typ,
                   char c_prdct_typ,
									 double *d_avg_pr)
{

  sql_cursor trd_cursor;

  double d_sell_val = 0;
  double d_buy_val = 0;
  double d_opn_sell_val = 0;
  double d_uncrst_prft = 0;
  double d_crst_prft = 0;
  long int li_uncrst_qty = 0;

  long int li_qty_bal = 0;
  long int li_cum_exctd_qty = 0;
  long int li_net_qty_bal = 0;
  double d_net_avg_rt = 0;
  long int li_exctd_qty = 0 ;
  long int li_exctd_rt = 0 ;

  char c_sell_flw = 'S';
  char c_buy_flw  = 'B';
  varchar c_errmsg[256];

  double d_frsh_brk = 0.0 ;
  double d_cvr_brk = 0.0 ;
  varchar c_trd_dt [ LEN_DATE ];

  long int l_tot_buy_qty_m = 0 ;
  double d_buy_val_m = 0.0 ;
  long int l_tot_buy_qty_h = 0;
  double d_buy_val_h = 0.0 ;
  long int l_tot_buy_qty = 0 ;
  double d_opn_buy_val = 0.0 ;
  long int li_bal_qty = 0 ;
  long int li_crst_qty = 0 ;

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Inside Function fn_sell_opnpstn ");
  }

  if( DEBUG_MSG_LVL_5 )
  {
    fn_userlog(c_ServiceName,"Match Account Is ;%s:",c_cln_mtch_accnt);
    fn_userlog(c_ServiceName,"Exchnage Code Is :%s:",c_xchng_cd);
    fn_userlog(c_ServiceName,"Product Type Is :%c:",c_prdct_typ);
    fn_userlog(c_ServiceName,"Expiry Date Is :%s:",c_expry_dt);
    fn_userlog(c_ServiceName,"Exercise Type Is :%c:",c_exrc_typ);
    fn_userlog(c_ServiceName,"Underlying Is :%s:",c_undrlyng);
  }

  EXEC SQL
    SELECT  NVL ( SUM ( FTD_EXCTD_QTY ), 0),
            NVL ( SUM ( ( FTD_EXCTD_QTY * FTD_EXCTD_RT ) -
                            NVL ( FTD_FRS_BRKG,0 )           -
                            NVL ( FTD_CVR_BRKG,0 )             ), 0 )
    INTO    :l_tot_buy_qty_m,
            :d_buy_val_m
    FROM    FTD_FO_TRD_DTLS
    WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
    AND     FTD_XCHNG_CD        = :c_xchng_cd
    AND     FTD_PRDCT_TYP = :c_prdct_typ
    AND     FTD_UNDRLYNG        = :c_undrlyng
    AND     FTD_EXPRY_DT        = :c_expry_dt
    AND     FTD_EXER_TYP        = :c_exrc_typ
    AND     FTD_TRD_FLW         = :c_buy_flw ;

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31375", SQLMSG, c_errmsg.arr  );
      return -1;
    }

  EXEC SQL
    SELECT  NVL ( SUM ( FTD_EXCTD_QTY ), 0),
            NVL ( SUM ( ( FTD_EXCTD_QTY * FTD_EXCTD_RT ) -
                            NVL ( FTD_FRS_BRKG,0 )           -
                            NVL ( FTD_CVR_BRKG,0 )             ), 0 )
    INTO    :l_tot_buy_qty_h,
            :d_buy_val_h
    FROM    FTD_FO_TRD_DTLS_HSTRY
    WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
    AND     FTD_XCHNG_CD        = :c_xchng_cd
    AND     FTD_PRDCT_TYP = :c_prdct_typ
    AND     FTD_UNDRLYNG        = :c_undrlyng
    AND     FTD_EXPRY_DT        = :c_expry_dt
    AND     FTD_EXER_TYP        = :c_exrc_typ
    AND     FTD_TRD_FLW         = :c_buy_flw ;

   if ( SQLCODE != 0 )
   {
     fn_errlog( c_ServiceName, "S31380", SQLMSG, c_errmsg.arr  );
     return -1;
   }

   l_tot_buy_qty = l_tot_buy_qty_m + l_tot_buy_qty_h;
   d_buy_val = d_buy_val_m + d_buy_val_h;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Total Buy Qty Is ;%ld:",l_tot_buy_qty);
    fn_userlog(c_ServiceName,"Total Buy Value Is ;%lf:",d_buy_val);
  }

   EXEC SQL ALLOCATE :trd_cursor;

   EXEC SQL  EXECUTE
          BEGIN
            OPEN  :trd_cursor FOR
              SELECT FTD_EXCTD_QTY,
                     FTD_EXCTD_RT,
                     NVL (FTD_FRS_BRKG, 0),
                     NVL (FTD_CVR_BRKG, 0),
                     FTD_TRD_DT
              FROM FTD_FO_TRD_DTLS
              WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
              AND     FTD_XCHNG_CD        = :c_xchng_cd
              AND     FTD_PRDCT_TYP = :c_prdct_typ
              AND     FTD_UNDRLYNG        = :c_undrlyng
              AND     FTD_EXPRY_DT        = :c_expry_dt
              AND     FTD_EXER_TYP        = :c_exrc_typ
              AND     FTD_TRD_FLW         = :c_sell_flw
              UNION ALL
              SELECT FTD_EXCTD_QTY,
                     FTD_EXCTD_RT,
                     NVL (FTD_FRS_BRKG, 0),
                     NVL (FTD_CVR_BRKG, 0),
                     FTD_TRD_DT
              FROM FTD_FO_TRD_DTLS_HSTRY
              WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
              AND     FTD_XCHNG_CD        = :c_xchng_cd
              AND     FTD_PRDCT_TYP = :c_prdct_typ
              AND     FTD_UNDRLYNG        = :c_undrlyng
              AND     FTD_EXPRY_DT        = :c_expry_dt
              AND     FTD_EXER_TYP        = :c_exrc_typ
              AND     FTD_TRD_FLW         = :c_sell_flw
              ORDER BY 5;
          END;
        END-EXEC;

      li_bal_qty = l_tot_buy_qty;

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Initial balance Qty Is ;%ld:",li_bal_qty);
      }
    while ( 1 )
      {
      li_qty_bal = 0;

        EXEC SQL
          FETCH :trd_cursor
          INTO :li_exctd_qty,
               :li_exctd_rt,
               :d_frsh_brk,
               :d_cvr_brk,
               :c_trd_dt;
        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
            break;
          }
          else
          {
            fn_errlog( c_ServiceName, "S31385", SQLMSG, c_errmsg.arr  );
            EXEC SQL CLOSE :trd_cursor;
            EXEC SQL FREE :trd_cursor;

          }
        }

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"While loop Executed Qty Is ;%ld:",li_exctd_qty);
          fn_userlog(c_ServiceName,"While loop Executed Rate Is ;%ld:",li_exctd_rt);
          fn_userlog(c_ServiceName,"While loop Balance Qty Is ;%ld:",li_bal_qty);
        }

        if ( li_bal_qty > 0 )
        {
          li_crst_qty = fn_minl ( li_bal_qty, li_exctd_qty );
          d_sell_val = d_sell_val + ( (double) li_crst_qty * (double)  li_exctd_rt ) -
                      d_frsh_brk - d_cvr_brk;
          li_bal_qty = li_bal_qty - li_crst_qty;

          if ( li_bal_qty == 0 )
          {
            if(DEBUG_MSG_LVL_5)
            {
              fn_userlog(c_ServiceName,"Inside SELL li_bal_qty == 0 ");
            }

            li_uncrst_qty = li_exctd_qty - li_crst_qty;
            d_opn_sell_val = d_opn_sell_val  + ( (double) li_uncrst_qty * (double) li_exctd_rt ) -
                             d_frsh_brk - d_cvr_brk;
          }
        }
         else
        {
          li_uncrst_qty = li_uncrst_qty + li_exctd_qty;
          d_opn_sell_val = d_opn_sell_val + ( (double) li_exctd_qty * (double) li_exctd_rt ) -
                          d_frsh_brk - d_cvr_brk;
        }

        li_cum_exctd_qty = li_cum_exctd_qty + li_exctd_qty;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Cumulative Executed Qty Is ;%ld:",li_cum_exctd_qty);
        }

        if( (li_cum_exctd_qty  - l_tot_buy_qty) > 0)
        {
          li_qty_bal = fn_minl(li_cum_exctd_qty  - l_tot_buy_qty, li_exctd_qty);
          li_net_qty_bal = li_net_qty_bal + li_qty_bal;
        }

        if ( li_qty_bal > 0 )
        {
          d_net_avg_rt = d_net_avg_rt + (double) li_qty_bal * (double) li_exctd_rt;
        }

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"While loop Net Avg Rate Is ;%lf:",d_net_avg_rt);
          fn_userlog(c_ServiceName,"While loop Net Qty Bal Is ;%ld:",li_net_qty_bal);
        }
      }

  EXEC SQL CLOSE :trd_cursor;
  EXEC SQL FREE :trd_cursor;

  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"d_sell_val [%lf]",d_sell_val);
    fn_userlog(c_ServiceName,"d_buy_val [%lf]",d_buy_val);
    fn_userlog(c_ServiceName,"d_opn_sell_val [%lf]",d_opn_sell_val);
    fn_userlog(c_ServiceName,"li_uncrst_qty [%ld]",li_uncrst_qty);
  }

  *d_avg_pr = d_net_avg_rt/(double)li_net_qty_bal;

  if( DEBUG_MSG_LVL_0 )
  {
    fn_userlog(c_ServiceName,"Avgtrd Pr=============d_avg_pr is :%lf:",*d_avg_pr);
  }
}
/*** Ver 6.3 ends ***/

/*** Ver 6.8 starts here ***/
int fn_cal_premutilzed(char *c_ServiceName,
                       struct st_pstn_actn *ptr_st_pstn_actn
                       )
{

double d_fcp_prem=0.0;
double d_premium_recbl=0.0;
double d_premium_utilized=0.0;
  char c_trd_dt[LEN_DATE];
  int  i_gid=1;

if(DEBUG_MSG_LVL_3)
{
fn_userlog(c_ServiceName,"ptr_st_pstn_actn->c_cln_mtch_accnt :%s:",ptr_st_pstn_actn->c_cln_mtch_accnt);
fn_userlog(c_ServiceName,"ptr_st_pstn_actn->c_xchng_cd :%s:",ptr_st_pstn_actn->c_xchng_cd);
fn_userlog(c_ServiceName,"ptr_st_pstn_actn->c_prd_typ :%c:",ptr_st_pstn_actn->c_prd_typ);
}

if( ptr_st_pstn_actn->c_prd_typ == 'O' )
{

EXEC SQL
SELECT NVL(SUM( FCP_OPT_PREMIUM ),0)
              INTO :d_fcp_prem
              FROM FCP_FO_SPN_CNTRCT_PSTN
            WHERE FCP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
            AND   FCP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
            AND   FCP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
            AND   ( FCP_IBUY_QTY <> 0  OR
                    FCP_ISELL_QTY <> 0 OR
                    FCP_EXBUY_QTY <> 0 OR
                    FCP_EXSELL_QTY <> 0 OR
                    FCP_OPNPSTN_QTY <> 0 OR
                    FCP_OPT_PREMIUM <> 0
                  );

if ( SQLCODE != 0 )
{
fn_errlog( c_ServiceName, "S31390",SQLMSG , c_err_msg );
return -1;
}

EXEC SQL
SELECT to_char(exg_nxt_trd_dt,'DD-Mon-YYYY')
    INTO   :c_trd_dt
    FROM   exg_xchng_mstr
    WHERE  exg_xchng_cd = :ptr_st_pstn_actn->c_xchng_cd
    AND    exg_mkt_typ = 'D';
if ( SQLCODE != 0 )
{
fn_errlog( c_ServiceName, "S31395",SQLMSG , c_err_msg );
return -1;
}

if(DEBUG_MSG_LVL_3)
{
fn_userlog(c_ServiceName,"c_trade_dt :%s:",c_trd_dt);
}

rtrim(c_trd_dt);

EXEC SQL
    SELECT NVL(FCB_PRMUM_RCVBL,0)
      INTO :d_premium_recbl
      FROM fcb_fo_clnt_blncs
     WHERE fcb_xchng_cd = :ptr_st_pstn_actn->c_xchng_cd
       AND fcb_trd_dt  = to_date( :c_trd_dt, 'DD-Mon-yyyy')
       AND fcb_grp_id  = :i_gid
       AND fcb_clm_mtch_accnt  = :ptr_st_pstn_actn->c_cln_mtch_accnt;
if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
{
fn_errlog( c_ServiceName, "S31400",SQLMSG , c_err_msg );
return -1;
}

if(DEBUG_MSG_LVL_3)
{
fn_userlog(c_ServiceName,"d_premium_recbl :%lf:",d_premium_recbl);
fn_userlog(c_ServiceName,"d_fcp_prem :%lf:",d_fcp_prem);
}

if( d_premium_recbl < 0.0 )
{
  d_premium_recbl = 0;
}

d_premium_utilized = fn_mind( d_premium_recbl,d_fcp_prem);

if(DEBUG_MSG_LVL_3)
{
fn_userlog(c_ServiceName,"d_premium_utilized :%lf:",d_premium_utilized);
}

EXEC SQL
  UPDATE  fcb_fo_clnt_blncs
     SET  fcb_prmum_utilised =:d_premium_utilized
   WHERE  fcb_xchng_cd = :ptr_st_pstn_actn->c_xchng_cd
       AND fcb_trd_dt  = to_date( :c_trd_dt, 'DD-Mon-yyyy')
       AND fcb_grp_id  = :i_gid
       AND fcb_clm_mtch_accnt  = :ptr_st_pstn_actn->c_cln_mtch_accnt;
if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
{
fn_errlog( c_ServiceName, "S31405",SQLMSG , c_err_msg );
return -1;
}

}
else
{
   /*** Not applicable for other than option **/
}

return 0;

}

/** Ver 7.0 starts here ***/
int fn_get_bodspan_mrgn( FBFR32 *ptr_fml_ibuf,
                         int    i_cntrct_cnt,
                         double *d_spn_mrgn,
                         double *d_nov,
                         double *d_total_mrgn,
                         char *c_ServiceName,
                         char *c_err_msg
                       )
{

 int i_rtrn_cd1=0;
 double d_spn_mrgn_t=0;
 double d_nov_t=0;
 double d_total_mrgn_t=0;

 double d_spn_mrgn1=0.0;
 double d_spn_mrgn2=0.0;
 double d_nov1=0.0;
 double d_nov2=0.0;
 double d_total_mrgn1=0.0;
 double d_total_mrgn2=0.0;

 char c_mtch_accnt1[11];
 char c_mtch_accnt2[11];
 char c_spn_mrgn1[20];
 char c_spn_mrgn2[20];
 char c_nov1[20];
 char c_nov2[20];
 char c_total_mrgn1[20];
 char c_total_mrgn2[20];

 long int li_len_tobuf=0;

 char c_op_strng[ 16000 ];
 char c_op_strng1[ 16000 ];
 char c_op_strng2[ 16000 ];
 char c_seq_num1[12000];
 char c_seq_num2[12000];
 char c_mrgn_indctr[3];
 char c_xchng_cd[3];
 char c_xchng_cd1[3];
 char c_xchng_cd2[3];
 char c_seq_num[12000];
 char c_mtch_accnt[11];
 char c_spn_mrgn[20];
 char c_nov[20];
 char c_total_mrgn[20];

 char *null_ptr  = 0;
 FBFR32 *ptr_fml_Obuffer;

 MEMSET(c_op_strng);
 MEMSET(c_op_strng1);
 MEMSET(c_op_strng2);
 MEMSET(c_mrgn_indctr);
 MEMSET(c_xchng_cd);
 MEMSET(c_seq_num);
 MEMSET(c_mtch_accnt);
 MEMSET(c_spn_mrgn);
 MEMSET(c_nov);
 MEMSET(c_total_mrgn);

 ptr_fml_Obuffer = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

 if ( ptr_fml_Obuffer == NULL )
 {
   fn_errlog( c_ServiceName, "S31410",TPMSG , c_err_msg );
   return -1;
 }

 i_rtrn_cd1  = tpcall("SFO_SPAN_BMRGN",(char*)ptr_fml_ibuf,0,(char **)&ptr_fml_Obuffer,&li_len_tobuf,0);

  if( i_rtrn_cd1 != 0 )
  {

      if(Fget32(ptr_fml_Obuffer,FFO_ERR_MSG,0,(char *)c_err_msg,0) == -1)
      {
        fn_errlog( c_ServiceName, "S31415",TPMSG , c_err_msg );
        tpfree((char *)ptr_fml_Obuffer);
        return -1;
      }

      if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
      {
        fn_userlog(c_ServiceName, "ERROR message is |%s|",c_err_msg);
      }

      if(strcmp(c_err_msg,"Packet Length Exceeds Max Length") == 0)
      {
        fn_errlog( c_ServiceName, "S31420",TPMSG , c_err_msg );
        tpfree((char *)ptr_fml_Obuffer);
        return MAX_PACKET_SIZE;
      }
      else
      {
        fn_errlog( c_ServiceName, "S31425",TPMSG , c_err_msg );
        tpfree((char *)ptr_fml_Obuffer);
        return -1;
      }
    }

    if ( Fget32 (ptr_fml_Obuffer,FFO_ABT_TRG_DATA,0,(char *)c_op_strng,0)  ==  -1 )
    {
      fn_errlog( c_ServiceName, "S31430",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuffer);
      return -1;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Output String 1 Is :%s:",c_op_strng);
    }

    if( i_cntrct_cnt > 10 )
    {
      strcpy(c_op_strng1,strtok(c_op_strng,"|"));

      strcpy(c_mrgn_indctr,strtok(c_op_strng1,"^"));
      strcpy(c_xchng_cd,strtok(null_ptr,"^"));
      strcpy(c_seq_num,strtok(null_ptr,"^"));
      strcpy(c_mtch_accnt,strtok(null_ptr,"^"));
      strcpy(c_spn_mrgn,strtok(null_ptr,"^"));
      strcpy(c_nov,strtok(null_ptr,"^"));
      strcpy(c_total_mrgn,strtok(null_ptr,"^"));

      d_spn_mrgn_t  = atof(c_spn_mrgn);
      d_nov_t       = atof(c_nov);
      d_total_mrgn_t= atof(c_total_mrgn);
    }
    else
    {

      strcpy(c_op_strng1,strtok(c_op_strng,"|"));
      strcpy(c_op_strng2,strtok(null_ptr,"|"));

      strcpy(c_mrgn_indctr,strtok(c_op_strng1,"^"));
      strcpy(c_xchng_cd1,strtok(null_ptr,"^"));
      strcpy(c_seq_num1,strtok(null_ptr,"^"));
      strcpy(c_mtch_accnt1,strtok(null_ptr,"^"));
      strcpy(c_spn_mrgn1,strtok(null_ptr,"^"));
      strcpy(c_nov1,strtok(null_ptr,"^"));
      strcpy(c_total_mrgn1,strtok(null_ptr,"^"));

      strcpy(c_seq_num2,strtok(c_op_strng2,"^"));
      strcpy(c_mtch_accnt2,strtok(null_ptr,"^"));
      strcpy(c_spn_mrgn2,strtok(null_ptr,"^"));
      strcpy(c_nov2,strtok(null_ptr,"^"));
      strcpy(c_total_mrgn2,strtok(null_ptr,"^"));

      d_spn_mrgn1   = atof(c_spn_mrgn1);
      d_spn_mrgn2   = atof(c_spn_mrgn2);
      d_nov1        = atof(c_nov1);
      d_nov2        = atof(c_nov2);
      d_total_mrgn1 = atof(c_total_mrgn1);
      d_total_mrgn2 = atof(c_total_mrgn2);

      if(DEBUG_MSG_LVL_4)
      {
        fn_userlog(c_ServiceName,"fn_span_lib: d_spn_mrgn1:%lf: d_spn_mrgn2:%lf: d_nov1:%lf: d_nov2:%lf: d_total_mrgn1:%lf: d_total_mrgn2:%lf:",d_spn_mrgn1,d_spn_mrgn2,d_nov1,d_nov2,d_total_mrgn1,d_total_mrgn2); 
      }

      d_spn_mrgn_t = fn_maxd(d_spn_mrgn1,d_spn_mrgn2);
      d_nov_t      = fn_maxd(d_nov1,d_nov2);
      d_total_mrgn_t = fn_maxd(d_total_mrgn1,d_total_mrgn2);

    }




  *d_spn_mrgn = d_spn_mrgn_t;
  *d_nov      = d_nov_t;
  *d_total_mrgn = d_total_mrgn_t;

tpfree((char *)ptr_fml_Obuffer);

return 0;
}


/** Ver 7.0 Ends here ***/ 

/** ver 7.3 starts ***/
int fn_unmark_lodm_rej(char *c_ServiceName,
                       struct st_pstn_actn *ptr_st_pstn_actn,
                       char *c_err_msg
                       )
{

    if(DEBUG_MSG_LVL_3)
    {
     fn_userlog( c_ServiceName, "MATCH :%s:",ptr_st_pstn_actn->c_cln_mtch_accnt);
     fn_userlog( c_ServiceName, "EXCH :%s:",ptr_st_pstn_actn->c_xchng_cd);
     fn_userlog( c_ServiceName, "PRDCT TYP :%c:",ptr_st_pstn_actn->c_prd_typ);
     fn_userlog( c_ServiceName, "OPT TYP :%c:",ptr_st_pstn_actn->c_opt_typ);
     fn_userlog( c_ServiceName, "EXER TYP :%c:",ptr_st_pstn_actn->c_exrc_typ);
     fn_userlog( c_ServiceName, "STRIKE :%ld:",ptr_st_pstn_actn->l_strike_prc);
     fn_userlog( c_ServiceName, "UNDERLYING :%s:",ptr_st_pstn_actn->c_undrlyng);
    }


if( ptr_st_pstn_actn->c_prd_typ == 'O' )
{
        EXEC SQL
            UPDATE FCP_FO_SPN_CNTRCT_PSTN
               SET FCP_MTM_FLG = 'O'
         WHERE  FCP_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
         AND    FCP_CLM_MTCH_ACCNT =:ptr_st_pstn_actn->c_cln_mtch_accnt
         AND    FCP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
         AND    FCP_OPT_TYP         = :ptr_st_pstn_actn->c_opt_typ
         AND    FCP_EXER_TYP        = :ptr_st_pstn_actn->c_exrc_typ
         AND    FCP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
         AND    FCP_EXPRY_DT        = :ptr_st_pstn_actn->c_expry_dt
         AND    FCP_STRK_PRC        = :ptr_st_pstn_actn->l_strike_prc
         AND    FCP_MTM_FLG         = 'D';
     if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
     {
      fn_errlog( c_ServiceName, "L31825", SQLMSG,c_err_msg );
      return FAILURE;
     }

       EXEC SQL
       UPDATE FPM_FOLODM_PRCS_MSTR
          SET FPM_PRCS_FLG='F',
              FPM_PRCS_DT=SYSDATE
        WHERE FPM_CLM_MTCH_ACCNT=:ptr_st_pstn_actn->c_cln_mtch_accnt
          AND FPM_XCHNG_CD=:ptr_st_pstn_actn->c_xchng_cd
          AND FPM_PRDCT_TYP=:ptr_st_pstn_actn->c_prd_typ
          AND FPM_INDSTK= :ptr_st_pstn_actn->c_ctgry_indstk
          AND FPM_UNDRLYNG= :ptr_st_pstn_actn->c_undrlyng
          AND FPM_EXPRY_DT= :ptr_st_pstn_actn->c_expry_dt
          AND FPM_EXER_TYP= :ptr_st_pstn_actn->c_exrc_typ
          AND FPM_OPT_TYP= :ptr_st_pstn_actn->c_opt_typ
          AND FPM_STRK_PRC= :ptr_st_pstn_actn->l_strike_prc;

     if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
     {
      fn_errlog( c_ServiceName, "L31830", SQLMSG,c_err_msg );
      return FAILURE;
     }
}

return 0;
}

/** Ver 7.5 starts **/

int fn_syssq_limit_price(
                        char* c_service_name,
                        char* c_err_msg,
                        char* c_undrlyng,
                        char* c_expry_dt,
                        long l_strk_prc,
                        char c_opt_typ,
                        char* c_xchng_cd,
                        char c_prd_typ,
                        char c_indstk,
                        char c_sqareoff_type,
                        char* c_lm_flg,
                        long* l_price,
												int* i_step
                        )
{
    long l_ltp = 0;
    long l_best_bid = 0;
    long l_best_ask = 0;
    long l_volume = 0;
    long l_prev_close = 0;
    long l_lower_range = 0;
    long l_upper_range = 0;
    long l_temp = 0;
		
		int i_tick_size = 0;
	  
		/** initialising variables to generalise squareoff logic for future and options **/ /*ver 7.6 */
		int i_stp1_pr = 0;
    int i_stp3_pr = 0;
    int i_stp1_ps = 0;
    int i_stp3_ps = 0;

    /* fetching contract details from ftq */
    EXEC SQL
        SELECT
            NVL(FTQ_CLS_PRC, 0),
            NVL(FTQ_HGH_PRC_RNG, 0),
            NVL(FTQ_LOW_PRC_RNG, 0),
            NVL(FTQ_TOT_QTY_TRDD, 0),
            NVL(FTQ_LST_TRD_PRC, 0),
            NVL(FTQ_BST1_BID_PRC, 0),
            NVL(FTQ_BST1_OFFR_PRC, 0),
            NVL(FTQ_TCK_SZ, 0)
        INTO
            :l_prev_close,
            :l_upper_range,
            :l_lower_range,
            :l_volume,
            :l_ltp,
            :l_best_bid,
            :l_best_ask,
            :i_tick_size
        FROM FTQ_FO_TRD_QT
        WHERE FTQ_UNDRLYNG = :c_undrlyng
        AND FTQ_EXPRY_DT = :c_expry_dt
        AND FTQ_STRK_PRC = :l_strk_prc
        AND FTQ_OPT_TYP = :c_opt_typ
        AND FTQ_XCHNG_CD = :c_xchng_cd
        AND FTQ_PRDCT_TYP = :c_prd_typ
        AND FTQ_INDSTK = :c_indstk;

    if ( SQLCODE != 0){
        fn_errlog( c_service_name, "S31435", SQLMSG, c_err_msg  );
        return -1;
    }
    if(DEBUG_MSG_LVL_4){
        fn_userlog(c_service_name,"position is :%c:", c_sqareoff_type);
        fn_userlog(c_service_name,"best ask is :%ld:", l_best_ask);
        fn_userlog(c_service_name,"best bid is :%ld:", l_best_bid);
    }
		
		/** ver 7.6 starts **/
		EXEC SQL
			 SELECT SOP_STEP1_PRCNT,
							SOP_STEP3_PRCNT,
							SOP_STEP1_PAISE,
							SOP_STEP3_PAISE
			 INTO  :i_stp1_pr,
						 :i_stp3_pr,
						 :i_stp1_ps,
						 :i_stp3_ps
			FROM  SOP_SYS_ORD_PARAM
			WHERE SOP_PRDCT_TYP = :c_prd_typ
			AND   SOP_ORDR_FLW =  :c_sqareoff_type;
		
		if ( SQLCODE != 0){
        fn_errlog( c_service_name, "S31440", SQLMSG, c_err_msg  );
        return -1;
    }
		
		/**	added and commented in Ver 7.6
		if(c_prd_typ=='F')
    {
        i_stp1_pr= 5;
        i_stp3_pr= 5;
        i_stp1_ps= 250;
        i_stp3_ps= 250;
    }
    else
    {
        i_stp1_pr= 20;
        i_stp3_pr= 10;
        i_stp1_ps= 1000;
        i_stp3_ps= 900;
    } **/
		/** ver 7.6 ends **/
    
		/* check squareoff type and calculate price */
    if(c_sqareoff_type == 'B'){

        if(DEBUG_MSG_LVL_4){
						fn_userlog(c_service_name,"ltp+ %d%% is :%f:",i_stp1_pr,l_ltp*(1+(float)(i_stp1_pr)/100));
					 fn_userlog(c_service_name,"ltp+ %d is :%ld:",i_stp1_ps, l_ltp+i_stp1_ps);
        }
				if(l_volume > 0 && l_best_ask < ((l_ltp*(1+(float)(i_stp1_pr)/100) > (l_ltp + i_stp1_ps))?(l_ltp*(1+(float)(i_stp1_pr)/100)):(l_ltp + i_stp1_ps)) && l_best_ask!=0 ){
            /***
						this condition is entered if
							1. Volume is grater than zero
							2. best ask is available
							3. best ask is less than max(LTP+stp1_percentage, LTP+stp1_ps)
						for example if stp1_percentage = 20% and stp1_ps = 1000 paise
						if traded volume is greater than 0 and LTP is Rs. 40 and best ASK price available is Rs. 46,
						i.e. below 50 (Maximum {40*(1+20%), 40+10} =50).
						In such case, market order shall be placed for square off.
						***/

						*c_lm_flg = 'M';
            *l_price = 0;
						*i_step = 1;
						if(DEBUG_MSG_LVL_3){
            	fn_userlog(c_service_name,"returning with step :%d:",*i_step);
        		}
            return 0;
        }
        else if(l_best_ask != 0){
              /***
              this condition is entered if
              1. first condition is not entered  
							2. best ask is available
              In such case, limit order shall be placed for square off with limit price equal to best ask.
              ***/

            *c_lm_flg = 'L';
            *l_price = l_best_ask;
						*i_step = 2;
						if(DEBUG_MSG_LVL_3){
              fn_userlog(c_service_name,"returning with step :%d:",*i_step);
            }
            return 0;
        }
        else if(l_best_ask == 0){
          /***
          this condition is entered if
          	1. first and second conditions are not entered 
            2. best ask is not available
				in this case limit order is placed with limit price as
          for example if stp3_percentage = 10% and stp1_ps = 900 paise
limit price = Minimum{Maximum[(LTP+10%), (LTP+Rs.9),(Best Bid price+1 tick)], exchange upper operating range price}
							***/

            *c_lm_flg = 'L';
            if(l_ltp == 0){
                l_ltp = l_prev_close;
            }
						l_temp = ((l_ltp*(1+(float)(i_stp3_pr)/100)> (l_ltp +i_stp3_ps ))?(l_ltp*(1+(float)(i_stp3_pr)/100)):(l_ltp +i_stp3_ps));

            if(l_best_bid != 0){
                l_temp = ((l_temp > (l_best_bid + i_tick_size))?l_temp:(l_best_bid + i_tick_size));
            }
            *l_price = ((l_temp < l_upper_range)?l_temp:l_upper_range);
						if(*l_price%i_tick_size!=0)
						{
							 *l_price = *l_price + i_tick_size - *l_price%i_tick_size;
						}
						*i_step = 3;
						if(DEBUG_MSG_LVL_3){
              fn_userlog(c_service_name,"returning with step :%d:",*i_step);
            }
            return 0;
        }
    }
    else if (c_sqareoff_type == 'S') {

        if(DEBUG_MSG_LVL_4){
						fn_userlog(c_service_name,"ltp-%d%% is :%f:", i_stp1_pr,l_ltp*(1-(float)(i_stp1_pr)/100));
						fn_userlog(c_service_name,"ltp-%d is :%ld:", i_stp1_ps, l_ltp-i_stp1_ps);

        }

		    if(l_volume > 0 && l_best_bid > ((l_ltp*(1- (float)(i_stp1_pr)/100) < (l_ltp - i_stp1_ps))?(l_ltp*(1-(float)(i_stp1_pr)/100)):(l_ltp - i_stp1_ps )))
				/***
            this condition is entered if
              1. Volume is grater than zero
              2. best bid is available
              3. best bid is greater than min(LTP+stp1_percentage, LTP+stp1_ps)
						for example:
            The traded volume in the contract is 1, i.e. greater than 0
						and LTP is Rs 40 , and best BID price available is Rs. 41,
						i.e. above 30 (Minimum {40*(1-20%), 40-10} =30).
						In such case, market order should be placed for square off
            ***/
				{
            *c_lm_flg = 'M';
            *l_price = 0;
						*i_step = 1;
						if(DEBUG_MSG_LVL_3){
              fn_userlog(c_service_name,"returning with step :%d:",*i_step);
            }
            return 0;
        }
        else if(l_best_bid != 0){
						/***
            this condition is entered if
              1. first condition is not satisfied
              2. best bid is available
            In such case, limit order should be placed for square off at the best available bid.
            ***/
            *c_lm_flg = 'L';
            *l_price = l_best_bid;
						*i_step = 2;
						if(DEBUG_MSG_LVL_3){
              fn_userlog(c_service_name,"returning with step :%d:",*i_step);
            }
            return 0;
        }
        else if(l_best_bid == 0){
						/***
            this condition is entered if
              1. first and conditions are not satisfied
              2. best bid is not available
						for example if stp3_percentage = 10% and stp1_ps = 900 paise
            In such case, limit order should be placed for square off at
				limit price = Maximum {Minimum (LTP * (1 - 10%), LTP - 9, Best Ask price* - 1 tick), Lower exchange operating price}
            ***/
            *c_lm_flg = 'L';
            if(l_ltp == 0){
                l_ltp = l_prev_close;
            }
            
						l_temp = ((l_ltp*(1-(float)(i_stp3_pr)/100) < (l_ltp - i_stp3_ps))?(l_ltp*(1-(float)(i_stp3_pr)/100)):(l_ltp - i_stp3_ps));

            if(l_best_ask != 0){
                l_temp = ((l_temp < (l_best_ask - i_tick_size))?l_temp:(l_best_ask - i_tick_size));
            }
            *l_price = ((l_temp > l_lower_range)?l_temp:l_lower_range);
						if(*l_price%i_tick_size!=0)
						{
							 *l_price = *l_price + i_tick_size - *l_price%i_tick_size;
						}
						*i_step = 3;
						if(DEBUG_MSG_LVL_3){
              fn_userlog(c_service_name,"returning with step :%d:",*i_step);
            }
            return 0;
        }
    }
}

/** Ver 7.5 ends **/

/*** Added in VER 8.0 : Function to call service for real time reporting of margin to exchnage ***/

int fn_upd_mrgn_reporting(char *c_clm_mtch_accnt,
                          char *c_xchng_cd,
                          char *c_ServiceName,
                          char *c_err_msg
                         )
{
  char  c_mrkt_stts='\0';
  char  c_rptng_stts='\0';
	char  c_ucc_cd[13] = "\0";

  int i_returncode = 0.0;
  int i_cnt = 0.0;
  int i_err[2] = {0.0};

  FBFR32 *ptr_fml_ibuf;

  if(DEBUG_MSG_LVL_5)
    fn_userlog(c_ServiceName," fn_upd_mrgn_reporting : Working on match id :%s: and exchange :%s: ", c_clm_mtch_accnt, c_xchng_cd);

  /**MEMSET(c_mrkt_stts);**/
  MEMSET(c_ucc_cd);

  /*** Checking market status  and reporting flag value : As function should call service only on days when trading happens and flag is 'Y' ***/
  EXEC SQL
  SELECT  EXG_CRRNT_STTS, 
					NVL(FSP_REALTM_RPTNG, 'N')
  INTO  :c_mrkt_stts,
				:c_rptng_stts
  FROM  EXG_XCHNG_MSTR, FSP_FO_SYSTM_PRMTR
  WHERE EXG_XCHNG_CD = :c_xchng_cd;

  if ( SQLCODE != 0 )
  {
   fn_userlog(c_ServiceName," fn_upd_mrgn_reporting : Error while fetching status of market :%s:", c_xchng_cd);
   fn_errlog( c_ServiceName, "L31835",SQLMSG,c_err_msg);
   return 0;
  }

  if(DEBUG_MSG_LVL_5)
    fn_userlog(c_ServiceName," fn_upd_mrgn_reporting : Status and reporting flag value of exchange :%s: are :%c:, :%c: respecyively", c_xchng_cd, c_mrkt_stts, c_rptng_stts);

  if( c_mrkt_stts == 'O' && c_rptng_stts == 'Y' )    /*** Condition when market is open and reporting flag is 'Y' :  starts here  ***/
  {

    /*** Fetching UCC code of the client for calling service ***/

    EXEC SQL
    SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
    INTO  :c_ucc_cd
    FROM  CLM_CLNT_MSTR
    WHERE CLM_MTCH_ACCNT = :c_clm_mtch_accnt;

    if ( SQLCODE != 0 )
    {
      fn_userlog(c_ServiceName," fn_upd_mrgn_reporting : Error while fetching UCC code for :%s:", c_clm_mtch_accnt);
      fn_errlog( c_ServiceName, "L31840",SQLMSG,c_err_msg);
      return 0;
    }

    rtrim(c_ucc_cd);
    rtrim(c_clm_mtch_accnt);

    if(DEBUG_MSG_LVL_5)
      fn_userlog(c_ServiceName," fn_upd_mrgn_reporting : Match id :%s: have UCC code :%s:", c_clm_mtch_accnt, c_ucc_cd);

    /*** Allocating memory to buffer to be used for calling service ***/

    ptr_fml_ibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

    if ( ptr_fml_ibuf == NULL )
    {
      fn_userlog(c_ServiceName," fn_upd_mrgn_reporting : Error while allocating memory to input buffer.");
      fn_errlog(c_ServiceName, "L31845", TPMSG, c_err_msg);
      return 0;
    }

    /*** Storing input values in buffer FML for service call ***/

    i_err[0] = Fadd32(ptr_fml_ibuf, FFO_EBA_MTCH_ACT_NO, (char *)c_clm_mtch_accnt, 0);
    i_err[1] = Fadd32(ptr_fml_ibuf, FFO_CLNT_DPID, (char *)c_ucc_cd, 0);

    for(i_cnt=0;i_cnt<2;i_cnt++)
    {
      if(i_err[i_cnt] == -1)
      {
        fn_userlog(c_ServiceName," fn_upd_mrgn_reporting : Error while packing variable.");
        fn_errlog( c_ServiceName,"L81095", FMLMSG, c_err_msg);
        tpfree((char *)ptr_fml_ibuf);
        return 0;
      }
    }

    /*** Calling service : sfo_coll_alloc -- This service will compute and report the margin value ***/

    i_returncode =  tpacall( "SFO_COLL_ALLOC", (char*)(ptr_fml_ibuf), 0, TPNOTRAN|TPNOREPLY  );

    if ( i_returncode != SUCC_BFR )
    {
      fn_userlog(c_ServiceName," fn_upd_mrgn_reporting : Error while calling service : SFO_COLL_ALLOC :.");
      fn_errlog( c_ServiceName, "L31850", LIBMSG, c_err_msg  );
      tpfree((char *)ptr_fml_ibuf);
      return 0;  /*** returned '0', as functionality of service calling this function shouldn't be affected due to error in service
                      sfo_coll_alloc. ***/
    }
		
		tpfree((char *)ptr_fml_ibuf);
  }       /*** Condition for market open case and reporting flag is 'Y': ends here ***/
	else
	{	
		if ( c_mrkt_stts != 'O' )
  	{
   	 	if(DEBUG_MSG_LVL_3)
      	fn_userlog(c_ServiceName," fn_upd_mrgn_reporting : Market is not open, so service call is not required.");
  	}
		else if (  c_rptng_stts != 'Y' )
		{
			if(DEBUG_MSG_LVL_3)
        fn_userlog(c_ServiceName," fn_upd_mrgn_reporting : Reporting Flag is not 'Y', so service call is not required.");
		}
		return 0;
	}

  fn_userlog(c_ServiceName," Function :fn_upd_mrgn_reporting: ends successfully.");

  return 0;

}    /*** Function : fn_upd_mrgn_reporting -- ends here ***/

/*** VER 8.0 ends here ***/
