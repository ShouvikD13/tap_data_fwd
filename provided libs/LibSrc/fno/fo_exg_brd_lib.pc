/********************************************************************************/
/*  version 1.0 - 27-Jul-2009 New Release   Sandeep Patil                       */
/*  Version 1.1 - 30-Aug-2011 Sachin :Global Indices Change(CR-ISEC14-18343)    */ 
/*	Version 1.2	- 03-May-2012 NO_DATA_FOUND Handling For Global Indices Sandeep */
/*  Version 1.3 - 26-Jun-2012 Changes for tick by tick broadcast (Vishnu)			  */
/*  Version 1.4 -	27-Jun-2012 Changes done to take details from Long quotes for */ 
/*														tick by tick broadcast (Vishnu)			 						  */									
/*  Version 1.5 - 04-Dec-2012 TBT broadcast change(Vishnu)                      */
/*  Version 1.6 - 25-Apr-2013 Game simulator broadcast change(Mahesh)           */
/*  Version 1.7 - 23-May-2013 Code Optimization (Sachin Birje)                  */
/*  Version 1.8 - 23-May-2013 TimeStamp Printing (Sachin Birje)                 */
/*  Version 1.9 - 07-Aug-2013 Update quote & Long Quote in new service(Sachin Birje)*/
/*  Version 2.0 - 10-Fab-2014 Change of variable for total val traded (Sachin Birje)*/
/*  Version 2.1 - 26-Feb-2014 India vix changes CR_ISEC14_48665 (Mahesh Shinde) */
/*  Version 2.2 - 03-Nov-2014 NNF Trade execution range broadcast change(Navina D.) */
/*  Version 2.3 - 27-Mar-2015 Token No Changes Sandeep Patil										*/
/*  Version 2.4 - 03-Jul-2015 FCM-FTQ Merger Changes | Anand Dhopte             */
/*  Version 2.5 - 10-Nov-2017 Implemented BCAST_SPD_MBP_DELTA (7211) and        */
/*                            BCAST_SPD_MSTR_CHG(7309)| Parag                   */
/*  Version 2.6 - 05-Apr-2022 Minor Changes| Capturing OI against tick (Sachin Birje)*/
/*  Version TOL - 01-Aug-2023 Tux on Linux (Agam) */
/********************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>
#include <fn_scklib_tap.h>
#include <fo_exg_brd_lib.h>

#include <atmi.h>
#include <Usysflds.h>

#include <sqlca.h>
#include <time.h>  /** Ver 1.8 **/

#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fo.h>
#include <fn_env.h>
#include <fn_tuxlib.h>
#include <fn_fil_log.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fml_rout.h>
#include <fml_def.h>
#include <userlog.h>
#include <fn_session.h>
#include <fn_read_debug_lvl.h>
#include <fn_span_lib.h> 				/*** Ver 1.6 ***/
#include <sys/time.h>                   /* Ver TOL tux on linux */

static short int si_exr_mkt_stts;
static short int si_mkt_stts;

/****** Ver 1.8 ****/
void fn_gt_time(void);  /* Renamed from fn_gettime to fn_gt_time in Ver TOL */
char c_time[12];

/***** Ver 1.8 ****/
int fn_system_information_out(struct st_system_info_data *st_sys_info_dat,
                              char *c_xchng_cd,
                              char *c_ServiceName,
                              char *c_errmsg)
{
	int i_trnsctn;
	int i_ch_val;
	long int li_mkt_type;

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"Inside Function fn_system_information_out ");
		fn_userlog(c_ServiceName,"Exchange code is :%s:",c_xchng_cd);
	}

	si_exr_mkt_stts = st_sys_info_dat->st_ex_mkt_stts.si_normal;

	li_mkt_type = EXERCISE_MKT;

	fn_userlog(c_ServiceName,"Market Type Is :%ld:",li_mkt_type);
	fn_userlog(c_ServiceName,"Exercise Market Status Is :%d:",si_exr_mkt_stts);

  i_ch_val = fn_mrkt_stts_hndlr(si_exr_mkt_stts,
                                li_mkt_type,
                                c_xchng_cd,
                                c_ServiceName,
                                c_errmsg);

  if (i_ch_val == -1)
  {
    fn_userlog(c_ServiceName,"Failed While Calling Function fn_mrkt_stts_hndlr");
    return -1;
  }

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Exchange Settelement Period Is :%d:",st_sys_info_dat->si_default_sttlmnt_period_nm);
		fn_userlog(c_ServiceName,"Exchange Warning % Is :%d:",st_sys_info_dat->si_warning_percent);
		fn_userlog(c_ServiceName,"Exchange Volume Freeze % Is :%d:",st_sys_info_dat->si_volume_freeze_percent);
		fn_userlog(c_ServiceName,"Exchange Board Lot Quantity Is :%ld:",st_sys_info_dat->li_board_lot_quantity);
		fn_userlog(c_ServiceName,"Exchange Tick Size Is :%ld:",st_sys_info_dat->li_tick_size);
		fn_userlog(c_ServiceName,"Exchange GTC Days is :%d:",st_sys_info_dat->si_maximum_gtc_days);
		fn_userlog(c_ServiceName,"Exchange Disclosed QTY % Allowed Is :%d:",st_sys_info_dat->si_disclosed_quantity_percent_allowed);
	}

	i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );

  if ( i_trnsctn == -1 )
  {
    fn_errlog ( c_ServiceName, "S31005", LIBMSG, c_errmsg );
    return -1;
  }

	EXEC SQL
    UPDATE exg_xchng_mstr
    SET exg_def_stlmnt_pd   = :st_sys_info_dat->si_default_sttlmnt_period_nm,
        exg_wrn_pcnt        = :st_sys_info_dat->si_warning_percent/ 100,
        exg_vol_frz_pcnt    = :st_sys_info_dat->si_volume_freeze_percent/ 100,
        exg_brd_lot_qty     = :st_sys_info_dat->li_board_lot_quantity,
        exg_tck_sz          = :st_sys_info_dat->li_tick_size,
        exg_gtc_dys         = :st_sys_info_dat->si_maximum_gtc_days,
        exg_dsclsd_qty_pcnt = :st_sys_info_dat->si_disclosed_quantity_percent_allowed/ 100
    WHERE exg_xchng_cd = :c_xchng_cd;

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31010", SQLMSG, c_errmsg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    return -1;
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 )
  {
    fn_errlog ( c_ServiceName, "S31015", LIBMSG, c_errmsg );
    return -1;
  }

  return 0;

}

int fn_mbo_mbp_update ( struct st_bcast_mbo_mbp *ptr_st_brd_mbo_mbp,
                        char *c_xchng_cd,
                        char *c_ServiceName,
                        char *c_errmsg )
{
	int i_ch_val;
  int i_tmp;
	long l_token_id;

	char c_rout_str[4];

  struct vw_contract st_cntrct;
  struct vw_cntrct_qt st_cntrct_short_qt;
  struct vw_cntrctlong_qt st_cntrct_long_qt;

  nfo_cntrct st_nse_cntrct;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Inside Function fn_mbo_mbp_update");
		fn_userlog(c_ServiceName,"Exchange code is :%s:",c_xchng_cd);
	}

	if(ptr_st_brd_mbo_mbp->st_mbo_data.si_book_type !=  REGULAR_LOT_ORDER) 
	{
		fn_userlog(c_ServiceName,"Inside REGULAR_LOT_ORDER Check Condition ");
  	return 0;
	}

  if(DEBUG_MSG_LVL_2)  /** Ver 1.8 **/
  {
   fn_gt_time();
   fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_mbo_mbp_update Before fn_nse_to_eba_token at :%s:",c_time);
  }

	strcpy(c_rout_str,"000");

	if ( strcmp ( c_xchng_cd, "NFO") == 0 )
	{
		l_token_id = ptr_st_brd_mbo_mbp->st_mbo_data.l_token;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Token ID Is :%ld:",l_token_id);
		}

    i_ch_val = fn_nse_to_eba_token ( l_token_id,
                                   &st_cntrct,
																	 c_rout_str,
                                   c_ServiceName,
                                   c_errmsg );

    if ( i_ch_val == SYSTEM_ERROR )
    {
      fn_errlog ( c_ServiceName, "S31020", LIBMSG, c_errmsg );
      return -1;
    }
    else if ( i_ch_val != 0 )
    {
      return 0;
    }
	}
	else
  {
    /*  BSE code to be added here   */
  	fn_errlog ( c_ServiceName, "S31025","BSE code not handled", c_errmsg );
    return 0;
  }

  if(DEBUG_MSG_LVL_2) /** Ver 1.8 **/
  {
   fn_gt_time();
   fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_mbo_mbp_update after fn_nse_to_eba_token at :%s:",c_time);
  }

	st_cntrct_short_qt.l_eba_cntrct_id = st_cntrct.l_eba_cntrct_id ;
	strcpy( st_cntrct_short_qt.c_xchng_cd , st_cntrct.c_xchng_cd ) ;
	st_cntrct_short_qt.c_prd_typ = st_cntrct.c_prd_typ ;
	strcpy( st_cntrct_short_qt.c_undrlyng , st_cntrct.c_undrlyng ) ;
	strcpy( st_cntrct_short_qt.c_expry_dt , st_cntrct.c_expry_dt ) ;
	st_cntrct_short_qt.c_exrc_typ = st_cntrct.c_exrc_typ ;
	st_cntrct_short_qt.c_opt_typ = st_cntrct.c_opt_typ ;
	st_cntrct_short_qt.l_strike_prc = st_cntrct.l_strike_prc ;
	st_cntrct_short_qt.c_ctgry_indstk = st_cntrct.c_ctgry_indstk ;
	st_cntrct_short_qt.l_ca_lvl = st_cntrct.l_ca_lvl ;


	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"EBA Contract ID Is :%ld:",st_cntrct_short_qt.l_eba_cntrct_id);
		fn_userlog(c_ServiceName,"Exchnage Code Is :%s:",st_cntrct_short_qt.c_xchng_cd);
		fn_userlog(c_ServiceName,"Product Type Is :%c:",st_cntrct_short_qt.c_prd_typ);
		fn_userlog(c_ServiceName,"Underlying Is :%s:",st_cntrct_short_qt.c_undrlyng);
		fn_userlog(c_ServiceName,"Expiry Date :%s:",st_cntrct_short_qt.c_expry_dt);
		fn_userlog(c_ServiceName,"Exercise Type Is :%c:",st_cntrct_short_qt.c_exrc_typ);
		fn_userlog(c_ServiceName,"Option Type Is :%c:",st_cntrct_short_qt.c_opt_typ);
		fn_userlog(c_ServiceName,"Strike Price Is :%ld:",st_cntrct_short_qt.l_strike_prc);
		fn_userlog(c_ServiceName,"IND/STK Is :%c:",st_cntrct_short_qt.c_ctgry_indstk);
		fn_userlog(c_ServiceName,"CA LVL Is :%ld:",st_cntrct_short_qt.l_ca_lvl);
	}

	st_cntrct_short_qt.l_chng_prvs_close_prc = ptr_st_brd_mbo_mbp->st_mbo_data.li_net_change_from_closing_price;
	st_cntrct_short_qt.c_indctr = ptr_st_brd_mbo_mbp->st_mbo_data.c_net_change_indicator;
	st_cntrct_short_qt.l_open_prc = ptr_st_brd_mbo_mbp->li_open_price;
	st_cntrct_short_qt.l_close_prc = ptr_st_brd_mbo_mbp->li_closing_price;
	st_cntrct_short_qt.l_high_prc = ptr_st_brd_mbo_mbp->li_high_price;
	st_cntrct_short_qt.l_low_prc = ptr_st_brd_mbo_mbp->li_low_price;
	st_cntrct_short_qt.l_lst_trdd_prc = ptr_st_brd_mbo_mbp->st_mbo_data.li_last_traded_price;

if(DEBUG_MSG_LVL_3)
{
	fn_userlog(c_ServiceName,"Exchange Change Prv. Closing Price Is :%ld:",ptr_st_brd_mbo_mbp->st_mbo_data.li_net_change_from_closing_price);
	fn_userlog(c_ServiceName,"EBA Change Prv. Closing Price Is :%ld:",st_cntrct_short_qt.l_chng_prvs_close_prc);
	fn_userlog(c_ServiceName,"Exchange Net Change Indicator Is :%c:",ptr_st_brd_mbo_mbp->st_mbo_data.c_net_change_indicator);
	fn_userlog(c_ServiceName,"EBA Net Change Indicator Is :%c:",st_cntrct_short_qt.c_indctr);
	fn_userlog(c_ServiceName,"Exchange Open Price Is :%ld:",ptr_st_brd_mbo_mbp->li_open_price);
	fn_userlog(c_ServiceName,"EBA Open Price Is :%ld:",st_cntrct_short_qt.l_open_prc);
	fn_userlog(c_ServiceName,"Exchange Closing Price Is :%ld:",ptr_st_brd_mbo_mbp->li_closing_price);
	fn_userlog(c_ServiceName,"EBA Closing Price Is :%ld:",st_cntrct_short_qt.l_close_prc);
	fn_userlog(c_ServiceName,"Exchange High Price Is :%ld:",ptr_st_brd_mbo_mbp->li_high_price);
	fn_userlog(c_ServiceName,"EBA High Price Is :%ld:",st_cntrct_short_qt.l_high_prc);
	fn_userlog(c_ServiceName,"Exchange Low Price Is :%ld:",ptr_st_brd_mbo_mbp->li_low_price);
	fn_userlog(c_ServiceName,"EBA Low Price Is :%ld:",st_cntrct_short_qt.l_low_prc);
	fn_userlog(c_ServiceName,"Exchange LTP Is :%ld:",ptr_st_brd_mbo_mbp->st_mbo_data.li_last_traded_price);
	fn_userlog(c_ServiceName,"EBA LTP Is :%ld:",st_cntrct_short_qt.l_lst_trdd_prc);
}

	fn_cpy_ddr(st_cntrct_short_qt.c_rout_crt);
	
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Before Call To SFO_UPD_QT With Request Type UPDATE_SHORT_QT_2");
	}

  if(DEBUG_MSG_LVL_2)  /** Ver 1.8 **/
  {
   fn_gt_time();
   fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_mbo_mbp_update Before SFO_UPD_QT at :%s:",c_time);
  }

	st_cntrct_short_qt.c_rqst_typ = UPDATE_SHORT_QT_2 ;
	i_ch_val = fn_acall_svc ( c_ServiceName,
                            c_errmsg,
                            &st_cntrct_short_qt,
                            "vw_cntrct_qt",
                            sizeof (st_cntrct_short_qt),
                            TPNOREPLY,
                            "SFO_UPD_QT" );
  if(i_ch_val == SYSTEM_ERROR)
  {
    fn_errlog ( c_ServiceName, "S31030", LIBMSG, c_errmsg );
    return -1;
  }
  
  if(DEBUG_MSG_LVL_2)  /** Ver 1.8 **/
  {
   fn_gt_time();
   fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_mbo_mbp_update After SFO_UPD_QT at :%s:",c_time);
  }

	st_cntrct_long_qt.l_eba_cntrct_id  = st_cntrct.l_eba_cntrct_id ;
	strcpy( st_cntrct_long_qt.c_xchng_cd, st_cntrct.c_xchng_cd ) ;
	st_cntrct_long_qt.c_prd_typ= st_cntrct.c_prd_typ ;
	strcpy( st_cntrct_long_qt.c_undrlyng, st_cntrct.c_undrlyng ) ;
	strcpy( st_cntrct_long_qt.c_expry_dt, st_cntrct.c_expry_dt ) ;
	st_cntrct_long_qt.c_exrc_typ = st_cntrct.c_exrc_typ ;
	st_cntrct_long_qt.c_opt_typ = st_cntrct.c_opt_typ ;
	st_cntrct_long_qt.l_strike_prc = st_cntrct.l_strike_prc ;
	st_cntrct_long_qt.c_ctgry_indstk = st_cntrct.c_ctgry_indstk ;
	st_cntrct_long_qt.l_ca_lvl = st_cntrct.l_ca_lvl ;

	st_cntrct_long_qt.l_lst_trdd_prc = ptr_st_brd_mbo_mbp->st_mbo_data.li_last_traded_price;
	st_cntrct_long_qt.l_lst_trdd_qty = ptr_st_brd_mbo_mbp->st_mbo_data.li_last_traded_quantity;
	st_cntrct_long_qt.l_tot_trdd_qty = ptr_st_brd_mbo_mbp->st_mbo_data.li_volume_traded_today;

	fn_long_to_timearr (st_cntrct_long_qt.c_lst_trdd_time ,ptr_st_brd_mbo_mbp->st_mbo_data.li_last_traded_time);

	st_cntrct_long_qt.l_avg_trdd_prc = ptr_st_brd_mbo_mbp->st_mbo_data.li_average_trade_price;
	st_cntrct_long_qt.d_tot_bid_qty  = ptr_st_brd_mbo_mbp->d_total_buy_quantity;
	st_cntrct_long_qt.d_tot_offr_qty = ptr_st_brd_mbo_mbp->d_total_sell_quantity;

if(DEBUG_MSG_LVL_3)
{
	fn_userlog(c_ServiceName,"Exchange LTP Is :%ld:",ptr_st_brd_mbo_mbp->st_mbo_data.li_last_traded_price);
	fn_userlog(c_ServiceName,"Exchange Last Traded Qty Is :%ld:",ptr_st_brd_mbo_mbp->st_mbo_data.li_last_traded_quantity);
	fn_userlog(c_ServiceName,"Exchange Total Traded Qty Is :%ld:",ptr_st_brd_mbo_mbp->st_mbo_data.li_volume_traded_today);
	fn_userlog(c_ServiceName,"Exchange Last Traded Time Is :%ld:",ptr_st_brd_mbo_mbp->st_mbo_data.li_last_traded_time);
	fn_userlog(c_ServiceName,"Exchange Avg. Trade Price :%ld:",ptr_st_brd_mbo_mbp->st_mbo_data.li_average_trade_price);
	fn_userlog(c_ServiceName,"Exchange Total Buy Qty Is :%ld:",ptr_st_brd_mbo_mbp->d_total_buy_quantity);
	fn_userlog(c_ServiceName,"Exchange Total Sell Qty Is :%ld:",ptr_st_brd_mbo_mbp->d_total_sell_quantity);
}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"EBA Contract ID Is :%ld:",st_cntrct_long_qt.l_eba_cntrct_id);
		fn_userlog(c_ServiceName,"Exchange Code Is :%s:",st_cntrct_long_qt.c_xchng_cd);
		fn_userlog(c_ServiceName,"Product Type Is :%c:",st_cntrct_long_qt.c_prd_typ);
		fn_userlog(c_ServiceName,"Underlying Is :%s:",st_cntrct_long_qt.c_undrlyng);
		fn_userlog(c_ServiceName,"Expiry Date Is :%s:",st_cntrct_long_qt.c_expry_dt);
		fn_userlog(c_ServiceName,"Exercise Type Is :%c:",st_cntrct_long_qt.c_exrc_typ);
		fn_userlog(c_ServiceName,"Option Type Is :%c:",st_cntrct_long_qt.c_opt_typ);
		fn_userlog(c_ServiceName,"Strike Price Is :%ld:",st_cntrct_long_qt.l_strike_prc);
		fn_userlog(c_ServiceName,"IND/STK Is :%c:",st_cntrct_long_qt.c_ctgry_indstk);
		fn_userlog(c_ServiceName,"CA LVL Is :%ld:",st_cntrct_long_qt.l_ca_lvl);
		fn_userlog(c_ServiceName,"LTP Is :%ld:",st_cntrct_long_qt.l_lst_trdd_prc);
		fn_userlog(c_ServiceName,"Last Traded Qty Is :%ld:",st_cntrct_long_qt.l_lst_trdd_qty);
		fn_userlog(c_ServiceName,"Total Traded Qty Is :%ld:",st_cntrct_long_qt.l_tot_trdd_qty);
		fn_userlog(c_ServiceName,"Avg. Trade Price :%ld:",st_cntrct_long_qt.l_avg_trdd_prc);
		fn_userlog(c_ServiceName,"Total Buy Qty Is :%lf:",st_cntrct_long_qt.d_tot_bid_qty);
		fn_userlog(c_ServiceName,"Total Sell Qty Is :%lf:",st_cntrct_long_qt.d_tot_offr_qty);
	}

	for(i_tmp = 0; i_tmp < MAX_BOFR_BBID; i_tmp++)
	{
		st_cntrct_long_qt.l_bst_bid_qty[ i_tmp ]  = ptr_st_brd_mbo_mbp->st_mbp[i_tmp].li_qty;
		st_cntrct_long_qt.l_bst_bid_prc[ i_tmp ]  = ptr_st_brd_mbo_mbp->st_mbp[i_tmp].li_price;
		st_cntrct_long_qt.l_bst_offr_qty[ i_tmp ] = ptr_st_brd_mbo_mbp->st_mbp[i_tmp + 5].li_qty;
		st_cntrct_long_qt.l_bst_offr_prc[ i_tmp ] = ptr_st_brd_mbo_mbp->st_mbp[i_tmp + 5].li_price;
	}

	fn_cpy_ddr(st_cntrct_long_qt.c_rout_crt);

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Before Call To SFO_UPD_LONG_QT With Request Type UPDATE_PRICE_QT");
	}
  
  if(DEBUG_MSG_LVL_2)  /** Ver 1.8 **/
  {
   fn_gt_time();
   fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_mbo_mbp_update Before SFO_UPD_LONG_QT at :%s:",c_time);
  }

  st_cntrct_long_qt.c_rqst_typ = UPDATE_PRICE_QT ;
  i_ch_val = fn_acall_svc ( c_ServiceName,
                            c_errmsg,
                            &st_cntrct_long_qt,
                            "vw_cntrctlong_qt",
                            sizeof (st_cntrct_long_qt),
                            TPNOREPLY,
                            "SFO_UPD_LONG_QT" );
  if ( i_ch_val == SYSTEM_ERROR )
  {
    fn_errlog ( c_ServiceName, "S31035", LIBMSG, c_errmsg );
    return -1;
  }

  if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
  {
   fn_gt_time();
   fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_mbo_mbp_update After SFO_UPD_LONG_QT at :%s:",c_time);
  }
	
	return 0;
}

/******************************************************************************/
/*  To update details of long quote which have got from exchange.             */
/*  INPUT PARAMETERS                                                          */
/*      st_longqt  - Long quote message structure                             */
/*      c_errmsg  - Error message to be returned in case of error             */
/*  OUTPUT PARAMETERS                                                         */
/*      void                                                                  */
/******************************************************************************/

int fn_bcast_only_mbp ( struct st_bcast_only_mbp *ptr_st_brd_only_mbp,
                        char *c_xchng_cd,
                        char *c_ServiceName,
												char c_tbt_mod,  /* Ver 1.5 */
                        char *c_errmsg )
{
	int i_ch_val;
  int i_tmp;
	int i_rec_cnt;
	int i_loop;

	long  l_token_id;
	long int li_closing_price;
	long int li_last_traded_price;

  double d_current_oi=0;  /** Ver 2.6 **/

	char c_rout_str[4];
	char c_tbt_mode;
  char c_xchng_cd_tmp[3+1]; /** Ver 2.6 **/

  struct vw_contract st_cntrct;
  struct vw_cntrct_qt st_cntrct_short_qt;
  struct vw_cntrctlong_qt st_cntrct_long_qt;

  struct st_cntrct_qt st_cntrct_shrt_qt;    /* Ver 1.6 */
  struct st_cntrctlong_qt st_cntrct_lng_qt;	/* Ver 1.6 */

  nfo_cntrct st_nse_cntrct;

	/*** Ver 1.6 Starts ***/
	FBFR32    *ptr_fml_Sbuf;
	MEMSET(st_cntrct_shrt_qt);
	MEMSET(st_cntrct_lng_qt);
	/**** Ver 1.6 Ends ****/
  MEMSET(c_xchng_cd_tmp);  /** Ver 2.6 **/
  strcpy(c_xchng_cd_tmp,"NFO"); /** Ver 2.6 **/
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Inside Function fn_bcast_only_mbp");
		fn_userlog(c_ServiceName,"Exchnage Code Is :%s:",c_xchng_cd);
	}

	i_rec_cnt = ptr_st_brd_only_mbp->si_no_of_records;

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName, "No of records in packet are : |%d|", i_rec_cnt);
	}
	
	strcpy(c_rout_str,"000");

	/***** Ver 1.6 Starts *****/

  ptr_fml_Sbuf  = (FBFR32 *) tpalloc("FML32", NULL, MIN_FML_BUF_LEN );

  if ( ptr_fml_Sbuf == NULL )
  {
     fn_errlog ( c_ServiceName, "S31065", TPMSG, c_errmsg );
		 return -1;
  }

	/***** Ver 1.6 Ends *****/

  if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
  {
   fn_gt_time();
   fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_bcast_only_mbp Before processing :%d:record at :%s:",i_rec_cnt,c_time);
  }

	for(i_loop = 0; i_loop < i_rec_cnt; i_loop++)
	{
		if ( ( ptr_st_brd_only_mbp->st_only_mbp[i_loop].si_book_type != REGULAR_LOT_ORDER) )
		{
			 fn_userlog(c_ServiceName,"Inside Book Type Condition For REGULAR_LOT_ORDER"); 	
			 return 0;
		}

		/***	Commented In Ver 2.3
	
		if ( strcmp (c_xchng_cd,"NFO") == 0 )
		{
			l_token_id = ptr_st_brd_only_mbp->st_only_mbp[i_loop].l_token;

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Token ID Is :%ld:",l_token_id);
			}
	
      if(DEBUG_MSG_LVL_2)   ** Ver 1.8 **
      {
       fn_gt_time();
       fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_bcast_only_mbp Before fn_nse_to_eba_token at :%s:",c_time);
      }
 
			i_ch_val = fn_nse_to_eba_token ( l_token_id,
                                   	 &st_cntrct,
																		 c_rout_str,
                                     c_ServiceName,
                                     c_errmsg );

    	if ( i_ch_val == SYSTEM_ERROR )
    	{
      	fn_errlog ( c_ServiceName, "S31040", LIBMSG, c_errmsg );
      	return -1;
    	}
    	else if ( i_ch_val != 0 )
    	{
      	return 0;
    	}
      if(DEBUG_MSG_LVL_2)   ** Ver 1.8 **
      {
       fn_gt_time();
       fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_bcast_only_mbp After  fn_nse_to_eba_token at :%s:",c_time);
      }
  	}
  	else
  	{
    	*  BSE code to be added here   *
    	fn_errlog ( c_ServiceName, "S31045","BSE code not handled", c_errmsg );
    	return 0;
  	}

		Ver 2.3 Comment Ends ************/

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Exchange Net Change Indicator :%s:",ptr_st_brd_only_mbp->st_only_mbp[i_loop].c_net_change_indicator);
			fn_userlog(c_ServiceName,"Exchange Open Price :%ld:",ptr_st_brd_only_mbp->st_only_mbp[i_loop].li_open_price);
			fn_userlog(c_ServiceName,"Exchange High Price Is :%ld:",ptr_st_brd_only_mbp->st_only_mbp[i_loop].li_high_price);
			fn_userlog(c_ServiceName,"Exchange Low Price Is :%ld:", ptr_st_brd_only_mbp->st_only_mbp[i_loop].li_low_price);
			fn_userlog(c_ServiceName,"Exchange LTP Is :%ld:",ptr_st_brd_only_mbp->st_only_mbp[i_loop].li_last_traded_price);
			fn_userlog(c_ServiceName,"Exchange Closing Price Is :%ld:",ptr_st_brd_only_mbp->st_only_mbp[i_loop].li_closing_price);
		}

		/***	Commented In Ver 2.3

		st_cntrct_short_qt.l_eba_cntrct_id = st_cntrct.l_eba_cntrct_id ;
		strcpy( st_cntrct_short_qt.c_xchng_cd , st_cntrct.c_xchng_cd ) ;
		st_cntrct_short_qt.c_prd_typ = st_cntrct.c_prd_typ;
		strcpy( st_cntrct_short_qt.c_undrlyng , st_cntrct.c_undrlyng ) ;
  	strcpy( st_cntrct_short_qt.c_expry_dt , st_cntrct.c_expry_dt ) ;
  	st_cntrct_short_qt.c_exrc_typ = st_cntrct.c_exrc_typ ;
  	st_cntrct_short_qt.c_opt_typ = st_cntrct.c_opt_typ ;
  	st_cntrct_short_qt.l_strike_prc = st_cntrct.l_strike_prc ;
  	st_cntrct_short_qt.c_ctgry_indstk = st_cntrct.c_ctgry_indstk ;
  	st_cntrct_short_qt.l_ca_lvl = st_cntrct.l_ca_lvl ;
	
		Ver 2.3 Comment Ends	***/


		st_cntrct_short_qt.l_eba_cntrct_id = ptr_st_brd_only_mbp->st_only_mbp[i_loop].l_token;   /*** Ver 2.3 ***/
		st_cntrct_short_qt.c_indctr = ptr_st_brd_only_mbp->st_only_mbp[i_loop].c_net_change_indicator;
		st_cntrct_short_qt.l_open_prc = ptr_st_brd_only_mbp->st_only_mbp[i_loop].li_open_price;
		st_cntrct_short_qt.l_high_prc = ptr_st_brd_only_mbp->st_only_mbp[i_loop].li_high_price;
		st_cntrct_short_qt.l_low_prc = ptr_st_brd_only_mbp->st_only_mbp[i_loop].li_low_price;
		st_cntrct_short_qt.l_lst_trdd_prc = ptr_st_brd_only_mbp->st_only_mbp[i_loop].li_last_traded_price;
		st_cntrct_short_qt.l_close_prc = ptr_st_brd_only_mbp->st_only_mbp[i_loop].li_closing_price;
		li_closing_price = ptr_st_brd_only_mbp->st_only_mbp[i_loop].li_closing_price;
		li_last_traded_price = ptr_st_brd_only_mbp->st_only_mbp[i_loop].li_last_traded_price;


    /**** Ver 2.6 Starts Here ***/
   st_cntrct_short_qt.d_crnt_oi=0;
   EXEC SQL
      SELECT NVL(FTQ_CRNT_OI,0)
        INTO :st_cntrct_short_qt.d_crnt_oi
        FROM FTQ_FO_TRD_QT
       WHERE FTQ_TOKEN_NO=:st_cntrct_short_qt.l_eba_cntrct_id
       AND   FTQ_XCHNG_CD=:c_xchng_cd_tmp;
   if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND && SQLCODE != TOO_MANY_ROWS_FETCHED)
   {
    fn_errlog ( c_ServiceName, "S31010", SQLMSG, c_errmsg );
   }
   /*** Ver 2.6 Ends Here ****/
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"EBA Contract ID Is :%ld:",st_cntrct_short_qt.l_eba_cntrct_id);
			fn_userlog(c_ServiceName,"Exchange Code Is :%s:",st_cntrct_short_qt.c_xchng_cd);
			fn_userlog(c_ServiceName,"Product Type Is :%c:",st_cntrct_short_qt.c_prd_typ);
			fn_userlog(c_ServiceName,"Underlying Is :%s:",st_cntrct_short_qt.c_undrlyng);
			fn_userlog(c_ServiceName,"Expiry Date Is :%s:",st_cntrct_short_qt.c_expry_dt);
			fn_userlog(c_ServiceName,"Exercise Type Is :%c:",st_cntrct_short_qt.c_exrc_typ);
			fn_userlog(c_ServiceName,"Option Type Is :%c:",st_cntrct_short_qt.c_opt_typ);
			fn_userlog(c_ServiceName,"Strike Price Is :%ld:",st_cntrct_short_qt.l_strike_prc);
			fn_userlog(c_ServiceName,"IND/STK Is :%c:",st_cntrct_short_qt.c_ctgry_indstk);
			fn_userlog(c_ServiceName,"CA LVL Is :%ld:",st_cntrct_short_qt.l_ca_lvl);
			fn_userlog(c_ServiceName,"Net change Indicator Is :%c:",st_cntrct_short_qt.c_indctr);
			fn_userlog(c_ServiceName,"Open Price Is :%ld:",st_cntrct_short_qt.l_open_prc);
			fn_userlog(c_ServiceName,"High Price Is :%ld:",st_cntrct_short_qt.l_high_prc);
			fn_userlog(c_ServiceName,"Low Price Is :%ld:",st_cntrct_short_qt.l_low_prc);
			fn_userlog(c_ServiceName,"LTP Is :%ld:",st_cntrct_short_qt.l_lst_trdd_prc);
			fn_userlog(c_ServiceName,"Closing Price Is :%ld:",st_cntrct_short_qt.l_close_prc);
		}

		if(li_closing_price == 0)
		{
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Inside Closing Price Check");
			}
			st_cntrct_short_qt.l_chng_prvs_close_prc = 0;

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName," l_chng_prvs_close_prc Is :%ld:",st_cntrct_short_qt.l_chng_prvs_close_prc);
			}
		}
		else
		{
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"CLOSING PRICE IS :%ld:",li_closing_price);
				fn_userlog(c_ServiceName,"LAST TRADED PRICE IS :%ld:",li_last_traded_price);
			}

			st_cntrct_short_qt.l_chng_prvs_close_prc = ((li_closing_price - li_last_traded_price)/li_closing_price) * 100;

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName," l_chng_prvs_close_prc Is :%ld:",st_cntrct_short_qt.l_chng_prvs_close_prc);
			}
		}
		
		fn_cpy_ddr(st_cntrct_short_qt.c_rout_crt);

    /**** Ver 1.9 Starts Here ****
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Before Call To SFO_UPD_QT With Request Type Is UPDATE_SHORT_QT_2");
		}

    if(DEBUG_MSG_LVL_2)   ** Ver 1.8 **
    {
     fn_gt_time();
     fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_bcast_only_mbp Before SFO_UPD_QT at :%s:",c_time);
    }

  	st_cntrct_short_qt.c_rqst_typ = UPDATE_SHORT_QT_2 ;

  	i_ch_val = fn_acall_svc ( c_ServiceName,
    	                        c_errmsg,
      	                      &st_cntrct_short_qt,
        	                    "vw_cntrct_qt",
          	                  sizeof (st_cntrct_short_qt),
            	                TPNOREPLY,
              	              "SFO_UPD_QT" );
  	if(i_ch_val == SYSTEM_ERROR)
  	{
    	fn_errlog ( c_ServiceName, "S31050", LIBMSG, c_errmsg );
    	return -1;
  	}

    if(DEBUG_MSG_LVL_2)   ** Ver 1.8 **
    {
     fn_gt_time();
     fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_bcast_only_mbp After SFO_UPD_QT at :%s:",c_time);
    }
    ****** Ver 1.9 Ends Here ****/

		/*** Commented In Ver 2.3

		st_cntrct_long_qt.l_eba_cntrct_id  = st_cntrct.l_eba_cntrct_id ;
		strcpy( st_cntrct_long_qt.c_xchng_cd, st_cntrct.c_xchng_cd ) ;
		st_cntrct_long_qt.c_prd_typ= st_cntrct.c_prd_typ ;
		strcpy( st_cntrct_long_qt.c_undrlyng, st_cntrct.c_undrlyng ) ;
		strcpy( st_cntrct_long_qt.c_expry_dt, st_cntrct.c_expry_dt ) ;
		st_cntrct_long_qt.c_exrc_typ = st_cntrct.c_exrc_typ ;
		st_cntrct_long_qt.c_opt_typ = st_cntrct.c_opt_typ ;
		st_cntrct_long_qt.l_strike_prc = st_cntrct.l_strike_prc ;
		st_cntrct_long_qt.c_ctgry_indstk = st_cntrct.c_ctgry_indstk ;
		st_cntrct_long_qt.l_ca_lvl = st_cntrct.l_ca_lvl ;

		Ver 2.3 Comment Ends	***/

		st_cntrct_long_qt.l_eba_cntrct_id	=	ptr_st_brd_only_mbp->st_only_mbp[i_loop].l_token;			/***	Added In Ver 2.3	***/
		st_cntrct_long_qt.l_lst_trdd_prc = ptr_st_brd_only_mbp->st_only_mbp[i_loop].li_last_traded_price;
		st_cntrct_long_qt.l_lst_trdd_qty = ptr_st_brd_only_mbp->st_only_mbp[i_loop].li_last_traded_quantity;
		st_cntrct_long_qt.l_tot_trdd_qty = ptr_st_brd_only_mbp->st_only_mbp[i_loop].li_volume_traded_today;
		
		fn_long_to_timearr (st_cntrct_long_qt.c_lst_trdd_time ,ptr_st_brd_only_mbp->st_only_mbp[i_loop].li_last_traded_time);

		st_cntrct_long_qt.l_avg_trdd_prc = ptr_st_brd_only_mbp->st_only_mbp[i_loop].li_average_trade_price;
		st_cntrct_long_qt.d_tot_bid_qty  = ptr_st_brd_only_mbp->st_only_mbp[i_loop].d_total_buy_quantity;
		st_cntrct_long_qt.d_tot_offr_qty = ptr_st_brd_only_mbp->st_only_mbp[i_loop].d_total_sell_quantity;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"st_only_mbp[i_loop].l_token is :%ld:",ptr_st_brd_only_mbp->st_only_mbp[i_loop].l_token);
			fn_userlog(c_ServiceName,"st_cntrct_short_qt.l_eba_cntrct_id Is :%ld:",st_cntrct_short_qt.l_eba_cntrct_id);
			fn_userlog(c_ServiceName,"st_cntrct_long_qt.l_eba_cntrct_id Is :%ld:",st_cntrct_long_qt.l_eba_cntrct_id);
		}

		for(i_tmp = 0; i_tmp < MAX_BOFR_BBID; i_tmp++)
		{

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,":%d:Exchange Best Bid Qty Is :%ld:",i_tmp,ptr_st_brd_only_mbp->st_only_mbp[i_loop].st_mbpinfo[i_tmp].li_quantity);
			fn_userlog(c_ServiceName,":%d:Exchange Best Bid Price Is :%ld:",i_tmp, ptr_st_brd_only_mbp->st_only_mbp[i_loop].st_mbpinfo[i_tmp].li_price);
			fn_userlog(c_ServiceName,":%d:Exchange Best Offer Qty Is :%ld:",i_tmp, ptr_st_brd_only_mbp->st_only_mbp[i_loop].st_mbpinfo[i_tmp + 5].li_quantity);
			fn_userlog(c_ServiceName,":%d:Exchange Best Offer  Price Is :%ld:",i_tmp, ptr_st_brd_only_mbp->st_only_mbp[i_loop].st_mbpinfo[i_tmp + 5].li_price);
		}

			st_cntrct_long_qt.l_bst_bid_qty[ i_tmp ]  = ptr_st_brd_only_mbp->st_only_mbp[i_loop].st_mbpinfo[i_tmp].li_quantity;
			st_cntrct_long_qt.l_bst_bid_prc[ i_tmp ]  = ptr_st_brd_only_mbp->st_only_mbp[i_loop].st_mbpinfo[i_tmp].li_price;
			st_cntrct_long_qt.l_bst_offr_qty[ i_tmp ] = ptr_st_brd_only_mbp->st_only_mbp[i_loop].st_mbpinfo[i_tmp + 5].li_quantity;
			st_cntrct_long_qt.l_bst_offr_prc[ i_tmp ] = ptr_st_brd_only_mbp->st_only_mbp[i_loop].st_mbpinfo[i_tmp + 5].li_price;


		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,":%d:Best Bid Qty Is :%ld:",i_tmp,st_cntrct_long_qt.l_bst_bid_qty[ i_tmp ]);
			fn_userlog(c_ServiceName,":%d:Best Bid Price Is :%ld:",i_tmp,st_cntrct_long_qt.l_bst_bid_prc[ i_tmp ]);
			fn_userlog(c_ServiceName,":%d:Best Offer Qty Is :%ld:",i_tmp,st_cntrct_long_qt.l_bst_offr_qty[ i_tmp ]);
			fn_userlog(c_ServiceName,":%d:Best Offer  Price Is :%ld:",i_tmp, st_cntrct_long_qt.l_bst_offr_prc[ i_tmp ]);
		}

		}

		fn_cpy_ddr(st_cntrct_long_qt.c_rout_crt);

    /**** Ver 1.9 Starts Here *****

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Before Call To SFO_UPD_LONG_QT With Request Type Is UPDATE_PRICE_QT");
		}

    if(DEBUG_MSG_LVL_2)   ** Ver 1.8 **
    {
     fn_gt_time();
     fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_bcast_only_mbp Before SFO_UPD_LONG_QT at :%s:",c_time);
    }

  	st_cntrct_long_qt.c_rqst_typ = UPDATE_PRICE_QT ;
  	i_ch_val = fn_acall_svc ( c_ServiceName,
    	                        c_errmsg,
      	                      &st_cntrct_long_qt,
        	                    "vw_cntrctlong_qt",
          	                  sizeof (st_cntrct_long_qt),
            	                TPNOREPLY,
              	              "SFO_UPD_LONG_QT" );
  	if ( i_ch_val == SYSTEM_ERROR )
  	{
    	fn_errlog ( c_ServiceName, "S31055", LIBMSG, c_errmsg );
    	return -1;
  	}

    if(DEBUG_MSG_LVL_2)   ** Ver 1.8 **
    {
     fn_gt_time();
     fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_bcast_only_mbp After SFO_UPD_LONG_QT at :%s:",c_time);
    }
    ********** Ver 1.9 Ends Here *****/
  
    /******** Ver 1.9 Starts Here *******/
    memcpy ( &st_cntrct_lng_qt, &st_cntrct_long_qt, sizeof( struct st_cntrctlong_qt ) );
    memcpy ( &st_cntrct_shrt_qt, &st_cntrct_short_qt, sizeof( struct st_cntrct_qt ) );

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Open Price Is :%ld:",st_cntrct_shrt_qt.l_open_prc);
      fn_userlog(c_ServiceName,"High Price Is :%ld:",st_cntrct_shrt_qt.l_high_prc);
      fn_userlog(c_ServiceName,"Low Price Is :%ld:",st_cntrct_shrt_qt.l_low_prc);
      fn_userlog(c_ServiceName,"LTP Is :%ld:",st_cntrct_shrt_qt.l_lst_trdd_prc);
      fn_userlog(c_ServiceName,"Closing Price Is :%ld:",st_cntrct_shrt_qt.l_close_prc);
    }

    if( Fchg32( ptr_fml_Sbuf, FFO_CBUF, 0, (char *)&st_cntrct_lng_qt, sizeof( struct st_cntrctlong_qt )) == -1)
    {
      fn_errlog ( c_ServiceName, "S31070", FMLMSG, c_errmsg );
    }

    if( Fchg32( ptr_fml_Sbuf, FML_SBUF, 0, (char *)&st_cntrct_shrt_qt, sizeof( struct st_cntrct_qt )) == -1)
    {
      fn_errlog ( c_ServiceName, "S31075", FMLMSG, c_errmsg );
    }

    if(DEBUG_MSG_LVL_2)   
    {
     fn_gt_time();
     fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_bcast_only_mbp Before SFO_UPD_QTLNGQT at :%s:",c_time);
    }

    i_ch_val = tpacall("SFO_UPD_QTLNGQT", (char *)ptr_fml_Sbuf, 0, TPNOREPLY);

    if( i_ch_val == -1 )
    {
      fn_errlog ( c_ServiceName, "S31080", LIBMSG, c_errmsg );
    }

    if(DEBUG_MSG_LVL_2)
    {
     fn_gt_time();
     fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_bcast_only_mbp Before SFO_UPD_QTLNGQT at :%s:",c_time);
    }

    /******** Ver 1.9 Ends Here ********/ 

		if( c_tbt_mod == '1' ) /* ver 1.5 */
		{
		/** Ver 1.4 Starts **/
		
		if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Call To SFO_INS_CNT");
    }
			
		/**** Commented in ver 1.6 ****
		i_ch_val = fn_acall_svc ( c_ServiceName,
                              c_errmsg,
                              &st_cntrct_long_qt,
                              "vw_cntrctlong_qt",
                              sizeof (st_cntrct_long_qt),
                              TPNOREPLY,
                              "SFO_INS_CNT" );
    if ( i_ch_val == SYSTEM_ERROR )
    {
      fn_errlog ( c_ServiceName, "S31060", LIBMSG, c_errmsg );
  *  return -1;	commented in ver 1.5 *
    }
		***** End of comment ver 1.6 *****/
		/***** Ver 1.6 Starts *****/
   
    /******** Ver 1.9 Starts Here ******
	  memcpy ( &st_cntrct_lng_qt, &st_cntrct_long_qt, sizeof( struct st_cntrctlong_qt ) );
	  memcpy ( &st_cntrct_shrt_qt, &st_cntrct_short_qt, sizeof( struct st_cntrct_qt ) );

		if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Open Price Is :%ld:",st_cntrct_shrt_qt.l_open_prc);
      fn_userlog(c_ServiceName,"High Price Is :%ld:",st_cntrct_shrt_qt.l_high_prc);
      fn_userlog(c_ServiceName,"Low Price Is :%ld:",st_cntrct_shrt_qt.l_low_prc);
      fn_userlog(c_ServiceName,"LTP Is :%ld:",st_cntrct_shrt_qt.l_lst_trdd_prc);
      fn_userlog(c_ServiceName,"Closing Price Is :%ld:",st_cntrct_shrt_qt.l_close_prc);
    }

		if( Fchg32( ptr_fml_Sbuf, FFO_CBUF, 0, (char *)&st_cntrct_lng_qt, sizeof( struct st_cntrctlong_qt )) == -1)
		{
			fn_errlog ( c_ServiceName, "S31070", FMLMSG, c_errmsg );
		}
		
		if( Fchg32( ptr_fml_Sbuf, FML_SBUF, 0, (char *)&st_cntrct_shrt_qt, sizeof( struct st_cntrct_qt )) == -1) 
		{
			fn_errlog ( c_ServiceName, "S31075", FMLMSG, c_errmsg );
		}

    ***** Ver 1.9 Ends Here ****************/
	
		i_ch_val = tpacall("SFO_INS_CNT", (char *)ptr_fml_Sbuf, 0, TPNOREPLY);

    if( i_ch_val == -1 )
    {
			fn_errlog ( c_ServiceName, "S31080", LIBMSG, c_errmsg );
		}

		/***** Ver 1.6 Ends *****/
		
		/** Ver 1.4 Ends **/
		}/* ver 1.5 */	
	}
  if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
  {
   fn_gt_time();
   fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_bcast_only_mbp After processing :%d:record at :%s:",i_rec_cnt,c_time);
  }

	tpfree ( ( char * ) ptr_fml_Sbuf );  /*** Ver 1.6 ***/
	return 0;
}

/******************************************************************************/
/*  To update details of short quote which have got from exchange.            */
/*  INPUT PARAMETERS                                                          */
/*      st_shortqt  - short quote message structure                           */
/*      c_errmsg   - Error message to be returned in case of error            */
/*  OUTPUT PARAMETERS                                                         */
/*      void                                                                  */
/******************************************************************************/

int fn_mw_round_robin( struct st_bcast_inq_resp_2 *ptr_st_brd_inq_res,
                       char *c_xchng_cd,
                       char *c_ServiceName,
                       char *c_errmsg)
{
	struct vw_contract st_cntrct;
  struct vw_cntrct_qt st_cntrct_short_qt;
  nfo_cntrct st_nse_cntrct;

	char c_rout_str[4];

  int i_ch_val;
	int i;
	
	long  l_token_id;

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"Inside Function fn_mw_round_robin");
		fn_userlog(c_ServiceName,"Exchange code is :%s:",c_xchng_cd);
	}

	strcpy(c_rout_str,"000");

  if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
  {
   fn_gt_time();
   fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_mw_round_robin Before processing :%d:record at :%s:",ptr_st_brd_inq_res->si_number_of_records ,c_time);
  }
	
	for( i = 0; i<ptr_st_brd_inq_res->si_number_of_records; i++ )
	{
		if( strcmp ( c_xchng_cd, "NFO" ) == 0 )
		{
			l_token_id = ptr_st_brd_inq_res->st_mkt_wtch[i].l_token;
		
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Token ID Is :%ld:",l_token_id);
			}

      if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
      {
       fn_gt_time();
       fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_mw_round_robin Before fn_nse_to_eba_token at :%s:",c_time);
      }      
			i_ch_val = fn_nse_to_eba_token ( l_token_id,
                                   	 &st_cntrct,
																		 c_rout_str,
                                   	 c_ServiceName,
                                     c_errmsg );
    	if ( i_ch_val == SYSTEM_ERROR )
    	{
      	fn_errlog ( c_ServiceName, "S31085", LIBMSG, c_errmsg );
      	return -1;
    	}
    	else if ( i_ch_val != 0 )
    	{
     		return 0;
    	}
      if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
      {
       fn_gt_time();
       fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_mw_round_robin After fn_nse_to_eba_token at :%s:",c_time);
      }
  	}
  	else
  	{
    	/*  BSE code to be added here   */
    	fn_errlog ( c_ServiceName, "S31090","BSE code not handled", c_errmsg );
    	return 0;
  	}


if(DEBUG_MSG_LVL_3)
{
		fn_userlog(c_ServiceName,"Exchange LTP Is :%ld:",ptr_st_brd_inq_res->st_mkt_wtch[i].st_mkt_info[0].li_last_trade_price);
		fn_userlog(c_ServiceName,"Exchange Last Trade Time Is :%ld:",ptr_st_brd_inq_res ->st_mkt_wtch[i].st_mkt_info[0].li_last_trade_time);
		fn_userlog(c_ServiceName,"Exchange Best Offer Qty Is :%ld:",ptr_st_brd_inq_res->st_mkt_wtch[i].st_mkt_info[0].li_sell_volume);
		fn_userlog(c_ServiceName,"Exchange Best Offer Price Is :%ld:",ptr_st_brd_inq_res->st_mkt_wtch[i].st_mkt_info[0].li_sell_price);
		fn_userlog(c_ServiceName,"Exchange Best Bid Qty Is :%ld:",ptr_st_brd_inq_res->st_mkt_wtch[i].st_mkt_info[0].li_buy_volume);
		fn_userlog(c_ServiceName,"Exchange Best Bid Price Is :%ld:",ptr_st_brd_inq_res->st_mkt_wtch[i].st_mkt_info[0].li_buy_price);
		fn_userlog(c_ServiceName,"Exchange Open Interest Is :%ld:", ptr_st_brd_inq_res->st_mkt_wtch[i].li_open_interest);
}
		

		st_cntrct_short_qt.l_eba_cntrct_id = st_cntrct.l_eba_cntrct_id ;
		strcpy( st_cntrct_short_qt.c_xchng_cd , st_cntrct.c_xchng_cd ) ;
		st_cntrct_short_qt.c_prd_typ = st_cntrct.c_prd_typ ;
		strcpy( st_cntrct_short_qt.c_undrlyng , st_cntrct.c_undrlyng ) ;
		strcpy( st_cntrct_short_qt.c_expry_dt , st_cntrct.c_expry_dt ) ;
		st_cntrct_short_qt.c_exrc_typ = st_cntrct.c_exrc_typ ;
		st_cntrct_short_qt.c_opt_typ = st_cntrct.c_opt_typ ;
  	st_cntrct_short_qt.l_strike_prc = st_cntrct.l_strike_prc ;
  	st_cntrct_short_qt.c_ctgry_indstk = st_cntrct.c_ctgry_indstk ;
  	st_cntrct_short_qt.l_ca_lvl = st_cntrct.l_ca_lvl ;
		st_cntrct_short_qt.l_lst_trdd_prc = ptr_st_brd_inq_res->st_mkt_wtch[i].st_mkt_info[0].li_last_trade_price;
		fn_long_to_timearr(st_cntrct_short_qt.c_lst_trdd_time,ptr_st_brd_inq_res ->st_mkt_wtch[i].st_mkt_info[0].li_last_trade_time);
		st_cntrct_short_qt.l_bst_offr_qty = ptr_st_brd_inq_res->st_mkt_wtch[i].st_mkt_info[0].li_sell_volume;
		st_cntrct_short_qt.l_bst_offr_prc = ptr_st_brd_inq_res->st_mkt_wtch[i].st_mkt_info[0].li_sell_price;
		st_cntrct_short_qt.l_bst_bid_qty = ptr_st_brd_inq_res->st_mkt_wtch[i].st_mkt_info[0].li_buy_volume;
		st_cntrct_short_qt.l_bst_bid_prc = ptr_st_brd_inq_res->st_mkt_wtch[i].st_mkt_info[0].li_buy_price;
		st_cntrct_short_qt.d_crnt_oi = ptr_st_brd_inq_res->st_mkt_wtch[i].li_open_interest;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"LTP Is :%ld:",st_cntrct_short_qt.l_lst_trdd_prc);
			fn_userlog(c_ServiceName,"Last Trade Time Is :%s:",st_cntrct_short_qt.c_lst_trdd_time);
			fn_userlog(c_ServiceName,"Best Offer Qty Is :%ld:",st_cntrct_short_qt.l_bst_offr_qty);
			fn_userlog(c_ServiceName,"Best Offer Price Is :%ld:",st_cntrct_short_qt.l_bst_offr_prc);
			fn_userlog(c_ServiceName,"Best Bid Qty Is :%ld:",st_cntrct_short_qt.l_bst_bid_qty);
			fn_userlog(c_ServiceName,"Best Bid Price Is :%ld:", st_cntrct_short_qt.l_bst_bid_prc);
			fn_userlog(c_ServiceName,"Open Interest Is :%lf:",st_cntrct_short_qt.d_crnt_oi);
		}

		fn_cpy_ddr(st_cntrct_short_qt.c_rout_crt);

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Before Call To SFO_UPD_QT With Request Type UPDATE_SHORT_QT_3");
		}

  	st_cntrct_short_qt.c_rqst_typ = UPDATE_SHORT_QT_3 ;

    if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
    {
     fn_gt_time();
     fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_mw_round_robin Before SFO_UPD_QT at :%s:",c_time);
    }

  	i_ch_val = fn_acall_svc ( c_ServiceName,
    	                        c_errmsg,
      	                      &st_cntrct_short_qt,
        	                    "vw_cntrct_qt",
          	                  sizeof (st_cntrct_short_qt),
            	                TPNOREPLY, 
              	              "SFO_UPD_QT" );
  	if ( i_ch_val == SYSTEM_ERROR )
  	{
    	fn_errlog ( c_ServiceName, "S31095", LIBMSG, c_errmsg );
    	return -1;
  	}
    if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
    {
     fn_gt_time();
     fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_mw_round_robin After SFO_UPD_QT at :%s:",c_time);
    }
		/** Commented in Ver 1.4 Starts **
	
		** Ver 1.3 Starts **
    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Call To SFO_INS_CNT");
    }

    i_ch_val = fn_acall_svc ( c_ServiceName,
                              c_errmsg,
                              &st_cntrct_short_qt,
                              "vw_cntrct_qt",
                              sizeof (st_cntrct_short_qt),
                              TPNOREPLY,
                              "SFO_INS_CNT" );
    if ( i_ch_val == SYSTEM_ERROR )
    {
      fn_errlog ( c_ServiceName, "S31100", LIBMSG, c_errmsg );
      return -1;
    }

  	** Ver 1.3 Ends **
		** Comment in Ver 1.4 Ends **/
	}

  if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
  {
   fn_gt_time();
   fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_mw_round_robin After processing :%d:record at :%s:",ptr_st_brd_inq_res->si_number_of_records ,c_time);
  }
	
	return 0;

}

/******************************************************************************/
/*  To update details of Index quotes                                         */
/*  INPUT PARAMETERS                                                          */
/*      st_indxqt      - Structure of Index quotes                            */
/*      c_ServiceName - Name of service currently running                     */
/*      c_errmsg     - Error message to be returned in case of error          */
/*  OUTPUT PARAMETERS                                                         */
/*      void                                                                  */
/******************************************************************************/

int fn_bcast_indices( struct st_bcast_indices *ptr_st_brd_indices,
                      char *c_xchng_cd,
                      char *c_ServiceName,
                      char *c_errmsg)
{
	struct vw_indx_qt st_vwindxqt;
  int i_ch_val;
	int i;

	char c_index_name [15];

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"Inside Function fn_bcast_indices");
		fn_userlog(c_ServiceName,"Exchange code is :%s:",c_xchng_cd);
	}

  if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
  {
   fn_gt_time();
   fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_bcast_indices Before processing %d record at :%s:",ptr_st_brd_indices->si_number_of_records,c_time);
  }

	for( i = 0; i<ptr_st_brd_indices->si_number_of_records; i++ )
	{
		fn_nsetoors_char( c_index_name,
											LEN_INDEX_NAM,
											ptr_st_brd_indices->st_idx[i].c_index_name,
											LEN_INDEX_NAME);

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Index Name Is :%s:",c_index_name);
		}

    if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
    {
     fn_gt_time();
     fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_bcast_indices Before  fn_get_eba_cd at :%s:",c_time);
    }

		i_ch_val = fn_get_eba_cd ( c_index_name,
                               st_vwindxqt.c_index_cd,
                               1,
                               c_ServiceName,
                               c_errmsg );
  	if(i_ch_val == -2)
  	{
    	fn_errlog ( c_ServiceName, "S31105", LIBMSG, c_errmsg );
    	return -1;
  	}
  	else if ( i_ch_val != 0 )
  	{
    	return 0;
  	}

    if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
    {
     fn_gt_time();
     fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_bcast_indices After fn_get_eba_cd at :%s:",c_time);
    }

if(DEBUG_MSG_LVL_3)
{
		fn_userlog(c_ServiceName,"Log Time Is :%ld:",ptr_st_brd_indices->st_hdr.li_log_time );
		fn_userlog(c_ServiceName,"Exchange Index Value Is :%ld:",ptr_st_brd_indices->st_idx[i].li_index_value);
		fn_userlog(c_ServiceName,"Exchange High Index Value Is :%ld:",ptr_st_brd_indices->st_idx[i].li_high_index_value);
		fn_userlog(c_ServiceName,"Exchange Open Index Value Is :%ld:",ptr_st_brd_indices->st_idx[i].li_opening_index);
		fn_userlog(c_ServiceName,"Exchange Low Index Value Is :%ld:",ptr_st_brd_indices->st_idx[i].li_low_index_value);
		fn_userlog(c_ServiceName,"Exchange Close Index Value Is :%ld:",ptr_st_brd_indices->st_idx[i].li_closing_index);
		fn_userlog(c_ServiceName,"Exchange Percentahe Change Index :%ld:", ptr_st_brd_indices->st_idx[i].li_percent_change);
		fn_userlog(c_ServiceName,"Exchange Yearly High Value Is :%ld:", ptr_st_brd_indices->st_idx[i].li_yearly_high);
		fn_userlog(c_ServiceName,"Exchange Yearly Low Value Is :%ld:",ptr_st_brd_indices->st_idx[i].li_yearly_low);
		fn_userlog(c_ServiceName,"Exchange Index Indicator is :%c:",  ptr_st_brd_indices->st_idx[i].c_net_change_indicator);
		fn_userlog(c_ServiceName,"Exchange Market Capitalisation Is :%lf:", ptr_st_brd_indices->st_idx[i].d_market_capitalisation);
}

		fn_long_to_timearr(st_vwindxqt.c_indx_tm_stmp,ptr_st_brd_indices->st_hdr.li_log_time );

		st_vwindxqt.l_indx_val = ptr_st_brd_indices->st_idx[i].li_index_value;			
		st_vwindxqt.l_high_indx_val = ptr_st_brd_indices->st_idx[i].li_high_index_value;
		st_vwindxqt.l_open_indx_val = ptr_st_brd_indices->st_idx[i].li_opening_index;
		st_vwindxqt.l_low_indx_val = ptr_st_brd_indices->st_idx[i].li_low_index_value;
		st_vwindxqt.l_close_indx_val = ptr_st_brd_indices->st_idx[i].li_closing_index;
		st_vwindxqt.l_prcntg_chng_indx = ptr_st_brd_indices->st_idx[i].li_percent_change;
		st_vwindxqt.l_indx_yrly_high_val = ptr_st_brd_indices->st_idx[i].li_yearly_high;
		st_vwindxqt.l_indx_yrly_low_val = ptr_st_brd_indices->st_idx[i].li_yearly_low;
		st_vwindxqt.c_indx_indctr = ptr_st_brd_indices->st_idx[i].c_net_change_indicator;
		st_vwindxqt.d_mkt_cptltn = ptr_st_brd_indices->st_idx[i].d_market_capitalisation;
	  

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Time Stamp Is :%s:",st_vwindxqt.c_indx_tm_stmp);
			fn_userlog(c_ServiceName,"Index Value Is :%ld:",st_vwindxqt.l_indx_val);
			fn_userlog(c_ServiceName,"High Index Value Is :%ld:",st_vwindxqt.l_high_indx_val);
			fn_userlog(c_ServiceName,"Open Index Value Is :%ld:",st_vwindxqt.l_open_indx_val);
			fn_userlog(c_ServiceName,"Low Index Value Is :%ld:",st_vwindxqt.l_low_indx_val);
			fn_userlog(c_ServiceName,"Close Index Value Is :%ld:",st_vwindxqt.l_close_indx_val);
			fn_userlog(c_ServiceName,"Percentahe Change Index :%ld:",st_vwindxqt.l_prcntg_chng_indx);
			fn_userlog(c_ServiceName,"Yearly High Value Is :%ld:",st_vwindxqt.l_indx_yrly_high_val);
			fn_userlog(c_ServiceName,"Yearly Low Value Is :%ld:",st_vwindxqt.l_indx_yrly_low_val);
			fn_userlog(c_ServiceName,"Index Indicator is :%c:",st_vwindxqt.c_indx_indctr);
			fn_userlog(c_ServiceName,"Market Capitalisation Is :%lf:",st_vwindxqt.d_mkt_cptltn); 
		}

		fn_cpy_ddr(st_vwindxqt.c_rout_crt);
		st_vwindxqt.c_rqst_typ = UPDATE_INDX_QT_1;
    
    if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
    {
     fn_gt_time();
     fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_bcast_indices Before SFO_UPDINDX_INF at :%s:",c_time);
    }

		i_ch_val = fn_acall_svc ( c_ServiceName,
                            	c_errmsg,
                            	&st_vwindxqt,
                            	"vw_indx_qt",
                            	sizeof (st_vwindxqt),
                            	TPNOREPLY,
                            	"SFO_UPDINDX_INF" );

  	if ( i_ch_val == SYSTEM_ERROR )
  	{
    	fn_errlog ( c_ServiceName, "S31110", LIBMSG, c_errmsg );
    	return -1;
  	}

    if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
    {
     fn_gt_time();
     fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_bcast_indices After SFO_UPDINDX_INF at :%s:",c_time);
    }
	}

  if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
  {
   fn_gt_time();
   fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_bcast_indices After processing %d record at :%s:",ptr_st_brd_indices->si_number_of_records,c_time);
  }
	
	return 0 ;
}

int fn_bcast_industry_index_update( struct st_bcast_industry_indices *ptr_st_brd_indust_indices,
                                    char *c_xchng_cd,
                                    char *c_ServiceName,
                                    char *c_errmsg )
{
	struct vw_indx_qt st_vwindxqt;
  int i_ch_val;
	int i;

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"Inside Function fn_bcast_industry_index_update");
		fn_userlog(c_ServiceName,"Exchange code is :%s:",c_xchng_cd);
	}

  if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
  {
   fn_gt_time();
   fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_bcast_industry_index_update Before processing %d record at :%s:",ptr_st_brd_indust_indices->si_inofrecs,c_time);
  }

	for( i = 0; i<ptr_st_brd_indust_indices->si_inofrecs; i++ )
	{
		fn_nsetoors_char ( st_vwindxqt.c_index_cd,
											 LEN_INDEX_NAM,
											 ptr_st_brd_indust_indices->st_industry[i].c_industry_name,
										   LEN_INDEX_NAME);

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Index Code Is :%s:",st_vwindxqt.c_index_cd);
		}

		i_ch_val = fn_get_eba_cd ( ptr_st_brd_indust_indices->st_industry[i].c_industry_name,
                             	 st_vwindxqt.c_index_cd,
                            	 1,
                             	 c_ServiceName,
                             	 c_errmsg );
  	if(i_ch_val == -2)
  	{
    	fn_errlog ( c_ServiceName, "S31115", LIBMSG, c_errmsg );
    	return -1;
  	}
  	else if ( i_ch_val != 0 )
  	{
    	return 0;
  	}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Exchange Log Time Is :%ld:",ptr_st_brd_indust_indices->st_hdr.li_log_time);
			fn_userlog(c_ServiceName,"Exchange Index Value Is :%ld:",ptr_st_brd_indust_indices->st_industry[i].li_iindex_value);
		}

		fn_long_to_timearr(st_vwindxqt.c_indx_tm_stmp,ptr_st_brd_indust_indices->st_hdr.li_log_time );
		st_vwindxqt.l_indx_val = ptr_st_brd_indust_indices->st_industry[i].li_iindex_value;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"After Conversion Time Stamp Is :%s:",st_vwindxqt.c_indx_tm_stmp);
			fn_userlog(c_ServiceName,"Index Value Is :%ld:",st_vwindxqt.l_indx_val);
		}

		fn_cpy_ddr(st_vwindxqt.c_rout_crt);
		st_vwindxqt.c_rqst_typ = UPDATE_INDX_QT_2;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Before Call To SFO_UPDINDX_INF");	
		}

  	i_ch_val = fn_acall_svc ( c_ServiceName,
    	                        c_errmsg,
      	                      &st_vwindxqt,
        	                    "vw_indx_qt",
          	                  sizeof (st_vwindxqt),
            	                TPNOREPLY,
              	              "SFO_UPDINDX_INF" );
  	if ( i_ch_val == SYSTEM_ERROR )
  	{
    	fn_errlog ( c_ServiceName, "S31120", LIBMSG, c_errmsg );
    	return -1;
  	}

	}
  if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
  {
   fn_gt_time();
   fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_bcast_industry_index_update After processing %d record at :%s:",ptr_st_brd_indust_indices->si_inofrecs,c_time);
  }

	return 0;
}

/******************************************************************************/
/*  To update details of EOD quotes which have got from exchange.             */
/*  INPUT PARAMETERS                                                          */
/*      st_eodqt  - EOD quote message structure                               */
/*      c_errmsg - Error message to be returned in case of error              */
/*  OUTPUT PARAMETERS                                                         */
/*      void                                                                  */
/******************************************************************************/

int fn_rprt_market_stats_out_rpt( struct st_rp_market_stats *ptr_st_rp_mkt_stts,
                                  char *c_xchng_cd,
                                  char *c_ServiceName,
                                  char *c_errmsg)
{
	int i_ch_val;
	int i;

  struct vw_contract st_cntrct;
  struct vw_cntrct_qt st_eod_cntrct_qt;

  nfo_cntrct st_nse_cntrct;

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"Inside Function fn_rprt_market_stats_out_rpt");
		fn_userlog(c_ServiceName,"Exchange code is :%s:",c_xchng_cd);
	}

	if ( ( ptr_st_rp_mkt_stts->c_message_type == 'D')  ||	( ptr_st_rp_mkt_stts->c_message_type == 'R') )
	{
		for( i = 0; i<ptr_st_rp_mkt_stts->si_number_of_records; i++ )
		{
			if ( ( ptr_st_rp_mkt_stts->st_stats_dat[i].si_market_type == 1) )			
			{
				if ( strcmp ( c_xchng_cd,"NFO") == 0 )
				{
					strcpy(st_nse_cntrct.c_xchng_cd,c_xchng_cd);
					st_nse_cntrct.c_prd_typ =	ptr_st_rp_mkt_stts->st_stats_dat[i].st_con_desc.c_instrument_name[0];
					st_nse_cntrct.c_exrc_typ = ptr_st_rp_mkt_stts->st_stats_dat[i].st_con_desc.c_option_type[1];
					st_nse_cntrct.c_opt_typ = ptr_st_rp_mkt_stts->st_stats_dat[i].st_con_desc.c_option_type[0];
					st_nse_cntrct.l_strike_prc = ptr_st_rp_mkt_stts->st_stats_dat[i].st_con_desc.li_strike_price;
					st_nse_cntrct.c_ctgry_indstk = ptr_st_rp_mkt_stts->st_stats_dat[i].st_con_desc.c_instrument_name[3];
	
					fn_nsetoors_char ( st_nse_cntrct.c_symbol,
														 LEN_SYMBOL,
														 ptr_st_rp_mkt_stts->st_stats_dat[i].st_con_desc.c_symbol,
														 LEN_SYMBOL_NSE );

					fn_long_to_timearr ( st_nse_cntrct.c_expry_dt,ptr_st_rp_mkt_stts->st_stats_dat[i].st_con_desc.li_expiry_date );

				  st_nse_cntrct.l_ca_lvl = ptr_st_rp_mkt_stts->st_stats_dat[i].st_con_desc.si_ca_level;

					i_ch_val = fn_nse_to_eba_cntrct ( st_nse_cntrct,
                                      			&st_cntrct,
                                      			c_ServiceName,
                                      			c_errmsg );

    			if ( i_ch_val == SYSTEM_ERROR )
    			{
      			fn_errlog(c_ServiceName, "S31125", LIBMSG, c_errmsg);
      			return -1;
    			}
    			else if ( i_ch_val != 0 )
    			{
      			return 0;
    			}
				}	
				else if( strcmp ( c_xchng_cd,"BFO") == 0 )
  			{
    			/*  BSE code to be added here   */
    			fn_errlog ( c_ServiceName, "S31130","BSE code not handled", c_errmsg );
    			return 0;
  			}
				
				st_eod_cntrct_qt.l_eba_cntrct_id = st_cntrct.l_eba_cntrct_id ;
				strcpy( st_eod_cntrct_qt.c_xchng_cd , st_cntrct.c_xchng_cd ) ;
				st_eod_cntrct_qt.c_prd_typ = st_cntrct.c_prd_typ ;
				strcpy( st_eod_cntrct_qt.c_undrlyng , st_cntrct.c_undrlyng ) ;
  			strcpy( st_eod_cntrct_qt.c_expry_dt , st_cntrct.c_expry_dt ) ;
				st_eod_cntrct_qt.c_exrc_typ = st_cntrct.c_exrc_typ ;
  			st_eod_cntrct_qt.c_opt_typ = st_cntrct.c_opt_typ ;
  			st_eod_cntrct_qt.l_strike_prc = st_cntrct.l_strike_prc ;
  			st_eod_cntrct_qt.c_ctgry_indstk = st_cntrct.c_ctgry_indstk ;
  			st_eod_cntrct_qt.l_ca_lvl = st_cntrct.l_ca_lvl ;
				st_eod_cntrct_qt.l_open_prc = ptr_st_rp_mkt_stts->st_stats_dat[i].li_open_price;
				st_eod_cntrct_qt.l_close_prc =  ptr_st_rp_mkt_stts->st_stats_dat[i].li_closing_price;
				st_eod_cntrct_qt.l_high_prc = ptr_st_rp_mkt_stts->st_stats_dat[i].li_high_price;
				st_eod_cntrct_qt.l_low_prc = ptr_st_rp_mkt_stts->st_stats_dat[i].li_low_price;
				st_eod_cntrct_qt.l_prev_close_prc = ptr_st_rp_mkt_stts->st_stats_dat[i].li_previous_close_price;
				st_eod_cntrct_qt.l_tot_qty_trdd = ptr_st_rp_mkt_stts->st_stats_dat[i].li_total_quantity_traded;
				/** st_eod_cntrct_qt.l_tot_val_trdd = (long) ptr_st_rp_mkt_stts->st_stats_dat[i].d_total_value_traded; **Ver 2.0 */
				st_eod_cntrct_qt.d_tot_val_trdd =  ptr_st_rp_mkt_stts->st_stats_dat[i].d_total_value_traded;  /** Ver 2.0 **/
				st_eod_cntrct_qt.d_crnt_oi	= ptr_st_rp_mkt_stts->st_stats_dat[i].li_open_interest;
				st_eod_cntrct_qt.d_chng_oi  = ptr_st_rp_mkt_stts->st_stats_dat[i].li_chgopeninterest;
				sprintf( st_eod_cntrct_qt.c_oi_indctr, "%c",ptr_st_rp_mkt_stts->st_stats_dat[i].c_indicator[0]);

				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"EBA Contract ID Is :%ld:",st_eod_cntrct_qt.l_eba_cntrct_id);
					fn_userlog(c_ServiceName,"EBA Exchnage Code Is :%s:",st_eod_cntrct_qt.c_xchng_cd);
        	fn_userlog(c_ServiceName,"EBA	Product Type Is :%c:",st_eod_cntrct_qt.c_prd_typ);
        	fn_userlog(c_ServiceName,"EBA	Underlying Is :%s:",st_eod_cntrct_qt.c_undrlyng);
        	fn_userlog(c_ServiceName,"EBA	Expiry Date Is :%s:",st_eod_cntrct_qt.c_expry_dt);
        	fn_userlog(c_ServiceName,"EBA	Exercise Type Is :%c:",st_eod_cntrct_qt.c_exrc_typ);
        	fn_userlog(c_ServiceName,"EBA Option Type Is :%c:",st_eod_cntrct_qt.c_opt_typ);
        	fn_userlog(c_ServiceName,"EBA Strike Price Is :%ld:",st_eod_cntrct_qt.l_strike_prc);
        	fn_userlog(c_ServiceName,"EBA Ind / Stk Is :%c:",st_eod_cntrct_qt.c_ctgry_indstk);
        	fn_userlog(c_ServiceName,"EBA CA LVL Is :%ld:",st_eod_cntrct_qt.l_ca_lvl);
        	fn_userlog(c_ServiceName,"EBA Open Price Is :%ld:",st_eod_cntrct_qt.l_open_prc);
        	fn_userlog(c_ServiceName,"EBA Close Price Is :%ld:",st_eod_cntrct_qt.l_close_prc);
        	fn_userlog(c_ServiceName,"EBA High Price Is :%ld:",st_eod_cntrct_qt.l_high_prc);
        	fn_userlog(c_ServiceName,"EBA Low Price Is :%ld:",st_eod_cntrct_qt.l_low_prc);
        	fn_userlog(c_ServiceName,"EBA Prev. Closing Price Is :%ld:",st_eod_cntrct_qt.l_prev_close_prc);
        	fn_userlog(c_ServiceName,"EBA Total Qty Traded :%ld:",st_eod_cntrct_qt.l_tot_qty_trdd);
        	fn_userlog(c_ServiceName,"EBA Total Vol Traded :%ld:",st_eod_cntrct_qt.l_tot_qty_trdd);
        	fn_userlog(c_ServiceName,"EBA Current OI :%lf:",st_eod_cntrct_qt.d_crnt_oi);
        	fn_userlog(c_ServiceName,"EBA Change OI :%lf:",st_eod_cntrct_qt.d_chng_oi);
        	fn_userlog(c_ServiceName,"EBA Total Vol Traded : :%lf:",st_eod_cntrct_qt.d_tot_val_trdd);  /** Ver 2.0 **/
				}

				fn_cpy_ddr(st_eod_cntrct_qt.c_rout_crt);
				st_eod_cntrct_qt.c_rqst_typ = UPDATE_SHORT_QT_1 ;

				i_ch_val = fn_acall_svc ( c_ServiceName,
                            			c_errmsg,
                            			& st_eod_cntrct_qt,
                            			"vw_cntrct_qt",
                            			sizeof (st_eod_cntrct_qt),
                            			TPNOREPLY,
                           	 			"SFO_UPD_QT" ) ;

  			if(i_ch_val == SYSTEM_ERROR)
  			{
    			fn_errlog ( c_ServiceName, "S31135", LIBMSG, c_errmsg );
    			return -1;
  			}
				
			}
		}
	}
	
	return 0;
}


int fn_ticker_and_mkt_index( struct st_ticker_trade_data *ptr_st_ticker,
                             char *c_xchng_cd,
                             char *c_ServiceName,
                             char *c_errmsg)
{
	int i_tmp;
	int i_ch_val;

	long l_token_id;

	char c_rout_str[4];

	struct vw_contract st_cntrct;
	struct vw_cntrct_qt st_eod_cntrct_qt;
	nfo_cntrct st_nse_cntrct;

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"Inside function fn_ticker_and_mkt_index");
		fn_userlog(c_ServiceName,"Exchange code is :%s:",c_xchng_cd);
	}

	strcpy(c_rout_str,"000");

  if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
  {
   fn_gt_time();
   fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_ticker_and_mkt_index Before processing %d record at :%s:",ptr_st_ticker->si_number_of_records,c_time);
  }

	for( i_tmp = 0; i_tmp<ptr_st_ticker->si_number_of_records; i_tmp++ )
	{
		if ( strcmp ( c_xchng_cd , "NFO" ) == 0 )
		{
			l_token_id = ptr_st_ticker->st_tck_idx_info[i_tmp].l_token;;
			
  if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
  {
   fn_gt_time();
   fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_ticker_and_mkt_index Before fn_nse_to_eba_token  at :%s:",c_time);
  }

			i_ch_val = fn_nse_to_eba_token ( l_token_id,
                                     &st_cntrct,
																		 c_rout_str,
                                     c_ServiceName,
                                     c_errmsg );
      if ( i_ch_val == SYSTEM_ERROR )
      {
        fn_errlog ( c_ServiceName, "S31140", LIBMSG, c_errmsg );
        return -1;
      }
			else if ( i_ch_val != 0 )
      {
        return 0;
      }

		}
		else if ( strcmp ( c_xchng_cd , "NFO" ) == 0 )
		{
			/*  BSE code to be added here   */
    	fn_errlog ( c_ServiceName, "S31145","BSE code not handled", c_errmsg );
    	return 0;
		}

    if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
    {
     fn_gt_time();
     fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_ticker_and_mkt_index Before fn_nse_to_eba_token  at :%s:",c_time);
    }

		st_eod_cntrct_qt.l_eba_cntrct_id = st_cntrct.l_eba_cntrct_id ;
		strcpy( st_eod_cntrct_qt.c_xchng_cd , st_cntrct.c_xchng_cd ) ;
		st_eod_cntrct_qt.c_prd_typ = st_cntrct.c_prd_typ ;
		strcpy( st_eod_cntrct_qt.c_undrlyng , st_cntrct.c_undrlyng ) ;
		strcpy( st_eod_cntrct_qt.c_expry_dt , st_cntrct.c_expry_dt ) ;
		st_eod_cntrct_qt.c_exrc_typ = st_cntrct.c_exrc_typ ;
		st_eod_cntrct_qt.c_opt_typ = st_cntrct.c_opt_typ ;
		st_eod_cntrct_qt.l_strike_prc = st_cntrct.l_strike_prc ;
		st_eod_cntrct_qt.c_ctgry_indstk = st_cntrct.c_ctgry_indstk ;
		st_eod_cntrct_qt.l_ca_lvl = st_cntrct.l_ca_lvl ;
		st_eod_cntrct_qt.d_crnt_oi =  ptr_st_ticker->st_tck_idx_info[i_tmp].li_open_interest;
		st_eod_cntrct_qt.d_oi_high = ptr_st_ticker->st_tck_idx_info[i_tmp].li_high_oi;
		st_eod_cntrct_qt.d_oi_low = ptr_st_ticker->st_tck_idx_info[i_tmp].li_low_oi;
		fn_cpy_ddr(st_eod_cntrct_qt.c_rout_crt);
		st_eod_cntrct_qt.c_rqst_typ = UPDATE_OI;

		
if(DEBUG_MSG_LVL_3)
{
		fn_userlog(c_ServiceName,"Before Call To SFO_UPD_QT For fn_ticker_and_mkt_index");
		fn_userlog(c_ServiceName,"Contract ID Is :%ld:",st_eod_cntrct_qt.l_eba_cntrct_id);
		fn_userlog(c_ServiceName,"Exchnage Code Is ;%s:",st_eod_cntrct_qt.c_xchng_cd);
		fn_userlog(c_ServiceName,"Product Type Is :%c:",st_eod_cntrct_qt.c_prd_typ);
		fn_userlog(c_ServiceName,"Underlying Is :%s:",st_eod_cntrct_qt.c_undrlyng);
		fn_userlog(c_ServiceName,"Expiry Date Is :%s:",st_eod_cntrct_qt.c_expry_dt);
		fn_userlog(c_ServiceName,"Exercise Type Is :%c:",st_eod_cntrct_qt.c_exrc_typ);
		fn_userlog(c_ServiceName,"Option Type Is :%c:",st_eod_cntrct_qt.c_opt_typ);
		fn_userlog(c_ServiceName,"Strike Price Is :%ld:",st_eod_cntrct_qt.l_strike_prc);
		fn_userlog(c_ServiceName,"IND/STK Is :%c:",st_eod_cntrct_qt.c_ctgry_indstk);
		fn_userlog(c_ServiceName,"CA LVL Is :%ld:",st_eod_cntrct_qt.l_ca_lvl);
		fn_userlog(c_ServiceName,"Current Open Interest :%lf:",st_eod_cntrct_qt.d_crnt_oi);
		fn_userlog(c_ServiceName,"High Open Interest :%lf:",st_eod_cntrct_qt.d_oi_high);
		fn_userlog(c_ServiceName,"Low Open Interest :%lf:",st_eod_cntrct_qt.d_oi_low);
}

	  if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
    {
     fn_gt_time();
     fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_ticker_and_mkt_index Before SFO_UPD_QT at :%s:",c_time);
    }	
  	i_ch_val = fn_acall_svc ( c_ServiceName,
    	                        c_errmsg,
      	                      & st_eod_cntrct_qt,
        	                    "vw_cntrct_qt",
          	                  sizeof (st_eod_cntrct_qt),
            	                TPNOREPLY,
              	              "SFO_UPD_QT" ) ;
  	if(i_ch_val == SYSTEM_ERROR)
  	{
    	fn_errlog ( c_ServiceName, "S31150", LIBMSG, c_errmsg );
    	return -1;
  	}
    if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
    {
     fn_gt_time();
     fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_ticker_and_mkt_index After SFO_UPD_QT at :%s:",c_time);
    }

	}

  if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
  {
   fn_gt_time();
   fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_ticker_and_mkt_index After processing %d record at :%s:",ptr_st_ticker->si_number_of_records,c_time);
  }
	 return 0;

}


int fn_eq_oi_qt ( struct st_oi_data st_eq_oi[],
                  char c_mkt_typ [ 2 ],
                  short int si_tot_rec,
                  char *c_xchng_cd,
                  char *c_ServiceName,
                  char *c_errmsg )

{
	char c_str_tkn [ 20 ];
  char c_stck_cd [ 8 ];
  int i_ch_val;
	int i_cnt;
  double d_oi;

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"Inside Function fn_eq_oi_qt");
		fn_userlog(c_ServiceName,"Exchange code is :%s:",c_xchng_cd);
		fn_userlog(c_ServiceName,"Total Records Is :%d:",si_tot_rec);
		fn_userlog(c_ServiceName,"c_mkt_typ Is :%c:",c_mkt_typ[0]);
	}

	if ( c_mkt_typ[0] != '1' /*NORMAL_MARKET*/ )
  {
    return ( 0 );
  }

  if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
  {
   fn_gt_time();
   fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_eq_oi_qt Before processing %d record at :%s:",si_tot_rec,c_time);
  }

	for ( i_cnt=0; i_cnt<si_tot_rec; i_cnt++ )
	{
		sprintf( c_str_tkn, "%ld",st_eq_oi[i_cnt].l_token_no);
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Token no Is :%s:",c_str_tkn);
		fn_userlog(c_ServiceName,"i_cnt is :%d:",i_cnt);
	}
  
  if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
  {
   fn_gt_time();
   fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_eq_oi_qt Before fn_get_eba_cd at :%s:",c_time);
  }

		if ( strcmp ( c_xchng_cd, "NFO" ) == 0 )
  	{
    	i_ch_val = fn_get_eba_cd ( c_str_tkn,
      	                         c_stck_cd,
        	                       7,
          	                     c_ServiceName,
            	                   c_errmsg );
    	if(i_ch_val == -2)
    	{
      	fn_errlog ( c_ServiceName, "S31155", LIBMSG, c_errmsg );
      	return -1;
    	}
    	else if ( i_ch_val != 0 )
    	{
      	return 0;
    	}
  	}
  	else
  	{
    	/*  BSE code to be added here   */
    	fn_errlog ( c_ServiceName, "S31160","BSE code not handled", c_errmsg );
    	return 0;
  	}

    if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
    {
     fn_gt_time();
     fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_eq_oi_qt After fn_get_eba_cd at :%s:",c_time);
    }
	
		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"Exchange Token No. Is :%ld:",st_eq_oi[i_cnt].l_token_no);
			fn_userlog(c_ServiceName,"EBA Token No. Is :%s:",c_str_tkn);
			fn_userlog(c_ServiceName,"Exchange Code Is :%s:",c_stck_cd);
			fn_userlog(c_ServiceName,"Exchange Current Open Interest Is :%ld:",st_eq_oi[i_cnt].li_current_oi);
		}
		
		d_oi = st_eq_oi[i_cnt].li_current_oi / 100.00;

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"EBA Current Open Interest Is :%lf:",d_oi);
		}
 
    if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
    {
     fn_gt_time();
     fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_eq_oi_qt Before SFO_UPD_EQOI at :%s:",c_time);
    }

		i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                c_errmsg,
                                "SFO_UPD_EQOI",
                                TPNOREPLY,
                                3,
                                FFO_XCHNG_CD,c_xchng_cd, 
                                FFO_UNDRLYNG, c_stck_cd,
                                FFO_CRNT_OI, (char *)&d_oi );

		if ( i_ch_val == SYSTEM_ERROR )
 		{
    	fn_errlog ( c_ServiceName, "S31165", LIBMSG, c_errmsg );
    	return -1;
  	}
    if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
    {
     fn_gt_time();
     fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_eq_oi_qt After SFO_UPD_EQOI at :%s:",c_time);
    }

	}

  if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
  {
   fn_gt_time();
   fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_eq_oi_qt After processing %d record at :%s:",si_tot_rec,c_time);
  }

	return ( 0 );
}

int fn_nse_to_eba_token ( long int li_tkn,
                        struct vw_contract *ptr_cntrct,
												char *c_rout_str,
                        char *c_ServiceName,
                        char *c_err_msg ) /* renamed fn_nse_to_eba_tkn to fn_nse_to_eba_token in ver TOL */ 
{
  struct vw_nse_cntrct st_nse_dtls;
  int i_ch_val;
  int i_trnsctn;

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName,"Inside Function fn_nse_to_eba_token");
	}

  st_nse_dtls.l_token_id =  li_tkn;

	if(DEBUG_MSG_LVL_0)
	{
  	fn_userlog(c_ServiceName,"Token ID Is :%ld:",st_nse_dtls.l_token_id);
	}
  
  /*** Ver 1.7 *******
  fn_cpy_ddr(c_rout_str);
   
  st_nse_dtls.c_rqst_typ = NSE_TOKEN_TO_CONTRACT;
  i_ch_val = fn_call_svc ( c_ServiceName,
                           c_err_msg,
                           &st_nse_dtls,
                           ptr_cntrct,
                           "vw_nse_cntrct",
                           "vw_contract",
                           sizeof (st_nse_dtls),
                           sizeof (struct vw_contract),
                           0,
                           "SFO_CNT_FOR_ENT" );
  if ( i_ch_val != SUCC_BFR )
  {
    fn_errlog ( c_ServiceName, "L31005", LIBMSG, c_err_msg );
    fn_userlog ( c_ServiceName, "Token id |%ld|", li_tkn );
    return i_ch_val;
  }
  ************* Ver 1.7 ****/
 

  /*** Ver 1.7 Starts Here ****/
  if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
      {
       fn_gt_time();
       fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_nse_to_eba_token Before n at :%s:",c_time);
      }

  /*** Commented in Ver 2.4 *** 
  EXEC SQL
          SELECT  fcm_xchng_cd,
                  fcm_prdct_typ,
                  fcm_undrlyng,
                  to_char(fcm_expry_dt,'DD-Mon-YYYY'),
                  fcm_exer_typ,
                  fcm_opt_typ,
                  fcm_strk_prc,
                  fcm_ca_lvl,
                  fcm_indstk
          INTO    :ptr_cntrct->c_xchng_cd,
                  :ptr_cntrct->c_prd_typ,
                  :ptr_cntrct->c_undrlyng,
                  :ptr_cntrct->c_expry_dt,
                  :ptr_cntrct->c_exrc_typ,
                  :ptr_cntrct->c_opt_typ,
                  :ptr_cntrct->l_strike_prc,
                  :ptr_cntrct->l_ca_lvl,
                  :ptr_cntrct->c_ctgry_indstk
          FROM    fcm_fo_cntrct_mstr
          WHERE   fcm_token_no  = :st_nse_dtls.l_token_id;
  ******/
 
  /*** Ver 2.4 Starts ***/

    EXEC SQL
          SELECT  ftq_xchng_cd,
                  ftq_prdct_typ,
                  ftq_undrlyng,
                  to_char(ftq_expry_dt,'DD-Mon-YYYY'),
                  ftq_exer_typ,
                  ftq_opt_typ,
                  ftq_strk_prc,
                  ftq_ca_lvl,
                  ftq_indstk
          INTO    :ptr_cntrct->c_xchng_cd,
                  :ptr_cntrct->c_prd_typ,
                  :ptr_cntrct->c_undrlyng,
                  :ptr_cntrct->c_expry_dt,
                  :ptr_cntrct->c_exrc_typ,
                  :ptr_cntrct->c_opt_typ,
                  :ptr_cntrct->l_strike_prc,
                  :ptr_cntrct->l_ca_lvl,
                  :ptr_cntrct->c_ctgry_indstk
          FROM    ftq_fo_trd_qt     
          WHERE   ftq_token_no  = :st_nse_dtls.l_token_id;

  /*** Ver 2.4 Ends   ***/

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31010", SQLMSG, c_err_msg );
    return -1;
  }

  if(DEBUG_MSG_LVL_2)   /** Ver 1.8 **/
      {
       fn_gt_time();
       fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_nse_to_eba_token After at :%s:",c_time);
      }

  rtrim(ptr_cntrct->c_xchng_cd);
  rtrim(ptr_cntrct->c_undrlyng);
  rtrim(ptr_cntrct->c_expry_dt);

  /*** Ver 1.7 Ends Here ***/ 
  return 0;
}

/******************************************************************************/
/*  To get a eba index code representation for a index name in NSE format     */
/*  INPUT PARAMETERS                                                          */
/*      c_indx_nm     - Index Name in NSE format                              */
/*      c_indx_cd     - Index code to be returned in EBA format               */
/*      c_ServiceName - Name of service currently running                     */
/*      c_errmsg     - Error message to be returned in case of error          */
/******************************************************************************/
/*  To get a eba index code representation for a index name in NSE format     */
/*  INPUT PARAMETERS                                                          */
/*      c_indx_nm     - Index Name in NSE format                              */
/*      c_indx_cd     - Index code to be returned in EBA format               */
/*      c_ServiceName - Name of service currently running                     */
/*      c_errmsg     - Error message to be returned in case of error          */
/*  OUTPUT PARAMETERS                                                         */
/*                0 on success                                                */
/*               -1 on failure                                                */
/******************************************************************************/
int fn_get_eba_cd ( char *c_indx_nm,
                    char *c_indx_cd,
                    long int li_map_cd,
                    char *c_ServiceName,
                    char *c_errmsg )
{

	/**** Declare input and output fml buffer ****/
  FBFR32    *ptr_fml_tibuf;
  FBFR32    *ptr_fml_tobuf;
  char c_rout[4];
  long int  li_len_tobuf;

  int i_ch_val;

	fn_userlog(c_ServiceName,"Inside Function fn_get_eba_cd");
	fn_userlog(c_ServiceName,"li_map_cd Is :%ld:",li_map_cd);
	fn_userlog(c_ServiceName,"c_indx_nm	Is :%s:",c_indx_nm);

  /**** Allocat input and output buffer ****/
  ptr_fml_tibuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
  if (ptr_fml_tibuf == NULL)
  {
    fn_errlog( c_ServiceName, "S31170", TPMSG, c_errmsg );
    return -1;
  }

  ptr_fml_tobuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
  if (ptr_fml_tobuf == NULL)
  {
    fn_errlog( c_ServiceName, "S31175", TPMSG, c_errmsg );
    tpfree ( ( char * ) ptr_fml_tibuf );
    return -1;
  }

  /**** Pack the input buffer with data ****/
  i_ch_val = Fadd32(ptr_fml_tibuf, FML_SEM_ENTTY, (char *)&li_map_cd, 0);
  if (i_ch_val == -1)
  {
    fn_errlog( c_ServiceName, "S31180", FMLMSG, c_errmsg );
    tpfree ( ( char * ) ptr_fml_tibuf );
    tpfree ( ( char * ) ptr_fml_tobuf );
    return -1;
  }

  i_ch_val = Fadd32(ptr_fml_tibuf, FML_SEM_MAP_VL, (char *)c_indx_nm, 0);
  if (i_ch_val == -1)
  {
    fn_errlog( c_ServiceName, "S31185", FMLMSG, c_errmsg );
    tpfree ( ( char * ) ptr_fml_tibuf );
    tpfree ( ( char * ) ptr_fml_tobuf );
    return -1;
  }

  fn_cpy_ddr(c_rout);
  i_ch_val = Fadd32(ptr_fml_tibuf, FFO_ROUT_CRT, (char *)c_rout, 0);

	if (i_ch_val == -1)
  {
    fn_errlog( c_ServiceName, "S31190", FMLMSG, c_errmsg );
    tpfree ( ( char * ) ptr_fml_tibuf );
    tpfree ( ( char * ) ptr_fml_tobuf );
    return -1;
  }

  /**** Call the service ****/
  i_ch_val = tpcall("SVC_ENTTY_MAP", (char *)ptr_fml_tibuf, 0,
                     (char **)&ptr_fml_tobuf, &li_len_tobuf, 0);
  if (i_ch_val == -1)
  {
    if ( tperrno != TPESVCFAIL )
    {
      fn_errlog( c_ServiceName, "S31195", TPMSG, c_errmsg );
      i_ch_val = -2;
    }
    else
    {
      Fget32(ptr_fml_tobuf, FFO_ERR_MSG, 0, (char *)c_errmsg, 0);
      fn_userlog ( c_ServiceName, c_errmsg );
      fn_userlog ( c_ServiceName, "Index code |%s|", c_indx_nm );
    }
    tpfree ( ( char * ) ptr_fml_tibuf );
    tpfree ( ( char * ) ptr_fml_tobuf );
    return i_ch_val;
  }

  i_ch_val = Fget32(ptr_fml_tobuf, FML_SEM_STCK_CD, 0, (char *)c_indx_cd, 0);
  if (i_ch_val == -1)
  {
    fn_errlog( c_ServiceName, "S31200", FMLMSG, c_errmsg );
    tpfree ( ( char * ) ptr_fml_tibuf );
    tpfree ( ( char * ) ptr_fml_tobuf );
    return -1;
  }

	fn_userlog(c_ServiceName,"SEM Stock Code Is :%s:",c_indx_cd);

  /**** Free the input and output buffer ****/
  tpfree ( ( char * ) ptr_fml_tibuf );
  tpfree ( ( char * ) ptr_fml_tobuf );

  return 0;
 }

/************* Ver 1.1 Starts ******************/
int  fn_upd_global_indices( struct st_indexdetails *st_index_details,
                                    char *c_xchng_cd,
                                    char *c_pipe_id,
                                    char *c_ServiceName,
                                    char *c_errmsg)
{

  int  i_trnsctn;
  double d_ltq_ltp ;
  double d_ltq_open;
  double d_ltq_high;
  double d_ltq_low ;
  double d_ltq_close;
  double d_ltq_prevclose;

  char c_sem_stck_cd[10];
  char c_stck_name[21];
  char c_exg_stck_name[21];

  strcpy(c_exg_stck_name,"Dow Jones Ind Avg");
  rtrim(c_exg_stck_name);
 
  if(DEBUG_MSG_LVL_3)
  {
   fn_userlog(c_ServiceName, "st_index_details.token:%ld",st_index_details->li_token);
   fn_userlog(c_ServiceName, "st_index_details.name:%s:",st_index_details->c_name);
   fn_userlog(c_ServiceName, "st_index_details.Open:%ld:",st_index_details->li_Open);
   fn_userlog(c_ServiceName, "st_index_details.High:%ld:",st_index_details->li_High);
   fn_userlog(c_ServiceName, "st_index_details.Low:%ld:",st_index_details->li_Low);
   fn_userlog(c_ServiceName, "st_index_details.Last:%ld:",st_index_details->li_Last);
   fn_userlog(c_ServiceName, "st_index_details.Close:%ld:",st_index_details->li_Close);
   fn_userlog(c_ServiceName, "st_index_details.PrevClose:%ld:",st_index_details->li_PrevClose);
   fn_userlog(c_ServiceName, "st_index_details.LifeHigh:%ld:",st_index_details->li_LifeHigh);
   fn_userlog(c_ServiceName, "st_index_details.LifeLow:%ld:",st_index_details->li_LifeLow);
  }

  d_ltq_ltp =  st_index_details->li_Last ;
  d_ltq_open=  st_index_details->li_Open ;
  d_ltq_high =  st_index_details->li_High;
  d_ltq_low  =  st_index_details->li_Low ;
  d_ltq_close =  st_index_details->li_Close;
  d_ltq_prevclose= st_index_details->li_PrevClose;
  
  d_ltq_ltp   = d_ltq_ltp /100;
  d_ltq_open  = d_ltq_open / 100;
  d_ltq_high  = d_ltq_high / 100;
  d_ltq_low   = d_ltq_low /100;
  d_ltq_close = d_ltq_close / 100;
  d_ltq_prevclose = d_ltq_prevclose /100;

  strcpy(c_stck_name,st_index_details->c_name);
  rtrim(c_stck_name);
  fn_userlog(c_ServiceName,"c_stck_name:%s:",c_stck_name);
  if( strcmp(c_stck_name,c_exg_stck_name)== 0)
  {
   MEMSET(c_stck_name);
   strcpy(c_stck_name,"DJIA");
   rtrim(c_stck_name);
  }
  /*** Ver 1.2 starts,stock name of FTSE in broadcast is different than SEM Mapping value ***/
  else if( strcmp(c_stck_name,"FTSE 100")== 0 ) 
  {
   MEMSET(c_stck_name);
   strcpy(c_stck_name,"FTSE100");
   rtrim(c_stck_name);
  }
  /*** Ver 1.2 Ends  ***/
 
  EXEC SQL
  SELECT sem_stck_cd
  INTO   :c_sem_stck_cd
  FROM sem_stck_map
  WHERE SEM_MAP_VL=:c_stck_name
  AND   SEM_ENTTY =1;

  if (SQLCODE !=0 && SQLCODE != NO_DATA_FOUND )			/***	Ver 1.2	NO_DATA_FOUND Case Handeled	***/
  {
   fn_errlog ( c_ServiceName, "S31205", SQLMSG, c_errmsg );
   return -1;
  }

	if ( SQLCODE == NO_DATA_FOUND )			/***	Ver 1.2	***/
	{
		return 0;
	}
  
  i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );
  if ( i_trnsctn == -1)
  {
   fn_errlog(c_ServiceName,"S31210", TPMSG, c_errmsg);
   return -1;
  }

  EXEC SQL
  UPDATE LTQ_TRD_QT
  SET    LTQ_RT = :d_ltq_ltp,
            LTQ_OPN_PRC = :d_ltq_open,
            LTQ_HGH_PRC = :d_ltq_high,
            LTQ_LOW_PRC = :d_ltq_low,
            LTQ_CLS_PRC = :d_ltq_close,
            LTQ_PREV_CLS_PRC =:d_ltq_prevclose,
            LTQ_DT = SYSDATE
  WHERE LTQ_STCK_CD = :c_sem_stck_cd
  AND LTQ_XCHNG_CD ='NSE';
  if (SQLCODE !=0 )
  {
   fn_errlog ( c_ServiceName, "S31215", SQLMSG, c_errmsg );
   fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
   return -1;
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 )
  {
   fn_userlog(c_ServiceName,"COMMIT FAILED");
   fn_errlog(c_ServiceName, "S31220", LIBMSG, c_errmsg);
   return -1;
  }
  return (0);
}
/********* Ver 1.1 Ends *******************/

/************* Ver 2.1 Starts ******************/

int  fn_upd_india_vix( struct st_ind_vix_dtls *ptr_st_ind_vix_dtls,
                       char *c_xchng_cd,
                       char *c_pipe_id,
                       char *c_ServiceName,
                       char *c_errmsg)
{

  int  i_trnsctn    = 0;
  int  i_record     = 0;
	long int li_prcnt_chng = 0;
  double d_ltq_ltp  = 0;
  double d_ltq_open = 0;
  double d_ltq_high = 0;
  double d_ltq_low  = 0;;
  double d_ltq_close= 0;;
  double d_ltq_prevclose = 0;
  double d_mrkt_capital = 0;
  double d_yearly_high = 0;
  double d_yearly_low = 0;

	char c_indicator = '\0';
  char c_sem_stck_cd[10];
  char c_stck_name[21];

	for ( i_record = 0; i_record < ptr_st_ind_vix_dtls->i_num_of_rec ; i_record++)
	{

		d_ltq_ltp  = 0;
		d_ltq_open = 0;
		d_ltq_high = 0;
		d_ltq_low  = 0;;
		d_ltq_close= 0;;
		d_ltq_prevclose = 0;
		d_mrkt_capital = 0;
		d_yearly_high = 0;
		d_yearly_low = 0;
		li_prcnt_chng = 0;
		c_indicator = '\0';

		MEMSET (c_sem_stck_cd);
		MEMSET (c_stck_name);

  	if(DEBUG_MSG_LVL_3)
  	{
   		fn_userlog(c_ServiceName,"Number of records      |%d|",ptr_st_ind_vix_dtls->i_num_of_rec);
   		fn_userlog(c_ServiceName,"count  of records      |%d|",i_record);
   		fn_userlog(c_ServiceName,"Index name             :%s:",ptr_st_ind_vix_dtls->st_indvix[i_record].c_index_name);
   		fn_userlog(c_ServiceName,"Index Value            :%ld:",ptr_st_ind_vix_dtls->st_indvix[i_record].li_index_value);
   		fn_userlog(c_ServiceName,"Higher Index Value     :%ld:",ptr_st_ind_vix_dtls->st_indvix[i_record].li_high_index_value);
   		fn_userlog(c_ServiceName,"Lower Index Value      :%ld:",ptr_st_ind_vix_dtls->st_indvix[i_record].li_low_index_value);
   		fn_userlog(c_ServiceName,"opening Index Value    :%ld:",ptr_st_ind_vix_dtls->st_indvix[i_record].li_opening_index);
   		fn_userlog(c_ServiceName,"closing Index Value    :%ld:",ptr_st_ind_vix_dtls->st_indvix[i_record].li_closing_index);
   		fn_userlog(c_ServiceName,"Index perc change      :%ld:",ptr_st_ind_vix_dtls->st_indvix[i_record].li_percent_change);
   		fn_userlog(c_ServiceName,"Index yealy high       :%ld:",ptr_st_ind_vix_dtls->st_indvix[i_record].li_yearly_high);
   		fn_userlog(c_ServiceName,"Index yearly low       :%ld:",ptr_st_ind_vix_dtls->st_indvix[i_record].li_yearly_low);
   		fn_userlog(c_ServiceName,"Index upmoves          :%ld:",ptr_st_ind_vix_dtls->st_indvix[i_record].li_no_of_upmoves);
   		fn_userlog(c_ServiceName,"Index down moves       :%ld:",ptr_st_ind_vix_dtls->st_indvix[i_record].li_no_of_downmoves);
   		fn_userlog(c_ServiceName,"Market capitalizatn :%lf:",ptr_st_ind_vix_dtls->st_indvix[i_record].d_market_capitalisation);
   		fn_userlog(c_ServiceName,"net  Change indicator :%c:",ptr_st_ind_vix_dtls->st_indvix[i_record].c_net_change_indicator);
   		fn_userlog(c_ServiceName,"filler                 :%c:",ptr_st_ind_vix_dtls->st_indvix[i_record].c_filler);
  	}

		c_indicator   = ptr_st_ind_vix_dtls->st_indvix[i_record].c_net_change_indicator;
  	d_ltq_ltp     =  (double)ptr_st_ind_vix_dtls->st_indvix[i_record].li_index_value / 100;
  	d_ltq_open    =  (double)ptr_st_ind_vix_dtls->st_indvix[i_record].li_opening_index / 100;
  	d_ltq_high    =  (double)ptr_st_ind_vix_dtls->st_indvix[i_record].li_high_index_value / 100;
  	d_ltq_low     =  (double)ptr_st_ind_vix_dtls->st_indvix[i_record].li_low_index_value / 100;
  	d_ltq_close   =  (double)ptr_st_ind_vix_dtls->st_indvix[i_record].li_closing_index / 100;
  	d_ltq_prevclose= (double)ptr_st_ind_vix_dtls->st_indvix[i_record].li_closing_index / 100;
  	d_yearly_high =  (double)ptr_st_ind_vix_dtls->st_indvix[i_record].li_yearly_high / 100;
  	d_yearly_low  =  (double)ptr_st_ind_vix_dtls->st_indvix[i_record].li_yearly_low / 100;
  	d_mrkt_capital = ptr_st_ind_vix_dtls->st_indvix[i_record].d_market_capitalisation ;
  	li_prcnt_chng  = ptr_st_ind_vix_dtls->st_indvix[i_record].li_percent_change ;

  	strcpy(c_stck_name,ptr_st_ind_vix_dtls->st_indvix[i_record].c_index_name);

  	rtrim(c_stck_name);

		if(DEBUG_MSG_LVL_3)
  	{
    	fn_userlog(c_ServiceName,"Stock name before    :%s:",c_stck_name);
    	fn_userlog(c_ServiceName,"LTP is 							:%lf:",d_ltq_ltp);
    	fn_userlog(c_ServiceName,"Open price 					:%lf:",d_ltq_open);
    	fn_userlog(c_ServiceName,"High value 					:%lf:",d_ltq_high);
    	fn_userlog(c_ServiceName,"Low value 					:%lf:",d_ltq_low);
    	fn_userlog(c_ServiceName,"close price 				:%lf:",d_ltq_close);
    	fn_userlog(c_ServiceName,"close price 				:%lf:",d_yearly_high);
    	fn_userlog(c_ServiceName,"close price 				:%lf:",d_yearly_low);
  	}

		if (strcasecmp(c_stck_name,"India VIX") == 0)
		{
			MEMSET(c_stck_name);
			strcpy(c_stck_name,"INDIAVIX");	
		}
	
		rtrim(c_stck_name);

  	if(DEBUG_MSG_LVL_3)
  	{
    	fn_userlog(c_ServiceName,"c_stck_name   :%s:",c_stck_name);
  	}
	
  	EXEC SQL
  	SELECT  SEM_STCK_CD
  	INTO    :c_sem_stck_cd
  	FROM    SEM_STCK_MAP
  	WHERE   SEM_MAP_VL  = :c_stck_name
  	AND     SEM_ENTTY   = 1;
	
  	if (SQLCODE !=0 && SQLCODE != NO_DATA_FOUND )
  	{
   		fn_errlog ( c_ServiceName, "S31205", SQLMSG, c_errmsg );
   		return -1;
  	}
	
  	if ( SQLCODE == NO_DATA_FOUND )
  	{
    	return 0;
  	}

		rtrim(c_sem_stck_cd);

  	if(DEBUG_MSG_LVL_3)
  	{
    	fn_userlog(c_ServiceName,"sem stock name    :%s:",c_sem_stck_cd);
  	}
	
  	i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );

  	if ( i_trnsctn == -1)
  	{
   		fn_errlog(c_ServiceName,"S31210", TPMSG, c_errmsg);
   		return -1;
  	}
	
  	EXEC SQL
  	UPDATE LTQ_TRD_QT
  	SET    LTQ_RT 					= :d_ltq_ltp,
         	LTQ_CHNG_INDCTR 	= :c_indicator,
         	LTQ_PRCNTG_CHNG_PCLS = :li_prcnt_chng,
         	LTQ_OPN_PRC 			= :d_ltq_open,
         	LTQ_HGH_PRC 			= :d_ltq_high,
         	LTQ_LOW_PRC 			= :d_ltq_low,
         	LTQ_CLS_PRC 			= :d_ltq_close,
         	LTQ_PREV_CLS_PRC = :d_ltq_prevclose,
         	LTQ_52_WK_HGH 		= :d_yearly_high,
         	LTQ_52_WK_LW 		= :d_yearly_low,
         	LTQ_DT 					= SYSDATE
  	WHERE  LTQ_STCK_CD 			= :c_sem_stck_cd
  	AND    LTQ_XCHNG_CD 		= 'NSE';
	
  	if (SQLCODE !=0 )
  	{
   		fn_errlog ( c_ServiceName, "S31215", SQLMSG, c_errmsg );
   		fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
   		return -1;
  	}
	
		if ( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 )
  	{
   		fn_userlog(c_ServiceName,"COMMIT FAILED");
   		fn_errlog(c_ServiceName, "S31220", LIBMSG, c_errmsg);
   		return -1;
  	}
	}

  return (0);
}
/********* Ver 2.1 Ends *******************/

/*** Ver 2.2. starts ***/
int fn_trd_exec_rng_upd ( struct st_bcast_trd_exec_rng *ptr_st_brd_trd_exec_rng,
													char *c_xchng_cd,
													char *c_ServiceName,
													char *c_errmsg )
{
	int i_ch_val;
  int i_tmp;
	long int li_token_id;
	int i_token_cnt = 0;

	char c_rout_str[4];

  struct vw_contract st_cntrct;
  struct vw_cntrct_qt st_cntrct_short_qt;
  struct vw_cntrctlong_qt st_cntrct_long_qt;

  nfo_cntrct st_nse_cntrct;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Inside Function fn_trd_exec_rng_upd");
		fn_userlog(c_ServiceName,"Exchange code is :%s:",c_xchng_cd);
	}

  if(DEBUG_MSG_LVL_2) 
  {
   fn_gt_time();
   fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_trd_exec_rng_upd Before fn_nse_to_eba_token at :%s:",c_time);
  }

	strcpy(c_rout_str,"000");

	i_token_cnt = ptr_st_brd_trd_exec_rng->st_trd_exec_rng_dat.li_msg_count;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Token Count Is :%d:",i_token_cnt);
	}

	for (i_tmp = 0 ; i_tmp < i_token_cnt ; i_tmp++ )
	{
		if ( strcmp ( c_xchng_cd, "NFO") == 0 )
		{
			li_token_id = ptr_st_brd_trd_exec_rng->st_trd_exec_rng_dat.st_trd_exec_rng_dtl[i_tmp].li_token_num;

			if(DEBUG_MSG_LVL_2)
			{
				fn_userlog(c_ServiceName,"Token ID Is :%ld:",li_token_id);
			}

			i_ch_val = fn_nse_to_eba_token ( li_token_id,
																		 &st_cntrct,
																		 c_rout_str,
																		 c_ServiceName,
																		 c_errmsg );

			if ( i_ch_val == SYSTEM_ERROR )
			{
				fn_errlog ( c_ServiceName, "S31020", LIBMSG, c_errmsg );
				return -1;
			}
			else if ( i_ch_val != 0 )
			{
				return 0;
			}
		}
		else
		{
			/*  BSE code to be added here   */
			fn_errlog ( c_ServiceName, "S31025","BSE code not handled", c_errmsg );
			return 0;
		}

		if(DEBUG_MSG_LVL_2)
		{
		 fn_gt_time();
		 fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_trd_exec_rng_upd after fn_nse_to_eba_token at :%s:",c_time);
		}

		st_cntrct_short_qt.l_eba_cntrct_id = st_cntrct.l_eba_cntrct_id ;
		strcpy( st_cntrct_short_qt.c_xchng_cd , st_cntrct.c_xchng_cd ) ;
		st_cntrct_short_qt.c_prd_typ = st_cntrct.c_prd_typ ;
		strcpy( st_cntrct_short_qt.c_undrlyng , st_cntrct.c_undrlyng ) ;
		strcpy( st_cntrct_short_qt.c_expry_dt , st_cntrct.c_expry_dt ) ;
		st_cntrct_short_qt.c_exrc_typ = st_cntrct.c_exrc_typ ;
		st_cntrct_short_qt.c_opt_typ = st_cntrct.c_opt_typ ;
		st_cntrct_short_qt.l_strike_prc = st_cntrct.l_strike_prc ;
		st_cntrct_short_qt.c_ctgry_indstk = st_cntrct.c_ctgry_indstk ;
		st_cntrct_short_qt.l_ca_lvl = st_cntrct.l_ca_lvl ;


		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"EBA Contract ID Is :%ld:",st_cntrct_short_qt.l_eba_cntrct_id);
			fn_userlog(c_ServiceName,"Exchnage Code Is :%s:",st_cntrct_short_qt.c_xchng_cd);
			fn_userlog(c_ServiceName,"Product Type Is :%c:",st_cntrct_short_qt.c_prd_typ);
			fn_userlog(c_ServiceName,"Underlying Is :%s:",st_cntrct_short_qt.c_undrlyng);
			fn_userlog(c_ServiceName,"Expiry Date :%s:",st_cntrct_short_qt.c_expry_dt);
			fn_userlog(c_ServiceName,"Exercise Type Is :%c:",st_cntrct_short_qt.c_exrc_typ);
			fn_userlog(c_ServiceName,"Option Type Is :%c:",st_cntrct_short_qt.c_opt_typ);
			fn_userlog(c_ServiceName,"Strike Price Is :%ld:",st_cntrct_short_qt.l_strike_prc);
			fn_userlog(c_ServiceName,"IND/STK Is :%c:",st_cntrct_short_qt.c_ctgry_indstk);
			fn_userlog(c_ServiceName,"CA LVL Is :%ld:",st_cntrct_short_qt.l_ca_lvl);
		}

		st_cntrct_short_qt.l_high_prc = ptr_st_brd_trd_exec_rng->st_trd_exec_rng_dat.st_trd_exec_rng_dtl[i_tmp].li_high_exec_band;
		st_cntrct_short_qt.l_low_prc = ptr_st_brd_trd_exec_rng->st_trd_exec_rng_dat.st_trd_exec_rng_dtl[i_tmp].li_low_exec_band;


		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Exchange Trade Execution High Range Is :%ld:", ptr_st_brd_trd_exec_rng->st_trd_exec_rng_dat.st_trd_exec_rng_dtl[i_tmp].li_high_exec_band);
			fn_userlog(c_ServiceName,"EBA Trade Execution High Range Is :%ld:",st_cntrct_short_qt.l_high_prc);
			fn_userlog(c_ServiceName,"Exchange Trade Execution Low Range Is :%ld:", ptr_st_brd_trd_exec_rng->st_trd_exec_rng_dat.st_trd_exec_rng_dtl[i_tmp].li_low_exec_band);
			fn_userlog(c_ServiceName,"EBA Trade Execution Low Range Is :%ld:",st_cntrct_short_qt.l_low_prc);
		}

		fn_cpy_ddr(st_cntrct_short_qt.c_rout_crt);
		
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Before Call To SFO_UPD_QT With Request Type UPDATE_TRD_EXEC_RNG");
		}

		if(DEBUG_MSG_LVL_2)  
		{
		 fn_gt_time();
		 fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_trd_exec_rng_upd Before UPDATE_TRD_EXEC_RNG at :%s:",c_time);
		}

		st_cntrct_short_qt.c_rqst_typ = UPDATE_TRD_EXEC_RNG;
		i_ch_val = fn_acall_svc ( c_ServiceName,
															c_errmsg,
															&st_cntrct_short_qt,
															"vw_cntrct_qt",
															sizeof (st_cntrct_short_qt),
															TPNOREPLY,
															"SFO_UPD_QT" );
		if(i_ch_val == SYSTEM_ERROR)
		{
			fn_errlog ( c_ServiceName, "S31030", LIBMSG, c_errmsg );
			return -1;
		}
		
		if(DEBUG_MSG_LVL_2)
		{
		 fn_gt_time();
		 fn_userlog(c_ServiceName,"TIME_STATS NDF inside fn_trd_exec_rng_upd After UPDATE_TRD_EXEC_RNG at :%s:",c_time);
		}
 }
	return 0;
}
/*** Ver 2.2 ends ***/


/**** Ver 1.8 Starts ***/
void fn_gt_time()
{
  int i_mili_sec = 0;
  struct timeval tv;
  struct timezone tz;
  struct tm *tm;

  gettimeofday(&tv, &tz);
  tm=localtime(&tv.tv_sec);
  i_mili_sec= tv.tv_usec/1000;
  sprintf(c_time,"%d:%d:%d:%d",tm->tm_hour, tm->tm_min, tm->tm_sec, i_mili_sec);
  return;
}
/*** Ver 1.8 ends ***/


/*** Version 2.5 Starts ***/

int fn_bcast_spd_mbp_delta( struct st_spd_mkt_info *ptr_st_spread_mkt_info,
                            char *c_xchng_cd,
                            char *c_ServiceName,
                            char c_tbt_mod,
                            char *c_errmsg  )
{
int i_trnsctn=0;
char c_date[22];
    if(DEBUG_MSG_LVL_5)
    {
fn_userlog(c_ServiceName,"FTQ_SPRD_TOKEN_NO=%ld",ptr_st_spread_mkt_info->st_bcast_dat.l_itoken_1);
fn_userlog(c_ServiceName,"FTQ_SPD_TOKEN2=%ld",ptr_st_spread_mkt_info->st_bcast_dat.l_itoken_2);
fn_userlog(c_ServiceName,"MBP BUY=%d",ptr_st_spread_mkt_info->st_bcast_dat.si_mbp_buy);
fn_userlog(c_ServiceName,"MBP SELL=%d",ptr_st_spread_mkt_info->st_bcast_dat.si_mbp_sell);
fn_userlog(c_ServiceName,"FTQ_LST_TRD_TM=%ld",ptr_st_spread_mkt_info->st_bcast_dat.li_last_active_time);
fn_userlog(c_ServiceName,"FTQ_TOT_QTY_TRDD=%ld",ptr_st_spread_mkt_info->st_bcast_dat.li_traded_volume);
fn_userlog(c_ServiceName,"FTQ_TOT_VAL_TRDD=%lf",ptr_st_spread_mkt_info->st_bcast_dat.d_total_traded_value);
fn_userlog(c_ServiceName,"FTQ_BST1_BID_PRC=%ld",ptr_st_spread_mkt_info->st_bcast_dat.st_mbpbuys[0].li_price);
fn_userlog(c_ServiceName,"FTQ_BST1_BID_QTY=%ld",ptr_st_spread_mkt_info->st_bcast_dat.st_mbpbuys[0].li_volume);
fn_userlog(c_ServiceName,"FTQ_BST2_BID_PRC=%ld",ptr_st_spread_mkt_info->st_bcast_dat.st_mbpbuys[1].li_price);
fn_userlog(c_ServiceName,"FTQ_BST2_BID_QTY=%ld",ptr_st_spread_mkt_info->st_bcast_dat.st_mbpbuys[1].li_volume);
fn_userlog(c_ServiceName,"FTQ_BST3_BID_PRC=%ld",ptr_st_spread_mkt_info->st_bcast_dat.st_mbpbuys[2].li_price);
fn_userlog(c_ServiceName,"FTQ_BST3_BID_QTY=%ld",ptr_st_spread_mkt_info->st_bcast_dat.st_mbpbuys[2].li_volume);
fn_userlog(c_ServiceName,"FTQ_BST4_BID_PRC=%ld",ptr_st_spread_mkt_info->st_bcast_dat.st_mbpbuys[3].li_price);
fn_userlog(c_ServiceName,"FTQ_BST4_BID_QTY=%ld",ptr_st_spread_mkt_info->st_bcast_dat.st_mbpbuys[3].li_volume);
fn_userlog(c_ServiceName,"FTQ_BST5_BID_PRC=%ld",ptr_st_spread_mkt_info->st_bcast_dat.st_mbpbuys[4].li_price);
fn_userlog(c_ServiceName,"FTQ_BST5_BID_QTY=%ld",ptr_st_spread_mkt_info->st_bcast_dat.st_mbpbuys[4].li_volume);
fn_userlog(c_ServiceName,"FTQ_BST1_OFFR_PRC=%ld",ptr_st_spread_mkt_info->st_bcast_dat.st_mbpsells[0].li_price);
fn_userlog(c_ServiceName,"FTQ_BST1_OFFR_QTY==%ld",ptr_st_spread_mkt_info->st_bcast_dat.st_mbpsells[0].li_volume);
fn_userlog(c_ServiceName,"FTQ_BST2_OFFR_PRC=%ld",ptr_st_spread_mkt_info->st_bcast_dat.st_mbpsells[1].li_price);
fn_userlog(c_ServiceName,"FTQ_BST2_OFFR_QTY==%ld",ptr_st_spread_mkt_info->st_bcast_dat.st_mbpsells[1].li_volume);
fn_userlog(c_ServiceName,"FTQ_BST3_OFFR_PRC=%ld",ptr_st_spread_mkt_info->st_bcast_dat.st_mbpsells[2].li_price);
fn_userlog(c_ServiceName,"FTQ_BST3_OFFR_QTY==%ld",ptr_st_spread_mkt_info->st_bcast_dat.st_mbpsells[2].li_volume);
fn_userlog(c_ServiceName,"FTQ_BST4_OFFR_PRC=%ld",ptr_st_spread_mkt_info->st_bcast_dat.st_mbpsells[3].li_price);
fn_userlog(c_ServiceName,"FTQ_BST4_OFFR_QTY==%ld",ptr_st_spread_mkt_info->st_bcast_dat.st_mbpsells[3].li_volume);
fn_userlog(c_ServiceName,"FTQ_BST5_OFFR_PRC=%ld",ptr_st_spread_mkt_info->st_bcast_dat.st_mbpsells[4].li_price);
fn_userlog(c_ServiceName,"FTQ_BST5_OFFR_QTY=%ld",ptr_st_spread_mkt_info->st_bcast_dat.st_mbpsells[4].li_volume);
fn_userlog(c_ServiceName,"FTQ_TOT_BID_QTY=%lf",ptr_st_spread_mkt_info->st_bcast_dat.st_totalordrvol.d_buy);
fn_userlog(c_ServiceName,"FTQ_TOT_OFFR_QTY=%lf",ptr_st_spread_mkt_info->st_bcast_dat.st_totalordrvol.d_sell);
fn_userlog(c_ServiceName,"FTQ_OPN_PRC=%ld",ptr_st_spread_mkt_info->st_bcast_dat.li_open_price_difference);
fn_userlog(c_ServiceName,"FTQ_HGH_PRC=%ld",ptr_st_spread_mkt_info->st_bcast_dat.li_day_high_price_difference);
fn_userlog(c_ServiceName,"FTQ_LOW_PRC=%ld",ptr_st_spread_mkt_info->st_bcast_dat.li_day_low_price_difference);
fn_userlog(c_ServiceName,"FTQ_LST_TRD_PRC=%ld",ptr_st_spread_mkt_info->st_bcast_dat.li_last_traded_price_difference);
}
      i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );
      if( i_trnsctn == -1 )
      {
            fn_errlog(c_ServiceName, "S31025", SQLMSG, c_errmsg);
            return -1;
      }

  fn_long_to_timearr(c_date,ptr_st_spread_mkt_info->st_bcast_dat.li_last_active_time);
  fn_userlog(c_ServiceName,"Last Active Time:%s",c_date);

  EXEC SQL
  UPDATE FTQ_FO_TRD_QT
  SET FTQ_LST_TRD_TM=to_date(:c_date,'DD-Mon-YYYY hh24:mi:ss'),
      FTQ_TOT_QTY_TRDD=:ptr_st_spread_mkt_info->st_bcast_dat.li_traded_volume,
      FTQ_TOT_VAL_TRDD=:ptr_st_spread_mkt_info->st_bcast_dat.d_total_traded_value,
      FTQ_BST1_BID_PRC=:ptr_st_spread_mkt_info->st_bcast_dat.st_mbpbuys[0].li_price,
      FTQ_BST1_BID_QTY=:ptr_st_spread_mkt_info->st_bcast_dat.st_mbpbuys[0].li_volume,
      FTQ_BST2_BID_PRC=:ptr_st_spread_mkt_info->st_bcast_dat.st_mbpbuys[1].li_price,
      FTQ_BST2_BID_QTY=:ptr_st_spread_mkt_info->st_bcast_dat.st_mbpbuys[1].li_volume,
      FTQ_BST3_BID_PRC=:ptr_st_spread_mkt_info->st_bcast_dat.st_mbpbuys[2].li_price,
      FTQ_BST3_BID_QTY=:ptr_st_spread_mkt_info->st_bcast_dat.st_mbpbuys[2].li_volume,
      FTQ_BST4_BID_PRC=:ptr_st_spread_mkt_info->st_bcast_dat.st_mbpbuys[3].li_price,
      FTQ_BST4_BID_QTY=:ptr_st_spread_mkt_info->st_bcast_dat.st_mbpbuys[3].li_volume,
      FTQ_BST5_BID_PRC=:ptr_st_spread_mkt_info->st_bcast_dat.st_mbpbuys[4].li_price,
      FTQ_BST5_BID_QTY=:ptr_st_spread_mkt_info->st_bcast_dat.st_mbpbuys[4].li_volume,
      FTQ_BST1_OFFR_PRC=:ptr_st_spread_mkt_info->st_bcast_dat.st_mbpsells[0].li_price,
      FTQ_BST1_OFFR_QTY=:ptr_st_spread_mkt_info->st_bcast_dat.st_mbpsells[0].li_volume,
      FTQ_BST2_OFFR_PRC=:ptr_st_spread_mkt_info->st_bcast_dat.st_mbpsells[1].li_price,
      FTQ_BST2_OFFR_QTY=:ptr_st_spread_mkt_info->st_bcast_dat.st_mbpsells[1].li_volume,
      FTQ_BST3_OFFR_PRC=:ptr_st_spread_mkt_info->st_bcast_dat.st_mbpsells[2].li_price,
      FTQ_BST3_OFFR_QTY=:ptr_st_spread_mkt_info->st_bcast_dat.st_mbpsells[2].li_volume,
			FTQ_BST4_OFFR_PRC=:ptr_st_spread_mkt_info->st_bcast_dat.st_mbpsells[3].li_price,
      FTQ_BST4_OFFR_QTY=:ptr_st_spread_mkt_info->st_bcast_dat.st_mbpsells[3].li_volume,
      FTQ_BST5_OFFR_PRC=:ptr_st_spread_mkt_info->st_bcast_dat.st_mbpsells[4].li_price,
      FTQ_BST5_OFFR_QTY=:ptr_st_spread_mkt_info->st_bcast_dat.st_mbpsells[4].li_volume,
      FTQ_TOT_BID_QTY=:ptr_st_spread_mkt_info->st_bcast_dat.st_totalordrvol.d_buy,
      FTQ_TOT_OFFR_QTY=:ptr_st_spread_mkt_info->st_bcast_dat.st_totalordrvol.d_sell,
      FTQ_OPN_PRC=:ptr_st_spread_mkt_info->st_bcast_dat.li_open_price_difference,
      FTQ_HGH_PRC=:ptr_st_spread_mkt_info->st_bcast_dat.li_day_high_price_difference,
      FTQ_LOW_PRC=:ptr_st_spread_mkt_info->st_bcast_dat.li_day_low_price_difference,
      FTQ_LST_TRD_PRC=:ptr_st_spread_mkt_info->st_bcast_dat.li_last_traded_price_difference
      WHERE FTQ_XCHNG_CD=:c_xchng_cd
      AND FTQ_SPRD_TOKEN_NO=:ptr_st_spread_mkt_info->st_bcast_dat.l_itoken_1
      AND FTQ_SPD_TOKEN2=:ptr_st_spread_mkt_info->st_bcast_dat.l_itoken_2;

          if ( SQLCODE != 0 )
          {
            if( SQLCODE == NO_DATA_FOUND )
            {
            fn_errlog(c_ServiceName, "S31025", SQLMSG, c_errmsg);
            fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
            return 0;
            }
            fn_errlog(c_ServiceName, "S31025", SQLMSG, c_errmsg);
            fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
            return -1;
          }
    if( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      fn_errlog( c_ServiceName, "S31030", LIBMSG, c_errmsg );
      return -1;
		}
return 0;
}


int fn_spd_update_info( struct st_spd_update_info *ptr_st_brd_spd_update_info,
                        char *c_xchng_cd,
                        char *c_ServiceName,
                        char c_tbt_mod,
                        char *c_errmsg  )
{
char temp;
char temp1;
char c_date1[22];
char c_date2[22];
int i_trnsctn=0;
    if(DEBUG_MSG_LVL_5)
{
fn_userlog(c_ServiceName,"In Function fn_spd_update_info call");
fn_userlog(c_ServiceName,"FTQ_SPRD_TOKEN_NO=%ld",ptr_st_brd_spd_update_info->li_token_1);
fn_userlog(c_ServiceName,"FTQ_SPD_TOKEN2=%ld",ptr_st_brd_spd_update_info->li_token_2);
fn_userlog(c_ServiceName,"=%s",ptr_st_brd_spd_update_info->st_secinfo[0].c_instrument_name);
fn_userlog(c_ServiceName,"=%s",ptr_st_brd_spd_update_info->st_secinfo[0].c_symbol);
fn_userlog(c_ServiceName,"=%s",ptr_st_brd_spd_update_info->st_secinfo[0].c_series);
fn_userlog(c_ServiceName,"=%ld",ptr_st_brd_spd_update_info->st_secinfo[0].li_expiry_date);
fn_userlog(c_ServiceName,"=%ld",ptr_st_brd_spd_update_info->st_secinfo[0].li_strike_price);
fn_userlog(c_ServiceName,"=%s",ptr_st_brd_spd_update_info->st_secinfo[0].c_option_type);
fn_userlog(c_ServiceName,"=%d",ptr_st_brd_spd_update_info->st_secinfo[0].si_ca_level);

fn_userlog(c_ServiceName,"=%s",ptr_st_brd_spd_update_info->st_secinfo[1].c_instrument_name);
fn_userlog(c_ServiceName,"=%s",ptr_st_brd_spd_update_info->st_secinfo[1].c_symbol);
fn_userlog(c_ServiceName,"=%s",ptr_st_brd_spd_update_info->st_secinfo[1].c_series);
fn_userlog(c_ServiceName,"=%ld",ptr_st_brd_spd_update_info->st_secinfo[1].li_expiry_date);
fn_userlog(c_ServiceName,"=%ld",ptr_st_brd_spd_update_info->st_secinfo[1].li_strike_price);
fn_userlog(c_ServiceName,"=%s",ptr_st_brd_spd_update_info->st_secinfo[1].c_option_type);
fn_userlog(c_ServiceName,"=%d",ptr_st_brd_spd_update_info->st_secinfo[1].si_ca_level);

fn_userlog(c_ServiceName,"FTQ_BASE_PRC=%ld",ptr_st_brd_spd_update_info->li_reference_price);
fn_userlog(c_ServiceName,"FTQ_LOW_PRC_RNG=%ld",ptr_st_brd_spd_update_info->li_day_low_price_diff_range);
fn_userlog(c_ServiceName,"FTQ_HGH_PRC_RNG=%ld",ptr_st_brd_spd_update_info->li_day_high_price_diff_range);
fn_userlog(c_ServiceName,"FTQ_OPLOW_PirceDiff=%ld",ptr_st_brd_spd_update_info->li_op_low_price_diff_range);
fn_userlog(c_ServiceName,"FTQ_OPHIGH_PirceDiff=%ld",ptr_st_brd_spd_update_info->li_op_high_price_diff_range);
fn_userlog(c_ServiceName,"FTQ_ACT_STTS=%d",ptr_st_brd_spd_update_info->st_eligibile.flg_eligibility)
;
fn_userlog(c_ServiceName,"=%c",ptr_st_brd_spd_update_info->c_delete_flag);
}
      i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );
      if( i_trnsctn == -1 )
      {
            fn_errlog(c_ServiceName, "S31025", SQLMSG, c_errmsg);
            return -1;
      }
    if(DEBUG_MSG_LVL_5)
{
fn_userlog(c_ServiceName,"FTQ_ACT_STTS1=%d",ptr_st_brd_spd_update_info->st_eligibile.flg_eligibility);
}
  temp = ptr_st_brd_spd_update_info->st_eligibile.flg_eligibility;
fn_userlog(c_ServiceName,"FTQ_ACT_STTS2=%c",temp);
  temp1 =(char) ptr_st_brd_spd_update_info->st_eligibile.flg_eligibility;
fn_userlog(c_ServiceName,"FTQ_ACT_STTS3=%c",temp1);
fn_long_to_timearr(c_date1,ptr_st_brd_spd_update_info->st_secinfo[0].li_expiry_date);
fn_userlog(c_ServiceName,"Expiry Date1:%s",c_date1);
fn_long_to_timearr(c_date2,ptr_st_brd_spd_update_info->st_secinfo[1].li_expiry_date);
fn_userlog(c_ServiceName,"Expiry Date2:%s",c_date2);
  EXEC SQL
  UPDATE FTQ_FO_TRD_QT
  SET FTQ_BASE_PRC=:ptr_st_brd_spd_update_info->li_reference_price,
			FTQ_LOW_PRC_RNG=:ptr_st_brd_spd_update_info->li_day_low_price_diff_range,
      FTQ_HGH_PRC_RNG=:ptr_st_brd_spd_update_info->li_day_high_price_diff_range,
      FTQ_OPLOW_PRICEDIFF=:ptr_st_brd_spd_update_info->li_op_low_price_diff_range,
      FTQ_OPHIGH_PRICEDIFF=:ptr_st_brd_spd_update_info->li_op_high_price_diff_range,
      FTQ_ACT_STTS=:temp1
      WHERE FTQ_XCHNG_CD=:c_xchng_cd
      AND FTQ_SPRD_TOKEN_NO=:ptr_st_brd_spd_update_info->li_token_1
      AND FTQ_SPD_TOKEN2=:ptr_st_brd_spd_update_info->li_token_2;

          if ( SQLCODE != 0 )
          {
            if( SQLCODE == NO_DATA_FOUND )
            {
            fn_errlog(c_ServiceName, "S31025", SQLMSG, c_errmsg);
            fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
            return 0;
            }
            fn_errlog(c_ServiceName, "S31025", SQLMSG, c_errmsg);
            fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
            return -1;
          }
    if( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      fn_errlog( c_ServiceName, "S31030", LIBMSG, c_errmsg );
      return -1;
    }
return 0;
}
/*** Version 2.5 Ends ***/
