/*********************************************************************************************** 
* Ver 1.1 -   MG (27-Nov-2002)                                            									    *
*             Changed in function fn_upd_limits to pass back the error 											    *
*							message that comes from the service - commented code that											    *
*             raises B21007																																    	*
*             Note - Only relevant servers have been recompiled - not all 									    *
* Ver 1.2 -   SANGEET (11-Aug-2004) Change for IMTM Report INSUFF limit											    *
* Ver 1.3 -   Smitha (09-Sep-2006) Change for FNO NRI TDS added fn_tds()									    	*
* Ver 1.4 -   Vidyayini Krish Change for IMTM  Pre SquareOff              								    	*
*             Report INSUFF limit (29-Nov-2006)                           								    	*
* Ver 1.5 -   Shailesh for product FUTUREPLUS (10-Mar-2008)               								    	*
* Ver 1.6 -   Sandeep for IBM Migration Changes	(25-Apr-2008)															    	*
* Ver 1.7 -   Shailesh for knowing lock in advance changes (17-Jul-2009)									    	*
*	Ver	1.8	-		Sandeep for rounding of d_amount in case TDS calculation <07-Apr-2010>.			    	*
*	Ver 1.9 -   Sandeep for Cash Projection Mismatch In Future Plus To    								     		*
*             Future Conversion.  (26-May-2010)                        									        *
*	Ver 2.0 -   BSE Changes (By Swati A.B),sachin                                                 *
* Ver 2.1 -   Storing ip address (27-Jun-2012) by Navina                                        *
* Ver 2.2 -   Added audit table Update funtion (04-Dec-2012) By Bhushan                         *
* Ver 2.3 -   GAME Simulator Back Office Automation - Sachin Birje (22-Feb-2013)                *  
* Ver 2.4 -   SPAN FuturePLUS handling (24-Jan-2013) by Navina D.                               *
* Ver 2.5 -   Addition of error function for prdct prtfl 11-Dec-2014 - Tanmay W.                * 
* Ver 2.6 -   FNO Auto MTM Changes ( 18-Feb-2014 - Sachin Birje )                               *
* Ver 2.7 -   View to FML changes ( 30-Dec-2014 - Samip M )                                     *
* Ver 2.8 -   FNO limit logging (06-Nov-2013) (Swati A.B)                                       *
* Ver 2.9 -   Changes in query for FNO limit logging.  (19-Feb-2015 - Sonu Jalap )              *
* Ver 3.0 -   Contract Master and Trade Quote Table Merger Changes (Anand Dhopte 05Sep2015)     *
* Ver 3.1 -   User log statement added - Sachin Birje (31-Aug-2015 )                            *
* Ver 3.2 -   CR_ISEC14_64402 Limit Order Type in FPSLTP 29-Jul-2015 - Navina D.                *
* Ver 3.3 -   CR-ISEC14-67417 Market to Limit in OptionPLUS 05-Oct-2015 - Aakash.               *
* Ver 3.4 -   Trigger price Changes       04-Nov-2015 - Sachin Birje                            *
* Ver 3.5 -   Consider MTM OPN Val instead of ORIGN OPN Val   03-Feb-2016 - Sachin Birje        *
* Ver 3.6 -   Revoke position from MTM loop in case of error  16-Feb-2016 - Sachin Birje        *
* Ver 3.7 - 	Function added For 2L and 3L acceptance	17-Jun-2016 - Kishor Borkar						    * 
*	Ver	3.8 -   Log maintenance 22-Jun-2016 - Kishor Borkar																	     	*  
*	Ver	3.9 -   Debug Level changes 19-Jul-2016 - Sachin Birje  															    *    
*	Ver	4.0 -   AUTOMTM MAILER CHANGES(03-Aug-2016 ) Tanmay W.															     	*
* Ver 4.2 -   Future Trail   kishor B/Bhupendra                                                 *
* Ver 4.3 -   Spread function moved to ors_rms lib 25-Aug-2016 - Navina D.                      *
* Ver 4.4 -   Optimization 22-Feb-2017 - Bhupendra Malik 																		    * 
* Ver 4.5 -   Adding trigger time to table -13-Nov-2017  Varadraj Gramopadhye                   *
* Ver 4.6 -   Optimization 28-Feb-2018 - Mrinal Kishore 																	    	*
* Ver 4.7 -   NNF_CHANGES_7.21 (PAN Changes)  - Bhushan Harekar   ( 03-May-2018 )               *
* Ver 4.8 -   Core fix for invalid pipe id - Navina D.   ( 28-Jun-2018 )                        *
* Ver 5.0 -   Rollover With Spread ( 19-Mar-2018) - Bhushan Harekar                             *
* ver 5.1 -   Time updation during updation of flags     - Varadraj G (25-Sep-2018)             *
* ver 5.2 -   Delivery margin Changes                    - Suchita D ( 08-AUG-2019 )            *
* ver 5.3 -   Userlog Handling for space crunch          - Mrinal K  ( 22-AUG-2019 )            *
* ver 5.4 -   FPSL margin change CR-ISEC14-133200        - Navina D. (02-Mar-2020)              *
* ver 5.5 -   RSpread Part-Exec Modification bug fix     - Mrinal K  ( 07-Sep-2020 )        		*
* ver 5.6 -   OPLUS margin change CR-ISEC14-139243       - Navina D. (21-Oct-2020)              *
* ver 5.7 -   CR-ISEC14-141383 Separate ELM% for Deep OTM strikes - Anuj Pancholi (21-Oct-2020) *
* ver 5.8 -   Margin Calculator in non logged in section (Shlok) (01-Nov-2021)                  *
* ver 6.0 -   Average price for pnl. CR-ISEC14-158350    Mahesh 10-Dec-21                       *
* ver 6.1 -   CR-ISEC14-150750_Introduction of Profit Order in FPSL - Navina D. (16-Oct-2021)   *
* ver 6.2 -   CR-ISEC14-170021 Revision of Margin logic of FPSL, Oplus & Opt -Naveena (13-Jul-2022)   *
* ver 6.3 -   Unmark Position on sq off order rejection LODM        - Suchita D.(16-Aug-2022)   *
* ver 6.4 -   Unique device identifiers                             -dipin(16-Sep-2022)         *  
* Ver 6.5 -   Pipe ID 21, 22 ,23 and 24 Sequence                    - Devesh (28-feb-2023)      *
* Ver 6.6 -   Pipe ID 25, 26, 27, 28, 31 and 32  Sequence           - Devesh (24-Mar-2023)      *
* ver 6.7 -   SPIRA_986 : Margin reporting regulatory changes                   -bhavana(23-Jan-2023)       *
* Ver 6.8 -   RQ:3117 FNO GTT library fn to add gtt leg to CEP      - Edwin  (26-Mar-2023)      *
*************************************************************************************************/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>  /** Ver 1.5 **/
#include <math.h>    /** Ver 2.6 **/
#include <sqlca.h>
#include <atmi.h>
#include <fo_view_def.h> /* Added in Ver TOL */
/* #include <fo_view_def.h> ** Ver 2.7 ***/
#include <fml_rout.h> /*** Ver 2.7 ***/
#include <fo_fml_def.h> /*** Ver 2.7 ***/
#include <fml_def.h>
/*** #include <fn_ddr.h>      *** Ver 3.7 *** Commented in Ver 4.3 ***/
#include <fo.h>
#include <fn_pos.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_read_debug_lvl.h>    /*** Ver 1.6  ***/
#include <eba_to_ors.h>				/*** Ver 2.1 ***/
#define NULLTERM(a) a[strlen(a) - 1]='\0' /* Ver 2.8 */
#define   UPPER 1    /** Ver 2.6 **/
#define   LOWER 2    /** Ver 2.6 **/

/** Increases the position by a given value given the rate**/

void fn_add_pos( long int li_trnsctn_qty,
                 long int li_trnsctn_prc,
                 long int *ptr_li_pos_qty,
                 double   *ptr_d_pos_val)
{
  *ptr_li_pos_qty = *ptr_li_pos_qty + li_trnsctn_qty;
  if( *ptr_li_pos_qty != 0 )
  {
    *ptr_d_pos_val = *ptr_d_pos_val + ( (double)li_trnsctn_qty *
                                        (double)li_trnsctn_prc );
  }
  else
  {
    *ptr_d_pos_val = 0;
  }
}

/** Decreases the position by a given value given the rate**/
void fn_del_pos( long int li_trnsctn_qty,
								 long int li_trnsctn_prc,
								 long int	*ptr_li_pos_qty,
								 double 	*ptr_d_pos_val)
{

	*ptr_li_pos_qty = *ptr_li_pos_qty - li_trnsctn_qty;
	if( *ptr_li_pos_qty != 0 )
	{
		*ptr_d_pos_val = *ptr_d_pos_val - ( (double)li_trnsctn_qty * 
																				(double)li_trnsctn_prc);
	}
	else
	{
		*ptr_d_pos_val = 0;
	}

}

/** Increases the position by a given value given the value and qty**/
void fn_add_pos_in_val( long int li_trnsctn_qty,
								 				double		d_trn_tot_val,
								 				long int li_trn_tot_qty,
								 				long int	*ptr_li_pos_qty,
								 				double 	*ptr_d_pos_val)
{
	*ptr_li_pos_qty = *ptr_li_pos_qty + li_trnsctn_qty;
	if( *ptr_li_pos_qty != 0 )
	{
		*ptr_d_pos_val = *ptr_d_pos_val + ( (double)li_trnsctn_qty * 
																	d_trn_tot_val / (double)li_trn_tot_qty );
	}
	else
	{
		*ptr_d_pos_val = 0;
	}
}

/** Decreases the position by a given value given the value and the qty**/
void fn_del_pos_in_val( long int li_trnsctn_qty,
								 				double		d_trn_tot_val,
								 				long int li_trn_tot_qty,
								 				long int	*ptr_li_pos_qty,
								 				double 	*ptr_d_pos_val)
{

	*ptr_li_pos_qty = *ptr_li_pos_qty - li_trnsctn_qty;
	if( *ptr_li_pos_qty != 0 )
	{
		*ptr_d_pos_val = *ptr_d_pos_val - ( (double)li_trnsctn_qty * 
																	d_trn_tot_val / (double)li_trn_tot_qty );
	}
	else
	{
		*ptr_d_pos_val = 0;
	}

}

/** Calls the Update limit service given the narration id and the amount **/
/** to be blocked/released                                               **/
int fn_upd_limits( char *c_ServiceName,
									struct vw_pstn_actn *ptr_st_pstn_actn,
                  struct vw_err_msg *ptr_st_err_msg,
									char *c_narration_id,
									char	c_lmt_flg,
									double	d_amount,
									double  *d_balance_amt)
{
  struct vw_upd_limits st_upd_lmts;
  int i_returncode;
  int i_ip_len;
  int i_op_len;

  /**  Ver 1.4 Begins **/

  char double_val[40];
  char *temp_ptr_to_err;
  char *ptr_str_double_val = (char *)double_val;

  /**   Ver 1.4 Ends  **/

  EXEC SQL BEGIN DECLARE SECTION;
    varchar c_trade_dt[LEN_DATE];
  EXEC SQL END DECLARE SECTION;

  EXEC SQL
    SELECT to_char(exg_nxt_trd_dt,'DD-Mon-YYYY')
    INTO   :c_trade_dt
    FROM   exg_xchng_mstr
    WHERE  exg_xchng_cd = :ptr_st_pstn_actn->c_xchng_cd
    AND    exg_mkt_typ = 'D';

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "L31005", SQLMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
  }

  SETNULL(c_trade_dt);
  if (DEBUG_MSG_LVL_0)       /*** Ver 3.8 ***/
  {
	 fn_userlog(c_ServiceName,"fn_upd_limits1:c_narration_id<%s>",c_narration_id);
	}

	strcpy( st_upd_lmts.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd);
  strcpy( st_upd_lmts.c_cln_mtch_accnt, 
														ptr_st_pstn_actn->c_cln_mtch_accnt);
  strcpy( st_upd_lmts.c_trd_dt, (char *)c_trade_dt.arr);
 	strcpy( st_upd_lmts.c_narration_id , c_narration_id);
  if (DEBUG_MSG_LVL_3)       /*** Ver 3.8 ***/
  {
		fn_userlog(c_ServiceName,"fn_upd_limits2:c_narration_id<%s>",st_upd_lmts.c_narration_id);
	}
	
 	strcpy( st_upd_lmts.c_remarks, ptr_st_pstn_actn->c_ref_rmrks);

	/*** Added for Order Routing ***/
 	strcpy( st_upd_lmts.c_rout_crt, ptr_st_pstn_actn->c_rout_crt);

 	if (d_amount < 0)
 	{
   	st_upd_lmts.c_dr_cr_flg = DEBIT;
 	}
 	else
 	{
   	st_upd_lmts.c_dr_cr_flg = CREDIT;
 	}

 	st_upd_lmts.d_amount = d_amount;
 	st_upd_lmts.c_dr_without_lmt_flg = c_lmt_flg;

 	i_ip_len = sizeof ( struct vw_upd_limits );
 	i_op_len = sizeof ( struct vw_upd_limits );
  /*** Commented for 2.7 *****
 	i_returncode = fn_call_svc( c_ServiceName,
                             	ptr_st_err_msg->c_err_msg,
                             	&st_upd_lmts,
                             	&st_upd_lmts,
                             	"vw_upd_limits",
                             	"vw_upd_limits",
                             	i_ip_len,
                             	i_op_len,
                             	0,
                             	"SFO_UPD_LIMITS" );
  ******* Ver 2.7 ********/
  /*** Added for 2.7 *******/

  i_returncode = fn_call_svc_fml ( c_ServiceName,
                                    ptr_st_err_msg->c_err_msg,
                                    "SFO_UPD_LIMITS",
                                    0,
                                    10,
                                    1,
                                  FFO_XCHNG_CD, ( char * )st_upd_lmts.c_xchng_cd,
                                  FFO_EBA_MTCH_ACT_NO, ( char * )st_upd_lmts.c_cln_mtch_accnt,
                                  FFO_TRD_DT,( char * )st_upd_lmts.c_trd_dt,
                                  FFO_NARRATION_ID, ( char * )st_upd_lmts.c_narration_id,
                                  FFO_REMARKS, ( char * )st_upd_lmts.c_remarks,
                                  FFO_DR_CR_FLG, ( char * )&st_upd_lmts.c_dr_cr_flg,
                                  FFO_AMOUNT, ( char * )&st_upd_lmts.d_amount,
                                  FFO_BAL_AMT, ( char * )&st_upd_lmts.d_bal_amt,
                                  FFO_DWL_FLG,(char *)&st_upd_lmts.c_dr_without_lmt_flg,
                                  FFO_ROUT_CRT,(char *)st_upd_lmts.c_rout_crt,
                                  FFO_BAL_AMT,(char *)&st_upd_lmts.d_bal_amt,NULL
                                  );

  /***** Ver 2.7 ****/

 	if ( i_returncode != 0 )
 	{
		switch ( i_returncode )
		{
			case INSUFFICIENT_LIMITS :
				*d_balance_amt = st_upd_lmts.d_amount ;		/*1.2*/

        /** Retriving limit from error message  Ver 1.4 begins **/

        temp_ptr_to_err = (char *)strstr(ptr_st_err_msg->c_err_msg,"##");

      	 if (DEBUG_MSG_LVL_3)       /*** Ver 1.6 ***/
  			 {
         	fn_userlog(c_ServiceName,"Returned Error Message is :%s:",ptr_st_err_msg->c_err_msg);
         }

        memset(double_val,0,sizeof(double_val));
        temp_ptr_to_err = temp_ptr_to_err+3;

        while(*ptr_str_double_val++ = *temp_ptr_to_err++);

        *ptr_str_double_val++ = '\0';

        if (DEBUG_MSG_LVL_3)       /*** Ver 1.6 ***/
  			{
          fn_userlog(c_ServiceName,"In string format limit is :%s:",double_val);
        }

        sscanf(double_val,"%lf",d_balance_amt);
  			if (DEBUG_MSG_LVL_0)       /*** Ver 3.8 ***/
  			{
        	fn_userlog(c_ServiceName,"Available Limit returned fn_upd_limits :%lf:",*d_balance_amt);
					fn_userlog(c_ServiceName,"Required Limit - Insufficient limit is  :%lf:",st_upd_lmts.d_amount);
				}
	
        /** Retriving limit from error message  Ver 1.4 ends **/

				/* fn_userlog(c_ServiceName,"The Limit inside Insufficient limit is :%lf:",st_upd_lmts.d_amount); */
			  /* 1.1 - commented fn_errlog  */
			  /* fn_errlog( c_ServiceName, "B21007", DEFMSG, ptr_st_err_msg->c_err_msg );*//* 1.1 */

				return INSUFFICIENT_LIMITS;
				break;

			default :
				return FAILURE;
				break;
		}
 	}
	*d_balance_amt = st_upd_lmts.d_bal_amt;

	return SUCCESS;

}

/** Sums up the a contract to get an overall underlying postion **/
void fn_sum_cpos ( struct vw_cntfut_pos st_cntfut_pos,
                   struct vw_undfut_pos *ptr_st_undfut_pos)
{

  ptr_st_undfut_pos->l_ibuy_qty = ptr_st_undfut_pos->l_ibuy_qty +
                                  st_cntfut_pos.l_ibuy_qty;

  ptr_st_undfut_pos->d_ibuy_ord_vl = ptr_st_undfut_pos->d_ibuy_ord_vl +
                                     st_cntfut_pos.d_ibuy_ord_vl;

  ptr_st_undfut_pos->l_isell_qty = ptr_st_undfut_pos->l_isell_qty +
                                   st_cntfut_pos.l_isell_qty;

  ptr_st_undfut_pos->d_isell_ord_vl = ptr_st_undfut_pos->d_isell_ord_vl +
                                      st_cntfut_pos.d_isell_ord_vl;

  ptr_st_undfut_pos->l_exbuy_qty = ptr_st_undfut_pos->l_exbuy_qty +
                                   st_cntfut_pos.l_exbuy_qty;

  ptr_st_undfut_pos->d_exbuy_ord_vl = ptr_st_undfut_pos->d_exbuy_ord_vl +
                                      st_cntfut_pos.d_exbuy_ord_vl;

  ptr_st_undfut_pos->l_exsell_qty = ptr_st_undfut_pos->l_exsell_qty +
                                    st_cntfut_pos.l_exsell_qty;

  ptr_st_undfut_pos->d_exsell_ord_vl = ptr_st_undfut_pos->d_exsell_ord_vl +
                                       st_cntfut_pos.d_exsell_ord_vl;

  ptr_st_undfut_pos->l_buy_exctd_qty = ptr_st_undfut_pos->l_buy_exctd_qty +
                                       st_cntfut_pos.l_buy_exctd_qty;

  ptr_st_undfut_pos->l_sell_exctd_qty = ptr_st_undfut_pos->l_sell_exctd_qty +
                                       st_cntfut_pos.l_sell_exctd_qty;

  ptr_st_undfut_pos->l_opnpstn_qty = ptr_st_undfut_pos->l_opnpstn_qty +
                                     st_cntfut_pos.l_opnpstn_qty;

  ptr_st_undfut_pos->d_org_opn_val = ptr_st_undfut_pos->d_org_opn_val +
                                     st_cntfut_pos.d_org_opn_val;

  ptr_st_undfut_pos->d_mtm_opn_val = ptr_st_undfut_pos->d_mtm_opn_val +
                                     st_cntfut_pos.d_mtm_opn_val;

  ptr_st_undfut_pos->d_imtm_opn_val = ptr_st_undfut_pos->d_imtm_opn_val +
                                     st_cntfut_pos.d_imtm_opn_val;

  if ( st_cntfut_pos.l_opnpstn_qty > 0 )
  {
    ptr_st_undfut_pos->l_opn_buyqty = ptr_st_undfut_pos->l_opn_buyqty +
                                      st_cntfut_pos.l_opnpstn_qty;
  }
  else
  {
    ptr_st_undfut_pos->l_opn_sellqty = ptr_st_undfut_pos->l_opn_sellqty +
                                       st_cntfut_pos.l_opnpstn_qty;

  }
}

/** Gets the margin %s **/
int fn_get_im_prcntg( char *c_ServiceName,
                      struct vw_pstn_actn *ptr_st_pstn_actn,
                      struct vw_err_msg *ptr_st_err_msg,
                      double *d_init_mrgn_prcnt,
                      double *d_sprd_mrgn_prcnt,
                      double *d_min_mrgn_prcnt,
                      double *d_min_sprd_mrgn_prcnt,
                      char   c_cntrct_tag )
{
  EXEC SQL BEGIN DECLARE SECTION;
    long  l_basket_id;
    double  d_mrgn_prcnt_init;
    double  d_mrgn_prcnt_sprd;
    double  d_mrgn_prcnt_min;
    double  d_mrgn_prcnt_sprd_min;
 EXEC SQL END DECLARE SECTION;


  /** contract tag A is reserved for near month contract in split **/
  /** which attracts 100 % margin                                 **/
  if ( c_cntrct_tag == 'A' )
  {
    *d_init_mrgn_prcnt = 100;
    *d_sprd_mrgn_prcnt = 100;
    *d_min_mrgn_prcnt = 100;
    *d_min_sprd_mrgn_prcnt = 100;
if (DEBUG_MSG_LVL_3)       /*** Ver 1.6 ***/
{
  fn_userlog ( c_ServiceName, "Margin values" );
  fn_userlog ( c_ServiceName,"Initial margin :%lf:",*d_init_mrgn_prcnt);
  fn_userlog ( c_ServiceName,"Spread margin  :%lf:",*d_sprd_mrgn_prcnt);
  fn_userlog ( c_ServiceName,"Minimum margin :%lf:",*d_min_mrgn_prcnt);
  fn_userlog ( c_ServiceName,"Min Spread Mrgn:%lf:",*d_min_sprd_mrgn_prcnt);
  fn_userlog ( c_ServiceName," Exchnage Code :%s:",ptr_st_pstn_actn->c_xchng_cd);  /*** Ver 2.0 ***/
}

    return SUCCESS;
  }

  EXEC SQL
    SELECT  fcb_undrlyng_bskt_id
    INTO    :l_basket_id
    FROM    fcb_fo_cln_bskt_alltd
    WHERE   fcb_cln_lvl = ( SELECT clm_clnt_lvl
                          FROM clm_clnt_mstr
                          WHERE clm_mtch_accnt =
                                        :ptr_st_pstn_actn->c_cln_mtch_accnt );
  if ( SQLCODE != 0 )
  { /**** Commented in Ver 5.8 ***********
    fn_errlog( c_ServiceName, "L31010", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
    ************* Ver 5.8 Ends here ******/
    
    if( SQLCODE == NO_DATA_FOUND ) /** Ver 5.8 ** added if condtion ***/
    {
     fn_userlog ( c_ServiceName,"ptr_st_pstn_actn->c_cln_mtch_accnt :%s:",ptr_st_pstn_actn->c_cln_mtch_accnt);
     if( strcmp(ptr_st_pstn_actn->c_cln_mtch_accnt,"NA") == 0 )
     {
       l_basket_id=1;
     }
     else
     {
      fn_errlog( c_ServiceName, "L31015", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
     }
    }
    else
    {
      fn_errlog( c_ServiceName, "L31020", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    } /*** Ver 5.8 Ends HEre **/
  }
	
	/************The spread margin percentage in case of FuturePlus is not yet defined, need to consult Product ***/
	/************As of now we are picking Futures sprd percentages in case of FPlus which is wrong ****************/
  if (DEBUG_MSG_LVL_3)       /*** Ver 3.8 ***/
  {
  	fn_userlog ( c_ServiceName," Exchnage Code :%s:",ptr_st_pstn_actn->c_xchng_cd);  /*** Ver 2.0 ***/
	}
   

	EXEC SQL
    SELECT  decode(:ptr_st_pstn_actn->c_prd_typ,'P',fmm_span_mrgn_prcnt*fmm_fp_multplr,fmm_init_mrgn_prcnt),/*ver 1.5*/
            fmm_spread_mrgn,
            decode(:ptr_st_pstn_actn->c_prd_typ,'P',fmm_thrshd_mrgn_prcnt*fmm_fp_multplr,fmm_min_mrgn_prcnt),/*ver 1.5*/
            fmm_min_spread_mrgn
    INTO    :d_mrgn_prcnt_init,
            :d_mrgn_prcnt_sprd,
            :d_mrgn_prcnt_min,
            :d_mrgn_prcnt_sprd_min
    FROM    fmm_fo_mrgn_mstr
    WHERE   fmm_undrlyng_bskt_id  = :l_basket_id
    AND     fmm_prdct_typ         = decode(:ptr_st_pstn_actn->c_prd_typ,'P','F',:ptr_st_pstn_actn->c_prd_typ)
		AND     fmm_xchng_cd          = :ptr_st_pstn_actn->c_xchng_cd      /*** Ver 2.0 ***/ 
    AND     fmm_undrlyng          = :ptr_st_pstn_actn->c_undrlyng;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31025", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }


 *d_init_mrgn_prcnt = d_mrgn_prcnt_init;
  *d_sprd_mrgn_prcnt = d_mrgn_prcnt_sprd;
  *d_min_mrgn_prcnt = d_mrgn_prcnt_min;
  *d_min_sprd_mrgn_prcnt = d_mrgn_prcnt_sprd_min;

if (DEBUG_MSG_LVL_3)       /*** Ver 1.6 ***/
{
	if(ptr_st_pstn_actn->c_prd_typ == FUTURE_PLUS)
	{
			fn_userlog ( c_ServiceName, "Future Plus Margin values" );
			fn_userlog ( c_ServiceName,"Future Plus Initial margin :%lf:",*d_init_mrgn_prcnt);
			fn_userlog ( c_ServiceName,"Future Plus threshold margin :%lf:",*d_min_mrgn_prcnt);
			fn_userlog ( c_ServiceName,"Future Plus Spread margin  :%lf:",*d_sprd_mrgn_prcnt);
			fn_userlog ( c_ServiceName,"Future Plus Min Spread Mrgn:%lf:",*d_min_sprd_mrgn_prcnt);
	}
	else
	{
		fn_userlog ( c_ServiceName, " IN FUTURE CASE" );
		fn_userlog ( c_ServiceName, "Margin values" );
		fn_userlog ( c_ServiceName,"Initial margin :%lf:",*d_init_mrgn_prcnt);
		fn_userlog ( c_ServiceName,"Spread margin  :%lf:",*d_sprd_mrgn_prcnt);
		fn_userlog ( c_ServiceName,"Minimum margin :%lf:",*d_min_mrgn_prcnt);
		fn_userlog ( c_ServiceName,"Min Spread Mrgn:%lf:",*d_min_sprd_mrgn_prcnt);
	}
}
  if (DEBUG_MSG_LVL_3)       /*** Ver 3.8 ***/
  {
		if(ptr_st_pstn_actn->c_prd_typ == 'F')
  	{
			fn_userlog ( c_ServiceName, " IN FUTURE CASE" );
    	fn_userlog ( c_ServiceName, "Margin values" );
    	fn_userlog ( c_ServiceName,"Initial margin :%lf:",*d_init_mrgn_prcnt);
    	fn_userlog ( c_ServiceName,"Spread margin  :%lf:",*d_sprd_mrgn_prcnt);
    	fn_userlog ( c_ServiceName,"Minimum margin :%lf:",*d_min_mrgn_prcnt);
    	fn_userlog ( c_ServiceName,"Min Spread Mrgn:%lf:",*d_min_sprd_mrgn_prcnt);
		}
	}

  return SUCCESS;
}



int fn_ins_rep_tbl ( char *c_ServiceName,
                    char *c_err_msg,
                    struct vw_pstn_actn *ptr_st_pstn_actn,
                    char  *c_imtm_rmrks )
{

  EXEC SQL
    INSERT INTO fis_fo_imtm_stts
      (
        fis_clm_mtch_accnt,
        fis_xchng_cd,
        fis_prdct_typ,
        fis_indstk,
        fis_undrlyng,
        fis_cntrct_tag,
        fis_tm_stmp,
        fis_remarks
      )
    VALUES
      (
        :ptr_st_pstn_actn->c_cln_mtch_accnt,
        :ptr_st_pstn_actn->c_xchng_cd,
        :ptr_st_pstn_actn->c_prd_typ,
        :ptr_st_pstn_actn->c_ctgry_indstk,
        :ptr_st_pstn_actn->c_undrlyng,
        :ptr_st_pstn_actn->c_cntrct_tag,
        sysdate,
        :c_imtm_rmrks
      );

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31030",SQLMSG,c_err_msg);
    return FAILURE;
  }
    return SUCCESS;
}

int fn_ins_opt_rep_tbl ( 	char *c_ServiceName,
                    			char *c_err_msg,
                    			struct vw_pstn_actn *ptr_st_pstn_actn,
                    			char  *c_imtm_rmrks )
{

  EXEC SQL
    INSERT INTO fis_fo_imtm_stts
      (
        fis_clm_mtch_accnt,
        fis_xchng_cd,
        fis_prdct_typ,
        fis_indstk,
        fis_undrlyng,
        fis_expry_dt,
        fis_exer_typ,
        fis_opt_typ,
        fis_strk_prc,
        fis_tm_stmp,
        fis_remarks
      )
    VALUES
      (
        :ptr_st_pstn_actn->c_cln_mtch_accnt,
        :ptr_st_pstn_actn->c_xchng_cd,
        :ptr_st_pstn_actn->c_prd_typ,
        :ptr_st_pstn_actn->c_ctgry_indstk,
        :ptr_st_pstn_actn->c_undrlyng,
        to_date(:ptr_st_pstn_actn->c_expry_dt,'DD-Mon-YYYY'),
        :ptr_st_pstn_actn->c_exrc_typ,
        :ptr_st_pstn_actn->c_opt_typ,
        :ptr_st_pstn_actn->l_strike_prc,
        sysdate,
        :c_imtm_rmrks
      );

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31035",SQLMSG,c_err_msg);
    return FAILURE;
  }
    return SUCCESS;
}

/** Gets the margin %s **/
int fn_get_mrgn_prntg_opt( char *c_ServiceName,
                      struct vw_pstn_actn *ptr_st_pstn_actn,
                      struct vw_err_msg *ptr_st_err_msg,
                      double *d_init_mrgn_prcnt,
                      double *d_min_mrgn_prcnt,
                      double *d_somc_prcnt,
											double *d_min_trg_prcnt )    /*** Ver 2.6 ***/ 
{
  EXEC SQL BEGIN DECLARE SECTION;
    long  l_basket_id;
    double  d_mrgn_prcnt_init;
    double  d_somc;
    double  d_mrgn_prcnt_min;
		double  d_trg_prcnt_min;  /*** Ver 2.6 ***/
  EXEC SQL END DECLARE SECTION;

  char c_otm_flg = 'N';         /*** Ver 5.7 ***/
  
  EXEC SQL
    SELECT  fcb_undrlyng_bskt_id
    INTO    :l_basket_id
    FROM    fcb_fo_cln_bskt_alltd
    WHERE   fcb_cln_lvl = ( SELECT clm_clnt_lvl
                          FROM clm_clnt_mstr
                          WHERE clm_mtch_accnt =
                                        :ptr_st_pstn_actn->c_cln_mtch_accnt );
  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31040", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  if (DEBUG_MSG_LVL_3)       /*** Ver 3.8 ***/
  {
		fn_userlog(c_ServiceName,"SANDEEP l_basket_id Is :%ld:",l_basket_id);
		fn_userlog(c_ServiceName,"SANDEEP ptr_st_pstn_actn->c_prd_typ  Is :%c:",ptr_st_pstn_actn->c_prd_typ);
		fn_userlog(c_ServiceName,"SANDEEP ptr_st_pstn_actn->c_xchng_cd Is :%s:",ptr_st_pstn_actn->c_xchng_cd);
		fn_userlog(c_ServiceName,"SANDEEP ptr_st_pstn_actn->c_undrlyng Is :%s:",ptr_st_pstn_actn->c_undrlyng);
	}
 
  /** ver 5.7 Starts **/
  
  fn_userlog(c_ServiceName,"ANUJ Recvd Cntrct is |%s|%s|%c|%s|%ld|%c|%c|",ptr_st_pstn_actn->c_xchng_cd,ptr_st_pstn_actn->c_undrlyng,ptr_st_pstn_actn->c_prd_typ,ptr_st_pstn_actn->c_expry_dt,ptr_st_pstn_actn->l_strike_prc,ptr_st_pstn_actn->c_opt_typ,ptr_st_pstn_actn->c_exrc_typ); 
 
  if ( ptr_st_pstn_actn->c_prd_typ == 'O' || ptr_st_pstn_actn->c_prd_typ == 'I' )
  {
    EXEC SQL
    SELECT  NVL(FTQ_OTM_FLG,'N')
    INTO    :c_otm_flg 
    FROM   FTQ_FO_TRD_QT
    WHERE  FTQ_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd 
    AND    FTQ_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng 
    AND    FTQ_PRDCT_TYP = 'O'
    AND    FTQ_EXPRY_DT = to_date(:ptr_st_pstn_actn->c_expry_dt,'dd-Mon-yyyy') 
    AND    FTQ_STRK_PRC = :ptr_st_pstn_actn->l_strike_prc 
    AND    FTQ_EXER_TYP = :ptr_st_pstn_actn->c_exrc_typ 
    AND    FTQ_OPT_TYP =  :ptr_st_pstn_actn->c_opt_typ; 
   
   if ( SQLCODE != 0 )
   {
    fn_errlog( c_ServiceName, "L31045", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
   }
 
  }
  
  fn_userlog(c_ServiceName,"ANUJ  OTM/OTH Flag is :%c:",c_otm_flg); 
  
  /** ver 5.7 Ends **/ 
  
  EXEC SQL
    SELECT  /** fmm_init_mrgn_prcnt, ** commented in ver 5.7 **/
            decode(:c_otm_flg,'Y',NVL(fmm_deep_otm_im_prcnt,0),NVL(fmm_init_mrgn_prcnt,0)), /** ver 5.7 **/
            fmm_somc_prcnt,
            /** fmm_min_mrgn_prcnt, ** commented in ver 5.7 **/
            decode(:c_otm_flg,'Y',NVL(fmm_deep_otm_mm_prcnt,0),NVL(fmm_min_mrgn_prcnt,0)), /** ver 5.7 **/
					  nvl(fmm_min_trg_prcnt,0)       /*** Ver 2.6 ***/ 
    INTO    :d_mrgn_prcnt_init,
            :d_somc,
            :d_mrgn_prcnt_min,
						:d_trg_prcnt_min       /*** Ver 2.6 ***/
    FROM    fmm_fo_mrgn_mstr
    WHERE   fmm_undrlyng_bskt_id  = :l_basket_id
    AND     fmm_prdct_typ         = :ptr_st_pstn_actn->c_prd_typ
		AND     fmm_xchng_cd          = :ptr_st_pstn_actn->c_xchng_cd    /*** Ver 2.0 ***/
    AND     fmm_undrlyng          = :ptr_st_pstn_actn->c_undrlyng;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31050", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  *d_init_mrgn_prcnt = d_mrgn_prcnt_init;
  *d_min_mrgn_prcnt = d_mrgn_prcnt_min;
  *d_somc_prcnt = d_somc;
  *d_min_trg_prcnt = d_trg_prcnt_min; /*** Ver 2.6 ***/

if (DEBUG_MSG_LVL_3)       /*** Ver 1.6 ***/
{
  fn_userlog ( c_ServiceName, "Margin values" );
  fn_userlog ( c_ServiceName,"Initial margin :%lf:",*d_init_mrgn_prcnt);
  fn_userlog ( c_ServiceName,"Minimum margin :%lf:",*d_min_mrgn_prcnt);
  fn_userlog ( c_ServiceName,"SOMC   :%lf:",*d_somc_prcnt);
  fn_userlog ( c_ServiceName,"Minimum Trigger price :%lf:",*d_min_trg_prcnt);      /*** Ver 2.6 ***/
}

  return SUCCESS;
}

/* Ver 1.3 Calculates TDS and updates limits accordingly	*/

int fn_tds( char *c_ServiceName,
						struct vw_pstn_actn *ptr_st_pstn_actn,
						struct vw_err_msg *ptr_st_err_msg,
						char *c_narration_id,
						char *c_reason_cd,
						char  c_lmt_flg,
						double  d_amount,
						double  *d_balance_amt)
{
	int i_returncode;
	struct vw_upd_limits st_upd_tds;
	double d_tds_incurred;
	double d_par_tds_rt;
	double d_par_tds_srch;
	double d_par_tds_cess;
	double d_par_tds_it;
	double d_bal_amt;
	double d_amnt = 0.0;			/***	Ver	1.8	***/

	long long ll_amnt;				/***	Ver	1.8	***/

	char c_dr_without_lmt_flg;
	char c_sett_off_flg;

	EXEC SQL BEGIN DECLARE SECTION;
		varchar c_trade_dt[LEN_DATE];
		varchar c_mon_trade[LEN_DATE];
		varchar npl_due_to[50];
		varchar c_trd_dt[LEN_DATE];
	EXEC SQL END DECLARE SECTION;

	d_tds_incurred = 	0.0;

if (DEBUG_MSG_LVL_3)       /*** Ver 1.6 ***/
{
	fn_userlog(c_ServiceName,"STEP1");
}

	EXEC SQL
		SELECT par_fno_tds_rt,
					 par_fno_tds_srch,
					 par_fno_tds_cess,
					 par_fno_tds_it
		INTO	 :d_par_tds_rt,
			 		 :d_par_tds_srch,
			 		 :d_par_tds_cess,
			 		 :d_par_tds_it
		FROM   PAR_SYSTM_PRMTR 	;

	if ( SQLCODE != 0 )
	{
		fn_userlog(c_ServiceName,"STEP1.1");
		fn_errlog ( c_ServiceName, "L31055", SQLMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

	/***	Ver	1.8	Starts	***/

  if (DEBUG_MSG_LVL_3)       /*** Ver 3.8 ***/
  {
		fn_userlog(c_ServiceName,"STEP1.2");
	}

	d_tds_incurred = 	(d_amount * d_par_tds_rt) /100 ;
	d_amnt	=	d_tds_incurred;

  if (DEBUG_MSG_LVL_3)       /*** Ver 3.8 ***/
  {
		fn_userlog(c_ServiceName,"Before Rounding d_tds_incurred Is :%lf:",d_amnt);
	}
	if( (long long) ( d_amnt * 100.0 ) % 100 > 50 )
	{
		d_amnt =	d_amnt +	1.0	;
	}
	else if ( (long long) ( d_amnt * -100.0 ) % 100 > 50 )
	{
		d_amnt	=	d_amnt -	1.0	;
	}

  if (DEBUG_MSG_LVL_0)       /*** Ver 3.8 ***/
  {
		fn_userlog(c_ServiceName,"After Rounding d_tds_incurred Is :%lf:",d_amnt);
	}

	ll_amnt	=	( long long ) d_amnt;
	
	/***	Ver	1.8	Ends	***/

  if (DEBUG_MSG_LVL_3)       /*** Ver 3.8 ***/
  {
		fn_userlog(c_ServiceName,"STEP1.3");
		fn_userlog(c_ServiceName,"c_reason_cd <%s>",c_reason_cd);
		fn_userlog(c_ServiceName,"c_narration_id<%s>",c_narration_id);
		fn_userlog(c_ServiceName,"d_tds_incurred<%lf>",d_tds_incurred);
	}
	strcpy((char *)npl_due_to.arr,c_reason_cd);
  if (DEBUG_MSG_LVL_3)       /*** Ver 3.8 ***/
  {
		fn_userlog(c_ServiceName,"STEP1.4");
	}

	SETLEN(npl_due_to);

	if (DEBUG_MSG_LVL_3)       /*** Ver 1.6 ***/
  {
		fn_userlog(c_ServiceName,"STEP2");
	}

	EXEC SQL
		SELECT EXG_SETT_OFF_FLG ,
					 to_char(EXG_NXT_TRD_DT, 'dd-Mon-yyyy')
		INTO   :c_sett_off_flg,
					 :c_trd_dt
		FROM   EXG_XCHNG_MSTR
		WHERE  EXG_XCHNG_CD=:ptr_st_pstn_actn->c_xchng_cd;

	if ( SQLCODE != 0 )
	{
		fn_errlog ( c_ServiceName, "L31060", SQLMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

	SETNULL(c_trd_dt);

	if (DEBUG_MSG_LVL_3)       /*** Ver 1.6 ***/
  {	
		fn_userlog(c_ServiceName,"STEP3");
	}

	EXEC SQL
		INSERT INTO npl_nri_pl_log
		(
			npl_clm_mtch_accnt,
			npl_trd_dt,
			npl_prft_loss,
			npl_tds_incurred,
			npl_due_to,
			npl_tds_rate,
			npl_tds_srch,
			npl_tds_cess,
			npl_tds_it
		)
		VALUES
		(
			:ptr_st_pstn_actn->c_cln_mtch_accnt,
			to_date(:c_trd_dt,'dd-Mon-YYYY'),
			:d_amount,
			:d_tds_incurred,
			:npl_due_to,
			:d_par_tds_rt,
			:d_par_tds_srch,
			:d_par_tds_cess,
			:d_par_tds_it
		);

		if ( SQLCODE != 0 )
		{
			fn_errlog ( c_ServiceName, "L31065", SQLMSG, ptr_st_err_msg->c_err_msg );
			return FAILURE;
		}

	 if (DEBUG_MSG_LVL_3)       /*** Ver 1.6 ***/
   {
		fn_userlog(c_ServiceName,"STEP4");
	 }

	EXEC SQL 
		SELECT to_char(last_day(to_date(:c_trd_dt,'dd-Mon-YYYY')),'dd-Mon-yyyy')
		INTO   :c_mon_trade
		FROM 	dual;

	if ( SQLCODE != 0 )
	{
		fn_errlog ( c_ServiceName, "L31070", SQLMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

	SETNULL(c_mon_trade);

	if (DEBUG_MSG_LVL_3)       /*** Ver 1.6 ***/
  {
		fn_userlog(c_ServiceName,"STEP5");
	}

	d_amnt	=	(double) ll_amnt;			/***	Ver	1.8	***/

	EXEC SQL 
		UPDATE mts_mon_tds_smry
		SET    mts_cum_pl = mts_cum_pl + :d_amount,

					/***	Commented In Ver 1.8
					 mts_tds_liab = mts_tds_liab +(((:d_amount )*(:d_par_tds_rt))/100),
					 mts_cum_tds_liab = mts_cum_tds_liab +(((:d_amount )*(:d_par_tds_rt))/100), *To discuss with Prod*

					**************************************/

					 mts_tds_liab	=	mts_tds_liab	+	:d_amnt,							/***	Ver	1.8	***/
					 mts_cum_tds_liab	=	mts_cum_tds_liab	+	:d_amnt,			/***	Ver	1.8	***/	
					 mts_tds_rate =	:d_par_tds_rt	,
					 mts_trd_date = to_date(:c_mon_trade,'dd-Mon-YYYY'),
					 mts_tds_srch = :d_par_tds_srch,
					 mts_tds_cess = :d_par_tds_cess,
					 mts_tds_it 	= 	:d_par_tds_it,
					 mts_curr_pl	= mts_curr_pl +	:d_amount				/***	Ver	1.8	***/
		WHERE  mts_clm_mtch_accnt =:ptr_st_pstn_actn->c_cln_mtch_accnt
		AND 	 to_char(mts_trd_date,'Mon-YYYY')  = to_char(to_date(:c_mon_trade),'Mon-YYYY');


	if ( SQLCODE != 0 )
	{
		if ( SQLCODE == NO_DATA_FOUND )
		{
			EXEC SQL
			INSERT INTO mts_mon_tds_smry
				(
					mts_clm_mtch_accnt,
					mts_trd_date,
					mts_cum_pl,
					mts_sett_off_flg,
					mts_tds_liab,
					mts_cum_tds_liab,
					mts_cum_tds_paid,
					mts_tds_rate,
					mts_tds_srch,
					mts_tds_cess,
					mts_tds_it,
					mts_upld_flg,
					mts_curr_pl
				)
				VALUES
				(
					:ptr_st_pstn_actn->c_cln_mtch_accnt,
					to_date(:c_mon_trade,'dd-Mon-YYYY'),
					:d_amount,
					:c_sett_off_flg,

					/****	Commented In Ver 1.8
					:d_tds_incurred,
					:d_tds_incurred,
					************************/
					:d_amnt,			/***	Ver	1.8	***/
					:d_amnt,			/***	Ver	1.8	***/
					0,
					:d_par_tds_rt,
					:d_par_tds_srch,
					:d_par_tds_cess,
					:d_par_tds_it,
					'N',
					:d_amount			/***	Ver	1.8	***/
				);

				if ( SQLCODE != 0 )
				{
					fn_errlog ( c_ServiceName, "L31075", SQLMSG, ptr_st_err_msg->c_err_msg );
					return FAILURE;
				}
		}
		else
		{
			fn_errlog ( c_ServiceName, "L31080", SQLMSG, ptr_st_err_msg->c_err_msg );
			return FAILURE;
		}
	}

	/*Update Limits accordingly for TDS applied */

	if (DEBUG_MSG_LVL_3)       /*** Ver 1.6 ***/
  {
		fn_userlog(c_ServiceName,"STEP6");
	}

	if (d_tds_incurred > 0)
	{
			/* Make all TDS on profit entries as -ve for Debit in FCB */
			d_tds_incurred = d_tds_incurred *(-1);
	}
	else
	{
		/*Make loss as +ve to sett off within that trade date in FCB  */
		d_tds_incurred = d_tds_incurred * (-1);
	}

	c_dr_without_lmt_flg = c_lmt_flg;

  if (DEBUG_MSG_LVL_3)       /*** Ver 3.8 ***/
  {
		fn_userlog(c_ServiceName,"Before calling fn_upd_limits function");
		fn_userlog(c_ServiceName," fn_tds :c_narration_id<%s>",c_narration_id);
	}

	i_returncode = fn_upd_limits( c_ServiceName,
																ptr_st_pstn_actn,
																ptr_st_err_msg,
																c_narration_id,
																c_dr_without_lmt_flg,
																d_tds_incurred,
																&d_bal_amt);
	if ( i_returncode != 0 )
	{
		fn_userlog(c_ServiceName,"Inside error of fn_upd_limits");
		return i_returncode;
	}

  if (DEBUG_MSG_LVL_3)       /*** Ver 3.8 ***/
  {
		fn_userlog(c_ServiceName,"After calling fn_upd_limits function");
	}

	/**To Be checked at Y3K time**/
	EXEC SQL
			 UPDATE 	fcb_fo_clnt_blncs 
			 SET			fcb_payout_dt = '01-Jan-3000'
			 WHERE 		fcb_clm_mtch_accnt = :ptr_st_pstn_actn->c_cln_mtch_accnt
			 AND 		  fcb_grp_id= 9
       AND      fcb_xchng_cd = :ptr_st_pstn_actn->c_xchng_cd; /** Ver 2.0 ***/

	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
	{
		fn_errlog ( c_ServiceName, "L31085", SQLMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

	if (DEBUG_MSG_LVL_3)       /*** Ver 1.6 ***/
  {
		fn_userlog(c_ServiceName,"STEP7");
	}
	return SUCCESS;
}

/************************************************************************************/
/** This function is called from Futures as well as FuturePlus position services   **/
/** to calculate the fresh and cover quantities (Ver 1.5)													 **/													
/************************************************************************************/
int fn_cal_frscvr_qty(char *c_ServiceName,
										  struct vw_pstn_actn *ptr_st_pstn_actn,
										  struct vw_err_msg *ptr_st_err_msg)
{

 EXEC SQL BEGIN DECLARE SECTION;
    char  sql_cln_mtch_accnt[11];
    char  sql_xchng_cd[4];
    char  sql_cntrct_tag;
		char  sql_indstk;
		char  sql_exrc_typ;
    char  sql_undrlyng[7];
	  char  sql_expry_dt[LEN_DATE];
		long  l_opnpstn_qty;
 EXEC SQL END DECLARE SECTION;
	
	strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
  strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
  sql_indstk = ptr_st_pstn_actn->c_ctgry_indstk;
  strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);
  sql_exrc_typ = ptr_st_pstn_actn->c_exrc_typ;
  strcpy(sql_expry_dt, ptr_st_pstn_actn->c_expry_dt);

	if(DEBUG_MSG_LVL_3){
		fn_userlog ( c_ServiceName, "Calculating the Fresh-Cover Qty in Trade Confirmation" );	
		fn_userlog ( c_ServiceName, "Expiry date       :%s:",ptr_st_pstn_actn->c_expry_dt);
	}

    EXEC SQL 
          SELECT  sum(ffp_opnpstn_qty)
					INTO    :l_opnpstn_qty
          FROM    ffp_fo_futures_pstn
          WHERE   ffp_clm_mtch_accnt = :sql_cln_mtch_accnt
          AND     ffp_xchng_cd       = :sql_xchng_cd
					AND			ffp_indstk				 = :sql_indstk
          AND     ffp_undrlyng       = :sql_undrlyng
					AND			ffp_exer_typ       = :sql_exrc_typ
          AND     ffp_expry_dt       = to_date(:sql_expry_dt,'DD-Mon-YYYY');

		if ( SQLCODE != 0 )
		{
				fn_errlog ( c_ServiceName, "S31005", SQLMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
  	}

	if(DEBUG_MSG_LVL_3){
		fn_userlog ( c_ServiceName, "The net Open position qty:%ld",l_opnpstn_qty);
	}

	  if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
    {
        if( l_opnpstn_qty > 0 )
        {
            ptr_st_pstn_actn->l_fresh_qty = ptr_st_pstn_actn->l_exec_qty;
            ptr_st_pstn_actn->l_cover_qty = 0;
        }
        else
        {
          ptr_st_pstn_actn->l_cover_qty =
                fn_minl(ptr_st_pstn_actn->l_exec_qty,
                        labs(l_opnpstn_qty) );

          ptr_st_pstn_actn->l_fresh_qty =
                fn_maxl(ptr_st_pstn_actn->l_exec_qty -
                        ptr_st_pstn_actn->l_cover_qty,
                        0 );
        }
    }
		else
    {
        if ( l_opnpstn_qty < 0 )
        {
            ptr_st_pstn_actn->l_fresh_qty = ptr_st_pstn_actn->l_exec_qty;
            ptr_st_pstn_actn->l_cover_qty = 0;
        }
        else
        {
            ptr_st_pstn_actn->l_cover_qty =
                  fn_minl(ptr_st_pstn_actn->l_exec_qty,
                          l_opnpstn_qty );

            ptr_st_pstn_actn->l_fresh_qty =
                  fn_maxl(ptr_st_pstn_actn->l_exec_qty -
                          ptr_st_pstn_actn->l_cover_qty,
                          0 );
        }
    }

	return SUCCESS;
}

/*function added in Ver 1.7 */
/**** commented in ver 6.7 **** 
int fn_check_lock(char *c_ServiceName,
                  char *c_input_rowid,
                  char *c_object_name,
                  char *c_err_msg)
{

EXEC SQL BEGIN DECLARE SECTION;
  sql_cursor    sys_cursor;             * a cursor variable *

  char c_row_wait_obj[18+1];
  char c_row_wait_file[18+1];
  char c_row_wait_block[18+1];
  char c_row_wait_row[18+1];

  char c_created_rowid [18+1];

EXEC SQL END DECLARE SECTION;

  if (DEBUG_MSG_LVL_3)       *** Ver 3.8 ***
  {
  	fn_userlog ( c_ServiceName, "SH3-Before Cursor Open");
	}

  EXEC SQL ALLOCATE :sys_cursor;
    EXEC SQL EXECUTE
      BEGIN
         OPEN :sys_cursor FOR
          SELECT  b.ROW_WAIT_OBJ#,
                  b.ROW_WAIT_FILE#,
                  b.ROW_WAIT_BLOCK#,
                  b.ROW_WAIT_ROW#
          FROM    v$locked_object a ,
                  v$session b,
                  dba_objects c
          WHERE b.sid = a.session_id
          AND   a.object_id = c.object_id
          AND   c.object_name=:c_object_name
          AND   b.ROW_WAIT_OBJ# <> -1;
        END;
      END-EXEC;
  if ( SQLCODE != 0 )
  {
    EXEC SQL FREE :sys_cursor;
    fn_errlog ( c_ServiceName, "S31010", SQLMSG, c_err_msg );
    return FAILURE;
  }

  while ( 1 )
  {
  	if (DEBUG_MSG_LVL_3)       *** Ver 3.8 ***
  	{
      fn_userlog ( c_ServiceName, "SH4-In Cursor");
		}
      MEMSET(c_row_wait_obj);
      MEMSET(c_row_wait_file);
      MEMSET(c_row_wait_block);
      MEMSET(c_row_wait_row);
      MEMSET(c_created_rowid);

      EXEC SQL  FETCH   :sys_cursor
                INTO    :c_row_wait_obj,
                        :c_row_wait_file,
                        :c_row_wait_block,
                        :c_row_wait_row;
      if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          fn_userlog ( c_ServiceName, "SH6-Out Of Cursor");
          break;
        }

        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        fn_errlog ( c_ServiceName, "S31015", SQLMSG, c_err_msg );
        return FAILURE;
      }

    if(DEBUG_MSG_LVL_3){
	  fn_userlog(c_ServiceName,"c_object_name:%s:",c_object_name);
    fn_userlog(c_ServiceName,"c_row_wait_obj:%s:",c_row_wait_obj);
    fn_userlog(c_ServiceName,"c_row_wait_file:%s:",c_row_wait_file);
    fn_userlog(c_ServiceName,"c_row_wait_block:%s:",c_row_wait_block);
    fn_userlog(c_ServiceName,"c_row_wait_row:%s:",c_row_wait_row);
		}

    EXEC SQL
    SELECT DBMS_ROWID.ROWID_CREATE(1,:c_row_wait_obj,:c_row_wait_file,:c_row_wait_block,:c_row_wait_row)
    INTO  :c_created_rowid
    FROM DUAL;
    if ( SQLCODE != 0 )
    {
      EXEC SQL FREE :sys_cursor;
      fn_errlog ( c_ServiceName, "S31020", SQLMSG, c_err_msg );
      return FAILURE;
    }
    if(strcmp(c_input_rowid,c_created_rowid)==0)
    {
  		if (DEBUG_MSG_LVL_3)       *** Ver 3.8 ***
  		{
      	fn_userlog ( c_ServiceName, "SH5-Out Of Cursor");
      	fn_userlog(c_ServiceName,"The lock exists on FOD for rowid:%s:",c_input_rowid);
			}
      strcpy(c_err_msg,"The lock exists on FOD");
      return LOCKED;
    }
  }

  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;
  if (DEBUG_MSG_LVL_3)       *** Ver 3.8 ***
  {
  	fn_userlog(c_ServiceName,"The lock does not exists on FOD for rowid:%s:",c_input_rowid);
	}
  return NOT_LOCKED;
}
********* ver 6.7 ****/
void fn_add_fplspos(  long int li_trnsctn_qty,     /*** Ver 1.9 ***/
                      double d_trnsctn_prc,
                      long int *ptr_li_pos_qty,
                      double   *ptr_d_pos_val)
{

  *ptr_li_pos_qty = *ptr_li_pos_qty + li_trnsctn_qty;

  if( *ptr_li_pos_qty != 0 )
  {
    *ptr_d_pos_val = *ptr_d_pos_val + ( (double)li_trnsctn_qty *
                                        d_trnsctn_prc );
  }
  else
  {
    *ptr_d_pos_val = 0;
  }
}

/*** Ver 2.1 starts here ***/
int fn_upd_xchngbk  ( char   *c_ServiceName,
                      struct vw_xchngbook *ptr_st_xchngbook,
											char   *c_ip_address,
											char   *c_mtch_accnt,	 /*** Ver 2.4 ***/
                      char   *c_err_msg,
											long   l_init_sltp_rt,	/*** Ver 4.2 ****/
											long   l_init_lmt_rt,		/*** Ver 4.2 ****/
											long   l_lTP,						/*** Ver 4.2 ****/
                      long   l_trail_amt,     /*** Ver 4.2 ****/
											long   l_lmt_offset,		/*** Ver 4.2 ****/
											char   c_prcimpv_flg,		/*** Ver 4.2 ****/
                      long   l_session_id    /*** Ver 6.4 ****/	
                    )
{
  varchar c_xchng_rmrks [ 768 ];

  int i_rec_exists  = 0 ;
	int	i_trnsctn;
	char c_span_flag  = 'N';	/*** Ver 2.4 ***/

	if(DEBUG_MSG_LVL_3)  /*** Ver 3.9 , debug changed from 0 to 3 **/
	{
		fn_userlog(c_ServiceName,"Inside Function fn_upd_xchngbk.");
		fn_userlog(c_ServiceName,"Operation Type Is :%c:",ptr_st_xchngbook->c_oprn_typ);
	}
	
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"c_ip_address = :%s:",c_ip_address);
	}
	
  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    fn_errlog( c_ServiceName, "L31090", TPMSG, c_err_msg );
    tpfree ( ( char * ) ptr_st_xchngbook );
		return -1;
  }

	MEMSET(c_xchng_rmrks);


  switch(ptr_st_xchngbook->c_oprn_typ)
  {
    case  UPDATION_ON_EXCHANGE_RESPONSE :

      /* if ( ptr_st_xchngbook->l_dwnld_flg == DOWNLOAD ) ** commented in Ver 4.6 ***/
			if ( ptr_st_xchngbook->l_dwnld_flg == DOWNLOAD  && (strcmp(ptr_st_xchngbook->c_xchng_cd,"NFO") == 0)) /* Ver 4.6 */
      {
        EXEC SQL
          SELECT 1
          INTO  :i_rec_exists
          FROM  FXB_FO_XCHNG_BOOK
          WHERE FXB_JIFFY     = :ptr_st_xchngbook->d_jiffy
          AND   FXB_XCHNG_CD  = :ptr_st_xchngbook->c_xchng_cd
          AND   FXB_PIPE_ID   = :ptr_st_xchngbook->c_pipe_id
          AND   FXB_STREAM_NO = :ptr_st_xchngbook->l_bit_flg;

        if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
        {
          fn_errlog ( c_ServiceName, "L31095",SQLMSG, c_err_msg );
          tpfree ( ( char * ) ptr_st_xchngbook );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          return -1;
        }

        if ( i_rec_exists == 1 )
        {
          tpfree ( ( char * ) ptr_st_xchngbook );
          strcpy( c_err_msg, "Record already Processed" );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          return -1;
        }
      }
			/*** Ver 4.6 Starts Here ***/
			else if(ptr_st_xchngbook->l_dwnld_flg == DOWNLOAD && (strcmp(ptr_st_xchngbook->c_xchng_cd,"BFO")== 0))
			{
       EXEC SQL
          SELECT 1
          INTO :i_rec_exists
          FROM FXB_FO_XCHNG_BOOK
          WHERE  FXB_XCHNG_CD = :ptr_st_xchngbook->c_xchng_cd
          AND    FXB_PIPE_ID = :ptr_st_xchngbook->c_pipe_id
          AND    FXB_ORDR_SQNC = :ptr_st_xchngbook->l_ord_seq
          AND    FXB_STREAM_NO = :ptr_st_xchngbook->l_bit_flg
          AND    FXB_RMS_PRCSD_FLG = 'P';
        if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
        {
					fn_errlog ( c_ServiceName, "L31100",SQLMSG, c_err_msg );
          tpfree ( ( char * ) ptr_st_xchngbook );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          return -1;
        }
				if ( i_rec_exists == 1 )
        {
					tpfree ( ( char * ) ptr_st_xchngbook );
          strcpy( c_err_msg, "Record already Processed" );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          return -1;
        }
			}
			/*** Ver 4.6 Ends Here ***/

      strcpy ( ( char * )c_xchng_rmrks.arr, ptr_st_xchngbook->c_xchng_rmrks );

      rtrim ( c_xchng_rmrks.arr );

      SETLEN ( c_xchng_rmrks );

      EXEC SQL
        UPDATE FXB_FO_XCHNG_BOOK
				 SET   FXB_PLCD_STTS       = :ptr_st_xchngbook->c_plcd_stts,
               FXB_RMS_PRCSD_FLG   = :ptr_st_xchngbook->c_rms_prcsd_flg,
               FXB_ORS_MSG_TYP     = :ptr_st_xchngbook->l_ors_msg_typ,
               FXB_ACK_TM          = to_date( :ptr_st_xchngbook->c_ack_tm,'DD-Mon-yyyy hh24:mi:ss' ),
               FXB_XCHNG_RMRKS     = rtrim(FXB_XCHNG_RMRKS)||:c_xchng_rmrks,
               FXB_JIFFY           = :ptr_st_xchngbook->d_jiffy,
               FXB_STREAM_NO       = :ptr_st_xchngbook->l_bit_flg
         WHERE FXB_ORDR_RFRNC      = :ptr_st_xchngbook->c_ordr_rfrnc
         AND   FXB_MDFCTN_CNTR     = :ptr_st_xchngbook->l_mdfctn_cntr;

      break;

    case  INSERTION_ON_ORDER_MODIFICATION :

      if ( ptr_st_xchngbook->c_slm_flg != MARKET )
      {
        ptr_st_xchngbook->l_quote = 0;
        strcpy( ptr_st_xchngbook->c_qt_tm, "\0" );
      }

      strcpy ( ( char * )c_xchng_rmrks.arr, ptr_st_xchngbook->c_xchng_rmrks );

      SETLEN ( c_xchng_rmrks );

			/*** Ver 2.4 starts ***/
			if ( strcmp(ptr_st_xchngbook->c_xchng_cd,"NFO") == 0 )
			{
				EXEC  SQL                                               
				 SELECT  nvl(CLM_SPAN_ALLWD,'N')
				 INTO    :c_span_flag
				 FROM    CLM_CLNT_MSTR
				 WHERE   CLM_MTCH_ACCNT =:c_mtch_accnt;
			}
			if ( strcmp(ptr_st_xchngbook->c_xchng_cd,"BFO") == 0 )
			{
				EXEC  SQL                                               
				 SELECT  nvl(CLM_BSESPAN_ALLWD,'N')
				 INTO    :c_span_flag
				 FROM    CLM_CLNT_MSTR
				 WHERE   CLM_MTCH_ACCNT =:c_mtch_accnt;
			}

			if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND )
			{
				fn_errlog ( c_ServiceName, "L31105",SQLMSG, c_err_msg );
				tpfree ( ( char * ) ptr_st_xchngbook );
				return -1;
			}

			if (c_span_flag == 'Y')
			{
				c_span_flag = 'S';
			}

  	if (DEBUG_MSG_LVL_3)       /*** Ver 3.8 ***/
  	{
			fn_userlog(c_ServiceName," SPAN FLAG IS :%c:",c_span_flag);      
		} 
			/*** Ver 2.4 Ends ***/

      EXEC SQL
        INSERT INTO FXB_FO_XCHNG_BOOK
        (
          FXB_XCHNG_CD,
          FXB_ORDR_RFRNC,
          FXB_PIPE_ID,
          FXB_MOD_TRD_DT,
          FXB_ORDR_SQNC,
          FXB_LMT_MRKT_SL_FLG,
          FXB_DSCLSD_QTY,
          FXB_ORDR_TOT_QTY,
          FXB_LMT_RT,
          FXB_STP_LSS_TGR,
          FXB_MDFCTN_CNTR,
          FXB_ORDR_VALID_DT,
          FXB_ORDR_TYPE,
          FXB_SPRD_ORD_IND,
          FXB_RQST_TYP,
          FXB_QUOTE,
          FXB_QT_TM,
          FXB_RQST_TM,
          FXB_PLCD_STTS,
          FXB_EX_ORDR_TYP,
          FXB_XCHNG_RMRKS,
          FXB_SPL_FLAG,
				  FXB_MRKT_TYP,
          FXB_IP,
					FXB_SPN_FLG,	/*** Ver 2.4 ***/
					FXB_INIT_SLTP_RT,					/*** Ver 4.2 ***/
					FXB_INIT_LMT_RT,					/*** Ver 4.2 ***/
					FXB_LTP_RT,								/*** Ver 4.2 ***/
					FXB_TRAIL_AMT,						/*** Ver 4.2 ***/
					FXB_LMT_OFFSET,						/*** Ver 4.2 ***/
					FXB_PRCIMPV_FLG,	  			/*** Ver 4.2 ***/
          FXB_SSSN_ID             /*** Ver 6.4 ***/
        )
        VALUES
        (
          :ptr_st_xchngbook->c_xchng_cd,
          :ptr_st_xchngbook->c_ordr_rfrnc,
          :ptr_st_xchngbook->c_pipe_id,
          to_date (:ptr_st_xchngbook->c_mod_trd_dt,'DD-Mon-yyyy'),
          :ptr_st_xchngbook->l_ord_seq,
          :ptr_st_xchngbook->c_slm_flg,
          :ptr_st_xchngbook->l_dsclsd_qty,
          :ptr_st_xchngbook->l_ord_tot_qty,
          :ptr_st_xchngbook->l_ord_lmt_rt,
          :ptr_st_xchngbook->l_stp_lss_tgr,
          :ptr_st_xchngbook->l_mdfctn_cntr,
          to_date(:ptr_st_xchngbook->c_valid_dt, 'DD-Mon-yyyy' ),
          :ptr_st_xchngbook->c_ord_typ,
          :ptr_st_xchngbook->c_sprd_ord_ind,
          :ptr_st_xchngbook->c_req_typ,
          :ptr_st_xchngbook->l_quote,
          to_date(:ptr_st_xchngbook->c_qt_tm, 'DD-Mon-yyyy hh24:mi:ss' ),
          to_date(:ptr_st_xchngbook->c_rqst_tm, 'DD-Mon-yyyy hh24:mi:ss' ),
          :ptr_st_xchngbook->c_plcd_stts,
          :ptr_st_xchngbook->c_ex_ordr_typ,
          :c_xchng_rmrks,
          :ptr_st_xchngbook->c_spl_flg,
          :ptr_st_xchngbook->c_mkrt_typ,
          :c_ip_address,
					:c_span_flag,		/*** Ver 2.4 ***/
					:l_init_sltp_rt,  		/*** Ver 4.2 ***/
					:l_init_lmt_rt,				/*** Ver 4.2 ***/
					:l_lTP,								/*** Ver 4.2 ***/
					:l_trail_amt,					/*** Ver 4.2 ***/
					:l_lmt_offset,				/*** Ver 4.2 ***/
					:c_prcimpv_flg,				/*** Ver 4.2 ***/
          :l_session_id         /*** Ver 6.4 ***/
        );
      break;

		case INSERTION_ON_ORDER_FTE	:

			i_rec_exists = 0;

      if ( ptr_st_xchngbook->l_dwnld_flg == DOWNLOAD )
      {
        if ( ptr_st_xchngbook->l_ors_msg_typ == ORS_2L_ORD_CNCL ||  ptr_st_xchngbook->l_ors_msg_typ ==  ORS_3L_ORD_CNCL )    
        {
					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"Inside DOWNLOAD For ORS_2L_ORD_CNCL & ORS_3L_ORD_CNCL");
						fn_userlog(c_ServiceName,"Jiffy Is :%lf:",ptr_st_xchngbook->d_jiffy);
						fn_userlog(c_ServiceName,"Order Sequence Is :%ld:",ptr_st_xchngbook->l_ord_seq);
					}

          EXEC SQL
            SELECT 1
            INTO :i_rec_exists
            FROM FXB_FO_XCHNG_BOOK
            WHERE FXB_JIFFY = :ptr_st_xchngbook->d_jiffy
            AND FXB_XCHNG_CD = :ptr_st_xchngbook->c_xchng_cd
            AND FXB_PIPE_ID = :ptr_st_xchngbook->c_pipe_id
            AND FXB_ORDR_SQNC = :ptr_st_xchngbook->l_ord_seq
            AND FXB_STREAM_NO = :ptr_st_xchngbook->l_bit_flg;

          if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
          {
            fn_errlog ( c_ServiceName, "L31110",SQLMSG, c_err_msg );
            tpfree ( ( char * ) ptr_st_xchngbook );
						return -1;
          }

        }
       else
       {
          EXEC SQL
            SELECT 1
            INTO :i_rec_exists
            FROM FXB_FO_XCHNG_BOOK
            WHERE FXB_JIFFY = :ptr_st_xchngbook->d_jiffy
            AND FXB_XCHNG_CD = :ptr_st_xchngbook->c_xchng_cd
            AND FXB_PIPE_ID = :ptr_st_xchngbook->c_pipe_id
            AND FXB_STREAM_NO = :ptr_st_xchngbook->l_bit_flg;     

          if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) )
          {
            fn_errlog ( c_ServiceName, "L31115", SQLMSG, c_err_msg );
            tpfree ( ( char * ) ptr_st_xchngbook );
						return -1;
          }
        }

        if ( i_rec_exists == 1 )
        {
          tpfree ( ( char * ) ptr_st_xchngbook );
          strcpy( c_err_msg, "Record already Processed" );
					return -1;
        }
     }
	
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"ptr_st_xchngbook->c_mod_trd_dt     |%s|",ptr_st_xchngbook->c_mod_trd_dt);
			fn_userlog(c_ServiceName,"ptr_st_xchngbook->c_ack_tm         |%s|",ptr_st_xchngbook->c_ack_tm);
		}

		EXEC SQL
      INSERT INTO FXB_FO_XCHNG_BOOK
      (
            FXB_XCHNG_CD,
            FXB_ORDR_RFRNC,
            FXB_MDFCTN_CNTR,
            FXB_PIPE_ID,
            FXB_MOD_TRD_DT,
            FXB_ORDR_SQNC,
            FXB_PLCD_STTS,
            FXB_RMS_PRCSD_FLG,
            FXB_ORS_MSG_TYP,
            FXB_ACK_TM,
            FXB_XCHNG_RMRKS,
            FXB_RQST_TYP,
            FXB_JIFFY,
            FXB_ORDR_TOT_QTY,
            FXB_LMT_RT,
            FXB_STREAM_NO
          )
          VALUES
          (
            :ptr_st_xchngbook->c_xchng_cd,
            :ptr_st_xchngbook->c_ordr_rfrnc,
            :ptr_st_xchngbook->l_mdfctn_cntr,
            :ptr_st_xchngbook->c_pipe_id,
            to_date (:ptr_st_xchngbook->c_mod_trd_dt,'DD-Mon-yyyy'),
            0,
            :ptr_st_xchngbook->c_plcd_stts,
            :ptr_st_xchngbook->c_rms_prcsd_flg,
            :ptr_st_xchngbook->l_ors_msg_typ,
            to_date (:ptr_st_xchngbook->c_ack_tm,'DD-Mon-yyyy hh24:mi:ss'),
            :ptr_st_xchngbook->c_xchng_rmrks,
            'T',
            :ptr_st_xchngbook->d_jiffy,
            :ptr_st_xchngbook->l_ord_tot_qty,
            :ptr_st_xchngbook->l_ord_lmt_rt,
            :ptr_st_xchngbook->l_bit_flg
          );

      break;

		case	UPDATE_RMS_PRCSD_FLG	:
		
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Inside Case UPDATE_RMS_PRCSD_FLG.");
				fn_userlog(c_ServiceName,"Inside Case c_rms_prcsd_flg Is :%c:",ptr_st_xchngbook->c_rms_prcsd_flg);
				fn_userlog(c_ServiceName,"Inside Case c_xchng_rmrks Is :%s:",c_xchng_rmrks.arr);
				fn_userlog(c_ServiceName,"Inside Case c_ordr_rfrnc Is :%s:",ptr_st_xchngbook->c_ordr_rfrnc);
				fn_userlog(c_ServiceName,"Inside Case l_mdfctn_cntr Is :%ld:",ptr_st_xchngbook->l_mdfctn_cntr);
			}

		  strcpy ( ( char * )c_xchng_rmrks.arr, ptr_st_xchngbook->c_xchng_rmrks );
  		rtrim ( c_xchng_rmrks.arr );
  		SETLEN ( c_xchng_rmrks );

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Inside Case1 c_rms_prcsd_flg Is :%c:",ptr_st_xchngbook->c_rms_prcsd_flg);
				fn_userlog(c_ServiceName,"Inside Case1 c_xchng_rmrks Is :%s:",c_xchng_rmrks.arr);
				fn_userlog(c_ServiceName,"Inside Case1 c_ordr_rfrnc Is :%s:",ptr_st_xchngbook->c_ordr_rfrnc);
				fn_userlog(c_ServiceName,"Inside Case1 l_mdfctn_cntr Is :%ld:",ptr_st_xchngbook->l_mdfctn_cntr);
			}

			EXEC SQL
    		UPDATE  FXB_FO_XCHNG_BOOK
    		SET     FXB_RMS_PRCSD_FLG   = :ptr_st_xchngbook->c_rms_prcsd_flg,
   			        FXB_XCHNG_RMRKS     = rtrim(fxb_xchng_rmrks)||'-'||:c_xchng_rmrks
    		WHERE   FXB_ORDR_RFRNC      = :ptr_st_xchngbook->c_ordr_rfrnc
    		AND     FXB_MDFCTN_CNTR     = :ptr_st_xchngbook->l_mdfctn_cntr;

		break;

    /****** Ver 4.4 Starts here *************/
    case  UPDATION_ON_FUT_CONVERSION :

       strcpy ( ( char * )c_xchng_rmrks.arr, ptr_st_xchngbook->c_xchng_rmrks );
      SETLEN ( c_xchng_rmrks );
if (DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"c_xchng_cd ***** :%s:",ptr_st_xchngbook->c_xchng_cd);
      fn_userlog(c_ServiceName,"c_ordr_rfrnc ***** :%s:",ptr_st_xchngbook->c_ordr_rfrnc);
      fn_userlog(c_ServiceName,"c_pipe_id ***** :%s:",ptr_st_xchngbook->c_pipe_id);
      fn_userlog(c_ServiceName,"c_mod_trd_dt ***** :%s:",ptr_st_xchngbook->c_mod_trd_dt);
      fn_userlog(c_ServiceName,"l_ord_seq ***** :%ld:",ptr_st_xchngbook->l_ord_seq);
      fn_userlog(c_ServiceName,"c_slm_flg ***** :%c:",ptr_st_xchngbook->c_slm_flg);
      fn_userlog(c_ServiceName,"l_dsclsd_qty ***** :%ld:",ptr_st_xchngbook->l_dsclsd_qty);
      fn_userlog(c_ServiceName,"l_ord_tot_qty ***** :%ld:",ptr_st_xchngbook->l_ord_tot_qty);
      fn_userlog(c_ServiceName,"l_ord_lmt_rt ***** :%ld:",ptr_st_xchngbook->l_ord_lmt_rt);
      fn_userlog(c_ServiceName,"l_stp_lss_tgr ***** :%ld:",ptr_st_xchngbook->l_stp_lss_tgr);
      fn_userlog(c_ServiceName,"l_mdfctn_cntr ***** :%ld:",ptr_st_xchngbook->l_mdfctn_cntr);
      fn_userlog(c_ServiceName,"c_valid_dt ***** :%s:",ptr_st_xchngbook->c_valid_dt);
      fn_userlog(c_ServiceName,"c_ord_typ ***** :%c:",ptr_st_xchngbook->c_ord_typ);
      fn_userlog(c_ServiceName,"c_sprd_ord_ind ***** :%c:",ptr_st_xchngbook->c_sprd_ord_ind);
      fn_userlog(c_ServiceName,"c_req_typ ***** :%c:",ptr_st_xchngbook->c_req_typ);
      fn_userlog(c_ServiceName,"l_quote ***** :%ld:",ptr_st_xchngbook->l_quote);
      fn_userlog(c_ServiceName,"c_qt_tm ***** :%s:",ptr_st_xchngbook->c_qt_tm);
      fn_userlog(c_ServiceName,"c_rqst_tm ***** :%s:",ptr_st_xchngbook->c_rqst_tm);
      fn_userlog(c_ServiceName,"c_plcd_stts ***** :%c:",ptr_st_xchngbook->c_plcd_stts);
      fn_userlog(c_ServiceName,"c_rms_prcsd_flg ***** :%c:",ptr_st_xchngbook->c_rms_prcsd_flg);
      fn_userlog(c_ServiceName,"c_ex_ordr_typ ***** :%c:",ptr_st_xchngbook->c_ex_ordr_typ);
      fn_userlog(c_ServiceName,"c_xchng_rmrks ***** :%s:",ptr_st_xchngbook->c_xchng_rmrks);
      fn_userlog(c_ServiceName,"c_spl_flg ***** :%c:",ptr_st_xchngbook->c_spl_flg);
      fn_userlog(c_ServiceName,"d_jiffy ***** :%lf:",ptr_st_xchngbook->d_jiffy);
}
      EXEC SQL
          INSERT INTO FXB_FO_XCHNG_BOOK
          (
            FXB_XCHNG_CD,
            FXB_ORDR_RFRNC,
            FXB_PIPE_ID,
            FXB_MOD_TRD_DT,
            FXB_ORDR_SQNC,
            FXB_LMT_MRKT_SL_FLG,
            FXB_DSCLSD_QTY,
            FXB_ORDR_TOT_QTY,
            FXB_LMT_RT,
            FXB_STP_LSS_TGR,
            FXB_MDFCTN_CNTR,
            FXB_ORDR_VALID_DT,
            FXB_ORDR_TYPE,
            FXB_SPRD_ORD_IND,
            FXB_RQST_TYP,
            FXB_QUOTE,
            FXB_QT_TM,
            FXB_RQST_TM,
            FXB_PLCD_STTS,
            FXB_RMS_PRCSD_FLG,
            FXB_ACK_TM,
            FXB_EX_ORDR_TYP,
            FXB_XCHNG_RMRKS,
            FXB_SPL_FLAG,
            FXB_JIFFY,
            FXB_STREAM_NO     /***  Ver 1.6 ***/
          )
          VALUES
          (
            :ptr_st_xchngbook->c_xchng_cd,
            :ptr_st_xchngbook->c_ordr_rfrnc,
            :ptr_st_xchngbook->c_pipe_id,
            to_date (:ptr_st_xchngbook->c_mod_trd_dt,'DD-Mon-yyyy'),
            :ptr_st_xchngbook->l_ord_seq,
            :ptr_st_xchngbook->c_slm_flg,
            :ptr_st_xchngbook->l_dsclsd_qty,
            :ptr_st_xchngbook->l_ord_tot_qty,
            :ptr_st_xchngbook->l_ord_lmt_rt,
            :ptr_st_xchngbook->l_stp_lss_tgr,
            :ptr_st_xchngbook->l_mdfctn_cntr,
            to_date(:ptr_st_xchngbook->c_valid_dt, 'DD-Mon-yyyy' ),
            :ptr_st_xchngbook->c_ord_typ,
            :ptr_st_xchngbook->c_sprd_ord_ind,
            :ptr_st_xchngbook->c_req_typ,
            :ptr_st_xchngbook->l_quote,
            to_date(:ptr_st_xchngbook->c_qt_tm, 'DD-Mon-yyyy hh24:mi:ss' ),
            to_date(:ptr_st_xchngbook->c_rqst_tm, 'DD-Mon-yyyy hh24:mi:ss' ),
            :ptr_st_xchngbook->c_plcd_stts,
            :ptr_st_xchngbook->c_rms_prcsd_flg,
            to_date(:ptr_st_xchngbook->c_ack_tm, 'DD-Mon-yyyy hh24:mi:ss' ),
            :ptr_st_xchngbook->c_ex_ordr_typ,
            :c_xchng_rmrks,
            :ptr_st_xchngbook->c_spl_flg,
            :ptr_st_xchngbook->d_jiffy,
            99
          );
      break;
    /****************** Ver 4.4 Ends Here ****************/

    default :

			fn_userlog(c_ServiceName,"INSIDE default.");
      strcpy( c_err_msg, "Invalid Operation Type" );
      fn_errlog ( c_ServiceName, "L31120", DEFMSG, c_err_msg );
			tpfree ( ( char * ) ptr_st_xchngbook );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;

    break;
  }

	if (	SQLCODE	!=	0	)
	{
		fn_errlog( c_ServiceName, "L31125", SQLMSG, c_err_msg );
		tpfree ( ( char * ) ptr_st_xchngbook );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		return	-1;
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"BEFORE COMMIT.");
	}

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
		fn_errlog( c_ServiceName, "L31130", TPMSG, c_err_msg );
    tpfree ( ( char * ) ptr_st_xchngbook );
		return -1;
  }
	
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"AFTER COMMIT.");
		fn_userlog(c_ServiceName,"After Update Xchange Book.");
  }
	return 0;
}
/*** Ver 2.1 ends here ***/

/*** Ver 2.2 starts here ***/
void fn_upd_audittab ( char  *c_ServiceName, char *c_BatchName, char c_flg , char* c_xchng_cd , char *c_trd_dt)
{
  char    c_err_msg[256];
  char    c_tag[32];

  int     i_trnsctn;

  i_trnsctn = fn_begintran( c_BatchName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31025",LIBMSG,c_err_msg);
    fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
    return;
  }
  if (DEBUG_MSG_LVL_3)       /*** Ver 3.8 ***/
  {
  	fn_userlog(c_ServiceName, "Val of Exg Cd=<%s>, c_flg<%c>, trd_dt<%s>", c_xchng_cd, c_flg, c_trd_dt);
  	fn_userlog(c_ServiceName, " c_ServiceName :%s:, c_BatchName:%s:",c_ServiceName,c_BatchName);
	}
	
  EXEC SQL
    UPDATE audit_prog_runstts
    SET    apr_succ_flg = :c_flg
    WHERE  apr_prog_name = :c_BatchName
    AND    apr_trd_dt =:c_trd_dt
    AND    apr_xchng_cd = :c_xchng_cd
    AND    apr_time = ( SELECT max(apr_time)
                        FROM   audit_prog_runstts
                        where  apr_prog_name = :c_BatchName
                        AND   apr_xchng_cd = :c_xchng_cd  );

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31030", SQLMSG, c_err_msg);
    fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_BatchName, i_trnsctn, c_err_msg );
    return;
  }

  if ( fn_committran( c_BatchName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog(c_ServiceName, "S31035", LIBMSG, c_err_msg);
    fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
    fn_aborttran( c_BatchName, i_trnsctn, c_err_msg );
    return;
  }
}
/*** Ver 2.2 Ends ***/

/*** Ver 2.3 starts ***/
void fn_log_prcs_err(char* c_program_nm,char* c_xchng_cd_tmp,char* c_match_id,
                char* c_error_txt,char* c_ServiceName,char* c_err_msg)
{
  int i_trnsctn=0; 

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    fn_errlog( c_ServiceName, "L31135", TPMSG, c_err_msg );
    return;
  }
  if (DEBUG_MSG_LVL_3)       /*** Ver 3.8 ***/
  {	
		fn_userlog(c_ServiceName, "stage 1");	
		fn_userlog(c_ServiceName, ":%s:", c_program_nm);	
		fn_userlog(c_ServiceName, ":%s:", c_xchng_cd_tmp);	
		fn_userlog(c_ServiceName, ":%s:", c_match_id);	
		fn_userlog(c_ServiceName, ":%s:" , c_error_txt);	
	}
  EXEC SQL 
     INSERT INTO FPE_FO_PROCESS_ERRS
                 (
                   FPE_PROCESS_NM, 
                   FPE_EXCHNG_CD,
                   FPE_MATCH_ID,
                   FPE_ERROR_TXT,
                   FPE_ERR_FLG,
                   FPE_PROCESS_DT
                  )
           VALUES(
                   :c_program_nm,
                   :c_xchng_cd_tmp,
                   :c_match_id,
                   :c_error_txt,
                   'N',
                   SYSDATE
                 );
  if (DEBUG_MSG_LVL_3)       /*** Ver 3.8 ***/
  {
		fn_userlog(c_ServiceName, ":%d:" ,SQLCODE );
	}
  if(SQLCODE != 0 )
  {
		fn_userlog(c_ServiceName, "stage 2");
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return;
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
		fn_userlog(c_ServiceName, "stage 3");
    fn_errlog( c_ServiceName, "L31140", TPMSG, c_err_msg );
    return;
  } 
  
}
/*** Ver 2.3 ends ***/

/** ver 2.5 starts**/

int fn_err_log(char *c_cln_mtch_accnt,char *c_xchng_cd,char c_prod_typ, char *c_undrlyng,char *c_expry_dt,char c_exrc_typ,char c_opt_typ,long l_strike_prc, char *c_errmsg, char *c_ServiceName,char *c_err_msg)
{
  char cnt_str[100]="\0";
  int i_trnsctn = 0;

  if(c_undrlyng == NULL)
  {
    strcpy(cnt_str,c_cln_mtch_accnt);
  }
  else if(c_prod_typ == 'O' || c_prod_typ == 'I')
  {
    sprintf(cnt_str,"%s-%s: %s-%s-%s-%c-%c-%ld ",c_cln_mtch_accnt,c_xchng_cd, "OPT", c_undrlyng,c_expry_dt,c_exrc_typ,c_opt_typ,l_strike_prc);
  }
  else if(c_prod_typ == 'F' || c_prod_typ == 'P' || c_prod_typ == 'U')
  {
    sprintf(cnt_str,"%s-%s: %s-%s-%s-%c",c_cln_mtch_accnt,c_xchng_cd, "FUT", c_undrlyng,c_expry_dt,c_exrc_typ);
  }
  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    fn_errlog( c_ServiceName, "L31145", TPMSG, c_errmsg );
    return -1;
  }
  EXEC SQL
  INSERT INTO ELT_ERR_LOG_TAB values(:cnt_str, :c_err_msg, :c_ServiceName,sysdate,'N');
  if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg  );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }
  if ( fn_committran( c_ServiceName, i_trnsctn,c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "L31150", TPMSG, c_err_msg );
    return -1;
  }
}
  /** ver 2.5 Ends **/


/*** Ver 2.6 Starts Here ***/
int fn_calc_trgprc_on_chngmrgn(char *c_ServiceName,
                              struct vw_pstn_actn *ptr_st_pstn_actn,
                              struct vw_err_msg *ptr_st_err_msg)
{

  long l_open_pos_qty=0;
  long li_near_opnpstn_qty=0;
  long li_mid_opnpstn_qty=0;
  long l_tot_open_qty = 0;
  long l_sprd_qty =0;

  double d_price_diff =0;
  double d_ersprice_diff =0;
  double d_cntrct_wght_price =0;
  double d_cntrct_wght_price_spd =0;
  double d_wght_price=0;
  double d_trg_prc_sprd=0;
  double d_sprd_min_prcntg=0;
  double d_sprd_min_mrgn = 0;
  double d_sprd_exe_mrgn =0;

  double d_near_opn_val=0;
  double d_mid_opn_val=0;
  double d_min_margin_pctg= 0.0;
  double d_ers_prcntg= 0.0;
  double d_init_min_mrgndiff =0;
  double d_init_min_ersmrgndiff =0;
  double d_min_margin=0;
  double d_min_ersmargin=0;
  double d_total_margin=0;
  double d_exctd_margin=0;
  double d_add_margin=0;
  double d_org_opn_val=0;
  double d_trgr_prc = 0;
  double d_ers_trgr_prc = 0;
  double d_erstrgr_prc = 0;
  double d_trigger_prc=0;
  double d_erstrigger_prc=0;
 
  double d_near_month_WAP = 0;
  double d_mid_month_WAP = 0;
  double d_near_cntrct_mrgn = 0;
  double d_mid_cntrct_mrgn = 0;
  double d_near_min_mrgn = 0;
  double d_near_ersmin_mrgn = 0;
  double d_mid_min_mrgn = 0;
  double d_mid_ersmin_mrgn = 0;
  double d_opn_pos_val=0;

  double d_near_trgr_prc =0;
  double d_near_erstrgr_prc =0;
  double d_mid_trgr_prc=0;
  double d_mid_erstrgr_prc=0;
  double d_near_trigger_prc=0;
  double d_near_erstrigger_prc=0;
  double d_mid_trigger_prc=0;
  double d_mid_erstrigger_prc=0;
  double d_sprd_min_mrgn_sprd=0;
  double d_trg_prc_sprd_ers=0;
  double d_sprd_min_trg_prcnt=0;

  long l_opn_cntrct_cnt=0;
  int  i_trnsctn;
  int  i_up_down=0;
  int  i_returncode=0;
  int  i_tck_sz=0;
  int  i_ret_val=0;

  char c_contract_desc[50];
  char c_pstn_typ = 'N';    /** ver 4.0 **/
  char c_near_expry_dt[12];
  char c_mid_expry_dt[12];
  char c_sem_map_vl[20];
  char c_expry_dt[12];
  char c_opn_pos_flw='\0';
  char c_mid_pos_flw='\0';
  char c_near_pos_flw='\0';
  char c_xchng_stts='\0';
  char c_ctgry_indstk='\0';
  char c_exrc_typ='\0'; 
  char c_err_msg[256];
  char c_naked_leg='\0';
  
 
  MEMSET(c_sem_map_vl);
  MEMSET(c_contract_desc);
  MEMSET(c_near_expry_dt);
  MEMSET(c_mid_expry_dt);
  MEMSET(c_expry_dt);
  MEMSET(c_err_msg);

  if( DEBUG_MSG_LVL_4 )		/*** Ver 5.3 Debug level changed to 4 from 3 ***/
  {
   fn_userlog(c_ServiceName,"Inside  fn_calc_trgprc_on_addmrgn ");
   fn_userlog(c_ServiceName,"c_cln_mtch_accnt :%s:",ptr_st_pstn_actn->c_cln_mtch_accnt);
   fn_userlog(c_ServiceName,"c_xchng_cd :%s:",ptr_st_pstn_actn->c_xchng_cd);
   fn_userlog(c_ServiceName,"c_prd_typ :%c:",ptr_st_pstn_actn->c_prd_typ);
   fn_userlog(c_ServiceName,"c_undrlyng :%s:",ptr_st_pstn_actn->c_undrlyng); 
   fn_userlog(c_ServiceName,"c_cntrct_tag :%c:",ptr_st_pstn_actn->c_cntrct_tag);
  }
	/*** Add starts in Ver 5.3 ***/
  if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog(c_ServiceName,"c_cln_mtch_accnt :%s: c_undrlyng :%s: c_cntrct_tag :%c:",ptr_st_pstn_actn->c_cln_mtch_accnt,ptr_st_pstn_actn->c_undrlyng,ptr_st_pstn_actn->c_cntrct_tag);
	}
	/*** Add ends in Ver 5.3 ***/
  EXEC SQL
  SELECT   count(1)
       INTO   :l_opn_cntrct_cnt
       FROM   FFP_FO_FUTURES_PSTN
      WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
        AND   FFP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
        AND   FFP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
        AND   FFP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
        AND   FFP_CNTRCT_TAG     = :ptr_st_pstn_actn->c_cntrct_tag
        AND   FFP_OPNPSTN_QTY    != 0;
  if ( ( SQLCODE != 0 ) &&
     ( SQLCODE != NO_DATA_FOUND ) )
  {
   fn_errlog( c_ServiceName, "S31045", SQLMSG, ptr_st_err_msg->c_err_msg );
   return FAILURE;
  }
  

  EXEC SQL
    SELECT
            decode(:ptr_st_pstn_actn->c_prd_typ,'P',fmm_thrshd_mrgn_prcnt*fmm_fp_multplr,fmm_min_mrgn_prcnt), 
            NVL(FMM_MIN_TRG_PRCNT,0),
            NVL(FMM_MIN_SPREAD_MRGN,0),
            NVL(FMM_SPRD_MIN_TRG_PRCNT,0)
    INTO    :d_min_margin_pctg,
            :d_ers_prcntg,
            :d_sprd_min_prcntg,
            :d_sprd_min_trg_prcnt
    FROM   FMM_FO_MRGN_MSTR
    WHERE  FMM_PRDCT_TYP = 'F'
    AND    FMM_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
    AND    FMM_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
    AND    FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
                                  FROM    FCB_FO_CLN_BSKT_ALLTD
                                  WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
                                                        FROM    CLM_CLNT_MSTR
                                                        WHERE   CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt)) ;
  if ( SQLCODE != 0 )
  {
   fn_userlog(c_ServiceName,"COULDN'T INSERT DATA INTO IMTM REPORT TABLE I");
   fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
   return -1;
  }

  /**** Commentd in Ver 3.5 ****
  EXEC SQL
  SELECT  EXG_CRRNT_STTS
    INTO :c_xchng_stts
    FROM exg_xchng_mstr 
   WHERE EXG_XCHNG_CD =:ptr_st_pstn_actn->c_xchng_cd;
  if ( SQLCODE != 0 )
  {
   fn_userlog(c_ServiceName,"COULDN'T INSERT DATA INTO IMTM REPORT TABLE I");
   fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
   return -1;
  }
  ***** Ver 3.5 Ends Here ****/

  if( l_opn_cntrct_cnt == 1 )
   {
    if( DEBUG_MSG_LVL_4 )			/*** Ver 5.3 Debug level changed to 4 from 3 ***/
    {
     fn_userlog(c_ServiceName,"Inside Normal Position");
    }

    EXEC SQL
    SELECT   FFP_EXPRY_DT,
             FFP_OPNPSTN_FLW,
             abs(FFP_OPNPSTN_QTY),
            /*** DECODE(:ptr_st_pstn_actn->l_actn_typ,'2',abs(FFP_MTM_OPN_VAL),abs(FFP_OPNPSTN_VAL)), ** Commented in Ver 3.5 ***/
             abs(NVL(FFP_MTM_OPN_VAL,0)),  /**** Ver 3.5 ***/
             FFP_INDSTK,
             FFP_EXER_TYP
       INTO   :c_expry_dt,
              :c_opn_pos_flw,
              :l_open_pos_qty,
              :d_opn_pos_val,
              :c_ctgry_indstk,
              :c_exrc_typ
       FROM   FFP_FO_FUTURES_PSTN
      WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
        AND   FFP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
        AND   FFP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
        AND   FFP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
        AND   FFP_CNTRCT_TAG     = :ptr_st_pstn_actn->c_cntrct_tag
        AND   FFP_OPNPSTN_QTY    != 0;
     if ( ( SQLCODE != 0 ) &&
      ( SQLCODE != NO_DATA_FOUND ) )
     {
      fn_errlog( c_ServiceName, "S31050", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
     }

    d_total_margin = 0;
    EXEC SQL
     SELECT sum( nvl(FUP_UTRD_MRGN,0) + nvl(FUP_ADD_MRGN_VAL,0))
       INTO :d_total_margin
       FROM FUP_FUT_UNDRLYNG_PSTN
      WHERE FUP_CLM_MTCH_ACCNT =:ptr_st_pstn_actn->c_cln_mtch_accnt
        AND FUP_XCHNG_CD  =:ptr_st_pstn_actn->c_xchng_cd
        AND FUP_PRDCT_TYP =:ptr_st_pstn_actn->c_prd_typ
        AND FUP_UNDRLYNG  =:ptr_st_pstn_actn->c_undrlyng
        AND FUP_CNTRCT_TAG =:ptr_st_pstn_actn->c_cntrct_tag
        AND FUP_UOPNPSTN_QTY != 0;
    if ( ( SQLCODE != 0 ) &&
      ( SQLCODE != NO_DATA_FOUND ) )
     {
      fn_errlog( c_ServiceName, "S31055", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
     }

    if( DEBUG_MSG_LVL_4 )			/*** Ver 5.3 Debug level changed to 4 from 3 ***/
    {   
     fn_userlog(c_ServiceName,"Minimum margin percentage :%lf:",d_min_margin_pctg);
     fn_userlog(c_ServiceName,"ERS margin percentage :%lf:",d_ers_prcntg);
     fn_userlog(c_ServiceName,"Executed rate :%ld:",ptr_st_pstn_actn->l_exec_rt);
     fn_userlog(c_ServiceName,"Margin blocked :%lf:",d_total_margin);
     fn_userlog(c_ServiceName,"Open Position Qty :%ld:",l_open_pos_qty);
     fn_userlog(c_ServiceName,"Open Position Flw :%c:",c_opn_pos_flw);
     fn_userlog(c_ServiceName,"Open Position val :%lf:",d_opn_pos_val);
    }
		/*** add starts in Ver 5.3 ***/
    if( DEBUG_MSG_LVL_4 )
		{
			fn_userlog(c_ServiceName,"Open Position Qty :%ld: Flw :%c: val :%lf: and Margin blocked :%lf:",l_open_pos_qty,c_opn_pos_flw,d_opn_pos_val,d_total_margin);
		}
		/*** add ends in Ver 5.3 ***/

    if(c_opn_pos_flw == 'B')
    {
     d_wght_price = (double) d_opn_pos_val / l_open_pos_qty;

     d_trgr_prc = d_wght_price -((d_total_margin - (d_wght_price*l_open_pos_qty*d_min_margin_pctg/100))/(double)l_open_pos_qty);
     if( ptr_st_pstn_actn->c_prd_typ !='P' )
     {
       d_ers_trgr_prc = d_wght_price -((d_total_margin - (d_wght_price*l_open_pos_qty*d_ers_prcntg/100))/(double)l_open_pos_qty);
     }

     i_up_down = UPPER;

    }
    else if(c_opn_pos_flw == 'S')
    {
     d_wght_price = (double) d_opn_pos_val / l_open_pos_qty;
     d_trgr_prc = d_wght_price + ((d_total_margin - (d_wght_price * l_open_pos_qty*d_min_margin_pctg/100))/(double)l_open_pos_qty);
     if( ptr_st_pstn_actn->c_prd_typ !='P' )
     {
       d_ers_trgr_prc = d_wght_price + ((d_total_margin - (d_wght_price * l_open_pos_qty*d_ers_prcntg/100))/(double)l_open_pos_qty);
     }
     i_up_down = LOWER;
    }
    else
    {
     fn_userlog(c_ServiceName,"Invalid Open Position Flw");
     return -1;
    }

    d_trigger_prc = 0.0;
    d_erstrigger_prc = 0.0;
  
    i_tck_sz=0;

   /*** Commented in Ver 3.0 *** 
 
   EXEC SQL
      SELECT FCM_TCK_SZ
        INTO :i_tck_sz
        FROM FCM_FO_CNTRCT_MSTR
       WHERE FCM_XCHNG_CD=:ptr_st_pstn_actn->c_xchng_cd
         AND FCM_PRDCT_TYP =DECODE(:ptr_st_pstn_actn->c_prd_typ,'P','F',:ptr_st_pstn_actn->c_prd_typ)
         AND FCM_UNDRLYNG  =:ptr_st_pstn_actn->c_undrlyng
         AND FCM_EXPRY_DT  =:c_expry_dt
         AND FCM_CNTRCT_TAG =:ptr_st_pstn_actn->c_cntrct_tag;
 
   ***/
 
   /*** Ver 3.0 Starts ***/

    EXEC SQL
      SELECT FTQ_TCK_SZ
        INTO :i_tck_sz
        FROM FTQ_FO_TRD_QT
       WHERE FTQ_XCHNG_CD=:ptr_st_pstn_actn->c_xchng_cd
         AND FTQ_PRDCT_TYP =DECODE(:ptr_st_pstn_actn->c_prd_typ,'P','F',:ptr_st_pstn_actn->c_prd_typ)
         AND FTQ_UNDRLYNG  =:ptr_st_pstn_actn->c_undrlyng
         AND FTQ_EXPRY_DT  =:c_expry_dt
         AND FTQ_CNTRCT_TAG =:ptr_st_pstn_actn->c_cntrct_tag;

    /*** Ver 3.0 Ends   ***/ 
 
   if ( ( SQLCODE != 0 ) &&
      ( SQLCODE != NO_DATA_FOUND ) )
     {
      fn_errlog( c_ServiceName, "S31060", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
     }
     
     if(SQLCODE == NO_DATA_FOUND)
     {
       i_tck_sz=5;
     } 

    i_returncode = fn_nearest_paise_fno( c_ServiceName,
                                   d_trgr_prc,
                                   i_tck_sz,
                                   i_up_down,
                                   c_err_msg,
                                   &d_trigger_prc );
    if ( i_returncode != 0 )
    {
     fn_errlog( c_ServiceName, "S31065",LIBMSG,c_err_msg);
     return FAILURE;
    }
  
    if( ptr_st_pstn_actn->c_prd_typ !='P' )
    {
     i_returncode = fn_nearest_paise_fno( c_ServiceName,
                                   d_ers_trgr_prc,
                                   i_tck_sz,
                                   i_up_down,
                                   c_err_msg,
                                   &d_erstrigger_prc );
     if ( i_returncode != 0 )
     {
      fn_errlog( c_ServiceName, "S31070",LIBMSG,c_err_msg);
      return FAILURE;
     }
    }

    if (strcmp(ptr_st_pstn_actn->c_xchng_cd,"NFO") == 0 )
    {

     EXEC SQL
      SELECT  SEM_MAP_VL
         INTO  :c_sem_map_vl
         FROM  SEM_STCK_MAP
         WHERE SEM_STCK_CD = :ptr_st_pstn_actn->c_undrlyng
         AND   SEM_ENTTY = decode(:c_ctgry_indstk,'I','12',1);

    }
    else if (strcmp(ptr_st_pstn_actn->c_xchng_cd,"BFO") == 0 )
    {
     EXEC SQL
      SELECT  SEM_MAP_VL
        INTO  :c_sem_map_vl
        FROM  SEM_STCK_MAP
        WHERE SEM_STCK_CD = :ptr_st_pstn_actn->c_undrlyng
        AND   SEM_ENTTY = decode(:c_ctgry_indstk,'I','12',6);
    }
    else
    {
     fn_errlog( c_ServiceName, "S31075","Invalid Exchange code",ptr_st_err_msg->c_err_msg);
     return FAILURE;
    }

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
     fn_errlog( c_ServiceName, "S31080",SQLMSG,ptr_st_err_msg->c_err_msg);
     return FAILURE;
    }

    rtrim(c_sem_map_vl);
    rtrim(c_expry_dt);
    if( c_ctgry_indstk == 'S' )
    {
     sprintf(c_contract_desc,"%sEQ~F:%s",c_sem_map_vl,c_expry_dt);
    }
    else
    {
     sprintf(c_contract_desc,"%s~F:%s",c_sem_map_vl,c_expry_dt);
    }
    EXEC SQL
     UPDATE  FFP_FO_FUTURES_PSTN
     SET FFP_TRG_PRC = :d_trigger_prc,
         FFP_MIN_TRG_PRC = :d_erstrigger_prc
     WHERE FFP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
     AND     FFP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
     AND     FFP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
     AND     FFP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
     AND     FFP_EXPRY_DT        = :c_expry_dt
     AND     FFP_CNTRCT_TAG      = :ptr_st_pstn_actn->c_cntrct_tag;

    if( SQLCODE != 0 )
    {
     fn_errlog( c_ServiceName, "S31085",SQLMSG,ptr_st_err_msg->c_err_msg);
     return FAILURE;
    }
  
   
  /** if(c_xchng_stts == 'O' ) *** Ver 3.5 ****
   ***{ ******* Ver 3.5 *******/
    EXEC SQL
    UPDATE FMD_FO_MTM_DTLS
    SET FMD_LMT_RT=:d_wght_price,
        FMD_TRGR_RT= :d_trigger_prc,
        FMD_MIN_TRGR_RT= :d_erstrigger_prc,
        FMD_ORDR_FLW = :c_opn_pos_flw,
        FMD_STATUS = 'N',
				FMD_PSTN_TYP = :c_pstn_typ,          /*** Ver 4.0 **/
        FMD_TRG_SYSTM= sysdate                   /*** Ver 5.1 ***/
    WHERE FMD_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
    AND FMD_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
    AND FMD_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ
    AND FMD_INDSTK = :c_ctgry_indstk
    AND FMD_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
    AND FMD_EXPRY_DT = :c_expry_dt
    AND FMD_CNTRCT_TAG = :ptr_st_pstn_actn->c_cntrct_tag
    AND FMD_SEM_VAL !='SYSORDSQOFF';
    if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
     fn_errlog( c_ServiceName, "S31090",SQLMSG,ptr_st_err_msg->c_err_msg);
     return FAILURE;
    }
    if(SQLCODE == NO_DATA_FOUND)
    {

     EXEC SQL
      INSERT INTO FMD_FO_MTM_DTLS
      (
        FMD_CLM_MTCH_ACCNT,
        FMD_XCHNG_CD,
        FMD_PRDCT_TYP,
        FMD_INDSTK,
        FMD_UNDRLYNG,
        FMD_EXPRY_DT,
        FMD_EXER_TYP,
        FMD_OPT_TYP,
        FMD_STRK_PRC,
        FMD_ORDR_FLW,
        FMD_CNTRCT_TAG,
        FMD_CNTRCT_DESC,
        FMD_STATUS,
        FMD_LMT_RT,
        FMD_TRGR_RT,
        FMD_MIN_TRGR_RT,
        FMD_SEQUENCE,
        FMD_SEM_VAL,
				FMD_PSTN_TYP,   /** ver 4.0 **/
        FMD_TRG_SYSTM       /** ver 5.1 **/
      )
      VALUES
      (
        :ptr_st_pstn_actn->c_cln_mtch_accnt,
        :ptr_st_pstn_actn->c_xchng_cd,
        :ptr_st_pstn_actn->c_prd_typ,
        :c_ctgry_indstk,
        :ptr_st_pstn_actn->c_undrlyng,
        :c_expry_dt,
        :c_exrc_typ,
        '*',
        0,
        :c_opn_pos_flw,
        :ptr_st_pstn_actn->c_cntrct_tag,
        :c_contract_desc,
        'N',
        :d_wght_price,
        :d_trigger_prc,
        :d_erstrigger_prc,
        FO_AUTO_MTM_SEQ.NEXTVAL,
        :c_sem_map_vl,
				:c_pstn_typ,   /** ver 4.0 **/
        sysdate        /** ver 5.1 **/
      );
      if( SQLCODE != 0 )
     {
      fn_errlog( c_ServiceName, "S31095",SQLMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
     }
    }
   /****} **** Ver 3.5 ***/
  }
  else if( l_opn_cntrct_cnt == 2 )
  {
	  c_pstn_typ = 'S' ; /** ver 4.0 **/	

  	if (DEBUG_MSG_LVL_4)       /*** Ver 3.8 ***/ /*** Ver 5.3 Debug level changed to 4 from 3 ***/
  	{
      fn_userlog(c_ServiceName,"Inside l_opn_cntrct_cnt == 2 ");
		}
     EXEC SQL
     SELECT  /*** DECODE(:ptr_st_pstn_actn->l_actn_typ,'2',abs(FFP_MTM_OPN_VAL),abs(FFP_OPNPSTN_VAL)), ** Ver 3.5 **/
             abs(NVL(FFP_MTM_OPN_VAL,0)),   /**** Ver 3.5 ***/
             abs(FFP_OPNPSTN_QTY),
             FFP_EXPRY_DT,
             FFP_OPNPSTN_FLW,
             FFP_INDSTK,
             FFP_EXER_TYP
      INTO    :d_near_opn_val,
              :li_near_opnpstn_qty,
              :c_near_expry_dt,
              :c_near_pos_flw,
              :c_ctgry_indstk,
              :c_exrc_typ
     FROM    FFP_FO_FUTURES_PSTN
     WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
     AND     FFP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
     AND     FFP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
     AND     FFP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
     AND     FFP_CNTRCT_TAG     = :ptr_st_pstn_actn->c_cntrct_tag
     AND     FFP_EXPRY_DT       =
           ( SELECT  MIN(FFP_EXPRY_DT)
             FROM    FFP_FO_FUTURES_PSTN
             WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
             AND     FFP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
             AND     FFP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
             AND     FFP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
             AND     FFP_CNTRCT_TAG     = :ptr_st_pstn_actn->c_cntrct_tag
             AND     FFP_OPNPSTN_QTY    != 0 );

     if ( ( SQLCODE != 0 ) &&
         ( SQLCODE != NO_DATA_FOUND ) )
     {
      fn_errlog( c_ServiceName, "S31100", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
     }
    
     EXEC SQL
     SELECT  /*** DECODE(:ptr_st_pstn_actn->l_actn_typ,'2',abs(FFP_MTM_OPN_VAL),abs(FFP_OPNPSTN_VAL)), ** Ver 3.5 **/
             abs(NVL(FFP_MTM_OPN_VAL,0)), /*** Ver 3.5 ***/
             abs(FFP_OPNPSTN_QTY),
             FFP_EXPRY_DT,
             FFP_OPNPSTN_FLW,
             FFP_INDSTK,
             FFP_EXER_TYP
       INTO    :d_mid_opn_val,
               :li_mid_opnpstn_qty,
               :c_mid_expry_dt,
               :c_mid_pos_flw,
               :c_ctgry_indstk,
               :c_exrc_typ
     FROM    FFP_FO_FUTURES_PSTN
     WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
     AND     FFP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
     AND     FFP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
     AND     FFP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
     AND     FFP_CNTRCT_TAG     = :ptr_st_pstn_actn->c_cntrct_tag
     AND     FFP_EXPRY_DT       =
           ( SELECT  MAX(FFP_EXPRY_DT)
             FROM    FFP_FO_FUTURES_PSTN
             WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
             AND     FFP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
             AND     FFP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
             AND     FFP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
             AND     FFP_CNTRCT_TAG     = :ptr_st_pstn_actn->c_cntrct_tag
             AND     FFP_OPNPSTN_QTY    != 0 );

    if ( ( SQLCODE != 0 ) &&
       ( SQLCODE != NO_DATA_FOUND ) )
    {
     fn_errlog( c_ServiceName, "S31105", SQLMSG, ptr_st_err_msg->c_err_msg );
     return FAILURE;
    }

    rtrim(c_near_expry_dt);
    rtrim(c_mid_expry_dt);
    d_total_margin = 0;
  
    if( ( c_near_pos_flw == 'B' && c_mid_pos_flw == 'B' ) ||
        ( c_near_pos_flw == 'S' && c_mid_pos_flw == 'S' )
      )
    {
      d_total_margin = 0;
      EXEC SQL
      SELECT sum( nvl(FUP_UTRD_MRGN,0) + nvl(FUP_ADD_MRGN_VAL,0))
        INTO :d_total_margin
        FROM FUP_FUT_UNDRLYNG_PSTN
       WHERE FUP_CLM_MTCH_ACCNT =:ptr_st_pstn_actn->c_cln_mtch_accnt
         AND FUP_XCHNG_CD  =:ptr_st_pstn_actn->c_xchng_cd
         AND FUP_PRDCT_TYP =:ptr_st_pstn_actn->c_prd_typ
         AND FUP_UNDRLYNG  =:ptr_st_pstn_actn->c_undrlyng
         AND FUP_CNTRCT_TAG =:ptr_st_pstn_actn->c_cntrct_tag
         AND FUP_UOPNPSTN_QTY != 0;
      if ( ( SQLCODE != 0 ) &&
       ( SQLCODE != NO_DATA_FOUND ) )
      {
       fn_errlog( c_ServiceName, "S31110", SQLMSG, ptr_st_err_msg->c_err_msg );
       return FAILURE;
      }

      l_tot_open_qty = li_mid_opnpstn_qty +  li_near_opnpstn_qty;
      d_near_month_WAP = (double) d_near_opn_val / li_near_opnpstn_qty;
      d_mid_month_WAP = (double) d_mid_opn_val / li_mid_opnpstn_qty;
      d_near_cntrct_mrgn =  ((double) li_near_opnpstn_qty / l_tot_open_qty ) * d_total_margin;
      d_mid_cntrct_mrgn = ((double) li_mid_opnpstn_qty / l_tot_open_qty ) * d_total_margin;
      d_near_min_mrgn = d_near_month_WAP * li_near_opnpstn_qty * (double) ( (double)d_min_margin_pctg / 100 );
      d_near_ersmin_mrgn = d_near_month_WAP * li_near_opnpstn_qty * (double) ( (double)d_ers_prcntg/ 100 );
      d_mid_min_mrgn = d_mid_month_WAP * li_mid_opnpstn_qty *  ((double) d_min_margin_pctg / 100 );
      d_mid_ersmin_mrgn = d_mid_month_WAP * li_mid_opnpstn_qty *  ((double) d_ers_prcntg/ 100 );


     if(DEBUG_MSG_LVL_4)
     {
      fn_userlog(c_ServiceName,"d_total_margin :%lf:",d_total_margin);
      fn_userlog(c_ServiceName,"l_tot_open_qty :%ld:",l_tot_open_qty);
      fn_userlog(c_ServiceName,"d_near_month_WAP :%lf:",d_near_month_WAP);
      fn_userlog(c_ServiceName,"d_mid_month_WAP  :%lf:",d_mid_month_WAP);
      fn_userlog(c_ServiceName,"d_near_cntrct_mrgn :%lf:",d_near_cntrct_mrgn);
      fn_userlog(c_ServiceName,"d_mid_cntrct_mrgn  :%lf:",d_mid_cntrct_mrgn);
      fn_userlog(c_ServiceName,"d_near_min_mrgn    :%lf:",d_near_min_mrgn);
      fn_userlog(c_ServiceName,"d_near_ersmin_mrgn :%lf:",d_near_ersmin_mrgn);
      fn_userlog(c_ServiceName,"d_mid_min_mrgn     :%lf:",d_mid_min_mrgn);
      fn_userlog(c_ServiceName,"d_mid_ersmin_mrgn  :%lf:",d_mid_ersmin_mrgn);
     }

     if( c_near_pos_flw == 'B'  )
     {
      d_near_trgr_prc =d_near_month_WAP - (( d_near_cntrct_mrgn - d_near_min_mrgn ) / li_near_opnpstn_qty);
      d_near_erstrgr_prc =d_near_month_WAP - (( d_near_cntrct_mrgn - d_near_ersmin_mrgn ) / li_near_opnpstn_qty);
      i_up_down = UPPER;
     }
     else
     {
      d_near_trgr_prc =d_near_month_WAP + (( d_near_cntrct_mrgn - d_near_min_mrgn ) / li_near_opnpstn_qty);
      d_near_erstrgr_prc =d_near_month_WAP + (( d_near_cntrct_mrgn - d_near_ersmin_mrgn ) / li_near_opnpstn_qty);
      i_up_down = LOWER;
     }

     if( c_mid_pos_flw == 'B' )
     {
       d_mid_trgr_prc = d_mid_month_WAP - (( d_mid_cntrct_mrgn - d_mid_min_mrgn ) / li_mid_opnpstn_qty);
       d_mid_erstrgr_prc = d_mid_month_WAP - (( d_mid_cntrct_mrgn - d_mid_ersmin_mrgn ) / li_mid_opnpstn_qty);
       i_up_down = UPPER;
     }
     else
     {
      d_mid_trgr_prc = d_mid_month_WAP + (( d_mid_cntrct_mrgn - d_mid_min_mrgn ) / li_mid_opnpstn_qty);
      d_mid_erstrgr_prc = d_mid_month_WAP + (( d_mid_cntrct_mrgn - d_mid_ersmin_mrgn ) / li_mid_opnpstn_qty);
      i_up_down = LOWER;
     }

     d_near_trigger_prc = 0;
     d_near_erstrigger_prc = 0;

     d_trigger_prc = 0.0;

     i_tck_sz=0;

    /*** Commented in Ver 3.0 ***
 
     EXEC SQL
      SELECT FCM_TCK_SZ
        INTO :i_tck_sz
        FROM FCM_FO_CNTRCT_MSTR
       WHERE FCM_XCHNG_CD=:ptr_st_pstn_actn->c_xchng_cd
         AND FCM_PRDCT_TYP = DECODE(:ptr_st_pstn_actn->c_prd_typ,'P','F',:ptr_st_pstn_actn->c_prd_typ)
         AND FCM_UNDRLYNG  =:ptr_st_pstn_actn->c_undrlyng
         AND FCM_EXPRY_DT  =:c_near_expry_dt
         AND FCM_CNTRCT_TAG =:ptr_st_pstn_actn->c_cntrct_tag;
 
    ***/
 
    /*** Ver 3.0 Starts ***/
      
      EXEC SQL
      SELECT FTQ_TCK_SZ
        INTO :i_tck_sz
        FROM FTQ_FO_TRD_QT     
       WHERE FTQ_XCHNG_CD=:ptr_st_pstn_actn->c_xchng_cd
         AND FTQ_PRDCT_TYP = DECODE(:ptr_st_pstn_actn->c_prd_typ,'P','F',:ptr_st_pstn_actn->c_prd_typ)
         AND FTQ_UNDRLYNG  =:ptr_st_pstn_actn->c_undrlyng
         AND FTQ_EXPRY_DT  =:c_near_expry_dt
         AND FTQ_CNTRCT_TAG =:ptr_st_pstn_actn->c_cntrct_tag;

     /*** Ver 3.0 Ends   ***/  
 
    if ( ( SQLCODE != 0 ) &&
      ( SQLCODE != NO_DATA_FOUND ) )
     {
      fn_errlog( c_ServiceName, "S31115", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
     }

     if(SQLCODE == NO_DATA_FOUND)
     {
       i_tck_sz=5;
     }

     i_returncode = fn_nearest_paise_fno( c_ServiceName,
                                      d_near_trgr_prc,
                                      i_tck_sz,
                                      i_up_down,
                                      c_err_msg,
                                      &d_near_trigger_prc);
     if ( i_returncode != 0 )
     {
       fn_errlog( c_ServiceName, "S31120",LIBMSG,c_err_msg);
       return FAILURE;
     }
    
     i_returncode = fn_nearest_paise_fno( c_ServiceName,
                                      d_near_erstrgr_prc,
                                      i_tck_sz,
                                      i_up_down,
                                      c_err_msg,
                                      &d_near_erstrigger_prc);
     if ( i_returncode != 0 )
     {
       fn_errlog( c_ServiceName, "S31125",LIBMSG,c_err_msg);
       return FAILURE;
     }

     d_mid_trigger_prc=0;
     d_mid_erstrigger_prc=0;
     i_returncode = fn_nearest_paise_fno( c_ServiceName,
                                      d_mid_trgr_prc,
                                      i_tck_sz,
                                      i_up_down,
                                      c_err_msg,
                                      &d_mid_trigger_prc);
     if ( i_returncode != 0 )
     {
       fn_errlog( c_ServiceName, "S31130",LIBMSG,c_err_msg);
       return FAILURE;
     }

     i_returncode = fn_nearest_paise_fno( c_ServiceName,
                                      d_mid_erstrgr_prc,
                                      i_tck_sz,
                                      i_up_down,
                                      c_err_msg,
                                      &d_mid_erstrigger_prc);
     if ( i_returncode != 0 )
     {
       fn_errlog( c_ServiceName, "S31135",LIBMSG,c_err_msg);
       return FAILURE;
     }

     if (strcmp(ptr_st_pstn_actn->c_xchng_cd,"NFO") == 0 )
     {

      EXEC SQL
      SELECT  SEM_MAP_VL
         INTO  :c_sem_map_vl
         FROM  SEM_STCK_MAP
         WHERE SEM_STCK_CD = :ptr_st_pstn_actn->c_undrlyng
         AND   SEM_ENTTY = decode(:c_ctgry_indstk,'I','12',1);

     }
     else if (strcmp(ptr_st_pstn_actn->c_xchng_cd,"BFO") == 0 )
     {
      EXEC SQL
      SELECT  SEM_MAP_VL
        INTO  :c_sem_map_vl
        FROM  SEM_STCK_MAP
        WHERE SEM_STCK_CD = :ptr_st_pstn_actn->c_undrlyng
        AND   SEM_ENTTY = decode(:c_ctgry_indstk,'I','12',6);
     }
     else
     {
      fn_errlog( c_ServiceName, "S31140","Invalid Exchange code",ptr_st_err_msg->c_err_msg);
      return FAILURE;
     }

     if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
     {
      fn_errlog( c_ServiceName, "S31145",SQLMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
     }

     rtrim(c_sem_map_vl);
     rtrim(c_near_expry_dt);
     if( c_ctgry_indstk == 'S' )
     {
      sprintf(c_contract_desc,"%sEQ~F:%s",c_sem_map_vl,c_near_expry_dt);
     }
     else
     {
      sprintf(c_contract_desc,"%s~F:%s",c_sem_map_vl,c_near_expry_dt);
     }

     EXEC SQL
     UPDATE  FFP_FO_FUTURES_PSTN
     SET FFP_TRG_PRC = :d_near_trigger_prc,
         FFP_MIN_TRG_PRC = :d_near_erstrigger_prc
     WHERE FFP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
     AND     FFP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
     AND     FFP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
     AND     FFP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
     AND     FFP_EXPRY_DT        = :c_near_expry_dt
     AND     FFP_CNTRCT_TAG      = :ptr_st_pstn_actn->c_cntrct_tag;

     if( SQLCODE != 0 )
     {
      fn_errlog( c_ServiceName, "S31150",SQLMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
     }

   /*** if(c_xchng_stts == 'O' ) ****
    *** { **** Ver 3.5 ***/
     EXEC SQL
     UPDATE FMD_FO_MTM_DTLS
        SET FMD_LMT_RT=:d_near_month_WAP,
            FMD_TRGR_RT=  :d_near_trigger_prc,
            FMD_MIN_TRGR_RT =  :d_near_erstrigger_prc,
            FMD_ORDR_FLW = :c_near_pos_flw,
            FMD_STATUS = 'N',
	  				FMD_PSTN_TYP  = :c_pstn_typ,   /** ver 4.0 **/
            FMD_TRG_SYSTM = sysdate            /** ver 5.1 **/
      WHERE FMD_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
        AND FMD_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
        AND FMD_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ
        AND FMD_INDSTK = :c_ctgry_indstk
        AND FMD_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
        AND FMD_EXPRY_DT = :c_near_expry_dt
        AND FMD_CNTRCT_TAG = :ptr_st_pstn_actn->c_cntrct_tag
        AND FMD_SEM_VAL !='SYSORDSQOFF';
     if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
     {
       fn_errlog( c_ServiceName, "S31155",SQLMSG,ptr_st_err_msg->c_err_msg);
       return FAILURE;
     }

     if(SQLCODE == NO_DATA_FOUND)
     {

      EXEC SQL
      INSERT INTO FMD_FO_MTM_DTLS
      (
        FMD_CLM_MTCH_ACCNT,
        FMD_XCHNG_CD,
        FMD_PRDCT_TYP,
        FMD_INDSTK,
        FMD_UNDRLYNG,
        FMD_EXPRY_DT,
        FMD_EXER_TYP,
        FMD_OPT_TYP,
        FMD_STRK_PRC,
        FMD_ORDR_FLW,
        FMD_CNTRCT_TAG,
        FMD_CNTRCT_DESC,
        FMD_STATUS,
        FMD_LMT_RT,
        FMD_TRGR_RT,
        FMD_MIN_TRGR_RT,
        FMD_SEQUENCE,
        FMD_SEM_VAL,
				FMD_PSTN_TYP,     /** ver 4.0 **/
        FMD_TRG_SYSTM         /** ver 5.1 **/
      )
      VALUES
      (
        :ptr_st_pstn_actn->c_cln_mtch_accnt,
        :ptr_st_pstn_actn->c_xchng_cd,
        :ptr_st_pstn_actn->c_prd_typ,
        :c_ctgry_indstk,
        :ptr_st_pstn_actn->c_undrlyng,
        :c_near_expry_dt,
        :c_exrc_typ,
        '*',
        0,
        :c_near_pos_flw,
        :ptr_st_pstn_actn->c_cntrct_tag,
        :c_contract_desc,
        'N',
        :d_near_month_WAP,
        :d_near_trigger_prc,
        :d_near_erstrigger_prc,
        FO_AUTO_MTM_SEQ.NEXTVAL,
        :c_sem_map_vl,
				:c_pstn_typ,    /** ver 4.0 **/
        sysdate         /** ver 5.1 **/
      );

      if( SQLCODE != 0 )
      {
       fn_errlog( c_ServiceName, "S31160",SQLMSG,ptr_st_err_msg->c_err_msg);
       return FAILURE;
     }
    }
  /**** } *** Ver 3.5 ****/
 
   MEMSET(c_contract_desc);
   rtrim(c_near_expry_dt);
   rtrim(c_mid_expry_dt);
   if( c_ctgry_indstk == 'S' )
   {
    sprintf(c_contract_desc,"%sEQ~F:%s",c_sem_map_vl,c_mid_expry_dt);
   }
   else
   {
    sprintf(c_contract_desc,"%s~F:%s",c_sem_map_vl,c_mid_expry_dt);
   }

   EXEC SQL
     UPDATE  FFP_FO_FUTURES_PSTN
     SET FFP_TRG_PRC = :d_mid_trigger_prc,
         FFP_MIN_TRG_PRC = :d_mid_erstrigger_prc
     WHERE FFP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
     AND     FFP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
     AND     FFP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
     AND     FFP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
     AND     FFP_EXPRY_DT        = :c_mid_expry_dt
     AND     FFP_CNTRCT_TAG      = :ptr_st_pstn_actn->c_cntrct_tag;

   if( SQLCODE != 0 )
   {
    fn_errlog( c_ServiceName, "S31165",SQLMSG,ptr_st_err_msg->c_err_msg);
    return FAILURE;
   }
 
   /*** if( c_xchng_stts == 'O' ) ***Ver 3.5 ***
    *** { ***** Ver 3.5 ***/ 
     EXEC SQL
     UPDATE FMD_FO_MTM_DTLS
        SET FMD_LMT_RT= :d_mid_month_WAP,
            FMD_TRGR_RT=  :d_mid_trigger_prc,
            FMD_MIN_TRGR_RT=  :d_mid_erstrigger_prc,
            FMD_ORDR_FLW = :c_mid_pos_flw,
            FMD_STATUS = 'N',
        		FMD_PSTN_TYP = :c_pstn_typ, 						/** ver 4.0 **/
            FMD_TRG_SYSTM = sysdate                     /** ver 5.1 **/
      WHERE FMD_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
        AND FMD_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
        AND FMD_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ
        AND FMD_INDSTK = :c_ctgry_indstk
        AND FMD_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
        AND FMD_EXPRY_DT = :c_mid_expry_dt
        AND FMD_CNTRCT_TAG = :ptr_st_pstn_actn->c_cntrct_tag
        AND FMD_SEM_VAL !='SYSORDSQOFF';
     if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
     {
       fn_errlog( c_ServiceName, "S31170",SQLMSG,ptr_st_err_msg->c_err_msg);
       return FAILURE;
     }
     if(SQLCODE == NO_DATA_FOUND)
     {
       EXEC SQL
      INSERT INTO FMD_FO_MTM_DTLS
      (
        FMD_CLM_MTCH_ACCNT,
        FMD_XCHNG_CD,
        FMD_PRDCT_TYP,
        FMD_INDSTK,
        FMD_UNDRLYNG,
        FMD_EXPRY_DT,
        FMD_EXER_TYP,
        FMD_OPT_TYP,
        FMD_STRK_PRC,
        FMD_ORDR_FLW,
        FMD_CNTRCT_TAG,
        FMD_CNTRCT_DESC,
        FMD_STATUS,
        FMD_LMT_RT,
        FMD_TRGR_RT,
        FMD_MIN_TRGR_RT,
        FMD_SEQUENCE,
        FMD_SEM_VAL,
				FMD_PSTN_TYP,    /** ver 4.0 **/
        FMD_TRG_SYSTM        /** ver 5.1 **/
      )
      VALUES
      (
        :ptr_st_pstn_actn->c_cln_mtch_accnt,
        :ptr_st_pstn_actn->c_xchng_cd,
        :ptr_st_pstn_actn->c_prd_typ,
        :c_ctgry_indstk,
        :ptr_st_pstn_actn->c_undrlyng,
        :c_mid_expry_dt,
        :c_exrc_typ,
        '*',
        0,
        :c_mid_pos_flw,
        :ptr_st_pstn_actn->c_cntrct_tag,
        :c_contract_desc,
        'N',
        :d_mid_month_WAP,
        :d_mid_trigger_prc,
        :d_mid_erstrigger_prc,
        FO_AUTO_MTM_SEQ.NEXTVAL,
        :c_sem_map_vl,
				:c_pstn_typ,     /** ver 4.0 **/
        sysdate          /** ver 5.1 **/ 
      );

      if( SQLCODE != 0 )
      {
       fn_errlog( c_ServiceName, "S31175",SQLMSG,ptr_st_err_msg->c_err_msg);
       return FAILURE;
     }
    }
  /**** } **** Ver 3.5 ***/ 

   }
   else
   {
      /*** Spread Case ***/
    if( DEBUG_MSG_LVL_4 )	/*** Ver 5.3 Debug level changed to 4 from 3 ***/
    {
     fn_userlog(c_ServiceName,"Inside Spread Position ");
    }

    /***** if ( l_open_pos_qty == 0 )  ** Ver 3.4 ** taken below ***
    ******{ ***************
      fn_userlog(c_ServiceName,"No open position exists");
      return SUCCESS;
    **** } ****************** Ver 3.4 Ends Here ********************/

    d_total_margin = 0;
    EXEC SQL
    SELECT nvl(FUP_UEXCTD_MRGN,0) ,
           nvl(FUP_ADD_MRGN_VAL,0),
           abs(nvl(FUP_UOPNPSTN_QTY,0)),
           /*** DECODE(:ptr_st_pstn_actn->l_actn_typ,'2',abs(nvl(FUP_UMTM_OPN_VAL,0)),abs(nvl(FUP_UOPNPSTN_VAL,0))), ** ver 3.5 **/
           abs(nvl(FUP_UMTM_OPN_VAL,0)), /*** Ver 3.5 ***/
           FUP_UOPNPSTN_FLW,
           NVL(FUP_USPREAD_MRGN,0)
      INTO :d_exctd_margin,
           :d_add_margin,
           :l_open_pos_qty,
           :d_org_opn_val,
           :c_opn_pos_flw,
           :d_sprd_exe_mrgn
      FROM FUP_FUT_UNDRLYNG_PSTN
     WHERE FUP_CLM_MTCH_ACCNT =:ptr_st_pstn_actn->c_cln_mtch_accnt
       AND FUP_XCHNG_CD  =:ptr_st_pstn_actn->c_xchng_cd
       AND FUP_PRDCT_TYP =:ptr_st_pstn_actn->c_prd_typ
       AND FUP_UNDRLYNG  =:ptr_st_pstn_actn->c_undrlyng
       AND FUP_CNTRCT_TAG =:ptr_st_pstn_actn->c_cntrct_tag
       AND FUP_UOPNPSTN_QTY != 0;
    if ( ( SQLCODE != 0 ) &&
     ( SQLCODE != NO_DATA_FOUND ) )
    {
     fn_errlog( c_ServiceName, "S31180", SQLMSG, ptr_st_err_msg->c_err_msg );
     return FAILURE;
    }

    MEMSET(c_expry_dt);

    if ( l_open_pos_qty == 0 )  /** Ver 3.4 **/
    {
  		if (DEBUG_MSG_LVL_4)       /*** Ver 3.8 ***/ /*** Ver 5.3 Debug level changed to 4 from 3 ***/
  		{
      	fn_userlog(c_ServiceName,"No open position exists");
			}
      return SUCCESS;
    }

    d_total_margin = d_exctd_margin + d_add_margin ;

    if( li_near_opnpstn_qty > li_mid_opnpstn_qty )
    {
      d_min_margin = (double) l_open_pos_qty * ( d_near_opn_val / li_near_opnpstn_qty ) * ( d_min_margin_pctg /100 );
      d_min_ersmargin = (double) l_open_pos_qty * ( d_near_opn_val / li_near_opnpstn_qty ) * ( d_ers_prcntg /100 );
      d_init_min_mrgndiff =  d_total_margin - d_min_margin;
      d_init_min_ersmrgndiff = d_total_margin - d_min_ersmargin;
      d_price_diff = (double) d_init_min_mrgndiff / l_open_pos_qty;
      d_ersprice_diff = (double) d_init_min_ersmrgndiff / l_open_pos_qty;
      d_cntrct_wght_price = (double) d_near_opn_val / li_near_opnpstn_qty;
      strcpy(c_expry_dt,(char*)c_near_expry_dt); 
      l_sprd_qty = li_mid_opnpstn_qty;
      c_naked_leg = 'N';
    }
    else
    {
     d_min_margin = ( double) l_open_pos_qty * ( d_mid_opn_val / li_mid_opnpstn_qty ) * ( d_min_margin_pctg /100 );
     d_min_ersmargin = ( double) l_open_pos_qty * ( d_mid_opn_val / li_mid_opnpstn_qty ) * ( d_ers_prcntg /100 );
     d_init_min_mrgndiff = d_total_margin - d_min_margin;
     d_init_min_ersmrgndiff = d_total_margin - d_min_ersmargin;
     d_price_diff = (double) d_init_min_mrgndiff / l_open_pos_qty;
     d_ersprice_diff = (double) d_init_min_ersmrgndiff / l_open_pos_qty;
     d_cntrct_wght_price = (double)  d_mid_opn_val / li_mid_opnpstn_qty ;
     strcpy(c_expry_dt,(char*)c_mid_expry_dt);
     l_sprd_qty = li_near_opnpstn_qty;
     c_naked_leg = 'M';
    }

    d_sprd_min_mrgn = ( ( (double) d_mid_opn_val / li_mid_opnpstn_qty ) * l_sprd_qty * ( d_sprd_min_prcntg / 100));
    d_sprd_min_mrgn_sprd = ( ( (double) d_mid_opn_val / li_mid_opnpstn_qty ) * l_sprd_qty * ( d_sprd_min_trg_prcnt / 100));

    rtrim(c_expry_dt);
    if(c_opn_pos_flw == 'B')
    {
     d_trgr_prc = d_cntrct_wght_price -  d_price_diff;
     d_erstrgr_prc = d_cntrct_wght_price -  d_ersprice_diff;
     d_trg_prc_sprd = d_cntrct_wght_price -  (double) (( d_sprd_exe_mrgn - d_sprd_min_mrgn ) / l_sprd_qty );
     d_trg_prc_sprd_ers = d_cntrct_wght_price -  (double) (( d_sprd_exe_mrgn - d_sprd_min_mrgn_sprd ) / l_sprd_qty );
     i_up_down = UPPER;
    }
    else
    {
     d_trgr_prc = d_cntrct_wght_price +  d_price_diff;
     d_erstrgr_prc = d_cntrct_wght_price +  d_ersprice_diff;
     d_trg_prc_sprd = d_cntrct_wght_price +  (double) (( d_sprd_exe_mrgn - d_sprd_min_mrgn ) / l_sprd_qty );
     d_trg_prc_sprd_ers = d_cntrct_wght_price +  (double) (( d_sprd_exe_mrgn - d_sprd_min_mrgn_sprd ) / l_sprd_qty );
     i_up_down = LOWER;
    }

    if( DEBUG_MSG_LVL_4 )
    {
     fn_userlog(c_ServiceName," d_min_margin :%lf:",d_min_margin);
     fn_userlog(c_ServiceName," d_sprd_min_mrgn :%lf:",d_sprd_min_mrgn);
     fn_userlog(c_ServiceName," d_sprd_exe_mrgn :%lf:",d_sprd_exe_mrgn);
     fn_userlog(c_ServiceName,"d_init_min_mrgndiff :%lf:",d_init_min_mrgndiff);
     fn_userlog(c_ServiceName,"d_price_diff :%lf:",d_price_diff);
     fn_userlog(c_ServiceName," d_cntrct_wght_price :%lf:",d_cntrct_wght_price);
     fn_userlog(c_ServiceName," d_cntrct_wght_price_spd :%lf:",d_cntrct_wght_price_spd);
     fn_userlog(c_ServiceName," d_trgr_prc :%lf:",d_trgr_prc);
     fn_userlog(c_ServiceName," d_trg_prc_sprd :%lf:",d_trg_prc_sprd);
     fn_userlog(c_ServiceName," d_erstrgr_prc :%lf:",d_erstrgr_prc);
     fn_userlog(c_ServiceName," l_open_pos_qty :%ld:",l_open_pos_qty);
     fn_userlog(c_ServiceName," l_sprd_qty :%ld:",l_sprd_qty);
    }

    d_trgr_prc = (double) ( (  d_trgr_prc * l_open_pos_qty ) + ( d_trg_prc_sprd * l_sprd_qty ) ) / ( l_open_pos_qty + l_sprd_qty );
    d_erstrgr_prc = (double) ( (  d_erstrgr_prc * l_open_pos_qty ) + ( d_trg_prc_sprd_ers * l_sprd_qty ) ) / ( l_open_pos_qty + l_sprd_qty );


    if( DEBUG_MSG_LVL_4 )		/*** Ver 5.3 Debug level changed to 4 from 3 ***/
    {
     fn_userlog(c_ServiceName," d_trgr_prc :%lf:",d_trgr_prc);
     fn_userlog(c_ServiceName," d_trg_prc_sprd :%lf:",d_trg_prc_sprd);
     fn_userlog(c_ServiceName," d_erstrgr_prc :%lf:",d_erstrgr_prc);
     fn_userlog(c_ServiceName," d_trg_prc_sprd_ers :%lf:",d_trg_prc_sprd_ers);
    }
		/*** Add starts in Ver 5.3 ***/
    if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog(c_ServiceName," d_trgr_prc :%lf: d_trg_prc_sprd :%lf: d_erstrgr_prc :%lf: d_trg_prc_sprd_ers :%lf:",d_trgr_prc,d_trg_prc_sprd,d_erstrgr_prc,d_trg_prc_sprd_ers);
		}
		/*** Add ends in Ver 5.3 ***/

    d_trigger_prc =0;
    d_erstrigger_prc =0;

    i_tck_sz=0;

    /*** Commented in Ver 3.0 ***

     EXEC SQL
      SELECT FCM_TCK_SZ
        INTO :i_tck_sz
        FROM FCM_FO_CNTRCT_MSTR
       WHERE FCM_XCHNG_CD=:ptr_st_pstn_actn->c_xchng_cd
         AND FCM_PRDCT_TYP =DECODE(:ptr_st_pstn_actn->c_prd_typ,'P','F',:ptr_st_pstn_actn->c_prd_typ)
         AND FCM_UNDRLYNG  =:ptr_st_pstn_actn->c_undrlyng
         AND FCM_EXPRY_DT  =:c_near_expry_dt
         AND FCM_CNTRCT_TAG =:ptr_st_pstn_actn->c_cntrct_tag;
 
    ***/
 
    /*** Ver 3.0 Starts ***/

      EXEC SQL
      SELECT FTQ_TCK_SZ
        INTO :i_tck_sz
        FROM FTQ_FO_TRD_QT     
       WHERE FTQ_XCHNG_CD=:ptr_st_pstn_actn->c_xchng_cd
         AND FTQ_PRDCT_TYP =DECODE(:ptr_st_pstn_actn->c_prd_typ,'P','F',:ptr_st_pstn_actn->c_prd_typ)
         AND FTQ_UNDRLYNG  =:ptr_st_pstn_actn->c_undrlyng
         AND FTQ_EXPRY_DT  =:c_near_expry_dt
         AND FTQ_CNTRCT_TAG =:ptr_st_pstn_actn->c_cntrct_tag; 
    
     /*** Ver 3.0 Ends   ***/ 
     
   if ( ( SQLCODE != 0 ) &&
      ( SQLCODE != NO_DATA_FOUND ) )
     {
      fn_errlog( c_ServiceName, "S31185", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
     }

     if(SQLCODE == NO_DATA_FOUND)
     {
       i_tck_sz=5;
     }

    i_returncode = fn_nearest_paise_fno( c_ServiceName,
                                   d_trgr_prc,
                                   i_tck_sz,
                                   i_up_down,
                                   c_err_msg,
                                   &d_trigger_prc );
    if ( i_returncode != 0 )
    {
     fn_errlog( c_ServiceName, "S31190",LIBMSG,c_err_msg);
     return FAILURE;
    }

    i_returncode = fn_nearest_paise_fno( c_ServiceName,
                                   d_erstrgr_prc,
                                   i_tck_sz,
                                   i_up_down,
                                   c_err_msg,
                                   &d_erstrigger_prc );
    if ( i_returncode != 0 )
    {
     fn_errlog( c_ServiceName, "S31195",LIBMSG,c_err_msg);
     return FAILURE;
    }

    if( c_naked_leg == 'N' ) /** Near Month **/
    {
     EXEC SQL
     UPDATE  FFP_FO_FUTURES_PSTN
     SET FFP_TRG_PRC = :d_trigger_prc,
         FFP_MIN_TRG_PRC = :d_erstrigger_prc
     WHERE FFP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
     AND     FFP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
     AND     FFP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
     AND     FFP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
     AND     FFP_EXPRY_DT        = :c_near_expry_dt
     AND     FFP_CNTRCT_TAG      = :ptr_st_pstn_actn->c_cntrct_tag;

     if( SQLCODE != 0 )
     {
      fn_errlog( c_ServiceName, "S31200",SQLMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
     }

     EXEC SQL
     UPDATE  FFP_FO_FUTURES_PSTN
     SET FFP_TRG_PRC = DECODE(:c_mid_pos_flw,'B',-100,22222222),
         FFP_MIN_TRG_PRC = DECODE(:c_mid_pos_flw,'B',-100,22222222)
     WHERE FFP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
     AND     FFP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
     AND     FFP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
     AND     FFP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
     AND     FFP_EXPRY_DT        = :c_mid_expry_dt
     AND     FFP_CNTRCT_TAG      = :ptr_st_pstn_actn->c_cntrct_tag;

     if( SQLCODE != 0 )
     {
      fn_errlog( c_ServiceName, "S31205",SQLMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
     }
    }
    else 
    {
     EXEC SQL
     UPDATE  FFP_FO_FUTURES_PSTN
     SET FFP_TRG_PRC = :d_trigger_prc,
         FFP_MIN_TRG_PRC = :d_erstrigger_prc
     WHERE FFP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
     AND     FFP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
     AND     FFP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
     AND     FFP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
     AND     FFP_EXPRY_DT        = :c_mid_expry_dt
     AND     FFP_CNTRCT_TAG      = :ptr_st_pstn_actn->c_cntrct_tag;

     if( SQLCODE != 0 )
     {
      fn_errlog( c_ServiceName, "S31210",SQLMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
     }

     EXEC SQL
     UPDATE  FFP_FO_FUTURES_PSTN
     SET FFP_TRG_PRC = DECODE(:c_near_pos_flw,'B',-100,22222222 ),
         FFP_MIN_TRG_PRC =  DECODE(:c_near_pos_flw,'B',-100,22222222)
     WHERE FFP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
     AND     FFP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
     AND     FFP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
     AND     FFP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
     AND     FFP_EXPRY_DT        = :c_near_expry_dt
     AND     FFP_CNTRCT_TAG      = :ptr_st_pstn_actn->c_cntrct_tag;

     if( SQLCODE != 0 )
     {
      fn_errlog( c_ServiceName, "S31215",SQLMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
     }
    }

 
   /**** if( c_xchng_stts == 'O' ) ***** Ver 3.5 ***
    ****{ **** Ver 3.5 *****/
    if (strcmp(ptr_st_pstn_actn->c_xchng_cd,"NFO") == 0 )
    {

      EXEC SQL
      SELECT  SEM_MAP_VL
         INTO  :c_sem_map_vl
         FROM  SEM_STCK_MAP
         WHERE SEM_STCK_CD = :ptr_st_pstn_actn->c_undrlyng
         AND   SEM_ENTTY = decode(:c_ctgry_indstk,'I','12',1);

    }
    else if (strcmp(ptr_st_pstn_actn->c_xchng_cd,"BFO") == 0 )
    {
      EXEC SQL
      SELECT  SEM_MAP_VL
        INTO  :c_sem_map_vl
        FROM  SEM_STCK_MAP
        WHERE SEM_STCK_CD = :ptr_st_pstn_actn->c_undrlyng
        AND   SEM_ENTTY = decode(:c_ctgry_indstk,'I','12',6);
    }
    else
    {
     fn_errlog( c_ServiceName, "S31220","Invalid Exchange code",ptr_st_err_msg->c_err_msg);
     return FAILURE;
    }

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
     fn_errlog( c_ServiceName, "S31225",SQLMSG,ptr_st_err_msg->c_err_msg);
     return FAILURE;
    }

    rtrim(c_sem_map_vl);

    if( li_near_opnpstn_qty > li_mid_opnpstn_qty )
    {
     if( c_ctgry_indstk == 'S' )
     {
       sprintf(c_contract_desc,"%sEQ~F:%s",c_sem_map_vl,c_near_expry_dt);
     }
     else
     {
       sprintf(c_contract_desc,"%s~F:%s",c_sem_map_vl,c_near_expry_dt);
     }
    }
    else
    {
      if( c_ctgry_indstk == 'S' )
      {  
       sprintf(c_contract_desc,"%sEQ~F:%s",c_sem_map_vl,c_mid_expry_dt);
      }
      else
      {
       sprintf(c_contract_desc,"%s~F:%s",c_sem_map_vl,c_mid_expry_dt);
      }
    }

    rtrim(c_contract_desc);

   
    if( c_naked_leg == 'N' ) /** Near Month **/
    {
      if( DEBUG_MSG_LVL_4 )		/*** Ver 5.3 Debug level changed to 4 from 3 ***/
      {
        fn_userlog(c_ServiceName,"Near c_naked_leg Leg");
        fn_userlog(c_ServiceName,"c_mid_expry_dt :%s:",c_mid_expry_dt);
        fn_userlog(c_ServiceName,"c_near_expry_dt :%s:",c_near_expry_dt);
      }

      EXEC SQL
      UPDATE FMD_FO_MTM_DTLS
      SET FMD_LMT_RT=:d_cntrct_wght_price,
          FMD_TRGR_RT= :d_trigger_prc,
          FMD_MIN_TRGR_RT= :d_erstrigger_prc,
          FMD_ORDR_FLW = :c_near_pos_flw,
          FMD_STATUS = 'N',
					FMD_PSTN_TYP = :c_pstn_typ,     /** ver 4.0 **/
          FMD_TRG_SYSTM = sysdate             /** ver 5.1 **/
      WHERE FMD_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
      AND FMD_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
      AND FMD_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ
      AND FMD_INDSTK = :c_ctgry_indstk
      AND FMD_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
      AND FMD_EXPRY_DT = :c_near_expry_dt
      AND FMD_CNTRCT_TAG = :ptr_st_pstn_actn->c_cntrct_tag
      AND FMD_SEM_VAL !='SYSORDSQOFF';
      if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
       fn_errlog( c_ServiceName, "S31230",SQLMSG,ptr_st_err_msg->c_err_msg);
       return FAILURE;
      }

    if(SQLCODE == NO_DATA_FOUND)
    {

     EXEC SQL
      INSERT INTO FMD_FO_MTM_DTLS
      (
        FMD_CLM_MTCH_ACCNT,
        FMD_XCHNG_CD,
        FMD_PRDCT_TYP,
        FMD_INDSTK,
        FMD_UNDRLYNG,
        FMD_EXPRY_DT,
        FMD_EXER_TYP,
        FMD_OPT_TYP,
        FMD_STRK_PRC,
        FMD_ORDR_FLW,
        FMD_CNTRCT_TAG,
        FMD_CNTRCT_DESC,
        FMD_STATUS,
        FMD_LMT_RT,
        FMD_TRGR_RT,
        FMD_MIN_TRGR_RT,
        FMD_SEQUENCE,
        FMD_SEM_VAL,
				FMD_PSTN_TYP,    /** ver 4.0 **/
        FMD_TRG_SYSTM        /** ver 5.1 **/ 
      )
      VALUES
      ( 
        :ptr_st_pstn_actn->c_cln_mtch_accnt,
        :ptr_st_pstn_actn->c_xchng_cd,
        :ptr_st_pstn_actn->c_prd_typ,
        :c_ctgry_indstk,
        :ptr_st_pstn_actn->c_undrlyng,
        :c_near_expry_dt,
        :c_exrc_typ,
        '*',
        0,
        :c_near_pos_flw,
        :ptr_st_pstn_actn->c_cntrct_tag,
        :c_contract_desc,
        'N',
        :d_cntrct_wght_price,
        :d_trigger_prc,
        :d_erstrigger_prc,
        FO_AUTO_MTM_SEQ.NEXTVAL,
        :c_sem_map_vl,
				:c_pstn_typ,     /** ver 4.0 **/
        sysdate          /** ver 5.1 **/
      );

     if( SQLCODE != 0 )
     {
      fn_errlog( c_ServiceName, "S31235",SQLMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
     }
    }
     EXEC SQL
      UPDATE FMD_FO_MTM_DTLS
      SET FMD_LMT_RT=:d_cntrct_wght_price,
          FMD_TRGR_RT= DECODE(:c_mid_pos_flw,'B',-100,22222222),
          FMD_MIN_TRGR_RT= DECODE(:c_mid_pos_flw,'B',-100,22222222),
          FMD_ORDR_FLW = :c_mid_pos_flw,
          FMD_STATUS = 'N',
					FMD_PSTN_TYP = :c_pstn_typ,     /** ver 4.0 **/
          FMD_TRG_SYSTM = sysdate            /** ver 5.1 **/
      WHERE FMD_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
      AND FMD_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
      AND FMD_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ
      AND FMD_INDSTK = :c_ctgry_indstk
      AND FMD_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
      AND FMD_EXPRY_DT = :c_mid_expry_dt
      AND FMD_CNTRCT_TAG = :ptr_st_pstn_actn->c_cntrct_tag
      AND FMD_SEM_VAL !='SYSORDSQOFF';
      if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
       fn_errlog( c_ServiceName, "S31240",SQLMSG,ptr_st_err_msg->c_err_msg);
       return FAILURE;
      }
   }
   else
   {
     if( DEBUG_MSG_LVL_4 )	/*** Ver 5.3 Debug level changed to 4 from 3 ***/
     {
       fn_userlog(c_ServiceName,"Mid c_naked_leg Leg");
       fn_userlog(c_ServiceName,"c_mid_expry_dt :%s:",c_mid_expry_dt);
       fn_userlog(c_ServiceName,"c_near_expry_dt :%s:",c_near_expry_dt);
     }

     EXEC SQL
      UPDATE FMD_FO_MTM_DTLS
      SET FMD_LMT_RT=:d_cntrct_wght_price,
          FMD_TRGR_RT= :d_trigger_prc,
          FMD_MIN_TRGR_RT= :d_erstrigger_prc,
          FMD_ORDR_FLW = :c_mid_pos_flw,
          FMD_STATUS = 'N',
					FMD_PSTN_TYP = :c_pstn_typ,     /** ver 4.0 **/
          FMD_TRG_SYSTM = sysdate             /** ver 5.1 **/
      WHERE FMD_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
      AND FMD_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
      AND FMD_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ
      AND FMD_INDSTK = :c_ctgry_indstk
      AND FMD_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
      AND FMD_EXPRY_DT = :c_mid_expry_dt
      AND FMD_CNTRCT_TAG = :ptr_st_pstn_actn->c_cntrct_tag
     AND FMD_SEM_VAL !='SYSORDSQOFF'; 
      if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
       fn_errlog( c_ServiceName, "S31245",SQLMSG,ptr_st_err_msg->c_err_msg);
       return FAILURE;
      }

    if(SQLCODE == NO_DATA_FOUND)
    {

     EXEC SQL
      INSERT INTO FMD_FO_MTM_DTLS
      (
        FMD_CLM_MTCH_ACCNT,
        FMD_XCHNG_CD,
        FMD_PRDCT_TYP,
        FMD_INDSTK,
        FMD_UNDRLYNG,
        FMD_EXPRY_DT,
        FMD_EXER_TYP,
        FMD_OPT_TYP,
        FMD_STRK_PRC,
        FMD_ORDR_FLW,
        FMD_CNTRCT_TAG,
        FMD_CNTRCT_DESC,
        FMD_STATUS,
        FMD_LMT_RT,
        FMD_TRGR_RT,
        FMD_MIN_TRGR_RT,
        FMD_SEQUENCE,
        FMD_SEM_VAL,
				FMD_PSTN_TYP,    /** ver 4.0 **/
        FMD_TRG_SYSTM        /** ver 5.1 **/
      )
      VALUES
      (
        :ptr_st_pstn_actn->c_cln_mtch_accnt,
        :ptr_st_pstn_actn->c_xchng_cd,
        :ptr_st_pstn_actn->c_prd_typ,
        :c_ctgry_indstk,
        :ptr_st_pstn_actn->c_undrlyng,
        :c_mid_expry_dt,
        :c_exrc_typ,
        '*',
        0,
        :c_mid_pos_flw,
        :ptr_st_pstn_actn->c_cntrct_tag,
        :c_contract_desc,
        'N',
        :d_cntrct_wght_price,
        :d_trigger_prc,
        :d_erstrigger_prc,
        FO_AUTO_MTM_SEQ.NEXTVAL,
        :c_sem_map_vl,
				:c_pstn_typ,     /** ver 4.0 **/
        sysdate          /** ver 5.1 **/
      );

     if( SQLCODE != 0 )
     {
      fn_errlog( c_ServiceName, "S31250",SQLMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
     }
    }

    EXEC SQL
      UPDATE FMD_FO_MTM_DTLS
      SET FMD_LMT_RT=:d_cntrct_wght_price,
          FMD_TRGR_RT= DECODE(:c_near_pos_flw,'B',-100,22222222),
          FMD_MIN_TRGR_RT= DECODE(:c_near_pos_flw,'B',-100,22222222),
          FMD_ORDR_FLW = :c_near_pos_flw,
          FMD_STATUS = 'N',
				  FMD_PSTN_TYP = :c_pstn_typ,     /** ver 4.0 **/
          FMD_TRG_SYSTM = sysdate             /** ver 5.1 **/
      WHERE FMD_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
      AND FMD_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
      AND FMD_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ
      AND FMD_INDSTK = :c_ctgry_indstk
      AND FMD_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
      AND FMD_EXPRY_DT = :c_near_expry_dt
      AND FMD_CNTRCT_TAG = :ptr_st_pstn_actn->c_cntrct_tag
      AND FMD_SEM_VAL !='SYSORDSQOFF';
      if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
       fn_errlog( c_ServiceName, "S31255",SQLMSG,ptr_st_err_msg->c_err_msg);
       return FAILURE;
      }
    }
  /**** } *** Ver 3.5 ***/
  }
 }
 i_ret_val =  fn_trgprc_dtls(c_ServiceName,
                    ptr_st_pstn_actn,
                    ptr_st_err_msg);
 if( i_ret_val == -1 )
 {
   fn_errlog( c_ServiceName, "S31260",LIBMSG,ptr_st_err_msg->c_err_msg);
   return FAILURE;
 }
                 

 if(DEBUG_MSG_LVL_4)		/*** Ver 5.3 Debug level changed to 4 from 3 ***/
 {
  fn_userlog(c_ServiceName,"Trigger Price :%lf:",d_trigger_prc);
  fn_userlog(c_ServiceName,"ERS Trigger Price :%lf:",d_erstrigger_prc);
 }
 /*** add starts in Ver 5.3 ***/
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Trigger Price :%lf: ERS Trigger Price :%lf:",d_trigger_prc,d_erstrigger_prc);
	}
 /*** add ends in Ver 5.3 ***/
return SUCCESS;
}

int fn_nearest_paise_fno(  char   *c_ServiceName,
                       double d_rate,
                       int    tick,
                       int    up_down,
                       char   *c_err_msg,
                       double *d_amount )
{

/************************************************************
up_down =1 for lower bound and 2 for upper bound
tick will be the nearest paise
************************************************************/

  long  l_rate ;

  d_rate =  floor(d_rate);
  l_rate = (long) d_rate ;

  if(up_down == LOWER)
  {
     d_rate = (double)(l_rate  - (  l_rate %  tick ) ) ;
     *d_amount = d_rate;
  }
  else if(up_down == UPPER)
  {
     if ( (  l_rate %  tick ) != 0)
     {
       d_rate = (double)(l_rate  - (  l_rate %  tick ) + tick ) ;
     }
     *d_amount = d_rate;
  }
  else
  {
    strcpy( c_err_msg, "Invalid up_down of bound" );
    fn_errlog( c_ServiceName, "S31265", DEFMSG, c_err_msg );
    return FAILURE;
  }

  return SUCCESS;
}

void fn_upd_fmdstts( char   *c_ServiceName,
										struct vw_pstn_actn *ptr_st_pstn_actn,
										char   c_flg,
										char   *c_err_msg)
{
  int i_trnsctn=0;


	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    fn_errlog( c_ServiceName, "L31155", TPMSG, c_err_msg );
    return;
  }

 if( ptr_st_pstn_actn->c_prd_typ !='O' )
 {  
	EXEC SQL
		UPDATE FMD_FO_MTM_DTLS
		SET		 FMD_STATUS = :c_flg,
           FMD_TRG_SYSTM = sysdate  /** ver 5.1 **/
		WHERE  FMD_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt 
		AND		 FMD_XCHNG_CD  			= :ptr_st_pstn_actn->c_xchng_cd
		AND		 FMD_PRDCT_TYP 			= :ptr_st_pstn_actn->c_prd_typ
		AND		 FMD_INDSTK 	 			= :ptr_st_pstn_actn->c_ctgry_indstk
		AND		 FMD_UNDRLYNG  			= :ptr_st_pstn_actn->c_undrlyng
		AND		 FMD_EXPRY_DT  			=	:ptr_st_pstn_actn->c_expry_dt
    AND    FMD_SEM_VAL       != 'SYSORDSQOFF';
 }
 else
  {
    EXEC SQL
    UPDATE FMD_FO_MTM_DTLS
    SET    FMD_STATUS = :c_flg,
           FMD_TRG_SYSTM = sysdate  /** ver 5.1 **/
    WHERE  FMD_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
    AND    FMD_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
    AND    FMD_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
    AND    FMD_INDSTK         = :ptr_st_pstn_actn->c_ctgry_indstk
    AND    FMD_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
    AND    FMD_EXPRY_DT       = :ptr_st_pstn_actn->c_expry_dt
    AND    FMD_EXER_TYP       = :ptr_st_pstn_actn->c_exrc_typ
    AND    FMD_OPT_TYP        = :ptr_st_pstn_actn->c_opt_typ
    AND    FMD_STRK_PRC       = :ptr_st_pstn_actn->l_strike_prc
    AND    FMD_SEM_VAL       != 'SYSORDSQOFF';
  }
 
	if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31270",SQLMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return ;
  }

  /**** Ver 3.6 ****/
  if( ptr_st_pstn_actn->c_prd_typ =='F' || ptr_st_pstn_actn->c_prd_typ =='P' )
  {
    EXEC SQL
    UPDATE  FUP_FUT_UNDRLYNG_PSTN
    SET     FUP_MTM_FLG = 'O'
    WHERE   FUP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
    AND     FUP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
    AND     FUP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
    AND     FUP_INDSTK          = :ptr_st_pstn_actn->c_ctgry_indstk
    AND     FUP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
    AND     FUP_CNTRCT_TAG      = :ptr_st_pstn_actn->c_cntrct_tag; 
   if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
   {
    fn_errlog( c_ServiceName, "S31275",SQLMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return ;
   }

   if( SQLCODE == NO_DATA_FOUND )
   {
     fn_errlog( c_ServiceName, "S31280",SQLMSG,c_err_msg);
   }
  }
  else if( ptr_st_pstn_actn->c_prd_typ =='O')
  {
   EXEC SQL
    UPDATE  fop_fo_options_pstn
        SET     fop_mtm_flg = 'O'
        WHERE   fop_clm_mtch_accnt= :ptr_st_pstn_actn->c_cln_mtch_accnt
        AND     fop_xchng_cd      = :ptr_st_pstn_actn->c_xchng_cd
        AND     fop_prdct_typ     = :ptr_st_pstn_actn->c_prd_typ
        AND     fop_undrlyng      = :ptr_st_pstn_actn->c_undrlyng
        AND     fop_expry_dt      = to_date(:ptr_st_pstn_actn->c_expry_dt,
                                    'DD-Mon-YYYY')
        AND     fop_exer_typ      = :ptr_st_pstn_actn->c_exrc_typ
        AND     fop_opt_typ       = :ptr_st_pstn_actn->c_opt_typ
        AND     fop_strk_prc      = :ptr_st_pstn_actn->l_strike_prc ;
   if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
   {
     fn_errlog( c_ServiceName, "S31285",SQLMSG,c_err_msg);
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     return ;
   }

   if( SQLCODE == NO_DATA_FOUND )
   {
     fn_errlog( c_ServiceName, "S31290",SQLMSG,c_err_msg);
   } 
  }

  /**** Ver 3.6 Ends heer ****/

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "L31160", TPMSG, c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return;
  }


	return ;
 

}

int fn_upd_ins_trgprc(char *c_ServiceName,
                    struct vw_pstn_actn *ptr_st_pstn_actn,
                    struct vw_cntopt_pos st_cntopt_pos_to_be,
                    struct vw_err_msg *ptr_st_err_msg
                     )     
{
  double d_min_margin_pctg= 0.0;
  char c_sem_map_vl[23];
  int i_trnsctn;
	double d_wag_price = 0;
  long l_trg_prc=0 ;
  char c_pos_flw='\0' ;
  double d_min_trggr_prcnt=0 ;

	double d_min_mrgn = 0.0;
  double d_somc  = 0.0;
  double d_min_trg_price= 0.0;
  double d_initial_mrgn = 0.0;
	double d_min_ers_trigger_prc=0;
	double d_ers_trg_prc=0;	
	int i_returncode; 
	int i_tck_sz=0;

	char c_err_msg[256];
 	char c_msg[256];
	char c_tag[256];
	char c_cln_mtch_accnt[11];
  char c_pstn_typ = 'N';    /** ver 4.0 **/
	int i_up_down=0;
	

  MEMSET(c_sem_map_vl);

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog( c_ServiceName, "In fn_upd_ins_trgprc function");
    fn_userlog(c_ServiceName,"Pos Avg price :%lf:",d_wag_price);
    fn_userlog(c_ServiceName,"Pos FLow :%c:",c_pos_flw);
  }

  i_trnsctn = fn_begintran( c_ServiceName, ptr_st_err_msg->c_err_msg );

  if ( i_trnsctn == -1)
  {
    fn_errlog( c_ServiceName, "S31295", TPMSG, ptr_st_err_msg->c_err_msg );
    return -1;
  }

  if (strcmp(ptr_st_pstn_actn->c_xchng_cd,"NFO") == 0 )
  {

      EXEC SQL
        SELECT  SEM_MAP_VL
          INTO  :c_sem_map_vl
          FROM  SEM_STCK_MAP
          WHERE SEM_STCK_CD = :ptr_st_pstn_actn->c_undrlyng
          AND   SEM_ENTTY = decode(:ptr_st_pstn_actn->c_ctgry_indstk,'I','12',1);

  }
  else if (strcmp(ptr_st_pstn_actn->c_xchng_cd,"BFO") == 0 )
  {
    EXEC SQL
      SELECT  SEM_MAP_VL
        INTO  :c_sem_map_vl
        FROM  SEM_STCK_MAP
        WHERE SEM_STCK_CD = :ptr_st_pstn_actn->c_undrlyng
        AND   SEM_ENTTY = decode(:ptr_st_pstn_actn->c_ctgry_indstk,'I','12',6);
  }
  else
  {
    fn_errlog( c_ServiceName, "S31300","Invalid Exchange code",ptr_st_err_msg->c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }



  if(SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31305",SQLMSG,ptr_st_err_msg->c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  rtrim(c_sem_map_vl);
  if( ptr_st_pstn_actn->c_ctgry_indstk == 'S' )
  {
   sprintf(c_sem_map_vl,"%sEQ",c_sem_map_vl);
  }

  rtrim(c_sem_map_vl);


 d_wag_price = (double) st_cntopt_pos_to_be.d_org_opn_val / st_cntopt_pos_to_be.l_opnpstn_qty;

i_returncode = fn_get_mrgn_prntg_opt( c_ServiceName,
                                 ptr_st_pstn_actn,
                                 ptr_st_err_msg,
                                 &d_initial_mrgn,
                                 &d_min_mrgn,
                                 &d_somc,
                                 &d_min_trggr_prcnt);          

 if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31310",SQLMSG,ptr_st_err_msg->c_err_msg);  /** Ver 3.6 ***/
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );   /** Ver 3.6 ***/
    return ( -1 );
  }


  d_min_ers_trigger_prc = 0.0;

  if ( ptr_st_pstn_actn->c_opt_typ == 'P' )
  {
     d_min_ers_trigger_prc = ( ( (double) ptr_st_pstn_actn->l_strike_prc  -
                          (st_cntopt_pos_to_be.d_trd_mrgn /
                          (st_cntopt_pos_to_be.l_opnpstn_qty * (-1)))) /
                          ( 1 - (d_min_trggr_prcnt/100.0 ) )                 );
     i_up_down = LOWER;
  }
  else
  {
    d_min_ers_trigger_prc = ( ( (double) ptr_st_pstn_actn->l_strike_prc  +
                          ( st_cntopt_pos_to_be.d_trd_mrgn /
                          (st_cntopt_pos_to_be.l_opnpstn_qty * (-1)))) /
                        ( 1 + (d_min_trggr_prcnt/100.0 ) )                 );
    i_up_down = UPPER;
	} 
 if(DEBUG_MSG_LVL_3)
 {
   fn_userlog( c_ServiceName, "d_min_ers_trigger_prc is :%lf:", d_min_ers_trigger_prc);
 }
 
/*--------------------------------------------------------------*/

	 d_ers_trg_prc = 0.0;
		i_tck_sz=0;
  
  /*** Commented in Ver 3.0 ***
  
 EXEC SQL
    SELECT NVL(FCM_TCK_SZ,5)
      INTO :i_tck_sz
      FROM FCM_FO_CNTRCT_MSTR
     	WHERE FCM_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
       AND FCM_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ
       AND FCM_INDSTK    = :ptr_st_pstn_actn->c_ctgry_indstk
       AND FCM_UNDRLYNG  = :ptr_st_pstn_actn->c_undrlyng
       AND FCM_EXPRY_DT  = to_date(:ptr_st_pstn_actn->c_expry_dt,'dd-Mon-yyyy')
       AND FCM_EXER_TYP  = :ptr_st_pstn_actn->c_exrc_typ
       AND FCM_OPT_TYP   = :ptr_st_pstn_actn->c_opt_typ
       AND FCM_STRK_PRC  = :ptr_st_pstn_actn->l_strike_prc;
  
   ***/
  
   /*** Ver 3.0 Starts ***/

   EXEC SQL
    SELECT NVL(FTQ_TCK_SZ,5)
      INTO :i_tck_sz
      FROM FTQ_FO_TRD_QT     
      WHERE FTQ_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
       AND FTQ_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ
       AND FTQ_INDSTK    = :ptr_st_pstn_actn->c_ctgry_indstk
       AND FTQ_UNDRLYNG  = :ptr_st_pstn_actn->c_undrlyng
       AND FTQ_EXPRY_DT  = to_date(:ptr_st_pstn_actn->c_expry_dt,'dd-Mon-yyyy')
       AND FTQ_EXER_TYP  = :ptr_st_pstn_actn->c_exrc_typ
       AND FTQ_OPT_TYP   = :ptr_st_pstn_actn->c_opt_typ
       AND FTQ_STRK_PRC  = :ptr_st_pstn_actn->l_strike_prc;

   /*** Ver 3.0 Ends   ***/

   if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
   {
    fn_errlog( c_ServiceName, "S31315", SQLMSG , c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
 		return FAILURE;
  }
   if( SQLCODE == NO_DATA_FOUND )
   {
     i_tck_sz = 5;
   }


	
	 i_returncode = fn_nearest_paise_fno( c_ServiceName,
                                   d_min_ers_trigger_prc,
                                   i_tck_sz,
                                   i_up_down,
                                   c_err_msg,
                                   &d_ers_trg_prc );

  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31320", LIBMSG , c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  	return FAILURE;
	}
  /**** Ver 1.3 Ends here ****/

if(DEBUG_MSG_LVL_3){
  fn_userlog( c_ServiceName, "d_min_ers_trigger_prc after round off :%lf:", d_ers_trg_prc);
}

l_trg_prc= st_cntopt_pos_to_be.l_mtm_trg_prc;
c_pos_flw = st_cntopt_pos_to_be.c_opnpstn_flw;

EXEC SQL
      UPDATE  fop_fo_options_pstn
      SET    
              fop_min_trg_prc = :d_ers_trg_prc   
              
      WHERE   fop_clm_mtch_accnt  = :ptr_st_pstn_actn->c_cln_mtch_accnt
      AND     fop_xchng_cd        = :ptr_st_pstn_actn->c_xchng_cd
      AND     fop_prdct_typ       = :ptr_st_pstn_actn->c_prd_typ
      AND     fop_undrlyng        = :ptr_st_pstn_actn->c_undrlyng
      AND     fop_exer_typ        = :ptr_st_pstn_actn->c_exrc_typ
      AND     fop_opt_typ         = :ptr_st_pstn_actn->c_opt_typ
      AND     fop_expry_dt        = :ptr_st_pstn_actn->c_expry_dt
      AND     fop_strk_prc        = :ptr_st_pstn_actn->l_strike_prc;

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31325", SQLMSG, ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      return FAILURE; 
    }




/*-------------------------------------------------------------*/

  EXEC SQL
    UPDATE  FMD_FO_MTM_DTLS
    SET     FMD_LMT_RT= :d_wag_price,
            FMD_TRGR_RT= :l_trg_prc,
            FMD_ORDR_FLW = :c_pos_flw,
            FMD_STATUS = 'N',
            FMD_MIN_TRGR_RT = :d_ers_trg_prc, 
						FMD_PSTN_TYP = :c_pstn_typ,     /** ver 4.0 **/
            FMD_TRG_SYSTM = sysdate             /** ver 5.1 **/
    WHERE FMD_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
    AND   FMD_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
    AND   FMD_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ
    AND   FMD_INDSTK = :ptr_st_pstn_actn->c_ctgry_indstk
    AND   FMD_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
    AND   FMD_EXPRY_DT = :ptr_st_pstn_actn->c_expry_dt
    AND   FMD_EXER_TYP = :ptr_st_pstn_actn->c_exrc_typ
    AND   FMD_OPT_TYP = :ptr_st_pstn_actn->c_opt_typ
    AND   FMD_STRK_PRC = :ptr_st_pstn_actn->l_strike_prc
    AND FMD_SEM_VAL !='SYSORDSQOFF';
  if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
    fn_errlog( c_ServiceName, "S31330",SQLMSG,ptr_st_err_msg->c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }
  if(SQLCODE == NO_DATA_FOUND)
  {

    EXEC SQL
      INSERT INTO FMD_FO_MTM_DTLS
      (
	FMD_CLM_MTCH_ACCNT,
        FMD_XCHNG_CD,
        FMD_PRDCT_TYP,
        FMD_INDSTK,
        FMD_UNDRLYNG,
        FMD_EXPRY_DT,
        FMD_EXER_TYP,
        FMD_OPT_TYP,
        FMD_STRK_PRC,
        FMD_ORDR_FLW,
        FMD_CNTRCT_TAG,
        FMD_CNTRCT_DESC,
        FMD_STATUS,
        FMD_LMT_RT,
        FMD_TRGR_RT,
        FMD_SEQUENCE,
        FMD_SEM_VAL,
        FMD_MIN_TRGR_RT,
				FMD_PSTN_TYP, 				/** ver 4.0 **/
        FMD_TRG_SYSTM             /** ver 5.1 **/ 
      )
      VALUES
      (
        :ptr_st_pstn_actn->c_cln_mtch_accnt,
        :ptr_st_pstn_actn->c_xchng_cd,
        :ptr_st_pstn_actn->c_prd_typ,
        :ptr_st_pstn_actn->c_ctgry_indstk,
        :ptr_st_pstn_actn->c_undrlyng,
        :ptr_st_pstn_actn->c_expry_dt,
        :ptr_st_pstn_actn->c_exrc_typ,
        :ptr_st_pstn_actn->c_opt_typ,
        :ptr_st_pstn_actn->l_strike_prc,
        :c_pos_flw,
        '*',
        :c_sem_map_vl,
        'N',
        :d_wag_price,
        :l_trg_prc,
        FO_AUTO_MTM_SEQ.NEXTVAL,
        :c_sem_map_vl,
        :d_ers_trg_prc ,
				:c_pstn_typ,     /** ver 4.0 **/
        sysdate          /** ver 5.1 **/        
      );

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31335",SQLMSG,ptr_st_err_msg->c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }
  }

  i_returncode =  fn_trgprc_dtls(c_ServiceName,
                    ptr_st_pstn_actn,
                    ptr_st_err_msg);
  if( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31340",LIBMSG,ptr_st_err_msg->c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  if ( fn_committran( c_ServiceName, i_trnsctn,ptr_st_err_msg->c_err_msg  ) == -1 )
  {
    fn_errlog( c_ServiceName, "S31345", TPMSG, ptr_st_err_msg->c_err_msg  );
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    return -1;
  }

  return SUCCESS;
}

int fn_trgprc_dtls(char *c_ServiceName,
                   struct vw_pstn_actn *ptr_st_pstn_actn,
                   struct vw_err_msg *ptr_st_err_msg)
{

  if (DEBUG_MSG_LVL_3)       /*** Ver 3.8 ***/
  {
  	fn_userlog(c_ServiceName,"Inside fn_trgprc_dtls Function");
  	fn_userlog(c_ServiceName,"ptr_st_pstn_actn->c_prd_typ :%c:",ptr_st_pstn_actn->c_prd_typ);
	}

  if( ptr_st_pstn_actn->c_prd_typ != 'O' )
  {
    EXEC SQL
       INSERT INTO FTP_FO_TRGPRC_POSDTLS
          (FTP_CLM_MTCH_ACCNT,
           FTP_XCHNG_CD      ,
           FTP_PRDCT_TYP     ,
           FTP_INDSTK        ,
           FTP_UNDRLYNG      ,
           FTP_EXPRY_DT      ,
           FTP_EXER_TYP      ,
           FTP_CNTRCT_TAG    ,
           FTP_IBUY_QTY      ,
           FTP_IBUY_ORD_VAL  ,
           FTP_ISELL_QTY     ,
           FTP_ISELL_ORD_VAL ,
           FTP_EXBUY_QTY     ,
           FTP_EXBUY_ORD_VAL ,
           FTP_EXSELL_QTY    ,
           FTP_EXSELL_ORD_VAL ,
           FTP_BUY_EXCTD_QTY  ,
           FTP_SELL_EXCTD_QTY ,
           FTP_OPNPSTN_FLW    ,
           FTP_OPNPSTN_QTY    ,
           FTP_OPNPSTN_VAL    ,
           FTP_MTM_OPN_VAL    ,
           FTP_IMTM_OPN_VAL   ,
           FTP_FUP_UEXCTD_MRGN  ,
           FTP_FUP_UMTM_OPN_VAL ,
           FTP_FUP_UOPNPSTN_VAL     ,
           FTP_FUP_TRD_MRGN     ,
           FTP_FUP_ADD_MRGN     ,
           FTP_FUP_UOPNPSTN_FLW ,
           FTP_FUP_UOPNPSTN_QTY ,
           FTP_FUP_USPREAD_MRGN,
           FTP_FUP_USPREAD_PNL ,
           FTP_TRGR_RT     ,   /** Ver 3.4 **/
           FTP_MIN_TRGR_RT,     /** Ver 3.4 **/
           FTP_TRG_DT           /** Ver 3.4 **/
          )
          (SELECT
           FFP_CLM_MTCH_ACCNT,
           FFP_XCHNG_CD,
           FFP_PRDCT_TYP,
           FFP_INDSTK,
           FFP_UNDRLYNG,
           FFP_EXPRY_DT,
           FFP_EXER_TYP,
           FFP_CNTRCT_TAG,
           nvl(FFP_IBUY_QTY,0),
           nvl(FFP_IBUY_ORD_VAL,0),
           nvl(FFP_ISELL_QTY,0),
           nvl(FFP_ISELL_ORD_VAL,0),
           nvl(FFP_EXBUY_QTY,0),
           nvl(FFP_EXBUY_ORD_VAL,0),
           nvl(FFP_EXSELL_QTY,0),
           nvl(FFP_EXSELL_ORD_VAL,0),
           nvl(FFP_BUY_EXCTD_QTY,0),
           nvl(FFP_SELL_EXCTD_QTY,0),
           FFP_OPNPSTN_FLW,
           nvl(FFP_OPNPSTN_QTY,0),
           nvl(FFP_OPNPSTN_VAL,0),
           nvl(FFP_MTM_OPN_VAL,0),
           nvl(FFP_IMTM_OPN_VAL,0),
           nvl(FUP_UEXCTD_MRGN,0),
           nvl(FUP_UMTM_OPN_VAL,0),
           nvl(FUP_UOPNPSTN_VAL,0),
           nvl(FUP_UTRD_MRGN,0),
           nvl(FUP_ADD_MRGN_VAL,0),
           FUP_UOPNPSTN_FLW,
           nvl(FUP_UOPNPSTN_QTY,0),
           nvl(FUP_USPREAD_MRGN,0),
           nvl(FUP_USPREAD_PNL,0),
           nvl(FFP_TRG_PRC,0),   /** Ver 3.4 **/
           nvl(FFP_MIN_TRG_PRC,0),  /** Ver 3.4 **/
           sysdate                  /** Ver 3.4 **/
           FROM FUP_FUT_UNDRLYNG_PSTN,FFP_FO_FUTURES_PSTN
           WHERE FFP_CLM_MTCH_ACCNT= FUP_CLM_MTCH_ACCNT
             AND FFP_XCHNG_CD = FUP_XCHNG_CD
             AND FFP_PRDCT_TYP = FUP_PRDCT_TYP
             AND FFP_INDSTK    = FUP_INDSTK
             AND FFP_UNDRLYNG  = FUP_UNDRLYNG
             AND FFP_CNTRCT_TAG = FUP_CNTRCT_TAG
             AND FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt 
             AND FFP_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd 
             AND FFP_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ 
             AND FFP_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng 
             AND FFP_CNTRCT_TAG = :ptr_st_pstn_actn->c_cntrct_tag 
         ) ;
    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31350",SQLMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
  }
  else
  {
    EXEC SQL
     INSERT INTO FTP_FO_TRGPRC_POSDTLS
          (FTP_CLM_MTCH_ACCNT,
           FTP_XCHNG_CD      ,
           FTP_PRDCT_TYP     ,
           FTP_INDSTK        ,
           FTP_UNDRLYNG      ,
           FTP_EXPRY_DT      ,
           FTP_STRK_PRC      ,
           FTP_EXER_TYP      ,
           FTP_OPT_TYP       ,
           FTP_IBUY_QTY      ,
           FTP_IBUY_ORD_VAL  ,
           FTP_ISELL_QTY     ,
           FTP_ISELL_ORD_VAL ,
           FTP_EXBUY_QTY     ,
           FTP_EXBUY_ORD_VAL ,
           FTP_EXSELL_QTY    ,
           FTP_EXSELL_ORD_VAL ,
           FTP_BUY_EXCTD_QTY  ,
           FTP_SELL_EXCTD_QTY ,
           FTP_OPNPSTN_FLW    ,
           FTP_OPNPSTN_QTY    ,
           FTP_OPNPSTN_VAL    ,
           FTP_UORDR_MRGN     ,
           FTP_UEXCTD_MRGN    ,
           FTP_TRGR_RT        ,  /** Ver 3.4 **/
           FTP_MIN_TRGR_RT    ,   /** Ver 3.4 **/
           FTP_TRG_DT           /** Ver 3.4 **/
          )
          ( SELECT
            FOP_CLM_MTCH_ACCNT,
            FOP_XCHNG_CD,
            FOP_PRDCT_TYP,
            FOP_INDSTK,
            FOP_UNDRLYNG,
            FOP_EXPRY_DT,
            FOP_STRK_PRC,
            FOP_EXER_TYP,
            FOP_OPT_TYP,
            nvl(FOP_IBUY_QTY,0),
            nvl(FOP_IBUY_ORD_VAL,0),
            nvl(FOP_ISELL_QTY,0),
            nvl(FOP_ISELL_ORD_VAL,0),
            nvl(FOP_EXBUY_QTY,0),
            nvl(FOP_EXBUY_ORD_VAL,0),
            nvl(FOP_EXSELL_QTY,0),
            nvl(FOP_EXSELL_ORD_VAL,0),
            nvl(FOP_BUY_EXCTD_QTY,0),
            nvl(FOP_SELL_EXCTD_QTY,0),
            FOP_OPNPSTN_FLW,
            nvl(FOP_OPNPSTN_QTY,0),
            nvl(FOP_OPNPSTN_VAL,0),
            nvl(FOP_UORDR_MRGN,0),
            nvl(FOP_UEXCTD_MRGN,0),
            FOP_TRGGR_PRC,          /** Ver 3.4 **/
            FOP_MIN_TRG_PRC,        /** Ver 3.4 **/
            sysdate                 /** Ver 3.4 **/
            FROM FOP_FO_OPTIONS_PSTN
            WHERE FOP_CLM_MTCH_ACCNT =:ptr_st_pstn_actn->c_cln_mtch_accnt 
              AND FOP_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd 
              AND FOP_PRDCT_TYP =:ptr_st_pstn_actn->c_prd_typ 
              AND FOP_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng 
              AND FOP_EXPRY_DT = to_date(:ptr_st_pstn_actn->c_expry_dt,'dd-Mon-yyyy') 
              AND FOP_STRK_PRC = :ptr_st_pstn_actn->l_strike_prc 
              AND FOP_OPT_TYP  = :ptr_st_pstn_actn->c_opt_typ 
            );
    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31355",SQLMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }

  }

}

int fo_ins_sqofford(char* c_ServiceName,char *c_err_msg,struct vw_orderbook *ptr_st_orderbook,char c_actn_flg,char c_cntrct_tag)
{

  int i_trnsctn;
 
  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1)
  {
    fn_errlog( c_ServiceName, "S31360", TPMSG,c_err_msg );
    return -1;
  }

  if (DEBUG_MSG_LVL_3)       /*** Ver 3.8 ***/
  {
  	fn_userlog(c_ServiceName,"ptr_st_orderbook->c_ordr_rfrnc :%s:",ptr_st_orderbook->c_ordr_rfrnc);
	}
 fn_userlog(c_ServiceName,"c_ack_tm is :%s:",ptr_st_orderbook->c_ack_tm); /* for testing */
	
  EXEC SQL
  UPDATE FMD_FO_MTM_DTLS
    SET FMD_STATUS='N',
        FMD_REMARKS=:c_actn_flg,
        FMD_TRG_TM=decode(:c_actn_flg,'I',to_char(to_date(:ptr_st_orderbook->c_ack_tm,'dd-mon-yyyy hh24:mi:ss')+ (3 / (24*60) ),'hh24:mi:ss'),FMD_TRG_TM),    /* 4.5 added trigger time */
        FMD_TRG_SYSTM = sysdate   /** ver 5.1 **/
  WHERE FMD_CNTRCT_DESC=:ptr_st_orderbook->c_ordr_rfrnc;
  if(  SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
    fn_errlog( c_ServiceName, "S31365",SQLMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return FAILURE;
  }
  if( SQLCODE == NO_DATA_FOUND )
  {
   if (DEBUG_MSG_LVL_3)       /*** Ver 3.8 ***/
   {
   	 fn_userlog(c_ServiceName,"INSIDE NO DATA FOUND");
	 }
EXEC SQL
insert into FMD_FO_MTM_DTLS
(FMD_CLM_MTCH_ACCNT,
FMD_XCHNG_CD,
FMD_PRDCT_TYP,
FMD_INDSTK,
FMD_UNDRLYNG,
FMD_EXPRY_DT,
FMD_EXER_TYP,
FMD_OPT_TYP,
FMD_CNTRCT_TAG,
FMD_STRK_PRC,
FMD_ORDR_FLW,
FMD_CNTRCT_DESC,
FMD_LMT_RT,
FMD_TRGR_RT,
FMD_STATUS,
FMD_SEQUENCE,
FMD_REMARKS,
FMD_SEM_VAL,
FMD_PSTN_TYP,  			/** ver 4.0 **/
FMD_TRG_TM,          /* 4.5 added trigger time */
FMD_TRG_SYSTM           /** ver 5.1 **/
)
values
(
 :ptr_st_orderbook->c_cln_mtch_accnt,
 :ptr_st_orderbook->c_xchng_cd,
 :ptr_st_orderbook->c_prd_typ,
 :ptr_st_orderbook->c_ctgry_indstk,
 :ptr_st_orderbook->c_undrlyng,
 :ptr_st_orderbook->c_expry_dt,
 :ptr_st_orderbook->c_exrc_typ,
 :ptr_st_orderbook->c_opt_typ,
 :c_cntrct_tag,
 :ptr_st_orderbook->l_strike_prc,
 :ptr_st_orderbook->c_ordr_flw,
 :ptr_st_orderbook->c_ordr_rfrnc,
 :ptr_st_orderbook->l_ord_lmt_rt ,
 :ptr_st_orderbook->l_ord_lmt_rt,
 'N',
  FO_AUTO_MTM_SEQ.NEXTVAL,
 :c_actn_flg,
 'SYSORDSQOFF',
 'N',     /** ver 4.0 **/
 to_char(to_date(:ptr_st_orderbook->c_ack_tm,'dd-mon-yyyy hh24:mi:ss')+ (3 / (24*60) ),'hh24:mi:ss'),    /* 4.5 added trigger time */
 sysdate /** ver 5.1 **/
);
if( SQLCODE != 0 )
{
  fn_errlog( c_ServiceName, "S31370",SQLMSG,c_err_msg);
  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  return FAILURE;
}

}
if ( fn_committran( c_ServiceName, i_trnsctn,c_err_msg  ) == -1 )
  {
    fn_errlog( c_ServiceName, "S31375", TPMSG, c_err_msg  );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }

return 0;
} 
/*** Ver 2.6 ends here ***/

/** Ver 2.8 Starts **/
int fn_ins_ffl_log_tbl  ( char *c_ServiceName,
                          struct vw_orderbook ptr_st_ordbook,
                          char  *c_err_msg,
                          double d_deficit,
                          char   c_actn_flg
                        )

{
  varchar c_trade_dt[LEN_DATE];
  int i_trnsctn = 0;
  int i_gid = 0;
  char c_narration_id[4];
  char c_rqst_type;
  double d_available_amt = 0.0 ;
  double d_tot_req_amt = 0.0 ;
  long l_grpid = 0 ;
  int i_returncode = 0;
  char c_mtch_acnt[11];
  char c_xchng_code[4];
  char c_remarks[256];

  EXEC SQL
        /* SELECT to_char(exg_nxt_trd_dt,'DD-Mon-YYYY')*/    /* Commented in ver 2.9 */
         SELECT to_char( GREATEST(exg_nxt_trd_dt,exg_tmp_trd_dt), 'DD-Mon-YYYY' ) /* Added in ver 2.9 */
         INTO   :c_trade_dt
         FROM   exg_xchng_mstr
         WHERE  exg_xchng_cd = :ptr_st_ordbook.c_xchng_cd
         AND    exg_mkt_typ = 'D';

  if ( SQLCODE  !=  0 )
  {
    fn_errlog ( c_ServiceName, "S31380", SQLMSG, c_err_msg );
    return -1;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName," Inside fn_ins_ffl_log_tbl ...");
    fn_userlog ( c_ServiceName," d_deficit Is :%lf:",d_deficit);
    fn_userlog ( c_ServiceName,"------ Transcation Started for FFL_FO_FLR_LMTUPD_LOG Insert  ------- ");
    fn_userlog ( c_ServiceName,"------ ptr_st_ordbook.c_ordr_rfrnc Is :%s: ------- ",ptr_st_ordbook.c_ordr_rfrnc);
    fn_userlog ( c_ServiceName,"------ c_actn_flg Is :%c: ------- ",c_actn_flg);
  }

  if(c_actn_flg == 'P')
  {
    strcpy ( c_remarks ,"ON OREDER PLACEMENT");
  }
  else if(c_actn_flg == 'M')
  {
    strcpy ( c_remarks ,"ON OREDER MODIFICATION ");
  }
  if (DEBUG_MSG_LVL_3)       /*** Ver 3.8 ***/
  {
  	fn_userlog ( c_ServiceName,"------ c_remarks Is :%s: ------- ",c_remarks);
	}
  c_rqst_type = 'B';
  l_grpid = 1;

  strcpy( c_mtch_acnt,ptr_st_ordbook.c_cln_mtch_accnt);
  strcpy( c_xchng_code,ptr_st_ordbook.c_xchng_cd);

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    fn_errlog ( c_ServiceName, "L31165", LIBMSG, c_err_msg);
    return -1;
  }


  EXEC SQL
   EXECUTE
   BEGIN
   LIMIT_CAL
   ( :c_mtch_acnt,
     :c_trade_dt,
     :c_rqst_type,
     :l_grpid,
     :c_xchng_code,
     :d_available_amt,
     :i_returncode
   );
   END;
   END-EXEC;

   if ( i_returncode == -1 )
   {
     fn_errlog ( c_ServiceName, "S31385", SQLMSG, c_err_msg );
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     return -1;
   }

   if(DEBUG_MSG_LVL_3)
   {
    fn_userlog ( c_ServiceName," d_available_amt Is :%lf:",d_available_amt);
   }

   if ( d_available_amt < 0 )
   {
      d_tot_req_amt =   d_deficit ;  /*** In case of negative limits , the returned deficit is only total required amnt ***/
   }
   
   else
   {
      d_tot_req_amt =  (d_available_amt/100)  + d_deficit ;
   }

   d_available_amt = (double) (d_available_amt/100) ;

   EXEC SQL
    INSERT INTO FFL_FO_FLR_LMTUPD_LOG
    ( FFL_XCHNG_CD,
      FFL_TRD_DT,
      FFL_CLM_MTCH_ACCNT,
      FFL_ORDR_RFRNC,
      FFL_TRN_DT,
      FFL_AVAILBLE_AMT ,
      FFL_DEFICIT_AMT ,
      FFL_TOT_REQ_AMT ,
      FFL_REMARKS,
      /* Ver 2.9 starts here*/
      FFL_PRDCT_TYP,
      FFL_INDSTK,
      FFL_UNDRLYNG,
      FFL_EXPRY_DT,
      FFL_EXER_TYP,
      FFL_OPT_TYP,
      FFL_STRK_PRC,
      FFL_ORDR_FLW,
      FFL_LMT_MRKT_SL_FLG,
      FFL_ORDR_TOT_QTY,
      FFL_LMT_RT,
      FFL_STP_LSS_TGR,
      FFL_ORDR_TYPE  /* Ver 2.9 ends here*/
    )
    VALUES
    ( :ptr_st_ordbook.c_xchng_cd,
      :c_trade_dt,
      :ptr_st_ordbook.c_cln_mtch_accnt,
      :ptr_st_ordbook.c_ordr_rfrnc,
      SYSDATE,
      :d_available_amt ,              /*** Storing in Rs. ***/
      :d_deficit,
      :d_tot_req_amt,
      :c_remarks,
      /* Ver 2.9 starts here*/
      :ptr_st_ordbook.c_prd_typ,
      :ptr_st_ordbook.c_ctgry_indstk,
      :ptr_st_ordbook.c_undrlyng,
      :ptr_st_ordbook.c_expry_dt,
      :ptr_st_ordbook.c_exrc_typ,
      :ptr_st_ordbook.c_opt_typ,
      :ptr_st_ordbook.l_strike_prc,
      :ptr_st_ordbook.c_ordr_flw,
      :ptr_st_ordbook.c_slm_flg,
      :ptr_st_ordbook.l_ord_tot_qty,
      :ptr_st_ordbook.l_ord_lmt_rt,
      :ptr_st_ordbook.l_stp_lss_tgr,
      :ptr_st_ordbook.c_ord_typ  /* Ver 2.9 ends here*/
    );


    if ( SQLCODE  !=  0 )
    {
      fn_errlog ( c_ServiceName, "L31170", SQLMSG, c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }


    if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    {
      fn_errlog ( c_ServiceName, "L31175", TPMSG, c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog ( c_ServiceName,"------ Transcation Started for FFL_FO_FLR_LMTUPD_LOG Insert  ------- ");
    }

    return 0 ;
}
/** Ver 2.8  Ends   **/

/**** Ver 2.7 Starts Here ****/
int fo_get_trd_limit(char *c_ServiceName,
                     char *c_mtch_id,
                     char *c_trd_dt,
                     char c_rqst_typ,
                     char *c_xchng_cd,
                     long l_grp_id,
                     double *d_trd_limit,
                     char *c_err_msg
                    )
{
  int i_returncode=0;;
  int i_trnsctn=0;
  double d_amt;
  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"c_mtch_id :%s:",c_mtch_id);
    fn_userlog(c_ServiceName,"c_trd_dt :%s:",c_trd_dt);
    fn_userlog(c_ServiceName,"c_rqst_typ :%c:",c_rqst_typ);
    fn_userlog(c_ServiceName,"l_grp_id:%ld:",l_grp_id);
    fn_userlog(c_ServiceName,"c_xchng_cd :%s:",c_xchng_cd);
  }

  rtrim(c_trd_dt);
  rtrim(c_xchng_cd);
  rtrim(c_mtch_id);
  d_amt=0.0;

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog ( c_ServiceName, "L31180",LIBMSG,c_err_msg );
    return -1;
  }

  if(strcmp(c_xchng_cd,"*") == 0)
  {
  	if (DEBUG_MSG_LVL_3)       /*** Ver 3.8 ***/
  	{
    	fn_userlog(c_ServiceName,"Inside if clause");
		}
    strcpy((char *)c_xchng_cd,"NFO");
  }

  if( DEBUG_MSG_LVL_4 )  /** Ver 3.1 DEBUG_MSG_LVL_4 added **/
  {
    fn_userlog(c_ServiceName,"c_xchng_cd :%s:",c_xchng_cd);
  }

  EXEC SQL
       EXECUTE
       BEGIN
       LIMIT_CAL
         (
          :c_mtch_id,
          :c_trd_dt,
          :c_rqst_typ,
          :l_grp_id,
          :c_xchng_cd,
          :d_amt,
          :i_returncode
         );
   END;
   END-EXEC;
  if (DEBUG_MSG_LVL_3)       /*** Ver 3.8 ***/
  {
  	fn_userlog(c_ServiceName,"i_returncode from LIMIT_CAL :%d:",i_returncode);
	}
 if( SQLCODE != 0 )
 {
  fn_errlog( c_ServiceName, "L31185",SQLMSG,c_err_msg  );
  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  return -1;
 }

 if( i_returncode != 0 )
 {
  fn_userlog(c_ServiceName,"i_returncode from LIMIT_CAL :%d:",i_returncode);
  fn_errlog( c_ServiceName, "L31190",LIBMSG,c_err_msg  );
  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  return -1;
 }
 
 if( DEBUG_MSG_LVL_0 )  /** Ver 3.1 **/ /*** Ver 3.8 from 3 to 0 ***/
 {
   fn_userlog(c_ServiceName,"Limit From Stored proc :%lf:",d_amt);
 }

 if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
 {
   fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
   fn_errlog ( c_ServiceName, "S31390",LIBMSG,c_err_msg );
   return -1;
 }

 *d_trd_limit = d_amt;
 return 0;
}
/**** Ver 2.7 Ends Here ***/



/*** Ver 3.2 starts here ***/
int fn_cal_mrgn_sltp ( char   *c_ServiceName,
											 char   *c_fresh_ordr_ref,
											 long   l_frs_lmt_rt,
											 long   l_cvr_lmt_rt,
                       double *d_mrgn_amt,
                       double *d_lss_amt,
											 char   *c_ref_rmrks, /*** Ver 5.4 ***/
											 double *d_comp1_mrgn,/*** Ver 5.4 ***/
											 double *d_comp1_pl,	/*** Ver 5.4 ***/
											 double *d_xchng_amt, /*** Ver 5.4 ***/
                       char   *c_err_msg
                      )
{
		char c_cln_mtch_accnt[11]="\0";
		char c_xchng_cd[3+1]="\0";
		char c_prdct_typ = '\0';
		char c_undrlyng [7] = "\0";
		char c_expry_dt [ LEN_DATE ] = "\0";
		char c_exer_typ = '\0';
		char c_opt_typ = '\0';
		char c_strk_prc[20]="\0";
		char c_frs_ordr_flw ='\0';
		double d_sltp_prcnt = 0.0;
		long l_open_qty = 0;
		double d_cvr_exe_qty = 0;
		double  d_frs_exe_val = 0;
		double  d_frs_exe_qty = 0;
		double  d_cvr_exe_val = 0;
		long l_frs_tot_ordr_qty = 0;
		long l_frs_can_qty = 0;
		long l_cvr_can_qty = 0;
		long l_frs_exp_qty = 0;
		long l_cvr_exp_qty = 0;
		long l_tot_pending_qty = 0;
		double d_frs_wap = 0;
		double d_cvr_wap = 0;
		double d_frs_wap_lmt = 0;
		double d_cvr_wap_lmt = 0;
		double d_xchng_prcnt = 0.0; /*** Ver 5.4 ***/
		double d_fmm_expr = 0.0; /*** Ver 6.2 ***/
		double d_spn_per_lot = 0.0;  /*** Ver 6.2 ***/
		double d_spn_per_lot_B = 0.0;  /*** Ver 6.2 ***/
		double d_spnperlot_T = 0.0;  /*** Ver 6.2 ***/
		long   l_lot_sz = 0; /*** Ver 6.2 ***/
 
	  /** ver 6.1 starts***/
    double d_amt_blkd_old = 0.0;
    double d_lss_amt_blkd_old= 0.0;
    long l_prft_tot_ordr_qty=0;
    long l_prft_can_qty=0;
    long l_prft_exp_qty=0;
    long l_prft_exe_qty=0;
    long l_prft_pending_qty = 0;
    long l_frs_pending_qty = 0;
    long l_cvr_pending_qty = 0;
    long l_open_qty_weo_prft_ordr = 0;
    long l_cvr_tot_ordr_qty = 0;
    /*** ver 6.1 ends ***/

		MEMSET(c_undrlyng);

		if(DEBUG_MSG_LVL_3){
			fn_userlog( c_ServiceName, "Inside margin calculation for Order Reference:%s:",c_fresh_ordr_ref);
			fn_userlog( c_ServiceName, "Fresh Limit Rate:%ld:",l_frs_lmt_rt);
			fn_userlog( c_ServiceName, "Cover Limit Rate:%ld:", l_cvr_lmt_rt );
		}

	
		EXEC SQL
		 SELECT  FOD_CLM_MTCH_ACCNT,
						 FOD_XCHNG_CD,
						 FOD_PRDCT_TYP,
						 FOD_UNDRLYNG,
						 FOD_EXPRY_DT,
						 FOD_EXER_TYP,
						 FOD_OPT_TYP,
						 FOD_STRK_PRC,
						 FOD_ORDR_FLW,
             NVL(FOD_AMT_BLCKD,0), /** ver 6.1 ***/
             NVL(FOD_LSS_AMT_BLCKD,0) /** ver 6.1 ***/
		 INTO   :c_cln_mtch_accnt,
						:c_xchng_cd,
						:c_prdct_typ,
						:c_undrlyng,
						:c_expry_dt,
						:c_exer_typ,
						:c_opt_typ,
						:c_strk_prc,
						:c_frs_ordr_flw,
           :d_amt_blkd_old,/** ver 6.1 **/
           :d_lss_amt_blkd_old /** ver 6.1 **/
		 FROM    FOD_FO_ORDR_DTLS
		 WHERE   FOD_ORDR_RFRNC = :c_fresh_ordr_ref;

		if( SQLCODE != 0 )
		{
			fn_errlog ( c_ServiceName, "S31395", SQLMSG, c_err_msg );
			return ( -1 ) ;
		}

		if(DEBUG_MSG_LVL_3){
			fn_userlog( c_ServiceName, "Match Account:%s:",c_cln_mtch_accnt);
			fn_userlog( c_ServiceName, "Underlying:%s:", c_undrlyng );
			fn_userlog( c_ServiceName, "c_xchng_cd:%s:", c_xchng_cd );
		}

		/***** Fetching sltp %  *****/
		EXEC SQL
				 SELECT nvl(FMM_SLTP_PRCNT,0),
								NVL(FMM_SLTP_SEBI_PRCNT,0), /*** Ver 5.4 ***/
								NVL(FMM_EXPSR,0) 						/*** Ver 6.2 ***/
				 INTO   :d_sltp_prcnt,
								:d_xchng_prcnt,				/*** Ver 5.4 ***/
								:d_fmm_expr						/*** Ver 6.2 ***/
				 FROM   FMM_FO_MRGN_MSTR
				 WHERE  FMM_PRDCT_TYP='F'
				 AND    FMM_UNDRLYNG = :c_undrlyng
				 AND    FMM_XCHNG_CD = :c_xchng_cd
				 AND    FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
																			 FROM    FCB_FO_CLN_BSKT_ALLTD
																			 WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
																														 FROM    CLM_CLNT_MSTR
																														 WHERE   CLM_MTCH_ACCNT = :c_cln_mtch_accnt));
		if ( SQLCODE  !=  0 )
		{
			fn_errlog ( c_ServiceName, "S31400", SQLMSG, c_err_msg );
			return ( -1 ) ;
		 }

		/*** Ver 6.2 start ***/
    EXEC SQL
    SELECT NVL(FTQ_SPN_PER_LOT,0),
					 NVL(FTQ_SPN_PER_LOT_B,0),
           NVL(FTQ_MIN_LOT_QTY,0)
    INTO   :d_spn_per_lot,
					 :d_spn_per_lot_B,
           :l_lot_sz
    FROM   FTQ_FO_TRD_QT
    WHERE  FTQ_XCHNG_CD = :c_xchng_cd
    AND    FTQ_UNDRLYNG = :c_undrlyng
    AND    FTQ_PRDCT_TYP = 'F'
    AND    trunc(FTQ_EXPRY_DT) = trim(:c_expry_dt);

    if ( SQLCODE  !=  0 )
    {
      fn_errlog ( c_ServiceName, "S31405", SQLMSG, c_err_msg );
      return ( -1 ) ;
    }
		/*** Ver 6.2  ends ***/

	  EXEC SQL
		 SELECT   NVL( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FTD_EXCTD_QTY, FTD_EXCTD_QTY ) ), 0 ),
							NVL( SUM( DECODE( FOD_FC_FLAG, 'C',0, FTD_EXCTD_QTY ) ), 0 ),
							NVL( SUM( DECODE( FOD_FC_FLAG, 'C', FTD_EXCTD_QTY, 0 ) ), 0 ),
							NVL( SUM( DECODE( FOD_FC_FLAG, 'C',0, FTD_EXCTD_QTY * FTD_EXCTD_RT ) ),0),
							NVL( SUM( DECODE( FOD_FC_FLAG, 'C', FTD_EXCTD_QTY * FTD_EXCTD_RT, 0 ) ),0)
			INTO    :l_open_qty,
							:d_frs_exe_qty,
							:d_cvr_exe_qty,
							:d_frs_exe_val,
							:d_cvr_exe_val
			FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
			WHERE   FTD_ORDR_RFRNC  = FOD_ORDR_RFRNC
			AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_fresh_ordr_ref
       AND   FOD_FC_FLAG  != 'T'; /** ver 6.1 ***/

		if( SQLCODE != 0 )
		{
			fn_errlog ( c_ServiceName, "S31410", SQLMSG, c_err_msg );
			return ( -1 ) ;
		}

		EXEC SQL
		 SELECT   NVL( SUM( DECODE( FOD_FC_FLAG, 'C',0, FOD_ORDR_TOT_QTY ) ), 0 ),
							NVL( SUM( DECODE( FOD_FC_FLAG, 'C',0, FOD_CNCL_QTY ) ), 0 ),
							NVL( SUM( DECODE( FOD_FC_FLAG, 'C',0, FOD_EXPRD_QTY ) ), 0 ),
							NVL( SUM( DECODE( FOD_FC_FLAG, 'C',FOD_CNCL_QTY, 0 ) ), 0 ),
							NVL( SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXPRD_QTY,0 ) ), 0 ),
              NVL( SUM( DECODE( FOD_FC_FLAG, 'C',FOD_ORDR_TOT_QTY,0 ) ), 0 ) /*** Ver 6.1 ***/
		 INTO    :l_frs_tot_ordr_qty,
						 :l_frs_can_qty,
						 :l_frs_exp_qty,
 					   :l_cvr_can_qty,
						 :l_cvr_exp_qty,
             :l_cvr_tot_ordr_qty
		 FROM    FOD_FO_ORDR_DTLS
		 WHERE   DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_fresh_ordr_ref
       AND   FOD_FC_FLAG  != 'T';/** ver 6.1 ***/

		if( SQLCODE != 0 )
		{
			fn_errlog ( c_ServiceName, "S31415", SQLMSG, c_err_msg );
			return ( -1 ) ;
		}
	
		if(DEBUG_MSG_LVL_3){
			fn_userlog( c_ServiceName, "Fresh Exec Qty:%lf:", d_frs_exe_qty );
			fn_userlog( c_ServiceName, "Cover Exec Qty:%lf:", d_cvr_exe_qty );
			fn_userlog( c_ServiceName, "Fresh Exec Val:%lf:", d_frs_exe_val );
			fn_userlog( c_ServiceName, "Cover Exec Val:%lf:", d_cvr_exe_val );
			fn_userlog( c_ServiceName, "Fresh Total Ordered Qty:%ld:", l_frs_tot_ordr_qty );
			fn_userlog( c_ServiceName, "Fresh Cancel Qty:%ld:", l_frs_can_qty );
			fn_userlog( c_ServiceName, "Fresh Expired Qty:%ld:", l_frs_exp_qty );
			fn_userlog( c_ServiceName, "Cover Cancel Qty:%ld:", l_cvr_can_qty );
			fn_userlog( c_ServiceName, "Cover Expired Qty:%ld:", l_cvr_exp_qty );
		}

	l_tot_pending_qty = l_frs_tot_ordr_qty - ( (long) fn_maxd(d_frs_exe_qty,d_cvr_exe_qty) + fn_minl(l_frs_can_qty,l_cvr_can_qty) + fn_minl(l_frs_exp_qty,l_cvr_exp_qty) );

	d_frs_wap = d_frs_exe_val / d_frs_exe_qty;
	d_cvr_wap = d_cvr_exe_val / d_cvr_exe_qty;

	if (l_open_qty > 0) /*** Fresh open postion ***/
	{
		d_frs_wap_lmt = d_frs_wap;
		d_cvr_wap_lmt = (double) l_cvr_lmt_rt;
		
		/*** Ver 6.2 starts ***/
		if (c_frs_ordr_flw == 'B' )
		{
			d_spnperlot_T	= d_spn_per_lot_B;
		}
		else
		{
			d_spnperlot_T = d_spn_per_lot;
		}
		/*** Ver 6.2 ends ***/
	}
	else if (l_open_qty < 0) /*** Cover open Qty ***/
	{
		d_frs_wap_lmt = (double)l_frs_lmt_rt;
		d_cvr_wap_lmt = d_cvr_wap;

    /*** Ver 6.2 starts ***/
    if (c_frs_ordr_flw == 'B' )
    {
      d_spnperlot_T = d_spn_per_lot;
    }
    else
    {
      d_spnperlot_T = d_spn_per_lot_B;
    }
    /*** Ver 6.2 ends ***/
	}
   /*** Ver 6.2 starts ***/
	else
	{
    if (c_frs_ordr_flw == 'B' )
    {
      d_spnperlot_T = d_spn_per_lot_B;
    }
    else
    {
      d_spnperlot_T = d_spn_per_lot;
    }
	}
  /*** Ver 6.2 ends ***/

	if(DEBUG_MSG_LVL_3){
		fn_userlog( c_ServiceName, "***************************************");
		fn_userlog( c_ServiceName, "SLTP Percent:%lf:",d_sltp_prcnt);
		fn_userlog( c_ServiceName, "Fresh average trade price:%lf:", d_frs_wap );
		fn_userlog( c_ServiceName, "Fresh Limit Rate:%ld:",l_frs_lmt_rt);

		fn_userlog( c_ServiceName, "Net Open Qty:%ld:", l_open_qty );
		fn_userlog( c_ServiceName, "Fresh average trade price OR Limit Rate :%lf:", d_frs_wap_lmt );
		fn_userlog( c_ServiceName, "Cover average trade price OR Limit Rate :%lf:", d_cvr_wap_lmt );
		fn_userlog( c_ServiceName, "Total Pending Qty:%ld:", l_tot_pending_qty );
		fn_userlog( c_ServiceName, "Cover Limit Rate:%ld:", l_cvr_lmt_rt );
	}

  *d_mrgn_amt = (( (double)abs(l_open_qty) * d_frs_wap_lmt * d_sltp_prcnt)/100) + (( (double) l_tot_pending_qty * (double) l_frs_lmt_rt * d_sltp_prcnt)/100 );
  *d_lss_amt =  (c_frs_ordr_flw == 'B' )?
               (double) ( ( (double) abs(l_open_qty) * (d_frs_wap_lmt - d_cvr_wap_lmt)) +  ( (double)l_tot_pending_qty * (double)(l_frs_lmt_rt - l_cvr_lmt_rt)) ):
               (double) ( ( (double) abs(l_open_qty) * (d_frs_wap_lmt - d_cvr_wap_lmt ) * -1) + ( (double)l_tot_pending_qty * (double)(l_frs_lmt_rt - l_cvr_lmt_rt ) * -1));

	/*** Ver 6.2  starts ***/
	/** FORMULA: FPSL SEBI% * (SPAN + EXPOSURE) **/

	*d_xchng_amt =( d_xchng_prcnt/100 * 
								 (
									(  d_spnperlot_T * ((double)abs(l_open_qty) / (double) l_lot_sz)) +
						    	( (double)abs(l_open_qty) * d_frs_wap_lmt * d_fmm_expr/100 ) 
								 )
								) + 
								( d_xchng_prcnt/100 *
                 (
                  (  d_spnperlot_T * ((double)l_tot_pending_qty / (double) l_lot_sz)) +
                  ( (double)l_tot_pending_qty * (double)l_frs_lmt_rt * d_fmm_expr/100 )
                 )
                );
	/*** Ver 6.2 ends ***/

	/*** Commented in Ver 6.2 ***
	*d_xchng_amt = (( (double)abs(l_open_qty) * d_frs_wap_lmt * d_xchng_prcnt)/100) + (( (double) l_tot_pending_qty * (double) l_frs_lmt_rt * d_xchng_prcnt)/100 ); *** Ver 5.4 ***  ***/

	*d_comp1_mrgn = *d_mrgn_amt;  /*** Ver 5.4 ***/
	*d_comp1_pl   = *d_lss_amt;	 /*** Ver 5.4 ***/

	if(DEBUG_MSG_LVL_3){
		fn_userlog( c_ServiceName, "Margin Amount to be blocked:%lf:",*d_mrgn_amt);
		fn_userlog( c_ServiceName, "Loss Amount to be blocked:%lf:", *d_lss_amt );
		fn_userlog( c_ServiceName, "Exchange Amount to be blocked:%lf:", *d_xchng_amt ); /*** ver 5.4 ***/
	}

	/*** Ver 5.4 starts ***/
	sprintf (c_ref_rmrks,"M:%0.2lf:PL:%0.2lf:X:%0.2lf:",
          *d_mrgn_amt/100,
          *d_lss_amt/100,
          *d_xchng_amt/100);

  if ( *d_xchng_amt > (*d_mrgn_amt + *d_lss_amt) )
  {
    *d_lss_amt = *d_xchng_amt;
    *d_mrgn_amt = 0.0;
  }
  else
  {
    *d_lss_amt = *d_lss_amt + *d_mrgn_amt;
    *d_mrgn_amt = 0.0;
  }

	if(DEBUG_MSG_LVL_0){
	fn_userlog( c_ServiceName, "Final Loss amount to be blocked:%lf:",*d_lss_amt);
	}
 	/*** Ver 5.4 ends ***/
 /***  ver 6.1 starts ***/


/***  EXEC SQL
     SELECT count(*)
       INTO :i_total_profit_ordr_cnt
       FROM FOD_FO_ORDR_DTLS
      WHERE FOD_SLTP_ORDR_RFRNC  = :c_fresh_ordr_ref
        AND FOD_FC_FLAG  = 'T'
        AND FOD_ORDR_STTS in ('R','Q','O','E','P','D','B');


   if( SQLCODE != 0 )
   {
      fn_errlog ( c_ServiceName, "S31420", SQLMSG, c_err_msg );
      return ( -1 ) ;
   }

  if(DEBUG_MSG_LVL_0){
  fn_userlog( c_ServiceName, "Profit order count:%d:",i_total_profit_ordr_cnt);
  }
  ***/

   EXEC SQL
     SELECT   NVL( SUM( DECODE( FOD_FC_FLAG, 'T',FOD_ORDR_TOT_QTY,0 ) ), 0 ),
              NVL( SUM( DECODE( FOD_FC_FLAG, 'T',FOD_CNCL_QTY,0 ) ), 0 ),
              NVL( SUM( DECODE( FOD_FC_FLAG, 'T',FOD_EXPRD_QTY,0 ) ), 0 )
     INTO    :l_prft_tot_ordr_qty,
             :l_prft_can_qty,
             :l_prft_exp_qty
     FROM    FOD_FO_ORDR_DTLS
     WHERE   DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_fresh_ordr_ref;


    if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31425", SQLMSG, c_err_msg );
      return ( -1 ) ;
    }

   EXEC SQL
    SELECT    NVL( SUM( DECODE( FOD_FC_FLAG, 'T',FTD_EXCTD_QTY,0 ) ), 0 )
      INTO    :l_prft_exe_qty
      FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
      WHERE   FTD_ORDR_RFRNC  = FOD_ORDR_RFRNC
      AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_fresh_ordr_ref;
    if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31430", SQLMSG, c_err_msg );
      return ( -1 ) ;
    }

    l_prft_pending_qty =  l_prft_tot_ordr_qty - ( l_prft_exe_qty + l_prft_can_qty + l_prft_exp_qty );

    if(DEBUG_MSG_LVL_0){
     fn_userlog( c_ServiceName, "Profit Tot:%ld: Can:%ld: Exp:%ld: Exec:%ld: Pndng:%ld:",l_prft_tot_ordr_qty,l_prft_can_qty,l_prft_exp_qty,l_prft_exe_qty,l_prft_pending_qty);
    }

   if( l_prft_pending_qty > 0 || l_prft_exe_qty > 0 )
   {
    EXEC SQL
     SELECT   NVL( SUM( DECODE( FOD_FC_FLAG, 'C',FTD_EXCTD_QTY,'T',FTD_EXCTD_QTY, -1 * FTD_EXCTD_QTY ) ), 0 )
      INTO    :l_open_qty_weo_prft_ordr
      FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
      WHERE   FTD_ORDR_RFRNC  = FOD_ORDR_RFRNC
      AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_fresh_ordr_ref;

     if( SQLCODE != 0 )
     {
      fn_errlog ( c_ServiceName, "S31435", SQLMSG, c_err_msg );
      return ( -1 ) ;
     }

    l_frs_pending_qty =  l_frs_tot_ordr_qty - ( d_frs_exe_qty + l_frs_can_qty + l_frs_exp_qty );
    l_cvr_pending_qty =  l_cvr_tot_ordr_qty - ( d_cvr_exe_qty + l_cvr_can_qty + l_cvr_exp_qty );


    if(DEBUG_MSG_LVL_0){
     fn_userlog( c_ServiceName, "Profit Open qty weo profit:%ld:",l_open_qty_weo_prft_ordr);
    }

     if( l_prft_pending_qty != 0 || l_open_qty_weo_prft_ordr != 0 )
     {
        if( d_lss_amt_blkd_old >= *d_lss_amt )
        {
           *d_mrgn_amt=d_amt_blkd_old;
           *d_lss_amt=d_lss_amt_blkd_old;

          sprintf (c_ref_rmrks,"M:%0.2lf:PL:%0.2lf:X:%0.2lf:",
          *d_mrgn_amt/100,
          *d_lss_amt/100,
           0);
        }
     }
     else if( l_prft_pending_qty == 0 && l_open_qty_weo_prft_ordr == 0 && l_frs_pending_qty ==0 && l_cvr_pending_qty == 0)
     {
        *d_mrgn_amt=0;
        *d_lss_amt=0;

        sprintf (c_ref_rmrks,"M:%0.2lf:PL:%0.2lf:X:%0.2lf:",
        0,0,0);
     }
   }
   /** ver 6.1 ends ***/
 return (0);
}
/*** Ver 3.2 Ends here ***/


/*** Ver 3.3 starts here ***/
int fn_cal_mrgn_sltp_op (	char   *c_ServiceName,
							char   *c_fresh_ordr_ref,
							long   l_frs_lmt_rt,
							long   l_cvr_lmt_rt,
							double *d_mrgn_amt,
							double *d_lss_amt,
 						  char   *c_ref_rmrks, /*** Ver 5.6 ***/
							double *d_comp1_mrgn,/*** Ver 5.6 ***/
							double *d_comp1_pl,	 /*** Ver 5.6 ***/
							double *d_xchng_amt, /*** Ver 5.6 ***/
							double *d_prem_amt,  /*** Ver 5.6 ***/
							double *d_spn_mrgn,  /*** Ver 5.6 ***/
							double *d_expr_mrgn, /*** Ver 5.6 ***/
							char   c_req_type,
							char   *c_err_msg
						)
{
		char c_cln_mtch_accnt[11]="\0";
		char c_xchng_cd[3+1]="\0";
		char c_prdct_typ = '\0';
		char c_undrlyng [7] = "\0";
		char c_expry_dt [ LEN_DATE ] = "\0";
		char c_exer_typ = '\0';
		char c_opt_typ = '\0';
		/*** char c_strk_prc[20]="\0"; *** Commented in Ver 5.6 ***/
    double  d_strk_prc = 0.0; /*** Ver 5.6 ***/
		char c_sltp_ordr_refrnc[19];
		char c_frs_ordr_flw ='\0';
		double d_sltp_prcnt = 0.0;
		long l_open_qty = 0;
		double d_cvr_exe_qty = 0;
		double  d_frs_exe_val = 0;
		double  d_frs_exe_qty = 0;
		double  d_cvr_exe_val = 0;
		double  d_frm_diffrnc_mrgn = 0;
		long l_frs_tot_ordr_qty = 0;
		long l_frs_can_qty = 0;
		long l_cvr_can_qty = 0;
		long l_frs_exp_qty = 0;
		long l_cvr_exp_qty = 0;
    long l_frs_rej_qty = 0; /*** Ver 5.6 ***/
    long l_cvr_rej_qty = 0; /*** Ver 5.6 ***/
		long l_tot_pending_qty = 0;
		long  l_stp_lss_tgr = 0;
		double d_frs_wap = 0;
		double d_cvr_wap = 0;
		double d_frs_wap_lmt = 0;
		double d_cvr_wap_lmt = 0;
		double d_op_flat_rt = 0.0;		/*** Ver 5.6 ***/
		double d_bop_sebi_prcnt = 0.0; /*** Ver 5.6 ***/
		double d_sop_sebi_prcnt = 0.0; /*** Ver 5.6 ***/
		double d_spn_per_lot = 0.0;		/*** Ver 5.6 ***/
		double d_spot = 0.0;					/*** Ver 5.6 ***/
		double d_expr_prcnt = 0.0;		/*** Ver 5.6 ***/
		long  l_lot_sz =0; /*** Ver 5.6 ***/
    char c_otm_flg = 'N';         /*** Ver 5.7 ***/
	  double d_prev_und_quote = 0.0; /*** Ver 6.2 ***/
	
		MEMSET(c_undrlyng);
		MEMSET(c_sltp_ordr_refrnc);

		if(DEBUG_MSG_LVL_3){
			fn_userlog( c_ServiceName, "Inside margin calculation for Order Reference:%s:",c_fresh_ordr_ref);
			fn_userlog( c_ServiceName, "Fresh Limit Rate:%ld:",l_frs_lmt_rt);
			fn_userlog( c_ServiceName, "Cover Limit Rate:%ld:", l_cvr_lmt_rt );
		}

	
		EXEC SQL
		 SELECT  FOD_CLM_MTCH_ACCNT,
						 FOD_XCHNG_CD,
						 FOD_PRDCT_TYP,
						 trim(FOD_UNDRLYNG),
						 FOD_EXPRY_DT,
						 FOD_EXER_TYP,
						 FOD_OPT_TYP,
						 FOD_STRK_PRC,
						 FOD_ORDR_FLW,
						 FOD_SLTP_ORDR_RFRNC
						
		 INTO   :c_cln_mtch_accnt,
						:c_xchng_cd,
						:c_prdct_typ,
						:c_undrlyng,
						:c_expry_dt,
						:c_exer_typ,
						:c_opt_typ,
						:d_strk_prc, /*** Ver 5.6 variable change ***/
						:c_frs_ordr_flw,
						:c_sltp_ordr_refrnc
		 FROM    FOD_FO_ORDR_DTLS
		 WHERE   FOD_ORDR_RFRNC = :c_fresh_ordr_ref;

		if( SQLCODE != 0 )
		{
			fn_errlog ( c_ServiceName, "S31440", SQLMSG, c_err_msg );
			return ( -1 ) ;
		}

		if(DEBUG_MSG_LVL_3){
			fn_userlog( c_ServiceName, "Match Account:%s:",c_cln_mtch_accnt);
			fn_userlog( c_ServiceName, "Underlying:%s:", c_undrlyng );
			fn_userlog( c_ServiceName, "c_xchng_cd:%s:", c_xchng_cd );
		}

		EXEC SQL
		  SELECT NVL(FOD_STP_LSS_TGR,0)
		  INTO :l_stp_lss_tgr
		FROM    FOD_FO_ORDR_DTLS
		  WHERE   FOD_ORDR_RFRNC = :c_sltp_ordr_refrnc;
		if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
		{
			fn_errlog ( c_ServiceName, "S31445", SQLMSG, c_err_msg );
			return ( -1 ) ;
		}
   
    fn_userlog( c_ServiceName, "INSIDE fn_cal_mrgn_sltp_op CONTRCT RCVD is :%s:%s:%c:%s:%lf:%c:%c:",c_xchng_cd,c_undrlyng,c_prdct_typ,c_expry_dt,d_strk_prc,c_opt_typ,c_exer_typ);    /*** ver 5.7 ***/

		/*** Ver 5.6 starts ***/
		EXEC SQL
		SELECT NVL(FTQ_SPN_PER_LOT,0),
					 NVL(FTQ_MIN_LOT_QTY,0),
           NVL(FTQ_OTM_FLG,'N')   /*** Ver 5.7 **/
		INTO	 :d_spn_per_lot,
					 :l_lot_sz,
           :c_otm_flg             /*** Ver 5.7 **/
		FROM   FTQ_FO_TRD_QT
		WHERE  FTQ_XCHNG_CD = :c_xchng_cd   
		AND    FTQ_UNDRLYNG = :c_undrlyng
		AND    FTQ_PRDCT_TYP = 'O'
		AND    trunc(FTQ_EXPRY_DT) = trim(:c_expry_dt)
		AND    FTQ_STRK_PRC = :d_strk_prc
		AND    FTQ_EXER_TYP = :c_exer_typ
		AND    FTQ_OPT_TYP = :c_opt_typ;

		if ( SQLCODE  !=  0 )
		{
			fn_errlog( c_ServiceName, "S31450",SQLMSG,c_err_msg);
			return ( -1 ) ;
		}
   
    fn_userlog( c_ServiceName, "OTM FLAG is :%c:",c_otm_flg);    /** ver 5.7 **/

		 EXEC SQL
			SELECT  NVL(LTQ_RT,0.0) * 100, /*** Ver 6.2 NVL added ***/
							NVL(LTQ_PREV_CLS_PRC,0.0) * 100  /*** Ver 6.2 ***/
			INTO    :d_spot,
						  :d_prev_und_quote			/*** Ver 6.2 ***/
			FROM    LTQ_TRD_QT 
			WHERE   LTQ_XCHNG_CD  = decode(:c_xchng_cd,'BFO','BSE','NSE')
			AND     LTQ_STCK_CD   = :c_undrlyng;

		if ( SQLCODE  !=  0 )
		{
			fn_errlog( c_ServiceName, "S31455",SQLMSG,c_err_msg);
			return ( -1 ) ;
		}
    fn_userlog( c_ServiceName, "SPOT :%lf:",d_spot);
		/**** Ver 5.6 ends ***/


		/***** Fetching sltp %  *****/
		EXEC SQL
				 SELECT nvl(FMM_SLTP_PRCNT,0),
								NVL(FMM_OPLUS_FLAT_RT,0) * 100, /*** Ver 5.6 ***/
								NVL(FMM_OPLUS_SEBI_PRCNT_B,0),	/*** Ver 5.6 ***/
								NVL(FMM_OPLUS_SEBI_PRCNT_S,0),	/*** Ver 5.6 ***/
								/*** NVL(FMM_EXPSR,0) *** Ver 5.6 **  commented in ver 5.7 **/  
                decode(:c_otm_flg,'Y',NVL(FMM_DEEP_OTM_EXPSR,0),NVL(FMM_EXPSR,0))       /*** Ver 5.7 ***/
				 INTO   :d_sltp_prcnt,
								:d_op_flat_rt,								/*** Ver 5.6 ***/
								:d_bop_sebi_prcnt,						/*** Ver 5.6 ***/
								:d_sop_sebi_prcnt,						/*** Ver 5.6 ***/
								:d_expr_prcnt							  	/*** Ver 5.6 ***/
				 FROM   FMM_FO_MRGN_MSTR
				 WHERE  FMM_PRDCT_TYP='O'
				 AND    FMM_UNDRLYNG = :c_undrlyng
				 AND    FMM_XCHNG_CD = :c_xchng_cd
				 AND    FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
				 FROM    FCB_FO_CLN_BSKT_ALLTD
				 WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
				 FROM    CLM_CLNT_MSTR
				 WHERE   CLM_MTCH_ACCNT = :c_cln_mtch_accnt));
		if ( SQLCODE  !=  0 )
		{
			fn_errlog ( c_ServiceName, "S31460", SQLMSG, c_err_msg );
			return ( -1 ) ;
		 }
   /** ver 5.6 starts ***/
    fn_userlog( c_ServiceName, "PERCENT d_expr_prcnt :%lf: d_sltp_prcnt :%lf:",d_expr_prcnt,d_sltp_prcnt);
    fn_userlog( c_ServiceName, "PERCENT d_op_flat_rt :%lf: d_bop_sebi_prcnt :%lf: d_sop_sebi_prcnt :%lf:",d_op_flat_rt,d_bop_sebi_prcnt,d_sop_sebi_prcnt);
   /** ver 5.6 ends ***/

	  EXEC SQL
		 SELECT   NVL( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FTD_EXCTD_QTY, FTD_EXCTD_QTY ) ), 0 ),
							NVL( SUM( DECODE( FOD_FC_FLAG, 'C',0, FTD_EXCTD_QTY ) ), 0 ),
							NVL( SUM( DECODE( FOD_FC_FLAG, 'C', FTD_EXCTD_QTY, 0 ) ), 0 ),
							NVL( SUM( DECODE( FOD_FC_FLAG, 'C',0, FTD_EXCTD_QTY * FTD_EXCTD_RT ) ),0),
							NVL( SUM( DECODE( FOD_FC_FLAG, 'C', FTD_EXCTD_QTY * FTD_EXCTD_RT, 0 ) ),0)
			INTO    :l_open_qty,
							:d_frs_exe_qty,
							:d_cvr_exe_qty,
							:d_frs_exe_val,
							:d_cvr_exe_val
			FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
			WHERE   FTD_ORDR_RFRNC  = FOD_ORDR_RFRNC
			AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_fresh_ordr_ref;

		if( SQLCODE != 0 )
		{
			fn_errlog ( c_ServiceName, "S31465", SQLMSG, c_err_msg );
			return ( -1 ) ;
		}

		EXEC SQL
		 SELECT   /*** NVL( SUM( DECODE( FOD_FC_FLAG, 'C',0, FOD_ORDR_TOT_QTY ) ), 0 ), *** Ver 5.6 ***/
              NVL( SUM( DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_TOT_QTY ,0 ) ), 0 ), /*** Ver 5.6 ***/
							NVL( SUM( DECODE( FOD_FC_FLAG, 'C',0, FOD_CNCL_QTY ) ), 0 ),
							NVL( SUM( DECODE( FOD_FC_FLAG, 'C',0, FOD_EXPRD_QTY ) ), 0 ),
							NVL( SUM( DECODE( FOD_FC_FLAG, 'C',FOD_CNCL_QTY, 0 ) ), 0 ),
							NVL( SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXPRD_QTY,0 ) ), 0 )
		 INTO    :l_frs_tot_ordr_qty,
				:l_frs_can_qty,
				:l_frs_exp_qty,
				:l_cvr_can_qty,
				:l_cvr_exp_qty
		 FROM    FOD_FO_ORDR_DTLS
		 WHERE   DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_fresh_ordr_ref;

		if( SQLCODE != 0 )
		{
			fn_errlog ( c_ServiceName, "S31470", SQLMSG, c_err_msg );
			return ( -1 ) ;
		}

  /*** Ver 5.6 starts ***/
	 EXEC SQL
	  SELECT  NVL( SUM( DECODE( FOD_FC_FLAG, 'C',0, FOD_ORDR_TOT_QTY ) ), 0 ),
            NVL( SUM( DECODE( FOD_FC_FLAG, 'C',FOD_ORDR_TOT_QTY, 0 ) ), 0 )
    INTO    :l_frs_rej_qty,
            :l_cvr_rej_qty
    FROM    FOD_FO_ORDR_DTLS
    WHERE   FOD_ORDR_STTS='J'
    AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_fresh_ordr_ref;
	
   if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31475", SQLMSG, c_err_msg );
      return ( -1 ) ;
    }
	/*** Ver 5.6 ends ***/

		if(DEBUG_MSG_LVL_3){
			fn_userlog( c_ServiceName, "Fresh Exec Qty:%lf:", d_frs_exe_qty );
			fn_userlog( c_ServiceName, "Cover Exec Qty:%lf:", d_cvr_exe_qty );
			fn_userlog( c_ServiceName, "Fresh Exec Val:%lf:", d_frs_exe_val );
			fn_userlog( c_ServiceName, "Cover Exec Val:%lf:", d_cvr_exe_val );
			fn_userlog( c_ServiceName, "Fresh Total Ordered Qty:%ld:", l_frs_tot_ordr_qty );
			fn_userlog( c_ServiceName, "Fresh Cancel Qty:%ld:", l_frs_can_qty );
			fn_userlog( c_ServiceName, "Fresh Expired Qty:%ld:", l_frs_exp_qty );
			fn_userlog( c_ServiceName, "Fresh Rej Qty:%ld:", l_frs_rej_qty ); /*** Ver 5.6 ***/
			fn_userlog( c_ServiceName, "Cover Cancel Qty:%ld:", l_cvr_can_qty );
			fn_userlog( c_ServiceName, "Cover Expired Qty:%ld:", l_cvr_exp_qty );
			fn_userlog( c_ServiceName, "Cover Rej Qty:%ld:", l_cvr_rej_qty ); /*** Ver 5.6 ***/
		}

	EXEC SQL
	SELECT nvl(FRM_DIFFRNC_MRGN,0) 
	INTO   :d_frm_diffrnc_mrgn
	FROM   FRM_FO_RANGE_MSTR
	WHERE  FRM_XCHNG_CD = :c_xchng_cd 
		AND    FRM_UNDRLYNG = :c_undrlyng 
		AND    FRM_ORDR_FLOW = :c_frs_ordr_flw
		AND    FRM_FROM_RANGE <= :l_stp_lss_tgr
		AND    :l_stp_lss_tgr   < FRM_TO_RANGE
		AND    (:l_stp_lss_tgr > 0 ) ;

	if ( SQLCODE  !=  0  && SQLCODE != NO_DATA_FOUND)
	{
		fn_errlog( c_ServiceName, "S31480",SQLMSG,c_err_msg);
		return ( -1 ) ;
	}
	
	/*** l_tot_pending_qty = l_frs_tot_ordr_qty - ( (long) fn_maxd(d_frs_exe_qty,d_cvr_exe_qty) + fn_minl(l_frs_can_qty,l_cvr_can_qty) + fn_minl(l_frs_exp_qty,l_cvr_exp_qty) ); *** Ver 5.6 ***/
	l_tot_pending_qty = l_frs_tot_ordr_qty - ( (long) fn_maxd(d_frs_exe_qty,d_cvr_exe_qty) + fn_minl((l_frs_can_qty+l_frs_rej_qty+l_frs_exp_qty) ,(l_cvr_can_qty+l_cvr_rej_qty+l_cvr_exp_qty)) ); /*** Ver 5.6 ***/

	d_frs_wap = d_frs_exe_val / d_frs_exe_qty;
	d_cvr_wap = d_cvr_exe_val / d_cvr_exe_qty;

	if (l_open_qty > 0) /*** Fresh open postion ***/
	{
		d_frs_wap_lmt = d_frs_wap;
		d_cvr_wap_lmt = (double) l_cvr_lmt_rt;
	}
	else if (l_open_qty < 0) /*** Cover open Qty ***/
	{
		d_frs_wap_lmt = (double)l_frs_lmt_rt;
		d_cvr_wap_lmt = d_cvr_wap;
	}
	
	if(DEBUG_MSG_LVL_3){
		fn_userlog( c_ServiceName, "***************************************");
		fn_userlog( c_ServiceName, "SLTP Percent:%lf:",d_sltp_prcnt);
		fn_userlog( c_ServiceName, "Fresh average trade price:%lf:", d_frs_wap );
		fn_userlog( c_ServiceName, "Fresh Limit Rate:%ld:",l_frs_lmt_rt);

		fn_userlog( c_ServiceName, "Net Open Qty:%ld:", l_open_qty );
		fn_userlog( c_ServiceName, "Fresh average trade price OR Limit Rate :%lf:", d_frs_wap_lmt );
		fn_userlog( c_ServiceName, "Cover average trade price OR Limit Rate :%lf:", d_cvr_wap_lmt );
		fn_userlog( c_ServiceName, "Total Pending Qty:%ld:", l_tot_pending_qty );
		fn_userlog( c_ServiceName, "Cover Limit Rate:%ld:", l_cvr_lmt_rt );
	}

  /*** *d_mrgn_amt = (( (double)abs(l_open_qty) * d_frs_wap_lmt * d_sltp_prcnt)/100) + (( (double) l_tot_pending_qty * (double) l_frs_lmt_rt * d_sltp_prcnt)/100 ); *** Commented in Ver 5.6 ***/
	*d_mrgn_amt = ( ((double)abs(l_open_qty) * d_op_flat_rt) + ((double) l_tot_pending_qty * d_op_flat_rt) ); /*** Ver 5.6 ***/ 

  if (DEBUG_MSG_LVL_3)       /*** Ver 3.8 ***/
  {
		fn_userlog( c_ServiceName, "c_frs_ordr_flw =:%c: d_frm_diffrnc_mrgn:%lf: c_req_type:%c",c_frs_ordr_flw, d_frm_diffrnc_mrgn,c_req_type);
	}

	if(c_frs_ordr_flw == 'B' )
	{
		if(c_req_type == 'U')		/***U- For User Initiated Order Plc or Mod request**/
		{
			if(d_frm_diffrnc_mrgn < 100 && d_frm_diffrnc_mrgn != -1)
				*d_lss_amt =  (double) ( ( (double) abs(l_open_qty) * (d_frs_wap_lmt - d_cvr_wap_lmt)) +  ( (double)l_tot_pending_qty * (double)(l_frs_lmt_rt - l_cvr_lmt_rt)) );

			else if(d_frm_diffrnc_mrgn == 100)
				*d_lss_amt =  (double) ( ( (double) abs(l_open_qty) * (d_frs_wap_lmt)) +  ( (double)l_tot_pending_qty * (double)(l_frs_lmt_rt)) );
			
			else if( d_frm_diffrnc_mrgn == -1)
				return ( -2 ) ;

		}
		else if(c_req_type == 'E')	/***E - For Exchange Initiated Order/Trade Ack**/
		{
			if(d_frm_diffrnc_mrgn < 100)
				*d_lss_amt =  (double) ( ( (double) abs(l_open_qty) * (d_frs_wap_lmt - d_cvr_wap_lmt)) +  ( (double)l_tot_pending_qty * (double)(l_frs_lmt_rt - l_cvr_lmt_rt)) );

			else if(d_frm_diffrnc_mrgn == 100)
				*d_lss_amt =  (double) ( ( (double) abs(l_open_qty) * (d_frs_wap_lmt)) +  ((double)l_tot_pending_qty * (double)(l_frs_lmt_rt)) );
		}
		else
		{
			fn_userlog( c_ServiceName, "Invalid req type :%c:", c_req_type);
			return ( -1 ) ;
		}

		/*** Ver 5.6 starts ***/
		*d_prem_amt = ((double)abs(l_open_qty) * d_frs_wap_lmt ) + ((double) l_tot_pending_qty * (double) l_frs_lmt_rt ); 
		*d_xchng_amt = (( (double)abs(l_open_qty) * d_frs_wap_lmt * d_bop_sebi_prcnt)/100) + (( (double) l_tot_pending_qty * (double) l_frs_lmt_rt * d_bop_sebi_prcnt)/100 ); 

		*d_comp1_mrgn = *d_mrgn_amt; 
		*d_comp1_pl   = *d_lss_amt;	 

		sprintf (c_ref_rmrks,"M:%0.2lf:PL:%0.2lf:X:%0.2lf:PM:%0.2lf:",
				*d_mrgn_amt/100,
				*d_lss_amt/100,
				*d_xchng_amt/100,
				*d_prem_amt/100);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog( c_ServiceName, "IN BUY : spn :%lf: expr :%lf: xchng :%lf: lss :%lf: mrg :%lf: prm :%lf:",*d_spn_mrgn,*d_expr_mrgn,*d_xchng_amt,*d_lss_amt,*d_mrgn_amt,*d_prem_amt);
  }

		if ( *d_xchng_amt > (*d_mrgn_amt + *d_lss_amt) ) /*** Taking Max component ***/
		{
			if ( *d_xchng_amt < *d_prem_amt)   /*** Taking Min component ***/
			{
        fn_userlog( c_ServiceName, "BUY : 1");
				*d_lss_amt = *d_xchng_amt;
				*d_mrgn_amt = 0.0;
			}
			else
			{
        fn_userlog( c_ServiceName, "BUY : 2");
				*d_lss_amt = *d_prem_amt;
				*d_mrgn_amt = 0.0;
			}
		}
		else
		{
			if ( (*d_lss_amt + *d_mrgn_amt) < *d_prem_amt)  /*** Taking Min component ***/
			{
        fn_userlog( c_ServiceName, "BUY : 3");
				*d_lss_amt = (*d_lss_amt + *d_mrgn_amt);
				*d_mrgn_amt = 0.0;
			}
			else
			{
        fn_userlog( c_ServiceName, "BUY : 4");
				*d_lss_amt = *d_prem_amt;
				*d_mrgn_amt = 0.0;
			}
		}
		/*** Ver 5.6 ends ***/

	}
	else if(c_frs_ordr_flw == 'S' )
	{
		*d_lss_amt = (double) ( ( (double) abs(l_open_qty) * (d_frs_wap_lmt - d_cvr_wap_lmt ) * -1) + ( (double)l_tot_pending_qty * (double)(l_frs_lmt_rt - l_cvr_lmt_rt ) * -1));

		/*** Ver 5.6 starts ***/
		*d_spn_mrgn = d_spn_per_lot * ( ((double)abs(l_open_qty) + (double)l_tot_pending_qty)/(double) l_lot_sz );
		*d_expr_mrgn = ((double)abs(l_open_qty) + (double)l_tot_pending_qty) * fn_maxd(d_spot,d_prev_und_quote) * d_expr_prcnt/100; /** Max with prev closing taken in Ver 6.2 **/
		*d_xchng_amt = d_sop_sebi_prcnt/100 * (*d_spn_mrgn + *d_expr_mrgn) ; 

		*d_comp1_mrgn = *d_mrgn_amt; 
		*d_comp1_pl   = *d_lss_amt;	 

		sprintf (c_ref_rmrks,"M:%0.2lf:PL:%0.2lf:X:%0.2lf:SPN:%0.2lf:EXP:%0.2lf:",
				*d_mrgn_amt/100,
				*d_lss_amt/100,
				*d_xchng_amt/100,
				*d_spn_mrgn/100,
				*d_expr_mrgn/100);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog( c_ServiceName, "IN SELL : spn :%lf: expr :%lf: xchng :%lf: lss :%lf: mrgn :%lf:",*d_spn_mrgn,*d_expr_mrgn,*d_xchng_amt,*d_lss_amt,*d_mrgn_amt);
  }

		if ( *d_xchng_amt > (*d_mrgn_amt + *d_lss_amt) ) /*** Taking Max component ***/
		{
        fn_userlog( c_ServiceName, "SELL : 1");
				*d_lss_amt = *d_xchng_amt;
				*d_mrgn_amt = 0.0;
		}
		else
		{
        fn_userlog( c_ServiceName, "SELL : 2");
				*d_lss_amt = (*d_lss_amt + *d_mrgn_amt);
				*d_mrgn_amt = 0.0;
		}
		/*** Ver 5.6 ends ***/
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "Margin Amount to be blocked:%lf:",*d_mrgn_amt);
		fn_userlog( c_ServiceName, "Loss Amount to be blocked:%lf:", *d_lss_amt );
	}

 return (0);
}
/*** Ver 3.3 Ends here ***/

/*** Ver 3.7 Starts Here Commented in Ver 4.3 ***
int fn_spd_acpt(char *c_ServiceName,char *c_ipord_ref,long l_ors_msg_typ)
{
  sql_cursor     sys_cursor;
  struct vw_spdxchbk st_spd_xchbk;

  char c_xchng_cd[4];
  char c_ordr_rfrnc[19];
  char c_pipe_id[3];
  char c_mod_trd_dt[23];
  char c_slm_flg = '\0';
  char c_valid_dt[23];
  char c_ord_typ = '\0';
  char c_sprd_ord_ind = '\0';
  char c_req_typ = '\0';
  char c_qt_tm[23];
  char c_rqst_tm[23];
  char c_frwrd_tm[23];
  char c_plcd_stts = '\0';
  char c_rms_prcsd_flg = '\0';
  char c_ack_tm[23];
  char c_xchng_rmrks[257];
  char c_ex_ordr_typ ='\0';
  char c_spl_flg1 = '\0';
  char c_ordr_flw = '\0';
  char  c_err_msg[256];

  long l_ord_seq=0;
  long l_dsclsd_qty=0;
  long l_ord_tot_qty=0;
  long l_ord_lmt_rt=0;
  long l_stp_lss_tgr=0;
  long l_mdfctn_cntr1=0;
  long l_quote=0;
  long l_xchng_can_qty=0;
  long l_bit_flg=0;
  long l_fsd_ord_exe_qty = 0;

  int i_cnt = 0;
  int i_returncode = 0;

  double d_jiffy=0.0;

  if(DEBUG_MSG_LVL_3)  ** ver 3.9, debug changed from 0 to 3 **
  {
     fn_userlog(c_ServiceName, " Inside function fn_spd_acpt********");
  	 fn_userlog(c_ServiceName,"l_ors_msg_typ*****:%ld:",l_ors_msg_typ);  
	}

  EXEC SQL ALLOCATE :sys_cursor;


        EXEC SQL EXECUTE
          BEGIN
            OPEN :sys_cursor FOR
          SELECT  FXB_XCHNG_CD,
                  FXB_ORDR_RFRNC,
                  FXB_PIPE_ID,
                  FXB_MOD_TRD_DT,
                  FXB_ORDR_SQNC,
                  FXB_LMT_MRKT_SL_FLG,
                  FXB_DSCLSD_QTY,
                  FXB_ORDR_TOT_QTY,
                  FXB_LMT_RT,
                  FXB_STP_LSS_TGR,
                  FXB_MDFCTN_CNTR,
                  NVL (to_char(FXB_ORDR_VALID_DT,'dd-Mon-yyyy hh24:mi:ss'), '*' ),
                  FXB_ORDR_TYPE,
                  FXB_SPRD_ORD_IND,
                  FXB_RQST_TYP,
                  FXB_QUOTE,
                  NVL (to_char(FXB_QT_TM,'dd-Mon-yyyy hh24:mi:ss'), '*' ),
                  NVL (to_char(FXB_RQST_TM,'dd-Mon-yyyy hh24:mi:ss'), '*' ),
                  NVL (to_char(FXB_FRWD_TM,'dd-Mon-yyyy hh24:mi:ss'), '*' ),
                  FXB_PLCD_STTS,
                  FXB_RMS_PRCSD_FLG,
                  FXB_ORS_MSG_TYP,
                  NVL (to_char(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'), '*' ),
                  FXB_XCHNG_RMRKS,
                  FXB_EX_ORDR_TYP,
                  FXB_SPL_FLAG,
                  FXB_JIFFY,
                  FXB_STREAM_NO,
                  FOD_ORDR_FLW,
                  NVL(FSD_EXEC_QTY,0)
         FROM   FXB_FO_XCHNG_BOOK,FOD_FO_ORDR_DTLS,FSD_FO_SPRD_DTLS
         WHERE  FXB_ORDR_RFRNC = FOD_ORDR_RFRNC
         AND    FXB_ORDR_RFRNC = FSD_ORDR_RFRNC
         AND    FXB_ORS_MSG_TYP =:l_ors_msg_typ
         AND    FSD_SPRD_RFRNC=(SELECT FSD_SPRD_RFRNC
                                  FROM FSD_FO_SPRD_DTLS
                                 WHERE FSD_ORDR_RFRNC =:c_ipord_ref);

          END;
        END-EXEC;

   if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
   {
     return -1;
   }

        MEMSET(st_spd_xchbk);

   for ( i_cnt = 0; i_cnt <= 2; i_cnt++ )
   {
          EXEC SQL  FETCH :sys_cursor
                    INTO  :c_xchng_cd,
                          :c_ordr_rfrnc,
                          :c_pipe_id,
                          :c_mod_trd_dt,
                          :l_ord_seq,
                          :c_slm_flg,
                          :l_dsclsd_qty,
                          :l_ord_tot_qty,
                          :l_ord_lmt_rt,
                          :l_stp_lss_tgr,
                          :l_mdfctn_cntr1,
                          :c_valid_dt,
                          :c_ord_typ,
                          :c_sprd_ord_ind,
                          :c_req_typ,
                          :l_quote,
                          :c_qt_tm,
                          :c_rqst_tm,
                          :c_frwrd_tm,
                          :c_plcd_stts,
                          :c_rms_prcsd_flg,
                          :l_ors_msg_typ,
                          :c_ack_tm,
                          :c_xchng_rmrks,
                          :c_ex_ordr_typ,
                          :c_spl_flg1,
                          :d_jiffy,
                          :l_bit_flg,
                          :c_ordr_flw,
                          :l_fsd_ord_exe_qty;

        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
            break;
          }
          return -1;
        }

          strcpy ( st_spd_xchbk.c_xchng_cd[i_cnt], c_xchng_cd);
          strcpy ( st_spd_xchbk.c_ordr_rfrnc[i_cnt], c_ordr_rfrnc);
          strcpy ( st_spd_xchbk.c_pipe_id[i_cnt], c_pipe_id);
          strcpy ( st_spd_xchbk.c_mod_trd_dt[i_cnt], c_mod_trd_dt);
          st_spd_xchbk.l_ord_seq[i_cnt] = l_ord_seq;
          st_spd_xchbk.c_slm_flg[i_cnt] = c_slm_flg;
          st_spd_xchbk.l_dsclsd_qty[i_cnt] = l_dsclsd_qty;
          st_spd_xchbk.l_ord_tot_qty[i_cnt] =l_ord_tot_qty;
          st_spd_xchbk.l_ord_lmt_rt[i_cnt] = l_ord_lmt_rt;
          st_spd_xchbk.l_stp_lss_tgr[i_cnt] = l_stp_lss_tgr;
          st_spd_xchbk.l_mdfctn_cntr[i_cnt] = l_mdfctn_cntr1;
          strcpy ( st_spd_xchbk.c_valid_dt[i_cnt], c_valid_dt);
          st_spd_xchbk.c_ord_typ[i_cnt] = c_ord_typ;
          st_spd_xchbk.c_sprd_ord_ind[i_cnt] = c_sprd_ord_ind;
          st_spd_xchbk.c_req_typ[i_cnt] = c_req_typ;
          st_spd_xchbk.l_quote[i_cnt] = l_quote;
          strcpy ( st_spd_xchbk.c_qt_tm[i_cnt], c_qt_tm);
          strcpy ( st_spd_xchbk.c_rqst_tm[i_cnt], c_rqst_tm);
          strcpy ( st_spd_xchbk.c_frwrd_tm[i_cnt], c_frwrd_tm);
          st_spd_xchbk.c_plcd_stts[i_cnt] = c_plcd_stts;
          st_spd_xchbk.c_rms_prcsd_flg[i_cnt] = c_rms_prcsd_flg;
          st_spd_xchbk.l_ors_msg_typ[i_cnt] = l_ors_msg_typ;
          strcpy ( st_spd_xchbk.c_ack_tm[i_cnt], c_ack_tm);
          strcpy ( st_spd_xchbk.c_xchng_rmrks[i_cnt], c_xchng_rmrks);
          st_spd_xchbk.c_ex_ordr_typ[i_cnt] = c_ex_ordr_typ;
          st_spd_xchbk.c_spl_flg[i_cnt] = c_spl_flg1;
          st_spd_xchbk.d_jiffy[i_cnt] = d_jiffy;
          st_spd_xchbk.l_bit_flg[i_cnt] = l_bit_flg;
          st_spd_xchbk.c_ordr_flw[i_cnt] = c_ordr_flw;
          st_spd_xchbk.l_xchng_can_qty[i_cnt] = l_fsd_ord_exe_qty;

          st_spd_xchbk.c_oprn_typ[i_cnt] = UPDATION_ON_EXCHANGE_RESPONSE;
          strcpy ( st_spd_xchbk.c_entry_dt_tm[i_cnt],c_ack_tm);
          st_spd_xchbk.l_dwnld_flg[i_cnt] = 20;

          rtrim(st_spd_xchbk.c_entry_dt_tm[i_cnt]);

			if (DEBUG_MSG_LVL_0)
			{
			  fn_userlog(c_ServiceName, "st_spd_xchbk.c_ordr_rfrnc**********:%s:",  st_spd_xchbk.c_ordr_rfrnc[i_cnt]);	
			}

		  if (DEBUG_MSG_LVL_5)       *** Ver 3.8 ***
  		{
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_xchng_cd************:%s:",  st_spd_xchbk.c_xchng_cd[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_pipe_id*************:%s:",  st_spd_xchbk.c_pipe_id[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_mod_trd_dt**********:%s:",  st_spd_xchbk.c_mod_trd_dt[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.l_ord_seq*************:%ld:", st_spd_xchbk.l_ord_seq[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_slm_flg*************:%c:",  st_spd_xchbk.c_slm_flg[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.l_dsclsd_qty**********:%ld:", st_spd_xchbk.l_dsclsd_qty[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.l_ord_tot_qty*********:%ld:", st_spd_xchbk.l_ord_tot_qty[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.l_ord_lmt_rt**********:%ld:", st_spd_xchbk.l_ord_lmt_rt[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.l_stp_lss_tgr*********:%ld:", st_spd_xchbk.l_stp_lss_tgr[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.l_mdfctn_cntr*********:%ld:", st_spd_xchbk.l_mdfctn_cntr[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_valid_dt************:%s:",  st_spd_xchbk.c_valid_dt[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_ord_typ*************:%c:",  st_spd_xchbk.c_ord_typ[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_sprd_ord_ind********:%c:",  st_spd_xchbk.c_sprd_ord_ind[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_req_typ*************:%c:",  st_spd_xchbk.c_req_typ[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.l_quote***************:%ld:", st_spd_xchbk.l_quote[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_qt_tm***************:%s:",  st_spd_xchbk.c_qt_tm[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_rqst_tm*************:%s:",  st_spd_xchbk.c_rqst_tm[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_frwrd_tm************:%s:",  st_spd_xchbk.c_frwrd_tm[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_plcd_stts***********:%c:",  st_spd_xchbk.c_plcd_stts[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_rms_prcsd_flg*******:%c:",  st_spd_xchbk.c_rms_prcsd_flg[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.l_ors_msg_typ*********:%ld:", st_spd_xchbk.l_ors_msg_typ[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_ack_tm**************:%s:",  st_spd_xchbk.c_ack_tm[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_entry_dt_tm*********:%s:",  st_spd_xchbk.c_entry_dt_tm[i_cnt]);
        *fn_userlog(c_ServiceName, "st_spd_xchbk.c_xchng_rmrks*********:%s:",  st_spd_xchbk.c_xchng_rmrks[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_ex_ordr_typ*********:%c:",  st_spd_xchbk.c_ex_ordr_typ[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.l_xchng_can_qty*******:%ld:", st_spd_xchbk.l_xchng_can_qty[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.c_spl_flg*************:%c:",  st_spd_xchbk.c_spl_flg[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.d_jiffy***************:%lf:", st_spd_xchbk.d_jiffy[i_cnt]);
        fn_userlog(c_ServiceName, "st_spd_xchbk.l_bit_flg*************:%ld:", st_spd_xchbk.l_bit_flg[i_cnt]);*
      }  
		}
      fn_cpy_ddr (st_spd_xchbk.c_rout_crt);

    i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg,
                                &st_spd_xchbk,
                                &st_spd_xchbk,
                                "vw_spdxchbk",
                                "vw_spdxchbk",
                                sizeof ( st_spd_xchbk ),
                                sizeof ( st_spd_xchbk ),
                                0,
                                "SFO_SPD_ACK" ); 


    if(i_returncode == -1)
    {
      fn_userlog(c_ServiceName, "[ord_ref-%s] failed",c_ordr_rfrnc);
      return -1;
    }
}
*** Ver 3.7 Ends Here ***/

/*** Ver 4.2 Starts ****/
int fn_fo_ref_to_omd ( struct vw_xchngbook *ptr_i_st_xchngbook,
                    struct vw_xchngbook *ptr_st_xchngbook,
                    char  *c_mtm_flg,
										long  *l_init_sltp_rt,
										long  *l_init_lmt_rt,
                    char  *c_prcimp_flg,
                    char *c_ServiceName,
                    char *c_err_msg)
{

 
  long l_init_sltp=0;
	long l_init_lmt=0;
   char   c_prc_impv_flg='\0';	
	EXEC SQL BEGIN DECLARE SECTION;
    short i_slm_flg;
    short i_dsclsd_qty;
    short i_ord_lmt_rt;
    short i_stp_lss_tgr;
    short i_valid_dt;
    short i_ord_typ;
    short i_sprd_ord_ind;
    short i_quote;
    short i_qt_tm;
    short i_frwrd_tm;
    short i_rms_prcsd_flg;
    short i_ors_msg_typ;
    short i_ack_tm;
    short i_xchng_rmrks;
    short i_xchng_can_qty;
    short i_spl_flg;
    short i_req_typ;
    short i_ord_tot_qty;
    short i_rqst_tm;
    short i_ex_ordr_typ;
  EXEC SQL END DECLARE SECTION;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"In fun fn_fo_ref_to_omd-c_oprn_typ is :%c:",ptr_st_xchngbook->c_oprn_typ);
		fn_userlog(c_ServiceName,"In fun fn_fo_ref_to_omd-c_ordr_rfrnc is :%s:", ptr_st_xchngbook->c_ordr_rfrnc);
		fn_userlog(c_ServiceName,"In fun fn_fo_ref_to_omd-l_mdfctn_cntr is :%ld:", ptr_st_xchngbook->l_mdfctn_cntr);
	}

	switch ( ptr_st_xchngbook->c_oprn_typ )
	{
    case WITH_ORS_MSG_TYP:

    EXEC SQL
      SELECT  fxb_xchng_cd,
              fxb_pipe_id,
              to_char ( fxb_mod_trd_dt, 'dd-mon-yyyy' ),
              fxb_ordr_sqnc,
              fxb_lmt_mrkt_sl_flg,
              fxb_dsclsd_qty,
              fxb_ordr_tot_qty,
              fxb_lmt_rt,
              fxb_stp_lss_tgr,
              to_char( fxb_ordr_valid_dt, 'dd-mon-yyyy' ),
              fxb_ordr_type,
              fxb_sprd_ord_ind,
              fxb_rqst_typ,
              fxb_quote,
              to_char ( fxb_qt_tm, 'dd-mon-yyyy hh24:mi:ss' ),
              to_char ( fxb_rqst_tm, 'dd-mon-yyyy hh24:mi:ss' ),
              to_char ( fxb_frwd_tm, 'dd-mon-yyyy hh24:mi:ss' ),
              fxb_plcd_stts,
              fxb_rms_prcsd_flg,
              to_char ( fxb_ack_tm, 'dd-mon-yyyy hh24:mi:ss' ),
              fxb_xchng_rmrks,
              fxb_ex_ordr_typ,
              fxb_xchng_cncld_qty,
              fxb_spl_flag,
							NVL(FXB_INIT_SLTP_RT,0),
							NVL(FXB_INIT_LMT_RT,0),
              NVL(FXB_PRCIMPV_FLG,'N')
      INTO    :ptr_st_xchngbook->c_xchng_cd,
							:ptr_st_xchngbook->c_pipe_id,
              :ptr_st_xchngbook->c_mod_trd_dt,
              :ptr_st_xchngbook->l_ord_seq,
              :ptr_st_xchngbook->c_slm_flg:i_slm_flg,
              :ptr_st_xchngbook->l_dsclsd_qty:i_dsclsd_qty,
              :ptr_st_xchngbook->l_ord_tot_qty:i_ord_tot_qty,
              :ptr_st_xchngbook->l_ord_lmt_rt:i_ord_lmt_rt,
              :ptr_st_xchngbook->l_stp_lss_tgr:i_stp_lss_tgr,
              :ptr_st_xchngbook->c_valid_dt:i_valid_dt,
              :ptr_st_xchngbook->c_ord_typ:i_ord_typ,
              :ptr_st_xchngbook->c_sprd_ord_ind:i_sprd_ord_ind,
              :ptr_st_xchngbook->c_req_typ:i_req_typ,
              :ptr_st_xchngbook->l_quote:i_quote,
              :ptr_st_xchngbook->c_qt_tm:i_qt_tm,
              :ptr_st_xchngbook->c_rqst_tm:i_rqst_tm,
              :ptr_st_xchngbook->c_frwrd_tm:i_frwrd_tm,
              :ptr_st_xchngbook->c_plcd_stts,
              :ptr_st_xchngbook->c_rms_prcsd_flg:i_rms_prcsd_flg,
              :ptr_st_xchngbook->c_ack_tm:i_ack_tm,
              :ptr_st_xchngbook->c_xchng_rmrks:i_xchng_rmrks,
              :ptr_st_xchngbook->c_ex_ordr_typ:i_ex_ordr_typ,
              :ptr_st_xchngbook->l_xchng_can_qty:i_xchng_can_qty,
              :ptr_st_xchngbook->c_spl_flg:i_spl_flg,
							:l_init_sltp,
							:l_init_lmt,
              :c_prc_impv_flg
			FROM    fxb_fo_xchng_book
      WHERE   fxb_ordr_rfrnc = :ptr_st_xchngbook->c_ordr_rfrnc
      AND     fxb_mdfctn_cntr = :ptr_st_xchngbook->l_mdfctn_cntr;

		break;

		 case WITHOUT_ORS_MSG_TYP:

    EXEC SQL
      SELECT  fxb_xchng_cd,
              fxb_pipe_id,
              to_char ( fxb_mod_trd_dt, 'dd-mon-yyyy' ),
              fxb_ordr_sqnc,
              fxb_lmt_mrkt_sl_flg,
              fxb_dsclsd_qty,
              fxb_ordr_tot_qty,
              fxb_lmt_rt,
              fxb_stp_lss_tgr,
              to_char( fxb_ordr_valid_dt, 'dd-mon-yyyy' ),
              fxb_ordr_type,
              fxb_sprd_ord_ind,
              fxb_rqst_typ,
              fxb_quote,
              to_char ( fxb_qt_tm, 'dd-mon-yyyy hh24:mi:ss' ),
              to_char ( fxb_rqst_tm, 'dd-mon-yyyy hh24:mi:ss' ),
              to_char ( fxb_frwd_tm, 'dd-mon-yyyy hh24:mi:ss' ),
              fxb_plcd_stts,
              fxb_rms_prcsd_flg,
              fxb_ors_msg_typ,
              to_char ( fxb_ack_tm, 'dd-mon-yyyy hh24:mi:ss' ),
              fxb_xchng_rmrks,
              fxb_ex_ordr_typ,
              fxb_xchng_cncld_qty,
              fxb_spl_flag,
							NVL(FXB_INIT_SLTP_RT,0),
							NVL(FXB_INIT_LMT_RT,0),
              NVL(FXB_PRCIMPV_FLG,'N') 
			INTO    :ptr_st_xchngbook->c_xchng_cd,
              :ptr_st_xchngbook->c_pipe_id,
              :ptr_st_xchngbook->c_mod_trd_dt,
              :ptr_st_xchngbook->l_ord_seq,
              :ptr_st_xchngbook->c_slm_flg:i_slm_flg,
              :ptr_st_xchngbook->l_dsclsd_qty:i_dsclsd_qty,
              :ptr_st_xchngbook->l_ord_tot_qty:i_ord_tot_qty,
              :ptr_st_xchngbook->l_ord_lmt_rt:i_ord_lmt_rt,
              :ptr_st_xchngbook->l_stp_lss_tgr:i_stp_lss_tgr,
              :ptr_st_xchngbook->c_valid_dt:i_valid_dt,
              :ptr_st_xchngbook->c_ord_typ:i_ord_typ,
              :ptr_st_xchngbook->c_sprd_ord_ind:i_sprd_ord_ind,
              :ptr_st_xchngbook->c_req_typ:i_req_typ,
              :ptr_st_xchngbook->l_quote:i_quote,
              :ptr_st_xchngbook->c_qt_tm:i_qt_tm,
              :ptr_st_xchngbook->c_rqst_tm:i_rqst_tm,
              :ptr_st_xchngbook->c_frwrd_tm:i_frwrd_tm,
              :ptr_st_xchngbook->c_plcd_stts,
              :ptr_st_xchngbook->c_rms_prcsd_flg:i_rms_prcsd_flg,
              :ptr_st_xchngbook->l_ors_msg_typ:i_ors_msg_typ,
              :ptr_st_xchngbook->c_ack_tm:i_ack_tm,
              :ptr_st_xchngbook->c_xchng_rmrks:i_xchng_rmrks,
              :ptr_st_xchngbook->c_ex_ordr_typ:i_ex_ordr_typ,
              :ptr_st_xchngbook->l_xchng_can_qty:i_xchng_can_qty,
              :ptr_st_xchngbook->c_spl_flg:i_spl_flg,
							:l_init_sltp,
              :l_init_lmt,
              :c_prc_impv_flg
			FROM    fxb_fo_xchng_book
      WHERE   fxb_ordr_rfrnc = :ptr_st_xchngbook->c_ordr_rfrnc
      AND     fxb_mdfctn_cntr = :ptr_st_xchngbook->l_mdfctn_cntr;
      break;

			default:
              sprintf( c_err_msg, "Invalid Operation Type:%c:",
                                           ptr_st_xchngbook->c_oprn_typ );
							return -1;
							break;
	}
	if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
	{
		fn_errlog ( c_ServiceName, "S31485", SQLMSG, c_err_msg);
		return -1;
	}
	if ( ( SQLCODE == NO_DATA_FOUND ) &&( ptr_st_xchngbook->c_oprn_typ == WITHOUT_ORS_MSG_TYP ) )
	{
    EXEC SQL
      SELECT  fxb_xchng_cd,
              fxb_pipe_id,
              to_char ( fxb_mod_trd_dt, 'dd-mon-yyyy' ),
              fxb_ordr_sqnc,
              fxb_lmt_mrkt_sl_flg,
              fxb_dsclsd_qty,
              fxb_ordr_tot_qty,
              fxb_lmt_rt,
              fxb_stp_lss_tgr,
              to_char( fxb_ordr_valid_dt, 'dd-mon-yyyy' ),
              fxb_ordr_type,
              fxb_sprd_ord_ind,
              fxb_rqst_typ,
              fxb_quote,
              to_char ( fxb_qt_tm, 'dd-mon-yyyy hh24:mi:ss' ),
              to_char ( fxb_rqst_tm, 'dd-mon-yyyy hh24:mi:ss' ),
              to_char ( fxb_frwd_tm, 'dd-mon-yyyy hh24:mi:ss' ),
              fxb_plcd_stts,
              fxb_rms_prcsd_flg,
              fxb_ors_msg_typ,
              to_char ( fxb_ack_tm, 'dd-mon-yyyy hh24:mi:ss' ),
              fxb_xchng_rmrks,
              fxb_ex_ordr_typ,
              fxb_xchng_cncld_qty,
              fxb_spl_flag,
							NVL(FXB_INIT_SLTP_RT,0),
							NVL(FXB_INIT_LMT_RT,0),
              NVL(FXB_PRCIMPV_FLG,'N') 
      INTO    :ptr_st_xchngbook->c_xchng_cd,
              :ptr_st_xchngbook->c_pipe_id,
              :ptr_st_xchngbook->c_mod_trd_dt,
              :ptr_st_xchngbook->l_ord_seq,
              :ptr_st_xchngbook->c_slm_flg:i_slm_flg,
              :ptr_st_xchngbook->l_dsclsd_qty:i_dsclsd_qty,
			        :ptr_st_xchngbook->l_ord_tot_qty:i_ord_tot_qty,
              :ptr_st_xchngbook->l_ord_lmt_rt:i_ord_lmt_rt,
              :ptr_st_xchngbook->l_stp_lss_tgr:i_stp_lss_tgr,
              :ptr_st_xchngbook->c_valid_dt:i_valid_dt,
              :ptr_st_xchngbook->c_ord_typ:i_ord_typ,
              :ptr_st_xchngbook->c_sprd_ord_ind:i_sprd_ord_ind,
              :ptr_st_xchngbook->c_req_typ:i_req_typ,
              :ptr_st_xchngbook->l_quote:i_quote,
              :ptr_st_xchngbook->c_qt_tm:i_qt_tm,
              :ptr_st_xchngbook->c_rqst_tm:i_rqst_tm,
              :ptr_st_xchngbook->c_frwrd_tm:i_frwrd_tm,
              :ptr_st_xchngbook->c_plcd_stts,
              :ptr_st_xchngbook->c_rms_prcsd_flg:i_rms_prcsd_flg,
              :ptr_st_xchngbook->l_ors_msg_typ:i_ors_msg_typ,
              :ptr_st_xchngbook->c_ack_tm:i_ack_tm,
              :ptr_st_xchngbook->c_xchng_rmrks:i_xchng_rmrks,
              :ptr_st_xchngbook->c_ex_ordr_typ:i_ex_ordr_typ,
              :ptr_st_xchngbook->l_xchng_can_qty:i_xchng_can_qty,
              :ptr_st_xchngbook->c_spl_flg:i_spl_flg,
							:l_init_sltp,
							:l_init_lmt,
              :c_prc_impv_flg
			FROM    fxb_fo_xchng_book_hstry
      WHERE   fxb_ordr_rfrnc = :ptr_st_xchngbook->c_ordr_rfrnc
      AND     fxb_mdfctn_cntr = :ptr_st_xchngbook->l_mdfctn_cntr;
      if ( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName,"S31490", SQLMSG,c_err_msg );
				return -1;
			}
	}
	else if ( SQLCODE == NO_DATA_FOUND )
	{	
		fn_errlog ( c_ServiceName,"S31495", SQLMSG, c_err_msg );
		return -1;
	}
*l_init_sltp_rt=l_init_sltp;
*l_init_lmt_rt=l_init_lmt;
*c_prcimp_flg=c_prc_impv_flg;
return 0;
}
/*** Ver 4.2 Ends ***/


/*************** Ver 4.2 Starts *********************/

int fo_ref_to_ord(char   *c_ServiceName,
									char   *c_err_msg,
									struct vw_orderbook *ptr_st_iorderbook,
									struct vw_orderbook *ptr_st_orderbook,
									char   *c_prcimpv_flg)
{
	EXEC SQL BEGIN DECLARE SECTION;
	short i_sprd_ord_rfrnc;
	varchar c_ucc_cd [11]; 
	varchar c_cp_code [11 + 2]; 
	short i_settlor;
	short i_ack_tm;
	short i_prev_ack_tm;
	short i_xchng_ack;
	short i_valid_dt;
	EXEC SQL END DECLARE SECTION;

	char c_prcimpv_flg_tmp='\0';

  if ( DEBUG_MSG_LVL_3 )
  {
	  fn_userlog(c_ServiceName,"c_ordr_rfrnc :%s:",ptr_st_iorderbook->c_ordr_rfrnc);
	  fn_userlog(c_ServiceName,"Requested Operation :%c:",ptr_st_iorderbook->c_oprn_typ);
  }
	MEMSET( ptr_st_orderbook->c_ctcl_id);
	if ( ptr_st_iorderbook->c_oprn_typ == FOR_VIEW )
	{
		EXEC SQL
			SELECT 	fod_clm_mtch_accnt,
							fod_ctcl_id , 
							fod_clnt_ctgry,
							fod_pipe_id,
							fod_xchng_cd,
							fod_prdct_typ,
							fod_undrlyng,
							to_char ( fod_expry_dt, 'dd-Mon-yyyy' ),
							fod_exer_typ,
							fod_opt_typ,
							fod_strk_prc,
							fod_ordr_flw,
							fod_lmt_mrkt_sl_flg,
							fod_dsclsd_qty,
							fod_ordr_tot_qty,
							fod_lmt_rt,
							fod_stp_lss_tgr,
							fod_ordr_type,
							to_char ( fod_ordr_valid_dt, 'dd-Mon-yyyy' ),
							to_char ( fod_trd_dt, 'dd-Mon-yyyy' ),
							fod_ordr_stts,
							fod_exec_qty,
							NVL(fod_exec_qty_day,0),
							fod_cncl_qty,
							fod_exprd_qty,
							fod_sprd_ordr_ref,
							fod_mdfctn_cntr,
							fod_settlor,
							fod_ack_nmbr,
							fod_spl_flag,
							fod_indstk,
							to_char ( fod_ord_ack_tm, 'dd-Mon-yyyy hh24:mi:ss' ),
							to_char ( fod_lst_rqst_ack_tm, 'dd-Mon-yyyy hh24:mi:ss' ),
							fod_pro_cli_ind	,
							fod_channel,
							NVL(FOD_PRCIMPV_FLG,'N')									
				INTO  :ptr_st_orderbook->c_cln_mtch_accnt,
							:ptr_st_orderbook->c_ctcl_id,  
	            :ptr_st_orderbook->l_clnt_ctgry,
	            :ptr_st_orderbook->c_pipe_id,
							:ptr_st_orderbook->c_xchng_cd,
	            :ptr_st_orderbook->c_prd_typ,
	            :ptr_st_orderbook->c_undrlyng,
	            :ptr_st_orderbook->c_expry_dt,
	            :ptr_st_orderbook->c_exrc_typ,
	            :ptr_st_orderbook->c_opt_typ,
	            :ptr_st_orderbook->l_strike_prc,
	            :ptr_st_orderbook->c_ordr_flw,
	            :ptr_st_orderbook->c_slm_flg,
	            :ptr_st_orderbook->l_dsclsd_qty,
	            :ptr_st_orderbook->l_ord_tot_qty,
	            :ptr_st_orderbook->l_ord_lmt_rt,
	            :ptr_st_orderbook->l_stp_lss_tgr,
	            :ptr_st_orderbook->c_ord_typ,
	            :ptr_st_orderbook->c_valid_dt:i_valid_dt,
	            :ptr_st_orderbook->c_trd_dt,
	            :ptr_st_orderbook->c_ordr_stts,
	            :ptr_st_orderbook->l_exctd_qty,
	            :ptr_st_orderbook->l_exctd_qty_day,
	            :ptr_st_orderbook->l_can_qty,
	            :ptr_st_orderbook->l_exprd_qty,
	            :ptr_st_orderbook->c_sprd_ord_rfrnc:i_sprd_ord_rfrnc,
	            :ptr_st_orderbook->l_mdfctn_cntr,
	            :ptr_st_orderbook->c_settlor:i_settlor,
	            :ptr_st_orderbook->c_xchng_ack:i_xchng_ack,
	            :ptr_st_orderbook->c_spl_flg,
							:ptr_st_orderbook->c_ctgry_indstk,
							:ptr_st_orderbook->c_ack_tm:i_ack_tm,
							:ptr_st_orderbook->c_prev_ack_tm:i_prev_ack_tm,
							:ptr_st_orderbook->c_pro_cli_ind,
							:ptr_st_orderbook->c_channel,
							:c_prcimpv_flg_tmp 			
				FROM	fod_fo_ordr_dtls
				WHERE fod_ordr_rfrnc = :ptr_st_iorderbook->c_ordr_rfrnc;
	}
	else if ( ptr_st_iorderbook->c_oprn_typ == FOR_UPDATE ) 
	{
		EXEC SQL
			SELECT 	fod_clm_mtch_accnt,
							fod_clnt_ctgry,
							fod_pipe_id,
							fod_xchng_cd,
							decode(:ptr_st_orderbook->c_oprn_typ,'S',(decode(fod_prdct_typ,'P','F',fod_prdct_typ)),fod_prdct_typ),  
							fod_undrlyng,
							to_char ( fod_expry_dt, 'dd-Mon-yyyy' ),
							fod_exer_typ,
							fod_opt_typ,
							fod_strk_prc,
							fod_ordr_flw,
							fod_lmt_mrkt_sl_flg,
							fod_dsclsd_qty,
							fod_ordr_tot_qty,
							fod_lmt_rt,
							fod_stp_lss_tgr,
							fod_ordr_type,
							to_char ( fod_ordr_valid_dt, 'dd-Mon-yyyy' ),
							to_char ( fod_trd_dt, 'dd-Mon-yyyy' ),
							fod_ordr_stts,
							fod_exec_qty,
							NVL(fod_exec_qty_day,0),
							fod_cncl_qty,
							fod_exprd_qty,
							fod_sprd_ordr_ref,
							fod_mdfctn_cntr,
							fod_settlor,
							fod_ack_nmbr,
							fod_spl_flag,
							fod_indstk,
							to_char ( fod_ord_ack_tm, 'dd-Mon-yyyy hh24:mi:ss' ),
							to_char ( fod_lst_rqst_ack_tm, 'dd-Mon-yyyy hh24:mi:ss' ),
							fod_pro_cli_ind,
							nvl(fod_ctcl_id,' '),  
							fod_channel,
							NVL(FOD_PRCIMPV_FLG,'N')
				INTO  :ptr_st_orderbook->c_cln_mtch_accnt,
	            :ptr_st_orderbook->l_clnt_ctgry,
	            :ptr_st_orderbook->c_pipe_id,
							:ptr_st_orderbook->c_xchng_cd,
	            :ptr_st_orderbook->c_prd_typ,
	            :ptr_st_orderbook->c_undrlyng,
	            :ptr_st_orderbook->c_expry_dt,
	            :ptr_st_orderbook->c_exrc_typ,
	            :ptr_st_orderbook->c_opt_typ,
	            :ptr_st_orderbook->l_strike_prc,
	            :ptr_st_orderbook->c_ordr_flw,
	            :ptr_st_orderbook->c_slm_flg,
	            :ptr_st_orderbook->l_dsclsd_qty,
	            :ptr_st_orderbook->l_ord_tot_qty,
	            :ptr_st_orderbook->l_ord_lmt_rt,
	            :ptr_st_orderbook->l_stp_lss_tgr,
	            :ptr_st_orderbook->c_ord_typ,
	            :ptr_st_orderbook->c_valid_dt:i_valid_dt,
	            :ptr_st_orderbook->c_trd_dt,
	            :ptr_st_orderbook->c_ordr_stts,
	            :ptr_st_orderbook->l_exctd_qty,
	            :ptr_st_orderbook->l_exctd_qty_day,
	            :ptr_st_orderbook->l_can_qty,
	            :ptr_st_orderbook->l_exprd_qty,
	            :ptr_st_orderbook->c_sprd_ord_rfrnc:i_sprd_ord_rfrnc,
	            :ptr_st_orderbook->l_mdfctn_cntr,
	            :ptr_st_orderbook->c_settlor:i_settlor,
	            :ptr_st_orderbook->c_xchng_ack:i_xchng_ack,
	            :ptr_st_orderbook->c_spl_flg,
							:ptr_st_orderbook->c_ctgry_indstk,
							:ptr_st_orderbook->c_ack_tm:i_ack_tm,
							:ptr_st_orderbook->c_prev_ack_tm:i_prev_ack_tm,
							:ptr_st_orderbook->c_pro_cli_ind,
							:ptr_st_orderbook->c_ctcl_id,  
							:ptr_st_orderbook->c_channel,
							:c_prcimpv_flg_tmp
				FROM	fod_fo_ordr_dtls
				WHERE fod_ordr_rfrnc = :ptr_st_iorderbook->c_ordr_rfrnc
				FOR 	UPDATE OF fod_ordr_rfrnc ; 
	}
	else if ( ptr_st_iorderbook->c_oprn_typ == FOR_SNDCLNT)
	{
		EXEC SQL
			SELECT 	fod_clm_mtch_accnt,
							fod_clnt_ctgry,
							fod_pipe_id,
							fod_xchng_cd,
							decode(:ptr_st_orderbook->c_oprn_typ,'S',(decode(fod_prdct_typ,'P','F',fod_prdct_typ)),fod_prdct_typ),  
							fod_undrlyng,
							to_char ( fod_expry_dt, 'dd-Mon-yyyy' ),
							fod_exer_typ,
							fod_opt_typ,
							fod_strk_prc,
							fod_ordr_flw,
							fod_lmt_mrkt_sl_flg,
							fod_dsclsd_qty,
							fod_ordr_tot_qty,
							fod_lmt_rt,
							fod_stp_lss_tgr,
							fod_ordr_type,
							to_char ( fod_ordr_valid_dt, 'dd-Mon-yyyy' ),
							to_char ( fod_trd_dt, 'dd-Mon-yyyy' ),
							fod_ordr_stts,
							fod_exec_qty,
							NVL(fod_exec_qty_day,0),
							fod_cncl_qty,
							fod_exprd_qty,
							fod_sprd_ordr_ref,
							fod_mdfctn_cntr,
							fod_settlor,
							fod_ack_nmbr,
							fod_spl_flag,
							fod_indstk,
							to_char ( fod_ord_ack_tm, 'dd-Mon-yyyy hh24:mi:ss' ),
							to_char ( fod_lst_rqst_ack_tm, 'dd-Mon-yyyy hh24:mi:ss' ),
							fod_pro_cli_ind,
							nvl(fod_ctcl_id,' '),  
							fod_channel,
							NVL(FOD_PRCIMPV_FLG,'N')            
				INTO  :ptr_st_orderbook->c_cln_mtch_accnt,
	            :ptr_st_orderbook->l_clnt_ctgry,
	            :ptr_st_orderbook->c_pipe_id,
							:ptr_st_orderbook->c_xchng_cd,
	            :ptr_st_orderbook->c_prd_typ,
	            :ptr_st_orderbook->c_undrlyng,
	            :ptr_st_orderbook->c_expry_dt,
	            :ptr_st_orderbook->c_exrc_typ,
	            :ptr_st_orderbook->c_opt_typ,
	            :ptr_st_orderbook->l_strike_prc,
	            :ptr_st_orderbook->c_ordr_flw,
	            :ptr_st_orderbook->c_slm_flg,
	            :ptr_st_orderbook->l_dsclsd_qty,
	            :ptr_st_orderbook->l_ord_tot_qty,
	            :ptr_st_orderbook->l_ord_lmt_rt,
	            :ptr_st_orderbook->l_stp_lss_tgr,
	            :ptr_st_orderbook->c_ord_typ,
	            :ptr_st_orderbook->c_valid_dt:i_valid_dt,
	            :ptr_st_orderbook->c_trd_dt,
	            :ptr_st_orderbook->c_ordr_stts,
	            :ptr_st_orderbook->l_exctd_qty,
	            :ptr_st_orderbook->l_exctd_qty_day,
	            :ptr_st_orderbook->l_can_qty,
	            :ptr_st_orderbook->l_exprd_qty,
	            :ptr_st_orderbook->c_sprd_ord_rfrnc:i_sprd_ord_rfrnc,
	            :ptr_st_orderbook->l_mdfctn_cntr,
	            :ptr_st_orderbook->c_settlor:i_settlor,
	            :ptr_st_orderbook->c_xchng_ack:i_xchng_ack,
	            :ptr_st_orderbook->c_spl_flg,
							:ptr_st_orderbook->c_ctgry_indstk,
							:ptr_st_orderbook->c_ack_tm:i_ack_tm,
							:ptr_st_orderbook->c_prev_ack_tm:i_prev_ack_tm,
							:ptr_st_orderbook->c_pro_cli_ind,
							:ptr_st_orderbook->c_ctcl_id,  
							:ptr_st_orderbook->c_channel,
							:c_prcimpv_flg_tmp   
				FROM	fod_fo_ordr_dtls
				WHERE fod_ordr_rfrnc = :ptr_st_iorderbook->c_ordr_rfrnc
				FOR 	UPDATE OF fod_ordr_rfrnc NOWAIT; 
	}   
	else 
	{
		sprintf( c_err_msg, "Invalid Operation Type:%c:",ptr_st_iorderbook->c_oprn_typ );
    fn_errlog ( c_ServiceName, "S31500", DEFMSG, c_err_msg );
    return -1;
	}

	if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
		if( (ptr_st_iorderbook->c_oprn_typ == FOR_SNDCLNT) && (SQLCODE == -54)) 		
		{	
			fn_userlog(c_ServiceName,"In DISTRIBUTION_LOCK_ERR ");
			strcpy( c_err_msg,"DISTRIBUTION_LOCK_ERR");
			fn_errlog ( c_ServiceName, "S31505", SQLMSG,c_err_msg );
		}
		else
		{
			fn_errlog ( c_ServiceName, "S31510", SQLMSG,c_err_msg );
		}

		return -1;
  }

	if ( ( SQLCODE == NO_DATA_FOUND ) &&( ptr_st_iorderbook->c_oprn_typ == FOR_VIEW ) )
	{
		EXEC SQL
			SELECT 	fod_clm_mtch_accnt,
							fod_clnt_ctgry,
							fod_pipe_id,
							fod_xchng_cd,
							fod_prdct_typ,
							fod_undrlyng,
							to_char ( fod_expry_dt, 'dd-Mon-yyyy' ),
							fod_exer_typ,
							fod_opt_typ,
							fod_strk_prc,
							fod_ordr_flw,
							fod_lmt_mrkt_sl_flg,
							fod_dsclsd_qty,
							fod_ordr_tot_qty,
							fod_lmt_rt,
							fod_stp_lss_tgr,
							fod_ordr_type,
							to_char ( fod_ordr_valid_dt, 'dd-Mon-yyyy' ),
							to_char ( fod_trd_dt, 'dd-Mon-yyyy' ),
							fod_ordr_stts,
							fod_exec_qty,
							NVL(fod_exec_qty_day,0),
							fod_cncl_qty,
							fod_exprd_qty,
							NVL( fod_sprd_ordr_ref, '*' ),
							fod_mdfctn_cntr,
							NVL( fod_settlor, '*' ),
							fod_ack_nmbr,
							NVL( fod_spl_flag, ' ' ),
							fod_indstk,
							to_char ( fod_ord_ack_tm, 'dd-Mon-yyyy hh24:mi:ss' ),
							to_char ( fod_lst_rqst_ack_tm, 'dd-Mon-yyyy hh24:mi:ss' ),
							fod_pro_cli_ind,
							fod_ctcl_id,  
							fod_channel,
							NVL(FOD_PRCIMPV_FLG,'N')   
			INTO    :ptr_st_orderbook->c_cln_mtch_accnt,
              :ptr_st_orderbook->l_clnt_ctgry,
              :ptr_st_orderbook->c_pipe_id,
							:ptr_st_orderbook->c_xchng_cd,
              :ptr_st_orderbook->c_prd_typ,
              :ptr_st_orderbook->c_undrlyng,
              :ptr_st_orderbook->c_expry_dt,
              :ptr_st_orderbook->c_exrc_typ,
              :ptr_st_orderbook->c_opt_typ,
              :ptr_st_orderbook->l_strike_prc,
              :ptr_st_orderbook->c_ordr_flw,
              :ptr_st_orderbook->c_slm_flg,
              :ptr_st_orderbook->l_dsclsd_qty,
              :ptr_st_orderbook->l_ord_tot_qty,
              :ptr_st_orderbook->l_ord_lmt_rt,
              :ptr_st_orderbook->l_stp_lss_tgr,
              :ptr_st_orderbook->c_ord_typ,
              :ptr_st_orderbook->c_valid_dt,
              :ptr_st_orderbook->c_trd_dt,
              :ptr_st_orderbook->c_ordr_stts,
              :ptr_st_orderbook->l_exctd_qty,
              :ptr_st_orderbook->l_exctd_qty_day,
              :ptr_st_orderbook->l_can_qty,
              :ptr_st_orderbook->l_exprd_qty,
              :ptr_st_orderbook->c_sprd_ord_rfrnc :i_sprd_ord_rfrnc,
              :ptr_st_orderbook->l_mdfctn_cntr,
              :ptr_st_orderbook->c_settlor,
              :ptr_st_orderbook->c_xchng_ack,
              :ptr_st_orderbook->c_req_typ,
							:ptr_st_orderbook->c_ctgry_indstk,
							:ptr_st_orderbook->c_ack_tm:i_ack_tm,
							:ptr_st_orderbook->c_prev_ack_tm:i_prev_ack_tm,
							:ptr_st_orderbook->c_pro_cli_ind,
							:ptr_st_orderbook->c_ctcl_id,  
							:ptr_st_orderbook->c_channel,
							:c_prcimpv_flg_tmp 
			FROM	 	fod_fo_ordr_dtls_hstry
			WHERE 	fod_ordr_rfrnc = :ptr_st_iorderbook->c_ordr_rfrnc;

			if ( SQLCODE != 0 )
			{
    		fn_errlog ( c_ServiceName,"S31515", SQLMSG,c_err_msg );
    		return -1;
			}
	}
	else if ( SQLCODE == NO_DATA_FOUND )
	{
  	fn_errlog ( c_ServiceName,"S31520", SQLMSG,c_err_msg );
   	return -1;
  }
	if ( ptr_st_iorderbook->c_oprn_typ == FOR_SNDCLNT )
	{
	  EXEC SQL
  	SELECT  NVL(RTRIM( CLM_CP_CD ), ' '),
     	     	NVL(RTRIM( CLM_CLNT_CD ),CLM_MTCH_ACCNT )
  	INTO		:c_cp_code,
          	:c_ucc_cd
  	FROM    CLM_CLNT_MSTR
  	WHERE   CLM_MTCH_ACCNT = :ptr_st_iorderbook->c_cln_mtch_accnt;

	  if( SQLCODE != 0 )
  	{
    	fn_userlog( c_ServiceName, "match account is :%s:",ptr_st_orderbook->c_cln_mtch_accnt);
    	fn_errlog( c_ServiceName, "S31525", SQLMSG,c_err_msg);
    	return -1;
  	}

  	SETNULL(c_ucc_cd);
  	SETNULL(c_cp_code);
		if( DEBUG_MSG_LVL_3 ) 
		{          
  		fn_userlog( c_ServiceName, "match account before is :%s:",ptr_st_orderbook->c_cln_mtch_accnt);
		}	

  	strcpy(ptr_st_orderbook->c_cln_mtch_accnt, (char *)c_ucc_cd.arr);
  	strcpy(ptr_st_orderbook->c_settlor, (char *)c_cp_code.arr);
	}

  
	rtrim ( ptr_st_orderbook->c_expry_dt );
	rtrim ( ptr_st_orderbook->c_ctcl_id );

	if( DEBUG_MSG_LVL_3 ) {          
		fn_userlog( c_ServiceName, "cp before is :%s:",c_cp_code.arr);
		fn_userlog( c_ServiceName,"jagan ctcl_id is :%s:",ptr_st_orderbook->c_ctcl_id);
		fn_userlog( c_ServiceName, "match account after is :%s:",ptr_st_orderbook->c_cln_mtch_accnt);
		fn_userlog( c_ServiceName, "cp after is :%s:",ptr_st_orderbook->c_settlor);
	}	
	*c_prcimpv_flg=c_prcimpv_flg_tmp;
	ptr_st_orderbook->c_oprn_typ=ptr_st_iorderbook->c_oprn_typ;
	strcpy(ptr_st_orderbook->c_ordr_rfrnc,ptr_st_iorderbook->c_ordr_rfrnc);
	return 0;
}

/**************** Ver 4.2 Ends *************/

/********** Ver 4.4 Starts **********/
int fn_get_seq(char *c_ServiceName,char *c_err_msg,char *c_pipe_id,long *l_seq_num, char  c_rqst_typ)
{
  int i_trnsctn=0;
  long l_seq=0;
 	if (DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName,"c_pipe_id ********:%s:",c_pipe_id);
  	fn_userlog(c_ServiceName,"l_seq_num ********:%ld:",l_seq_num);
  	fn_userlog(c_ServiceName,"c_rqst_typ*********:%c:",c_rqst_typ);
	}
  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1)
  {
    fn_errlog ( c_ServiceName, "S31530", SQLMSG,c_err_msg);
    return -1;
  }

  switch(c_rqst_typ)
  {
    case GET_XCHNG_SEQ :
      fn_userlog(c_ServiceName,"Start of ********:%s:",c_pipe_id);
    if(strcmp(c_pipe_id,"11") == 0)
    {
      EXEC SQL
        SELECT GET_XCHNG_SEQ_11.NEXTVAL
        INTO   :l_seq
        FROM   DUAL;
      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31535", SQLMSG,c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"12") == 0)
    {
      EXEC SQL
        SELECT GET_XCHNG_SEQ_12.NEXTVAL
        INTO   :l_seq
        FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31540", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"13") == 0)
    {
      EXEC SQL
        SELECT GET_XCHNG_SEQ_13.NEXTVAL
        INTO   :l_seq
        FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31545", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"14") == 0)
    {

      EXEC SQL
           SELECT GET_XCHNG_SEQ_14.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31550", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"15") == 0)
    {

      EXEC SQL
           SELECT GET_XCHNG_SEQ_15.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31555", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"16") == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_16.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31560", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"17") == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_17.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31565", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"18") == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_18.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31570", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }

    /*** Ver 6.5 Start ***/
    else if(strcmp(c_pipe_id,"21") == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_21.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31575", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"22") == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_22.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31580", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"23") == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_23.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31585", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"24") == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_24.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31590", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
/*** Ver 6.5 End ***/
    /*** Ver 6.6 starts ***/
 else if(strcmp(c_pipe_id,"25") == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_25.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31595", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
 else if(strcmp(c_pipe_id,"26") == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_26.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31600", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
 else if(strcmp(c_pipe_id,"27") == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_27.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31605", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
 else if(strcmp(c_pipe_id,"28") == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_28.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31610", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
 else if(strcmp(c_pipe_id,"31") == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_31.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31615", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
 else if(strcmp(c_pipe_id,"32") == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_32.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31620", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    /*** Ver 6.6 End ***/

    else if(strcmp(c_pipe_id,"A1")  == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_A1.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31625", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"A2")  == 0)
    {
      EXEC SQL
        SELECT GET_XCHNG_SEQ_A2.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31630", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"A3")  == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_A3.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;
      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31635", SQLMSG,c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"99")  == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_99.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31640", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"A9")  == 0)
    {
      EXEC SQL
           SELECT GET_XCHNG_SEQ_A9.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31645", SQLMSG,c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else
    {
        /*** fn_errlog ( c_ServiceName, "S31650", "Invalid Pipe","Invalid pipe" ); *** Commented in Ver 4.8 ***/
        fn_errlog ( c_ServiceName, "S31655", "Invalid Pipe",c_err_msg); /*** Ver 4.8 ***/
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); /*** Ver 4.8 ***/
				return -1;
    }

      fn_userlog(c_ServiceName,"get seq ********:%ld:",l_seq);
    break;

    case GET_ORDER_SEQ :

    if(strcmp(c_pipe_id,"11") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_11.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31660", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if (strcmp(c_pipe_id,"12") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_12.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31665", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }

    }
    else if (strcmp(c_pipe_id,"13") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_13.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31670", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }

    }
     else if (strcmp(c_pipe_id,"14") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_14.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31675", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }

    }
    else if (strcmp(c_pipe_id,"15") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_15.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31680", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }

    }
    else if (strcmp(c_pipe_id,"16") == 0)
      {
      EXEC SQL
           SELECT GET_ORDR_SEQ_16.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31685", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }

    }
     else if (strcmp(c_pipe_id,"17") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_17.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31690", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }

    }
     else if (strcmp(c_pipe_id,"18") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_18.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31695", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }

    }

    /*** Ver 6.5 Start ***/
    else if(strcmp(c_pipe_id,"21") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_21.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31700", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"22") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_22.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31705", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"23") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_23.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31710", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"24") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_24.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31715", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
      /*** Ver 6.5 End ***/
    /*** Ver 6.6 starts ***/
    else if(strcmp(c_pipe_id,"25") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_25.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31720", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"26") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_26.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31725", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"27") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_27.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31730", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"28") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_28.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31735", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"31") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_31.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31740", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"32") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_32.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31745", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    /*** Ver 6.6 End ***/

    else if (strcmp(c_pipe_id,"A1") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_A1.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31750", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }

    }
    else if (strcmp(c_pipe_id,"A2") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_A2.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31755", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if (strcmp(c_pipe_id,"A3") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_A3.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31760", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if (strcmp(c_pipe_id,"99") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_99.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31765", SQLMSG,c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if (strcmp(c_pipe_id,"A9") == 0)
    {
      EXEC SQL
           SELECT GET_ORDR_SEQ_A9.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31770", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }

    else
    {
      fn_userlog ( c_ServiceName, "Invalid pipe |%s|",c_pipe_id);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }
    break;

  /*
    case GET_PLACED_SEQ :

     EXEC SQL
            UPDATE  fsp_fo_seq_plcd
            SET     fsp_seq_num = fsp_seq_num + 1
            WHERE   fsp_pipe_id = :c_pipe_id
            AND     fsp_trd_dt = to_date ( :c_trd_dt, 'dd-Mon-yyyy')
            RETURNING fsp_seq_num INTO    :l_seq;

    if( SQLCODE != 0 )
    {
     fn_errlog ( c_ServiceName, "S31775", SQLMSG, c_err_msg);
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     return -1;
    }
    break;
    case RESET_PLACED_SEQ :

      EXEC SQL
         UPDATE  fsp_fo_seq_plcd
         SET     fsp_seq_num = '0'
         WHERE   fsp_pipe_id = :c_pipe_id
         AND     fsp_trd_dt = to_date( :c_trd_dt, 'dd-Mon-yyyy')
         RETURNING fsp_seq_num INTO    :l_seq;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31780", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
  break;
  *********/
  case  GET_SPRDORD_SEQ :

  if( strcmp(c_pipe_id,"11") == 0 )
  {
    EXEC SQL
      SELECT GET_SPDORD_SEQ_11.NEXTVAL
      INTO   :l_seq
      FROM   DUAl;

    if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31785", SQLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }
  }
  else if( strcmp(c_pipe_id,"12") == 0 )
  {
    EXEC SQL
      SELECT GET_SPDORD_SEQ_12.NEXTVAL
      INTO   :l_seq
      FROM   DUAl;

    if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31790", SQLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }
  }
  else if( strcmp(c_pipe_id,"13") == 0 )
  {
    EXEC SQL
      SELECT GET_SPDORD_SEQ_13.NEXTVAL
      INTO   :l_seq
      FROM   DUAl;

    if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31795", SQLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }
  }
  else if( strcmp(c_pipe_id,"14") == 0 )
  {
    EXEC SQL
      SELECT GET_SPDORD_SEQ_14.NEXTVAL
      INTO   :l_seq
      FROM   DUAl;

    if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31800", SQLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }
  }
  else if( strcmp(c_pipe_id,"15") == 0 )
  {
    EXEC SQL
      SELECT GET_SPDORD_SEQ_15.NEXTVAL
      INTO   :l_seq
      FROM   DUAl;

    if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31805", SQLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }
  }
  else if( strcmp(c_pipe_id,"16") == 0 )
  {
    EXEC SQL
      SELECT GET_SPDORD_SEQ_16.NEXTVAL
      INTO   :l_seq
      FROM   DUAl;

    if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31810", SQLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }
  }
  else if( strcmp(c_pipe_id,"17") == 0 )
  {
    EXEC SQL
      SELECT GET_SPDORD_SEQ_17.NEXTVAL
      INTO   :l_seq
      FROM   DUAl;

    if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31815", SQLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }
  }
  else if( strcmp(c_pipe_id,"18") == 0 )
  {
    EXEC SQL
      SELECT GET_SPDORD_SEQ_18.NEXTVAL
      INTO   :l_seq
      FROM   DUAl;

    if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31820", SQLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }
  }

  /***  Ver 6.5 Start ***/
    else if(strcmp(c_pipe_id,"21") == 0)
    {
      EXEC SQL
           SELECT GET_SPDORD_SEQ_21.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31825", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"22") == 0)
    {
      EXEC SQL
           SELECT GET_SPDORD_SEQ_22.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31830", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"23") == 0)
    {
      EXEC SQL
           SELECT GET_SPDORD_SEQ_23.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31835", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"24") == 0)
    {
      EXEC SQL
           SELECT GET_SPDORD_SEQ_24.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31840", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
      /*** Ver 6.5 End ***/
    /*** Ver 6.6 starts ***/
    else if(strcmp(c_pipe_id,"25") == 0)
    {
      EXEC SQL
           SELECT GET_SPDORD_SEQ_25.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31845", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"26") == 0)
    {
      EXEC SQL
           SELECT GET_SPDORD_SEQ_26.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31850", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"27") == 0)
    {
      EXEC SQL
           SELECT GET_SPDORD_SEQ_27.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31855", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"28") == 0)
    {
      EXEC SQL
           SELECT GET_SPDORD_SEQ_28.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31860", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"31") == 0)
    {
      EXEC SQL
           SELECT GET_SPDORD_SEQ_31.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31865", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"32") == 0)
    {
      EXEC SQL
           SELECT GET_SPDORD_SEQ_32.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31870", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    /***  Ver 6.6 Ends   ***/

  else if( strcmp(c_pipe_id,"A1") == 0 )
  {
    EXEC SQL
      SELECT GET_SPDORD_SEQ_A1.NEXTVAL
      INTO   :l_seq
      FROM   DUAl;

    if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31875", SQLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }
  }
  else if( strcmp(c_pipe_id,"A2") == 0 )
  {
    EXEC SQL
      SELECT GET_SPDORD_SEQ_A2.NEXTVAL
      INTO   :l_seq
      FROM   DUAl;

    if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31880", SQLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }
  }
  else if( strcmp(c_pipe_id,"A3") == 0 )
  {
    EXEC SQL
      SELECT GET_SPDORD_SEQ_A3.NEXTVAL
      INTO   :l_seq
      FROM   DUAl;

    if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31885", SQLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }
  }
  else if( strcmp(c_pipe_id,"99") == 0 )
  {
    EXEC SQL
      SELECT GET_SPDORD_SEQ_99.NEXTVAL
      INTO   :l_seq
      FROM   DUAl;

    if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31890", SQLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }
  }
  else if( strcmp(c_pipe_id,"A9") == 0 )
  {
    EXEC SQL
      SELECT GET_SPDORD_SEQ_A9.NEXTVAL
      INTO   :l_seq
      FROM   DUAl;

    if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31895", SQLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }
  }
  else
  {
    /*** fn_errlog ( c_ServiceName, "S31900", "Invalid Pipe","Invalid pipe" ); *** Commented in Ver 4.8 ***/
    fn_errlog ( c_ServiceName, "S31905", "Invalid Pipe",c_err_msg); /*** Ver 4.8 ***/
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); /*** Ver 4.8 ***/
    return -1;
  }

  break ;
  case GET_TRD_SEQ :

    if(strcmp(c_pipe_id,"11") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_11.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31910", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if (strcmp(c_pipe_id,"12") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_12.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31915", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }

    }
    else if (strcmp(c_pipe_id,"13") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_13.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31920", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }

    }
    else if (strcmp(c_pipe_id,"14") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_14.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31925", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }

    }
    else if (strcmp(c_pipe_id,"15") == 0)
      {
      EXEC SQL
           SELECT GET_TRD_SEQ_15.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31930", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }

    }
    else if (strcmp(c_pipe_id,"16") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_16.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;
      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31935", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }

    }
    else if (strcmp(c_pipe_id,"17") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_17.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31940", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }

    }
    else if (strcmp(c_pipe_id,"18") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_18.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31945", SQLMSG,c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }

    }

    /*** Ver 6.5 Start ***/
    else if(strcmp(c_pipe_id,"21") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_21.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31950", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"22") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_22.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31955", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"23") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_23.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31960", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"24") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_24.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31965", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
     /*** Ver 6.5 End ***/
    /*** Ver 6.6 starts ***/
    else if(strcmp(c_pipe_id,"25") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_25.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31970", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"26") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_26.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31975", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"27") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_27.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31980", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"28") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_28.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31985", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"31") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_31.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31990", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if(strcmp(c_pipe_id,"32") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_32.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31995", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    /*** Ver 6.6 End ***/

    else if (strcmp(c_pipe_id,"A1") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_A1.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S32000", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }

    }
    else if (strcmp(c_pipe_id,"A2") == 0)
    {
      EXEC SQL
           SELECT GET_TRD_SEQ_A2.NEXTVAL
           INTO   :l_seq
           FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S32005", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }
    }
    else if (strcmp(c_pipe_id,"A3") == 0)
    {
      EXEC SQL
          SELECT GET_TRD_SEQ_A3.NEXTVAL
          INTO   :l_seq
          FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S32010", SQLMSG,c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }

    }

    else if (strcmp(c_pipe_id,"99") == 0)
    {
      EXEC SQL
          SELECT GET_TRD_SEQ_99.NEXTVAL
          INTO   :l_seq
          FROM   DUAL;

      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S32015", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }

    }
    else if (strcmp(c_pipe_id,"A9") == 0)
    {
      EXEC SQL
          SELECT GET_TRD_SEQ_A9.NEXTVAL
          INTO   :l_seq
          FROM   DUAL;
      if( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S32020", SQLMSG, c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
      }

    }

  break;
   /*******
  case GET_ASGNMT_SEQ :

      EXEC SQL
           SELECT fas_seq_num + 1
           INTO :l_seq
           FROM fas_fo_asg_seq
           WHERE fas_trd_dt = to_date ( :c_trd_dt, 'dd-Mon-yyyy')
           FOR UPDATE OF fas_seq_num ;

    if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S32025", SQLMSG, c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }

      EXEC SQL
            UPDATE fas_fo_asg_seq
            SET fas_seq_num = fas_seq_num + 1
            WHERE fas_trd_dt = to_date ( :c_trd_dt, 'dd-Mon-yyyy');
    if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S32030", SQLMSG, c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }
   break;

   case GET_TEMPORD_SEQ :


     EXEC SQL
      SELECT fts_seq_num + 1
      INTO :l_seq
      FROM fts_fo_tmpord_seq
      WHERE fts_trd_dt = to_date ( :c_trd_dt, 'dd-Mon-yyyy')
      FOR UPDATE OF fts_seq_num ;

    if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S32035", SQLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }

    EXEC SQL
      UPDATE fts_fo_tmpord_seq
      SET fts_seq_num = fts_seq_num + 1
      WHERE fts_trd_dt = to_date ( :c_trd_dt, 'dd-Mon-yyyy');
    if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S32040", SQLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }


  else
  {
    fn_errlog ( c_ServiceName, "S32045", "Logic error",c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }
  break ;
   ****************/
  default :
    strcpy(c_err_msg,"Invalid Operation Type");
    fn_errlog ( c_ServiceName, "S32050", "Logic error",c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }
  if ( fn_committran( c_ServiceName, i_trnsctn,c_err_msg ) == -1 )

    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return -1;
    }
    fn_userlog(c_ServiceName,"l_seq_num ********:%ld:",l_seq);
  *l_seq_num=l_seq;
  fn_userlog(c_ServiceName,"l_seq_num ********:%ld:",l_seq_num);
  return 0;

}

int fn_upd_spdbk(char *c_ServiceName,struct vw_spdordbk *ptr_st_spd_ordbk,char *c_err_msg)
{
  int i_rec_cnt;
  char  c_sprd_ord_rfrnc_tmp [ 19 ];
  char  c_ordr_rfrnc_tmp [ 19 ];
  char  c_sprd_ord_ind_tmp;
  char  c_pipe_id_tmp [ 3 ];
  long  l_mdfctn_cntr_tmp;
  long  l_ord_tot_qty_tmp;
  char c_errmsg[256];

  char c_spn_flg;
  int   i_trnsctn = 0;
  int i_cnt;
   i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );

  if ( i_trnsctn == -1 )
  {
     fn_errlog ( c_ServiceName, "S32055", SQLMSG, c_errmsg );
     return -1;
  }

  switch( ptr_st_spd_ordbk->c_rqst_typ[0] )
  {
    case  INSERT_ON_ORDER_PLACEMENT:
      if ( ptr_st_spd_ordbk->c_sprd_ord_ind[0] == L3_ORDER )
      {
        i_rec_cnt = 3;
      }
      else
      {
        i_rec_cnt = 2;
      }

      for ( i_cnt = 0; i_cnt < i_rec_cnt; i_cnt++ )
      {
        strcpy ( c_sprd_ord_rfrnc_tmp,ptr_st_spd_ordbk->c_sprd_ord_rfrnc[i_cnt] );
        strcpy ( c_ordr_rfrnc_tmp, ptr_st_spd_ordbk->c_ordr_rfrnc[i_cnt] );
        c_sprd_ord_ind_tmp = ptr_st_spd_ordbk->c_sprd_ord_ind[i_cnt];
        strcpy ( c_pipe_id_tmp, ptr_st_spd_ordbk->c_pipe_id[i_cnt] );
        l_mdfctn_cntr_tmp = ptr_st_spd_ordbk->l_mdfctn_cntr[i_cnt];
        l_ord_tot_qty_tmp = ptr_st_spd_ordbk->l_ord_tot_qty[i_cnt];

        EXEC SQL
          SELECT  NVL(FOD_SPN_FLG,'N')
          INTO    :c_spn_flg
          FROM    FOD_FO_ORDR_DTLS
          WHERE   FOD_ORDR_RFRNC  = :c_ordr_rfrnc_tmp;

        if ( SQLCODE != 0 )
        {
          fn_errlog ( c_ServiceName, "S32060", SQLMSG,c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
          return -1;
        }

        EXEC SQL
          INSERT  INTO  fsd_fo_sprd_dtls
          (
            fsd_sprd_rfrnc,
            fsd_ordr_rfrnc,
            fsd_sprd_ord_ind,
            fsd_pipe_id,
            fsd_mdfctn_cntr,
            fsd_ord_qty,
            fsd_spn_flg
          )
          VALUES
          (
            :c_sprd_ord_rfrnc_tmp,
            :c_ordr_rfrnc_tmp,
            :c_sprd_ord_ind_tmp,
            :c_pipe_id_tmp,
            :l_mdfctn_cntr_tmp,
            :l_ord_tot_qty_tmp,
            :c_spn_flg
          );

          if ( SQLCODE != 0 )
          {
            fn_errlog ( c_ServiceName, "S32065", SQLMSG,c_err_msg );
            fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
            return -1;
          }
        }
      break ;

    case  UPDATE_XCHNG_RESPONSE:
      EXEC SQL
        UPDATE  fsd_fo_sprd_dtls
        SET     fsd_ack_nmbr = :ptr_st_spd_ordbk->c_xchng_ack[0]
        WHERE   fsd_sprd_rfrnc = :ptr_st_spd_ordbk->c_sprd_ord_rfrnc[0];
      if ( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S32070", SQLMSG,c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }
      break ;
      case  UPDATE_XCHNG_RESPONSE_RC:
      if ( ptr_st_spd_ordbk->l_ors_msg_typ[0] == ORS_3L_ORD_CNCL )
      {
        i_rec_cnt = 3;
      }
      else
      {
        i_rec_cnt = 2;
      }

      for ( i_cnt = 0; i_cnt < i_rec_cnt; i_cnt++ )
      {
        EXEC SQL
          UPDATE  fsd_fo_sprd_dtls
          SET     fsd_exec_qty = :ptr_st_spd_ordbk->l_exctd_qty[i_cnt],
                  fsd_cncl_qty = :ptr_st_spd_ordbk->l_can_qty[i_cnt]
          WHERE   fsd_ordr_rfrnc = :ptr_st_spd_ordbk->c_ordr_rfrnc[i_cnt];

        if ( SQLCODE != 0 )
        {
          fn_errlog ( c_ServiceName, "S32075", SQLMSG,c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
          return -1;
        }
      }
      break ;
       default:
      strcpy(c_err_msg, "Invalid Operation Type" );
      fn_errlog ( c_ServiceName, "S32080", DEFMSG,c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      return -1;
      break;
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 )
  {
    fn_errlog ( c_ServiceName, "S32085", SQLMSG,c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    return -1;
  }
  return 0;
}



int fn_upd_trade_book(char *c_ServiceName,char *c_err_msg,struct vw_tradebook *ptr_st_tradebook)
{
  char c_errmsg[250];
  int  i_trnsctn=0;
  int   i_rec_found;

  i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );
  if ( i_trnsctn == -1 )
  {
    strcpy (c_err_msg, c_errmsg );
    fn_errlog(c_ServiceName,"S32090",SQLMSG,c_err_msg );
    return -1;
  }
  switch(ptr_st_tradebook->c_oprn_typ)
  {
    case INSERT_TRADE_CONF:
      i_rec_found = 0;
      if ( ptr_st_tradebook->l_dwnld_flg == DOWNLOAD  &&  (strcmp(ptr_st_tradebook->c_xchng_cd,"NFO") == 0) )
      {
        fn_userlog( c_ServiceName,"Inside NFO");
        EXEC SQL
          SELECT 1
          INTO  :i_rec_found
          FROM ftd_fo_trd_dtls
          WHERE FTD_JIFFY = :ptr_st_tradebook->d_jiffy
          AND FTD_XCHNG_CD = :ptr_st_tradebook->c_xchng_cd
          AND FTD_STREAM_NO = :ptr_st_tradebook->l_ca_lvl;

        if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
        {
          fn_errlog(c_ServiceName,"S32095",SQLMSG,c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
          return -1;
        }
      }
      else if( ptr_st_tradebook->l_dwnld_flg == DOWNLOAD  && (strcmp(ptr_st_tradebook->c_xchng_cd,"BFO") == 0))
      {
        fn_userlog( c_ServiceName,"Inside BFO");
        EXEC SQL
          SELECT 1
          INTO  :i_rec_found
          FROM ftd_fo_trd_dtls
          WHERE FTD_XCHNG_TRD_NO = :ptr_st_tradebook->l_xchng_trd_no
          AND   FTD_ORD_ACK_NMBR = :ptr_st_tradebook->c_xchng_ack
          AND FTD_XCHNG_CD = :ptr_st_tradebook->c_xchng_cd
          AND FTD_STREAM_NO = :ptr_st_tradebook->l_ca_lvl;

        if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
        {
          fn_errlog(c_ServiceName,"S32100",SQLMSG,c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
          return -1;
        }
      }
      break;
  }

  if ( ptr_st_tradebook->c_oprn_typ == INSERT_TRADE_CONF )
  {
    if (i_rec_found == 1 )
    {
      fn_errlog ( c_ServiceName, "S32105","Record Exists",c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      return -1;
    }
    else
    {
      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog(c_ServiceName,"xchng cd [%s][%ld]",ptr_st_tradebook->c_xchng_cd,strlen(ptr_st_tradebook->c_xchng_cd));
        fn_userlog(c_ServiceName,"match  [%s][%ld]",ptr_st_tradebook->c_cln_mtch_accnt,strlen(ptr_st_tradebook->c_cln_mtch_accnt));
        fn_userlog(c_ServiceName,"trd_rfrnc  [%s][%ld]",ptr_st_tradebook->c_trd_rfrnc,strlen(ptr_st_tradebook->c_trd_rfrnc));
        fn_userlog(c_ServiceName,"c_ordr_rfrnc  [%s][%ld]",ptr_st_tradebook->c_ordr_rfrnc,strlen(ptr_st_tradebook->c_ordr_rfrnc));
        fn_userlog(c_ServiceName,"c_xchng_ack  [%s][%ld]",ptr_st_tradebook->c_xchng_ack,strlen(ptr_st_tradebook->c_xchng_ack));
        fn_userlog(c_ServiceName,"c_prd_typ  [%c]",ptr_st_tradebook->c_prd_typ);
        fn_userlog(c_ServiceName,"ptr_st_tradebook->c_ctgry_indstk  [%c]",ptr_st_tradebook->c_ctgry_indstk);
        fn_userlog(c_ServiceName,"c_undrlyng  [%s][%ld]",ptr_st_tradebook->c_undrlyng,strlen(ptr_st_tradebook->c_undrlyng));
        fn_userlog(c_ServiceName,"c_expry_dt  [%s][%ld]",ptr_st_tradebook->c_expry_dt,strlen(ptr_st_tradebook->c_expry_dt));
        fn_userlog(c_ServiceName,"c_exer_typ  [%c]",ptr_st_tradebook->c_exrc_typ);
        fn_userlog(c_ServiceName,"c_opt_typ  [%c]",ptr_st_tradebook->c_opt_typ);
        fn_userlog(c_ServiceName,"c_trd_dt  [%s][%ld]",ptr_st_tradebook->c_trd_dt,strlen(ptr_st_tradebook->c_trd_dt));
        fn_userlog(c_ServiceName,"c_trd_flw  [%c]",ptr_st_tradebook->c_trd_flw);
        fn_userlog(c_ServiceName,"c_user_id  [%s]",ptr_st_tradebook->c_user_id);
      }

      EXEC SQL
        INSERT INTO ftd_fo_trd_dtls
        (
          ftd_xchng_cd,
          ftd_clm_mtch_accnt,
          ftd_eba_trd_ref,
          ftd_ordr_rfrnc,
          ftd_ord_ack_nmbr,
          ftd_xchng_trd_no,
          ftd_prdct_typ,
          ftd_indstk,
          ftd_undrlyng,
          ftd_expry_dt,
          ftd_exer_typ,
          ftd_opt_typ,
          ftd_strk_prc,
          ftd_trd_dt,
          ftd_trd_flw,
          ftd_exctd_qty,
          ftd_exctd_rt,
          ftd_rms_prcsd_flg,
          ftd_upld_mtch_flg,
          ftd_jiffy,
          ftd_usr_id,
          ftd_stream_no,
          ftd_insrt_tm
        )
        VALUES
        (
          :ptr_st_tradebook->c_xchng_cd,
          :ptr_st_tradebook->c_cln_mtch_accnt,
          :ptr_st_tradebook->c_trd_rfrnc,
          :ptr_st_tradebook->c_ordr_rfrnc,
          :ptr_st_tradebook->c_xchng_ack,
          :ptr_st_tradebook->l_xchng_trd_no,
          :ptr_st_tradebook->c_prd_typ,
          :ptr_st_tradebook->c_ctgry_indstk,
          :ptr_st_tradebook->c_undrlyng,
          to_date ( :ptr_st_tradebook->c_expry_dt, 'DD-Mon-yyyy' ),
          :ptr_st_tradebook->c_exrc_typ,
          :ptr_st_tradebook->c_opt_typ,
          :ptr_st_tradebook->l_strike_prc,
          to_date ( :ptr_st_tradebook->c_trd_dt, 'DD-Mon-yyyy hh24:mi:ss' ),
          :ptr_st_tradebook->c_trd_flw,
          :ptr_st_tradebook->l_exctd_qty,
          :ptr_st_tradebook->l_exctd_rt,
          'N',
          'N',
          :ptr_st_tradebook->d_jiffy,
          :ptr_st_tradebook->c_user_id,
          :ptr_st_tradebook->l_ca_lvl,
          sysdate
        );

        if ( SQLCODE != 0 )
          {
          fn_errlog ( c_ServiceName, "S32110",SQLMSG, c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
          return -1;
        }
     }
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 )
  {
    strcpy ( c_err_msg, c_errmsg );
    fn_errlog(c_ServiceName,"S32115",SQLMSG,c_err_msg );
    return -1;
  }
  return 0;
}


int fn_upd_ordrbook(char *c_ServiceName,char *c_err_msg,struct vw_orderbook *ptr_st_orderbook)
{

  char c_errmsg[250];
	char c_ucc_cd[13] = "\0";   /*** Added in VER 6.7 ***/

  int i_trnsctn=0;

	varchar v_pan_no[31];     /*** Ver 4.7 ***/
  MEMSET(v_pan_no);         /*** Ver 4.7 ***/

  i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );

  if ( i_trnsctn == -1 )
  {
    fn_errlog ( c_ServiceName, "S32120", SQLMSG,c_err_msg);
    return -1;
  }

	  /*** Ver 4.7 Starts ***/

	if( ptr_st_orderbook->c_oprn_typ == UPDATE_FUT_CONVERSION || ptr_st_orderbook->c_oprn_typ == INSERT_ON_ORDER_PLACEMENT )
  {
    EXEC SQL
      SELECT  NVL(ICD_PAN_NO,'*')
      INTO    :v_pan_no
      FROM    ICD_INFO_CLIENT_DTLS,
              IAI_INFO_ACCOUNT_INFO
      WHERE   ICD_SERIAL_NO = IAI_SERIAL_NO
      AND     IAI_MATCH_ACCOUNT_NO  = :ptr_st_orderbook->c_cln_mtch_accnt;

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S71015", SQLMSG, c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      return -1;
    }

    SETNULL(v_pan_no);

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName, "PAN number :%s:",v_pan_no.arr);
    }

    if (v_pan_no.len != 10)
    {
			fn_errlog( c_ServiceName, "B91176", DEFMSG, c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      return -1;
    }
  }
  /** Ver 4.7 Ends ***/

  switch( ptr_st_orderbook->c_oprn_typ )
  {
    case  INSERT_ON_ORDER_PLACEMENT:

		/*** Added in VER 6.7 : Real time margin reporting ( Fetching UCC code ) ***/

		MEMSET(c_ucc_cd);

    EXEC SQL
    SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
    INTO  :c_ucc_cd
    FROM  CLM_CLNT_MSTR
    WHERE CLM_MTCH_ACCNT = :ptr_st_orderbook->c_cln_mtch_accnt;

    if ( SQLCODE != 0 )
    {
      fn_userlog(c_ServiceName,"fn_upd_ordrbook : Error while fetching UCC code for :%s:", ptr_st_orderbook->c_cln_mtch_accnt);
      fn_errlog( c_ServiceName, "S32125",FMLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      return -1;
    }

    rtrim(c_ucc_cd);

    if(DEBUG_MSG_LVL_3)
      fn_userlog(c_ServiceName,"VER 6.7 -- fn_upd_ordrbook : MAtch ID :%s: have ucc code :%s:", ptr_st_orderbook->c_cln_mtch_accnt, c_ucc_cd);

    /*** VER 6.7 ends here ***/

    EXEC SQL
        INSERT INTO fod_fo_ordr_dtls
        (
          fod_clm_mtch_accnt,
          fod_clnt_ctgry,
          fod_ordr_rfrnc,
          fod_pipe_id,
          fod_xchng_cd,
          fod_prdct_typ,
          fod_undrlyng,
          fod_expry_dt,
          fod_exer_typ,
          fod_opt_typ,
          fod_strk_prc,
          fod_ordr_flw,
          fod_lmt_mrkt_sl_flg,
          fod_dsclsd_qty,
          fod_ordr_tot_qty,
          fod_lmt_rt,
          fod_stp_lss_tgr,
          fod_ordr_type,
          fod_ordr_valid_dt,
          fod_trd_dt,
          fod_ordr_stts,
          fod_sprd_ordr_ref,
          fod_mdfctn_cntr,
          fod_settlor,
          fod_spl_flag,
          fod_indstk,
          fod_pro_cli_ind,
          fod_channel,
          fod_bp_id,
          fod_ctcl_id,
          fod_usr_id,
          fod_mrkt_typ,
          fod_cse_id,
					fod_pan_no,      /*** Ver 4.7 ***/
					fod_ucc_cd			 /*** Added in VER 6.7 ***/
        )
        VALUES
        (
          :ptr_st_orderbook->c_cln_mtch_accnt,
          :ptr_st_orderbook->l_clnt_ctgry,
          :ptr_st_orderbook->c_ordr_rfrnc,
          :ptr_st_orderbook->c_pipe_id,
          :ptr_st_orderbook->c_xchng_cd,
          :ptr_st_orderbook->c_prd_typ,
          :ptr_st_orderbook->c_undrlyng,
          to_date( :ptr_st_orderbook->c_expry_dt, 'dd-mon-yyyy' ),
          :ptr_st_orderbook->c_exrc_typ,
          :ptr_st_orderbook->c_opt_typ,
          :ptr_st_orderbook->l_strike_prc,
          :ptr_st_orderbook->c_ordr_flw,
          :ptr_st_orderbook->c_slm_flg,
          :ptr_st_orderbook->l_dsclsd_qty,
          :ptr_st_orderbook->l_ord_tot_qty,
          :ptr_st_orderbook->l_ord_lmt_rt,
          :ptr_st_orderbook->l_stp_lss_tgr,
          :ptr_st_orderbook->c_ord_typ,
          to_date( :ptr_st_orderbook->c_valid_dt,
                                       'dd-mon-yyyy' ),
          to_date( :ptr_st_orderbook->c_trd_dt,
                                       'dd-mon-yyyy' ),
          :ptr_st_orderbook->c_ordr_stts,
          :ptr_st_orderbook->c_sprd_ord_rfrnc,
          :ptr_st_orderbook->l_mdfctn_cntr,
          :ptr_st_orderbook->c_settlor,
          :ptr_st_orderbook->c_spl_flg,
          :ptr_st_orderbook->c_ctgry_indstk,
          :ptr_st_orderbook->c_pro_cli_ind,
          :ptr_st_orderbook->c_channel,
          :ptr_st_orderbook->c_bp_id,
          :ptr_st_orderbook->c_ctcl_id,
          :ptr_st_orderbook->c_user_id,
          :ptr_st_orderbook->c_mrkt_typ,
          :ptr_st_orderbook->l_cse_id,
					:v_pan_no,                    		/*** Ver 4.7 ***/
					:c_ucc_cd				/*** Added in VER 6.7 ***/
        );
      break;

    case  UPDATE_ORDER_STATUS:
      EXEC SQL
        UPDATE  fod_fo_ordr_dtls
        SET     fod_ordr_stts = :ptr_st_orderbook->c_ordr_stts
        WHERE   fod_ordr_rfrnc= :ptr_st_orderbook->c_ordr_rfrnc;
      break;

    case  UPDATE_ORDER_MODIFICATION:
      EXEC SQL
        UPDATE  fod_fo_ordr_dtls
        SET     fod_lmt_mrkt_sl_flg = :ptr_st_orderbook->c_slm_flg,
                fod_dsclsd_qty      = :ptr_st_orderbook->l_dsclsd_qty,
                fod_ordr_type       = :ptr_st_orderbook->c_ord_typ,
                fod_stp_lss_tgr     = :ptr_st_orderbook->l_stp_lss_tgr,
                fod_ordr_tot_qty    = :ptr_st_orderbook->l_ord_tot_qty,
                fod_lmt_rt          = :ptr_st_orderbook->l_ord_lmt_rt,
                fod_ordr_stts       = :ptr_st_orderbook->c_ordr_stts,
                fod_ordr_valid_dt   = to_date (:ptr_st_orderbook->c_valid_dt,
                                               'dd-mon-yyyy' ),
                fod_trd_dt          = to_date (:ptr_st_orderbook->c_trd_dt,
                                               'dd-mon-yyyy' ),
                fod_lst_rqst_ack_tm = to_date (:ptr_st_orderbook->c_ack_tm,
                                               'dd-mon-yyyy hh24:mi:ss' )
        WHERE   fod_ordr_rfrnc      = :ptr_st_orderbook->c_ordr_rfrnc;
      break;

   case  UPDATE_XCHNG_RESPONSE:
      EXEC SQL
        UPDATE  fod_fo_ordr_dtls
        SET     fod_ack_nmbr  = :ptr_st_orderbook->c_xchng_ack
        WHERE   fod_ordr_rfrnc= :ptr_st_orderbook->c_ordr_rfrnc;
      break;

   case  UPDATE_STATUS_ACK_TM:
     EXEC SQL
        UPDATE  fod_fo_ordr_dtls
        SET     fod_ordr_stts = :ptr_st_orderbook->c_ordr_stts,
                fod_ord_ack_tm = to_date (:ptr_st_orderbook->c_prev_ack_tm,
                                               'dd-mon-yyyy hh24:mi:ss' ),
                fod_lst_rqst_ack_tm = to_date (:ptr_st_orderbook->c_ack_tm,
                                               'dd-mon-yyyy hh24:mi:ss' )
        WHERE   fod_ordr_rfrnc= :ptr_st_orderbook->c_ordr_rfrnc;
      break;

  case  UPDATE_MOD_CNTR:
      EXEC SQL
        UPDATE  fod_fo_ordr_dtls
        SET     fod_mdfctn_cntr   = fod_mdfctn_cntr + 1,
								FOD_EOS_FLG       =:ptr_st_orderbook->c_req_typ		/*** Ver 4.6 ***/
        WHERE   fod_ordr_rfrnc= :ptr_st_orderbook->c_ordr_rfrnc;
      break;

    case  UPDATE_TRADE_CONFIRMATION:
      EXEC SQL
        UPDATE  fod_fo_ordr_dtls
        SET     fod_exec_qty        = :ptr_st_orderbook->l_exctd_qty,
                fod_exec_qty_day    = :ptr_st_orderbook->l_exctd_qty_day,
                fod_ordr_stts       = :ptr_st_orderbook->c_ordr_stts,
                fod_lst_rqst_ack_tm = to_date (:ptr_st_orderbook->c_ack_tm,
                                               'dd-mon-yyyy hh24:mi:ss' )
        WHERE   fod_ordr_rfrnc      = :ptr_st_orderbook->c_ordr_rfrnc;
      break;

        case  UPDATE_XCHNG_RESP_DTLS:
      EXEC SQL
        UPDATE  fod_fo_ordr_dtls
        SET     fod_ordr_stts       = :ptr_st_orderbook->c_ordr_stts,
                fod_cncl_qty        = :ptr_st_orderbook->l_can_qty,
                fod_exprd_qty       = :ptr_st_orderbook->l_exprd_qty,
                fod_trd_dt          = to_date (:ptr_st_orderbook->c_trd_dt,
                                               'dd-mon-yyyy' )
        WHERE   fod_ordr_rfrnc= :ptr_st_orderbook->c_ordr_rfrnc;
      break;

        case  UPDATE_XCHNG_RESP_DTLS_CA:
      EXEC SQL
        UPDATE  fod_fo_ordr_dtls
        SET     fod_ordr_stts       = :ptr_st_orderbook->c_ordr_stts,
                fod_cncl_qty        = :ptr_st_orderbook->l_can_qty,
                fod_exprd_qty       = :ptr_st_orderbook->l_exprd_qty,
                fod_trd_dt          = to_date (:ptr_st_orderbook->c_trd_dt,
                                               'dd-mon-yyyy' ),
                fod_lst_rqst_ack_tm = to_date (:ptr_st_orderbook->c_ack_tm,
                                               'dd-mon-yyyy hh24:mi:ss' )
        WHERE   fod_ordr_rfrnc= :ptr_st_orderbook->c_ordr_rfrnc;
      break;

     case  UPDATE_XCHNG_RESP_DTLS_OT:
      EXEC SQL
        UPDATE  fod_fo_ordr_dtls
        SET     fod_lst_rqst_ack_tm = to_date (:ptr_st_orderbook->c_ack_tm, 'dd-mon-yyyy hh24:mi:ss' ),
                fod_lmt_mrkt_sl_flg = 'L',
                fod_stp_lss_tgr     = 0
        WHERE   fod_ordr_rfrnc= :ptr_st_orderbook->c_ordr_rfrnc;
      break;

    case  UPDATE_FUT_CONVERSION:

			/*** Added in VER 6.7 : Real time margin reporting ( Fetching UCC code ) ***/

			MEMSET(c_ucc_cd);

      EXEC SQL
      SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
      INTO  :c_ucc_cd
      FROM  CLM_CLNT_MSTR
      WHERE CLM_MTCH_ACCNT = :ptr_st_orderbook->c_cln_mtch_accnt;

      if ( SQLCODE != 0 )
      {
        fn_userlog(c_ServiceName,"fn_upd_ordrbook : Error while fetching UCC code for :%s:", ptr_st_orderbook->c_cln_mtch_accnt);
        fn_errlog( c_ServiceName, "S32130",FMLMSG,c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        return -1;
      }

      rtrim(c_ucc_cd);

      if(DEBUG_MSG_LVL_3)
        fn_userlog(c_ServiceName,"VER 6.7 -- fn_upd_ordrbook : MAtch ID :%s: have ucc code :%s:", ptr_st_orderbook->c_cln_mtch_accnt, c_ucc_cd);

      /*** VER 6.7 ends here ***/

      EXEC SQL
        INSERT INTO fod_fo_ordr_dtls
        (
          fod_clm_mtch_accnt,
          fod_clnt_ctgry,
          fod_ordr_rfrnc,
          fod_pipe_id,
          fod_xchng_cd,
          fod_prdct_typ,
          fod_indstk,
          fod_undrlyng,
          fod_expry_dt,
          fod_exer_typ,
          fod_opt_typ,
          fod_strk_prc,
          fod_ordr_flw,
          fod_lmt_mrkt_sl_flg,
          fod_dsclsd_qty,
          fod_ordr_tot_qty,
          fod_lmt_rt,
          fod_stp_lss_tgr,
          fod_ordr_type,
          fod_ordr_valid_dt,
          fod_trd_dt,
          fod_ordr_stts,
          fod_exec_qty,
          fod_cncl_qty,
          fod_exprd_qty,
          fod_sprd_ordr_ref,
          fod_mdfctn_cntr,
          fod_settlor,
          fod_ack_nmbr,
          fod_spl_flag,
          fod_ord_ack_tm,
          fod_lst_rqst_ack_tm,
          fod_pro_cli_ind,
          fod_exec_qty_day,
          fod_channel,
          fod_bp_id,
          fod_ctcl_id,
          fod_usr_id,
          fod_cse_id,
					fod_pan_no,    /*** Ver 4.7 ***/
					fod_ucc_cd			/*** Added in VER 6.7 ***/
        )
        VALUES
        (
          :ptr_st_orderbook->c_cln_mtch_accnt,
          :ptr_st_orderbook->l_clnt_ctgry,
          :ptr_st_orderbook->c_ordr_rfrnc,
          :ptr_st_orderbook->c_pipe_id,
          :ptr_st_orderbook->c_xchng_cd,
          :ptr_st_orderbook->c_prd_typ,
          :ptr_st_orderbook->c_ctgry_indstk,
          :ptr_st_orderbook->c_undrlyng,
          to_date( :ptr_st_orderbook->c_expry_dt, 'dd-mon-yyyy' ),
          :ptr_st_orderbook->c_exrc_typ,
          :ptr_st_orderbook->c_opt_typ,
          :ptr_st_orderbook->l_strike_prc,
          :ptr_st_orderbook->c_ordr_flw,
          :ptr_st_orderbook->c_slm_flg,
          :ptr_st_orderbook->l_dsclsd_qty,
          :ptr_st_orderbook->l_ord_tot_qty,
          :ptr_st_orderbook->l_ord_lmt_rt,
          :ptr_st_orderbook->l_stp_lss_tgr,
          :ptr_st_orderbook->c_ord_typ,
          to_date( :ptr_st_orderbook->c_valid_dt,'dd-mon-yyyy' ),
          to_date( :ptr_st_orderbook->c_trd_dt,'dd-mon-yyyy' ),
          :ptr_st_orderbook->c_ordr_stts,
          :ptr_st_orderbook->l_exctd_qty,
          :ptr_st_orderbook->l_can_qty,
          :ptr_st_orderbook->l_exprd_qty,
          :ptr_st_orderbook->c_sprd_ord_rfrnc,
          :ptr_st_orderbook->l_mdfctn_cntr,
          :ptr_st_orderbook->c_settlor,
          :ptr_st_orderbook->c_xchng_ack,
          :ptr_st_orderbook->c_spl_flg,
          to_date(:ptr_st_orderbook->c_ack_tm,'dd-mon-yyyy hh24:mi:ss' ),
          to_date(:ptr_st_orderbook->c_prev_ack_tm,'dd-mon-yyyy hh24:mi:ss' ),
          :ptr_st_orderbook->c_pro_cli_ind,
          :ptr_st_orderbook->l_exctd_qty_day,
          :ptr_st_orderbook->c_channel,
          :ptr_st_orderbook->c_bp_id,
          :ptr_st_orderbook->c_ctcl_id,
          :ptr_st_orderbook->c_user_id,
          :ptr_st_orderbook->l_cse_id,
					:v_pan_no,                    	 /*** Ver 4.7 ***/
					:c_ucc_cd					/*** Added in VER 6.7 ***/
        );
      break;

    default:
      strcpy(c_err_msg, "Invalid Operation Type" );
      fn_errlog ( c_ServiceName, "S32135", DEFMSG,c_err_msg );
      return -1;
      break;
  }
  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S32140", SQLMSG, c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    return -1;
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 )
  {
    fn_errlog ( c_ServiceName, "S32145", SQLMSG,c_err_msg);
    return -1;
  }
  return 0;
}

/********** Ver 4.4 Ends   **********/


/******** Ver 5.2 starts *************/

 
int fn_cal_dlvry_mrgn( char *c_ServiceName,
										  struct vw_pstn_actn *ptr_st_pstn_actn,
										  struct vw_err_msg *ptr_st_err_msg)
{
	int i_returncode = 0;
  double d_cntrct_val = 0;
  double d_spot_prc = 0.0;
  double d_ltq_cls_prc = 0.0;
  double d_dlvry_mrgn_prcnt = 0.0;
  double d_ISec_buff_mrgn_prcnt = 0.0;
  double d_dlvry_min_mrgn_prcnt = 0.0;
  double d_final_delvr_mrgn = 0.0;
  double d_current_delvry_mrgn_prcnt = 0.0;
  double d_var_mrgn = 0.0;
  double d_extrm_lss_mrgn = 0.0;
  double d_new_delvry_mrgn_val = 0.0;
  double d_diff_dlvry_mrgn = 0.0;
  double d_bal_amt = 0.0;
  double d_existing_dlvry_mrgn_val = 0.0;
  long   l_opnpos_qty = 0;
  char	 c_narration_id[4] = "\0";
	char   c_opnpos_flw = '\0';
  char   c_settlement_flag = '\0';

  fn_userlog( c_ServiceName, "*** Inside Function fn_cal_dlvry_mrgn ***");

	EXEC SQL
     SELECT  NVL(FTQ_SETLMNT_FLG,'C')
       INTO  :c_settlement_flag
       FROM  FTQ_FO_TRD_QT
      WHERE  FTQ_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
        AND  FTQ_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
        AND  FTQ_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
        AND  FTQ_EXPRY_DT        = to_date( :ptr_st_pstn_actn->c_expry_dt,'dd-mon-yyyy' )
        AND  FTQ_EXER_TYP        = :ptr_st_pstn_actn->c_exrc_typ
        AND  FTQ_STRK_PRC        = :ptr_st_pstn_actn->l_strike_prc
        AND  FTQ_OPT_TYP         = :ptr_st_pstn_actn->c_opt_typ
        AND  FTQ_INDSTK          = :ptr_st_pstn_actn->c_ctgry_indstk;

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "L31195", SQLMSG, ptr_st_err_msg->c_err_msg );
    return -1;
  }
  fn_userlog( c_ServiceName,"nspan:c_settlement_flag :%c:",c_settlement_flag);

	if( c_settlement_flag != 'P')
	{
     return 0;
  }

  EXEC SQL
  SELECT ABS(FOP_OPNPSTN_QTY),
         NVL(FOP_UDLVRY_MRGN,0),
		     FOP_OPNPSTN_FLW
  INTO   :l_opnpos_qty,
         :d_existing_dlvry_mrgn_val,
		     :c_opnpos_flw
  FROM  FOP_FO_OPTIONS_PSTN
  WHERE FOP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt             
    AND FOP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd                   
    AND FOP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ                    
    AND FOP_OPT_TYP         = :ptr_st_pstn_actn->c_opt_typ                    
    AND FOP_EXER_TYP        = :ptr_st_pstn_actn->c_exrc_typ                   
    AND FOP_STRK_PRC        = :ptr_st_pstn_actn->l_strike_prc                 
    AND FOP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng                   
    AND FOP_EXPRY_DT        = :ptr_st_pstn_actn->c_expry_dt;  
	
  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "L31200", SQLMSG, ptr_st_err_msg->c_err_msg );
    return -1;
  }

  fn_userlog( c_ServiceName, "nspan:cald Open position qty :%ld:,d_existing_dlvry_mrgn_val :%lf: c_opnpos_flw :%c:",l_opnpos_qty,d_existing_dlvry_mrgn_val,c_opnpos_flw );

 /**** If 75 Buy 75 Sell / 75 Sell 75 Buy => N ******/
/**** If 75 Buy 150 Sell , 75 Buy 75 Sell => N and New 75 Sell ***/
  if ( ( c_opnpos_flw== 'S' || c_opnpos_flw== 'N' ) && d_existing_dlvry_mrgn_val != 0 )
  {
       strcpy( c_narration_id ,RELEASE_ON_PHYDLVRY_OPT_EOS );

				i_returncode = fn_upd_limits( c_ServiceName,
																ptr_st_pstn_actn,
																ptr_st_err_msg,
																c_narration_id,
																DEBIT_WITHOUT_LIMIT,
																d_existing_dlvry_mrgn_val,
																&d_bal_amt);
       if ( i_returncode != 0 )
       {
           fn_errlog ( c_ServiceName, "L31205", SQLMSG, ptr_st_err_msg->c_err_msg );
           return -1;
       }

       d_final_delvr_mrgn = 0;
       fn_userlog(c_ServiceName,"nspan:cald Credited The whole delivery margin :%lf:",d_existing_dlvry_mrgn_val);
  }
  else if ( c_opnpos_flw== 'B' ) /*** Buy Order ***/
  {

			EXEC SQL
			  SELECT  NVL(LTQ_RT,0.0) * 100,
			          NVL(LTQ_CLS_PRC,0.0) * 100
			  INTO    :d_spot_prc,
			          :d_ltq_cls_prc
			  FROM    LTQ_TRD_QT
			  WHERE   LTQ_XCHNG_CD  = :ptr_st_pstn_actn->c_xchng_cd
			  AND     LTQ_STCK_CD   = :ptr_st_pstn_actn->c_undrlyng;

			 if ( SQLCODE  !=  0 && SQLCODE  != NO_DATA_FOUND)
			 {
			  fn_errlog ( c_ServiceName, "L31210", SQLMSG, ptr_st_err_msg->c_err_msg );
			  return -1;
			 }

			 if(DEBUG_MSG_LVL_0)
			 {
			      fn_userlog(c_ServiceName,"nspan:cald SPOT PRICE  Is :%lf:",d_spot_prc);
			      fn_userlog(c_ServiceName,"nspan:cald LTQ CLOSING PRICE Is :%lf:",d_ltq_cls_prc);
			 }
        
			 d_cntrct_val = (double)l_opnpos_qty * (double)ptr_st_pstn_actn->l_strike_prc;
			 fn_userlog( c_ServiceName, "nspan:cald Contract Value is :%lf:",d_cntrct_val );

			 /********** Get the delivery margin percentage from the database ********/
			 EXEC SQL
			 SELECT NVL( FMM_ISEC_DLVRY_MRGN_BFFR_PRCNT, 0.0 ), /*** Defined at each stock level I-sec Buffer margin ***/
			            NVL( FMM_DLVRY_MIN_MRGN_PRCNT , 0.0 ) /** Minimum Mrgn % **/
			       INTO :d_ISec_buff_mrgn_prcnt,
			            :d_dlvry_min_mrgn_prcnt /*** Minimum margin percentage ***/
			       FROM FMM_FO_MRGN_MSTR
			       WHERE  FMM_PRDCT_TYP= :ptr_st_pstn_actn->c_prd_typ
			       AND    FMM_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
			       AND    FMM_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
			       AND    FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
			                                     FROM    FCB_FO_CLN_BSKT_ALLTD
			                                     WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
			                                                           FROM   CLM_CLNT_MSTR
			                                                        WHERE CLM_MTCH_ACCNT =:ptr_st_pstn_actn->c_cln_mtch_accnt));

        if( SQLCODE != 0 )
        {
            fn_userlog(c_ServiceName,"******Failed in FMM fetch*******");
            fn_errlog ( c_ServiceName, "L31215", SQLMSG, ptr_st_err_msg->c_err_msg );
            return -1;
        }

      /*********** Find Delivery Margin Percentage *******/
      /*********** Find Var and Extreme Loss margin ******/
      EXEC SQL
           SELECT NVL(VEM_VAR_MARGIN,0.0),
                  NVL(VEM_EXTRM_LOSS_RT,0.0),
                  NVL(FSP_DLVRY_MRGPRCNT,0.0)
            INTO :d_var_mrgn,
                 :d_extrm_lss_mrgn,
                 :d_current_delvry_mrgn_prcnt
            FROM  VEM_VAR_ELM_MSTR,FSP_FO_SYSTM_PRMTR
           WHERE  VEM_STCK_CD = ( SELECT SEM_MAP_VL
                                   FROM  SEM_STCK_MAP
                                  WHERE  SEM_STCK_CD = :ptr_st_pstn_actn->c_undrlyng
                                    AND  SEM_ENTTY = 3 );

      if ( SQLCODE != 0 )
      {
            fn_errlog ( c_ServiceName, "L31220", SQLMSG, ptr_st_err_msg->c_err_msg );
            return -1;
      }

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"nspan:cald d_ISec_buff_mrgn_prcnt is :%lf:",d_ISec_buff_mrgn_prcnt);
        fn_userlog(c_ServiceName,"nspan:cald d_dlvry_min_mrgn_prcnt is :%lf:",d_dlvry_min_mrgn_prcnt);
        fn_userlog(c_ServiceName,"nspan:cald d_existing_dlvry_mrgn_val is :%lf:",d_existing_dlvry_mrgn_val);
        fn_userlog(c_ServiceName,"nspan:cald l_opnpos_qty :%ld:",l_opnpos_qty);
        fn_userlog(c_ServiceName,"nspan:cald d_cntrct_val is :%lf:",d_cntrct_val);
        fn_userlog(c_ServiceName,"nspan:cald ptr_st_pstn_actn->l_strike_prc is :%ld:",ptr_st_pstn_actn->l_strike_prc);
        fn_userlog(c_ServiceName,"nspan:cald d_var_mrgn is :%lf:",d_var_mrgn);
        fn_userlog(c_ServiceName,"nspan:cald d_extrm_lss_mrgn is :%lf:",d_extrm_lss_mrgn);
        fn_userlog(c_ServiceName,"nspan:cald d_current_delvry_mrgn_prcnt :%lf:",d_current_delvry_mrgn_prcnt);
      }
      /******* Compute the New delivery margin  **********/
      d_new_delvry_mrgn_val = fn_maxd( ((d_cntrct_val *(d_var_mrgn+d_extrm_lss_mrgn+d_ISec_buff_mrgn_prcnt))/100.0) ,( (d_cntrct_val *d_dlvry_min_mrgn_prcnt)/100.0) ) * (d_current_delvry_mrgn_prcnt/100.0);
 
      EXEC SQL
      SELECT ROUND(:d_new_delvry_mrgn_val,2)
      INTO :d_new_delvry_mrgn_val
      FROM DUAL;

      if ( SQLCODE != 0 )
      {
            fn_errlog ( c_ServiceName, "L31225", SQLMSG, ptr_st_err_msg->c_err_msg );
            return -1;
      }

      d_diff_dlvry_mrgn = d_existing_dlvry_mrgn_val - d_new_delvry_mrgn_val;

      if( d_diff_dlvry_mrgn > 0 )
      {
       strcpy( c_narration_id ,RELEASE_ON_PHYDLVRY_OPT_EOS );

				i_returncode = fn_upd_limits( c_ServiceName,
																			ptr_st_pstn_actn,
																			ptr_st_err_msg,
																			c_narration_id,
																			DEBIT_WITHOUT_LIMIT,
																			d_diff_dlvry_mrgn,
																			&d_bal_amt);
       if ( i_returncode != 0 )
       {
           fn_errlog ( c_ServiceName, "L31230", SQLMSG, ptr_st_err_msg->c_err_msg );
           return -1;
       }
      }
      else
      {
         return 0;
      }
       d_final_delvr_mrgn = d_new_delvry_mrgn_val;
       fn_userlog(c_ServiceName,"nspan:cald Credited The REQUIRED NEW delivery margin :%ld:",d_final_delvr_mrgn);

    }
		else 
	  {
       return 0;
		}

      EXEC SQL
           UPDATE FOP_FO_OPTIONS_PSTN
              SET FOP_UDLVRY_MRGN     = :d_final_delvr_mrgn
					 WHERE  FOP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
					   AND  FOP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
					   AND  FOP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
					   AND  FOP_OPT_TYP         = :ptr_st_pstn_actn->c_opt_typ
					   AND  FOP_EXER_TYP        = :ptr_st_pstn_actn->c_exrc_typ
					   AND  FOP_STRK_PRC        = :ptr_st_pstn_actn->l_strike_prc
					   AND  FOP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
					   AND  FOP_EXPRY_DT        = :ptr_st_pstn_actn->c_expry_dt;

		  if ( SQLCODE != 0 )
		  {
		    fn_errlog ( c_ServiceName, "L31235", SQLMSG, ptr_st_err_msg->c_err_msg );
		    return -1;
		  }
		  fn_userlog( c_ServiceName, "*** Function fn_cal_dlvry_mrgn ended ***");

      return 0;
}


/**************** This function is called in failure case ********************/

/**  The customer is having insufficient limit and the system is             **
***  trying to cancel the pending order or trying to square off the position **
***  and while doing so if it fails for that particular record ,then,        **
***  mark the record as F and call the next contract for processing          **
***  in that given match account                                             **/
 
int fn_loopback_cansq( char *c_ServiceName,
                 char *c_mtch_acc,
                 struct vw_contract *ptr_st_cntrct,
                 char c_prcs_flg,
								 char c_span_flag,
                 char *c_err_msg )
{
  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog( c_ServiceName,":%c: LOOPBACK :%s: FLAG :%c: ",c_span_flag,c_mtch_acc,c_prcs_flg);
  }

  char c_match_account[11];
  char c_underlying[7];
  char c_exchng_cd[4];
  char c_prd_typ='\0';
  char c_opt_typ='\0';
  char c_ind_stk='\0';
  char c_span_flg='\0';
  char c_exer_typ='\0';
  char c_expiry_dt[12];
  char c_rqst_typ='\0';
  long l_strike_prc = 0;
  int i_ch_val = 0;
  int i_fail_stts_flg = 0;
  int i_trnsctn=0;

  varchar c_exp_dt[12];

  MEMSET(c_exp_dt);
  MEMSET(c_exchng_cd);
  MEMSET(c_match_account);
  MEMSET(c_underlying);
  MEMSET(c_exchng_cd);
  MEMSET(c_expiry_dt);
  l_strike_prc=0;

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
     fn_errlog( c_ServiceName, "S32150", LIBMSG, c_err_msg  );
     return -1;
  }

  strcpy((char *)c_exp_dt.arr,ptr_st_cntrct->c_expry_dt);
  SETLEN(c_exp_dt);


   if( c_span_flag == 'N' )
	 {
	     EXEC SQL
	          UPDATE FOP_FO_OPTIONS_PSTN
	            SET  FOP_MTM_FLG =  DECODE( FOP_MTM_FLG,'D','O',FOP_MTM_FLG )
	           WHERE FOP_CLM_MTCH_ACCNT  = :c_mtch_acc
	             AND FOP_XCHNG_CD        = :ptr_st_cntrct->c_xchng_cd
	             AND FOP_PRDCT_TYP       = :ptr_st_cntrct->c_prd_typ
	             AND FOP_OPT_TYP         = :ptr_st_cntrct->c_opt_typ
	             AND FOP_EXER_TYP        = :ptr_st_cntrct->c_exrc_typ
	             AND FOP_UNDRLYNG        = :ptr_st_cntrct->c_undrlyng
	             AND FOP_EXPRY_DT        = :c_exp_dt
	             AND FOP_STRK_PRC        = :ptr_st_cntrct->l_strike_prc;

	     if ( SQLCODE != 0 )
	     {
        fn_errlog( c_ServiceName, "S32155", SQLMSG, c_err_msg  );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        return -1;
	     }
   }
    else if ( c_span_flag == 'Y' )
    {
            EXEC SQL
                 UPDATE FCP_FO_SPN_CNTRCT_PSTN
                    SET FCP_MTM_FLG = DECODE( FCP_MTM_FLG,'D','O',FCP_MTM_FLG )
                  WHERE FCP_CLM_MTCH_ACCNT  = :c_mtch_acc
                    AND FCP_XCHNG_CD        = :ptr_st_cntrct->c_xchng_cd
                    AND FCP_PRDCT_TYP       = :ptr_st_cntrct->c_prd_typ
                    AND FCP_OPT_TYP         = :ptr_st_cntrct->c_opt_typ
                    AND FCP_EXER_TYP        = :ptr_st_cntrct->c_exrc_typ
                    AND FCP_STRK_PRC        = :ptr_st_cntrct->l_strike_prc
                    AND FCP_UNDRLYNG        = :ptr_st_cntrct->c_undrlyng
                    AND FCP_EXPRY_DT        = :c_exp_dt;
            if ( SQLCODE != 0 )
            {
                fn_errlog( c_ServiceName, "S32160", SQLMSG, c_err_msg  );
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                return -1;
            }
		}

   EXEC SQL
       UPDATE FPM_FOLODM_PRCS_MSTR
          SET FPM_PRCS_FLG=:c_prcs_flg,
              FPM_PRCS_DT=SYSDATE
        WHERE FPM_CLM_MTCH_ACCNT=:c_mtch_acc
          AND FPM_XCHNG_CD=:ptr_st_cntrct->c_xchng_cd
          AND FPM_PRDCT_TYP=:ptr_st_cntrct->c_prd_typ
          AND FPM_UNDRLYNG= :ptr_st_cntrct->c_undrlyng
          AND FPM_EXPRY_DT= :c_exp_dt
          AND FPM_EXER_TYP= :ptr_st_cntrct->c_exrc_typ
          AND FPM_OPT_TYP= :ptr_st_cntrct->c_opt_typ
          AND FPM_STRK_PRC= :ptr_st_cntrct->l_strike_prc;
    if ( SQLCODE != 0)
    {
        fn_errlog( c_ServiceName, "S32165", SQLMSG, c_err_msg  ); 
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );  
        return -1;
    }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName, "S32170", LIBMSG, c_err_msg  );
      return -1;
  }


  if( i_fail_stts_flg == 0 )
  {
   EXEC SQL
    SELECT FPM_CLM_MTCH_ACCNT,
           FPM_XCHNG_CD,
           FPM_PRDCT_TYP,
           FPM_INDSTK,
           FPM_UNDRLYNG,
           FPM_EXPRY_DT,
           FPM_EXER_TYP,
           FPM_OPT_TYP,
           FPM_STRK_PRC,
           FPM_SPAN_FLG,
           FPM_RQST_TYP
      INTO :c_match_account,
           :c_exchng_cd,
           :c_prd_typ,
           :c_ind_stk,
           :c_underlying,
           :c_expiry_dt,
           :c_exer_typ,
           :c_opt_typ,
           :l_strike_prc,
           :c_span_flg,
           :c_rqst_typ
    FROM
    (
    SELECT FPM_CLM_MTCH_ACCNT,
           FPM_XCHNG_CD,
           FPM_PRDCT_TYP,
           FPM_INDSTK,
           FPM_UNDRLYNG,
           FPM_EXPRY_DT,
           FPM_EXER_TYP,
           FPM_OPT_TYP,
           FPM_STRK_PRC,
           FPM_SPAN_FLG,
           FPM_RQST_TYP
       FROM
             FPM_FOLODM_PRCS_MSTR
       WHERE FPM_CLM_MTCH_ACCNT=:c_mtch_acc
         AND FPM_PRCS_FLG='N'
        ORDER BY FPM_UNDRLYNG asc
    )
    WHERE ROWNUM < 2;

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
        fn_errlog( c_ServiceName, "S32175", SQLMSG, c_err_msg  );
        return -1;
    }

    if ( SQLCODE!= NO_DATA_FOUND )
    {
        i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                            c_err_msg,
                           "SFO_CDLVMG_PRC",
                            TPNOREPLY,
                            11,
                            FFO_EBA_MTCH_ACT_NO,(char*)c_match_account,
                            FFO_XCHNG_CD,(char*)c_exchng_cd,
                            FFO_PRDCT_TYP,(char*)&c_prd_typ,
                            FFO_UNDRLYNG, (char*)c_underlying,
                            FFO_EXPRY_DT, (char*)c_expiry_dt,
                            FFO_EXER_TYP, (char*)&c_exer_typ,
                            FFO_OPT_TYP, (char*)&c_opt_typ,
                            FFO_STRK_PRC, (char*)&l_strike_prc,
                            FFO_CTGRY_INDSTK, (char*)&c_ind_stk,
                            FFO_RQST_TYP, (char*)&c_rqst_typ,
                            FFO_STATUS_FLG,(char *)&c_span_flg);
       if ( i_ch_val == -1 )
       {
          fn_errlog( c_ServiceName, "S32180", LIBMSG, c_err_msg );
          return -1;
       }
    }

  }

  return 0;
}


int fn_ins_lodm_opt_rep_tbl (  char *c_ServiceName,
                          char *c_err_msg,
                          struct vw_contract *ptr_st_cntrct,
                          char *c_match_acc_no,
                          char  *c_imtm_rmrks )
{

  EXEC SQL
    INSERT INTO FLS_FO_LODM_STTS
      (
        FLS_CLM_MTCH_ACCNT,
        FLS_XCHNG_CD,
        FLS_PRDCT_TYP,
        FLS_INDSTK,
        FLS_UNDRLYNG,
        FLS_EXPRY_DT,
        FLS_EXER_TYP,
        FLS_OPT_TYP,
        FLS_STRK_PRC,
        FLS_TM_STMP,
        FLS_REMARKS
      )
    VALUES
		  (
        :c_match_acc_no,
        :ptr_st_cntrct->c_xchng_cd,
        :ptr_st_cntrct->c_prd_typ,
        :ptr_st_cntrct->c_ctgry_indstk,
        :ptr_st_cntrct->c_undrlyng,
        to_date(:ptr_st_cntrct->c_expry_dt,'DD-Mon-YYYY'),
        :ptr_st_cntrct->c_exrc_typ,
        :ptr_st_cntrct->c_opt_typ,
        :ptr_st_cntrct->l_strike_prc,
        sysdate,
        :c_imtm_rmrks
      );

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31240",SQLMSG,c_err_msg);
    return FAILURE;
  }
      return SUCCESS;
}

/********** ver 5.2 ends************************/

/********** Ver 5.0 Starts **********/

int fn_chk_nrml_mrgn (char *c_ServiceName,
                     struct vw_orderbook st_first_ordbk,
                     struct vw_orderbook st_next_ordbk,
                     double *d_total_diff,
                     double *d_total_pnl,
                     char c_rqst_typ,   
                     char *c_err_msg
                    )
{

  int i_returncode;
  int i_pos_avl = 0;

  double d_pl_amt;
  double d_diff_UTM;
  double d_diff_UOM;
  double d_diff_AMV;
  double d_total_diff_UTM = 0.0;
  double d_total_diff_UOM = 0.0;
  double d_total_diff_AMV = 0.0;
  double d_UTM_amt        = 0.0;
  double d_balance_amt    = 0.0;
  double d_bal_to_apply   = 0.0;
  double d_cntrct_pl      = 0.0;
  double d_qty_pnl        = 0.0;      
  double d_first_ltp      = 0.0;
  double d_frst_ltp       = 0.0;
  double d_next_ltp       = 0.0;
  double d_nxt_ltp        = 0.0;
  double d_org_opn_val    = 0.0;
  double d_mtm_opn_val    = 0.0;     
  double d_base_rate      = 0.0;
  double d_mtm_base_rate  = 0.0;    
  double d_opn_val_frst   = 0.0;
  double d_mtmopn_val_frst= 0.0;
  double d_opn_val_scnd   = 0.0;
  double d_mtmopn_val_scnd= 0.0;
  double d_required_amt   = 0.0; 

  long int l_opnpstn_qty  = 0;
  long int l_no_of_lot    = 0;
  long int l_rem_qty      = 0;
  long int l_frst_opn_qty = 0;
  long int l_nxt_opn_qty  = 0;
  long int l_buy_exe_qty_frst  = 0;
  long int l_sell_exe_qty_frst = 0;
  long int l_opn_qty_frst      = 0;
  long int l_buy_exe_qty_scnd  = 0;
  long int l_sell_exe_qty_scnd = 0;
  long int l_opn_qty_scnd      = 0;
  long int l_pending_qty  = 0;
  long int l_pending_qty_ord  = 0;
  long int l_fod_ord_qty = 0;             /*** Ver 5.5 ***/
  long l_sprd_rate = 0; 
  long l_opn_qty = 0;  
  long l_modified_qty = 0;

  char c_narration_id [4];
  char c_dr_without_lmt_flg;
  char c_pos_avl;
  char c_mtm_flag;
  char c_cntrct_tag1;
  char c_cntrct_tag2;
  char c_frst_sgn;
  char c_nxt_sgn;
  char c_frst_opnpstn_flw='\0';
  char c_tmp_rmrks [ 133 ] ;
  char c_reason_cd [ 2000 ];
	char c_ucc_cd[13] = "\0";   /*** Added in VER 6.7 ***/

  double d_required_total_pnl = 0.0;
  double d_required_total_diff = 0.0;

  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;
    char  sql_cln_mtch_accnt[11];
    char  sql_xchng_cd[4];
    char  sql_prd_typ;
    char  sql_cntrct_tag;
    char  sql_undrlyng[7];
    varchar c_exp_dt[LEN_DATE];
    varchar c_trd_dt[12];
    double d_mrgn_blkd = 0.0;
    struct vw_undfut_pos st_undfut_pos_crrnt;
    struct vw_undfut_pos ptr_st_undfut_pos_to_be;
    struct vw_pstn_actn ptr_st_pstn_action;
    struct vw_err_msg ptr_st_err_msg;
  EXEC SQL END DECLARE SECTION;

  strcpy( sql_cln_mtch_accnt,st_first_ordbk.c_cln_mtch_accnt);
  strcpy( sql_xchng_cd,st_first_ordbk.c_xchng_cd);
  strcpy( sql_undrlyng,st_first_ordbk.c_undrlyng);
  sql_prd_typ = st_first_ordbk.c_prd_typ;

  FBFR32 *ptr_fml_ibuf;
  FBFR32 *ptr_fml_obuf;

  MEMSET(st_undfut_pos_crrnt);
  MEMSET(ptr_st_undfut_pos_to_be);
  MEMSET(ptr_st_pstn_action);

  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog ( c_ServiceName, "Building new underlying position" );
    fn_userlog ( c_ServiceName, "st_first_ordbk.c_cln_mtch_accnt        |%s|",st_first_ordbk.c_cln_mtch_accnt );
    fn_userlog ( c_ServiceName, "st_first_ordbk.c_xchng_cd              |%s|",st_first_ordbk.c_xchng_cd );
    fn_userlog ( c_ServiceName, "st_first_ordbk.c_undrlyng              |%s|",st_first_ordbk.c_undrlyng );
    fn_userlog ( c_ServiceName, "st_first_ordbk.c_expry_dt              |%s|",st_first_ordbk.c_expry_dt );
    fn_userlog ( c_ServiceName, "st_first_ordbk.c_prd_typ               |%c|",st_first_ordbk.c_prd_typ );
    fn_userlog ( c_ServiceName, "st_first_ordbk.c_ordr_flw              |%c|",st_first_ordbk.c_ordr_flw );
    fn_userlog ( c_ServiceName, "st_first_ordbk.l_ord_tot_qty           |%ld|",st_first_ordbk.l_ord_tot_qty );
    fn_userlog ( c_ServiceName, "st_next_ordbk.c_cln_mtch_accnt         |%s|",st_next_ordbk.c_cln_mtch_accnt );
    fn_userlog ( c_ServiceName, "st_next_ordbk.c_xchng_cd               |%s|",st_next_ordbk.c_xchng_cd );
    fn_userlog ( c_ServiceName, "st_next_ordbk.c_undrlyng               |%s|",st_next_ordbk.c_undrlyng );
    fn_userlog ( c_ServiceName, "st_next_ordbk.c_expry_dt               |%s|",st_next_ordbk.c_expry_dt );
    fn_userlog ( c_ServiceName, "st_next_ordbk.c_prd_typ                |%c|",st_next_ordbk.c_prd_typ );
    fn_userlog ( c_ServiceName, "st_next_ordbk.c_exrc_typ               |%c|",st_next_ordbk.c_exrc_typ );
  }

  EXEC SQL
      SELECT FFP_OPNPSTN_QTY,
             FFP_OPNPSTN_VAL,
             FFP_OPNPSTN_FLW,
             DECODE(:st_first_ordbk.c_ordr_flw,'B',GREATEST(ABS(FFP_IBUY_QTY),ABS(FFP_EXBUY_QTY)),GREATEST(ABS(FFP_ISELL_QTY),ABS(FFP_EXSELL_QTY))),
             FFP_MTM_OPN_VAL 
      INTO  :l_opnpstn_qty,
            :d_org_opn_val,
            :c_frst_opnpstn_flw,
            :l_pending_qty,
            :d_mtm_opn_val    
      FROM FFP_FO_FUTURES_PSTN
      WHERE FFP_CLM_MTCH_ACCNT    = :st_first_ordbk.c_cln_mtch_accnt
      AND     FFP_XCHNG_CD        = :st_first_ordbk.c_xchng_cd
      AND     FFP_PRDCT_TYP       = :st_first_ordbk.c_prd_typ
      AND     FFP_UNDRLYNG        = :st_first_ordbk.c_undrlyng
      AND     FFP_EXPRY_DT        = :st_first_ordbk.c_expry_dt
      AND     FFP_EXER_TYP        = :st_first_ordbk.c_exrc_typ;

      if(SQLCODE  !=  0 )
      {
        fn_errlog ( c_ServiceName, "S32185", SQLMSG, c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        return FAILURE;
      }


      if(DEBUG_MSG_LVL_5)
      {
        fn_userlog ( c_ServiceName, "l_opnpstn_qty - :%ld:",l_opnpstn_qty);
        fn_userlog ( c_ServiceName, "l_pending_qty - :%ld:",l_pending_qty);
        fn_userlog ( c_ServiceName, "st_first_ordbk.l_ord_tot_qty - :%ld:",st_first_ordbk.l_ord_tot_qty);
        fn_userlog ( c_ServiceName, "c_frst_opnpstn_flw - :%c:",c_frst_opnpstn_flw);
      }
        EXEC SQL
        SELECT NVL( SUM( FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY-FOD_EXPRD_QTY),0 )
        INTO   :l_pending_qty_ord
        FROM   FOD_FO_ORDR_DTLS
        WHERE  FOD_CLM_MTCH_ACCNT     = :st_first_ordbk.c_cln_mtch_accnt
               AND FOD_XCHNG_CD       = :st_first_ordbk.c_xchng_cd
               AND FOD_PRDCT_TYP      = :st_first_ordbk.c_prd_typ
               AND FOD_UNDRLYNG       = :st_first_ordbk.c_undrlyng
               AND FOD_EXPRY_DT       = :st_first_ordbk.c_expry_dt
               AND FOD_EXER_TYP       = :st_first_ordbk.c_exrc_typ
               AND FOD_ORDR_FLW       = :st_first_ordbk.c_ordr_flw
               AND FOD_SPL_FLAG       = 'O'
               AND FOD_ORDR_STTS IN ('R','P','O','Q');

      if(SQLCODE  !=  0 && SQLCODE  != NO_DATA_FOUND)
      {
        fn_errlog ( c_ServiceName, "S32190", SQLMSG, c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        return FAILURE;
      }

			if(  c_rqst_typ != EXG_RESPONSE )
			{
      if( st_first_ordbk.c_spl_flg == ROLLOVER_WITH_SPREAD  && c_rqst_typ == MODIFY )
      {

      l_pending_qty = l_pending_qty + l_pending_qty_ord;
 

        if( st_first_ordbk.c_ordr_flw == 'B' )
        {
          l_opn_qty = l_opnpstn_qty * (-1);
        }
        else
        {
          l_opn_qty = l_opnpstn_qty;
        }

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"l_opn_qty :%ld:",l_opn_qty);
          fn_userlog(c_ServiceName,"First_ord_ref :%s:",st_first_ordbk.c_ordr_rfrnc);     /*** Ver 5.5 ***/
        }
      
        /*** Ver 5.5 Starts ***/
        EXEC SQL
          SELECT  NVL(FOD_ORDR_TOT_QTY,0 )
          INTO  :l_fod_ord_qty
          FROM  FOD_FO_ORDR_DTLS
          WHERE FOD_CLM_MTCH_ACCNT  = :st_first_ordbk.c_cln_mtch_accnt
          AND FOD_ORDR_RFRNC    = :st_first_ordbk.c_ordr_rfrnc
          AND FOD_XCHNG_CD    = :st_first_ordbk.c_xchng_cd
          AND FOD_PRDCT_TYP   = :st_first_ordbk.c_prd_typ
          AND FOD_UNDRLYNG    = :st_first_ordbk.c_undrlyng
          AND FOD_EXPRY_DT    = :st_first_ordbk.c_expry_dt
          AND FOD_EXER_TYP    = :st_first_ordbk.c_exrc_typ
          AND FOD_ORDR_FLW    = :st_first_ordbk.c_ordr_flw
          AND FOD_SPL_FLAG    = 'O';

        if(SQLCODE  !=  0 && SQLCODE  != NO_DATA_FOUND)
        {
          fn_errlog ( c_ServiceName, "S32195", SQLMSG, c_err_msg );
          EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE :sys_cursor;
          return FAILURE;
        }
        fn_userlog(c_ServiceName,"l_fod_ord_qty:%ld: l_pending_qty_ord:%ld: st_first_ordbk.l_ord_tot_qty:%ld:",l_fod_ord_qty,l_pending_qty_ord,st_first_ordbk.l_ord_tot_qty);
        l_modified_qty = l_fod_ord_qty - st_first_ordbk.l_ord_tot_qty;
        fn_userlog(c_ServiceName,"l_modified_qty:%ld:",l_modified_qty);
        /*** Ver 5.5 Ends ***/
        /* l_modified_qty = l_pending_qty_ord - st_first_ordbk.l_ord_tot_qty ;  	* Ver 5.5 */

        if( l_modified_qty < 0 )
        {
          l_modified_qty = l_modified_qty * (-1);

          if(DEBUG_MSG_LVL_3)
          {
            fn_userlog(c_ServiceName,"l_modified_qty :%ld:",l_modified_qty);
          }

          if( l_opn_qty <  ( l_modified_qty  + l_pending_qty ))
          {
  
            fn_userlog ( c_ServiceName, "Rollover quantity greater than open position quantity.");
            strcpy(c_err_msg,"Rollover quantity can not be greater than open position quantity.");
            return -1;
          }

       }
      }
      else if ( labs(l_opnpstn_qty) < ( labs(st_first_ordbk.l_ord_tot_qty) + labs(l_pending_qty) + labs(l_pending_qty_ord) ))
      {
        fn_userlog ( c_ServiceName, "Rollover quantity greater than open position quantity.");
        strcpy(c_err_msg,"Rollover quantity can not be greater than open position quantity.");
        return -1;
      }
			}

    EXEC SQL
     SELECT  FTQ_LST_TRD_PRC,
             FTQ_CNTRCT_TAG                
        INTO    :d_first_ltp,
                :c_cntrct_tag1            
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :st_first_ordbk.c_xchng_cd
        AND     FTQ_PRDCT_TYP = :st_first_ordbk.c_prd_typ
        AND     FTQ_UNDRLYNG  = :st_first_ordbk.c_undrlyng
        AND     FTQ_EXPRY_DT  = :st_first_ordbk.c_expry_dt
        AND     FTQ_EXER_TYP  = :st_first_ordbk.c_exrc_typ;

      if(SQLCODE  !=  0 )
      {
        fn_errlog ( c_ServiceName, "S32200", SQLMSG, c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        return FAILURE;
      }

    EXEC SQL
     SELECT  FTQ_LST_TRD_PRC,
             FTQ_CNTRCT_TAG              
        INTO    :d_next_ltp,
                :c_cntrct_tag2          
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :st_next_ordbk.c_xchng_cd
        AND     FTQ_PRDCT_TYP = :st_next_ordbk.c_prd_typ
        AND     FTQ_UNDRLYNG  = :st_next_ordbk.c_undrlyng
        AND     FTQ_EXPRY_DT  = :st_next_ordbk.c_expry_dt
        AND     FTQ_EXER_TYP  = :st_next_ordbk.c_exrc_typ;

      if(SQLCODE  !=  0 )
      {
        fn_errlog ( c_ServiceName, "S32205", SQLMSG, c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        return FAILURE;
      }

      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog ( c_ServiceName, " d_first_ltp                   |%lf|",d_first_ltp);
        fn_userlog ( c_ServiceName, " d_next_ltp                    |%lf|",d_next_ltp);
        fn_userlog ( c_ServiceName, " st_first_ordbk.l_ord_tot_qty  |%ld|",st_first_ordbk.l_ord_tot_qty);
        fn_userlog ( c_ServiceName, "c_cntrct_tag1 |%c|",c_cntrct_tag1 ); /*** Added in Ver 2.3 ***/
        fn_userlog ( c_ServiceName, "c_cntrct_tag2 |%c|",c_cntrct_tag2 ); /*** Added in Ver 2.3 ***/
      }

      if(st_first_ordbk.c_spl_flg == ROLLOVER_WITH_SPREAD )
      {
        if(st_first_ordbk.c_slm_flg == 'L')
        {
          l_sprd_rate = st_first_ordbk.l_ord_lmt_rt;

          if(l_sprd_rate >= 0)
          {
            st_first_ordbk.l_ord_lmt_rt = (long)d_first_ltp; 
            st_next_ordbk.l_ord_lmt_rt = (long)d_first_ltp + l_sprd_rate;
          }
          else 
          {
            st_first_ordbk.l_ord_lmt_rt = (long)d_first_ltp;	

						if( d_first_ltp > d_next_ltp )
						{
            	st_next_ordbk.l_ord_lmt_rt = (long)d_first_ltp;	
						}
						else
						{
							st_next_ordbk.l_ord_lmt_rt = (long)d_next_ltp;
						}
          }
        }
        else
        {
          fn_errlog ( c_ServiceName, "S32210", "Only Limit Order is Allowed.", c_err_msg );
          EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE :sys_cursor;
          return FAILURE;
        }

        if( DEBUG_MSG_LVL_3 )
        {
          fn_userlog ( c_ServiceName, "st_first_ordbk.c_slm_flg |%c|",st_first_ordbk.c_slm_flg);
          fn_userlog ( c_ServiceName, "st_first_ordbk.l_ord_lmt_rt |%ld|",st_first_ordbk.l_ord_lmt_rt);
          fn_userlog ( c_ServiceName, "st_next_ordbk.l_ord_lmt_rt  |%ld|",st_next_ordbk.l_ord_lmt_rt);
          fn_userlog ( c_ServiceName, "l_sprd_rate  |%ld|",l_sprd_rate);
        }
      }
      else
      {
        if (st_first_ordbk.c_slm_flg == 'M')
        {
          st_first_ordbk.l_ord_lmt_rt = d_first_ltp;
        }

        if (st_next_ordbk.c_slm_flg == 'M')
        {
          st_next_ordbk.l_ord_lmt_rt = d_next_ltp;
        }
      }

      if( l_opnpstn_qty  > 0 )
      {
         d_cntrct_pl = ( d_first_ltp * (double) l_opnpstn_qty ) - d_mtm_opn_val;  
      }
      else if ( l_opnpstn_qty < 0 )
      {
         d_cntrct_pl = fabs(d_mtm_opn_val) - (d_first_ltp * (double)abs(l_opnpstn_qty)); 
      }

      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog(c_ServiceName,"Contract Level PNL  |%lf|",d_cntrct_pl);
        fn_userlog(c_ServiceName,"Exchange code is |%s|",ptr_st_pstn_action.c_xchng_cd);
      }
    /***  Added in Ver 2.0 Calculating PNL/Quantity and then multiplying by total rollover qty for notional PNL  ***/

    d_qty_pnl   = d_cntrct_pl / (double)(abs(l_opnpstn_qty));

    d_cntrct_pl = d_qty_pnl * st_first_ordbk.l_ord_tot_qty;

    if( DEBUG_MSG_LVL_3 )
    {
       fn_userlog(c_ServiceName,"Quantity Level PNL  |%lf|",d_qty_pnl);   
       fn_userlog(c_ServiceName,"Order Level PNL  |%lf|",d_cntrct_pl);
    }

    if ( c_frst_opnpstn_flw == 'S' )
    {
      l_rem_qty = l_opnpstn_qty + st_first_ordbk.l_ord_tot_qty;
    }
    else
    {
      l_rem_qty   = l_opnpstn_qty - st_first_ordbk.l_ord_tot_qty;
    }

    d_base_rate = d_org_opn_val / (double)l_opnpstn_qty;
    d_mtm_base_rate = d_mtm_opn_val / (double)l_opnpstn_qty;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"l_rem_qty is :%ld:",l_rem_qty);
      fn_userlog(c_ServiceName,"d_base_rate d_base_rate is :%lf:",d_base_rate);
      fn_userlog(c_ServiceName,"d_mtm_base_rate d_mtm_base_rate is :%lf:",d_mtm_base_rate);
    }

    EXEC SQL
      UPDATE  FFP_FO_FUTURES_PSTN
      SET FFP_BUY_EXCTD_QTY = DECODE(:st_first_ordbk.c_ordr_flw,'B',FFP_BUY_EXCTD_QTY + :st_first_ordbk.l_ord_tot_qty,FFP_BUY_EXCTD_QTY + 0),
          FFP_SELL_EXCTD_QTY= DECODE(:st_first_ordbk.c_ordr_flw,'S',FFP_SELL_EXCTD_QTY + :st_first_ordbk.l_ord_tot_qty * -1 ,FFP_SELL_EXCTD_QTY + 0),
      FFP_OPNPSTN_QTY = FFP_OPNPSTN_QTY + DECODE(:st_first_ordbk.c_ordr_flw,'S',(:st_first_ordbk.l_ord_tot_qty* -1),:st_first_ordbk.l_ord_tot_qty),
      FFP_OPNPSTN_VAL = :l_rem_qty * :d_base_rate,
      FFP_MTM_OPN_VAL = :l_rem_qty * :d_mtm_base_rate  
      WHERE FFP_CLM_MTCH_ACCNT    = :st_first_ordbk.c_cln_mtch_accnt
      AND     FFP_XCHNG_CD        = :st_first_ordbk.c_xchng_cd
      AND     FFP_PRDCT_TYP       = :st_first_ordbk.c_prd_typ
      AND     FFP_UNDRLYNG        = :st_first_ordbk.c_undrlyng
      AND     FFP_EXPRY_DT        = :st_first_ordbk.c_expry_dt
      AND     FFP_EXER_TYP        = :st_first_ordbk.c_exrc_typ;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S32215",FMLMSG,c_err_msg);
        return -1;
      }

    EXEC SQL
      SELECT 1
      INTO  :i_pos_avl
      FROM  FFP_FO_FUTURES_PSTN
      WHERE FFP_CLM_MTCH_ACCNT    = :st_next_ordbk.c_cln_mtch_accnt
      AND     FFP_XCHNG_CD        = :st_next_ordbk.c_xchng_cd
      AND     FFP_PRDCT_TYP       = :st_next_ordbk.c_prd_typ
      AND     FFP_UNDRLYNG        = :st_next_ordbk.c_undrlyng
      AND     FFP_EXPRY_DT        = :st_next_ordbk.c_expry_dt
      AND     FFP_EXER_TYP        = :st_next_ordbk.c_exrc_typ;

      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog( c_ServiceName, "S32220",SQLMSG,c_err_msg);
        return -1;
      }

    if ( i_pos_avl == 1 )
    {

    EXEC SQL
      UPDATE  FFP_FO_FUTURES_PSTN
      SET   FFP_BUY_EXCTD_QTY     = DECODE (:st_next_ordbk.c_ordr_flw ,'B',FFP_BUY_EXCTD_QTY + :st_next_ordbk.l_ord_tot_qty,
                                            FFP_BUY_EXCTD_QTY + 0),
            FFP_SELL_EXCTD_QTY    = DECODE (:st_next_ordbk.c_ordr_flw ,'S',FFP_SELL_EXCTD_QTY + :st_next_ordbk.l_ord_tot_qty,
                                            FFP_SELL_EXCTD_QTY + 0),
            FFP_OPNPSTN_QTY       = FFP_OPNPSTN_QTY + DECODE(:st_next_ordbk.c_ordr_flw,'S',(:st_next_ordbk.l_ord_tot_qty * -1),:st_next_ordbk.l_ord_tot_qty),
            FFP_OPNPSTN_VAL       = FFP_OPNPSTN_VAL + (:st_next_ordbk.l_ord_lmt_rt * DECODE (:st_next_ordbk.c_ordr_flw ,'S',:st_next_ordbk.l_ord_tot_qty * (-1),:st_next_ordbk.l_ord_tot_qty)),
            FFP_MTM_OPN_VAL       = FFP_MTM_OPN_VAL + (:st_next_ordbk.l_ord_lmt_rt * DECODE (:st_next_ordbk.c_ordr_flw ,'S',:st_next_ordbk.l_ord_tot_qty * (-1),:st_next_ordbk.l_ord_tot_qty))
      WHERE FFP_CLM_MTCH_ACCNT    = :st_next_ordbk.c_cln_mtch_accnt
      AND     FFP_XCHNG_CD        = :st_next_ordbk.c_xchng_cd
      AND     FFP_PRDCT_TYP       = :st_next_ordbk.c_prd_typ
      AND     FFP_UNDRLYNG        = :st_next_ordbk.c_undrlyng
      AND     FFP_EXPRY_DT        = :st_next_ordbk.c_expry_dt
      AND     FFP_EXER_TYP        = :st_next_ordbk.c_exrc_typ;

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S32225", SQLMSG, c_err_msg );
        return -1;
      }

    }
    else
    {


    EXEC SQL
      INSERT INTO FFP_FO_FUTURES_PSTN
      (
        FFP_CLM_MTCH_ACCNT,
        FFP_XCHNG_CD,
        FFP_PRDCT_TYP,
        FFP_INDSTK,
        FFP_UNDRLYNG,
        FFP_EXPRY_DT,
        FFP_EXER_TYP,
        FFP_CNTRCT_TAG,
        FFP_BUY_EXCTD_QTY,
        FFP_SELL_EXCTD_QTY,
        FFP_OPNPSTN_FLW,
        FFP_OPNPSTN_QTY,
        FFP_OPNPSTN_VAL,
        FFP_MTM_OPN_VAL
      )
      VALUES
      (
        :st_next_ordbk.c_cln_mtch_accnt,
        :st_next_ordbk.c_xchng_cd,
        :st_next_ordbk.c_prd_typ,
        :st_next_ordbk.c_ctgry_indstk,
        :st_next_ordbk.c_undrlyng,
        to_date(:st_next_ordbk.c_expry_dt,'DD-Mon-YYYY'),
        :st_next_ordbk.c_exrc_typ,
        :c_cntrct_tag2,
        DECODE (:st_next_ordbk.c_ordr_flw ,'B',:st_next_ordbk.l_ord_tot_qty, 0),
        DECODE (:st_next_ordbk.c_ordr_flw ,'S',:st_next_ordbk.l_ord_tot_qty * (-1), 0),
        :st_next_ordbk.c_ordr_flw,
        DECODE (:st_next_ordbk.c_ordr_flw ,'S',(:st_next_ordbk.l_ord_tot_qty * -1 ),:st_next_ordbk.l_ord_tot_qty),
        DECODE (:st_next_ordbk.c_ordr_flw ,'S',(:st_next_ordbk.l_ord_lmt_rt * :st_next_ordbk.l_ord_tot_qty * -1),:st_next_ordbk.l_ord_lmt_rt * :st_next_ordbk.l_ord_tot_qty),
        DECODE(:st_next_ordbk.c_ordr_flw ,'S',(:st_next_ordbk.l_ord_lmt_rt * :st_next_ordbk.l_ord_tot_qty * -1), :st_next_ordbk.l_ord_lmt_rt * :st_next_ordbk.l_ord_tot_qty)
      );

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S32230", SQLMSG, c_err_msg );
        return -1;
      }
    }

    EXEC SQL
      SELECT SUM(FFP_BUY_EXCTD_QTY),
             SUM(FFP_SELL_EXCTD_QTY),
             SUM(FFP_OPNPSTN_QTY),
             SUM(FFP_OPNPSTN_VAL),
             SUM(FFP_MTM_OPN_VAL)
      INTO   :l_buy_exe_qty_frst,
             :l_sell_exe_qty_frst,
             :l_opn_qty_frst,
             :d_opn_val_frst,
             :d_mtmopn_val_frst
      FROM   FFP_FO_FUTURES_PSTN
      WHERE FFP_CLM_MTCH_ACCNT    = :st_first_ordbk.c_cln_mtch_accnt
      AND     FFP_XCHNG_CD        = :st_first_ordbk.c_xchng_cd
      AND     FFP_PRDCT_TYP       = :st_first_ordbk.c_prd_typ
      AND     FFP_UNDRLYNG        = :st_first_ordbk.c_undrlyng
      AND     FFP_CNTRCT_TAG      = :c_cntrct_tag1
      AND     FFP_EXER_TYP        = :st_first_ordbk.c_exrc_typ;

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S32235", SQLMSG, c_err_msg );
      return -1;
    }

    EXEC SQL
      SELECT SUM(FFP_BUY_EXCTD_QTY),
             SUM(FFP_SELL_EXCTD_QTY),
             SUM(FFP_OPNPSTN_QTY),
             SUM(FFP_OPNPSTN_VAL),
             SUM(FFP_MTM_OPN_VAL)
      INTO   :l_buy_exe_qty_scnd,
             :l_sell_exe_qty_scnd,
             :l_opn_qty_scnd,
             :d_opn_val_scnd,
             :d_mtmopn_val_scnd
      FROM   FFP_FO_FUTURES_PSTN
      WHERE FFP_CLM_MTCH_ACCNT    = :st_next_ordbk.c_cln_mtch_accnt
      AND     FFP_XCHNG_CD        = :st_next_ordbk.c_xchng_cd
      AND     FFP_PRDCT_TYP       = :st_next_ordbk.c_prd_typ
      AND     FFP_UNDRLYNG        = :st_next_ordbk.c_undrlyng
      AND     FFP_CNTRCT_TAG      = :c_cntrct_tag2
      AND     FFP_EXER_TYP        = :st_next_ordbk.c_exrc_typ;

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S32240", SQLMSG, c_err_msg );
      return -1;
    }

    EXEC SQL
      UPDATE  FUP_FUT_UNDRLYNG_PSTN
      SET FUP_UBUY_EXCTD_QTY  = :l_buy_exe_qty_frst,
          FUP_USELL_EXCTD_QTY = :l_sell_exe_qty_frst,
          FUP_UOPNPSTN_QTY    = :l_opn_qty_frst,
          FUP_UOPNPSTN_VAL    = :d_opn_val_frst,
          FUP_UMTM_OPN_VAL    = :d_mtmopn_val_frst
      WHERE FUP_CLM_MTCH_ACCNT    = :st_first_ordbk.c_cln_mtch_accnt
      AND     FUP_XCHNG_CD        = :st_first_ordbk.c_xchng_cd
      AND     FUP_PRDCT_TYP       = :st_first_ordbk.c_prd_typ
      AND     FUP_UNDRLYNG        = :st_first_ordbk.c_undrlyng
      AND     FUP_CNTRCT_TAG      = :c_cntrct_tag1;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S32245",SQLMSG,c_err_msg);
        return -1;
      }

    EXEC SQL
      SELECT 1
      INTO  :i_pos_avl
      FROM  FUP_FUT_UNDRLYNG_PSTN
      WHERE FUP_CLM_MTCH_ACCNT    = :st_next_ordbk.c_cln_mtch_accnt
      AND     FUP_XCHNG_CD        = :st_next_ordbk.c_xchng_cd
      AND     FUP_PRDCT_TYP       = :st_next_ordbk.c_prd_typ
      AND     FUP_UNDRLYNG        = :st_next_ordbk.c_undrlyng
      AND     FUP_CNTRCT_TAG      = :c_cntrct_tag2;

      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog( c_ServiceName, "S32250",FMLMSG,c_err_msg);
        return -1;
      }

    if ( i_pos_avl == 1 )
    {

    EXEC SQL
      UPDATE  FUP_FUT_UNDRLYNG_PSTN
      SET   FUP_UBUY_EXCTD_QTY     = :l_buy_exe_qty_scnd,
            FUP_USELL_EXCTD_QTY    = :l_sell_exe_qty_scnd,
            FUP_UOPNPSTN_QTY       = :l_opn_qty_scnd,
            FUP_UOPNPSTN_VAL       = :d_opn_val_scnd,
            FUP_UMTM_OPN_VAL       = :d_mtmopn_val_scnd
      WHERE FUP_CLM_MTCH_ACCNT    = :st_next_ordbk.c_cln_mtch_accnt
      AND     FUP_XCHNG_CD        = :st_next_ordbk.c_xchng_cd
      AND     FUP_PRDCT_TYP       = :st_next_ordbk.c_prd_typ
      AND     FUP_UNDRLYNG        = :st_next_ordbk.c_undrlyng
      AND     FUP_CNTRCT_TAG      = :c_cntrct_tag2;

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S32255", SQLMSG, c_err_msg );
        return -1;
      }

    }
    else
    {
      if(DEBUG_MSG_LVL_5)
      {
        fn_userlog(c_ServiceName,"ROLLOVER st_next_ordbk.c_cln_mtch_accnt Is :%s:",st_next_ordbk.c_cln_mtch_accnt);
        fn_userlog(c_ServiceName,"ROLLOVER  st_next_ordbk.c_xchng_cd Is :%s:",st_next_ordbk.c_xchng_cd);
        fn_userlog(c_ServiceName,"ROLLOVER st_next_ordbk.c_prd_typ Is :%c:",st_next_ordbk.c_prd_typ);
        fn_userlog(c_ServiceName,"ROLLOVER st_next_ordbk.c_ctgry_indstk Is :%c:",st_next_ordbk.c_ctgry_indstk);
        fn_userlog(c_ServiceName,"ROLLOVER st_next_ordbk.c_undrlyng Is :%s:",st_next_ordbk.c_undrlyng);
        fn_userlog(c_ServiceName,"ROLLOVER st_next_ordbk.c_ordr_flw Is :%c:",st_next_ordbk.c_ordr_flw);
        fn_userlog(c_ServiceName,"ROLLOVER st_next_ordbk.l_ord_tot_qty Is :%ld:",st_next_ordbk.l_ord_tot_qty);
      }

			/*** Added in VER 6.7 : Real time margin reporting ( Fetching UCC code ) ***/

			MEMSET(c_ucc_cd);

      EXEC SQL
      SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
      INTO  :c_ucc_cd
      FROM  CLM_CLNT_MSTR
      WHERE CLM_MTCH_ACCNT = :st_next_ordbk.c_cln_mtch_accnt;

      if ( SQLCODE != 0 )
      {
        fn_userlog(c_ServiceName,"fn_chk_nrml_mrgn : Error while fetching UCC code for :%s:", st_next_ordbk.c_cln_mtch_accnt);
        fn_errlog( c_ServiceName, "S32260",FMLMSG,c_err_msg);
        return FAILURE;
      }

      rtrim(c_ucc_cd);

      if(DEBUG_MSG_LVL_3)
        fn_userlog(c_ServiceName,"VER 6.7 -- fn_chk_nrml_mrgn : MAtch ID :%s: have ucc code :%s:", st_next_ordbk.c_cln_mtch_accnt, c_ucc_cd);

      /*** VER 6.7 ends here ***/

    EXEC SQL
      INSERT INTO FUP_FUT_UNDRLYNG_PSTN
      (
        FUP_CLM_MTCH_ACCNT,
        FUP_XCHNG_CD,
        FUP_PRDCT_TYP,
        FUP_INDSTK,
        FUP_UNDRLYNG,
        FUP_UBUY_EXCTD_QTY,
        FUP_USELL_EXCTD_QTY,
        FUP_UOPNPSTN_QTY,
        FUP_UOPNPSTN_FLW,
        FUP_UOPNPSTN_VAL,
        FUP_UMTM_OPN_VAL,
        FUP_CNTRCT_TAG,
				FUP_UCC_CD				/*** Added in VER 6.7 ***/
      )
      VALUES
      (
        :st_next_ordbk.c_cln_mtch_accnt,
        :st_next_ordbk.c_xchng_cd,
        :st_next_ordbk.c_prd_typ,
        :st_next_ordbk.c_ctgry_indstk,
        :st_next_ordbk.c_undrlyng,
        :l_buy_exe_qty_scnd,
        :l_sell_exe_qty_scnd,
        :l_opn_qty_scnd,
        :st_next_ordbk.c_ordr_flw,
        :d_opn_val_scnd,
        :d_mtmopn_val_scnd,
        :c_cntrct_tag2,
				:c_ucc_cd			/*** Added in VER 6.7 ***/
      );

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S32265", SQLMSG, c_err_msg );
        return -1;
      }
    }

    if ( c_cntrct_tag1  ==  c_cntrct_tag2 )
    {
      EXEC SQL
        SELECT  FFP_OPNPSTN_QTY
        INTO    :l_frst_opn_qty
        FROM    FFP_FO_FUTURES_PSTN
        WHERE   FFP_CLM_MTCH_ACCNT  = :st_first_ordbk.c_cln_mtch_accnt
        AND     FFP_XCHNG_CD        = :st_first_ordbk.c_xchng_cd
        AND     FFP_PRDCT_TYP       = :st_first_ordbk.c_prd_typ
        AND     FFP_UNDRLYNG        = :st_first_ordbk.c_undrlyng
        AND     FFP_EXPRY_DT        = :st_first_ordbk.c_expry_dt
        AND     FFP_CNTRCT_TAG      = :c_cntrct_tag1;

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S32270", SQLMSG, c_err_msg );
        return -1;
      }

      if ( l_frst_opn_qty > 0 )
      {
        c_frst_sgn  = '+';
      }
      else
      {
        c_frst_sgn  = '-';
      }

      EXEC SQL
        SELECT  FFP_OPNPSTN_QTY
        INTO    :l_nxt_opn_qty
        FROM    FFP_FO_FUTURES_PSTN
        WHERE   FFP_CLM_MTCH_ACCNT  = :st_next_ordbk.c_cln_mtch_accnt
        AND     FFP_XCHNG_CD        = :st_next_ordbk.c_xchng_cd
        AND     FFP_PRDCT_TYP       = :st_next_ordbk.c_prd_typ
        AND     FFP_UNDRLYNG        = :st_next_ordbk.c_undrlyng
        AND     FFP_EXPRY_DT        = :st_next_ordbk.c_expry_dt
        AND     FFP_CNTRCT_TAG      = :c_cntrct_tag2;

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S32275", SQLMSG, c_err_msg );
        return -1;
      }

      if ( l_nxt_opn_qty > 0 )
      {
        c_nxt_sgn = '+';
      }
      else
      {
        c_nxt_sgn = '-';
      }

    }

    EXEC SQL ALLOCATE :sys_cursor;

    EXEC SQL EXECUTE
      BEGIN
      OPEN :sys_cursor FOR
    SELECT  FUP_CLM_MTCH_ACCNT,
            FUP_XCHNG_CD,
            FUP_PRDCT_TYP,
            FUP_INDSTK,
            FUP_UNDRLYNG,
            FUP_CNTRCT_TAG,
            FUP_UIBUY_QTY,
            FUP_UIBUY_VAL,
            FUP_UISELL_QTY,
            FUP_UISELL_VAL,
            FUP_UEXBUY_QTY,
            FUP_UEXBUY_VAL,
            FUP_UEXSELL_QTY,
            FUP_UEXSELL_VAL,
            FUP_UBUY_EXCTD_QTY,
            FUP_USELL_EXCTD_QTY,
            FUP_UOPNPSTN_FLW,
            FUP_UOPNPSTN_QTY,
            FUP_UOPNPSTN_VAL,
            FUP_UMTM_OPN_VAL,
            FUP_ADD_MRGN_VAL,
            FUP_UORDR_MRGN,
            FUP_UEXCTD_MRGN,
            FUP_USPREAD_MRGN,
            FUP_USPREAD_PNL,
            FUP_UTRD_MRGN,
            NVL(FUP_MTM_FLG,'O'),
            NVL(FUP_UMIN_TRD_MRGN,0)
    FROM    FUP_FUT_UNDRLYNG_PSTN
    WHERE FUP_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
    AND   FUP_XCHNG_CD        = :sql_xchng_cd
    AND   FUP_PRDCT_TYP       = :sql_prd_typ
    AND   FUP_UNDRLYNG        = :sql_undrlyng;

  END;
      END-EXEC;

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S32280", SQLMSG, c_err_msg );
    return -1;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "Building new underlying position" );
  }

  c_pos_avl = 'N';

  while ( 1 )
  {
      d_diff_UTM = 0.0;
      d_diff_UOM = 0.0;
      d_diff_AMV = 0.0;
      st_undfut_pos_crrnt.l_ibuy_qty     = 0;
      st_undfut_pos_crrnt.d_ibuy_ord_vl  = 0.0;
      st_undfut_pos_crrnt.l_isell_qty    = 0;
      st_undfut_pos_crrnt.d_isell_ord_vl = 0.0;
      st_undfut_pos_crrnt.l_exbuy_qty    = 0;
      st_undfut_pos_crrnt.d_exbuy_ord_vl = 0.0;
      st_undfut_pos_crrnt.l_exsell_qty   = 0;
      st_undfut_pos_crrnt.d_exsell_ord_vl= 0.0;
      st_undfut_pos_crrnt.d_org_opn_val  = 0.0;
      st_undfut_pos_crrnt.d_mtm_opn_val  = 0.0;
      st_undfut_pos_crrnt.d_add_mrgn_val = 0.0;
      st_undfut_pos_crrnt.d_ordr_mrgn    = 0.0;
      st_undfut_pos_crrnt.d_exctd_mrgn   = 0.0;
      st_undfut_pos_crrnt.d_sprd_mrgn    = 0.0;
      st_undfut_pos_crrnt.d_sprd_pl      = 0.0;
      st_undfut_pos_crrnt.d_trd_mrgn     = 0.0;
      st_undfut_pos_crrnt.d_mm_trd_mrgn  = 0.0;

      EXEC SQL
      FETCH :sys_cursor
      INTO  :st_undfut_pos_crrnt.c_cln_mtch_accnt,
            :st_undfut_pos_crrnt.c_xchng_cd,
            :st_undfut_pos_crrnt.c_prd_typ,
            :st_undfut_pos_crrnt.c_ctgry_indstk,
            :st_undfut_pos_crrnt.c_undrlyng,
            :st_undfut_pos_crrnt.c_cntrct_tag,
            :st_undfut_pos_crrnt.l_ibuy_qty,
            :st_undfut_pos_crrnt.d_ibuy_ord_vl,
            :st_undfut_pos_crrnt.l_isell_qty,
            :st_undfut_pos_crrnt.d_isell_ord_vl,
            :st_undfut_pos_crrnt.l_exbuy_qty,
            :st_undfut_pos_crrnt.d_exbuy_ord_vl,
            :st_undfut_pos_crrnt.l_exsell_qty,
            :st_undfut_pos_crrnt.d_exsell_ord_vl,
            :st_undfut_pos_crrnt.l_buy_exctd_qty,
            :st_undfut_pos_crrnt.l_sell_exctd_qty,
            :st_undfut_pos_crrnt.c_opnpstn_flw,
            :st_undfut_pos_crrnt.l_opnpstn_qty,
            :st_undfut_pos_crrnt.d_org_opn_val,
            :st_undfut_pos_crrnt.d_mtm_opn_val,
            :st_undfut_pos_crrnt.d_add_mrgn_val,
            :st_undfut_pos_crrnt.d_ordr_mrgn,
            :st_undfut_pos_crrnt.d_exctd_mrgn,
            :st_undfut_pos_crrnt.d_sprd_mrgn,
            :st_undfut_pos_crrnt.d_sprd_pl,
            :st_undfut_pos_crrnt.d_trd_mrgn,
            :c_mtm_flag,
            :st_undfut_pos_crrnt.d_mm_trd_mrgn;

      if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          break;
        }

        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        fn_errlog ( c_ServiceName, "S32285", SQLMSG, c_err_msg );
        return FAILURE;
      }

      memcpy(&ptr_st_undfut_pos_to_be,&st_undfut_pos_crrnt,sizeof(st_undfut_pos_crrnt));

      if ( c_frst_sgn != c_nxt_sgn )
      {
        ptr_st_undfut_pos_to_be.l_opn_buyqty  = l_frst_opn_qty;
        ptr_st_undfut_pos_to_be.l_opn_sellqty = l_nxt_opn_qty;
      }

      strcpy( ptr_st_pstn_action.c_cln_mtch_accnt,st_undfut_pos_crrnt.c_cln_mtch_accnt);
      strcpy( ptr_st_pstn_action.c_xchng_cd,st_undfut_pos_crrnt.c_xchng_cd);
      strcpy( ptr_st_pstn_action.c_undrlyng,st_undfut_pos_crrnt.c_undrlyng);
      ptr_st_pstn_action.c_prd_typ  =st_undfut_pos_crrnt.c_prd_typ;
      ptr_st_pstn_action.c_ctgry_indstk  =st_undfut_pos_crrnt.c_ctgry_indstk;
      ptr_st_pstn_action.c_cntrct_tag = st_undfut_pos_crrnt.c_cntrct_tag;

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName," Exchange code is |%s|",ptr_st_pstn_action.c_xchng_cd);
        fn_userlog ( c_ServiceName, "Calcualted underlying level position" );
        fn_userlog(c_ServiceName, "ptr_st_undfut_pos_to_be.c_cln_mtch_accnt|%s|",ptr_st_undfut_pos_to_be.c_cln_mtch_accnt);
        fn_userlog ( c_ServiceName, "ptr_st_undfut_pos_to_be.c_xchng_cd    |%s|",ptr_st_undfut_pos_to_be.c_xchng_cd);
        fn_userlog ( c_ServiceName, "ptr_st_undfut_pos_to_be.c_undrlyng    |%s|",ptr_st_undfut_pos_to_be.c_undrlyng);
        fn_userlog ( c_ServiceName, "ptr_st_undfut_pos_to_be.c_prd_typ      |%s|",ptr_st_undfut_pos_to_be.c_prd_typ);
        fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", ptr_st_undfut_pos_to_be.l_ibuy_qty );
        fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", ptr_st_undfut_pos_to_be.d_ibuy_ord_vl );
        fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", ptr_st_undfut_pos_to_be.l_isell_qty );
        fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", ptr_st_undfut_pos_to_be.d_isell_ord_vl );
        fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", ptr_st_undfut_pos_to_be.l_exbuy_qty );
        fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", ptr_st_undfut_pos_to_be.d_exbuy_ord_vl );
        fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", ptr_st_undfut_pos_to_be.l_exsell_qty );
        fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", ptr_st_undfut_pos_to_be.d_exsell_ord_vl );
        fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", ptr_st_undfut_pos_to_be.l_buy_exctd_qty );
        fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", ptr_st_undfut_pos_to_be.l_sell_exctd_qty );
        fn_userlog ( c_ServiceName, "Open qty          :%ld:", ptr_st_undfut_pos_to_be.l_opnpstn_qty );
        fn_userlog ( c_ServiceName, "Original open val :%lf:", ptr_st_undfut_pos_to_be.d_org_opn_val );
        fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", ptr_st_undfut_pos_to_be.d_mtm_opn_val );
        fn_userlog ( c_ServiceName, "Add Margin val    :%lf:", ptr_st_undfut_pos_to_be.d_add_mrgn_val );
      }

      i_returncode = fn_upd_mrgn_rollover ( c_ServiceName,
                                            &ptr_st_pstn_action,
                                            st_undfut_pos_crrnt,
                                            &ptr_st_undfut_pos_to_be,
                                            &ptr_st_err_msg );

      if ( i_returncode != 0 )
      {
        return FAILURE;
      }

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"2 Exchange code is |%s|",ptr_st_pstn_action.c_xchng_cd);
        fn_userlog(c_ServiceName,"ptr_st_pstn_actn.c_cln_mtch_accnt is |%s|",ptr_st_pstn_action.c_cln_mtch_accnt);
        fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.d_ordr_mrgn :%lf:",st_undfut_pos_crrnt.d_ordr_mrgn );
        fn_userlog ( c_ServiceName, "ptr_st_undfut_pos_to_be.d_ordr_mrgn |%lf|",ptr_st_undfut_pos_to_be.d_ordr_mrgn);
        fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.d_add_mrgn_val |%lf|",st_undfut_pos_crrnt.d_add_mrgn_val);
        fn_userlog ( c_ServiceName, "ptr_st_undfut_pos_to_be.d_add_mrgn_val|%lf|",ptr_st_undfut_pos_to_be.d_add_mrgn_val);
        fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.d_trd_mrgn       |%lf|",st_undfut_pos_crrnt.d_trd_mrgn);
        fn_userlog ( c_ServiceName, "ptr_st_undfut_pos_to_be.d_trd_mrgn  |%lf|",ptr_st_undfut_pos_to_be.d_trd_mrgn);
      }

      d_diff_UOM = st_undfut_pos_crrnt.d_ordr_mrgn - ptr_st_undfut_pos_to_be.d_ordr_mrgn ;

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog ( c_ServiceName, "Difference in UOM :%lf:", d_diff_UOM );
      }

      d_diff_AMV = st_undfut_pos_crrnt.d_add_mrgn_val - ptr_st_undfut_pos_to_be.d_add_mrgn_val;

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog ( c_ServiceName, "Difference in UAMV :%lf:", d_diff_AMV );
      }

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"RollOver st_undfut_pos_crrnt.d_trd_mrgn is :%lf:",st_undfut_pos_crrnt.d_trd_mrgn);
        fn_userlog(c_ServiceName,"RollOver ptr_st_undfut_pos_to_be.d_trd_mrgn is :%lf:",ptr_st_undfut_pos_to_be.d_trd_mrgn);
      }

      d_diff_UTM = st_undfut_pos_crrnt.d_trd_mrgn - ptr_st_undfut_pos_to_be.d_trd_mrgn;

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog ( c_ServiceName, "Difference in UTM :%lf:", d_diff_UTM );
      }

      d_total_diff_UOM = d_diff_UOM + d_total_diff_UOM;
      d_total_diff_AMV = d_diff_AMV + d_total_diff_AMV;

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"RollOver d_total_diff_UTM is :%lf:",d_total_diff_UTM);
        fn_userlog(c_ServiceName,"RollOver d_diff_UTM is :%lf:",d_diff_UTM);
      }

      d_total_diff_UTM = d_total_diff_UTM + d_diff_UTM ;

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"RollOver d_total_diff_UTM is :%lf:",d_total_diff_UTM);
      }
  }/*** END of while loop ***/

    if( DEBUG_MSG_LVL_5 )
    {
       fn_userlog(c_ServiceName,"Order Level PNL  |%lf|",d_cntrct_pl);
       fn_userlog(c_ServiceName," number of lot is |%ld|",l_no_of_lot);
    }

    fn_userlog(c_ServiceName,"Special Flag :%c:",st_first_ordbk.c_spl_flg);
    fn_userlog(c_ServiceName,"d_cntrct_pl :%lf: d_total_diff_UOM :%lf: d_total_diff_AMV :%lf:",d_cntrct_pl,d_total_diff_UOM,d_total_diff_AMV);

    if ( d_cntrct_pl > 0 && st_first_ordbk.c_spl_flg != ROLLOVER_WITH_SPREAD)
    {
      *d_total_diff = d_total_diff_UOM + d_total_diff_AMV + d_total_diff_UTM + d_cntrct_pl;
    }
    else
    {
      *d_total_diff = d_total_diff_UOM + d_total_diff_AMV + d_total_diff_UTM ;
    }

    *d_total_pnl  = d_cntrct_pl;

      if( DEBUG_MSG_LVL_0 )
      {
        fn_userlog(c_ServiceName,"d_total_diff        |%lf|",*d_total_diff);
        fn_userlog(c_ServiceName,"d_total_pnl         |%lf|",*d_total_pnl);
      }

    c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;
    strcpy( c_narration_id , ON_ROLLOVER_ORDER_PLACEMENT);

   if(  c_rqst_typ != EXG_RESPONSE ) /** Suchita **/
   {
    if ( *d_total_diff < 0  )
    {

      i_returncode = fn_upd_limits( c_ServiceName,
                                    &ptr_st_pstn_action,
                                    &ptr_st_err_msg,
                                    c_narration_id,
                                    c_dr_without_lmt_flg,
                                    *d_total_diff,
                                    &d_balance_amt);

      if ( i_returncode != 0 )
      {
        switch ( i_returncode )
        {
          case  INSUFFICIENT_LIMITS :
            fn_userlog(c_ServiceName," Inside INSUFFICIENT_LIMITS for d_total_diff.");
            strcpy(c_err_msg,ptr_st_err_msg.c_err_msg);
            strcpy(c_err_msg,strtok(c_err_msg,"|"));
            d_required_total_diff = atof(strtok(NULL,"|"));
            fn_userlog(c_ServiceName,"d_required_total_diff = %lf",d_required_total_diff);
            strcpy(c_err_msg,strtok(c_err_msg,"<"));
            fn_userlog(c_ServiceName," d_total_pnl = %lf", *d_total_pnl);

            if(*d_total_pnl < 0)
              d_required_amt = d_required_total_diff + ( ((-1) * (*d_total_pnl)) / 100 );
            else
              d_required_amt = d_required_total_diff;


            fn_userlog(c_ServiceName,"d_required_amt = :%lf:",d_required_amt);
            sprintf(c_err_msg,"%s < %0.2lf >",c_err_msg,d_required_amt);
            EXEC SQL CLOSE :sys_cursor;
            tpfree((char *)ptr_fml_obuf);
            tpfree((char *)ptr_fml_ibuf);
            return INSUFFICIENT_LIMITS  ;

         default:

            fn_errlog( c_ServiceName, "S32290",LIBMSG , c_err_msg );
            EXEC SQL CLOSE :sys_cursor;
            tpfree((char *)ptr_fml_obuf);
            tpfree((char *)ptr_fml_ibuf);
            return -1;
        }
      }
    }

    MEMSET( c_narration_id );
    strcpy( c_narration_id , BLOCK_PNL_ON_ROLLOVER_ORDER_PLACEMENT);

    if ( *d_total_pnl < 0  )
    {

      i_returncode = fn_upd_limits( c_ServiceName,
                                    &ptr_st_pstn_action,
                                    &ptr_st_err_msg,
                                    c_narration_id,
                                    c_dr_without_lmt_flg,
                                    *d_total_pnl,
                                    &d_balance_amt);
      if ( i_returncode != 0 )
      {
        switch ( i_returncode )
        {
          case  INSUFFICIENT_LIMITS :
            fn_userlog(c_ServiceName," Inside INSUFFICIENT_LIMITS for d_total_pnl.");
            strcpy(c_err_msg,ptr_st_err_msg.c_err_msg);
            strcpy(c_err_msg,strtok(c_err_msg,"|"));
            d_required_total_pnl = atof(strtok(NULL,"|"));
            d_required_amt = d_required_total_pnl;

            EXEC SQL CLOSE :sys_cursor;
            tpfree((char *)ptr_fml_obuf);
            tpfree((char *)ptr_fml_ibuf);
            return INSUFFICIENT_LIMITS  ;

         default:

            fn_errlog( c_ServiceName, "S32295",LIBMSG , c_err_msg );
            EXEC SQL CLOSE :sys_cursor;
            tpfree((char *)ptr_fml_obuf);
            tpfree((char *)ptr_fml_ibuf);
            return -1;
        }
      }
    }
  }

  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

  return 0;
}

int fn_upd_mrgn_rollover( char *c_ServiceName,
                          struct vw_pstn_actn *ptr_st_pstn_actn,
                          struct vw_undfut_pos st_undfut_pos_crrnt,
                          struct vw_undfut_pos *ptr_st_undfut_pos,
                          struct vw_err_msg *ptr_st_err_msg )
{

  int   i_returncode;

  long int  li_ose_qty  = 0;
  long int  li_ibm_qty  = 0;
  long int  li_ebm_qty  = 0;
  long int  li_obe_qty  = 0;
  long int  li_ism_qty  = 0;
  long int  li_esm_qty  = 0;
  long int  li_opn_qty  = 0;
  long int  li_unmtchd_qty  = 0;
  long int  li_sum_CUOQ = 0;
  long int  li_spd_qty  = 0;

  double d_initial_mrgn = 0;
  double d_spread_mrgn  = 0;
  double d_min_mrgn     = 0;
  double d_min_spread_mrgn  = 0;
  double d_i_exp = 0.0  ;
  double d_e_exp = 0.0  ;
  double d_sum_CUOV     = 0;
  double d_sum_CUOV_cmp = 0;
  double d_diff_AMV     = 0;
  double d_und_opn_val_imtm = 0;

  char  c_err_msg[256];
  char  c_pos_opn;

  struct vw_cntfut_pos st_cntfut_pos;

  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;
    char  sql_cntrct_tag;
    char  sql_cln_mtch_accnt[11];
    char  sql_xchng_cd[4];
    char  sql_prd_typ;
    char  sql_undrlyng[7];
    double d_far_mtm_opn_val;
    long int  li_far_opnpstn_qty;
  EXEC SQL END DECLARE SECTION;

  strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
  strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
  strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);
  sql_prd_typ = ptr_st_pstn_actn->c_prd_typ;
  sql_cntrct_tag = ptr_st_undfut_pos->c_cntrct_tag;

  i_returncode = fn_get_im_prcntg( c_ServiceName,
                                   ptr_st_pstn_actn,
                                   ptr_st_err_msg,
                                   &d_initial_mrgn,
                                   &d_spread_mrgn,
                                   &d_min_mrgn,
                                   &d_min_spread_mrgn,
                                   ptr_st_undfut_pos->c_cntrct_tag );

  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S32300",LIBMSG , c_err_msg );
    return ( -1 );
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, " Initial Margin is        |%lf|",d_initial_mrgn );
    fn_userlog ( c_ServiceName, " Spread Margin Is         |%lf|",d_spread_mrgn );
    fn_userlog ( c_ServiceName, " Minimum Margin Is        |%lf|",d_min_mrgn );
    fn_userlog ( c_ServiceName, " Minimum Spread Margin Is |%lf|",d_min_spread_mrgn );
  }

  if ( ptr_st_undfut_pos->l_ibuy_qty != 0 )
  {

    li_ose_qty = fn_maxl( ( ptr_st_undfut_pos->l_sell_exctd_qty * (-1)) - ptr_st_undfut_pos->l_buy_exctd_qty, 0 );

    li_ibm_qty = fn_maxl( (ptr_st_undfut_pos->l_ibuy_qty - li_ose_qty), 0 );

    ptr_st_undfut_pos->d_ibuy_mrgn = li_ibm_qty * (ptr_st_undfut_pos->d_ibuy_ord_vl / ptr_st_undfut_pos->l_ibuy_qty) *
                                      d_initial_mrgn / 100.0 ;
  }
  else
  {
    ptr_st_undfut_pos->d_ibuy_mrgn = 0;
  }

  if ( ptr_st_undfut_pos->l_exbuy_qty != 0 )
  {

    li_ose_qty = fn_maxl( (ptr_st_undfut_pos->l_sell_exctd_qty * (-1)) - ptr_st_undfut_pos->l_buy_exctd_qty,
                       0 );
    li_ebm_qty = fn_maxl( (ptr_st_undfut_pos->l_exbuy_qty - li_ose_qty), 0 );

    ptr_st_undfut_pos->d_exbuy_mrgn = li_ebm_qty * (ptr_st_undfut_pos->d_exbuy_ord_vl / ptr_st_undfut_pos->l_exbuy_qty) *
                                      d_initial_mrgn / 100.0 ;
  }
  else
  {
    ptr_st_undfut_pos->d_exbuy_mrgn = 0;
  }

  if ( ptr_st_undfut_pos->l_isell_qty != 0 )
  {

    li_obe_qty = fn_maxl( ptr_st_undfut_pos->l_buy_exctd_qty - (ptr_st_undfut_pos->l_sell_exctd_qty * (-1) ), 0 );

    li_ism_qty = fn_maxl( ( ( ptr_st_undfut_pos->l_isell_qty * (-1)) - li_obe_qty), 0 );

    ptr_st_undfut_pos->d_isell_mrgn = li_ism_qty * (ptr_st_undfut_pos->d_isell_ord_vl / ptr_st_undfut_pos->l_isell_qty) *
                                    d_initial_mrgn / 100.0 ;
  }
  else
  {
    ptr_st_undfut_pos->d_isell_mrgn = 0;
  }

  if ( ptr_st_undfut_pos->l_exsell_qty != 0 )
  {

    li_obe_qty = fn_maxl( ptr_st_undfut_pos->l_buy_exctd_qty - ( ptr_st_undfut_pos->l_sell_exctd_qty * (-1) ),0 );

    li_esm_qty = fn_maxl( ( ( ptr_st_undfut_pos->l_exsell_qty * (-1)) - li_obe_qty), 0 );

    ptr_st_undfut_pos->d_exsell_mrgn = li_esm_qty * (ptr_st_undfut_pos->d_exsell_ord_vl / ptr_st_undfut_pos->l_exsell_qty) *
                                      d_initial_mrgn / 100.0 ;
  }
  else
  {
    ptr_st_undfut_pos->d_exsell_mrgn = 0;
  }

  d_i_exp = fn_maxd(ptr_st_undfut_pos->d_ibuy_mrgn, ptr_st_undfut_pos->d_isell_mrgn);

  d_e_exp = fn_maxd(ptr_st_undfut_pos->d_exbuy_mrgn, ptr_st_undfut_pos->d_exsell_mrgn);

  ptr_st_undfut_pos->d_ordr_mrgn = fn_maxd( d_i_exp, d_e_exp );

  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog ( c_ServiceName, "Total order level margin" );
    fn_userlog ( c_ServiceName, "IWTL buy exposure   :%lf:", ptr_st_undfut_pos->d_ibuy_mrgn );
    fn_userlog ( c_ServiceName, "IWTL sell exposure  :%lf:", ptr_st_undfut_pos->d_isell_mrgn );
    fn_userlog ( c_ServiceName, "IWTL total exposure :%lf:", d_i_exp );
    fn_userlog ( c_ServiceName, "EXCH buy exposure   :%lf:", ptr_st_undfut_pos->d_exbuy_mrgn );
    fn_userlog ( c_ServiceName, "EXCH sell exposure  :%lf:", ptr_st_undfut_pos->d_exsell_mrgn );
    fn_userlog ( c_ServiceName, "EXCH total exposure :%lf:", d_e_exp );
    fn_userlog ( c_ServiceName, "Final exposure      :%lf:", ptr_st_undfut_pos->d_ordr_mrgn );
    fn_userlog ( c_ServiceName, "sql_cln_mtch_accnt  :%s:",  sql_cln_mtch_accnt );
    fn_userlog ( c_ServiceName, "sql_xchng_cd        :%s:",  sql_xchng_cd );
    fn_userlog ( c_ServiceName, "sql_undrlyng        :%s:",  sql_undrlyng );
    fn_userlog ( c_ServiceName, "sql_cntrct_tag      :%c:",  sql_cntrct_tag );
    fn_userlog ( c_ServiceName, "sql_prd_typ         :%c:",  sql_prd_typ );
  }

  /** Calculate the Executed margin, Spread margin and Spread PL.        **/
  /** They need to be recalculated only if the executed position changes **/


  li_spd_qty = fn_minl( ptr_st_undfut_pos->l_opn_buyqty,labs(ptr_st_undfut_pos->l_opn_sellqty) );

  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"li_spd_qty is :%ld:",li_spd_qty);
  }

      EXEC SQL
      SELECT  FFP_MTM_OPN_VAL,
              FFP_OPNPSTN_QTY
      INTO    :d_far_mtm_opn_val,
              :li_far_opnpstn_qty
      FROM    FFP_FO_FUTURES_PSTN
      WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
      AND     FFP_XCHNG_CD       = :sql_xchng_cd
      AND     FFP_PRDCT_TYP      = :sql_prd_typ
      AND     FFP_UNDRLYNG       = :sql_undrlyng
      AND     FFP_CNTRCT_TAG     = :sql_cntrct_tag
      AND     FFP_EXPRY_DT       =
              ( SELECT  MAX(FFP_EXPRY_DT)
              FROM    FFP_FO_FUTURES_PSTN
              WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
              AND     FFP_XCHNG_CD       = :sql_xchng_cd
              AND     FFP_PRDCT_TYP      = :sql_prd_typ
              AND     FFP_UNDRLYNG       = :sql_undrlyng
              AND     FFP_CNTRCT_TAG     = :sql_cntrct_tag
              AND     FFP_OPNPSTN_QTY    != 0 );

    if ( ( SQLCODE != 0 ) &&
         ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "S32305", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName," d_far_mtm_opn_val     |%lf| ",d_far_mtm_opn_val);
      fn_userlog(c_ServiceName," li_far_opnpstn_qty    |%ld| ",li_far_opnpstn_qty);
      fn_userlog(c_ServiceName," li_spd_qty            |%ld| ",li_spd_qty);
      fn_userlog(c_ServiceName," ptr_st_undfut_pos->l_opnpstn_qty    |%ld| ",ptr_st_undfut_pos->l_opnpstn_qty);

    }

    if ( SQLCODE == 0 )
    {
      ptr_st_undfut_pos->d_sprd_mrgn = li_spd_qty * ( d_far_mtm_opn_val / li_far_opnpstn_qty ) * d_spread_mrgn/ 100.0;

      ptr_st_undfut_pos->d_imtm_sprd_mrgn = ptr_st_undfut_pos->d_sprd_mrgn;

      ptr_st_undfut_pos->d_mm_sprd_mrgn =li_spd_qty * (d_far_mtm_opn_val / li_far_opnpstn_qty) * d_min_spread_mrgn / 100.0;

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName," ptr_st_undfut_pos->d_sprd_mrgn       |%lf| ",ptr_st_undfut_pos->d_sprd_mrgn);
        fn_userlog(c_ServiceName," ptr_st_undfut_pos->d_imtm_sprd_mrgn  |%lf| ",ptr_st_undfut_pos->d_imtm_sprd_mrgn);
        fn_userlog(c_ServiceName," ptr_st_undfut_pos->d_mm_sprd_mrgn    |%lf| ",ptr_st_undfut_pos->d_mm_sprd_mrgn);
      }
    }
    else
    {
      ptr_st_undfut_pos->d_sprd_mrgn = 0;
      ptr_st_undfut_pos->d_imtm_sprd_mrgn = 0;
      ptr_st_undfut_pos->d_mm_sprd_mrgn = 0;
    }

    c_pos_opn = 'Y';

    EXEC SQL ALLOCATE :sys_cursor;

    if( ptr_st_undfut_pos->l_opnpstn_qty > 0)
    {
      fn_userlog(c_ServiceName,"Inside l_opnpstn_qty > 0.");

      EXEC SQL EXECUTE
        BEGIN
          OPEN :sys_cursor FOR
            SELECT  FFP_MTM_OPN_VAL,
                    FFP_OPNPSTN_QTY,
                    FFP_IMTM_OPN_VAL
            FROM    FFP_FO_FUTURES_PSTN
            WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
            AND     FFP_XCHNG_CD       = :sql_xchng_cd
            AND     FFP_PRDCT_TYP      = :sql_prd_typ
            AND     FFP_UNDRLYNG       = :sql_undrlyng
            AND     FFP_CNTRCT_TAG     = :sql_cntrct_tag
            AND     FFP_OPNPSTN_QTY    > 0
            ORDER BY FFP_EXPRY_DT Desc;
          END;
        END-EXEC;

    }
    else if( ptr_st_undfut_pos->l_opnpstn_qty < 0)
    {
      EXEC SQL EXECUTE
        BEGIN
          OPEN :sys_cursor FOR
            SELECT  FFP_MTM_OPN_VAL,
                    FFP_OPNPSTN_QTY,
                    FFP_IMTM_OPN_VAL
            FROM    ffp_fo_futures_pstn
            WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
            AND     FFP_XCHNG_CD       = :sql_xchng_cd
            AND     FFP_PRDCT_TYP      = :sql_prd_typ
            AND     FFP_UNDRLYNG       = :sql_undrlyng
            AND     FFP_CNTRCT_TAG     = :sql_cntrct_tag
            AND     FFP_OPNPSTN_QTY    < 0
            ORDER BY FFP_EXPRY_DT desc;
          END;
        END-EXEC;

    }
    else
    {
      fn_userlog(c_ServiceName,"Inside Else Condition.");

      d_sum_CUOV = 0;
      d_sum_CUOV_cmp = 0;
      ptr_st_undfut_pos->d_sprd_pl = (-1) * ptr_st_undfut_pos->d_mtm_opn_val;
      ptr_st_undfut_pos->d_imtm_sprd_pl = (-1) * ptr_st_undfut_pos->d_imtm_opn_val;
      ptr_st_undfut_pos->d_mm_sprd_pl = ptr_st_undfut_pos->d_sprd_pl;

      ptr_st_undfut_pos->d_exctd_mrgn = 0;
      ptr_st_undfut_pos->d_imtm_exctd_mrgn = 0;
      ptr_st_undfut_pos->d_mm_exctd_mrgn = 0;
      c_pos_opn = 'N';

      /*** Set add margin amount to 0 ***/
      ptr_st_undfut_pos->d_add_mrgn_val = 0;

      SQLCODE = 0;
    }

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S32310", SQLMSG, ptr_st_err_msg->c_err_msg  );
      EXEC SQL FREE :sys_cursor;
      return ( -1 );
    }

    if ( c_pos_opn == 'Y' )
    {
      li_opn_qty = ptr_st_undfut_pos->l_opnpstn_qty;
      li_unmtchd_qty = li_opn_qty;
      li_sum_CUOQ = 0;
      d_sum_CUOV = 0;
      d_sum_CUOV_cmp = 0;

      fn_userlog(c_ServiceName,"inside c_pos_opn condition :::::li_opn_qty is   :%ld:",li_opn_qty);

      while ( li_unmtchd_qty != 0)
      {
        EXEC SQL FETCH :sys_cursor
                INTO :st_cntfut_pos.d_mtm_opn_val,
                     :st_cntfut_pos.l_opnpstn_qty,
                     :st_cntfut_pos.d_imtm_opn_val;

        if ( SQLCODE != 0 )
        {
          fn_errlog( c_ServiceName, "S32315", SQLMSG,
                                          ptr_st_err_msg->c_err_msg  );
          EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE :sys_cursor;
          return ( -1 );
        }

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"st_cntfut_pos.d_mtm_opn_val is :%lf:",st_cntfut_pos.d_mtm_opn_val);
          fn_userlog(c_ServiceName,"st_cntfut_pos.d_imtm_opn_val  is :%lf:",st_cntfut_pos.d_imtm_opn_val);
          fn_userlog(c_ServiceName,"li_unmtchd_qty  is              :%ld:",li_unmtchd_qty);
          fn_userlog(c_ServiceName,"st_cntfut_pos.l_opnpstn_qty is  :%ld:",st_cntfut_pos.l_opnpstn_qty);

        }

        if ( li_opn_qty > 0 )
        {
          st_cntfut_pos.l_und_opn_qty = fn_minl( st_cntfut_pos.l_opnpstn_qty, li_unmtchd_qty );
        }
        else
        {
          st_cntfut_pos.l_und_opn_qty = fn_maxl( st_cntfut_pos.l_opnpstn_qty, li_unmtchd_qty );
        }

        st_cntfut_pos.d_und_opn_val=st_cntfut_pos.l_und_opn_qty *(st_cntfut_pos.d_mtm_opn_val / st_cntfut_pos.l_opnpstn_qty);

        d_und_opn_val_imtm = st_cntfut_pos.l_und_opn_qty * (st_cntfut_pos.d_imtm_opn_val / st_cntfut_pos.l_opnpstn_qty);

        li_sum_CUOQ = li_sum_CUOQ + st_cntfut_pos.l_und_opn_qty;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Before d_sum_CUOV is :%lf:",d_sum_CUOV);
          fn_userlog(c_ServiceName,"Before li_sum_CUOQ is :%lf:",li_sum_CUOQ);
          fn_userlog(c_ServiceName,"Before st_cntfut_pos.d_und_opn_val is :%lf:",st_cntfut_pos.d_und_opn_val);
        }

        d_sum_CUOV = d_sum_CUOV + st_cntfut_pos.d_und_opn_val;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"After d_sum_CUOV is :%lf:",d_sum_CUOV);
          fn_userlog(c_ServiceName,"After d_sum_CUOV_cmp is :%lf:",d_sum_CUOV_cmp);
        }

        d_sum_CUOV_cmp = d_sum_CUOV_cmp + d_und_opn_val_imtm;

        li_unmtchd_qty = li_unmtchd_qty - st_cntfut_pos.l_und_opn_qty;
      }

      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;

      /** Calculation of Executed margin **/
      /** Executed margin = d_sum_CUOV * IM / 100 **/

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"d_sum_CUOV is :%lf:",d_sum_CUOV);
        fn_userlog(c_ServiceName,"ptr_st_undfut_pos->d_mtm_opn_val is :%lf:",ptr_st_undfut_pos->d_mtm_opn_val);
      }

      ptr_st_undfut_pos->d_sprd_pl = d_sum_CUOV - ptr_st_undfut_pos->d_mtm_opn_val;

      ptr_st_undfut_pos->d_imtm_sprd_pl = d_sum_CUOV_cmp - ptr_st_undfut_pos->d_imtm_opn_val;

      ptr_st_undfut_pos->d_mm_sprd_pl = ptr_st_undfut_pos->d_sprd_pl;

      if ( li_opn_qty > 0 )
      {
        fn_userlog(c_ServiceName,"Inside li_opn_qty > 0.");
        fn_userlog(c_ServiceName,"d_sum_CUOV is :%lf:",d_sum_CUOV);
        fn_userlog(c_ServiceName,"d_initial_mrgn is :%lf:",d_initial_mrgn);

        ptr_st_undfut_pos->d_exctd_mrgn = d_sum_CUOV * d_initial_mrgn / 100.0;

        ptr_st_undfut_pos->d_imtm_exctd_mrgn = d_sum_CUOV_cmp * d_initial_mrgn / 100.0;

        ptr_st_undfut_pos->d_mm_exctd_mrgn = d_sum_CUOV * d_min_mrgn / 100.0;

      }

      else if ( li_opn_qty < 0 )
      {

        ptr_st_undfut_pos->d_exctd_mrgn = ( (-1) * d_sum_CUOV )* d_initial_mrgn / 100.0;

        ptr_st_undfut_pos->d_imtm_exctd_mrgn = ( (-1) * d_sum_CUOV_cmp )* d_initial_mrgn / 100.0;

        ptr_st_undfut_pos->d_mm_exctd_mrgn = ( (-1) * d_sum_CUOV )* d_min_mrgn / 100.0;

      }

      if ( ( ptr_st_undfut_pos->l_opnpstn_qty == 0 ) ||
           ( ( ptr_st_undfut_pos->l_opnpstn_qty > 0 ) &&
             ( st_undfut_pos_crrnt.l_opnpstn_qty < 0 ) ) ||
           ( ( ptr_st_undfut_pos->l_opnpstn_qty < 0 ) &&
             ( st_undfut_pos_crrnt.l_opnpstn_qty > 0 ) ) )
      {
        ptr_st_undfut_pos->d_add_mrgn_val = 0;
      }

    }
    else
    {
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"ptr_st_undfut_pos->d_exctd_mrgn Is :%lf:",ptr_st_undfut_pos->d_exctd_mrgn);
      fn_userlog(c_ServiceName,"ptr_st_undfut_pos->d_sprd_mrgn Is :%lf:",ptr_st_undfut_pos->d_sprd_mrgn);
      fn_userlog(c_ServiceName,"ptr_st_undfut_pos->d_sprd_pl Is :%lf:", ptr_st_undfut_pos->d_sprd_pl);
    }

    if ( ( ptr_st_undfut_pos->d_exctd_mrgn + ptr_st_undfut_pos->d_sprd_mrgn ) <= ptr_st_undfut_pos->d_sprd_pl )
    {
      ptr_st_undfut_pos->d_trd_mrgn = 0;
    }
    else
    {
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"ptr_st_undfut_pos->d_trd_mrgn :%lf:",ptr_st_undfut_pos->d_trd_mrgn);
        fn_userlog(c_ServiceName,"ptr_st_undfut_pos->d_exctd_mrgn :%lf:",ptr_st_undfut_pos->d_exctd_mrgn);
        fn_userlog(c_ServiceName,"ptr_st_undfut_pos->d_sprd_mrgn :%lf:",ptr_st_undfut_pos->d_sprd_mrgn);
        fn_userlog(c_ServiceName,"ptr_st_undfut_pos->d_sprd_pl :%lf:",ptr_st_undfut_pos->d_sprd_pl);
      }

      ptr_st_undfut_pos->d_trd_mrgn = ptr_st_undfut_pos->d_exctd_mrgn + ptr_st_undfut_pos->d_sprd_mrgn - ptr_st_undfut_pos->d_sprd_pl;
    }

    if((ptr_st_undfut_pos->d_imtm_exctd_mrgn + ptr_st_undfut_pos->d_imtm_sprd_mrgn ) <= ptr_st_undfut_pos->d_imtm_sprd_pl )
    {
      ptr_st_undfut_pos->d_imtm_trd_mrgn = 0;
    }
    else
    {
      ptr_st_undfut_pos->d_imtm_trd_mrgn =
                                    ptr_st_undfut_pos->d_imtm_exctd_mrgn +
                                    ptr_st_undfut_pos->d_imtm_sprd_mrgn -
                                    ptr_st_undfut_pos->d_imtm_sprd_pl;
    }

    if ( ( ptr_st_undfut_pos->d_mm_exctd_mrgn + ptr_st_undfut_pos->d_mm_sprd_mrgn ) <= ptr_st_undfut_pos->d_mm_sprd_pl )
    {
      ptr_st_undfut_pos->d_mm_trd_mrgn = 0;
    }
    else
    {
      ptr_st_undfut_pos->d_mm_trd_mrgn = ptr_st_undfut_pos->d_mm_exctd_mrgn +
                                      ptr_st_undfut_pos->d_mm_sprd_mrgn -
                                      ptr_st_undfut_pos->d_mm_sprd_pl;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog ( c_ServiceName, "Actual net open value  :%lf:", d_sum_CUOV );
      fn_userlog ( c_ServiceName, "MTMed open val         :%lf:", ptr_st_undfut_pos->d_mtm_opn_val );
      fn_userlog ( c_ServiceName, "Spread PL              :%lf:", ptr_st_undfut_pos->d_sprd_pl );
      fn_userlog ( c_ServiceName, "Executed Margin        :%lf:", ptr_st_undfut_pos->d_exctd_mrgn );
      fn_userlog ( c_ServiceName, "Total Trade Margin     :%lf:", ptr_st_undfut_pos->d_trd_mrgn );
      fn_userlog ( c_ServiceName, "Act net open value -CMP:%lf:", d_sum_CUOV_cmp );
      fn_userlog ( c_ServiceName, "Spread PL at IMTM      :%lf:", ptr_st_undfut_pos->d_imtm_sprd_pl );
      fn_userlog ( c_ServiceName, "Executed Margin at IMTM:%lf:", ptr_st_undfut_pos->d_imtm_exctd_mrgn );
      fn_userlog ( c_ServiceName, "Total IMTM Trade Margin:%lf:", ptr_st_undfut_pos->d_imtm_trd_mrgn );
      fn_userlog ( c_ServiceName, "Spread PL at MM        :%lf:", ptr_st_undfut_pos->d_mm_sprd_pl );
      fn_userlog ( c_ServiceName, "Executed Margin at MM  :%lf:", ptr_st_undfut_pos->d_mm_exctd_mrgn );
      fn_userlog ( c_ServiceName, "Total Trade Mrgn at MM :%lf:", ptr_st_undfut_pos->d_mm_trd_mrgn );
    }
  return SUCCESS;
}

int fn_upd_pos_rollover(char *c_ServiceName,
                        struct vw_pstn_actn ptr_st_pstn_actn,
                        struct vw_err_msg *ptr_st_err_msg
                       )
{

  struct vw_undfut_pos st_undfut_pos_to_be;
  struct vw_cntfut_pos st_cntpos_md_rc;

  char c_cntrct_tag = '\0';
  char c_trade_dt[12];
	char c_ucc_cd[13] = "\0";   /*** Added in VER 6.7 ***/

  MEMSET(st_undfut_pos_to_be);
  MEMSET(st_cntpos_md_rc);
  MEMSET(c_trade_dt);

  fn_userlog ( c_ServiceName,"Inside function fn_upd_pos_rollover");

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName,"c_user_id        :%s:",ptr_st_pstn_actn.c_user_id );
    fn_userlog ( c_ServiceName,"l_session_id     :%ld:",ptr_st_pstn_actn.l_session_id );
    fn_userlog ( c_ServiceName,"c_prd_typ        :%c:",ptr_st_pstn_actn.c_prd_typ );
    fn_userlog ( c_ServiceName,"c_expry_dt       :%s:",ptr_st_pstn_actn.c_expry_dt );
    fn_userlog ( c_ServiceName,"c_exrc_typ       :%c:",ptr_st_pstn_actn.c_exrc_typ );
    fn_userlog ( c_ServiceName,"l_actn_typ       :%ld:",ptr_st_pstn_actn.l_actn_typ );
    fn_userlog ( c_ServiceName,"l_orgnl_qty      :%ld:",ptr_st_pstn_actn.l_orgnl_qty );
    fn_userlog ( c_ServiceName,"l_orgnl_rt       :%ld:",ptr_st_pstn_actn.l_orgnl_rt );
    fn_userlog ( c_ServiceName,"l_new_qty        :%ld:",ptr_st_pstn_actn.l_new_qty );
    fn_userlog ( c_ServiceName,"l_new_rt         :%ld:",ptr_st_pstn_actn.l_new_rt );
    fn_userlog ( c_ServiceName,"l_exec_qty       :%ld:",ptr_st_pstn_actn.l_exec_qty );
    fn_userlog ( c_ServiceName,"l_exec_rt        :%ld:",ptr_st_pstn_actn.l_exec_rt );
    fn_userlog ( c_ServiceName,"l_fresh_qty      :%ld:",ptr_st_pstn_actn.l_fresh_qty );
    fn_userlog ( c_ServiceName,"l_cover_qty      :%ld:",ptr_st_pstn_actn.l_cover_qty );
    fn_userlog ( c_ServiceName,"d_add_mrgn_amt   :%lf:",ptr_st_pstn_actn.d_add_mrgn_amt );
    fn_userlog ( c_ServiceName,"l_curr_rt        :%ld:",ptr_st_pstn_actn.l_curr_rt );
    fn_userlog ( c_ServiceName,"c_ref_rmrks      :%s:",ptr_st_pstn_actn.c_ref_rmrks );
    fn_userlog ( c_ServiceName,"c_cntrct_tag     :%c:",ptr_st_pstn_actn.c_cntrct_tag );
    fn_userlog ( c_ServiceName,"c_prc_flg        :%c:",ptr_st_pstn_actn.c_nkd_blkd_flg );
    fn_userlog ( c_ServiceName,"l_actn_typ       :%ld:",ptr_st_pstn_actn.l_actn_typ );
    fn_userlog ( c_ServiceName,"c_trnsctn_flw    :%c:",ptr_st_pstn_actn.c_trnsctn_flw);
  }

  EXEC SQL
     SELECT  FTQ_CNTRCT_TAG
     INTO    :c_cntrct_tag
     FROM    FTQ_FO_TRD_QT
     WHERE   FTQ_XCHNG_CD        = :ptr_st_pstn_actn.c_xchng_cd
     AND     FTQ_PRDCT_TYP       = :ptr_st_pstn_actn.c_prd_typ
     AND     FTQ_UNDRLYNG        = :ptr_st_pstn_actn.c_undrlyng
     AND     FTQ_EXPRY_DT        = to_date( :ptr_st_pstn_actn.c_expry_dt,'dd-mon-yyyy' )
     AND     FTQ_EXER_TYP        = :ptr_st_pstn_actn.c_exrc_typ;

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S32320", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName,"c_cntrct_tag :%c:",c_cntrct_tag);
  }

  EXEC SQL
   SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY')
      INTO   :c_trade_dt
      FROM   EXG_XCHNG_MSTR
      WHERE  EXG_XCHNG_CD = :ptr_st_pstn_actn.c_xchng_cd
      AND    EXG_MKT_TYP = 'D';

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S32325", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName,"c_trade_dt :%s:",c_trade_dt);
  }

  EXEC SQL
   UPDATE FUP_FUT_UNDRLYNG_PSTN
   SET    FUP_UIBUY_QTY   = DECODE(:ptr_st_pstn_actn.c_trnsctn_flw,'B',NVL(FUP_UIBUY_QTY,0) + :ptr_st_pstn_actn.l_exec_qty,FUP_UIBUY_QTY),
          FUP_UIBUY_VAL   = DECODE(:ptr_st_pstn_actn.c_trnsctn_flw,'B',NVL(FUP_UIBUY_VAL,0) + (:ptr_st_pstn_actn.l_exec_qty * :ptr_st_pstn_actn.l_exec_rt),FUP_UIBUY_VAL),
          FUP_UISELL_QTY  = DECODE(:ptr_st_pstn_actn.c_trnsctn_flw,'S',NVL(FUP_UISELL_QTY,0) + (:ptr_st_pstn_actn.l_exec_qty * -1),FUP_UISELL_QTY),
          FUP_UISELL_VAL  = DECODE(:ptr_st_pstn_actn.c_trnsctn_flw,'S',NVL(FUP_UISELL_VAL,0) + (:ptr_st_pstn_actn.l_exec_qty * :ptr_st_pstn_actn.l_exec_rt * -1),FUP_UISELL_VAL),
          FUP_UEXBUY_QTY  = DECODE(:ptr_st_pstn_actn.c_trnsctn_flw,'B',NVL(FUP_UEXBUY_QTY,0) + :ptr_st_pstn_actn.l_exec_qty,FUP_UEXBUY_QTY),
          FUP_UEXBUY_VAL  = DECODE(:ptr_st_pstn_actn.c_trnsctn_flw,'B',NVL(FUP_UEXBUY_VAL,0) + (:ptr_st_pstn_actn.l_exec_qty * :ptr_st_pstn_actn.l_exec_rt),FUP_UEXBUY_VAL),
          FUP_UEXSELL_QTY =DECODE(:ptr_st_pstn_actn.c_trnsctn_flw,'S',NVL(FUP_UEXSELL_QTY,0) + (:ptr_st_pstn_actn.l_exec_qty * -1),FUP_UEXSELL_QTY),
          FUP_UEXSELL_VAL = DECODE(:ptr_st_pstn_actn.c_trnsctn_flw,'S',NVL(FUP_UEXSELL_VAL,0) + (:ptr_st_pstn_actn.l_exec_qty * :ptr_st_pstn_actn.l_exec_rt * -1),FUP_UEXSELL_VAL)
   WHERE   FUP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn.c_cln_mtch_accnt
   AND     FUP_XCHNG_CD        = :ptr_st_pstn_actn.c_xchng_cd
   AND     FUP_PRDCT_TYP       = :ptr_st_pstn_actn.c_prd_typ
   AND     FUP_UNDRLYNG        = :ptr_st_pstn_actn.c_undrlyng
   AND     FUP_CNTRCT_TAG      = :c_cntrct_tag;

   if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
   {
     fn_errlog(c_ServiceName, "S32330", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
   }

  if ( SQLCODE == NO_DATA_FOUND )
  {
    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog (c_ServiceName,"Inside no data found for underlying position.");
    }

    strcpy( st_undfut_pos_to_be.c_cln_mtch_accnt,ptr_st_pstn_actn.c_cln_mtch_accnt );
    strcpy( st_undfut_pos_to_be.c_xchng_cd, ptr_st_pstn_actn.c_xchng_cd );
    strcpy( st_undfut_pos_to_be.c_undrlyng, ptr_st_pstn_actn.c_undrlyng );
    st_undfut_pos_to_be.c_prd_typ  = ptr_st_pstn_actn.c_prd_typ;
    st_undfut_pos_to_be.c_ctgry_indstk  = ptr_st_pstn_actn.c_ctgry_indstk;
    st_undfut_pos_to_be.c_cntrct_tag = c_cntrct_tag;

    if( ptr_st_pstn_actn.c_trnsctn_flw == 'B' )
    {
      st_undfut_pos_to_be.l_ibuy_qty = ptr_st_pstn_actn.l_exec_qty;
      st_undfut_pos_to_be.d_ibuy_ord_vl = (double)( ptr_st_pstn_actn.l_exec_rt * ptr_st_pstn_actn.l_exec_qty);
      st_undfut_pos_to_be.l_isell_qty = 0;
      st_undfut_pos_to_be.d_isell_ord_vl = 0;
      st_undfut_pos_to_be.l_exbuy_qty = ptr_st_pstn_actn.l_exec_qty;
      st_undfut_pos_to_be.d_exbuy_ord_vl = (double)( ptr_st_pstn_actn.l_exec_rt * ptr_st_pstn_actn.l_exec_qty);
      st_undfut_pos_to_be.l_exsell_qty = 0;
      st_undfut_pos_to_be.d_exsell_ord_vl = 0;
    }
    else
    {
      st_undfut_pos_to_be.l_ibuy_qty = 0;
      st_undfut_pos_to_be.d_ibuy_ord_vl = 0;
      st_undfut_pos_to_be.l_isell_qty = ptr_st_pstn_actn.l_exec_qty * (-1);
      st_undfut_pos_to_be.d_isell_ord_vl = (double)( ptr_st_pstn_actn.l_exec_rt * ptr_st_pstn_actn.l_exec_qty * -1);
      st_undfut_pos_to_be.l_exbuy_qty = 0;
      st_undfut_pos_to_be.d_exbuy_ord_vl = 0;
      st_undfut_pos_to_be.l_exsell_qty = ptr_st_pstn_actn.l_exec_qty * (-1);
      st_undfut_pos_to_be.d_exsell_ord_vl =(double)( ptr_st_pstn_actn.l_exec_rt * ptr_st_pstn_actn.l_exec_qty * -1);
    }

    st_undfut_pos_to_be.l_buy_exctd_qty = 0;
    st_undfut_pos_to_be.l_sell_exctd_qty = 0;
    st_undfut_pos_to_be.c_opnpstn_flw = 'N';
    st_undfut_pos_to_be.l_opnpstn_qty = 0;
    st_undfut_pos_to_be.d_org_opn_val = 0;
    st_undfut_pos_to_be.d_mtm_opn_val = 0;
    st_undfut_pos_to_be.l_opn_buyqty = 0;
    st_undfut_pos_to_be.l_opn_sellqty = 0;
    st_undfut_pos_to_be.d_ibuy_mrgn = 0;
    st_undfut_pos_to_be.d_isell_mrgn = 0;
    st_undfut_pos_to_be.d_exbuy_mrgn = 0;
    st_undfut_pos_to_be.d_exsell_mrgn = 0;
    st_undfut_pos_to_be.d_add_mrgn_val = 0;
    st_undfut_pos_to_be.d_exctd_mrgn = 0;
    st_undfut_pos_to_be.d_sprd_mrgn = 0;
    st_undfut_pos_to_be.d_sprd_pl = 0;
    st_undfut_pos_to_be.d_trd_mrgn = 0;
    st_undfut_pos_to_be.c_oprn_typ = '*';
    st_undfut_pos_to_be.d_mm_trd_mrgn = 0;
    st_undfut_pos_to_be.d_ordr_mrgn = 0;

		/*** Added in VER 6.7 : Real time margin reporting ( Fetching UCC code ) ***/

		MEMSET(c_ucc_cd);

    EXEC SQL
    SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
    INTO  :c_ucc_cd
    FROM  CLM_CLNT_MSTR
    WHERE CLM_MTCH_ACCNT = :st_undfut_pos_to_be.c_cln_mtch_accnt;

    if ( SQLCODE != 0 )
    {
      fn_userlog(c_ServiceName,"fn_upd_pos_rollover : Error while fetching UCC code for :%s:", st_undfut_pos_to_be.c_cln_mtch_accnt);
      fn_errlog( c_ServiceName, "S32335",SQLMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }

    rtrim(c_ucc_cd);

    if(DEBUG_MSG_LVL_3)
      fn_userlog(c_ServiceName,"VER 6.7 -- fn_upd_pos_rollover : MAtch ID :%s: have ucc code :%s:", st_undfut_pos_to_be.c_cln_mtch_accnt, c_ucc_cd);

    /*** VER 6.7 ends here ***/

    EXEC SQL
      INSERT INTO FUP_FUT_UNDRLYNG_PSTN
      (
        FUP_CLM_MTCH_ACCNT,
        FUP_XCHNG_CD,
        FUP_PRDCT_TYP,
        FUP_INDSTK,
        FUP_UNDRLYNG,
        FUP_CNTRCT_TAG,
        FUP_UIBUY_QTY,
        FUP_UIBUY_VAL,
        FUP_UISELL_QTY,
        FUP_UISELL_VAL,
        FUP_UEXBUY_QTY,
        FUP_UEXBUY_VAL,
        FUP_UEXSELL_QTY,
        FUP_UEXSELL_VAL,
        FUP_UBUY_EXCTD_QTY,
        FUP_USELL_EXCTD_QTY,
        FUP_UOPNPSTN_FLW,
        FUP_UOPNPSTN_QTY,
        FUP_UOPNPSTN_VAL,
        FUP_UMTM_OPN_VAL,
        FUP_UORDR_MRGN,
        FUP_UEXCTD_MRGN,
        FUP_USPREAD_MRGN,
        FUP_USPREAD_PNL,
        FUP_ADD_MRGN_VAL,
        FUP_UTRD_MRGN,
        FUP_TRD_DT,
        FUP_UMIN_TRD_MRGN,
				FUP_UCC_CD					/*** Added in VER 6.7 ***/
      )
       VALUES
      (
        :st_undfut_pos_to_be.c_cln_mtch_accnt,
        :st_undfut_pos_to_be.c_xchng_cd,
        :st_undfut_pos_to_be.c_prd_typ,
        :st_undfut_pos_to_be.c_ctgry_indstk,
        :st_undfut_pos_to_be.c_undrlyng,
        :st_undfut_pos_to_be.c_cntrct_tag,
        :st_undfut_pos_to_be.l_ibuy_qty,
        :st_undfut_pos_to_be.d_ibuy_ord_vl,
        :st_undfut_pos_to_be.l_isell_qty,
        :st_undfut_pos_to_be.d_isell_ord_vl,
        :st_undfut_pos_to_be.l_exbuy_qty,
        :st_undfut_pos_to_be.d_exbuy_ord_vl,
        :st_undfut_pos_to_be.l_exsell_qty,
        :st_undfut_pos_to_be.d_exsell_ord_vl,
        :st_undfut_pos_to_be.l_buy_exctd_qty,
        :st_undfut_pos_to_be.l_sell_exctd_qty,
        :st_undfut_pos_to_be.c_opnpstn_flw,
        :st_undfut_pos_to_be.l_opnpstn_qty,
        :st_undfut_pos_to_be.d_org_opn_val,
        :st_undfut_pos_to_be.d_mtm_opn_val,
        :st_undfut_pos_to_be.d_ordr_mrgn,
        :st_undfut_pos_to_be.d_exctd_mrgn,
        :st_undfut_pos_to_be.d_sprd_mrgn,
        :st_undfut_pos_to_be.d_sprd_pl,
        :st_undfut_pos_to_be.d_add_mrgn_val,
        :st_undfut_pos_to_be.d_trd_mrgn,
        :c_trade_dt,
        :st_undfut_pos_to_be.d_mm_trd_mrgn,
				:c_ucc_cd					/*** Added in VER 6.7 ***/
      );

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S32340", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
    }

  EXEC SQL
   UPDATE FFP_FO_FUTURES_PSTN
   SET   FFP_IBUY_QTY      = DECODE(:ptr_st_pstn_actn.c_trnsctn_flw,'B',NVL(FFP_IBUY_QTY,0) + :ptr_st_pstn_actn.l_exec_qty,FFP_IBUY_QTY),
         FFP_IBUY_ORD_VAL  = DECODE(:ptr_st_pstn_actn.c_trnsctn_flw,'B',NVL(FFP_IBUY_ORD_VAL,0) + (:ptr_st_pstn_actn.l_exec_qty * :ptr_st_pstn_actn.l_exec_rt),FFP_IBUY_ORD_VAL),
         FFP_ISELL_QTY    = DECODE(:ptr_st_pstn_actn.c_trnsctn_flw,'S',NVL(FFP_ISELL_QTY,0) + (:ptr_st_pstn_actn.l_exec_qty * -1),FFP_ISELL_QTY),
         FFP_ISELL_ORD_VAL = DECODE(:ptr_st_pstn_actn.c_trnsctn_flw,'S',NVL(FFP_ISELL_ORD_VAL,0) + (:ptr_st_pstn_actn.l_exec_qty * :ptr_st_pstn_actn.l_exec_rt * -1),FFP_ISELL_ORD_VAL),
         FFP_EXBUY_QTY    = DECODE(:ptr_st_pstn_actn.c_trnsctn_flw,'B',NVL(FFP_EXBUY_QTY,0) + :ptr_st_pstn_actn.l_exec_qty,FFP_EXBUY_QTY),
         FFP_EXBUY_ORD_VAL= DECODE(:ptr_st_pstn_actn.c_trnsctn_flw,'B',NVL(FFP_EXBUY_ORD_VAL,0) + (:ptr_st_pstn_actn.l_exec_qty * :ptr_st_pstn_actn.l_exec_rt),FFP_EXBUY_ORD_VAL),
         FFP_EXSELL_QTY   = DECODE(:ptr_st_pstn_actn.c_trnsctn_flw,'S',NVL(FFP_EXSELL_QTY,0) + (:ptr_st_pstn_actn.l_exec_qty * -1),FFP_EXSELL_QTY),
         FFP_EXSELL_ORD_VAL= DECODE(:ptr_st_pstn_actn.c_trnsctn_flw,'S',NVL(FFP_EXSELL_ORD_VAL,0) + (:ptr_st_pstn_actn.l_exec_qty * :ptr_st_pstn_actn.l_exec_rt * -1),FFP_EXSELL_ORD_VAL)
    WHERE  FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn.c_cln_mtch_accnt
    AND    FFP_XCHNG_CD       = :ptr_st_pstn_actn.c_xchng_cd
    AND    FFP_PRDCT_TYP      = :ptr_st_pstn_actn.c_prd_typ
    AND    FFP_UNDRLYNG       = :ptr_st_pstn_actn.c_undrlyng
    AND    FFP_EXPRY_DT       = to_date(:ptr_st_pstn_actn.c_expry_dt,'DD-Mon-YYYY')
    AND    FFP_EXER_TYP       = :ptr_st_pstn_actn.c_exrc_typ
    AND    FFP_CNTRCT_TAG     = :c_cntrct_tag;

    if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
      fn_errlog(c_ServiceName, "S32345", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

    if ( SQLCODE == NO_DATA_FOUND )
    {
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog (c_ServiceName,"Inside no data found for contract level position.");
      }

      strcpy( st_cntpos_md_rc.c_cln_mtch_accnt,ptr_st_pstn_actn.c_cln_mtch_accnt );
      strcpy( st_cntpos_md_rc.c_xchng_cd, ptr_st_pstn_actn.c_xchng_cd );
      strcpy( st_cntpos_md_rc.c_undrlyng, ptr_st_pstn_actn.c_undrlyng );
      strcpy( st_cntpos_md_rc.c_expry_dt, ptr_st_pstn_actn.c_expry_dt );
      st_cntpos_md_rc.c_prd_typ  = ptr_st_pstn_actn.c_prd_typ;
      st_cntpos_md_rc.c_exrc_typ  = ptr_st_pstn_actn.c_exrc_typ;
      st_cntpos_md_rc.c_ctgry_indstk  = ptr_st_pstn_actn.c_ctgry_indstk;
      st_cntpos_md_rc.c_cntrct_tag = ptr_st_pstn_actn.c_cntrct_tag;

      if( ptr_st_pstn_actn.c_trnsctn_flw == 'B' )
      {
        st_cntpos_md_rc.l_ibuy_qty = ptr_st_pstn_actn.l_exec_qty;
        st_cntpos_md_rc.d_ibuy_ord_vl = (double)( ptr_st_pstn_actn.l_exec_rt * ptr_st_pstn_actn.l_exec_qty);
        st_cntpos_md_rc.l_isell_qty = 0;
        st_cntpos_md_rc.d_isell_ord_vl = 0;
        st_cntpos_md_rc.l_exbuy_qty = ptr_st_pstn_actn.l_exec_qty;
        st_cntpos_md_rc.d_exbuy_ord_vl = (double)( ptr_st_pstn_actn.l_exec_rt * ptr_st_pstn_actn.l_exec_qty);
        st_cntpos_md_rc.l_exsell_qty = 0;
        st_cntpos_md_rc.d_exsell_ord_vl = 0;
      }
      else
      {
        st_cntpos_md_rc.l_ibuy_qty = 0;
        st_cntpos_md_rc.d_ibuy_ord_vl = 0;
        st_cntpos_md_rc.l_isell_qty = ptr_st_pstn_actn.l_exec_qty * (-1);
        st_cntpos_md_rc.d_isell_ord_vl =(double)(ptr_st_pstn_actn.l_exec_rt * ptr_st_pstn_actn.l_exec_qty * -1);
        st_cntpos_md_rc.l_exbuy_qty = 0;
        st_cntpos_md_rc.d_exbuy_ord_vl = 0;
        st_cntpos_md_rc.l_exsell_qty = ptr_st_pstn_actn.l_exec_qty * (-1);
        st_cntpos_md_rc.d_exsell_ord_vl =(double)(ptr_st_pstn_actn.l_exec_rt * ptr_st_pstn_actn.l_exec_qty * -1);
      }

      st_cntpos_md_rc.l_buy_exctd_qty = 0;
      st_cntpos_md_rc.l_sell_exctd_qty = 0;
      st_cntpos_md_rc.c_opnpstn_flw = 'N';
      st_cntpos_md_rc.l_opnpstn_qty = 0;
      st_cntpos_md_rc.d_org_opn_val = 0;
      st_cntpos_md_rc.d_mtm_opn_val = 0;

    EXEC SQL
      INSERT INTO FFP_FO_FUTURES_PSTN
      (
        FFP_CLM_MTCH_ACCNT,
        FFP_XCHNG_CD,
        FFP_PRDCT_TYP,
        FFP_INDSTK,
        FFP_UNDRLYNG,
        FFP_EXPRY_DT,
        FFP_EXER_TYP,
        FFP_CNTRCT_TAG,
        FFP_IBUY_QTY,
        FFP_IBUY_ORD_VAL,
        FFP_ISELL_QTY,
        FFP_ISELL_ORD_VAL,
        FFP_EXBUY_QTY,
        FFP_EXBUY_ORD_VAL,
        FFP_EXSELL_QTY,
        FFP_EXSELL_ORD_VAL,
        FFP_BUY_EXCTD_QTY,
        FFP_SELL_EXCTD_QTY,
        FFP_OPNPSTN_FLW,
        FFP_OPNPSTN_QTY,
        FFP_OPNPSTN_VAL,
        FFP_MTM_OPN_VAL
      )
      VALUES
      (
        :st_cntpos_md_rc.c_cln_mtch_accnt,
        :st_cntpos_md_rc.c_xchng_cd,
        :st_cntpos_md_rc.c_prd_typ,
        :st_cntpos_md_rc.c_ctgry_indstk,
        :st_cntpos_md_rc.c_undrlyng,
        TO_DATE(:st_cntpos_md_rc.c_expry_dt,'DD-Mon-YYYY'),
        :st_cntpos_md_rc.c_exrc_typ,
        :c_cntrct_tag,
        :st_cntpos_md_rc.l_ibuy_qty,
        :st_cntpos_md_rc.d_ibuy_ord_vl,
        :st_cntpos_md_rc.l_isell_qty,
        :st_cntpos_md_rc.d_isell_ord_vl,
        :st_cntpos_md_rc.l_exbuy_qty,
        :st_cntpos_md_rc.d_exbuy_ord_vl,
        :st_cntpos_md_rc.l_exsell_qty,
        :st_cntpos_md_rc.d_exsell_ord_vl,
        :st_cntpos_md_rc.l_buy_exctd_qty,
        :st_cntpos_md_rc.l_sell_exctd_qty,
        :st_cntpos_md_rc.c_opnpstn_flw,
        :st_cntpos_md_rc.l_opnpstn_qty,
        :st_cntpos_md_rc.d_org_opn_val,
        :st_cntpos_md_rc.d_mtm_opn_val
      );

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S32350", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
    }
    return SUCCESS;
}
/*********** Ver 5.0 Ends ****************/

/***** Ver 6.0 starts *******/
int fn_avg_prc_cal(char *c_ServiceName,
                   struct vw_pstn_actn *ptr_st_pstn_actn,
                   double  *d_prtfl_avgprc
                  )
{

  long int l_opnpstn_qty= 0;
  char   c_opnpstn_flw ='\0';
  double d_org_opn_val = 0.0;
  int i_returncode=0;
	double d_avg_pr = 0.0;

  varchar c_errmsg[256];
  struct vw_contract st_cntrct;
  struct vw_usr_prfl st_usr_prfl;
  MEMSET(st_cntrct);
  MEMSET(st_usr_prfl);

  strcpy(st_usr_prfl.c_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
  strcpy(st_cntrct.c_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
  st_cntrct.c_prd_typ = ptr_st_pstn_actn->c_prd_typ;
  st_cntrct.c_ctgry_indstk= ptr_st_pstn_actn->c_ctgry_indstk;
  strcpy(st_cntrct.c_undrlyng, ptr_st_pstn_actn->c_undrlyng);
  strcpy(st_cntrct.c_expry_dt, ptr_st_pstn_actn->c_expry_dt);
  st_cntrct.c_exrc_typ = ptr_st_pstn_actn->c_exrc_typ;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName,"st_usr_prfl.c_cln_mtch_accnt is   |%s|",st_usr_prfl.c_cln_mtch_accnt);
      fn_userlog( c_ServiceName,"st_cntrct.c_xchng_cd is    |%s|",st_cntrct.c_xchng_cd);
      fn_userlog( c_ServiceName,"st_cntrct.c_prd_typ is     |%c|",st_cntrct.c_prd_typ);
      fn_userlog( c_ServiceName,"st_cntrct.c_ctgry_indstk is|%c|",st_cntrct.c_ctgry_indstk);
      fn_userlog( c_ServiceName," st_cntrct.c_undrlyng is   |%s|",st_cntrct.c_undrlyng);
      fn_userlog( c_ServiceName," st_cntrct.c_expry_dt is   |%s|",st_cntrct.c_expry_dt);
      fn_userlog( c_ServiceName," st_cntrct.c_exrc_typ is   |%c|",st_cntrct.c_exrc_typ);
    }

    EXEC SQL
        SELECT FFP_OPNPSTN_QTY,
               FFP_OPNPSTN_FLW,
               FFP_OPNPSTN_VAL
          INTO :l_opnpstn_qty,
               :c_opnpstn_flw,
               :d_org_opn_val
          FROM FFP_FO_FUTURES_PSTN
        WHERE  FFP_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
          AND  FFP_XCHNG_CD       = :st_cntrct.c_xchng_cd
          AND  FFP_PRDCT_TYP      = :st_cntrct.c_prd_typ
          AND  FFP_INDSTK         = :st_cntrct.c_ctgry_indstk
          AND  FFP_UNDRLYNG       = :st_cntrct.c_undrlyng
          AND  FFP_EXPRY_DT       = :st_cntrct.c_expry_dt
          AND  FFP_EXER_TYP       = :st_cntrct.c_exrc_typ;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S32355", SQLMSG, c_errmsg.arr  );
        return -1;
       }

     if (l_opnpstn_qty > 0 )
     {
       i_returncode = fn_buy_opnpstn(c_ServiceName,
                                    st_usr_prfl.c_cln_mtch_accnt,
                                    st_cntrct.c_xchng_cd,
                                    st_cntrct.c_undrlyng,
                                    st_cntrct.c_expry_dt,
                                    st_cntrct.c_exrc_typ,
                                    st_cntrct.c_prd_typ,
																		&d_avg_pr);

        if(i_returncode == -1)
        {
          fn_errlog( c_ServiceName, "S32360", LIBMSG, c_errmsg.arr  );
          return -1;
        }
      }
      else if ( l_opnpstn_qty < 0 )
      {
        i_returncode = fn_sell_opnpstn(c_ServiceName,
                                      st_usr_prfl.c_cln_mtch_accnt,
                                      st_cntrct.c_xchng_cd,
                                      st_cntrct.c_undrlyng,
                                      st_cntrct.c_expry_dt,
                                      st_cntrct.c_exrc_typ,
                                      st_cntrct.c_prd_typ,
																			&d_avg_pr);
        if(i_returncode == -1)
        {
          fn_errlog( c_ServiceName, "S32365", LIBMSG, c_errmsg.arr  );
          return -1;
        }
      }
      else if ( l_opnpstn_qty == 0 )
      {
         d_avg_pr = 0.0;
        /***
        i_returncode = fn_sqroff_pstn (c_ServiceName,
                                    st_usr_prfl.c_cln_mtch_accnt,
                                    st_cntrct.c_xchng_cd,
                                    st_cntrct.c_undrlyng,
                                    st_cntrct.c_expry_dt,
                                    st_cntrct.c_exrc_typ,
                                    st_cntrct.c_prd_typ);

        if(i_returncode == -1)
        {
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }***/
      }

    *d_prtfl_avgprc = d_avg_pr;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName,"Average prize is  |%lf|",d_prtfl_avgprc);
    }

}

int fn_buy_opnpstn(char *c_ServiceName,
                   char *c_cln_mtch_accnt,
                   char *c_xchng_cd,
                   char *c_undrlyng,
                   char *c_expry_dt,
                   char c_exrc_typ,
                   char c_prdct_typ,
									 double *d_avg_pr)
{

  sql_cursor trd_cursor;

  varchar c_trd_dt [ LEN_DATE ];
  varchar c_errmsg[256];

  long l_tot_sell_qty_m = 0;
  long l_tot_sell_qty_h = 0;
  double d_sell_val_m = 0;
  double d_sell_val_h = 0;
  double d_sell_val = 0;
  double d_buy_val = 0;
  double d_opn_buy_val = 0;
  double d_uncrst_prft = 0;
  long l_tot_sell_qty = 0;
  long int li_uncrst_qty = 0;
  long int li_exctd_qty = 0 ;
  long int li_exctd_rt = 0 ;

  long int li_qty_bal = 0;
  long int li_cum_exctd_qty = 0;
  long int li_net_qty_bal = 0;
  double d_net_avg_rt = 0;

  double d_frsh_brk = 0.0 ;
  double d_cvr_brk = 0.0 ;

  char c_sell_flw = 'S';
  char c_buy_flw  = 'B';
  long int li_bal_qty = 0 ;
  long int li_crst_qty = 0 ;

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Inside Function fn_buy_opnpstn");
  }

  if( DEBUG_MSG_LVL_5 )
  {
    fn_userlog(c_ServiceName,"Match Account Is ;%s:",c_cln_mtch_accnt);
    fn_userlog(c_ServiceName,"Exchnage Code Is :%s:",c_xchng_cd);
    fn_userlog(c_ServiceName,"Product Type Is :%c:",c_prdct_typ);
    fn_userlog(c_ServiceName,"Expiry Date Is :%s:",c_expry_dt);
    fn_userlog(c_ServiceName,"Exercise Type Is :%c:",c_exrc_typ);
    fn_userlog(c_ServiceName,"Underlying Is :%s:",c_undrlyng);
  }


  EXEC SQL
        SELECT  NVL ( SUM ( FTD_EXCTD_QTY ), 0),
                NVL ( SUM ( ( FTD_EXCTD_QTY * FTD_EXCTD_RT ) -
                            NVL ( FTD_FRS_BRKG,0 )           -
                            NVL ( FTD_CVR_BRKG,0 )             ), 0 )
        INTO    :l_tot_sell_qty_m,
                :d_sell_val_m
        FROM    FTD_FO_TRD_DTLS
        WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
        AND     FTD_XCHNG_CD        = :c_xchng_cd
        AND     FTD_PRDCT_TYP = :c_prdct_typ
        AND     FTD_UNDRLYNG        = :c_undrlyng
        AND     FTD_EXPRY_DT        = :c_expry_dt
        AND     FTD_EXER_TYP        = :c_exrc_typ
        AND     FTD_TRD_FLW         = :c_sell_flw ;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S32370", SQLMSG, c_errmsg.arr  );
        return -1;
      }

   EXEC SQL
        SELECT  NVL ( SUM ( FTD_EXCTD_QTY ), 0),
                NVL ( SUM ( ( FTD_EXCTD_QTY * FTD_EXCTD_RT ) -
                            NVL ( FTD_FRS_BRKG,0 )           -
                            NVL ( FTD_CVR_BRKG,0 )             ), 0 )
        INTO    :l_tot_sell_qty_h,
                :d_sell_val_h
        FROM    FTD_FO_TRD_DTLS_HSTRY
        WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
        AND     FTD_XCHNG_CD        = :c_xchng_cd
        AND     FTD_PRDCT_TYP = :c_prdct_typ
        AND     FTD_UNDRLYNG        = :c_undrlyng
        AND     FTD_EXPRY_DT        = :c_expry_dt
        AND     FTD_EXER_TYP        = :c_exrc_typ
        AND     FTD_TRD_FLW         = :c_sell_flw ;

   if ( SQLCODE != 0 )
   {
    fn_errlog( c_ServiceName, "S32375", SQLMSG, c_errmsg.arr  );
    return -1;
   }

    l_tot_sell_qty = l_tot_sell_qty_m + l_tot_sell_qty_h;
    d_sell_val = d_sell_val_m + d_sell_val_h;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Total Sell Qty Is ;%ld:",l_tot_sell_qty);
      fn_userlog(c_ServiceName,"Total Sell Value Is ;%lf:",d_sell_val);
    }

    EXEC SQL ALLOCATE :trd_cursor;

    EXEC SQL  EXECUTE
          BEGIN
            OPEN  :trd_cursor FOR
              SELECT FTD_EXCTD_QTY,
                     FTD_EXCTD_RT,
                     NVL (FTD_FRS_BRKG, 0),
                     NVL (FTD_CVR_BRKG, 0),
                     FTD_TRD_DT
              FROM FTD_FO_TRD_DTLS
              WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
              AND     FTD_XCHNG_CD        = :c_xchng_cd
              AND     FTD_PRDCT_TYP = :c_prdct_typ
              AND     FTD_UNDRLYNG        = :c_undrlyng
              AND     FTD_EXPRY_DT        = :c_expry_dt
              AND     FTD_EXER_TYP        = :c_exrc_typ
              AND     FTD_TRD_FLW         = :c_buy_flw
              UNION ALL
              SELECT FTD_EXCTD_QTY,
                     FTD_EXCTD_RT,
                     NVL (FTD_FRS_BRKG, 0),
                     NVL (FTD_CVR_BRKG, 0),
                     FTD_TRD_DT
              FROM FTD_FO_TRD_DTLS_HSTRY
              WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
              AND     FTD_XCHNG_CD        = :c_xchng_cd
              AND     FTD_PRDCT_TYP = :c_prdct_typ
              AND     FTD_UNDRLYNG        = :c_undrlyng
              AND     FTD_EXPRY_DT        = :c_expry_dt
              AND     FTD_EXER_TYP        = :c_exrc_typ
              AND     FTD_TRD_FLW         = :c_buy_flw
              ORDER BY 5;
          END;
        END-EXEC;

      li_bal_qty = l_tot_sell_qty;

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Initial balance Qty Is ;%ld:",li_bal_qty);
      }

    while ( 1 )
      {
        li_qty_bal = 0;

        EXEC SQL
          FETCH :trd_cursor
          INTO :li_exctd_qty,
               :li_exctd_rt,
               :d_frsh_brk,
               :d_cvr_brk,
               :c_trd_dt;
        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {

            break;
          }
          else
          {
            fn_errlog( c_ServiceName, "S32380", SQLMSG, c_errmsg.arr  );
            EXEC SQL CLOSE :trd_cursor;
            EXEC SQL FREE :trd_cursor;

            return -1;
          }
        }

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"While loop Executed Qty Is ;%ld:",li_exctd_qty);
          fn_userlog(c_ServiceName,"While loop Executed Rate Is ;%ld:",li_exctd_rt);
          fn_userlog(c_ServiceName,"While loop Balance Qty Is ;%ld:",li_bal_qty);
        }

      if ( li_bal_qty > 0 )
        {
          if(DEBUG_MSG_LVL_5)
          {
            fn_userlog(c_ServiceName,"Inside li_bal_qty > 0");
            fn_userlog(c_ServiceName,"HERE li_bal_qty is :%ld:",li_bal_qty);
            fn_userlog(c_ServiceName,"HERE li_exctd_qty is :%ld:",li_exctd_qty);
          }

          li_crst_qty = fn_minl ( li_bal_qty, li_exctd_qty );
          d_buy_val = d_buy_val + ( (double) li_crst_qty * (double)  li_exctd_rt ) +
                      d_frsh_brk + d_cvr_brk;

          li_bal_qty = li_bal_qty - li_crst_qty;

          if ( li_bal_qty == 0 )
          {
            li_uncrst_qty = li_exctd_qty - li_crst_qty;
            d_opn_buy_val = d_opn_buy_val  + ( (double) li_uncrst_qty * (double) li_exctd_rt ) +
                            d_frsh_brk + d_cvr_brk;
          }
        }
        else
        {
          if(DEBUG_MSG_LVL_5)
          {
            fn_userlog(c_ServiceName,"Inside li_bal_qty = 0");
            fn_userlog(c_ServiceName,"Executed Qty Is :%ld:",li_exctd_qty);
          }

          li_uncrst_qty = li_uncrst_qty + li_exctd_qty;
          d_opn_buy_val = d_opn_buy_val  + ( (double) li_exctd_qty * (double)  li_exctd_rt ) +
                          d_frsh_brk + d_cvr_brk;

          if(DEBUG_MSG_LVL_5)
          {
            fn_userlog(c_ServiceName,"Uncrystalised Qty Is :%ld:",li_uncrst_qty);
          }
        }

        li_cum_exctd_qty = li_cum_exctd_qty + li_exctd_qty;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Cumulative Executed Qty Is ;%ld:",li_cum_exctd_qty);
        }

        if( (li_cum_exctd_qty  - l_tot_sell_qty) > 0)
        {
          li_qty_bal = fn_minl(li_cum_exctd_qty  - l_tot_sell_qty, li_exctd_qty);
          li_net_qty_bal = li_net_qty_bal + li_qty_bal;
        }

        if ( li_qty_bal > 0 )
        {
          d_net_avg_rt = d_net_avg_rt + (double) li_qty_bal * (double) li_exctd_rt;
        }

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"While loop Net Avg Rate Is ;%lf:",d_net_avg_rt);
          fn_userlog(c_ServiceName,"While loop Net Qty Bal Is ;%ld:",li_net_qty_bal);
        }
      }

      EXEC SQL CLOSE :trd_cursor;
      EXEC SQL FREE :trd_cursor;

      *d_avg_pr = d_net_avg_rt/(double)li_net_qty_bal;

      if( DEBUG_MSG_LVL_0 )
      {
        fn_userlog(c_ServiceName,"Avgtrd Pr=============d_avg_pr is :%lf:",*d_avg_pr);
      }
}

int fn_sell_opnpstn(char *c_ServiceName,
                   char *c_cln_mtch_accnt,
                   char *c_xchng_cd,
                   char *c_undrlyng,
                   char *c_expry_dt,
                   char c_exrc_typ,
                   char c_prdct_typ,
									 double *d_avg_pr)
{

  sql_cursor trd_cursor;

  double d_sell_val = 0;
  double d_buy_val = 0;
  double d_opn_sell_val = 0;
  double d_uncrst_prft = 0;
  double d_crst_prft = 0;
  long int li_uncrst_qty = 0;

  long int li_qty_bal = 0;
  long int li_cum_exctd_qty = 0;
  long int li_net_qty_bal = 0;
  double d_net_avg_rt = 0;
  long int li_exctd_qty = 0 ;
  long int li_exctd_rt = 0 ;

  char c_sell_flw = 'S';
  char c_buy_flw  = 'B';
  varchar c_errmsg[256];

  double d_frsh_brk = 0.0 ;
  double d_cvr_brk = 0.0 ;
  varchar c_trd_dt [ LEN_DATE ];

  long int l_tot_buy_qty_m = 0 ;
  double d_buy_val_m = 0.0 ;
  long int l_tot_buy_qty_h = 0;
  double d_buy_val_h = 0.0 ;
  long int l_tot_buy_qty = 0 ;
  double d_opn_buy_val = 0.0 ;
  long int li_bal_qty = 0 ;
  long int li_crst_qty = 0 ;

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Inside Function fn_sell_opnpstn ");
  }

  if( DEBUG_MSG_LVL_5 )
  {
    fn_userlog(c_ServiceName,"Match Account Is ;%s:",c_cln_mtch_accnt);
    fn_userlog(c_ServiceName,"Exchnage Code Is :%s:",c_xchng_cd);
    fn_userlog(c_ServiceName,"Product Type Is :%c:",c_prdct_typ);
    fn_userlog(c_ServiceName,"Expiry Date Is :%s:",c_expry_dt);
    fn_userlog(c_ServiceName,"Exercise Type Is :%c:",c_exrc_typ);
    fn_userlog(c_ServiceName,"Underlying Is :%s:",c_undrlyng);
  }

  EXEC SQL
    SELECT  NVL ( SUM ( FTD_EXCTD_QTY ), 0),
            NVL ( SUM ( ( FTD_EXCTD_QTY * FTD_EXCTD_RT ) -
                            NVL ( FTD_FRS_BRKG,0 )           -
                            NVL ( FTD_CVR_BRKG,0 )             ), 0 )
    INTO    :l_tot_buy_qty_m,
            :d_buy_val_m
    FROM    FTD_FO_TRD_DTLS
    WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
    AND     FTD_XCHNG_CD        = :c_xchng_cd
    AND     FTD_PRDCT_TYP = :c_prdct_typ
    AND     FTD_UNDRLYNG        = :c_undrlyng
    AND     FTD_EXPRY_DT        = :c_expry_dt
    AND     FTD_EXER_TYP        = :c_exrc_typ
    AND     FTD_TRD_FLW         = :c_buy_flw ;

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S32385", SQLMSG, c_errmsg.arr  );
      return -1;
    }

  EXEC SQL
    SELECT  NVL ( SUM ( FTD_EXCTD_QTY ), 0),
            NVL ( SUM ( ( FTD_EXCTD_QTY * FTD_EXCTD_RT ) -
                            NVL ( FTD_FRS_BRKG,0 )           -
                            NVL ( FTD_CVR_BRKG,0 )             ), 0 )
    INTO    :l_tot_buy_qty_h,
            :d_buy_val_h
    FROM    FTD_FO_TRD_DTLS_HSTRY
    WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
    AND     FTD_XCHNG_CD        = :c_xchng_cd
    AND     FTD_PRDCT_TYP = :c_prdct_typ
    AND     FTD_UNDRLYNG        = :c_undrlyng
    AND     FTD_EXPRY_DT        = :c_expry_dt
    AND     FTD_EXER_TYP        = :c_exrc_typ
    AND     FTD_TRD_FLW         = :c_buy_flw ;

   if ( SQLCODE != 0 )
   {
     fn_errlog( c_ServiceName, "S32390", SQLMSG, c_errmsg.arr  );
     return -1;
   }

   l_tot_buy_qty = l_tot_buy_qty_m + l_tot_buy_qty_h;
   d_buy_val = d_buy_val_m + d_buy_val_h;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Total Buy Qty Is ;%ld:",l_tot_buy_qty);
    fn_userlog(c_ServiceName,"Total Buy Value Is ;%lf:",d_buy_val);
  }

   EXEC SQL ALLOCATE :trd_cursor;

   EXEC SQL  EXECUTE
          BEGIN
            OPEN  :trd_cursor FOR
              SELECT FTD_EXCTD_QTY,
                     FTD_EXCTD_RT,
                     NVL (FTD_FRS_BRKG, 0),
                     NVL (FTD_CVR_BRKG, 0),
                     FTD_TRD_DT
              FROM FTD_FO_TRD_DTLS
              WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
              AND     FTD_XCHNG_CD        = :c_xchng_cd
              AND     FTD_PRDCT_TYP = :c_prdct_typ
              AND     FTD_UNDRLYNG        = :c_undrlyng
              AND     FTD_EXPRY_DT        = :c_expry_dt
              AND     FTD_EXER_TYP        = :c_exrc_typ
              AND     FTD_TRD_FLW         = :c_sell_flw
              UNION ALL
              SELECT FTD_EXCTD_QTY,
                     FTD_EXCTD_RT,
                     NVL (FTD_FRS_BRKG, 0),
                     NVL (FTD_CVR_BRKG, 0),
                     FTD_TRD_DT
              FROM FTD_FO_TRD_DTLS_HSTRY
              WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
              AND     FTD_XCHNG_CD        = :c_xchng_cd
              AND     FTD_PRDCT_TYP = :c_prdct_typ
              AND     FTD_UNDRLYNG        = :c_undrlyng
              AND     FTD_EXPRY_DT        = :c_expry_dt
              AND     FTD_EXER_TYP        = :c_exrc_typ
              AND     FTD_TRD_FLW         = :c_sell_flw
              ORDER BY 5;
          END;
        END-EXEC;

      li_bal_qty = l_tot_buy_qty;

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Initial balance Qty Is ;%ld:",li_bal_qty);
      }
    while ( 1 )
      {
      li_qty_bal = 0;

        EXEC SQL
          FETCH :trd_cursor
          INTO :li_exctd_qty,
               :li_exctd_rt,
               :d_frsh_brk,
               :d_cvr_brk,
               :c_trd_dt;
        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
            break;
          }
          else
          {
            fn_errlog( c_ServiceName, "S32395", SQLMSG, c_errmsg.arr  );
            EXEC SQL CLOSE :trd_cursor;
            EXEC SQL FREE :trd_cursor;

          }
        }

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"While loop Executed Qty Is ;%ld:",li_exctd_qty);
          fn_userlog(c_ServiceName,"While loop Executed Rate Is ;%ld:",li_exctd_rt);
          fn_userlog(c_ServiceName,"While loop Balance Qty Is ;%ld:",li_bal_qty);
        }

        if ( li_bal_qty > 0 )
        {
          li_crst_qty = fn_minl ( li_bal_qty, li_exctd_qty );
          d_sell_val = d_sell_val + ( (double) li_crst_qty * (double)  li_exctd_rt ) -
                      d_frsh_brk - d_cvr_brk;
          li_bal_qty = li_bal_qty - li_crst_qty;

          if ( li_bal_qty == 0 )
          {
            if(DEBUG_MSG_LVL_5)
            {
              fn_userlog(c_ServiceName,"Inside SELL li_bal_qty == 0 ");
            }

            li_uncrst_qty = li_exctd_qty - li_crst_qty;
            d_opn_sell_val = d_opn_sell_val  + ( (double) li_uncrst_qty * (double) li_exctd_rt ) -
                             d_frsh_brk - d_cvr_brk;
          }
        }
         else
        {
          li_uncrst_qty = li_uncrst_qty + li_exctd_qty;
          d_opn_sell_val = d_opn_sell_val + ( (double) li_exctd_qty * (double) li_exctd_rt ) -
                          d_frsh_brk - d_cvr_brk;
        }

        li_cum_exctd_qty = li_cum_exctd_qty + li_exctd_qty;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Cumulative Executed Qty Is ;%ld:",li_cum_exctd_qty);
        }

        if( (li_cum_exctd_qty  - l_tot_buy_qty) > 0)
        {
          li_qty_bal = fn_minl(li_cum_exctd_qty  - l_tot_buy_qty, li_exctd_qty);
          li_net_qty_bal = li_net_qty_bal + li_qty_bal;
        }

        if ( li_qty_bal > 0 )
        {
          d_net_avg_rt = d_net_avg_rt + (double) li_qty_bal * (double) li_exctd_rt;
        }

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"While loop Net Avg Rate Is ;%lf:",d_net_avg_rt);
          fn_userlog(c_ServiceName,"While loop Net Qty Bal Is ;%ld:",li_net_qty_bal);
        }
      }

  EXEC SQL CLOSE :trd_cursor;
  EXEC SQL FREE :trd_cursor;

  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"d_sell_val [%lf]",d_sell_val);
    fn_userlog(c_ServiceName,"d_buy_val [%lf]",d_buy_val);
    fn_userlog(c_ServiceName,"d_opn_sell_val [%lf]",d_opn_sell_val);
    fn_userlog(c_ServiceName,"li_uncrst_qty [%ld]",li_uncrst_qty);
  }

  *d_avg_pr = d_net_avg_rt/(double)li_net_qty_bal;

  if( DEBUG_MSG_LVL_0 )
  {
    fn_userlog(c_ServiceName,"Avgtrd Pr=============d_avg_pr is :%lf:",*d_avg_pr);
  }
}

/******* Ver 6.0 Ends *****/
/*** added in ver 6.3 ***/
int fn_unmark_lodm_rej_nspn( char *c_ServiceName,
                        struct vw_pstn_actn *ptr_st_pstn_actn,
                        char *c_err_msg
                       )
{
    if(DEBUG_MSG_LVL_3)
    { 
     fn_userlog( c_ServiceName, "MATCH :%s:",ptr_st_pstn_actn->c_cln_mtch_accnt);
     fn_userlog( c_ServiceName, "EXCH :%s:",ptr_st_pstn_actn->c_xchng_cd);
     fn_userlog( c_ServiceName, "PRDCT TYP :%c:",ptr_st_pstn_actn->c_prd_typ);
     fn_userlog( c_ServiceName, "OPT TYP :%c:",ptr_st_pstn_actn->c_opt_typ);
     fn_userlog( c_ServiceName, "EXER TYP :%c:",ptr_st_pstn_actn->c_exrc_typ);
     fn_userlog( c_ServiceName, "STRIKE :%ld:",ptr_st_pstn_actn->l_strike_prc);
     fn_userlog( c_ServiceName, "UNDERLYING :%s:",ptr_st_pstn_actn->c_undrlyng);
     fn_userlog( c_ServiceName, "EXPIRY :%s:",ptr_st_pstn_actn->c_expry_dt);
    } 

if( ptr_st_pstn_actn->c_prd_typ == 'O' )
{

        EXEC SQL
            UPDATE FOP_FO_OPTIONS_PSTN
               SET FOP_MTM_FLG = 'O'
         WHERE  FOP_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
         AND    FOP_CLM_MTCH_ACCNT =:ptr_st_pstn_actn->c_cln_mtch_accnt
         AND    FOP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
         AND    FOP_OPT_TYP         = :ptr_st_pstn_actn->c_opt_typ
         AND    FOP_EXER_TYP        = :ptr_st_pstn_actn->c_exrc_typ
         AND    FOP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
         AND    FOP_EXPRY_DT        = :ptr_st_pstn_actn->c_expry_dt
         AND    FOP_STRK_PRC        = :ptr_st_pstn_actn->l_strike_prc
         AND    FOP_MTM_FLG         = 'D';
     if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
     {
      fn_errlog( c_ServiceName, "L31245", SQLMSG,c_err_msg );
      return FAILURE;
     }
     if( SQLCODE == NO_DATA_FOUND )
     {
       fn_userlog( c_ServiceName, "INSIDE NDF 1");
     }

       EXEC SQL
       UPDATE FPM_FOLODM_PRCS_MSTR
          SET FPM_PRCS_FLG='F',
              FPM_PRCS_DT=SYSDATE
        WHERE FPM_CLM_MTCH_ACCNT=:ptr_st_pstn_actn->c_cln_mtch_accnt
          AND FPM_XCHNG_CD=:ptr_st_pstn_actn->c_xchng_cd
          AND FPM_PRDCT_TYP=:ptr_st_pstn_actn->c_prd_typ
          AND FPM_INDSTK= :ptr_st_pstn_actn->c_ctgry_indstk
          AND FPM_UNDRLYNG= :ptr_st_pstn_actn->c_undrlyng
          AND FPM_EXPRY_DT= :ptr_st_pstn_actn->c_expry_dt
          AND FPM_EXER_TYP= :ptr_st_pstn_actn->c_exrc_typ
          AND FPM_OPT_TYP= :ptr_st_pstn_actn->c_opt_typ
          AND FPM_STRK_PRC= :ptr_st_pstn_actn->l_strike_prc;

     if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
     {
      fn_errlog( c_ServiceName, "L31250", SQLMSG,c_err_msg );
      return FAILURE;
     }
     if( SQLCODE == NO_DATA_FOUND )
     {
       fn_userlog( c_ServiceName, "INSIDE NDF 2");
     }
  }
return 0;
}

/*** Added in VER 6.7 : Function to call service for real time reporting of margin to exchnage ***/

int fn_upd_nrmlmrgn_reporting(char *c_clm_mtch_accnt,
                          char *c_xchng_cd,
                          char *c_ServiceName,
                          char *c_err_msg
                         )
{
  char  c_mrkt_stts='\0';
  char	c_rptng_stts='\0';
	char  c_ucc_cd[13] = "\0";

  int i_returncode = 0.0;
  int i_cnt = 0.0;
  int i_err[2] = {0.0};

  FBFR32 *ptr_fml_ibuf;

  if(DEBUG_MSG_LVL_5)
    fn_userlog(c_ServiceName," fn_upd_nrmlmrgn_reporting : Working on match id :%s: and exchange :%s: ", c_clm_mtch_accnt, c_xchng_cd);


  /*** Checking market status and reporting flag value : As function should call service only on days when trading happens ***/

  MEMSET(c_ucc_cd);

  EXEC SQL
  SELECT  EXG_CRRNT_STTS, 
					NVL(FSP_REALTM_RPTNG, 'N') 
  INTO  :c_mrkt_stts,
				:c_rptng_stts
  FROM  EXG_XCHNG_MSTR, FSP_FO_SYSTM_PRMTR
  WHERE EXG_XCHNG_CD = :c_xchng_cd;

  if ( SQLCODE != 0 )
  {
   fn_userlog(c_ServiceName," fn_upd_nrmlmrgn_reporting : Error while fetching status of market :%s:", c_xchng_cd);
   fn_errlog( c_ServiceName, "L31255",SQLMSG,c_err_msg);
   return 0;
  }

  if(DEBUG_MSG_LVL_5)
    fn_userlog(c_ServiceName," fn_upd_nrmlmrgn_reporting : Status and reporting flag value of exchnage :%s: are :%c:, :%c: respectively. ", c_xchng_cd, c_mrkt_stts, c_rptng_stts);

  if( c_mrkt_stts == 'O' && c_rptng_stts == 'Y' ) /*** Condition when market is open and reporting flag is 'Y; : starts here ***/
  {

    /*** Fetching UCC code of the client for calling service ***/

    EXEC SQL
    SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
    INTO  :c_ucc_cd
    FROM  CLM_CLNT_MSTR
    WHERE CLM_MTCH_ACCNT = :c_clm_mtch_accnt;

    if ( SQLCODE != 0 )
    {
      fn_userlog(c_ServiceName," fn_upd_nrmlmrgn_reporting : Error while fetching UCC code for :%s:", c_clm_mtch_accnt);
      fn_errlog( c_ServiceName, "L31260",SQLMSG,c_err_msg);
      return 0;
    }

    rtrim(c_ucc_cd);
    rtrim(c_clm_mtch_accnt);

    if(DEBUG_MSG_LVL_5)
      fn_userlog(c_ServiceName," fn_upd_nrmlmrgn_reporting : Match id :%s: have UCC code :%s:", c_clm_mtch_accnt, c_ucc_cd);

    /*** Allocating memory to buffer to be used for calling service ***/

    ptr_fml_ibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

    if ( ptr_fml_ibuf == NULL )
    {
      fn_userlog(c_ServiceName," fn_upd_mrgn_reporting : Error while allocating memory to input buffer.");
      fn_errlog(c_ServiceName, "L31265", TPMSG, c_err_msg);
      return 0;
    }

    /*** Storing input values in buffer FML for service call ***/

    i_err[0] = Fadd32(ptr_fml_ibuf, FFO_EBA_MTCH_ACT_NO, (char *)c_clm_mtch_accnt, 0);
    i_err[1] = Fadd32(ptr_fml_ibuf, FFO_CLNT_DPID, (char * )c_ucc_cd, 0);

    for(i_cnt=0;i_cnt<2;i_cnt++)
    {
      if(i_err[i_cnt] == -1)
      {
        fn_userlog(c_ServiceName," fn_upd_mrgn_reporting : Error while packing variable.");
        fn_errlog( c_ServiceName,"L81095", FMLMSG, c_err_msg);
        tpfree((char *)ptr_fml_ibuf);
        return 0;
      }
    }

    /*** Calling service : sfo_coll_alloc -- This service will compute an dreport the margin value ***/

    i_returncode =  tpacall( "SFO_COLL_ALLOC", (char*)(ptr_fml_ibuf), 0, TPNOTRAN|TPNOREPLY  );

    if ( i_returncode != SUCC_BFR )
    {
      fn_userlog(c_ServiceName," fn_upd_nrmlmrgn_reporting : Error while calling service : SFO_COLL_ALLOC :.");
      fn_errlog( c_ServiceName, "L31270", LIBMSG, c_err_msg  );
      tpfree((char *)ptr_fml_ibuf);
      return 0;  /*** returned '0', as functionality of service calling this function shouldn't be affected due to error in service
                      sfo_coll_alloc. ***/
    }
		tpfree((char *)ptr_fml_ibuf);
  }       /*** Else condition for market open case : ends here ***/
	else
	{
		if ( c_mrkt_stts != 'O' )
  	{
    	if(DEBUG_MSG_LVL_3)
      	fn_userlog(c_ServiceName," fn_upd_nrmlmrgn_reporting : Market is not open, so service call is not required.");
  	}
		else if ( c_rptng_stts != 'Y' )
		{
			if(DEBUG_MSG_LVL_3)
        fn_userlog(c_ServiceName," fn_upd_nrmlmrgn_reporting : Reporting flag is noy 'Y', so service call is not required.");
		}
		return 0;
	}

  fn_userlog(c_ServiceName," Function :fn_upd_nrmlmrgn_reporting: ends successfully.");
  return 0;

}    /*** Function : fn_upd_nrmlmrgn_reporting -- ends here ***/

/*** VER 6.7 ends here ***/

/**** Ver 6.8 Starts ****/

int fn_add_gttleg_cep(
        char *c_ServiceName,
        char* c_clm_mtch_acnt,
        char* c_xchng_cd,
        char c_prdct_typ,
        char c_ctgry_indstk,
        char* c_udrlyng,
        char* c_epry_dt,
        char c_opt_typ,
        long l_str_prc,
        char c_ord_flw,
        char c_leg_typ,
        double d_lmt_rt,
        long l_trg_prc,
        char* c_gtt_ref,
        char* c_err_msg
)
{
        int i_trnsctn = 0;
        int i_returncode = 0;

        char c_cntrct_desc[51];
        char c_sem_map[50];

				if(DEBUG_MSG_LVL_3)
				{
        	fn_userlog( c_ServiceName, "fn_add_gttleg_cep begins");
				}
       /**
        if(DEBUG_MSG_LVL_3)
        {
                fn_userlog( c_ServiceName, "fn_add_gttleg_cep: transaction begins");
        }

        i_trnsctn = fn_begintran(c_ServiceName, c_err_msg);
        if (i_trnsctn == -1)
        {
                fn_userlog(c_ServiceName, "fn_add_gttleg_cep:Failed in initial begin transaction");
                fn_errlog(c_ServiceName, "L31275", TPMSG, c_err_msg);
                return FAILURE;
        }**/

        MEMSET(c_cntrct_desc);
        MEMSET(c_sem_map);

        EXEC SQL
                SELECT
                SEM_MAP_VL,
                SEM_MAP_VL||DECODE(:c_ctgry_indstk,'S','EQ','')||'~'||:c_prdct_typ||':'||:c_epry_dt || decode(:c_prdct_typ, 'O', ':'||:c_opt_typ||'E' || ':' ||(:l_str_prc/100), '') CNTRCT_DESC
                INTO :c_sem_map, :c_cntrct_desc
                FROM SEM_STCK_MAP
                WHERE SEM_STCK_CD = :c_udrlyng
                AND SEM_ENTTY=decode(:c_xchng_cd,'BFO',decode(:c_ctgry_indstk,'I','12',6),'NFO',decode(:c_ctgry_indstk,'I','12',1));



        if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
        {
                fn_errlog( c_ServiceName, "L31280",SQLMSG,c_err_msg);
                return FAILURE;
        }


				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName, "c_clm_mtch_acnt is :%s:", c_clm_mtch_acnt);
        	fn_userlog(c_ServiceName, "c_xchng_cd is :%s:", c_xchng_cd);
        	fn_userlog(c_ServiceName, "c_prdct_typ is :%c:", c_prdct_typ);
        	fn_userlog(c_ServiceName, "c_ctgry_indstk is :%c:", c_ctgry_indstk);
        	fn_userlog(c_ServiceName, "c_udrlyng is :%s:", c_udrlyng);
        	fn_userlog(c_ServiceName, "c_epry_dt is :%s:", c_epry_dt);
        	fn_userlog(c_ServiceName, "c_opt_typ is :%c:", c_opt_typ);
        	fn_userlog(c_ServiceName, "l_str_prc is :%ld:", l_str_prc);
        	fn_userlog(c_ServiceName, "c_ord_flw is :%c:", c_ord_flw);
        	fn_userlog(c_ServiceName, "c_leg_typ is :%c:", c_leg_typ);
        	fn_userlog(c_ServiceName, "c_gtt_ref is :%s:", c_gtt_ref);
        	fn_userlog(c_ServiceName, "d_lmt_rt is :%ld:", d_lmt_rt);
        	fn_userlog(c_ServiceName, "l_trg_prc is :%ld:", l_trg_prc);
				}
        rtrim(c_cntrct_desc);
        rtrim(c_sem_map);

        EXEC SQL
                UPDATE FGT_FO_GTT_TRGDTLS
                SET
                        FGT_LMT_RT = :d_lmt_rt,
                        FGT_TRGR_RT = :l_trg_prc
                WHERE
                        FGT_CLM_MTCH_ACCNT = :c_clm_mtch_acnt
                        AND FGT_XCHNG_CD = :c_xchng_cd
                        AND FGT_PRDCT_TYP = :c_prdct_typ
                        AND FGT_INDSTK = :c_ctgry_indstk
                        AND FGT_UNDRLYNG = :c_udrlyng
                        AND FGT_EXPRY_DT = :c_epry_dt
                        AND FGT_OPT_TYP = :c_opt_typ
                        AND FGT_STRK_PRC = :l_str_prc
                        AND FGT_ORDR_FLW = :c_ord_flw
                        AND FGT_LEG_TYP = :c_leg_typ
                        AND FGT_GTT_REF = :c_gtt_ref;

        if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
        {
                fn_errlog( c_ServiceName, "L31285",SQLMSG,c_err_msg);
                return FAILURE;
        }

        if(SQLCODE == NO_DATA_FOUND)
        {
                EXEC SQL
                        INSERT INTO FGT_FO_GTT_TRGDTLS(
                                FGT_CLM_MTCH_ACCNT,
                                FGT_XCHNG_CD,
                                FGT_PRDCT_TYP,
                                FGT_INDSTK,
                                FGT_UNDRLYNG,
                                FGT_EXPRY_DT,
                                FGT_OPT_TYP,
                                FGT_STRK_PRC,
                                FGT_ORDR_FLW,
                                FGT_CNTRCT_DESC,
                                FGT_LMT_RT,
                                FGT_TRGR_RT,
                                FGT_SEQUENCE,
                                FGT_LEG_TYP,
                                FGT_STATUS,
                                FGT_GTT_REF,
                                FGT_SEM_VAL
                        )
                        VALUES (
                                :c_clm_mtch_acnt,
                                :c_xchng_cd,
                                :c_prdct_typ,
                                :c_ctgry_indstk,
                                :c_udrlyng,
                                :c_epry_dt,
                                :c_opt_typ,
                                :l_str_prc,
                                :c_ord_flw,
                                :c_cntrct_desc,
                                :d_lmt_rt,
                                :l_trg_prc,
                                SEQ_GTT_TRG.NEXTVAL,
                                :c_leg_typ,
                                'N',
                                :c_gtt_ref,
                                :c_sem_map
                        );



        if ( SQLCODE != 0 )
        {
          fn_userlog(c_ServiceName, "Failed while inserting gtt detail" );
          fn_errlog( c_ServiceName, "L31290", SQLMSG, c_err_msg);
          return FAILURE;
        }
        }

      /**  i_returncode = fn_committran( c_ServiceName, i_trnsctn, c_err_msg );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "L31295", LIBMSG , c_err_msg );
                return FAILURE;
  }**/

  if(DEBUG_MSG_LVL_2)
  {
    fn_userlog(c_ServiceName, "fn_add_gttleg_cep: leg added succeccfully");
  }

        return SUCCESS;
}




/**** Ver 6.8 Ends ****/
