current problem :
----------------

so , i have created an interface in the golang and implemented that in three structures . this step i have done because 
i was calling the function 'WriteToQueue' to write in the queue. 
"func (MQM *MessageQueueManager) WriteToQueue(mId int, message WriteQueueMessage) int"
Now becasue of the recent updates i have to call the 'send_message_to_queue' function of 'MessageQueue.c' file from 'WriteToQueue' of go.
 
now how will i identify which type of structure i am getting from here "WriteToQueue(mId int, message WriteQueueMessage)"

-------------------------------

so we have to send the one structure in the queue. which will hold the "Li_msg_Type" and "[]byte".


commands :
1. Compile the C files into object files
gcc -c -fPIC Log.c message_queue.c  

2. Create the shared library
gcc -shared -o libmessagequeue.so Log.o message_queue.o

---------------------------------
Recieved Message from queue.

    In Go code :  func (MQM *MessageQueueManager) ReadFromQueue(GlobalQId int) (int64, []byte, int) 

    we are Passing the `GLobal_queue_id` and in return reciving three things (Li_msg , exchange_msg structure , success/fali flag)

    In C Code :  int receive_message_from_queue(int global_queue_id, void *buffer, long *buffer_length) 
    
    we are passing three things global_queue_id,a buffer which will hold the value read from the queue. and the length of the buffer . and it will return success/fail flag.

    ------------------------

    solution : i wanted to set the buffer into one of three structure . and return the values of that structure . so there will be two types of values . Li_msg and the byte array .

    Now the problem is where i am suppose to open that buffer . in c code or in ththego code . 
    If i am going to open that buffer in the c code than i have to identify which type of structure is in that buffer and i have to
    store the buffer value in that structure and return that structure.And then in the go code  i have to copy that c structure in the go structure and retuned the vakues of that go structure. 
   
    If i going to open that buffer in the go code then there also i have copy that into c structure first and then copy the value inthe o structure and return the go strucure.
    
    ---------
    kyuki ham koi bhi input nhi de rahe hain tohame pta kaise chalega size. Ab agar kisi bhi size ka buffur banayenge then that will be prone to errors.  





    ------------------------------------------------------------------------------

    Now the problem i am facing is . i dont know how but my c code is directly accessed by the go code.
    meaning if i am writing something  (some logs). the without making the object file then i am able to access that log.
    and also if i remove "/*
    #cgo CFLAGS: -I.
    #cgo LDFLAGS: -L. -lmessagequeue
    */"

    From "/*
    #cgo CFLAGS: -I.
    #cgo LDFLAGS: -L. -lmessagequeue
    #include "message_queue.h"
    */"

    i am able to access that code (Here i need only header file) .

    i also have doubt on log. so i will print all this using printf.