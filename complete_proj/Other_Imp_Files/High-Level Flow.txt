High-Level Flow:
----------------
We have to read the request data from the order table, change its format, and forward it to the exchange. Then, we receive the response from the exchange and store it in a temporary trade table.

Detailed Flow:
---------------
	Server Operations:
	------------------
	The server will always be up and running.

	In Normal Days:
	---------------

	Every morning, we start the application and be ready in case anything goes wrong with the main website.

	When Main Website Goes Down:
	----------------------------

	* We read the orders from the order table. The order table contains three flags (pending , enqueue , execute) that indicate the status of the trade request.

	* After reading the data from the order table, we change its format to binary.

	* We connect to the gateway, change the byte order of the data to make it suitable for the exchange.

	* We generate the header and body of the request, apply the checksum and encryption, set these into the request buffer, and send it to the exchange (EXG).

	* We prepare the response buffer. If we successfully receive the response, we change its byte order and store it in the response buffer.

	* What Next . . .   ?

Doubts:
----------

1. If we have to read data from the order table using services written in Go, how are we passing this request to TAP? Where do we apply the batch file to continuously listen for new orders?

2. After receiving the response, how are we storing it in the database using the micro-service?

3. What does "starting the application" mean if the server is always up and running? How do we do it?

4. When we read data from the order table, will the data be in binary format?

5. how we will setup the connection of Drop Copy. 




