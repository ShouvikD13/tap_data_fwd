The Rough flow of the file "cln_pack_clnt" is:

    from the main function we will call the "fn_bat_init()" which a service. and in this service initalizing different types of varibles and in the last we are calling different service called "CLN_PACK_CLNT".
    in "CLN_PACK_CLNT" service we 

    ----------------------------------

//structures used in "cln_pack_clnt"

Global structures:
------------------
st_req_q_data 
st_opm_pipe_mstr 

1. strctures in fn_bat_init
----------------------------
vw_sequence


----------------------------------------------------
int fn_bat_init(int argc, char *argv[])
{
	long int li_ord_opn_hnd = 0;
	long int li_ord_cls_hnd = 0;
	long int li_ext_opn_hnd = 0;
	long int li_ext_cls_hnd = 0;
	long int li_exr_opn_hnd = 0;
	long int li_exr_cls_hnd = 0;
	long int li_part_sus_hnd = 0;
	long int li_part_act_hnd = 0;
	long int li_brkr_sus_hnd = 0;
	long int li_brkr_act_hnd = 0;
	long int li_strt_pmp_hnd = 0;
	long int li_stop_pmp_hnd = 0;
	long int li_reco_over_hnd = 0;

	int i_ch_val;
	int i_trnsctn;
	int i_stream_count_opm = 0; /** Ver 3.4 **/
	int i_stream_count = 0;		/** Ver 3.4 **/

	char *ptr_c_tmp;
	char c_ServiceName[33];
	char c_err_msg[256];
	char c_filter1[32];
	char c_reco_mode;
	char c_tm_stmp[LEN_DT];

	struct vw_sequence st_seq;

	EXEC SQL BEGIN DECLARE SECTION;
	char sql_exg_settlor_stts;
	char sql_exg_brkr_stts;
	char sql_exg_crrnt_stts;
	char sql_exg_extnd_mrkt_stts;
	char sql_exg_exrc_mkt_stts;
	EXEC SQL END DECLARE SECTION;

	memset(&st_sndq_packets, '\0', sizeof(st_sndq_packets)); /* Ver 1.1 */
	strcpy(c_ServiceName, "cln_pack_clnt");

	if (argc < 6)
	{
		if (DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,
					   "Usage - cln_snd_clnt <tag qualifier> <Exchange cd> <Pipe id> <ord_lmt_val> <Reco mode> <O-Time stamp>");
		}
		return (-1);
	}

	c_auto_connection = 'N'; /** Ver 2.4 **/

	strcpy(sql_c_pipe_id, argv[3]);
	if (DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName, "The pipe id is :%s:", sql_c_pipe_id);
	}
	c_reco_mode = argv[5][0];
	i_ord_lmt_val = atoi(argv[4]);

	/*** Initialize the Routing string ***/
	fn_init_ddr_pop(argv[3], TRADING_SECTION, COMMON);

	/***  Get IPC key  ***/
	ptr_c_tmp = (char *)fn_get_prcs_spc(c_ServiceName, "SEND_QUEUE");
	if (ptr_c_tmp == NULL)
	{
		fn_errlog(c_ServiceName, "S31095", LIBMSG, c_err_msg);
		return -1;
	}
	i_key = atoi(ptr_c_tmp);

	/** Create the Message Q identifier **/

	if (fn_crt_msg_q(&i_qid, i_key, CLIENT, c_ServiceName, c_err_msg) == -1)
	{
		fn_errlog(c_ServiceName, "S31100", c_err_msg, c_err_msg);
	}

	ptr_c_tmp = (char *)fn_get_prcs_spc(c_ServiceName, "USER_TYPE");

	if (ptr_c_tmp == NULL)
	{
		fn_errlog(c_ServiceName, "L31005", LIBMSG, c_err_msg);
		return -1;
	}

	st_opm_mstr.si_user_typ_glb = atoi(ptr_c_tmp);
	if (DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName, "USER TYPE IS :%d:", st_opm_mstr.si_user_typ_glb);
	}

	/******* Read the PACK VAL from ini file *********/
	ptr_c_tmp = (char *)fn_get_prcs_spc(c_ServiceName, "PACK_VAL");
	if (ptr_c_tmp == NULL)
	{
		fn_errlog(c_ServiceName, "L31010", LIBMSG, c_err_msg);
		return (-1);
	}
	i_pack_val = atoi(ptr_c_tmp);
	if (DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName, "PACK VAL IS :%d:", i_pack_val);
	}

	/**** Set Global Variables ****/
	i_ord_mkt_stts = FALSE;
	i_ext_mkt_stts = FALSE;
	i_exr_mkt_stts = FALSE;
	i_pmp_stts = FALSE;
	i_upd_stts = FALSE;

	/**
	i_look_tab = TRUE;**/

	i_part_stts = FALSE;
	i_brkr_stts = FALSE;
	i_exit_stts = DONT_EXIT;

	/**** Get exchange code from the database ****/

	EXEC SQL
		select opm_xchng_cd,
		opm_max_pnd_ord,
		opm_stream_no /*** Ver 3.4 ***/
			into : sql_c_xchng_cd,
		: sql_li_max_pnd_ord,
		: i_stream_count_opm /*** Ver 3.4 ***/
			  From opm_ord_pipe_mstr
				  where opm_pipe_id = : sql_c_pipe_id;

	if (SQLCODE != 0)
	{
		fn_errlog(c_ServiceName, "S31105", SQLMSG, c_err_msg);
		return (-1);
	}

	if (DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName, "Exchange code is :%s:", sql_c_xchng_cd);
	}

	EXEC SQL
		SELECT exg_settlor_stts,
		exg_brkr_stts,
		exg_crrnt_stts,
		exg_extnd_mrkt_stts,
		exg_exrc_mkt_stts
			INTO : sql_exg_settlor_stts,
		: sql_exg_brkr_stts,
		: sql_exg_crrnt_stts,
		: sql_exg_extnd_mrkt_stts,
		: sql_exg_exrc_mkt_stts
			  FROM exg_xchng_mstr
				  WHERE exg_xchng_cd = : sql_c_xchng_cd;

	if (SQLCODE != 0)
	{
		fn_errlog(c_ServiceName, "S31110", SQLMSG, c_err_msg);
		return (-1);
	}

	if (DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName, "Settlor status is :%c:", sql_exg_settlor_stts);
		fn_userlog(c_ServiceName, "broker status is :%c:", sql_exg_brkr_stts);
		fn_userlog(c_ServiceName, "exchange status is :%c:", sql_exg_crrnt_stts);
		fn_userlog(c_ServiceName, "extended market status is :%c:", sql_exg_extnd_mrkt_stts);
		fn_userlog(c_ServiceName, "exercise market status is :%c:", sql_exg_exrc_mkt_stts);
	}

	if (sql_exg_settlor_stts == 'A')
	{
		i_part_stts = TRUE;
	}

	if (sql_exg_brkr_stts == 'A')
	{
		i_brkr_stts = TRUE;
	}
	i_trnsctn = fn_begintran(c_ServiceName, c_err_msg);

	if (i_trnsctn == -1)
	{
		fn_errlog(c_ServiceName, "S31115", LIBMSG, c_err_msg);
		return (-1);
	}

	fn_userlog(c_ServiceName, "i_stream_count_opm :%d:", i_stream_count_opm);

	if (i_stream_count_opm == 0)
	{
		/*** Ver 3.4 Starts here ********/
		i_stream_count = 0;
		EXEC SQL
			SELECT NVL(MAX(FXB_STREAM_NO), 0)
				INTO : i_stream_count
						   FROM FXB_FO_XCHNG_BOOK
							   WHERE FXB_PIPE_ID = : sql_c_pipe_id
														 AND FXB_MOD_TRD_DT = trunc(sysdate)
															 AND FXB_STREAM_NO NOT IN('-1', '99');
		if (SQLCODE != 0)
		{
			fn_errlog(c_ServiceName, "S31120", SQLMSG, c_err_msg);
			return (-1);
		}

		if (i_stream_count < 9)
		{
			i_stream_count = 9;
		}

		fn_userlog(c_ServiceName, "MAX i_stream_count to be updated :%d:", i_stream_count);

		EXEC SQL
			UPDATE opm_ord_pipe_mstr
				SET opm_pmp_stts = 0,
					OPM_STREAM_NO = : i_stream_count
										  WHERE opm_pipe_id = : sql_c_pipe_id;
		if (SQLCODE != 0)
		{
			fn_errlog(c_ServiceName, "S31125", SQLMSG, c_err_msg);
			return (-1);
		}

	} /*** Ver 3.4 Ends here **********/
	else
	{
		EXEC SQL
			UPDATE opm_ord_pipe_mstr
				SET opm_pmp_stts = 0 WHERE opm_pipe_id = : sql_c_pipe_id;

		if (SQLCODE != 0)
		{
			fn_errlog(c_ServiceName, "S31130", SQLMSG, c_err_msg);
			return (-1);
		}
	}

	i_ch_val = fn_committran(c_ServiceName, i_trnsctn, c_err_msg);

	if (i_ch_val == -1)
	{
		fn_errlog(c_ServiceName, "S31135", LIBMSG, c_err_msg);
		return (-1);
	}

	sprintf(c_filter1, "FFO_FILTER=='%s'", sql_c_xchng_cd);
	sprintf(c_filter2, "FFO_FILTER=='%s'", sql_c_pipe_id);

	/**** Subscribe for triggers ****/

	li_ord_opn_hnd = tpsubscribe("TRG_ORD_OPN", (char *)c_filter1, (TPEVCTL *)NULL, 0);

	if (li_ord_opn_hnd == -1)
	{
		fn_errlog(c_ServiceName, "S31140", TPMSG, c_err_msg);
		return (-1);
	}

	li_ord_cls_hnd = tpsubscribe("TRG_ORD_CLS", (char *)c_filter1, (TPEVCTL *)NULL, 0);

	if (li_ord_cls_hnd == -1)
	{
		fn_errlog(c_ServiceName, "S31145", TPMSG, c_err_msg);
		return (-1);
	}

	li_ext_opn_hnd = tpsubscribe("TRG_EXT_OPN", (char *)c_filter1, (TPEVCTL *)NULL, 0);

	if (li_ext_opn_hnd == -1)
	{
		fn_errlog(c_ServiceName, "S31150", TPMSG, c_err_msg);
		return (-1);
	}

	li_ext_cls_hnd = tpsubscribe("TRG_EXT_CLS", (char *)c_filter1, (TPEVCTL *)NULL, 0);

	if (li_ext_cls_hnd == -1)
	{
		fn_errlog(c_ServiceName, "S31155", TPMSG, c_err_msg);
		return (-1);
	}

	li_exr_opn_hnd = tpsubscribe("TRG_EXR_OPN", (char *)c_filter1, (TPEVCTL *)NULL, 0);

	if (li_exr_opn_hnd == -1)
	{
		fn_errlog(c_ServiceName, "S31160", TPMSG, c_err_msg);
		return (-1);
	}

	li_exr_cls_hnd = tpsubscribe("TRG_EXR_CLS", (char *)c_filter1, (TPEVCTL *)NULL, 0);

	if (li_exr_cls_hnd == -1)
	{
		fn_errlog(c_ServiceName, "S31165", TPMSG, c_err_msg);
		return (-1);
	}

	li_part_sus_hnd = tpsubscribe("TRG_PART_SUS", (char *)c_filter1, (TPEVCTL *)NULL, 0);

	if (li_part_sus_hnd == -1)
	{
		fn_errlog(c_ServiceName, "S31170", TPMSG, c_err_msg);
		return (-1);
	}

	li_part_act_hnd = tpsubscribe("TRG_PART_ACT", (char *)c_filter1, (TPEVCTL *)NULL, 0);

	if (li_part_act_hnd == -1)
	{
		fn_errlog(c_ServiceName, "S31175", TPMSG, c_err_msg);
		return (-1);
	}

	li_brkr_sus_hnd = tpsubscribe("TRG_BRKR_SUS", (char *)c_filter1, (TPEVCTL *)NULL, 0);

	if (li_brkr_sus_hnd == -1)
	{
		fn_errlog(c_ServiceName, "S31180", TPMSG, c_err_msg);
		return (-1);
	}

	li_brkr_act_hnd = tpsubscribe("TRG_BRKR_ACT", (char *)c_filter1, (TPEVCTL *)NULL, 0);

	if (li_brkr_act_hnd == -1)
	{
		fn_errlog(c_ServiceName, "S31185", TPMSG, c_err_msg);
		return (-1);
	}

	li_strt_pmp_hnd = tpsubscribe("TRG_STRT_PMP", (char *)c_filter2, (TPEVCTL *)NULL, 0);

	if (li_strt_pmp_hnd == -1)
	{
		fn_errlog(c_ServiceName, "S31190", TPMSG, c_err_msg);
		return (-1);
	}

	li_stop_pmp_hnd = tpsubscribe("TRG_STOP_PMP", (char *)c_filter2, (TPEVCTL *)NULL, 0);

	if (li_stop_pmp_hnd == -1)
	{
		fn_errlog(c_ServiceName, "S31195", TPMSG, c_err_msg);
		return (-1);
	}

	li_reco_over_hnd = tpsubscribe("TRG_RECO_OVER", (char *)c_filter2, (TPEVCTL *)NULL, 0);

	if (li_reco_over_hnd == -1)
	{
		fn_errlog(c_ServiceName, "S31200", TPMSG, c_err_msg);
		return (-1);
	}

	EXEC SQL
		SELECT OPM_TRDR_ID,
		OPM_BRNCH_ID
			INTO : st_opm_mstr.c_opm_trdr_id,
		: st_opm_mstr.li_opm_brnch_id
			  FROM OPM_ORD_PIPE_MSTR
				  WHERE OPM_XCHNG_CD = : sql_c_xchng_cd
											 AND OPM_PIPE_ID = : sql_c_pipe_id;

	if (SQLCODE != 0)
	{
		fn_errlog(c_ServiceName, "S31205", SQLMSG, c_err_msg);
		return (-1);
	}

	if (DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName, "Trader ID is :%s:", st_opm_mstr.c_opm_trdr_id);
		fn_userlog(c_ServiceName, "Branch ID is :%ld:", st_opm_mstr.li_opm_brnch_id);
	}

	EXEC SQL
		Select exg_nxt_trd_dt,
		exg_brkr_id,
		exg_ctcl_id
			into : sql_c_nxt_trd_date,
		: st_opm_mstr.c_xchng_brkr_id,
		: sql_c_xchng_ctcl_id
			  From exg_xchng_mstr
				  Where exg_xchng_cd = : sql_c_xchng_cd;

	if (SQLCODE != 0)
	{
		fn_errlog(c_ServiceName, "S31210", SQLMSG, c_err_msg);
		return (-1);
	}

	SETNULL(sql_c_nxt_trd_date);

	if (DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName, "Next trade date is :%s:", sql_c_nxt_trd_date.arr);
		fn_userlog(c_ServiceName, "Broker id is :%s:", st_opm_mstr.c_xchng_brkr_id);
		fn_userlog(c_ServiceName, "CTCL id is :%s:", sql_c_xchng_ctcl_id);
	}

	if (c_reco_mode == 'B')
	{
		strcpy(c_tm_stmp, argv[6]);
		c_auto_connection = argv[7][0]; /** Ver 2.4 **/
	}
	else
	{
		strcpy(c_tm_stmp, " ");
	}

	ptr_c_tmp = (char *)fn_get_prcs_spc(c_ServiceName, "MAX_Q_CHK_INTERVAL");

	if (ptr_c_tmp == NULL)
	{
		fn_errlog(c_ServiceName, "S31215", LIBMSG, c_err_msg);
		return (-1);
	}

	li_max_q = atol(ptr_c_tmp);

	if (DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName, "Max pending orders in database is :%ld:", sql_li_max_pnd_ord);
		fn_userlog(c_ServiceName, "Max Queue Check Interval-:%ld:", li_max_q);
	}

	/*** Ver 3.2 Starts Here ***/
	i_ch_val = fn_chk_stts(c_ServiceName);

	if (i_ch_val == -1)
	{
		fn_errlog(c_ServiceName, "S31220", LIBMSG, c_err_msg);
	}
	/*** Ver 3.2 Ends here ***/

	i_ch_val = fn_do_reco(c_reco_mode, c_tm_stmp, c_ServiceName, c_err_msg);

	if (i_ch_val == -1)
	{
		return (-1);
	}

	li_seq_nm = 0;

	if (sql_exg_crrnt_stts == EXCHANGE_OPEN)
	{
		i_ord_mkt_stts = TRUE;
	}

	if (sql_exg_extnd_mrkt_stts == EXCHANGE_OPEN)
	{
		i_ext_mkt_stts = TRUE;
	}

	if (sql_exg_exrc_mkt_stts == EXCHANGE_OPEN)
	{
		i_exr_mkt_stts = TRUE;
	}

	fn_var = CLN_PACK_CLNT;

	return (0);
}


